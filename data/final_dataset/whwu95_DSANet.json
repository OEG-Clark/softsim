{"home.repos.pwc.inspect_result.whwu95_DSANet.None.test_recognizer.parse_args": [[22, 50], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.None.train_recognizer.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Test an action recognizer'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'mpi'", ",", "'slurm'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--average-clips'", ",", "\n", "choices", "=", "[", "'score'", ",", "'prob'", "]", ",", "\n", "default", "=", "'prob'", ",", "\n", "help", "=", "'average type when averaging test clips'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ",", "\n", "default", "=", "'default.pkl'", ")", "\n", "# only for TSN3D", "\n", "parser", ".", "add_argument", "(", "'--fcn_testing'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use fcn testing for 3D convnet'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.None.test_recognizer.main": [[52, 121], ["test_recognizer.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "dict", "print", "mmcv.runner.obj_from_dict", "codes.models.build_recognizer", "codes.utils.load_checkpoint", "codes.datasets.build_dataloader", "ValueError", "mmcv.Config.fromfile.model.update", "mmcv.Config.fromfile.model[].update", "dict", "dict", "codes.core.init_dist", "torch.nn.parallel.DistributedDataParallel", "codes.core.multi_gpu_test", "codes.core.get_dist_info", "torch.nn.parallel.DataParallel().cuda", "codes.core.single_gpu_test", "numpy.vstack", "mmcv.dump", "range", "codes.core.top_k_accuracy", "codes.core.mean_class_accuracy", "print", "print", "print", "parse_args.out.endswith", "DataParallel().cuda.cuda", "len", "gt_labels.append", "torch.nn.parallel.DataParallel", "torch.cuda.current_device", "range"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.None.train_recognizer.parse_args", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build_recognizer", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_checkpoint", "home.repos.pwc.inspect_result.whwu95_DSANet.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.init_dist", "home.repos.pwc.inspect_result.whwu95_DSANet.core.test.multi_gpu_test", "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.get_dist_info", "home.repos.pwc.inspect_result.whwu95_DSANet.core.test.single_gpu_test", "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.top_k_accuracy", "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.mean_class_accuracy"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", "\n", "args", "=", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "# pass arg of fcn testing", "\n", "if", "args", ".", "fcn_testing", ":", "\n", "        ", "cfg", ".", "model", ".", "update", "(", "{", "'fcn_testing'", ":", "True", "}", ")", "\n", "cfg", ".", "model", "[", "'cls_head'", "]", ".", "update", "(", "{", "'fcn_testing'", ":", "True", "}", ")", "\n", "\n", "", "if", "cfg", ".", "test_cfg", "is", "None", ":", "\n", "        ", "cfg", ".", "test_cfg", "=", "dict", "(", "average_clips", "=", "args", ".", "average_clips", ")", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "test_cfg", ".", "average_clips", "=", "args", ".", "average_clips", "\n", "\n", "", "cfg", ".", "test_cfg", "=", "dict", "(", "val_method", "=", "'DSA_val_method'", ")", "\n", "print", "(", "'DSA Test Mode!'", ")", "\n", "\n", "dataset", "=", "obj_from_dict", "(", "cfg", ".", "data", ".", "test", ",", "datasets", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "", "model", "=", "build_recognizer", "(", "cfg", ".", "model", ",", "train_cfg", "=", "None", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "num_gpus", "=", "1", "if", "distributed", "else", "cfg", ".", "gpus", ",", "\n", "videos_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "1", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "model", "=", "DistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ",", "device_ids", "=", "[", "\n", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ")", "\n", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "DataParallel", "(", "model", ",", "device_ids", "=", "range", "(", "cfg", ".", "gpus", ")", ")", ".", "cuda", "(", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ")", "\n", "rank", "=", "0", "\n", "\n", "", "if", "args", ".", "out", "and", "rank", "==", "0", ":", "\n", "        ", "results", "=", "np", ".", "vstack", "(", "outputs", ")", "\n", "mmcv", ".", "dump", "(", "results", ",", "args", ".", "out", ")", "\n", "\n", "gt_labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "            ", "ann", "=", "dataset", ".", "video_infos", "[", "i", "]", "\n", "gt_labels", ".", "append", "(", "ann", "[", "'label'", "]", ")", "\n", "\n", "", "top1", ",", "top5", "=", "top_k_accuracy", "(", "results", ",", "gt_labels", ",", "k", "=", "(", "1", ",", "5", ")", ")", "\n", "mean_acc", "=", "mean_class_accuracy", "(", "results", ",", "gt_labels", ")", "\n", "print", "(", "\"Mean Class Accuracy = {:.02f}\"", ".", "format", "(", "mean_acc", "*", "100", ")", ")", "\n", "print", "(", "\"Top-1 Accuracy = {:.02f}\"", ".", "format", "(", "top1", "*", "100", ")", ")", "\n", "print", "(", "\"Top-5 Accuracy = {:.02f}\"", ".", "format", "(", "top5", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.None.train_recognizer.parse_args": [[13, 45], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.None.train_recognizer.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a recognizer'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work_dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume_from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to evaluate the checkpoint during training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--autoscale-lr'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'automatically scale lr with the number of gpus'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.None.train_recognizer.main": [[47, 101], ["train_recognizer.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "codes.utils.get_root_logger", "codes.utils.get_root_logger.info", "codes.utils.get_root_logger.info", "codes.models.build_recognizer", "codes.core.train_network", "codes.core.get_dist_info", "codes.core.init_dist", "codes.utils.get_root_logger.info", "codes.core.set_random_seed", "codes.datasets.build_dataset", "len", "datasets.append", "print", "print", "codes.datasets.build_dataset"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.None.train_recognizer.parse_args", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build_recognizer", "home.repos.pwc.inspect_result.whwu95_DSANet.core.train.train_network", "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.get_dist_info", "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.init_dist", "home.repos.pwc.inspect_result.whwu95_DSANet.core.train.set_random_seed", "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.builder.build_dataset"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "# set cudnn_benchmark", "\n", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "# torch.backends.cudnn.deterministic = True", "\n", "\n", "# update configs according to CLI args", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "cfg", ".", "gpus", "=", "args", ".", "gpus", "\n", "\n", "if", "args", ".", "autoscale_lr", ":", "\n", "# apply the linear scaling rule (https://arxiv.org/abs/1706.02677)", "\n", "        ", "cfg", ".", "optimizer", "[", "'lr'", "]", "=", "cfg", ".", "optimizer", "[", "'lr'", "]", "*", "cfg", ".", "gpus", "/", "8", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# init logger before other steps", "\n", "", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "logger", ".", "info", "(", "'Distributed training: {}'", ".", "format", "(", "distributed", ")", ")", "\n", "logger", ".", "info", "(", "'Config: {}'", ".", "format", "(", "cfg", ".", "text", ")", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "'Set random seed to {}'", ".", "format", "(", "args", ".", "seed", ")", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "model", "=", "build_recognizer", "(", "cfg", ".", "model", ",", "train_cfg", "=", "cfg", ".", "train_cfg", ",", "test_cfg", "=", "cfg", ".", "test_cfg", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "\n", "if", "len", "(", "cfg", ".", "workflow", ")", "==", "2", ":", "\n", "        ", "datasets", ".", "append", "(", "build_dataset", "(", "cfg", ".", "data", ".", "val", ")", ")", "\n", "\n", "", "train_network", "(", "\n", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "args", ".", "validate", ",", "\n", "logger", "=", "logger", ")", "\n", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "print", "(", "\"Test this model by copy the command bellow:\"", ")", "\n", "print", "(", "\"bash dist_test_recognizer.sh {0} {1}/latest.pth 8\"", ".", "format", "(", "args", ".", "config", ",", "cfg", ".", "work_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.BaseStorageBackend.get": [[13, 16], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "get", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.BaseStorageBackend.get_text": [[17, 20], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_text", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.CephBackend.__init__": [[25, 32], ["ceph.S3Client", "ImportError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "ceph", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please install ceph to enable CephBackend.'", ")", "\n", "\n", "", "self", ".", "_client", "=", "ceph", ".", "S3Client", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.CephBackend.get": [[33, 37], ["file_client.CephBackend._client.Get", "memoryview"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "value", "=", "self", ".", "_client", ".", "Get", "(", "filepath", ")", "\n", "value_buf", "=", "memoryview", "(", "value", ")", "\n", "return", "value_buf", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.CephBackend.get_text": [[38, 40], ["None"], "methods", ["None"], ["", "def", "get_text", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.MemcachedBackend.__init__": [[52, 72], ["mc.MemcachedClient.GetInstance", "mc.pyvector", "sys.path.append", "ImportError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "server_list_cfg", "=", "\"/mnt/lustre/share/memcached_client/server_list.conf\"", ",", "\n", "client_cfg", "=", "\"/mnt/lustre/share/memcached_client/client.conf\"", ",", "\n", "sys_path", "=", "None", ")", ":", "\n", "        ", "if", "sys_path", "is", "not", "None", ":", "\n", "            ", "import", "sys", "\n", "sys", ".", "path", ".", "append", "(", "sys_path", ")", "\n", "", "try", ":", "\n", "            ", "import", "mc", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "'Please install memcached to enable MemcachedBackend.'", ")", "\n", "\n", "", "self", ".", "server_list_cfg", "=", "server_list_cfg", "\n", "self", ".", "client_cfg", "=", "client_cfg", "\n", "\n", "self", ".", "_client", "=", "mc", ".", "MemcachedClient", ".", "GetInstance", "(", "self", ".", "server_list_cfg", ",", "\n", "self", ".", "client_cfg", ")", "\n", "# mc.pyvector servers as a point which points to a memory cache", "\n", "self", ".", "_mc_buffer", "=", "mc", ".", "pyvector", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.MemcachedBackend.get": [[73, 78], ["file_client.MemcachedBackend._client.Get", "mc.ConvertBuffer"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "import", "mc", "\n", "self", ".", "_client", ".", "Get", "(", "filepath", ",", "self", ".", "_mc_buffer", ")", "\n", "value_buf", "=", "mc", ".", "ConvertBuffer", "(", "self", ".", "_mc_buffer", ")", "\n", "return", "value_buf", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.MemcachedBackend.get_text": [[79, 81], ["None"], "methods", ["None"], ["", "def", "get_text", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.HardDiskBackend.get": [[86, 90], ["open", "f.read"], "methods", ["None"], ["def", "get", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "with", "open", "(", "filepath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "value_buf", "=", "f", ".", "read", "(", ")", "\n", "", "return", "value_buf", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.HardDiskBackend.get_text": [[91, 95], ["open", "f.read"], "methods", ["None"], ["", "def", "get_text", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "value_buf", "=", "f", ".", "read", "(", ")", "\n", "", "return", "value_buf", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.FileClient.__init__": [[116, 123], ["ValueError", "list", "file_client.FileClient._backends.keys"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "backend", "=", "'disk'", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "backend", "not", "in", "self", ".", "_backends", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Backend {} is not supported. Currently supported ones are {}'", ".", "\n", "format", "(", "backend", ",", "list", "(", "self", ".", "_backends", ".", "keys", "(", ")", ")", ")", ")", "\n", "", "self", ".", "backend", "=", "backend", "\n", "self", ".", "client", "=", "self", ".", "_backends", "[", "backend", "]", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.FileClient.register_backend": [[124, 137], ["inspect.isclass", "TypeError", "issubclass", "TypeError", "callable", "AssertionError", "getattr", "type"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "register_backend", "(", "cls", ",", "name", ",", "backend", ")", ":", "\n", "        ", "if", "not", "inspect", ".", "isclass", "(", "backend", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'backend should be a class but got {}'", ".", "format", "(", "\n", "type", "(", "backend", ")", ")", ")", "\n", "", "if", "not", "issubclass", "(", "backend", ",", "BaseStorageBackend", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'backend {} is not a subclass of BaseStorageBackend'", ".", "format", "(", "\n", "backend", ")", ")", "\n", "", "if", "not", "callable", "(", "getattr", "(", "backend", ",", "'get'", ",", "None", ")", ")", ":", "\n", "            ", "raise", "AssertionError", "(", "'backend must implement `get()`'", ")", "\n", "\n", "", "cls", ".", "_backends", "[", "name", "]", "=", "backend", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.FileClient.get": [[138, 140], ["file_client.FileClient.client.get"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get"], ["", "def", "get", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "get", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.FileClient.get_text": [[141, 143], ["file_client.FileClient.client.get_text"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.file_client.FileClient.get_text"], ["", "def", "get_text", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "return", "self", ".", "client", ".", "get_text", "(", "filepath", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.logger.get_root_logger": [[8, 18], ["logging.getLogger", "mmcv.runner.get_dist_info", "logging.getLogger.hasHandlers", "logging.basicConfig", "logging.getLogger.setLevel"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.get_dist_info"], ["def", "get_root_logger", "(", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "not", "logger", ".", "hasHandlers", "(", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "\n", "format", "=", "'%(asctime)s - %(levelname)s - %(message)s'", ",", "\n", "level", "=", "log_level", ")", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "'ERROR'", ")", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.__init__": [[8, 11], ["dict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "self", ".", "_module_dict", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.__repr__": [[12, 16], ["list", "registry.Registry._module_dict.keys"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_str", "=", "self", ".", "__class__", ".", "__name__", "+", "'(name={}, items={})'", ".", "format", "(", "\n", "self", ".", "_name", ",", "list", "(", "self", ".", "_module_dict", ".", "keys", "(", ")", ")", ")", "\n", "return", "format_str", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.name": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.module_dict": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "module_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get": [[25, 27], ["registry.Registry._module_dict.get"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get"], ["", "def", "get", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_module_dict", ".", "get", "(", "key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry._register_module": [[28, 42], ["inspect.isclass", "TypeError", "KeyError", "type"], "methods", ["None"], ["", "def", "_register_module", "(", "self", ",", "module_class", ")", ":", "\n", "        ", "\"\"\"Register a module.\n\n        Args:\n            module (:obj:`nn.Module`): Module to be registered.\n        \"\"\"", "\n", "if", "not", "inspect", ".", "isclass", "(", "module_class", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'module must be a class, but got {}'", ".", "format", "(", "\n", "type", "(", "module_class", ")", ")", ")", "\n", "", "module_name", "=", "module_class", ".", "__name__", "\n", "if", "module_name", "in", "self", ".", "_module_dict", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is already registered in {}'", ".", "format", "(", "\n", "module_name", ",", "self", ".", "name", ")", ")", "\n", "", "self", ".", "_module_dict", "[", "module_name", "]", "=", "module_class", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.register_module": [[43, 46], ["registry.Registry._register_module"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry._register_module"], ["", "def", "register_module", "(", "self", ",", "cls", ")", ":", "\n", "        ", "self", ".", "_register_module", "(", "cls", ")", "\n", "return", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.build_from_cfg": [[48, 77], ["cfg.copy", "cfg.copy.pop", "mmcv.is_str", "registry.get.", "isinstance", "isinstance", "registry.get", "inspect.isclass", "default_args.items", "KeyError", "TypeError", "cfg.copy.setdefault", "type"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get"], ["", "", "def", "build_from_cfg", "(", "cfg", ",", "registry", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build a module from config dict.\n\n    Args:\n        cfg (dict): Config dict. It should at least contain the key \"type\".\n        registry (:obj:`Registry`): The registry to search the type from.\n        default_args (dict, optional): Default initialization arguments.\n\n    Returns:\n        obj: The constructed object.\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "assert", "isinstance", "(", "default_args", ",", "dict", ")", "or", "default_args", "is", "None", "\n", "args", "=", "cfg", ".", "copy", "(", ")", "\n", "obj_type", "=", "args", ".", "pop", "(", "'type'", ")", "\n", "if", "mmcv", ".", "is_str", "(", "obj_type", ")", ":", "\n", "        ", "obj_cls", "=", "registry", ".", "get", "(", "obj_type", ")", "\n", "if", "obj_cls", "is", "None", ":", "\n", "            ", "raise", "KeyError", "(", "'{} is not in the {} registry'", ".", "format", "(", "\n", "obj_type", ",", "registry", ".", "name", ")", ")", "\n", "", "", "elif", "inspect", ".", "isclass", "(", "obj_type", ")", ":", "\n", "        ", "obj_cls", "=", "obj_type", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'type must be a str or valid type, but got {}'", ".", "format", "(", "\n", "type", "(", "obj_type", ")", ")", ")", "\n", "", "if", "default_args", "is", "not", "None", ":", "\n", "        ", "for", "name", ",", "value", "in", "default_args", ".", "items", "(", ")", ":", "\n", "            ", "args", ".", "setdefault", "(", "name", ",", "value", ")", "\n", "", "", "return", "obj_cls", "(", "**", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.misc.params_count": [[8, 15], ["numpy.sum().item", "numpy.sum", "p.numel", "model.parameters"], "function", ["None"], ["def", "params_count", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    Compute the number of parameters.\n    Args:\n        model (model): model to count the number of parameters.\n    \"\"\"", "\n", "return", "np", ".", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.misc.gpu_mem_usage": [[17, 23], ["torch.cuda.max_memory_allocated"], "function", ["None"], ["", "def", "gpu_mem_usage", "(", ")", ":", "\n", "    ", "\"\"\"\n    Compute the GPU memory usage for the current device (MB).\n    \"\"\"", "\n", "mem_usage_bytes", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "\n", "return", "mem_usage_bytes", "/", "(", "1024", "*", "1024", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.misc.get_flop_stats": [[25, 46], ["input[].cuda", "flops_hook.profile", "input[].unsqueeze().cuda", "input[].unsqueeze().cuda", "input[].unsqueeze", "input[].unsqueeze"], "function", ["None"], ["", "def", "get_flop_stats", "(", "model", ",", "input", ")", ":", "\n", "    ", "\"\"\"\n    Compute the gflops for the current model given the config.\n    Args:\n        model (model): model to compute the flop counts.\n        cfg (CfgNode): configs. Details can be found in\n            slowfast/config/defaults.py\n        is_train (bool): if True, compute flops for training. Otherwise,\n            compute flops for testing.\n    Returns:\n        float: the total number of gflops of the given model.\n    \"\"\"", "\n", "input", "[", "'img_group'", "]", "=", "input", "[", "'img_group'", "]", ".", "cuda", "(", ")", "\n", "if", "'num_crops'", "in", "input", ":", "\n", "        ", "input", "[", "'num_crops'", "]", "=", "input", "[", "'num_crops'", "]", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "'num_clips'", "in", "input", ":", "\n", "        ", "input", "[", "'num_clips'", "]", "=", "input", "[", "'num_clips'", "]", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "total_flops", ",", "total_params", "=", "profile", "(", "model", ",", "input", ",", "verbose", "=", "False", ")", "\n", "return", "total_flops", ",", "total_params", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.misc.to_tensor": [[47, 66], ["isinstance", "isinstance", "torch.from_numpy", "isinstance", "torch.tensor", "isinstance", "mmcv.is_str", "torch.LongTensor", "isinstance", "torch.FloatTensor", "TypeError", "type"], "function", ["None"], ["", "def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n    \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'type {} cannot be converted to tensor.'", ".", "format", "(", "\n", "type", "(", "data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_state_dict": [[48, 110], ["getattr", "state_dict.copy.copy", "checkpoint.load_state_dict.load"], "function", ["None"], ["def", "load_state_dict", "(", "module", ",", "state_dict", ",", "strict", "=", "False", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Load state_dict to a module.\n\n    This method is modified from :meth:`torch.nn.Module.load_state_dict`.\n    Default value for ``strict`` is set to ``False`` and the message for\n    param mismatch will be shown even if strict is False.\n\n    Args:\n        module (Module): Module that receives the state_dict.\n        state_dict (OrderedDict): Weights.\n        strict (bool): whether to strictly enforce that the keys\n            in :attr:`state_dict` match the keys returned by this module's\n            :meth:`~torch.nn.Module.state_dict` function. Default: ``False``.\n        logger (:obj:`logging.Logger`, optional): Logger to log the error\n            message. If not specified, print function will be used.\n    \"\"\"", "\n", "unexpected_keys", "=", "[", "]", "\n", "all_missing_keys", "=", "[", "]", "\n", "err_msg", "=", "[", "]", "\n", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "        ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "# use _load_from_state_dict to enable checkpoint version control", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "\n", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "\n", "all_missing_keys", ",", "unexpected_keys", ",", "\n", "err_msg", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "if", "child", "is", "not", "None", ":", "\n", "                ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "", "", "", "load", "(", "module", ")", "\n", "load", "=", "None", "# break load->load reference cycle", "\n", "\n", "# ignore \"num_batches_tracked\" of BN layers", "\n", "missing_keys", "=", "[", "\n", "key", "for", "key", "in", "all_missing_keys", "if", "'num_batches_tracked'", "not", "in", "key", "\n", "]", "\n", "\n", "if", "unexpected_keys", ":", "\n", "        ", "err_msg", ".", "append", "(", "'unexpected key in source state_dict: {}\\n'", ".", "format", "(", "\n", "', '", ".", "join", "(", "unexpected_keys", ")", ")", ")", "\n", "", "if", "missing_keys", ":", "\n", "        ", "err_msg", ".", "append", "(", "'missing keys in source state_dict: {}\\n'", ".", "format", "(", "\n", "', '", ".", "join", "(", "missing_keys", ")", ")", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "len", "(", "err_msg", ")", ">", "0", "and", "rank", "==", "0", ":", "\n", "        ", "err_msg", ".", "insert", "(", "\n", "0", ",", "'The model and loaded state dict do not match exactly\\n'", ")", "\n", "err_msg", "=", "'\\n'", ".", "join", "(", "err_msg", ")", "\n", "if", "strict", ":", "\n", "            ", "raise", "RuntimeError", "(", "err_msg", ")", "\n", "", "elif", "logger", "is", "not", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "err_msg", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "err_msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_url_dist": [[112, 124], ["mmcv.runner.get_dist_info", "int", "os.environ.get", "os.environ.get", "torch.utils.model_zoo.load_url", "torch.distributed.barrier", "torch.utils.model_zoo.load_url"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.get_dist_info", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get"], ["", "", "", "def", "load_url_dist", "(", "url", ")", ":", "\n", "    ", "\"\"\" In distributed setting, this function only download checkpoint at\n    local rank 0 \"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "rank", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'LOCAL_RANK'", ",", "rank", ")", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "url", ")", "\n", "", "if", "world_size", ">", "1", ":", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "if", "rank", ">", "0", ":", "\n", "            ", "checkpoint", "=", "model_zoo", ".", "load_url", "(", "url", ")", "\n", "", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.get_torchvision_models": [[126, 136], ["dict", "pkgutil.walk_packages", "importlib.import_module", "hasattr", "getattr", "dict.update"], "function", ["None"], ["", "def", "get_torchvision_models", "(", ")", ":", "\n", "    ", "model_urls", "=", "dict", "(", ")", "\n", "for", "_", ",", "name", ",", "ispkg", "in", "pkgutil", ".", "walk_packages", "(", "torchvision", ".", "models", ".", "__path__", ")", ":", "\n", "        ", "if", "ispkg", ":", "\n", "            ", "continue", "\n", "", "_zoo", "=", "import_module", "(", "'torchvision.models.{}'", ".", "format", "(", "name", ")", ")", "\n", "if", "hasattr", "(", "_zoo", ",", "'model_urls'", ")", ":", "\n", "            ", "_urls", "=", "getattr", "(", "_zoo", ",", "'model_urls'", ")", "\n", "model_urls", ".", "update", "(", "_urls", ")", "\n", "", "", "return", "model_urls", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint._load_checkpoint": [[138, 173], ["filename.startswith", "warnings.warn", "checkpoint.get_torchvision_models", "checkpoint.load_url_dist", "filename.startswith", "checkpoint.get_torchvision_models", "checkpoint.load_url_dist", "filename.startswith", "checkpoint.load_url_dist", "filename.startswith", "checkpoint.load_url_dist", "filename.startswith", "checkpoint.load_url_dist", "torch.load", "os.isfile", "IOError"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.get_torchvision_models", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_url_dist", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.get_torchvision_models", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_url_dist", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_url_dist", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_url_dist", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_url_dist"], ["", "def", "_load_checkpoint", "(", "filename", ",", "map_location", "=", "None", ")", ":", "\n", "    ", "\"\"\"Load checkpoint from somewhere (modelzoo, file, url).\n\n    Args:\n        filename (str): Either a filepath or URI.\n        map_location (str | None): Same as :func:`torch.load`. Default: None.\n\n    Returns:\n        dict | OrderedDict: The loaded checkpoint. It can be either an\n            OrderedDict storing model weights or a dict containing other\n            information, which depends on the checkpoint.\n    \"\"\"", "\n", "if", "filename", ".", "startswith", "(", "'modelzoo://'", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "'The URL scheme of \"modelzoo://\" is deprecated, please '", "\n", "'use \"torchvision://\" instead'", ")", "\n", "model_urls", "=", "get_torchvision_models", "(", ")", "\n", "model_name", "=", "filename", "[", "11", ":", "]", "\n", "checkpoint", "=", "load_url_dist", "(", "model_urls", "[", "model_name", "]", ")", "\n", "", "elif", "filename", ".", "startswith", "(", "'torchvision://'", ")", ":", "\n", "        ", "model_urls", "=", "get_torchvision_models", "(", ")", "\n", "model_name", "=", "filename", "[", "14", ":", "]", "\n", "checkpoint", "=", "load_url_dist", "(", "model_urls", "[", "model_name", "]", ")", "\n", "", "elif", "filename", ".", "startswith", "(", "'gluonvision://'", ")", ":", "\n", "        ", "model_name", "=", "filename", "[", "14", ":", "]", "\n", "checkpoint", "=", "load_url_dist", "(", "gluonvision_model_urls", "[", "model_name", "]", ")", "\n", "", "elif", "filename", ".", "startswith", "(", "'open-mmlab://'", ")", ":", "\n", "        ", "model_name", "=", "filename", "[", "13", ":", "]", "\n", "checkpoint", "=", "load_url_dist", "(", "open_mmlab_model_urls", "[", "model_name", "]", ")", "\n", "", "elif", "filename", ".", "startswith", "(", "(", "'http://'", ",", "'https://'", ")", ")", ":", "\n", "        ", "checkpoint", "=", "load_url_dist", "(", "filename", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "osp", ".", "isfile", "(", "filename", ")", ":", "\n", "            ", "raise", "IOError", "(", "'{} is not a checkpoint file'", ".", "format", "(", "filename", ")", ")", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "map_location", ")", "\n", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_checkpoint": [[175, 215], ["checkpoint._load_checkpoint", "isinstance", "[].startswith", "hasattr", "checkpoint.load_state_dict", "checkpoint.load_state_dict", "isinstance", "isinstance", "RuntimeError", "list", "checkpoint[].items", "state_dict.keys"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint._load_checkpoint", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_state_dict", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_state_dict"], ["", "def", "load_checkpoint", "(", "model", ",", "\n", "filename", ",", "\n", "map_location", "=", "None", ",", "\n", "strict", "=", "False", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Load checkpoint from a file or URI.\n\n    Args:\n        model (Module): Module to load checkpoint.\n        filename (str): Either a filepath or URL or modelzoo://xxxxxxx.\n        map_location (str): Same as :func:`torch.load`.\n        strict (bool): Whether to allow different params for the model and\n            checkpoint.\n        logger (:mod:`logging.Logger` or None): The logger for error message.\n\n    Returns:\n        dict or OrderedDict: The loaded checkpoint.\n    \"\"\"", "\n", "checkpoint", "=", "_load_checkpoint", "(", "filename", ",", "map_location", ")", "\n", "\n", "# get state_dict from checkpoint", "\n", "if", "isinstance", "(", "checkpoint", ",", "OrderedDict", ")", ":", "\n", "        ", "state_dict", "=", "checkpoint", "\n", "", "elif", "isinstance", "(", "checkpoint", ",", "dict", ")", "and", "'state_dict'", "not", "in", "checkpoint", ":", "\n", "        ", "state_dict", "=", "checkpoint", "\n", "", "elif", "isinstance", "(", "checkpoint", ",", "dict", ")", "and", "'state_dict'", "in", "checkpoint", ":", "\n", "        ", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "'No state_dict found in checkpoint file {}'", ".", "format", "(", "filename", ")", ")", "\n", "\n", "# strip prefix of state_dict", "\n", "", "if", "list", "(", "state_dict", ".", "keys", "(", ")", ")", "[", "0", "]", ".", "startswith", "(", "'module.'", ")", ":", "\n", "        ", "state_dict", "=", "{", "k", "[", "7", ":", "]", ":", "v", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", "}", "\n", "# load state_dict", "\n", "", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "load_state_dict", "(", "model", ".", "module", ",", "state_dict", ",", "strict", ",", "logger", ")", "\n", "", "else", ":", "\n", "        ", "load_state_dict", "(", "model", ",", "state_dict", ",", "strict", ",", "logger", ")", "\n", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.weights_to_cpu": [[217, 230], ["collections.OrderedDict", "state_dict.items", "val.cpu"], "function", ["None"], ["", "def", "weights_to_cpu", "(", "state_dict", ")", ":", "\n", "    ", "\"\"\"Copy a model state_dict to cpu.\n\n    Args:\n        state_dict (OrderedDict): Model weights on GPU.\n\n    Returns:\n        OrderedDict: Model weights on GPU.\n    \"\"\"", "\n", "state_dict_cpu", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "val", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "state_dict_cpu", "[", "key", "]", "=", "val", ".", "cpu", "(", ")", "\n", "", "return", "state_dict_cpu", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.save_checkpoint": [[232, 263], ["meta.update", "mmcv.mkdir_or_exist", "hasattr", "torch.save", "os.dirname", "checkpoint.weights_to_cpu", "optimizer.state_dict", "isinstance", "TypeError", "time.asctime", "model.state_dict", "type"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.weights_to_cpu"], ["", "def", "save_checkpoint", "(", "model", ",", "filename", ",", "optimizer", "=", "None", ",", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Save checkpoint to file.\n\n    The checkpoint will have 3 fields: ``meta``, ``state_dict`` and\n    ``optimizer``. By default ``meta`` will contain version and time info.\n\n    Args:\n        model (Module): Module whose params are to be saved.\n        filename (str): Checkpoint filename.\n        optimizer (:obj:`Optimizer`, optional): Optimizer to be saved.\n        meta (dict, optional): Metadata to be saved in checkpoint.\n    \"\"\"", "\n", "if", "meta", "is", "None", ":", "\n", "        ", "meta", "=", "{", "}", "\n", "", "elif", "not", "isinstance", "(", "meta", ",", "dict", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'meta must be a dict or None, but got {}'", ".", "format", "(", "\n", "type", "(", "meta", ")", ")", ")", "\n", "", "meta", ".", "update", "(", "mmcv_version", "=", "mmcv", ".", "__version__", ",", "time", "=", "time", ".", "asctime", "(", ")", ")", "\n", "\n", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "dirname", "(", "filename", ")", ")", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "checkpoint", "=", "{", "\n", "'meta'", ":", "meta", ",", "\n", "'state_dict'", ":", "weights_to_cpu", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "}", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "        ", "checkpoint", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.rawframes_dataset.RawFramesDataset.__init__": [[36, 46], ["base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "ann_file", ",", "\n", "pipeline", ",", "\n", "data_root", "=", "None", ",", "\n", "test_mode", "=", "False", ",", "\n", "filename_tmpl", "=", "'img_{:05}.jpg'", ",", "\n", "modality", "=", "'RGB'", ")", ":", "\n", "        ", "super", "(", "RawFramesDataset", ",", "self", ")", ".", "__init__", "(", "ann_file", ",", "pipeline", ",", "\n", "data_root", ",", "test_mode", ",", "modality", ")", "\n", "self", ".", "filename_tmpl", "=", "filename_tmpl", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.rawframes_dataset.RawFramesDataset.load_annotations": [[47, 60], ["open", "line.split", "video_infos.append", "os.join", "dict", "int", "int"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "video_infos", "=", "[", "]", "\n", "with", "open", "(", "self", ".", "ann_file", ",", "'r'", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "frame_dir", ",", "total_frames", ",", "label", "=", "line", ".", "split", "(", "' '", ")", "\n", "if", "self", ".", "data_root", "is", "not", "None", ":", "\n", "                    ", "frame_dir", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "frame_dir", ")", "\n", "", "video_infos", ".", "append", "(", "\n", "dict", "(", "\n", "filename", "=", "frame_dir", ",", "\n", "total_frames", "=", "int", "(", "total_frames", ")", ",", "\n", "label", "=", "int", "(", "label", ")", ")", ")", "\n", "", "", "return", "video_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.rawframes_dataset.RawFramesDataset.prepare_frames": [[61, 67], ["copy.deepcopy", "rawframes_dataset.RawFramesDataset.pipeline"], "methods", ["None"], ["", "def", "prepare_frames", "(", "self", ",", "idx", ")", ":", "\n", "        ", "results", "=", "copy", ".", "deepcopy", "(", "self", ".", "video_infos", "[", "idx", "]", ")", "\n", "results", "[", "'filename_tmpl'", "]", "=", "self", ".", "filename_tmpl", "\n", "results", "[", "'modality'", "]", "=", "self", ".", "modality", "\n", "results", "[", "'test_mode'", "]", "=", "self", ".", "test_mode", "\n", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.base.BaseDataset.__init__": [[24, 34], ["torch.utils.data.Dataset.__init__", "pipelines.Compose", "base.BaseDataset.load_annotations"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.video_dataset.VideoDataset.load_annotations"], ["def", "__init__", "(", "self", ",", "ann_file", ",", "pipeline", ",", "data_root", "=", "None", ",", "\n", "test_mode", "=", "False", ",", "modality", "=", "None", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ann_file", "=", "ann_file", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "pipeline", "=", "Compose", "(", "pipeline", ")", "\n", "self", ".", "video_infos", "=", "self", ".", "load_annotations", "(", ")", "\n", "self", ".", "modality", "=", "modality", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.base.BaseDataset.load_annotations": [[35, 38], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.base.BaseDataset.prepare_frames": [[39, 44], ["copy.deepcopy", "base.BaseDataset.pipeline"], "methods", ["None"], ["", "def", "prepare_frames", "(", "self", ",", "idx", ")", ":", "\n", "        ", "results", "=", "copy", ".", "deepcopy", "(", "self", ".", "video_infos", "[", "idx", "]", ")", "\n", "results", "[", "'modality'", "]", "=", "self", ".", "modality", "\n", "results", "[", "'test_mode'", "]", "=", "self", ".", "test_mode", "\n", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.base.BaseDataset.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.base.BaseDataset.__getitem__": [[48, 50], ["base.BaseDataset.prepare_frames"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.datasets.base.BaseDataset.prepare_frames"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "prepare_frames", "(", "idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.video_dataset.VideoDataset.load_annotations": [[28, 37], ["open", "line.split", "video_infos.append", "os.join", "dict", "int"], "methods", ["None"], ["def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "video_infos", "=", "[", "]", "\n", "with", "open", "(", "self", ".", "ann_file", ",", "'r'", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "filename", ",", "label", "=", "line", ".", "split", "(", "' '", ")", "\n", "if", "self", ".", "data_root", "is", "not", "None", ":", "\n", "                    ", "filename", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "filename", ")", "\n", "", "video_infos", ".", "append", "(", "dict", "(", "filename", "=", "filename", ",", "label", "=", "int", "(", "label", ")", ")", ")", "\n", "", "", "return", "video_infos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.dataset_config.return_ucf101": [[9, 28], ["NotImplementedError"], "function", ["None"], ["def", "return_ucf101", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "'datalist/ucf101/classInd.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'UCF101/ucf101_rgb_img_340'", "\n", "filename_imglist_train", "=", "'datalist/ucf101/ucf101_rgb_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'.datalist/ucf101/ucf101_rgb_val_split_1.txt'", "\n", "filename_imglist_test", "=", "'datalist/ucf101/val_videofolder.txt'", "\n", "prefix", "=", "'image_{:04d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'UCF101/ucf101_flow_img_tvl1_gpu'", "\n", "filename_imglist_train", "=", "'datalist/ucf101/ucf101_flow_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'datalist/ucf101/ucf101_flow_val_split_1.txt'", "\n", "prefix", "=", "'flow_{}_{:04d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "filename_imglist_test", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.dataset_config.return_hmdb51": [[30, 49], ["NotImplementedError"], "function", ["None"], ["", "def", "return_hmdb51", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "51", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'HMDB51/hmdb51_rgb_img_256_340'", "\n", "filename_imglist_train", "=", "'datalist/hmdb51/hmdb51_rgb_train_split_1.txt'", "\n", "filename_imglist_val", "=", "'datalist/hmdb51/hmdb51_rgb_val_split_1.txt'", "\n", "filename_imglist_test", "=", "'datalist/hmdb51/test_videofolder.txt'", "\n", "prefix", "=", "'image_{:06d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'HMDB51/images'", "# don't exist yet", "\n", "filename_imglist_train", "=", "'datalist/hmdb51/train_videofolder.txt'", "\n", "filename_imglist_val", "=", "'datalist/hmdb51/test_videofolder.txt'", "\n", "filename_imglist_test", "=", "'datalist/hmdb51/test_videofolder.txt'", "\n", "prefix", "=", "'flow_{}_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "filename_imglist_test", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.dataset_config.return_something": [[51, 71], ["print"], "function", ["None"], ["", "def", "return_something", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "'datalist/something/v1/category.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'something/v1/20bn-something-something-v1'", "\n", "filename_imglist_train", "=", "'datalist/something/v1/train_videofolder.txt'", "\n", "filename_imglist_test", "=", "'datalist/something/v1/test_videofolder.txt'", "\n", "filename_imglist_val", "=", "'datalist/something/v1/val_videofolder.txt'", "\n", "prefix", "=", "'{:05d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'datalist/something/v1/flow'", "\n", "filename_imglist_train", "=", "'datalist/something/v1/train_videofolder_flow.txt'", "\n", "filename_imglist_val", "=", "'datalist/something/v1/val_videofolder_flow.txt'", "\n", "prefix", "=", "'{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "print", "(", "'no such modality:'", "+", "modality", ")", "\n", "raise", "NotImplementedError", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "filename_imglist_test", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.dataset_config.return_somethingv2": [[73, 93], ["NotImplementedError"], "function", ["None"], ["", "def", "return_somethingv2", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "'../datalist/something/v2/category.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'something/v2/20bn-something-something-v2-frames'", "\n", "filename_imglist_train", "=", "'datalist/something/v2/train_videofolder.txt'", "\n", "filename_imglist_val", "=", "'datalist/something/v2/val_videofolder.txt'", "\n", "filename_imglist_test", "=", "'datalist/something/v1/test_videofolder.txt'", "\n", "prefix", "=", "'{:06d}.jpg'", "\n", "", "elif", "modality", "==", "'Flow'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'something/v2/20bn-something-something-v2-flow'", "\n", "filename_imglist_train", "=", "'something/v2/train_videofolder_flow.txt'", "\n", "filename_imglist_val", "=", "'something/v2/val_videofolder_flow.txt'", "\n", "prefix", "=", "'{:06d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "filename_imglist_test", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.dataset_config.return_jester": [[95, 107], ["NotImplementedError"], "function", ["None"], ["", "def", "return_jester", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "'jester/category.txt'", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "prefix", "=", "'{:05d}.jpg'", "\n", "root_data", "=", "'datalist/jester/20bn-jester-v1'", "\n", "filename_imglist_train", "=", "'datalist/jester/train_videofolder.txt'", "\n", "filename_imglist_test", "=", "'datalist/something/v1/test_videofolder.txt'", "\n", "filename_imglist_val", "=", "'datalist/jester/val_videofolder.txt'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "filename_imglist_test", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.dataset_config.return_kinetics_400": [[109, 124], ["NotImplementedError"], "function", ["None"], ["", "def", "return_kinetics_400", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "400", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'Kinetics400'", "\n", "filename_imglist_train", "=", "'datalist/kinetics-400/kinetics_img_train_list.txt'", "\n", "filename_imglist_val", "=", "'datalist/kinetics-400/kinetics_img_val_list.txt'", "\n", "filename_imglist_test", "=", "'datalist/kinetics-400/kinetics_img_val_list.txt'", "\n", "prefix", "=", "'img_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "filename_imglist_test", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.dataset_config.return_kinetics_700": [[126, 138], ["NotImplementedError"], "function", ["None"], ["", "def", "return_kinetics_700", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "700", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'kinetics_700/train_frames'", "\n", "filename_imglist_train", "=", "'datalist/kinetics-700/train_videofolder.txt'", "\n", "filename_imglist_val", "=", "'datalist/kinetics-700/val_videofolder.txt'", "\n", "filename_imglist_test", "=", "''", "\n", "prefix", "=", "'image_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "filename_imglist_test", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.dataset_config.return_kinetics_600": [[140, 152], ["NotImplementedError"], "function", ["None"], ["", "def", "return_kinetics_600", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "600", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "root_data", "=", "ROOT_DATASET", "+", "'kinetics_600/train_frames'", "\n", "filename_imglist_train", "=", "'datalist/kinetics-600/train_videofolder.txt'", "\n", "filename_imglist_val", "=", "'datalist/kinetics-600/val_videofolder.txt'", "\n", "filename_imglist_test", "=", "''", "\n", "prefix", "=", "'image_{:05d}.jpg'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "filename_imglist_test", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.dataset_config.return_mmit": [[154, 167], ["NotImplementedError"], "function", ["None"], ["", "def", "return_mmit", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "313", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "prefix", "=", "'image_{:05d}.jpg'", "\n", "root_data", "=", "ROOT_DATASET", "+", "'Multi_Moments_in_Time/video_frames'", "\n", "filename_imglist_train", "=", "'datalist/mmit/train_videofolder.txt'", "# .balance'", "\n", "filename_imglist_val", "=", "'datalist/mmit/val_videofolder.txt'", "\n", "filename_imglist_test", "=", "'datalist/mmit/test_videofolder.txt'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "filename_imglist_test", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.dataset_config.return_mit": [[169, 182], ["NotImplementedError"], "function", ["None"], ["", "def", "return_mit", "(", "modality", ")", ":", "\n", "    ", "filename_categories", "=", "339", "\n", "if", "modality", "==", "'RGB'", ":", "\n", "        ", "prefix", "=", "'image_{:05d}.jpg'", "\n", "root_data", "=", "'datasets/mit2/'", "\n", "filename_imglist_train", "=", "'datalist/mit/train_videofolder.txt'", "# .balance'", "\n", "filename_imglist_val", "=", "'datalist/mit/val_videofolder.txt'", "\n", "filename_imglist_test", "=", "'datalist/mit/test_videofolder.txt'", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'no such modality:'", "+", "modality", ")", "\n", "", "return", "filename_categories", ",", "filename_imglist_train", ",", "filename_imglist_val", ",", "filename_imglist_test", ",", "root_data", ",", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.dataset_config.return_dataset": [[184, 212], ["isinstance", "len", "ValueError", "open", "f.readlines", "item.rstrip"], "function", ["None"], ["", "def", "return_dataset", "(", "dataset", ",", "modality", ")", ":", "\n", "    ", "dict_single", "=", "{", "'jester'", ":", "return_jester", ",", "'something'", ":", "return_something", ",", "\n", "'somethingv2'", ":", "return_somethingv2", ",", "'ucf101'", ":", "return_ucf101", ",", "\n", "'hmdb51'", ":", "return_hmdb51", ",", "\n", "'kinetics_400'", ":", "return_kinetics_400", ",", "\n", "'kinetics_700'", ":", "return_kinetics_700", ",", "\n", "'kinetics_600'", ":", "return_kinetics_600", ",", "\n", "'mmit'", ":", "return_mmit", ",", "'mit'", ":", "return_mit", "}", "\n", "if", "dataset", "in", "dict_single", ":", "\n", "        ", "file_categories", ",", "file_imglist_train", ",", "file_imglist_val", ",", "file_imglist_test", ",", "root_data", ",", "prefix", "=", "dict_single", "[", "dataset", "]", "(", "\n", "modality", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown dataset '", "+", "dataset", ")", "\n", "\n", "# file_imglist_train = os.path.join(ROOT_DATASET, file_imglist_train)", "\n", "# file_imglist_val = os.path.join(ROOT_DATASET, file_imglist_val)", "\n", "# file_imglist_test = os.path.join(ROOT_DATASET, file_imglist_test)", "\n", "", "if", "isinstance", "(", "file_categories", ",", "str", ")", ":", "\n", "# file_categories = os.path.join(ROOT_DATASET, file_categories)", "\n", "        ", "with", "open", "(", "file_categories", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "categories", "=", "[", "item", ".", "rstrip", "(", ")", "for", "item", "in", "lines", "]", "\n", "", "else", ":", "# number of categories", "\n", "        ", "categories", "=", "[", "None", "]", "*", "file_categories", "\n", "", "n_class", "=", "len", "(", "categories", ")", "\n", "return", "n_class", ",", "file_imglist_train", ",", "file_imglist_val", ",", "file_imglist_test", ",", "root_data", ",", "prefix", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.builder.RepeatDataset.__init__": [[39, 44], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "times", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "times", "=", "times", "\n", "\n", "self", ".", "_ori_len", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.builder.RepeatDataset.__getitem__": [[45, 47], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "idx", "%", "self", ".", "_ori_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.builder.RepeatDataset.__len__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "times", "*", "self", ".", "_ori_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.builder.build_dataset": [[7, 23], ["builder.RepeatDataset", "utils.build_from_cfg", "builder.build_dataset"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.whwu95_DSANet.datasets.builder.build_dataset"], ["def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build a dataset from config dict.\n\n    Args:\n        cfg (dict): Config dict. It should at least contain the key \"type\".\n        default_args (dict, optional): Default initialization arguments.\n\n    Returns:\n        The constructed dataset.\n    \"\"\"", "\n", "if", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "\n", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ",", "default_args", ")", ",", "cfg", "[", "'times'", "]", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ",", "default_args", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.SampleFrames.__init__": [[23, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "clip_len", ",", "\n", "frame_interval", "=", "1", ",", "\n", "num_clips", "=", "1", ",", "\n", "temporal_jitter", "=", "False", ",", "\n", "sth_samples", "=", "1", ")", ":", "\n", "        ", "self", ".", "clip_len", "=", "clip_len", "\n", "self", ".", "frame_interval", "=", "frame_interval", "\n", "self", ".", "num_clips", "=", "num_clips", "\n", "self", ".", "temporal_jitter", "=", "temporal_jitter", "\n", "self", ".", "sth_samples", "=", "sth_samples", "# for test sth-sth", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.SampleFrames._sample_clips": [[35, 61], ["numpy.arange", "numpy.random.randint", "max", "numpy.sort", "numpy.zeros", "numpy.random.randint"], "methods", ["None"], ["", "def", "_sample_clips", "(", "self", ",", "num_frames", ")", ":", "\n", "        ", "\"\"\"Choose frame indices for the video in training phase.\n        Calculate the average interval for selected frames, and randomly\n        shift them within offsets between [0, avg_interval]. If the total\n        number of frames is smaller than clips num or origin frames length,\n        it will return all zero indices.\n        Args:\n            num_frames (int): Total number of frame in the video.\n        Returns:\n            np.ndarray: Sampled frame indices (load image need to add 1).\n        \"\"\"", "\n", "ori_clip_len", "=", "self", ".", "clip_len", "*", "self", ".", "frame_interval", "\n", "avg_interval", "=", "(", "num_frames", "-", "ori_clip_len", "+", "1", ")", "//", "self", ".", "num_clips", "\n", "\n", "if", "avg_interval", ">", "0", ":", "\n", "            ", "base_offsets", "=", "np", ".", "arange", "(", "self", ".", "num_clips", ")", "*", "avg_interval", "\n", "clip_offsets", "=", "base_offsets", "+", "np", ".", "random", ".", "randint", "(", "\n", "avg_interval", ",", "size", "=", "self", ".", "num_clips", ")", "\n", "", "elif", "num_frames", ">", "max", "(", "self", ".", "num_clips", ",", "ori_clip_len", ")", ":", "\n", "            ", "clip_offsets", "=", "np", ".", "sort", "(", "\n", "np", ".", "random", ".", "randint", "(", "\n", "num_frames", "-", "ori_clip_len", "+", "1", ",", "size", "=", "self", ".", "num_clips", ")", ")", "\n", "", "else", ":", "\n", "            ", "clip_offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_clips", ",", ")", ")", "\n", "\n", "", "return", "clip_offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.SampleFrames._test_sample_clips": [[62, 95], ["float", "numpy.array", "numpy.zeros", "numpy.array", "range", "numpy.array", "numpy.array", "numpy.stack().reshape.append", "range", "numpy.stack().reshape", "int", "loading.SampleFrames._sample_clips().tolist", "float", "numpy.stack().reshape.append", "range", "int", "int", "int", "numpy.multiply", "numpy.random.randint", "numpy.stack", "range", "range", "loading.SampleFrames._sample_clips", "range", "list", "range"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.SampleFrames._sample_clips"], ["", "def", "_test_sample_clips", "(", "self", ",", "num_frames", ")", ":", "\n", "        ", "ori_clip_len", "=", "self", ".", "clip_len", "*", "self", ".", "frame_interval", "\n", "tick", "=", "(", "num_frames", "-", "ori_clip_len", "+", "1", ")", "/", "float", "(", "self", ".", "num_clips", ")", "\n", "\n", "if", "self", ".", "sth_samples", "==", "1", ":", "\n", "            ", "if", "tick", ">", "0", ":", "\n", "                ", "clip_offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "\n", "for", "x", "in", "range", "(", "self", ".", "num_clips", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "clip_offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_clips", ",", ")", ")", "\n", "", "", "elif", "self", ".", "sth_samples", "==", "2", ":", "\n", "            ", "clip_offsets", "=", "np", ".", "array", "(", "\n", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_clips", ")", "]", "+", "[", "\n", "int", "(", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_clips", ")", "]", ")", "\n", "", "elif", "self", ".", "sth_samples", "==", "10", ":", "\n", "            ", "offsets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "offsets", "+=", "self", ".", "_sample_clips", "(", "num_frames", ")", ".", "tolist", "(", ")", "\n", "", "clip_offsets", "=", "np", ".", "array", "(", "offsets", ")", "\n", "", "else", ":", "\n", "            ", "clip_offsets", "=", "[", "]", "\n", "offsets", "=", "np", ".", "array", "(", "\n", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_clips", ")", "]", ")", "\n", "clip_offsets", ".", "append", "(", "offsets", ")", "\n", "avg_duration", "=", "(", "\n", "num_frames", "-", "ori_clip_len", "+", "1", ")", "//", "float", "(", "self", ".", "num_clips", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "sth_samples", "-", "1", ")", ":", "\n", "                ", "offsets", "=", "np", ".", "multiply", "(", "\n", "list", "(", "range", "(", "self", ".", "num_clips", ")", ")", ",", "avg_duration", ")", "+", "np", ".", "random", ".", "randint", "(", "avg_duration", ",", "size", "=", "self", ".", "num_clips", ")", "\n", "clip_offsets", ".", "append", "(", "offsets", ")", "\n", "", "clip_offsets", "=", "np", ".", "stack", "(", "clip_offsets", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "", "return", "clip_offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.SampleFrames.__call__": [[96, 133], ["numpy.concatenate", "numpy.minimum", "numpy.minimum.astype", "mmcv.VideoReader", "len", "loading.SampleFrames._test_sample_clips", "loading.SampleFrames._sample_clips", "numpy.random.randint", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.SampleFrames._test_sample_clips", "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.SampleFrames._sample_clips"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "if", "'total_frames'", "not", "in", "results", ":", "\n", "# TODO: find a better way to get the total frames number for video", "\n", "            ", "video_reader", "=", "mmcv", ".", "VideoReader", "(", "results", "[", "'filename'", "]", ")", "\n", "total_frames", "=", "len", "(", "video_reader", ")", "\n", "results", "[", "'total_frames'", "]", "=", "total_frames", "\n", "", "else", ":", "\n", "            ", "total_frames", "=", "results", "[", "'total_frames'", "]", "\n", "\n", "", "if", "results", "[", "'test_mode'", "]", ":", "\n", "            ", "clip_offsets", "=", "self", ".", "_test_sample_clips", "(", "total_frames", ")", "\n", "", "else", ":", "\n", "            ", "clip_offsets", "=", "self", ".", "_sample_clips", "(", "total_frames", ")", "\n", "\n", "# size: [num_clip clip_len]", "\n", "", "frame_inds", "=", "clip_offsets", "[", ":", ",", "None", "]", "+", "np", ".", "arange", "(", "\n", "self", ".", "clip_len", ")", "[", "None", ",", ":", "]", "*", "self", ".", "frame_interval", "\n", "\n", "if", "self", ".", "temporal_jitter", ":", "\n", "            ", "perframe_offsets", "=", "np", ".", "random", ".", "randint", "(", "\n", "self", ".", "frame_interval", ",", "size", "=", "self", ".", "clip_len", ")", "\n", "# [num_clip clip_len] + [1 clip_len]", "\n", "#  each clip add a same jitter offset", "\n", "frame_inds", "+=", "perframe_offsets", "[", "None", ",", ":", "]", "\n", "\n", "# size: clip_len * num_clip", "\n", "", "frame_inds", "=", "np", ".", "concatenate", "(", "frame_inds", ")", "\n", "\n", "# if temporal_jitter, mabye out of range", "\n", "# frame_inds = np.mod(frame_inds, total_frames)", "\n", "frame_inds", "=", "np", ".", "minimum", "(", "frame_inds", ",", "total_frames", "-", "1", ")", "\n", "\n", "results", "[", "'frame_inds'", "]", "=", "frame_inds", ".", "astype", "(", "np", ".", "int", ")", "\n", "results", "[", "'clip_len'", "]", "=", "self", ".", "clip_len", "\n", "results", "[", "'frame_interval'", "]", "=", "self", ".", "frame_interval", "\n", "results", "[", "'num_clips'", "]", "=", "self", ".", "num_clips", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.PyAVDecode.__init__": [[145, 147], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "multi_thread", "=", "False", ")", ":", "\n", "        ", "self", ".", "multi_thread", "=", "multi_thread", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.PyAVDecode.__call__": [[148, 184], ["av.open", "list", "max", "av.open.decode", "numpy.array", "numpy.squeeze", "numpy.array.append", "len", "numpy.mod", "ImportError", "frame.to_rgb().to_ndarray", "len", "frame.to_rgb"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "av", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please run \"conda install av -c conda-forge\" '", "\n", "'or \"pip install av\" to install PyAV first.'", ")", "\n", "\n", "", "container", "=", "av", ".", "open", "(", "results", "[", "'filename'", "]", ")", "\n", "\n", "img_group", "=", "list", "(", ")", "\n", "\n", "if", "self", ".", "multi_thread", ":", "\n", "            ", "container", ".", "streams", ".", "video", "[", "0", "]", ".", "thread_type", "=", "'AUTO'", "\n", "", "if", "results", "[", "'frame_inds'", "]", ".", "ndim", "!=", "1", ":", "\n", "            ", "results", "[", "'frame_inds'", "]", "=", "np", ".", "squeeze", "(", "results", "[", "'frame_inds'", "]", ")", "\n", "\n", "# set max indice to make early stop", "\n", "", "max_inds", "=", "max", "(", "results", "[", "'frame_inds'", "]", ")", "\n", "i", "=", "0", "\n", "for", "frame", "in", "container", ".", "decode", "(", "video", "=", "0", ")", ":", "\n", "            ", "if", "i", ">", "max_inds", "+", "1", ":", "\n", "                ", "break", "\n", "", "img_group", ".", "append", "(", "frame", ".", "to_rgb", "(", ")", ".", "to_ndarray", "(", ")", ")", "\n", "i", "+=", "1", "\n", "\n", "", "img_group", "=", "np", ".", "array", "(", "img_group", ")", "\n", "# the available frame in pyav may be less than its length,", "\n", "# which may raise error", "\n", "if", "len", "(", "img_group", ")", "<=", "max_inds", ":", "\n", "            ", "results", "[", "'frame_inds'", "]", "=", "np", ".", "mod", "(", "results", "[", "'frame_inds'", "]", ",", "\n", "len", "(", "img_group", ")", ")", "\n", "\n", "", "img_group", "=", "img_group", "[", "results", "[", "'frame_inds'", "]", "]", "\n", "results", "[", "'img_group'", "]", "=", "img_group", "\n", "results", "[", "'ori_shape'", "]", "=", "img_group", "[", "0", "]", ".", "shape", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.PyAVDecode.__repr__": [[185, 188], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(multi_thread={})'", ".", "format", "(", "self", ".", "multi_thread", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.DecordDecode.__call__": [[198, 219], ["decord.VideoReader", "list", "numpy.squeeze", "container[].asnumpy", "list.append", "ImportError"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "decord", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "'Please run \"pip install decord\" to install Decord first.'", ")", "\n", "\n", "", "container", "=", "decord", ".", "VideoReader", "(", "results", "[", "'filename'", "]", ")", "\n", "img_group", "=", "list", "(", ")", "\n", "\n", "if", "results", "[", "'frame_inds'", "]", ".", "ndim", "!=", "1", ":", "\n", "            ", "results", "[", "'frame_inds'", "]", "=", "np", ".", "squeeze", "(", "results", "[", "'frame_inds'", "]", ")", "\n", "\n", "", "for", "frame_idx", "in", "results", "[", "'frame_inds'", "]", ":", "\n", "            ", "cur_frame", "=", "container", "[", "frame_idx", "]", ".", "asnumpy", "(", ")", "\n", "img_group", ".", "append", "(", "cur_frame", ")", "\n", "# img_group.append(cur_frame[:, :, ::-1])", "\n", "\n", "", "results", "[", "'img_group'", "]", "=", "img_group", "\n", "results", "[", "'ori_shape'", "]", "=", "img_group", "[", "0", "]", ".", "shape", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.OpenCVDecode.__call__": [[228, 256], ["mmcv.VideoReader", "list", "numpy.squeeze", "isinstance", "list.append", "type", "print"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "container", "=", "mmcv", ".", "VideoReader", "(", "results", "[", "'filename'", "]", ")", "\n", "img_group", "=", "list", "(", ")", "\n", "\n", "if", "results", "[", "'frame_inds'", "]", ".", "ndim", "!=", "1", ":", "\n", "            ", "results", "[", "'frame_inds'", "]", "=", "np", ".", "squeeze", "(", "results", "[", "'frame_inds'", "]", ")", "\n", "\n", "", "for", "frame_ind", "in", "results", "[", "'frame_inds'", "]", ":", "\n", "            ", "cur_frame", "=", "container", "[", "frame_ind", "]", "\n", "try", ":", "\n", "                ", "cur_frame", "=", "container", "[", "frame_ind", "]", "\n", "", "except", "IndexError", ":", "\n", "                ", "print", "(", "results", "[", "'filename'", "]", ",", "frame_ind", ",", "results", "[", "'total_frames'", "]", ")", "\n", "\n", "# last frame may be None in OpenCV", "\n", "", "while", "isinstance", "(", "cur_frame", ",", "type", "(", "None", ")", ")", ":", "\n", "                ", "frame_ind", "-=", "1", "\n", "cur_frame", "=", "container", "[", "frame_ind", "]", "\n", "", "img_group", ".", "append", "(", "cur_frame", ")", "\n", "\n", "# img_group = np.array(img_group)", "\n", "# The default channel order of OpenCV is BGR, thus we change it to RGB", "\n", "# img_group = img_group[:, :, :, ::-1]", "\n", "# imgs = imgs.transpose([0, 3, 1, 2])", "\n", "", "results", "[", "'img_group'", "]", "=", "img_group", "\n", "results", "[", "'ori_shape'", "]", "=", "img_group", "[", "0", "]", ".", "shape", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.FrameSelector.__init__": [[268, 272], ["utils.FileClient"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "io_backend", "=", "'disk'", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "io_backend", "=", "io_backend", "\n", "self", ".", "file_client", "=", "FileClient", "(", "self", ".", "io_backend", ",", "**", "kwargs", ")", "\n", "self", ".", "backup", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.FrameSelector._load_image": [[273, 282], ["loading.FrameSelector.file_client.get", "mmcv.imfrombytes", "print"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get"], ["", "def", "_load_image", "(", "self", ",", "filepath", ",", "flag", "=", "'color'", ")", ":", "\n", "        ", "value_buf", "=", "self", ".", "file_client", ".", "get", "(", "filepath", ")", "\n", "try", ":", "\n", "            ", "cur_frame", "=", "mmcv", ".", "imfrombytes", "(", "value_buf", ",", "flag", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "print", "(", "'imfrombytes error, reload backup'", ")", "\n", "cur_frame", "=", "self", ".", "backup", "\n", "# cur_frame = mmcv.imread(filepath)", "\n", "", "return", "cur_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.FrameSelector.__call__": [[283, 325], ["list", "numpy.squeeze", "list.extend", "os.join", "filename_tmpl.format", "loading.FrameSelector._load_image", "loading.FrameSelector._load_image", "loading.FrameSelector._load_image", "ValueError", "os.join", "os.join", "filename_tmpl.format", "filename_tmpl.format"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.FrameSelector._load_image", "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.FrameSelector._load_image", "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.loading.FrameSelector._load_image"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "directory", "=", "results", "[", "'filename'", "]", "\n", "filename_tmpl", "=", "results", "[", "'filename_tmpl'", "]", "\n", "\n", "imgs", "=", "list", "(", ")", "\n", "\n", "if", "results", "[", "'frame_inds'", "]", ".", "ndim", "!=", "1", ":", "\n", "            ", "results", "[", "'frame_inds'", "]", "=", "np", ".", "squeeze", "(", "results", "[", "'frame_inds'", "]", ")", "\n", "\n", "", "for", "frame_idx", "in", "results", "[", "'frame_inds'", "]", ":", "\n", "            ", "if", "results", "[", "'modality'", "]", "in", "[", "'RGB'", ",", "'RGBDiff'", "]", ":", "\n", "                ", "filepath", "=", "osp", ".", "join", "(", "\n", "directory", ",", "filename_tmpl", ".", "format", "(", "frame_idx", "+", "1", ")", ")", "\n", "cur_frame", "=", "[", "self", ".", "_load_image", "(", "filepath", ")", "]", "\n", "", "elif", "results", "[", "'modality'", "]", "==", "'Flow'", ":", "\n", "                ", "x_imgs", "=", "self", ".", "_load_image", "(", "\n", "osp", ".", "join", "(", "\n", "directory", ",", "filename_tmpl", ".", "format", "(", "\n", "'x'", ",", "frame_idx", "+", "1", ")", ")", ",", "flag", "=", "'grayscale'", ")", "\n", "y_imgs", "=", "self", ".", "_load_image", "(", "\n", "osp", ".", "join", "(", "\n", "directory", ",", "filename_tmpl", ".", "format", "(", "\n", "'y'", ",", "frame_idx", "+", "1", ")", ")", ",", "flag", "=", "'grayscale'", ")", "\n", "cur_frame", "=", "[", "x_imgs", ",", "y_imgs", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'Not implemented yet; modality should be '", "\n", "'[\"RGB\", \"RGBDiff\", \"Flow\"]'", ")", "\n", "\n", "", "imgs", ".", "extend", "(", "cur_frame", ")", "\n", "\n", "if", "self", ".", "backup", "is", "None", ":", "\n", "                ", "self", ".", "backup", "=", "cur_frame", "\n", "\n", "# # [num c h w]", "\n", "# imgs = np.array(imgs)", "\n", "# imgs = imgs.transpose([0, 3, 1, 2])", "\n", "", "", "results", "[", "'img_group'", "]", "=", "imgs", "\n", "# [h w c]", "\n", "results", "[", "'ori_shape'", "]", "=", "imgs", "[", "0", "]", ".", "shape", "\n", "\n", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.ToTensor.__init__": [[35, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.ToTensor.__call__": [[38, 42], ["formating.to_tensor"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.to_tensor"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "results", "[", "key", "]", "=", "to_tensor", "(", "results", "[", "key", "]", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.ToTensor.__repr__": [[43, 45], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(keys={})'", ".", "format", "(", "self", ".", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.ImageToTensor.__init__": [[50, 52], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.ImageToTensor.__call__": [[53, 57], ["formating.to_tensor", "results[].transpose"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.to_tensor"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "results", "[", "key", "]", "=", "to_tensor", "(", "results", "[", "key", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.ImageToTensor.__repr__": [[58, 60], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(keys={})'", ".", "format", "(", "self", ".", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.Transpose.__init__": [[65, 68], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "keys", ",", "order", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.Transpose.__call__": [[69, 73], ["results[].transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "results", "[", "key", "]", "=", "results", "[", "key", "]", ".", "transpose", "(", "self", ".", "order", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.Transpose.__repr__": [[74, 77], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(keys={}, order={})'", ".", "format", "(", "\n", "self", ".", "keys", ",", "self", ".", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.Collect.__init__": [[108, 114], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "keys", ",", "\n", "meta_keys", "=", "(", "'label'", ",", "'ori_shape'", ",", "'img_shape'", ",", "\n", "'modality'", ",", "'img_norm_cfg'", ")", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "self", ".", "meta_keys", "=", "meta_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.Collect.__call__": [[115, 127], ["len", "mmcv.parallel.DataContainer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "data", "=", "{", "}", "\n", "if", "len", "(", "self", ".", "meta_keys", ")", "!=", "0", ":", "\n", "            ", "img_meta", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "meta_keys", ":", "\n", "                ", "img_meta", "[", "key", "]", "=", "results", "[", "key", "]", "\n", "# data['img_meta'] = img_meta", "\n", "", "data", "[", "'img_meta'", "]", "=", "DC", "(", "img_meta", ",", "cpu_only", "=", "True", ")", "\n", "\n", "", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "data", "[", "key", "]", "=", "results", "[", "key", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.Collect.__repr__": [[128, 131], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "'(keys={}, meta_keys={})'", ".", "format", "(", "\n", "self", ".", "keys", ",", "self", ".", "meta_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.FormatShape.__init__": [[145, 149], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_format", "=", "'NCHW'", ")", ":", "\n", "        ", "assert", "input_format", "in", "[", "'NCHW'", ",", "'NCTHW'", "]", "\n", "# final input_format is BNCHW OR BNCTHW", "\n", "self", ".", "input_format", "=", "input_format", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.FormatShape.__call__": [[150, 186], ["numpy.stack", "img.transpose", "len", "numpy.stack", "img_group.reshape.reshape.reshape", "numpy.transpose", "img_group.reshape.reshape.reshape", "numpy.transpose", "img_group.reshape.reshape.reshape", "zip"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.stack"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_group", "=", "results", "[", "'img_group'", "]", "\n", "# transpose", "\n", "if", "results", "[", "'modality'", "]", "==", "'Flow'", ":", "\n", "            ", "assert", "len", "(", "img_group", "[", "0", "]", ".", "shape", ")", "==", "2", "\n", "img_group", "=", "[", "np", ".", "stack", "(", "(", "flow_x", ",", "flow_y", ")", ",", "axis", "=", "2", ")", "\n", "for", "flow_x", ",", "flow_y", "in", "zip", "(", "\n", "img_group", "[", "0", ":", ":", "2", "]", ",", "img_group", "[", "1", ":", ":", "2", "]", ")", "]", "\n", "", "img_group", "=", "[", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "for", "img", "in", "img_group", "]", "\n", "# Stack into numpy.array", "\n", "img_group", "=", "np", ".", "stack", "(", "img_group", ",", "axis", "=", "0", ")", "\n", "# [M x C x H x W]", "\n", "\n", "# M = 1 * N_oversample * N_clips * L", "\n", "num_clips", "=", "results", "[", "'num_clips'", "]", "\n", "clip_len", "=", "results", "[", "'clip_len'", "]", "\n", "if", "self", ".", "input_format", "==", "'NCTHW'", ":", "\n", "            ", "if", "clip_len", "==", "1", "and", "num_clips", ">", "1", ":", "\n", "# uniform sampling, num_clips mean clip_len", "\n", "                ", "img_group", "=", "img_group", ".", "reshape", "(", "\n", "(", "-", "1", ",", "num_clips", ")", "+", "img_group", ".", "shape", "[", "1", ":", "]", ")", "\n", "# N_over x N_clips x C x H x W", "\n", "img_group", "=", "np", ".", "transpose", "(", "img_group", ",", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ")", "\n", "# N_over x C x N_clips x H x W", "\n", "", "else", ":", "\n", "                ", "img_group", "=", "img_group", ".", "reshape", "(", "\n", "(", "-", "1", ",", "num_clips", ",", "clip_len", ")", "+", "img_group", ".", "shape", "[", "1", ":", "]", ")", "\n", "# N_over x N_clips x L x C x H x W", "\n", "img_group", "=", "np", ".", "transpose", "(", "img_group", ",", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ")", "\n", "# N_over x N_clips x C x L x H x W", "\n", "img_group", "=", "img_group", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "img_group", ".", "shape", "[", "2", ":", "]", ")", "\n", "# M' x C x L x H x W", "\n", "# M' = N_over x N_clips", "\n", "", "", "results", "[", "'img_group'", "]", "=", "img_group", "\n", "results", "[", "'input_shape'", "]", "=", "img_group", ".", "shape", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.FormatShape.__repr__": [[187, 190], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(input_format={})'", ".", "format", "(", "self", ".", "input_format", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.formating.to_tensor": [[11, 30], ["isinstance", "isinstance", "torch.from_numpy", "isinstance", "torch.tensor", "isinstance", "mmcv.is_str", "torch.LongTensor", "isinstance", "torch.FloatTensor", "TypeError", "type"], "function", ["None"], ["def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n    \"\"\"", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'type {} cannot be converted to tensor.'", ".", "format", "(", "\n", "type", "(", "data", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Resize.__init__": [[27, 35], ["isinstance", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", ",", "keep_ratio", "=", "True", ",", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "if", "isinstance", "(", "scale", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "if", "scale", "<=", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'Invalid scale {}, must be positive.'", ".", "format", "(", "scale", ")", ")", "\n", "", "", "self", ".", "scale", "=", "scale", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Resize.__call__": [[36, 61], ["list", "list", "numpy.array", "mmcv.imrescale", "zip", "mmcv.imresize", "zip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_group", "=", "results", "[", "'img_group'", "]", "\n", "if", "self", ".", "keep_ratio", ":", "\n", "            ", "tuple_list", "=", "[", "\n", "mmcv", ".", "imrescale", "(", "img", ",", "self", ".", "scale", ",", "return_scale", "=", "True", ")", "\n", "for", "img", "in", "img_group", "\n", "]", "\n", "img_group", ",", "scale_factors", "=", "list", "(", "zip", "(", "*", "tuple_list", ")", ")", "\n", "self", ".", "scale_factor", "=", "scale_factors", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "tuple_list", "=", "[", "\n", "mmcv", ".", "imresize", "(", "img", ",", "self", ".", "scale", ",", "return_scale", "=", "True", ")", "\n", "for", "img", "in", "img_group", "\n", "]", "\n", "img_group", ",", "w_scales", ",", "h_scales", "=", "list", "(", "zip", "(", "*", "tuple_list", ")", ")", "\n", "self", ".", "scale_factor", "=", "np", ".", "array", "(", "\n", "[", "w_scales", "[", "0", "]", ",", "h_scales", "[", "0", "]", ",", "w_scales", "[", "0", "]", ",", "h_scales", "[", "0", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "results", "[", "'img_group'", "]", "=", "img_group", "\n", "results", "[", "'img_shape'", "]", "=", "img_group", "[", "0", "]", ".", "shape", "\n", "results", "[", "'keep_ratio'", "]", "=", "self", ".", "keep_ratio", "\n", "results", "[", "'scale_fatcor'", "]", "=", "self", ".", "scale_factor", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Resize.__repr__": [[62, 67], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(scale={}, keep_ratio={}, interpolation={})'", ".", "format", "(", "self", ".", "scale", ",", "self", ".", "keep_ratio", ",", "self", ".", "interpolation", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.MultiScaleCrop.__init__": [[91, 104], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "input_size", ",", "\n", "scales", "=", "None", ",", "\n", "max_distort", "=", "1", ",", "\n", "fix_crop", "=", "True", ",", "\n", "more_fix_crop", "=", "True", ")", ":", "\n", "        ", "self", ".", "input_size", "=", "input_size", "if", "not", "isinstance", "(", "input_size", ",", "int", ")", "else", "(", "input_size", ",", "input_size", ")", "\n", "self", ".", "scales", "=", "scales", "if", "scales", "is", "not", "None", "else", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", "\n", "self", ".", "max_distort", "=", "max_distort", "\n", "self", ".", "fix_crop", "=", "fix_crop", "\n", "self", ".", "more_fix_crop", "=", "more_fix_crop", "\n", "self", ".", "interpolation", "=", "'bilinear'", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.MultiScaleCrop.__call__": [[105, 125], ["augmentations.MultiScaleCrop._sample_crop_size", "numpy.array", "mmcv.imcrop", "mmcv.imresize"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.MultiScaleCrop._sample_crop_size"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_group", "=", "results", "[", "'img_group'", "]", "\n", "img_h", ",", "img_w", "=", "img_group", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "\n", "crop_w", ",", "crop_h", ",", "offset_w", ",", "offset_h", "=", "self", ".", "_sample_crop_size", "(", "\n", "(", "img_w", ",", "img_h", ")", ")", "\n", "box", "=", "np", ".", "array", "(", "[", "offset_w", ",", "offset_h", ",", "offset_w", "+", "\n", "crop_w", "-", "1", ",", "offset_h", "+", "crop_h", "-", "1", "]", ")", "\n", "crop_img_group", "=", "[", "mmcv", ".", "imcrop", "(", "img", ",", "box", ")", "for", "img", "in", "img_group", "]", "\n", "ret_img_group", "=", "[", "mmcv", ".", "imresize", "(", "\n", "img", ",", "(", "self", ".", "input_size", "[", "0", "]", ",", "self", ".", "input_size", "[", "1", "]", ")", ",", "\n", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "for", "img", "in", "crop_img_group", "]", "\n", "\n", "results", "[", "'crop_bbox'", "]", "=", "box", "\n", "\n", "results", "[", "'img_group'", "]", "=", "ret_img_group", "\n", "results", "[", "'img_shape'", "]", "=", "ret_img_group", "[", "0", "]", ".", "shape", "\n", "results", "[", "'scales'", "]", "=", "self", ".", "scales", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.MultiScaleCrop._sample_crop_size": [[126, 152], ["min", "enumerate", "random.choice", "int", "enumerate", "random.randint", "random.randint", "augmentations.MultiScaleCrop._sample_fix_offset", "abs", "abs", "abs", "pairs.append"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.MultiScaleCrop._sample_fix_offset"], ["", "def", "_sample_crop_size", "(", "self", ",", "im_size", ")", ":", "\n", "        ", "image_w", ",", "image_h", "=", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", "\n", "\n", "# find a crop size", "\n", "base_size", "=", "min", "(", "image_w", ",", "image_h", ")", "\n", "crop_sizes", "=", "[", "int", "(", "base_size", "*", "x", ")", "for", "x", "in", "self", ".", "scales", "]", "\n", "crop_h", "=", "[", "self", ".", "input_size", "[", "1", "]", "if", "abs", "(", "\n", "x", "-", "self", ".", "input_size", "[", "1", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "crop_w", "=", "[", "self", ".", "input_size", "[", "0", "]", "if", "abs", "(", "\n", "x", "-", "self", ".", "input_size", "[", "0", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "\n", "pairs", "=", "[", "]", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "crop_h", ")", ":", "\n", "            ", "for", "j", ",", "w", "in", "enumerate", "(", "crop_w", ")", ":", "\n", "                ", "if", "abs", "(", "i", "-", "j", ")", "<=", "self", ".", "max_distort", ":", "\n", "                    ", "pairs", ".", "append", "(", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "", "", "crop_pair", "=", "random", ".", "choice", "(", "pairs", ")", "\n", "if", "not", "self", ".", "fix_crop", ":", "\n", "            ", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "image_w", "-", "crop_pair", "[", "0", "]", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "image_h", "-", "crop_pair", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "w_offset", ",", "h_offset", "=", "self", ".", "_sample_fix_offset", "(", "\n", "image_w", ",", "image_h", ",", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ")", "\n", "\n", "", "return", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ",", "w_offset", ",", "h_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.MultiScaleCrop._sample_fix_offset": [[153, 157], ["augmentations.MultiScaleCrop.fill_fix_offset", "random.choice"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.MultiScaleCrop.fill_fix_offset"], ["", "def", "_sample_fix_offset", "(", "self", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "offsets", "=", "self", ".", "fill_fix_offset", "(", "\n", "self", ".", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "return", "random", ".", "choice", "(", "offsets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.MultiScaleCrop.fill_fix_offset": [[158, 182], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fill_fix_offset", "(", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "ret", "=", "list", "(", ")", "\n", "ret", ".", "append", "(", "(", "0", ",", "0", ")", ")", "# upper left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "0", ")", ")", "# upper right", "\n", "ret", ".", "append", "(", "(", "0", ",", "4", "*", "h_step", ")", ")", "# lower left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "if", "more_fix_crop", ":", "\n", "            ", "ret", ".", "append", "(", "(", "0", ",", "2", "*", "h_step", ")", ")", "# center left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower center", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "0", "*", "h_step", ")", ")", "# upper center", "\n", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper right quarter", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower righ quarter", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.MultiScaleCrop.__repr__": [[183, 191], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "(", "'(input_size={}, scales={}, max_distort={}, fix_crop={}'", "\n", "'more_fix_crop={})'", ")", ".", "format", "(", "self", ".", "input_size", ",", "self", ".", "scales", ",", "\n", "self", ".", "max_distort", ",", "\n", "self", ".", "fix_crop", ",", "\n", "self", ".", "more_fix_crop", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Flip.__init__": [[207, 211], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "flip_ratio", "=", "0.5", ",", "direction", "=", "'horizontal'", ")", ":", "\n", "        ", "assert", "direction", "in", "[", "'horizontal'", ",", "'vertical'", "]", "\n", "self", ".", "flip_ratio", "=", "flip_ratio", "\n", "self", ".", "direction", "=", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Flip.__call__": [[212, 227], ["range", "numpy.random.rand", "mmcv.imflip", "len", "mmcv.iminvert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_group", "=", "results", "[", "'img_group'", "]", "\n", "flip", "=", "True", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "flip_ratio", "else", "False", "\n", "if", "flip", ":", "\n", "            ", "img_group", "=", "[", "mmcv", ".", "imflip", "(", "img", ",", "self", ".", "direction", ")", "\n", "for", "img", "in", "img_group", "]", "\n", "", "if", "results", "[", "'modality'", "]", "==", "'Flow'", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "img_group", ")", ",", "2", ")", ":", "\n", "                ", "img_group", "[", "i", "]", "=", "mmcv", ".", "iminvert", "(", "img_group", "[", "i", "]", ")", "\n", "\n", "", "", "results", "[", "'flip'", "]", "=", "flip", "\n", "results", "[", "'flip_direction'", "]", "=", "self", ".", "direction", "\n", "results", "[", "'img_group'", "]", "=", "img_group", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Flip.__repr__": [[228, 233], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(flip_ratio={}, direction={})'", ".", "format", "(", "\n", "self", ".", "flip_ratio", ",", "self", ".", "direction", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.__init__": [[237, 248], ["numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "color_space_aug", "=", "False", ",", "\n", "alphastd", "=", "0.1", ",", "eigval", "=", "None", ",", "eigvec", "=", "None", ")", ":", "\n", "        ", "if", "eigval", "is", "None", ":", "\n", "# note that the data range should be [0, 255]", "\n", "            ", "self", ".", "eigval", "=", "np", ".", "array", "(", "[", "55.46", ",", "4.794", ",", "1.148", "]", ")", "\n", "", "if", "eigvec", "is", "None", ":", "\n", "            ", "self", ".", "eigvec", "=", "np", ".", "array", "(", "[", "[", "-", "0.5675", ",", "0.7192", ",", "0.4009", "]", ",", "\n", "[", "-", "0.5808", ",", "-", "0.0045", ",", "-", "0.8140", "]", ",", "\n", "[", "-", "0.5836", ",", "-", "0.6948", ",", "0.4203", "]", "]", ")", "\n", "", "self", ".", "alphastd", "=", "alphastd", "\n", "self", ".", "color_space_aug", "=", "color_space_aug", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.brightnetss": [[249, 257], ["random.uniform", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "brightnetss", "(", "img", ",", "delta", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "0.5", ":", "\n", "# delta = np.random.uniform(-32, 32)", "\n", "            ", "delta", "=", "np", ".", "array", "(", "delta", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "img", "+", "delta", "\n", "# img_group = [img + delta for img in img_group]", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.contrast": [[258, 266], ["random.uniform", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "contrast", "(", "img", ",", "alpha", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "0.5", ":", "\n", "# alpha = np.random.uniform(0.6,1.4)", "\n", "            ", "alpha", "=", "np", ".", "array", "(", "alpha", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "img", "*", "alpha", "\n", "# img_group = [img * alpha for img in img_group]", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.saturation": [[267, 277], ["random.uniform", "numpy.sum", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "saturation", "(", "img", ",", "alpha", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "0.5", ":", "\n", "# alpha = np.random.uniform(0.6,1.4)", "\n", "            ", "gray", "=", "img", "*", "np", ".", "array", "(", "[", "0.299", ",", "0.587", ",", "0.114", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gray", "=", "np", ".", "sum", "(", "gray", ",", "2", ",", "keepdims", "=", "True", ")", "\n", "gray", "*=", "(", "1.0", "-", "alpha", ")", "\n", "img", "=", "img", "*", "alpha", "\n", "img", "=", "img", "+", "gray", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.hue": [[278, 298], ["random.uniform", "numpy.cos", "numpy.sin", "numpy.array", "numpy.array", "numpy.array", "numpy.array().astype", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "hue", "(", "img", ",", "alpha", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "0.5", ":", "\n", "# alpha = random.uniform(-18, 18)", "\n", "            ", "u", "=", "np", ".", "cos", "(", "alpha", "*", "np", ".", "pi", ")", "\n", "w", "=", "np", ".", "sin", "(", "alpha", "*", "np", ".", "pi", ")", "\n", "bt", "=", "np", ".", "array", "(", "[", "[", "1.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "u", ",", "-", "w", "]", ",", "\n", "[", "0.0", ",", "w", ",", "u", "]", "]", ")", "\n", "tyiq", "=", "np", ".", "array", "(", "[", "[", "0.299", ",", "0.587", ",", "0.114", "]", ",", "\n", "[", "0.596", ",", "-", "0.274", ",", "-", "0.321", "]", ",", "\n", "[", "0.211", ",", "-", "0.523", ",", "0.311", "]", "]", ")", "\n", "ityiq", "=", "np", ".", "array", "(", "[", "[", "1.0", ",", "0.956", ",", "0.621", "]", ",", "\n", "[", "1.0", ",", "-", "0.272", ",", "-", "0.647", "]", ",", "\n", "[", "1.0", ",", "-", "1.107", ",", "1.705", "]", "]", ")", "\n", "t", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "ityiq", ",", "bt", ")", ",", "tyiq", ")", ".", "T", "\n", "t", "=", "np", ".", "array", "(", "t", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "np", ".", "dot", "(", "img", ",", "t", ")", "\n", "# img_group = [np.dot(img, t) for img in img_group]", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.__call__": [[299, 327], ["numpy.random.normal", "numpy.array().astype", "numpy.expand_dims", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "random.uniform", "numpy.expand_dims", "augmentations.ColorJitter.brightnetss", "out.append", "numpy.array", "random.uniform", "augmentations.ColorJitter.contrast", "augmentations.ColorJitter.saturation", "augmentations.ColorJitter.hue", "augmentations.ColorJitter.saturation", "augmentations.ColorJitter.hue", "augmentations.ColorJitter.contrast", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.brightnetss", "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.contrast", "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.saturation", "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.hue", "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.saturation", "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.hue", "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.contrast"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_group", "=", "results", "[", "'img_group'", "]", "\n", "if", "self", ".", "color_space_aug", ":", "\n", "            ", "bright_delta", "=", "np", ".", "random", ".", "uniform", "(", "-", "32", ",", "32", ")", "\n", "contrast_alpha", "=", "np", ".", "random", ".", "uniform", "(", "0.6", ",", "1.4", ")", "\n", "saturation_alpha", "=", "np", ".", "random", ".", "uniform", "(", "0.6", ",", "1.4", ")", "\n", "hue_alpha", "=", "random", ".", "uniform", "(", "-", "18", ",", "18", ")", "\n", "out", "=", "[", "]", "\n", "for", "img", "in", "img_group", ":", "\n", "                ", "img", "=", "self", ".", "brightnetss", "(", "img", ",", "delta", "=", "bright_delta", ")", "\n", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "0.5", ":", "\n", "                    ", "img", "=", "self", ".", "contrast", "(", "img", ",", "alpha", "=", "contrast_alpha", ")", "\n", "img", "=", "self", ".", "saturation", "(", "img", ",", "alpha", "=", "saturation_alpha", ")", "\n", "img", "=", "self", ".", "hue", "(", "img", ",", "alpha", "=", "hue_alpha", ")", "\n", "", "else", ":", "\n", "                    ", "img", "=", "self", ".", "saturation", "(", "img", ",", "alpha", "=", "saturation_alpha", ")", "\n", "img", "=", "self", ".", "hue", "(", "img", ",", "alpha", "=", "hue_alpha", ")", "\n", "img", "=", "self", ".", "contrast", "(", "img", ",", "alpha", "=", "contrast_alpha", ")", "\n", "", "out", ".", "append", "(", "img", ")", "\n", "", "img_group", "=", "out", "\n", "\n", "", "alpha", "=", "np", ".", "random", ".", "normal", "(", "0", ",", "self", ".", "alphastd", ",", "size", "=", "(", "3", ",", ")", ")", "\n", "rgb", "=", "np", ".", "array", "(", "np", ".", "dot", "(", "self", ".", "eigvec", "*", "alpha", ",", "self", ".", "eigval", ")", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "bgr", "=", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "rgb", "[", ":", ":", "-", "1", "]", ",", "0", ")", ",", "0", ")", "\n", "img_group", "=", "[", "img", "+", "bgr", "for", "img", "in", "img_group", "]", "\n", "results", "[", "'img_group'", "]", "=", "img_group", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ColorJitter.__repr__": [[328, 333], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(color_space_aug={}, alphastd={})'", ".", "format", "(", "\n", "self", ".", "color_space_aug", ",", "self", ".", "alphastd", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Normalize.__init__": [[348, 353], ["numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "div_255", "=", "False", ",", "to_rgb", "=", "False", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "div_255", "=", "div_255", "\n", "self", ".", "to_rgb", "=", "to_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Normalize.imnormalize": [[360, 369], ["numpy.float64", "cv2.subtract", "cv2.multiply", "numpy.float32", "img.copy", "numpy.float64.reshape", "numpy.float64", "cv2.cvtColor", "std.reshape"], "methods", ["None"], ["", "def", "imnormalize", "(", "self", ",", "img", ",", "mean", ",", "std", ",", "to_rgb", "=", "True", ")", ":", "\n", "        ", "img", "=", "np", ".", "float32", "(", "img", ")", "if", "img", ".", "dtype", "!=", "np", ".", "float32", "else", "img", ".", "copy", "(", ")", "\n", "mean", "=", "np", ".", "float64", "(", "mean", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "stdinv", "=", "1", "/", "np", ".", "float64", "(", "std", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "if", "to_rgb", ":", "\n", "            ", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ",", "img", ")", "# inplace", "\n", "", "cv2", ".", "subtract", "(", "img", ",", "mean", ",", "img", ")", "# inplace, faster", "\n", "cv2", ".", "multiply", "(", "img", ",", "stdinv", ",", "img", ")", "# inplace, faster", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Normalize.__call__": [[370, 383], ["dict", "augmentations.Normalize.imnormalize", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Normalize.imnormalize"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_group", "=", "results", "[", "'img_group'", "]", "\n", "if", "self", ".", "div_255", ":", "\n", "            ", "img_group", "=", "[", "np", ".", "float32", "(", "img", ")", "/", "255", "for", "img", "in", "img_group", "]", "\n", "\n", "", "img_group", "=", "[", "self", ".", "imnormalize", "(", "\n", "img", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "to_rgb", ")", "for", "img", "in", "img_group", "]", "\n", "\n", "results", "[", "'img_group'", "]", "=", "img_group", "\n", "results", "[", "'img_norm_cfg'", "]", "=", "dict", "(", "\n", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ",", "\n", "div_255", "=", "self", ".", "div_255", ",", "to_rgb", "=", "self", ".", "to_rgb", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Normalize.__repr__": [[384, 389], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(mean={}, std={}, to_rgb={})'", ".", "format", "(", "\n", "self", ".", "mean", ",", "self", ".", "std", ",", "self", ".", "to_rgb", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Pad.__init__": [[403, 405], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "divisor", ")", ":", "\n", "        ", "self", ".", "divisor", "=", "divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Pad.__call__": [[406, 412], ["mmcv.impad_to_multiple"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_group", "=", "[", "mmcv", ".", "impad_to_multiple", "(", "\n", "img", ",", "self", ".", "divisor", ")", "for", "img", "in", "results", "[", "'img_group'", "]", "]", "\n", "\n", "results", "[", "'img_group'", "]", "=", "img_group", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.Pad.__repr__": [[413, 417], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(divisor={})'", ".", "format", "(", "self", ".", "divisor", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.CenterCrop.__init__": [[431, 437], ["isinstance", "mmcv.is_tuple_of"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "crop_size", "=", "224", ")", ":", "\n", "        ", "if", "isinstance", "(", "crop_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "crop_size", "=", "(", "crop_size", ",", "crop_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "crop_size", "=", "crop_size", "\n", "", "assert", "mmcv", ".", "is_tuple_of", "(", "self", ".", "crop_size", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.CenterCrop.__call__": [[438, 452], ["numpy.array", "mmcv.imcrop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_group", "=", "results", "[", "'img_group'", "]", "\n", "\n", "img_h", ",", "img_w", "=", "img_group", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "x1", "=", "(", "img_w", "-", "crop_w", ")", "//", "2", "\n", "y1", "=", "(", "img_h", "-", "crop_h", ")", "//", "2", "\n", "box", "=", "np", ".", "array", "(", "[", "x1", ",", "y1", ",", "x1", "+", "crop_w", "-", "1", ",", "y1", "+", "crop_h", "-", "1", "]", ")", "\n", "results", "[", "'img_group'", "]", "=", "[", "mmcv", ".", "imcrop", "(", "img", ",", "box", ")", "for", "img", "in", "img_group", "]", "\n", "results", "[", "'crop_bbox'", "]", "=", "box", "\n", "results", "[", "'img_shape'", "]", "=", "results", "[", "'img_group'", "]", "[", "0", "]", ".", "shape", "\n", "results", "[", "'num_crops'", "]", "=", "1", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.CenterCrop.__repr__": [[453, 457], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(crop_size={})'", ".", "format", "(", "self", ".", "crop_size", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ThreeCrop.__init__": [[472, 478], ["isinstance", "mmcv.is_tuple_of"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "crop_size", ")", ":", "\n", "        ", "if", "isinstance", "(", "crop_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "crop_size", "=", "(", "crop_size", ",", "crop_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "crop_size", "=", "crop_size", "\n", "", "assert", "mmcv", ".", "is_tuple_of", "(", "self", ".", "crop_size", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ThreeCrop.__call__": [[479, 531], ["list", "list", "list", "enumerate", "list.extend", "list", "list.append", "list.append", "list.append", "mmcv.imcrop", "list.append", "mmcv.imflip", "numpy.array", "list.append", "list.append", "mmcv.iminvert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_group", "=", "results", "[", "'img_group'", "]", "\n", "img_h", ",", "img_w", "=", "img_group", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "# assert crop_h == img_h or crop_w == img_w", "\n", "\n", "if", "crop_h", "==", "img_h", ":", "\n", "            ", "w_step", "=", "(", "img_w", "-", "crop_w", ")", "//", "2", "\n", "offsets", "=", "[", "\n", "(", "0", ",", "0", ")", ",", "# left", "\n", "(", "2", "*", "w_step", ",", "0", ")", ",", "# right", "\n", "(", "w_step", ",", "0", ")", ",", "# middle", "\n", "]", "\n", "", "elif", "crop_w", "==", "img_w", ":", "\n", "            ", "h_step", "=", "(", "img_h", "-", "crop_h", ")", "//", "2", "\n", "offsets", "=", "[", "\n", "(", "0", ",", "0", ")", ",", "# top", "\n", "(", "0", ",", "2", "*", "h_step", ")", ",", "# down", "\n", "(", "0", ",", "h_step", ")", ",", "# middle", "\n", "]", "\n", "", "else", ":", "\n", "            ", "w_step", "=", "(", "img_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "img_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "offsets", "=", "list", "(", ")", "\n", "offsets", ".", "append", "(", "(", "0", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# left", "\n", "offsets", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# right", "\n", "offsets", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center            ", "\n", "\n", "", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n", "flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "mmcv", ".", "imcrop", "(", "img", ",", "np", ".", "array", "(", "\n", "[", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", "-", "1", ",", "o_h", "+", "crop_h", "-", "1", "]", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "flip_crop", "=", "mmcv", ".", "imflip", "(", "crop", ")", "\n", "\n", "if", "results", "[", "'modality'", "]", "==", "'Flow'", "and", "i", "%", "2", "==", "0", ":", "\n", "                    ", "flip_group", ".", "append", "(", "mmcv", ".", "iminvert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                    ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "\n", "", "results", "[", "'img_group'", "]", "=", "oversample_group", "\n", "results", "[", "'crop_bbox'", "]", "=", "None", "\n", "results", "[", "'img_shape'", "]", "=", "results", "[", "'img_group'", "]", "[", "0", "]", ".", "shape", "\n", "results", "[", "'num_crops'", "]", "=", "3", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.ThreeCrop.__repr__": [[532, 536], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(crop_size={})'", ".", "format", "(", "self", ".", "crop_size", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.TenCrop.__init__": [[551, 557], ["isinstance", "mmcv.is_tuple_of"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "crop_size", "=", "224", ")", ":", "\n", "        ", "if", "isinstance", "(", "crop_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "crop_size", "=", "(", "crop_size", ",", "crop_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "crop_size", "=", "crop_size", "\n", "", "assert", "mmcv", ".", "is_tuple_of", "(", "self", ".", "crop_size", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.TenCrop.__call__": [[558, 587], ["augmentations.MultiScaleCrop.fill_fix_offset", "list", "list", "list", "enumerate", "list.extend", "list.extend", "mmcv.imcrop", "list.append", "mmcv.imflip", "numpy.array", "list.append", "list.append", "mmcv.iminvert"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.MultiScaleCrop.fill_fix_offset"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_group", "=", "results", "[", "'img_group'", "]", "\n", "img_h", ",", "img_w", "=", "img_group", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "offsets", "=", "MultiScaleCrop", ".", "fill_fix_offset", "(", "\n", "False", ",", "img_w", ",", "img_h", ",", "crop_w", ",", "crop_h", ")", "\n", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n", "flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "mmcv", ".", "imcrop", "(", "img", ",", "np", ".", "array", "(", "\n", "[", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", "-", "1", ",", "o_h", "+", "crop_h", "-", "1", "]", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "flip_crop", "=", "mmcv", ".", "imflip", "(", "crop", ")", "\n", "\n", "if", "results", "[", "'modality'", "]", "==", "'Flow'", "and", "i", "%", "2", "==", "0", ":", "\n", "                    ", "flip_group", ".", "append", "(", "mmcv", ".", "iminvert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                    ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "oversample_group", ".", "extend", "(", "flip_group", ")", "\n", "", "results", "[", "'img_group'", "]", "=", "oversample_group", "\n", "results", "[", "'crop_bbox'", "]", "=", "None", "\n", "results", "[", "'img_shape'", "]", "=", "results", "[", "'img_group'", "]", "[", "0", "]", ".", "shape", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.TenCrop.__repr__": [[588, 592], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(crop_size={})'", ".", "format", "(", "self", ".", "crop_size", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.RandomResizedCrop.__init__": [[596, 605], ["isinstance", "mmcv.is_tuple_of"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "\n", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "input_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "input_size", "=", "(", "input_size", ",", "input_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_size", "=", "input_size", "\n", "", "assert", "mmcv", ".", "is_tuple_of", "(", "self", ".", "input_size", ",", "int", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.RandomResizedCrop.get_params": [[606, 639], ["range", "min", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "img", ",", "scale", ",", "ratio", ")", ":", "\n", "        ", "\"\"\"Get parameters for ``crop`` for a random sized crop.\n        Args:\n            img (PIL Image): Image to be cropped.\n            scale (tuple): range of size of the origin size cropped\n            ratio (tuple): range of aspect ratio of the origin aspect ratio\n                           cropped\n        Returns:\n            tuple: params (i, j, h, w) to be passed to ``crop`` for a random\n                sized crop.\n        \"\"\"", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "shape", "[", "0", "]", "*", "img", ".", "shape", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "*", "scale", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "*", "ratio", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "shape", "[", "0", "]", "and", "h", "<=", "img", ".", "shape", "[", "1", "]", ":", "\n", "                ", "i", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "1", "]", "-", "h", ")", "\n", "j", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "shape", "[", "0", "]", "-", "w", ")", "\n", "return", "i", ",", "j", ",", "h", ",", "w", "\n", "\n", "# Fallback", "\n", "", "", "w", "=", "min", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "i", "=", "(", "img", ".", "shape", "[", "1", "]", "-", "w", ")", "//", "2", "\n", "j", "=", "(", "img", ".", "shape", "[", "0", "]", "-", "w", ")", "//", "2", "\n", "return", "i", ",", "j", ",", "w", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.RandomResizedCrop.__call__": [[640, 659], ["augmentations.RandomResizedCrop.get_params", "numpy.array", "mmcv.imresize", "mmcv.imcrop"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.RandomResizedCrop.get_params"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            clip (list of PIL Image): list of Image to be cropped and resized.\n        Returns:\n            list of PIL Image: Randomly cropped and resized image.\n        \"\"\"", "\n", "img_group", "=", "results", "[", "'img_group'", "]", "\n", "\n", "x1", ",", "y1", ",", "crop_h", ",", "crop_w", "=", "self", ".", "get_params", "(", "\n", "img_group", "[", "0", "]", ",", "self", ".", "scale", ",", "self", ".", "ratio", ")", "\n", "box", "=", "np", ".", "array", "(", "[", "x1", ",", "y1", ",", "x1", "+", "crop_w", "-", "1", ",", "y1", "+", "crop_h", "-", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "results", "[", "'img_group'", "]", "=", "[", "mmcv", ".", "imresize", "(", "mmcv", ".", "imcrop", "(", "\n", "img", ",", "box", ")", ",", "self", ".", "input_size", ")", "for", "img", "in", "img_group", "]", "\n", "results", "[", "'crop_bbox'", "]", "=", "box", "\n", "results", "[", "'img_shape'", "]", "=", "results", "[", "'img_group'", "]", "[", "0", "]", ".", "shape", "\n", "results", "[", "'num_crops'", "]", "=", "1", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.RandomResizedCrop.__repr__": [[660, 664], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(input_size={})'", ".", "format", "(", "self", ".", "input_size", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.RandomRescaledCrop.__init__": [[668, 675], ["isinstance", "mmcv.is_tuple_of"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "scale", "=", "(", "256", ",", "320", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "input_size", ",", "int", ")", ":", "\n", "            ", "self", ".", "input_size", "=", "(", "input_size", ",", "input_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "input_size", "=", "input_size", "\n", "", "assert", "mmcv", ".", "is_tuple_of", "(", "self", ".", "input_size", ",", "int", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.RandomRescaledCrop.__call__": [[676, 697], ["float", "max", "random.randint", "random.randint", "numpy.array", "random.randint", "mmcv.imrescale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img_group", "=", "results", "[", "'img_group'", "]", "\n", "shortedge", "=", "float", "(", "random", ".", "randint", "(", "*", "self", ".", "scale", ")", ")", "\n", "\n", "w", ",", "h", ",", "_", "=", "img_group", "[", "0", "]", ".", "shape", "\n", "scale", "=", "max", "(", "shortedge", "/", "w", ",", "shortedge", "/", "h", ")", "\n", "img_group", "=", "[", "mmcv", ".", "imrescale", "(", "img", ",", "scale", ")", "for", "img", "in", "img_group", "]", "\n", "w", ",", "h", ",", "_", "=", "img_group", "[", "0", "]", ".", "shape", "\n", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "input_size", "[", "0", "]", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "input_size", "[", "1", "]", ")", "\n", "\n", "box", "=", "np", ".", "array", "(", "[", "w_offset", ",", "h_offset", ",", "\n", "w_offset", "+", "self", ".", "input_size", "[", "0", "]", "-", "1", ",", "\n", "h_offset", "+", "self", ".", "input_size", "[", "1", "]", "-", "1", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "results", "[", "'img_group'", "]", "=", "[", "\n", "img", "[", "w_offset", ":", "w_offset", "+", "self", ".", "input_size", "[", "0", "]", ",", "\n", "h_offset", ":", "h_offset", "+", "self", ".", "input_size", "[", "1", "]", "]", "for", "img", "in", "img_group", "]", "\n", "results", "[", "'crop_bbox'", "]", "=", "box", "\n", "results", "[", "'img_shape'", "]", "=", "results", "[", "'img_group'", "]", "[", "0", "]", ".", "shape", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.augmentations.RandomRescaledCrop.__repr__": [[698, 702], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "'(input_size={})'", ".", "format", "(", "self", ".", "input_size", ")", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.compose.Compose.__init__": [[16, 29], ["isinstance", "isinstance", "utils.build_from_cfg", "compose.Compose.transforms.append", "callable", "compose.Compose.transforms.append", "TypeError", "type"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.build_from_cfg"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "assert", "isinstance", "(", "transforms", ",", "Sequence", ")", "\n", "self", ".", "transforms", "=", "[", "]", "\n", "for", "transform", "in", "transforms", ":", "\n", "            ", "if", "isinstance", "(", "transform", ",", "dict", ")", ":", "\n", "                ", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "elif", "callable", "(", "transform", ")", ":", "\n", "                ", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "'transform must be callable or a dict, but got {}'", ".", "format", "(", "\n", "type", "(", "transform", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.compose.Compose.__call__": [[30, 36], ["t"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "data", "=", "t", "(", "data", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.pipelines.compose.Compose.__repr__": [[37, 44], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "'\\n'", "\n", "format_string", "+=", "'    {0}'", ".", "format", "(", "t", ")", "\n", "", "format_string", "+=", "'\\n)'", "\n", "return", "format_string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.loader.sampler.GroupSampler.__init__": [[14, 24], ["hasattr", "dataset.flag.astype", "numpy.bincount", "enumerate", "int", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "        ", "assert", "hasattr", "(", "dataset", ",", "'flag'", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "flag", "=", "dataset", ".", "flag", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "np", ".", "ceil", "(", "\n", "size", "/", "self", ".", "samples_per_gpu", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.loader.sampler.GroupSampler.__iter__": [[25, 47], ["enumerate", "numpy.concatenate", "numpy.concatenate", "torch.from_numpy().long", "iter", "numpy.random.shuffle", "numpy.concatenate", "torch.from_numpy().long.append", "len", "numpy.where", "len", "len", "numpy.random.permutation", "torch.from_numpy", "int", "range", "numpy.ceil", "len"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "np", ".", "random", ".", "shuffle", "(", "indice", ")", "\n", "num_extra", "=", "int", "(", "np", ".", "ceil", "(", "size", "/", "self", ".", "samples_per_gpu", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "-", "len", "(", "indice", ")", "\n", "indice", "=", "np", ".", "concatenate", "(", "[", "indice", ",", "indice", "[", ":", "num_extra", "]", "]", ")", "\n", "indices", ".", "append", "(", "indice", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "[", "\n", "indices", "[", "i", "*", "self", ".", "samples_per_gpu", ":", "(", "i", "+", "1", ")", "*", "self", ".", "samples_per_gpu", "]", "\n", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "\n", "range", "(", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ")", ")", "\n", "]", "\n", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "indices", ")", ".", "long", "(", ")", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.loader.sampler.GroupSampler.__len__": [[48, 50], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.loader.sampler.DistributedSampler.__init__": [[54, 59], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "\n", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "\n", "shuffle", "=", "True", ",", "byclass", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.loader.sampler.DistributedSampler.__iter__": [[60, 77], ["iter", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.loader.sampler.DistributedGroupSampler.__init__": [[94, 119], ["hasattr", "numpy.bincount", "enumerate", "torch.distributed.get_world_size", "torch.distributed.get_rank", "int", "math.ceil"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "num_replicas", "=", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "rank", "=", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "\n", "assert", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", "\n", "self", ".", "flag", "=", "self", ".", "dataset", ".", "flag", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "\n", "math", ".", "ceil", "(", "self", ".", "group_sizes", "[", "i", "]", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "\n", "self", ".", "num_replicas", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.loader.sampler.DistributedGroupSampler.__iter__": [[120, 155], ["torch.Generator", "torch.Generator.manual_seed", "enumerate", "iter", "len", "len", "indice[].tolist", "list", "range", "numpy.where", "len", "len", "torch.randperm", "int", "len", "list", "math.ceil", "torch.randperm", "int"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", ">", "0", ":", "\n", "                ", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "indice", "=", "indice", "[", "list", "(", "torch", ".", "randperm", "(", "int", "(", "size", ")", ",", "\n", "generator", "=", "g", ")", ")", "]", ".", "tolist", "(", ")", "\n", "extra", "=", "int", "(", "\n", "math", ".", "ceil", "(", "\n", "size", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "self", ".", "num_replicas", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "*", "self", ".", "num_replicas", "-", "len", "(", "indice", ")", "\n", "indice", "+=", "indice", "[", ":", "extra", "]", "\n", "indices", "+=", "indice", "\n", "\n", "", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "indices", "=", "[", "\n", "indices", "[", "j", "]", "for", "i", "in", "list", "(", "\n", "torch", ".", "randperm", "(", "\n", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ",", "generator", "=", "g", ")", ")", "\n", "for", "j", "in", "range", "(", "i", "*", "self", ".", "samples_per_gpu", ",", "(", "i", "+", "1", ")", "*", "\n", "self", ".", "samples_per_gpu", ")", "\n", "]", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.loader.sampler.DistributedGroupSampler.__len__": [[156, 158], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.loader.sampler.DistributedGroupSampler.set_epoch": [[159, 161], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.loader.build_loader.build_dataloader": [[16, 53], ["torch.utils.data.DataLoader", "torch.distributed.get_rank", "torch.distributed.get_world_size", "sampler.DistributedSampler"], "function", ["None"], ["def", "build_dataloader", "(", "dataset", ",", "\n", "videos_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "num_gpus", "=", "1", ",", "\n", "dist", "=", "True", ",", "\n", "shuffle", "=", "True", ",", "\n", "pin_memory", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "    ", "if", "dist", ":", "\n", "        ", "rank", "=", "get_rank", "(", ")", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "sampler", "=", "DistributedSampler", "(", "\n", "dataset", ",", "world_size", ",", "rank", ",", "shuffle", "=", "shuffle", ")", "\n", "shuffle", "=", "False", "\n", "batch_size", "=", "videos_per_gpu", "\n", "num_workers", "=", "workers_per_gpu", "\n", "", "else", ":", "\n", "# if not kwargs.get('shuffle', True):", "\n", "#     sampler = None", "\n", "# else:", "\n", "#     sampler = GroupSampler(dataset, videos_per_gpu)", "\n", "        ", "sampler", "=", "None", "\n", "batch_size", "=", "num_gpus", "*", "videos_per_gpu", "\n", "num_workers", "=", "num_gpus", "*", "workers_per_gpu", "\n", "\n", "", "data_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "# collate_fn=partial(collate, samples_per_gpu=videos_per_gpu),", "\n", "pin_memory", "=", "pin_memory", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build": [[12, 20], ["isinstance", "torch.Sequential", "utils.build_from_cfg", "utils.build_from_cfg"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.build_from_cfg", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.build_from_cfg"], ["\n", "if", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "\n", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ",", "default_args", ")", ",", "cfg", "[", "'times'", "]", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build_recognizer": [[22, 25], ["builder.build", "dict"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build"], ["", "return", "dataset", "\n", "\n", "\n", "", "@", "DATASETS", ".", "register_module", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build_backbone": [[27, 29], ["builder.build"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build"], ["    "]], "home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build_head": [[31, 33], ["builder.build"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build"], []], "home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build_spatial_temporal_module": [[35, 37], ["builder.build"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build"], ["\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build_segmental_consensus": [[39, 41], ["builder.build"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build"], ["def", "__init__", "(", "self", ",", "dataset", ",", "times", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "times", "=", "times", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.block_maker.block_maker": [[6, 43], ["block_maker.block_maker._make_block"], "function", ["None"], ["def", "block_maker", "(", "net", ",", "\n", "module_name", "=", "None", ",", "\n", "insert_freq", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "make_function_block", "=", "modules_maker", ".", "__dict__", "[", "module_name", "]", "\n", "if", "module_name", "is", "None", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "_make_block", "(", "stage", ",", "insert_freq", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "isinstance", "(", "insert_freq", ",", "int", ")", "and", "insert_freq", "==", "1", ":", "\n", "            ", "blocks", "=", "list", "(", "stage", ".", "children", "(", ")", ")", "\n", "print", "(", "'=> Processing stage with {} blocks residual'", ".", "format", "(", "len", "(", "blocks", ")", ")", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "blocks", ")", ":", "\n", "                ", "blocks", "[", "i", "]", "=", "make_function_block", "(", "b", ",", "**", "kwargs", ")", "\n", "blocks", "[", "i", "]", ".", "init_weights", "(", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "", "elif", "isinstance", "(", "insert_freq", ",", "tuple", ")", "and", "len", "(", "insert_freq", ")", ">", "1", ":", "\n", "            ", "blocks", "=", "list", "(", "stage", ".", "children", "(", ")", ")", "\n", "assert", "len", "(", "insert_freq", ")", "==", "len", "(", "blocks", ")", "\n", "print", "(", "'=> Processing stage with {} blocks residual'", ".", "format", "(", "len", "(", "blocks", ")", ")", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "blocks", ")", ":", "\n", "                ", "if", "insert_freq", "[", "i", "]", "==", "1", ":", "\n", "                    ", "blocks", "[", "i", "]", "=", "make_function_block", "(", "b", ",", "**", "kwargs", ")", "\n", "blocks", "[", "i", "]", ".", "init_weights", "(", ")", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "net", ".", "layer1", "=", "_make_block", "(", "\n", "net", ".", "layer1", ",", "insert_freq", "[", "0", "]", ",", "**", "kwargs", ")", "if", "insert_freq", "[", "0", "]", "else", "net", ".", "layer1", "\n", "net", ".", "layer2", "=", "_make_block", "(", "\n", "net", ".", "layer2", ",", "insert_freq", "[", "1", "]", ",", "**", "kwargs", ")", "if", "insert_freq", "[", "1", "]", "else", "net", ".", "layer2", "\n", "net", ".", "layer3", "=", "_make_block", "(", "\n", "net", ".", "layer3", ",", "insert_freq", "[", "2", "]", ",", "**", "kwargs", ")", "if", "insert_freq", "[", "2", "]", "else", "net", ".", "layer3", "\n", "net", ".", "layer4", "=", "_make_block", "(", "\n", "net", ".", "layer4", ",", "insert_freq", "[", "3", "]", ",", "**", "kwargs", ")", "if", "insert_freq", "[", "3", "]", "else", "net", ".", "layer4", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.DSA.DSA.__init__": [[7, 45], ["torch.Module.__init__", "print", "print", "print", "print", "print", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", "=", "None", ",", "\n", "insert_place", "=", "None", ",", "\n", "U_segment", "=", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "alpha", "=", "2", ",", "\n", "split_ratio", "=", "1.0", ",", "\n", "with_identity", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DSA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "U_segment", "=", "U_segment", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "insert_place", "=", "insert_place", "\n", "self", ".", "split_ratio", "=", "split_ratio", "\n", "self", ".", "with_identity", "=", "with_identity", "\n", "print", "(", "'kernel_size: {}.'", ".", "format", "(", "kernel_size", ")", ")", "\n", "print", "(", "'insert_place: {}'", ".", "format", "(", "insert_place", ")", ")", "\n", "print", "(", "'alpha: {}'", ".", "format", "(", "alpha", ")", ")", "\n", "print", "(", "'split_ratio: {}'", ".", "format", "(", "split_ratio", ")", ")", "\n", "print", "(", "'with_identity: {}'", ".", "format", "(", "with_identity", ")", ")", "\n", "\n", "self", ".", "generate", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "U_segment", ",", "U_segment", "*", "alpha", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "U_segment", "*", "alpha", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "U_segment", "*", "alpha", ",", "kernel_size", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Softmax", "(", "-", "1", ")", ")", "\n", "\n", "# split channel", "\n", "num_shift_channel", "=", "int", "(", "in_channels", "*", "split_ratio", ")", "\n", "self", ".", "num_shift_channel", "=", "num_shift_channel", "\n", "assert", "self", ".", "num_shift_channel", "!=", "0", "\n", "self", ".", "split_sizes", "=", "[", "num_shift_channel", ",", "in_channels", "-", "num_shift_channel", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.DSA.DSA.forward": [[46, 51], ["list", "DSA.DSA.split_channel_forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.split", "torch.cat.split", "torch.cat.split"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.DSA.DSA.split_channel_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "list", "(", "x", ".", "split", "(", "self", ".", "split_sizes", ",", "dim", "=", "1", ")", ")", "\n", "x", "[", "0", "]", "=", "self", ".", "split_channel_forward", "(", "x", "[", "0", "]", ")", "\n", "x", "=", "torch", ".", "cat", "(", "x", ",", "dim", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.DSA.DSA.split_channel_forward": [[52, 75], ["x.size", "x.view().permute().contiguous", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "out.permute().contiguous().view.permute().contiguous().view.view", "DSA.DSA.generate().view", "torch.conv3d", "torch.conv3d", "torch.conv3d", "out.permute().contiguous().view.permute().contiguous().view.view", "out.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "x.view().permute().contiguous.view", "x.view().permute().contiguous.view", "x.view().permute", "DSA.DSA.generate", "out.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "out.permute().contiguous().view.permute().contiguous().view.view", "x.view", "out.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["", "def", "split_channel_forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "insert_place", "==", "'bottom'", "or", "self", ".", "with_identity", ":", "\n", "            ", "identity", "=", "x", "\n", "", "nu", ",", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "u", "=", "self", ".", "U_segment", "\n", "n_batch", "=", "nu", "//", "self", ".", "U_segment", "\n", "new_x", "=", "x", ".", "view", "(", "n_batch", ",", "u", ",", "c", ",", "t", ",", "h", ",", "w", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool3d", "(", "new_x", ".", "view", "(", "n_batch", "*", "c", ",", "u", ",", "t", ",", "h", ",", "w", ")", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "u", ")", "\n", "conv_kernel", "=", "self", ".", "generate", "(", "out", ".", "view", "(", "-", "1", ",", "u", ")", ")", ".", "view", "(", "n_batch", "*", "c", ",", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "out", "=", "F", ".", "conv3d", "(", "new_x", ".", "view", "(", "1", ",", "n_batch", "*", "c", ",", "u", ",", "t", ",", "h", "*", "w", ")", ",", "\n", "conv_kernel", ",", "\n", "bias", "=", "None", ",", "\n", "stride", "=", "(", "self", ".", "stride", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "self", ".", "padding", ",", "0", ",", "0", ")", ",", "\n", "groups", "=", "n_batch", "*", "c", ")", "\n", "out", "=", "out", ".", "view", "(", "n_batch", ",", "c", ",", "u", ",", "t", ",", "h", ",", "w", ")", "\n", "out", "=", "out", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nu", ",", "c", ",", "t", ",", "h", ",", "w", ")", "\n", "\n", "if", "self", ".", "insert_place", "==", "'bottom'", "or", "self", ".", "with_identity", ":", "\n", "            ", "out", "=", "out", "+", "identity", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.DSA.DSABasicblock.__init__": [[78, 102], ["torch.Module.__init__", "DSA.DSA"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "insert_place", "=", "'res'", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "DSABasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "block", "\n", "assert", "insert_place", "in", "[", "'res'", ",", "'res_1'", ",", "'res_2'", ",", "'res_3'", ",", "'bottom'", "]", "\n", "self", ".", "insert_place", "=", "insert_place", "\n", "\n", "if", "insert_place", "==", "'res'", "or", "insert_place", "==", "'res_1'", ":", "\n", "            ", "in_channels", "=", "block", ".", "conv1", ".", "in_channels", "\n", "", "elif", "insert_place", "==", "'res_2'", ":", "\n", "            ", "in_channels", "=", "block", ".", "conv1", ".", "out_channels", "\n", "", "elif", "insert_place", "==", "'res_3'", ":", "\n", "            ", "in_channels", "=", "block", ".", "conv2", ".", "out_channels", "\n", "", "elif", "insert_place", "==", "'bottom'", ":", "\n", "            ", "in_channels", "=", "block", ".", "conv2", ".", "out_channels", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "\n", "\n", "", "self", ".", "dsa", "=", "DSA", "(", "in_channels", "=", "in_channels", ",", "\n", "insert_place", "=", "insert_place", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.DSA.DSABasicblock.forward": [[104, 131], ["DSA.DSABasicblock.block.bn1", "DSA.DSABasicblock.block.relu", "DSA.DSABasicblock.block.conv2", "DSA.DSABasicblock.block.bn2", "DSA.DSABasicblock.block.relu", "DSA.DSABasicblock.dsa", "DSA.DSABasicblock.block.conv1", "DSA.DSABasicblock.block.conv1", "DSA.DSABasicblock.dsa", "DSA.DSABasicblock.dsa", "DSA.DSABasicblock.block.downsample", "DSA.DSABasicblock.dsa"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "if", "self", ".", "insert_place", "==", "'res'", "or", "self", ".", "insert_place", "==", "'res_1'", ":", "\n", "            ", "out", "=", "self", ".", "dsa", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "block", ".", "conv1", "(", "out", ")", "if", "self", ".", "insert_place", "==", "'res'", "or", "self", ".", "insert_place", "==", "'res_1'", "else", "self", ".", "block", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "block", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "insert_place", "==", "'res_2'", ":", "\n", "            ", "out", "=", "self", ".", "dsa", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "block", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "block", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "insert_place", "==", "'res_3'", ":", "\n", "            ", "out", "=", "self", ".", "dsa", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "block", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "block", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "block", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "insert_place", "==", "'bottom'", ":", "\n", "            ", "out", "=", "self", ".", "dsa", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.DSA.DSABasicblock.init_weights": [[132, 134], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.DSA.DSABottleneck.__init__": [[138, 164], ["torch.Module.__init__", "DSA.DSA"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "insert_place", "=", "'res'", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "DSABottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "block", "\n", "assert", "insert_place", "in", "[", "'res'", ",", "'res_1'", ",", "'res_2'", ",", "'res_3'", ",", "'res_4'", ",", "'bottom'", "]", "\n", "self", ".", "insert_place", "=", "insert_place", "\n", "\n", "if", "insert_place", "==", "'res'", "or", "insert_place", "==", "'res_1'", ":", "\n", "            ", "in_channels", "=", "block", ".", "conv1", ".", "in_channels", "\n", "", "elif", "insert_place", "==", "'res_2'", ":", "\n", "            ", "in_channels", "=", "block", ".", "conv1", ".", "out_channels", "\n", "", "elif", "insert_place", "==", "'res_3'", ":", "\n", "            ", "in_channels", "=", "block", ".", "conv2", ".", "out_channels", "\n", "", "elif", "insert_place", "==", "'res_4'", ":", "\n", "            ", "in_channels", "=", "block", ".", "conv3", ".", "out_channels", "\n", "", "elif", "insert_place", "==", "'bottom'", ":", "\n", "            ", "in_channels", "=", "block", ".", "conv3", ".", "out_channels", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "\n", "\n", "", "self", ".", "dsa", "=", "DSA", "(", "in_channels", "=", "in_channels", ",", "\n", "insert_place", "=", "insert_place", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.DSA.DSABottleneck.forward": [[165, 199], ["DSA.DSABottleneck.block.bn1", "DSA.DSABottleneck.block.relu", "DSA.DSABottleneck.block.conv2", "DSA.DSABottleneck.block.bn2", "DSA.DSABottleneck.block.relu", "DSA.DSABottleneck.block.conv3", "DSA.DSABottleneck.block.bn3", "DSA.DSABottleneck.block.relu", "DSA.DSABottleneck.dsa", "DSA.DSABottleneck.block.conv1", "DSA.DSABottleneck.block.conv1", "DSA.DSABottleneck.dsa", "DSA.DSABottleneck.dsa", "DSA.DSABottleneck.dsa", "DSA.DSABottleneck.block.downsample", "DSA.DSABottleneck.dsa"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "if", "self", ".", "insert_place", "==", "'res'", "or", "self", ".", "insert_place", "==", "'res_1'", ":", "\n", "            ", "out", "=", "self", ".", "dsa", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "block", ".", "conv1", "(", "out", ")", "if", "self", ".", "insert_place", "==", "'res'", "or", "self", ".", "insert_place", "==", "'res_1'", "else", "self", ".", "block", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "block", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "insert_place", "==", "'res_2'", ":", "\n", "            ", "out", "=", "self", ".", "dsa", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "block", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "block", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "block", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "insert_place", "==", "'res_3'", ":", "\n", "            ", "out", "=", "self", ".", "dsa", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "block", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "block", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "insert_place", "==", "'res_4'", ":", "\n", "            ", "out", "=", "self", ".", "dsa", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "block", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "block", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "block", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "insert_place", "==", "'bottom'", ":", "\n", "            ", "out", "=", "self", ".", "dsa", "(", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.DSA.DSABottleneck.init_weights": [[200, 202], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.DSA.Make_DSA": [[204, 212], ["DSA.DSABasicblock", "DSA.DSABottleneck"], "function", ["None"], ["", "", "def", "Make_DSA", "(", "block", ",", "depth", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "assert", "depth", "in", "[", "18", ",", "50", "]", "\n", "if", "depth", "==", "18", ":", "\n", "        ", "return", "DSABasicblock", "(", "block", ",", "**", "kwargs", ")", "\n", "", "elif", "depth", "==", "50", ":", "\n", "        ", "return", "DSABottleneck", "(", "block", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.__init__": [[13, 20], ["torch.Module.__init__", "builder.build_backbone", "base.BaseRecognizer.init_weights", "builder.build_head"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build_backbone", "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.ConvModule.init_weights", "home.repos.pwc.inspect_result.whwu95_DSANet.models.builder.build_head"], []], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.with_cls_head": [[21, 24], ["hasattr"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "ann_file", ",", "pipeline", ",", "data_root", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.forward_train": [[25, 28], ["None"], "methods", ["None"], ["test_mode", "=", "False", ",", "modality", "=", "None", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ann_file", "=", "ann_file", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.forward_test": [[29, 32], ["None"], "methods", ["None"], ["self", ".", "data_root", "=", "data_root", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "pipeline", "=", "Compose", "(", "pipeline", ")", "\n", "self", ".", "video_infos", "=", "self", ".", "load_annotations", "(", ")", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.init_weights": [[33, 37], ["base.BaseRecognizer.backbone.init_weights", "base.BaseRecognizer.cls_head.init_weights"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.ConvModule.init_weights", "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.ConvModule.init_weights"], ["self", ".", "modality", "=", "modality", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.extract_feat": [[38, 41], ["base.BaseRecognizer.backbone"], "methods", ["None"], ["\n", "", "def", "prepare_frames", "(", "self", ",", "idx", ")", ":", "\n", "        ", "results", "=", "copy", ".", "deepcopy", "(", "self", ".", "video_infos", "[", "idx", "]", ")", "\n", "results", "[", "'modality'", "]", "=", "self", ".", "modality", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.average_clip": [[42, 73], ["base.BaseRecognizer.test_cfg.keys", "KeyError", "ValueError", "torch.softmax().mean", "torch.softmax().mean", "cls_score.mean.mean.mean", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.softmax", "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.softmax"], ["results", "[", "'test_mode'", "]", "=", "self", ".", "test_mode", "\n", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_infos", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "prepare_frames", "(", "idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.forward": [[74, 81], ["core.auto_fp16", "base.BaseRecognizer.forward_train", "base.BaseRecognizer.forward_test"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.fp16.decorators.auto_fp16", "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.recognizer3d.Recognizer3D.forward_train", "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.recognizer3d.Recognizer3D.forward_test"], []], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.recognizer3d.Recognizer3D.__init__": [[8, 31], ["base.BaseRecognizer.__init__", "recognizer3d.Recognizer3D.load_finetune", "recognizer3d.Recognizer3D._prepare_base_model"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.recognizer3d.Recognizer3D.load_finetune", "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.recognizer3d.Recognizer3D._prepare_base_model"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "cls_head", ",", "\n", "backbone_type", "=", "'3D'", ",", "\n", "fcn_testing", "=", "False", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "module_cfg", "=", "None", ",", "\n", "load_from", "=", "None", ")", ":", "\n", "        ", "super", "(", "Recognizer3D", ",", "self", ")", ".", "__init__", "(", "backbone", ",", "cls_head", ")", "\n", "self", ".", "backbone_type", "=", "backbone_type", "\n", "self", ".", "fcn_testing", "=", "fcn_testing", "\n", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "self", ".", "module_cfg", "=", "module_cfg", "\n", "self", ".", "load_from", "=", "load_from", "\n", "\n", "# load checkpoint", "\n", "if", "self", ".", "load_from", ":", "\n", "            ", "self", ".", "load_finetune", "(", "self", ".", "load_from", ")", "\n", "# insert module into backbone", "\n", "", "if", "self", ".", "module_cfg", ":", "\n", "            ", "self", ".", "_prepare_base_model", "(", "self", ".", "module_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.recognizer3d.Recognizer3D._prepare_base_model": [[32, 39], ["module_cfg.pop", "print", "modules_maker.block_maker.block_maker", "module_cfg.pop"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.modules_maker.block_maker.block_maker"], ["", "", "def", "_prepare_base_model", "(", "self", ",", "module_cfg", ")", ":", "\n", "        ", "module_name", "=", "module_cfg", ".", "pop", "(", "'type'", ")", "\n", "print", "(", "'Adding {0} into backbone'", ".", "format", "(", "module_name", ")", ")", "\n", "if", "'build_function'", "in", "module_cfg", "and", "module_cfg", ".", "pop", "(", "'build_function'", ")", "==", "'block_maker'", ":", "\n", "            ", "block_maker", "(", "self", ".", "backbone", ",", "module_name", ",", "**", "module_cfg", ")", "\n", "", "else", ":", "\n", "            ", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.recognizer3d.Recognizer3D.load_finetune": [[41, 56], ["torch.load", "collections.OrderedDict", "collections.OrderedDict", "checkpoint[].items", "recognizer3d.Recognizer3D.backbone.load_state_dict", "recognizer3d.Recognizer3D.cls_head.load_state_dict", "print"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_state_dict", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_state_dict"], ["", "", "def", "load_finetune", "(", "self", ",", "load_from", ")", ":", "\n", "# load checkpoint", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "load_from", ",", "map_location", "=", "'cpu'", ")", "\n", "import", "collections", "\n", "backbone_new_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "cls_new_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'backbone'", "in", "k", ":", "\n", "                ", "backbone_new_dict", "[", "k", "[", "9", ":", "]", "]", "=", "v", "\n", "", "if", "'cls_head'", "in", "k", ":", "\n", "                ", "cls_new_dict", "[", "k", "[", "9", ":", "]", "]", "=", "v", "\n", "", "", "self", ".", "backbone", ".", "load_state_dict", "(", "backbone_new_dict", ")", "\n", "self", ".", "cls_head", ".", "load_state_dict", "(", "cls_new_dict", ")", "\n", "print", "(", "\"Load Finetune Done! {} \"", ".", "format", "(", "load_from", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.recognizer3d.Recognizer3D.forward_train": [[57, 79], ["imgs.view.view.size", "imgs.view.view.reshape", "dict", "type", "num_clips[].item", "imgs.view.view.permute().contiguous", "imgs.view.view.view", "recognizer3d.Recognizer3D.extract_feat", "recognizer3d.Recognizer3D.view", "recognizer3d.Recognizer3D.permute().contiguous", "recognizer3d.Recognizer3D.extract_feat", "recognizer3d.Recognizer3D.cls_head", "labels.squeeze", "recognizer3d.Recognizer3D.cls_head.loss", "dict.update", "imgs.view.view.permute", "recognizer3d.Recognizer3D.permute"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.extract_feat", "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.extract_feat", "home.repos.pwc.inspect_result.whwu95_DSANet.heads.base.BaseHead.loss"], ["", "def", "forward_train", "(", "self", ",", "imgs", ",", "labels", ",", "num_clips", "=", "1", ",", "num_crops", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "b", ",", "u", ",", "c", ",", "t", ",", "h", ",", "w", "=", "imgs", ".", "size", "(", ")", "\n", "if", "type", "(", "num_clips", ")", "is", "torch", ".", "Tensor", ":", "\n", "            ", "num_clips", "=", "num_clips", "[", "0", "]", ".", "item", "(", ")", "\n", "", "imgs", "=", "imgs", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "imgs", ".", "shape", "[", "2", ":", "]", ")", "\n", "if", "self", ".", "backbone_type", "==", "'2D'", ":", "\n", "            ", "imgs", "=", "imgs", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "imgs", "=", "imgs", ".", "view", "(", "(", "-", "1", ",", ")", "+", "imgs", ".", "shape", "[", "2", ":", "]", ")", "\n", "x", "=", "self", ".", "extract_feat", "(", "imgs", ")", "\n", "x", "=", "x", ".", "view", "(", "(", "-", "1", ",", "t", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "extract_feat", "(", "imgs", ")", "\n", "\n", "", "losses", "=", "dict", "(", ")", "\n", "if", "self", ".", "with_cls_head", ":", "\n", "            ", "cls_score", "=", "self", ".", "cls_head", "(", "x", ",", "num_clips", ",", "num_crops", ")", "\n", "gt_label", "=", "labels", ".", "squeeze", "(", ")", "\n", "loss_cls", "=", "self", ".", "cls_head", ".", "loss", "(", "cls_score", ",", "gt_label", ")", "\n", "losses", ".", "update", "(", "loss_cls", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.recognizer3d.Recognizer3D.forward_test": [[80, 150], ["imgs.view.view.size", "imgs.view.view.reshape", "range", "torch.stack", "recognizer3d.Recognizer3D.mean", "recognizer3d.Recognizer3D.mean", "recognizer3d.Recognizer3D.squeeze", "imgs.view.view.size", "imgs.view.view.reshape", "type", "num_clips[].item", "type", "num_crops[].item", "range", "torch.stack", "img_group.view.view.reshape", "recognizer3d.Recognizer3D.cpu().numpy", "type", "num_clips[].item", "type", "num_crops[].item", "imgs.view.view.permute().contiguous", "imgs.view.view.view", "recognizer3d.Recognizer3D.extract_feat", "recognizer3d.Recognizer3D.view", "recognizer3d.Recognizer3D.permute().contiguous", "recognizer3d.Recognizer3D.extract_feat", "recognizer3d.Recognizer3D.cls_head", "recognizer3d.Recognizer3D.average_clip", "recognizer3d.Recognizer3D.cpu().numpy", "imgs_part_list.append", "img_group.view.view.permute().contiguous", "img_group.view.view.view", "recognizer3d.Recognizer3D.extract_feat", "recognizer3d.Recognizer3D.view", "recognizer3d.Recognizer3D.permute().contiguous", "recognizer3d.Recognizer3D.extract_feat", "recognizer3d.Recognizer3D.cls_head", "cls_score_list.append", "recognizer3d.Recognizer3D.cpu", "imgs.view.view.permute", "recognizer3d.Recognizer3D.permute", "recognizer3d.Recognizer3D.cpu", "img_group.view.view.permute", "recognizer3d.Recognizer3D.permute"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.stack", "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.extract_feat", "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.extract_feat", "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.average_clip", "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.extract_feat", "home.repos.pwc.inspect_result.whwu95_DSANet.recognizers.base.BaseRecognizer.extract_feat"], ["", "def", "forward_test", "(", "self", ",", "imgs", ",", "return_numpy", ",", "num_clips", "=", "1", ",", "num_crops", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "test_cfg", "is", "not", "None", "and", "'val_method'", "in", "self", ".", "test_cfg", "and", "self", ".", "test_cfg", "[", "'val_method'", "]", "==", "'DSA_val_method'", ":", "\n", "            ", "S", ",", "Crop", ",", "c", ",", "t", ",", "h", ",", "w", "=", "imgs", ".", "size", "(", ")", "\n", "if", "type", "(", "num_clips", ")", "is", "torch", ".", "Tensor", ":", "\n", "                ", "num_clips", "=", "num_clips", "[", "0", "]", ".", "item", "(", ")", "\n", "", "if", "type", "(", "num_crops", ")", "is", "torch", ".", "Tensor", ":", "\n", "                ", "num_crops", "=", "num_crops", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "", "assert", "num_clips", "%", "4", "==", "0", ",", "(", "\"num_clips {}\"", ".", "format", "(", "num_clips", ")", ")", "\n", "imgs", "=", "imgs", ".", "reshape", "(", "(", "-", "1", ",", "num_crops", ")", "+", "imgs", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "cls_score_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_clips", "//", "4", ")", ":", "\n", "                ", "img_group", "=", "[", "]", "\n", "imgs_part_list", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "                    ", "imgs_part", "=", "imgs", "[", "(", "j", "*", "num_clips", "//", "4", ")", "+", "i", ",", ":", "]", "\n", "imgs_part_list", ".", "append", "(", "imgs_part", ")", "\n", "", "img_group", "=", "torch", ".", "stack", "(", "imgs_part_list", ",", "dim", "=", "0", ")", "\n", "img_group", "=", "img_group", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "img_group", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "if", "self", ".", "backbone_type", "==", "'2D'", ":", "\n", "                    ", "img_group", "=", "img_group", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "img_group", "=", "img_group", ".", "view", "(", "(", "-", "1", ",", ")", "+", "img_group", ".", "shape", "[", "2", ":", "]", ")", "\n", "x", "=", "self", ".", "extract_feat", "(", "img_group", ")", "\n", "x", "=", "x", ".", "view", "(", "(", "-", "1", ",", "t", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "self", ".", "extract_feat", "(", "img_group", ")", "\n", "\n", "", "if", "self", ".", "with_cls_head", ":", "\n", "                    ", "cls_score_part", "=", "self", ".", "cls_head", "(", "x", ",", "4", ",", "num_crops", ")", "\n", "cls_score_list", ".", "append", "(", "cls_score_part", ")", "\n", "", "", "cls_score", "=", "torch", ".", "stack", "(", "cls_score_list", ",", "dim", "=", "0", ")", "\n", "cls_score", "=", "cls_score", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "cls_score", "=", "cls_score", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "cls_score", "=", "cls_score", ".", "squeeze", "(", "0", ")", "\n", "\n", "if", "return_numpy", ":", "\n", "                ", "return", "cls_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "cls_score", "\n", "\n", "", "", "else", ":", "\n", "            ", "S", ",", "Crop", ",", "c", ",", "t", ",", "h", ",", "w", "=", "imgs", ".", "size", "(", ")", "\n", "if", "type", "(", "num_clips", ")", "is", "torch", ".", "Tensor", ":", "\n", "                ", "num_clips", "=", "num_clips", "[", "0", "]", ".", "item", "(", ")", "\n", "", "if", "type", "(", "num_crops", ")", "is", "torch", ".", "Tensor", ":", "\n", "                ", "num_crops", "=", "num_crops", "[", "0", "]", ".", "item", "(", ")", "\n", "\n", "", "imgs", "=", "imgs", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "imgs", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "if", "self", ".", "backbone_type", "==", "'2D'", ":", "\n", "                ", "imgs", "=", "imgs", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "imgs", "=", "imgs", ".", "view", "(", "(", "-", "1", ",", ")", "+", "imgs", ".", "shape", "[", "2", ":", "]", ")", "\n", "x", "=", "self", ".", "extract_feat", "(", "imgs", ")", "\n", "x", "=", "x", ".", "view", "(", "(", "-", "1", ",", "t", ")", "+", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "extract_feat", "(", "imgs", ")", "\n", "\n", "", "if", "self", ".", "with_cls_head", ":", "\n", "                ", "cls_score", "=", "self", ".", "cls_head", "(", "x", ",", "num_clips", ",", "num_crops", ")", "\n", "cls_score", "=", "self", ".", "average_clip", "(", "cls_score", ")", "\n", "\n", "", "if", "return_numpy", ":", "\n", "                ", "return", "cls_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "cls_score", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.heads.base.BaseHead.__init__": [[10, 33], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__"], ["    ", "\"\"\"Base class for datasets.\n\n    All datasets to process video should subclass it.\n    All subclasses should overwrite:\n        Methods:`load_annotations`, supporting to load information\n            from an annotation file.\n        Methods:`prepare_frames`, providing data.\n\n    Args:\n        ann_file (str): Path to the annotation file.\n        pipeline (list[dict | callable]): A sequence of data transforms.\n        data_root (str): Path to a directory where videos are held.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "ann_file", ",", "pipeline", ",", "data_root", "=", "None", ",", "\n", "test_mode", "=", "False", ",", "modality", "=", "None", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ann_file", "=", "ann_file", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "pipeline", "=", "Compose", "(", "pipeline", ")", "\n", "self", ".", "video_infos", "=", "self", ".", "load_annotations", "(", ")", "\n", "self", ".", "modality", "=", "modality", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.heads.base.BaseHead.forward": [[34, 37], ["None"], "methods", ["None"], ["\n", "", "@", "abstractmethod", "\n", "def", "load_annotations", "(", "self", ")", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.heads.base.BaseHead.init_weights": [[38, 40], ["None"], "methods", ["None"], ["\n", "", "def", "prepare_frames", "(", "self", ",", "idx", ")", ":", "\n", "        ", "results", "=", "copy", ".", "deepcopy", "(", "self", ".", "video_infos", "[", "idx", "]", ")", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.heads.base.BaseHead.loss": [[41, 48], ["dict", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "labels.unsqueeze.unsqueeze.unsqueeze"], "methods", ["None"], ["results", "[", "'modality'", "]", "=", "self", ".", "modality", "\n", "results", "[", "'test_mode'", "]", "=", "self", ".", "test_mode", "\n", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_infos", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.heads.tsn_clshead.TSNClsHead.__init__": [[8, 72], ["dict", "base.BaseHead.__init__", "SimpleConsensus", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "return_TRN", "torch.AdaptiveAvgPool2d", "torch.AdaptiveMaxPool2d", "torch.AvgPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.return_TRN"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "spatial_type", "=", "'avg'", ",", "\n", "spatial_size", "=", "7", ",", "\n", "consensus_cfg", "=", "dict", "(", "type", "=", "'avg'", ",", "dim", "=", "1", ")", ",", "\n", "with_avg_pool", "=", "False", ",", "\n", "temporal_feature_size", "=", "1", ",", "\n", "spatial_feature_size", "=", "1", ",", "\n", "dropout_ratio", "=", "0.8", ",", "\n", "in_channels", "=", "1024", ",", "\n", "num_classes", "=", "101", ",", "\n", "init_std", "=", "0.001", ",", "\n", "fcn_testing", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "TSNClsHead", ",", "self", ")", ".", "__init__", "(", "spatial_size", ",", "dropout_ratio", ",", "\n", "in_channels", ",", "num_classes", ",", "init_std", ")", "\n", "self", ".", "spatial_type", "=", "spatial_type", "\n", "self", ".", "consensus_type", "=", "consensus_cfg", "[", "'type'", "]", "\n", "self", ".", "temporal_feature_size", "=", "temporal_feature_size", "\n", "self", ".", "spatial_feature_size", "=", "spatial_feature_size", "\n", "self", ".", "cls_pool_size", "=", "(", "self", ".", "temporal_feature_size", ",", "\n", "self", ".", "spatial_feature_size", ",", "\n", "self", ".", "spatial_feature_size", ")", "\n", "self", ".", "with_avg_pool", "=", "with_avg_pool", "\n", "\n", "if", "self", ".", "consensus_type", "==", "'avg'", ":", "\n", "            ", "from", ".", "segmental_consensuses", "import", "SimpleConsensus", "\n", "self", ".", "segmental_consensus", "=", "SimpleConsensus", "(", "\n", "self", ".", "consensus_type", ",", "consensus_cfg", "[", "'dim'", "]", ")", "\n", "\n", "", "elif", "self", ".", "consensus_type", "in", "[", "'TRN'", ",", "'TRNmultiscale'", "]", ":", "\n", "            ", "from", ".", "segmental_consensuses", "import", "return_TRN", "\n", "self", ".", "segmental_consensus", "=", "return_TRN", "(", "\n", "self", ".", "consensus_type", ",", "in_channels", ",", "\n", "consensus_cfg", "[", "'num_frames'", "]", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "self", ".", "spatial_size", "==", "-", "1", ":", "\n", "            ", "self", ".", "pool_size", "=", "(", "1", ",", "1", ")", "\n", "if", "self", ".", "spatial_type", "==", "'avg'", ":", "\n", "                ", "self", ".", "Logits", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "self", ".", "pool_size", ")", "\n", "", "if", "self", ".", "spatial_type", "==", "'max'", ":", "\n", "                ", "self", ".", "Logits", "=", "nn", ".", "AdaptiveMaxPool2d", "(", "self", ".", "pool_size", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "pool_size", "=", "self", ".", "spatial_size", "\n", "if", "self", ".", "spatial_type", "==", "'avg'", ":", "\n", "                ", "self", ".", "Logits", "=", "nn", ".", "AvgPool2d", "(", "\n", "self", ".", "pool_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "if", "self", ".", "spatial_type", "==", "'max'", ":", "\n", "                ", "self", ".", "Logits", "=", "nn", ".", "MaxPool2d", "(", "\n", "self", ".", "pool_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "", "", "if", "self", ".", "with_avg_pool", ":", "\n", "            ", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool3d", "(", "self", ".", "cls_pool_size", ")", "\n", "\n", "", "if", "self", ".", "consensus_type", "in", "[", "'TRN'", ",", "'TRNmultiscale'", "]", ":", "\n", "            ", "img_feature_dim", "=", "256", "\n", "self", ".", "new_fc", "=", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "img_feature_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "new_fc", "=", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "self", ".", "num_classes", ")", "\n", "\n", "", "self", ".", "fcn_testing", "=", "fcn_testing", "\n", "self", ".", "new_cls", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.heads.tsn_clshead.TSNClsHead.forward": [[73, 106], ["tsn_clshead.TSNClsHead.Logits", "tsn_clshead.TSNClsHead.view", "tsn_clshead.TSNClsHead.new_fc", "tsn_clshead.TSNClsHead.mean.reshape", "tsn_clshead.TSNClsHead.segmental_consensus", "tsn_clshead.TSNClsHead.mean.squeeze", "tsn_clshead.TSNClsHead.new_cls", "tsn_clshead.TSNClsHead.mean", "tsn_clshead.TSNClsHead.ndimension", "tsn_clshead.TSNClsHead.unsqueeze", "tsn_clshead.TSNClsHead.avg_pool", "tsn_clshead.TSNClsHead.dropout", "tsn_clshead.TSNClsHead.size", "torch.Conv3d().cuda", "tsn_clshead.TSNClsHead.new_cls.load_state_dict", "torch.Conv3d", "tsn_clshead.TSNClsHead.new_fc.weight.unsqueeze().unsqueeze().unsqueeze", "tsn_clshead.TSNClsHead.new_fc.weight.unsqueeze().unsqueeze", "tsn_clshead.TSNClsHead.new_fc.weight.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_state_dict"], ["", "def", "forward", "(", "self", ",", "x", ",", "num_seg", ")", ":", "\n", "        ", "if", "not", "self", ".", "fcn_testing", ":", "\n", "            ", "x", "=", "self", ".", "Logits", "(", "x", ")", "\n", "if", "x", ".", "ndimension", "(", ")", "==", "4", ":", "\n", "                ", "x", "=", "x", ".", "unsqueeze", "(", "2", ")", "\n", "", "assert", "x", ".", "shape", "[", "1", "]", "==", "self", ".", "in_channels", "\n", "assert", "x", ".", "shape", "[", "2", "]", "==", "self", ".", "temporal_feature_size", "\n", "assert", "x", ".", "shape", "[", "3", "]", "==", "self", ".", "spatial_feature_size", "\n", "assert", "x", ".", "shape", "[", "4", "]", "==", "self", ".", "spatial_feature_size", "\n", "if", "self", ".", "with_avg_pool", ":", "\n", "                ", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "                ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "cls_score", "=", "self", ".", "new_fc", "(", "x", ")", "\n", "cls_score", "=", "cls_score", ".", "reshape", "(", "(", "-", "1", ",", "num_seg", ")", "+", "cls_score", ".", "shape", "[", "1", ":", "]", ")", "\n", "cls_score", "=", "self", ".", "segmental_consensus", "(", "cls_score", ")", "\n", "cls_score", "=", "cls_score", ".", "squeeze", "(", "1", ")", "\n", "return", "cls_score", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "new_cls", "is", "None", ":", "\n", "                ", "self", ".", "new_cls", "=", "nn", ".", "Conv3d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "num_classes", ",", "\n", "1", ",", "1", ",", "0", ")", ".", "cuda", "(", ")", "\n", "self", ".", "new_cls", ".", "load_state_dict", "(", "\n", "{", "'weight'", ":", "self", ".", "new_fc", ".", "weight", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "'bias'", ":", "self", ".", "new_fc", ".", "bias", "}", ")", "\n", "", "class_map", "=", "self", ".", "new_cls", "(", "x", ")", "\n", "cls_score", "=", "class_map", ".", "mean", "(", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "return", "cls_score", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.heads.tsn_clshead.TSNClsHead.init_weights": [[107, 110], ["torch.init.normal_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "new_fc", ".", "weight", ",", "0", ",", "self", ".", "init_std", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "new_fc", ".", "bias", ",", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.heads.i3d_clshead.I3DClsHead.__init__": [[10, 46], ["dict", "base.BaseHead.__init__", "torch.Linear", "torch.AdaptiveAvgPool3d", "torch.AdaptiveMaxPool3d", "torch.AvgPool3d", "torch.MaxPool3d"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "spatial_type", "=", "'avg'", ",", "\n", "spatial_size", "=", "7", ",", "\n", "temporal_size", "=", "4", ",", "\n", "consensus_cfg", "=", "dict", "(", "type", "=", "'avg'", ",", "dim", "=", "1", ")", ",", "\n", "dropout_ratio", "=", "0.5", ",", "\n", "in_channels", "=", "2048", ",", "\n", "num_classes", "=", "400", ",", "\n", "init_std", "=", "0.01", ",", "\n", "fcn_testing", "=", "False", ")", ":", "\n", "        ", "super", "(", "I3DClsHead", ",", "self", ")", ".", "__init__", "(", "spatial_size", ",", "dropout_ratio", ",", "\n", "in_channels", ",", "num_classes", ",", "init_std", ")", "\n", "self", ".", "spatial_type", "=", "spatial_type", "\n", "self", ".", "consensus_type", "=", "consensus_cfg", "[", "'type'", "]", "\n", "\n", "self", ".", "temporal_size", "=", "temporal_size", "\n", "assert", "not", "(", "self", ".", "spatial_size", "==", "-", "1", ")", "^", "(", "self", ".", "temporal_size", "==", "-", "1", ")", "\n", "\n", "if", "self", ".", "temporal_size", "==", "-", "1", "and", "self", ".", "spatial_size", "==", "-", "1", ":", "\n", "            ", "self", ".", "pool_size", "=", "(", "1", ",", "1", ",", "1", ")", "\n", "if", "self", ".", "spatial_type", "==", "'avg'", ":", "\n", "                ", "self", ".", "Logits", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "self", ".", "pool_size", ")", "\n", "", "if", "self", ".", "spatial_type", "==", "'max'", ":", "\n", "                ", "self", ".", "Logits", "=", "nn", ".", "AdaptiveMaxPool3d", "(", "self", ".", "pool_size", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "pool_size", "=", "(", "self", ".", "temporal_size", ",", ")", "+", "self", ".", "spatial_size", "\n", "if", "self", ".", "spatial_type", "==", "'avg'", ":", "\n", "                ", "self", ".", "Logits", "=", "nn", ".", "AvgPool3d", "(", "\n", "self", ".", "pool_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "if", "self", ".", "spatial_type", "==", "'max'", ":", "\n", "                ", "self", ".", "Logits", "=", "nn", ".", "MaxPool3d", "(", "\n", "self", ".", "pool_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "", "", "self", ".", "fc_cls", "=", "nn", ".", "Linear", "(", "self", ".", "in_channels", ",", "self", ".", "num_classes", ")", "\n", "self", ".", "fcn_testing", "=", "fcn_testing", "\n", "self", ".", "new_cls", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.heads.i3d_clshead.I3DClsHead.forward": [[47, 72], ["i3d_clshead.I3DClsHead.Logits", "i3d_clshead.I3DClsHead.view", "i3d_clshead.I3DClsHead.fc_cls", "cls_score.mean.mean.reshape", "cls_score.mean.mean.mean", "i3d_clshead.I3DClsHead.new_cls", "i3d_clshead.I3DClsHead.mean", "cls_score.mean.mean.reshape", "cls_score.mean.mean.mean", "i3d_clshead.I3DClsHead.dropout", "torch.Conv3d().cuda", "i3d_clshead.I3DClsHead.new_cls.load_state_dict", "torch.Conv3d", "i3d_clshead.I3DClsHead.fc_cls.weight.unsqueeze().unsqueeze().unsqueeze", "i3d_clshead.I3DClsHead.fc_cls.weight.unsqueeze().unsqueeze", "i3d_clshead.I3DClsHead.fc_cls.weight.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_state_dict"], ["", "def", "forward", "(", "self", ",", "x", ",", "num_clips", ",", "num_crops", ")", ":", "\n", "        ", "if", "not", "self", ".", "fcn_testing", ":", "\n", "            ", "x", "=", "self", ".", "Logits", "(", "x", ")", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "                ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "cls_score", "=", "self", ".", "fc_cls", "(", "x", ")", "\n", "cls_score", "=", "cls_score", ".", "reshape", "(", "(", "-", "1", ",", "num_clips", "*", "num_crops", ")", "+", "cls_score", ".", "shape", "[", "1", ":", "]", ")", "\n", "cls_score", "=", "cls_score", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "new_cls", "is", "None", ":", "\n", "                ", "self", ".", "new_cls", "=", "nn", ".", "Conv3d", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "num_classes", ",", "\n", "1", ",", "1", ",", "0", ")", ".", "cuda", "(", ")", "\n", "self", ".", "new_cls", ".", "load_state_dict", "(", "\n", "{", "'weight'", ":", "self", ".", "fc_cls", ".", "weight", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "\n", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "'bias'", ":", "self", ".", "fc_cls", ".", "bias", "}", ")", "\n", "", "class_map", "=", "self", ".", "new_cls", "(", "x", ")", "\n", "cls_score", "=", "class_map", ".", "mean", "(", "[", "2", ",", "3", ",", "4", "]", ")", "\n", "cls_score", "=", "cls_score", ".", "reshape", "(", "(", "-", "1", ",", "num_clips", "*", "num_crops", ")", "+", "cls_score", ".", "shape", "[", "1", ":", "]", ")", "\n", "cls_score", "=", "cls_score", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "return", "cls_score", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.heads.i3d_clshead.I3DClsHead.init_weights": [[73, 76], ["torch.init.normal_", "torch.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc_cls", ".", "weight", ",", "0", ",", "self", ".", "init_std", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc_cls", ".", "bias", ",", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.simple_consensus._SimpleConsensus.__init__": [[10, 19], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "consensus_type", "=", "'avg'", ",", "\n", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "_SimpleConsensus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "consensus_type", "in", "[", "'avg'", "]", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "shape", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.simple_consensus._SimpleConsensus.forward": [[20, 27], ["x.size", "x.mean"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "shape", "=", "x", ".", "size", "(", ")", "\n", "if", "self", ".", "consensus_type", "==", "'avg'", ":", "\n", "            ", "output", "=", "x", ".", "mean", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "None", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.simple_consensus._SimpleConsensus.backward": [[28, 35], ["grad_output.expand", "float"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "if", "self", ".", "consensus_type", "==", "'avg'", ":", "\n", "            ", "grad_in", "=", "grad_output", ".", "expand", "(", "\n", "self", ".", "shape", ")", "/", "float", "(", "self", ".", "shape", "[", "self", ".", "dim", "]", ")", "\n", "", "else", ":", "\n", "            ", "grad_in", "=", "None", "\n", "", "return", "grad_in", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.simple_consensus.SimpleConsensus.__init__": [[39, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "SimpleConsensus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "consensus_type", "in", "[", "'avg'", "]", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.simple_consensus.SimpleConsensus.init_weights": [[46, 48], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.simple_consensus.SimpleConsensus.forward": [[49, 56], ["x.size", "x.mean"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "shape", "=", "x", ".", "size", "(", ")", "\n", "if", "self", ".", "consensus_type", "==", "'avg'", ":", "\n", "            ", "output", "=", "x", ".", "mean", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "None", "\n", "", "return", "output", "\n", "# return _SimpleConsensus(self.consensus_type, self.dim)(input)", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.RelationModule.__init__": [[10, 16], ["super().__init__", "relation_consensus.RelationModule.fc_fusion"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.RelationModule.fc_fusion"], ["    ", "def", "__init__", "(", "self", ",", "img_feature_dim", ",", "num_frames", ",", "num_class", ")", ":", "\n", "        ", "super", "(", "RelationModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "img_feature_dim", "=", "img_feature_dim", "\n", "self", ".", "classifier", "=", "self", ".", "fc_fusion", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.RelationModule.fc_fusion": [[17, 26], ["torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "fc_fusion", "(", "self", ")", ":", "\n", "# naive concatenate", "\n", "        ", "num_bottleneck", "=", "512", "\n", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "num_frames", "*", "self", ".", "img_feature_dim", ",", "num_bottleneck", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "num_bottleneck", ",", "self", ".", "num_class", ")", ",", ")", "\n", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.RelationModule.forward": [[27, 32], ["relation_consensus.RelationModule.view", "relation_consensus.RelationModule.classifier", "relation_consensus.RelationModule.size"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", ".", "view", "(", "\n", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_frames", "*", "self", ".", "img_feature_dim", ")", "\n", "input", "=", "self", ".", "classifier", "(", "input", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.RelationModuleMultiScale.__init__": [[38, 70], ["super().__init__", "torch.ModuleList", "torch.ModuleList", "range", "print", "relation_consensus.RelationModuleMultiScale.return_relationset", "relation_consensus.RelationModuleMultiScale.relations_scales.append", "relation_consensus.RelationModuleMultiScale.subsample_scales.append", "len", "torch.Sequential", "torch.Sequential", "range", "min", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "len"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.RelationModuleMultiScaleWithClassifier.return_relationset"], ["    ", "def", "__init__", "(", "self", ",", "img_feature_dim", ",", "num_frames", ",", "num_class", ")", ":", "\n", "        ", "super", "(", "RelationModuleMultiScale", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "subsample_num", "=", "3", "# how many relations selected to sum up", "\n", "self", ".", "img_feature_dim", "=", "img_feature_dim", "\n", "# generate the multiple frame relations", "\n", "self", ".", "scales", "=", "[", "i", "for", "i", "in", "range", "(", "num_frames", ",", "1", ",", "-", "1", ")", "]", "\n", "\n", "self", ".", "relations_scales", "=", "[", "]", "\n", "self", ".", "subsample_scales", "=", "[", "]", "\n", "for", "scale", "in", "self", ".", "scales", ":", "\n", "            ", "relations_scale", "=", "self", ".", "return_relationset", "(", "num_frames", ",", "scale", ")", "\n", "self", ".", "relations_scales", ".", "append", "(", "relations_scale", ")", "\n", "# how many samples of relation to select in each forward pass", "\n", "self", ".", "subsample_scales", ".", "append", "(", "\n", "min", "(", "self", ".", "subsample_num", ",", "len", "(", "relations_scale", ")", ")", ")", "\n", "\n", "", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "num_bottleneck", "=", "256", "\n", "self", ".", "fc_fusion_scales", "=", "nn", ".", "ModuleList", "(", ")", "# high-tech modulelist", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "scales", ")", ")", ":", "\n", "            ", "scale", "=", "self", ".", "scales", "[", "i", "]", "\n", "fc_fusion", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "scale", "*", "self", ".", "img_feature_dim", ",", "num_bottleneck", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "num_bottleneck", ",", "self", ".", "num_class", ")", ",", ")", "\n", "\n", "self", ".", "fc_fusion_scales", "+=", "[", "fc_fusion", "]", "\n", "\n", "", "print", "(", "'Multi-Scale Temporal Relation Network Module in use'", ",", "[", "\n", "'%d-frame relation'", "%", "i", "for", "i", "in", "self", ".", "scales", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.RelationModuleMultiScale.forward": [[71, 91], ["act_all.view.view.view", "range", "act_all.view.view.size", "len", "numpy.random.choice", "len", "act_relation.view.view.view", "act_relation.view.view.size"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# the first one is the largest scale", "\n", "        ", "act_all", "=", "input", "[", ":", ",", "self", ".", "relations_scales", "[", "0", "]", "[", "0", "]", ",", ":", "]", "\n", "act_all", "=", "act_all", ".", "view", "(", "\n", "act_all", ".", "size", "(", "0", ")", ",", "self", ".", "scales", "[", "0", "]", "*", "self", ".", "img_feature_dim", ")", "\n", "act_all", "=", "self", ".", "fc_fusion_scales", "[", "0", "]", "(", "act_all", ")", "\n", "\n", "for", "scaleID", "in", "range", "(", "1", ",", "len", "(", "self", ".", "scales", ")", ")", ":", "\n", "# iterate over the scales", "\n", "            ", "idx_relations_randomsample", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "self", ".", "relations_scales", "[", "scaleID", "]", ")", ",", "\n", "self", ".", "subsample_scales", "[", "scaleID", "]", ",", "replace", "=", "False", ")", "\n", "for", "idx", "in", "idx_relations_randomsample", ":", "\n", "                ", "act_relation", "=", "input", "[", ":", ",", "self", ".", "relations_scales", "[", "scaleID", "]", "[", "idx", "]", ",", ":", "]", "\n", "act_relation", "=", "act_relation", ".", "view", "(", "\n", "act_relation", ".", "size", "(", "0", ")", ",", "\n", "self", ".", "scales", "[", "scaleID", "]", "*", "self", ".", "img_feature_dim", ")", "\n", "act_relation", "=", "self", ".", "fc_fusion_scales", "[", "scaleID", "]", "(", "act_relation", ")", "\n", "act_all", "+=", "act_relation", "\n", "", "", "return", "act_all", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.RelationModuleMultiScale.return_relationset": [[92, 96], ["list", "itertools.combinations", "range"], "methods", ["None"], ["", "def", "return_relationset", "(", "self", ",", "num_frames", ",", "num_frames_relation", ")", ":", "\n", "        ", "import", "itertools", "\n", "return", "list", "(", "itertools", ".", "combinations", "(", "[", "\n", "i", "for", "i", "in", "range", "(", "num_frames", ")", "]", ",", "num_frames_relation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.RelationModuleMultiScaleWithClassifier.__init__": [[100, 137], ["super().__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "print", "print", "relation_consensus.RelationModuleMultiScaleWithClassifier.return_relationset", "relation_consensus.RelationModuleMultiScaleWithClassifier.relations_scales.append", "relation_consensus.RelationModuleMultiScaleWithClassifier.subsample_scales.append", "len", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "range", "min", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "len"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.RelationModuleMultiScaleWithClassifier.return_relationset"], ["    ", "def", "__init__", "(", "self", ",", "img_feature_dim", ",", "num_frames", ",", "num_class", ")", ":", "\n", "        ", "super", "(", "RelationModuleMultiScaleWithClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "subsample_num", "=", "3", "# how many relations selected to sum up", "\n", "self", ".", "img_feature_dim", "=", "img_feature_dim", "\n", "self", ".", "scales", "=", "[", "i", "for", "i", "in", "range", "(", "num_frames", ",", "1", ",", "-", "1", ")", "]", "\n", "\n", "self", ".", "relations_scales", "=", "[", "]", "\n", "self", ".", "subsample_scales", "=", "[", "]", "\n", "for", "scale", "in", "self", ".", "scales", ":", "\n", "            ", "relations_scale", "=", "self", ".", "return_relationset", "(", "num_frames", ",", "scale", ")", "\n", "self", ".", "relations_scales", ".", "append", "(", "relations_scale", ")", "\n", "# how many samples of relation to select in each forward pass", "\n", "self", ".", "subsample_scales", ".", "append", "(", "\n", "min", "(", "self", ".", "subsample_num", ",", "len", "(", "relations_scale", ")", ")", ")", "\n", "\n", "", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_frames", "=", "num_frames", "\n", "num_bottleneck", "=", "256", "\n", "self", ".", "fc_fusion_scales", "=", "nn", ".", "ModuleList", "(", ")", "# high-tech modulelist", "\n", "self", ".", "classifier_scales", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "scales", ")", ")", ":", "\n", "            ", "scale", "=", "self", ".", "scales", "[", "i", "]", "\n", "\n", "fc_fusion", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "scale", "*", "self", ".", "img_feature_dim", ",", "num_bottleneck", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.6", ")", ",", "# this is the newly added thing", "\n", "nn", ".", "Linear", "(", "num_bottleneck", ",", "num_bottleneck", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.6", ")", ",", ")", "\n", "classifier", "=", "nn", ".", "Linear", "(", "num_bottleneck", ",", "self", ".", "num_class", ")", "\n", "self", ".", "fc_fusion_scales", "+=", "[", "fc_fusion", "]", "\n", "self", ".", "classifier_scales", "+=", "[", "classifier", "]", "\n", "# maybe we put another fc layer after the summed up results???", "\n", "", "print", "(", "'Multi-Scale Temporal Relation with classifier in use'", ")", "\n", "print", "(", "[", "'%d-frame relation'", "%", "i", "for", "i", "in", "self", ".", "scales", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.RelationModuleMultiScaleWithClassifier.forward": [[138, 160], ["act_all.view.view.view", "range", "act_all.view.view.size", "len", "numpy.random.choice", "len", "act_relation.view.view.view", "act_relation.view.view.size"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# the first one is the largest scale", "\n", "        ", "act_all", "=", "input", "[", ":", ",", "self", ".", "relations_scales", "[", "0", "]", "[", "0", "]", ",", ":", "]", "\n", "act_all", "=", "act_all", ".", "view", "(", "\n", "act_all", ".", "size", "(", "0", ")", ",", "self", ".", "scales", "[", "0", "]", "*", "self", ".", "img_feature_dim", ")", "\n", "act_all", "=", "self", ".", "fc_fusion_scales", "[", "0", "]", "(", "act_all", ")", "\n", "act_all", "=", "self", ".", "classifier_scales", "[", "0", "]", "(", "act_all", ")", "\n", "\n", "for", "scaleID", "in", "range", "(", "1", ",", "len", "(", "self", ".", "scales", ")", ")", ":", "\n", "# iterate over the scales", "\n", "            ", "idx_relations_randomsample", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "self", ".", "relations_scales", "[", "scaleID", "]", ")", ",", "\n", "self", ".", "subsample_scales", "[", "scaleID", "]", ",", "replace", "=", "False", ")", "\n", "for", "idx", "in", "idx_relations_randomsample", ":", "\n", "                ", "act_relation", "=", "input", "[", ":", ",", "self", ".", "relations_scales", "[", "scaleID", "]", "[", "idx", "]", ",", ":", "]", "\n", "act_relation", "=", "act_relation", ".", "view", "(", "\n", "act_relation", ".", "size", "(", "0", ")", ",", "\n", "self", ".", "scales", "[", "scaleID", "]", "*", "self", ".", "img_feature_dim", ")", "\n", "act_relation", "=", "self", ".", "fc_fusion_scales", "[", "scaleID", "]", "(", "act_relation", ")", "\n", "act_relation", "=", "self", ".", "classifier_scales", "[", "scaleID", "]", "(", "act_relation", ")", "\n", "act_all", "+=", "act_relation", "\n", "", "", "return", "act_all", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.RelationModuleMultiScaleWithClassifier.return_relationset": [[161, 165], ["list", "itertools.combinations", "range"], "methods", ["None"], ["", "def", "return_relationset", "(", "self", ",", "num_frames", ",", "num_frames_relation", ")", ":", "\n", "        ", "import", "itertools", "\n", "return", "list", "(", "itertools", ".", "combinations", "(", "[", "\n", "i", "for", "i", "in", "range", "(", "num_frames", ")", "]", ",", "num_frames_relation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.relation_consensus.return_TRN": [[167, 177], ["relation_consensus.RelationModule", "relation_consensus.RelationModuleMultiScale", "ValueError"], "function", ["None"], ["", "", "def", "return_TRN", "(", "relation_type", ",", "img_feature_dim", ",", "num_frames", ",", "num_class", ")", ":", "\n", "    ", "if", "relation_type", "==", "'TRN'", ":", "\n", "        ", "TRNmodel", "=", "RelationModule", "(", "img_feature_dim", ",", "num_frames", ",", "num_class", ")", "\n", "", "elif", "relation_type", "==", "'TRNmultiscale'", ":", "\n", "        ", "TRNmodel", "=", "RelationModuleMultiScale", "(", "\n", "img_feature_dim", ",", "num_frames", ",", "num_class", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown TRN'", "+", "relation_type", ")", "\n", "\n", "", "return", "TRNmodel", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.StructuredTemporalPyramidPooling.__init__": [[19, 34], ["torch.Module.__init__", "stpp.parse_stage_config", "stpp.parse_stage_config", "stpp.parse_stage_config"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.parse_stage_config", "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.parse_stage_config", "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.parse_stage_config"], ["    ", "def", "__init__", "(", "self", ",", "standalong_classifier", "=", "False", ",", "\n", "stpp_cfg", "=", "(", "1", ",", "(", "1", ",", "2", ")", ",", "1", ")", ",", "num_seg", "=", "(", "2", ",", "5", ",", "2", ")", ")", ":", "\n", "        ", "super", "(", "StructuredTemporalPyramidPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sc", "=", "standalong_classifier", "\n", "\n", "starting_parts", ",", "starting_mult", "=", "parse_stage_config", "(", "stpp_cfg", "[", "0", "]", ")", "\n", "course_parts", ",", "course_mult", "=", "parse_stage_config", "(", "stpp_cfg", "[", "1", "]", ")", "\n", "ending_parts", ",", "ending_mult", "=", "parse_stage_config", "(", "stpp_cfg", "[", "2", "]", ")", "\n", "\n", "self", ".", "feat_multiplier", "=", "starting_mult", "+", "course_mult", "+", "ending_mult", "\n", "self", ".", "parts", "=", "(", "starting_parts", ",", "course_parts", ",", "ending_parts", ")", "\n", "self", ".", "norm_num", "=", "(", "starting_mult", ",", "course_mult", ",", "ending_mult", ")", "\n", "\n", "self", ".", "num_seg", "=", "num_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.StructuredTemporalPyramidPooling.init_weights": [[35, 37], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.StructuredTemporalPyramidPooling.forward": [[38, 75], ["input.size", "input.view", "input.view.size", "scaling.view.view.view", "feature_parts.extend", "feature_parts.extend", "feature_parts.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "stage_feat.size", "stpp.StructuredTemporalPyramidPooling.forward.get_stage_stpp"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "input", ",", "scaling", ")", ":", "\n", "        ", "x1", "=", "self", ".", "num_seg", "[", "0", "]", "\n", "x2", "=", "x1", "+", "self", ".", "num_seg", "[", "1", "]", "\n", "n_seg", "=", "x2", "+", "self", ".", "num_seg", "[", "2", "]", "\n", "\n", "feat_dim", "=", "input", ".", "size", "(", "1", ")", "\n", "src", "=", "input", ".", "view", "(", "-", "1", ",", "n_seg", ",", "feat_dim", ")", "\n", "num_sample", "=", "src", ".", "size", "(", "0", ")", "\n", "\n", "scaling", "=", "scaling", ".", "view", "(", "-", "1", ",", "2", ")", "\n", "\n", "def", "get_stage_stpp", "(", "stage_feat", ",", "stage_parts", ",", "norm_num", ",", "scaling", ")", ":", "\n", "            ", "stage_stpp", "=", "[", "]", "\n", "stage_len", "=", "stage_feat", ".", "size", "(", "1", ")", "\n", "for", "n_part", "in", "stage_parts", ":", "\n", "                ", "ticks", "=", "torch", ".", "arange", "(", "0", ",", "stage_len", "+", "1e-5", ",", "stage_len", "/", "n_part", ")", "\n", "for", "i", "in", "range", "(", "n_part", ")", ":", "\n", "                    ", "part_feat", "=", "stage_feat", "[", ":", ",", "int", "(", "ticks", "[", "i", "]", ")", ":", "int", "(", "\n", "ticks", "[", "i", "+", "1", "]", ")", ",", ":", "]", ".", "mean", "(", "dim", "=", "1", ")", "/", "norm_num", "\n", "if", "scaling", "is", "not", "None", ":", "\n", "                        ", "part_feat", "=", "part_feat", "*", "scaling", ".", "view", "(", "num_sample", ",", "1", ")", "\n", "", "stage_stpp", ".", "append", "(", "part_feat", ")", "\n", "", "", "return", "stage_stpp", "\n", "\n", "", "feature_parts", "=", "[", "]", "\n", "feature_parts", ".", "extend", "(", "get_stage_stpp", "(", "\n", "src", "[", ":", ",", ":", "x1", ",", ":", "]", ",", "self", ".", "parts", "[", "0", "]", ",", "self", ".", "norm_num", "[", "0", "]", ",", "scaling", "[", ":", ",", "0", "]", ")", ")", "\n", "feature_parts", ".", "extend", "(", "get_stage_stpp", "(", "\n", "src", "[", ":", ",", "x1", ":", "x2", ",", ":", "]", ",", "self", ".", "parts", "[", "1", "]", ",", "self", ".", "norm_num", "[", "1", "]", ",", "None", ")", ")", "\n", "feature_parts", ".", "extend", "(", "get_stage_stpp", "(", "\n", "src", "[", ":", ",", "x2", ":", ",", ":", "]", ",", "self", ".", "parts", "[", "2", "]", ",", "self", ".", "norm_num", "[", "2", "]", ",", "scaling", "[", ":", ",", "1", "]", ")", ")", "\n", "stpp_feat", "=", "torch", ".", "cat", "(", "feature_parts", ",", "dim", "=", "1", ")", "\n", "if", "not", "self", ".", "sc", ":", "\n", "            ", "return", "stpp_feat", ",", "stpp_feat", "\n", "", "else", ":", "\n", "            ", "course_feat", "=", "src", "[", ":", ",", "x1", ":", "x2", ",", ":", "]", ".", "mean", "(", "dim", "=", "1", ")", "\n", "return", "course_feat", ",", "stpp_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.STPPReorganized.__init__": [[79, 108], ["torch.Module.__init__", "stpp.parse_stage_config", "stpp.parse_stage_config", "stpp.parse_stage_config", "slice", "slice", "slice"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.parse_stage_config", "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.parse_stage_config", "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.parse_stage_config"], ["    ", "def", "__init__", "(", "self", ",", "feat_dim", ",", "act_score_len", ",", "\n", "comp_score_len", ",", "reg_score_len", ",", "\n", "standalong_classifier", "=", "False", ",", "\n", "with_regression", "=", "True", ",", "\n", "stpp_cfg", "=", "(", "1", ",", "(", "1", ",", "2", ")", ",", "1", ")", ")", ":", "\n", "        ", "super", "(", "STPPReorganized", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sc", "=", "standalong_classifier", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "act_score_len", "=", "act_score_len", "\n", "self", ".", "comp_score_len", "=", "comp_score_len", "\n", "self", ".", "reg_score_len", "=", "reg_score_len", "\n", "self", ".", "with_regression", "=", "with_regression", "\n", "\n", "starting_parts", ",", "starting_mult", "=", "parse_stage_config", "(", "stpp_cfg", "[", "0", "]", ")", "\n", "course_parts", ",", "course_mult", "=", "parse_stage_config", "(", "stpp_cfg", "[", "1", "]", ")", "\n", "ending_parts", ",", "ending_mult", "=", "parse_stage_config", "(", "stpp_cfg", "[", "2", "]", ")", "\n", "\n", "self", ".", "feat_multiplier", "=", "starting_mult", "+", "course_mult", "+", "ending_mult", "\n", "self", ".", "stpp_cfg", "=", "(", "starting_parts", ",", "course_parts", ",", "ending_parts", ")", "\n", "\n", "self", ".", "act_slice", "=", "slice", "(", "0", ",", "self", ".", "act_score_len", "if", "self", ".", "sc", "else", "(", "\n", "self", ".", "act_score_len", "*", "self", ".", "feat_multiplier", ")", ")", "\n", "self", ".", "comp_slice", "=", "slice", "(", "\n", "self", ".", "act_slice", ".", "stop", ",", "\n", "self", ".", "act_slice", ".", "stop", "+", "self", ".", "comp_score_len", "*", "self", ".", "feat_multiplier", ")", "\n", "self", ".", "reg_slice", "=", "slice", "(", "\n", "self", ".", "comp_slice", ".", "stop", ",", "\n", "self", ".", "comp_slice", ".", "stop", "+", "self", ".", "reg_score_len", "*", "self", ".", "feat_multiplier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.STPPReorganized.init_weights": [[109, 111], ["None"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.STPPReorganized.forward": [[112, 178], ["proposal_ticks.size", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "range", "input.size", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "enumerate", "proposal_ticks[].cpu().numpy", "stpp.STPPReorganized.forward.pspool"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["", "def", "forward", "(", "self", ",", "input", ",", "proposal_ticks", ",", "scaling", ")", ":", "\n", "        ", "assert", "input", ".", "size", "(", "1", ")", "==", "self", ".", "feat_dim", "\n", "n_ticks", "=", "proposal_ticks", ".", "size", "(", "0", ")", "\n", "\n", "out_act_scores", "=", "torch", ".", "zeros", "(", "\n", "(", "n_ticks", ",", "self", ".", "act_score_len", ")", ")", ".", "type_as", "(", "input", ")", "\n", "raw_act_scores", "=", "input", "[", ":", ",", "self", ".", "act_slice", "]", "\n", "\n", "out_comp_scores", "=", "torch", ".", "zeros", "(", "\n", "(", "n_ticks", ",", "self", ".", "comp_score_len", ")", ")", ".", "type_as", "(", "input", ")", "\n", "raw_comp_scores", "=", "input", "[", ":", ",", "self", ".", "comp_slice", "]", "\n", "\n", "if", "self", ".", "with_regression", ":", "\n", "            ", "out_reg_scores", "=", "torch", ".", "zeros", "(", "\n", "(", "n_ticks", ",", "self", ".", "reg_score_len", ")", ")", ".", "type_as", "(", "input", ")", "\n", "raw_reg_scores", "=", "input", "[", ":", ",", "self", ".", "reg_slice", "]", "\n", "", "else", ":", "\n", "            ", "out_reg_scores", "=", "None", "\n", "raw_reg_scores", "=", "None", "\n", "\n", "", "def", "pspool", "(", "out_scores", ",", "index", ",", "raw_scores", ",", "\n", "ticks", ",", "scaling", ",", "score_len", ",", "stpp_cfg", ")", ":", "\n", "            ", "offset", "=", "0", "\n", "for", "stage_idx", ",", "stage_cfg", "in", "enumerate", "(", "stpp_cfg", ")", ":", "\n", "                ", "if", "stage_idx", "==", "0", ":", "\n", "                    ", "s", "=", "scaling", "[", "0", "]", "\n", "", "elif", "stage_idx", "==", "len", "(", "stpp_cfg", ")", "-", "1", ":", "\n", "                    ", "s", "=", "scaling", "[", "1", "]", "\n", "", "else", ":", "\n", "                    ", "s", "=", "1.0", "\n", "\n", "", "stage_cnt", "=", "sum", "(", "stage_cfg", ")", "\n", "left", "=", "ticks", "[", "stage_idx", "]", "\n", "right", "=", "max", "(", "ticks", "[", "stage_idx", "]", "+", "1", ",", "ticks", "[", "stage_idx", "+", "1", "]", ")", "\n", "\n", "if", "right", "<=", "0", "or", "left", ">=", "raw_scores", ".", "size", "(", "0", ")", ":", "\n", "                    ", "offset", "+=", "stage_cnt", "\n", "continue", "\n", "", "for", "n_part", "in", "stage_cfg", ":", "\n", "                    ", "part_ticks", "=", "np", ".", "arange", "(", "\n", "left", ",", "right", "+", "1e-5", ",", "(", "right", "-", "left", ")", "/", "n_part", ")", "\n", "for", "i", "in", "range", "(", "n_part", ")", ":", "\n", "                        ", "pl", "=", "int", "(", "part_ticks", "[", "i", "]", ")", "\n", "pr", "=", "int", "(", "part_ticks", "[", "i", "+", "1", "]", ")", "\n", "if", "pr", "-", "pl", ">=", "1", ":", "\n", "                            ", "out_scores", "[", "index", ",", ":", "]", "+=", "raw_scores", "[", "\n", "pl", ":", "pr", ",", "offset", "*", "score_len", ":", "(", "offset", "+", "1", ")", "*", "score_len", "]", ".", "mean", "(", "dim", "=", "0", ")", "*", "s", "\n", "", "offset", "+=", "1", "\n", "\n", "", "", "", "", "for", "i", "in", "range", "(", "n_ticks", ")", ":", "\n", "            ", "ticks", "=", "proposal_ticks", "[", "i", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "self", ".", "sc", ":", "\n", "                ", "out_act_scores", "[", "i", ",", ":", "]", "=", "raw_act_scores", "[", "\n", "ticks", "[", "1", "]", ":", "max", "(", "ticks", "[", "1", "]", "+", "1", ",", "ticks", "[", "2", "]", ")", ",", ":", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "pspool", "(", "out_act_scores", ",", "i", ",", "raw_act_scores", ",", "ticks", ",", "scaling", "[", "i", "]", ",", "\n", "self", ".", "act_score_len", ",", "self", ".", "stpp_cfg", ")", "\n", "\n", "", "pspool", "(", "out_comp_scores", ",", "i", ",", "raw_comp_scores", ",", "ticks", ",", "scaling", "[", "i", "]", ",", "\n", "self", ".", "comp_score_len", ",", "self", ".", "stpp_cfg", ")", "\n", "\n", "if", "self", ".", "with_regression", ":", "\n", "                ", "pspool", "(", "out_reg_scores", ",", "i", ",", "raw_reg_scores", ",", "ticks", ",", "scaling", "[", "i", "]", ",", "\n", "self", ".", "reg_score_len", ",", "self", ".", "stpp_cfg", ")", "\n", "\n", "", "", "return", "out_act_scores", ",", "out_comp_scores", ",", "out_reg_scores", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.stpp.parse_stage_config": [[8, 15], ["isinstance", "isinstance", "isinstance", "ValueError", "sum"], "function", ["None"], ["def", "parse_stage_config", "(", "stage_cfg", ")", ":", "\n", "    ", "if", "isinstance", "(", "stage_cfg", ",", "int", ")", ":", "\n", "        ", "return", "(", "stage_cfg", ",", ")", ",", "stage_cfg", "\n", "", "elif", "isinstance", "(", "stage_cfg", ",", "tuple", ")", "or", "isinstance", "(", "stage_cfg", ",", "list", ")", ":", "\n", "        ", "return", "stage_cfg", ",", "sum", "(", "stage_cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Incorrect STPP config {}\"", ".", "format", "(", "stage_cfg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.BasicBlock.__init__": [[43, 83], ["dict", "torch.Module.__init__", "common.build_norm_layer", "common.build_norm_layer", "resnet_i3d.BasicBlock.add_module", "resnet_i3d.BasicBlock.add_module", "torch.ReLU", "torch.ReLU", "resnet_i3d.conv3x3x3", "resnet_i3d.conv1x3x3", "resnet_i3d.conv3x3x3", "resnet_i3d.conv1x3x3"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.conv3x3x3", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.conv1x3x3", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.conv3x3x3", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.conv1x3x3"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "spatial_stride", "=", "1", ",", "\n", "temporal_stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "if_inflate", "=", "True", ",", "\n", "inflate_style", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN3d'", ")", ",", "\n", "if_nonlocal", "=", "True", ",", "# \u8fd9\u91cc\u662f\u4e3a\u4e86\u4fdd\u8bc1\u4f7f\u7528resnet18\uff0c nonlocal\u6ca1\u6709\u4f7f\u7528\u4e0a", "\n", "nonlocal_cfg", "=", "None", ",", "# \u540c\u4e0a", "\n", "avd", "=", "False", ",", "# \u540c\u4e0a", "\n", "avd_first", "=", "False", ",", "# \u540c\u4e0a", "\n", "with_cp", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "if_inflate", ":", "\n", "            ", "self", ".", "conv1", "=", "conv3x3x3", "(", "inplanes", ",", "planes", ",", "spatial_stride", ",", "\n", "temporal_stride", ",", "dilation", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "conv1x3x3", "(", "inplanes", ",", "planes", ",", "spatial_stride", ",", "\n", "temporal_stride", ",", "dilation", ")", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "# self.bn1 = nn.BatchNorm3d(planes)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "if_inflate", ":", "\n", "            ", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", ",", "planes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv2", "=", "conv1x3x3", "(", "planes", ",", "planes", ")", "\n", "# self.bn2 = nn.BatchNorm3d(planes)", "\n", "", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "spatial_stride", "=", "spatial_stride", "\n", "self", ".", "temporal_stride", "=", "temporal_stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "assert", "not", "with_cp", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.BasicBlock.norm1": [[84, 87], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.BasicBlock.norm2": [[88, 91], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.BasicBlock.forward": [[92, 109], ["resnet_i3d.BasicBlock.conv1", "resnet_i3d.BasicBlock.norm1", "resnet_i3d.BasicBlock.relu", "resnet_i3d.BasicBlock.conv2", "resnet_i3d.BasicBlock.norm2", "resnet_i3d.BasicBlock.relu", "resnet_i3d.BasicBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.Bottleneck.norm2"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.Bottleneck.__init__": [[135, 251], ["dict", "torch.Module.__init__", "common.build_norm_layer", "common.build_norm_layer", "common.build_norm_layer", "resnet_i3d.Bottleneck.add_module", "resnet_i3d.Bottleneck.add_module", "resnet_i3d.Bottleneck.add_module", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "nonlocal_cfg.copy", "modules.non_local.build_nonlocal_block"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "spatial_stride", "=", "1", ",", "\n", "temporal_stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "if_inflate", "=", "True", ",", "\n", "inflate_style", "=", "'3x1x1'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN3d'", ")", ",", "\n", "if_nonlocal", "=", "True", ",", "\n", "nonlocal_cfg", "=", "None", ",", "\n", "with_cp", "=", "False", ",", "\n", "avd", "=", "False", ",", "\n", "avd_first", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "style", "in", "[", "'pytorch'", ",", "'caffe'", "]", "\n", "assert", "inflate_style", "in", "[", "'3x1x1'", ",", "'3x3x3'", "]", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "spatial_tride", "=", "spatial_stride", "\n", "self", ".", "temporal_tride", "=", "temporal_stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "avd", "=", "avd", "and", "spatial_stride", ">", "1", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "if", "self", ".", "avd", ":", "\n", "            ", "self", ".", "avd_layer", "=", "nn", ".", "AvgPool3d", "(", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "spatial_stride", ",", "spatial_stride", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "spatial_stride", "=", "1", "\n", "\n", "", "if", "style", "==", "'pytorch'", ":", "\n", "            ", "self", ".", "conv1_stride_s", "=", "1", "\n", "self", ".", "conv2_stride_s", "=", "spatial_stride", "\n", "self", ".", "conv1_stride_t", "=", "1", "\n", "self", ".", "conv2_stride_t", "=", "temporal_stride", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1_stride_s", "=", "spatial_stride", "\n", "self", ".", "conv2_stride_s", "=", "1", "\n", "self", ".", "conv1_stride_t", "=", "temporal_stride", "\n", "self", ".", "conv2_stride_t", "=", "1", "\n", "\n", "", "if", "if_inflate", ":", "\n", "            ", "if", "inflate_style", "==", "'3x1x1'", ":", "\n", "                ", "conv1_kernel_size", "=", "(", "3", ",", "1", ",", "1", ")", "\n", "conv1_padding", "=", "(", "1", ",", "0", ",", "0", ")", "\n", "conv2_kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", "\n", "conv2_padding", "=", "(", "0", ",", "dilation", ",", "dilation", ")", "\n", "", "else", ":", "\n", "                ", "conv1_kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", "\n", "conv1_padding", "=", "0", "\n", "conv2_kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", "\n", "conv2_padding", "=", "(", "1", ",", "dilation", ",", "dilation", ")", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "conv1_kernel_size", ",", "\n", "stride", "=", "(", "self", ".", "conv1_stride_t", ",", "self", ".", "conv1_stride_s", ",", "\n", "self", ".", "conv1_stride_s", ")", ",", "\n", "padding", "=", "conv1_padding", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "conv2_kernel_size", ",", "\n", "stride", "=", "(", "self", ".", "conv2_stride_t", ",", "self", ".", "conv2_stride_s", ",", "\n", "self", ".", "conv2_stride_s", ")", ",", "\n", "padding", "=", "conv2_padding", ",", "\n", "dilation", "=", "(", "1", ",", "dilation", ",", "dilation", ")", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "(", "1", ",", "self", ".", "conv1_stride_s", ",", "self", ".", "conv1_stride_s", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "self", ".", "conv2_stride_s", ",", "self", ".", "conv2_stride_s", ")", ",", "\n", "padding", "=", "(", "0", ",", "dilation", ",", "dilation", ")", ",", "\n", "dilation", "=", "(", "1", ",", "dilation", ",", "dilation", ")", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "planes", "*", "self", ".", "expansion", ",", "postfix", "=", "3", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "# self.bn1 = nn.BatchNorm3d(planes)", "\n", "# self.bn2 = nn.BatchNorm3d(planes)", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "\n", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "# self.bn3 = nn.BatchNorm3d(planes * self.expansion)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "if_nonlocal", "and", "nonlocal_cfg", "is", "not", "None", ":", "\n", "            ", "nonlocal_cfg_", "=", "nonlocal_cfg", ".", "copy", "(", ")", "\n", "nonlocal_cfg_", "[", "'in_channels'", "]", "=", "planes", "*", "self", ".", "expansion", "\n", "self", ".", "nonlocal_block", "=", "build_nonlocal_block", "(", "nonlocal_cfg_", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "nonlocal_block", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.Bottleneck.norm1": [[252, 255], ["getattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.Bottleneck.norm2": [[256, 259], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.Bottleneck.norm3": [[260, 263], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm3", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm3_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.Bottleneck.forward": [[264, 304], ["resnet_i3d.Bottleneck.relu", "resnet_i3d.Bottleneck.conv1", "resnet_i3d.Bottleneck.norm1", "resnet_i3d.Bottleneck.relu", "resnet_i3d.Bottleneck.conv2", "resnet_i3d.Bottleneck.norm2", "resnet_i3d.Bottleneck.relu", "resnet_i3d.Bottleneck.conv3", "resnet_i3d.Bottleneck.norm3", "torch.checkpoint", "torch.checkpoint", "resnet_i3d.Bottleneck.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.Bottleneck.norm2", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.Bottleneck.norm3"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "avd", "and", "self", ".", "avd_first", ":", "\n", "                ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "avd", "and", "not", "self", ".", "avd_first", ":", "\n", "                ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "norm3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "nonlocal_block", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "nonlocal_block", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.ResNet_I3D.__init__": [[476, 632], ["dict", "torch.Module.__init__", "common.get_norm_type", "common.build_norm_layer", "resnet_i3d.ResNet_I3D.add_module", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "enumerate", "KeyError", "len", "len", "len", "max", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "resnet_i3d.make_res_layer", "resnet_i3d.ResNet_I3D.add_module", "resnet_i3d.ResNet_I3D.res_layers.append", "isinstance", "isinstance", "torch.Conv3d", "torch.Conv3d", "common.get_norm_type.", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "common.get_norm_type.", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "tuple", "len", "torch.nn.modules.utils._triple", "torch.nn.modules.utils._triple"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.get_norm_type", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.make_res_layer"], ["def", "__init__", "(", "self", ",", "\n", "depth", ",", "\n", "pretrained", "=", "None", ",", "\n", "pretrained2d", "=", "True", ",", "\n", "in_channels", "=", "3", ",", "\n", "num_stages", "=", "4", ",", "\n", "spatial_strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "temporal_strides", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "\n", "conv1_kernel", "=", "(", "5", ",", "7", ",", "7", ")", ",", "\n", "conv1_stride_t", "=", "2", ",", "\n", "pool1_kernel_t", "=", "1", ",", "\n", "pool1_stride_t", "=", "2", ",", "\n", "pool1_stride_s", "=", "2", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "# For C2D baseline, inflate_freq set to -1.", "\n", "inflate_freq", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "inflate_stride", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "inflate_style", "=", "'3x1x1'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN3d'", ",", "requires_grad", "=", "True", ")", ",", "\n", "nonlocal_stages", "=", "(", "-", "1", ",", ")", ",", "\n", "nonlocal_freq", "=", "(", "0", ",", "1", ",", "1", ",", "0", ")", ",", "\n", "nonlocal_cfg", "=", "None", ",", "\n", "no_pool2", "=", "False", ",", "\n", "norm_eval", "=", "True", ",", "\n", "norm_frozen", "=", "False", ",", "\n", "partial_norm", "=", "False", ",", "\n", "with_cp", "=", "False", ",", "\n", "zero_init_residual", "=", "True", ",", "\n", "avg_down", "=", "False", ",", "# add 2x2 avg_pool before 1x1 cnn in shortcut", "\n", "avd", "=", "False", ",", "# Average Downsampling in resnest", "\n", "avd_first", "=", "False", ",", "\n", "deep_stem", "=", "False", ",", "\n", "stem_width", "=", "64", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet_I3D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "'invalid depth {} for resnet'", ".", "format", "(", "depth", ")", ")", "\n", "", "self", ".", "depth", "=", "depth", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "pretrained2d", "=", "pretrained2d", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "assert", "num_stages", ">=", "1", "and", "num_stages", "<=", "4", "\n", "self", ".", "spatial_strides", "=", "spatial_strides", "\n", "self", ".", "temporal_strides", "=", "temporal_strides", "\n", "self", ".", "dilations", "=", "dilations", "\n", "assert", "len", "(", "spatial_strides", ")", "==", "len", "(", "\n", "temporal_strides", ")", "==", "len", "(", "dilations", ")", "==", "num_stages", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "assert", "max", "(", "out_indices", ")", "<", "num_stages", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "inflate_freqs", "=", "inflate_freq", "if", "not", "isinstance", "(", "\n", "inflate_freq", ",", "int", ")", "else", "(", "inflate_freq", ",", ")", "*", "num_stages", "\n", "self", ".", "inflate_style", "=", "inflate_style", "\n", "self", ".", "nonlocal_stages", "=", "nonlocal_stages", "\n", "self", ".", "nonlocal_freqs", "=", "nonlocal_freq", "if", "not", "isinstance", "(", "\n", "nonlocal_freq", ",", "int", ")", "else", "(", "nonlocal_freq", ",", ")", "*", "num_stages", "\n", "self", ".", "nonlocal_cfg", "=", "nonlocal_cfg", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "norm_frozen", "=", "norm_frozen", "\n", "self", ".", "partial_norm", "=", "partial_norm", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "zero_init_residual", "=", "zero_init_residual", "\n", "\n", "self", ".", "block", ",", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "self", ".", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "self", ".", "inplanes", "=", "stem_width", "*", "2", "if", "deep_stem", "else", "64", "\n", "self", ".", "avg_down", "=", "avg_down", "\n", "self", ".", "avd", "=", "avd", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "self", ".", "deep_stem", "=", "deep_stem", "\n", "self", ".", "stem_width", "=", "stem_width", "\n", "norm_type", "=", "get_norm_type", "(", "norm_cfg", ")", "\n", "if", "deep_stem", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "in_channels", ",", "stem_width", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ")", ",", "\n", "norm_type", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "stem_width", ",", "stem_width", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "norm_type", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "stem_width", ",", "stem_width", "*", "2", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "in_channels", ",", "64", ",", "\n", "kernel_size", "=", "conv1_kernel", ",", "\n", "stride", "=", "(", "conv1_stride_t", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "tuple", "(", "[", "(", "k", "-", "1", ")", "//", "2", "for", "k", "in", "_triple", "(", "conv1_kernel", ")", "]", ")", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "self", ".", "inplanes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "# self.bn1 = nn.BatchNorm3d(64)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "\n", "kernel_size", "=", "(", "pool1_kernel_t", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "pool1_stride_t", ",", "pool1_stride_s", ",", "pool1_stride_s", ")", ",", "\n", "padding", "=", "(", "pool1_kernel_t", "//", "2", ",", "1", ",", "1", ")", ")", "\n", "# TODO: Check whether pad=0 differs a lot", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool3d", "(", "\n", "kernel_size", "=", "(", "2", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "self", ".", "no_pool2", "=", "no_pool2", "\n", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "spatial_stride", "=", "spatial_strides", "[", "i", "]", "\n", "temporal_stride", "=", "temporal_strides", "[", "i", "]", "\n", "dilation", "=", "dilations", "[", "i", "]", "\n", "planes", "=", "64", "*", "2", "**", "i", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "self", ".", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "spatial_stride", "=", "spatial_stride", ",", "\n", "temporal_stride", "=", "temporal_stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "inflate_freq", "=", "self", ".", "inflate_freqs", "[", "i", "]", ",", "\n", "inflate_style", "=", "self", ".", "inflate_style", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "nonlocal_freq", "=", "self", ".", "nonlocal_freqs", "[", "i", "]", ",", "\n", "nonlocal_cfg", "=", "nonlocal_cfg", "if", "i", "in", "nonlocal_stages", "else", "None", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "avg_down", "=", "avg_down", ",", "\n", "avd", "=", "avd", ",", "\n", "avd_first", "=", "avd_first", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "layer_name", "=", "'layer{}'", ".", "format", "(", "i", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "feat_dim", "=", "self", ".", "block", ".", "expansion", "*", "64", "*", "2", "**", "(", "\n", "len", "(", "self", ".", "stage_blocks", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.ResNet_I3D.norm1": [[633, 636], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.ResNet_I3D.init_weights": [[637, 699], ["isinstance", "utils.get_root_logger", "utils.get_root_logger.info", "resnet.ResNet", "utils.load_checkpoint", "resnet_i3d.ResNet_I3D.named_modules", "utils.load_checkpoint", "resnet_i3d.ResNet_I3D.modules", "TypeError", "isinstance", "isinstance", "resnet_i3d.ResNet_I3D.modules", "module.init_weights", "mmcv.cnn.kaiming_init", "isinstance", "isinstance", "isinstance", "common.rhasattr", "module.weight.data.copy_", "utils.get_root_logger.info", "mmcv.cnn.constant_init", "mmcv.cnn.constant_init", "common.rgetattr().weight.data.unsqueeze().expand_as", "hasattr", "module.bias.data.copy_", "utils.get_root_logger.info", "isinstance", "common.rhasattr", "utils.get_root_logger.info", "setattr", "common.rgetattr().weight.data.unsqueeze", "common.rgetattr", "getattr", "common.rgetattr", "getattr", "common.rgetattr", "common.rgetattr"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_checkpoint", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_checkpoint", "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.ConvModule.init_weights", "home.repos.pwc.inspect_result.whwu95_DSANet.common.misc.rhasattr", "home.repos.pwc.inspect_result.whwu95_DSANet.common.misc.rhasattr", "home.repos.pwc.inspect_result.whwu95_DSANet.common.misc.rgetattr", "home.repos.pwc.inspect_result.whwu95_DSANet.common.misc.rgetattr", "home.repos.pwc.inspect_result.whwu95_DSANet.common.misc.rgetattr", "home.repos.pwc.inspect_result.whwu95_DSANet.common.misc.rgetattr"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "logger", ".", "info", "(", "\"load model from: {}\"", ".", "format", "(", "self", ".", "pretrained", ")", ")", "\n", "if", "self", ".", "pretrained2d", ":", "\n", "                ", "resnet2d", "=", "ResNet", "(", "\n", "self", ".", "depth", ",", "\n", "avg_down", "=", "self", ".", "avg_down", ",", "\n", "avd", "=", "self", ".", "avd", ",", "\n", "avd_first", "=", "self", ".", "avd_first", ",", "\n", "deep_stem", "=", "self", ".", "deep_stem", ",", "\n", "stem_width", "=", "self", ".", "stem_width", ")", "\n", "load_checkpoint", "(", "resnet2d", ",", "self", ".", "pretrained", ",", "map_location", "=", "'cpu'", ",", "\n", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "for", "name", ",", "module", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "module", ",", "NonLocalModule", ")", ":", "\n", "                        ", "module", ".", "init_weights", "(", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Conv3d", ")", "and", "rhasattr", "(", "\n", "resnet2d", ",", "name", ")", ":", "\n", "                        ", "new_weight", "=", "rgetattr", "(", "\n", "resnet2d", ",", "name", ")", ".", "weight", ".", "data", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "\n", "module", ".", "weight", ")", "/", "module", ".", "weight", ".", "data", ".", "shape", "[", "2", "]", "\n", "module", ".", "weight", ".", "data", ".", "copy_", "(", "new_weight", ")", "\n", "logger", ".", "info", "(", "\n", "\"{}.weight loaded from weights file into {}\"", ".", "\n", "format", "(", "name", ",", "new_weight", ".", "shape", ")", ")", "\n", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                            ", "new_bias", "=", "rgetattr", "(", "resnet2d", ",", "name", ")", ".", "bias", ".", "data", "\n", "module", ".", "bias", ".", "data", ".", "copy_", "(", "new_bias", ")", "\n", "logger", ".", "info", "(", "\n", "\"{}.bias loaded from weights file into {}\"", ".", "\n", "format", "(", "name", ",", "new_bias", ".", "shape", ")", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "module", ",", "_BatchNorm", ")", "and", "rhasattr", "(", "\n", "resnet2d", ",", "name", ")", ":", "\n", "                        ", "for", "attr", "in", "[", "\n", "'weight'", ",", "'bias'", ",", "'running_mean'", ",", "'running_var'", "\n", "]", ":", "\n", "                            ", "logger", ".", "info", "(", "\n", "\"{}.{} loaded from weights file into {}\"", "\n", ".", "format", "(", "\n", "name", ",", "attr", ",", "getattr", "(", "\n", "rgetattr", "(", "resnet2d", ",", "name", ")", ",", "attr", ")", ".", "shape", ")", ")", "\n", "setattr", "(", "module", ",", "attr", ",", "getattr", "(", "\n", "rgetattr", "(", "resnet2d", ",", "name", ")", ",", "attr", ")", ")", "\n", "", "", "", "", "else", ":", "\n", "                ", "load_checkpoint", "(", "\n", "self", ",", "self", ".", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "\n", "", "", "elif", "self", ".", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "", "if", "self", ".", "zero_init_residual", ":", "\n", "                ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                        ", "constant_init", "(", "m", ".", "norm3", ",", "0", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.ResNet_I3D.forward": [[700, 721], ["resnet_i3d.ResNet_I3D.conv1", "resnet_i3d.ResNet_I3D.norm1", "resnet_i3d.ResNet_I3D.relu", "resnet_i3d.ResNet_I3D.maxpool", "enumerate", "getattr", "getattr.", "len", "tuple", "outs.append", "resnet_i3d.ResNet_I3D.pool2"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.norm1"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "res_layers", ")", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "res_layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "if", "self", ".", "no_pool2", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "x", "=", "self", ".", "pool2", "(", "x", ")", "\n", "# print(x.shape)", "\n", "", "", "", "if", "len", "(", "outs", ")", "==", "1", ":", "\n", "            ", "return", "outs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.ResNet_I3D.train": [[722, 752], ["super().train", "resnet_i3d.ResNet_I3D.modules", "range", "resnet_i3d.ResNet_I3D.conv1.parameters", "resnet_i3d.ResNet_I3D.bn1.parameters", "resnet_i3d.ResNet_I3D.norm1.eval", "range", "isinstance", "getattr", "getattr.modules", "getattr", "getattr.eval", "getattr.parameters", "m.eval", "isinstance", "m.parameters", "m.eval"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet_I3D", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "if", "self", ".", "norm_frozen", ":", "\n", "                        ", "for", "params", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                            ", "params", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "", "if", "self", ".", "partial_norm", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "                ", "mod", "=", "getattr", "(", "self", ",", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "for", "m", "in", "mod", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "if", "mode", "and", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "for", "param", "in", "self", ".", "conv1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "norm1", ".", "eval", "(", ")", "\n", "self", ".", "norm1", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "norm1", ".", "bias", ".", "requires_grad", "=", "False", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "                ", "mod", "=", "getattr", "(", "self", ",", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "mod", ".", "eval", "(", ")", "\n", "for", "param", "in", "mod", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.conv3x3x3": [[14, 25], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "spatial_stride", "=", "1", ",", "\n", "temporal_stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"3x3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "(", "temporal_stride", ",", "spatial_stride", ",", "spatial_stride", ")", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.conv1x3x3": [[27, 38], ["torch.Conv3d"], "function", ["None"], ["", "def", "conv1x3x3", "(", "in_planes", ",", "out_planes", ",", "spatial_stride", "=", "1", ",", "\n", "temporal_stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"1x3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "temporal_stride", ",", "spatial_stride", ",", "spatial_stride", ")", ",", "\n", "padding", "=", "(", "0", ",", "dilation", ",", "dilation", ")", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_i3d.make_res_layer": [[306, 425], ["layers.append", "range", "torch.Sequential", "len", "len", "common.get_norm_type", "down_layers.append", "torch.Sequential", "block", "layers.append", "isinstance", "isinstance", "down_layers.append", "down_layers.append", "common.get_norm_type.", "block", "down_layers.append", "down_layers.append", "torch.Conv3d", "torch.Conv3d", "torch.AvgPool3d", "torch.AvgPool3d"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.get_norm_type"], ["", "", "def", "make_res_layer", "(", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "spatial_stride", "=", "1", ",", "\n", "temporal_stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "inflate_freq", "=", "1", ",", "\n", "inflate_style", "=", "'3x1x1'", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "nonlocal_freq", "=", "1", ",", "\n", "nonlocal_cfg", "=", "None", ",", "\n", "with_cp", "=", "False", ",", "\n", "avg_down", "=", "False", ",", "\n", "avd", "=", "False", ",", "\n", "avd_first", "=", "False", ")", ":", "\n", "    ", "\"\"\"Build residual layer for ResNet3D.\n\n    Args:\n        block (nn.Module): Residual module to be built.\n        inplanes (int): Number of channels for the input feature in each block.\n        planes (int): Number of channels for the output feature in each block.\n        blocks (int): Number of residual blocks.\n        spatial_stride (int | Sequence[int]): Spatial strides in residual and\n            conv layers, Default 1.\n        temporal_stride (int | Sequence[int]): Temporal strides in residual and\n            conv layers, Default 1.\n        dilation (int): Spacing between kernel elements, Default 1.\n        style (str): `pytorch` or `caffe`. If set to \"pytorch\", the stride-two\n            layer is the 3x3 conv layer, otherwise the stride-two layer is\n            the first 1x1 conv layer. Default 'pytorch'.\n        inflate (int | Sequence[int]): Determine whether to inflate for each\n            block, Default 1.\n        inflate_style (str): `3x1x1` or `1x1x1`. which determines the kernel\n            sizes and padding strides for conv1 and conv2 in each block.\n            Default '3x1x1'.\n        norm_cfg (dict): Config for norm layers, Default None.\n        with_cp (bool): Use checkpoint or not. Using checkpoint will save\n            some memory while slowing down the training speed, Default False.\n\n    Returns:\n        A residual layer for the given config.\n    \"\"\"", "\n", "inflate_freq", "=", "inflate_freq", "if", "not", "isinstance", "(", "\n", "inflate_freq", ",", "int", ")", "else", "(", "inflate_freq", ",", ")", "*", "blocks", "\n", "nonlocal_freq", "=", "nonlocal_freq", "if", "not", "isinstance", "(", "\n", "nonlocal_freq", ",", "int", ")", "else", "(", "nonlocal_freq", ",", ")", "*", "blocks", "\n", "assert", "len", "(", "inflate_freq", ")", "==", "blocks", "\n", "assert", "len", "(", "nonlocal_freq", ")", "==", "blocks", "\n", "downsample", "=", "None", "\n", "if", "spatial_stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "        ", "norm_type", "=", "get_norm_type", "(", "norm_cfg", ")", "\n", "down_layers", "=", "[", "]", "\n", "if", "avg_down", ":", "\n", "            ", "if", "dilation", "==", "1", ":", "\n", "                ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool3d", "(", "\n", "kernel_size", "=", "(", "1", ",", "spatial_stride", ",", "spatial_stride", ")", ",", "\n", "stride", "=", "(", "1", ",", "spatial_stride", ",", "spatial_stride", ")", ",", "\n", "ceil_mode", "=", "True", ",", "\n", "count_include_pad", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "down_layers", ".", "append", "(", "nn", ".", "AvgPool3d", "(", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "ceil_mode", "=", "True", ",", "\n", "count_include_pad", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "nn", ".", "Conv3d", "(", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "(", "temporal_stride", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "down_layers", ".", "append", "(", "nn", ".", "Conv3d", "(", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "(", "temporal_stride", ",", "spatial_stride", ",", "spatial_stride", ")", ",", "\n", "bias", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "norm_type", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "spatial_stride", ",", "\n", "temporal_stride", ",", "\n", "dilation", ",", "\n", "downsample", ",", "\n", "style", "=", "style", ",", "\n", "if_inflate", "=", "(", "inflate_freq", "[", "0", "]", "==", "1", ")", ",", "\n", "inflate_style", "=", "inflate_style", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "if_nonlocal", "=", "(", "nonlocal_freq", "[", "0", "]", "==", "1", ")", ",", "\n", "nonlocal_cfg", "=", "nonlocal_cfg", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "avd", "=", "avd", ",", "\n", "avd_first", "=", "avd_first", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "block", "(", "inplanes", ",", "\n", "planes", ",", "\n", "1", ",", "1", ",", "\n", "dilation", ",", "\n", "style", "=", "style", ",", "\n", "if_inflate", "=", "(", "inflate_freq", "[", "i", "]", "==", "1", ")", ",", "\n", "inflate_style", "=", "inflate_style", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "if_nonlocal", "=", "(", "nonlocal_freq", "[", "i", "]", "==", "1", ")", ",", "\n", "nonlocal_cfg", "=", "nonlocal_cfg", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "avd", "=", "avd", ",", "\n", "avd_first", "=", "avd_first", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_tsm.TemporalShift.__init__": [[21, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__"], ["def", "__init__", "(", "self", ",", "net", ",", "num_segments", "=", "3", ",", "shift_div", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "shift_div", "=", "shift_div", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_tsm.TemporalShift.forward": [[27, 38], ["resnet_tsm.TemporalShift.shift", "resnet_tsm.TemporalShift.net"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_tsm.TemporalShift.shift"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Defines the computation performed at every call.\n\n        Args:\n            x (torch.Tensor): The input data.\n\n        Returns:\n            torch.Tensor: The output of the module.\n        \"\"\"", "\n", "x", "=", "self", ".", "shift", "(", "x", ",", "self", ".", "num_segments", ",", "shift_div", "=", "self", ".", "shift_div", ")", "\n", "return", "self", ".", "net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_tsm.TemporalShift.shift": [[39, 90], ["x.view.view.size", "x.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["", "@", "staticmethod", "\n", "def", "shift", "(", "x", ",", "num_segments", ",", "shift_div", "=", "3", ")", ":", "\n", "        ", "\"\"\"Perform temporal shift operation on the feature.\n\n        Args:\n            x (torch.Tensor): The input feature to be shifted.\n            num_segments (int): Number of frame segments.\n            shift_div (int): Number of divisions for shift. Default: 3.\n\n        Returns:\n            torch.Tensor: The shifted feature.\n        \"\"\"", "\n", "# [N, C, H, W]", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "\n", "# [N // num_segments, num_segments, C, H*W]", "\n", "# can't use 5 dimensional array on PPL2D backend for caffe", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "num_segments", ",", "c", ",", "h", "*", "w", ")", "\n", "\n", "# get shift fold", "\n", "fold", "=", "c", "//", "shift_div", "\n", "\n", "# split c channel into three parts:", "\n", "# left_split, mid_split, right_split", "\n", "left_split", "=", "x", "[", ":", ",", ":", ",", ":", "fold", ",", ":", "]", "\n", "mid_split", "=", "x", "[", ":", ",", ":", ",", "fold", ":", "2", "*", "fold", ",", ":", "]", "\n", "right_split", "=", "x", "[", ":", ",", ":", ",", "2", "*", "fold", ":", ",", ":", "]", "\n", "\n", "# can't use torch.zeros(*A.shape) or torch.zeros_like(A)", "\n", "# because array on caffe inference must be got by computing", "\n", "\n", "# shift left on num_segments channel in `left_split`", "\n", "zeros", "=", "left_split", "-", "left_split", "\n", "blank", "=", "zeros", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", "\n", "left_split", "=", "left_split", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", "\n", "left_split", "=", "torch", ".", "cat", "(", "(", "left_split", ",", "blank", ")", ",", "1", ")", "\n", "\n", "# shift right on num_segments channel in `mid_split`", "\n", "zeros", "=", "mid_split", "-", "mid_split", "\n", "blank", "=", "zeros", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", "\n", "mid_split", "=", "mid_split", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "mid_split", "=", "torch", ".", "cat", "(", "(", "blank", ",", "mid_split", ")", ",", "1", ")", "\n", "\n", "# right_split: no shift", "\n", "\n", "# concatenate", "\n", "out", "=", "torch", ".", "cat", "(", "(", "left_split", ",", "mid_split", ",", "right_split", ")", ",", "2", ")", "\n", "\n", "# [N, C, H, W]", "\n", "# restore the original dimension", "\n", "return", "out", ".", "view", "(", "n", ",", "c", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_tsm.ResNetTSM.__init__": [[115, 134], ["dict", "resnet.ResNet.__init__", "torch.nn.modules.utils._ntuple", "torch.nn.modules.utils._ntuple"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "depth", ",", "\n", "num_segments", "=", "8", ",", "\n", "is_shift", "=", "True", ",", "\n", "non_local", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", ",", "\n", "non_local_cfg", "=", "dict", "(", ")", ",", "\n", "shift_div", "=", "8", ",", "\n", "shift_place", "=", "'blockres'", ",", "\n", "temporal_pool", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "depth", ",", "**", "kwargs", ")", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "is_shift", "=", "is_shift", "\n", "self", ".", "shift_div", "=", "shift_div", "\n", "self", ".", "shift_place", "=", "shift_place", "\n", "self", ".", "temporal_pool", "=", "temporal_pool", "\n", "self", ".", "non_local", "=", "non_local", "\n", "self", ".", "non_local_stages", "=", "_ntuple", "(", "self", ".", "num_stages", ")", "(", "non_local", ")", "\n", "self", ".", "non_local_cfg", "=", "non_local_cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_tsm.ResNetTSM.make_temporal_shift": [[135, 201], ["ValueError", "resnet_tsm.ResNetTSM.make_temporal_shift.make_block_temporal"], "methods", ["None"], ["", "def", "make_temporal_shift", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make temporal shift for some layers.\"\"\"", "\n", "if", "self", ".", "temporal_pool", ":", "\n", "            ", "num_segment_list", "=", "[", "\n", "self", ".", "num_segments", ",", "self", ".", "num_segments", "//", "2", ",", "\n", "self", ".", "num_segments", "//", "2", ",", "self", ".", "num_segments", "//", "2", "\n", "]", "\n", "", "else", ":", "\n", "            ", "num_segment_list", "=", "[", "self", ".", "num_segments", "]", "*", "4", "\n", "", "if", "num_segment_list", "[", "-", "1", "]", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "'num_segment_list[-1] must be positive'", ")", "\n", "\n", "", "if", "self", ".", "shift_place", "==", "'block'", ":", "\n", "\n", "            ", "def", "make_block_temporal", "(", "stage", ",", "num_segments", ")", ":", "\n", "                ", "\"\"\"Make temporal shift on some blocks.\n\n                Args:\n                    stage (nn.Module): Model layers to be shifted.\n                    num_segments (int): Number of frame segments.\n\n                Returns:\n                    nn.Module: The shifted blocks.\n                \"\"\"", "\n", "blocks", "=", "list", "(", "stage", ".", "children", "(", ")", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "blocks", ")", ":", "\n", "                    ", "blocks", "[", "i", "]", "=", "TemporalShift", "(", "\n", "b", ",", "num_segments", "=", "num_segments", ",", "shift_div", "=", "self", ".", "shift_div", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "", "self", ".", "layer1", "=", "make_block_temporal", "(", "self", ".", "layer1", ",", "num_segment_list", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "make_block_temporal", "(", "self", ".", "layer2", ",", "num_segment_list", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "make_block_temporal", "(", "self", ".", "layer3", ",", "num_segment_list", "[", "2", "]", ")", "\n", "self", ".", "layer4", "=", "make_block_temporal", "(", "self", ".", "layer4", ",", "num_segment_list", "[", "3", "]", ")", "\n", "\n", "", "elif", "'blockres'", "in", "self", ".", "shift_place", ":", "\n", "            ", "n_round", "=", "1", "\n", "if", "len", "(", "list", "(", "self", ".", "layer3", ".", "children", "(", ")", ")", ")", ">=", "23", ":", "\n", "                ", "n_round", "=", "2", "\n", "\n", "", "def", "make_block_temporal", "(", "stage", ",", "num_segments", ")", ":", "\n", "                ", "\"\"\"Make temporal shift on some blocks.\n\n                Args:\n                    stage (nn.Module): Model layers to be shifted.\n                    num_segments (int): Number of frame segments.\n\n                Returns:\n                    nn.Module: The shifted blocks.\n                \"\"\"", "\n", "blocks", "=", "list", "(", "stage", ".", "children", "(", ")", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "blocks", ")", ":", "\n", "                    ", "if", "i", "%", "n_round", "==", "0", ":", "\n", "                        ", "blocks", "[", "i", "]", ".", "conv1", "=", "TemporalShift", "(", "\n", "b", ".", "conv1", ",", "\n", "num_segments", "=", "num_segments", ",", "\n", "shift_div", "=", "self", ".", "shift_div", ")", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "", "self", ".", "layer1", "=", "make_block_temporal", "(", "self", ".", "layer1", ",", "num_segment_list", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "make_block_temporal", "(", "self", ".", "layer2", ",", "num_segment_list", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "make_block_temporal", "(", "self", ".", "layer3", ",", "num_segment_list", "[", "2", "]", ")", "\n", "self", ".", "layer4", "=", "make_block_temporal", "(", "self", ".", "layer4", ",", "num_segment_list", "[", "3", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_tsm.ResNetTSM.make_temporal_pool": [[202, 236], ["TemporalPool", "resnet.ResNet.__init__", "torch.MaxPool3d", "torch.MaxPool3d", "x.transpose().contiguous().view.transpose().contiguous().view.size", "x.transpose().contiguous().view.transpose().contiguous().view.view().transpose", "resnet_tsm.ResNetTSM.max_pool3d", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "resnet_tsm.ResNetTSM.net", "x.transpose().contiguous().view.transpose().contiguous().view.view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "x.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["", "", "def", "make_temporal_pool", "(", "self", ")", ":", "\n", "        ", "\"\"\"Make temporal pooling between layer1 and layer2, using a 3D max\n        pooling layer.\"\"\"", "\n", "\n", "class", "TemporalPool", "(", "nn", ".", "Module", ")", ":", "\n", "            ", "\"\"\"Temporal pool module.\n\n            Wrap layer2 in ResNet50 with a 3D max pooling layer.\n\n            Args:\n                net (nn.Module): Module to make temporal pool.\n                num_segments (int): Number of frame segments.\n            \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "net", ",", "num_segments", ")", ":", "\n", "                ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "net", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "max_pool3d", "=", "nn", ".", "MaxPool3d", "(", "\n", "kernel_size", "=", "(", "3", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ",", "0", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# [N, C, H, W]", "\n", "                ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "# [N // num_segments, C, num_segments, H, W]", "\n", "x", "=", "x", ".", "view", "(", "n", "//", "self", ".", "num_segments", ",", "self", ".", "num_segments", ",", "c", ",", "h", ",", "\n", "w", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# [N // num_segmnets, C, num_segments // 2, H, W]", "\n", "x", "=", "self", ".", "max_pool3d", "(", "x", ")", "\n", "# [N // 2, C, H, W]", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n", "//", "2", ",", "c", ",", "h", ",", "w", ")", "\n", "return", "self", ".", "net", "(", "x", ")", "\n", "\n", "", "", "self", ".", "layer2", "=", "TemporalPool", "(", "self", ".", "layer2", ",", "self", ".", "num_segments", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_tsm.ResNetTSM.init_weights": [[238, 246], ["super().init_weights", "resnet_tsm.ResNetTSM.make_temporal_shift", "resnet_tsm.ResNetTSM.make_temporal_pool"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.ConvModule.init_weights", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_tsm.ResNetTSM.make_temporal_shift", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet_tsm.ResNetTSM.make_temporal_pool"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initiate the parameters either from existing checkpoint or from\n        scratch.\"\"\"", "\n", "super", "(", ")", ".", "init_weights", "(", ")", "\n", "if", "self", ".", "is_shift", ":", "\n", "            ", "self", ".", "make_temporal_shift", "(", ")", "\n", "", "if", "self", ".", "temporal_pool", ":", "\n", "            ", "self", ".", "make_temporal_pool", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.BasicBlock.__init__": [[42, 75], ["dict", "torch.Module.__init__", "resnet.conv3x3", "common.build_norm_layer", "resnet.BasicBlock.add_module", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "common.build_norm_layer", "resnet.BasicBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.conv3x3", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer", "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.conv3x3", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "with_cp", "=", "False", ",", "\n", "avd", "=", "False", ",", "# \u4e3a\u4e86\u80fd\u7528resnet18", "\n", "avd_first", "=", "False", "# \u4e3a\u4e86\u80fd\u7528resnet18", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "style", "in", "[", "'pytorch'", ",", "'caffe'", "]", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ")", "\n", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "# self.bn1 = nn.BatchNorm2d(planes)", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "# self.bn2 = nn.BatchNorm2d(planes)", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "assert", "not", "with_cp", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.BasicBlock.norm1": [[76, 79], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.BasicBlock.norm2": [[80, 83], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.BasicBlock.forward": [[84, 101], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.norm1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.norm2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.Bottleneck.norm2"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.Bottleneck.__init__": [[124, 191], ["dict", "torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "common.build_norm_layer", "common.build_norm_layer", "resnet.Bottleneck.add_module", "resnet.Bottleneck.add_module", "torch.Conv2d", "torch.Conv2d", "common.build_norm_layer", "resnet.Bottleneck.add_module", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "with_cp", "=", "False", ",", "\n", "avd", "=", "False", ",", "\n", "avd_first", "=", "False", ")", ":", "\n", "        ", "\"\"\"Bottleneck block for ResNet.\n        If style is \"pytorch\", the stride-two layer is the 3x3 conv layer,\n        if it is \"caffe\", the stride-two layer is the first 1x1 conv layer.\n        \"\"\"", "\n", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "style", "in", "[", "'pytorch'", ",", "'caffe'", "]", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "avd", "=", "avd", "and", "stride", ">", "1", "\n", "self", ".", "avd_first", "=", "avd_first", "\n", "\n", "if", "self", ".", "avd", ":", "\n", "            ", "self", ".", "avd_layer", "=", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", ",", "padding", "=", "1", ")", "\n", "stride", "=", "1", "\n", "\n", "", "if", "style", "==", "'pytorch'", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "1", "\n", "self", ".", "conv2_stride", "=", "stride", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1_stride", "=", "stride", "\n", "self", ".", "conv2_stride", "=", "1", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "self", ".", "conv1_stride", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "\n", "planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "self", ".", "conv2_stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "# self.bn1 = nn.BatchNorm2d(planes)", "\n", "# self.bn2 = nn.BatchNorm2d(planes)", "\n", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "norm2_name", ",", "norm2", "=", "build_norm_layer", "(", "norm_cfg", ",", "planes", ",", "postfix", "=", "2", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm2_name", ",", "norm2", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "norm3_name", ",", "norm3", "=", "build_norm_layer", "(", "\n", "norm_cfg", ",", "planes", "*", "self", ".", "expansion", ",", "postfix", "=", "3", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm3_name", ",", "norm3", ")", "\n", "# self.bn3 = nn.BatchNorm2d(planes * self.expansion)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.Bottleneck.norm1": [[192, 195], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.Bottleneck.norm2": [[196, 199], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm2", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm2_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.Bottleneck.norm3": [[200, 203], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm3", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm3_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.Bottleneck.forward": [[204, 241], ["resnet.Bottleneck.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.norm1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.norm2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.norm3", "torch.checkpoint", "torch.checkpoint", "resnet.Bottleneck.forward._inner_forward"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.norm1", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.Bottleneck.norm2", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.Bottleneck.norm3"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "norm1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "avd", "and", "self", ".", "avd_first", ":", "\n", "                ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "norm2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "avd", "and", "not", "self", ".", "avd_first", ":", "\n", "                ", "out", "=", "self", ".", "avd_layer", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "norm3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "                ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "\n", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.__init__": [[361, 454], ["dict", "torch.Module.__init__", "common.get_norm_type", "common.build_norm_layer", "resnet.ResNet.add_module", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "enumerate", "KeyError", "len", "len", "max", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "resnet.make_res_layer", "resnet.ResNet.add_module", "resnet.ResNet.res_layers.append", "torch.Conv2d", "torch.Conv2d", "common.get_norm_type.", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "common.get_norm_type.", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "len"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.get_norm_type", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer", "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.make_res_layer"], ["def", "__init__", "(", "self", ",", "\n", "depth", ",", "\n", "pretrained", "=", "None", ",", "\n", "in_channels", "=", "3", ",", "\n", "num_stages", "=", "4", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "dilations", "=", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "norm_eval", "=", "True", ",", "\n", "norm_frozen", "=", "False", ",", "\n", "partial_norm", "=", "False", ",", "\n", "with_cp", "=", "False", ",", "\n", "avg_down", "=", "False", ",", "\n", "avd", "=", "False", ",", "\n", "avd_first", "=", "False", ",", "\n", "deep_stem", "=", "False", ",", "\n", "stem_width", "=", "64", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "depth", "not", "in", "self", ".", "arch_settings", ":", "\n", "            ", "raise", "KeyError", "(", "'invalid depth {} for resnet'", ".", "format", "(", "depth", ")", ")", "\n", "", "self", ".", "depth", "=", "depth", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "assert", "num_stages", ">=", "1", "and", "num_stages", "<=", "4", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "dilations", "=", "dilations", "\n", "assert", "len", "(", "strides", ")", "==", "len", "(", "dilations", ")", "==", "num_stages", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "assert", "max", "(", "out_indices", ")", "<", "num_stages", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "norm_eval", "=", "norm_eval", "\n", "self", ".", "norm_frozen", "=", "norm_frozen", "\n", "self", ".", "partial_norm", "=", "partial_norm", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "\n", "self", ".", "block", ",", "stage_blocks", "=", "self", ".", "arch_settings", "[", "depth", "]", "\n", "self", ".", "stage_blocks", "=", "stage_blocks", "[", ":", "num_stages", "]", "\n", "self", ".", "inplanes", "=", "stem_width", "*", "2", "if", "deep_stem", "else", "64", "\n", "norm_type", "=", "get_norm_type", "(", "norm_cfg", ")", "\n", "if", "deep_stem", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_type", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "stem_width", ",", "stem_width", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "norm_type", "(", "stem_width", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "stem_width", ",", "stem_width", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "", "self", ".", "norm1_name", ",", "norm1", "=", "build_norm_layer", "(", "\n", "self", ".", "norm_cfg", ",", "self", ".", "inplanes", ",", "postfix", "=", "1", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm1_name", ",", "norm1", ")", "\n", "# self.bn1 = nn.BatchNorm2d(64)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "res_layers", "=", "[", "]", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "stage_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "dilation", "=", "dilations", "[", "i", "]", "\n", "planes", "=", "64", "*", "2", "**", "i", "\n", "res_layer", "=", "make_res_layer", "(", "\n", "self", ".", "block", ",", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "style", "=", "self", ".", "style", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "avg_down", "=", "avg_down", ",", "\n", "avd", "=", "avd", ",", "\n", "avd_first", "=", "avd_first", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "self", ".", "block", ".", "expansion", "\n", "layer_name", "=", "'layer{}'", ".", "format", "(", "i", "+", "1", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "res_layer", ")", "\n", "self", ".", "res_layers", ".", "append", "(", "layer_name", ")", "\n", "\n", "", "self", ".", "feat_dim", "=", "self", ".", "block", ".", "expansion", "*", "64", "*", "2", "**", "(", "\n", "len", "(", "self", ".", "stage_blocks", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.norm1": [[455, 458], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm1", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm1_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.init_weights": [[459, 472], ["isinstance", "utils.get_root_logger", "utils.load_checkpoint", "resnet.ResNet.modules", "TypeError", "isinstance", "mmcv.cnn.kaiming_init", "isinstance", "mmcv.cnn.constant_init"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_checkpoint"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "self", ".", "pretrained", ",", "\n", "map_location", "=", "'cpu'", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "self", ".", "pretrained", "is", "None", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "kaiming_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "constant_init", "(", "m", ",", "1", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.forward": [[473, 488], ["resnet.ResNet.conv1", "resnet.ResNet.norm1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "enumerate", "getattr", "getattr.", "len", "tuple", "outs.append"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.norm1"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "outs", "=", "[", "]", "\n", "for", "i", ",", "layer_name", "in", "enumerate", "(", "self", ".", "res_layers", ")", ":", "\n", "            ", "res_layer", "=", "getattr", "(", "self", ",", "layer_name", ")", "\n", "x", "=", "res_layer", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "outs", ".", "append", "(", "x", ")", "\n", "", "", "if", "len", "(", "outs", ")", "==", "1", ":", "\n", "            ", "return", "outs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.train": [[489, 520], ["super().train", "resnet.ResNet.modules", "range", "resnet.ResNet.conv1.parameters", "resnet.ResNet.norm1.parameters", "resnet.ResNet.norm1.eval", "range", "isinstance", "getattr", "getattr.modules", "getattr", "getattr.eval", "getattr.parameters", "m.eval", "isinstance", "m.parameters", "m.eval"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.ResNet.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "if", "self", ".", "norm_eval", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                    ", "m", ".", "eval", "(", ")", "\n", "if", "self", ".", "norm_frozen", ":", "\n", "                        ", "for", "params", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                            ", "params", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "", "if", "self", ".", "partial_norm", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "                ", "mod", "=", "getattr", "(", "self", ",", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "for", "m", "in", "mod", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "", "if", "mode", "and", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "for", "param", "in", "self", ".", "conv1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "norm1", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "norm1", ".", "eval", "(", ")", "\n", "self", ".", "norm1", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "norm1", ".", "bias", ".", "requires_grad", "=", "False", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "frozen_stages", "+", "1", ")", ":", "\n", "                ", "mod", "=", "getattr", "(", "self", ",", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "mod", ".", "eval", "(", ")", "\n", "for", "param", "in", "mod", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.conv3x3": [[11, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.backbones.resnet.make_res_layer": [[243, 323], ["layers.append", "range", "torch.Sequential", "common.get_norm_type", "down_layers.append", "torch.Sequential", "block", "layers.append", "down_layers.append", "down_layers.append", "common.get_norm_type.", "block", "down_layers.append", "down_layers.append", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.get_norm_type"], ["", "", "def", "make_res_layer", "(", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "style", "=", "'pytorch'", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "with_cp", "=", "False", ",", "\n", "avg_down", "=", "False", ",", "\n", "avd", "=", "False", ",", "\n", "avd_first", "=", "False", ")", ":", "\n", "    ", "\"\"\"Build residual layer for ResNet.\n\n    Args:\n        block: (nn.Module): Residual module to be built.\n        inplanes (int): Number of channels for the input feature in each block.\n        planes (int): Number of channels for the output feature in each block.\n        blocks (int): Number of residual blocks.\n        stride (int): Stride in the conv layer. Default 1.\n        dilation (int): Spacing between kernel elements. Default 1.\n        style (str): `pytorch` or `caffe`. If set to \"pytorch\", the stride-two\n            layer is the 3x3 conv layer, otherwise the stride-two layer is\n            the first 1x1 conv layer. Default 'pytorch'.\n        norm_cfg (dict): Config for norm layers. required keys are `type`,\n            Default None.\n        with_cp (bool): Use checkpoint or not. Using checkpoint will save some\n            memory while slowing down the training speed. Default False.\n\n    Returns:\n        A residual layer for the given config.\n    \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "        ", "norm_type", "=", "get_norm_type", "(", "norm_cfg", ")", "\n", "down_layers", "=", "[", "]", "\n", "if", "avg_down", ":", "\n", "            ", "if", "dilation", "==", "1", ":", "\n", "                ", "down_layers", ".", "append", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", ",", "\n", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "\n", "count_include_pad", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "                ", "down_layers", ".", "append", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "ceil_mode", "=", "True", ",", "\n", "count_include_pad", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "down_layers", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ")", "\n", "", "down_layers", ".", "append", "(", "norm_type", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "*", "down_layers", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "dilation", ",", "\n", "downsample", ",", "\n", "style", "=", "style", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "avd", "=", "avd", ",", "\n", "avd_first", "=", "avd_first", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "block", "(", "inplanes", ",", "planes", ",", "1", ",", "dilation", ",", "\n", "style", "=", "style", ",", "norm_cfg", "=", "norm_cfg", ",", "with_cp", "=", "with_cp", ",", "\n", "avd", "=", "avd", ",", "avd_first", "=", "avd_first", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.get_norm_type": [[12, 24], ["cfg.copy", "cfg.copy.pop", "isinstance", "KeyError"], "function", ["None"], ["def", "get_norm_type", "(", "cfg", ")", ":", "\n", "    ", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "norm_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "abbr", ",", "norm_layer", "=", "norm_cfg", "[", "layer_type", "]", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer": [[26, 70], ["cfg.copy", "cfg.copy.pop", "isinstance", "cfg.copy.pop", "cfg.copy.setdefault", "norm_layer.parameters", "isinstance", "KeyError", "str", "norm_layer", "norm_layer", "norm_layer._specify_ddp_gpu_num"], "function", ["None"], ["", "def", "build_norm_layer", "(", "cfg", ",", "num_features", ",", "postfix", "=", "''", ")", ":", "\n", "    ", "\"\"\" Build normalization layer\n\n    Args:\n        cfg (dict): cfg should contain:\n            type (str): identify norm layer type.\n            layer args: args needed to instantiate a norm layer.\n            requires_grad (bool): [optional] whether stop gradient updates\n        num_features (int): number of channels from input.\n        postfix (int, str): appended into norm abbreviation to\n            create named layer.\n\n    Returns:\n        name (str): abbreviation + postfix\n        layer (nn.Module): created norm layer\n    \"\"\"", "\n", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "norm_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "abbr", ",", "norm_layer", "=", "norm_cfg", "[", "layer_type", "]", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "assert", "isinstance", "(", "postfix", ",", "(", "int", ",", "str", ")", ")", "\n", "name", "=", "abbr", "+", "str", "(", "postfix", ")", "\n", "\n", "requires_grad", "=", "cfg_", ".", "pop", "(", "'requires_grad'", ",", "True", ")", "\n", "cfg_", ".", "setdefault", "(", "'eps'", ",", "1e-5", ")", "\n", "if", "layer_type", "!=", "'GN'", ":", "\n", "        ", "layer", "=", "norm_layer", "(", "num_features", ",", "**", "cfg_", ")", "\n", "if", "layer_type", "==", "'SyncBN'", ":", "\n", "            ", "layer", ".", "_specify_ddp_gpu_num", "(", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "'num_groups'", "in", "cfg_", "\n", "layer", "=", "norm_layer", "(", "num_channels", "=", "num_features", ",", "**", "cfg_", ")", "\n", "\n", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n", "", "return", "name", ",", "layer", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.ConvModule.__init__": [[78, 156], ["torch.Module.__init__", "conv_module.build_conv_layer", "conv_module.ConvModule.init_weights", "isinstance", "isinstance", "isinstance", "set", "set", "warnings.warn", "norm.build_norm_layer", "conv_module.ConvModule.add_module", "len", "order.index", "order.index", "ValueError", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.build_conv_layer", "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.ConvModule.init_weights", "home.repos.pwc.inspect_result.whwu95_DSANet.common.norm.build_norm_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "'auto'", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "activation", "=", "'relu'", ",", "\n", "inplace", "=", "True", ",", "\n", "order", "=", "(", "'conv'", ",", "'norm'", ",", "'act'", ")", ")", ":", "\n", "        ", "super", "(", "ConvModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "conv_cfg", "is", "None", "or", "isinstance", "(", "conv_cfg", ",", "dict", ")", "\n", "assert", "norm_cfg", "is", "None", "or", "isinstance", "(", "norm_cfg", ",", "dict", ")", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "order", "=", "order", "\n", "assert", "isinstance", "(", "self", ".", "order", ",", "tuple", ")", "and", "len", "(", "self", ".", "order", ")", "==", "3", "\n", "assert", "set", "(", "order", ")", "==", "set", "(", "[", "'conv'", ",", "'norm'", ",", "'act'", "]", ")", "\n", "\n", "self", ".", "with_norm", "=", "norm_cfg", "is", "not", "None", "\n", "self", ".", "with_activatation", "=", "activation", "is", "not", "None", "\n", "# if the conv layer is before a norm layer, bias is unnecessary.", "\n", "if", "bias", "==", "'auto'", ":", "\n", "            ", "bias", "=", "False", "if", "self", ".", "with_norm", "else", "True", "\n", "", "self", ".", "with_bias", "=", "bias", "\n", "\n", "if", "self", ".", "with_norm", "and", "self", ".", "with_bias", ":", "\n", "            ", "warnings", ".", "warn", "(", "'ConvModule has norm and bias at the same time'", ")", "\n", "\n", "# build convolution layer", "\n", "", "self", ".", "conv", "=", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "# export the attributes of self.conv to a higher level for convenience", "\n", "self", ".", "in_channels", "=", "self", ".", "conv", ".", "in_channels", "\n", "self", ".", "out_channels", "=", "self", ".", "conv", ".", "out_channels", "\n", "self", ".", "kernel_size", "=", "self", ".", "conv", ".", "kernel_size", "\n", "self", ".", "stride", "=", "self", ".", "conv", ".", "stride", "\n", "self", ".", "padding", "=", "self", ".", "conv", ".", "padding", "\n", "self", ".", "dilation", "=", "self", ".", "conv", ".", "dilation", "\n", "self", ".", "transposed", "=", "self", ".", "conv", ".", "transposed", "\n", "self", ".", "output_padding", "=", "self", ".", "conv", ".", "output_padding", "\n", "self", ".", "groups", "=", "self", ".", "conv", ".", "groups", "\n", "\n", "# build normalization layers", "\n", "if", "self", ".", "with_norm", ":", "\n", "# norm layer is after conv layer", "\n", "            ", "if", "order", ".", "index", "(", "'norm'", ")", ">", "order", ".", "index", "(", "'conv'", ")", ":", "\n", "                ", "norm_channels", "=", "out_channels", "\n", "", "else", ":", "\n", "                ", "norm_channels", "=", "in_channels", "\n", "", "self", ".", "norm_name", ",", "norm", "=", "build_norm_layer", "(", "norm_cfg", ",", "norm_channels", ")", "\n", "self", ".", "add_module", "(", "self", ".", "norm_name", ",", "norm", ")", "\n", "\n", "# build activation layer", "\n", "", "if", "self", ".", "with_activatation", ":", "\n", "# TODO: introduce `act_cfg` and supports more activation layers", "\n", "            ", "if", "self", ".", "activation", "not", "in", "[", "'relu'", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'{} is currently not supported.'", ".", "format", "(", "\n", "self", ".", "activation", ")", ")", "\n", "", "if", "self", ".", "activation", "==", "'relu'", ":", "\n", "                ", "self", ".", "activate", "=", "nn", ".", "ReLU", "(", "inplace", "=", "inplace", ")", "\n", "\n", "# Use msra init by default", "\n", "", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.ConvModule.norm": [[157, 160], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "norm", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "norm_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.ConvModule.init_weights": [[161, 166], ["mmcv.cnn.kaiming_init", "mmcv.cnn.constant_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "nonlinearity", "=", "'relu'", "if", "self", ".", "activation", "is", "None", "else", "self", ".", "activation", "\n", "kaiming_init", "(", "self", ".", "conv", ",", "nonlinearity", "=", "nonlinearity", ")", "\n", "if", "self", ".", "with_norm", ":", "\n", "            ", "constant_init", "(", "self", ".", "norm", ",", "1", ",", "bias", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.ConvModule.forward": [[167, 176], ["conv_module.ConvModule.conv", "conv_module.ConvModule.norm", "conv_module.ConvModule.activate"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.ConvModule.norm"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "activate", "=", "True", ",", "norm", "=", "True", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "order", ":", "\n", "            ", "if", "layer", "==", "'conv'", ":", "\n", "                ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "elif", "layer", "==", "'norm'", "and", "norm", "and", "self", ".", "with_norm", ":", "\n", "                ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "", "elif", "layer", "==", "'act'", "and", "activate", "and", "self", ".", "with_activatation", ":", "\n", "                ", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.conv3x3": [[15, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.common.conv_module.build_conv_layer": [[27, 53], ["cfg.copy.pop", "conv_layer", "dict", "cfg.copy", "KeyError", "isinstance"], "function", ["None"], ["", "def", "build_conv_layer", "(", "cfg", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Build convolution layer\n\n    Args:\n        cfg (None or dict): cfg should contain:\n            type (str): identify conv layer type.\n            layer args: args needed to instantiate a conv layer.\n\n    Returns:\n        layer (nn.Module): created conv layer\n    \"\"\"", "\n", "if", "cfg", "is", "None", ":", "\n", "        ", "cfg_", "=", "dict", "(", "type", "=", "'Conv'", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "cfg", ",", "dict", ")", "and", "'type'", "in", "cfg", "\n", "cfg_", "=", "cfg", ".", "copy", "(", ")", "\n", "\n", "", "layer_type", "=", "cfg_", ".", "pop", "(", "'type'", ")", "\n", "if", "layer_type", "not", "in", "conv_cfg", ":", "\n", "        ", "raise", "KeyError", "(", "'Unrecognized norm type {}'", ".", "format", "(", "layer_type", ")", ")", "\n", "", "else", ":", "\n", "        ", "conv_layer", "=", "conv_cfg", "[", "layer_type", "]", "\n", "\n", "", "layer", "=", "conv_layer", "(", "*", "args", ",", "**", "kwargs", ",", "**", "cfg_", ")", "\n", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.common.misc.rsetattr": [[7, 12], ["attr.rpartition", "setattr", "misc.rgetattr"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.common.misc.rgetattr"], ["\n", "def", "params_count", "(", "model", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.whwu95_DSANet.common.misc.rgetattr": [[14, 21], ["functools.reduce", "getattr", "attr.split"], "function", ["None"], ["return", "np", ".", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ".", "item", "(", ")", "\n", "\n", "\n", "", "def", "gpu_mem_usage", "(", ")", ":", "\n", "    ", "\"\"\"\n    Compute the GPU memory usage for the current device (MB).\n    \"\"\"", "\n", "mem_usage_bytes", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.common.misc.rhasattr": [[23, 33], ["hasattr", "functools.reduce", "getattr", "attr.split"], "function", ["None"], ["\n", "\n", "", "def", "get_flop_stats", "(", "model", ",", "input", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.whwu95_DSANet.common.misc.get_layer_name": [[35, 46], ["list", "layer_param.rfind", "list.append"], "function", ["None"], ["\n", "input", "[", "'img_group'", "]", "=", "input", "[", "'img_group'", "]", ".", "cuda", "(", ")", "\n", "if", "'num_crops'", "in", "input", ":", "\n", "        ", "input", "[", "'num_crops'", "]", "=", "input", "[", "'num_crops'", "]", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "'num_clips'", "in", "input", ":", "\n", "        ", "input", "[", "'num_clips'", "]", "=", "input", "[", "'num_clips'", "]", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "", "total_flops", ",", "total_params", "=", "profile", "(", "model", ",", "input", ",", "verbose", "=", "False", ")", "\n", "return", "total_flops", ",", "total_params", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.DistOptimizerHook.__init__": [[51, 55], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grad_clip", "=", "None", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.DistOptimizerHook.after_train_iter": [[56, 64], ["runner.optimizer.zero_grad", "runner.outputs[].backward", "dist_utils.allreduce_grads", "runner.optimizer.step", "runner.model.parameters", "dist_utils.DistOptimizerHook.clip_grads", "runner.model.parameters"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.simple_consensus._SimpleConsensus.backward", "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.allreduce_grads"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "runner", ".", "outputs", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "allreduce_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "coalesce", ",", "\n", "self", ".", "bucket_size_mb", ")", "\n", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils._allreduce_coalesced": [[14, 34], ["torch._utils._take_tensors", "collections.OrderedDict", "buckets.values.values", "torch._utils._flatten_dense_tensors", "torch.all_reduce", "torch._utils._flatten_dense_tensors.div_", "zip", "tensor.type", "buckets[].append", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "function", ["None"], ["def", "_allreduce_coalesced", "(", "tensors", ",", "world_size", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "if", "bucket_size_mb", ">", "0", ":", "\n", "        ", "bucket_size_bytes", "=", "bucket_size_mb", "*", "1024", "*", "1024", "\n", "buckets", "=", "_take_tensors", "(", "tensors", ",", "bucket_size_bytes", ")", "\n", "", "else", ":", "\n", "        ", "buckets", "=", "OrderedDict", "(", ")", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "tp", "=", "tensor", ".", "type", "(", ")", "\n", "if", "tp", "not", "in", "buckets", ":", "\n", "                ", "buckets", "[", "tp", "]", "=", "[", "]", "\n", "", "buckets", "[", "tp", "]", ".", "append", "(", "tensor", ")", "\n", "", "buckets", "=", "buckets", ".", "values", "(", ")", "\n", "\n", "", "for", "bucket", "in", "buckets", ":", "\n", "        ", "flat_tensors", "=", "_flatten_dense_tensors", "(", "bucket", ")", "\n", "dist", ".", "all_reduce", "(", "flat_tensors", ")", "\n", "flat_tensors", ".", "div_", "(", "world_size", ")", "\n", "for", "tensor", ",", "synced", "in", "zip", "(", "\n", "bucket", ",", "_unflatten_dense_tensors", "(", "flat_tensors", ",", "bucket", ")", ")", ":", "\n", "            ", "tensor", ".", "copy_", "(", "synced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.allreduce_grads": [[36, 47], ["torch.get_world_size", "dist_utils._allreduce_coalesced", "torch.all_reduce", "tensor.div_"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils._allreduce_coalesced"], ["", "", "", "def", "allreduce_grads", "(", "params", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "grads", "=", "[", "\n", "param", ".", "grad", ".", "data", "for", "param", "in", "params", "\n", "if", "param", ".", "requires_grad", "and", "param", ".", "grad", "is", "not", "None", "\n", "]", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "coalesce", ":", "\n", "        ", "_allreduce_coalesced", "(", "grads", ",", "world_size", ",", "bucket_size_mb", ")", "\n", "", "else", ":", "\n", "        ", "for", "tensor", "in", "grads", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "world_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.init_dist": [[66, 77], ["torch.get_start_method", "torch.set_start_method", "dist_utils._init_dist_pytorch", "dist_utils._init_dist_mpi", "dist_utils._init_dist_slurm", "ValueError"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils._init_dist_pytorch", "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils._init_dist_mpi", "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils._init_dist_slurm"], ["", "", "def", "init_dist", "(", "launcher", ",", "backend", "=", "'nccl'", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "is", "None", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "", "if", "launcher", "==", "'pytorch'", ":", "\n", "        ", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "'mpi'", ":", "\n", "        ", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "'slurm'", ":", "\n", "        ", "_init_dist_slurm", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid launcher type: {}'", ".", "format", "(", "launcher", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils._init_dist_pytorch": [[79, 85], ["int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group"], "function", ["None"], ["", "", "def", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "# TODO: use local_rank instead of rank % num_gpus", "\n", "    ", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils._init_dist_mpi": [[87, 89], ["None"], "function", ["None"], ["", "def", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils._init_dist_slurm": [[91, 104], ["int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "subprocess.getoutput", "str", "str", "str", "torch.init_process_group"], "function", ["None"], ["", "def", "_init_dist_slurm", "(", "backend", ",", "port", "=", "29500", ",", "**", "kwargs", ")", ":", "\n", "    ", "proc_id", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "ntasks", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_NTASKS'", "]", ")", "\n", "node_list", "=", "os", ".", "environ", "[", "'SLURM_NODELIST'", "]", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "proc_id", "%", "num_gpus", ")", "\n", "addr", "=", "subprocess", ".", "getoutput", "(", "\n", "'scontrol show hostname {} | head -n1'", ".", "format", "(", "node_list", ")", ")", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "str", "(", "port", ")", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "addr", "\n", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", "=", "str", "(", "ntasks", ")", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "proc_id", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.get_dist_info": [[106, 121], ["torch.is_available", "torch.get_rank", "torch.get_world_size", "torch.is_initialized"], "function", ["None"], ["", "def", "get_dist_info", "(", ")", ":", "\n", "    ", "if", "torch", ".", "__version__", "<", "'1.0'", ":", "\n", "        ", "initialized", "=", "dist", ".", "_initialized", "\n", "", "else", ":", "\n", "        ", "if", "dist", ".", "is_available", "(", ")", ":", "\n", "            ", "initialized", "=", "dist", ".", "is_initialized", "(", ")", "\n", "", "else", ":", "\n", "            ", "initialized", "=", "False", "\n", "", "", "if", "initialized", ":", "\n", "        ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "        ", "rank", "=", "0", "\n", "world_size", "=", "1", "\n", "", "return", "rank", ",", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.master_only": [[123, 132], ["functools.wraps", "dist_utils.get_dist_info", "func"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.get_dist_info"], ["", "def", "master_only", "(", "func", ")", ":", "\n", "\n", "    ", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "return", "wrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.train.set_random_seed": [[22, 29], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "str"], "function", ["None"], ["def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.train.parse_losses": [[31, 49], ["collections.OrderedDict", "losses.items", "sum", "isinstance", "log_vars[].item", "loss_value.mean", "isinstance", "sum", "TypeError", "collections.OrderedDict.items", "_loss.mean"], "function", ["None"], ["", "def", "parse_losses", "(", "losses", ")", ":", "\n", "    ", "log_vars", "=", "OrderedDict", "(", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "losses", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "loss_value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "mean", "(", ")", "\n", "", "elif", "isinstance", "(", "loss_value", ",", "list", ")", ":", "\n", "            ", "log_vars", "[", "loss_name", "]", "=", "sum", "(", "_loss", ".", "mean", "(", ")", "for", "_loss", "in", "loss_value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'{} is not a tensor or list of tensors'", ".", "format", "(", "loss_name", ")", ")", "\n", "\n", "", "", "loss", "=", "sum", "(", "_value", "for", "_key", ",", "_value", "in", "log_vars", ".", "items", "(", ")", "if", "'loss'", "in", "_key", ")", "\n", "\n", "log_vars", "[", "'loss'", "]", "=", "loss", "\n", "for", "name", "in", "log_vars", ":", "\n", "        ", "log_vars", "[", "name", "]", "=", "log_vars", "[", "name", "]", ".", "item", "(", ")", "\n", "\n", "", "return", "loss", ",", "log_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.train.batch_processor": [[51, 60], ["model", "train.parse_losses", "dict", "len"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.core.train.parse_losses"], ["", "def", "batch_processor", "(", "model", ",", "data", ",", "train_mode", ")", ":", "\n", "    ", "losses", "=", "model", "(", "**", "data", ")", "\n", "loss", ",", "log_vars", "=", "parse_losses", "(", "losses", ")", "\n", "\n", "outputs", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "log_vars", "=", "log_vars", ",", "\n", "num_samples", "=", "len", "(", "data", "[", "'img_group'", "]", ".", "data", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.train.train_network": [[62, 76], ["utils.get_root_logger", "train._dist_train", "train._non_dist_train"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.whwu95_DSANet.core.train._dist_train", "home.repos.pwc.inspect_result.whwu95_DSANet.core.train._non_dist_train"], ["", "def", "train_network", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "if", "logger", "is", "None", ":", "\n", "        ", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# start training", "\n", "", "if", "distributed", ":", "\n", "        ", "_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "logger", ",", "validate", "=", "validate", ")", "\n", "", "else", ":", "\n", "        ", "_non_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "validate", "=", "validate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.train.build_optimizer": [[78, 156], ["hasattr", "optimizer_cfg.copy.copy", "optimizer_cfg.copy.pop", "mmcv.runner.obj_from_dict", "isinstance", "optimizer_cfg.copy.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "optimizer_cfg.pop.get", "model.named_parameters", "getattr", "getattr.", "dict", "re.search", "params.append", "optimizer_cfg.copy.pop", "params.append", "name.endswith", "model.parameters"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get"], ["", "", "def", "build_optimizer", "(", "model", ",", "optimizer_cfg", ")", ":", "\n", "    ", "\"\"\"Build optimizer from configs.\n\n    Args:\n        model (:obj:`nn.Module`): The model with parameters to be optimized.\n        optimizer_cfg (dict): The config dict of the optimizer.\n            Positional fields are:\n                - type: class name of the optimizer.\n                - lr: base learning rate.\n            Optional fields are:\n                - any arguments of the corresponding optimizer type, e.g.,\n                  weight_decay, momentum, etc.\n                - paramwise_options: a dict with 3 accepted fileds\n                  (bias_lr_mult, bias_decay_mult, norm_decay_mult).\n                  `bias_lr_mult` and `bias_decay_mult` will be multiplied to\n                  the lr and weight decay respectively for all bias parameters\n                  (except for the normalization layers), and\n                  `norm_decay_mult` will be multiplied to the weight decay\n                  for all weight and bias parameters of normalization layers.\n\n    Returns:\n        torch.optim.Optimizer: The initialized optimizer.\n\n    Example:\n        >>> model = torch.nn.modules.Conv1d(1, 1, 1)\n        >>> optimizer_cfg = dict(type='SGD', lr=0.01, momentum=0.9,\n        >>>                      weight_decay=0.0001)\n        >>> optimizer = build_optimizer(model, optimizer_cfg)\n    \"\"\"", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "optimizer_cfg", "=", "optimizer_cfg", ".", "copy", "(", ")", "\n", "paramwise_options", "=", "optimizer_cfg", ".", "pop", "(", "'paramwise_options'", ",", "None", ")", "\n", "# if no paramwise option is specified, just use the global setting", "\n", "if", "paramwise_options", "is", "None", ":", "\n", "        ", "return", "obj_from_dict", "(", "optimizer_cfg", ",", "torch", ".", "optim", ",", "\n", "dict", "(", "params", "=", "model", ".", "parameters", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "paramwise_options", ",", "dict", ")", "\n", "# get base lr and weight decay", "\n", "base_lr", "=", "optimizer_cfg", "[", "'lr'", "]", "\n", "base_wd", "=", "optimizer_cfg", ".", "get", "(", "'weight_decay'", ",", "None", ")", "\n", "# weight_decay must be explicitly specified if mult is specified", "\n", "if", "(", "'bias_decay_mult'", "in", "paramwise_options", "\n", "or", "'norm_decay_mult'", "in", "paramwise_options", ")", ":", "\n", "            ", "assert", "base_wd", "is", "not", "None", "\n", "# get param-wise options", "\n", "", "bias_lr_mult", "=", "paramwise_options", ".", "get", "(", "'bias_lr_mult'", ",", "1.", ")", "\n", "bias_decay_mult", "=", "paramwise_options", ".", "get", "(", "'bias_decay_mult'", ",", "1.", ")", "\n", "norm_decay_mult", "=", "paramwise_options", ".", "get", "(", "'norm_decay_mult'", ",", "1.", ")", "\n", "# set param-wise lr and weight decay", "\n", "params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "param_group", "=", "{", "'params'", ":", "[", "param", "]", "}", "\n", "if", "not", "param", ".", "requires_grad", ":", "\n", "# FP16 training needs to copy gradient/weight between master", "\n", "# weight copy and model weight, it is convenient to keep all", "\n", "# parameters here to align with model.parameters()", "\n", "                ", "params", ".", "append", "(", "param_group", ")", "\n", "continue", "\n", "\n", "# for norm layers, overwrite the weight decay of weight and bias", "\n", "# TODO: obtain the norm layer prefixes dynamically", "\n", "", "if", "re", ".", "search", "(", "r'(bn|gn)(\\d+)?.(weight|bias)'", ",", "name", ")", ":", "\n", "                ", "if", "base_wd", "is", "not", "None", ":", "\n", "                    ", "param_group", "[", "'weight_decay'", "]", "=", "base_wd", "*", "norm_decay_mult", "\n", "# for other layers, overwrite both lr and weight decay of bias", "\n", "", "", "elif", "name", ".", "endswith", "(", "'.bias'", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "base_lr", "*", "bias_lr_mult", "\n", "if", "base_wd", "is", "not", "None", ":", "\n", "                    ", "param_group", "[", "'weight_decay'", "]", "=", "base_wd", "*", "bias_decay_mult", "\n", "# otherwise use the global settings", "\n", "\n", "", "", "params", ".", "append", "(", "param_group", ")", "\n", "\n", "", "optimizer_cls", "=", "getattr", "(", "torch", ".", "optim", ",", "optimizer_cfg", ".", "pop", "(", "'type'", ")", ")", "\n", "return", "optimizer_cls", "(", "params", ",", "**", "optimizer_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.train._dist_train": [[158, 212], ["parallel.MMDistributedDataParallel", "train.build_optimizer", "mmcv.runner.Runner", "cfg.get", "mmcv.runner.Runner.register_training_hooks", "mmcv.runner.Runner.register_hook", "mmcv.runner.Runner.run", "isinstance", "datasets.build_dataloader", "parallel.MMDistributedDataParallel.cuda", "fp16.Fp16OptimizerHook", "dist_utils.DistOptimizerHook", "mmcv.runner.DistSamplerSeedHook", "mmcv.runner.Runner.resume", "mmcv.runner.Runner.register_hook", "utils.load_checkpoint", "evaluation.DistEvalTopKAccuracyHook"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.core.train.build_optimizer", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.whwu95_DSANet.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_checkpoint"], ["", "", "def", "_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "logger", ",", "validate", "=", "False", ")", ":", "\n", "# prepare data loaders", "\n", "    ", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "cfg", ".", "data", ".", "videos_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "# worker_init_fn=worker_init_fn,", "\n", "dist", "=", "True", ")", "for", "ds", "in", "dataset", "]", "\n", "\n", "# put model on gpus", "\n", "model", "=", "MMDistributedDataParallel", "(", "model", ".", "cuda", "(", ")", ")", "\n", "# model = DistributedDataParallel(", "\n", "#     model.cuda(), device_ids=[torch.cuda.current_device()],", "\n", "#     find_unused_parameters=True)", "\n", "# build runner", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "runner", "=", "Runner", "(", "model", ",", "batch_processor", ",", "optimizer", ",", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ")", "\n", "\n", "# fp16 setting", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "optimizer_config", "=", "Fp16OptimizerHook", "(", "**", "cfg", ".", "optimizer_config", ",", "\n", "**", "fp16_cfg", ")", "\n", "", "else", ":", "\n", "        ", "optimizer_config", "=", "DistOptimizerHook", "(", "**", "cfg", ".", "optimizer_config", ")", "\n", "\n", "# register hooks", "\n", "", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ")", "\n", "runner", ".", "register_hook", "(", "DistSamplerSeedHook", "(", ")", ")", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "if", "cfg", ".", "data", ".", "val", ".", "type", "in", "[", "'RawFramesDataset'", ",", "'VideoDataset'", "]", ":", "\n", "            ", "runner", ".", "register_hook", "(", "\n", "DistEvalTopKAccuracyHook", "(", "\n", "cfg", ".", "data", ".", "val", ",", "interval", "=", "cfg", ".", "eval_interval", ",", "k", "=", "(", "1", ",", "5", ")", ")", ")", "\n", "\n", "# if validate:", "\n", "#     if isinstance(model.module, RPN):", "\n", "#         # TODO: implement recall hooks for other datasets", "\n", "#         runner.register_hook(CocoDistEvalRecallHook(cfg.data.val))", "\n", "#     else:", "\n", "#         if cfg.data.val.type == 'CocoDataset':", "\n", "#             runner.register_hook(CocoDistEvalmAPHook(cfg.data.val))", "\n", "#         else:", "\n", "#             runner.register_hook(DistEvalmAPHook(cfg.data.val))", "\n", "\n", "", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "load_checkpoint", "(", "model", ",", "cfg", ".", "load_from", ",", "map_location", "=", "'cpu'", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ",", "cfg", ".", "total_epochs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.train._non_dist_train": [[214, 254], ["parallel.MMDataParallel().cuda", "train.build_optimizer", "mmcv.runner.Runner", "cfg.get", "mmcv.runner.Runner.register_training_hooks", "mmcv.runner.Runner.run", "isinstance", "datasets.build_dataloader", "fp16.Fp16OptimizerHook", "mmcv.runner.Runner.resume", "parallel.MMDataParallel", "mmcv.runner.Runner.register_hook", "utils.load_checkpoint", "evaluation.DistEvalTopKAccuracyHook", "range"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.core.train.build_optimizer", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get", "home.repos.pwc.inspect_result.whwu95_DSANet.loader.build_loader.build_dataloader", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_checkpoint"], ["", "def", "_non_dist_train", "(", "model", ",", "dataset", ",", "cfg", ",", "validate", "=", "False", ")", ":", "\n", "# prepare data loaders", "\n", "    ", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "videos_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "cfg", ".", "gpus", ",", "\n", "dist", "=", "False", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "# put model on gpus", "\n", "# model = MMDataParallel(model, device_ids=range(cfg.gpus)).cuda()", "\n", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "range", "(", "cfg", ".", "gpus", ")", ")", ".", "cuda", "(", ")", "\n", "# build runner", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "runner", "=", "Runner", "(", "model", ",", "batch_processor", ",", "optimizer", ",", "cfg", ".", "work_dir", ",", "\n", "cfg", ".", "log_level", ")", "\n", "# fp16 setting", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "optimizer_config", "=", "Fp16OptimizerHook", "(", "\n", "**", "cfg", ".", "optimizer_config", ",", "**", "fp16_cfg", ",", "distributed", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "optimizer_config", "=", "cfg", ".", "optimizer_config", "\n", "", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ")", "\n", "\n", "if", "validate", ":", "\n", "        ", "if", "cfg", ".", "data", ".", "val", ".", "type", "in", "[", "'RawFramesDataset'", ",", "'VideoDataset'", "]", ":", "\n", "            ", "runner", ".", "register_hook", "(", "\n", "DistEvalTopKAccuracyHook", "(", "\n", "cfg", ".", "data", ".", "val", ",", "interval", "=", "cfg", ".", "eval_interval", ",", "k", "=", "(", "1", ",", "5", ")", ",", "\n", "dist", "=", "False", ")", ")", "\n", "\n", "", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "load_checkpoint", "(", "model", ",", "cfg", ".", "load_from", ",", "map_location", "=", "'cpu'", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ",", "cfg", ".", "total_epochs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.test.single_gpu_test": [[12, 38], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "results.append", "len", "range", "torch.no_grad", "torch.no_grad", "model", "next", "mmcv.ProgressBar.update", "iter", "data.values"], "function", ["None"], ["def", "single_gpu_test", "(", "model", ",", "data_loader", ")", ":", "\n", "    ", "\"\"\"Test model with a single gpu.\n\n    This method tests model with a single gpu and displays test progress bar.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (nn.Dataloader): Pytorch data loader.\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "return_numpy", "=", "False", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "# use the first key as main key to calculate the batch size", "\n", "batch_size", "=", "len", "(", "next", "(", "iter", "(", "data", ".", "values", "(", ")", ")", ")", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.test.multi_gpu_test": [[40, 83], ["model.eval", "mmcv.runner.get_dist_info", "mmcv.ProgressBar", "collect_results_cpu.append", "test.collect_results_gpu", "test.collect_results_cpu", "len", "torch.no_grad", "torch.no_grad", "model", "len", "range", "len", "len", "next", "mmcv.ProgressBar.update", "iter", "data.values"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.get_dist_info", "home.repos.pwc.inspect_result.whwu95_DSANet.core.test.collect_results_gpu", "home.repos.pwc.inspect_result.whwu95_DSANet.core.test.collect_results_cpu"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "tmpdir", "=", "None", ",", "gpu_collect", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test model with multiple gpus.\n\n    This method tests model with multiple gpus and collects the results\n    under two different modes: gpu and cpu modes. By setting 'gpu_collect=True'\n    it encodes results to gpu tensors and use gpu communication for results\n    collection. On cpu mode it saves the results on different gpus to 'tmpdir'\n    and collects them by the rank 0 worker.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (nn.Dataloader): Pytorch data loader.\n        tmpdir (str): Path of directory to save the temporary results from\n            different gpus under cpu mode. Default: None\n        gpu_collect (bool): Option to use either gpu or cpu to collect results.\n            Default: True\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "data", "in", "data_loader", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "**", "data", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "# use the first key as main key to calculate the batch size", "\n", "            ", "batch_size", "=", "len", "(", "next", "(", "iter", "(", "data", ".", "values", "(", ")", ")", ")", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "if", "gpu_collect", ":", "\n", "        ", "results", "=", "collect_results_gpu", "(", "results", ",", "len", "(", "dataset", ")", ")", "\n", "", "else", ":", "\n", "        ", "results", "=", "collect_results_cpu", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.test.collect_results_cpu": [[85, 141], ["mmcv.runner.get_dist_info", "print", "mmcv.dump", "print", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.get_dist_info"], ["", "def", "collect_results_cpu", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "\"\"\"Collect results in cpu mode.\n\n    It saves the results on different gpus to 'tmpdir' and collects\n    them by the rank 0 worker.\n\n    Args:\n        result_part (list): Results to be collected\n        size (int): Result size.\n        tmpdir (str): Path of directory to save the temporary results from\n            different gpus under cpu mode. Default: None\n\n    Returns:\n        list: Ordered results.\n    \"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "print", "(", "'rank {} begin dump'", ".", "format", "(", "rank", ")", ",", "flush", "=", "True", ")", "\n", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "f'part_{rank}.pkl'", ")", ")", "\n", "print", "(", "'rank {} finished dump'", ".", "format", "(", "rank", ")", ",", "flush", "=", "True", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "f'part_{i}.pkl'", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.core.test.collect_results_gpu": [[143, 186], ["mmcv.runner.get_dist_info", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.all_gather", "torch.tensor().max", "torch.tensor().max", "torch.zeros", "torch.zeros", "torch.all_gather", "bytearray", "torch.tensor.clone", "torch.tensor.new_zeros", "zip", "zip", "pickle.dumps", "range", "torch.tensor", "torch.tensor", "range", "part_list.append", "ordered_results.extend", "pickle.loads", "list", "recv[].cpu().numpy().tobytes", "recv[].cpu().numpy", "recv[].cpu"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.get_dist_info"], ["", "", "def", "collect_results_gpu", "(", "result_part", ",", "size", ")", ":", "\n", "    ", "\"\"\"Collect results in gpu mode.\n\n    It encodes results to gpu tensors and use gpu communication for results\n    collection.\n\n    Args:\n        result_part (list): Results to be collected\n        size (int): Result size.\n\n    Returns:\n        list: Ordered results.\n    \"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# dump result part to tensor with pickle", "\n", "part_tensor", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "pickle", ".", "dumps", "(", "result_part", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "# gather all result part tensor shape", "\n", "shape_tensor", "=", "torch", ".", "tensor", "(", "part_tensor", ".", "shape", ",", "device", "=", "'cuda'", ")", "\n", "shape_list", "=", "[", "shape_tensor", ".", "clone", "(", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "shape_list", ",", "shape_tensor", ")", "\n", "# padding result part tensor to max length", "\n", "shape_max", "=", "torch", ".", "tensor", "(", "shape_list", ")", ".", "max", "(", ")", "\n", "part_send", "=", "torch", ".", "zeros", "(", "shape_max", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "part_send", "[", ":", "shape_tensor", "[", "0", "]", "]", "=", "part_tensor", "\n", "part_recv_list", "=", "[", "\n", "part_tensor", ".", "new_zeros", "(", "shape_max", ")", "for", "_", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "# gather all result part", "\n", "dist", ".", "all_gather", "(", "part_recv_list", ",", "part_send", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "recv", ",", "shape", "in", "zip", "(", "part_recv_list", ",", "shape_list", ")", ":", "\n", "            ", "part_list", ".", "append", "(", "\n", "pickle", ".", "loads", "(", "recv", "[", ":", "shape", "[", "0", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "return", "ordered_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.__init__": [[36, 48], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "data", ",", "\n", "stack", "=", "False", ",", "\n", "padding_value", "=", "0", ",", "\n", "cpu_only", "=", "False", ",", "\n", "pad_dims", "=", "2", ")", ":", "\n", "        ", "self", ".", "_data", "=", "data", "\n", "self", ".", "_cpu_only", "=", "cpu_only", "\n", "self", ".", "_stack", "=", "stack", "\n", "self", ".", "_padding_value", "=", "padding_value", "\n", "assert", "pad_dims", "in", "[", "None", ",", "1", ",", "2", ",", "3", "]", "\n", "self", ".", "_pad_dims", "=", "pad_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.__repr__": [[49, 51], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "repr", "(", "self", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.data": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.datatype": [[56, 62], ["isinstance", "data_container.DataContainer.data.type", "type"], "methods", ["None"], ["", "@", "property", "\n", "def", "datatype", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "self", ".", "data", ".", "type", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "type", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.cpu_only": [[63, 66], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "cpu_only", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cpu_only", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.stack": [[67, 70], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "stack", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_stack", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.padding_value": [[71, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "padding_value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_padding_value", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.pad_dims": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pad_dims", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_pad_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size": [[79, 82], ["data_container.DataContainer.data.size"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["", "@", "assert_tensor_type", "\n", "def", "size", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "size", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.dim": [[83, 86], ["data_container.DataContainer.data.dim"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.dim"], ["", "@", "assert_tensor_type", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "dim", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.assert_tensor_type": [[7, 17], ["functools.wraps", "func", "isinstance", "AttributeError"], "function", ["None"], ["def", "assert_tensor_type", "(", "func", ")", ":", "\n", "\n", "    ", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "args", "[", "0", "]", ".", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "'{} has no attribute {} for type {}'", ".", "format", "(", "\n", "args", "[", "0", "]", ".", "__class__", ".", "__name__", ",", "func", ".", "__name__", ",", "args", "[", "0", "]", ".", "datatype", ")", ")", "\n", "", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.collate.collate": [[11, 86], ["isinstance", "isinstance", "TypeError", "data_container.DataContainer", "isinstance", "range", "data_container.DataContainer", "zip", "isinstance", "len", "len", "stacked.append", "range", "range", "collate.collate", "torch.utils.data.dataloader.default_collate", "len", "isinstance", "len", "stacked.append", "collate.collate", "batch[].dim", "range", "stacked.append", "batch[].size", "range", "range", "range", "padded_samples.append", "torch.utils.data.dataloader.default_collate", "stacked.append", "ValueError", "range", "max", "torch.pad", "torch.utils.data.dataloader.default_collate", "batch[].size", "sample.size", "sample.size", "range", "sample.size"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.collate.collate", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.collate.collate", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.dim", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["def", "collate", "(", "batch", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "    ", "\"\"\"Puts each data field into a tensor/DataContainer with outer dimension\n    batch size.\n\n    Extend default_collate to add support for\n    :type:`~mmcv.parallel.DataContainer`. There are 3 cases.\n\n    1. cpu_only = True, e.g., meta data\n    2. cpu_only = False, stack = True, e.g., images tensors\n    3. cpu_only = False, stack = False, e.g., gt bboxes\n    \"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "batch", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"{} is not supported.\"", ".", "format", "(", "batch", ".", "dtype", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "batch", "[", "0", "]", ",", "DataContainer", ")", ":", "\n", "        ", "assert", "len", "(", "batch", ")", "%", "samples_per_gpu", "==", "0", "\n", "stacked", "=", "[", "]", "\n", "if", "batch", "[", "0", "]", ".", "cpu_only", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "batch", ")", ",", "samples_per_gpu", ")", ":", "\n", "                ", "stacked", ".", "append", "(", "\n", "[", "sample", ".", "data", "for", "sample", "in", "batch", "[", "i", ":", "i", "+", "samples_per_gpu", "]", "]", ")", "\n", "", "return", "DataContainer", "(", "\n", "stacked", ",", "batch", "[", "0", "]", ".", "stack", ",", "batch", "[", "0", "]", ".", "padding_value", ",", "cpu_only", "=", "True", ")", "\n", "", "elif", "batch", "[", "0", "]", ".", "stack", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "batch", ")", ",", "samples_per_gpu", ")", ":", "\n", "                ", "assert", "isinstance", "(", "batch", "[", "i", "]", ".", "data", ",", "torch", ".", "Tensor", ")", "\n", "\n", "if", "batch", "[", "i", "]", ".", "pad_dims", "is", "not", "None", ":", "\n", "                    ", "ndim", "=", "batch", "[", "i", "]", ".", "dim", "(", ")", "\n", "assert", "ndim", ">", "batch", "[", "i", "]", ".", "pad_dims", "\n", "max_shape", "=", "[", "0", "for", "_", "in", "range", "(", "batch", "[", "i", "]", ".", "pad_dims", ")", "]", "\n", "for", "dim", "in", "range", "(", "1", ",", "batch", "[", "i", "]", ".", "pad_dims", "+", "1", ")", ":", "\n", "                        ", "max_shape", "[", "dim", "-", "1", "]", "=", "batch", "[", "i", "]", ".", "size", "(", "-", "dim", ")", "\n", "", "for", "sample", "in", "batch", "[", "i", ":", "i", "+", "samples_per_gpu", "]", ":", "\n", "                        ", "for", "dim", "in", "range", "(", "0", ",", "ndim", "-", "batch", "[", "i", "]", ".", "pad_dims", ")", ":", "\n", "                            ", "assert", "batch", "[", "i", "]", ".", "size", "(", "dim", ")", "==", "sample", ".", "size", "(", "dim", ")", "\n", "", "for", "dim", "in", "range", "(", "1", ",", "batch", "[", "i", "]", ".", "pad_dims", "+", "1", ")", ":", "\n", "                            ", "max_shape", "[", "dim", "-", "1", "]", "=", "max", "(", "max_shape", "[", "dim", "-", "1", "]", ",", "\n", "sample", ".", "size", "(", "-", "dim", ")", ")", "\n", "", "", "padded_samples", "=", "[", "]", "\n", "for", "sample", "in", "batch", "[", "i", ":", "i", "+", "samples_per_gpu", "]", ":", "\n", "                        ", "pad", "=", "[", "0", "for", "_", "in", "range", "(", "batch", "[", "i", "]", ".", "pad_dims", "*", "2", ")", "]", "\n", "for", "dim", "in", "range", "(", "1", ",", "batch", "[", "i", "]", ".", "pad_dims", "+", "1", ")", ":", "\n", "                            ", "pad", "[", "2", "*", "dim", "-", "\n", "1", "]", "=", "max_shape", "[", "dim", "-", "1", "]", "-", "sample", ".", "size", "(", "-", "dim", ")", "\n", "", "padded_samples", ".", "append", "(", "\n", "F", ".", "pad", "(", "\n", "sample", ".", "data", ",", "pad", ",", "value", "=", "sample", ".", "padding_value", ")", ")", "\n", "", "stacked", ".", "append", "(", "default_collate", "(", "padded_samples", ")", ")", "\n", "", "elif", "batch", "[", "i", "]", ".", "pad_dims", "is", "None", ":", "\n", "                    ", "stacked", ".", "append", "(", "\n", "default_collate", "(", "[", "\n", "sample", ".", "data", "\n", "for", "sample", "in", "batch", "[", "i", ":", "i", "+", "samples_per_gpu", "]", "\n", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "'pad_dims should be either None or integers (1-3)'", ")", "\n", "\n", "", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "batch", ")", ",", "samples_per_gpu", ")", ":", "\n", "                ", "stacked", ".", "append", "(", "\n", "[", "sample", ".", "data", "for", "sample", "in", "batch", "[", "i", ":", "i", "+", "samples_per_gpu", "]", "]", ")", "\n", "", "", "return", "DataContainer", "(", "stacked", ",", "batch", "[", "0", "]", ".", "stack", ",", "batch", "[", "0", "]", ".", "padding_value", ")", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Sequence", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "[", "collate", "(", "samples", ",", "samples_per_gpu", ")", "for", "samples", "in", "transposed", "]", "\n", "", "elif", "isinstance", "(", "batch", "[", "0", "]", ",", "collections", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "\n", "key", ":", "collate", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ",", "samples_per_gpu", ")", "\n", "for", "key", "in", "batch", "[", "0", "]", "\n", "}", "\n", "", "else", ":", "\n", "        ", "return", "default_collate", "(", "batch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.distributed.MMDistributedDataParallel.__init__": [[43, 61], ["torch.Module.__init__", "all", "distributed.MMDistributedDataParallel._passing_sync_batchnorm_handle", "distributed.MMDistributedDataParallel._sync_params", "module.parameters"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.distributed.MMDistributedDataParallel._passing_sync_batchnorm_handle", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.distributed.MMDistributedDataParallel._sync_params"], ["    ", "def", "__init__", "(", "self", ",", "\n", "module", ",", "\n", "dim", "=", "0", ",", "\n", "broadcast_buffers", "=", "True", ",", "\n", "bucket_cap_mb", "=", "25", ")", ":", "\n", "        ", "super", "(", "MMDistributedDataParallel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_cuda", "=", "all", "(", "\n", "[", "p", ".", "device", ".", "type", "==", "'cuda'", "for", "p", "in", "module", ".", "parameters", "(", ")", "]", ")", "\n", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "broadcast_buffers", "=", "broadcast_buffers", "\n", "\n", "self", ".", "broadcast_bucket_size", "=", "bucket_cap_mb", "*", "1024", "*", "1024", "\n", "\n", "# passing a handle to torch.nn.SyncBatchNorm layer", "\n", "self", ".", "_passing_sync_batchnorm_handle", "(", "[", "self", ".", "module", "]", ")", "\n", "self", ".", "_sync_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.distributed.MMDistributedDataParallel._dist_broadcast_coalesced": [[62, 69], ["torch._utils._take_tensors", "torch._utils._take_tensors", "torch._utils._take_tensors", "torch._utils._flatten_dense_tensors", "torch._utils._flatten_dense_tensors", "torch._utils._flatten_dense_tensors", "torch.broadcast", "torch.broadcast", "torch.broadcast", "zip", "torch._utils._unflatten_dense_tensors", "torch._utils._unflatten_dense_tensors", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "methods", ["None"], ["", "def", "_dist_broadcast_coalesced", "(", "self", ",", "tensors", ",", "buffer_size", ")", ":", "\n", "        ", "for", "tensors", "in", "_take_tensors", "(", "tensors", ",", "buffer_size", ")", ":", "\n", "            ", "flat_tensors", "=", "_flatten_dense_tensors", "(", "tensors", ")", "\n", "dist", ".", "broadcast", "(", "flat_tensors", ",", "0", ")", "\n", "for", "tensor", ",", "synced", "in", "zip", "(", "\n", "tensors", ",", "_unflatten_dense_tensors", "(", "flat_tensors", ",", "tensors", ")", ")", ":", "\n", "                ", "tensor", ".", "copy_", "(", "synced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.distributed.MMDistributedDataParallel._sync_params": [[70, 83], ["list", "distributed.MMDistributedDataParallel.module.state_dict().values", "len", "distributed.MMDistributedDataParallel._dist_broadcast_coalesced", "len", "distributed.MMDistributedDataParallel._dist_broadcast_coalesced", "distributed.MMDistributedDataParallel.module.state_dict", "distributed.MMDistributedDataParallel.module._all_buffers", "distributed.MMDistributedDataParallel.module.buffers"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.distributed.MMDistributedDataParallel._dist_broadcast_coalesced", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.distributed.MMDistributedDataParallel._dist_broadcast_coalesced"], ["", "", "", "def", "_sync_params", "(", "self", ")", ":", "\n", "        ", "module_states", "=", "list", "(", "self", ".", "module", ".", "state_dict", "(", ")", ".", "values", "(", ")", ")", "\n", "if", "len", "(", "module_states", ")", ">", "0", ":", "\n", "            ", "self", ".", "_dist_broadcast_coalesced", "(", "module_states", ",", "\n", "self", ".", "broadcast_bucket_size", ")", "\n", "", "if", "self", ".", "broadcast_buffers", ":", "\n", "            ", "if", "torch", ".", "__version__", "<", "'1.0'", ":", "\n", "                ", "buffers", "=", "[", "b", ".", "data", "for", "b", "in", "self", ".", "module", ".", "_all_buffers", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "buffers", "=", "[", "b", ".", "data", "for", "b", "in", "self", ".", "module", ".", "buffers", "(", ")", "]", "\n", "", "if", "len", "(", "buffers", ")", ">", "0", ":", "\n", "                ", "self", ".", "_dist_broadcast_coalesced", "(", "buffers", ",", "\n", "self", ".", "broadcast_bucket_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.distributed.MMDistributedDataParallel.scatter": [[84, 86], ["scatter_gather.scatter_kwargs"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.scatter_gather.scatter_kwargs"], ["", "", "", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.distributed.MMDistributedDataParallel.forward": [[87, 92], ["distributed.MMDistributedDataParallel.scatter", "distributed.MMDistributedDataParallel.module", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.scatter"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "# len(device_ids) is 1", "\n", "        ", "inputs", ",", "kwargs", "=", "self", ".", "scatter", "(", "inputs", ",", "kwargs", ",", "\n", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "\n", "return", "self", ".", "module", "(", "*", "inputs", "[", "0", "]", ",", "**", "kwargs", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.distributed.MMDistributedDataParallel._passing_sync_batchnorm_handle": [[93, 99], ["enumerate", "module.modules", "isinstance", "layer._specify_ddp_gpu_num"], "methods", ["None"], ["", "def", "_passing_sync_batchnorm_handle", "(", "self", ",", "module_copies", ")", ":", "\n", "        ", "for", "dev_idx", ",", "module", "in", "enumerate", "(", "module_copies", ")", ":", "\n", "            ", "for", "layer", "in", "module", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "layer", ",", "torch", ".", "nn", ".", "modules", ".", "SyncBatchNorm", ")", ":", "\n", "                    ", "assert", "self", ".", "is_cuda", ",", "\"SyncBatchNorm layers only work with CUDA modules\"", "\n", "layer", ".", "_specify_ddp_gpu_num", "(", "1", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_parallel.MMDataParallel.scatter": [[9, 11], ["scatter_gather.scatter_kwargs"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.scatter_gather.scatter_kwargs"], ["    ", "def", "scatter", "(", "self", ",", "inputs", ",", "kwargs", ",", "device_ids", ")", ":", "\n", "        ", "return", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "device_ids", ",", "dim", "=", "self", ".", "dim", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.scatter_gather.scatter": [[9, 43], ["isinstance", "isinstance", "scatter_gather.scatter.scatter_map"], "function", ["None"], ["def", "scatter", "(", "inputs", ",", "target_gpus", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"Scatter inputs to target gpus.\n\n    The only difference from original :func:`scatter` is to add support for\n    :type:`~mmcv.parallel.DataContainer`.\n    \"\"\"", "\n", "\n", "def", "scatter_map", "(", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "OrigScatter", ".", "apply", "(", "target_gpus", ",", "None", ",", "dim", ",", "obj", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "DataContainer", ")", ":", "\n", "            ", "if", "obj", ".", "cpu_only", ":", "\n", "                ", "return", "obj", ".", "data", "\n", "", "else", ":", "\n", "                ", "return", "Scatter", ".", "forward", "(", "target_gpus", ",", "obj", ".", "data", ")", "\n", "", "", "if", "isinstance", "(", "obj", ",", "tuple", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "return", "list", "(", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "list", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "out", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ")", ")", ")", ")", "\n", "return", "out", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", "and", "len", "(", "obj", ")", ">", "0", ":", "\n", "            ", "out", "=", "list", "(", "map", "(", "type", "(", "obj", ")", ",", "zip", "(", "*", "map", "(", "scatter_map", ",", "obj", ".", "items", "(", ")", ")", ")", ")", ")", "\n", "return", "out", "\n", "", "return", "[", "obj", "for", "targets", "in", "target_gpus", "]", "\n", "\n", "# After scatter_map is called, a scatter_map cell will exist. This cell", "\n", "# has a reference to the actual function scatter_map, which has references", "\n", "# to a closure that has a reference to the scatter_map cell (because the", "\n", "# fn is recursive). To avoid this reference cycle, we set the function to", "\n", "# None, clearing the cell", "\n", "", "try", ":", "\n", "        ", "return", "scatter_map", "(", "inputs", ")", "\n", "", "finally", ":", "\n", "        ", "scatter_map", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.scatter_gather.scatter_kwargs": [[45, 56], ["tuple", "tuple", "scatter_gather.scatter", "scatter_gather.scatter", "len", "len", "tuple.extend", "len", "len", "tuple.extend", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.scatter", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.scatter"], ["", "", "def", "scatter_kwargs", "(", "inputs", ",", "kwargs", ",", "target_gpus", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\"Scatter with support for kwargs dictionary\"\"\"", "\n", "inputs", "=", "scatter", "(", "inputs", ",", "target_gpus", ",", "dim", ")", "if", "inputs", "else", "[", "]", "\n", "kwargs", "=", "scatter", "(", "kwargs", ",", "target_gpus", ",", "dim", ")", "if", "kwargs", "else", "[", "]", "\n", "if", "len", "(", "inputs", ")", "<", "len", "(", "kwargs", ")", ":", "\n", "        ", "inputs", ".", "extend", "(", "[", "(", ")", "for", "_", "in", "range", "(", "len", "(", "kwargs", ")", "-", "len", "(", "inputs", ")", ")", "]", ")", "\n", "", "elif", "len", "(", "kwargs", ")", "<", "len", "(", "inputs", ")", ":", "\n", "        ", "kwargs", ".", "extend", "(", "[", "{", "}", "for", "_", "in", "range", "(", "len", "(", "inputs", ")", "-", "len", "(", "kwargs", ")", ")", "]", ")", "\n", "", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "kwargs", "=", "tuple", "(", "kwargs", ")", "\n", "return", "inputs", ",", "kwargs", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.Scatter.forward": [[62, 76], ["_functions.get_input_device", "_functions.scatter", "tuple", "_functions.synchronize_stream", "torch.nn.parallel._functions._get_stream"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.get_input_device", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.scatter", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.synchronize_stream"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "target_gpus", ",", "input", ")", ":", "\n", "        ", "input_device", "=", "get_input_device", "(", "input", ")", "\n", "streams", "=", "None", "\n", "if", "input_device", "==", "-", "1", ":", "\n", "# Perform CPU to GPU copies in a background stream", "\n", "            ", "streams", "=", "[", "_get_stream", "(", "device", ")", "for", "device", "in", "target_gpus", "]", "\n", "\n", "", "outputs", "=", "scatter", "(", "input", ",", "target_gpus", ",", "streams", ")", "\n", "# Synchronize with the copy stream", "\n", "if", "streams", "is", "not", "None", ":", "\n", "            ", "synchronize_stream", "(", "outputs", ",", "target_gpus", ",", "streams", ")", "\n", "\n", "", "return", "tuple", "(", "outputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.scatter": [[6, 28], ["isinstance", "isinstance", "len", "_functions.scatter", "input.contiguous", "Exception", "len", "range", "torch.cuda.device", "torch.cuda.stream", "output.cuda.cuda", "len", "len", "output.cuda.numel", "type"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.scatter"], ["def", "scatter", "(", "input", ",", "devices", ",", "streams", "=", "None", ")", ":", "\n", "    ", "\"\"\"Scatters tensor across multiple GPUs.\n    \"\"\"", "\n", "if", "streams", "is", "None", ":", "\n", "        ", "streams", "=", "[", "None", "]", "*", "len", "(", "devices", ")", "\n", "\n", "", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "        ", "chunk_size", "=", "(", "len", "(", "input", ")", "-", "1", ")", "//", "len", "(", "devices", ")", "+", "1", "\n", "outputs", "=", "[", "\n", "scatter", "(", "input", "[", "i", "]", ",", "[", "devices", "[", "i", "//", "chunk_size", "]", "]", ",", "\n", "[", "streams", "[", "i", "//", "chunk_size", "]", "]", ")", "for", "i", "in", "range", "(", "len", "(", "input", ")", ")", "\n", "]", "\n", "return", "outputs", "\n", "", "elif", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "output", "=", "input", ".", "contiguous", "(", ")", "\n", "# TODO: copy to a pinned buffer first (if copying from CPU)", "\n", "stream", "=", "streams", "[", "0", "]", "if", "output", ".", "numel", "(", ")", ">", "0", "else", "None", "\n", "with", "torch", ".", "cuda", ".", "device", "(", "devices", "[", "0", "]", ")", ",", "torch", ".", "cuda", ".", "stream", "(", "stream", ")", ":", "\n", "            ", "output", "=", "output", ".", "cuda", "(", "devices", "[", "0", "]", ",", "non_blocking", "=", "True", ")", "\n", "", "return", "output", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Unknown type {}.'", ".", "format", "(", "type", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.synchronize_stream": [[30, 45], ["isinstance", "range", "isinstance", "len", "len", "len", "range", "Exception", "_functions.synchronize_stream", "output.numel", "torch.cuda.device", "torch.cuda.current_stream", "torch.cuda.current_stream.wait_stream", "output.record_stream", "type"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.synchronize_stream"], ["", "", "def", "synchronize_stream", "(", "output", ",", "devices", ",", "streams", ")", ":", "\n", "    ", "if", "isinstance", "(", "output", ",", "list", ")", ":", "\n", "        ", "chunk_size", "=", "len", "(", "output", ")", "//", "len", "(", "devices", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "devices", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "chunk_size", ")", ":", "\n", "                ", "synchronize_stream", "(", "output", "[", "i", "*", "chunk_size", "+", "j", "]", ",", "[", "devices", "[", "i", "]", "]", ",", "\n", "[", "streams", "[", "i", "]", "]", ")", "\n", "", "", "", "elif", "isinstance", "(", "output", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "output", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "device", "(", "devices", "[", "0", "]", ")", ":", "\n", "                ", "main_stream", "=", "torch", ".", "cuda", ".", "current_stream", "(", ")", "\n", "main_stream", ".", "wait_stream", "(", "streams", "[", "0", "]", ")", "\n", "output", ".", "record_stream", "(", "main_stream", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Unknown type {}.'", ".", "format", "(", "type", "(", "output", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.get_input_device": [[47, 58], ["isinstance", "isinstance", "_functions.get_input_device", "Exception", "input.get_device", "type"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.get_input_device"], ["", "", "def", "get_input_device", "(", "input", ")", ":", "\n", "    ", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "        ", "for", "item", "in", "input", ":", "\n", "            ", "input_device", "=", "get_input_device", "(", "item", ")", "\n", "if", "input_device", "!=", "-", "1", ":", "\n", "                ", "return", "input_device", "\n", "", "", "return", "-", "1", "\n", "", "elif", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "input", ".", "get_device", "(", ")", "if", "input", ".", "is_cuda", "else", "-", "1", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Unknown type {}.'", ".", "format", "(", "type", "(", "input", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.decorators.auto_fp16": [[9, 86], ["functools.wraps", "inspect.getfullargspec", "old_func", "isinstance", "TypeError", "old_func", "enumerate", "kwargs.items", "utils.cast_tensor_type", "hasattr", "len", "new_args.append", "new_args.append", "utils.cast_tensor_type", "utils.cast_tensor_type"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.utils.cast_tensor_type"], ["def", "auto_fp16", "(", "apply_to", "=", "None", ",", "out_fp32", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decorator to enable fp16 training automatically.\n\n    This decorator is useful when you write custom modules and want to support\n    mixed precision training. If inputs arguments are fp32 tensors, they will\n    be converted to fp16 automatically. Arguments other than fp32 tensors are\n    ignored.\n\n    Args:\n        apply_to (Iterable, optional): The argument names to be converted.\n            `None` indicates all arguments.\n        out_fp32 (bool): Whether to convert the output back to fp32.\n\n    :Example:\n\n        >>> import torch.nn as nn\n        >>> class MyModule1(nn.Module):\n        >>>\n        >>>     # Convert x and y to fp16\n        >>>     @auto_fp16()\n        >>>     def forward(self, x, y):\n        >>>         pass\n\n        >>> import torch.nn as nn\n        >>> class MyModule2(nn.Module):\n        >>>\n        >>>     # convert pred to fp16\n        >>>     @auto_fp16(apply_to=('pred', ))\n        >>>     def do_something(self, pred, others):\n        >>>         pass\n    \"\"\"", "\n", "\n", "def", "auto_fp16_wrapper", "(", "old_func", ")", ":", "\n", "\n", "        ", "@", "functools", ".", "wraps", "(", "old_func", ")", "\n", "def", "new_func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# check if the module has set the attribute `fp16_enabled`, if not,", "\n", "# just fallback to the original method.", "\n", "            ", "if", "not", "isinstance", "(", "args", "[", "0", "]", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'@auto_fp16 can only be used to decorate the '", "\n", "'method of nn.Module'", ")", "\n", "", "if", "not", "(", "hasattr", "(", "args", "[", "0", "]", ",", "'fp16_enabled'", ")", "and", "args", "[", "0", "]", ".", "fp16_enabled", ")", ":", "\n", "                ", "return", "old_func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# get the arg spec of the decorated method", "\n", "", "args_info", "=", "getfullargspec", "(", "old_func", ")", "\n", "# get the argument names to be casted", "\n", "args_to_cast", "=", "args_info", ".", "args", "if", "apply_to", "is", "None", "else", "apply_to", "\n", "# convert the args that need to be processed", "\n", "new_args", "=", "[", "]", "\n", "# NOTE: default args are not taken into consideration", "\n", "if", "args", ":", "\n", "                ", "arg_names", "=", "args_info", ".", "args", "[", ":", "len", "(", "args", ")", "]", "\n", "for", "i", ",", "arg_name", "in", "enumerate", "(", "arg_names", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_args", ".", "append", "(", "\n", "cast_tensor_type", "(", "args", "[", "i", "]", ",", "torch", ".", "float", ",", "torch", ".", "half", ")", ")", "\n", "", "else", ":", "\n", "                        ", "new_args", ".", "append", "(", "args", "[", "i", "]", ")", "\n", "# convert the kwargs that need to be processed", "\n", "", "", "", "new_kwargs", "=", "{", "}", "\n", "if", "kwargs", ":", "\n", "                ", "for", "arg_name", ",", "arg_value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "cast_tensor_type", "(", "\n", "arg_value", ",", "torch", ".", "float", ",", "torch", ".", "half", ")", "\n", "", "else", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "arg_value", "\n", "# apply converted arguments to the decorated method", "\n", "", "", "", "output", "=", "old_func", "(", "*", "new_args", ",", "**", "new_kwargs", ")", "\n", "# cast the results back to fp32 if necessary", "\n", "if", "out_fp32", ":", "\n", "                ", "output", "=", "cast_tensor_type", "(", "output", ",", "torch", ".", "half", ",", "torch", ".", "float", ")", "\n", "", "return", "output", "\n", "\n", "", "return", "new_func", "\n", "\n", "", "return", "auto_fp16_wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.decorators.force_fp32": [[88, 165], ["functools.wraps", "inspect.getfullargspec", "dict", "old_func", "isinstance", "TypeError", "old_func", "enumerate", "kwargs.items", "utils.cast_tensor_type", "hasattr", "len", "new_args.append", "new_args.append", "utils.cast_tensor_type", "utils.cast_tensor_type"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.utils.cast_tensor_type"], ["", "def", "force_fp32", "(", "apply_to", "=", "None", ",", "out_fp16", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decorator to convert input arguments to fp32 in force.\n\n    This decorator is useful when you write custom modules and want to support\n    mixed precision training. If there are some inputs that must be processed\n    in fp32 mode, then this decorator can handle it. If inputs arguments are\n    fp16 tensors, they will be converted to fp32 automatically. Arguments other\n    than fp16 tensors are ignored.\n\n    Args:\n        apply_to (Iterable, optional): The argument names to be converted.\n            `None` indicates all arguments.\n        out_fp16 (bool): Whether to convert the output back to fp16.\n\n    :Example:\n\n        >>> import torch.nn as nn\n        >>> class MyModule1(nn.Module):\n        >>>\n        >>>     # Convert x and y to fp32\n        >>>     @force_fp32()\n        >>>     def loss(self, x, y):\n        >>>         pass\n\n        >>> import torch.nn as nn\n        >>> class MyModule2(nn.Module):\n        >>>\n        >>>     # convert pred to fp32\n        >>>     @force_fp32(apply_to=('pred', ))\n        >>>     def post_process(self, pred, others):\n        >>>         pass\n    \"\"\"", "\n", "\n", "def", "force_fp32_wrapper", "(", "old_func", ")", ":", "\n", "\n", "        ", "@", "functools", ".", "wraps", "(", "old_func", ")", "\n", "def", "new_func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# check if the module has set the attribute `fp16_enabled`, if not,", "\n", "# just fallback to the original method.", "\n", "            ", "if", "not", "isinstance", "(", "args", "[", "0", "]", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "                ", "raise", "TypeError", "(", "'@force_fp32 can only be used to decorate the '", "\n", "'method of nn.Module'", ")", "\n", "", "if", "not", "(", "hasattr", "(", "args", "[", "0", "]", ",", "'fp16_enabled'", ")", "and", "args", "[", "0", "]", ".", "fp16_enabled", ")", ":", "\n", "                ", "return", "old_func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# get the arg spec of the decorated method", "\n", "", "args_info", "=", "getfullargspec", "(", "old_func", ")", "\n", "# get the argument names to be casted", "\n", "args_to_cast", "=", "args_info", ".", "args", "if", "apply_to", "is", "None", "else", "apply_to", "\n", "# convert the args that need to be processed", "\n", "new_args", "=", "[", "]", "\n", "if", "args", ":", "\n", "                ", "arg_names", "=", "args_info", ".", "args", "[", ":", "len", "(", "args", ")", "]", "\n", "for", "i", ",", "arg_name", "in", "enumerate", "(", "arg_names", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_args", ".", "append", "(", "\n", "cast_tensor_type", "(", "args", "[", "i", "]", ",", "torch", ".", "half", ",", "torch", ".", "float", ")", ")", "\n", "", "else", ":", "\n", "                        ", "new_args", ".", "append", "(", "args", "[", "i", "]", ")", "\n", "# convert the kwargs that need to be processed", "\n", "", "", "", "new_kwargs", "=", "dict", "(", ")", "\n", "if", "kwargs", ":", "\n", "                ", "for", "arg_name", ",", "arg_value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "                    ", "if", "arg_name", "in", "args_to_cast", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "cast_tensor_type", "(", "\n", "arg_value", ",", "torch", ".", "half", ",", "torch", ".", "float", ")", "\n", "", "else", ":", "\n", "                        ", "new_kwargs", "[", "arg_name", "]", "=", "arg_value", "\n", "# apply converted arguments to the decorated method", "\n", "", "", "", "output", "=", "old_func", "(", "*", "new_args", ",", "**", "new_kwargs", ")", "\n", "# cast the results back to fp32 if necessary", "\n", "if", "out_fp16", ":", "\n", "                ", "output", "=", "cast_tensor_type", "(", "output", ",", "torch", ".", "float", ",", "torch", ".", "half", ")", "\n", "", "return", "output", "\n", "\n", "", "return", "new_func", "\n", "\n", "", "return", "force_fp32_wrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.Fp16OptimizerHook.__init__": [[27, 38], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "grad_clip", "=", "None", ",", "\n", "coalesce", "=", "True", ",", "\n", "bucket_size_mb", "=", "-", "1", ",", "\n", "loss_scale", "=", "512.", ",", "\n", "distributed", "=", "True", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "self", ".", "loss_scale", "=", "loss_scale", "\n", "self", ".", "distributed", "=", "distributed", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.Fp16OptimizerHook.before_run": [[39, 50], ["copy.deepcopy", "hooks.wrap_fp16_model"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.wrap_fp16_model"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"Preparing steps before Mixed Precision Training.\n\n        1. Make a master copy of fp32 weights for optimization.\n        2. Convert the main model from fp32 to fp16.\n        \"\"\"", "\n", "# keep a copy of fp32 weights", "\n", "runner", ".", "optimizer", ".", "param_groups", "=", "copy", ".", "deepcopy", "(", "\n", "runner", ".", "optimizer", ".", "param_groups", ")", "\n", "# convert model to fp16", "\n", "wrap_fp16_model", "(", "runner", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.Fp16OptimizerHook.copy_grads_to_fp32": [[51, 58], ["zip", "fp16_net.parameters", "fp32_param.grad.copy_", "fp32_param.data.new", "fp32_param.size"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.parallel.data_container.DataContainer.size"], ["", "def", "copy_grads_to_fp32", "(", "self", ",", "fp16_net", ",", "fp32_weights", ")", ":", "\n", "        ", "\"\"\"Copy gradients from fp16 model to fp32 weight copy.\"\"\"", "\n", "for", "fp32_param", ",", "fp16_param", "in", "zip", "(", "fp32_weights", ",", "fp16_net", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "if", "fp16_param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "if", "fp32_param", ".", "grad", "is", "None", ":", "\n", "                    ", "fp32_param", ".", "grad", "=", "fp32_param", ".", "data", ".", "new", "(", "fp32_param", ".", "size", "(", ")", ")", "\n", "", "fp32_param", ".", "grad", ".", "copy_", "(", "fp16_param", ".", "grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.Fp16OptimizerHook.copy_params_to_fp16": [[59, 63], ["zip", "fp16_net.parameters", "fp16_param.data.copy_"], "methods", ["None"], ["", "", "", "def", "copy_params_to_fp16", "(", "self", ",", "fp16_net", ",", "fp32_weights", ")", ":", "\n", "        ", "\"\"\"Copy updated params from fp32 weight copy to fp16 model.\"\"\"", "\n", "for", "fp16_param", ",", "fp32_param", "in", "zip", "(", "fp16_net", ".", "parameters", "(", ")", ",", "fp32_weights", ")", ":", "\n", "            ", "fp16_param", ".", "data", ".", "copy_", "(", "fp32_param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.Fp16OptimizerHook.after_train_iter": [[64, 97], ["runner.model.zero_grad", "runner.optimizer.zero_grad", "scaled_loss.backward", "hooks.Fp16OptimizerHook.copy_grads_to_fp32", "runner.optimizer.step", "hooks.Fp16OptimizerHook.copy_params_to_fp16", "dist_utils.allreduce_grads", "hooks.Fp16OptimizerHook.clip_grads", "param.grad.div_"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.segmental_consensuses.simple_consensus._SimpleConsensus.backward", "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.Fp16OptimizerHook.copy_grads_to_fp32", "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.Fp16OptimizerHook.copy_params_to_fp16", "home.repos.pwc.inspect_result.whwu95_DSANet.core.dist_utils.allreduce_grads"], ["", "", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"Backward optimization steps for Mixed Precision Training.\n\n        1. Scale the loss by a scale factor.\n        2. Backward the loss to obtain the gradients (fp16).\n        3. Copy gradients from the model to the fp32 weight copy.\n        4. Scale the gradients back and update the fp32 weight copy.\n        5. Copy back the params from fp32 weight copy to the fp16 model.\n        \"\"\"", "\n", "# clear grads of last iteration", "\n", "runner", ".", "model", ".", "zero_grad", "(", ")", "\n", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "# scale the loss value", "\n", "scaled_loss", "=", "runner", ".", "outputs", "[", "'loss'", "]", "*", "self", ".", "loss_scale", "\n", "scaled_loss", ".", "backward", "(", ")", "\n", "# copy fp16 grads in the model to fp32 params in the optimizer", "\n", "fp32_weights", "=", "[", "]", "\n", "for", "param_group", "in", "runner", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "fp32_weights", "+=", "param_group", "[", "'params'", "]", "\n", "", "self", ".", "copy_grads_to_fp32", "(", "runner", ".", "model", ",", "fp32_weights", ")", "\n", "# allreduce grads", "\n", "if", "self", ".", "distributed", ":", "\n", "            ", "allreduce_grads", "(", "fp32_weights", ",", "self", ".", "coalesce", ",", "self", ".", "bucket_size_mb", ")", "\n", "# scale the gradients back", "\n", "", "for", "param", "in", "fp32_weights", ":", "\n", "            ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "                ", "param", ".", "grad", ".", "div_", "(", "self", ".", "loss_scale", ")", "\n", "", "", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "            ", "self", ".", "clip_grads", "(", "fp32_weights", ")", "\n", "# update fp32 params", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "# copy fp32 params to the fp16 model", "\n", "self", ".", "copy_params_to_fp16", "(", "runner", ".", "model", ",", "fp32_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.wrap_fp16_model": [[99, 116], ["model.half", "hooks.patch_norm_fp32", "model.modules", "hasattr"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.patch_norm_fp32"], ["", "", "def", "wrap_fp16_model", "(", "model", ")", ":", "\n", "    ", "\"\"\"Wrap the FP32 model to FP16.\n\n    1. Convert FP32 model to FP16.\n    2. Remain some necessary layers to be FP32, e.g., normalization layers.\n\n    Args:\n        model (nn.Module): Model in FP32.\n    \"\"\"", "\n", "# convert model to fp16", "\n", "model", ".", "half", "(", ")", "\n", "# patch the normalization layers to make it work in fp32 mode", "\n", "patch_norm_fp32", "(", "model", ")", "\n", "# set `fp16_enabled` flag", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "m", ",", "'fp16_enabled'", ")", ":", "\n", "            ", "m", ".", "fp16_enabled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.patch_norm_fp32": [[118, 136], ["isinstance", "module.children", "module.float", "hooks.patch_norm_fp32", "isinstance", "hooks.patch_forward_method"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.patch_norm_fp32", "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.patch_forward_method"], ["", "", "", "def", "patch_norm_fp32", "(", "module", ")", ":", "\n", "    ", "\"\"\"Recursively convert normalization layers from FP16 to FP32.\n\n    Args:\n        module (nn.Module): The modules to be converted in FP16.\n\n    Returns:\n        nn.Module: The converted module, the normalization layers have been\n            converted to FP32.\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "        ", "module", ".", "float", "(", ")", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "GroupNorm", ")", "or", "torch", ".", "__version__", "<", "'1.3'", ":", "\n", "            ", "module", ".", "forward", "=", "patch_forward_method", "(", "module", ".", "forward", ",", "torch", ".", "half", ",", "\n", "torch", ".", "float", ")", "\n", "", "", "for", "child", "in", "module", ".", "children", "(", ")", ":", "\n", "        ", "patch_norm_fp32", "(", "child", ")", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.hooks.patch_forward_method": [[138, 159], ["func", "utils.cast_tensor_type", "utils.cast_tensor_type", "utils.cast_tensor_type", "torch.half", "torch.half", "torch.float", "torch.float"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.utils.cast_tensor_type"], ["", "def", "patch_forward_method", "(", "func", ",", "src_type", ",", "dst_type", ",", "convert_output", "=", "True", ")", ":", "\n", "    ", "\"\"\"Patch the forward method of a module.\n\n    Args:\n        func (callable): The original forward method.\n        src_type (torch.dtype): Type of input arguments to be converted from.\n        dst_type (torch.dtype): Type of input arguments to be converted to.\n        convert_output (bool): Whether to convert the output back to src_type.\n\n    Returns:\n        callable: The patched forward method.\n    \"\"\"", "\n", "\n", "def", "new_forward", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "output", "=", "func", "(", "*", "cast_tensor_type", "(", "args", ",", "src_type", ",", "dst_type", ")", ",", "\n", "**", "cast_tensor_type", "(", "kwargs", ",", "src_type", ",", "dst_type", ")", ")", "\n", "if", "convert_output", ":", "\n", "            ", "output", "=", "cast_tensor_type", "(", "output", ",", "dst_type", ",", "src_type", ")", "\n", "", "return", "output", "\n", "\n", "", "return", "new_forward", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.utils.cast_tensor_type": [[7, 34], ["isinstance", "inputs.to", "isinstance", "isinstance", "isinstance", "isinstance", "type", "utils.cast_tensor_type", "type", "inputs.items", "utils.cast_tensor_type"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.fp16.utils.cast_tensor_type", "home.repos.pwc.inspect_result.whwu95_DSANet.fp16.utils.cast_tensor_type"], ["def", "cast_tensor_type", "(", "inputs", ",", "src_type", ",", "dst_type", ")", ":", "\n", "    ", "\"\"\"Recursively convert Tensor in inputs from src_type to dst_type.\n\n    Args:\n        inputs: Inputs that to be casted.\n        src_type (torch.dtype): Source type..\n        dst_type (torch.dtype): Destination type.\n\n    Returns:\n        The same type with inputs, but all contained Tensors have been cast.\n    \"\"\"", "\n", "if", "isinstance", "(", "inputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "inputs", ".", "to", "(", "dst_type", ")", "\n", "", "elif", "isinstance", "(", "inputs", ",", "str", ")", ":", "\n", "        ", "return", "inputs", "\n", "", "elif", "isinstance", "(", "inputs", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "inputs", "\n", "", "elif", "isinstance", "(", "inputs", ",", "abc", ".", "Mapping", ")", ":", "\n", "        ", "return", "type", "(", "inputs", ")", "(", "{", "\n", "k", ":", "cast_tensor_type", "(", "v", ",", "src_type", ",", "dst_type", ")", "\n", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", "\n", "}", ")", "\n", "", "elif", "isinstance", "(", "inputs", ",", "abc", ".", "Iterable", ")", ":", "\n", "        ", "return", "type", "(", "inputs", ")", "(", "\n", "cast_tensor_type", "(", "item", ",", "src_type", ",", "dst_type", ")", "for", "item", "in", "inputs", ")", "\n", "", "else", ":", "\n", "        ", "return", "inputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.parallel_test.worker_func": [[10, 23], ["model_cls", "utils.load_checkpoint", "torch.cuda.set_device", "model_cls.cuda", "model_cls.eval", "torch.no_grad", "idx_queue.get", "model_cls.", "result_queue.put", "data_func"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.checkpoint.load_checkpoint", "home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get"], ["def", "worker_func", "(", "model_cls", ",", "model_kwargs", ",", "checkpoint", ",", "dataset", ",", "data_func", ",", "\n", "gpu_id", ",", "idx_queue", ",", "result_queue", ")", ":", "\n", "    ", "model", "=", "model_cls", "(", "**", "model_kwargs", ")", "\n", "load_checkpoint", "(", "model", ",", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "gpu_id", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "idx", "=", "idx_queue", ".", "get", "(", ")", "\n", "data", "=", "dataset", "[", "idx", "]", "\n", "result", "=", "model", "(", "**", "data_func", "(", "data", ",", "gpu_id", ")", ")", "\n", "result_queue", ".", "put", "(", "(", "idx", ",", "result", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.parallel_test.parallel_test": [[25, 77], ["multiprocessing.get_context", "multiprocessing.get_context.Queue", "multiprocessing.get_context.Queue", "range", "mmcv.ProgressBar", "range", "print", "len", "multiprocessing.get_context.Process", "w.start", "len", "ctx.Queue.put", "len", "ctx.Queue.get", "mmcv.ProgressBar.update", "worker.terminate", "range", "range", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.utils.registry.Registry.get"], ["", "", "", "def", "parallel_test", "(", "model_cls", ",", "\n", "model_kwargs", ",", "\n", "checkpoint", ",", "\n", "dataset", ",", "\n", "data_func", ",", "\n", "gpus", ",", "\n", "workers_per_gpu", "=", "1", ")", ":", "\n", "    ", "\"\"\"Parallel testing on multiple GPUs.\n    only for len(data) % num_gpus  == 0\n\n    Args:\n        model_cls (type): Model class type.\n        model_kwargs (dict): Arguments to init the model.\n        checkpoint (str): Checkpoint filepath.\n        dataset (:obj:`Dataset`): The dataset to be tested.\n        data_func (callable): The function that generates model inputs.\n        gpus (list[int]): GPU ids to be used.\n        workers_per_gpu (int): Number of processes on each GPU. It is possible\n            to run multiple workers on each GPU.\n\n    Returns:\n        list: Test results.\n    \"\"\"", "\n", "ctx", "=", "multiprocessing", ".", "get_context", "(", "'spawn'", ")", "\n", "idx_queue", "=", "ctx", ".", "Queue", "(", ")", "\n", "result_queue", "=", "ctx", ".", "Queue", "(", ")", "\n", "num_workers", "=", "len", "(", "gpus", ")", "*", "workers_per_gpu", "\n", "workers", "=", "[", "\n", "ctx", ".", "Process", "(", "\n", "target", "=", "worker_func", ",", "\n", "args", "=", "(", "model_cls", ",", "model_kwargs", ",", "checkpoint", ",", "dataset", ",", "data_func", ",", "\n", "gpus", "[", "i", "%", "len", "(", "gpus", ")", "]", ",", "idx_queue", ",", "result_queue", ")", ")", "\n", "for", "i", "in", "range", "(", "num_workers", ")", "\n", "]", "\n", "for", "w", "in", "workers", ":", "\n", "        ", "w", ".", "daemon", "=", "True", "\n", "w", ".", "start", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "idx_queue", ".", "put", "(", "i", ")", "\n", "\n", "", "results", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "task_num", "=", "len", "(", "dataset", ")", ")", "\n", "for", "_", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "idx", ",", "res", "=", "result_queue", ".", "get", "(", ")", "\n", "results", "[", "idx", "]", "=", "res", "\n", "prog_bar", ".", "update", "(", ")", "\n", "", "print", "(", "'\\n'", ")", "\n", "for", "worker", "in", "workers", ":", "\n", "        ", "worker", ".", "terminate", "(", ")", "\n", "\n", "", "return", "results", "\n", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalHook.__init__": [[17, 29], ["isinstance", "isinstance", "mmcv.runner.obj_from_dict", "TypeError", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "interval", "=", "1", ",", "distributed", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "dataset", ",", "Dataset", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "dataset", "\n", "", "elif", "isinstance", "(", "dataset", ",", "dict", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "obj_from_dict", "(", "dataset", ",", "datasets", ",", "\n", "{", "'test_mode'", ":", "True", "}", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataset must be a Dataset object or a dict, not {}'", ".", "format", "(", "\n", "type", "(", "dataset", ")", ")", ")", "\n", "", "self", ".", "interval", "=", "interval", "\n", "self", ".", "dist", "=", "distributed", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalHook.after_train_epoch": [[74, 113], ["runner.model.eval", "range", "os.join", "os.join", "mmcv.dump", "torch.barrier", "torch.barrier", "eval_hooks.DistEvalHook.every_n_epochs", "mmcv.ProgressBar", "len", "print", "range", "eval_hooks.DistEvalHook.evaluate", "os.remove", "os.remove", "os.remove", "os.remove", "range", "len", "parallel.scatter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "runner.model", "range", "os.join", "os.join", "mmcv.load", "range", "os.remove", "os.remove", "os.remove", "os.remove", "os.join", "os.join", "len", "parallel.collate", "mmcv.ProgressBar.update", "len", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device", "torch.cuda.current_device"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.evaluate", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel._functions.scatter", "home.repos.pwc.inspect_result.whwu95_DSANet.parallel.collate.collate"], ["", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "runner", ".", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", "]", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "", "for", "idx", "in", "range", "(", "runner", ".", "rank", ",", "len", "(", "self", ".", "dataset", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "            ", "data", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "data_gpu", "=", "scatter", "(", "\n", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", ",", "\n", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ")", "[", "0", "]", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "result", "=", "runner", ".", "model", "(", "return_loss", "=", "False", ",", "**", "data_gpu", ")", "\n", "", "results", "[", "idx", "]", "=", "result", "\n", "\n", "batch_size", "=", "runner", ".", "world_size", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "                ", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "", "", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'temp_{}.pkl'", ".", "format", "(", "runner", ".", "rank", ")", ")", "\n", "mmcv", ".", "dump", "(", "results", ",", "tmp_file", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "runner", ".", "world_size", ")", ":", "\n", "                ", "tmp_file", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'temp_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "tmp_results", "=", "mmcv", ".", "load", "(", "tmp_file", ")", "\n", "for", "idx", "in", "range", "(", "i", ",", "len", "(", "results", ")", ",", "runner", ".", "world_size", ")", ":", "\n", "                    ", "results", "[", "idx", "]", "=", "tmp_results", "[", "idx", "]", "\n", "", "os", ".", "remove", "(", "tmp_file", ")", "\n", "", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "os", ".", "remove", "(", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'temp_0.pkl'", ")", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalHook.evaluate": [[114, 116], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__": [[120, 123], ["eval_hooks.DistEvalHook.__init__"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "interval", "=", "1", ",", "k", "=", "(", "1", ",", ")", ",", "dist", "=", "True", ")", ":", "\n", "        ", "super", "(", "DistEvalTopKAccuracyHook", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "interval", ",", "dist", ")", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.eval_hooks.DistEvalTopKAccuracyHook.evaluate": [[124, 136], ["range", "accuracy.top_k_accuracy", "len", "gt_labels.append", "res.squeeze"], "methods", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.top_k_accuracy"], ["", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "gt_labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ":", "\n", "            ", "ann", "=", "self", ".", "dataset", ".", "video_infos", "[", "i", "]", "\n", "gt_labels", ".", "append", "(", "ann", "[", "'label'", "]", ")", "\n", "\n", "", "results", "=", "[", "res", ".", "squeeze", "(", ")", "for", "res", "in", "results", "]", "\n", "top1", ",", "top5", "=", "top_k_accuracy", "(", "results", ",", "gt_labels", ",", "k", "=", "self", ".", "k", ")", "\n", "runner", ".", "mode", "=", "'val'", "\n", "runner", ".", "log_buffer", ".", "output", "[", "'top1 acc'", "]", "=", "top1", "\n", "runner", ".", "log_buffer", ".", "output", "[", "'top5 acc'", "]", "=", "top5", "\n", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.softmax": [[4, 8], ["numpy.exp", "np.exp.sum", "numpy.max"], "function", ["None"], ["def", "softmax", "(", "x", ",", "dim", "=", "1", ")", ":", "\n", "    ", "\"\"\"Compute softmax values for each sets of scores in x.\"\"\"", "\n", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ",", "axis", "=", "dim", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "e_x", "/", "e_x", ".", "sum", "(", "axis", "=", "dim", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.confusion_matrix": [[10, 48], ["isinstance", "isinstance", "numpy.unique", "len", "numpy.zeros", "zip", "numpy.array", "isinstance", "TypeError", "TypeError", "numpy.array", "isinstance", "TypeError", "TypeError", "numpy.concatenate", "enumerate", "type", "type"], "function", ["None"], ["", "def", "confusion_matrix", "(", "y_pred", ",", "y_real", ")", ":", "\n", "    ", "\"\"\"Compute confusion matrix.\n\n    Args:\n        y_pred (list[int] | np.ndarray[int]): Prediction labels.\n        y_real (list[int] | np.ndarray[int]): Ground truth labels.\n\n    Returns:\n        np.ndarray: Confusion matrix.\n    \"\"\"", "\n", "if", "isinstance", "(", "y_pred", ",", "list", ")", ":", "\n", "        ", "y_pred", "=", "np", ".", "array", "(", "y_pred", ")", "\n", "", "if", "not", "isinstance", "(", "y_pred", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "f'y_pred must be list or np.ndarray, but got {type(y_pred)}'", ")", "\n", "", "if", "not", "y_pred", ".", "dtype", "==", "np", ".", "int64", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "f'y_pred dtype must be np.int64, but got {y_pred.dtype}'", ")", "\n", "\n", "", "if", "isinstance", "(", "y_real", ",", "list", ")", ":", "\n", "        ", "y_real", "=", "np", ".", "array", "(", "y_real", ")", "\n", "", "if", "not", "isinstance", "(", "y_real", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "f'y_real must be list or np.ndarray, but got {type(y_real)}'", ")", "\n", "", "if", "not", "y_real", ".", "dtype", "==", "np", ".", "int64", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "f'y_real dtype must be np.int64, but got {y_real.dtype}'", ")", "\n", "\n", "", "label_set", "=", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "(", "y_pred", ",", "y_real", ")", ")", ")", "\n", "num_labels", "=", "len", "(", "label_set", ")", "\n", "label_map", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "label_set", ")", "}", "\n", "confusion_mat", "=", "np", ".", "zeros", "(", "(", "num_labels", ",", "num_labels", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "for", "rlabel", ",", "plabel", "in", "zip", "(", "y_real", ",", "y_pred", ")", ":", "\n", "        ", "index_real", "=", "label_map", "[", "rlabel", "]", "\n", "index_pred", "=", "label_map", "[", "plabel", "]", "\n", "confusion_mat", "[", "index_real", "]", "[", "index_pred", "]", "+=", "1", "\n", "\n", "", "return", "confusion_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.mean_class_accuracy": [[50, 70], ["numpy.argmax", "confusion_matrix().astype", "confusion_matrix().astype.sum", "numpy.diag", "numpy.mean", "accuracy.confusion_matrix", "zip"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.confusion_matrix"], ["", "def", "mean_class_accuracy", "(", "scores", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Calculate mean class accuracy.\n\n    Args:\n        scores (list[np.ndarray]): Prediction scores for each class.\n        labels (list[int]): Ground truth labels.\n\n    Returns:\n        np.ndarray: Mean class accuracy.\n    \"\"\"", "\n", "pred", "=", "np", ".", "argmax", "(", "scores", ",", "axis", "=", "1", ")", "\n", "cf", "=", "confusion_matrix", "(", "pred", ",", "labels", ")", ".", "astype", "(", "float", ")", "\n", "\n", "cls_cnt", "=", "cf", ".", "sum", "(", "axis", "=", "1", ")", "\n", "cls_hit", "=", "np", ".", "diag", "(", "cf", ")", "\n", "\n", "mean_class_acc", "=", "np", ".", "mean", "(", "\n", "[", "hit", "/", "cnt", "if", "cnt", "else", "0.0", "for", "cnt", ",", "hit", "in", "zip", "(", "cls_cnt", ",", "cls_hit", ")", "]", ")", "\n", "\n", "return", "mean_class_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.top_k_acc": [[72, 75], ["numpy.argsort", "len", "len", "lb_set.intersection"], "function", ["None"], ["", "def", "top_k_acc", "(", "score", ",", "lb_set", ",", "k", "=", "3", ")", ":", "\n", "    ", "idx", "=", "np", ".", "argsort", "(", "score", ")", "[", "-", "k", ":", "]", "\n", "return", "len", "(", "lb_set", ".", "intersection", "(", "idx", ")", ")", ",", "len", "(", "lb_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.top_k_hit": [[77, 80], ["numpy.argsort", "len", "lb_set.intersection"], "function", ["None"], ["", "def", "top_k_hit", "(", "score", ",", "lb_set", ",", "k", "=", "3", ")", ":", "\n", "    ", "idx", "=", "np", ".", "argsort", "(", "score", ")", "[", "-", "k", ":", "]", "\n", "return", "len", "(", "lb_set", ".", "intersection", "(", "idx", ")", ")", ">", "0", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.top_k_accuracy": [[82, 101], ["zip", "res.append", "hits.append", "numpy.mean", "isinstance", "accuracy.top_k_hit", "set"], "function", ["home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.top_k_hit"], ["", "def", "top_k_accuracy", "(", "scores", ",", "labels", ",", "k", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Calculate top k accuracy score.\n\n    Args:\n        scores (list[np.ndarray]): Prediction scores for each class.\n        labels (list[int]): Ground truth labels.\n        topk (tuple[int]): K value for top_k_accuracy. Default: (1, ).\n\n    Returns:\n        list[float]: Top k accuracy score for each k.\n    \"\"\"", "\n", "res", "=", "[", "]", "\n", "for", "kk", "in", "k", ":", "\n", "        ", "hits", "=", "[", "]", "\n", "for", "x", ",", "y", "in", "zip", "(", "scores", ",", "labels", ")", ":", "\n", "            ", "y", "=", "[", "y", "]", "if", "isinstance", "(", "y", ",", "int", ")", "else", "y", "\n", "hits", ".", "append", "(", "top_k_hit", "(", "x", ",", "set", "(", "y", ")", ",", "k", "=", "kk", ")", "[", "0", "]", ")", "\n", "", "res", ".", "append", "(", "np", ".", "mean", "(", "hits", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.whwu95_DSANet.evaluation.accuracy.get_weighted_score": [[103, 125], ["len", "range", "numpy.array", "numpy.array", "list", "len", "len", "len", "len", "numpy.dot"], "function", ["None"], ["", "def", "get_weighted_score", "(", "score_list", ",", "coeff_list", ")", ":", "\n", "    ", "\"\"\"Get weighted score with given scores and coefficients.\n    Given n predictions by different classifier: [score_1, score_2, ...,\n    score_n] (score_list) and their coefficients: [coeff_1, coeff_2, ...,\n    coeff_n] (coeff_list), return weighted score: weighted_score =\n    score_1 * coeff_1 + score_2 * coeff_2 + ... + score_n * coeff_n\n    Args:\n        score_list (list[list[np.ndarray]]): List of list of scores, with shape\n            n(number of predictions) X num_samples X num_classes\n        coeff_list (list[float]): List of coefficients, with shape n.\n    Return:\n        list[np.ndarray]: List of weighted scores.\n    \"\"\"", "\n", "assert", "len", "(", "score_list", ")", "==", "len", "(", "coeff_list", ")", "\n", "num_samples", "=", "len", "(", "score_list", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "score_list", ")", ")", ":", "\n", "        ", "assert", "len", "(", "score_list", "[", "i", "]", ")", "==", "num_samples", "\n", "\n", "", "scores", "=", "np", ".", "array", "(", "score_list", ")", "# (num_coeff, num_samples, num_classes)", "\n", "coeff", "=", "np", ".", "array", "(", "coeff_list", ")", "# (num_coeff, )", "\n", "weighted_scores", "=", "list", "(", "np", ".", "dot", "(", "scores", ".", "T", ",", "coeff", ")", ".", "T", ")", "\n", "return", "weighted_scores", "\n", "", ""]]}