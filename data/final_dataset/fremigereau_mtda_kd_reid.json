{"home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.None.setup.readme": [[8, 12], ["open", "f.read"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.md'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.None.setup.find_version": [[14, 19], ["open", "exec", "locals", "compile", "f.read"], "function", ["None"], ["", "def", "find_version", "(", ")", ":", "\n", "    ", "version_file", "=", "'torchreid/__init__.py'", "\n", "with", "open", "(", "version_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "exec", "(", "compile", "(", "f", ".", "read", "(", ")", ",", "version_file", ",", "'exec'", ")", ")", "\n", "", "return", "locals", "(", ")", "[", "'__version__'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.None.setup.numpy_include": [[21, 27], ["numpy.get_include", "numpy.get_numpy_include"], "function", ["None"], ["", "def", "numpy_include", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "numpy_include", "=", "np", ".", "get_include", "(", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "numpy_include", "=", "np", ".", "get_numpy_include", "(", ")", "\n", "", "return", "numpy_include", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.None.setup.get_requirements": [[38, 43], ["os.dirname", "os.realpath", "open", "os.join", "line.replace", "f.readlines"], "function", ["None"], ["def", "get_requirements", "(", "filename", "=", "'requirements.txt'", ")", ":", "\n", "    ", "here", "=", "osp", ".", "dirname", "(", "osp", ".", "realpath", "(", "__file__", ")", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "here", ",", "filename", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "requires", "=", "[", "line", ".", "replace", "(", "'\\n'", ",", "''", ")", "for", "line", "in", "f", ".", "readlines", "(", ")", "]", "\n", "", "return", "requires", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.torchreid.__init__.initialize_model_optimizer_scheduler": [[8, 53], ["torchreid.models.build_model", "torchreid.optim.build_optimizer", "model.cuda.cuda", "torchreid.optim.PCGrad", "torchreid.optim.build_lr_scheduler", "torchreid.models.dsbn.convert_bn", "torchreid.models.resnet.convert_2_multi_head", "torchreid.models.dsbn.convert_dsbn", "torchreid.utils.resume_from_checkpoint", "torchreid.utils.resume_from_checkpoint"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.__init__.build_model", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.optimizer.build_optimizer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.lr_scheduler.build_lr_scheduler", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.dsbn.convert_bn", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.convert_2_multi_head", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.dsbn.convert_dsbn", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.resume_from_checkpoint", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.resume_from_checkpoint"], ["def", "initialize_model_optimizer_scheduler", "(", "\n", "name", ",", "num_classes", ",", "loss", ",", "pretrained", ",", "optimizer_type", ",", "lr", ",", "lr_scheduler", ",", "stepsize", ",", "\n", "path_model", "=", "None", ",", "teacher_arch", "=", "None", ",", "spcl", "=", "False", ",", "load_optim", "=", "True", ",", "pcgrad", "=", "False", ",", "fc_dim", "=", "2048", ",", "multi_head", "=", "0", ")", ":", "\n", "    ", "if", "spcl", ":", "\n", "        ", "num_classes", "=", "0", "\n", "", "model", "=", "models", ".", "build_model", "(", "\n", "name", "=", "name", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "teacher_arch", "=", "teacher_arch", ",", "\n", "fc_dim", "=", "fc_dim", "\n", ")", "\n", "\n", "optimizer", "=", "optim", ".", "build_optimizer", "(", "\n", "model", ",", "\n", "optim", "=", "optimizer_type", ",", "\n", "lr", "=", "lr", "\n", ")", "\n", "\n", "if", "pcgrad", ":", "\n", "        ", "optimizer", "=", "optim", ".", "PCGrad", "(", "optimizer", ")", "\n", "scheduler", "=", "None", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "optim", ".", "build_lr_scheduler", "(", "\n", "optimizer", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ",", "\n", "stepsize", "=", "stepsize", "\n", ")", "\n", "", "start_epoch", "=", "0", "\n", "if", "path_model", "!=", "None", ":", "\n", "        ", "if", "spcl", ":", "\n", "            ", "convert_dsbn", "(", "model", ")", "\n", "", "if", "load_optim", "==", "False", ":", "\n", "# We use pretrained model to continue the training on the target domain", "\n", "            ", "start_epoch", "=", "utils", ".", "resume_from_checkpoint", "(", "path_model", ",", "model", ",", "optimizer", "=", "None", ")", "\n", "", "else", ":", "\n", "# We use pretrained model to continue the training on the target domain", "\n", "            ", "start_epoch", "=", "utils", ".", "resume_from_checkpoint", "(", "path_model", ",", "model", ",", "optimizer", ")", "\n", "", "", "if", "spcl", ":", "\n", "        ", "convert_bn", "(", "model", ")", "\n", "", "if", "fc_dim", ">", "0", "and", "multi_head", "!=", "0", ":", "\n", "        ", "torchreid", ".", "models", ".", "resnet", ".", "convert_2_multi_head", "(", "model", ",", "multi_head", "=", "multi_head", ")", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "return", "model", ",", "optimizer", ",", "scheduler", ",", "start_epoch", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.rerank.re_ranking": [[31, 114], ["numpy.concatenate", "numpy.power().astype", "numpy.transpose", "numpy.zeros_like().astype", "numpy.argsort().astype", "range", "range", "numpy.zeros_like", "range", "range", "numpy.unique", "numpy.exp", "numpy.zeros_like", "range", "invIndex.append", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "numpy.power", "numpy.max", "numpy.zeros_like", "numpy.argsort", "numpy.where", "len", "numpy.sum", "numpy.mean", "numpy.where", "len", "numpy.where", "len", "numpy.append", "numpy.where", "numpy.minimum", "numpy.intersect1d", "len", "int", "int", "numpy.around", "numpy.around"], "function", ["None"], ["def", "re_ranking", "(", "q_g_dist", ",", "q_q_dist", ",", "g_g_dist", ",", "k1", "=", "20", ",", "k2", "=", "6", ",", "lambda_value", "=", "0.3", ")", ":", "\n", "\n", "# The following naming, e.g. gallery_num, is different from outer scope.", "\n", "# Don't care about it.", "\n", "\n", "    ", "original_dist", "=", "np", ".", "concatenate", "(", "\n", "[", "\n", "np", ".", "concatenate", "(", "[", "q_q_dist", ",", "q_g_dist", "]", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "q_g_dist", ".", "T", ",", "g_g_dist", "]", ",", "axis", "=", "1", ")", "\n", "]", ",", "\n", "axis", "=", "0", "\n", ")", "\n", "original_dist", "=", "np", ".", "power", "(", "original_dist", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "original_dist", "=", "np", ".", "transpose", "(", "\n", "1.", "*", "original_dist", "/", "np", ".", "max", "(", "original_dist", ",", "axis", "=", "0", ")", "\n", ")", "\n", "V", "=", "np", ".", "zeros_like", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "initial_rank", "=", "np", ".", "argsort", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "query_num", "=", "q_g_dist", ".", "shape", "[", "0", "]", "\n", "gallery_num", "=", "q_g_dist", ".", "shape", "[", "0", "]", "+", "q_g_dist", ".", "shape", "[", "1", "]", "\n", "all_num", "=", "gallery_num", "\n", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "# k-reciprocal neighbors", "\n", "        ", "forward_k_neigh_index", "=", "initial_rank", "[", "i", ",", ":", "k1", "+", "1", "]", "\n", "backward_k_neigh_index", "=", "initial_rank", "[", "forward_k_neigh_index", ",", ":", "k1", "+", "1", "]", "\n", "fi", "=", "np", ".", "where", "(", "backward_k_neigh_index", "==", "i", ")", "[", "0", "]", "\n", "k_reciprocal_index", "=", "forward_k_neigh_index", "[", "fi", "]", "\n", "k_reciprocal_expansion_index", "=", "k_reciprocal_index", "\n", "for", "j", "in", "range", "(", "len", "(", "k_reciprocal_index", ")", ")", ":", "\n", "            ", "candidate", "=", "k_reciprocal_index", "[", "j", "]", "\n", "candidate_forward_k_neigh_index", "=", "initial_rank", "[", "\n", "candidate", ",", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2.", ")", ")", "+", "1", "]", "\n", "candidate_backward_k_neigh_index", "=", "initial_rank", "[", "\n", "candidate_forward_k_neigh_index", ",", ":", "int", "(", "np", ".", "around", "(", "k1", "/", "2.", ")", ")", "+", "1", "]", "\n", "fi_candidate", "=", "np", ".", "where", "(", "\n", "candidate_backward_k_neigh_index", "==", "candidate", "\n", ")", "[", "0", "]", "\n", "candidate_k_reciprocal_index", "=", "candidate_forward_k_neigh_index", "[", "\n", "fi_candidate", "]", "\n", "if", "len", "(", "\n", "np", ".", "\n", "intersect1d", "(", "candidate_k_reciprocal_index", ",", "k_reciprocal_index", ")", "\n", ")", ">", "2.", "/", "3", "*", "len", "(", "candidate_k_reciprocal_index", ")", ":", "\n", "                ", "k_reciprocal_expansion_index", "=", "np", ".", "append", "(", "\n", "k_reciprocal_expansion_index", ",", "candidate_k_reciprocal_index", "\n", ")", "\n", "\n", "", "", "k_reciprocal_expansion_index", "=", "np", ".", "unique", "(", "k_reciprocal_expansion_index", ")", "\n", "weight", "=", "np", ".", "exp", "(", "-", "original_dist", "[", "i", ",", "k_reciprocal_expansion_index", "]", ")", "\n", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "1.", "*", "weight", "/", "np", ".", "sum", "(", "weight", ")", "\n", "", "original_dist", "=", "original_dist", "[", ":", "query_num", ",", "]", "\n", "if", "k2", "!=", "1", ":", "\n", "        ", "V_qe", "=", "np", ".", "zeros_like", "(", "V", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "            ", "V_qe", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "V", "[", "initial_rank", "[", "i", ",", ":", "k2", "]", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "V", "=", "V_qe", "\n", "del", "V_qe", "\n", "", "del", "initial_rank", "\n", "invIndex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "gallery_num", ")", ":", "\n", "        ", "invIndex", ".", "append", "(", "np", ".", "where", "(", "V", "[", ":", ",", "i", "]", "!=", "0", ")", "[", "0", "]", ")", "\n", "\n", "", "jaccard_dist", "=", "np", ".", "zeros_like", "(", "original_dist", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "query_num", ")", ":", "\n", "        ", "temp_min", "=", "np", ".", "zeros", "(", "shape", "=", "[", "1", ",", "gallery_num", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "indNonZero", "=", "np", ".", "where", "(", "V", "[", "i", ",", ":", "]", "!=", "0", ")", "[", "0", "]", "\n", "indImages", "=", "[", "]", "\n", "indImages", "=", "[", "invIndex", "[", "ind", "]", "for", "ind", "in", "indNonZero", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "indNonZero", ")", ")", ":", "\n", "            ", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "=", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "+", "np", ".", "minimum", "(", "\n", "V", "[", "i", ",", "indNonZero", "[", "j", "]", "]", ",", "V", "[", "indImages", "[", "j", "]", ",", "indNonZero", "[", "j", "]", "]", "\n", ")", "\n", "", "jaccard_dist", "[", "i", "]", "=", "1", "-", "temp_min", "/", "(", "2.", "-", "temp_min", ")", "\n", "\n", "", "final_dist", "=", "jaccard_dist", "*", "(", "1", "-", "lambda_value", ")", "+", "original_dist", "*", "lambda_value", "\n", "del", "original_dist", "\n", "del", "V", "\n", "del", "jaccard_dist", "\n", "final_dist", "=", "final_dist", "[", ":", "query_num", ",", "query_num", ":", "]", "\n", "return", "final_dist", "\n", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity._ntuple": [[14, 22], ["isinstance", "tuple", "itertools.repeat"], "function", ["None"], ["def", "_ntuple", "(", "n", ")", ":", "\n", "\n", "    ", "def", "parse", "(", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "int", ")", ":", "\n", "            ", "return", "tuple", "(", "repeat", "(", "x", ",", "n", ")", ")", "\n", "", "return", "x", "\n", "\n", "", "return", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_convNd": [[32, 40], ["torch.prod().item", "int", "torch.prod", "y.numel", "torch.Tensor"], "function", ["None"], ["def", "hook_convNd", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "k", "=", "torch", ".", "prod", "(", "torch", ".", "Tensor", "(", "m", ".", "kernel_size", ")", ")", ".", "item", "(", ")", "\n", "cin", "=", "m", ".", "in_channels", "\n", "flops_per_ele", "=", "k", "*", "cin", "#+ (k*cin-1)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "        ", "flops_per_ele", "+=", "1", "\n", "", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "/", "m", ".", "groups", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_maxpool1d": [[47, 51], ["int", "y.numel"], "function", ["None"], ["def", "hook_maxpool1d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "flops_per_ele", "=", "m", ".", "kernel_size", "-", "1", "\n", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_maxpool2d": [[53, 60], ["_pair", "torch.prod().item", "int", "y.numel", "torch.prod", "torch.Tensor"], "function", ["None"], ["", "def", "hook_maxpool2d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "k", "=", "_pair", "(", "m", ".", "kernel_size", ")", "\n", "k", "=", "torch", ".", "prod", "(", "torch", ".", "Tensor", "(", "k", ")", ")", ".", "item", "(", ")", "\n", "# ops: compare", "\n", "flops_per_ele", "=", "k", "-", "1", "\n", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_maxpool3d": [[62, 68], ["_triple", "torch.prod().item", "int", "y.numel", "torch.prod", "torch.Tensor"], "function", ["None"], ["", "def", "hook_maxpool3d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "k", "=", "_triple", "(", "m", ".", "kernel_size", ")", "\n", "k", "=", "torch", ".", "prod", "(", "torch", ".", "Tensor", "(", "k", ")", ")", ".", "item", "(", ")", "\n", "flops_per_ele", "=", "k", "-", "1", "\n", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_avgpool1d": [[70, 74], ["int", "y.numel"], "function", ["None"], ["", "def", "hook_avgpool1d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "flops_per_ele", "=", "m", ".", "kernel_size", "\n", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_avgpool2d": [[76, 82], ["_pair", "torch.prod().item", "int", "y.numel", "torch.prod", "torch.Tensor"], "function", ["None"], ["", "def", "hook_avgpool2d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "k", "=", "_pair", "(", "m", ".", "kernel_size", ")", "\n", "k", "=", "torch", ".", "prod", "(", "torch", ".", "Tensor", "(", "k", ")", ")", ".", "item", "(", ")", "\n", "flops_per_ele", "=", "k", "\n", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_avgpool3d": [[84, 90], ["_triple", "torch.prod().item", "int", "y.numel", "torch.prod", "torch.Tensor"], "function", ["None"], ["", "def", "hook_avgpool3d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "k", "=", "_triple", "(", "m", ".", "kernel_size", ")", "\n", "k", "=", "torch", ".", "prod", "(", "torch", ".", "Tensor", "(", "k", ")", ")", ".", "item", "(", ")", "\n", "flops_per_ele", "=", "k", "\n", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_adapmaxpool1d": [[92, 99], ["math.ceil", "int", "y.numel", "x.size"], "function", ["None"], ["", "def", "hook_adapmaxpool1d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "x", "=", "x", "[", "0", "]", "\n", "out_size", "=", "m", ".", "output_size", "\n", "k", "=", "math", ".", "ceil", "(", "x", ".", "size", "(", "2", ")", "/", "out_size", ")", "\n", "flops_per_ele", "=", "k", "-", "1", "\n", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_adapmaxpool2d": [[101, 109], ["_pair", "torch.prod().item", "int", "torch.Tensor", "torch.Tensor", "y.numel", "list", "torch.prod", "torch.ceil", "x.size"], "function", ["None"], ["", "def", "hook_adapmaxpool2d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "x", "=", "x", "[", "0", "]", "\n", "out_size", "=", "_pair", "(", "m", ".", "output_size", ")", "\n", "k", "=", "torch", ".", "Tensor", "(", "list", "(", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ")", "/", "torch", ".", "Tensor", "(", "out_size", ")", "\n", "k", "=", "torch", ".", "prod", "(", "torch", ".", "ceil", "(", "k", ")", ")", ".", "item", "(", ")", "\n", "flops_per_ele", "=", "k", "-", "1", "\n", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_adapmaxpool3d": [[111, 119], ["_triple", "torch.prod().item", "int", "torch.Tensor", "torch.Tensor", "y.numel", "list", "torch.prod", "torch.ceil", "x.size"], "function", ["None"], ["", "def", "hook_adapmaxpool3d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "x", "=", "x", "[", "0", "]", "\n", "out_size", "=", "_triple", "(", "m", ".", "output_size", ")", "\n", "k", "=", "torch", ".", "Tensor", "(", "list", "(", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ")", "/", "torch", ".", "Tensor", "(", "out_size", ")", "\n", "k", "=", "torch", ".", "prod", "(", "torch", ".", "ceil", "(", "k", ")", ")", ".", "item", "(", ")", "\n", "flops_per_ele", "=", "k", "-", "1", "\n", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_adapavgpool1d": [[121, 128], ["math.ceil", "int", "y.numel", "x.size"], "function", ["None"], ["", "def", "hook_adapavgpool1d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "x", "=", "x", "[", "0", "]", "\n", "out_size", "=", "m", ".", "output_size", "\n", "k", "=", "math", ".", "ceil", "(", "x", ".", "size", "(", "2", ")", "/", "out_size", ")", "\n", "flops_per_ele", "=", "k", "\n", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_adapavgpool2d": [[130, 138], ["_pair", "torch.prod().item", "int", "torch.Tensor", "torch.Tensor", "y.numel", "list", "torch.prod", "torch.ceil", "x.size"], "function", ["None"], ["", "def", "hook_adapavgpool2d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "x", "=", "x", "[", "0", "]", "\n", "out_size", "=", "_pair", "(", "m", ".", "output_size", ")", "\n", "k", "=", "torch", ".", "Tensor", "(", "list", "(", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ")", "/", "torch", ".", "Tensor", "(", "out_size", ")", "\n", "k", "=", "torch", ".", "prod", "(", "torch", ".", "ceil", "(", "k", ")", ")", ".", "item", "(", ")", "\n", "flops_per_ele", "=", "k", "\n", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_adapavgpool3d": [[140, 148], ["_triple", "torch.prod().item", "int", "torch.Tensor", "torch.Tensor", "y.numel", "list", "torch.prod", "torch.ceil", "x.size"], "function", ["None"], ["", "def", "hook_adapavgpool3d", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "x", "=", "x", "[", "0", "]", "\n", "out_size", "=", "_triple", "(", "m", ".", "output_size", ")", "\n", "k", "=", "torch", ".", "Tensor", "(", "list", "(", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ")", "/", "torch", ".", "Tensor", "(", "out_size", ")", "\n", "k", "=", "torch", ".", "prod", "(", "torch", ".", "ceil", "(", "k", ")", ")", ".", "item", "(", ")", "\n", "flops_per_ele", "=", "k", "\n", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_relu": [[155, 159], ["y.numel", "int"], "function", ["None"], ["def", "hook_relu", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "# eq: max(0, x)", "\n", "    ", "num_ele", "=", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "num_ele", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_leakyrelu": [[161, 166], ["y.numel", "int"], "function", ["None"], ["", "def", "hook_leakyrelu", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "# eq: max(0, x) + negative_slope*min(0, x)", "\n", "    ", "num_ele", "=", "y", ".", "numel", "(", ")", "\n", "flops", "=", "3", "*", "num_ele", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_batchnormNd": [[173, 179], ["y.numel", "int"], "function", ["None"], ["def", "hook_batchnormNd", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_ele", "=", "y", ".", "numel", "(", ")", "\n", "flops", "=", "2", "*", "num_ele", "# mean and std", "\n", "if", "m", ".", "affine", ":", "\n", "        ", "flops", "+=", "2", "*", "num_ele", "# gamma and beta", "\n", "", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_instancenormNd": [[181, 183], ["model_complexity.hook_batchnormNd"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_batchnormNd"], ["", "def", "hook_instancenormNd", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "return", "hook_batchnormNd", "(", "m", ",", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_groupnorm": [[185, 187], ["model_complexity.hook_batchnormNd"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_batchnormNd"], ["", "def", "hook_groupnorm", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "return", "hook_batchnormNd", "(", "m", ",", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_layernorm": [[189, 195], ["y.numel", "int"], "function", ["None"], ["", "def", "hook_layernorm", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "num_ele", "=", "y", ".", "numel", "(", ")", "\n", "flops", "=", "2", "*", "num_ele", "# mean and std", "\n", "if", "m", ".", "elementwise_affine", ":", "\n", "        ", "flops", "+=", "2", "*", "num_ele", "# gamma and beta", "\n", "", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.hook_linear": [[202, 208], ["int", "y.numel"], "function", ["None"], ["def", "hook_linear", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "    ", "flops_per_ele", "=", "m", ".", "in_features", "#+ (m.in_features-1)", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "        ", "flops_per_ele", "+=", "1", "\n", "", "flops", "=", "flops_per_ele", "*", "y", ".", "numel", "(", ")", "\n", "return", "int", "(", "flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity._get_flops_counter": [[255, 259], ["None"], "function", ["None"], ["def", "_get_flops_counter", "(", "only_conv_linear", ")", ":", "\n", "    ", "if", "only_conv_linear", ":", "\n", "        ", "return", "__conv_linear_flops_counter", "\n", "", "return", "__generic_flops_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.model_complexity.compute_model_complexity": [[261, 364], ["collections.namedtuple", "model.eval().apply", "torch.rand", "model", "model.train", "_has_submodule"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train"], ["", "def", "compute_model_complexity", "(", "\n", "model", ",", "input_size", ",", "verbose", "=", "False", ",", "only_conv_linear", "=", "True", "\n", ")", ":", "\n", "    ", "\"\"\"Returns number of parameters and FLOPs.\n\n    .. note::\n        (1) this function only provides an estimate of the theoretical time complexity\n        rather than the actual running time which depends on implementations and hardware,\n        and (2) the FLOPs is only counted for layers that are used at test time. This means\n        that redundant layers such as person ID classification layer will be ignored as it\n        is discarded when doing feature extraction. Note that the inference graph depends on\n        how you construct the computations in ``forward()``.\n\n    Args:\n        model (nn.Module): network model.\n        input_size (tuple): input size, e.g. (1, 3, 256, 128).\n        verbose (bool, optional): shows detailed complexity of\n            each module. Default is False.\n        only_conv_linear (bool, optional): only considers convolution\n            and linear layers when counting flops. Default is True.\n            If set to False, flops of all layers will be counted.\n\n    Examples::\n        >>> from torchreid import models, utils\n        >>> model = models.build_model(name='resnet50', num_classes=1000)\n        >>> num_params, flops = utils.compute_model_complexity(model, (1, 3, 256, 128), verbose=True)\n    \"\"\"", "\n", "registered_handles", "=", "[", "]", "\n", "layer_list", "=", "[", "]", "\n", "layer", "=", "namedtuple", "(", "'layer'", ",", "[", "'class_name'", ",", "'params'", ",", "'flops'", "]", ")", "\n", "\n", "def", "_add_hooks", "(", "m", ")", ":", "\n", "\n", "        ", "def", "_has_submodule", "(", "m", ")", ":", "\n", "            ", "return", "len", "(", "list", "(", "m", ".", "children", "(", ")", ")", ")", ">", "0", "\n", "\n", "", "def", "_hook", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "            ", "params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "m", ".", "parameters", "(", ")", ")", "\n", "class_name", "=", "str", "(", "m", ".", "__class__", ".", "__name__", ")", "\n", "flops_counter", "=", "_get_flops_counter", "(", "only_conv_linear", ")", "\n", "if", "class_name", "in", "flops_counter", ":", "\n", "                ", "flops", "=", "flops_counter", "[", "class_name", "]", "(", "m", ",", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                ", "flops", "=", "0", "\n", "", "layer_list", ".", "append", "(", "\n", "layer", "(", "class_name", "=", "class_name", ",", "params", "=", "params", ",", "flops", "=", "flops", ")", "\n", ")", "\n", "\n", "# only consider the very basic nn layer", "\n", "", "if", "_has_submodule", "(", "m", ")", ":", "\n", "            ", "return", "\n", "\n", "", "handle", "=", "m", ".", "register_forward_hook", "(", "_hook", ")", "\n", "registered_handles", ".", "append", "(", "handle", ")", "\n", "\n", "", "default_train_mode", "=", "model", ".", "training", "\n", "\n", "model", ".", "eval", "(", ")", ".", "apply", "(", "_add_hooks", ")", "\n", "input", "=", "torch", ".", "rand", "(", "input_size", ")", "\n", "if", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "        ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "", "model", "(", "input", ")", "# forward", "\n", "\n", "for", "handle", "in", "registered_handles", ":", "\n", "        ", "handle", ".", "remove", "(", ")", "\n", "\n", "", "model", ".", "train", "(", "default_train_mode", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "per_module_params", "=", "defaultdict", "(", "list", ")", "\n", "per_module_flops", "=", "defaultdict", "(", "list", ")", "\n", "\n", "", "total_params", ",", "total_flops", "=", "0", ",", "0", "\n", "\n", "for", "layer", "in", "layer_list", ":", "\n", "        ", "total_params", "+=", "layer", ".", "params", "\n", "total_flops", "+=", "layer", ".", "flops", "\n", "if", "verbose", ":", "\n", "            ", "per_module_params", "[", "layer", ".", "class_name", "]", ".", "append", "(", "layer", ".", "params", ")", "\n", "per_module_flops", "[", "layer", ".", "class_name", "]", ".", "append", "(", "layer", ".", "flops", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "        ", "num_udscore", "=", "55", "\n", "print", "(", "'  {}'", ".", "format", "(", "'-'", "*", "num_udscore", ")", ")", "\n", "print", "(", "'  Model complexity with input size {}'", ".", "format", "(", "input_size", ")", ")", "\n", "print", "(", "'  {}'", ".", "format", "(", "'-'", "*", "num_udscore", ")", ")", "\n", "for", "class_name", "in", "per_module_params", ":", "\n", "            ", "params", "=", "int", "(", "np", ".", "sum", "(", "per_module_params", "[", "class_name", "]", ")", ")", "\n", "flops", "=", "int", "(", "np", ".", "sum", "(", "per_module_flops", "[", "class_name", "]", ")", ")", "\n", "print", "(", "\n", "'  {} (params={:,}, flops={:,})'", ".", "format", "(", "\n", "class_name", ",", "params", ",", "flops", "\n", ")", "\n", ")", "\n", "", "print", "(", "'  {}'", ".", "format", "(", "'-'", "*", "num_udscore", ")", ")", "\n", "print", "(", "\n", "'  Total (params={:,}, flops={:,})'", ".", "format", "(", "\n", "total_params", ",", "total_flops", "\n", ")", "\n", ")", "\n", "print", "(", "'  {}'", ".", "format", "(", "'-'", "*", "num_udscore", ")", ")", "\n", "\n", "", "return", "total_params", ",", "total_flops", "\n", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.reidtools.visualize_ranked_results": [[18, 155], ["tools.mkdir_if_missing", "print", "print", "numpy.argsort", "range", "print", "len", "len", "isinstance", "tools.mkdir_if_missing", "os.join", "shutil.copy", "isinstance", "cv2.imread", "cv2.resize", "cv2.copyMakeBorder", "cv2.resize", "os.join", "tools.mkdir_if_missing", "reidtools.visualize_ranked_results._cp_img_to"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.mkdir_if_missing", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.mkdir_if_missing", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.mkdir_if_missing"], ["def", "visualize_ranked_results", "(", "\n", "distmat", ",", "dataset", ",", "data_type", ",", "width", "=", "128", ",", "height", "=", "256", ",", "save_dir", "=", "''", ",", "topk", "=", "10", "\n", ")", ":", "\n", "    ", "\"\"\"Visualizes ranked results.\n\n    Supports both image-reid and video-reid.\n\n    For image-reid, ranks will be plotted in a single figure. For video-reid, ranks will be\n    saved in folders each containing a tracklet.\n\n    Args:\n        distmat (numpy.ndarray): distance matrix of shape (num_query, num_gallery).\n        dataset (tuple): a 2-tuple containing (query, gallery), each of which contains\n            tuples of (img_path(s), pid, camid).\n        data_type (str): \"image\" or \"video\".\n        width (int, optional): resized image width. Default is 128.\n        height (int, optional): resized image height. Default is 256.\n        save_dir (str): directory to save output images.\n        topk (int, optional): denoting top-k images in the rank list to be visualized.\n            Default is 10.\n    \"\"\"", "\n", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "mkdir_if_missing", "(", "save_dir", ")", "\n", "\n", "print", "(", "'# query: {}\\n# gallery {}'", ".", "format", "(", "num_q", ",", "num_g", ")", ")", "\n", "print", "(", "'Visualizing top-{} ranks ...'", ".", "format", "(", "topk", ")", ")", "\n", "\n", "query", ",", "gallery", "=", "dataset", "\n", "assert", "num_q", "==", "len", "(", "query", ")", "\n", "assert", "num_g", "==", "len", "(", "gallery", ")", "\n", "\n", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "\n", "def", "_cp_img_to", "(", "src", ",", "dst", ",", "rank", ",", "prefix", ",", "matched", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            src: image path or tuple (for vidreid)\n            dst: target directory\n            rank: int, denoting ranked position, starting from 1\n            prefix: string\n            matched: bool\n        \"\"\"", "\n", "if", "isinstance", "(", "src", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "if", "prefix", "==", "'gallery'", ":", "\n", "                ", "suffix", "=", "'TRUE'", "if", "matched", "else", "'FALSE'", "\n", "dst", "=", "osp", ".", "join", "(", "\n", "dst", ",", "prefix", "+", "'_top'", "+", "str", "(", "rank", ")", ".", "zfill", "(", "3", ")", "\n", ")", "+", "'_'", "+", "suffix", "\n", "", "else", ":", "\n", "                ", "dst", "=", "osp", ".", "join", "(", "dst", ",", "prefix", "+", "'_top'", "+", "str", "(", "rank", ")", ".", "zfill", "(", "3", ")", ")", "\n", "", "mkdir_if_missing", "(", "dst", ")", "\n", "for", "img_path", "in", "src", ":", "\n", "                ", "shutil", ".", "copy", "(", "img_path", ",", "dst", ")", "\n", "", "", "else", ":", "\n", "            ", "dst", "=", "osp", ".", "join", "(", "\n", "dst", ",", "prefix", "+", "'_top'", "+", "str", "(", "rank", ")", ".", "zfill", "(", "3", ")", "+", "'_name_'", "+", "\n", "osp", ".", "basename", "(", "src", ")", "\n", ")", "\n", "shutil", ".", "copy", "(", "src", ",", "dst", ")", "\n", "\n", "", "", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "        ", "qimg_path", ",", "qpid", ",", "qcamid", "=", "query", "[", "q_idx", "]", "\n", "qimg_path_name", "=", "qimg_path", "[", "0", "]", "if", "isinstance", "(", "\n", "qimg_path", ",", "(", "tuple", ",", "list", ")", "\n", ")", "else", "qimg_path", "\n", "\n", "if", "data_type", "==", "'image'", ":", "\n", "            ", "qimg", "=", "cv2", ".", "imread", "(", "qimg_path", ")", "\n", "qimg", "=", "cv2", ".", "resize", "(", "qimg", ",", "(", "width", ",", "height", ")", ")", "\n", "qimg", "=", "cv2", ".", "copyMakeBorder", "(", "\n", "qimg", ",", "BW", ",", "BW", ",", "BW", ",", "BW", ",", "cv2", ".", "BORDER_CONSTANT", ",", "value", "=", "(", "0", ",", "0", ",", "0", ")", "\n", ")", "\n", "# resize twice to ensure that the border width is consistent across images", "\n", "qimg", "=", "cv2", ".", "resize", "(", "qimg", ",", "(", "width", ",", "height", ")", ")", "\n", "num_cols", "=", "topk", "+", "1", "\n", "grid_img", "=", "255", "*", "np", ".", "ones", "(", "\n", "(", "\n", "height", ",", "\n", "num_cols", "*", "width", "+", "topk", "*", "GRID_SPACING", "+", "QUERY_EXTRA_SPACING", ",", "3", "\n", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "grid_img", "[", ":", ",", ":", "width", ",", ":", "]", "=", "qimg", "\n", "", "else", ":", "\n", "            ", "qdir", "=", "osp", ".", "join", "(", "\n", "save_dir", ",", "osp", ".", "basename", "(", "osp", ".", "splitext", "(", "qimg_path_name", ")", "[", "0", "]", ")", "\n", ")", "\n", "mkdir_if_missing", "(", "qdir", ")", "\n", "_cp_img_to", "(", "qimg_path", ",", "qdir", ",", "rank", "=", "0", ",", "prefix", "=", "'query'", ")", "\n", "\n", "", "rank_idx", "=", "1", "\n", "for", "g_idx", "in", "indices", "[", "q_idx", ",", ":", "]", ":", "\n", "            ", "gimg_path", ",", "gpid", ",", "gcamid", "=", "gallery", "[", "g_idx", "]", "\n", "invalid", "=", "(", "qpid", "==", "gpid", ")", "&", "(", "qcamid", "==", "gcamid", ")", "\n", "\n", "if", "not", "invalid", ":", "\n", "                ", "matched", "=", "gpid", "==", "qpid", "\n", "if", "data_type", "==", "'image'", ":", "\n", "                    ", "border_color", "=", "GREEN", "if", "matched", "else", "RED", "\n", "gimg", "=", "cv2", ".", "imread", "(", "gimg_path", ")", "\n", "gimg", "=", "cv2", ".", "resize", "(", "gimg", ",", "(", "width", ",", "height", ")", ")", "\n", "gimg", "=", "cv2", ".", "copyMakeBorder", "(", "\n", "gimg", ",", "\n", "BW", ",", "\n", "BW", ",", "\n", "BW", ",", "\n", "BW", ",", "\n", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "border_color", "\n", ")", "\n", "gimg", "=", "cv2", ".", "resize", "(", "gimg", ",", "(", "width", ",", "height", ")", ")", "\n", "start", "=", "rank_idx", "*", "width", "+", "rank_idx", "*", "GRID_SPACING", "+", "QUERY_EXTRA_SPACING", "\n", "end", "=", "(", "\n", "rank_idx", "+", "1", "\n", ")", "*", "width", "+", "rank_idx", "*", "GRID_SPACING", "+", "QUERY_EXTRA_SPACING", "\n", "grid_img", "[", ":", ",", "start", ":", "end", ",", ":", "]", "=", "gimg", "\n", "", "else", ":", "\n", "                    ", "_cp_img_to", "(", "\n", "gimg_path", ",", "\n", "qdir", ",", "\n", "rank", "=", "rank_idx", ",", "\n", "prefix", "=", "'gallery'", ",", "\n", "matched", "=", "matched", "\n", ")", "\n", "\n", "", "rank_idx", "+=", "1", "\n", "if", "rank_idx", ">", "topk", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "if", "data_type", "==", "'image'", ":", "\n", "            ", "imname", "=", "osp", ".", "basename", "(", "osp", ".", "splitext", "(", "qimg_path_name", ")", "[", "0", "]", ")", "\n", "cv2", ".", "imwrite", "(", "osp", ".", "join", "(", "save_dir", ",", "imname", "+", "'.jpg'", ")", ",", "grid_img", ")", "\n", "\n", "", "if", "(", "q_idx", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'- done {}/{}'", ".", "format", "(", "q_idx", "+", "1", ",", "num_q", ")", ")", "\n", "\n", "", "", "print", "(", "'Done. Images have been saved to \"{}\" ...'", ".", "format", "(", "save_dir", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.mkdir_if_missing": [[21, 29], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "dirname", ")", ":", "\n", "    ", "\"\"\"Creates dirname if it is missing.\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "dirname", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.check_isfile": [[31, 44], ["os.isfile", "warnings.warn"], "function", ["None"], ["", "", "", "", "def", "check_isfile", "(", "fpath", ")", ":", "\n", "    ", "\"\"\"Checks if the given path is a file.\n\n    Args:\n        fpath (str): file path.\n\n    Returns:\n       bool\n    \"\"\"", "\n", "isfile", "=", "osp", ".", "isfile", "(", "fpath", ")", "\n", "if", "not", "isfile", ":", "\n", "        ", "warnings", ".", "warn", "(", "'No file found at \"{}\"'", ".", "format", "(", "fpath", ")", ")", "\n", "", "return", "isfile", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.read_json": [[46, 51], ["open", "json.load"], "function", ["None"], ["", "def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "\"\"\"Reads json file from a path.\"\"\"", "\n", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.write_json": [[53, 58], ["tools.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "\"\"\"Writes to a json file.\"\"\"", "\n", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.set_random_seed": [[60, 65], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.download_url": [[67, 95], ["print", "print", "urllib.request.urlretrieve", "sys.stdout.write", "int", "int", "int", "sys.stdout.write", "sys.stdout.flush", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.RankLogger.write", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.RankLogger.write", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.flush"], ["", "def", "download_url", "(", "url", ",", "dst", ")", ":", "\n", "    ", "\"\"\"Downloads file from a url to a destination.\n\n    Args:\n        url (str): url to download file.\n        dst (str): destination path.\n    \"\"\"", "\n", "from", "six", ".", "moves", "import", "urllib", "\n", "print", "(", "'* url=\"{}\"'", ".", "format", "(", "url", ")", ")", "\n", "print", "(", "'* destination=\"{}\"'", ".", "format", "(", "dst", ")", ")", "\n", "\n", "def", "_reporthook", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "        ", "global", "start_time", "\n", "if", "count", "==", "0", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "return", "\n", "", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "progress_size", "=", "int", "(", "count", "*", "block_size", ")", "\n", "speed", "=", "int", "(", "progress_size", "/", "(", "1024", "*", "duration", ")", ")", "\n", "percent", "=", "int", "(", "count", "*", "block_size", "*", "100", "/", "total_size", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\n", "'\\r...%d%%, %d MB, %d KB/s, %d seconds passed'", "%", "\n", "(", "percent", ",", "progress_size", "/", "(", "1024", "*", "1024", ")", ",", "speed", ",", "duration", ")", "\n", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "dst", ",", "_reporthook", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.read_image": [[97, 119], ["os.exists", "IOError", "PIL.Image.open().convert", "print", "PIL.Image.open"], "function", ["None"], ["", "def", "read_image", "(", "path", ")", ":", "\n", "    ", "\"\"\"Reads image from path using ``PIL.Image``.\n\n    Args:\n        path (str): path to an image.\n\n    Returns:\n        PIL image\n    \"\"\"", "\n", "got_img", "=", "False", "\n", "if", "not", "osp", ".", "exists", "(", "path", ")", ":", "\n", "        ", "raise", "IOError", "(", "'\"{}\" does not exist'", ".", "format", "(", "path", ")", ")", "\n", "", "while", "not", "got_img", ":", "\n", "        ", "try", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "got_img", "=", "True", "\n", "", "except", "IOError", ":", "\n", "            ", "print", "(", "\n", "'IOError incurred when reading \"{}\". Will redo. Don\\'t worry. Just chill.'", "\n", ".", "format", "(", "path", ")", "\n", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.collect_env_info": [[121, 130], ["get_pretty_env_info"], "function", ["None"], ["", "def", "collect_env_info", "(", ")", ":", "\n", "    ", "\"\"\"Returns env info as a string.\n\n    Code source: github.com/facebookresearch/maskrcnn-benchmark\n    \"\"\"", "\n", "from", "torch", ".", "utils", ".", "collect_env", "import", "get_pretty_env_info", "\n", "env_str", "=", "get_pretty_env_info", "(", ")", "\n", "env_str", "+=", "'\\n        Pillow ({})'", ".", "format", "(", "PIL", ".", "__version__", ")", "\n", "return", "env_str", "\n", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.__init__": [[29, 35], ["tools.mkdir_if_missing", "open", "os.dirname", "os.dirname"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.mkdir_if_missing"], ["def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.__del__": [[36, 38], ["loggers.Logger.close"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.__enter__": [[39, 41], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.__exit__": [[42, 44], ["loggers.Logger.close"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.write": [[45, 50], ["loggers.Logger.console.write", "loggers.Logger.file.write", "loggers.Logger.flush"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.RankLogger.write", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.RankLogger.write", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.flush"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "self", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.flush": [[51, 56], ["loggers.Logger.console.flush", "loggers.Logger.file.flush", "os.fsync", "os.fsync", "os.fsync", "os.fsync", "loggers.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.flush", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.close": [[57, 61], ["loggers.Logger.console.close", "loggers.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.close", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.RankLogger.__init__": [[109, 125], ["isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sources", ",", "targets", ")", ":", "\n", "        ", "self", ".", "sources", "=", "sources", "\n", "self", ".", "targets", "=", "targets", "\n", "\n", "if", "isinstance", "(", "self", ".", "sources", ",", "str", ")", ":", "\n", "            ", "self", ".", "sources", "=", "[", "self", ".", "sources", "]", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "targets", ",", "str", ")", ":", "\n", "            ", "self", ".", "targets", "=", "[", "self", ".", "targets", "]", "\n", "\n", "", "self", ".", "logger", "=", "{", "\n", "name", ":", "{", "\n", "'epoch'", ":", "[", "]", ",", "\n", "'rank1'", ":", "[", "]", "\n", "}", "\n", "for", "name", "in", "self", ".", "targets", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.RankLogger.write": [[127, 137], ["[].append", "[].append"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "name", ",", "epoch", ",", "rank1", ")", ":", "\n", "        ", "\"\"\"Writes result.\n\n        Args:\n           name (str): dataset name.\n           epoch (int): current epoch.\n           rank1 (float): rank1 result.\n        \"\"\"", "\n", "self", ".", "logger", "[", "name", "]", "[", "'epoch'", "]", ".", "append", "(", "epoch", ")", "\n", "self", ".", "logger", "[", "name", "]", "[", "'rank1'", "]", ".", "append", "(", "rank1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.RankLogger.show_summary": [[138, 148], ["print", "print", "zip", "print"], "methods", ["None"], ["", "def", "show_summary", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shows saved results.\"\"\"", "\n", "print", "(", "'=> Show performance summary'", ")", "\n", "for", "name", "in", "self", ".", "targets", ":", "\n", "            ", "from_where", "=", "'source'", "if", "name", "in", "self", ".", "sources", "else", "'target'", "\n", "print", "(", "'{} ({})'", ".", "format", "(", "name", ",", "from_where", ")", ")", "\n", "for", "epoch", ",", "rank1", "in", "zip", "(", "\n", "self", ".", "logger", "[", "name", "]", "[", "'epoch'", "]", ",", "self", ".", "logger", "[", "name", "]", "[", "'rank1'", "]", "\n", ")", ":", "\n", "                ", "print", "(", "'- epoch {}\\t rank1 {:.1%}'", ".", "format", "(", "epoch", ",", "rank1", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.save_checkpoint": [[21, 60], ["tools.mkdir_if_missing", "os.join", "torch.save", "torch.save", "print", "collections.OrderedDict", "state_dict.items", "shutil.copy", "k.startswith", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.mkdir_if_missing"], ["def", "save_checkpoint", "(", "\n", "model", ",", "state", ",", "save_dir", ",", "target_name", ",", "is_best", "=", "False", ",", "remove_module_from_keys", "=", "False", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"Saves checkpoint.\n\n    Args:\n        state (dict): dictionary.\n        save_dir (str): directory to save checkpoint.\n        is_best (bool, optional): if True, this checkpoint will be copied and named\n            ``model-best.pth.tar``. Default is False.\n        remove_module_from_keys (bool, optional): whether to remove \"module.\"\n            from layer names. Default is False.\n\n    Examples::\n        >>> state = {\n        >>>     'state_dict': model.state_dict(),\n        >>>     'epoch': 10,\n        >>>     'rank1': 0.5,\n        >>>     'optimizer': optimizer.state_dict()\n        >>> }\n        >>> save_checkpoint(state, 'log/my_model')\n    \"\"\"", "\n", "mkdir_if_missing", "(", "save_dir", ")", "\n", "if", "remove_module_from_keys", ":", "\n", "# remove 'module.' in state_dict's keys", "\n", "        ", "state_dict", "=", "state", "[", "'state_dict'", "]", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "                ", "k", "=", "k", "[", "7", ":", "]", "\n", "", "new_state_dict", "[", "k", "]", "=", "v", "\n", "", "state", "[", "'state_dict'", "]", "=", "new_state_dict", "\n", "# save", "\n", "", "epoch", "=", "state", "[", "'epoch'", "]", "\n", "fpath", "=", "osp", ".", "join", "(", "save_dir", ",", "'checkpoint.pth.tar'", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "print", "(", "'Checkpoint saved to \"{}\"'", ".", "format", "(", "fpath", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "'model-best.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.load_checkpoint": [[62, 96], ["ValueError", "os.exists", "FileNotFoundError", "torch.cuda.is_available", "torch.cuda.is_available", "torch.load", "torch.load", "functools.partial", "functools.partial", "torch.load", "torch.load", "print"], "function", ["None"], ["", "", "def", "load_checkpoint", "(", "fpath", ")", ":", "\n", "    ", "r\"\"\"Loads checkpoint.\n\n    ``UnicodeDecodeError`` can be well handled, which means\n    python2-saved files can be read from python3.\n\n    Args:\n        fpath (str): path to checkpoint.\n\n    Returns:\n        dict\n\n    Examples::  \n        >>> from torchreid.utils import load_checkpoint\n        >>> fpath = 'log/my_model/model.pth.tar-10'\n        >>> checkpoint = load_checkpoint(fpath)\n    \"\"\"", "\n", "if", "fpath", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'File path is None'", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "fpath", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "'File is not found at \"{}\"'", ".", "format", "(", "fpath", ")", ")", "\n", "", "map_location", "=", "None", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "try", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "fpath", ",", "map_location", "=", "map_location", ")", "\n", "", "except", "UnicodeDecodeError", ":", "\n", "        ", "pickle", ".", "load", "=", "partial", "(", "pickle", ".", "load", ",", "encoding", "=", "\"latin1\"", ")", "\n", "pickle", ".", "Unpickler", "=", "partial", "(", "pickle", ".", "Unpickler", ",", "encoding", "=", "\"latin1\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "\n", "fpath", ",", "pickle_module", "=", "pickle", ",", "map_location", "=", "map_location", "\n", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "print", "(", "'Unable to load checkpoint from \"{}\"'", ".", "format", "(", "fpath", ")", ")", "\n", "raise", "\n", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.resume_from_checkpoint": [[97, 153], ["print", "torchtools.load_checkpoint", "print", "print", "dict.keys", "dict", "checkpoint[].pop", "checkpoint[].pop", "collections.OrderedDict", "checkpoint[].items", "model.load_state_dict", "model.load_state_dict", "optimizer.load_state_dict", "print", "scheduler.load_state_dict", "print", "dict.keys", "dict.keys", "print", "dict.keys", "print", "k.replace", "dict.keys", "dict.keys"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.load_checkpoint"], ["", "def", "resume_from_checkpoint", "(", "fpath", ",", "model", ",", "optimizer", "=", "None", ",", "scheduler", "=", "None", ",", "single_gpu", "=", "True", ",", "ignore_classifier", "=", "False", ")", ":", "\n", "    ", "r\"\"\"Resumes training from a checkpoint.\n\n    This will load (1) model weights and (2) ``state_dict``\n    of optimizer if ``optimizer`` is not None.\n\n    Args:\n        fpath (str): path to checkpoint.\n        model (nn.Module): model.\n        optimizer (Optimizer, optional): an Optimizer.\n        scheduler (LRScheduler, optional): an LRScheduler.\n\n    Returns:\n        int: start_epoch.\n\n    Examples::\n        >>> from torchreid.utils import resume_from_checkpoint\n        >>> fpath = 'log/my_model/model.pth.tar-10'\n        >>> start_epoch = resume_from_checkpoint(\n        >>>     fpath, model, optimizer, scheduler\n        >>> )\n    \"\"\"", "\n", "print", "(", "'Loading checkpoint from \"{}\"'", ".", "format", "(", "fpath", ")", ")", "\n", "checkpoint", "=", "load_checkpoint", "(", "fpath", ")", "\n", "if", "'state_dict'", "not", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "        ", "tmp_check", "=", "checkpoint", "\n", "checkpoint", "=", "dict", "(", ")", "\n", "checkpoint", "[", "'state_dict'", "]", "=", "tmp_check", "\n", "", "if", "ignore_classifier", ":", "\n", "        ", "checkpoint", "[", "'state_dict'", "]", ".", "pop", "(", "'classifier.weight'", ")", "\n", "checkpoint", "[", "'state_dict'", "]", ".", "pop", "(", "'classifier.bias'", ")", "\n", "", "if", "single_gpu", ":", "\n", "        ", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove module.", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "", "print", "(", "'Loaded model weights'", ")", "\n", "if", "optimizer", "is", "not", "None", "and", "'optimizer'", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "'Loaded optimizer'", ")", "\n", "", "if", "scheduler", "is", "not", "None", "and", "'scheduler'", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "        ", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ",", "strict", "=", "False", ")", "\n", "print", "(", "'Loaded scheduler'", ")", "\n", "", "if", "'epoch'", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "        ", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "", "else", ":", "\n", "        ", "start_epoch", "=", "0", "\n", "", "print", "(", "'Last epoch = {}'", ".", "format", "(", "start_epoch", ")", ")", "\n", "if", "'rank1'", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "'Last rank1 = {:.1%}'", ".", "format", "(", "checkpoint", "[", "'rank1'", "]", ")", ")", "\n", "", "if", "'mAP'", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "'Last mAP = {:.1%}'", ".", "format", "(", "checkpoint", "[", "'mAP'", "]", ")", ")", "\n", "", "return", "start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.adjust_learning_rate": [[155, 179], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "\n", "optimizer", ",", "\n", "base_lr", ",", "\n", "epoch", ",", "\n", "stepsize", "=", "20", ",", "\n", "gamma", "=", "0.1", ",", "\n", "linear_decay", "=", "False", ",", "\n", "final_lr", "=", "0", ",", "\n", "max_epoch", "=", "100", "\n", ")", ":", "\n", "    ", "r\"\"\"Adjusts learning rate.\n\n    Deprecated.\n    \"\"\"", "\n", "if", "linear_decay", ":", "\n", "# linearly decay learning rate from base_lr to final_lr", "\n", "        ", "frac_done", "=", "epoch", "/", "max_epoch", "\n", "lr", "=", "frac_done", "*", "final_lr", "+", "(", "1.", "-", "frac_done", ")", "*", "base_lr", "\n", "", "else", ":", "\n", "# decay learning rate by gamma for every stepsize", "\n", "        ", "lr", "=", "base_lr", "*", "(", "gamma", "**", "(", "epoch", "//", "stepsize", ")", ")", "\n", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.set_bn_to_eval": [[181, 188], ["classname.find", "m.eval"], "function", ["None"], ["", "", "def", "set_bn_to_eval", "(", "m", ")", ":", "\n", "    ", "r\"\"\"Sets BatchNorm layers to eval mode.\"\"\"", "\n", "# 1. no update for running mean and var", "\n", "# 2. scale and shift parameters are still trainable", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.open_all_layers": [[190, 200], ["model.train", "model.parameters"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train"], ["", "", "def", "open_all_layers", "(", "model", ")", ":", "\n", "    ", "r\"\"\"Opens all layers in model for training.\n\n    Examples::\n        >>> from torchreid.utils import open_all_layers\n        >>> open_all_layers(model)\n    \"\"\"", "\n", "model", ".", "train", "(", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "p", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.open_specified_layers": [[202, 241], ["isinstance", "isinstance", "model.named_children", "hasattr", "module.train", "module.parameters", "module.eval", "module.parameters"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train"], ["", "", "def", "open_specified_layers", "(", "model", ",", "open_layers", ")", ":", "\n", "    ", "r\"\"\"Opens specified layers in model for training while keeping\n    other layers frozen.\n\n    Args:\n        model (nn.Module): neural net model.\n        open_layers (str or list): layers open for training.\n\n    Examples::\n        >>> from torchreid.utils import open_specified_layers\n        >>> # Only model.classifier will be updated.\n        >>> open_layers = 'classifier'\n        >>> open_specified_layers(model, open_layers)\n        >>> # Only model.fc and model.classifier will be updated.\n        >>> open_layers = ['fc', 'classifier']\n        >>> open_specified_layers(model, open_layers)\n    \"\"\"", "\n", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "if", "isinstance", "(", "open_layers", ",", "str", ")", ":", "\n", "        ", "open_layers", "=", "[", "open_layers", "]", "\n", "\n", "", "for", "layer", "in", "open_layers", ":", "\n", "        ", "assert", "hasattr", "(", "\n", "model", ",", "layer", "\n", ")", ",", "'\"{}\" is not an attribute of the model, please provide the correct name'", ".", "format", "(", "\n", "layer", "\n", ")", "\n", "\n", "", "for", "name", ",", "module", "in", "model", ".", "named_children", "(", ")", ":", "\n", "        ", "if", "name", "in", "open_layers", ":", "\n", "            ", "module", ".", "train", "(", ")", "\n", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "module", ".", "eval", "(", ")", "\n", "for", "p", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.count_num_param": [[243, 273], ["warnings.warn", "sum", "isinstance", "hasattr", "isinstance", "sum", "p.numel", "model.parameters", "p.numel", "model.classifier.parameters"], "function", ["None"], ["", "", "", "", "def", "count_num_param", "(", "model", ")", ":", "\n", "    ", "r\"\"\"Counts number of parameters in a model while ignoring ``self.classifier``.\n\n    Args:\n        model (nn.Module): network model.\n\n    Examples::\n        >>> from torchreid.utils import count_num_param\n        >>> model_size = count_num_param(model)\n\n    .. warning::\n        \n        This method is deprecated in favor of\n        ``torchreid.utils.compute_model_complexity``.\n    \"\"\"", "\n", "warnings", ".", "warn", "(", "\n", "'This method is deprecated and will be removed in the future.'", "\n", ")", "\n", "\n", "num_param", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "if", "hasattr", "(", "model", ",", "\n", "'classifier'", ")", "and", "isinstance", "(", "model", ".", "classifier", ",", "nn", ".", "Module", ")", ":", "\n", "# we ignore the classifier because it is unused at test time", "\n", "        ", "num_param", "-=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "classifier", ".", "parameters", "(", ")", ")", "\n", "\n", "", "return", "num_param", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.load_pretrained_weights": [[275, 330], ["torchtools.load_checkpoint", "model.state_dict", "collections.OrderedDict", "state_dict.items", "model.state_dict.update", "model.load_state_dict", "k.startswith", "len", "warnings.warn", "print", "matched_layers.append", "discarded_layers.append", "len", "print", "model_dict[].size", "v.size"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.load_checkpoint", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update"], ["", "def", "load_pretrained_weights", "(", "model", ",", "weight_path", ")", ":", "\n", "    ", "r\"\"\"Loads pretrianed weights to model.\n\n    Features::\n        - Incompatible layers (unmatched in name or size) will be ignored.\n        - Can automatically deal with keys containing \"module.\".\n\n    Args:\n        model (nn.Module): network model.\n        weight_path (str): path to pretrained weights.\n\n    Examples::\n        >>> from torchreid.utils import load_pretrained_weights\n        >>> weight_path = 'log/my_model/model-best.pth.tar'\n        >>> load_pretrained_weights(model, weight_path)\n    \"\"\"", "\n", "checkpoint", "=", "load_checkpoint", "(", "weight_path", ")", "\n", "if", "'state_dict'", "in", "checkpoint", ":", "\n", "        ", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "checkpoint", "\n", "\n", "", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "matched_layers", ",", "discarded_layers", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "            ", "k", "=", "k", "[", "7", ":", "]", "# discard module.", "\n", "\n", "", "if", "k", "in", "model_dict", "and", "model_dict", "[", "k", "]", ".", "size", "(", ")", "==", "v", ".", "size", "(", ")", ":", "\n", "            ", "new_state_dict", "[", "k", "]", "=", "v", "\n", "matched_layers", ".", "append", "(", "k", ")", "\n", "", "else", ":", "\n", "            ", "discarded_layers", ".", "append", "(", "k", ")", "\n", "\n", "", "", "model_dict", ".", "update", "(", "new_state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "if", "len", "(", "matched_layers", ")", "==", "0", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'The pretrained weights \"{}\" cannot be loaded, '", "\n", "'please check the key names manually '", "\n", "'(** ignored and continue **)'", ".", "format", "(", "weight_path", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\n", "'Successfully loaded pretrained weights from \"{}\"'", ".", "\n", "format", "(", "weight_path", ")", "\n", ")", "\n", "if", "len", "(", "discarded_layers", ")", ">", "0", ":", "\n", "            ", "print", "(", "\n", "'** The following layers are discarded '", "\n", "'due to unmatched keys or layer size: {}'", ".", "\n", "format", "(", "discarded_layers", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.__init__": [[16, 18], ["avgmeter.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.reset": [[19, 24], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update": [[25, 30], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.__init__": [[12, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "self", ".", "_optim", ",", "self", ".", "_reduction", "=", "optimizer", ",", "reduction", "\n", "self", ".", "state_dict", "=", "self", ".", "_optim", ".", "state_dict", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.optimizer": [[17, 20], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_optim", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.zero_grad": [[21, 28], ["pcgrad.PCGrad._optim.zero_grad"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "'''\n        clear the gradient of the parameters\n        '''", "\n", "\n", "# return self._optim.zero_grad(set_to_none=True)", "\n", "return", "self", ".", "_optim", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.step": [[29, 35], ["pcgrad.PCGrad._optim.step"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.step"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "'''\n        update the parameters with the gradient\n        '''", "\n", "\n", "return", "self", ".", "_optim", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.pc_backward": [[36, 48], ["pcgrad.PCGrad._pack_grad", "pcgrad.PCGrad._project_conflicting", "pcgrad.PCGrad._unflatten_grad", "pcgrad.PCGrad._set_grad"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._pack_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._project_conflicting", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._unflatten_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._set_grad"], ["", "def", "pc_backward", "(", "self", ",", "objectives", ")", ":", "\n", "        ", "'''\n        calculate the gradient of the parameters\n        input:\n        - objectives: a list of objectives\n        '''", "\n", "\n", "grads", ",", "shapes", ",", "has_grads", "=", "self", ".", "_pack_grad", "(", "objectives", ")", "\n", "pc_grad", "=", "self", ".", "_project_conflicting", "(", "grads", ",", "has_grads", ")", "\n", "pc_grad", "=", "self", ".", "_unflatten_grad", "(", "pc_grad", ",", "shapes", "[", "0", "]", ")", "\n", "self", ".", "_set_grad", "(", "pc_grad", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._project_conflicting": [[49, 72], ["torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "torch.stack().prod", "copy.deepcopy", "len", "random.shuffle", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "exit", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "g_j.norm"], "methods", ["None"], ["", "def", "_project_conflicting", "(", "self", ",", "grads", ",", "has_grads", ",", "shapes", "=", "None", ")", ":", "\n", "# shared = (torch.stack(has_grads).prod(0).bool())", "\n", "        ", "shared", "=", "(", "torch", ".", "stack", "(", "has_grads", ")", ".", "prod", "(", "0", ")", ">", "0.5", ")", "\n", "pc_grad", ",", "num_task", "=", "copy", ".", "deepcopy", "(", "grads", ")", ",", "len", "(", "grads", ")", "\n", "for", "g_i", "in", "pc_grad", ":", "\n", "            ", "random", ".", "shuffle", "(", "grads", ")", "\n", "for", "g_j", "in", "grads", ":", "\n", "                ", "g_i_g_j", "=", "torch", ".", "dot", "(", "g_i", ",", "g_j", ")", "\n", "if", "g_i_g_j", "<", "0", ":", "\n", "                    ", "g_i", "-=", "(", "g_i_g_j", ")", "*", "g_j", "/", "(", "g_j", ".", "norm", "(", ")", "**", "2", ")", "\n", "", "", "", "merged_grad", "=", "torch", ".", "zeros_like", "(", "grads", "[", "0", "]", ")", ".", "to", "(", "grads", "[", "0", "]", ".", "device", ")", "\n", "if", "self", ".", "_reduction", ":", "\n", "            ", "merged_grad", "[", "shared", "]", "=", "torch", ".", "stack", "(", "[", "g", "[", "shared", "]", "\n", "for", "g", "in", "pc_grad", "]", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "elif", "self", ".", "_reduction", "==", "'sum'", ":", "\n", "            ", "merged_grad", "[", "shared", "]", "=", "torch", ".", "stack", "(", "[", "g", "[", "shared", "]", "\n", "for", "g", "in", "pc_grad", "]", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "exit", "(", "'invalid reduction method'", ")", "\n", "\n", "", "merged_grad", "[", "~", "shared", "]", "=", "torch", ".", "stack", "(", "[", "g", "[", "~", "shared", "]", "\n", "for", "g", "in", "pc_grad", "]", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "return", "merged_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._set_grad": [[73, 85], ["None"], "methods", ["None"], ["", "def", "_set_grad", "(", "self", ",", "grads", ")", ":", "\n", "        ", "'''\n        set the modified gradients to the network\n        '''", "\n", "\n", "idx", "=", "0", "\n", "for", "group", "in", "self", ".", "_optim", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "# if p.grad is None: continue", "\n", "                ", "p", ".", "grad", "=", "grads", "[", "idx", "]", "\n", "idx", "+=", "1", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._pack_grad": [[86, 106], ["pcgrad.PCGrad._optim.zero_grad", "obj.backward", "pcgrad.PCGrad._retrieve_grad", "grads.append", "has_grads.append", "shapes.append", "pcgrad.PCGrad._flatten_grad", "pcgrad.PCGrad._flatten_grad"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.zero_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.Logm.backward", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._retrieve_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._flatten_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._flatten_grad"], ["", "def", "_pack_grad", "(", "self", ",", "objectives", ")", ":", "\n", "        ", "'''\n        pack the gradient of the parameters of the network for each objective\n\n        output:\n        - grad: a list of the gradient of the parameters\n        - shape: a list of the shape of the parameters\n        - has_grad: a list of mask represent whether the parameter has gradient\n        '''", "\n", "\n", "grads", ",", "shapes", ",", "has_grads", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "obj", "in", "objectives", ":", "\n", "# self._optim.zero_grad(set_to_none=True)", "\n", "            ", "self", ".", "_optim", ".", "zero_grad", "(", ")", "\n", "obj", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "grad", ",", "shape", ",", "has_grad", "=", "self", ".", "_retrieve_grad", "(", ")", "\n", "grads", ".", "append", "(", "self", ".", "_flatten_grad", "(", "grad", ",", "shape", ")", ")", "\n", "has_grads", ".", "append", "(", "self", ".", "_flatten_grad", "(", "has_grad", ",", "shape", ")", ")", "\n", "shapes", ".", "append", "(", "shape", ")", "\n", "", "return", "grads", ",", "shapes", ",", "has_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._unflatten_grad": [[107, 114], ["numpy.prod", "unflatten_grad.append", "grads[].view().clone", "grads[].view"], "methods", ["None"], ["", "def", "_unflatten_grad", "(", "self", ",", "grads", ",", "shapes", ")", ":", "\n", "        ", "unflatten_grad", ",", "idx", "=", "[", "]", ",", "0", "\n", "for", "shape", "in", "shapes", ":", "\n", "            ", "length", "=", "np", ".", "prod", "(", "shape", ")", "\n", "unflatten_grad", ".", "append", "(", "grads", "[", "idx", ":", "idx", "+", "length", "]", ".", "view", "(", "shape", ")", ".", "clone", "(", ")", ")", "\n", "idx", "+=", "length", "\n", "", "return", "unflatten_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._flatten_grad": [[115, 118], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "g.flatten"], "methods", ["None"], ["", "def", "_flatten_grad", "(", "self", ",", "grads", ",", "shapes", ")", ":", "\n", "        ", "flatten_grad", "=", "torch", ".", "cat", "(", "[", "g", ".", "flatten", "(", ")", "for", "g", "in", "grads", "]", ")", "\n", "return", "flatten_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad._retrieve_grad": [[119, 144], ["shape.append", "grad.append", "has_grad.append", "shape.append", "grad.append", "has_grad.append", "p.grad.clone", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "_retrieve_grad", "(", "self", ")", ":", "\n", "        ", "'''\n        get the gradient of the parameters of the network with specific\n        objective\n\n        output:\n        - grad: a list of the gradient of the parameters\n        - shape: a list of the shape of the parameters\n        - has_grad: a list of mask represent whether the parameter has gradient\n        '''", "\n", "\n", "grad", ",", "shape", ",", "has_grad", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "group", "in", "self", ".", "_optim", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "# if p.grad is None: continue", "\n", "# tackle the multi-head scenario", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "shape", ".", "append", "(", "p", ".", "shape", ")", "\n", "grad", ".", "append", "(", "torch", ".", "zeros_like", "(", "p", ")", ".", "to", "(", "p", ".", "device", ")", ")", "\n", "has_grad", ".", "append", "(", "torch", ".", "zeros_like", "(", "p", ")", ".", "to", "(", "p", ".", "device", ")", ")", "\n", "continue", "\n", "", "shape", ".", "append", "(", "p", ".", "grad", ".", "shape", ")", "\n", "grad", ".", "append", "(", "p", ".", "grad", ".", "clone", "(", ")", ")", "\n", "has_grad", ".", "append", "(", "torch", ".", "ones_like", "(", "p", ")", ".", "to", "(", "p", ".", "device", ")", ")", "\n", "", "", "return", "grad", ",", "shape", ",", "has_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.TestNet.__init__": [[147, 150], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_linear", "=", "nn", ".", "Linear", "(", "3", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.TestNet.forward": [[151, 153], ["pcgrad.TestNet._linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_linear", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.MultiHeadTestNet.__init__": [[156, 161], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_linear", "=", "nn", ".", "Linear", "(", "3", ",", "2", ")", "\n", "self", ".", "_head1", "=", "nn", ".", "Linear", "(", "2", ",", "4", ")", "\n", "self", ".", "_head2", "=", "nn", ".", "Linear", "(", "2", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.MultiHeadTestNet.forward": [[162, 165], ["pcgrad.MultiHeadTestNet._linear", "pcgrad.MultiHeadTestNet._head1", "pcgrad.MultiHeadTestNet._head2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "self", ".", "_linear", "(", "x", ")", "\n", "return", "self", ".", "_head1", "(", "feat", ")", ",", "self", ".", "_head2", "(", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.lr_scheduler.build_lr_scheduler": [[7, 69], ["ValueError", "isinstance", "torch.optim.lr_scheduler.StepLR", "isinstance", "TypeError", "torch.optim.lr_scheduler.MultiStepLR", "isinstance", "TypeError", "torch.optim.lr_scheduler.CosineAnnealingLR", "type", "float", "type"], "function", ["None"], ["def", "build_lr_scheduler", "(", "\n", "optimizer", ",", "lr_scheduler", "=", "'single_step'", ",", "stepsize", "=", "1", ",", "gamma", "=", "0.1", ",", "max_epoch", "=", "1", "\n", ")", ":", "\n", "    ", "\"\"\"A function wrapper for building a learning rate scheduler.\n\n    Args:\n        optimizer (Optimizer): an Optimizer.\n        lr_scheduler (str, optional): learning rate scheduler method. Default is single_step.\n        stepsize (int or list, optional): step size to decay learning rate. When ``lr_scheduler``\n            is \"single_step\", ``stepsize`` should be an integer. When ``lr_scheduler`` is\n            \"multi_step\", ``stepsize`` is a list. Default is 1.\n        gamma (float, optional): decay rate. Default is 0.1.\n        max_epoch (int, optional): maximum epoch (for cosine annealing). Default is 1.\n\n    Examples::\n        >>> # Decay learning rate by every 20 epochs.\n        >>> scheduler = torchreid.optim.build_lr_scheduler(\n        >>>     optimizer, lr_scheduler='single_step', stepsize=20\n        >>> )\n        >>> # Decay learning rate at 30, 50 and 55 epochs.\n        >>> scheduler = torchreid.optim.build_lr_scheduler(\n        >>>     optimizer, lr_scheduler='multi_step', stepsize=[30, 50, 55]\n        >>> )\n    \"\"\"", "\n", "if", "lr_scheduler", "not", "in", "AVAI_SCH", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'Unsupported scheduler: {}. Must be one of {}'", ".", "format", "(", "\n", "lr_scheduler", ",", "AVAI_SCH", "\n", ")", "\n", ")", "\n", "\n", "", "if", "lr_scheduler", "==", "'single_step'", ":", "\n", "        ", "if", "isinstance", "(", "stepsize", ",", "list", ")", ":", "\n", "            ", "stepsize", "=", "stepsize", "[", "-", "1", "]", "\n", "\n", "", "if", "not", "isinstance", "(", "stepsize", ",", "int", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'For single_step lr_scheduler, stepsize must '", "\n", "'be an integer, but got {}'", ".", "format", "(", "type", "(", "stepsize", ")", ")", "\n", ")", "\n", "\n", "", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "\n", "optimizer", ",", "step_size", "=", "stepsize", ",", "gamma", "=", "gamma", "\n", ")", "\n", "\n", "", "elif", "lr_scheduler", "==", "'multi_step'", ":", "\n", "        ", "if", "not", "isinstance", "(", "stepsize", ",", "list", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'For multi_step lr_scheduler, stepsize must '", "\n", "'be a list, but got {}'", ".", "format", "(", "type", "(", "stepsize", ")", ")", "\n", ")", "\n", "\n", "", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "stepsize", ",", "gamma", "=", "gamma", "\n", ")", "\n", "\n", "", "elif", "lr_scheduler", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "float", "(", "max_epoch", ")", "\n", ")", "\n", "\n", "", "return", "scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.RAdam.__init__": [[21, 47], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "params", ",", "\n", "lr", "=", "1e-3", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "\n", "degenerated_to_sgd", "=", "True", "\n", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", "\n", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", "\n", ")", "\n", "\n", "", "self", ".", "degenerated_to_sgd", "=", "degenerated_to_sgd", "\n", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "self", ".", "buffer", "=", "[", "[", "None", ",", "None", ",", "None", "]", "for", "ind", "in", "range", "(", "10", ")", "]", "\n", "super", "(", "RAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.RAdam.__setstate__": [[48, 50], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "RAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.RAdam.step": [[51, 132], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "int", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'RAdam does not support sparse gradients'", "\n", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "\n", "p_data_fp32", "\n", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "buffered", "=", "self", ".", "buffer", "[", "int", "(", "state", "[", "'step'", "]", "%", "10", ")", "]", "\n", "if", "state", "[", "'step'", "]", "==", "buffered", "[", "0", "]", ":", "\n", "                    ", "N_sma", ",", "step_size", "=", "buffered", "[", "1", "]", ",", "buffered", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "buffered", "[", "0", "]", "=", "state", "[", "'step'", "]", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "\n", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "buffered", "[", "1", "]", "=", "N_sma", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                        ", "step_size", "=", "math", ".", "sqrt", "(", "\n", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "\n", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", "\n", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "elif", "self", ".", "degenerated_to_sgd", ":", "\n", "                        ", "step_size", "=", "1.0", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "step_size", "=", "-", "1", "\n", "", "buffered", "[", "2", "]", "=", "step_size", "\n", "\n", "# more conservative since it's an approximated value", "\n", "", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "\n", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", "\n", ")", "\n", "", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "\n", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ",", "denom", "\n", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "", "elif", "step_size", ">", "0", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "\n", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", "\n", ")", "\n", "", "p_data_fp32", ".", "add_", "(", "-", "step_size", "*", "group", "[", "'lr'", "]", ",", "exp_avg", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.PlainRAdam.__init__": [[136, 162], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "params", ",", "\n", "lr", "=", "1e-3", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "\n", "degenerated_to_sgd", "=", "True", "\n", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", "\n", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", "\n", ")", "\n", "\n", "", "self", ".", "degenerated_to_sgd", "=", "degenerated_to_sgd", "\n", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.PlainRAdam.__setstate__": [[163, 165], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "PlainRAdam", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.PlainRAdam.step": [[166, 231], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "exp_avg_sq.mul_", "exp_avg.mul_", "p.data.float.add_", "p.data.float.add_", "p.data.copy_", "math.sqrt", "exp_avg_sq.sqrt", "p.data.float.add_"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'RAdam does not support sparse gradients'", "\n", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "\n", "p_data_fp32", "\n", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "beta2_t", "=", "beta2", "**", "state", "[", "'step'", "]", "\n", "N_sma_max", "=", "2", "/", "(", "1", "-", "beta2", ")", "-", "1", "\n", "N_sma", "=", "N_sma_max", "-", "2", "*", "state", "[", "'step'", "]", "*", "beta2_t", "/", "(", "1", "-", "beta2_t", ")", "\n", "\n", "# more conservative since it's an approximated value", "\n", "if", "N_sma", ">=", "5", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "\n", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", "\n", ")", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "\n", "(", "1", "-", "beta2_t", ")", "*", "(", "N_sma", "-", "4", ")", "/", "(", "N_sma_max", "-", "4", ")", "*", "\n", "(", "N_sma", "-", "2", ")", "/", "N_sma", "*", "N_sma_max", "/", "(", "N_sma_max", "-", "2", ")", "\n", ")", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "", "elif", "self", ".", "degenerated_to_sgd", ":", "\n", "                    ", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                        ", "p_data_fp32", ".", "add_", "(", "\n", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", "\n", ")", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "/", "(", "1", "-", "beta1", "**", "state", "[", "'step'", "]", ")", "\n", "p_data_fp32", ".", "add_", "(", "-", "step_size", ",", "exp_avg", ")", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.__init__": [[235, 265], ["dict", "torch.optim.optimizer.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "params", ",", "\n", "lr", "=", "1e-3", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "\n", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "\n", "warmup", "=", "0", "\n", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", "\n", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", "\n", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "\n", "lr", "=", "lr", ",", "\n", "betas", "=", "betas", ",", "\n", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "warmup", "=", "warmup", "\n", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.__setstate__": [[266, 268], ["super().__setstate__"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "AdamW", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.step": [[269, 331], ["closure", "p.grad.data.float", "p.data.float", "exp_avg_sq.mul_().addcmul_", "exp_avg.mul_().add_", "exp_avg_sq.sqrt().add_", "p.data.float.addcdiv_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "p.data.float.add_", "exp_avg_sq.mul_", "exp_avg.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Adam does not support sparse gradients, please consider SparseAdam instead'", "\n", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "\n", "p_data_fp32", "\n", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "\n", "if", "group", "[", "'warmup'", "]", ">", "state", "[", "'step'", "]", ":", "\n", "                    ", "scheduled_lr", "=", "1e-8", "+", "state", "[", "'step'", "]", "*", "group", "[", "'lr'", "]", "/", "group", "[", "\n", "'warmup'", "]", "\n", "", "else", ":", "\n", "                    ", "scheduled_lr", "=", "group", "[", "'lr'", "]", "\n", "\n", "", "step_size", "=", "scheduled_lr", "*", "math", ".", "sqrt", "(", "\n", "bias_correction2", "\n", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "\n", "-", "group", "[", "'weight_decay'", "]", "*", "scheduled_lr", ",", "p_data_fp32", "\n", ")", "\n", "\n", "", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.optimizer.build_optimizer": [[11, 158], ["ValueError", "isinstance", "TypeError", "isinstance", "isinstance", "model.named_children", "model.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "warnings.warn", "base_layers.append", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.RMSprop", "torch.optim.RMSprop", "module.parameters", "module.parameters", "radam.RAdam"], "function", ["None"], ["def", "build_optimizer", "(", "\n", "model", ",", "\n", "optim", "=", "'adam'", ",", "\n", "lr", "=", "0.0003", ",", "\n", "weight_decay", "=", "5e-04", ",", "\n", "momentum", "=", "0.9", ",", "\n", "sgd_dampening", "=", "0", ",", "\n", "sgd_nesterov", "=", "False", ",", "\n", "rmsprop_alpha", "=", "0.99", ",", "\n", "adam_beta1", "=", "0.9", ",", "\n", "adam_beta2", "=", "0.99", ",", "\n", "staged_lr", "=", "False", ",", "\n", "new_layers", "=", "''", ",", "\n", "base_lr_mult", "=", "0.1", "\n", ")", ":", "\n", "    ", "\"\"\"A function wrapper for building an optimizer.\n\n    Args:\n        model (nn.Module): model.\n        optim (str, optional): optimizer. Default is \"adam\".\n        lr (float, optional): learning rate. Default is 0.0003.\n        weight_decay (float, optional): weight decay (L2 penalty). Default is 5e-04.\n        momentum (float, optional): momentum factor in sgd. Default is 0.9,\n        sgd_dampening (float, optional): dampening for momentum. Default is 0.\n        sgd_nesterov (bool, optional): enables Nesterov momentum. Default is False.\n        rmsprop_alpha (float, optional): smoothing constant for rmsprop. Default is 0.99.\n        adam_beta1 (float, optional): beta-1 value in adam. Default is 0.9.\n        adam_beta2 (float, optional): beta-2 value in adam. Default is 0.99,\n        staged_lr (bool, optional): uses different learning rates for base and new layers. Base\n            layers are pretrained layers while new layers are randomly initialized, e.g. the\n            identity classification layer. Enabling ``staged_lr`` can allow the base layers to\n            be trained with a smaller learning rate determined by ``base_lr_mult``, while the new\n            layers will take the ``lr``. Default is False.\n        new_layers (str or list): attribute names in ``model``. Default is empty.\n        base_lr_mult (float, optional): learning rate multiplier for base layers. Default is 0.1.\n\n    Examples::\n        >>> # A normal optimizer can be built by\n        >>> optimizer = torchreid.optim.build_optimizer(model, optim='sgd', lr=0.01)\n        >>> # If you want to use a smaller learning rate for pretrained layers\n        >>> # and the attribute name for the randomly initialized layer is 'classifier',\n        >>> # you can do\n        >>> optimizer = torchreid.optim.build_optimizer(\n        >>>     model, optim='sgd', lr=0.01, staged_lr=True,\n        >>>     new_layers='classifier', base_lr_mult=0.1\n        >>> )\n        >>> # Now the `classifier` has learning rate 0.01 but the base layers\n        >>> # have learning rate 0.01 * 0.1.\n        >>> # new_layers can also take multiple attribute names. Say the new layers\n        >>> # are 'fc' and 'classifier', you can do\n        >>> optimizer = torchreid.optim.build_optimizer(\n        >>>     model, optim='sgd', lr=0.01, staged_lr=True,\n        >>>     new_layers=['fc', 'classifier'], base_lr_mult=0.1\n        >>> )\n    \"\"\"", "\n", "if", "optim", "not", "in", "AVAI_OPTIMS", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'Unsupported optim: {}. Must be one of {}'", ".", "format", "(", "\n", "optim", ",", "AVAI_OPTIMS", "\n", ")", "\n", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'model given to build_optimizer must be an instance of nn.Module'", "\n", ")", "\n", "\n", "", "if", "staged_lr", ":", "\n", "        ", "if", "isinstance", "(", "new_layers", ",", "str", ")", ":", "\n", "            ", "if", "new_layers", "is", "None", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "'new_layers is empty, therefore, staged_lr is useless'", "\n", ")", "\n", "", "new_layers", "=", "[", "new_layers", "]", "\n", "\n", "", "if", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", ":", "\n", "            ", "model", "=", "model", ".", "module", "\n", "\n", "", "base_params", "=", "[", "]", "\n", "base_layers", "=", "[", "]", "\n", "new_params", "=", "[", "]", "\n", "\n", "for", "name", ",", "module", "in", "model", ".", "named_children", "(", ")", ":", "\n", "            ", "if", "name", "in", "new_layers", ":", "\n", "                ", "new_params", "+=", "[", "p", "for", "p", "in", "module", ".", "parameters", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "base_params", "+=", "[", "p", "for", "p", "in", "module", ".", "parameters", "(", ")", "]", "\n", "base_layers", ".", "append", "(", "name", ")", "\n", "\n", "", "", "param_groups", "=", "[", "\n", "{", "\n", "'params'", ":", "base_params", ",", "\n", "'lr'", ":", "lr", "*", "base_lr_mult", "\n", "}", ",", "\n", "{", "\n", "'params'", ":", "new_params", "\n", "}", ",", "\n", "]", "\n", "\n", "", "else", ":", "\n", "        ", "param_groups", "=", "model", ".", "parameters", "(", ")", "\n", "\n", "", "if", "optim", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "param_groups", ",", "\n", "lr", "=", "lr", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "betas", "=", "(", "adam_beta1", ",", "adam_beta2", ")", ",", "\n", ")", "\n", "\n", "", "elif", "optim", "==", "'amsgrad'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "param_groups", ",", "\n", "lr", "=", "lr", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "betas", "=", "(", "adam_beta1", ",", "adam_beta2", ")", ",", "\n", "amsgrad", "=", "True", ",", "\n", ")", "\n", "\n", "", "elif", "optim", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "param_groups", ",", "\n", "lr", "=", "lr", ",", "\n", "momentum", "=", "momentum", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "dampening", "=", "sgd_dampening", ",", "\n", "nesterov", "=", "sgd_nesterov", ",", "\n", ")", "\n", "\n", "", "elif", "optim", "==", "'rmsprop'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "\n", "param_groups", ",", "\n", "lr", "=", "lr", ",", "\n", "momentum", "=", "momentum", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "alpha", "=", "rmsprop_alpha", ",", "\n", ")", "\n", "\n", "", "elif", "optim", "==", "'radam'", ":", "\n", "        ", "optimizer", "=", "RAdam", "(", "\n", "param_groups", ",", "\n", "lr", "=", "lr", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "betas", "=", "(", "adam_beta1", ",", "adam_beta2", ")", "\n", ")", "\n", "\n", "", "return", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.ConvBlock.__init__": [[34, 40], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_c", ",", "out_c", ",", "k", ",", "s", "=", "1", ",", "p", "=", "0", ",", "g", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_c", ",", "out_c", ",", "k", ",", "stride", "=", "s", ",", "padding", "=", "p", ",", "bias", "=", "False", ",", "groups", "=", "g", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.ConvBlock.forward": [[41, 43], ["torch.nn.functional.relu6", "mobilenetv2.ConvBlock.bn", "mobilenetv2.ConvBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "relu6", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.Bottleneck.__init__": [[47, 58], ["torch.nn.Module.__init__", "mobilenetv2.ConvBlock", "mobilenetv2.ConvBlock", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "expansion_factor", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "in_channels", "*", "expansion_factor", "\n", "self", ".", "use_residual", "=", "stride", "==", "1", "and", "in_channels", "==", "out_channels", "\n", "self", ".", "conv1", "=", "ConvBlock", "(", "in_channels", ",", "mid_channels", ",", "1", ")", "\n", "self", ".", "dwconv2", "=", "ConvBlock", "(", "\n", "mid_channels", ",", "mid_channels", ",", "3", ",", "stride", ",", "1", ",", "g", "=", "mid_channels", "\n", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.Bottleneck.forward": [[60, 68], ["mobilenetv2.Bottleneck.conv1", "mobilenetv2.Bottleneck.dwconv2", "mobilenetv2.Bottleneck.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "m", "=", "self", ".", "conv1", "(", "x", ")", "\n", "m", "=", "self", ".", "dwconv2", "(", "m", ")", "\n", "m", "=", "self", ".", "conv3", "(", "m", ")", "\n", "if", "self", ".", "use_residual", ":", "\n", "            ", "return", "x", "+", "m", "\n", "", "else", ":", "\n", "            ", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.MobileNetV2.__init__": [[82, 137], ["torch.nn.Module.__init__", "int", "mobilenetv2.ConvBlock", "mobilenetv2.MobileNetV2._make_layer", "mobilenetv2.MobileNetV2._make_layer", "mobilenetv2.MobileNetV2._make_layer", "mobilenetv2.MobileNetV2._make_layer", "mobilenetv2.MobileNetV2._make_layer", "mobilenetv2.MobileNetV2._make_layer", "mobilenetv2.MobileNetV2._make_layer", "mobilenetv2.ConvBlock", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "mobilenetv2.MobileNetV2._init_params", "int", "int", "int", "int", "int", "int", "int", "int", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._init_params"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ",", "\n", "width_mult", "=", "1", ",", "\n", "loss", "=", "'softmax'", ",", "\n", "fc_dim", "=", "None", ",", "\n", "dropout_p", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "in_channels", "=", "int", "(", "32", "*", "width_mult", ")", "\n", "self", ".", "feature_dim", "=", "int", "(", "1280", "*", "width_mult", ")", "if", "width_mult", ">", "1", "else", "1280", "\n", "self", ".", "fc_dim", "=", "fc_dim", "\n", "\n", "# construct layers", "\n", "self", ".", "conv1", "=", "ConvBlock", "(", "3", ",", "self", ".", "in_channels", ",", "3", ",", "s", "=", "2", ",", "p", "=", "1", ")", "\n", "self", ".", "conv2", "=", "self", ".", "_make_layer", "(", "\n", "Bottleneck", ",", "1", ",", "int", "(", "16", "*", "width_mult", ")", ",", "1", ",", "1", "\n", ")", "\n", "self", ".", "conv3", "=", "self", ".", "_make_layer", "(", "\n", "Bottleneck", ",", "6", ",", "int", "(", "24", "*", "width_mult", ")", ",", "2", ",", "2", "\n", ")", "\n", "self", ".", "conv4", "=", "self", ".", "_make_layer", "(", "\n", "Bottleneck", ",", "6", ",", "int", "(", "32", "*", "width_mult", ")", ",", "3", ",", "2", "\n", ")", "\n", "self", ".", "conv5", "=", "self", ".", "_make_layer", "(", "\n", "Bottleneck", ",", "6", ",", "int", "(", "64", "*", "width_mult", ")", ",", "4", ",", "2", "\n", ")", "\n", "self", ".", "conv6", "=", "self", ".", "_make_layer", "(", "\n", "Bottleneck", ",", "6", ",", "int", "(", "96", "*", "width_mult", ")", ",", "3", ",", "1", "\n", ")", "\n", "self", ".", "conv7", "=", "self", ".", "_make_layer", "(", "\n", "Bottleneck", ",", "6", ",", "int", "(", "160", "*", "width_mult", ")", ",", "3", ",", "2", "\n", ")", "\n", "self", ".", "conv8", "=", "self", ".", "_make_layer", "(", "\n", "Bottleneck", ",", "6", ",", "int", "(", "320", "*", "width_mult", ")", ",", "1", ",", "1", "\n", ")", "\n", "self", ".", "conv9", "=", "ConvBlock", "(", "self", ".", "in_channels", ",", "self", ".", "feature_dim", ",", "1", ")", "\n", "\n", "self", ".", "global_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "# self.fc = self._construct_fc_layer(", "\n", "#     fc_dim, self.feature_dim, dropout_p", "\n", "# )", "\n", "if", "self", ".", "fc_dim", ">", "0", ":", "\n", "            ", "self", ".", "feat", "=", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "self", ".", "fc_dim", ")", "\n", "self", ".", "feat_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "fc_dim", ")", "\n", "init", ".", "kaiming_normal_", "(", "self", ".", "feat", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat", ".", "bias", ",", "0", ")", "\n", "self", ".", "feature_dim", "=", "self", ".", "fc_dim", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "num_classes", ")", "\n", "\n", "self", ".", "_init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.MobileNetV2._make_layer": [[138, 149], ["layers.append", "range", "torch.nn.Sequential", "block", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "t", ",", "c", ",", "n", ",", "s", ")", ":", "\n", "# t: expansion factor", "\n", "# c: output channels", "\n", "# n: number of blocks", "\n", "# s: stride for first layer", "\n", "        ", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "in_channels", ",", "c", ",", "t", ",", "s", ")", ")", "\n", "self", ".", "in_channels", "=", "c", "\n", "for", "i", "in", "range", "(", "1", ",", "n", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_channels", ",", "c", ",", "t", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.MobileNetV2._construct_fc_layer": [[150, 180], ["isinstance", "torch.nn.Sequential", "type", "layers.append", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "layers.append", "torch.nn.Dropout"], "methods", ["None"], ["", "def", "_construct_fc_layer", "(", "self", ",", "fc_dims", ",", "input_dim", ",", "dropout_p", "=", "None", ")", ":", "\n", "        ", "\"\"\"Constructs fully connected layer.\n\n        Args:\n            fc_dims (list or tuple): dimensions of fc layers, if None, no fc layers are constructed\n            input_dim (int): input dimension\n            dropout_p (float): dropout probability, if None, dropout is unused\n        \"\"\"", "\n", "if", "fc_dims", "is", "None", ":", "\n", "            ", "self", ".", "feature_dim", "=", "input_dim", "\n", "return", "None", "\n", "\n", "", "assert", "isinstance", "(", "\n", "fc_dims", ",", "(", "list", ",", "tuple", ")", "\n", ")", ",", "'fc_dims must be either list or tuple, but got {}'", ".", "format", "(", "\n", "type", "(", "fc_dims", ")", "\n", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "dim", "in", "fc_dims", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "if", "dropout_p", "is", "not", "None", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout_p", ")", ")", "\n", "", "input_dim", "=", "dim", "\n", "\n", "", "self", ".", "feature_dim", "=", "fc_dims", "[", "-", "1", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.MobileNetV2._init_params": [[181, 199], ["mobilenetv2.MobileNetV2.modules", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", "\n", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.MobileNetV2.featuremaps": [[200, 211], ["mobilenetv2.MobileNetV2.conv1", "mobilenetv2.MobileNetV2.conv2", "mobilenetv2.MobileNetV2.conv3", "mobilenetv2.MobileNetV2.conv4", "mobilenetv2.MobileNetV2.conv5", "mobilenetv2.MobileNetV2.conv6", "mobilenetv2.MobileNetV2.conv7", "mobilenetv2.MobileNetV2.conv8", "mobilenetv2.MobileNetV2.conv9"], "methods", ["None"], ["", "", "", "", "def", "featuremaps", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "conv6", "(", "x", ")", "\n", "x", "=", "self", ".", "conv7", "(", "x", ")", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "x", "=", "self", ".", "conv9", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.MobileNetV2.forward": [[212, 236], ["mobilenetv2.MobileNetV2.featuremaps", "mobilenetv2.MobileNetV2.global_avgpool", "torch.nn.functional.normalize.view", "mobilenetv2.MobileNetV2.classifier", "torch.nn.functional.normalize.size", "mobilenetv2.MobileNetV2.feat_bn", "torch.nn.functional.normalize", "mobilenetv2.MobileNetV2.feat", "KeyError"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.OSNet.featuremaps"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", "=", "None", ")", ":", "\n", "        ", "f", "=", "self", ".", "featuremaps", "(", "x", ")", "\n", "v", "=", "self", ".", "global_avgpool", "(", "f", ")", "\n", "v", "=", "v", ".", "view", "(", "v", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "# if self.fc is not None:", "\n", "#     v = self.fc(v)", "\n", "if", "self", ".", "fc_dim", ">", "0", ":", "\n", "            ", "v", "=", "self", ".", "feat_bn", "(", "self", ".", "feat", "(", "v", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "            ", "v", "=", "F", ".", "normalize", "(", "v", ")", "\n", "return", "v", "\n", "\n", "", "y", "=", "self", ".", "classifier", "(", "v", ")", "\n", "\n", "if", "self", ".", "loss", "==", "'softmax'", ":", "\n", "            ", "return", "y", "\n", "", "elif", "self", ".", "loss", "==", "'triplet'", "or", "self", ".", "loss", "==", "'mmd'", ":", "\n", "            ", "return", "y", ",", "v", "\n", "", "elif", "self", ".", "loss", "==", "'kd_reid'", ":", "\n", "            ", "return", "[", "f", "]", ",", "v", ",", "y", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\"Unsupported loss: {}\"", ".", "format", "(", "self", ".", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.init_pretrained_weights": [[238, 252], ["torch.load_url", "model.state_dict", "model.state_dict.update", "model.load_state_dict", "model_zoo.load_url.items", "model_dict[].size", "v.size"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update"], ["", "", "", "def", "init_pretrained_weights", "(", "model", ",", "model_url", ")", ":", "\n", "    ", "\"\"\"Initializes model with pretrained weights.\n\n    Layers that don't match with pretrained layers in name or size are kept unchanged.\n    \"\"\"", "\n", "pretrain_dict", "=", "model_zoo", ".", "load_url", "(", "model_url", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrain_dict", "=", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", "and", "model_dict", "[", "k", "]", ".", "size", "(", ")", "==", "v", ".", "size", "(", ")", "\n", "}", "\n", "model_dict", ".", "update", "(", "pretrain_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.mobilenetv2_x1_0": [[254, 271], ["mobilenetv2.MobileNetV2", "warnings.warn"], "function", ["None"], ["", "def", "mobilenetv2_x1_0", "(", "num_classes", ",", "loss", ",", "pretrained", "=", "True", ",", "fc_dim", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "MobileNetV2", "(", "\n", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "width_mult", "=", "1", ",", "\n", "fc_dim", "=", "fc_dim", ",", "\n", "dropout_p", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "# init_pretrained_weights(model, model_urls['mobilenetv2_x1_0'])", "\n", "        ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "\n", "'The imagenet pretrained weights need to be manually downloaded from {}'", "\n", ".", "format", "(", "model_urls", "[", "'mobilenetv2_x1_0'", "]", ")", "\n", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.mobilenetv2.mobilenetv2_x1_4": [[273, 290], ["mobilenetv2.MobileNetV2", "warnings.warn"], "function", ["None"], ["", "def", "mobilenetv2_x1_4", "(", "num_classes", ",", "loss", ",", "pretrained", "=", "True", ",", "fc_dim", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "MobileNetV2", "(", "\n", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "width_mult", "=", "1.4", ",", "\n", "fc_dim", "=", "fc_dim", ",", "\n", "dropout_p", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "# init_pretrained_weights(model, model_urls['mobilenetv2_x1_4'])", "\n", "        ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "\n", "'The imagenet pretrained weights need to be manually downloaded from {}'", "\n", ".", "format", "(", "model_urls", "[", "'mobilenetv2_x1_4'", "]", ")", "\n", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.dsbn.DSBN2d.__init__": [[7, 12], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "DSBN2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "planes", "\n", "self", ".", "BN_S", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "BN_T", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.dsbn.DSBN2d.forward": [[13, 24], ["x.size", "torch.split", "torch.split", "torch.split", "torch.split", "dsbn.DSBN2d.BN_S", "dsbn.DSBN2d.BN_T", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dsbn.DSBN2d.BN_T", "int", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "(", "not", "self", ".", "training", ")", ":", "\n", "            ", "return", "self", ".", "BN_T", "(", "x", ")", "\n", "\n", "", "bs", "=", "x", ".", "size", "(", "0", ")", "\n", "assert", "(", "bs", "%", "2", "==", "0", ")", "\n", "split", "=", "torch", ".", "split", "(", "x", ",", "int", "(", "bs", "/", "2", ")", ",", "0", ")", "\n", "out1", "=", "self", ".", "BN_S", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN_T", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "0", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.dsbn.DSBN1d.__init__": [[26, 31], ["torch.Module.__init__", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "planes", ")", ":", "\n", "        ", "super", "(", "DSBN1d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_features", "=", "planes", "\n", "self", ".", "BN_S", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "BN_T", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.dsbn.DSBN1d.forward": [[32, 43], ["x.size", "torch.split", "torch.split", "torch.split", "torch.split", "dsbn.DSBN1d.BN_S", "dsbn.DSBN1d.BN_T", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dsbn.DSBN1d.BN_T", "int", "split[].contiguous", "split[].contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "(", "not", "self", ".", "training", ")", ":", "\n", "            ", "return", "self", ".", "BN_T", "(", "x", ")", "\n", "\n", "", "bs", "=", "x", ".", "size", "(", "0", ")", "\n", "assert", "(", "bs", "%", "2", "==", "0", ")", "\n", "split", "=", "torch", ".", "split", "(", "x", ",", "int", "(", "bs", "/", "2", ")", ",", "0", ")", "\n", "out1", "=", "self", ".", "BN_S", "(", "split", "[", "0", "]", ".", "contiguous", "(", ")", ")", "\n", "out2", "=", "self", ".", "BN_T", "(", "split", "[", "1", "]", ".", "contiguous", "(", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "0", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.dsbn.convert_dsbn": [[44, 59], ["enumerate", "model.named_children", "isinstance", "dsbn.DSBN2d", "DSBN1d.BN_S.load_state_dict", "DSBN1d.BN_T.load_state_dict", "setattr", "isinstance", "next", "child.state_dict", "child.state_dict", "dsbn.DSBN1d", "DSBN1d.BN_S.load_state_dict", "DSBN1d.BN_T.load_state_dict", "setattr", "dsbn.convert_dsbn", "model.parameters", "child.state_dict", "child.state_dict"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.dsbn.convert_dsbn"], ["", "", "def", "convert_dsbn", "(", "model", ")", ":", "\n", "    ", "for", "_", ",", "(", "child_name", ",", "child", ")", "in", "enumerate", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "assert", "(", "not", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ")", "\n", "if", "isinstance", "(", "child", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", "=", "DSBN2d", "(", "child", ".", "num_features", ")", "\n", "m", ".", "BN_S", ".", "load_state_dict", "(", "child", ".", "state_dict", "(", ")", ")", "\n", "m", ".", "BN_T", ".", "load_state_dict", "(", "child", ".", "state_dict", "(", ")", ")", "\n", "setattr", "(", "model", ",", "child_name", ",", "m", ")", "\n", "", "elif", "isinstance", "(", "child", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "            ", "m", "=", "DSBN1d", "(", "child", ".", "num_features", ")", "\n", "m", ".", "BN_S", ".", "load_state_dict", "(", "child", ".", "state_dict", "(", ")", ")", "\n", "m", ".", "BN_T", ".", "load_state_dict", "(", "child", ".", "state_dict", "(", ")", ")", "\n", "setattr", "(", "model", ",", "child_name", ",", "m", ")", "\n", "", "else", ":", "\n", "            ", "convert_dsbn", "(", "child", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.dsbn.convert_bn": [[60, 79], ["enumerate", "model.named_children", "isinstance", "torch.BatchNorm2d", "setattr", "isinstance", "next", "nn.BatchNorm1d.load_state_dict", "nn.BatchNorm1d.load_state_dict", "torch.BatchNorm1d", "setattr", "dsbn.convert_bn", "model.parameters", "child.BN_T.state_dict", "child.BN_S.state_dict", "nn.BatchNorm1d.load_state_dict", "nn.BatchNorm1d.load_state_dict", "child.BN_T.state_dict", "child.BN_S.state_dict"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.dsbn.convert_bn"], ["", "", "", "def", "convert_bn", "(", "model", ",", "use_target", "=", "True", ")", ":", "\n", "    ", "for", "_", ",", "(", "child_name", ",", "child", ")", "in", "enumerate", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "assert", "(", "not", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ")", "\n", "if", "isinstance", "(", "child", ",", "DSBN2d", ")", ":", "\n", "            ", "m", "=", "nn", ".", "BatchNorm2d", "(", "child", ".", "num_features", ")", "\n", "if", "use_target", ":", "\n", "                ", "m", ".", "load_state_dict", "(", "child", ".", "BN_T", ".", "state_dict", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "m", ".", "load_state_dict", "(", "child", ".", "BN_S", ".", "state_dict", "(", ")", ")", "\n", "", "setattr", "(", "model", ",", "child_name", ",", "m", ")", "\n", "", "elif", "isinstance", "(", "child", ",", "DSBN1d", ")", ":", "\n", "            ", "m", "=", "nn", ".", "BatchNorm1d", "(", "child", ".", "num_features", ")", "\n", "if", "use_target", ":", "\n", "                ", "m", ".", "load_state_dict", "(", "child", ".", "BN_T", ".", "state_dict", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "m", ".", "load_state_dict", "(", "child", ".", "BN_S", ".", "state_dict", "(", ")", ")", "\n", "", "setattr", "(", "model", ",", "child_name", ",", "m", ")", "\n", "", "else", ":", "\n", "            ", "convert_bn", "(", "child", ",", "use_target", "=", "use_target", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.ConvLayer.__init__": [[32, 57], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.InstanceNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "groups", "=", "1", ",", "\n", "IN", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "ConvLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", "\n", ")", "\n", "if", "IN", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.ConvLayer.forward": [[58, 63], ["osnet.ConvLayer.conv", "osnet.ConvLayer.bn", "osnet.ConvLayer.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.Conv1x1.__init__": [[68, 81], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.Conv1x1.forward": [[82, 87], ["osnet.Conv1x1.conv", "osnet.Conv1x1.bn", "osnet.Conv1x1.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.Conv1x1Linear.__init__": [[92, 98], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv1x1Linear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.Conv1x1Linear.forward": [[99, 103], ["osnet.Conv1x1Linear.conv", "osnet.Conv1x1Linear.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.Conv3x3.__init__": [[108, 121], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.Conv3x3.forward": [[122, 127], ["osnet.Conv3x3.conv", "osnet.Conv3x3.bn", "osnet.Conv3x3.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.LightConv3x3.__init__": [[134, 150], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "LightConv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "out_channels", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.LightConv3x3.forward": [[151, 157], ["osnet.LightConv3x3.conv1", "osnet.LightConv3x3.conv2", "osnet.LightConv3x3.bn", "osnet.LightConv3x3.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.ChannelGate.__init__": [[165, 206], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.LayerNorm", "torch.nn.Sigmoid", "torch.nn.ReLU", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "num_gates", "=", "None", ",", "\n", "return_gates", "=", "False", ",", "\n", "gate_activation", "=", "'sigmoid'", ",", "\n", "reduction", "=", "16", ",", "\n", "layer_norm", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "ChannelGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "num_gates", "is", "None", ":", "\n", "            ", "num_gates", "=", "in_channels", "\n", "", "self", ".", "return_gates", "=", "return_gates", "\n", "self", ".", "global_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", "//", "reduction", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "self", ".", "norm1", "=", "None", "\n", "if", "layer_norm", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "(", "in_channels", "//", "reduction", ",", "1", ",", "1", ")", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "//", "reduction", ",", "\n", "num_gates", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "if", "gate_activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "gate_activation", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "gate_activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "gate_activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "gate_activation", "==", "'linear'", ":", "\n", "            ", "self", ".", "gate_activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Unknown gate activation: {}\"", ".", "format", "(", "gate_activation", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.ChannelGate.forward": [[208, 221], ["osnet.ChannelGate.global_avgpool", "osnet.ChannelGate.fc1", "osnet.ChannelGate.relu", "osnet.ChannelGate.fc2", "osnet.ChannelGate.norm1", "osnet.ChannelGate.gate_activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input", "=", "x", "\n", "x", "=", "self", ".", "global_avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "if", "self", ".", "norm1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "if", "self", ".", "gate_activation", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "gate_activation", "(", "x", ")", "\n", "", "if", "self", ".", "return_gates", ":", "\n", "            ", "return", "x", "\n", "", "return", "input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.OSBlock.__init__": [[226, 261], ["torch.nn.Module.__init__", "osnet.Conv1x1", "osnet.LightConv3x3", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "osnet.ChannelGate", "osnet.Conv1x1Linear", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.Conv1x1Linear", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "IN", "=", "False", ",", "\n", "bottleneck_reduction", "=", "4", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "OSBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "out_channels", "//", "bottleneck_reduction", "\n", "self", ".", "conv1", "=", "Conv1x1", "(", "in_channels", ",", "mid_channels", ")", "\n", "self", ".", "conv2a", "=", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", "\n", "self", ".", "conv2b", "=", "nn", ".", "Sequential", "(", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", ")", "\n", "self", ".", "conv2c", "=", "nn", ".", "Sequential", "(", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", ")", "\n", "self", ".", "conv2d", "=", "nn", ".", "Sequential", "(", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", ")", "\n", "self", ".", "gate", "=", "ChannelGate", "(", "mid_channels", ")", "\n", "self", ".", "conv3", "=", "Conv1x1Linear", "(", "mid_channels", ",", "out_channels", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "downsample", "=", "Conv1x1Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "", "self", ".", "IN", "=", "None", "\n", "if", "IN", ":", "\n", "            ", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.OSBlock.forward": [[262, 277], ["osnet.OSBlock.conv1", "osnet.OSBlock.conv2a", "osnet.OSBlock.conv2b", "osnet.OSBlock.conv2c", "osnet.OSBlock.conv2d", "osnet.OSBlock.conv3", "torch.nn.functional.relu", "osnet.OSBlock.gate", "osnet.OSBlock.downsample", "osnet.OSBlock.IN", "osnet.OSBlock.gate", "osnet.OSBlock.gate", "osnet.OSBlock.gate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x2a", "=", "self", ".", "conv2a", "(", "x1", ")", "\n", "x2b", "=", "self", ".", "conv2b", "(", "x1", ")", "\n", "x2c", "=", "self", ".", "conv2c", "(", "x1", ")", "\n", "x2d", "=", "self", ".", "conv2d", "(", "x1", ")", "\n", "x2", "=", "self", ".", "gate", "(", "x2a", ")", "+", "self", ".", "gate", "(", "x2b", ")", "+", "self", ".", "gate", "(", "x2c", ")", "+", "self", ".", "gate", "(", "x2d", ")", "\n", "x3", "=", "self", ".", "conv3", "(", "x2", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "identity", ")", "\n", "", "out", "=", "x3", "+", "identity", "\n", "if", "self", ".", "IN", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "IN", "(", "out", ")", "\n", "", "return", "F", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.OSNet.__init__": [[291, 351], ["torch.nn.Module.__init__", "len", "osnet.ConvLayer", "torch.nn.MaxPool2d", "osnet.OSNet._make_layer", "osnet.OSNet._make_layer", "osnet.OSNet._make_layer", "osnet.Conv1x1", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "osnet.OSNet._init_params", "len", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "len"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._init_params"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ",", "\n", "blocks", ",", "\n", "layers", ",", "\n", "channels", ",", "\n", "fc_dim", "=", "512", ",", "\n", "loss", "=", "'softmax'", ",", "\n", "IN", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "OSNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_blocks", "=", "len", "(", "blocks", ")", "\n", "assert", "num_blocks", "==", "len", "(", "layers", ")", "\n", "assert", "num_blocks", "==", "len", "(", "channels", ")", "-", "1", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "feature_dim", "=", "channels", "[", "3", "]", "\n", "self", ".", "fc_dim", "=", "fc_dim", "\n", "\n", "# convolutional backbone", "\n", "self", ".", "conv1", "=", "ConvLayer", "(", "3", ",", "channels", "[", "0", "]", ",", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "IN", "=", "IN", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "self", ".", "_make_layer", "(", "\n", "blocks", "[", "0", "]", ",", "\n", "layers", "[", "0", "]", ",", "\n", "channels", "[", "0", "]", ",", "\n", "channels", "[", "1", "]", ",", "\n", "reduce_spatial_size", "=", "True", ",", "\n", "IN", "=", "IN", "\n", ")", "\n", "self", ".", "conv3", "=", "self", ".", "_make_layer", "(", "\n", "blocks", "[", "1", "]", ",", "\n", "layers", "[", "1", "]", ",", "\n", "channels", "[", "1", "]", ",", "\n", "channels", "[", "2", "]", ",", "\n", "reduce_spatial_size", "=", "True", "\n", ")", "\n", "self", ".", "conv4", "=", "self", ".", "_make_layer", "(", "\n", "blocks", "[", "2", "]", ",", "\n", "layers", "[", "2", "]", ",", "\n", "channels", "[", "2", "]", ",", "\n", "channels", "[", "3", "]", ",", "\n", "reduce_spatial_size", "=", "False", "\n", ")", "\n", "self", ".", "conv5", "=", "Conv1x1", "(", "channels", "[", "3", "]", ",", "channels", "[", "3", "]", ")", "\n", "self", ".", "global_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# fully connected layer", "\n", "# self.fc = self._construct_fc_layer(", "\n", "#     self.feature_dim, channels[3], dropout_p=None", "\n", "# )", "\n", "if", "fc_dim", ">", "0", ":", "\n", "            ", "self", ".", "feat", "=", "nn", ".", "Linear", "(", "channels", "[", "3", "]", ",", "fc_dim", ")", "\n", "self", ".", "feat_bn", "=", "nn", ".", "BatchNorm1d", "(", "fc_dim", ")", "\n", "init", ".", "kaiming_normal_", "(", "self", ".", "feat", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat", ".", "bias", ",", "0", ")", "\n", "self", ".", "feature_dim", "=", "fc_dim", "\n", "# identity classification layer", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "num_classes", ")", "\n", "\n", "self", ".", "_init_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.OSNet._make_layer": [[352, 376], ["layers.append", "range", "torch.nn.Sequential", "block", "layers.append", "layers.append", "block", "torch.nn.Sequential", "osnet.Conv1x1", "torch.nn.AvgPool2d"], "methods", ["None"], ["", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layer", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "reduce_spatial_size", ",", "\n", "IN", "=", "False", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "layers", ".", "append", "(", "block", "(", "in_channels", ",", "out_channels", ",", "IN", "=", "IN", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "layer", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "out_channels", ",", "out_channels", ",", "IN", "=", "IN", ")", ")", "\n", "\n", "", "if", "reduce_spatial_size", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "Conv1x1", "(", "out_channels", ",", "out_channels", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.OSNet._construct_fc_layer": [[377, 397], ["isinstance", "torch.nn.Sequential", "layers.append", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "layers.append", "torch.nn.Dropout"], "methods", ["None"], ["", "def", "_construct_fc_layer", "(", "self", ",", "fc_dims", ",", "input_dim", ",", "dropout_p", "=", "None", ")", ":", "\n", "        ", "if", "fc_dims", "is", "None", "or", "fc_dims", "<", "0", ":", "\n", "            ", "self", ".", "feature_dim", "=", "input_dim", "\n", "return", "None", "\n", "\n", "", "if", "isinstance", "(", "fc_dims", ",", "int", ")", ":", "\n", "            ", "fc_dims", "=", "[", "fc_dims", "]", "\n", "\n", "", "layers", "=", "[", "]", "\n", "for", "dim", "in", "fc_dims", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "if", "dropout_p", "is", "not", "None", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout_p", ")", ")", "\n", "", "input_dim", "=", "dim", "\n", "\n", "", "self", ".", "feature_dim", "=", "fc_dims", "[", "-", "1", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.OSNet._init_params": [[398, 419], ["osnet.OSNet.modules", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", "\n", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.OSNet.featuremaps": [[420, 428], ["osnet.OSNet.conv1", "osnet.OSNet.maxpool", "osnet.OSNet.conv2", "osnet.OSNet.conv3", "osnet.OSNet.conv4", "osnet.OSNet.conv5"], "methods", ["None"], ["", "", "", "", "def", "featuremaps", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.OSNet.forward": [[429, 452], ["osnet.OSNet.featuremaps", "osnet.OSNet.global_avgpool", "torch.nn.functional.normalize.view", "osnet.OSNet.classifier", "torch.nn.functional.normalize.size", "osnet.OSNet.feat_bn", "torch.nn.functional.normalize", "osnet.OSNet.feat", "KeyError"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.OSNet.featuremaps"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_featuremaps", "=", "False", ",", "target", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "featuremaps", "(", "x", ")", "\n", "if", "return_featuremaps", ":", "\n", "            ", "return", "x", "\n", "", "v", "=", "self", ".", "global_avgpool", "(", "x", ")", "\n", "v", "=", "v", ".", "view", "(", "v", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "# if self.fc is not None:", "\n", "#     v = self.fc(v)", "\n", "if", "self", ".", "fc_dim", ">", "0", ":", "\n", "            ", "v", "=", "self", ".", "feat_bn", "(", "self", ".", "feat", "(", "v", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "            ", "v", "=", "F", ".", "normalize", "(", "v", ")", "\n", "return", "v", "\n", "", "y", "=", "self", ".", "classifier", "(", "v", ")", "\n", "if", "self", ".", "loss", "==", "'softmax'", ":", "\n", "            ", "return", "y", "\n", "", "elif", "self", ".", "loss", "==", "'triplet'", "or", "self", ".", "loss", "==", "'mmd'", ":", "\n", "            ", "return", "y", ",", "v", "\n", "", "elif", "self", ".", "loss", "==", "'kd_reid'", ":", "\n", "            ", "return", "[", "]", ",", "v", ",", "y", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\"Unsupported loss: {}\"", ".", "format", "(", "self", ".", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.init_pretrained_weights": [[454, 529], ["osnet.init_pretrained_weights._get_torch_home"], "function", ["None"], ["", "", "", "def", "init_pretrained_weights", "(", "model", ",", "key", "=", "''", ")", ":", "\n", "    ", "\"\"\"Initializes model with pretrained weights.\n\n    Layers that don't match with pretrained layers in name or size are kept unchanged.\n    \"\"\"", "\n", "import", "os", "\n", "import", "errno", "\n", "import", "gdown", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n", "def", "_get_torch_home", "(", ")", ":", "\n", "        ", "ENV_TORCH_HOME", "=", "'TORCH_HOME'", "\n", "ENV_XDG_CACHE_HOME", "=", "'XDG_CACHE_HOME'", "\n", "DEFAULT_CACHE_DIR", "=", "'~/.cache'", "\n", "torch_home", "=", "os", ".", "path", ".", "expanduser", "(", "\n", "os", ".", "getenv", "(", "\n", "ENV_TORCH_HOME", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "getenv", "(", "ENV_XDG_CACHE_HOME", ",", "DEFAULT_CACHE_DIR", ")", ",", "'torch'", "\n", ")", "\n", ")", "\n", ")", "\n", "return", "torch_home", "\n", "\n", "", "torch_home", "=", "_get_torch_home", "(", ")", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "torch_home", ",", "'checkpoints'", ")", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "# Directory already exists, ignore.", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "# Unexpected OSError, re-raise.", "\n", "            ", "raise", "\n", "", "", "filename", "=", "key", "+", "'_imagenet.pth'", "\n", "cached_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", ":", "\n", "        ", "gdown", ".", "download", "(", "pretrained_urls", "[", "key", "]", ",", "cached_file", ",", "quiet", "=", "False", ")", "\n", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "cached_file", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "matched_layers", ",", "discarded_layers", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "            ", "k", "=", "k", "[", "7", ":", "]", "# discard module.", "\n", "\n", "", "if", "k", "in", "model_dict", "and", "model_dict", "[", "k", "]", ".", "size", "(", ")", "==", "v", ".", "size", "(", ")", ":", "\n", "            ", "new_state_dict", "[", "k", "]", "=", "v", "\n", "matched_layers", ".", "append", "(", "k", ")", "\n", "", "else", ":", "\n", "            ", "discarded_layers", ".", "append", "(", "k", ")", "\n", "\n", "", "", "model_dict", ".", "update", "(", "new_state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "if", "len", "(", "matched_layers", ")", "==", "0", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'The pretrained weights from \"{}\" cannot be loaded, '", "\n", "'please check the key names manually '", "\n", "'(** ignored and continue **)'", ".", "format", "(", "cached_file", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\n", "'Successfully loaded imagenet pretrained weights from \"{}\"'", ".", "\n", "format", "(", "cached_file", ")", "\n", ")", "\n", "if", "len", "(", "discarded_layers", ")", ">", "0", ":", "\n", "            ", "print", "(", "\n", "'** The following layers are discarded '", "\n", "'due to unmatched keys or layer size: {}'", ".", "\n", "format", "(", "discarded_layers", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.osnet_x1_0": [[535, 549], ["osnet.OSNet", "osnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.init_pretrained_weights"], ["", "", "", "def", "osnet_x1_0", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "True", ",", "loss", "=", "'softmax'", ",", "fc_dim", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# standard size (width x1.0)", "\n", "    ", "model", "=", "OSNet", "(", "\n", "num_classes", ",", "\n", "blocks", "=", "[", "OSBlock", ",", "OSBlock", ",", "OSBlock", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "64", ",", "256", ",", "384", ",", "512", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "fc_dim", "=", "fc_dim", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "key", "=", "'osnet_x1_0'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.osnet_x0_75": [[551, 565], ["osnet.OSNet", "osnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.init_pretrained_weights"], ["", "def", "osnet_x0_75", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "True", ",", "loss", "=", "'softmax'", ",", "fc_dim", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# medium size (width x0.75)", "\n", "    ", "model", "=", "OSNet", "(", "\n", "num_classes", ",", "\n", "blocks", "=", "[", "OSBlock", ",", "OSBlock", ",", "OSBlock", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "48", ",", "192", ",", "288", ",", "384", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "fc_dim", "=", "fc_dim", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "key", "=", "'osnet_x0_75'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.osnet_x0_5": [[567, 581], ["osnet.OSNet", "osnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.init_pretrained_weights"], ["", "def", "osnet_x0_5", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "True", ",", "loss", "=", "'softmax'", ",", "fc_dim", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# tiny size (width x0.5)", "\n", "    ", "model", "=", "OSNet", "(", "\n", "num_classes", ",", "\n", "blocks", "=", "[", "OSBlock", ",", "OSBlock", ",", "OSBlock", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "32", ",", "128", ",", "192", ",", "256", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "fc_dim", "=", "fc_dim", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "key", "=", "'osnet_x0_5'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.osnet_x0_25": [[583, 597], ["osnet.OSNet", "osnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.init_pretrained_weights"], ["", "def", "osnet_x0_25", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "True", ",", "loss", "=", "'softmax'", ",", "fc_dim", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# very tiny size (width x0.25)", "\n", "    ", "model", "=", "OSNet", "(", "\n", "num_classes", ",", "\n", "blocks", "=", "[", "OSBlock", ",", "OSBlock", ",", "OSBlock", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "16", ",", "64", ",", "96", ",", "128", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "fc_dim", "=", "fc_dim", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "key", "=", "'osnet_x0_25'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.osnet.osnet_ibn_x1_0": [[599, 617], ["osnet.OSNet", "osnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.init_pretrained_weights"], ["", "def", "osnet_ibn_x1_0", "(", "\n", "num_classes", "=", "1000", ",", "pretrained", "=", "True", ",", "loss", "=", "'softmax'", ",", "fc_dim", "=", "None", ",", "**", "kwargs", "\n", ")", ":", "\n", "# standard size (width x1.0) + IBN layer", "\n", "# Ref: Pan et al. Two at Once: Enhancing Learning and Generalization Capacities via IBN-Net. ECCV, 2018.", "\n", "    ", "model", "=", "OSNet", "(", "\n", "num_classes", ",", "\n", "blocks", "=", "[", "OSBlock", ",", "OSBlock", ",", "OSBlock", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "64", ",", "256", ",", "384", ",", "512", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "fc_dim", "=", "fc_dim", ",", "\n", "IN", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "key", "=", "'osnet_ibn_x1_0'", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.BasicBlock.__init__": [[51, 81], ["torch.nn.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.conv3x3", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "\n", "dilation", "=", "1", ",", "\n", "norm_layer", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'BasicBlock only supports groups=1 and base_width=64'", "\n", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Dilation > 1 not supported in BasicBlock\"", "\n", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.BasicBlock.forward": [[82, 101], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "# out = self.relu(out)", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.Bottleneck.__init__": [[106, 131], ["torch.nn.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.conv1x1", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.conv3x3", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "\n", "dilation", "=", "1", ",", "\n", "norm_layer", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.Bottleneck.forward": [[132, 154], ["torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "# out = self.relu(out)", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet.__init__": [[174, 280], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "norm_layer", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "resnet.ResNet._init_params", "len", "ValueError", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "resnet.ResNet.modules", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "resnet.ResNet._construct_feat_matchers", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "zip"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._init_params", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._construct_feat_matchers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ",", "\n", "loss", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "\n", "fc_dim", "=", "2048", ",", "\n", "width_per_group", "=", "64", ",", "\n", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "\n", "last_stride", "=", "2", ",", "# was 2 initially", "\n", "dropout_p", "=", "None", ",", "\n", "teacher_arch", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "teacher_arch", "=", "teacher_arch", "\n", "self", ".", "margins", "=", "None", "\n", "self", ".", "out_dim", "=", "512", "*", "block", ".", "expansion", "\n", "self", ".", "feature_dim", "=", "self", ".", "out_dim", "\n", "self", ".", "fc_dim", "=", "fc_dim", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "self", ".", "expansion", "=", "block", ".", "expansion", "\n", "self", ".", "multi_head", "=", "False", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "\n", "format", "(", "replace_stride_with_dilation", ")", "\n", ")", "\n", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "128", ",", "\n", "layers", "[", "1", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "256", ",", "\n", "layers", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "\n", "512", ",", "\n", "layers", "[", "3", "]", ",", "\n", "stride", "=", "last_stride", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", "\n", ")", "\n", "self", ".", "global_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "if", "fc_dim", ">", "0", ":", "\n", "            ", "self", ".", "feat", "=", "nn", ".", "Linear", "(", "self", ".", "out_dim", ",", "self", ".", "feature_dim", ")", "\n", "self", ".", "feat_bn", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "feature_dim", ")", "\n", "init", ".", "kaiming_normal_", "(", "self", ".", "feat", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "init", ".", "constant_", "(", "self", ".", "feat", ".", "bias", ",", "0", ")", "\n", "self", ".", "feature_dim", "=", "fc_dim", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "num_classes", ")", "\n", "\n", "self", ".", "_init_params", "(", ")", "\n", "\n", "if", "self", ".", "teacher_arch", "!=", "None", ":", "\n", "            ", "if", "self", ".", "teacher_arch", "==", "\"resnet50\"", "or", "self", ".", "teacher_arch", "==", "\"resnet101\"", "or", "self", ".", "teacher_arch", "==", "\"resnet152\"", ":", "\n", "                ", "teacher_feat_dims", "=", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", "\n", "", "else", ":", "\n", "                ", "teacher_feat_dims", "=", "[", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "", "student_feat_dims", "=", "[", "64", "*", "self", ".", "expansion", ",", "128", "*", "self", ".", "expansion", ",", "256", "*", "self", ".", "expansion", ",", "\n", "512", "*", "self", ".", "expansion", "]", "\n", "# 1x1 conv to match smaller resnet feature dimension with larger models", "\n", "if", "self", ".", "loss", "==", "'kd_reid'", ":", "\n", "                ", "self", ".", "feat_matcher_list", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_construct_feat_matchers", "(", "s", ",", "t", ")", "for", "s", ",", "t", "in", "zip", "(", "student_feat_dims", ",", "teacher_feat_dims", ")", "]", ")", "\n", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._make_layer": [[282, 316], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._construct_fc_layer": [[317, 347], ["isinstance", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "type", "layers.append", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "layers.append", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["None"], ["", "def", "_construct_fc_layer", "(", "self", ",", "fc_dims", ",", "input_dim", ",", "dropout_p", "=", "None", ")", ":", "\n", "        ", "\"\"\"Constructs fully connected layer\n\n        Args:\n            fc_dims (list or tuple): dimensions of fc layers, if None, no fc layers are constructed\n            input_dim (int): input dimension\n            dropout_p (float): dropout probability, if None, dropout is unused\n        \"\"\"", "\n", "if", "fc_dims", "is", "None", ":", "\n", "            ", "self", ".", "feature_dim", "=", "input_dim", "\n", "return", "None", "\n", "\n", "", "assert", "isinstance", "(", "\n", "fc_dims", ",", "(", "list", ",", "tuple", ")", "\n", ")", ",", "'fc_dims must be either list or tuple, but got {}'", ".", "format", "(", "\n", "type", "(", "fc_dims", ")", "\n", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "dim", "in", "fc_dims", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "if", "dropout_p", "is", "not", "None", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout_p", ")", ")", "\n", "", "input_dim", "=", "dim", "\n", "\n", "", "self", ".", "feature_dim", "=", "fc_dims", "[", "-", "1", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._construct_feat_matchers": [[349, 363], ["torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_construct_feat_matchers", "(", "self", ",", "dim_in", ",", "dim_out", ")", ":", "\n", "\n", "        ", "C", "=", "[", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim_out", ")", "]", "\n", "\n", "for", "m", "in", "C", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "C", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet._init_params": [[365, 383], ["resnet.ResNet.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", "\n", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet.get_margin_from_bn": [[385, 416], ["isinstance", "enumerate", "isinstance", "zip", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "resnet.ResNet.register_buffer", "KeyError", "abs", "m.item.item.item", "torch.FloatTensor().to.unsqueeze().unsqueeze().unsqueeze().detach", "torch.FloatTensor().to.unsqueeze().unsqueeze().unsqueeze().detach", "torch.FloatTensor().to.unsqueeze().unsqueeze().unsqueeze().detach", "abs.item", "scipy.stats.norm.cdf", "torch.FloatTensor().to.append", "torch.FloatTensor().to.append", "torch.FloatTensor().to.append", "torch.FloatTensor().to.append", "torch.FloatTensor().to.append", "torch.FloatTensor().to.append", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().to.unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor().to.unsqueeze().unsqueeze().unsqueeze", "torch.FloatTensor().to.unsqueeze().unsqueeze().unsqueeze", "scipy.stats.norm.cdf", "torch.FloatTensor().to.unsqueeze().unsqueeze", "torch.FloatTensor().to.unsqueeze().unsqueeze", "torch.FloatTensor().to.unsqueeze().unsqueeze", "math.sqrt", "math.exp", "torch.FloatTensor().to.unsqueeze", "torch.FloatTensor().to.unsqueeze", "torch.FloatTensor().to.unsqueeze"], "methods", ["None"], ["", "", "", "", "def", "get_margin_from_bn", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "Bottleneck", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "layer1", "[", "-", "1", "]", ".", "bn3", "\n", "bn2", "=", "self", ".", "layer2", "[", "-", "1", "]", ".", "bn3", "\n", "bn3", "=", "self", ".", "layer3", "[", "-", "1", "]", ".", "bn3", "\n", "bn4", "=", "self", ".", "layer4", "[", "-", "1", "]", ".", "bn3", "\n", "", "elif", "isinstance", "(", "self", ".", "layer1", "[", "0", "]", ",", "BasicBlock", ")", ":", "\n", "            ", "bn1", "=", "self", ".", "layer1", "[", "-", "1", "]", ".", "bn2", "\n", "bn2", "=", "self", ".", "layer2", "[", "-", "1", "]", ".", "bn2", "\n", "bn3", "=", "self", ".", "layer3", "[", "-", "1", "]", ".", "bn2", "\n", "bn4", "=", "self", ".", "layer4", "[", "-", "1", "]", ".", "bn2", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "'ResNet unknown block error !!!'", ")", "\n", "\n", "", "bns", "=", "[", "bn1", ",", "bn2", ",", "bn3", ",", "bn4", "]", "\n", "\n", "for", "i", ",", "bn", "in", "enumerate", "(", "bns", ")", ":", "\n", "            ", "margin", "=", "[", "]", "\n", "std", "=", "bn", ".", "weight", ".", "data", "\n", "mean", "=", "bn", ".", "bias", ".", "data", "\n", "for", "(", "s", ",", "m", ")", "in", "zip", "(", "std", ",", "mean", ")", ":", "\n", "                ", "s", "=", "abs", "(", "s", ".", "item", "(", ")", ")", "\n", "m", "=", "m", ".", "item", "(", ")", "\n", "if", "norm", ".", "cdf", "(", "-", "m", "/", "s", ")", ">", "0.001", ":", "\n", "                    ", "margin", ".", "append", "(", "\n", "-", "s", "*", "math", ".", "exp", "(", "-", "(", "m", "/", "s", ")", "**", "2", "/", "2", ")", "/", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", "/", "norm", ".", "cdf", "(", "-", "m", "/", "s", ")", "+", "m", ")", "\n", "", "else", ":", "\n", "                    ", "margin", ".", "append", "(", "-", "3", "*", "s", ")", "\n", "", "", "margin", "=", "torch", ".", "FloatTensor", "(", "margin", ")", ".", "to", "(", "std", ".", "device", ")", "\n", "self", ".", "register_buffer", "(", "'margin%d'", "%", "(", "i", "+", "1", ")", ",", "margin", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "0", ")", ".", "detach", "(", ")", ")", "\n", "", "return", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet.get_channel_num": [[417, 420], ["None"], "methods", ["None"], ["", "def", "get_channel_num", "(", "self", ")", ":", "\n", "\n", "        ", "return", "[", "64", "*", "self", ".", "expansion", ",", "128", "*", "self", ".", "expansion", ",", "256", "*", "self", ".", "expansion", ",", "512", "*", "self", ".", "expansion", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet.forward": [[422, 492], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.global_avgpool", "resnet.ResNet.view", "resnet.ResNet.classifier", "resnet.ResNet.size", "torch.normalize", "torch.normalize", "torch.normalize", "resnet.ResNet.feat_bn", "resnet.ResNet.feat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.relu.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.relu.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.relu.view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.relu.view", "torch.relu.view", "torch.relu.view", "torch.relu.view", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu.view", "getattr", "torch.relu.size", "getattr", "torch.relu.size", "getattr", "torch.relu.size", "getattr", "torch.relu.size", "torch.relu.size", "torch.relu.size", "torch.relu.size", "torch.relu.size", "torch.relu.size", "torch.relu.size", "torch.relu.size", "torch.relu.size", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "KeyError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", "=", "None", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "f1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "f2", "=", "self", ".", "layer2", "(", "f1", ")", "\n", "f3", "=", "self", ".", "layer3", "(", "f2", ")", "\n", "f4", "=", "self", ".", "layer4", "(", "f3", ")", "\n", "f", "=", "F", ".", "relu", "(", "f4", ")", "\n", "v", "=", "self", ".", "global_avgpool", "(", "f", ")", "\n", "v", "=", "v", ".", "view", "(", "v", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "fc_dim", ">", "0", ":", "\n", "            ", "if", "self", ".", "multi_head", ":", "\n", "                ", "v", "=", "self", ".", "feat_fc_multi", "[", "target", "]", "(", "v", ")", "\n", "", "else", ":", "\n", "                ", "v", "=", "self", ".", "feat_bn", "(", "self", ".", "feat", "(", "v", ")", ")", "\n", "\n", "", "", "if", "not", "self", ".", "training", ":", "\n", "            ", "v", "=", "F", ".", "normalize", "(", "v", ")", "\n", "return", "v", "\n", "\n", "", "y", "=", "self", ".", "classifier", "(", "v", ")", "\n", "\n", "if", "self", ".", "loss", "==", "'softmax'", ":", "\n", "            ", "return", "y", "\n", "", "elif", "self", ".", "loss", "==", "'kd_mmd'", "or", "self", ".", "loss", "==", "'mmd'", "or", "self", ".", "loss", "==", "'triplet'", ":", "\n", "            ", "return", "y", ",", "v", "\n", "", "elif", "self", ".", "loss", "==", "'kd_reid'", ":", "\n", "# Margin ReLU if teacher, 1x1 Conv for student", "\n", "            ", "if", "self", ".", "teacher_arch", "==", "None", ":", "\n", "                ", "f1", "=", "torch", ".", "max", "(", "f1", ",", "getattr", "(", "self", ",", "'margin%d'", "%", "(", "1", ")", ")", ")", "\n", "f1", "=", "f1", ".", "view", "(", "f1", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "f2", "=", "torch", ".", "max", "(", "f2", ",", "getattr", "(", "self", ",", "'margin%d'", "%", "(", "2", ")", ")", ")", "\n", "f2", "=", "f2", ".", "view", "(", "f2", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "f3", "=", "torch", ".", "max", "(", "f3", ",", "getattr", "(", "self", ",", "'margin%d'", "%", "(", "3", ")", ")", ")", "\n", "f3", "=", "f3", ".", "view", "(", "f3", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "f4", "=", "torch", ".", "max", "(", "f4", ",", "getattr", "(", "self", ",", "'margin%d'", "%", "(", "4", ")", ")", ")", "\n", "f4", "=", "f4", ".", "view", "(", "f4", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "f1", "=", "self", ".", "feat_matcher_list", "[", "0", "]", "(", "f1", ")", "\n", "f1", "=", "f1", ".", "view", "(", "f1", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "f2", "=", "self", ".", "feat_matcher_list", "[", "1", "]", "(", "f2", ")", "\n", "f2", "=", "f2", ".", "view", "(", "f2", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "f3", "=", "self", ".", "feat_matcher_list", "[", "2", "]", "(", "f3", ")", "\n", "f3", "=", "f3", ".", "view", "(", "f3", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "f4", "=", "self", ".", "feat_matcher_list", "[", "3", "]", "(", "f4", ")", "\n", "f4", "=", "f4", ".", "view", "(", "f4", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "return", "[", "f1", ",", "f2", ",", "f3", ",", "f4", "]", ",", "v", ",", "y", "\n", "\n", "", "elif", "self", ".", "loss", "==", "'feat_kd'", ":", "\n", "            ", "f1", "=", "F", ".", "relu", "(", "f1", ")", "\n", "f1", "=", "f1", ".", "view", "(", "f1", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "f2", "=", "F", ".", "relu", "(", "f2", ")", "\n", "f2", "=", "f2", ".", "view", "(", "f2", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "f3", "=", "F", ".", "relu", "(", "f3", ")", "\n", "f3", "=", "f3", ".", "view", "(", "f3", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "f4", "=", "F", ".", "relu", "(", "f4", ")", "\n", "f4", "=", "f4", ".", "view", "(", "f4", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "[", "f1", ",", "f2", ",", "f3", ",", "f4", "]", ",", "v", ",", "y", "\n", "", "elif", "self", ".", "loss", "==", "'adv_feat_kd'", ":", "\n", "            ", "f1", "=", "F", ".", "relu", "(", "f1", ")", "\n", "f2", "=", "F", ".", "relu", "(", "f2", ")", "\n", "f3", "=", "F", ".", "relu", "(", "f3", ")", "\n", "f4", "=", "F", ".", "relu", "(", "f4", ")", "\n", "return", "[", "f1", ",", "f2", ",", "f3", ",", "f4", "]", ",", "v", ",", "y", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\"Unsupported loss: {}\"", ".", "format", "(", "self", ".", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.conv3x3": [[27, 38], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.conv1x1": [[41, 45], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.convert_2_multi_head": [[493, 501], ["torch.nn.ModuleList", "range", "copy.deepcopy", "copy.deepcopy", "model.feat_fc_multi.append", "torch.nn.Sequential"], "function", ["None"], ["", "", "", "def", "convert_2_multi_head", "(", "model", ",", "multi_head", ")", ":", "\n", "    ", "model", ".", "multi_head", "=", "True", "\n", "model", ".", "feat_fc_multi", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "t", "in", "range", "(", "multi_head", ")", ":", "\n", "        ", "feat_tmp", "=", "copy", ".", "deepcopy", "(", "model", ".", "feat", ")", "\n", "feat_bn_tmp", "=", "copy", ".", "deepcopy", "(", "model", ".", "feat_bn", ")", "\n", "C", "=", "[", "feat_tmp", ",", "feat_bn_tmp", "]", "\n", "model", ".", "feat_fc_multi", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "C", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.init_pretrained_weights": [[502, 516], ["torch.load_url", "model.state_dict", "model.state_dict.update", "model.load_state_dict", "model_zoo.load_url.items", "model_dict[].size", "v.size"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update"], ["", "", "def", "init_pretrained_weights", "(", "model", ",", "model_url", ")", ":", "\n", "    ", "\"\"\"Initializes model with pretrained weights.\n    \n    Layers that don't match with pretrained layers in name or size are kept unchanged.\n    \"\"\"", "\n", "pretrain_dict", "=", "model_zoo", ".", "load_url", "(", "model_url", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrain_dict", "=", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "model_dict", "and", "model_dict", "[", "k", "]", ".", "size", "(", ")", "==", "v", ".", "size", "(", ")", "\n", "}", "\n", "model_dict", ".", "update", "(", "pretrain_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.resnet18": [[518, 536], ["resnet.ResNet", "resnet.ResNet.get_margin_from_bn", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet.get_margin_from_bn", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.init_pretrained_weights"], ["", "def", "resnet18", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "teacher_arch", "=", "None", ",", "fc_dim", "=", "2048", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "BasicBlock", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dim", "=", "fc_dim", ",", "\n", "dropout_p", "=", "None", ",", "\n", "teacher_arch", "=", "teacher_arch", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnet18'", "]", ")", "\n", "\n", "", "model", ".", "margins", "=", "model", ".", "get_margin_from_bn", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.resnet34": [[538, 556], ["resnet.ResNet", "resnet.ResNet.get_margin_from_bn", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet.get_margin_from_bn", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.init_pretrained_weights"], ["", "def", "resnet34", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "teacher_arch", "=", "None", ",", "fc_dim", "=", "2048", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "BasicBlock", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dim", "=", "fc_dim", ",", "\n", "dropout_p", "=", "None", ",", "\n", "teacher_arch", "=", "teacher_arch", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnet34'", "]", ")", "\n", "\n", "", "model", ".", "margins", "=", "model", ".", "get_margin_from_bn", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.resnet50": [[557, 575], ["resnet.ResNet", "resnet.ResNet.get_margin_from_bn", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet.get_margin_from_bn", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.init_pretrained_weights"], ["", "def", "resnet50", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "teacher_arch", "=", "None", ",", "fc_dim", "=", "2048", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dim", "=", "fc_dim", ",", "\n", "dropout_p", "=", "None", ",", "\n", "teacher_arch", "=", "teacher_arch", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnet50'", "]", ")", "\n", "\n", "", "model", ".", "margins", "=", "model", ".", "get_margin_from_bn", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.resnet101": [[576, 594], ["resnet.ResNet", "resnet.ResNet.get_margin_from_bn", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet.get_margin_from_bn", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.init_pretrained_weights"], ["", "def", "resnet101", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "teacher_arch", "=", "None", ",", "fc_dim", "=", "2048", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dim", "=", "fc_dim", ",", "\n", "dropout_p", "=", "None", ",", "\n", "teacher_arch", "=", "teacher_arch", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnet101'", "]", ")", "\n", "\n", "", "model", ".", "margins", "=", "model", ".", "get_margin_from_bn", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.resnet152": [[595, 613], ["resnet.ResNet", "resnet.ResNet.get_margin_from_bn", "resnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.ResNet.get_margin_from_bn", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.resnet.init_pretrained_weights"], ["", "def", "resnet152", "(", "num_classes", ",", "loss", "=", "'softmax'", ",", "pretrained", "=", "True", ",", "teacher_arch", "=", "None", ",", "fc_dim", "=", "2048", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "block", "=", "Bottleneck", ",", "\n", "layers", "=", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "\n", "last_stride", "=", "2", ",", "\n", "fc_dim", "=", "fc_dim", ",", "\n", "dropout_p", "=", "None", ",", "\n", "teacher_arch", "=", "teacher_arch", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "model_urls", "[", "'resnet152'", "]", ")", "\n", "\n", "", "model", ".", "margins", "=", "model", ".", "get_margin_from_bn", "(", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.__init__.show_avai_models": [[28, 36], ["print", "list", "__model_factory.keys"], "function", ["None"], ["if", "pcgrad", ":", "\n", "        ", "optimizer", "=", "optim", ".", "PCGrad", "(", "optimizer", ")", "\n", "scheduler", "=", "None", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "optim", ".", "build_lr_scheduler", "(", "\n", "optimizer", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ",", "\n", "stepsize", "=", "stepsize", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.__init__.build_model": [[38, 72], ["list", "__model_factory.keys", "KeyError"], "function", ["None"], ["if", "path_model", "!=", "None", ":", "\n", "        ", "if", "spcl", ":", "\n", "            ", "convert_dsbn", "(", "model", ")", "\n", "", "if", "load_optim", "==", "False", ":", "\n", "# We use pretrained model to continue the training on the target domain", "\n", "            ", "start_epoch", "=", "utils", ".", "resume_from_checkpoint", "(", "path_model", ",", "model", ",", "optimizer", "=", "None", ")", "\n", "", "else", ":", "\n", "# We use pretrained model to continue the training on the target domain", "\n", "            ", "start_epoch", "=", "utils", ".", "resume_from_checkpoint", "(", "path_model", ",", "model", ",", "optimizer", ")", "\n", "", "", "if", "spcl", ":", "\n", "        ", "convert_bn", "(", "model", ")", "\n", "", "if", "fc_dim", ">", "0", "and", "multi_head", "!=", "0", ":", "\n", "        ", "torchreid", ".", "models", ".", "resnet", ".", "convert_2_multi_head", "(", "model", ",", "multi_head", "=", "multi_head", ")", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "return", "model", ",", "optimizer", ",", "scheduler", ",", "start_epoch", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine.__init__": [[34, 61], ["list", "torch.cuda.is_available", "engine.Engine.test_loader.keys"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "datamanager", ",", "\n", "model_student", "=", "None", ",", "\n", "optimizer_student", "=", "None", ",", "\n", "scheduler_student", "=", "None", ",", "\n", "models_teacher_list", "=", "[", "]", ",", "\n", "optimizer_teacher_list", "=", "[", "]", ",", "\n", "scheduler_teacher_list", "=", "[", "]", ",", "\n", "\n", "use_gpu", "=", "True", ",", "\n", "mmd_only", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "datamanager", "=", "datamanager", "\n", "self", ".", "model_student", "=", "model_student", "\n", "self", ".", "optimizer_student", "=", "optimizer_student", "\n", "self", ".", "scheduler_student", "=", "scheduler_student", "\n", "self", ".", "models_teacher_list", "=", "models_teacher_list", "\n", "self", ".", "optimizer_teacher_list", "=", "optimizer_teacher_list", "\n", "self", ".", "scheduler_teacher_list", "=", "scheduler_teacher_list", "\n", "self", ".", "use_gpu", "=", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_gpu", ")", "\n", "self", ".", "writer", "=", "None", "\n", "self", ".", "train_loader", "=", "self", ".", "datamanager", ".", "train_loader", "\n", "self", ".", "test_loader", "=", "self", ".", "datamanager", ".", "test_loader", "\n", "self", ".", "train_loader_t", "=", "self", ".", "datamanager", ".", "train_loader_t", "\n", "self", ".", "mmd_only", "=", "mmd_only", "\n", "self", ".", "target_names", "=", "list", "(", "self", ".", "test_loader", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine.run": [[62, 228], ["time.time", "print", "range", "round", "str", "print", "ValueError", "engine.Engine.test", "torch.utils.tensorboard.SummaryWriter", "engine.Engine.train", "print", "torchreid.utils.load_checkpoint", "engine.Engine.model_student.load_state_dict", "engine.Engine.test", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "os.exists", "datetime.timedelta", "engine.Engine.writer.close", "print", "engine.Engine.test", "engine.Engine._save_checkpoint", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "print", "os.join", "os.join", "os.join", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "print", "os.join", "os.join", "os.join", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "os.remove", "print", "time.time", "zip", "str", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "len", "engine.Engine._save_checkpoint", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine.test", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.load_checkpoint", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine.test", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.close", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine.test", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._save_checkpoint", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._save_checkpoint"], ["", "def", "run", "(", "\n", "self", ",", "\n", "save_dir", "=", "'log'", ",", "\n", "max_epoch", "=", "0", ",", "\n", "start_epoch", "=", "0", ",", "\n", "print_freq", "=", "10", ",", "\n", "fixbase_epoch", "=", "0", ",", "\n", "open_layers", "=", "None", ",", "\n", "start_eval", "=", "0", ",", "\n", "eval_freq", "=", "-", "1", ",", "\n", "test_only", "=", "False", ",", "\n", "dist_metric", "=", "'euclidean'", ",", "\n", "normalize_feature", "=", "False", ",", "\n", "visrank", "=", "False", ",", "\n", "visrank_topk", "=", "10", ",", "\n", "use_metric_cuhk03", "=", "False", ",", "\n", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ",", "\n", "rerank", "=", "False", ",", "\n", "use_tensorboard", "=", "True", ",", "\n", "eval_teachers", "=", "True", "\n", "\n", ")", ":", "\n", "        ", "r\"\"\"A unified pipeline for training and evaluating a model.\n\n        Args:\n            save_dir (str): directory to save model.\n            max_epoch (int): maximum epoch.\n            start_epoch (int, optional): starting epoch. Default is 0.\n            print_freq (int, optional): print_frequency. Default is 10.\n            fixbase_epoch (int, optional): number of epochs to train ``open_layers`` (new layers)\n                while keeping base layers frozen. Default is 0. ``fixbase_epoch`` is counted\n                in ``max_epoch``.\n            open_layers (str or list, optional): layers (attribute names) open for training.\n            start_eval (int, optional): from which epoch to start evaluation. Default is 0.\n            eval_freq (int, optional): evaluation frequency. Default is -1 (meaning evaluation\n                is only performed at the end of training).\n            test_only (bool, optional): if True, only runs evaluation on test datasets.\n                Default is False.\n            dist_metric (str, optional): distance metric used to compute distance matrix\n                between query and gallery. Default is \"euclidean\".\n            normalize_feature (bool, optional): performs L2 normalization on feature vectors before\n                computing feature distance. Default is False.\n            visrank (bool, optional): visualizes ranked results. Default is False. It is recommended to\n                enable ``visrank`` when ``test_only`` is True. The ranked images will be saved to\n                \"save_dir/visrank_dataset\", e.g. \"save_dir/visrank_market1501\".\n            visrank_topk (int, optional): top-k ranked images to be visualized. Default is 10.\n            use_metric_cuhk03 (bool, optional): use single-gallery-shot setting for cuhk03.\n                Default is False. This should be enabled when using cuhk03 classic split.\n            ranks (list, optional): cmc ranks to be computed. Default is [1, 5, 10, 20].\n            rerank (bool, optional): uses person re-ranking (by Zhong et al. CVPR'17).\n                Default is False. This is only enabled when test_only=True.\n            save_best_only (bool, optional): during training, save the best model on test set and last epoch.\n                Default is True to save storage.\n        \"\"\"", "\n", "\n", "if", "visrank", "and", "not", "test_only", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'visrank can be set to True only if test_only=True'", "\n", ")", "\n", "\n", "", "if", "test_only", ":", "\n", "            ", "self", ".", "test", "(", "\n", "0", ",", "\n", "dist_metric", "=", "dist_metric", ",", "\n", "normalize_feature", "=", "normalize_feature", ",", "\n", "visrank", "=", "visrank", ",", "\n", "visrank_topk", "=", "visrank_topk", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "use_metric_cuhk03", "=", "use_metric_cuhk03", ",", "\n", "ranks", "=", "ranks", ",", "\n", "rerank", "=", "rerank", "\n", ")", "\n", "return", "\n", "\n", "", "self", ".", "save_dir", "=", "save_dir", "\n", "if", "self", ".", "writer", "is", "None", "and", "use_tensorboard", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "save_dir", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "writer", "=", "None", "# Test with no tensorboard", "\n", "\n", "", "time_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "print", "(", "'=> Start training'", ")", "\n", "\n", "best_r1", "=", "0", "\n", "best_epoch", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "max_epoch", ")", ":", "\n", "\n", "            ", "self", ".", "train", "(", "\n", "epoch", ",", "\n", "max_epoch", ",", "\n", "self", ".", "writer", ",", "\n", "print_freq", "=", "print_freq", ",", "\n", "fixbase_epoch", "=", "fixbase_epoch", ",", "\n", "open_layers", "=", "open_layers", "\n", ")", "\n", "\n", "if", "(", "epoch", "+", "1", ")", ">=", "start_eval", "and", "eval_freq", ">", "0", "and", "(", "epoch", "+", "1", ")", "%", "eval_freq", "==", "0", "and", "(", "epoch", "+", "1", ")", "!=", "max_epoch", ":", "\n", "\n", "                ", "print", "(", "\"Test :\"", ")", "\n", "is_best", "=", "False", "\n", "rank1", ",", "mAP", "=", "self", ".", "test", "(", "\n", "epoch", ",", "\n", "dist_metric", "=", "dist_metric", ",", "\n", "normalize_feature", "=", "normalize_feature", ",", "\n", "visrank", "=", "visrank", ",", "\n", "visrank_topk", "=", "visrank_topk", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "use_metric_cuhk03", "=", "use_metric_cuhk03", ",", "\n", "ranks", "=", "ranks", ",", "\n", "eval_teachers", "=", "eval_teachers", "\n", ")", "\n", "\n", "if", "rank1", ">", "best_r1", ":", "\n", "                    ", "best_r1", "=", "rank1", "\n", "is_best", "=", "True", "\n", "best_epoch", "=", "epoch", "\n", "\n", "", "self", ".", "_save_checkpoint", "(", "# Student", "\n", "model", "=", "self", ".", "model_student", ",", "target_name", "=", "\"source_\"", "+", "self", ".", "datamanager", ".", "sources", "[", "0", "]", ",", "\n", "epoch", "=", "epoch", ",", "rank1", "=", "rank1", ",", "mAP", "=", "mAP", ",", "save_dir", "=", "save_dir", ",", "is_best", "=", "is_best", "\n", ")", "\n", "\n", "if", "len", "(", "self", ".", "models_teacher_list", ")", ">", "0", "and", "eval_teachers", ":", "\n", "                    ", "for", "m", ",", "n", "in", "zip", "(", "self", ".", "models_teacher_list", ",", "self", ".", "target_names", ")", ":", "\n", "                        ", "self", ".", "_save_checkpoint", "(", "model", "=", "m", ",", "target_name", "=", "\"target_\"", "+", "n", ",", "epoch", "=", "epoch", ",", "rank1", "=", "0", ",", "\n", "save_dir", "=", "save_dir", ")", "\n", "\n", "\n", "", "", "", "", "if", "max_epoch", ">", "0", ":", "\n", "            ", "print", "(", "'=> Final test with best model from epoch '", "+", "str", "(", "best_epoch", ")", ")", "\n", "checkpoint", "=", "load_checkpoint", "(", "osp", ".", "join", "(", "save_dir", ",", "'model-best.pth.tar'", ")", ")", "\n", "self", ".", "model_student", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "rank1", ",", "mAP", "=", "self", ".", "test", "(", "\n", "epoch", ",", "\n", "dist_metric", "=", "dist_metric", ",", "\n", "normalize_feature", "=", "normalize_feature", ",", "\n", "visrank", "=", "visrank", ",", "\n", "visrank_topk", "=", "visrank_topk", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "use_metric_cuhk03", "=", "use_metric_cuhk03", ",", "\n", "ranks", "=", "ranks", "\n", ")", "\n", "# Delete useless files", "\n", "if", "osp", ".", "exists", "(", "osp", ".", "join", "(", "save_dir", ",", "'checkpoint.pth.tar'", ")", ")", ":", "\n", "                ", "os", ".", "remove", "(", "osp", ".", "join", "(", "save_dir", ",", "'checkpoint.pth.tar'", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "osp", ".", "join", "(", "save_dir", ",", "'checkpoint.pth.tar'", ")", "+", "\" does not exist\"", ")", "\n", "", "if", "osp", ".", "exists", "(", "osp", ".", "join", "(", "save_dir", ",", "'gallery_features.pickle'", ")", ")", ":", "\n", "                ", "os", ".", "remove", "(", "osp", ".", "join", "(", "save_dir", ",", "'gallery_features.pickle'", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "osp", ".", "join", "(", "save_dir", ",", "'gallery_features.pickle'", ")", "+", "\" does not exist\"", ")", "\n", "", "if", "osp", ".", "exists", "(", "osp", ".", "join", "(", "save_dir", ",", "'query_features.pickle'", ")", ")", ":", "\n", "                ", "os", ".", "remove", "(", "osp", ".", "join", "(", "save_dir", ",", "'query_features.pickle'", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "osp", ".", "join", "(", "save_dir", ",", "'query_features.pickle'", ")", "+", "\" does not exist\"", ")", "\n", "\n", "", "", "elapsed", "=", "round", "(", "time", ".", "time", "(", ")", "-", "time_start", ")", "\n", "elapsed", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "elapsed", ")", ")", "\n", "print", "(", "'Elapsed {}'", ".", "format", "(", "elapsed", ")", ")", "\n", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine.train": [[229, 244], ["None"], "methods", ["None"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Performs training on source datasets for one epoch.\n\n        This will be called every epoch in ``run()``, e.g.\n\n        .. code-block:: python\n\n            for epoch in range(start_epoch, max_epoch):\n                self.train(some_arguments)\n\n        .. note::\n\n            This must be implemented in subclasses.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine.test": [[245, 304], ["list", "len", "len", "engine.Engine.test_loader.keys", "print", "engine.Engine._evaluate"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._evaluate"], ["", "def", "test", "(", "\n", "self", ",", "\n", "epoch", ",", "\n", "dist_metric", "=", "'euclidean'", ",", "\n", "normalize_feature", "=", "False", ",", "\n", "visrank", "=", "False", ",", "\n", "visrank_topk", "=", "10", ",", "\n", "save_dir", "=", "''", ",", "\n", "use_metric_cuhk03", "=", "False", ",", "\n", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ",", "\n", "rerank", "=", "False", ",", "\n", "eval_teachers", "=", "True", "\n", ")", ":", "\n", "        ", "r\"\"\"Tests model on target datasets.\n\n        .. note::\n\n            This function has been called in ``run()``.\n\n        .. note::\n\n            The test pipeline implemented in this function suits both image- and\n            video-reid. In general, a subclass of Engine only needs to re-implement\n            ``_extract_features()`` and ``_parse_data_for_eval()`` (most of the time),\n            but not a must. Please refer to the source code for more details.\n        \"\"\"", "\n", "\n", "targets", "=", "list", "(", "self", ".", "test_loader", ".", "keys", "(", ")", ")", "\n", "average_rank1", "=", "0", "\n", "average_mAP", "=", "0", "\n", "\n", "for", "name", "in", "targets", ":", "\n", "            ", "domain", "=", "'source'", "if", "name", "in", "self", ".", "datamanager", ".", "sources", "else", "'target'", "\n", "print", "(", "'##### Evaluating {} ({}) #####'", ".", "format", "(", "name", ",", "domain", ")", ")", "\n", "query_loader", "=", "self", ".", "test_loader", "[", "name", "]", "[", "'query'", "]", "\n", "gallery_loader", "=", "self", ".", "test_loader", "[", "name", "]", "[", "'gallery'", "]", "\n", "rank1", ",", "mAP", "=", "self", ".", "_evaluate", "(", "\n", "epoch", ",", "\n", "dataset_name", "=", "name", ",", "\n", "query_loader", "=", "query_loader", ",", "\n", "gallery_loader", "=", "gallery_loader", ",", "\n", "dist_metric", "=", "dist_metric", ",", "\n", "normalize_feature", "=", "normalize_feature", ",", "\n", "visrank", "=", "visrank", ",", "\n", "visrank_topk", "=", "visrank_topk", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "use_metric_cuhk03", "=", "use_metric_cuhk03", ",", "\n", "ranks", "=", "ranks", ",", "\n", "rerank", "=", "rerank", ",", "\n", "eval_teachers", "=", "eval_teachers", "\n", ")", "\n", "\n", "average_rank1", "+=", "rank1", "\n", "average_mAP", "+=", "mAP", "\n", "\n", "", "average_rank1", "/=", "len", "(", "targets", ")", "\n", "average_mAP", "/=", "len", "(", "targets", ")", "\n", "\n", "return", "average_rank1", ",", "average_mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._evaluate": [[305, 469], ["torch.no_grad", "torchreid.utils.AverageMeter", "engine.Engine.target_names.index", "print", "engine.Engine._evaluate._feature_extraction"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_evaluate", "(", "\n", "self", ",", "\n", "epoch", ",", "\n", "dataset_name", "=", "''", ",", "\n", "query_loader", "=", "None", ",", "\n", "gallery_loader", "=", "None", ",", "\n", "dist_metric", "=", "'euclidean'", ",", "\n", "normalize_feature", "=", "False", ",", "\n", "visrank", "=", "False", ",", "\n", "visrank_topk", "=", "10", ",", "\n", "save_dir", "=", "''", ",", "\n", "use_metric_cuhk03", "=", "False", ",", "\n", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ",", "\n", "rerank", "=", "False", ",", "\n", "eval_teachers", "=", "True", "\n", ")", ":", "\n", "        ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "trgt_idx", "=", "self", ".", "target_names", ".", "index", "(", "dataset_name", ")", "\n", "\n", "def", "_feature_extraction", "(", "data_loader", ",", "model", ",", "target", "=", "None", ")", ":", "\n", "            ", "f_", ",", "pids_", ",", "camids_", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "imgs", ",", "pids", ",", "camids", "=", "self", ".", "_parse_data_for_eval", "(", "data", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "                    ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "features", "=", "self", ".", "_extract_features", "(", "imgs", ",", "model", ",", "target", "=", "target", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "features", "=", "features", ".", "data", ".", "cpu", "(", ")", "\n", "f_", ".", "append", "(", "features", ")", "\n", "pids_", ".", "extend", "(", "pids", ")", "\n", "camids_", ".", "extend", "(", "camids", ")", "\n", "", "f_", "=", "torch", ".", "cat", "(", "f_", ",", "0", ")", "\n", "pids_", "=", "np", ".", "asarray", "(", "pids_", ")", "\n", "camids_", "=", "np", ".", "asarray", "(", "camids_", ")", "\n", "return", "f_", ",", "pids_", ",", "camids_", "\n", "\n", "# Evaluate one time using the Student model (main objective)", "\n", "", "print", "(", "'Extracting features from query set using model_student...'", ")", "\n", "qf", ",", "q_pids", ",", "q_camids", "=", "_feature_extraction", "(", "query_loader", ",", "self", ".", "model_student", ",", "trgt_idx", ")", "\n", "with", "open", "(", "save_dir", "+", "'/query_features.pickle'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "qf", ",", "q_pids", "]", ",", "f", ")", "\n", "", "print", "(", "'Done, obtained {}-by-{} matrix'", ".", "format", "(", "qf", ".", "size", "(", "0", ")", ",", "qf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "print", "(", "'Extracting features from gallery set using model_student...'", ")", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "_feature_extraction", "(", "gallery_loader", ",", "self", ".", "model_student", ",", "trgt_idx", ")", "\n", "with", "open", "(", "save_dir", "+", "'/gallery_features.pickle'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "[", "gf", ",", "g_pids", "]", ",", "f", ")", "\n", "", "print", "(", "'Done, obtained {}-by-{} matrix'", ".", "format", "(", "gf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "print", "(", "'Speed: {:.4f} sec/batch'", ".", "format", "(", "batch_time", ".", "avg", ")", ")", "\n", "\n", "if", "normalize_feature", ":", "\n", "            ", "print", "(", "'Normalzing features with L2 norm ...'", ")", "\n", "qf", "=", "F", ".", "normalize", "(", "qf", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "gf", "=", "F", ".", "normalize", "(", "gf", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "print", "(", "\n", "'Computing distance matrix with metric={} ...'", ".", "format", "(", "dist_metric", ")", "\n", ")", "\n", "distmat", "=", "metrics", ".", "compute_distance_matrix", "(", "qf", ",", "gf", ",", "dist_metric", ")", "\n", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "\n", "if", "rerank", ":", "\n", "            ", "print", "(", "'Applying person re-ranking ...'", ")", "\n", "distmat_qq", "=", "metrics", ".", "compute_distance_matrix", "(", "qf", ",", "qf", ",", "dist_metric", ")", "\n", "distmat_gg", "=", "metrics", ".", "compute_distance_matrix", "(", "gf", ",", "gf", ",", "dist_metric", ")", "\n", "distmat", "=", "re_ranking", "(", "distmat", ",", "distmat_qq", ",", "distmat_gg", ")", "\n", "\n", "", "print", "(", "'Computing CMC and mAP ...'", ")", "\n", "cmc", ",", "mAP", "=", "metrics", ".", "evaluate_rank", "(", "\n", "distmat", ",", "\n", "q_pids", ",", "\n", "g_pids", ",", "\n", "q_camids", ",", "\n", "g_camids", ",", "\n", "use_metric_cuhk03", "=", "use_metric_cuhk03", ",", "\n", "dataset_name", "=", "dataset_name", "\n", ")", "\n", "\n", "print", "(", "'** Results **'", ")", "\n", "print", "(", "'mAP: {:.1%}'", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "'CMC curve'", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "            ", "print", "(", "'Rank-{:<3}: {:.1%}'", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "\n", "", "if", "visrank", ":", "\n", "            ", "visualize_ranked_results", "(", "\n", "distmat", ",", "\n", "self", ".", "datamanager", ".", "\n", "return_query_and_gallery_by_name", "(", "dataset_name", ")", ",", "\n", "self", ".", "datamanager", ".", "data_type", ",", "\n", "width", "=", "self", ".", "datamanager", ".", "width", ",", "\n", "height", "=", "self", ".", "datamanager", ".", "height", ",", "\n", "save_dir", "=", "osp", ".", "join", "(", "save_dir", ",", "'visrank_'", "+", "dataset_name", ")", ",", "\n", "topk", "=", "visrank_topk", "\n", ")", "\n", "\n", "", "cmc_student", "=", "cmc", "[", "0", "]", "\n", "mAP_student", "=", "mAP", "\n", "\n", "if", "len", "(", "self", ".", "models_teacher_list", ")", ">", "0", "and", "eval_teachers", ":", "\n", "# Evalute one time using the Teacher model (debug objective)", "\n", "            ", "print", "(", "'Extracting features from query set using model_teacher...'", ")", "\n", "qf", ",", "q_pids", ",", "q_camids", "=", "_feature_extraction", "(", "query_loader", ",", "self", ".", "models_teacher_list", "[", "trgt_idx", "]", ")", "\n", "with", "open", "(", "save_dir", "+", "'/query_features.pickle'", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "[", "qf", ",", "q_pids", "]", ",", "f", ")", "\n", "", "print", "(", "'Done, obtained {}-by-{} matrix'", ".", "format", "(", "qf", ".", "size", "(", "0", ")", ",", "qf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "print", "(", "'Extracting features from gallery set using model_teacher...'", ")", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "_feature_extraction", "(", "gallery_loader", ",", "self", ".", "models_teacher_list", "[", "trgt_idx", "]", ")", "\n", "with", "open", "(", "save_dir", "+", "'/gallery_features.pickle'", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "[", "gf", ",", "g_pids", "]", ",", "f", ")", "\n", "", "print", "(", "'Done, obtained {}-by-{} matrix'", ".", "format", "(", "gf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "print", "(", "'Speed: {:.4f} sec/batch'", ".", "format", "(", "batch_time", ".", "avg", ")", ")", "\n", "\n", "if", "normalize_feature", ":", "\n", "                ", "print", "(", "'Normalzing features with L2 norm ...'", ")", "\n", "qf", "=", "F", ".", "normalize", "(", "qf", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "gf", "=", "F", ".", "normalize", "(", "gf", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "print", "(", "\n", "'Computing distance matrix with metric={} ...'", ".", "format", "(", "dist_metric", ")", "\n", ")", "\n", "distmat", "=", "metrics", ".", "compute_distance_matrix", "(", "qf", ",", "gf", ",", "dist_metric", ")", "\n", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "\n", "if", "rerank", ":", "\n", "                ", "print", "(", "'Applying person re-ranking ...'", ")", "\n", "distmat_qq", "=", "metrics", ".", "compute_distance_matrix", "(", "qf", ",", "qf", ",", "dist_metric", ")", "\n", "distmat_gg", "=", "metrics", ".", "compute_distance_matrix", "(", "gf", ",", "gf", ",", "dist_metric", ")", "\n", "distmat", "=", "re_ranking", "(", "distmat", ",", "distmat_qq", ",", "distmat_gg", ")", "\n", "\n", "", "print", "(", "'Computing CMC and mAP ...'", ")", "\n", "cmc", ",", "mAP", "=", "metrics", ".", "evaluate_rank", "(", "\n", "distmat", ",", "\n", "q_pids", ",", "\n", "g_pids", ",", "\n", "q_camids", ",", "\n", "g_camids", ",", "\n", "use_metric_cuhk03", "=", "use_metric_cuhk03", "\n", ")", "\n", "\n", "print", "(", "'** Results **'", ")", "\n", "print", "(", "'mAP: {:.1%}'", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "'CMC curve'", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "                ", "print", "(", "'Rank-{:<3}: {:.1%}'", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "\n", "", "if", "visrank", ":", "\n", "                ", "visualize_ranked_results", "(", "\n", "distmat", ",", "\n", "self", ".", "datamanager", ".", "\n", "return_query_and_gallery_by_name", "(", "dataset_name", ")", ",", "\n", "self", ".", "datamanager", ".", "data_type", ",", "\n", "width", "=", "self", ".", "datamanager", ".", "width", ",", "\n", "height", "=", "self", ".", "datamanager", ".", "height", ",", "\n", "save_dir", "=", "osp", ".", "join", "(", "save_dir", ",", "'visrank_'", "+", "dataset_name", "+", "'_teacher'", ")", ",", "\n", "topk", "=", "visrank_topk", "\n", ")", "\n", "\n", "", "", "return", "cmc_student", ",", "mAP_student", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss": [[470, 478], ["criterion", "torchreid.losses.DeepSupervision", "criterion"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.__init__.DeepSupervision"], ["", "def", "_compute_loss", "(", "self", ",", "criterion", ",", "outputs", ",", "targets", ",", "deepsuper", "=", "False", ",", "source_only", "=", "False", ")", ":", "\n", "        ", "if", "source_only", ":", "\n", "            ", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "", "elif", "deepsuper", ":", "\n", "            ", "loss", "=", "DeepSupervision", "(", "criterion", ",", "outputs", ",", "targets", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._extract_features": [[479, 482], ["model.eval", "model"], "methods", ["None"], ["", "def", "_extract_features", "(", "self", ",", "input", ",", "model", ",", "target", "=", "None", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "# put in eval mode", "\n", "return", "model", "(", "input", ",", "target", "=", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._parse_data_for_train": [[483, 487], ["None"], "methods", ["None"], ["", "def", "_parse_data_for_train", "(", "self", ",", "data", ")", ":", "\n", "        ", "imgs", "=", "data", "[", "0", "]", "\n", "pids", "=", "data", "[", "1", "]", "\n", "return", "imgs", ",", "pids", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._parse_data_for_eval": [[488, 493], ["None"], "methods", ["None"], ["", "def", "_parse_data_for_eval", "(", "self", ",", "data", ")", ":", "\n", "        ", "imgs", "=", "data", "[", "0", "]", "\n", "pids", "=", "data", "[", "1", "]", "\n", "camids", "=", "data", "[", "2", "]", "\n", "return", "imgs", ",", "pids", ",", "camids", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._save_checkpoint": [[494, 508], ["torchreid.utils.save_checkpoint", "model.state_dict", "engine.Engine.optimizer_student.state_dict", "engine.Engine.scheduler_student.state_dict"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.save_checkpoint"], ["", "def", "_save_checkpoint", "(", "self", ",", "model", ",", "target_name", ",", "epoch", ",", "rank1", ",", "save_dir", ",", "mAP", "=", "0", ",", "is_best", "=", "False", ")", ":", "\n", "        ", "save_checkpoint", "(", "\n", "model", ",", "\n", "{", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'rank1'", ":", "rank1", ",", "\n", "'mAP'", ":", "mAP", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer_student", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "self", ".", "scheduler_student", ".", "state_dict", "(", ")", "if", "(", "self", ".", "scheduler_student", "!=", "None", ")", "else", "None", ",", "\n", "}", ",", "\n", "save_dir", ",", "\n", "is_best", "=", "is_best", ",", "\n", "target_name", "=", "target_name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.KD_batch_engine.StoreAverageMeters.__init__": [[16, 32], ["torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "losses_dmmd_teacher", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_ce_teacher", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_da", "=", "AverageMeter", "(", ")", "\n", "\n", "self", ".", "losses_ce_student", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_triplet_student", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_dmmd_student", "=", "AverageMeter", "(", ")", "\n", "\n", "self", ".", "losses_kd_source", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_kd_target", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_kd", "=", "AverageMeter", "(", ")", "\n", "\n", "\n", "self", ".", "batch_time", "=", "AverageMeter", "(", ")", "\n", "self", ".", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.KD_batch_engine.MTDAEnginePerBatch.__init__": [[36, 87], ["engine.Engine.__init__", "torchreid.losses.TripletLoss", "torchreid.losses.CrossEntropyLoss", "torchreid.losses.KLDivergenceLoss", "torchreid.losses.MaximumMeanDiscrepancy", "torchreid.losses.MarginLoss", "torchreid.losses.LogEuclidLoss"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "datamanager", ",", "\n", "model_student", ",", "\n", "optimizer_student", ",", "\n", "scheduler_student", "=", "None", ",", "\n", "models_teacher_list", "=", "[", "]", ",", "\n", "optimizer_teacher_list", "=", "[", "]", ",", "\n", "scheduler_teacher_list", "=", "[", "]", ",", "\n", "margin", "=", "0.3", ",", "\n", "use_gpu", "=", "True", ",", "\n", "label_smooth", "=", "True", ",", "\n", "mmd_only", "=", "True", ",", "\n", "kd_style", "=", "'all'", ",", "\n", "lda_weight", "=", "0", ",", "\n", "lkds_weight", "=", "0", ",", "\n", "lkdt_weight", "=", "1", ",", "\n", "target_order", "=", "'random'", ",", "\n", "log_loss", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "MTDAEnginePerBatch", ",", "self", ")", ".", "__init__", "(", "\n", "datamanager", ",", "\n", "model_student", ",", "optimizer_student", ",", "scheduler_student", ",", "\n", "models_teacher_list", ",", "optimizer_teacher_list", ",", "scheduler_teacher_list", ",", "\n", "use_gpu", ",", "mmd_only", ")", "\n", "\n", "self", ".", "starting_value", "=", "0.1", "\n", "self", ".", "final_value", "=", "0.8", "\n", "self", ".", "kd_style", "=", "kd_style", "\n", "self", ".", "lda_weight", "=", "lda_weight", "\n", "self", ".", "lkds_weight", "=", "lkds_weight", "\n", "self", ".", "lkdt_weight", "=", "lkdt_weight", "\n", "self", ".", "target_order", "=", "target_order", "\n", "self", ".", "log_loss", "=", "log_loss", "\n", "\n", "self", ".", "criterion_t", "=", "TripletLoss", "(", "margin", "=", "margin", ")", "\n", "self", ".", "criterion_x", "=", "CrossEntropyLoss", "(", "\n", "num_classes", "=", "self", ".", "datamanager", ".", "num_train_pids", ",", "\n", "use_gpu", "=", "self", ".", "use_gpu", ",", "\n", "label_smooth", "=", "label_smooth", "\n", ")", "\n", "self", ".", "criterion_kl", "=", "KLDivergenceLoss", "(", ")", "\n", "\n", "self", ".", "criterion_mmd", "=", "MaximumMeanDiscrepancy", "(", "\n", "instances", "=", "self", ".", "datamanager", ".", "train_loader", ".", "sampler", ".", "num_instances", ",", "\n", "batch_size", "=", "self", ".", "datamanager", ".", "train_loader", ".", "batch_size", ",", "\n", "global_only", "=", "False", ",", "\n", "distance_only", "=", "False", "\n", ")", "\n", "self", ".", "criterion_margin", "=", "MarginLoss", "(", ")", "\n", "self", ".", "criterion_log_euclid", "=", "LogEuclidLoss", "(", "log", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.KD_batch_engine.MTDAEnginePerBatch.train": [[88, 314], ["KD_batch_engine.StoreAverageMeters", "KD_batch_engine.MTDAEnginePerBatch.model_student.train", "time.time", "iter", "KD_batch_engine.MTDAEnginePerBatch.model_student.train", "print", "torchreid.utils.open_specified_layers", "torchreid.utils.open_all_layers", "iter", "iter_t_list.append", "len", "model_t.train", "range", "len", "len", "KD_batch_engine.MTDAEnginePerBatch._parse_data_for_train", "len", "enumerate", "KD_batch_engine.MTDAEnginePerBatch.optimizer_student.zero_grad", "time.time", "KD_batch_engine.MTDAEnginePerBatch.scheduler_student.step", "iter.next", "imgs.cuda.cuda.cuda", "pids.cuda.cuda.cuda", "KD_batch_engine.MTDAEnginePerBatch._parse_data_for_train", "numpy.argsort", "KD_batch_engine.MTDAEnginePerBatch.model_student", "KD_batch_engine.MTDAEnginePerBatch.model_student", "StoreAverageMeters.batch_time.update", "StoreAverageMeters.losses_kd.update", "loss_kd.backward", "KD_batch_engine.MTDAEnginePerBatch.optimizer_student.step", "KD_batch_engine.MTDAEnginePerBatch.optimizer_student.zero_grad", "writer.add_scalar", "str", "print", "iter", "iter.next", "iter.next", "imgs_t[].cuda", "KD_batch_engine.MTDAEnginePerBatch._compute_loss", "loss_mmd_global.item", "len", "numpy.arange", "torch.no_grad", "KD_batch_engine.MTDAEnginePerBatch._compute_loss", "KD_batch_engine.MTDAEnginePerBatch._compute_loss", "KD_batch_engine.MTDAEnginePerBatch._compute_loss", "StoreAverageMeters.losses_da.update", "StoreAverageMeters.losses_kd_source.update", "StoreAverageMeters.losses_kd_target.update", "loss_kd.item", "pids.cuda.cuda.size", "datetime.timedelta", "iter", "iter.next", "torch.no_grad", "KD_batch_engine.MTDAEnginePerBatch.model_student", "KD_batch_engine.MTDAEnginePerBatch.model_student", "len", "numpy.arange", "numpy.random.shuffle", "l_da.item", "pids.cuda.cuda.size", "len", "enumerate", "KD_batch_engine.MTDAEnginePerBatch._compute_loss", "l_kd_source.item", "pids.cuda.cuda.size", "len", "enumerate", "KD_batch_engine.MTDAEnginePerBatch._compute_loss", "l_kd_target.item", "pids.cuda.cuda.size", "time.time", "len", "zip", "KD_batch_engine.MTDAEnginePerBatch._compute_loss", "zip", "KD_batch_engine.MTDAEnginePerBatch._compute_loss", "str", "int"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.open_specified_layers", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.open_all_layers", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._parse_data_for_train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.zero_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.step", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._parse_data_for_train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.Logm.backward", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.step", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.zero_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss"], ["", "def", "train", "(", "\n", "self", ",", "\n", "epoch", ",", "\n", "max_epoch", ",", "\n", "writer", ",", "\n", "print_freq", "=", "10", ",", "\n", "fixbase_epoch", "=", "0", ",", "\n", "open_layers", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "avg_meter_obj", "=", "StoreAverageMeters", "(", ")", "\n", "\n", "self", ".", "model_student", ".", "train", "(", ")", "\n", "if", "(", "epoch", "+", "1", ")", "<=", "fixbase_epoch", "and", "open_layers", "is", "not", "None", ":", "\n", "            ", "print", "(", "\n", "'* Only train {} (epoch: {}/{})'", ".", "format", "(", "\n", "open_layers", ",", "epoch", "+", "1", ",", "fixbase_epoch", "\n", ")", "\n", ")", "\n", "open_specified_layers", "(", "self", ".", "model_student", ",", "open_layers", ")", "\n", "", "else", ":", "\n", "            ", "open_all_layers", "(", "self", ".", "model_student", ")", "\n", "\n", "", "batch_size", "=", "self", ".", "datamanager", ".", "train_loader", ".", "batch_size", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "num_batches_target", "=", "0", "\n", "iter_t_list", "=", "[", "]", "\n", "longest_loader", "=", "0", "\n", "for", "aLoader", "in", "self", ".", "datamanager", ".", "list_train_loader_t", ":", "\n", "            ", "if", "(", "len", "(", "aLoader", ")", ">", "longest_loader", ")", ":", "\n", "                ", "longest_loader", "=", "len", "(", "aLoader", ")", "\n", "", "tmp_iter", "=", "iter", "(", "aLoader", ")", "\n", "iter_t_list", ".", "append", "(", "tmp_iter", ")", "\n", "num_batches_target", "+=", "len", "(", "aLoader", ")", "\n", "\n", "", "iter_s", "=", "iter", "(", "self", ".", "train_loader", ")", "\n", "\n", "self", ".", "model_student", ".", "train", "(", ")", "\n", "for", "model_t", "in", "self", ".", "models_teacher_list", ":", "\n", "            ", "model_t", ".", "train", "(", ")", "\n", "\n", "for", "batch_idx", "in", "range", "(", "1", ",", "longest_loader", "+", "1", ")", ":", "\n", "\n", "                ", "try", ":", "\n", "                    ", "data", "=", "iter_s", ".", "next", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "iter_s", "=", "iter", "(", "self", ".", "train_loader", ")", "\n", "data", "=", "iter_s", ".", "next", "(", ")", "\n", "", "imgs", ",", "pids", "=", "self", ".", "_parse_data_for_train", "(", "data", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "                    ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "pids", "=", "pids", ".", "cuda", "(", ")", "\n", "\n", "# load all batches for all targets", "\n", "", "target_num", "=", "len", "(", "self", ".", "datamanager", ".", "targets", ")", "\n", "data_t", "=", "[", "None", "]", "*", "target_num", "\n", "imgs_t", "=", "[", "None", "]", "*", "target_num", "\n", "pids_t", "=", "[", "None", "]", "*", "target_num", "\n", "dist", "=", "[", "None", "]", "*", "target_num", "\n", "for", "t", ",", "it", "in", "enumerate", "(", "iter_t_list", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "data_t", "[", "t", "]", "=", "it", ".", "next", "(", ")", "\n", "", "except", "StopIteration", ":", "\n", "                        ", "it", "=", "iter", "(", "self", ".", "datamanager", ".", "list_train_loader_t", "[", "t", "]", ")", "\n", "data_t", "[", "t", "]", "=", "it", ".", "next", "(", ")", "\n", "\n", "", "imgs_t", "[", "t", "]", ",", "pids_t", "[", "t", "]", "=", "self", ".", "_parse_data_for_train", "(", "data_t", "[", "t", "]", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "                        ", "imgs_t", "[", "t", "]", "=", "imgs_t", "[", "t", "]", ".", "cuda", "(", ")", "\n", "\n", "", "if", "self", ".", "target_order", "==", "'shift'", ":", "\n", "                        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "features_Source_Student", ",", "pre_class_features_Source_Student", ",", "outputs_Source_Student", "=", "self", ".", "model_student", "(", "\n", "imgs", ",", "target", "=", "t", ")", "\n", "features_Target_Student", ",", "pre_class_features_Target_Student", ",", "outputs_Target_Student", "=", "self", ".", "model_student", "(", "\n", "imgs_t", "[", "t", "]", ",", "target", "=", "t", ")", "\n", "", "_", ",", "_", ",", "loss_mmd_global", "=", "self", ".", "_compute_loss", "(", "\n", "criterion", "=", "self", ".", "criterion_mmd", ",", "\n", "outputs", "=", "pre_class_features_Source_Student", ",", "\n", "targets", "=", "pre_class_features_Target_Student", "\n", ")", "\n", "dist", "[", "t", "]", "=", "loss_mmd_global", ".", "item", "(", ")", "\n", "", "", "if", "self", ".", "target_order", "==", "'shift'", ":", "\n", "                    ", "iteration_order", "=", "np", ".", "argsort", "(", "dist", ")", "\n", "", "elif", "self", ".", "target_order", "==", "'fixed'", ":", "\n", "                    ", "target_num", "=", "len", "(", "self", ".", "datamanager", ".", "targets", ")", "\n", "iteration_order", "=", "np", ".", "arange", "(", "target_num", ")", "\n", "", "elif", "self", ".", "target_order", "==", "'random'", ":", "\n", "                    ", "target_num", "=", "len", "(", "self", ".", "datamanager", ".", "targets", ")", "\n", "iteration_order", "=", "np", ".", "arange", "(", "target_num", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "iteration_order", ")", "\n", "\n", "", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "\n", "for", "ix", "in", "iteration_order", ":", "\n", "\n", "                    ", "features_Source_Student", ",", "pre_class_features_Source_Student", ",", "outputs_Source_Student", "=", "self", ".", "model_student", "(", "\n", "imgs", ",", "target", "=", "ix", ")", "\n", "features_Target_Student", ",", "pre_class_features_Target_Student", ",", "outputs_Target_Student", "=", "self", ".", "model_student", "(", "\n", "imgs_t", "[", "ix", "]", ",", "target", "=", "ix", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "features_Source_Teacher", ",", "pre_class_features_Source_Teacher", ",", "outputs_Source_Teacher", "=", "self", ".", "models_teacher_list", "[", "ix", "]", "(", "imgs", ",", "target", "=", "ix", ")", "\n", "features_Target_Teacher", ",", "pre_class_features_Target_Teacher", ",", "outputs_Target_Teacher", "=", "self", ".", "models_teacher_list", "[", "ix", "]", "(", "imgs_t", "[", "ix", "]", ",", "target", "=", "ix", ")", "\n", "\n", "", "if", "self", ".", "lda_weight", ">", "0", ":", "\n", "                        ", "loss_mmd_wc", ",", "loss_mmd_bc", ",", "loss_mmd_global", "=", "self", ".", "_compute_loss", "(", "\n", "criterion", "=", "self", ".", "criterion_mmd", ",", "\n", "outputs", "=", "pre_class_features_Source_Student", ",", "\n", "targets", "=", "pre_class_features_Target_Student", "\n", ")", "\n", "l_d_mmd_student_source_target", "=", "loss_mmd_wc", "+", "loss_mmd_bc", "+", "loss_mmd_global", "\n", "\n", "loss_t_student", "=", "self", ".", "_compute_loss", "(", "criterion", "=", "self", ".", "criterion_t", ",", "\n", "outputs", "=", "pre_class_features_Source_Student", ",", "\n", "targets", "=", "pids", ")", "# source triplet", "\n", "loss_x_student", "=", "self", ".", "_compute_loss", "(", "criterion", "=", "self", ".", "criterion_x", ",", "outputs", "=", "outputs_Source_Student", ",", "\n", "targets", "=", "pids", ")", "\n", "\n", "l_da", "=", "self", ".", "lda_weight", "*", "(", "l_d_mmd_student_source_target", "+", "loss_x_student", "+", "loss_t_student", ")", "/", "100", "\n", "avg_meter_obj", ".", "losses_da", ".", "update", "(", "l_da", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                        ", "l_da", "=", "0", "\n", "\n", "", "if", "self", ".", "lkds_weight", ">", "0", ":", "\n", "                        ", "l_margin_source_feat", "=", "0", "\n", "l_euclid_s", "=", "0", "\n", "if", "self", ".", "kd_style", "!=", "'only_outputs'", ":", "\n", "                            ", "feat_num", "=", "len", "(", "features_Source_Teacher", ")", "\n", "for", "j", ",", "(", "feat_s", ",", "feat_t", ")", "in", "enumerate", "(", "zip", "(", "features_Source_Student", ",", "features_Source_Teacher", ")", ")", ":", "\n", "                                ", "loss_margin_s", "=", "self", ".", "_compute_loss", "(", "\n", "criterion", "=", "self", ".", "criterion_margin", ",", "\n", "outputs", "=", "feat_s", ",", "\n", "targets", "=", "feat_t", "\n", ")", "\n", "l_margin_source_feat", "+=", "loss_margin_s", "/", "(", "2", "**", "(", "feat_num", "-", "j", "-", "1", ")", ")", "\n", "# Divide to make it smaller", "\n", "", "l_margin_source_feat", "/=", "(", "1000", "*", "self", ".", "datamanager", ".", "train_loader", ".", "batch_size", ")", "\n", "", "if", "self", ".", "kd_style", "!=", "'only_feats'", ":", "\n", "                            ", "l_euclid_s", "=", "self", ".", "_compute_loss", "(", "\n", "criterion", "=", "self", ".", "criterion_log_euclid", ",", "\n", "outputs", "=", "pre_class_features_Source_Student", ",", "\n", "targets", "=", "pre_class_features_Source_Teacher", "\n", ")", "\n", "", "l_kd_source", "=", "self", ".", "lkds_weight", "*", "(", "l_euclid_s", "+", "l_margin_source_feat", ")", "\n", "avg_meter_obj", ".", "losses_kd_source", ".", "update", "(", "l_kd_source", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                        ", "l_kd_source", "=", "0", "\n", "\n", "", "if", "self", ".", "lkdt_weight", ">", "0", ":", "\n", "                        ", "l_margin_target_feat", "=", "0", "\n", "l_euclid", "=", "0", "\n", "if", "self", ".", "kd_style", "!=", "'only_outputs'", ":", "\n", "                            ", "feat_num", "=", "len", "(", "features_Target_Teacher", ")", "\n", "for", "j", ",", "(", "feat_s", ",", "feat_t", ")", "in", "enumerate", "(", "zip", "(", "features_Target_Student", ",", "features_Target_Teacher", ")", ")", ":", "\n", "                                ", "loss_margin", "=", "self", ".", "_compute_loss", "(", "\n", "criterion", "=", "self", ".", "criterion_margin", ",", "\n", "outputs", "=", "feat_s", ",", "\n", "targets", "=", "feat_t", "\n", ")", "\n", "l_margin_target_feat", "+=", "loss_margin", "/", "(", "2", "**", "(", "feat_num", "-", "j", "-", "1", ")", ")", "\n", "# Divide to make it smaller", "\n", "", "l_margin_target_feat", "/=", "(", "1000", "*", "self", ".", "datamanager", ".", "train_loader", ".", "batch_size", ")", "\n", "", "if", "self", ".", "kd_style", "!=", "'only_feats'", ":", "\n", "                            ", "l_euclid", "=", "self", ".", "_compute_loss", "(", "\n", "criterion", "=", "self", ".", "criterion_log_euclid", ",", "\n", "outputs", "=", "pre_class_features_Target_Student", ",", "\n", "targets", "=", "pre_class_features_Target_Teacher", "\n", ")", "\n", "", "l_kd_target", "=", "self", ".", "lkdt_weight", "*", "(", "l_euclid", "+", "l_margin_target_feat", ")", "\n", "avg_meter_obj", ".", "losses_kd_target", ".", "update", "(", "l_kd_target", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                        ", "l_kd_target", "=", "0", "\n", "\n", "", "loss_kd", "=", "l_kd_source", "+", "l_kd_target", "+", "l_da", "\n", "\n", "#       v) Printing and tensorboard update", "\n", "\n", "avg_meter_obj", ".", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "avg_meter_obj", ".", "losses_kd", ".", "update", "(", "loss_kd", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "loss_kd", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_student", ".", "step", "(", ")", "\n", "\n", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "\n", "# -------------------------------------------------------------------------------------------------------------- #", "\n", "\n", "", "if", "writer", "is", "not", "None", ":", "\n", "                    ", "n_iter", "=", "epoch", "*", "num_batches_target", "+", "batch_idx", "\n", "writer", ".", "add_scalar", "(", "'Train_INFO_'", "+", "str", "(", "ix", ")", "+", "'/Time'", ",", "avg_meter_obj", ".", "batch_time", ".", "avg", ",", "n_iter", ")", "\n", "\n", "", "if", "(", "batch_idx", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "# estimate remaining time", "\n", "                    ", "eta_seconds", "=", "avg_meter_obj", ".", "batch_time", ".", "avg", "*", "(", "\n", "num_batches_target", "-", "(", "batch_idx", "+", "1", ")", "+", "(", "max_epoch", "-", "(", "epoch", "+", "1", ")", ")", "*", "num_batches_target", "\n", ")", "\n", "eta_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "print", "(", "\n", "'Epoch: [{0}/{1}][{2}/{3}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Current Target: {target}\\t'", "\n", "'L_DA {losses3.val:.4f} ({losses3.avg:.4f})\\t'", "\n", "'L_KD_Source {losses4.val:.4f} ({losses4.avg:.4f})\\t'", "\n", "'L_KD_Target {losses5.val:.4f} ({losses5.avg:.4f})\\t'", "\n", "'L_KD {losses6.val:.4f} ({losses6.avg:.4f})\\t'", "\n", "'eta {eta}'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "\n", "max_epoch", ",", "\n", "batch_idx", "+", "1", ",", "\n", "len", "(", "self", ".", "datamanager", ".", "list_train_loader_t", "[", "ix", "]", ")", ",", "\n", "batch_time", "=", "avg_meter_obj", ".", "batch_time", ",", "\n", "target", "=", "self", ".", "datamanager", ".", "targets", "[", "ix", "]", ",", "\n", "losses3", "=", "avg_meter_obj", ".", "losses_da", ",", "\n", "losses4", "=", "avg_meter_obj", ".", "losses_kd_source", ",", "\n", "losses5", "=", "avg_meter_obj", ".", "losses_kd_target", ",", "\n", "losses6", "=", "avg_meter_obj", ".", "losses_kd", ",", "\n", "eta", "=", "eta_str", "\n", ")", "\n", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "self", ".", "scheduler_student", "is", "not", "None", ":", "\n", "                ", "self", ".", "scheduler_student", ".", "step", "(", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.KD_one_by_one_engine.StoreAverageMeters.__init__": [[16, 32], ["torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "losses_dmmd_teacher", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_ce_teacher", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_da", "=", "AverageMeter", "(", ")", "\n", "\n", "self", ".", "losses_ce_student", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_triplet_student", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_dmmd_student", "=", "AverageMeter", "(", ")", "\n", "\n", "self", ".", "losses_kd_source", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_kd_target", "=", "AverageMeter", "(", ")", "\n", "self", ".", "losses_kd", "=", "AverageMeter", "(", ")", "\n", "\n", "\n", "self", ".", "batch_time", "=", "AverageMeter", "(", ")", "\n", "self", ".", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.KD_one_by_one_engine.KDMTDAEngineOnebyOne.__init__": [[36, 87], ["engine.Engine.__init__", "torchreid.losses.TripletLoss", "torchreid.losses.CrossEntropyLoss", "torchreid.losses.KLDivergenceLoss", "torchreid.losses.MaximumMeanDiscrepancy", "torchreid.losses.MarginLoss", "torchreid.losses.LogEuclidLoss"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "datamanager", ",", "\n", "model_student", ",", "\n", "optimizer_student", ",", "\n", "scheduler_student", "=", "None", ",", "\n", "models_teacher_list", "=", "[", "]", ",", "\n", "optimizer_teacher_list", "=", "[", "]", ",", "\n", "scheduler_teacher_list", "=", "[", "]", ",", "\n", "margin", "=", "0.3", ",", "\n", "use_gpu", "=", "True", ",", "\n", "label_smooth", "=", "True", ",", "\n", "mmd_only", "=", "True", ",", "\n", "kd_style", "=", "'all'", ",", "\n", "lda_weight", "=", "0", ",", "\n", "lkds_weight", "=", "0", ",", "\n", "lkdt_weight", "=", "0", ",", "\n", "target_order", "=", "'random'", ",", "\n", "log_loss", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "KDMTDAEngineOnebyOne", ",", "self", ")", ".", "__init__", "(", "\n", "datamanager", ",", "\n", "model_student", ",", "optimizer_student", ",", "scheduler_student", ",", "\n", "models_teacher_list", ",", "optimizer_teacher_list", ",", "scheduler_teacher_list", ",", "\n", "use_gpu", ",", "mmd_only", ")", "\n", "\n", "self", ".", "starting_value", "=", "0.1", "\n", "self", ".", "final_value", "=", "0.8", "\n", "self", ".", "kd_style", "=", "kd_style", "\n", "self", ".", "lda_weight", "=", "lda_weight", "\n", "self", ".", "lkds_weight", "=", "lkds_weight", "\n", "self", ".", "lkdt_weight", "=", "lkdt_weight", "\n", "self", ".", "target_order", "=", "target_order", "\n", "self", ".", "log_loss", "=", "log_loss", "\n", "\n", "self", ".", "criterion_t", "=", "TripletLoss", "(", "margin", "=", "margin", ")", "\n", "self", ".", "criterion_x", "=", "CrossEntropyLoss", "(", "\n", "num_classes", "=", "self", ".", "datamanager", ".", "num_train_pids", ",", "\n", "use_gpu", "=", "self", ".", "use_gpu", ",", "\n", "label_smooth", "=", "label_smooth", "\n", ")", "\n", "self", ".", "criterion_kl", "=", "KLDivergenceLoss", "(", ")", "\n", "\n", "self", ".", "criterion_mmd", "=", "MaximumMeanDiscrepancy", "(", "\n", "instances", "=", "self", ".", "datamanager", ".", "train_loader", ".", "sampler", ".", "num_instances", ",", "\n", "batch_size", "=", "self", ".", "datamanager", ".", "train_loader", ".", "batch_size", ",", "\n", "global_only", "=", "False", ",", "\n", "distance_only", "=", "False", "\n", ")", "\n", "self", ".", "criterion_margin", "=", "MarginLoss", "(", ")", "\n", "self", ".", "criterion_log_euclid", "=", "LogEuclidLoss", "(", "log", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.KD_one_by_one_engine.KDMTDAEngineOnebyOne.train": [[88, 303], ["KD_one_by_one_engine.StoreAverageMeters", "KD_one_by_one_engine.KDMTDAEngineOnebyOne.model_student.train", "time.time", "KD_one_by_one_engine.KDMTDAEngineOnebyOne.model_student.train", "len", "print", "torchreid.utils.open_specified_layers", "torchreid.utils.open_all_layers", "len", "model_t.train", "enumerate", "numpy.argsort", "enumerate", "KD_one_by_one_engine.KDMTDAEngineOnebyOne.scheduler_student.step", "zip", "enumerate", "len", "numpy.arange", "numpy.random.shuffle", "zip", "StoreAverageMeters.data_time.update", "KD_one_by_one_engine.KDMTDAEngineOnebyOne._parse_data_for_train", "KD_one_by_one_engine.KDMTDAEngineOnebyOne._parse_data_for_train", "KD_one_by_one_engine.KDMTDAEngineOnebyOne.optimizer_student.zero_grad", "KD_one_by_one_engine.KDMTDAEngineOnebyOne.model_student", "KD_one_by_one_engine.KDMTDAEngineOnebyOne.model_student", "StoreAverageMeters.batch_time.update", "StoreAverageMeters.losses_kd.update", "loss_kd.backward", "KD_one_by_one_engine.KDMTDAEngineOnebyOne.optimizer_student.step", "KD_one_by_one_engine.KDMTDAEngineOnebyOne.optimizer_student.zero_grad", "time.time", "zip", "StoreAverageMeters.data_time.update", "KD_one_by_one_engine.KDMTDAEngineOnebyOne._parse_data_for_train", "KD_one_by_one_engine.KDMTDAEngineOnebyOne._parse_data_for_train", "KD_one_by_one_engine.KDMTDAEngineOnebyOne._compute_loss", "loss_mmd_global.item", "numpy.arange", "numpy.arange", "imgs.cuda.cuda.cuda", "pids.cuda.cuda.cuda", "imgs_t.cuda.cuda.cuda", "torch.no_grad", "KD_one_by_one_engine.KDMTDAEngineOnebyOne._compute_loss", "KD_one_by_one_engine.KDMTDAEngineOnebyOne._compute_loss", "KD_one_by_one_engine.KDMTDAEngineOnebyOne._compute_loss", "StoreAverageMeters.losses_da.update", "len", "enumerate", "StoreAverageMeters.losses_kd_source.update", "StoreAverageMeters.losses_kd_target.update", "loss_kd.item", "pids.cuda.cuda.size", "str", "print", "imgs.cuda.cuda.cuda", "pids.cuda.cuda.cuda", "imgs_t.cuda.cuda.cuda", "torch.no_grad", "KD_one_by_one_engine.KDMTDAEngineOnebyOne.model_student", "KD_one_by_one_engine.KDMTDAEngineOnebyOne.model_student", "model_teacher", "model_teacher", "time.time", "l_da.item", "pids.cuda.cuda.size", "zip", "KD_one_by_one_engine.KDMTDAEngineOnebyOne._compute_loss", "l_kd_source.item", "pids.cuda.cuda.size", "len", "enumerate", "KD_one_by_one_engine.KDMTDAEngineOnebyOne._compute_loss", "l_kd_target.item", "pids.cuda.cuda.size", "time.time", "datetime.timedelta", "time.time", "zip", "KD_one_by_one_engine.KDMTDAEngineOnebyOne._compute_loss", "len", "int"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.open_specified_layers", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.open_all_layers", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.step", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._parse_data_for_train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._parse_data_for_train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.zero_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.Logm.backward", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.step", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.zero_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._parse_data_for_train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._parse_data_for_train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss"], ["", "def", "train", "(", "\n", "self", ",", "\n", "epoch", ",", "\n", "max_epoch", ",", "\n", "writer", ",", "\n", "print_freq", "=", "10", ",", "\n", "fixbase_epoch", "=", "0", ",", "\n", "open_layers", "=", "None", "\n", ")", ":", "\n", "\n", "        ", "avg_meter_obj", "=", "StoreAverageMeters", "(", ")", "\n", "\n", "self", ".", "model_student", ".", "train", "(", ")", "\n", "if", "(", "epoch", "+", "1", ")", "<=", "fixbase_epoch", "and", "open_layers", "is", "not", "None", ":", "\n", "            ", "print", "(", "\n", "'* Only train {} (epoch: {}/{})'", ".", "format", "(", "\n", "open_layers", ",", "epoch", "+", "1", ",", "fixbase_epoch", "\n", ")", "\n", ")", "\n", "open_specified_layers", "(", "self", ".", "model_student", ",", "open_layers", ")", "\n", "", "else", ":", "\n", "            ", "open_all_layers", "(", "self", ".", "model_student", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "num_batches_target", "=", "0", "\n", "for", "aLoader", "in", "self", ".", "datamanager", ".", "list_train_loader_t", ":", "\n", "            ", "num_batches_target", "+=", "len", "(", "aLoader", ")", "\n", "\n", "\n", "", "self", ".", "model_student", ".", "train", "(", ")", "\n", "for", "model_t", "in", "self", ".", "models_teacher_list", ":", "\n", "            ", "model_t", ".", "train", "(", ")", "\n", "\n", "", "target_num", "=", "len", "(", "self", ".", "datamanager", ".", "targets", ")", "\n", "if", "self", ".", "target_order", "==", "'shift'", ":", "\n", "            ", "dist", "=", "[", "0", "]", "*", "target_num", "\n", "# Determine order", "\n", "for", "i", ",", "(", "model_teacher", ",", "optimizer_teacher", ",", "scheduler_teacher", ",", "train_loader_t", ")", "in", "enumerate", "(", "zip", "(", "\n", "self", ".", "models_teacher_list", ",", "\n", "self", ".", "optimizer_teacher_list", ",", "\n", "self", ".", "scheduler_teacher_list", ",", "\n", "self", ".", "datamanager", ".", "list_train_loader_t", ")", ")", ":", "\n", "\n", "                ", "for", "batch_idx", ",", "(", "data", ",", "data_t", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "train_loader", ",", "train_loader_t", ")", ")", ":", "\n", "                    ", "avg_meter_obj", ".", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "imgs", ",", "pids", "=", "self", ".", "_parse_data_for_train", "(", "data", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "                        ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "pids", "=", "pids", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "imgs_t", ",", "pids_t", "=", "self", ".", "_parse_data_for_train", "(", "data_t", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "                        ", "imgs_t", "=", "imgs_t", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "features_Source_Student", ",", "pre_class_features_Source_Student", ",", "outputs_Source_Student", "=", "self", ".", "model_student", "(", "imgs", ",", "target", "=", "i", ")", "\n", "features_Target_Student", ",", "pre_class_features_Target_Student", ",", "outputs_Target_Student", "=", "self", ".", "model_student", "(", "imgs_t", ",", "target", "=", "i", ")", "\n", "features_Source_Teacher", ",", "pre_class_features_Source_Teacher", ",", "outputs_Source_Teacher", "=", "model_teacher", "(", "imgs", ",", "target", "=", "i", ")", "\n", "features_Target_Teacher", ",", "pre_class_features_Target_Teacher", ",", "outputs_Target_Teacher", "=", "model_teacher", "(", "imgs_t", ",", "target", "=", "i", ")", "\n", "\n", "", "_", ",", "_", ",", "loss_mmd_global", "=", "self", ".", "_compute_loss", "(", "\n", "criterion", "=", "self", ".", "criterion_mmd", ",", "\n", "outputs", "=", "pre_class_features_Target_Student", ",", "\n", "targets", "=", "pre_class_features_Source_Student", "\n", ")", "\n", "dist", "[", "i", "]", "+=", "loss_mmd_global", ".", "item", "(", ")", "\n", "", "dist", "[", "i", "]", "/=", "len", "(", "train_loader_t", ")", "\n", "", "iteration_order", "=", "np", ".", "argsort", "(", "dist", ")", "\n", "", "elif", "self", ".", "target_order", "==", "'random'", ":", "\n", "            ", "iteration_order", "=", "np", ".", "arange", "(", "target_num", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "iteration_order", ")", "\n", "", "elif", "self", ".", "target_order", "==", "'fixed'", ":", "\n", "            ", "iteration_order", "=", "np", ".", "arange", "(", "target_num", ")", "\n", "", "else", ":", "\n", "            ", "iteration_order", "=", "np", ".", "arange", "(", "target_num", ")", "\n", "\n", "", "for", "ix", "in", "iteration_order", ":", "\n", "# ------------------------------------------------------------------------------------------------------- #", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "data_t", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "train_loader", ",", "self", ".", "datamanager", ".", "list_train_loader_t", "[", "ix", "]", ")", ")", ":", "\n", "                ", "avg_meter_obj", ".", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "imgs", ",", "pids", "=", "self", ".", "_parse_data_for_train", "(", "data", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "                    ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "pids", "=", "pids", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "imgs_t", ",", "pids_t", "=", "self", ".", "_parse_data_for_train", "(", "data_t", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "                    ", "imgs_t", "=", "imgs_t", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "\n", "# -------------------------------------------------------------------------------------------------- #", "\n", "\n", "features_Source_Student", ",", "pre_class_features_Source_Student", ",", "outputs_Source_Student", "=", "self", ".", "model_student", "(", "imgs", ",", "target", "=", "ix", ")", "\n", "features_Target_Student", ",", "pre_class_features_Target_Student", ",", "outputs_Target_Student", "=", "self", ".", "model_student", "(", "imgs_t", ",", "target", "=", "ix", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "features_Source_Teacher", ",", "pre_class_features_Source_Teacher", ",", "outputs_Source_Teacher", "=", "self", ".", "models_teacher_list", "[", "ix", "]", "(", "imgs", ",", "target", "=", "ix", ")", "\n", "features_Target_Teacher", ",", "pre_class_features_Target_Teacher", ",", "outputs_Target_Teacher", "=", "self", ".", "models_teacher_list", "[", "ix", "]", "(", "imgs_t", ",", "target", "=", "ix", ")", "\n", "\n", "", "if", "self", ".", "lda_weight", ">", "0", ":", "\n", "                    ", "loss_mmd_wc", ",", "loss_mmd_bc", ",", "loss_mmd_global", "=", "self", ".", "_compute_loss", "(", "\n", "criterion", "=", "self", ".", "criterion_mmd", ",", "\n", "outputs", "=", "pre_class_features_Source_Student", ",", "\n", "targets", "=", "pre_class_features_Target_Student", "\n", ")", "\n", "l_d_mmd_student_source_target", "=", "loss_mmd_wc", "+", "loss_mmd_bc", "+", "loss_mmd_global", "\n", "\n", "loss_t_student", "=", "self", ".", "_compute_loss", "(", "criterion", "=", "self", ".", "criterion_t", ",", "outputs", "=", "pre_class_features_Source_Student", ",", "targets", "=", "pids", ")", "# source triplet", "\n", "loss_x_student", "=", "self", ".", "_compute_loss", "(", "criterion", "=", "self", ".", "criterion_x", ",", "outputs", "=", "outputs_Source_Student", ",", "targets", "=", "pids", ")", "\n", "\n", "l_da", "=", "l_d_mmd_student_source_target", "+", "loss_x_student", "+", "loss_t_student", "\n", "avg_meter_obj", ".", "losses_da", ".", "update", "(", "l_da", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "l_da", "=", "0", "\n", "\n", "", "if", "self", ".", "lkds_weight", ">", "0", ":", "\n", "                    ", "feat_num", "=", "len", "(", "features_Target_Teacher", ")", "\n", "l_margin_source", "=", "0", "\n", "for", "j", ",", "(", "feat_s", ",", "feat_t", ")", "in", "enumerate", "(", "zip", "(", "features_Source_Student", ",", "features_Source_Teacher", ")", ")", ":", "\n", "                        ", "loss_margin", "=", "self", ".", "_compute_loss", "(", "\n", "criterion", "=", "self", ".", "criterion_margin", ",", "\n", "outputs", "=", "feat_s", ",", "\n", "targets", "=", "feat_t", "\n", ")", "\n", "l_margin_source", "+=", "loss_margin", "/", "(", "2", "**", "(", "feat_num", "-", "j", "-", "1", ")", ")", "\n", "# Divide to make it smaller", "\n", "", "l_margin_source", "/=", "(", "1000", "*", "self", ".", "datamanager", ".", "train_loader", ".", "batch_size", ")", "\n", "\n", "l_kd_source", "=", "l_margin_source", "\n", "avg_meter_obj", ".", "losses_kd_source", ".", "update", "(", "l_kd_source", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "l_kd_source", "=", "0", "\n", "\n", "", "if", "self", ".", "lkdt_weight", ">", "0", ":", "\n", "                    ", "l_margin_target_feat", "=", "0", "\n", "l_euclid", "=", "0", "\n", "if", "self", ".", "kd_style", "!=", "'only_outputs'", ":", "\n", "                        ", "feat_num", "=", "len", "(", "features_Target_Teacher", ")", "\n", "for", "j", ",", "(", "feat_s", ",", "feat_t", ")", "in", "enumerate", "(", "zip", "(", "features_Target_Student", ",", "features_Target_Teacher", ")", ")", ":", "\n", "                            ", "loss_margin", "=", "self", ".", "_compute_loss", "(", "\n", "criterion", "=", "self", ".", "criterion_margin", ",", "\n", "outputs", "=", "feat_s", ",", "\n", "targets", "=", "feat_t", "\n", ")", "\n", "l_margin_target_feat", "+=", "loss_margin", "/", "(", "2", "**", "(", "feat_num", "-", "j", "-", "1", ")", ")", "\n", "# Divide to make it smaller", "\n", "", "l_margin_target_feat", "/=", "(", "1000", "*", "self", ".", "datamanager", ".", "train_loader", ".", "batch_size", ")", "\n", "", "if", "self", ".", "kd_style", "!=", "'only_feats'", ":", "\n", "                        ", "l_euclid", "=", "self", ".", "_compute_loss", "(", "\n", "criterion", "=", "self", ".", "criterion_log_euclid", ",", "\n", "outputs", "=", "pre_class_features_Target_Student", ",", "\n", "targets", "=", "pre_class_features_Target_Teacher", "\n", ")", "\n", "", "l_kd_target", "=", "self", ".", "lkdt_weight", "*", "(", "l_euclid", "+", "l_margin_target_feat", ")", "\n", "avg_meter_obj", ".", "losses_kd_target", ".", "update", "(", "l_kd_target", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "l_kd_target", "=", "0", "\n", "\n", "", "loss_kd", "=", "l_kd_source", "+", "l_kd_target", "+", "l_da", "\n", "\n", "#       v) Printing and tensorboard update", "\n", "\n", "avg_meter_obj", ".", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "avg_meter_obj", ".", "losses_kd", ".", "update", "(", "loss_kd", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "\n", "loss_kd", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_student", ".", "step", "(", ")", "\n", "\n", "\n", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "\n", "# -------------------------------------------------------------------------------------------------------------- #", "\n", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "# estimate remaining time", "\n", "                    ", "eta_seconds", "=", "avg_meter_obj", ".", "batch_time", ".", "avg", "*", "(", "\n", "num_batches_target", "-", "(", "batch_idx", "+", "1", ")", "+", "(", "max_epoch", "-", "(", "epoch", "+", "1", ")", ")", "*", "num_batches_target", "\n", ")", "\n", "eta_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "print", "(", "\n", "'Epoch: [{0}/{1}][{2}/{3}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Current Target: {target}\\t'", "\n", "'L_DA {losses3.val:.4f} ({losses3.avg:.4f})\\t'", "\n", "'L_KD_Source {losses4.val:.4f} ({losses4.avg:.4f})\\t'", "\n", "'L_KD_Target {losses5.val:.4f} ({losses5.avg:.4f})\\t'", "\n", "'L_KD {losses6.val:.4f} ({losses6.avg:.4f})\\t'", "\n", "'eta {eta}'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "\n", "max_epoch", ",", "\n", "batch_idx", "+", "1", ",", "\n", "len", "(", "self", ".", "datamanager", ".", "list_train_loader_t", "[", "ix", "]", ")", ",", "\n", "batch_time", "=", "avg_meter_obj", ".", "batch_time", ",", "\n", "target", "=", "self", ".", "datamanager", ".", "targets", "[", "ix", "]", ",", "\n", "losses3", "=", "avg_meter_obj", ".", "losses_da", ",", "\n", "losses4", "=", "avg_meter_obj", ".", "losses_kd_source", ",", "\n", "losses5", "=", "avg_meter_obj", ".", "losses_kd_target", ",", "\n", "losses6", "=", "avg_meter_obj", ".", "losses_kd", ",", "\n", "eta", "=", "eta_str", "\n", ")", "\n", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "if", "self", ".", "scheduler_student", "is", "not", "None", ":", "\n", "            ", "self", ".", "scheduler_student", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.softmax.Visualizations.__init__": [[17, 24], ["visdom.Visdom", "str", "datetime.now().strftime", "datetime.now"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env_name", ",", "port", ")", ":", "\n", "        ", "if", "env_name", "is", "None", ":", "\n", "            ", "env_name", "=", "str", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d-%m %Hh%M\"", ")", ")", "\n", "", "self", ".", "env_name", "=", "env_name", "\n", "self", ".", "port", "=", "port", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "'http://'", "+", "self", ".", "env_name", ",", "port", "=", "self", ".", "port", ")", "\n", "self", ".", "loss_win", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.softmax.Visualizations.plot_loss": [[25, 35], ["softmax.Visualizations.vis.line", "dict"], "methods", ["None"], ["", "def", "plot_loss", "(", "self", ",", "loss", ",", "step", ")", ":", "\n", "        ", "self", ".", "loss_win", "=", "self", ".", "vis", ".", "line", "(", "\n", "[", "loss", "]", ",", "\n", "[", "step", "]", ",", "\n", "win", "=", "self", ".", "loss_win", ",", "\n", "update", "=", "'append'", "if", "self", ".", "loss_win", "else", "None", ",", "\n", "opts", "=", "dict", "(", "\n", "xlabel", "=", "'Epoch'", ",", "\n", "ylabel", "=", "'Loss'", ",", "\n", "title", "=", "'Loss per Epoch for'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.softmax.ImageSoftmaxEngine.__init__": [[86, 105], ["engine.Engine.__init__", "softmax.Visualizations", "torchreid.losses.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "datamanager", ",", "\n", "model", ",", "\n", "optimizer", ",", "\n", "scheduler", "=", "None", ",", "\n", "use_gpu", "=", "True", ",", "\n", "label_smooth", "=", "True", ",", "\n", "visdom", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "ImageSoftmaxEngine", ",", "self", ")", ".", "__init__", "(", "datamanager", ",", "model", ",", "optimizer", ",", "scheduler", ",", "use_gpu", ")", "\n", "\n", "#if self.visdom:", "\n", "self", ".", "vis", "=", "Visualizations", "(", "env_name", "=", "\"turing.livia.etsmtl.ca\"", ",", "port", "=", "4242", ")", "\n", "\n", "self", ".", "criterion", "=", "CrossEntropyLoss", "(", "\n", "num_classes", "=", "self", ".", "datamanager", ".", "num_train_pids", ",", "\n", "use_gpu", "=", "self", ".", "use_gpu", ",", "\n", "label_smooth", "=", "label_smooth", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.softmax.ImageSoftmaxEngine.train": [[107, 200], ["torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "softmax.ImageSoftmaxEngine.model.train", "len", "time.time", "enumerate", "print", "torchreid.utils.open_specified_layers", "torchreid.utils.open_all_layers", "torchreid.utils.AverageMeter.update", "softmax.ImageSoftmaxEngine._parse_data_for_train", "softmax.ImageSoftmaxEngine.model.conv1.weight.clone", "softmax.ImageSoftmaxEngine.optimizer.zero_grad", "softmax.ImageSoftmaxEngine.model", "softmax.ImageSoftmaxEngine._compute_loss", "softmax.ImageSoftmaxEngine.backward", "softmax.ImageSoftmaxEngine.optimizer.step", "torchreid.utils.AverageMeter.update", "torchreid.utils.AverageMeter.update", "torchreid.utils.AverageMeter.update", "softmax.ImageSoftmaxEngine.vis.plot_loss", "time.time", "softmax.ImageSoftmaxEngine.scheduler.step", "imgs.cuda.cuda.cuda", "pids.cuda.cuda.cuda", "softmax.ImageSoftmaxEngine.item", "pids.cuda.cuda.size", "[].item", "softmax.ImageSoftmaxEngine.item", "str", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "time.time", "time.time", "datetime.timedelta", "torchreid.metrics.accuracy", "int"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.open_specified_layers", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.open_all_layers", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._parse_data_for_train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.zero_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.Logm.backward", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.step", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.softmax.Visualizations.plot_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.step", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.accuracy.accuracy"], ["", "def", "train", "(", "\n", "self", ",", "\n", "epoch", ",", "\n", "max_epoch", ",", "\n", "writer", ",", "\n", "print_freq", "=", "10", ",", "\n", "fixbase_epoch", "=", "0", ",", "\n", "open_layers", "=", "None", "\n", ")", ":", "\n", "        ", "losses", "=", "AverageMeter", "(", ")", "\n", "accs", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "(", "epoch", "+", "1", ")", "<=", "fixbase_epoch", "and", "open_layers", "is", "not", "None", ":", "\n", "            ", "print", "(", "\n", "'* Only train {} (epoch: {}/{})'", ".", "format", "(", "\n", "open_layers", ",", "epoch", "+", "1", ",", "fixbase_epoch", "\n", ")", "\n", ")", "\n", "open_specified_layers", "(", "self", ".", "model", ",", "open_layers", ")", "\n", "", "else", ":", "\n", "            ", "open_all_layers", "(", "self", ".", "model", ")", "\n", "\n", "", "num_batches", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "imgs", ",", "pids", "=", "self", ".", "_parse_data_for_train", "(", "data", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "                ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "pids", "=", "pids", ".", "cuda", "(", ")", "\n", "\n", "", "model", "=", "self", ".", "model", "\n", "conv1", "=", "self", ".", "model", ".", "conv1", "\n", "conv1_weight", "=", "self", ".", "model", ".", "conv1", ".", "weight", ".", "clone", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "self", ".", "model", "(", "imgs", ")", "\n", "loss", "=", "self", ".", "_compute_loss", "(", "self", ".", "criterion", ",", "outputs", ",", "pids", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "#print(conv1_weight == self.model.conv1.weight)", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "accs", ".", "update", "(", "metrics", ".", "accuracy", "(", "outputs", ",", "pids", ")", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "#if self.visdom:", "\n", "self", ".", "vis", ".", "plot_loss", "(", "loss", ".", "item", "(", ")", ",", "batch_idx", "*", "epoch", ")", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "# estimate remaining time", "\n", "                ", "eta_seconds", "=", "batch_time", ".", "avg", "*", "(", "\n", "num_batches", "-", "(", "batch_idx", "+", "1", ")", "+", "(", "max_epoch", "-", "\n", "(", "epoch", "+", "1", ")", ")", "*", "num_batches", "\n", ")", "\n", "eta_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "print", "(", "\n", "'Epoch: [{0}/{1}][{2}/{3}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Acc {acc.val:.2f} ({acc.avg:.2f})\\t'", "\n", "'Lr {lr:.6f}\\t'", "\n", "'eta {eta}'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "\n", "max_epoch", ",", "\n", "batch_idx", "+", "1", ",", "\n", "num_batches", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "\n", "loss", "=", "losses", ",", "\n", "acc", "=", "accs", ",", "\n", "lr", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "eta", "=", "eta_str", "\n", ")", "\n", ")", "\n", "\n", "", "if", "writer", "is", "not", "None", ":", "\n", "                ", "n_iter", "=", "epoch", "*", "num_batches", "+", "batch_idx", "\n", "writer", ".", "add_scalar", "(", "'Train/Time'", ",", "batch_time", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Data'", ",", "data_time", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Loss'", ",", "losses", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Acc'", ",", "accs", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "\n", "'Train/Lr'", ",", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "n_iter", "\n", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "scheduler", ".", "step", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.triplet.ImageTripletEngine.__init__": [[67, 102], ["engine.Engine.__init__", "torchreid.losses.TripletLoss", "torchreid.losses.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "datamanager", ",", "\n", "model_student", ",", "\n", "optimizer_student", ",", "\n", "scheduler_student", "=", "None", ",", "\n", "models_teacher_list", "=", "[", "]", ",", "\n", "model_grl_student", "=", "None", ",", "\n", "models_grl_teacher_list", "=", "[", "]", ",", "\n", "optimizer_teacher_list", "=", "[", "]", ",", "\n", "scheduler_teacher_list", "=", "[", "]", ",", "\n", "margin", "=", "0.3", ",", "\n", "weight_t", "=", "1", ",", "\n", "weight_x", "=", "1", ",", "\n", "gamma", "=", "0.5", ",", "\n", "alpha", "=", "0.5", ",", "\n", "use_gpu", "=", "True", ",", "\n", "label_smooth", "=", "True", ",", "\n", "mmd_only", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ImageTripletEngine", ",", "self", "\n", ")", ".", "__init__", "(", "\n", "datamanager", ",", "\n", "model_student", ",", "optimizer_student", ",", "scheduler_student", ",", "\n", "models_teacher_list", ",", "optimizer_teacher_list", ",", "scheduler_teacher_list", ",", "\n", "use_gpu", ",", "mmd_only", ")", "\n", "\n", "self", ".", "weight_t", "=", "weight_t", "\n", "self", ".", "weight_x", "=", "weight_x", "\n", "\n", "self", ".", "criterion_t", "=", "TripletLoss", "(", "margin", "=", "margin", ")", "\n", "self", ".", "criterion_x", "=", "CrossEntropyLoss", "(", "\n", "num_classes", "=", "self", ".", "datamanager", ".", "num_train_pids", ",", "\n", "use_gpu", "=", "self", ".", "use_gpu", ",", "\n", "label_smooth", "=", "label_smooth", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.triplet.ImageTripletEngine.train": [[104, 199], ["torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "triplet.ImageTripletEngine.model_student.train", "len", "time.time", "enumerate", "print", "torchreid.utils.open_specified_layers", "torchreid.utils.open_all_layers", "torchreid.utils.AverageMeter.update", "triplet.ImageTripletEngine._parse_data_for_train", "triplet.ImageTripletEngine.optimizer_student.zero_grad", "triplet.ImageTripletEngine.model_student", "triplet.ImageTripletEngine._compute_loss", "triplet.ImageTripletEngine._compute_loss", "loss.backward", "triplet.ImageTripletEngine.optimizer_student.step", "torchreid.utils.AverageMeter.update", "torchreid.utils.AverageMeter.update", "torchreid.utils.AverageMeter.update", "torchreid.utils.AverageMeter.update", "time.time", "triplet.ImageTripletEngine.scheduler_student.step", "imgs.cuda.cuda.cuda", "pids.cuda.cuda.cuda", "triplet.ImageTripletEngine.item", "pids.cuda.cuda.size", "triplet.ImageTripletEngine.item", "pids.cuda.cuda.size", "[].item", "str", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "time.time", "time.time", "datetime.timedelta", "torchreid.metrics.accuracy", "int"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.open_specified_layers", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.open_all_layers", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._parse_data_for_train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.zero_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.Logm.backward", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.step", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.step", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.accuracy.accuracy"], ["", "def", "train", "(", "\n", "self", ",", "\n", "epoch", ",", "\n", "max_epoch", ",", "\n", "writer", ",", "\n", "print_freq", "=", "10", ",", "\n", "fixbase_epoch", "=", "0", ",", "\n", "open_layers", "=", "None", "\n", ")", ":", "\n", "        ", "losses_t", "=", "AverageMeter", "(", ")", "\n", "losses_x", "=", "AverageMeter", "(", ")", "\n", "accs", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "self", ".", "model_student", ".", "train", "(", ")", "\n", "if", "(", "epoch", "+", "1", ")", "<=", "fixbase_epoch", "and", "open_layers", "is", "not", "None", ":", "\n", "            ", "print", "(", "\n", "'* Only train {} (epoch: {}/{})'", ".", "format", "(", "\n", "open_layers", ",", "epoch", "+", "1", ",", "fixbase_epoch", "\n", ")", "\n", ")", "\n", "open_specified_layers", "(", "self", ".", "model_student", ",", "open_layers", ")", "\n", "", "else", ":", "\n", "            ", "open_all_layers", "(", "self", ".", "model_student", ")", "\n", "\n", "", "num_batches", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "imgs", ",", "pids", "=", "self", ".", "_parse_data_for_train", "(", "data", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "                ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "pids", "=", "pids", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "outputs", ",", "features", "=", "self", ".", "model_student", "(", "imgs", ")", "\n", "loss_t", "=", "self", ".", "_compute_loss", "(", "self", ".", "criterion_t", ",", "features", ",", "pids", ")", "\n", "loss_x", "=", "self", ".", "_compute_loss", "(", "self", ".", "criterion_x", ",", "outputs", ",", "pids", ")", "\n", "loss", "=", "self", ".", "weight_t", "*", "loss_t", "+", "self", ".", "weight_x", "*", "loss_x", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_student", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "losses_t", ".", "update", "(", "loss_t", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "losses_x", ".", "update", "(", "loss_x", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "accs", ".", "update", "(", "metrics", ".", "accuracy", "(", "outputs", ",", "pids", ")", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "# estimate remaining time", "\n", "                ", "eta_seconds", "=", "batch_time", ".", "avg", "*", "(", "\n", "num_batches", "-", "(", "batch_idx", "+", "1", ")", "+", "(", "max_epoch", "-", "\n", "(", "epoch", "+", "1", ")", ")", "*", "num_batches", "\n", ")", "\n", "eta_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "print", "(", "\n", "'Epoch: [{0}/{1}][{2}/{3}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss_t {loss_t.val:.4f} ({loss_t.avg:.4f})\\t'", "\n", "'Loss_x {loss_x.val:.4f} ({loss_x.avg:.4f})\\t'", "\n", "'Acc {acc.val:.2f} ({acc.avg:.2f})\\t'", "\n", "'Lr {lr:.6f}\\t'", "\n", "'eta {eta}'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "\n", "max_epoch", ",", "\n", "batch_idx", "+", "1", ",", "\n", "num_batches", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "\n", "loss_t", "=", "losses_t", ",", "\n", "loss_x", "=", "losses_x", ",", "\n", "acc", "=", "accs", ",", "\n", "lr", "=", "self", ".", "optimizer_student", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "eta", "=", "eta_str", "\n", ")", "\n", ")", "\n", "\n", "", "if", "writer", "is", "not", "None", ":", "\n", "                ", "n_iter", "=", "epoch", "*", "num_batches", "+", "batch_idx", "\n", "writer", ".", "add_scalar", "(", "'Train/Time'", ",", "batch_time", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Data'", ",", "data_time", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Loss_t'", ",", "losses_t", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Loss_x'", ",", "losses_x", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Acc'", ",", "accs", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "\n", "'Train/Lr'", ",", "self", ".", "optimizer_student", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "n_iter", "\n", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "self", ".", "scheduler_student", "is", "not", "None", ":", "\n", "            ", "self", ".", "scheduler_student", ".", "step", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.__init__": [[26, 56], ["engine.Engine.__init__", "torchreid.losses.TripletLoss", "torchreid.losses.CrossEntropyLoss", "torchreid.losses.MaximumMeanDiscrepancy"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "datamanager", ",", "\n", "model", ",", "\n", "optimizer", ",", "\n", "margin", "=", "0.3", ",", "\n", "weight_t", "=", "1", ",", "\n", "weight_x", "=", "1", ",", "\n", "scheduler", "=", "None", ",", "\n", "use_gpu", "=", "True", ",", "\n", "label_smooth", "=", "True", ",", "\n", "mmd_only", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ImageMmdEngine", ",", "self", ")", ".", "__init__", "(", "datamanager", ",", "model", ",", "optimizer", ",", "scheduler", ",", "use_gpu", "=", "use_gpu", ",", "mmd_only", "=", "mmd_only", ")", "\n", "\n", "self", ".", "mmd_only", "=", "mmd_only", "###", "\n", "self", ".", "weight_t", "=", "weight_t", "\n", "self", ".", "weight_x", "=", "weight_x", "\n", "\n", "self", ".", "criterion_t", "=", "TripletLoss", "(", "margin", "=", "margin", ")", "\n", "self", ".", "criterion_x", "=", "CrossEntropyLoss", "(", "\n", "num_classes", "=", "self", ".", "datamanager", ".", "num_train_pids", ",", "\n", "use_gpu", "=", "self", ".", "use_gpu", ",", "\n", "label_smooth", "=", "label_smooth", "\n", ")", "\n", "self", ".", "criterion_mmd", "=", "MaximumMeanDiscrepancy", "(", "\n", "instances", "=", "self", ".", "datamanager", ".", "train_loader", ".", "sampler", ".", "num_instances", ",", "\n", "batch_size", "=", "self", ".", "datamanager", ".", "train_loader", ".", "batch_size", ",", "\n", "global_only", "=", "False", ",", "\n", "distance_only", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train": [[58, 236], ["torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "torchreid.utils.AverageMeter", "mmd.ImageMmdEngine.model_student.train", "mmd.ImageMmdEngine.optimizer_student.zero_grad", "len", "time.time", "enumerate", "print", "torchreid.utils.open_specified_layers", "torchreid.utils.open_all_layers", "zip", "torchreid.utils.AverageMeter.update", "mmd.ImageMmdEngine._parse_data_for_train", "mmd.ImageMmdEngine._parse_data_for_train", "mmd.ImageMmdEngine.optimizer_student.zero_grad", "mmd.ImageMmdEngine.model_student", "mmd.ImageMmdEngine.model_student", "mmd.ImageMmdEngine._compute_loss", "mmd.ImageMmdEngine._compute_loss", "loss.backward", "mmd.ImageMmdEngine.optimizer_student.step", "torchreid.utils.AverageMeter.update", "torchreid.utils.AverageMeter.update", "torchreid.utils.AverageMeter.update", "time.time", "mmd.ImageMmdEngine.scheduler_student.step", "torch.reshape", "torchreid.metrics.compute_distance_matrix", "torchreid.metrics.compute_distance_matrix", "torch.reshape", "torchreid.metrics.compute_distance_matrix", "torchreid.metrics.compute_distance_matrix", "torch.cat.detach", "torch.cat.detach", "scipy.stats.norm.rvs", "seaborn.distplot", "scipy.stats.norm.rvs", "seaborn.distplot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "scipy.stats.norm.rvs", "seaborn.distplot", "scipy.stats.norm.rvs", "seaborn.distplot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.show", "imgs.cuda.cuda.cuda", "pids.cuda.cuda.cuda", "imgs_t.cuda.cuda.cuda", "mmd.ImageMmdEngine._compute_loss", "torch.tensor.item", "pids.cuda.cuda.size", "torch.tensor.item", "pids.cuda.cuda.size", "torchreid.utils.AverageMeter.update", "torchreid.utils.AverageMeter.update", "torchreid.utils.AverageMeter.update", "str", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.cat", "torch.cat", "x.cpu().detach().item", "x.cpu().detach().item", "x.cpu().detach().item", "x.cpu().detach().item", "time.time", "torch.tensor", "torch.tensor", "time.time", "loss_mmd_bc.item", "pids.cuda.cuda.size", "loss_mmd_wc.item", "pids.cuda.cuda.size", "loss_mmd_global.item", "pids.cuda.cuda.size", "datetime.timedelta", "int", "int", "torch.cat.flatten", "torch.cat.flatten", "torch.cat.flatten", "torch.cat.flatten", "torchreid.metrics.compute_distance_matrix", "torch.cat", "torchreid.metrics.compute_distance_matrix", "torch.cat", "x.cpu().detach", "x.cpu().detach", "x.cpu().detach", "x.cpu().detach", "int", "torchreid.metrics.compute_distance_matrix", "torchreid.metrics.compute_distance_matrix", "x.cpu", "x.cpu", "x.cpu", "x.cpu"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.mmd.ImageMmdEngine.train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.zero_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.open_specified_layers", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.open_all_layers", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._parse_data_for_train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._parse_data_for_train", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.pcgrad.PCGrad.zero_grad", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.Logm.backward", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.step", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.radam.AdamW.step", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine._compute_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix"], ["", "def", "train", "(", "\n", "self", ",", "\n", "epoch", ",", "\n", "max_epoch", ",", "\n", "writer", ",", "\n", "print_freq", "=", "10", ",", "\n", "fixbase_epoch", "=", "0", ",", "\n", "open_layers", "=", "None", ",", "\n", ")", ":", "\n", "        ", "losses_triplet", "=", "AverageMeter", "(", ")", "\n", "losses_softmax", "=", "AverageMeter", "(", ")", "\n", "losses_mmd_bc", "=", "AverageMeter", "(", ")", "\n", "losses_mmd_wc", "=", "AverageMeter", "(", ")", "\n", "losses_mmd_global", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "self", ".", "model_student", ".", "train", "(", ")", "\n", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "if", "(", "epoch", "+", "1", ")", "<=", "fixbase_epoch", "and", "open_layers", "is", "not", "None", ":", "\n", "            ", "print", "(", "\n", "'* Only train {} (epoch: {}/{})'", ".", "format", "(", "\n", "open_layers", ",", "epoch", "+", "1", ",", "fixbase_epoch", "\n", ")", "\n", ")", "\n", "open_specified_layers", "(", "self", ".", "model_student", ",", "open_layers", ")", "\n", "", "else", ":", "\n", "            ", "open_all_layers", "(", "self", ".", "model_student", ")", "\n", "\n", "", "num_batches", "=", "len", "(", "self", ".", "train_loader", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# -------------------------------------------------------------------------------------------------------------------- #", "\n", "for", "batch_idx", ",", "(", "data", ",", "data_t", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "train_loader", ",", "self", ".", "train_loader_t", ")", ")", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "imgs", ",", "pids", "=", "self", ".", "_parse_data_for_train", "(", "data", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "                ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "pids", "=", "pids", ".", "cuda", "(", ")", "\n", "\n", "", "imgs_t", ",", "pids_t", "=", "self", ".", "_parse_data_for_train", "(", "data_t", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "                ", "imgs_t", "=", "imgs_t", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "\n", "outputs", ",", "features", "=", "self", ".", "model_student", "(", "imgs", ")", "\n", "outputs_t", ",", "features_t", "=", "self", ".", "model_student", "(", "imgs_t", ")", "\n", "\n", "loss_t", "=", "self", ".", "_compute_loss", "(", "self", ".", "criterion_t", ",", "features", ",", "pids", ")", "\n", "loss_x", "=", "self", ".", "_compute_loss", "(", "self", ".", "criterion_x", ",", "outputs", ",", "pids", ")", "\n", "loss", "=", "loss_t", "+", "loss_x", "\n", "\n", "if", "epoch", ">", "24", ":", "\n", "                ", "loss_mmd_wc", ",", "loss_mmd_bc", ",", "loss_mmd_global", "=", "self", ".", "_compute_loss", "(", "self", ".", "criterion_mmd", ",", "features", ",", "features_t", ")", "\n", "#loss = loss_t + loss_x + loss_mmd_bc + loss_mmd_wc", "\n", "loss", "=", "loss_t", "+", "loss_x", "+", "loss_mmd_global", "+", "loss_mmd_bc", "+", "loss_mmd_wc", "\n", "\n", "if", "self", ".", "mmd_only", ":", "\n", "                    ", "loss_t", "=", "torch", ".", "tensor", "(", "0", ")", "\n", "loss_x", "=", "torch", ".", "tensor", "(", "0", ")", "\n", "#loss = loss_mmd_bc + loss_mmd_wc", "\n", "loss", "=", "loss_mmd_bc", "+", "loss_mmd_wc", "+", "loss_mmd_global", "\n", "\n", "\n", "", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_student", ".", "step", "(", ")", "\n", "# -------------------------------------------------------------------------------------------------------------------- #", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "losses_triplet", ".", "update", "(", "loss_t", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "losses_softmax", ".", "update", "(", "loss_x", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "if", "epoch", ">", "24", ":", "\n", "                ", "losses_mmd_bc", ".", "update", "(", "loss_mmd_bc", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "losses_mmd_wc", ".", "update", "(", "loss_mmd_wc", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "losses_mmd_global", ".", "update", "(", "loss_mmd_global", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "if", "(", "batch_idx", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "# estimate remaining time", "\n", "                ", "eta_seconds", "=", "batch_time", ".", "avg", "*", "(", "\n", "num_batches", "-", "(", "batch_idx", "+", "1", ")", "+", "(", "max_epoch", "-", "\n", "(", "epoch", "+", "1", ")", ")", "*", "num_batches", "\n", ")", "\n", "eta_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "print", "(", "\n", "'Epoch: [{0}/{1}][{2}/{3}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Loss_t {losses1.val:.4f} ({losses1.avg:.4f})\\t'", "\n", "'Loss_x {losses2.val:.4f} ({losses2.avg:.4f})\\t'", "\n", "'Loss_mmd_wc {losses3.val:.4f} ({losses3.avg:.4f})\\t'", "\n", "'Loss_mmd_bc {losses4.val:.4f} ({losses4.avg:.4f})\\t'", "\n", "'Loss_mmd_global {losses5.val:.4f} ({losses5.avg:.4f})\\t'", "\n", "'eta {eta}'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "\n", "max_epoch", ",", "\n", "batch_idx", "+", "1", ",", "\n", "num_batches", ",", "\n", "batch_time", "=", "batch_time", ",", "\n", "losses1", "=", "losses_triplet", ",", "\n", "losses2", "=", "losses_softmax", ",", "\n", "losses3", "=", "losses_mmd_wc", ",", "\n", "losses4", "=", "losses_mmd_bc", ",", "\n", "losses5", "=", "losses_mmd_global", ",", "\n", "eta", "=", "eta_str", "\n", ")", "\n", ")", "\n", "\n", "", "if", "writer", "is", "not", "None", ":", "\n", "                ", "n_iter", "=", "epoch", "*", "num_batches", "+", "batch_idx", "\n", "writer", ".", "add_scalar", "(", "'Train/Time'", ",", "batch_time", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Loss_triplet'", ",", "losses_triplet", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Loss_softmax'", ",", "losses_softmax", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Loss_mmd_bc'", ",", "losses_mmd_bc", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Loss_mmd_wc'", ",", "losses_mmd_wc", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/Loss_mmd_global'", ",", "losses_mmd_global", ".", "avg", ",", "n_iter", ")", "\n", "writer", ".", "add_scalar", "(", "\n", "'Train/Lr'", ",", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "n_iter", "\n", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "self", ".", "scheduler_student", "is", "not", "None", ":", "\n", "            ", "self", ".", "scheduler_student", ".", "step", "(", ")", "\n", "\n", "", "print_distri", "=", "False", "\n", "\n", "if", "print_distri", ":", "\n", "\n", "            ", "instances", "=", "self", ".", "datamanager", ".", "train_loader", ".", "sampler", ".", "num_instances", "\n", "batch_size", "=", "self", ".", "datamanager", ".", "train_loader", ".", "batch_size", "\n", "feature_size", "=", "2048", "# features_t.shape[1]  # 2048", "\n", "t", "=", "torch", ".", "reshape", "(", "features_t", ",", "(", "int", "(", "batch_size", "/", "instances", ")", ",", "instances", ",", "feature_size", ")", ")", "\n", "\n", "#  and compute bc/wc euclidean distance", "\n", "bct", "=", "compute_distance_matrix", "(", "t", "[", "0", "]", ",", "t", "[", "0", "]", ")", "\n", "wct", "=", "compute_distance_matrix", "(", "t", "[", "0", "]", ",", "t", "[", "1", "]", ")", "\n", "for", "i", "in", "t", "[", "1", ":", "]", ":", "\n", "                ", "bct", "=", "torch", ".", "cat", "(", "(", "bct", ",", "compute_distance_matrix", "(", "i", ",", "i", ")", ")", ")", "\n", "for", "j", "in", "t", ":", "\n", "                    ", "if", "j", "is", "not", "i", ":", "\n", "                        ", "wct", "=", "torch", ".", "cat", "(", "(", "wct", ",", "compute_distance_matrix", "(", "i", ",", "j", ")", ")", ")", "\n", "\n", "", "", "", "s", "=", "torch", ".", "reshape", "(", "features", ",", "(", "int", "(", "batch_size", "/", "instances", ")", ",", "instances", ",", "feature_size", ")", ")", "\n", "bcs", "=", "compute_distance_matrix", "(", "s", "[", "0", "]", ",", "s", "[", "0", "]", ")", "\n", "wcs", "=", "compute_distance_matrix", "(", "s", "[", "0", "]", ",", "s", "[", "1", "]", ")", "\n", "for", "i", "in", "s", "[", "1", ":", "]", ":", "\n", "                ", "bcs", "=", "torch", ".", "cat", "(", "(", "bcs", ",", "compute_distance_matrix", "(", "i", ",", "i", ")", ")", ")", "\n", "for", "j", "in", "s", ":", "\n", "                    ", "if", "j", "is", "not", "i", ":", "\n", "                        ", "wcs", "=", "torch", ".", "cat", "(", "(", "wcs", ",", "compute_distance_matrix", "(", "i", ",", "j", ")", ")", ")", "\n", "\n", "", "", "", "bcs", "=", "bcs", ".", "detach", "(", ")", "\n", "wcs", "=", "wcs", ".", "detach", "(", ")", "\n", "\n", "b_c", "=", "[", "x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "for", "x", "in", "bcs", ".", "flatten", "(", ")", "if", "x", ">", "0.000001", "]", "\n", "w_c", "=", "[", "x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "for", "x", "in", "wcs", ".", "flatten", "(", ")", "if", "x", ">", "0.000001", "]", "\n", "data_bc", "=", "norm", ".", "rvs", "(", "b_c", ")", "\n", "sns", ".", "distplot", "(", "data_bc", ",", "bins", "=", "'auto'", ",", "fit", "=", "norm", ",", "kde", "=", "False", ",", "label", "=", "'from the same class (within class)'", ")", "\n", "data_wc", "=", "norm", ".", "rvs", "(", "w_c", ")", "\n", "sns", ".", "distplot", "(", "data_wc", ",", "bins", "=", "'auto'", ",", "fit", "=", "norm", ",", "kde", "=", "False", ",", "label", "=", "'from different class (between class)'", ")", "\n", "plt", ".", "xlabel", "(", "'Euclidean distance'", ")", "\n", "plt", ".", "ylabel", "(", "'Frequence of apparition'", ")", "\n", "plt", ".", "title", "(", "'Source Domain'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "b_ct", "=", "[", "x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "for", "x", "in", "bct", ".", "flatten", "(", ")", "if", "x", ">", "0.1", "]", "\n", "w_ct", "=", "[", "x", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "item", "(", ")", "for", "x", "in", "wct", ".", "flatten", "(", ")", "if", "x", ">", "0.1", "]", "\n", "data_bc", "=", "norm", ".", "rvs", "(", "b_ct", ")", "\n", "sns", ".", "distplot", "(", "data_bc", ",", "bins", "=", "'auto'", ",", "fit", "=", "norm", ",", "kde", "=", "False", ",", "label", "=", "'from the same class (within class)'", ")", "\n", "data_wc", "=", "norm", ".", "rvs", "(", "w_ct", ")", "\n", "sns", ".", "distplot", "(", "data_wc", ",", "bins", "=", "'auto'", ",", "fit", "=", "norm", ",", "kde", "=", "False", ",", "label", "=", "'from different class (between class)'", ")", "\n", "plt", ".", "xlabel", "(", "'Euclidean distance'", ")", "\n", "plt", ".", "ylabel", "(", "'Frequence of apparition'", ")", "\n", "plt", ".", "title", "(", "'Target Domain'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.cuhk03.CUHK03.__init__": [[26, 91], ["os.abspath", "os.join", "cuhk03.CUHK03.download_dataset", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "cuhk03.CUHK03.check_before_run", "cuhk03.CUHK03.preprocess_split", "torchreid.utils.read_json", "dataset.ImageDataset.__init__", "os.expanduser", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.download_dataset", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.check_before_run", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.cuhk03.CUHK03.preprocess_split", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.read_json", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", "=", "''", ",", "\n", "split_id", "=", "0", ",", "\n", "cuhk03_labeled", "=", "False", ",", "\n", "cuhk03_classic_split", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "root", "=", "osp", ".", "abspath", "(", "osp", ".", "expanduser", "(", "root", ")", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "download_dataset", "(", "self", ".", "dataset_dir", ",", "self", ".", "dataset_url", ")", "\n", "\n", "self", ".", "data_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'cuhk03_release'", ")", "\n", "self", ".", "raw_mat_path", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'cuhk-03.mat'", ")", "\n", "\n", "self", ".", "imgs_detected_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'images_detected'", ")", "\n", "self", ".", "imgs_labeled_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'images_labeled'", ")", "\n", "\n", "self", ".", "split_classic_det_json_path", "=", "osp", ".", "join", "(", "\n", "self", ".", "dataset_dir", ",", "'splits_classic_detected.json'", "\n", ")", "\n", "self", ".", "split_classic_lab_json_path", "=", "osp", ".", "join", "(", "\n", "self", ".", "dataset_dir", ",", "'splits_classic_labeled.json'", "\n", ")", "\n", "\n", "self", ".", "split_new_det_json_path", "=", "osp", ".", "join", "(", "\n", "self", ".", "dataset_dir", ",", "'splits_new_detected.json'", "\n", ")", "\n", "self", ".", "split_new_lab_json_path", "=", "osp", ".", "join", "(", "\n", "self", ".", "dataset_dir", ",", "'splits_new_labeled.json'", "\n", ")", "\n", "\n", "self", ".", "split_new_det_mat_path", "=", "osp", ".", "join", "(", "\n", "self", ".", "dataset_dir", ",", "'cuhk03_new_protocol_config_detected.mat'", "\n", ")", "\n", "self", ".", "split_new_lab_mat_path", "=", "osp", ".", "join", "(", "\n", "self", ".", "dataset_dir", ",", "'cuhk03_new_protocol_config_labeled.mat'", "\n", ")", "\n", "\n", "required_files", "=", "[", "\n", "self", ".", "dataset_dir", ",", "self", ".", "data_dir", ",", "self", ".", "raw_mat_path", ",", "\n", "self", ".", "split_new_det_mat_path", ",", "self", ".", "split_new_lab_mat_path", "\n", "]", "\n", "self", ".", "check_before_run", "(", "required_files", ")", "\n", "\n", "self", ".", "preprocess_split", "(", ")", "\n", "\n", "if", "cuhk03_labeled", ":", "\n", "            ", "split_path", "=", "self", ".", "split_classic_lab_json_path", "if", "cuhk03_classic_split", "else", "self", ".", "split_new_lab_json_path", "\n", "", "else", ":", "\n", "            ", "split_path", "=", "self", ".", "split_classic_det_json_path", "if", "cuhk03_classic_split", "else", "self", ".", "split_new_det_json_path", "\n", "\n", "", "splits", "=", "read_json", "(", "split_path", ")", "\n", "assert", "split_id", "<", "len", "(", "\n", "splits", "\n", ")", ",", "'Condition split_id ({}) < len(splits) ({}) is false'", ".", "format", "(", "\n", "split_id", ",", "len", "(", "splits", ")", "\n", ")", "\n", "split", "=", "splits", "[", "split_id", "]", "\n", "\n", "train", "=", "split", "[", "'train'", "]", "\n", "query", "=", "split", "[", "'query'", "]", "\n", "gallery", "=", "split", "[", "'gallery'", "]", "\n", "\n", "super", "(", "CUHK03", ",", "self", ")", ".", "__init__", "(", "train", ",", "query", ",", "gallery", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.cuhk03.CUHK03.preprocess_split": [[92, 308], ["torchreid.utils.mkdir_if_missing", "torchreid.utils.mkdir_if_missing", "print", "h5py.File", "cuhk03.CUHK03.preprocess_split._extract_img"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.mkdir_if_missing", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.mkdir_if_missing"], ["", "def", "preprocess_split", "(", "self", ")", ":", "\n", "# This function is a bit complex and ugly, what it does is", "\n", "# 1. extract data from cuhk-03.mat and save as png images", "\n", "# 2. create 20 classic splits (Li et al. CVPR'14)", "\n", "# 3. create new split (Zhong et al. CVPR'17)", "\n", "        ", "if", "osp", ".", "exists", "(", "self", ".", "imgs_labeled_dir", ")", "and", "osp", ".", "exists", "(", "self", ".", "imgs_detected_dir", ")", "and", "osp", ".", "exists", "(", "self", ".", "split_classic_det_json_path", ")", "and", "osp", ".", "exists", "(", "self", ".", "split_classic_lab_json_path", ")", "and", "osp", ".", "exists", "(", "self", ".", "split_new_det_json_path", ")", "and", "osp", ".", "exists", "(", "self", ".", "split_new_lab_json_path", ")", ":", "\n", "            ", "return", "\n", "\n", "", "import", "h5py", "\n", "import", "imageio", "\n", "from", "scipy", ".", "io", "import", "loadmat", "\n", "\n", "mkdir_if_missing", "(", "self", ".", "imgs_detected_dir", ")", "\n", "mkdir_if_missing", "(", "self", ".", "imgs_labeled_dir", ")", "\n", "\n", "print", "(", "\n", "'Extract image data from \"{}\" and save as png'", ".", "format", "(", "\n", "self", ".", "raw_mat_path", "\n", ")", "\n", ")", "\n", "mat", "=", "h5py", ".", "File", "(", "self", ".", "raw_mat_path", ",", "'r'", ")", "\n", "\n", "def", "_deref", "(", "ref", ")", ":", "\n", "            ", "return", "mat", "[", "ref", "]", "[", ":", "]", ".", "T", "\n", "\n", "", "def", "_process_images", "(", "img_refs", ",", "campid", ",", "pid", ",", "save_dir", ")", ":", "\n", "            ", "img_paths", "=", "[", "]", "# Note: some persons only have images for one view", "\n", "for", "imgid", ",", "img_ref", "in", "enumerate", "(", "img_refs", ")", ":", "\n", "                ", "img", "=", "_deref", "(", "img_ref", ")", "\n", "if", "img", ".", "size", "==", "0", "or", "img", ".", "ndim", "<", "3", ":", "\n", "                    ", "continue", "# skip empty cell", "\n", "# images are saved with the following format, index-1 (ensure uniqueness)", "\n", "# campid: index of camera pair (1-5)", "\n", "# pid: index of person in 'campid'-th camera pair", "\n", "# viewid: index of view, {1, 2}", "\n", "# imgid: index of image, (1-10)", "\n", "", "viewid", "=", "1", "if", "imgid", "<", "5", "else", "2", "\n", "img_name", "=", "'{:01d}_{:03d}_{:01d}_{:02d}.png'", ".", "format", "(", "\n", "campid", "+", "1", ",", "pid", "+", "1", ",", "viewid", ",", "imgid", "+", "1", "\n", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "save_dir", ",", "img_name", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "img_path", ")", ":", "\n", "                    ", "imageio", ".", "imwrite", "(", "img_path", ",", "img", ")", "\n", "", "img_paths", ".", "append", "(", "img_path", ")", "\n", "", "return", "img_paths", "\n", "\n", "", "def", "_extract_img", "(", "image_type", ")", ":", "\n", "            ", "print", "(", "'Processing {} images ...'", ".", "format", "(", "image_type", ")", ")", "\n", "meta_data", "=", "[", "]", "\n", "imgs_dir", "=", "self", ".", "imgs_detected_dir", "if", "image_type", "==", "'detected'", "else", "self", ".", "imgs_labeled_dir", "\n", "for", "campid", ",", "camp_ref", "in", "enumerate", "(", "mat", "[", "image_type", "]", "[", "0", "]", ")", ":", "\n", "                ", "camp", "=", "_deref", "(", "camp_ref", ")", "\n", "num_pids", "=", "camp", ".", "shape", "[", "0", "]", "\n", "for", "pid", "in", "range", "(", "num_pids", ")", ":", "\n", "                    ", "img_paths", "=", "_process_images", "(", "\n", "camp", "[", "pid", ",", ":", "]", ",", "campid", ",", "pid", ",", "imgs_dir", "\n", ")", "\n", "assert", "len", "(", "img_paths", ")", ">", "0", ",", "'campid{}-pid{} has no images'", ".", "format", "(", "campid", ",", "pid", ")", "\n", "meta_data", ".", "append", "(", "(", "campid", "+", "1", ",", "pid", "+", "1", ",", "img_paths", ")", ")", "\n", "", "print", "(", "\n", "'- done camera pair {} with {} identities'", ".", "format", "(", "\n", "campid", "+", "1", ",", "num_pids", "\n", ")", "\n", ")", "\n", "", "return", "meta_data", "\n", "\n", "", "meta_detected", "=", "_extract_img", "(", "'detected'", ")", "\n", "meta_labeled", "=", "_extract_img", "(", "'labeled'", ")", "\n", "\n", "def", "_extract_classic_split", "(", "meta_data", ",", "test_split", ")", ":", "\n", "            ", "train", ",", "test", "=", "[", "]", ",", "[", "]", "\n", "num_train_pids", ",", "num_test_pids", "=", "0", ",", "0", "\n", "num_train_imgs", ",", "num_test_imgs", "=", "0", ",", "0", "\n", "for", "i", ",", "(", "campid", ",", "pid", ",", "img_paths", ")", "in", "enumerate", "(", "meta_data", ")", ":", "\n", "\n", "                ", "if", "[", "campid", ",", "pid", "]", "in", "test_split", ":", "\n", "                    ", "for", "img_path", "in", "img_paths", ":", "\n", "                        ", "camid", "=", "int", "(", "\n", "osp", ".", "basename", "(", "img_path", ")", ".", "split", "(", "'_'", ")", "[", "2", "]", "\n", ")", "-", "1", "# make it 0-based", "\n", "test", ".", "append", "(", "(", "img_path", ",", "num_test_pids", ",", "camid", ")", ")", "\n", "", "num_test_pids", "+=", "1", "\n", "num_test_imgs", "+=", "len", "(", "img_paths", ")", "\n", "", "else", ":", "\n", "                    ", "for", "img_path", "in", "img_paths", ":", "\n", "                        ", "camid", "=", "int", "(", "\n", "osp", ".", "basename", "(", "img_path", ")", ".", "split", "(", "'_'", ")", "[", "2", "]", "\n", ")", "-", "1", "# make it 0-based", "\n", "train", ".", "append", "(", "(", "img_path", ",", "num_train_pids", ",", "camid", ")", ")", "\n", "", "num_train_pids", "+=", "1", "\n", "num_train_imgs", "+=", "len", "(", "img_paths", ")", "\n", "", "", "return", "train", ",", "num_train_pids", ",", "num_train_imgs", ",", "test", ",", "num_test_pids", ",", "num_test_imgs", "\n", "\n", "", "print", "(", "'Creating classic splits (# = 20) ...'", ")", "\n", "splits_classic_det", ",", "splits_classic_lab", "=", "[", "]", ",", "[", "]", "\n", "for", "split_ref", "in", "mat", "[", "'testsets'", "]", "[", "0", "]", ":", "\n", "            ", "test_split", "=", "_deref", "(", "split_ref", ")", ".", "tolist", "(", ")", "\n", "\n", "# create split for detected images", "\n", "train", ",", "num_train_pids", ",", "num_train_imgs", ",", "test", ",", "num_test_pids", ",", "num_test_imgs", "=", "_extract_classic_split", "(", "meta_detected", ",", "test_split", ")", "\n", "splits_classic_det", ".", "append", "(", "\n", "{", "\n", "'train'", ":", "train", ",", "\n", "'query'", ":", "test", ",", "\n", "'gallery'", ":", "test", ",", "\n", "'num_train_pids'", ":", "num_train_pids", ",", "\n", "'num_train_imgs'", ":", "num_train_imgs", ",", "\n", "'num_query_pids'", ":", "num_test_pids", ",", "\n", "'num_query_imgs'", ":", "num_test_imgs", ",", "\n", "'num_gallery_pids'", ":", "num_test_pids", ",", "\n", "'num_gallery_imgs'", ":", "num_test_imgs", "\n", "}", "\n", ")", "\n", "\n", "# create split for labeled images", "\n", "train", ",", "num_train_pids", ",", "num_train_imgs", ",", "test", ",", "num_test_pids", ",", "num_test_imgs", "=", "_extract_classic_split", "(", "meta_labeled", ",", "test_split", ")", "\n", "splits_classic_lab", ".", "append", "(", "\n", "{", "\n", "'train'", ":", "train", ",", "\n", "'query'", ":", "test", ",", "\n", "'gallery'", ":", "test", ",", "\n", "'num_train_pids'", ":", "num_train_pids", ",", "\n", "'num_train_imgs'", ":", "num_train_imgs", ",", "\n", "'num_query_pids'", ":", "num_test_pids", ",", "\n", "'num_query_imgs'", ":", "num_test_imgs", ",", "\n", "'num_gallery_pids'", ":", "num_test_pids", ",", "\n", "'num_gallery_imgs'", ":", "num_test_imgs", "\n", "}", "\n", ")", "\n", "\n", "", "write_json", "(", "splits_classic_det", ",", "self", ".", "split_classic_det_json_path", ")", "\n", "write_json", "(", "splits_classic_lab", ",", "self", ".", "split_classic_lab_json_path", ")", "\n", "\n", "def", "_extract_set", "(", "filelist", ",", "pids", ",", "pid2label", ",", "idxs", ",", "img_dir", ",", "relabel", ")", ":", "\n", "            ", "tmp_set", "=", "[", "]", "\n", "unique_pids", "=", "set", "(", ")", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "img_name", "=", "filelist", "[", "idx", "]", "[", "0", "]", "\n", "camid", "=", "int", "(", "img_name", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "-", "1", "# make it 0-based", "\n", "pid", "=", "pids", "[", "idx", "]", "\n", "if", "relabel", ":", "\n", "                    ", "pid", "=", "pid2label", "[", "pid", "]", "\n", "", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "img_name", ")", "\n", "tmp_set", ".", "append", "(", "(", "img_path", ",", "int", "(", "pid", ")", ",", "camid", ")", ")", "\n", "unique_pids", ".", "add", "(", "pid", ")", "\n", "", "return", "tmp_set", ",", "len", "(", "unique_pids", ")", ",", "len", "(", "idxs", ")", "\n", "\n", "", "def", "_extract_new_split", "(", "split_dict", ",", "img_dir", ")", ":", "\n", "            ", "train_idxs", "=", "split_dict", "[", "'train_idx'", "]", ".", "flatten", "(", ")", "-", "1", "# index-0", "\n", "pids", "=", "split_dict", "[", "'labels'", "]", ".", "flatten", "(", ")", "\n", "train_pids", "=", "set", "(", "pids", "[", "train_idxs", "]", ")", "\n", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "train_pids", ")", "}", "\n", "query_idxs", "=", "split_dict", "[", "'query_idx'", "]", ".", "flatten", "(", ")", "-", "1", "\n", "gallery_idxs", "=", "split_dict", "[", "'gallery_idx'", "]", ".", "flatten", "(", ")", "-", "1", "\n", "filelist", "=", "split_dict", "[", "'filelist'", "]", ".", "flatten", "(", ")", "\n", "train_info", "=", "_extract_set", "(", "\n", "filelist", ",", "pids", ",", "pid2label", ",", "train_idxs", ",", "img_dir", ",", "relabel", "=", "True", "\n", ")", "\n", "query_info", "=", "_extract_set", "(", "\n", "filelist", ",", "pids", ",", "pid2label", ",", "query_idxs", ",", "img_dir", ",", "relabel", "=", "False", "\n", ")", "\n", "gallery_info", "=", "_extract_set", "(", "\n", "filelist", ",", "\n", "pids", ",", "\n", "pid2label", ",", "\n", "gallery_idxs", ",", "\n", "img_dir", ",", "\n", "relabel", "=", "False", "\n", ")", "\n", "return", "train_info", ",", "query_info", ",", "gallery_info", "\n", "\n", "", "print", "(", "'Creating new split for detected images (767/700) ...'", ")", "\n", "train_info", ",", "query_info", ",", "gallery_info", "=", "_extract_new_split", "(", "\n", "loadmat", "(", "self", ".", "split_new_det_mat_path", ")", ",", "self", ".", "imgs_detected_dir", "\n", ")", "\n", "split", "=", "[", "\n", "{", "\n", "'train'", ":", "train_info", "[", "0", "]", ",", "\n", "'query'", ":", "query_info", "[", "0", "]", ",", "\n", "'gallery'", ":", "gallery_info", "[", "0", "]", ",", "\n", "'num_train_pids'", ":", "train_info", "[", "1", "]", ",", "\n", "'num_train_imgs'", ":", "train_info", "[", "2", "]", ",", "\n", "'num_query_pids'", ":", "query_info", "[", "1", "]", ",", "\n", "'num_query_imgs'", ":", "query_info", "[", "2", "]", ",", "\n", "'num_gallery_pids'", ":", "gallery_info", "[", "1", "]", ",", "\n", "'num_gallery_imgs'", ":", "gallery_info", "[", "2", "]", "\n", "}", "\n", "]", "\n", "write_json", "(", "split", ",", "self", ".", "split_new_det_json_path", ")", "\n", "\n", "print", "(", "'Creating new split for labeled images (767/700) ...'", ")", "\n", "train_info", ",", "query_info", ",", "gallery_info", "=", "_extract_new_split", "(", "\n", "loadmat", "(", "self", ".", "split_new_lab_mat_path", ")", ",", "self", ".", "imgs_labeled_dir", "\n", ")", "\n", "split", "=", "[", "\n", "{", "\n", "'train'", ":", "train_info", "[", "0", "]", ",", "\n", "'query'", ":", "query_info", "[", "0", "]", ",", "\n", "'gallery'", ":", "gallery_info", "[", "0", "]", ",", "\n", "'num_train_pids'", ":", "train_info", "[", "1", "]", ",", "\n", "'num_train_imgs'", ":", "train_info", "[", "2", "]", ",", "\n", "'num_query_pids'", ":", "query_info", "[", "1", "]", ",", "\n", "'num_query_imgs'", ":", "query_info", "[", "2", "]", ",", "\n", "'num_gallery_pids'", ":", "gallery_info", "[", "1", "]", ",", "\n", "'num_gallery_imgs'", ":", "gallery_info", "[", "2", "]", "\n", "}", "\n", "]", "\n", "write_json", "(", "split", ",", "self", ".", "split_new_lab_json_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.market1501.Market1501.__init__": [[26, 63], ["os.abspath", "os.join", "market1501.Market1501.download_dataset", "os.join", "os.isdir", "os.join", "os.join", "os.join", "os.join", "market1501.Market1501.check_before_run", "market1501.Market1501.process_dir", "market1501.Market1501.process_dir", "market1501.Market1501.process_dir", "dataset.ImageDataset.__init__", "os.expanduser", "warnings.warn", "required_files.append", "market1501.Market1501.process_dir"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.download_dataset", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.check_before_run", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.process_dir", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.process_dir", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.process_dir", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.process_dir"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "market1501_500k", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "root", "=", "osp", ".", "abspath", "(", "osp", ".", "expanduser", "(", "root", ")", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "download_dataset", "(", "self", ".", "dataset_dir", ",", "self", ".", "dataset_url", ")", "\n", "\n", "# allow alternative directory structure", "\n", "self", ".", "data_dir", "=", "self", ".", "dataset_dir", "\n", "data_dir", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'Market-1501-v15.09.15'", ")", "\n", "if", "osp", ".", "isdir", "(", "data_dir", ")", ":", "\n", "            ", "self", ".", "data_dir", "=", "data_dir", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'The current data structure is deprecated. Please '", "\n", "'put data folders such as \"bounding_box_train\" under '", "\n", "'\"Market-1501-v15.09.15\".'", "\n", ")", "\n", "\n", "", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'bounding_box_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'bounding_box_test'", ")", "\n", "self", ".", "extra_gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'images'", ")", "\n", "self", ".", "market1501_500k", "=", "market1501_500k", "\n", "\n", "required_files", "=", "[", "\n", "self", ".", "data_dir", ",", "self", ".", "train_dir", ",", "self", ".", "query_dir", ",", "self", ".", "gallery_dir", "\n", "]", "\n", "if", "self", ".", "market1501_500k", ":", "\n", "            ", "required_files", ".", "append", "(", "self", ".", "extra_gallery_dir", ")", "\n", "", "self", ".", "check_before_run", "(", "required_files", ")", "\n", "\n", "train", "=", "self", ".", "process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", "=", "self", ".", "process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "if", "self", ".", "market1501_500k", ":", "\n", "            ", "gallery", "+=", "self", ".", "process_dir", "(", "self", ".", "extra_gallery_dir", ",", "relabel", "=", "False", ")", "\n", "\n", "", "super", "(", "Market1501", ",", "self", ")", ".", "__init__", "(", "train", ",", "query", ",", "gallery", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.market1501.Market1501.process_dir": [[64, 89], ["glob.glob", "re.compile", "set", "os.join", "map", "set.add", "map", "data.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "def", "process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "\n", "                ", "continue", "# junk images are just ignored", "\n", "", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "data", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "\n", "                ", "continue", "# junk images are just ignored", "\n", "", "assert", "0", "<=", "pid", "<=", "1501", "# pid == 0 means background", "\n", "assert", "1", "<=", "camid", "<=", "6", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "\n", "                ", "pid", "=", "pid2label", "[", "pid", "]", "\n", "", "data", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.prid.PRID.__init__": [[27, 56], ["os.abspath", "os.join", "prid.PRID.download_dataset", "os.join", "os.join", "os.join", "prid.PRID.check_before_run", "prid.PRID.prepare_split", "torchreid.utils.read_json", "prid.PRID.process_split", "dataset.ImageDataset.__init__", "os.expanduser", "len", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.download_dataset", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.check_before_run", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.prid.PRID.prepare_split", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.read_json", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.prid.PRID.process_split", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "split_id", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "root", "=", "osp", ".", "abspath", "(", "osp", ".", "expanduser", "(", "root", ")", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "download_dataset", "(", "self", ".", "dataset_dir", ",", "self", ".", "dataset_url", ")", "\n", "\n", "self", ".", "cam_a_dir", "=", "osp", ".", "join", "(", "\n", "self", ".", "dataset_dir", ",", "'prid_2011'", ",", "'single_shot'", ",", "'cam_a'", "\n", ")", "\n", "self", ".", "cam_b_dir", "=", "osp", ".", "join", "(", "\n", "self", ".", "dataset_dir", ",", "'prid_2011'", ",", "'single_shot'", ",", "'cam_b'", "\n", ")", "\n", "self", ".", "split_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'splits_single_shot.json'", ")", "\n", "\n", "required_files", "=", "[", "self", ".", "dataset_dir", ",", "self", ".", "cam_a_dir", ",", "self", ".", "cam_b_dir", "]", "\n", "self", ".", "check_before_run", "(", "required_files", ")", "\n", "\n", "self", ".", "prepare_split", "(", ")", "\n", "splits", "=", "read_json", "(", "self", ".", "split_path", ")", "\n", "if", "split_id", ">=", "len", "(", "splits", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'split_id exceeds range, received {}, but expected between 0 and {}'", "\n", ".", "format", "(", "split_id", ",", "\n", "len", "(", "splits", ")", "-", "1", ")", "\n", ")", "\n", "", "split", "=", "splits", "[", "split_id", "]", "\n", "\n", "train", ",", "query", ",", "gallery", "=", "self", ".", "process_split", "(", "split", ")", "\n", "\n", "super", "(", "PRID", ",", "self", ")", ".", "__init__", "(", "train", ",", "query", ",", "gallery", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.prid.PRID.prepare_split": [[57, 75], ["os.exists", "print", "range", "print", "torchreid.utils.write_json", "print", "random.sample", "random.sample.sort", "splits.append", "len", "range"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.write_json"], ["", "def", "prepare_split", "(", "self", ")", ":", "\n", "        ", "if", "not", "osp", ".", "exists", "(", "self", ".", "split_path", ")", ":", "\n", "            ", "print", "(", "'Creating splits ...'", ")", "\n", "\n", "splits", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "# randomly sample 100 IDs for train and use the rest 100 IDs for test", "\n", "# (note: there are only 200 IDs appearing in both views)", "\n", "                ", "pids", "=", "[", "i", "for", "i", "in", "range", "(", "1", ",", "201", ")", "]", "\n", "train_pids", "=", "random", ".", "sample", "(", "pids", ",", "100", ")", "\n", "train_pids", ".", "sort", "(", ")", "\n", "test_pids", "=", "[", "i", "for", "i", "in", "pids", "if", "i", "not", "in", "train_pids", "]", "\n", "split", "=", "{", "'train'", ":", "train_pids", ",", "'test'", ":", "test_pids", "}", "\n", "splits", ".", "append", "(", "split", ")", "\n", "\n", "", "print", "(", "'Totally {} splits are created'", ".", "format", "(", "len", "(", "splits", ")", ")", ")", "\n", "write_json", "(", "splits", ",", "self", ".", "split_path", ")", "\n", "print", "(", "'Split file is saved to {}'", ".", "format", "(", "self", ".", "split_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.prid.PRID.process_split": [[76, 106], ["range", "os.join", "train.append", "os.join", "train.append", "os.join", "query.append", "os.join", "gallery.append", "os.join", "gallery.append", "enumerate", "str().zfill", "str().zfill", "str().zfill", "str", "str", "str"], "methods", ["None"], ["", "", "def", "process_split", "(", "self", ",", "split", ")", ":", "\n", "        ", "train_pids", "=", "split", "[", "'train'", "]", "\n", "test_pids", "=", "split", "[", "'test'", "]", "\n", "\n", "train_pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "train_pids", ")", "}", "\n", "\n", "# train", "\n", "train", "=", "[", "]", "\n", "for", "pid", "in", "train_pids", ":", "\n", "            ", "img_name", "=", "'person_'", "+", "str", "(", "pid", ")", ".", "zfill", "(", "4", ")", "+", "'.png'", "\n", "pid", "=", "train_pid2label", "[", "pid", "]", "\n", "img_a_path", "=", "osp", ".", "join", "(", "self", ".", "cam_a_dir", ",", "img_name", ")", "\n", "train", ".", "append", "(", "(", "img_a_path", ",", "pid", ",", "0", ")", ")", "\n", "img_b_path", "=", "osp", ".", "join", "(", "self", ".", "cam_b_dir", ",", "img_name", ")", "\n", "train", ".", "append", "(", "(", "img_b_path", ",", "pid", ",", "1", ")", ")", "\n", "\n", "# query and gallery", "\n", "", "query", ",", "gallery", "=", "[", "]", ",", "[", "]", "\n", "for", "pid", "in", "test_pids", ":", "\n", "            ", "img_name", "=", "'person_'", "+", "str", "(", "pid", ")", ".", "zfill", "(", "4", ")", "+", "'.png'", "\n", "img_a_path", "=", "osp", ".", "join", "(", "self", ".", "cam_a_dir", ",", "img_name", ")", "\n", "query", ".", "append", "(", "(", "img_a_path", ",", "pid", ",", "0", ")", ")", "\n", "img_b_path", "=", "osp", ".", "join", "(", "self", ".", "cam_b_dir", ",", "img_name", ")", "\n", "gallery", ".", "append", "(", "(", "img_b_path", ",", "pid", ",", "1", ")", ")", "\n", "", "for", "pid", "in", "range", "(", "201", ",", "750", ")", ":", "\n", "            ", "img_name", "=", "'person_'", "+", "str", "(", "pid", ")", ".", "zfill", "(", "4", ")", "+", "'.png'", "\n", "img_b_path", "=", "osp", ".", "join", "(", "self", ".", "cam_b_dir", ",", "img_name", ")", "\n", "gallery", ".", "append", "(", "(", "img_b_path", ",", "pid", ",", "1", ")", ")", "\n", "\n", "", "return", "train", ",", "query", ",", "gallery", "", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.dukemtmc.DukeMTMCreID.__init__": [[26, 48], ["os.abspath", "os.join", "dukemtmc.DukeMTMCreID.download_dataset", "os.join", "os.join", "os.join", "dukemtmc.DukeMTMCreID.check_before_run", "dukemtmc.DukeMTMCreID.process_dir", "dukemtmc.DukeMTMCreID.process_dir", "dukemtmc.DukeMTMCreID.process_dir", "dataset.ImageDataset.__init__", "os.expanduser"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.download_dataset", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.check_before_run", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.process_dir", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.process_dir", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.process_dir", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "root", "=", "osp", ".", "abspath", "(", "osp", ".", "expanduser", "(", "root", ")", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "download_dataset", "(", "self", ".", "dataset_dir", ",", "self", ".", "dataset_url", ")", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "\n", "self", ".", "dataset_dir", ",", "'DukeMTMC-reID/bounding_box_train'", "\n", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-reID/query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "\n", "self", ".", "dataset_dir", ",", "'DukeMTMC-reID/bounding_box_test'", "\n", ")", "\n", "\n", "required_files", "=", "[", "\n", "self", ".", "dataset_dir", ",", "self", ".", "train_dir", ",", "self", ".", "query_dir", ",", "self", ".", "gallery_dir", "\n", "]", "\n", "self", ".", "check_before_run", "(", "required_files", ")", "\n", "\n", "train", "=", "self", ".", "process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", "=", "self", ".", "process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "\n", "super", "(", "DukeMTMCreID", ",", "self", ")", ".", "__init__", "(", "train", ",", "query", ",", "gallery", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.dukemtmc.DukeMTMCreID.process_dir": [[49, 73], ["glob.glob", "re.compile", "set", "os.join", "map", "data.append", "re.compile.search", "map", "set.add", "print", "print", "print", "enumerate", "re.compile.search().groups", "re.compile.search().groups", "re.compile.search", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "def", "process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "if", "pattern", ".", "search", "(", "img_path", ")", "!=", "None", ":", "\n", "                ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'img_path :'", ",", "img_path", ")", "\n", "print", "(", "'pattern.search(img_path) : '", ",", "pattern", ".", "search", "(", "img_path", ")", ")", "\n", "print", "(", "'None...'", ")", "\n", "", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "data", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "assert", "1", "<=", "camid", "<=", "8", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "data", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.__init__": [[47, 84], ["os.abspath", "os.join", "msmt17.MSMT17.download_dataset", "os.join", "os.isdir", "os.join", "os.join", "os.join", "os.join", "msmt17.MSMT17.check_before_run", "msmt17.MSMT17.process_dir", "msmt17.MSMT17.process_dir", "msmt17.MSMT17.process_dir", "dataset.ImageDataset.__init__", "os.expanduser", "warnings.warn", "required_files.append", "msmt17.MSMT17.process_dir"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.download_dataset", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.check_before_run", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.process_dir", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.process_dir", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.process_dir", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.process_dir"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "market1501_500k", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "root", "=", "osp", ".", "abspath", "(", "osp", ".", "expanduser", "(", "root", ")", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "download_dataset", "(", "self", ".", "dataset_dir", ",", "self", ".", "dataset_url", ")", "\n", "\n", "# allow alternative directory structure", "\n", "self", ".", "data_dir", "=", "self", ".", "dataset_dir", "\n", "data_dir", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'MSMT17_V1'", ")", "\n", "if", "osp", ".", "isdir", "(", "data_dir", ")", ":", "\n", "            ", "self", ".", "data_dir", "=", "data_dir", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'The current data structure is deprecated. Please '", "\n", "'put data folders such as \"bounding_box_train\" under '", "\n", "'\"Market-1501-v15.09.15\".'", "\n", ")", "\n", "\n", "", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'bounding_box_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'bounding_box_test'", ")", "\n", "self", ".", "extra_gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'images'", ")", "\n", "self", ".", "market1501_500k", "=", "market1501_500k", "\n", "\n", "required_files", "=", "[", "\n", "self", ".", "data_dir", ",", "self", ".", "train_dir", ",", "self", ".", "query_dir", ",", "self", ".", "gallery_dir", "\n", "]", "\n", "if", "self", ".", "market1501_500k", ":", "\n", "            ", "required_files", ".", "append", "(", "self", ".", "extra_gallery_dir", ")", "\n", "", "self", ".", "check_before_run", "(", "required_files", ")", "\n", "\n", "train", "=", "self", ".", "process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", "=", "self", ".", "process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", "=", "self", ".", "process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "if", "self", ".", "market1501_500k", ":", "\n", "            ", "gallery", "+=", "self", ".", "process_dir", "(", "self", ".", "extra_gallery_dir", ",", "relabel", "=", "False", ")", "\n", "\n", "", "super", "(", "MSMT17", ",", "self", ")", ".", "__init__", "(", "train", ",", "query", ",", "gallery", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.image.msmt17.MSMT17.process_dir": [[85, 110], ["glob.glob", "re.compile", "set", "os.join", "map", "set.add", "map", "data.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "def", "process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "# pattern = re.compile(r'([-\\d]+)_c(\\d)')  # for Market1501", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c([\\d]+)'", ")", "# for MSMT17", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "\n", "                ", "continue", "# junk images are just ignored", "\n", "", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "data", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "\n", "                ", "continue", "# junk images are just ignored", "\n", "", "assert", "0", "<=", "pid", "<=", "4101", "# pid == 0 means background", "\n", "assert", "1", "<=", "camid", "<=", "15", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "\n", "                ", "pid", "=", "pid2label", "[", "pid", "]", "\n", "", "data", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.rank.eval_cuhk03": [[17, 92], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.mean", "print", "numpy.invert", "collections.defaultdict", "enumerate", "range", "np.asarray().astype.append", "raw_cmc.sum", "raw_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.any", "g_pids_dict[].append", "numpy.zeros", "collections.defaultdict.items", "masked_raw_cmc.cumsum", "_cmc[].astype", "numpy.asarray", "raw_cmc.cumsum.sum", "numpy.asarray", "len", "numpy.random.choice", "enumerate"], "function", ["None"], ["", "def", "eval_cuhk03", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", ")", ":", "\n", "    ", "\"\"\"Evaluation with cuhk03 metric\n    Key: one image for each gallery identity is randomly sampled for each query identity.\n    Random sampling is performed num_repeats times.\n    \"\"\"", "\n", "num_repeats", "=", "10", "\n", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\n", "'Note: number of gallery samples is quite small, got {}'", ".", "\n", "format", "(", "num_g", ")", "\n", ")", "\n", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "# number of valid query", "\n", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "raw_cmc", "=", "matches", "[", "q_idx", "]", "[", "\n", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "raw_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "kept_g_pids", "=", "g_pids", "[", "order", "]", "[", "keep", "]", "\n", "g_pids_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "idx", ",", "pid", "in", "enumerate", "(", "kept_g_pids", ")", ":", "\n", "            ", "g_pids_dict", "[", "pid", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "cmc", "=", "0.", "\n", "for", "repeat_idx", "in", "range", "(", "num_repeats", ")", ":", "\n", "            ", "mask", "=", "np", ".", "zeros", "(", "len", "(", "raw_cmc", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "_", ",", "idxs", "in", "g_pids_dict", ".", "items", "(", ")", ":", "\n", "# randomly sample one image for each gallery person", "\n", "                ", "rnd_idx", "=", "np", ".", "random", ".", "choice", "(", "idxs", ")", "\n", "mask", "[", "rnd_idx", "]", "=", "True", "\n", "", "masked_raw_cmc", "=", "raw_cmc", "[", "mask", "]", "\n", "_cmc", "=", "masked_raw_cmc", ".", "cumsum", "(", ")", "\n", "_cmc", "[", "_cmc", ">", "1", "]", "=", "1", "\n", "cmc", "+=", "_cmc", "[", ":", "max_rank", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "cmc", "/=", "num_repeats", "\n", "all_cmc", ".", "append", "(", "cmc", ")", "\n", "# compute AP", "\n", "num_rel", "=", "raw_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "raw_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "raw_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "'Error: all query identities do not appear in gallery'", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "\n", "return", "all_cmc", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.rank.eval_market1501": [[94, 154], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.mean", "print", "numpy.invert", "raw_cmc.cumsum", "np.asarray().astype.append", "raw_cmc.sum", "raw_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.any", "numpy.asarray", "raw_cmc.cumsum.sum", "numpy.asarray", "enumerate"], "function", ["None"], ["", "def", "eval_market1501", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", ")", ":", "\n", "    ", "\"\"\"Evaluation with market1501 metric\n    Key: for each query identity, its gallery images from the same camera view are discarded.\n    \"\"\"", "\n", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\n", "'Note: number of gallery samples is quite small, got {}'", ".", "\n", "format", "(", "num_g", ")", "\n", ")", "\n", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "# number of valid query", "\n", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "raw_cmc", "=", "matches", "[", "q_idx", "]", "[", "\n", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "raw_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "raw_cmc", ".", "cumsum", "(", ")", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "raw_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "raw_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "raw_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "'Error: all query identities do not appear in gallery'", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "\n", "return", "all_cmc", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.rank.evaluate_py": [[156, 166], ["rank.eval_cuhk03", "rank.eval_market1501"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.rank.eval_cuhk03", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.rank.eval_market1501"], ["", "def", "evaluate_py", "(", "\n", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", ",", "use_metric_cuhk03", ",", "dataset_name", "\n", ")", ":", "\n", "    ", "if", "use_metric_cuhk03", "and", "dataset_name", "==", "'cuhk03'", ":", "\n", "        ", "return", "eval_cuhk03", "(", "\n", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "eval_market1501", "(", "\n", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.rank.evaluate_rank": [[169, 208], ["evaluate_cy", "rank.evaluate_py"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.rank.evaluate_py"], ["", "", "def", "evaluate_rank", "(", "\n", "distmat", ",", "\n", "q_pids", ",", "\n", "g_pids", ",", "\n", "q_camids", ",", "\n", "g_camids", ",", "\n", "max_rank", "=", "50", ",", "\n", "use_metric_cuhk03", "=", "False", ",", "\n", "use_cython", "=", "True", ",", "\n", "dataset_name", "=", "''", "\n", ")", ":", "\n", "    ", "\"\"\"Evaluates CMC rank.\n\n    Args:\n        distmat (numpy.ndarray): distance matrix of shape (num_query, num_gallery).\n        q_pids (numpy.ndarray): 1-D array containing person identities\n            of each query instance.\n        g_pids (numpy.ndarray): 1-D array containing person identities\n            of each gallery instance.\n        q_camids (numpy.ndarray): 1-D array containing camera views under\n            which each query instance is captured.\n        g_camids (numpy.ndarray): 1-D array containing camera views under\n            which each gallery instance is captured.\n        max_rank (int, optional): maximum CMC rank to be computed. Default is 50.\n        use_metric_cuhk03 (bool, optional): use single-gallery-shot setting for cuhk03.\n            Default is False. This should be enabled when using cuhk03 classic split.\n        use_cython (bool, optional): use cython code for evaluation. Default is True.\n            This is highly recommended as the cython code can speed up the cmc computation\n            by more than 10x. This requires Cython to be installed.\n    \"\"\"", "\n", "if", "use_cython", "and", "IS_CYTHON_AVAI", ":", "\n", "        ", "return", "evaluate_cy", "(", "\n", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", ",", "\n", "use_metric_cuhk03", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "evaluate_py", "(", "\n", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", ",", "\n", "use_metric_cuhk03", ",", "dataset_name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix": [[6, 47], ["isinstance", "isinstance", "input1.dim", "input1.dim", "input2.dim", "input2.dim", "input1.size", "input2.size", "distance.euclidean_squared_distance", "distance.cosine_distance", "ValueError"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.euclidean_squared_distance", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.cosine_distance"], ["def", "compute_distance_matrix", "(", "input1", ",", "input2", ",", "metric", "=", "'euclidean'", ")", ":", "\n", "    ", "\"\"\"A wrapper function for computing distance matrix.\n\n    Args:\n        input1 (torch.Tensor): 2-D feature matrix.\n        input2 (torch.Tensor): 2-D feature matrix.\n        metric (str, optional): \"euclidean\" or \"cosine\".\n            Default is \"euclidean\".\n\n    Returns:\n        torch.Tensor: distance matrix.\n\n    Examples::\n       >>> from torchreid import metrics\n       >>> input1 = torch.rand(10, 2048)\n       >>> input2 = torch.rand(100, 2048)\n       >>> distmat = metrics.compute_distance_matrix(input1, input2)\n       >>> distmat.size() # (10, 100)\n    \"\"\"", "\n", "# check input", "\n", "assert", "isinstance", "(", "input1", ",", "torch", ".", "Tensor", ")", "\n", "assert", "isinstance", "(", "input2", ",", "torch", ".", "Tensor", ")", "\n", "assert", "input1", ".", "dim", "(", ")", "==", "2", ",", "'Expected 2-D tensor, but got {}-D'", ".", "format", "(", "\n", "input1", ".", "dim", "(", ")", "\n", ")", "\n", "assert", "input2", ".", "dim", "(", ")", "==", "2", ",", "'Expected 2-D tensor, but got {}-D'", ".", "format", "(", "\n", "input2", ".", "dim", "(", ")", "\n", ")", "\n", "assert", "input1", ".", "size", "(", "1", ")", "==", "input2", ".", "size", "(", "1", ")", "\n", "\n", "if", "metric", "==", "'euclidean'", ":", "\n", "        ", "distmat", "=", "euclidean_squared_distance", "(", "input1", ",", "input2", ")", "\n", "", "elif", "metric", "==", "'cosine'", ":", "\n", "        ", "distmat", "=", "cosine_distance", "(", "input1", ",", "input2", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'Unknown distance metric: {}. '", "\n", "'Please choose either \"euclidean\" or \"cosine\"'", ".", "format", "(", "metric", ")", "\n", ")", "\n", "\n", "", "return", "distmat", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.euclidean_squared_distance": [[49, 64], ["distmat.addmm_", "input1.size", "input2.size", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "input2.t", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "euclidean_squared_distance", "(", "input1", ",", "input2", ")", ":", "\n", "    ", "\"\"\"Computes euclidean squared distance.\n\n    Args:\n        input1 (torch.Tensor): 2-D feature matrix.\n        input2 (torch.Tensor): 2-D feature matrix.\n\n    Returns:\n        torch.Tensor: distance matrix.\n    \"\"\"", "\n", "m", ",", "n", "=", "input1", ".", "size", "(", "0", ")", ",", "input2", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "input1", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "input2", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "input1", ",", "input2", ".", "t", "(", ")", ")", "\n", "return", "distmat", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.cosine_distance": [[66, 80], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.mm", "F.normalize.t"], "function", ["None"], ["", "def", "cosine_distance", "(", "input1", ",", "input2", ")", ":", "\n", "    ", "\"\"\"Computes cosine distance.\n\n    Args:\n        input1 (torch.Tensor): 2-D feature matrix.\n        input2 (torch.Tensor): 2-D feature matrix.\n\n    Returns:\n        torch.Tensor: distance matrix.\n    \"\"\"", "\n", "input1_normed", "=", "F", ".", "normalize", "(", "input1", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "input2_normed", "=", "F", ".", "normalize", "(", "input2", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "distmat", "=", "1", "-", "torch", ".", "mm", "(", "input1_normed", ",", "input2_normed", ".", "t", "(", ")", ")", "\n", "return", "distmat", "\n", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.accuracy.accuracy": [[4, 38], ["max", "target.size", "isinstance", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "correct[].view().float().sum.mul_", "res.append", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for\n    the specified values of k.\n\n    Args:\n        output (torch.Tensor): prediction matrix with shape (batch_size, num_classes).\n        target (torch.LongTensor): ground truth labels with shape (batch_size).\n        topk (tuple, optional): accuracy at top-k will be computed. For example,\n            topk=(1, 5) means accuracy at top-1 and top-5 will be computed.\n\n    Returns:\n        list: accuracy at top-k.\n\n    Examples::\n        >>> from torchreid import metrics\n        >>> metrics.accuracy(output, target)\n    \"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "if", "isinstance", "(", "output", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "output", "=", "output", "[", "0", "]", "\n", "\n", "", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "acc", "=", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", "\n", "res", ".", "append", "(", "acc", ")", "\n", "\n", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.rank_cylib.setup.numpy_include": [[7, 13], ["numpy.get_include", "numpy.get_numpy_include"], "function", ["None"], ["\n", "def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.md'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "content", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.Random2DTranslation.__init__": [[26, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "height", ",", "width", ",", "p", "=", "0.5", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.Random2DTranslation.__call__": [[32, 47], ["img.resize", "int", "int", "img.resize.crop", "random.uniform", "img.resize", "int", "int", "round", "round", "round", "round", "random.uniform", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "p", ":", "\n", "            ", "return", "img", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "self", ".", "interpolation", ")", "\n", "\n", "", "new_width", ",", "new_height", "=", "int", "(", "round", "(", "self", ".", "width", "*", "1.125", ")", "\n", ")", ",", "int", "(", "round", "(", "self", ".", "height", "*", "1.125", ")", ")", "\n", "resized_img", "=", "img", ".", "resize", "(", "(", "new_width", ",", "new_height", ")", ",", "self", ".", "interpolation", ")", "\n", "x_maxrange", "=", "new_width", "-", "self", ".", "width", "\n", "y_maxrange", "=", "new_height", "-", "self", ".", "height", "\n", "x1", "=", "int", "(", "round", "(", "random", ".", "uniform", "(", "0", ",", "x_maxrange", ")", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "random", ".", "uniform", "(", "0", ",", "y_maxrange", ")", ")", ")", "\n", "croped_img", "=", "resized_img", ".", "crop", "(", "\n", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "width", ",", "y1", "+", "self", ".", "height", ")", "\n", ")", "\n", "return", "croped_img", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.RandomErasing.__init__": [[66, 79], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "probability", "=", "0.5", ",", "\n", "sl", "=", "0.02", ",", "\n", "sh", "=", "0.4", ",", "\n", "r1", "=", "0.3", ",", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", "\n", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.RandomErasing.__call__": [[80, 105], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "size", "(", ")", "[", "2", "]", "and", "h", "<", "img", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "1", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "2", "]", "-", "w", ")", "\n", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "img", "[", "1", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "1", "]", "\n", "img", "[", "2", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.ColorAugmentation.__init__": [[119, 129], ["torch.Tensor", "torch.Tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "p", "\n", "self", ".", "eig_vec", "=", "torch", ".", "Tensor", "(", "\n", "[", "\n", "[", "0.4009", ",", "0.7192", ",", "-", "0.5675", "]", ",", "\n", "[", "-", "0.8140", ",", "-", "0.0045", ",", "-", "0.5808", "]", ",", "\n", "[", "0.4203", ",", "-", "0.6948", ",", "-", "0.5836", "]", ",", "\n", "]", "\n", ")", "\n", "self", ".", "eig_val", "=", "torch", ".", "Tensor", "(", "[", "[", "0.2175", ",", "0.0188", ",", "0.0045", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.ColorAugmentation._check_input": [[130, 132], ["tensor.dim", "tensor.size"], "methods", ["None"], ["", "def", "_check_input", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "assert", "tensor", ".", "dim", "(", ")", "==", "3", "and", "tensor", ".", "size", "(", "0", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.ColorAugmentation.__call__": [[133, 140], ["torch.mm", "random.uniform", "torch.normal", "torch.mm.view", "torch.zeros_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "p", ":", "\n", "            ", "return", "tensor", "\n", "", "alpha", "=", "torch", ".", "normal", "(", "mean", "=", "torch", ".", "zeros_like", "(", "self", ".", "eig_val", ")", ")", "*", "0.1", "\n", "quatity", "=", "torch", ".", "mm", "(", "self", ".", "eig_val", "*", "alpha", ",", "self", ".", "eig_vec", ")", "\n", "tensor", "=", "tensor", "+", "quatity", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.RandomPatch.__init__": [[158, 180], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "prob_happen", "=", "0.5", ",", "\n", "pool_capacity", "=", "50000", ",", "\n", "min_sample_size", "=", "100", ",", "\n", "patch_min_area", "=", "0.01", ",", "\n", "patch_max_area", "=", "0.5", ",", "\n", "patch_min_ratio", "=", "0.1", ",", "\n", "prob_rotate", "=", "0.5", ",", "\n", "prob_flip_leftright", "=", "0.5", ",", "\n", ")", ":", "\n", "        ", "self", ".", "prob_happen", "=", "prob_happen", "\n", "\n", "self", ".", "patch_min_area", "=", "patch_min_area", "\n", "self", ".", "patch_max_area", "=", "patch_max_area", "\n", "self", ".", "patch_min_ratio", "=", "patch_min_ratio", "\n", "\n", "self", ".", "prob_rotate", "=", "prob_rotate", "\n", "self", ".", "prob_flip_leftright", "=", "prob_flip_leftright", "\n", "\n", "self", ".", "patchpool", "=", "deque", "(", "maxlen", "=", "pool_capacity", ")", "\n", "self", ".", "min_sample_size", "=", "min_sample_size", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.RandomPatch.generate_wh": [[181, 195], ["range", "random.uniform", "int", "int", "random.uniform", "round", "round", "math.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "generate_wh", "(", "self", ",", "W", ",", "H", ")", ":", "\n", "        ", "area", "=", "W", "*", "H", "\n", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "target_area", "=", "random", ".", "uniform", "(", "\n", "self", ".", "patch_min_area", ",", "self", ".", "patch_max_area", "\n", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "\n", "self", ".", "patch_min_ratio", ",", "1.", "/", "self", ".", "patch_min_ratio", "\n", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "if", "w", "<", "W", "and", "h", "<", "H", ":", "\n", "                ", "return", "w", ",", "h", "\n", "", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.RandomPatch.transform_patch": [[196, 202], ["random.uniform", "patch.rotate.rotate.transpose", "random.uniform", "patch.rotate.rotate.rotate", "random.randint"], "methods", ["None"], ["", "def", "transform_patch", "(", "self", ",", "patch", ")", ":", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "prob_flip_leftright", ":", "\n", "            ", "patch", "=", "patch", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "prob_rotate", ":", "\n", "            ", "patch", "=", "patch", ".", "rotate", "(", "random", ".", "randint", "(", "-", "10", ",", "10", ")", ")", "\n", "", "return", "patch", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.RandomPatch.__call__": [[203, 229], ["transforms.RandomPatch.generate_wh", "random.randint", "random.randint", "transforms.RandomPatch.transform_patch", "img.paste", "random.randint", "random.randint", "img.crop", "transforms.RandomPatch.patchpool.append", "len", "random.uniform", "random.sample"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.RandomPatch.generate_wh", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.RandomPatch.transform_patch"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "W", ",", "H", "=", "img", ".", "size", "# original image size", "\n", "\n", "# collect new patch", "\n", "w", ",", "h", "=", "self", ".", "generate_wh", "(", "W", ",", "H", ")", "\n", "if", "w", "is", "not", "None", "and", "h", "is", "not", "None", ":", "\n", "            ", "x1", "=", "random", ".", "randint", "(", "0", ",", "W", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "H", "-", "h", ")", "\n", "new_patch", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "self", ".", "patchpool", ".", "append", "(", "new_patch", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "patchpool", ")", "<", "self", ".", "min_sample_size", ":", "\n", "            ", "return", "img", "\n", "\n", "", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "prob_happen", ":", "\n", "            ", "return", "img", "\n", "\n", "# paste a randomly selected patch on a random position", "\n", "", "patch", "=", "random", ".", "sample", "(", "self", ".", "patchpool", ",", "1", ")", "[", "0", "]", "\n", "patchW", ",", "patchH", "=", "patch", ".", "size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "W", "-", "patchW", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "H", "-", "patchH", ")", "\n", "patch", "=", "self", ".", "transform_patch", "(", "patch", ")", "\n", "img", ".", "paste", "(", "patch", ",", "(", "x1", ",", "y1", ")", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.build_transforms": [[231, 320], ["isinstance", "Normalize", "print", "print", "print", "print", "Compose", "print", "print", "print", "print", "Compose", "isinstance", "ValueError", "len", "Resize", "print", "print", "print", "print", "ToTensor", "print", "t.lower", "RandomHorizontalFlip", "transforms.Random2DTranslation", "transforms.RandomPatch", "ColorJitter", "transforms.RandomErasing", "Resize", "ToTensor", "type", "int", "int", "round", "round"], "function", ["None"], ["", "", "def", "build_transforms", "(", "\n", "height", ",", "\n", "width", ",", "\n", "transforms", "=", "'random_flip'", ",", "\n", "norm_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "norm_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Builds train and test transform functions.\n\n    Args:\n        height (int): target image height.\n        width (int): target image width.\n        transforms (str or list of str, optional): transformations applied to model training.\n            Default is 'random_flip'.\n        norm_mean (list or None, optional): normalization mean values. Default is ImageNet means.\n        norm_std (list or None, optional): normalization standard deviation values. Default is\n            ImageNet standard deviation values.\n    \"\"\"", "\n", "if", "transforms", "is", "None", ":", "\n", "        ", "transforms", "=", "[", "]", "\n", "\n", "", "if", "isinstance", "(", "transforms", ",", "str", ")", ":", "\n", "        ", "transforms", "=", "[", "transforms", "]", "\n", "\n", "", "if", "not", "isinstance", "(", "transforms", ",", "list", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'transforms must be a list of strings, but found to be {}'", ".", "format", "(", "\n", "type", "(", "transforms", ")", "\n", ")", "\n", ")", "\n", "\n", "", "if", "len", "(", "transforms", ")", ">", "0", ":", "\n", "        ", "transforms", "=", "[", "t", ".", "lower", "(", ")", "for", "t", "in", "transforms", "]", "\n", "\n", "", "if", "norm_mean", "is", "None", "or", "norm_std", "is", "None", ":", "\n", "        ", "norm_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "# imagenet mean", "\n", "norm_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "# imagenet std", "\n", "", "normalize", "=", "Normalize", "(", "mean", "=", "norm_mean", ",", "std", "=", "norm_std", ")", "\n", "\n", "print", "(", "'Building train transforms ...'", ")", "\n", "transform_tr", "=", "[", "]", "\n", "\n", "print", "(", "'+ resize to {}x{}'", ".", "format", "(", "height", ",", "width", ")", ")", "\n", "transform_tr", "+=", "[", "Resize", "(", "(", "height", ",", "width", ")", ")", "]", "\n", "\n", "if", "'random_flip'", "in", "transforms", ":", "\n", "        ", "print", "(", "'+ random flip'", ")", "\n", "transform_tr", "+=", "[", "RandomHorizontalFlip", "(", ")", "]", "\n", "\n", "", "if", "'random_crop'", "in", "transforms", ":", "\n", "        ", "print", "(", "'+ random crop (enlarge to {}x{} and '", "'crop {}x{})'", ".", "format", "(", "int", "(", "round", "(", "height", "*", "1.125", ")", ")", ",", "int", "(", "round", "(", "width", "*", "1.125", ")", ")", ",", "height", ",", "width", ")", ")", "\n", "transform_tr", "+=", "[", "Random2DTranslation", "(", "height", ",", "width", ")", "]", "\n", "\n", "", "if", "'random_patch'", "in", "transforms", ":", "\n", "        ", "print", "(", "'+ random patch'", ")", "\n", "transform_tr", "+=", "[", "RandomPatch", "(", ")", "]", "\n", "\n", "", "if", "'color_jitter'", "in", "transforms", ":", "\n", "        ", "print", "(", "'+ color jitter'", ")", "\n", "transform_tr", "+=", "[", "\n", "ColorJitter", "(", "brightness", "=", "0.2", ",", "contrast", "=", "0.15", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", "\n", "]", "\n", "\n", "", "print", "(", "'+ to torch tensor of range [0, 1]'", ")", "\n", "transform_tr", "+=", "[", "ToTensor", "(", ")", "]", "\n", "\n", "print", "(", "'+ normalization (mean={}, std={})'", ".", "format", "(", "norm_mean", ",", "norm_std", ")", ")", "\n", "transform_tr", "+=", "[", "normalize", "]", "\n", "\n", "if", "'random_erase'", "in", "transforms", ":", "\n", "        ", "print", "(", "'+ random erase'", ")", "\n", "transform_tr", "+=", "[", "RandomErasing", "(", "mean", "=", "norm_mean", ")", "]", "\n", "\n", "", "transform_tr", "=", "Compose", "(", "transform_tr", ")", "\n", "\n", "print", "(", "'Building test transforms ...'", ")", "\n", "print", "(", "'+ resize to {}x{}'", ".", "format", "(", "height", ",", "width", ")", ")", "\n", "print", "(", "'+ to torch tensor of range [0, 1]'", ")", "\n", "print", "(", "'+ normalization (mean={}, std={})'", ".", "format", "(", "norm_mean", ",", "norm_std", ")", ")", "\n", "\n", "transform_te", "=", "Compose", "(", "[", "\n", "Resize", "(", "(", "height", ",", "width", ")", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "return", "transform_tr", ",", "transform_te", "\n", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.sampler.RandomIdentitySampler.__init__": [[20, 45], ["collections.defaultdict", "enumerate", "list", "ValueError", "sampler.RandomIdentitySampler.index_dic[].append", "sampler.RandomIdentitySampler.index_dic.keys", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ",", "num_instances", ")", ":", "\n", "        ", "if", "batch_size", "<", "num_instances", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'batch_size={} must be no less '", "\n", "'than num_instances={}'", ".", "format", "(", "batch_size", ",", "num_instances", ")", "\n", ")", "\n", "\n", "", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "num_pids_per_batch", "=", "self", ".", "batch_size", "//", "self", ".", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "self", ".", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "\n", "# estimate number of examples in an epoch", "\n", "# TODO: improve precision", "\n", "self", ".", "length", "=", "0", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "            ", "idxs", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "num", "=", "len", "(", "idxs", ")", "\n", "if", "num", "<", "self", ".", "num_instances", ":", "\n", "                ", "num", "=", "self", ".", "num_instances", "\n", "", "self", ".", "length", "+=", "num", "-", "num", "%", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.sampler.RandomIdentitySampler.__iter__": [[46, 75], ["collections.defaultdict", "copy.deepcopy", "iter", "copy.deepcopy", "random.shuffle", "len", "random.sample", "len", "numpy.random.choice", "batch_idxs_dict[].pop.append", "batch_idxs_dict[].pop", "final_idxs.extend", "len", "batch_idxs_dict[].append", "len", "copy.deepcopy.remove"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "batch_idxs_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "            ", "idxs", "=", "copy", ".", "deepcopy", "(", "self", ".", "index_dic", "[", "pid", "]", ")", "\n", "if", "len", "(", "idxs", ")", "<", "self", ".", "num_instances", ":", "\n", "                ", "idxs", "=", "np", ".", "random", ".", "choice", "(", "\n", "idxs", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", "\n", ")", "\n", "", "random", ".", "shuffle", "(", "idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "batch_idxs", ".", "append", "(", "idx", ")", "\n", "if", "len", "(", "batch_idxs", ")", "==", "self", ".", "num_instances", ":", "\n", "                    ", "batch_idxs_dict", "[", "pid", "]", ".", "append", "(", "batch_idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "\n", "", "", "", "avai_pids", "=", "copy", ".", "deepcopy", "(", "self", ".", "pids", ")", "\n", "final_idxs", "=", "[", "]", "\n", "\n", "while", "len", "(", "avai_pids", ")", ">=", "self", ".", "num_pids_per_batch", ":", "\n", "            ", "selected_pids", "=", "random", ".", "sample", "(", "avai_pids", ",", "self", ".", "num_pids_per_batch", ")", "\n", "for", "pid", "in", "selected_pids", ":", "\n", "                ", "batch_idxs", "=", "batch_idxs_dict", "[", "pid", "]", ".", "pop", "(", "0", ")", "\n", "final_idxs", ".", "extend", "(", "batch_idxs", ")", "\n", "if", "len", "(", "batch_idxs_dict", "[", "pid", "]", ")", "==", "0", ":", "\n", "                    ", "avai_pids", ".", "remove", "(", "pid", ")", "\n", "\n", "", "", "", "return", "iter", "(", "final_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.sampler.RandomIdentitySampler.__len__": [[76, 78], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.sampler.RandomIdentitySampler_camwise.__init__": [[88, 116], ["collections.defaultdict", "enumerate", "set", "sampler.RandomIdentitySampler_camwise.index_dic.keys", "sampler.RandomIdentitySampler_camwise.index_dic.keys", "ValueError", "[].append", "sampler.RandomIdentitySampler_camwise.pids.update", "sampler.RandomIdentitySampler_camwise.index_dic[].keys", "collections.defaultdict", "list", "len", "sampler.RandomIdentitySampler_camwise.index_dic[].keys"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.avgmeter.AverageMeter.update"], ["def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ",", "num_instances", ")", ":", "\n", "        ", "if", "batch_size", "<", "num_instances", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'batch_size={} must be no less '", "\n", "'than num_instances={}'", ".", "format", "(", "batch_size", ",", "num_instances", ")", "\n", ")", "\n", "\n", "", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "num_pids_per_batch", "=", "self", ".", "batch_size", "//", "self", ".", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "camid", ")", "in", "enumerate", "(", "self", ".", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "camid", "]", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "set", "(", ")", "\n", "for", "cam_id", "in", "self", ".", "index_dic", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "pids", ".", "update", "(", "list", "(", "self", ".", "index_dic", "[", "cam_id", "]", ".", "keys", "(", ")", ")", ")", "\n", "\n", "# estimate number of examples in an epoch", "\n", "# TODO: improve precision", "\n", "", "self", ".", "length", "=", "0", "\n", "for", "cam_id", "in", "self", ".", "index_dic", ".", "keys", "(", ")", ":", "\n", "            ", "for", "pid", "in", "self", ".", "index_dic", "[", "cam_id", "]", ".", "keys", "(", ")", ":", "\n", "                ", "idxs", "=", "self", ".", "index_dic", "[", "cam_id", "]", "[", "pid", "]", "\n", "num", "=", "len", "(", "idxs", ")", "\n", "if", "num", "<", "self", ".", "num_instances", ":", "\n", "                    ", "num", "=", "self", ".", "num_instances", "\n", "", "self", ".", "length", "+=", "num", "-", "num", "%", "self", ".", "num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.sampler.RandomIdentitySampler_camwise.__iter__": [[117, 153], ["collections.defaultdict", "sampler.RandomIdentitySampler_camwise.index_dic.keys", "copy.deepcopy", "collections.defaultdict.keys", "iter", "sampler.RandomIdentitySampler_camwise.index_dic[].keys", "list", "random.shuffle", "len", "random.sample", "copy.deepcopy", "random.shuffle", "collections.defaultdict.keys", "batch_idxs_dict[].pop", "final_idxs.extend", "len", "len", "numpy.random.choice", "batch_idxs_dict[].pop.append", "len", "copy.deepcopy.remove", "int", "len", "batch_idxs_dict[].append"], "methods", ["None"], ["", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "batch_idxs_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "cam_id", "in", "self", ".", "index_dic", ".", "keys", "(", ")", ":", "\n", "            ", "for", "pid", "in", "self", ".", "index_dic", "[", "cam_id", "]", ".", "keys", "(", ")", ":", "\n", "                ", "idxs", "=", "copy", ".", "deepcopy", "(", "self", ".", "index_dic", "[", "cam_id", "]", "[", "pid", "]", ")", "\n", "# Skip single images", "\n", "if", "len", "(", "idxs", ")", "<", "4", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "idxs", ")", "<", "self", ".", "num_instances", ":", "\n", "                    ", "idxs", "=", "np", ".", "random", ".", "choice", "(", "idxs", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "idxs", "=", "[", "int", "(", "x", ")", "for", "x", "in", "idxs", "]", "\n", "", "random", ".", "shuffle", "(", "idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "for", "idx", "in", "idxs", ":", "\n", "                    ", "batch_idxs", ".", "append", "(", "idx", ")", "\n", "if", "len", "(", "batch_idxs", ")", "==", "self", ".", "num_instances", ":", "\n", "                        ", "batch_idxs_dict", "[", "pid", "]", ".", "append", "(", "batch_idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "\n", "", "", "", "", "avai_pids", "=", "copy", ".", "deepcopy", "(", "list", "(", "batch_idxs_dict", ".", "keys", "(", ")", ")", ")", "\n", "final_idxs", "=", "[", "]", "\n", "\n", "# Shuffle tracklets camid", "\n", "for", "batch_pid", "in", "batch_idxs_dict", ".", "keys", "(", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "batch_idxs_dict", "[", "batch_pid", "]", ")", "\n", "\n", "", "while", "len", "(", "avai_pids", ")", ">=", "self", ".", "num_pids_per_batch", ":", "\n", "            ", "selected_pids", "=", "random", ".", "sample", "(", "avai_pids", ",", "self", ".", "num_pids_per_batch", ")", "\n", "for", "pid", "in", "selected_pids", ":", "\n", "                ", "batch_idxs", "=", "batch_idxs_dict", "[", "pid", "]", ".", "pop", "(", "0", ")", "\n", "final_idxs", ".", "extend", "(", "batch_idxs", ")", "\n", "if", "len", "(", "batch_idxs_dict", "[", "pid", "]", ")", "==", "0", ":", "\n", "                    ", "avai_pids", ".", "remove", "(", "pid", ")", "\n", "\n", "", "", "", "return", "iter", "(", "final_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.sampler.RandomIdentitySampler_camwise.__len__": [[154, 156], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.sampler.build_train_sampler": [[157, 185], ["sampler.RandomIdentitySampler", "sampler.RandomIdentitySampler_camwise", "torch.utils.data.sampler.SequentialSampler", "torch.utils.data.sampler.RandomSampler"], "function", ["None"], ["", "", "def", "build_train_sampler", "(", "\n", "data_source", ",", "train_sampler", ",", "batch_size", "=", "32", ",", "num_instances", "=", "4", ",", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\"Builds a training sampler.\n\n    Args:\n        data_source (list): contains tuples of (img_path(s), pid, camid).\n        train_sampler (str): sampler name (default: ``RandomSampler``).\n        batch_size (int, optional): batch size. Default is 32.\n        num_instances (int, optional): number of instances per identity in a\n            batch (when using ``RandomIdentitySampler``). Default is 4.\n    \"\"\"", "\n", "assert", "train_sampler", "in", "AVAI_SAMPLERS", ",", "'train_sampler must be one of {}, but got {}'", ".", "format", "(", "AVAI_SAMPLERS", ",", "train_sampler", ")", "\n", "\n", "if", "train_sampler", "==", "'RandomIdentitySampler'", ":", "\n", "        ", "sampler", "=", "RandomIdentitySampler", "(", "data_source", ",", "batch_size", ",", "num_instances", ")", "\n", "\n", "", "if", "train_sampler", "==", "'RandomIdentitySampler_camwise'", ":", "\n", "        ", "sampler", "=", "RandomIdentitySampler_camwise", "(", "data_source", ",", "batch_size", ",", "num_instances", ")", "\n", "\n", "", "elif", "train_sampler", "==", "'SequentialSampler'", ":", "\n", "        ", "sampler", "=", "SequentialSampler", "(", "data_source", ")", "\n", "\n", "", "elif", "train_sampler", "==", "'RandomSampler'", ":", "\n", "        ", "sampler", "=", "RandomSampler", "(", "data_source", ")", "\n", "\n", "", "return", "sampler", "\n", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.datamanager.DataManager.__init__": [[25, 62], ["isinstance", "isinstance", "torchreid.data.transforms.build_transforms", "ValueError", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.transforms.build_transforms"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sources", "=", "None", ",", "\n", "targets", "=", "None", ",", "\n", "height", "=", "256", ",", "\n", "width", "=", "128", ",", "\n", "transforms", "=", "'random_flip'", ",", "\n", "norm_mean", "=", "None", ",", "\n", "norm_std", "=", "None", ",", "\n", "use_gpu", "=", "False", "\n", ")", ":", "\n", "        ", "self", ".", "sources", "=", "sources", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "\n", "if", "self", ".", "sources", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'sources must not be None'", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "sources", ",", "str", ")", ":", "\n", "            ", "self", ".", "sources", "=", "[", "self", ".", "sources", "]", "\n", "\n", "", "if", "self", ".", "targets", "is", "None", ":", "\n", "            ", "self", ".", "targets", "=", "self", ".", "sources", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "targets", ",", "str", ")", ":", "\n", "            ", "self", ".", "targets", "=", "[", "self", ".", "targets", "]", "\n", "\n", "", "self", ".", "transform_tr", ",", "self", ".", "transform_te", "=", "build_transforms", "(", "\n", "self", ".", "height", ",", "\n", "self", ".", "width", ",", "\n", "transforms", "=", "transforms", ",", "\n", "norm_mean", "=", "norm_mean", ",", "\n", "norm_std", "=", "norm_std", "\n", ")", "\n", "\n", "self", ".", "use_gpu", "=", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "use_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.datamanager.DataManager.num_train_pids": [[63, 67], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_train_pids", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of training person identities.\"\"\"", "\n", "return", "self", ".", "_num_train_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.datamanager.DataManager.num_train_cams": [[68, 72], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_train_cams", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of training cameras.\"\"\"", "\n", "return", "self", ".", "_num_train_cams", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.datamanager.DataManager.return_query_and_gallery_by_name": [[73, 82], ["None"], "methods", ["None"], ["", "def", "return_query_and_gallery_by_name", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Returns query and gallery of a test dataset, each containing\n        tuples of (img_path(s), pid, camid).\n\n        Args:\n            name (str): dataset name.\n        \"\"\"", "\n", "return", "self", ".", "test_dataset", "[", "name", "]", "[", "'query'", "]", ",", "self", ".", "test_dataset", "[", "name", "]", "[", "\n", "'gallery'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.datamanager.DataManager.preprocess_pil_img": [[83, 86], ["datamanager.DataManager.transform_te"], "methods", ["None"], ["", "def", "preprocess_pil_img", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Transforms a PIL image to torch tensor for testing.\"\"\"", "\n", "return", "self", ".", "transform_te", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.datamanager.ImageDataManager.__init__": [[143, 351], ["datamanager.DataManager.__init__", "print", "sum", "torch.utils.data.DataLoader", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "torchreid.data.datasets.init_image_dataset", "sum.append", "print", "torchreid.data.datasets.init_image_dataset", "torch.utils.data.DataLoader", "torchreid.data.datasets.init_image_dataset", "torch.utils.data.DataLoader", "print", "torchreid.data.sampler.build_train_sampler", "len", "torchreid.data.datasets.init_image_dataset", "sum.append", "sum", "torch.utils.data.DataLoader", "datamanager.ImageDataManager.list_train_loader_t.append", "len", "len", "print", "print", "torch.utils.data.DataLoader", "datamanager.ImageDataManager.list_train_loader_t.append", "set", "set", "torchreid.data.sampler.build_train_sampler", "len", "torchreid.data.sampler.build_train_sampler"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.__init__.init_image_dataset", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.__init__.init_image_dataset", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.__init__.init_image_dataset", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.sampler.build_train_sampler", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.__init__.init_image_dataset", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.sampler.build_train_sampler", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.data.sampler.build_train_sampler"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", "=", "''", ",", "\n", "sources", "=", "None", ",", "\n", "targets", "=", "None", ",", "\n", "height", "=", "256", ",", "\n", "width", "=", "128", ",", "\n", "transforms", "=", "'random_flip'", ",", "\n", "norm_mean", "=", "None", ",", "\n", "norm_std", "=", "None", ",", "\n", "use_gpu", "=", "True", ",", "\n", "split_id", "=", "0", ",", "\n", "combineall", "=", "False", ",", "\n", "blend", "=", "False", ",", "\n", "load_train_targets", "=", "False", ",", "\n", "batch_size_train", "=", "32", ",", "\n", "batch_size_test", "=", "32", ",", "\n", "workers", "=", "4", ",", "\n", "num_instances", "=", "4", ",", "\n", "train_sampler", "=", "'RandomSampler'", ",", "\n", "cuhk03_labeled", "=", "False", ",", "\n", "cuhk03_classic_split", "=", "False", ",", "\n", "market1501_500k", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "ImageDataManager", ",", "self", ")", ".", "__init__", "(", "\n", "sources", "=", "sources", ",", "\n", "targets", "=", "targets", ",", "\n", "height", "=", "height", ",", "\n", "width", "=", "width", ",", "\n", "transforms", "=", "transforms", ",", "\n", "norm_mean", "=", "norm_mean", ",", "\n", "norm_std", "=", "norm_std", ",", "\n", "use_gpu", "=", "use_gpu", "\n", ")", "\n", "\n", "print", "(", "'=> Loading train (source) dataset'", ")", "\n", "trainset", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "sources", ":", "\n", "            ", "trainset_", "=", "init_image_dataset", "(", "\n", "name", ",", "\n", "transform", "=", "self", ".", "transform_tr", ",", "\n", "mode", "=", "'train'", ",", "\n", "combineall", "=", "combineall", ",", "\n", "root", "=", "root", ",", "\n", "split_id", "=", "split_id", ",", "\n", "cuhk03_labeled", "=", "cuhk03_labeled", ",", "\n", "cuhk03_classic_split", "=", "cuhk03_classic_split", ",", "\n", "market1501_500k", "=", "market1501_500k", "\n", ")", "\n", "trainset", ".", "append", "(", "trainset_", ")", "\n", "", "trainset", "=", "sum", "(", "trainset", ")", "\n", "\n", "self", ".", "_num_train_pids", "=", "trainset", ".", "num_train_pids", "\n", "self", ".", "_num_train_cams", "=", "trainset", ".", "num_train_cams", "\n", "\n", "self", ".", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "trainset", ",", "\n", "sampler", "=", "build_train_sampler", "(", "\n", "trainset", ".", "train", ",", "\n", "train_sampler", ",", "\n", "batch_size", "=", "batch_size_train", ",", "\n", "num_instances", "=", "num_instances", ",", "\n", ")", ",", "\n", "batch_size", "=", "batch_size_train", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "workers", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "\n", "self", ".", "train_loader_t", "=", "None", "\n", "if", "load_train_targets", ":", "\n", "# check if sources and targets are identical", "\n", "            ", "assert", "len", "(", "set", "(", "self", ".", "sources", ")", "&", "set", "(", "self", ".", "targets", ")", ")", "==", "0", ",", "'sources={} and targets={} must not have overlap'", ".", "format", "(", "self", ".", "sources", ",", "self", ".", "targets", ")", "\n", "\n", "print", "(", "'=> Loading train (target) dataset'", ")", "\n", "trainset_t", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "targets", ":", "\n", "                ", "self", ".", "dataset", "=", "init_image_dataset", "(", "\n", "name", ",", "\n", "transform", "=", "self", ".", "transform_tr", ",", "\n", "mode", "=", "'train'", ",", "\n", "combineall", "=", "False", ",", "# only use the training data", "\n", "root", "=", "root", ",", "\n", "split_id", "=", "split_id", ",", "\n", "cuhk03_labeled", "=", "cuhk03_labeled", ",", "\n", "cuhk03_classic_split", "=", "cuhk03_classic_split", ",", "\n", "market1501_500k", "=", "market1501_500k", "\n", ")", "\n", "trainset_t_", "=", "self", ".", "dataset", "\n", "trainset_t", ".", "append", "(", "trainset_t_", ")", "\n", "\n", "", "self", ".", "list_train_loader_t", "=", "[", "]", "\n", "if", "blend", ":", "\n", "                ", "trainset_t", "=", "sum", "(", "trainset_t", ")", "\n", "self", ".", "train_loader_t", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "trainset_t", ",", "\n", "sampler", "=", "build_train_sampler", "(", "\n", "trainset_t", ".", "train", ",", "\n", "train_sampler", ",", "\n", "batch_size", "=", "batch_size_train", ",", "\n", "num_instances", "=", "num_instances", "\n", ")", ",", "\n", "batch_size", "=", "batch_size_train", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "workers", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "self", ".", "list_train_loader_t", ".", "append", "(", "self", ".", "train_loader_t", ")", "\n", "", "else", ":", "\n", "                ", "for", "t", "in", "trainset_t", ":", "\n", "                    ", "self", ".", "train_loader_t", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "t", ",", "\n", "sampler", "=", "build_train_sampler", "(", "\n", "t", ".", "train", ",", "\n", "train_sampler", ",", "\n", "batch_size", "=", "batch_size_train", ",", "\n", "num_instances", "=", "num_instances", "\n", ")", ",", "\n", "batch_size", "=", "batch_size_train", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "workers", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "self", ".", "list_train_loader_t", ".", "append", "(", "self", ".", "train_loader_t", ")", "\n", "\n", "", "", "", "print", "(", "'=> Loading test (target) dataset'", ")", "\n", "self", ".", "test_loader", "=", "{", "\n", "name", ":", "{", "\n", "'query'", ":", "None", ",", "\n", "'gallery'", ":", "None", "\n", "}", "\n", "for", "name", "in", "self", ".", "targets", "\n", "}", "\n", "self", ".", "test_dataset", "=", "{", "\n", "name", ":", "{", "\n", "'query'", ":", "None", ",", "\n", "'gallery'", ":", "None", "\n", "}", "\n", "for", "name", "in", "self", ".", "targets", "\n", "}", "\n", "\n", "for", "name", "in", "self", ".", "targets", ":", "\n", "# build query loader", "\n", "            ", "queryset", "=", "init_image_dataset", "(", "\n", "name", ",", "\n", "transform", "=", "self", ".", "transform_te", ",", "\n", "mode", "=", "'query'", ",", "\n", "combineall", "=", "combineall", ",", "\n", "root", "=", "root", ",", "\n", "split_id", "=", "split_id", ",", "\n", "cuhk03_labeled", "=", "cuhk03_labeled", ",", "\n", "cuhk03_classic_split", "=", "cuhk03_classic_split", ",", "\n", "market1501_500k", "=", "market1501_500k", "\n", ")", "\n", "self", ".", "test_loader", "[", "name", "]", "[", "'query'", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "queryset", ",", "\n", "batch_size", "=", "batch_size_test", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "workers", ",", "\n", "drop_last", "=", "False", "\n", ")", "\n", "\n", "# build gallery loader", "\n", "galleryset", "=", "init_image_dataset", "(", "\n", "name", ",", "\n", "transform", "=", "self", ".", "transform_te", ",", "\n", "mode", "=", "'gallery'", ",", "\n", "combineall", "=", "combineall", ",", "\n", "verbose", "=", "False", ",", "\n", "root", "=", "root", ",", "\n", "split_id", "=", "split_id", ",", "\n", "cuhk03_labeled", "=", "cuhk03_labeled", ",", "\n", "cuhk03_classic_split", "=", "cuhk03_classic_split", ",", "\n", "market1501_500k", "=", "market1501_500k", "\n", ")", "\n", "self", ".", "test_loader", "[", "name", "]", "[", "'gallery'", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "galleryset", ",", "\n", "batch_size", "=", "batch_size_test", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "workers", ",", "\n", "drop_last", "=", "False", "\n", ")", "\n", "\n", "self", ".", "test_dataset", "[", "name", "]", "[", "'query'", "]", "=", "queryset", ".", "query", "\n", "self", ".", "test_dataset", "[", "name", "]", "[", "'gallery'", "]", "=", "galleryset", ".", "gallery", "\n", "\n", "", "print", "(", "'\\n'", ")", "\n", "print", "(", "'  **************** Summary ****************'", ")", "\n", "print", "(", "'  source            : {}'", ".", "format", "(", "self", ".", "sources", ")", ")", "\n", "print", "(", "'  # source datasets : {}'", ".", "format", "(", "len", "(", "self", ".", "sources", ")", ")", ")", "\n", "print", "(", "'  # source ids      : {}'", ".", "format", "(", "self", ".", "num_train_pids", ")", ")", "\n", "print", "(", "'  # source images   : {}'", ".", "format", "(", "len", "(", "trainset", ")", ")", ")", "\n", "print", "(", "'  # source cameras  : {}'", ".", "format", "(", "self", ".", "num_train_cams", ")", ")", "\n", "if", "load_train_targets", ":", "\n", "            ", "print", "(", "'  targets            : {}'", ".", "format", "(", "self", ".", "targets", ")", ")", "\n", "i", "=", "0", "\n", "for", "target", "in", "self", ".", "targets", ":", "\n", "                ", "print", "(", "\n", "'  target {i}   : {target}'", ".", "format", "(", "i", "=", "i", "+", "1", ",", "target", "=", "target", ")", "\n", ")", "\n", "print", "(", "\n", "'  # target images   : {} (unlabeled)'", ".", "format", "(", "len", "(", "trainset_t", "[", "i", "]", ")", ")", "\n", ")", "\n", "i", "+=", "1", "\n", "", "", "print", "(", "'  *****************************************'", ")", "\n", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.__init__": [[29, 72], ["dataset.Dataset.get_num_pids", "dataset.Dataset.get_num_cams", "dataset.Dataset.combine_all", "dataset.Dataset.show_summary", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.get_num_pids", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.get_num_cams", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.combine_all", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.ImageDataset.show_summary"], ["def", "__init__", "(", "\n", "self", ",", "\n", "train", ",", "\n", "# val,", "\n", "query", ",", "\n", "gallery", ",", "\n", "transform", "=", "None", ",", "\n", "mode", "=", "'train'", ",", "\n", "combineall", "=", "False", ",", "\n", "verbose", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "train", "=", "train", "\n", "# self.val = val", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "combineall", "=", "combineall", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n", "self", ".", "num_train_pids", "=", "self", ".", "get_num_pids", "(", "self", ".", "train", ")", "\n", "self", ".", "num_train_cams", "=", "self", ".", "get_num_cams", "(", "self", ".", "train", ")", "\n", "\n", "if", "self", ".", "combineall", ":", "\n", "            ", "self", ".", "combine_all", "(", ")", "\n", "\n", "", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "train", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "val", "\n", "", "elif", "self", ".", "mode", "==", "'query'", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "query", "\n", "", "elif", "self", ".", "mode", "==", "'gallery'", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "gallery", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Invalid mode. Got {}, but expected to be '", "\n", "'one of [train | val | query | gallery]'", ".", "format", "(", "self", ".", "mode", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "verbose", ":", "\n", "            ", "self", ".", "show_summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.__getitem__": [[73, 75], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.__add__": [[79, 104], ["copy.deepcopy", "isinstance", "copy.deepcopy.append", "dataset.ImageDataset"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Adds two datasets together (only the train set).\"\"\"", "\n", "train", "=", "copy", ".", "deepcopy", "(", "self", ".", "train", ")", "\n", "\n", "for", "img_path", ",", "pid", ",", "camid", "in", "other", ".", "train", ":", "\n", "            ", "pid", "+=", "self", ".", "num_train_pids", "\n", "camid", "+=", "self", ".", "num_train_cams", "\n", "train", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "###################################", "\n", "# Things to do beforehand:", "\n", "# 1. set verbose=False to avoid unnecessary print", "\n", "# 2. set combineall=False because combineall would have been applied", "\n", "#    if it was True for a specific dataset, setting it to True will", "\n", "#    create new IDs that should have been included", "\n", "###################################", "\n", "", "if", "isinstance", "(", "train", "[", "0", "]", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "return", "ImageDataset", "(", "\n", "train", ",", "\n", "self", ".", "query", ",", "\n", "self", ".", "gallery", ",", "\n", "transform", "=", "self", ".", "transform", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "combineall", "=", "False", ",", "\n", "verbose", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.__radd__": [[106, 112], ["dataset.Dataset.__add__"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.__add__"], ["", "", "def", "__radd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"Supports sum([dataset1, dataset2, dataset3]).\"\"\"", "\n", "if", "other", "==", "0", ":", "\n", "            ", "return", "self", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "__add__", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.parse_data": [[113, 126], ["set", "set", "set.add", "set.add", "len", "len"], "methods", ["None"], ["", "", "def", "parse_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Parses data list and returns the number of person IDs\n        and the number of camera views.\n\n        Args:\n            data (list): contains tuples of (img_path(s), pid, camid)\n        \"\"\"", "\n", "pids", "=", "set", "(", ")", "\n", "cams", "=", "set", "(", ")", "\n", "for", "_", ",", "pid", ",", "camid", "in", "data", ":", "\n", "            ", "pids", ".", "add", "(", "pid", ")", "\n", "cams", ".", "add", "(", "camid", ")", "\n", "", "return", "len", "(", "pids", ")", ",", "len", "(", "cams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.get_num_pids": [[127, 130], ["dataset.Dataset.parse_data"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.parse_data"], ["", "def", "get_num_pids", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Returns the number of training person identities.\"\"\"", "\n", "return", "self", ".", "parse_data", "(", "data", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.get_num_cams": [[131, 134], ["dataset.Dataset.parse_data"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.parse_data"], ["", "def", "get_num_cams", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Returns the number of training cameras.\"\"\"", "\n", "return", "self", ".", "parse_data", "(", "data", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.show_summary": [[135, 138], ["None"], "methods", ["None"], ["", "def", "show_summary", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shows dataset statistics.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.combine_all": [[139, 163], ["copy.deepcopy", "set", "dataset.Dataset.combine_all._combine_data"], "methods", ["None"], ["", "def", "combine_all", "(", "self", ")", ":", "\n", "        ", "\"\"\"Combines train, query and gallery in a dataset for training.\"\"\"", "\n", "combined", "=", "copy", ".", "deepcopy", "(", "self", ".", "train", ")", "\n", "\n", "# relabel pids in gallery (query shares the same scope)", "\n", "g_pids", "=", "set", "(", ")", "\n", "for", "_", ",", "pid", ",", "_", "in", "self", ".", "gallery", ":", "\n", "            ", "if", "pid", "in", "self", ".", "_junk_pids", ":", "\n", "                ", "continue", "\n", "", "g_pids", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "i", "for", "i", ",", "pid", "in", "enumerate", "(", "g_pids", ")", "}", "\n", "\n", "def", "_combine_data", "(", "data", ")", ":", "\n", "            ", "for", "img_path", ",", "pid", ",", "camid", "in", "data", ":", "\n", "                ", "if", "pid", "in", "self", ".", "_junk_pids", ":", "\n", "                    ", "continue", "\n", "", "pid", "=", "pid2label", "[", "pid", "]", "+", "self", ".", "num_train_pids", "\n", "combined", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "", "_combine_data", "(", "self", ".", "query", ")", "\n", "_combine_data", "(", "self", ".", "gallery", ")", "\n", "\n", "self", ".", "train", "=", "combined", "\n", "self", ".", "num_train_pids", "=", "self", ".", "get_num_pids", "(", "self", ".", "train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.download_dataset": [[164, 205], ["os.exists", "print", "torchreid.utils.mkdir_if_missing", "os.join", "print", "torchreid.utils.download_url", "print", "print", "RuntimeError", "os.basename", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.mkdir_if_missing", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.download_url", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.close", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.loggers.Logger.close"], ["", "def", "download_dataset", "(", "self", ",", "dataset_dir", ",", "dataset_url", ")", ":", "\n", "        ", "\"\"\"Downloads and extracts dataset.\n\n        Args:\n            dataset_dir (str): dataset directory.\n            dataset_url (str): url to download dataset.\n        \"\"\"", "\n", "if", "osp", ".", "exists", "(", "dataset_dir", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "dataset_url", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'{} dataset needs to be manually '", "\n", "'prepared, please follow the '", "\n", "'document to prepare this dataset'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", "\n", ")", "\n", ")", "\n", "\n", "", "print", "(", "'Creating directory \"{}\"'", ".", "format", "(", "dataset_dir", ")", ")", "\n", "mkdir_if_missing", "(", "dataset_dir", ")", "\n", "fpath", "=", "osp", ".", "join", "(", "dataset_dir", ",", "osp", ".", "basename", "(", "dataset_url", ")", ")", "\n", "\n", "print", "(", "\n", "'Downloading {} dataset to \"{}\"'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "dataset_dir", "\n", ")", "\n", ")", "\n", "download_url", "(", "dataset_url", ",", "fpath", ")", "\n", "\n", "print", "(", "'Extracting \"{}\"'", ".", "format", "(", "fpath", ")", ")", "\n", "try", ":", "\n", "            ", "tar", "=", "tarfile", ".", "open", "(", "fpath", ")", "\n", "tar", ".", "extractall", "(", "path", "=", "dataset_dir", ")", "\n", "tar", ".", "close", "(", ")", "\n", "", "except", ":", "\n", "            ", "zip_ref", "=", "zipfile", ".", "ZipFile", "(", "fpath", ",", "'r'", ")", "\n", "zip_ref", ".", "extractall", "(", "dataset_dir", ")", "\n", "zip_ref", ".", "close", "(", ")", "\n", "\n", "", "print", "(", "'{} dataset is ready'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.check_before_run": [[206, 218], ["isinstance", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "check_before_run", "(", "self", ",", "required_files", ")", ":", "\n", "        ", "\"\"\"Checks if required files exist before going deeper.\n\n        Args:\n            required_files (str or list): string file name(s).\n        \"\"\"", "\n", "if", "isinstance", "(", "required_files", ",", "str", ")", ":", "\n", "            ", "required_files", "=", "[", "required_files", "]", "\n", "\n", "", "for", "fpath", "in", "required_files", ":", "\n", "            ", "if", "not", "osp", ".", "exists", "(", "fpath", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "'\"{}\" is not found'", ".", "format", "(", "fpath", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.__repr__": [[219, 241], ["dataset.Dataset.parse_data", "dataset.Dataset.parse_data", "dataset.Dataset.parse_data", "dataset.Dataset.parse_data", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.parse_data", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.parse_data", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.parse_data", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.parse_data"], ["", "", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "num_train_pids", ",", "num_train_cams", "=", "self", ".", "parse_data", "(", "self", ".", "train", ")", "\n", "num_val_pids", ",", "num_val_cams", "=", "self", ".", "parse_data", "(", "self", ".", "val", ")", "\n", "num_query_pids", ",", "num_query_cams", "=", "self", ".", "parse_data", "(", "self", ".", "query", ")", "\n", "num_gallery_pids", ",", "num_gallery_cams", "=", "self", ".", "parse_data", "(", "self", ".", "gallery", ")", "\n", "\n", "msg", "=", "'  ----------------------------------------\\n'", "'  subset   | # ids | # items | # cameras\\n'", "'  ----------------------------------------\\n'", "'  train    | {:5d} | {:7d} | {:9d}\\n'", "'  val    | {:5d} | {:7d} | {:9d}\\n'", "'  query    | {:5d} | {:7d} | {:9d}\\n'", "'  gallery  | {:5d} | {:7d} | {:9d}\\n'", "'  ----------------------------------------\\n'", "'  items: images/tracklets for image/video dataset\\n'", ".", "format", "(", "\n", "num_train_pids", ",", "len", "(", "self", ".", "train", ")", ",", "num_train_cams", ",", "\n", "num_val_pids", ",", "len", "(", "self", ".", "val", ")", ",", "num_val_cams", ",", "\n", "num_query_pids", ",", "len", "(", "self", ".", "query", ")", ",", "num_query_cams", ",", "\n", "num_gallery_pids", ",", "len", "(", "self", ".", "gallery", ")", ",", "num_gallery_cams", "\n", ")", "\n", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.ImageDataset.__init__": [[254, 256], ["dataset.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "self", ",", "train", ",", "query", ",", "gallery", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ImageDataset", ",", "self", ")", ".", "__init__", "(", "train", ",", "query", ",", "gallery", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.ImageDataset.__getitem__": [[257, 263], ["torchreid.utils.read_image", "dataset.ImageDataset.transform"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.read_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", ",", "pid", ",", "camid", "=", "self", ".", "data", "[", "index", "]", "\n", "img", "=", "read_image", "(", "img_path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "pid", ",", "camid", ",", "img_path", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.ImageDataset.show_summary": [[264, 295], ["dataset.ImageDataset.parse_data", "dataset.ImageDataset.parse_data", "dataset.ImageDataset.parse_data", "print", "print", "print", "print", "print", "print", "print", "print", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.parse_data", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.parse_data", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.dataset.Dataset.parse_data"], ["", "def", "show_summary", "(", "self", ")", ":", "\n", "        ", "num_train_pids", ",", "num_train_cams", "=", "self", ".", "parse_data", "(", "self", ".", "train", ")", "\n", "# num_val_pids, num_val_cams = self.parse_data(self.val)", "\n", "num_query_pids", ",", "num_query_cams", "=", "self", ".", "parse_data", "(", "self", ".", "query", ")", "\n", "num_gallery_pids", ",", "num_gallery_cams", "=", "self", ".", "parse_data", "(", "self", ".", "gallery", ")", "\n", "\n", "print", "(", "'=> Loaded {}'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "print", "(", "'  ----------------------------------------'", ")", "\n", "print", "(", "'  subset   | # ids | # images | # cameras'", ")", "\n", "print", "(", "'  ----------------------------------------'", ")", "\n", "print", "(", "\n", "'  train    | {:5d} | {:8d} | {:9d}'", ".", "format", "(", "\n", "num_train_pids", ",", "len", "(", "self", ".", "train", ")", ",", "num_train_cams", "\n", ")", "\n", ")", "\n", "# print(", "\n", "#     '  val    | {:5d} | {:8d} | {:9d}'.format(", "\n", "#         num_val_pids, len(self.val), num_val_cams", "\n", "#     )", "\n", "# )", "\n", "print", "(", "\n", "'  query    | {:5d} | {:8d} | {:9d}'", ".", "format", "(", "\n", "num_query_pids", ",", "len", "(", "self", ".", "query", ")", ",", "num_query_cams", "\n", ")", "\n", ")", "\n", "print", "(", "\n", "'  gallery  | {:5d} | {:8d} | {:9d}'", ".", "format", "(", "\n", "num_gallery_pids", ",", "len", "(", "self", ".", "gallery", ")", ",", "num_gallery_cams", "\n", ")", "\n", ")", "\n", "print", "(", "'  ----------------------------------------'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.__init__.init_image_dataset": [[15, 24], ["list", "__image_datasets.keys", "ValueError"], "function", ["None"], ["num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "teacher_arch", "=", "teacher_arch", ",", "\n", "fc_dim", "=", "fc_dim", "\n", ")", "\n", "\n", "optimizer", "=", "optim", ".", "build_optimizer", "(", "\n", "model", ",", "\n", "optim", "=", "optimizer_type", ",", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.datasets.__init__.register_image_dataset": [[26, 57], ["list", "__image_datasets.keys", "ValueError"], "function", ["None"], [")", "\n", "\n", "if", "pcgrad", ":", "\n", "        ", "optimizer", "=", "optim", ".", "PCGrad", "(", "optimizer", ")", "\n", "scheduler", "=", "None", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "optim", ".", "build_lr_scheduler", "(", "\n", "optimizer", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ",", "\n", "stepsize", "=", "stepsize", "\n", ")", "\n", "", "start_epoch", "=", "0", "\n", "if", "path_model", "!=", "None", ":", "\n", "        ", "if", "spcl", ":", "\n", "            ", "convert_dsbn", "(", "model", ")", "\n", "", "if", "load_optim", "==", "False", ":", "\n", "# We use pretrained model to continue the training on the target domain", "\n", "            ", "start_epoch", "=", "utils", ".", "resume_from_checkpoint", "(", "path_model", ",", "model", ",", "optimizer", "=", "None", ")", "\n", "", "else", ":", "\n", "# We use pretrained model to continue the training on the target domain", "\n", "            ", "start_epoch", "=", "utils", ".", "resume_from_checkpoint", "(", "path_model", ",", "model", ",", "optimizer", ")", "\n", "", "", "if", "spcl", ":", "\n", "        ", "convert_bn", "(", "model", ")", "\n", "", "if", "fc_dim", ">", "0", "and", "multi_head", "!=", "0", ":", "\n", "        ", "torchreid", ".", "models", ".", "resnet", ".", "convert_2_multi_head", "(", "model", ",", "multi_head", "=", "multi_head", ")", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "return", "model", ",", "optimizer", ",", "scheduler", ",", "start_epoch", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.KL_divergence_loss.KLDivergenceLoss.__init__": [[10, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "KLDivergenceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.KL_divergence_loss.KLDivergenceLoss.forward": [[14, 23], ["torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.kl_div", "torch.kl_div"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "T", "=", "20", "\n", "y_teacher", "=", "x", "\n", "y_student", "=", "y", "\n", "p", "=", "F", ".", "log_softmax", "(", "y_teacher", "/", "T", ",", "dim", "=", "1", ")", "\n", "q", "=", "F", ".", "softmax", "(", "y_student", "/", "T", ",", "dim", "=", "1", ")", "\n", "l_kl", "=", "F", ".", "kl_div", "(", "p", ",", "q", ",", "size_average", "=", "False", ")", "*", "(", "T", "**", "2", ")", "/", "y_teacher", ".", "shape", "[", "0", "]", "\n", "\n", "return", "l_kl", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.Logm.forward": [[23, 29], ["ctx.save_for_backward", "log_euclid_loss.logm_scipy", "len"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.logm_scipy"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "A", ")", ":", "\n", "        ", "assert", "len", "(", "A", ".", "shape", ")", "==", "2", "and", "A", ".", "shape", "[", "0", "]", "==", "A", ".", "shape", "[", "1", "]", "# Square matrix", "\n", "assert", "A", ".", "dtype", "in", "(", "torch", ".", "float32", ",", "torch", ".", "float64", ",", "torch", ".", "complex64", ",", "torch", ".", "complex128", ")", "\n", "ctx", ".", "save_for_backward", "(", "A", ")", "\n", "return", "logm_scipy", "(", "A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.Logm.backward": [[30, 34], ["log_euclid_loss.adjoint"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.adjoint"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "G", ")", ":", "\n", "        ", "A", ",", "=", "ctx", ".", "saved_tensors", "\n", "return", "adjoint", "(", "A", ",", "G", ",", "logm_scipy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.LogEuclidLoss.__init__": [[40, 44], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ",", "log", "=", "False", ")", ":", "\n", "        ", "super", "(", "LogEuclidLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "log", "=", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.LogEuclidLoss.forward": [[45, 56], ["torchreid.metrics.compute_distance_matrix", "torchreid.metrics.compute_distance_matrix", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "log_euclid_loss.logm", "log_euclid_loss.logm"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.logm", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.logm"], ["", "def", "forward", "(", "self", ",", "feats_source", ",", "feats_target", ")", ":", "\n", "\n", "        ", "dist_s", "=", "compute_distance_matrix", "(", "feats_source", ",", "feats_source", ",", "metric", "=", "'cosine'", ")", "\n", "dist_t", "=", "compute_distance_matrix", "(", "feats_target", ",", "feats_target", ",", "metric", "=", "'cosine'", ")", "\n", "\n", "if", "self", ".", "log", ":", "\n", "            ", "dist_s", "=", "logm", "(", "dist_s", ")", "\n", "dist_t", "=", "logm", "(", "dist_t", ")", "\n", "\n", "", "loss", "=", "torch", ".", "norm", "(", "dist_s", "-", "dist_t", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.adjoint": [[10, 18], ["A.T.conj().to", "A.size", "torch.zeros", "torch.zeros", "torch.zeros", "[].to", "A.T.conj", "log_euclid_loss.logm_scipy"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.logm_scipy"], ["def", "adjoint", "(", "A", ",", "E", ",", "f", ")", ":", "\n", "    ", "A_H", "=", "A", ".", "T", ".", "conj", "(", ")", ".", "to", "(", "E", ".", "dtype", ")", "\n", "n", "=", "A", ".", "size", "(", "0", ")", "\n", "M", "=", "torch", ".", "zeros", "(", "2", "*", "n", ",", "2", "*", "n", ",", "dtype", "=", "E", ".", "dtype", ",", "device", "=", "E", ".", "device", ")", "\n", "M", "[", ":", "n", ",", ":", "n", "]", "=", "A_H", "\n", "M", "[", "n", ":", ",", "n", ":", "]", "=", "A_H", "\n", "M", "[", ":", "n", ",", "n", ":", "]", "=", "E", "\n", "return", "f", "(", "M", ")", "[", ":", "n", ",", "n", ":", "]", ".", "to", "(", "A", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.logm_scipy": [[19, 21], ["torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "scipy.linalg.logm", "A.cpu"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.logm"], ["", "def", "logm_scipy", "(", "A", ")", ":", "\n", "    ", "return", "torch", ".", "from_numpy", "(", "scipy", ".", "linalg", ".", "logm", "(", "A", ".", "cpu", "(", ")", ",", "disp", "=", "False", ")", "[", "0", "]", ")", ".", "to", "(", "A", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.log_euclid_loss.logm": [[35, 37], ["Logm.apply"], "function", ["None"], ["", "", "def", "logm", "(", "x", ")", ":", "\n", "    ", "return", "Logm", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.hard_mine_triplet_loss.TripletLoss.__init__": [[18, 22], ["torch.Module.__init__", "torch.MarginRankingLoss", "torch.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "TripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.hard_mine_triplet_loss.TripletLoss.forward": [[23, 49], ["inputs.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt.clamp().sqrt", "targets.expand().eq", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "hard_mine_triplet_loss.TripletLoss.ranking_loss", "dist.clamp().sqrt.clamp().sqrt.t", "inputs.t", "targets.expand().t", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "dist.clamp().sqrt.clamp().sqrt.clamp", "targets.expand", "[].max().unsqueeze", "[].min().unsqueeze", "targets.expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "[].max", "[].min"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs (torch.Tensor): feature matrix with shape (batch_size, feat_dim).\n            targets (torch.LongTensor): ground truth labels with shape (num_classes).\n        \"\"\"", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "# Compute pairwise distance, replace by the official when merged", "\n", "dist", "=", "torch", ".", "pow", "(", "inputs", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "dist", "=", "dist", "+", "dist", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "\n", "# For each anchor, find the hardest positive and negative", "\n", "mask", "=", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "dist_an", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "dist_ap", "=", "torch", ".", "cat", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "cat", "(", "dist_an", ")", "\n", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "torch", ".", "ones_like", "(", "dist_an", ")", "\n", "return", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.__init__.DeepSupervision": [[10, 25], ["len", "criterion"], "function", ["None"], ["path_model", "=", "None", ",", "teacher_arch", "=", "None", ",", "spcl", "=", "False", ",", "load_optim", "=", "True", ",", "pcgrad", "=", "False", ",", "fc_dim", "=", "2048", ",", "multi_head", "=", "0", ")", ":", "\n", "    ", "if", "spcl", ":", "\n", "        ", "num_classes", "=", "0", "\n", "", "model", "=", "models", ".", "build_model", "(", "\n", "name", "=", "name", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "loss", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "teacher_arch", "=", "teacher_arch", ",", "\n", "fc_dim", "=", "fc_dim", "\n", ")", "\n", "\n", "optimizer", "=", "optim", ".", "build_optimizer", "(", "\n", "model", ",", "\n", "optim", "=", "optimizer_type", ",", "\n", "lr", "=", "lr", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.__init__": [[29, 36], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ",", "batch_size", "=", "32", ",", "instances", "=", "4", ",", "global_only", "=", "False", ",", "distance_only", "=", "True", ")", ":", "\n", "        ", "super", "(", "MaximumMeanDiscrepancy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "instances", "=", "instances", "\n", "self", ".", "global_only", "=", "global_only", "\n", "self", ".", "distance_only", "=", "distance_only", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_linear": [[44, 48], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "def", "mmd_linear", "(", "self", ",", "f_of_X", ",", "f_of_Y", ")", ":", "\n", "        ", "delta", "=", "f_of_X", "-", "f_of_Y", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "mm", "(", "delta", ",", "torch", ".", "transpose", "(", "delta", ",", "0", ",", "1", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.guassian_kernel": [[49, 63], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "torch.cat.unsqueeze().expand", "sum", "int", "int", "int", "int", "int", "int", "int", "int", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "source.size", "target.size"], "methods", ["None"], ["", "def", "guassian_kernel", "(", "self", ",", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "        ", "n_samples", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "+", "int", "(", "target", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "total", "=", "torch", ".", "cat", "(", "[", "source", ",", "target", "]", ",", "dim", "=", "0", ")", "\n", "total0", "=", "total", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "total1", "=", "total", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "L2_distance", "=", "(", "(", "total0", "-", "total1", ")", "**", "2", ")", ".", "sum", "(", "2", ")", "\n", "if", "fix_sigma", ":", "\n", "            ", "bandwidth", "=", "fix_sigma", "\n", "", "else", ":", "\n", "            ", "bandwidth", "=", "torch", ".", "sum", "(", "L2_distance", ".", "data", ")", "/", "(", "n_samples", "**", "2", "-", "n_samples", ")", "\n", "", "bandwidth", "/=", "kernel_mul", "**", "(", "kernel_num", "//", "2", ")", "\n", "bandwidth_list", "=", "[", "bandwidth", "*", "(", "kernel_mul", "**", "i", ")", "for", "i", "in", "range", "(", "kernel_num", ")", "]", "\n", "kernel_val", "=", "[", "torch", ".", "exp", "(", "-", "L2_distance", "/", "bandwidth_temp", ")", "for", "bandwidth_temp", "in", "bandwidth_list", "]", "\n", "return", "sum", "(", "kernel_val", ")", "#/len(kernel_val)", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_rbf_accelerate": [[64, 75], ["int", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.guassian_kernel", "range", "float", "source.size"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.guassian_kernel"], ["", "def", "mmd_rbf_accelerate", "(", "self", ",", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "kernels", "=", "self", ".", "guassian_kernel", "(", "source", ",", "target", ",", "\n", "kernel_mul", "=", "kernel_mul", ",", "kernel_num", "=", "kernel_num", ",", "fix_sigma", "=", "fix_sigma", ")", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "s1", ",", "s2", "=", "i", ",", "(", "i", "+", "1", ")", "%", "batch_size", "\n", "t1", ",", "t2", "=", "s1", "+", "batch_size", ",", "s2", "+", "batch_size", "\n", "loss", "+=", "kernels", "[", "s1", ",", "s2", "]", "+", "kernels", "[", "t1", ",", "t2", "]", "\n", "loss", "-=", "kernels", "[", "s1", ",", "t2", "]", "+", "kernels", "[", "s2", ",", "t1", "]", "\n", "", "return", "loss", "/", "float", "(", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_rbf_noaccelerate": [[76, 86], ["int", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.guassian_kernel", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "source.size"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.guassian_kernel"], ["", "def", "mmd_rbf_noaccelerate", "(", "self", ",", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "kernels", "=", "self", ".", "guassian_kernel", "(", "source", ",", "target", ",", "\n", "kernel_mul", "=", "kernel_mul", ",", "kernel_num", "=", "kernel_num", ",", "fix_sigma", "=", "fix_sigma", ")", "\n", "XX", "=", "kernels", "[", ":", "batch_size", ",", ":", "batch_size", "]", "\n", "YY", "=", "kernels", "[", "batch_size", ":", ",", "batch_size", ":", "]", "\n", "XY", "=", "kernels", "[", ":", "batch_size", ",", "batch_size", ":", "]", "\n", "YX", "=", "kernels", "[", "batch_size", ":", ",", ":", "batch_size", "]", "\n", "loss", "=", "torch", ".", "mean", "(", "XX", "+", "YY", "-", "XY", "-", "YX", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.pairwise_distance": [[87, 100], ["x.view.view.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "ValueError", "ValueError", "len", "len"], "methods", ["None"], ["", "def", "pairwise_distance", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "if", "not", "len", "(", "x", ".", "shape", ")", "==", "len", "(", "y", ".", "shape", ")", "==", "2", ":", "\n", "            ", "raise", "ValueError", "(", "'Both inputs should be matrices.'", ")", "\n", "\n", "", "if", "x", ".", "shape", "[", "1", "]", "!=", "y", ".", "shape", "[", "1", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'The number of features should be the same.'", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "y", "=", "torch", ".", "transpose", "(", "y", ",", "0", ",", "1", ")", "\n", "output", "=", "torch", ".", "sum", "(", "(", "x", "-", "y", ")", "**", "2", ",", "1", ")", "\n", "output", "=", "torch", ".", "transpose", "(", "output", ",", "0", ",", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.gaussian_kernel_matrix": [[101, 108], ["sigmas.view.view.view", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.pairwise_distance().contiguous", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum().view_as", "torch.sum().view_as", "torch.sum().view_as", "torch.sum().view_as", "torch.sum().view_as", "torch.sum().view_as", "torch.sum().view_as", "torch.sum().view_as", "torch.sum().view_as", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.view.cuda", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.pairwise_distance", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.pairwise_distance"], ["", "def", "gaussian_kernel_matrix", "(", "self", ",", "x", ",", "y", ",", "sigmas", ")", ":", "\n", "        ", "sigmas", "=", "sigmas", ".", "view", "(", "sigmas", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "beta", "=", "1.", "/", "(", "2.", "*", "sigmas", ")", "\n", "dist", "=", "self", ".", "pairwise_distance", "(", "x", ",", "y", ")", ".", "contiguous", "(", ")", "\n", "dist_", "=", "dist", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "s", "=", "torch", ".", "matmul", "(", "beta", ",", "dist_", ".", "cuda", "(", ")", ")", "\n", "return", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "-", "s", ")", ",", "0", ")", ".", "view_as", "(", "dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.maximum_mean_discrepancy": [[109, 114], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "kernel", "kernel", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "kernel"], "methods", ["None"], ["", "def", "maximum_mean_discrepancy", "(", "self", ",", "x", ",", "y", ",", "kernel", "=", "gaussian_kernel_matrix", ")", ":", "\n", "        ", "cost", "=", "torch", ".", "mean", "(", "kernel", "(", "x", ",", "x", ")", ")", "\n", "cost", "+=", "torch", ".", "mean", "(", "kernel", "(", "y", ",", "y", ")", ")", "\n", "cost", "-=", "2", "*", "torch", ".", "mean", "(", "kernel", "(", "x", ",", "y", ")", ")", "\n", "return", "cost", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss": [[115, 127], ["functools.partial", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.maximum_mean_discrepancy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.maximum_mean_discrepancy"], ["", "def", "mmd_loss", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "\n", "        ", "sigmas", "=", "[", "\n", "1e-6", ",", "1e-5", ",", "1e-4", ",", "1e-3", ",", "1e-2", ",", "1e-1", ",", "1", ",", "5", ",", "10", ",", "15", ",", "20", ",", "25", ",", "30", ",", "35", ",", "100", ",", "\n", "1e3", ",", "1e4", ",", "1e5", ",", "1e6", "\n", "]", "\n", "gaussian_kernel", "=", "partial", "(", "\n", "self", ".", "gaussian_kernel_matrix", ",", "sigmas", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "sigmas", ")", ")", "\n", ")", "\n", "loss_value", "=", "self", ".", "maximum_mean_discrepancy", "(", "source", ",", "target", ",", "kernel", "=", "gaussian_kernel", ")", "\n", "loss_value", "=", "loss_value", "\n", "return", "loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.forward": [[128, 166], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torchreid.metrics.compute_distance_matrix", "torchreid.metrics.compute_distance_matrix", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torchreid.metrics.compute_distance_matrix", "torchreid.metrics.compute_distance_matrix", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "torch.cat.detach", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss", "int", "int", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss", "maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss", "torchreid.metrics.compute_distance_matrix", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchreid.metrics.compute_distance_matrix", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchreid.metrics.compute_distance_matrix", "torchreid.metrics.compute_distance_matrix"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.maximum_mean_discrepancy.MaximumMeanDiscrepancy.mmd_loss", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.metrics.distance.compute_distance_matrix"], ["", "def", "forward", "(", "self", ",", "source_features", ",", "target_features", ")", ":", "\n", "\n", "# group each images of the same identity together", "\n", "        ", "instances", "=", "self", ".", "instances", "\n", "batch_size", "=", "self", ".", "batch_size", "\n", "feature_size", "=", "target_features", ".", "shape", "[", "1", "]", "\n", "t", "=", "torch", ".", "reshape", "(", "target_features", ",", "(", "int", "(", "batch_size", "/", "instances", ")", ",", "instances", ",", "feature_size", ")", ")", "\n", "\n", "if", "self", ".", "global_only", ":", "\n", "            ", "return", "self", ".", "mmd_loss", "(", "source_features", ",", "target_features", ")", "\n", "\n", "\n", "#  and compute bc/wc euclidean distance", "\n", "", "wct", "=", "compute_distance_matrix", "(", "t", "[", "0", "]", ",", "t", "[", "0", "]", ")", "\n", "bct", "=", "compute_distance_matrix", "(", "t", "[", "0", "]", ",", "t", "[", "1", "]", ")", "\n", "for", "i", "in", "t", "[", "1", ":", "]", ":", "\n", "            ", "wct", "=", "torch", ".", "cat", "(", "(", "wct", ",", "compute_distance_matrix", "(", "i", ",", "i", ")", ")", ")", "\n", "for", "j", "in", "t", ":", "\n", "                ", "if", "not", "torch", ".", "equal", "(", "i", ",", "j", ")", ":", "# if j is not i:", "\n", "                    ", "bct", "=", "torch", ".", "cat", "(", "(", "bct", ",", "compute_distance_matrix", "(", "i", ",", "j", ")", ")", ")", "\n", "\n", "", "", "", "s", "=", "torch", ".", "reshape", "(", "source_features", ",", "(", "int", "(", "batch_size", "/", "instances", ")", ",", "instances", ",", "feature_size", ")", ")", "\n", "wcs", "=", "compute_distance_matrix", "(", "s", "[", "0", "]", ",", "s", "[", "0", "]", ")", "\n", "bcs", "=", "compute_distance_matrix", "(", "s", "[", "0", "]", ",", "s", "[", "1", "]", ")", "\n", "for", "i", "in", "s", "[", "1", ":", "]", ":", "\n", "            ", "wcs", "=", "torch", ".", "cat", "(", "(", "wcs", ",", "compute_distance_matrix", "(", "i", ",", "i", ")", ")", ")", "\n", "for", "j", "in", "s", ":", "\n", "                ", "if", "not", "torch", ".", "equal", "(", "i", ",", "j", ")", ":", "# if j is not i:", "\n", "                    ", "bcs", "=", "torch", ".", "cat", "(", "(", "bcs", ",", "compute_distance_matrix", "(", "i", ",", "j", ")", ")", ")", "\n", "\n", "# We want to modify only target distribution", "\n", "", "", "", "bcs", "=", "bcs", ".", "detach", "(", ")", "\n", "wcs", "=", "wcs", ".", "detach", "(", ")", "\n", "\n", "if", "self", ".", "distance_only", ":", "\n", "            ", "return", "self", ".", "mmd_loss", "(", "wcs", ",", "wct", ")", ",", "self", ".", "mmd_loss", "(", "bcs", ",", "bct", ")", "\n", "\n", "", "return", "self", ".", "mmd_loss", "(", "wcs", ",", "wct", ")", ",", "self", ".", "mmd_loss", "(", "bcs", ",", "bct", ")", ",", "self", ".", "mmd_loss", "(", "source_features", ",", "target_features", ")", "\n", "#return self.mmd_loss(wcs, wct), self.mmd_loss(bcs, bct), torch.tensor(0)", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.cross_entropy_loss.CrossEntropyLoss.__init__": [[29, 37], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["def", "__init__", "(", "\n", "self", ",", "num_classes", ",", "epsilon", "=", "0.1", ",", "use_gpu", "=", "True", ",", "label_smooth", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "if", "label_smooth", "else", "0", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.cross_entropy_loss.CrossEntropyLoss.forward": [[38, 55], ["cross_entropy_loss.CrossEntropyLoss.logsoftmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.scatter_", "cross_entropy_loss.CrossEntropyLoss.size", "targets.cuda.cuda.unsqueeze().data.cpu", "targets.cuda.cuda.cuda", "targets.cuda.cuda.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs (torch.Tensor): prediction matrix (before softmax) with\n                shape (batch_size, num_classes).\n            targets (torch.LongTensor): ground truth labels with shape (batch_size).\n                Each position contains the label index.\n        \"\"\"", "\n", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "zeros", "=", "torch", ".", "zeros", "(", "log_probs", ".", "size", "(", ")", ")", "\n", "targets", "=", "zeros", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "1", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "", "targets", "=", "(", "\n", "1", "-", "self", ".", "epsilon", "\n", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "return", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__": [[10, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "MarginLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.losses.margin_loss.MarginLoss.forward": [[15, 20], ["torch.functional.mse_loss", "torch.functional.mse_loss", "torch.functional.mse_loss.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats_source", ",", "feats_target", ")", ":", "\n", "\n", "        ", "loss", "=", "nn", ".", "functional", ".", "mse_loss", "(", "feats_source", ",", "feats_target", ",", "reduction", "=", "\"none\"", ")", "\n", "loss", "=", "loss", "*", "(", "(", "feats_source", ">", "feats_target", ")", "|", "(", "feats_target", ">", "0", ")", ")", ".", "float", "(", ")", "\n", "return", "loss", ".", "sum", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.tools.visualize_actmap.visactmap": [[25, 126], ["torch.no_grad", "model.eval", "list", "test_loader.keys", "os.join", "torchreid.utils.mkdir_if_missing", "print", "enumerate", "model.size", "model.view", "torch.nn.functional.normalize", "model.view", "range", "imgs.cuda.cuda", "model", "model.dim", "ValueError", "model.size", "os.basename", "zip", "numpy.uint8", "img_np.transpose.transpose", "outputs[].numpy", "cv2.resize", "numpy.uint8", "cv2.applyColorMap", "overlapped.astype.astype", "cv2.imwrite", "print", "TypeError", "imgs.cuda.cpu", "model.cpu", "t.mul_().add_().clamp_", "numpy.floor", "numpy.floor", "numpy.ones", "os.join", "model.dim", "os.splitext", "len", "t.mul_().add_", "img.numpy", "numpy.min", "numpy.max", "numpy.min", "t.mul_"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.mkdir_if_missing"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "visactmap", "(", "\n", "model", ",", "\n", "test_loader", ",", "\n", "save_dir", ",", "\n", "width", ",", "\n", "height", ",", "\n", "use_gpu", ",", "\n", "img_mean", "=", "None", ",", "\n", "img_std", "=", "None", "\n", ")", ":", "\n", "    ", "if", "img_mean", "is", "None", "or", "img_std", "is", "None", ":", "\n", "# use imagenet mean and std", "\n", "        ", "img_mean", "=", "IMAGENET_MEAN", "\n", "img_std", "=", "IMAGENET_STD", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "for", "target", "in", "list", "(", "test_loader", ".", "keys", "(", ")", ")", ":", "\n", "        ", "data_loader", "=", "test_loader", "[", "target", "]", "[", "'query'", "]", "# only process query images", "\n", "# original images and activation maps are saved individually", "\n", "actmap_dir", "=", "osp", ".", "join", "(", "save_dir", ",", "'actmap_'", "+", "target", ")", "\n", "mkdir_if_missing", "(", "actmap_dir", ")", "\n", "print", "(", "'Visualizing activation maps for {} ...'", ".", "format", "(", "target", ")", ")", "\n", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "imgs", ",", "paths", "=", "data", "[", "'img'", "]", ",", "data", "[", "'impath'", "]", "\n", "if", "use_gpu", ":", "\n", "                ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "# forward to get convolutional feature maps", "\n", "", "try", ":", "\n", "                ", "outputs", "=", "model", "(", "imgs", ",", "return_featuremaps", "=", "True", ")", "\n", "", "except", "TypeError", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "'forward() got unexpected keyword argument \"return_featuremaps\". '", "\n", "'Please add return_featuremaps as an input argument to forward(). When '", "\n", "'return_featuremaps=True, return feature maps only.'", "\n", ")", "\n", "\n", "", "if", "outputs", ".", "dim", "(", ")", "!=", "4", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'The model output is supposed to have '", "\n", "'shape of (b, c, h, w), i.e. 4 dimensions, but got {} dimensions. '", "\n", "'Please make sure you set the model output at eval mode '", "\n", "'to be the last convolutional feature maps'", ".", "format", "(", "\n", "outputs", ".", "dim", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "# compute activation maps", "\n", "", "outputs", "=", "(", "outputs", "**", "2", ")", ".", "sum", "(", "1", ")", "\n", "b", ",", "h", ",", "w", "=", "outputs", ".", "size", "(", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "b", ",", "h", "*", "w", ")", "\n", "outputs", "=", "F", ".", "normalize", "(", "outputs", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "outputs", ".", "view", "(", "b", ",", "h", ",", "w", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "                ", "imgs", ",", "outputs", "=", "imgs", ".", "cpu", "(", ")", ",", "outputs", ".", "cpu", "(", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "outputs", ".", "size", "(", "0", ")", ")", ":", "\n", "# get image name", "\n", "                ", "path", "=", "paths", "[", "j", "]", "\n", "imname", "=", "osp", ".", "basename", "(", "osp", ".", "splitext", "(", "path", ")", "[", "0", "]", ")", "\n", "\n", "# RGB image", "\n", "img", "=", "imgs", "[", "j", ",", "...", "]", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "img", ",", "img_mean", ",", "img_std", ")", ":", "\n", "                    ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "", "img_np", "=", "np", ".", "uint8", "(", "np", ".", "floor", "(", "img", ".", "numpy", "(", ")", "*", "255", ")", ")", "\n", "img_np", "=", "img_np", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "# (c, h, w) -> (h, w, c)", "\n", "\n", "# activation map", "\n", "am", "=", "outputs", "[", "j", ",", "...", "]", ".", "numpy", "(", ")", "\n", "am", "=", "cv2", ".", "resize", "(", "am", ",", "(", "width", ",", "height", ")", ")", "\n", "am", "=", "255", "*", "(", "am", "-", "np", ".", "min", "(", "am", ")", ")", "/", "(", "\n", "np", ".", "max", "(", "am", ")", "-", "np", ".", "min", "(", "am", ")", "+", "1e-12", "\n", ")", "\n", "am", "=", "np", ".", "uint8", "(", "np", ".", "floor", "(", "am", ")", ")", "\n", "am", "=", "cv2", ".", "applyColorMap", "(", "am", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "\n", "# overlapped", "\n", "overlapped", "=", "img_np", "*", "0.3", "+", "am", "*", "0.7", "\n", "overlapped", "[", "overlapped", ">", "255", "]", "=", "255", "\n", "overlapped", "=", "overlapped", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# save images in a single figure (add white spacing between images)", "\n", "# from left to right: original image, activation map, overlapped image", "\n", "grid_img", "=", "255", "*", "np", ".", "ones", "(", "\n", "(", "height", ",", "3", "*", "width", "+", "2", "*", "GRID_SPACING", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "grid_img", "[", ":", ",", ":", "width", ",", ":", "]", "=", "img_np", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "grid_img", "[", ":", ",", "\n", "width", "+", "GRID_SPACING", ":", "2", "*", "width", "+", "GRID_SPACING", ",", ":", "]", "=", "am", "\n", "grid_img", "[", ":", ",", "2", "*", "width", "+", "2", "*", "GRID_SPACING", ":", ",", ":", "]", "=", "overlapped", "\n", "cv2", ".", "imwrite", "(", "osp", ".", "join", "(", "actmap_dir", ",", "imname", "+", "'.jpg'", ")", ",", "grid_img", ")", "\n", "\n", "", "if", "(", "batch_idx", "+", "1", ")", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "\n", "'- done batch {}/{}'", ".", "format", "(", "\n", "batch_idx", "+", "1", ",", "len", "(", "data_loader", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.tools.visualize_actmap.main": [[130, 169], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available", "torchreid.data.ImageDataManager", "torchreid.models.build_model", "visualize_actmap.visactmap", "model.cuda.cuda", "torchreid.utils.check_isfile", "torchreid.utils.load_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.__init__.build_model", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.tools.visualize_actmap.visactmap", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.tools.check_isfile", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.load_pretrained_weights"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'market1501'", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'osnet_x1_0'", ")", "\n", "parser", ".", "add_argument", "(", "'--weights'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--save-dir'", ",", "type", "=", "str", ",", "default", "=", "'log'", ")", "\n", "parser", ".", "add_argument", "(", "'--height'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "datamanager", "=", "torchreid", ".", "data", ".", "ImageDataManager", "(", "\n", "root", "=", "args", ".", "root", ",", "\n", "sources", "=", "args", ".", "dataset", ",", "\n", "height", "=", "args", ".", "height", ",", "\n", "width", "=", "args", ".", "width", ",", "\n", "batch_size_train", "=", "100", ",", "\n", "batch_size_test", "=", "100", ",", "\n", "transforms", "=", "None", ",", "\n", "train_sampler", "=", "'SequentialSampler'", "\n", ")", "\n", "test_loader", "=", "datamanager", ".", "test_loader", "\n", "\n", "model", "=", "torchreid", ".", "models", ".", "build_model", "(", "\n", "name", "=", "args", ".", "model", ",", "\n", "num_classes", "=", "datamanager", ".", "num_train_pids", ",", "\n", "use_gpu", "=", "use_gpu", "\n", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "weights", "and", "check_isfile", "(", "args", ".", "weights", ")", ":", "\n", "        ", "load_pretrained_weights", "(", "model", ",", "args", ".", "weights", ")", "\n", "\n", "", "visactmap", "(", "\n", "model", ",", "test_loader", ",", "args", ".", "save_dir", ",", "args", ".", "width", ",", "args", ".", "height", ",", "use_gpu", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.tools.compute_mean_std.main": [[19, 56], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torchreid.data.ImageDataManager", "print", "print", "print", "data.view.size", "data.view.view", "data.view.mean().sum", "data.view.std().sum", "data.view.size", "data.view.mean", "data.view.std"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'root'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'sources'", ",", "type", "=", "str", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "datamanager", "=", "torchreid", ".", "data", ".", "ImageDataManager", "(", "\n", "root", "=", "args", ".", "root", ",", "\n", "sources", "=", "args", ".", "sources", ",", "\n", "targets", "=", "None", ",", "\n", "height", "=", "256", ",", "\n", "width", "=", "128", ",", "\n", "batch_size_train", "=", "100", ",", "\n", "batch_size_test", "=", "100", ",", "\n", "transforms", "=", "None", ",", "\n", "norm_mean", "=", "[", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "norm_std", "=", "[", "1.", ",", "1.", ",", "1.", "]", ",", "\n", "train_sampler", "=", "'SequentialSampler'", "\n", ")", "\n", "train_loader", "=", "datamanager", ".", "train_loader", "\n", "\n", "print", "(", "'Computing mean and std ...'", ")", "\n", "mean", "=", "0.", "\n", "std", "=", "0.", "\n", "n_samples", "=", "0.", "\n", "for", "data", "in", "train_loader", ":", "\n", "        ", "data", "=", "data", "[", "'img'", "]", "\n", "batch_size", "=", "data", ".", "size", "(", "0", ")", "\n", "data", "=", "data", ".", "view", "(", "batch_size", ",", "data", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "mean", "+=", "data", ".", "mean", "(", "2", ")", ".", "sum", "(", "0", ")", "\n", "std", "+=", "data", ".", "std", "(", "2", ")", ".", "sum", "(", "0", ")", "\n", "n_samples", "+=", "batch_size", "\n", "\n", "", "mean", "/=", "n_samples", "\n", "std", "/=", "n_samples", "\n", "print", "(", "'Mean: {}'", ".", "format", "(", "mean", ")", ")", "\n", "print", "(", "'Std: {}'", ".", "format", "(", "std", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.scripts.KD_REID.main": [[10, 159], ["parser.parse_args", "torchreid.utils.Logger", "print", "print", "torchreid.data.ImageDataManager", "print", "torchreid.initialize_model_optimizer_scheduler", "print", "list", "list", "list", "range", "torchreid.engine.MTDAEnginePerBatch.run", "os.join", "len", "len", "torchreid.initialize_model_optimizer_scheduler", "list.append", "list.append", "list.append", "torchreid.engine.KDMTDAEngineOnebyOne", "torchreid.engine.MTDAEnginePerBatch", "isinstance", "isinstance", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.torchreid.__init__.initialize_model_optimizer_scheduler", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine.run", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.torchreid.__init__.initialize_model_optimizer_scheduler"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "log_dir", "=", "'log/KD_ReID_{stda}/{sources}2{targets}{cuhk_split}/{teacher}_t_{student}_s/{target_alt}{kd_style}{target_order}{lkd_s_w}{lda_w}'", ".", "format", "(", "\n", "stda", "=", "args", ".", "stda", ",", "\n", "target_alt", "=", "''", "if", "args", ".", "target_alt", "==", "'full'", "else", "'_target_alt_'", "+", "args", ".", "target_alt", ",", "\n", "kd_style", "=", "'_kd_style_outs_feats'", "if", "args", ".", "kd_style", "==", "'all'", "else", "'_kd_style_'", "+", "args", ".", "kd_style", ",", "\n", "target_order", "=", "''", "if", "args", ".", "target_order", "==", "'random'", "else", "'_'", "+", "args", ".", "target_order", "+", "'_order'", ",", "\n", "sources", "=", "args", ".", "dataset_source", "if", "isinstance", "(", "args", ".", "dataset_source", ",", "str", ")", "else", "\n", "'+'", ".", "join", "(", "[", "str", "(", "elem", ")", "for", "elem", "in", "args", ".", "dataset_source", "]", ")", ",", "\n", "targets", "=", "args", ".", "dataset_target", "if", "isinstance", "(", "args", ".", "dataset_target", ",", "str", ")", "else", "\n", "'+'", ".", "join", "(", "[", "str", "(", "elem", ")", "for", "elem", "in", "args", ".", "dataset_target", "]", ")", ",", "\n", "teacher", "=", "args", ".", "arch_teacher", ",", "\n", "student", "=", "args", ".", "arch_student", ",", "\n", "lkd_s_w", "=", "''", "if", "args", ".", "lkds_weight", "==", "0", "else", "'_lkds_'", "+", "str", "(", "args", ".", "lkds_weight", ")", ",", "\n", "lda_w", "=", "''", "if", "args", ".", "lda_weight", "==", "0", "else", "'_lda_'", "+", "str", "(", "args", ".", "lda_weight", ")", ",", "\n", "cuhk_split", "=", "'_new_cuhk'", "if", "args", ".", "new_cuhk", "else", "''", "\n", ")", "\n", "log_name", "=", "'console_txt.log'", "\n", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "log_dir", ",", "log_name", ")", ")", "\n", "print", "(", "\"Saving experiment data to : {}\"", ".", "format", "(", "log_dir", ")", ")", "\n", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "if", "args", ".", "multi_head", ":", "\n", "        ", "multi_head", "=", "len", "(", "args", ".", "dataset_target", ")", "\n", "", "else", ":", "\n", "        ", "multi_head", "=", "0", "\n", "\n", "", "if", "args", ".", "new_cuhk", ":", "\n", "        ", "cuhk_classic", "=", "False", "\n", "", "else", ":", "\n", "        ", "cuhk_classic", "=", "True", "\n", "\n", "", "datamanager", "=", "torchreid", ".", "data", ".", "ImageDataManager", "(", "\n", "root", "=", "args", ".", "data_dir", ",", "\n", "sources", "=", "args", ".", "dataset_source", ",", "\n", "targets", "=", "args", ".", "dataset_target", ",", "\n", "height", "=", "args", ".", "height", ",", "\n", "width", "=", "args", ".", "width", ",", "\n", "batch_size_train", "=", "args", ".", "batch_size", ",", "\n", "batch_size_test", "=", "100", ",", "\n", "transforms", "=", "[", "'random_flip'", ",", "'random_crop'", ",", "'random_erasing'", "]", ",", "\n", "num_instances", "=", "args", ".", "num_instances", ",", "\n", "train_sampler", "=", "'RandomIdentitySampler'", ",", "\n", "load_train_targets", "=", "True", ",", "\n", "workers", "=", "args", ".", "workers", ",", "\n", "cuhk03_labeled", "=", "True", ",", "\n", "cuhk03_classic_split", "=", "cuhk_classic", "\n", ")", "\n", "if", "args", ".", "stda", "==", "'D-MMD'", ":", "\n", "        ", "num_classes", "=", "datamanager", ".", "num_train_pids", "\n", "spcl", "=", "False", "\n", "", "else", ":", "\n", "        ", "num_classes", "=", "0", "\n", "spcl", "=", "True", "\n", "\n", "", "print", "(", "\"Initialize model student\"", ")", "\n", "model_student", ",", "optimizer_student", ",", "scheduler_student", ",", "start_epoch", "=", "torchreid", ".", "initialize_model_optimizer_scheduler", "(", "\n", "name", "=", "args", ".", "arch_student", ",", "num_classes", "=", "datamanager", ".", "num_train_pids", ",", "\n", "loss", "=", "'kd_reid'", ",", "pretrained", "=", "True", ",", "\n", "optimizer_type", "=", "args", ".", "optimizer", ",", "lr", "=", "args", ".", "lr", ",", "\n", "lr_scheduler", "=", "args", ".", "scheduler", ",", "stepsize", "=", "args", ".", "step_size", ",", "\n", "path_model", "=", "args", ".", "model_path_student", ",", "\n", "teacher_arch", "=", "args", ".", "arch_teacher", ",", "\n", "spcl", "=", "False", ",", "\n", "load_optim", "=", "False", ",", "\n", "pcgrad", "=", "False", ",", "\n", "fc_dim", "=", "args", ".", "features", ",", "\n", "multi_head", "=", "multi_head", "\n", ")", "\n", "\n", "print", "(", "\"Initialize model(s) teacher\"", ")", "\n", "models_teacher_list", "=", "list", "(", ")", "\n", "optimizer_teacher_list", "=", "list", "(", ")", "\n", "scheduler_teacher_list", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "datamanager", ".", "targets", ")", ")", ":", "\n", "            ", "model", ",", "optimizer", ",", "scheduler", ",", "start_epoch", "=", "torchreid", ".", "initialize_model_optimizer_scheduler", "(", "\n", "name", "=", "args", ".", "arch_teacher", ",", "num_classes", "=", "num_classes", ",", "\n", "loss", "=", "'kd_reid'", ",", "pretrained", "=", "True", ",", "\n", "optimizer_type", "=", "args", ".", "optimizer", ",", "lr", "=", "args", ".", "lr", ",", "\n", "lr_scheduler", "=", "args", ".", "scheduler", ",", "stepsize", "=", "args", ".", "step_size", ",", "\n", "path_model", "=", "args", ".", "model_path_teachers", "[", "i", "]", ",", "\n", "teacher_arch", "=", "None", ",", "\n", "spcl", "=", "spcl", ",", "\n", "load_optim", "=", "False", ",", "\n", "fc_dim", "=", "args", ".", "features", "\n", ")", "\n", "models_teacher_list", ".", "append", "(", "model", ")", "\n", "optimizer_teacher_list", ".", "append", "(", "optimizer", ")", "\n", "scheduler_teacher_list", ".", "append", "(", "scheduler", ")", "\n", "\n", "", "if", "args", ".", "target_alt", "==", "'full'", ":", "\n", "            ", "engine", "=", "torchreid", ".", "engine", ".", "KDMTDAEngineOnebyOne", "(", "\n", "datamanager", "=", "datamanager", ",", "\n", "model_student", "=", "model_student", ",", "\n", "optimizer_student", "=", "optimizer_student", ",", "\n", "scheduler_student", "=", "scheduler_student", ",", "\n", "models_teacher_list", "=", "models_teacher_list", ",", "\n", "optimizer_teacher_list", "=", "optimizer_teacher_list", ",", "\n", "scheduler_teacher_list", "=", "scheduler_teacher_list", ",", "\n", "label_smooth", "=", "True", ",", "\n", "mmd_only", "=", "False", ",", "\n", "kd_style", "=", "args", ".", "kd_style", ",", "\n", "lda_weight", "=", "args", ".", "lda_weight", ",", "\n", "lkds_weight", "=", "args", ".", "lkds_weight", ",", "\n", "lkdt_weight", "=", "args", ".", "lkdt_weight", ",", "\n", "target_order", "=", "args", ".", "target_order", ",", "\n", "log_loss", "=", "args", ".", "log_loss", "\n", ")", "\n", "", "elif", "args", ".", "target_alt", "==", "'batch'", ":", "\n", "            ", "engine", "=", "torchreid", ".", "engine", ".", "MTDAEnginePerBatch", "(", "\n", "datamanager", "=", "datamanager", ",", "\n", "model_student", "=", "model_student", ",", "\n", "optimizer_student", "=", "optimizer_student", ",", "\n", "scheduler_student", "=", "scheduler_student", ",", "\n", "models_teacher_list", "=", "models_teacher_list", ",", "\n", "optimizer_teacher_list", "=", "optimizer_teacher_list", ",", "\n", "scheduler_teacher_list", "=", "scheduler_teacher_list", ",", "\n", "label_smooth", "=", "True", ",", "\n", "mmd_only", "=", "False", ",", "\n", "kd_style", "=", "args", ".", "kd_style", ",", "\n", "lda_weight", "=", "args", ".", "lda_weight", ",", "\n", "lkds_weight", "=", "args", ".", "lkds_weight", ",", "\n", "lkdt_weight", "=", "args", ".", "lkdt_weight", ",", "\n", "target_order", "=", "args", ".", "target_order", ",", "\n", "log_loss", "=", "args", ".", "log_loss", "\n", ")", "\n", "", "else", ":", "\n", "        ", "engine", "=", "None", "\n", "\n", "# engine.run(", "\n", "#         save_dir=log_dir,", "\n", "#         test_only=True", "\n", "# )", "\n", "\n", "", "start_epoch", "=", "0", "\n", "# Start the domain adaptation", "\n", "engine", ".", "run", "(", "\n", "save_dir", "=", "log_dir", ",", "\n", "max_epoch", "=", "args", ".", "epochs", ",", "\n", "eval_freq", "=", "args", ".", "eval_freq", ",", "\n", "print_freq", "=", "args", ".", "print_freq", ",", "\n", "test_only", "=", "False", ",", "\n", "visrank", "=", "False", ",", "\n", "start_epoch", "=", "start_epoch", ",", "\n", "use_tensorboard", "=", "args", ".", "tensorboard", ",", "\n", "eval_teachers", "=", "False", ",", "\n", "use_metric_cuhk03", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.scripts.DMMD.main": [[8, 87], ["parser.parse_args", "torchreid.utils.Logger", "print", "print", "torchreid.data.ImageDataManager", "print", "torchreid.initialize_model_optimizer_scheduler", "torchreid.engine.ImageMmdEngine", "torchreid.engine.ImageMmdEngine.run", "os.join", "len", "isinstance", "isinstance", "str", "str"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.torchreid.__init__.initialize_model_optimizer_scheduler", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine.run"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "blend", "=", "True", "if", "len", "(", "args", ".", "dataset_target", ")", ">", "1", "else", "False", "\n", "\n", "\n", "log_dir", "=", "'log/final_tests/DMMD_ST/{sources}{cuhk_split}/{sources}_to_{targets}_{student}_s'", ".", "format", "(", "\n", "sources", "=", "args", ".", "dataset_source", "if", "isinstance", "(", "args", ".", "dataset_source", ",", "str", ")", "else", "\n", "'+'", ".", "join", "(", "[", "str", "(", "elem", ")", "for", "elem", "in", "args", ".", "dataset_source", "]", ")", ",", "\n", "targets", "=", "args", ".", "dataset_target", "if", "isinstance", "(", "args", ".", "dataset_target", ",", "str", ")", "else", "\n", "'+'", ".", "join", "(", "[", "str", "(", "elem", ")", "for", "elem", "in", "args", ".", "dataset_target", "]", ")", ",", "\n", "student", "=", "args", ".", "arch", ",", "\n", "cuhk_split", "=", "'_new_cuhk'", "if", "args", ".", "new_cuhk", "else", "''", "\n", ")", "\n", "\n", "log_name", "=", "'console_txt.log'", "\n", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "log_dir", ",", "log_name", ")", ")", "\n", "print", "(", "\"Saving experiment data to : {}\"", ".", "format", "(", "log_dir", ")", ")", "\n", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "if", "args", ".", "new_cuhk", ":", "\n", "        ", "cuhk_classic", "=", "False", "\n", "", "else", ":", "\n", "        ", "cuhk_classic", "=", "True", "\n", "\n", "", "datamanager", "=", "torchreid", ".", "data", ".", "ImageDataManager", "(", "\n", "root", "=", "args", ".", "data_dir", ",", "\n", "sources", "=", "args", ".", "dataset_source", ",", "\n", "targets", "=", "args", ".", "dataset_target", ",", "\n", "height", "=", "args", ".", "height", ",", "\n", "width", "=", "args", ".", "width", ",", "\n", "batch_size_train", "=", "args", ".", "batch_size", ",", "\n", "batch_size_test", "=", "100", ",", "\n", "transforms", "=", "[", "'random_flip'", ",", "'random_crop'", ",", "'random_erasing'", "]", ",", "\n", "num_instances", "=", "args", ".", "num_instances", ",", "\n", "train_sampler", "=", "'RandomIdentitySampler'", ",", "\n", "load_train_targets", "=", "True", ",", "\n", "blend", "=", "blend", ",", "\n", "cuhk03_labeled", "=", "True", ",", "\n", "cuhk03_classic_split", "=", "cuhk_classic", "\n", ")", "\n", "\n", "print", "(", "\"Initialize model student\"", ")", "\n", "model_student", ",", "optimizer_student", ",", "scheduler_student", ",", "start_epoch", "=", "torchreid", ".", "initialize_model_optimizer_scheduler", "(", "\n", "name", "=", "args", ".", "arch", ",", "num_classes", "=", "datamanager", ".", "num_train_pids", ",", "loss", "=", "'mmd'", ",", "pretrained", "=", "True", ",", "\n", "optimizer_type", "=", "args", ".", "optimizer", ",", "lr", "=", "args", ".", "lr", ",", "\n", "lr_scheduler", "=", "args", ".", "scheduler", ",", "stepsize", "=", "args", ".", "step_size", ",", "\n", "path_model", "=", "args", ".", "model_path", ",", "\n", "teacher_arch", "=", "None", ",", "\n", "load_optim", "=", "False", ",", "\n", "fc_dim", "=", "args", ".", "features", "\n", ")", "\n", "\n", "engine", "=", "torchreid", ".", "engine", ".", "ImageMmdEngine", "(", "\n", "datamanager", "=", "datamanager", ",", "\n", "model", "=", "model_student", ",", "\n", "optimizer", "=", "optimizer_student", ",", "\n", "scheduler", "=", "scheduler_student", ",", "\n", "label_smooth", "=", "True", ",", "\n", "mmd_only", "=", "False", "\n", ")", "\n", "\n", "# engine.run(", "\n", "#         save_dir=log_dir,", "\n", "#         test_only=True,", "\n", "#         use_metric_cuhk03=True", "\n", "# )", "\n", "start_epoch", "=", "0", "\n", "# Start the domain adaptation", "\n", "engine", ".", "run", "(", "\n", "save_dir", "=", "log_dir", ",", "\n", "max_epoch", "=", "args", ".", "epochs", ",", "\n", "eval_freq", "=", "args", ".", "eval_freq", ",", "\n", "print_freq", "=", "args", ".", "print_freq", ",", "\n", "test_only", "=", "False", ",", "\n", "visrank", "=", "False", ",", "\n", "start_epoch", "=", "start_epoch", ",", "\n", "use_tensorboard", "=", "args", ".", "tensorboard", ",", "\n", "use_metric_cuhk03", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.scripts.source_training.main": [[8, 106], ["parser.parse_args", "print", "torchreid.utils.Logger", "print", "torchreid.data.ImageDataManager", "torchreid.models.build_model", "torchreid.optim.build_optimizer", "torchreid.optim.build_lr_scheduler", "model.cuda.cuda", "torchreid.engine.ImageTripletEngine", "torchreid.engine.ImageTripletEngine.run", "os.join", "torchreid.utils.resume_from_checkpoint", "torchreid.utils.resume_from_checkpoint", "torchreid.utils.resume_from_checkpoint", "torchreid.utils.resume_from_checkpoint", "torchreid.utils.resume_from_checkpoint"], "function", ["home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.models.__init__.build_model", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.optimizer.build_optimizer", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.optim.lr_scheduler.build_lr_scheduler", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.engine.engine.Engine.run", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.resume_from_checkpoint", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.resume_from_checkpoint", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.resume_from_checkpoint", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.resume_from_checkpoint", "home.repos.pwc.inspect_result.fremigereau_mtda_kd_reid.utils.torchtools.resume_from_checkpoint"], ["def", "main", "(", ")", ":", "\n", "        ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "log_dir", "=", "'log/final_tests/source_training/{sources}{cuhk_split}/{model}'", ".", "format", "(", "sources", "=", "args", ".", "dataset_source", ",", "\n", "model", "=", "args", ".", "arch", ",", "\n", "cuhk_split", "=", "'_new_cuhk'", "if", "args", ".", "new_cuhk", "else", "''", ")", "\n", "\n", "print", "(", "\"Saving experiment data to : {}\"", ".", "format", "(", "log_dir", ")", ")", "\n", "log_name", "=", "'console_txt.log'", "\n", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "log_dir", ",", "log_name", ")", ")", "\n", "\n", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "if", "args", ".", "new_cuhk", ":", "\n", "            ", "cuhk_classic", "=", "False", "\n", "", "else", ":", "\n", "            ", "cuhk_classic", "=", "True", "\n", "\n", "", "datamanager", "=", "torchreid", ".", "data", ".", "ImageDataManager", "(", "\n", "root", "=", "'reid-data'", ",", "\n", "sources", "=", "args", ".", "dataset_source", ",", "\n", "targets", "=", "args", ".", "dataset_source", ",", "\n", "height", "=", "args", ".", "height", ",", "\n", "width", "=", "args", ".", "width", ",", "\n", "batch_size_train", "=", "args", ".", "batch_size", ",", "\n", "batch_size_test", "=", "100", ",", "\n", "transforms", "=", "[", "'random_flip'", ",", "'random_crop'", ",", "'random_erasing'", "]", ",", "\n", "num_instances", "=", "args", ".", "num_instances", ",", "\n", "train_sampler", "=", "'RandomIdentitySampler'", ",", "\n", "load_train_targets", "=", "False", ",", "\n", "workers", "=", "args", ".", "workers", ",", "\n", "cuhk03_labeled", "=", "True", ",", "\n", "cuhk03_classic_split", "=", "cuhk_classic", "\n", ")", "\n", "\n", "model", "=", "torchreid", ".", "models", ".", "build_model", "(", "\n", "name", "=", "args", ".", "arch", ",", "\n", "num_classes", "=", "datamanager", ".", "num_train_pids", ",", "\n", "loss", "=", "'triplet'", ",", "\n", "pretrained", "=", "True", ",", "\n", "fc_dim", "=", "args", ".", "features", "\n", ")", "\n", "\n", "if", "args", ".", "arch", "==", "\"mobilenetv2\"", ":", "\n", "            ", "start_epoch", "=", "resume_from_checkpoint", "(", "'/export/livia/home/vision/fremigereau/workspace/KD-Reid/log/mobilenet_pretrain/mobilenetv2_1.4-bc1cc36b.pth'", ",", "model", ",", "optimizer", "=", "None", ")", "\n", "", "elif", "args", ".", "arch", "==", "\"osnet_x1_0\"", ":", "\n", "            ", "start_epoch", "=", "resume_from_checkpoint", "(", "'/export/livia/home/vision/fremigereau/workspace/KD-Reid/log/osnet_pretrain/osnet_x1_0_imagenet.pth'", ",", "model", ",", "optimizer", "=", "None", ",", "ignore_classifier", "=", "True", ")", "\n", "", "elif", "args", ".", "arch", "==", "\"osnet_x0_75\"", ":", "\n", "            ", "start_epoch", "=", "resume_from_checkpoint", "(", "'/export/livia/home/vision/fremigereau/workspace/KD-Reid/log/osnet_pretrain/osnet_x0_75_imagenet.pth'", ",", "model", ",", "optimizer", "=", "None", ",", "ignore_classifier", "=", "True", ")", "\n", "", "elif", "args", ".", "arch", "==", "\"osnet_x0_5\"", ":", "\n", "            ", "start_epoch", "=", "resume_from_checkpoint", "(", "'/export/livia/home/vision/fremigereau/workspace/KD-Reid/log/osnet_pretrain/osnet_x0_5_imagenet.pth'", ",", "model", ",", "optimizer", "=", "None", ",", "ignore_classifier", "=", "True", ")", "\n", "", "elif", "args", ".", "arch", "==", "\"osnet_x0_25\"", ":", "\n", "            ", "start_epoch", "=", "resume_from_checkpoint", "(", "'/export/livia/home/vision/fremigereau/workspace/KD-Reid/log/osnet_pretrain/osnet_x0_25_imagenet.pth'", ",", "model", ",", "optimizer", "=", "None", ",", "ignore_classifier", "=", "True", ")", "\n", "\n", "", "optimizer", "=", "torchreid", ".", "optim", ".", "build_optimizer", "(", "\n", "model", ",", "\n", "optim", "=", "args", ".", "optimizer", ",", "\n", "lr", "=", "args", ".", "lr", "\n", ")", "\n", "\n", "scheduler", "=", "torchreid", ".", "optim", ".", "build_lr_scheduler", "(", "\n", "optimizer", ",", "\n", "lr_scheduler", "=", "args", ".", "scheduler", ",", "\n", "stepsize", "=", "args", ".", "step_size", "\n", ")", "\n", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "# model = nn.DataParallel(model).cuda()  # Comment previous line and uncomment this line for multi-gpu use", "\n", "\n", "start_epoch", "=", "0", "\n", "\n", "engine", "=", "torchreid", ".", "engine", ".", "ImageTripletEngine", "(", "\n", "datamanager", "=", "datamanager", ",", "\n", "model_student", "=", "model", ",", "\n", "optimizer_student", "=", "optimizer", ",", "\n", "scheduler_student", "=", "scheduler", ",", "\n", "label_smooth", "=", "True", ",", "\n", ")", "\n", "\n", "if", "args", ".", "dataset_source", "==", "'msmt17'", ":", "\n", "                ", "fixbase_epoch", "=", "10", "\n", "open_layers", "=", "[", "'classifier'", "]", "\n", "", "else", ":", "\n", "                ", "fixbase_epoch", "=", "0", "\n", "open_layers", "=", "None", "\n", "\n", "", "engine", ".", "run", "(", "\n", "save_dir", "=", "log_dir", ",", "\n", "max_epoch", "=", "args", ".", "epochs", ",", "\n", "eval_freq", "=", "args", ".", "eval_freq", ",", "\n", "print_freq", "=", "args", ".", "print_freq", ",", "\n", "test_only", "=", "False", ",", "\n", "visrank", "=", "False", ",", "\n", "fixbase_epoch", "=", "fixbase_epoch", ",", "\n", "open_layers", "=", "open_layers", ",", "\n", "start_epoch", "=", "start_epoch", ",", "\n", "use_tensorboard", "=", "False", "\n", ")", "\n"]]}