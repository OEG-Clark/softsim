{"home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.__init__": [[9, 28], ["h5py.File", "numpy.empty"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "filename", ",", "\n", "proto", ",", "\n", "chunk_size", ",", "\n", "compression", "=", "True", ",", "\n", "chunk_id_sep", "=", "':'", ")", ":", "\n", "        ", "self", ".", "proto", "=", "proto", "\n", "self", ".", "chunk_size", "=", "chunk_size", "\n", "self", ".", "compression", "=", "compression", "\n", "self", ".", "chunk_id_sep", "=", "chunk_id_sep", "\n", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "buffers", "=", "{", "\n", "key", ":", "np", ".", "empty", "(", "shape", "=", "(", "self", ".", "chunk_size", ",", ")", "+", "(", "shape", "or", "(", ")", ")", ",", "\n", "dtype", "=", "dtype", ")", "\n", "for", "key", ",", "dtype", ",", "shape", "in", "self", ".", "proto", "\n", "}", "\n", "self", ".", "buffer_idx", "=", "0", "\n", "self", ".", "h5file", "=", "h5py", ".", "File", "(", "filename", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.__enter__": [[29, 31], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.write": [[32, 40], ["zip", "chunked_data.ChunkedDataWriter.flush"], "methods", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.flush"], ["", "def", "write", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "for", "(", "key", ",", "_", ",", "_", ")", ",", "data", "in", "zip", "(", "self", ".", "proto", ",", "args", ")", ":", "\n", "            ", "self", ".", "buffers", "[", "key", "]", "[", "self", ".", "buffer_idx", "]", "=", "data", "\n", "\n", "", "self", ".", "count", "+=", "1", "\n", "self", ".", "buffer_idx", "+=", "1", "\n", "if", "self", ".", "buffer_idx", ">=", "self", ".", "chunk_size", ":", "\n", "            ", "self", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.write_batch": [[41, 68], ["all", "zip", "zip", "chunked_data.ChunkedDataWriter.flush"], "methods", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.flush"], ["", "", "def", "write_batch", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "batch_size", "=", "args", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "assert", "all", "(", "x", ".", "shape", "[", "0", "]", "==", "batch_size", "for", "x", "in", "args", "[", "1", ":", "]", ")", "\n", "\n", "data_idx", "=", "0", "\n", "while", "data_idx", "<", "batch_size", ":", "\n", "            ", "data_rest", "=", "batch_size", "-", "data_idx", "\n", "buffer_rest", "=", "self", ".", "chunk_size", "-", "self", ".", "buffer_idx", "\n", "if", "data_rest", "<", "buffer_rest", ":", "\n", "                ", "for", "(", "key", ",", "_", ",", "_", ")", ",", "data", "in", "zip", "(", "self", ".", "proto", ",", "args", ")", ":", "\n", "                    ", "buffer", "=", "self", ".", "buffers", "[", "key", "]", "\n", "buffer", "[", "self", ".", "buffer_idx", ":", "self", ".", "buffer_idx", "+", "\n", "data_rest", "]", "=", "data", "[", "data_idx", ":", "]", "\n", "\n", "", "self", ".", "count", "+=", "data_rest", "\n", "data_idx", "+=", "data_rest", "\n", "self", ".", "buffer_idx", "+=", "data_rest", "\n", "", "else", ":", "\n", "                ", "for", "(", "key", ",", "_", ",", "_", ")", ",", "data", "in", "zip", "(", "self", ".", "proto", ",", "args", ")", ":", "\n", "                    ", "buffer", "=", "self", ".", "buffers", "[", "key", "]", "\n", "buffer", "[", "self", ".", "buffer_idx", ":", "]", "=", "data", "[", "data_idx", ":", "data_idx", "+", "\n", "buffer_rest", "]", "\n", "\n", "", "self", ".", "count", "+=", "buffer_rest", "\n", "data_idx", "+=", "buffer_rest", "\n", "self", ".", "buffer_idx", "+=", "buffer_rest", "\n", "self", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.create_dataset": [[70, 76], ["chunked_data.ChunkedDataWriter.h5file.create_dataset"], "methods", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.create_dataset"], ["", "", "", "def", "create_dataset", "(", "self", ",", "key", ",", "data", ")", ":", "\n", "        ", "self", ".", "h5file", ".", "create_dataset", "(", "\n", "key", ",", "\n", "data", "=", "data", ",", "\n", "compression", "=", "'gzip'", "if", "self", ".", "compression", "else", "None", ",", "\n", "shuffle", "=", "self", ".", "compression", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.flush": [[77, 91], ["chunked_data.ChunkedDataWriter.h5file.flush", "chunked_data.ChunkedDataWriter.h5file.create_dataset"], "methods", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.flush", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.create_dataset"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "buffer_idx", "<=", "0", ":", "\n", "            ", "return", "\n", "\n", "", "for", "key", ",", "_", ",", "_", "in", "self", ".", "proto", ":", "\n", "            ", "self", ".", "h5file", ".", "create_dataset", "(", "\n", "'{}{}{}'", ".", "format", "(", "key", ",", "self", ".", "chunk_id_sep", ",", "\n", "self", ".", "count", "//", "self", ".", "chunk_size", ")", ",", "\n", "data", "=", "self", ".", "buffers", "[", "key", "]", "[", ":", "self", ".", "buffer_idx", "]", ",", "\n", "compression", "=", "'gzip'", "if", "self", ".", "compression", "else", "None", ",", "\n", "shuffle", "=", "self", ".", "compression", ")", "\n", "\n", "", "self", ".", "buffer_idx", "=", "0", "\n", "self", ".", "h5file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.close": [[92, 95], ["chunked_data.ChunkedDataWriter.flush", "chunked_data.ChunkedDataWriter.h5file.close"], "methods", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.flush", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "flush", "(", ")", "\n", "self", ".", "h5file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.__exit__": [[96, 98], ["chunked_data.ChunkedDataWriter.close"], "methods", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.close"], ["", "def", "__exit__", "(", "self", ",", "_type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.__init__": [[101, 107], ["h5py.File", "chunked_data.ChunkedDataReader.h5file.keys", "key.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ",", "chunk_id_sep", "=", "':'", ")", ":", "\n", "        ", "self", ".", "h5file", "=", "h5py", ".", "File", "(", "filename", ",", "'r'", ")", "\n", "self", ".", "chunk_id_sep", "=", "chunk_id_sep", "\n", "\n", "self", ".", "keys", "=", "self", ".", "h5file", ".", "keys", "(", ")", "\n", "self", ".", "key_names", "=", "{", "key", ".", "split", "(", "self", ".", "chunk_id_sep", ")", "[", "0", "]", "for", "key", "in", "self", ".", "keys", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.__enter__": [[108, 110], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.get_id": [[111, 113], ["int", "key.split"], "methods", ["None"], ["", "def", "get_id", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "int", "(", "key", ".", "split", "(", "self", ".", "chunk_id_sep", ")", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.get": [[114, 131], ["filter", "sorted", "numpy.concatenate", "filter", "filter", "KeyError", "x.startswith", "chunked_data.ChunkedDataReader.get_id", "chunked_data.ChunkedDataReader.get_id", "chunked_data.ChunkedDataReader.get_id"], "methods", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.get_id", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.get_id", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.get_id"], ["", "def", "get", "(", "self", ",", "key", ",", "min_chunk", "=", "None", ",", "max_chunk", "=", "None", ")", ":", "\n", "        ", "keys", "=", "filter", "(", "lambda", "x", ":", "x", ".", "startswith", "(", "key", "+", "self", ".", "chunk_id_sep", ")", ",", "\n", "self", ".", "keys", ")", "\n", "if", "min_chunk", ":", "\n", "            ", "keys", "=", "filter", "(", "lambda", "x", ":", "self", ".", "get_id", "(", "x", ")", ">=", "min_chunk", ",", "keys", ")", "\n", "", "if", "max_chunk", ":", "\n", "            ", "keys", "=", "filter", "(", "lambda", "x", ":", "self", ".", "get_id", "(", "x", ")", "<", "max_chunk", ",", "keys", ")", "\n", "", "keys", "=", "sorted", "(", "keys", ",", "key", "=", "lambda", "x", ":", "self", ".", "get_id", "(", "x", ")", ")", "\n", "\n", "if", "not", "keys", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "f'{key}, min_chunk={min_chunk}, max_chunk={max_chunk}'", ")", "\n", "\n", "", "data", "=", "[", "self", ".", "h5file", "[", "key", "]", "for", "key", "in", "keys", "]", "\n", "data", "=", "np", ".", "concatenate", "(", "data", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.__getitem__": [[132, 137], ["chunked_data.ChunkedDataReader.get", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.get"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "in", "self", ".", "keys", ":", "\n", "# Data is without chunk", "\n", "            ", "return", "np", ".", "asarray", "(", "self", ".", "h5file", "[", "key", "]", ")", "\n", "", "return", "self", ".", "get", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.close": [[138, 140], ["chunked_data.ChunkedDataReader.h5file.close"], "methods", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "h5file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.__exit__": [[141, 143], ["chunked_data.ChunkedDataReader.close"], "methods", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataReader.close"], ["", "def", "__exit__", "(", "self", ",", "_type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.expect.expect": [[13, 23], ["functools.partial", "expected_fun.mean", "expect.expect_fwd", "expect.expect_bwd"], "function", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.expect.expect_fwd", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.expect.expect_bwd"], ["@", "partial", "(", "custom_vjp", ",", "nondiff_argnums", "=", "(", "0", ",", "1", ",", "5", ")", ")", "\n", "def", "expect", "(", "log_prob_fun", ",", "\n", "expected_fun", ",", "\n", "params", ",", "\n", "log_prob_args", ",", "\n", "expected_args", ",", "\n", "mean_grad_expected_is_zero", "=", "False", ")", ":", "\n", "    ", "ys", "=", "expected_fun", "(", "params", ",", "expected_args", ")", "\n", "y_mean", "=", "ys", ".", "mean", "(", "axis", "=", "0", ")", "\n", "return", "y_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.expect.expect_fwd": [[25, 34], ["expected_fun", "expected_fun.mean"], "function", ["None"], ["", "def", "expect_fwd", "(", "log_prob_fun", ",", "expected_fun", ",", "params", ",", "log_prob_args", ",", "\n", "expected_args", ",", "mean_grad_expected_is_zero", ")", ":", "\n", "    ", "ys", "=", "expected_fun", "(", "params", ",", "expected_args", ")", "\n", "y_mean", "=", "ys", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "# Use the baseline trick to reduce the variance", "\n", "weight", "=", "ys", "-", "y_mean", "\n", "\n", "return", "y_mean", ",", "(", "params", ",", "log_prob_args", ",", "expected_args", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.expect.expect_bwd": [[36, 52], ["log_prob_fun", "out.mean.mean", "jax.grad", "jax.vmap", "expected_fun"], "function", ["None"], ["", "def", "expect_bwd", "(", "log_prob_fun", ",", "expected_fun", ",", "mean_grad_expected_is_zero", ",", "res", ",", "g", ")", ":", "\n", "    ", "params", ",", "log_prob_args", ",", "expected_args", ",", "weight", "=", "res", "\n", "\n", "def", "f", "(", "params", ")", ":", "\n", "        ", "log_p", "=", "log_prob_fun", "(", "params", ",", "log_prob_args", ")", "\n", "out", "=", "vmap", "(", "jnp", ".", "multiply", ")", "(", "weight", ",", "log_p", ")", "\n", "if", "not", "mean_grad_expected_is_zero", ":", "\n", "            ", "out", "+=", "expected_fun", "(", "params", ",", "expected_args", ")", "\n", "", "out", "=", "out", ".", "mean", "(", "axis", "=", "0", ")", "\n", "out", "=", "(", "g", "*", "out", ")", ".", "sum", "(", ")", "\n", "return", "out", "\n", "\n", "", "grad_params", "=", "grad", "(", "f", ")", "(", "params", ")", "\n", "\n", "# Gradients of log_prob_args and expected_args are None", "\n", "return", "grad_params", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.net.prev_index_2d": [[9, 14], ["None"], "function", ["None"], ["def", "prev_index_2d", "(", "i", ",", "j", ",", "L", ")", ":", "\n", "    ", "v", "=", "i", "*", "L", "+", "j", "-", "1", "\n", "i", "=", "v", "//", "L", "\n", "j", "=", "v", "%", "L", "\n", "return", "i", ",", "j", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.net.MaskedConv2d": [[19, 168], ["jax.nn.initializers.glorot_normal", "jax.numpy.ones", "mask.at[].set.at[].set", "rhs_spec.index", "rhs_spec.index", "iter", "jax.random.split", "nn.initializers.glorot_normal.", "b_init", "net.MaskedConv2d.apply_fun"], "function", ["None"], ["", "def", "MaskedConv2d", "(", "out_chan", ",", "filter_shape", ",", "dilation", ",", "exclusive", ")", ":", "\n", "    ", "dimension_numbers", "=", "(", "'NHWC'", ",", "'HWIO'", ",", "'NHWC'", ")", "\n", "lhs_spec", ",", "rhs_spec", ",", "out_spec", "=", "dimension_numbers", "\n", "\n", "kernel_h", ",", "kernel_w", "=", "filter_shape", "\n", "dilation_h", ",", "dilation_w", "=", "dilation", "\n", "recep_h", "=", "(", "kernel_h", "-", "1", ")", "*", "dilation_h", "+", "1", "\n", "recep_w", "=", "(", "kernel_w", "-", "1", ")", "*", "dilation_w", "+", "1", "\n", "\n", "W_init", "=", "nn", ".", "initializers", ".", "glorot_normal", "(", "rhs_spec", ".", "index", "(", "'I'", ")", ",", "\n", "rhs_spec", ".", "index", "(", "'O'", ")", ")", "\n", "b_init", "=", "nn", ".", "initializers", ".", "zeros", "\n", "\n", "mask", "=", "jnp", ".", "ones", "(", "(", "kernel_h", ",", "kernel_w", ",", "1", ",", "1", ")", ")", "\n", "mask", "=", "mask", ".", "at", "[", "-", "1", ",", "kernel_w", "//", "2", "+", "(", "not", "exclusive", ")", ":", "]", ".", "set", "(", "0", ")", "\n", "\n", "def", "init_fun", "(", "rng", ",", "in_shape", ")", ":", "\n", "        ", "filter_shape_iter", "=", "iter", "(", "filter_shape", ")", "\n", "kernel_shape", "=", "[", "\n", "out_chan", "if", "c", "==", "'O'", "else", "in_shape", "[", "lhs_spec", ".", "index", "(", "'C'", ")", "]", "\n", "if", "c", "==", "'I'", "else", "next", "(", "filter_shape_iter", ")", "for", "c", "in", "rhs_spec", "\n", "]", "\n", "out_shape", "=", "[", "\n", "out_chan", "if", "c", "==", "'C'", "else", "in_shape", "[", "lhs_spec", ".", "index", "(", "c", ")", "]", "\n", "for", "c", "in", "out_spec", "\n", "]", "\n", "bias_shape", "=", "[", "out_chan", "if", "c", "==", "'C'", "else", "1", "for", "c", "in", "out_spec", "]", "\n", "\n", "rng_W", ",", "rng_b", "=", "jrand", ".", "split", "(", "rng", ")", "\n", "W", "=", "W_init", "(", "rng_W", ",", "kernel_shape", ")", "\n", "W", "*=", "mask", "\n", "b", "=", "b_init", "(", "rng_b", ",", "bias_shape", ")", "\n", "\n", "return", "out_shape", ",", "(", "W", ",", "b", ")", "\n", "\n", "", "def", "init_cache_fun", "(", "params", ",", "inputs", ",", "index", ",", "**", "kwargs", ")", ":", "\n", "        ", "out", "=", "apply_fun", "(", "params", ",", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "index_h", ",", "_", "=", "index", "\n", "\n", "cache_shape", "=", "[", "\n", "recep_h", "if", "c", "==", "'H'", "else", "inputs", ".", "shape", "[", "lhs_spec", ".", "index", "(", "c", ")", "]", "\n", "for", "c", "in", "lhs_spec", "\n", "]", "\n", "\n", "# Zero padding", "\n", "inputs", "=", "jnp", ".", "pad", "(", "inputs", ",", "(", "\n", "(", "0", ",", "0", ")", ",", "\n", "(", "recep_h", ",", "0", ")", ",", "\n", "(", "0", ",", "0", ")", ",", "\n", "(", "0", ",", "0", ")", ",", "\n", ")", ")", "\n", "\n", "cache", "=", "lax", ".", "dynamic_slice", "(", "inputs", ",", "(", "0", ",", "index_h", "+", "1", ",", "0", ",", "0", ")", ",", "cache_shape", ")", "\n", "return", "out", ",", "cache", "\n", "\n", "", "def", "apply_fun", "(", "params", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "W", ",", "b", "=", "params", "\n", "\n", "# Zero padding", "\n", "out", "=", "jnp", ".", "pad", "(", "inputs", ",", "(", "\n", "(", "0", ",", "0", ")", ",", "\n", "(", "(", "kernel_h", "-", "1", ")", "*", "dilation_h", ",", "0", ")", ",", "\n", "(", "kernel_w", "//", "2", "*", "dilation_w", ",", "(", "kernel_w", "-", "1", ")", "//", "2", "*", "dilation_w", ")", ",", "\n", "(", "0", ",", "0", ")", ",", "\n", ")", ")", "\n", "\n", "out", "=", "lax", ".", "conv_general_dilated", "(", "\n", "out", ",", "\n", "mask", "*", "W", ",", "\n", "window_strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "lhs_dilation", "=", "(", "1", ",", "1", ")", ",", "\n", "rhs_dilation", "=", "dilation", ",", "\n", "dimension_numbers", "=", "dimension_numbers", ",", "\n", ")", "\n", "out", "+=", "b", "\n", "return", "out", "\n", "\n", "", "def", "apply_fast_fun", "(", "params", ",", "inputs", ",", "cache", ",", "index", ",", "**", "kwargs", ")", ":", "\n", "        ", "W", ",", "b", "=", "params", "\n", "\n", "batch", "=", "inputs", ".", "shape", "[", "lhs_spec", ".", "index", "(", "'N'", ")", "]", "\n", "L", "=", "cache", ".", "shape", "[", "lhs_spec", ".", "index", "(", "'W'", ")", "]", "\n", "in_chan", "=", "inputs", ".", "shape", "[", "lhs_spec", ".", "index", "(", "'C'", ")", "]", "\n", "\n", "index_h", ",", "index_w", "=", "index", "\n", "if", "exclusive", ":", "\n", "            ", "index_h_in", ",", "index_w_in", "=", "prev_index_2d", "(", "index_h", ",", "index_w", ",", "L", ")", "\n", "", "else", ":", "\n", "            ", "index_h_in", ",", "index_w_in", "=", "index_h", ",", "index_w", "\n", "\n", "# First, update the cache", "\n", "\n", "", "def", "_add", "(", "cache", ")", ":", "\n", "# return cache.at[:, -1, index_w_in, :].set(inputs)", "\n", "            ", "return", "lax", ".", "dynamic_update_slice", "(", "cache", ",", "inputs", ",", "\n", "(", "0", ",", "-", "1", ",", "index_w_in", ",", "0", ")", ")", "\n", "\n", "", "def", "_shift", "(", "cache", ")", ":", "\n", "            ", "return", "jnp", ".", "concatenate", "(", "\n", "[", "\n", "cache", "[", ":", ",", "1", ":", ",", ":", ",", ":", "]", ",", "\n", "jnp", ".", "zeros", "(", "(", "batch", ",", "1", ",", "L", ",", "in_chan", ")", ",", "dtype", "=", "cache", ".", "dtype", ")", "\n", "]", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", "\n", "", "def", "_new_row", "(", "cache", ")", ":", "\n", "            ", "return", "lax", ".", "cond", "(", "\n", "index_w_in", "==", "0", ",", "\n", "lambda", "x", ":", "_add", "(", "_shift", "(", "x", ")", ")", ",", "\n", "lambda", "x", ":", "_shift", "(", "_add", "(", "x", ")", ")", ",", "\n", "cache", ",", "\n", ")", "\n", "\n", "", "def", "_update", "(", "cache", ")", ":", "\n", "            ", "return", "lax", ".", "cond", "(", "index_w", "==", "0", ",", "_new_row", ",", "_add", ",", "cache", ")", "\n", "\n", "", "cache", "=", "lax", ".", "cond", "(", "index_h_in", ">=", "0", ",", "_update", ",", "lambda", "x", ":", "x", ",", "cache", ")", "\n", "\n", "# Then, use the cache to compute the outputs (the inputs are not used)", "\n", "\n", "# Zero padding", "\n", "cache_slice", "=", "jnp", ".", "pad", "(", "cache", ",", "(", "\n", "(", "0", ",", "0", ")", ",", "\n", "(", "0", ",", "0", ")", ",", "\n", "(", "kernel_w", "//", "2", "*", "dilation_w", ",", "(", "kernel_w", "-", "1", ")", "//", "2", "*", "dilation_w", ")", ",", "\n", "(", "0", ",", "0", ")", ",", "\n", ")", ")", "\n", "\n", "# cache = cache[:, :, index_w : index_w + recep_w, :]", "\n", "cache_slice", "=", "lax", ".", "dynamic_slice", "(", "cache_slice", ",", "(", "0", ",", "0", ",", "index_w", ",", "0", ")", ",", "\n", "(", "batch", ",", "recep_h", ",", "recep_w", ",", "in_chan", ")", ")", "\n", "\n", "out", "=", "lax", ".", "conv_general_dilated", "(", "\n", "cache_slice", ",", "\n", "mask", "*", "W", ",", "\n", "window_strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "lhs_dilation", "=", "(", "1", ",", "1", ")", ",", "\n", "rhs_dilation", "=", "dilation", ",", "\n", "dimension_numbers", "=", "dimension_numbers", ",", "\n", ")", "\n", "assert", "out", ".", "shape", "==", "(", "batch", ",", "1", ",", "1", ",", "out_chan", ")", "\n", "out", "+=", "b", "\n", "return", "out", ",", "cache", "\n", "\n", "", "return", "init_fun", ",", "apply_fun", ",", "init_cache_fun", ",", "apply_fast_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.net.serial": [[171, 229], ["zip", "net.serial.add_default_fast_funs"], "function", ["None"], ["", "def", "serial", "(", "*", "layers", ")", ":", "\n", "    ", "def", "add_default_fast_funs", "(", "layer", ")", ":", "\n", "        ", "if", "len", "(", "layer", ")", "==", "4", ":", "\n", "            ", "return", "layer", "\n", "\n", "", "init_fun", ",", "apply_fun", "=", "layer", "\n", "return", "(", "\n", "init_fun", ",", "\n", "apply_fun", ",", "\n", "lambda", "params", ",", "inputs", ",", "index", ",", "**", "kwargs", ":", "(", "apply_fun", "(", "params", ",", "inputs", ")", ",", "\n", "(", ")", ")", ",", "\n", "lambda", "params", ",", "inputs", ",", "cache", ",", "index", ",", "**", "kwargs", ":", "\n", "(", "apply_fun", "(", "params", ",", "inputs", ")", ",", "(", ")", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "add_default_fast_funs", "(", "layer", ")", "for", "layer", "in", "layers", "]", "\n", "init_funs", ",", "apply_funs", ",", "init_cache_funs", ",", "apply_fast_funs", "=", "zip", "(", "*", "layers", ")", "\n", "\n", "# kwargs is modified inplace", "\n", "def", "pop_rngs", "(", "kwargs", ")", ":", "\n", "        ", "rng", "=", "kwargs", ".", "pop", "(", "'rng'", ",", "None", ")", "\n", "if", "rng", "is", "None", ":", "\n", "            ", "return", "(", "None", ",", ")", "*", "len", "(", "layers", ")", "\n", "", "else", ":", "\n", "            ", "return", "jrand", ".", "split", "(", "rng", ",", "len", "(", "layers", ")", ")", "\n", "\n", "", "", "def", "init_fun", "(", "rng", ",", "in_shape", ")", ":", "\n", "        ", "params", "=", "[", "]", "\n", "for", "fun", "in", "init_funs", ":", "\n", "            ", "rng", ",", "layer_rng", "=", "jrand", ".", "split", "(", "rng", ")", "\n", "in_shape", ",", "param", "=", "fun", "(", "layer_rng", ",", "in_shape", ")", "\n", "params", ".", "append", "(", "param", ")", "\n", "", "return", "in_shape", ",", "params", "\n", "\n", "", "def", "init_cache_fun", "(", "params", ",", "inputs", ",", "index", ",", "**", "kwargs", ")", ":", "\n", "        ", "rngs", "=", "pop_rngs", "(", "kwargs", ")", "\n", "caches", "=", "[", "]", "\n", "for", "fun", ",", "param", ",", "rng", "in", "zip", "(", "init_cache_funs", ",", "params", ",", "rngs", ")", ":", "\n", "            ", "inputs", ",", "cache", "=", "fun", "(", "param", ",", "inputs", ",", "index", ",", "rng", "=", "rng", ",", "**", "kwargs", ")", "\n", "caches", ".", "append", "(", "cache", ")", "\n", "", "return", "inputs", ",", "caches", "\n", "\n", "", "def", "apply_fun", "(", "params", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "rngs", "=", "pop_rngs", "(", "kwargs", ")", "\n", "for", "fun", ",", "param", ",", "rng", "in", "zip", "(", "apply_funs", ",", "params", ",", "rngs", ")", ":", "\n", "            ", "inputs", "=", "fun", "(", "param", ",", "inputs", ",", "rng", "=", "rng", ",", "**", "kwargs", ")", "\n", "", "return", "inputs", "\n", "\n", "", "def", "apply_fast_fun", "(", "params", ",", "inputs", ",", "caches", ",", "index", ",", "**", "kwargs", ")", ":", "\n", "        ", "rngs", "=", "pop_rngs", "(", "kwargs", ")", "\n", "out_caches", "=", "[", "]", "\n", "for", "fun", ",", "param", ",", "cache", ",", "rng", "in", "zip", "(", "apply_fast_funs", ",", "params", ",", "caches", ",", "\n", "rngs", ")", ":", "\n", "            ", "inputs", ",", "cache", "=", "fun", "(", "param", ",", "inputs", ",", "cache", ",", "index", ",", "rng", "=", "rng", ",", "**", "kwargs", ")", "\n", "out_caches", ".", "append", "(", "cache", ")", "\n", "", "return", "inputs", ",", "out_caches", "\n", "\n", "", "return", "init_fun", ",", "apply_fun", ",", "init_cache_fun", ",", "apply_fast_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.net.get_net": [[234, 254], ["range", "layers.append", "net.serial", "layers.append", "layers.append", "net.MaskedConv2d"], "function", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.net.serial", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.net.MaskedConv2d"], ["", "def", "get_net", "(", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "dilation", "=", "1", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "net_depth", ")", ":", "\n", "        ", "if", "i", ">", "0", ":", "\n", "            ", "layers", ".", "append", "(", "stax", ".", "Selu", ")", "\n", "", "layers", ".", "append", "(", "\n", "MaskedConv2d", "(", "\n", "1", "if", "i", "==", "args", ".", "net_depth", "-", "1", "else", "args", ".", "net_width", ",", "\n", "(", "(", "args", ".", "kernel_size", "+", "1", ")", "//", "2", ",", "args", ".", "kernel_size", ")", ",", "\n", "(", "dilation", ",", "dilation", ")", ",", "\n", "exclusive", "=", "(", "i", "==", "0", ")", ",", "\n", ")", ")", "\n", "dilation", "+=", "args", ".", "dilation_step", "\n", "\n", "", "layers", ".", "append", "(", "stax", ".", "Sigmoid", ")", "\n", "\n", "net_init", ",", "net_apply", ",", "net_init_cache", ",", "net_apply_fast", "=", "serial", "(", "*", "layers", ")", "\n", "return", "net_init", ",", "net_apply", ",", "net_init_cache", ",", "net_apply_fast", "\n", "", ""]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.sample_ncu.main": [[24, 115], ["time.time", "utils.get_last_ckpt_step", "utils.my_log", "utils.print_args", "net.get_net", "utils.load_ckpt", "net_init_cache", "train.get_sample_fun", "sample_ncus.get_sample_k_fun", "train.get_log_q_fun", "jax.random.split", "train.get_sample_fun.", "train.get_log_q_fun.", "train.energy_fun", "args.args.log_filename.replace", "utils.ensure_dir", "jax.numpy.zeros", "jax.random.split", "sample_ncus.get_k", "sample_ncus.get_sample_k_fun.", "train.get_log_q_fun.", "train.energy_fun", "jax.numpy.log", "jax.numpy.where", "jax.numpy.where", "jax.numpy.where", "jnp.where.mean", "accept.sum", "sample_raw.welford_update", "jax.random.PRNGKey", "chunked_data.ChunkedDataWriter", "utils.my_log", "jax.random.uniform", "jax.numpy.expand_dims", "energy_per_spin.mean", "sample_ncu.main.update"], "function", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.get_last_ckpt_step", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.my_log", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.print_args", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.net.get_net", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.load_ckpt", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.get_sample_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.sample_ncus.get_sample_k_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.get_log_q_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.energy_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.ensure_dir", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.sample_ncus.get_k", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.energy_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.sample_raw.welford_update", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.my_log"], ["def", "main", "(", ")", ":", "\n", "    ", "start_time", "=", "time", "(", ")", "\n", "last_step", "=", "get_last_ckpt_step", "(", ")", "\n", "assert", "last_step", ">=", "0", "\n", "my_log", "(", "f'Checkpoint found: {last_step}\\n'", ")", "\n", "print_args", "(", ")", "\n", "\n", "net_init", ",", "net_apply", ",", "net_init_cache", ",", "net_apply_fast", "=", "get_net", "(", ")", "\n", "\n", "params", "=", "load_ckpt", "(", "last_step", ")", "\n", "in_shape", "=", "(", "args", ".", "batch_size", ",", "args", ".", "L", ",", "args", ".", "L", ",", "1", ")", "\n", "_", ",", "cache_init", "=", "net_init_cache", "(", "params", ",", "jnp", ".", "zeros", "(", "in_shape", ")", ",", "(", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "# sample_raw_fun = get_sample_fun(net_apply, None)", "\n", "sample_raw_fun", "=", "get_sample_fun", "(", "net_apply_fast", ",", "cache_init", ")", "\n", "# sample_k_fun = get_sample_k_fun(net_apply, None)", "\n", "sample_k_fun", "=", "get_sample_k_fun", "(", "net_apply_fast", ",", "net_init_cache", ")", "\n", "log_q_fun", "=", "get_log_q_fun", "(", "net_apply", ")", "\n", "\n", "@", "jit", "\n", "def", "update", "(", "spins_old", ",", "log_q_old", ",", "energy_old", ",", "step", ",", "accept_count", ",", "\n", "energy_mean", ",", "energy_var_sum", ",", "rng", ")", ":", "\n", "        ", "rng", ",", "rng_k", ",", "rng_sample", ",", "rng_accept", "=", "jrand", ".", "split", "(", "rng", ",", "4", ")", "\n", "k", "=", "get_k", "(", "rng_k", ")", "\n", "spins", "=", "sample_k_fun", "(", "k", ",", "params", ",", "spins_old", ",", "rng_sample", ")", "\n", "log_q", "=", "log_q_fun", "(", "params", ",", "spins", ")", "\n", "energy", "=", "energy_fun", "(", "spins", ")", "\n", "\n", "log_uniform", "=", "jnp", ".", "log", "(", "jrand", ".", "uniform", "(", "rng_accept", ",", "(", "args", ".", "batch_size", ",", ")", ")", ")", "\n", "accept", "=", "log_uniform", "<", "(", "log_q_old", "-", "log_q", "+", "args", ".", "beta", "*", "\n", "(", "energy_old", "-", "energy", ")", ")", "\n", "\n", "spins", "=", "jnp", ".", "where", "(", "jnp", ".", "expand_dims", "(", "accept", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", ",", "spins", ",", "\n", "spins_old", ")", "\n", "log_q", "=", "jnp", ".", "where", "(", "accept", ",", "log_q", ",", "log_q_old", ")", "\n", "energy", "=", "jnp", ".", "where", "(", "accept", ",", "energy", ",", "energy_old", ")", "\n", "mag", "=", "spins", ".", "mean", "(", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "\n", "step", "+=", "1", "\n", "accept_count", "+=", "accept", ".", "sum", "(", ")", "\n", "energy_per_spin", "=", "energy", "/", "args", ".", "L", "**", "2", "\n", "energy_mean", ",", "energy_var_sum", "=", "welford_update", "(", "energy_per_spin", ".", "mean", "(", ")", ",", "\n", "step", ",", "energy_mean", ",", "\n", "energy_var_sum", ")", "\n", "\n", "return", "(", "spins", ",", "log_q", ",", "energy", ",", "mag", ",", "accept", ",", "k", ",", "step", ",", "accept_count", ",", "\n", "energy_mean", ",", "energy_var_sum", ",", "rng", ")", "\n", "\n", "", "rng", ",", "rng_init", "=", "jrand", ".", "split", "(", "jrand", ".", "PRNGKey", "(", "args", ".", "seed", ")", ")", "\n", "# Sample initial configurations from the network", "\n", "spins", "=", "sample_raw_fun", "(", "args", ".", "batch_size", ",", "params", ",", "rng_init", ")", "\n", "log_q", "=", "log_q_fun", "(", "params", ",", "spins", ")", "\n", "energy", "=", "energy_fun", "(", "spins", ")", "\n", "\n", "step", "=", "0", "\n", "accept_count", "=", "0", "\n", "energy_mean", "=", "0", "\n", "energy_var_sum", "=", "0", "\n", "\n", "data_filename", "=", "args", ".", "log_filename", ".", "replace", "(", "'.log'", ",", "'.hdf5'", ")", "\n", "writer_proto", "=", "[", "\n", "# Uncomment to save all the sampled spins", "\n", "# ('spins', bool, (args.batch_size, args.L, args.L)),", "\n", "(", "'log_q'", ",", "np", ".", "float32", ",", "(", "args", ".", "batch_size", ",", ")", ")", ",", "\n", "(", "'energy'", ",", "np", ".", "int32", ",", "(", "args", ".", "batch_size", ",", ")", ")", ",", "\n", "(", "'mag'", ",", "np", ".", "float32", ",", "(", "args", ".", "batch_size", ",", ")", ")", ",", "\n", "(", "'accept'", ",", "bool", ",", "(", "args", ".", "batch_size", ",", ")", ")", ",", "\n", "(", "'k'", ",", "np", ".", "int32", ",", "None", ")", ",", "\n", "]", "\n", "ensure_dir", "(", "data_filename", ")", "\n", "with", "ChunkedDataWriter", "(", "data_filename", ",", "writer_proto", ",", "\n", "args", ".", "save_step", ")", "as", "writer", ":", "\n", "        ", "my_log", "(", "'Sampling...'", ")", "\n", "while", "step", "<", "args", ".", "max_step", ":", "\n", "            ", "(", "spins", ",", "log_q", ",", "energy", ",", "mag", ",", "accept", ",", "k", ",", "step", ",", "accept_count", ",", "\n", "energy_mean", ",", "energy_var_sum", ",", "\n", "rng", ")", "=", "update", "(", "spins", ",", "log_q", ",", "energy", ",", "step", ",", "accept_count", ",", "\n", "energy_mean", ",", "energy_var_sum", ",", "rng", ")", "\n", "# Uncomment to save all the sampled spins", "\n", "# writer.write(spins[:, :, :, 0] > 0, log_q, energy, mag, accept, k)", "\n", "writer", ".", "write", "(", "log_q", ",", "energy", ",", "mag", ",", "accept", ",", "k", ")", "\n", "\n", "if", "args", ".", "print_step", "and", "step", "%", "args", ".", "print_step", "==", "0", ":", "\n", "                ", "accept_rate", "=", "accept_count", "/", "(", "step", "*", "args", ".", "batch_size", ")", "\n", "energy_std", "=", "jnp", ".", "sqrt", "(", "energy_var_sum", "/", "step", ")", "\n", "my_log", "(", "', '", ".", "join", "(", "[", "\n", "f'step = {step}'", ",", "\n", "f'P = {accept_rate:.8g}'", ",", "\n", "f'E = {energy_mean:.8g}'", ",", "\n", "f'E_std = {energy_std:.8g}'", ",", "\n", "f'time = {time() - start_time:.3f}'", ",", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.sample_raw.welford_update": [[23, 28], ["None"], "function", ["None"], ["def", "welford_update", "(", "curr", ",", "step", ",", "mean", ",", "var_sum", ")", ":", "\n", "    ", "diff", "=", "curr", "-", "mean", "\n", "mean_new", "=", "mean", "+", "diff", "/", "step", "\n", "var_sum_new", "=", "var_sum", "+", "diff", "*", "(", "curr", "-", "mean_new", ")", "\n", "return", "mean_new", ",", "var_sum_new", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.sample_raw.main": [[30, 103], ["time.time", "utils.get_last_ckpt_step", "utils.my_log", "utils.print_args", "net.get_net", "utils.load_ckpt", "net_init_cache", "train.get_sample_fun", "train.get_log_q_fun", "jax.random.split", "sample_raw.main.sample_energy_fun"], "function", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.get_last_ckpt_step", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.my_log", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.print_args", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.net.get_net", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.load_ckpt", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.get_sample_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.get_log_q_fun"], ["", "def", "main", "(", ")", ":", "\n", "    ", "start_time", "=", "time", "(", ")", "\n", "last_step", "=", "get_last_ckpt_step", "(", ")", "\n", "assert", "last_step", ">=", "0", "\n", "my_log", "(", "f'Checkpoint found: {last_step}\\n'", ")", "\n", "print_args", "(", ")", "\n", "\n", "net_init", ",", "net_apply", ",", "net_init_cache", ",", "net_apply_fast", "=", "get_net", "(", ")", "\n", "\n", "params", "=", "load_ckpt", "(", "last_step", ")", "\n", "in_shape", "=", "(", "args", ".", "batch_size", ",", "args", ".", "L", ",", "args", ".", "L", ",", "1", ")", "\n", "_", ",", "cache_init", "=", "net_init_cache", "(", "params", ",", "jnp", ".", "zeros", "(", "in_shape", ")", ",", "(", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "# sample_fun = get_sample_fun(net_apply, None)", "\n", "sample_fun", "=", "get_sample_fun", "(", "net_apply_fast", ",", "cache_init", ")", "\n", "log_q_fun", "=", "get_log_q_fun", "(", "net_apply", ")", "\n", "\n", "def", "sample_energy_fun", "(", "rng", ")", ":", "\n", "        ", "spins", "=", "sample_fun", "(", "args", ".", "batch_size", ",", "params", ",", "rng", ")", "\n", "log_q", "=", "log_q_fun", "(", "params", ",", "spins", ")", "\n", "energy", "=", "energy_fun", "(", "spins", ")", "\n", "return", "spins", ",", "log_q", ",", "energy", "\n", "\n", "", "@", "jit", "\n", "def", "update", "(", "spins_old", ",", "log_q_old", ",", "energy_old", ",", "step", ",", "energy_mean", ",", "\n", "energy_var_sum", ",", "rng", ")", ":", "\n", "        ", "rng", ",", "rng_sample", "=", "jrand", ".", "split", "(", "rng", ")", "\n", "spins", ",", "log_q", ",", "energy", "=", "sample_energy_fun", "(", "rng_sample", ")", "\n", "mag", "=", "spins", ".", "mean", "(", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "\n", "step", "+=", "1", "\n", "energy_per_spin", "=", "energy", "/", "args", ".", "L", "**", "2", "\n", "energy_mean", ",", "energy_var_sum", "=", "welford_update", "(", "energy_per_spin", ".", "mean", "(", ")", ",", "\n", "step", ",", "energy_mean", ",", "\n", "energy_var_sum", ")", "\n", "\n", "return", "(", "spins", ",", "log_q", ",", "energy", ",", "mag", ",", "step", ",", "energy_mean", ",", "energy_var_sum", ",", "\n", "rng", ")", "\n", "\n", "", "rng", ",", "rng_init", "=", "jrand", ".", "split", "(", "jrand", ".", "PRNGKey", "(", "args", ".", "seed", ")", ")", "\n", "spins", ",", "log_q", ",", "energy", "=", "sample_energy_fun", "(", "rng_init", ")", "\n", "\n", "step", "=", "0", "\n", "energy_mean", "=", "0", "\n", "energy_var_sum", "=", "0", "\n", "\n", "data_filename", "=", "args", ".", "log_filename", ".", "replace", "(", "'.log'", ",", "'.hdf5'", ")", "\n", "writer_proto", "=", "[", "\n", "# Uncomment to save all the sampled spins", "\n", "# ('spins', bool, (args.L, args.L)),", "\n", "(", "'log_q'", ",", "np", ".", "float32", ",", "None", ")", ",", "\n", "(", "'energy'", ",", "np", ".", "int32", ",", "None", ")", ",", "\n", "(", "'mag'", ",", "np", ".", "float32", ",", "None", ")", ",", "\n", "]", "\n", "ensure_dir", "(", "data_filename", ")", "\n", "with", "ChunkedDataWriter", "(", "data_filename", ",", "writer_proto", ",", "\n", "args", ".", "save_step", "*", "args", ".", "batch_size", ")", "as", "writer", ":", "\n", "        ", "my_log", "(", "'Sampling...'", ")", "\n", "while", "step", "<", "args", ".", "max_step", ":", "\n", "            ", "(", "spins", ",", "log_q", ",", "energy", ",", "mag", ",", "step", ",", "energy_mean", ",", "energy_var_sum", ",", "\n", "rng", ")", "=", "update", "(", "spins", ",", "log_q", ",", "energy", ",", "step", ",", "energy_mean", ",", "\n", "energy_var_sum", ",", "rng", ")", "\n", "# Uncomment to save all the sampled spins", "\n", "# writer.write_batch(spins[:, :, :, 0] > 0, log_q, energy, mag)", "\n", "writer", ".", "write_batch", "(", "log_q", ",", "energy", ",", "mag", ")", "\n", "\n", "if", "args", ".", "print_step", "and", "step", "%", "args", ".", "print_step", "==", "0", ":", "\n", "                ", "energy_std", "=", "jnp", ".", "sqrt", "(", "energy_var_sum", "/", "step", ")", "\n", "my_log", "(", "', '", ".", "join", "(", "[", "\n", "f'step = {step}'", ",", "\n", "f'E = {energy_mean:.8g}'", ",", "\n", "f'E_std = {energy_std:.8g}'", ",", "\n", "f'time = {time() - start_time:.3f}'", ",", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.energy_fun": [[21, 39], ["jax.numpy.roll", "jax.numpy.roll", "jax.numpy.roll", "jax.numpy.roll", "jax.numpy.roll", "jax.numpy.roll", "jax.numpy.roll", "ValueError"], "function", ["None"], ["def", "energy_fun", "(", "spins", ")", ":", "\n", "    ", "if", "args", ".", "lattice", "==", "'ising'", ":", "\n", "# 2D classical Ising model, square lattice, periodic boundary", "\n", "        ", "env", "=", "jnp", ".", "roll", "(", "spins", ",", "1", ",", "axis", "=", "1", ")", "+", "jnp", ".", "roll", "(", "spins", ",", "1", ",", "axis", "=", "2", ")", "\n", "energy", "=", "(", "spins", "*", "env", ")", ".", "sum", "(", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "return", "energy", "\n", "", "elif", "args", ".", "lattice", "==", "'fpm'", ":", "\n", "# Frustrated plaquette model", "\n", "        ", "sx", "=", "jnp", ".", "roll", "(", "spins", ",", "1", ",", "axis", "=", "1", ")", "\n", "sy", "=", "jnp", ".", "roll", "(", "spins", ",", "1", ",", "axis", "=", "2", ")", "\n", "sxy", "=", "jnp", ".", "roll", "(", "spins", ",", "1", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "sx2", "=", "jnp", ".", "roll", "(", "spins", ",", "2", ",", "axis", "=", "1", ")", "\n", "sy2", "=", "jnp", ".", "roll", "(", "spins", ",", "2", ",", "axis", "=", "2", ")", "\n", "env", "=", "-", "sx", "-", "sy", "-", "sx2", "-", "sy2", "+", "2", "*", "sx", "*", "sy", "*", "sxy", "\n", "energy", "=", "(", "spins", "*", "env", ")", ".", "sum", "(", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "return", "energy", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unknown lattice: {args.lattice}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.get_sample_fun": [[42, 77], ["jax.numpy.asarray", "functools.partial", "jax.random.split", "jax.numpy.zeros", "jax.lax.scan", "range", "range", "spins.at[].set.at[].set", "net.prev_index_2d", "jax.numpy.expand_dims", "net_apply", "net_apply.squeeze", "net_apply", "jax.random.bernoulli().astype", "jax.random.bernoulli"], "function", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.net.prev_index_2d"], ["", "", "def", "get_sample_fun", "(", "net_apply", ",", "cache_init", ")", ":", "\n", "    ", "use_fast", "=", "(", "cache_init", "is", "not", "None", ")", "\n", "\n", "indices", "=", "[", "(", "i", ",", "j", ")", "for", "i", "in", "range", "(", "args", ".", "L", ")", "for", "j", "in", "range", "(", "args", ".", "L", ")", "]", "\n", "indices", "=", "jnp", ".", "asarray", "(", "indices", ")", "\n", "\n", "@", "partial", "(", "jit", ",", "static_argnums", "=", "0", ")", "\n", "def", "sample_fun", "(", "batch_size", ",", "params", ",", "rng_init", ")", ":", "\n", "        ", "def", "scan_fun", "(", "carry", ",", "_args", ")", ":", "\n", "            ", "spins", ",", "cache", "=", "carry", "\n", "(", "i", ",", "j", ")", ",", "rng", "=", "_args", "\n", "\n", "if", "use_fast", ":", "\n", "                ", "i_in", ",", "j_in", "=", "prev_index_2d", "(", "i", ",", "j", ",", "args", ".", "L", ")", "\n", "spins_slice", "=", "spins", "[", ":", ",", "i_in", ",", "j_in", ",", ":", "]", "\n", "spins_slice", "=", "jnp", ".", "expand_dims", "(", "spins_slice", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "s_hat", ",", "cache", "=", "net_apply", "(", "params", ",", "spins_slice", ",", "cache", ",", "(", "i", ",", "j", ")", ")", "\n", "s_hat", "=", "s_hat", ".", "squeeze", "(", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "s_hat", "=", "net_apply", "(", "params", ",", "spins", ")", "\n", "s_hat", "=", "s_hat", "[", ":", ",", "i", ",", "j", ",", ":", "]", "\n", "\n", "# s_hat are parameters of Bernoulli distributions", "\n", "", "spins_new", "=", "jrand", ".", "bernoulli", "(", "rng", ",", "s_hat", ")", ".", "astype", "(", "jnp", ".", "float32", ")", "*", "2", "-", "1", "\n", "spins", "=", "spins", ".", "at", "[", ":", ",", "i", ",", "j", ",", ":", "]", ".", "set", "(", "spins_new", ")", "\n", "\n", "return", "(", "spins", ",", "cache", ")", ",", "None", "\n", "\n", "", "rngs", "=", "jrand", ".", "split", "(", "rng_init", ",", "args", ".", "L", "**", "2", ")", "\n", "spins_init", "=", "jnp", ".", "zeros", "(", "(", "batch_size", ",", "args", ".", "L", ",", "args", ".", "L", ",", "1", ")", ")", "\n", "(", "spins", ",", "_", ")", ",", "_", "=", "lax", ".", "scan", "(", "scan_fun", ",", "(", "spins_init", ",", "cache_init", ")", ",", "\n", "(", "indices", ",", "rngs", ")", ")", "\n", "return", "spins", "\n", "\n", "", "return", "sample_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.get_log_q_fun": [[79, 88], ["net_apply", "jax.numpy.log", "log_q.sum.sum"], "function", ["None"], ["", "def", "get_log_q_fun", "(", "net_apply", ")", ":", "\n", "    ", "def", "log_q_fun", "(", "params", ",", "spins", ")", ":", "\n", "        ", "mask", "=", "(", "spins", "+", "1", ")", "/", "2", "\n", "s_hat", "=", "net_apply", "(", "params", ",", "spins", ")", "\n", "log_q", "=", "jnp", ".", "log", "(", "mask", "*", "s_hat", "+", "(", "1", "-", "mask", ")", "*", "(", "1", "-", "s_hat", ")", "+", "args", ".", "eps", ")", "\n", "log_q", "=", "log_q", ".", "sum", "(", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "return", "log_q", "\n", "\n", "", "return", "log_q_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.main": [[90, 166], ["time.time", "utils.init_out_dir", "utils.get_last_ckpt_step", "utils.print_args", "net.get_net", "jax.random.split", "net_init", "net_init_cache", "train.get_sample_fun", "train.get_log_q_fun", "jax.example_libraries.optimizers.adam", "opt_init", "utils.my_log", "range", "utils.my_log", "utils.clear_log", "jax.random.PRNGKey", "jax.numpy.zeros", "get_params", "jax.random.split", "get_sample_fun.", "functools.partial", "opt_update", "utils.load_ckpt", "train.main.update"], "function", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.init_out_dir", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.get_last_ckpt_step", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.print_args", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.net.get_net", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.get_sample_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.get_log_q_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.my_log", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.my_log", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.clear_log", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.load_ckpt"], ["", "def", "main", "(", ")", ":", "\n", "    ", "start_time", "=", "time", "(", ")", "\n", "init_out_dir", "(", ")", "\n", "last_step", "=", "get_last_ckpt_step", "(", ")", "\n", "if", "last_step", ">=", "0", ":", "\n", "        ", "my_log", "(", "f'\\nCheckpoint found: {last_step}\\n'", ")", "\n", "", "else", ":", "\n", "        ", "clear_log", "(", ")", "\n", "", "print_args", "(", ")", "\n", "\n", "net_init", ",", "net_apply", ",", "net_init_cache", ",", "net_apply_fast", "=", "get_net", "(", ")", "\n", "\n", "rng", ",", "rng_net", "=", "jrand", ".", "split", "(", "jrand", ".", "PRNGKey", "(", "args", ".", "seed", ")", ")", "\n", "in_shape", "=", "(", "args", ".", "batch_size", ",", "args", ".", "L", ",", "args", ".", "L", ",", "1", ")", "\n", "out_shape", ",", "params_init", "=", "net_init", "(", "rng_net", ",", "in_shape", ")", "\n", "\n", "_", ",", "cache_init", "=", "net_init_cache", "(", "params_init", ",", "jnp", ".", "zeros", "(", "in_shape", ")", ",", "(", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "# sample_fun = get_sample_fun(net_apply, None)", "\n", "sample_fun", "=", "get_sample_fun", "(", "net_apply_fast", ",", "cache_init", ")", "\n", "log_q_fun", "=", "get_log_q_fun", "(", "net_apply", ")", "\n", "\n", "need_beta_anneal", "=", "args", ".", "beta_anneal_step", ">", "0", "\n", "\n", "opt_init", ",", "opt_update", ",", "get_params", "=", "optimizers", ".", "adam", "(", "args", ".", "lr", ")", "\n", "\n", "@", "jit", "\n", "def", "update", "(", "step", ",", "opt_state", ",", "rng", ")", ":", "\n", "        ", "params", "=", "get_params", "(", "opt_state", ")", "\n", "rng", ",", "rng_sample", "=", "jrand", ".", "split", "(", "rng", ")", "\n", "spins", "=", "sample_fun", "(", "args", ".", "batch_size", ",", "params", ",", "rng_sample", ")", "\n", "log_q", "=", "log_q_fun", "(", "params", ",", "spins", ")", "/", "args", ".", "L", "**", "2", "\n", "energy", "=", "energy_fun", "(", "spins", ")", "/", "args", ".", "L", "**", "2", "\n", "\n", "def", "neg_log_Z_fun", "(", "params", ",", "spins", ")", ":", "\n", "            ", "log_q", "=", "log_q_fun", "(", "params", ",", "spins", ")", "/", "args", ".", "L", "**", "2", "\n", "energy", "=", "energy_fun", "(", "spins", ")", "/", "args", ".", "L", "**", "2", "\n", "beta", "=", "args", ".", "beta", "\n", "if", "need_beta_anneal", ":", "\n", "                ", "beta", "*=", "jnp", ".", "minimum", "(", "step", "/", "args", ".", "beta_anneal_step", ",", "1", ")", "\n", "", "neg_log_Z", "=", "log_q", "+", "beta", "*", "energy", "\n", "return", "neg_log_Z", "\n", "\n", "", "loss_fun", "=", "partial", "(", "expect", ",", "\n", "log_q_fun", ",", "\n", "neg_log_Z_fun", ",", "\n", "mean_grad_expected_is_zero", "=", "True", ")", "\n", "grads", "=", "grad", "(", "loss_fun", ")", "(", "params", ",", "spins", ",", "spins", ")", "\n", "opt_state", "=", "opt_update", "(", "step", ",", "grads", ",", "opt_state", ")", "\n", "\n", "return", "spins", ",", "log_q", ",", "energy", ",", "opt_state", ",", "rng", "\n", "\n", "", "if", "last_step", ">=", "0", ":", "\n", "        ", "params_init", "=", "load_ckpt", "(", "last_step", ")", "\n", "\n", "", "opt_state", "=", "opt_init", "(", "params_init", ")", "\n", "\n", "my_log", "(", "'Training...'", ")", "\n", "for", "step", "in", "range", "(", "last_step", "+", "1", ",", "args", ".", "max_step", "+", "1", ")", ":", "\n", "        ", "spins", ",", "log_q", ",", "energy", ",", "opt_state", ",", "rng", "=", "update", "(", "step", ",", "opt_state", ",", "rng", ")", "\n", "\n", "if", "args", ".", "print_step", "and", "step", "%", "args", ".", "print_step", "==", "0", ":", "\n", "# Use the final beta, not the annealed beta", "\n", "            ", "free_energy", "=", "log_q", "/", "args", ".", "beta", "+", "energy", "\n", "my_log", "(", "', '", ".", "join", "(", "[", "\n", "f'step = {step}'", ",", "\n", "f'F = {free_energy.mean():.8g}'", ",", "\n", "f'F_std = {free_energy.std():.8g}'", ",", "\n", "f'S = {-log_q.mean():.8g}'", ",", "\n", "f'E = {energy.mean():.8g}'", ",", "\n", "f'time = {time() - start_time:.3f}'", ",", "\n", "]", ")", ")", "\n", "\n", "", "if", "args", ".", "save_step", "and", "step", "%", "args", ".", "save_step", "==", "0", ":", "\n", "            ", "params", "=", "get_params", "(", "opt_state", ")", "\n", "save_ckpt", "(", "params", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.sample_ncus.get_k": [[23, 38], ["jax.numpy.arange", "int", "jax.random.categorical", "jax.numpy.log", "ValueError", "jax.numpy.log"], "function", ["None"], ["def", "get_k", "(", "rng", ")", ":", "\n", "    ", "if", "args", ".", "k_type", "==", "'const'", ":", "\n", "        ", "return", "int", "(", "args", ".", "k_param", ")", "\n", "\n", "", "idx", "=", "jnp", ".", "arange", "(", "1", ",", "args", ".", "L", "**", "2", "+", "1", ")", "\n", "\n", "if", "args", ".", "k_type", "==", "'exp'", ":", "\n", "        ", "logits", "=", "-", "idx", "*", "jnp", ".", "log", "(", "args", ".", "k_param", ")", "\n", "", "elif", "args", ".", "k_type", "==", "'power'", ":", "\n", "        ", "logits", "=", "-", "args", ".", "k_param", "*", "jnp", ".", "log", "(", "idx", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown k_type: {}'", ".", "format", "(", "args", ".", "k_type", ")", ")", "\n", "\n", "", "k", "=", "jrand", ".", "categorical", "(", "rng", ",", "logits", ")", "+", "1", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.sample_ncus.get_sample_k_fun": [[40, 90], ["jax.numpy.asarray", "jax.random.split", "jax.lax.scan", "spins.at[].set.at[].set", "jax.lax.cond", "net_init_cache", "range", "range", "net.prev_index_2d", "jax.numpy.expand_dims", "net_apply", "net_apply.squeeze", "net_apply", "jax.random.bernoulli().astype", "_scan_fun"], "function", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.net.prev_index_2d"], ["", "def", "get_sample_k_fun", "(", "net_apply", ",", "net_init_cache", ")", ":", "\n", "    ", "use_fast", "=", "(", "net_init_cache", "is", "not", "None", ")", "\n", "\n", "indices", "=", "[", "(", "-", "1", ",", "-", "1", ")", "]", "+", "[", "(", "i", ",", "j", ")", "for", "i", "in", "range", "(", "args", ".", "L", ")", "\n", "for", "j", "in", "range", "(", "args", ".", "L", ")", "]", "\n", "indices", "=", "jnp", ".", "asarray", "(", "indices", ")", "\n", "\n", "def", "sample_k_fun", "(", "k", ",", "params", ",", "spins_init", ",", "rng_init", ")", ":", "\n", "        ", "def", "_scan_fun", "(", "carry", ",", "_args", ")", ":", "\n", "            ", "spins", ",", "cache", "=", "carry", "\n", "(", "i", ",", "j", ")", ",", "rng", "=", "_args", "\n", "\n", "if", "use_fast", ":", "\n", "                ", "i_in", ",", "j_in", "=", "prev_index_2d", "(", "i", ",", "j", ",", "args", ".", "L", ")", "\n", "spins_slice", "=", "spins", "[", ":", ",", "i_in", ",", "j_in", ",", ":", "]", "\n", "spins_slice", "=", "jnp", ".", "expand_dims", "(", "spins_slice", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "s_hat", ",", "cache", "=", "net_apply", "(", "params", ",", "spins_slice", ",", "cache", ",", "(", "i", ",", "j", ")", ")", "\n", "s_hat", "=", "s_hat", ".", "squeeze", "(", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "                ", "s_hat", "=", "net_apply", "(", "params", ",", "spins", ")", "\n", "s_hat", "=", "s_hat", "[", ":", ",", "i", ",", "j", ",", ":", "]", "\n", "\n", "# s_hat are parameters of Bernoulli distributions", "\n", "", "spins_new", "=", "jrand", ".", "bernoulli", "(", "rng", ",", "s_hat", ")", ".", "astype", "(", "jnp", ".", "float32", ")", "*", "2", "-", "1", "\n", "spins", "=", "spins", ".", "at", "[", ":", ",", "i", ",", "j", ",", ":", "]", ".", "set", "(", "spins_new", ")", "\n", "\n", "return", "(", "spins", ",", "cache", ")", ",", "None", "\n", "\n", "", "def", "scan_fun", "(", "carry", ",", "_args", ")", ":", "\n", "            ", "(", "i", ",", "j", ")", ",", "rng", "=", "_args", "\n", "return", "lax", ".", "cond", "(", "\n", "i", "*", "args", ".", "L", "+", "j", ">=", "args", ".", "L", "**", "2", "-", "k", ",", "\n", "lambda", "_", ":", "_scan_fun", "(", "carry", ",", "_args", ")", ",", "\n", "lambda", "_", ":", "(", "carry", ",", "None", ")", ",", "\n", "None", ",", "\n", ")", "\n", "\n", "", "rngs", "=", "jrand", ".", "split", "(", "rng_init", ",", "args", ".", "L", "**", "2", ")", "\n", "\n", "if", "use_fast", ":", "\n", "            ", "_", ",", "cache_init", "=", "net_init_cache", "(", "params", ",", "spins_init", ",", "indices", "[", "-", "k", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "cache_init", "=", "None", "\n", "\n", "", "(", "spins", ",", "_", ")", ",", "_", "=", "lax", ".", "scan", "(", "scan_fun", ",", "(", "spins_init", ",", "cache_init", ")", ",", "\n", "(", "indices", "[", "1", ":", "]", ",", "rngs", ")", ")", "\n", "\n", "return", "spins", "\n", "\n", "", "return", "sample_k_fun", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.sample_ncus.main": [[92, 196], ["time.time", "utils.get_last_ckpt_step", "utils.my_log", "utils.print_args", "net.get_net", "utils.load_ckpt", "net_init_cache", "train.get_sample_fun", "sample_ncus.get_sample_k_fun", "train.get_log_q_fun", "jax.random.split", "train.get_sample_fun.", "train.get_log_q_fun.", "train.energy_fun", "args.args.log_filename.replace", "utils.ensure_dir", "jax.numpy.zeros", "jax.random.split", "sample_ncus.get_k", "get_sample_k_fun.", "train.get_log_q_fun.", "train.energy_fun", "jax.numpy.log", "jax.numpy.where", "jax.numpy.where", "jax.random.randint", "jax.numpy.roll", "jax.random.uniform", "jax.numpy.where", "jax.numpy.where", "jax.numpy.where", "jax.numpy.where", "train.get_log_q_fun.", "jnp.where.mean", "accept.sum", "sample_raw.welford_update", "jax.random.PRNGKey", "chunked_data.ChunkedDataWriter", "utils.my_log", "jax.random.uniform", "jax.numpy.expand_dims", "jax.numpy.flip", "jax.numpy.flip", "jnp.where.transpose", "energy_per_spin.mean", "sample_ncus.main.update"], "function", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.get_last_ckpt_step", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.my_log", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.print_args", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.net.get_net", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.load_ckpt", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.get_sample_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.sample_ncus.get_sample_k_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.get_log_q_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.energy_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.ensure_dir", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.sample_ncus.get_k", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.train.energy_fun", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.sample_raw.welford_update", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.my_log"], ["", "def", "main", "(", ")", ":", "\n", "    ", "start_time", "=", "time", "(", ")", "\n", "last_step", "=", "get_last_ckpt_step", "(", ")", "\n", "assert", "last_step", ">=", "0", "\n", "my_log", "(", "f'Checkpoint found: {last_step}\\n'", ")", "\n", "print_args", "(", ")", "\n", "\n", "net_init", ",", "net_apply", ",", "net_init_cache", ",", "net_apply_fast", "=", "get_net", "(", ")", "\n", "\n", "params", "=", "load_ckpt", "(", "last_step", ")", "\n", "in_shape", "=", "(", "args", ".", "batch_size", ",", "args", ".", "L", ",", "args", ".", "L", ",", "1", ")", "\n", "_", ",", "cache_init", "=", "net_init_cache", "(", "params", ",", "jnp", ".", "zeros", "(", "in_shape", ")", ",", "(", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "# sample_raw_fun = get_sample_fun(net_apply, None)", "\n", "sample_raw_fun", "=", "get_sample_fun", "(", "net_apply_fast", ",", "cache_init", ")", "\n", "# sample_k_fun = get_sample_k_fun(net_apply, None)", "\n", "sample_k_fun", "=", "get_sample_k_fun", "(", "net_apply_fast", ",", "net_init_cache", ")", "\n", "log_q_fun", "=", "get_log_q_fun", "(", "net_apply", ")", "\n", "\n", "@", "jit", "\n", "def", "update", "(", "spins_old", ",", "log_q_old", ",", "energy_old", ",", "step", ",", "accept_count", ",", "\n", "energy_mean", ",", "energy_var_sum", ",", "rng", ")", ":", "\n", "        ", "(", "rng", ",", "rng_k", ",", "rng_sample", ",", "rng_accept", ",", "rng_trans", ",", "\n", "rng_refl", ")", "=", "jrand", ".", "split", "(", "rng", ",", "6", ")", "\n", "k", "=", "get_k", "(", "rng_k", ")", "\n", "spins", "=", "sample_k_fun", "(", "k", ",", "params", ",", "spins_old", ",", "rng_sample", ")", "\n", "log_q", "=", "log_q_fun", "(", "params", ",", "spins", ")", "\n", "energy", "=", "energy_fun", "(", "spins", ")", "\n", "\n", "log_uniform", "=", "jnp", ".", "log", "(", "jrand", ".", "uniform", "(", "rng_accept", ",", "(", "args", ".", "batch_size", ",", ")", ")", ")", "\n", "accept", "=", "log_uniform", "<", "(", "log_q_old", "-", "log_q", "+", "args", ".", "beta", "*", "\n", "(", "energy_old", "-", "energy", ")", ")", "\n", "\n", "spins", "=", "jnp", ".", "where", "(", "jnp", ".", "expand_dims", "(", "accept", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", ",", "spins", ",", "\n", "spins_old", ")", "\n", "energy", "=", "jnp", ".", "where", "(", "accept", ",", "energy", ",", "energy_old", ")", "\n", "\n", "# Apply a random translation on the batch", "\n", "i", ",", "j", "=", "jrand", ".", "randint", "(", "rng_trans", ",", "(", "2", ",", ")", ",", "0", ",", "args", ".", "L", ")", "\n", "spins", "=", "jnp", ".", "roll", "(", "spins", ",", "(", "i", ",", "j", ")", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "# Apply random reflections on the batch", "\n", "refl_x", ",", "refl_y", ",", "refl_d", ",", "refl_z", "=", "jrand", ".", "uniform", "(", "rng_refl", ",", "(", "4", ",", ")", ")", "\n", "spins", "=", "jnp", ".", "where", "(", "refl_x", ">", "0.5", ",", "jnp", ".", "flip", "(", "spins", ",", "axis", "=", "1", ")", ",", "spins", ")", "\n", "spins", "=", "jnp", ".", "where", "(", "refl_y", ">", "0.5", ",", "jnp", ".", "flip", "(", "spins", ",", "axis", "=", "2", ")", ",", "spins", ")", "\n", "spins", "=", "jnp", ".", "where", "(", "refl_d", ">", "0.5", ",", "spins", ".", "transpose", "(", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", ",", "spins", ")", "\n", "spins", "=", "jnp", ".", "where", "(", "refl_z", ">", "0.5", ",", "-", "spins", ",", "spins", ")", "\n", "\n", "log_q", "=", "log_q_fun", "(", "params", ",", "spins", ")", "\n", "mag", "=", "spins", ".", "mean", "(", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "\n", "step", "+=", "1", "\n", "accept_count", "+=", "accept", ".", "sum", "(", ")", "\n", "energy_per_spin", "=", "energy", "/", "args", ".", "L", "**", "2", "\n", "energy_mean", ",", "energy_var_sum", "=", "welford_update", "(", "energy_per_spin", ".", "mean", "(", ")", ",", "\n", "step", ",", "energy_mean", ",", "\n", "energy_var_sum", ")", "\n", "\n", "return", "(", "spins", ",", "log_q", ",", "energy", ",", "mag", ",", "accept", ",", "k", ",", "step", ",", "accept_count", ",", "\n", "energy_mean", ",", "energy_var_sum", ",", "rng", ")", "\n", "\n", "", "rng", ",", "rng_init", "=", "jrand", ".", "split", "(", "jrand", ".", "PRNGKey", "(", "args", ".", "seed", ")", ")", "\n", "# Sample initial configurations from the network", "\n", "spins", "=", "sample_raw_fun", "(", "args", ".", "batch_size", ",", "params", ",", "rng_init", ")", "\n", "log_q", "=", "log_q_fun", "(", "params", ",", "spins", ")", "\n", "energy", "=", "energy_fun", "(", "spins", ")", "\n", "\n", "step", "=", "0", "\n", "accept_count", "=", "0", "\n", "energy_mean", "=", "0", "\n", "energy_var_sum", "=", "0", "\n", "\n", "data_filename", "=", "args", ".", "log_filename", ".", "replace", "(", "'.log'", ",", "'.hdf5'", ")", "\n", "writer_proto", "=", "[", "\n", "# Uncomment to save all the sampled spins", "\n", "# ('spins', bool, (args.batch_size, args.L, args.L)),", "\n", "(", "'log_q'", ",", "np", ".", "float32", ",", "(", "args", ".", "batch_size", ",", ")", ")", ",", "\n", "(", "'energy'", ",", "np", ".", "int32", ",", "(", "args", ".", "batch_size", ",", ")", ")", ",", "\n", "(", "'mag'", ",", "np", ".", "float32", ",", "(", "args", ".", "batch_size", ",", ")", ")", ",", "\n", "(", "'accept'", ",", "bool", ",", "(", "args", ".", "batch_size", ",", ")", ")", ",", "\n", "(", "'k'", ",", "np", ".", "int32", ",", "None", ")", ",", "\n", "]", "\n", "ensure_dir", "(", "data_filename", ")", "\n", "with", "ChunkedDataWriter", "(", "data_filename", ",", "writer_proto", ",", "\n", "args", ".", "save_step", ")", "as", "writer", ":", "\n", "        ", "my_log", "(", "'Sampling...'", ")", "\n", "while", "step", "<", "args", ".", "max_step", ":", "\n", "            ", "(", "spins", ",", "log_q", ",", "energy", ",", "mag", ",", "accept", ",", "k", ",", "step", ",", "accept_count", ",", "\n", "energy_mean", ",", "energy_var_sum", ",", "\n", "rng", ")", "=", "update", "(", "spins", ",", "log_q", ",", "energy", ",", "step", ",", "accept_count", ",", "\n", "energy_mean", ",", "energy_var_sum", ",", "rng", ")", "\n", "# Uncomment to save all the sampled spins", "\n", "# writer.write(spins[:, :, :, 0] > 0, log_q, energy, mag, accept, k)", "\n", "writer", ".", "write", "(", "log_q", ",", "energy", ",", "mag", ",", "accept", ",", "k", ")", "\n", "\n", "if", "args", ".", "print_step", "and", "step", "%", "args", ".", "print_step", "==", "0", ":", "\n", "                ", "accept_rate", "=", "accept_count", "/", "(", "step", "*", "args", ".", "batch_size", ")", "\n", "energy_std", "=", "jnp", ".", "sqrt", "(", "energy_var_sum", "/", "step", ")", "\n", "my_log", "(", "', '", ".", "join", "(", "[", "\n", "f'step = {step}'", ",", "\n", "f'P = {accept_rate:.8g}'", ",", "\n", "f'E = {energy_mean:.8g}'", ",", "\n", "f'E_std = {energy_std:.8g}'", ",", "\n", "f'time = {time() - start_time:.3f}'", ",", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.ensure_dir": [[8, 15], ["os.path.dirname", "os.makedirs", "args.args.full_out_dir", "args.args.ckpt_dir"], "function", ["None"], ["def", "ensure_dir", "(", "filename", ")", ":", "\n", "    ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "filename", ")", "\n", "if", "dirname", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.init_out_dir": [[17, 23], ["utils.ensure_dir", "utils.ensure_dir"], "function", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.ensure_dir", "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.ensure_dir"], ["", "", "", "def", "init_out_dir", "(", ")", ":", "\n", "    ", "if", "not", "args", ".", "full_out_dir", ":", "\n", "        ", "return", "\n", "", "ensure_dir", "(", "args", ".", "full_out_dir", ")", "\n", "if", "args", ".", "ckpt_dir", ":", "\n", "        ", "ensure_dir", "(", "args", ".", "ckpt_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.clear_log": [[25, 29], ["open"], "function", ["None"], ["", "", "def", "clear_log", "(", ")", ":", "\n", "    ", "if", "args", ".", "log_filename", ":", "\n", "        ", "with", "open", "(", "args", ".", "log_filename", ",", "'w'", ")", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.my_log": [[31, 38], ["print", "open", "f.write"], "function", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.chunked_data.ChunkedDataWriter.write"], ["", "", "", "def", "my_log", "(", "s", ")", ":", "\n", "    ", "if", "args", ".", "log_filename", ":", "\n", "        ", "with", "open", "(", "args", ".", "log_filename", ",", "'a'", ",", "newline", "=", "'\\n'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "s", "+", "'\\n'", ")", "\n", "", "", "if", "args", ".", "no_stdout", ":", "\n", "        ", "return", "\n", "", "print", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.print_args": [[40, 44], ["args.args._get_kwargs", "print_fn", "print_fn"], "function", ["None"], ["", "def", "print_args", "(", "print_fn", "=", "my_log", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "args", ".", "_get_kwargs", "(", ")", ":", "\n", "        ", "print_fn", "(", "f'{k} = {v}'", ")", "\n", "", "print_fn", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.parse_ckpt_name": [[46, 51], ["os.path.basename", "filename.replace.replace", "int"], "function", ["None"], ["", "def", "parse_ckpt_name", "(", "filename", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "basename", "(", "filename", ")", "\n", "filename", "=", "filename", ".", "replace", "(", "'.pickle'", ",", "''", ")", "\n", "step", "=", "int", "(", "filename", ")", "\n", "return", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.get_last_ckpt_step": [[53, 61], ["glob.glob", "max", "utils.parse_ckpt_name"], "function", ["home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.parse_ckpt_name"], ["", "def", "get_last_ckpt_step", "(", ")", ":", "\n", "    ", "if", "not", "args", ".", "ckpt_dir", ":", "\n", "        ", "return", "-", "1", "\n", "", "filename_list", "=", "glob", "(", "args", ".", "ckpt_dir", "+", "'*.pickle'", ")", "\n", "if", "not", "filename_list", ":", "\n", "        ", "return", "-", "1", "\n", "", "step", "=", "max", "(", "parse_ckpt_name", "(", "x", ")", "for", "x", "in", "filename_list", ")", "\n", "return", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.load_ckpt": [[63, 68], ["open", "pickle.load"], "function", ["None"], ["", "def", "load_ckpt", "(", "step", ")", ":", "\n", "    ", "save_filename", "=", "f'{args.ckpt_dir}{step}.pickle'", "\n", "with", "open", "(", "save_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "params", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.utils.save_ckpt": [[70, 79], ["open", "pickle.dump", "os.remove"], "function", ["None"], ["", "def", "save_ckpt", "(", "params", ",", "step", ")", ":", "\n", "    ", "save_filename", "=", "f'{args.ckpt_dir}{step}.pickle'", "\n", "with", "open", "(", "save_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "params", ",", "f", ")", "\n", "\n", "", "last_step", "=", "step", "-", "args", ".", "save_step", "\n", "if", "last_step", ">", "0", "and", "args", ".", "keep_step", "and", "last_step", "%", "args", ".", "keep_step", "!=", "0", ":", "\n", "        ", "last_save_filename", "=", "f'{args.ckpt_dir}{last_step}.pickle'", "\n", "os", ".", "remove", "(", "last_save_filename", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wdphy16_neural-cluster-update.None.args.get_ham_net_name": [[165, 177], ["ham_name.format.format", "net_name.format.format", "vars", "vars"], "function", ["None"], ["def", "get_ham_net_name", "(", ")", ":", "\n", "    ", "ham_name", "=", "'{lattice}_L{L}_beta{beta:g}'", "\n", "ham_name", "=", "ham_name", ".", "format", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n", "net_name", "=", "'nd{net_depth}_nw{net_width}_ks{kernel_size}'", "\n", "if", "args", ".", "dilation_step", ":", "\n", "        ", "net_name", "+=", "'_ds{dilation_step}'", "\n", "", "if", "args", ".", "beta_anneal_step", ":", "\n", "        ", "net_name", "+=", "'_ba{beta_anneal_step}'", "\n", "", "net_name", "=", "net_name", ".", "format", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n", "return", "ham_name", ",", "net_name", "\n", "\n"]]}