{"home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.None.main.main": [[28, 70], ["numpy.arange", "pandas.DataFrame", "pd.DataFrame.to_csv", "os.path.isdir", "os.mkdir", "timeit.default_timer", "main.seed_torch", "dataset.return_splits", "print", "utils.core_utils.train", "val_cindex.append", "utils.file_utils.save_pkl", "timeit.default_timer", "print", "len", "os.path.join", "print", "os.path.join", "len", "len"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.None.eval_surv.seed_torch", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.return_splits", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.train", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.file_utils.save_pkl"], ["def", "main", "(", "args", ")", ":", "\n", "# create results directory if necessary", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "results_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "results_dir", ")", "\n", "\n", "", "if", "args", ".", "k_start", "==", "-", "1", ":", "\n", "        ", "start", "=", "0", "\n", "", "else", ":", "\n", "        ", "start", "=", "args", ".", "k_start", "\n", "", "if", "args", ".", "k_end", "==", "-", "1", ":", "\n", "        ", "end", "=", "args", ".", "k", "\n", "", "else", ":", "\n", "        ", "end", "=", "args", ".", "k_end", "\n", "\n", "", "val_cindex", "=", "[", "]", "\n", "folds", "=", "np", ".", "arange", "(", "start", ",", "end", ")", "\n", "\n", "for", "i", "in", "folds", ":", "\n", "        ", "start", "=", "timer", "(", ")", "\n", "seed_torch", "(", "args", ".", "seed", ")", "\n", "\n", "train_dataset", ",", "val_dataset", "=", "dataset", ".", "return_splits", "(", "from_id", "=", "False", ",", "csv_path", "=", "'{}/splits_{}.csv'", ".", "format", "(", "args", ".", "split_dir", ",", "i", ")", ")", "\n", "\n", "print", "(", "'training: {}, validation: {}'", ".", "format", "(", "len", "(", "train_dataset", ")", ",", "len", "(", "val_dataset", ")", ")", ")", "\n", "datasets", "=", "(", "train_dataset", ",", "val_dataset", ")", "\n", "\n", "if", "'omic'", "in", "args", ".", "mode", ":", "\n", "            ", "args", ".", "omic_input_dim", "=", "train_dataset", ".", "genomic_features", ".", "shape", "[", "1", "]", "\n", "print", "(", "\"Genomic Dimension\"", ",", "args", ".", "omic_input_dim", ")", "\n", "\n", "", "val_df", ",", "cindex", "=", "train", "(", "datasets", ",", "i", ",", "args", ")", "\n", "val_cindex", ".", "append", "(", "cindex", ")", "\n", "\n", "#write results to pkl", "\n", "save_pkl", "(", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "'split_train_{}_results.pkl'", ".", "format", "(", "i", ")", ")", ",", "val_df", ")", "\n", "end", "=", "timer", "(", ")", "\n", "print", "(", "'Fold %d Time: %f seconds'", "%", "(", "i", ",", "end", "-", "start", ")", ")", "\n", "\n", "", "if", "len", "(", "folds", ")", "!=", "args", ".", "k", ":", "save_name", "=", "'summary_partial_{}_{}.csv'", ".", "format", "(", "start", ",", "end", ")", "\n", "else", ":", "save_name", "=", "'summary.csv'", "\n", "results_df", "=", "pd", ".", "DataFrame", "(", "{", "'folds'", ":", "folds", ",", "'val_cindex'", ":", "val_cindex", "}", ")", "\n", "results_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "'summary_latest.csv'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.None.main.seed_torch": [[170, 181], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "seed_torch", "(", "seed", "=", "7", ")", ":", "\n", "    ", "import", "random", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# if you are using multi-GPU.", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.None.eval_surv.main": [[28, 70], ["numpy.arange", "pandas.DataFrame", "pd.DataFrame.to_csv", "os.path.isdir", "os.mkdir", "timeit.default_timer", "eval_surv.seed_torch", "dataset.return_splits", "print", "utils.core_utils.eval_model", "val_cindex.append", "utils.file_utils.save_pkl", "timeit.default_timer", "print", "len", "os.path.join", "print", "os.path.join", "len", "len"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.None.eval_surv.seed_torch", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.return_splits", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.eval_model", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.file_utils.save_pkl"], ["def", "main", "(", "args", ")", ":", "\n", "# create results directory if necessary", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "results_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "args", ".", "results_dir", ")", "\n", "\n", "", "if", "args", ".", "k_start", "==", "-", "1", ":", "\n", "        ", "start", "=", "0", "\n", "", "else", ":", "\n", "        ", "start", "=", "args", ".", "k_start", "\n", "", "if", "args", ".", "k_end", "==", "-", "1", ":", "\n", "        ", "end", "=", "args", ".", "k", "\n", "", "else", ":", "\n", "        ", "end", "=", "args", ".", "k_end", "\n", "\n", "", "val_cindex", "=", "[", "]", "\n", "folds", "=", "np", ".", "arange", "(", "start", ",", "end", ")", "\n", "\n", "for", "i", "in", "folds", ":", "\n", "        ", "start", "=", "timer", "(", ")", "\n", "seed_torch", "(", "args", ".", "seed", ")", "\n", "\n", "train_dataset", ",", "val_dataset", "=", "dataset", ".", "return_splits", "(", "from_id", "=", "False", ",", "csv_path", "=", "'{}/splits_{}.csv'", ".", "format", "(", "args", ".", "split_dir", ",", "i", ")", ")", "\n", "\n", "print", "(", "'training: {}, validation: {}'", ".", "format", "(", "len", "(", "train_dataset", ")", ",", "len", "(", "val_dataset", ")", ")", ")", "\n", "datasets", "=", "(", "train_dataset", ",", "val_dataset", ")", "\n", "\n", "if", "'omic'", "in", "args", ".", "mode", ":", "\n", "            ", "args", ".", "omic_input_dim", "=", "train_dataset", ".", "genomic_features", ".", "shape", "[", "1", "]", "\n", "print", "(", "\"Genomic Dimension\"", ",", "args", ".", "omic_input_dim", ")", "\n", "\n", "", "val_latest", ",", "cindex_latest", "=", "eval_model", "(", "datasets", ",", "i", ",", "args", ")", "\n", "val_cindex", ".", "append", "(", "cindex_latest", ")", "\n", "\n", "#write results to pkl", "\n", "save_pkl", "(", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "'split_val_{}_results.pkl'", ".", "format", "(", "i", ")", ")", ",", "val_latest", ")", "\n", "end", "=", "timer", "(", ")", "\n", "print", "(", "'Fold %d Time: %f seconds'", "%", "(", "i", ",", "end", "-", "start", ")", ")", "\n", "\n", "", "if", "len", "(", "folds", ")", "!=", "args", ".", "k", ":", "save_name", "=", "'summary_partial_{}_{}.csv'", ".", "format", "(", "start", ",", "end", ")", "\n", "else", ":", "save_name", "=", "'summary.csv'", "\n", "results_df", "=", "pd", ".", "DataFrame", "(", "{", "'folds'", ":", "folds", ",", "'val_cindex'", ":", "val_cindex", "}", ")", "\n", "results_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "'summary.csv'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.None.eval_surv.seed_torch": [[170, 181], ["random.seed", "str", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "seed_torch", "(", "seed", "=", "7", ")", ":", "\n", "    ", "import", "random", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# if you are using multi-GPU.", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.file_utils.save_pkl": [[4, 8], ["open", "pickle.dump", "open.close"], "function", ["None"], ["def", "save_pkl", "(", "filename", ",", "save_object", ")", ":", "\n", "\t", "writer", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "save_object", ",", "writer", ")", "\n", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.file_utils.load_pkl": [[9, 14], ["open", "pickle.load", "open.close"], "function", ["None"], ["", "def", "load_pkl", "(", "filename", ")", ":", "\n", "\t", "loader", "=", "open", "(", "filename", ",", "'rb'", ")", "\n", "file", "=", "pickle", ".", "load", "(", "loader", ")", "\n", "loader", ".", "close", "(", ")", "\n", "return", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.file_utils.save_hdf5": [[15, 35], ["h5py.File", "asset_dict.items", "h5py.File.close", "h5py.File.create_dataset", "file.create_dataset.resize", "attr_dict.keys", "attr_dict[].items", "len"], "function", ["None"], ["", "def", "save_hdf5", "(", "output_path", ",", "asset_dict", ",", "attr_dict", "=", "None", ",", "mode", "=", "'a'", ")", ":", "\n", "    ", "file", "=", "h5py", ".", "File", "(", "output_path", ",", "mode", ")", "\n", "for", "key", ",", "val", "in", "asset_dict", ".", "items", "(", ")", ":", "\n", "        ", "data_shape", "=", "val", ".", "shape", "\n", "if", "key", "not", "in", "file", ":", "\n", "            ", "data_type", "=", "val", ".", "dtype", "\n", "chunk_shape", "=", "(", "1", ",", ")", "+", "data_shape", "[", "1", ":", "]", "\n", "maxshape", "=", "(", "None", ",", ")", "+", "data_shape", "[", "1", ":", "]", "\n", "dset", "=", "file", ".", "create_dataset", "(", "key", ",", "shape", "=", "data_shape", ",", "maxshape", "=", "maxshape", ",", "chunks", "=", "chunk_shape", ",", "dtype", "=", "data_type", ")", "\n", "dset", "[", ":", "]", "=", "val", "\n", "if", "attr_dict", "is", "not", "None", ":", "\n", "                ", "if", "key", "in", "attr_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "for", "attr_key", ",", "attr_val", "in", "attr_dict", "[", "key", "]", ".", "items", "(", ")", ":", "\n", "                        ", "dset", ".", "attrs", "[", "attr_key", "]", "=", "attr_val", "\n", "", "", "", "", "else", ":", "\n", "            ", "dset", "=", "file", "[", "key", "]", "\n", "dset", ".", "resize", "(", "len", "(", "dset", ")", "+", "data_shape", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "dset", "[", "-", "data_shape", "[", "0", "]", ":", "]", "=", "val", "\n", "", "", "file", ".", "close", "(", ")", "\n", "return", "output_path", "", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.initiate_model": [[21, 47], ["print", "models.model_mil.MIL_fc.relocate", "models.model_mil.MIL_fc.eval", "model_dict.update", "models.model_clam.CLAM", "torch.load", "torch.load", "torch.load", "models.model_mil.MIL_fc.load_state_dict", "models.model_attention_mil.MIL_Attention_fc", "models.model_mil.MIL_fc_mc", "models.model_mil.MIL_fc"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.MIL_Attention_fc.relocate", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.eval"], ["def", "initiate_model", "(", "args", ",", "ckpt_path", "=", "None", ")", ":", "\n", "    ", "print", "(", "'Init Model'", ")", "\n", "model_dict", "=", "{", "\"dropout\"", ":", "args", ".", "drop_out", ",", "'n_classes'", ":", "args", ".", "n_classes", "}", "\n", "\n", "if", "args", ".", "model_size", "is", "not", "None", "and", "args", ".", "model_type", "in", "[", "'clam'", ",", "'attention_mil'", ",", "'clam_new'", "]", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "\"size_arg\"", ":", "args", ".", "model_size", "}", ")", "\n", "\n", "", "if", "args", ".", "model_type", "==", "'clam'", ":", "\n", "        ", "model", "=", "CLAM", "(", "**", "model_dict", ")", "\n", "", "elif", "args", ".", "model_type", "==", "'attention_mil'", ":", "\n", "        ", "model", "=", "MIL_Attention_fc", "(", "**", "model_dict", ")", "\n", "", "else", ":", "# args.model_type == 'mil'", "\n", "        ", "if", "args", ".", "n_classes", ">", "2", ":", "\n", "            ", "model", "=", "MIL_fc_mc", "(", "**", "model_dict", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "MIL_fc", "(", "**", "model_dict", ")", "\n", "\n", "", "", "model", ".", "relocate", "(", ")", "\n", "#print_network(model)", "\n", "\n", "if", "ckpt_path", "is", "not", "None", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", ",", "strict", "=", "False", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.eval": [[48, 59], ["eval_utils.initiate_model", "print", "get_simple_loader", "eval_utils.summary", "print", "print", "range", "len", "print"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.initiate_model", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.get_simple_loader", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Whole_Slide_Bag_FP.summary"], ["", "def", "eval", "(", "dataset", ",", "args", ",", "ckpt_path", ")", ":", "\n", "    ", "model", "=", "initiate_model", "(", "args", ",", "ckpt_path", ")", "\n", "\n", "print", "(", "'Init Loaders'", ")", "\n", "loader", "=", "get_simple_loader", "(", "dataset", ")", "\n", "patient_results", ",", "test_error", ",", "auc", ",", "aucs", ",", "df", ",", "_", "=", "summary", "(", "model", ",", "loader", ",", "args", ")", "\n", "print", "(", "'test_error: '", ",", "test_error", ")", "\n", "print", "(", "'auc: '", ",", "auc", ")", "\n", "for", "cls_idx", "in", "range", "(", "len", "(", "aucs", ")", ")", ":", "\n", "        ", "print", "(", "'class {} auc: {}'", ".", "format", "(", "cls_idx", ",", "aucs", "[", "cls_idx", "]", ")", ")", "\n", "", "return", "model", ",", "patient_results", ",", "test_error", ",", "auc", ",", "aucs", ",", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.infer": [[60, 64], ["eval_utils.initiate_model", "eval_utils.infer_dataset"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.initiate_model", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.infer_dataset"], ["", "def", "infer", "(", "dataset", ",", "args", ",", "ckpt_path", ",", "class_labels", ")", ":", "\n", "    ", "model", "=", "initiate_model", "(", "args", ",", "ckpt_path", ")", "\n", "df", "=", "infer_dataset", "(", "model", ",", "dataset", ",", "args", ",", "class_labels", ")", "\n", "return", "model", ",", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.accuracy": [[66, 81], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "1.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.summary": [[82, 146], ["utils.core_utils.Accuracy_Logger", "model.eval", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "range", "pandas.DataFrame", "len", "len", "utils.core_utils.Accuracy_Logger.log", "Y_prob.cpu().numpy", "label.item", "Y_hat.item", "patient_results.update", "calculate_error", "eval_utils.accuracy", "print", "len", "results_dict.update", "len", "data.to", "label.to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.unique", "sklearn.metrics.roc_auc_score", "sklearn.preprocessing.label_binarize", "range", "Y_prob.cpu", "acc1.item", "acc3.item", "sklearn.preprocessing.label_binarize", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "numpy.nanmean", "numpy.array", "label.item", "sklearn.metrics.roc_curve", "aucs.append", "aucs.append", "sklearn.preprocessing.label_binarize.ravel", "np.zeros.ravel", "numpy.array", "sklearn.metrics.auc", "float", "range", "range"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.eval", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.calculate_error", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.accuracy"], ["", "", "def", "summary", "(", "model", ",", "loader", ",", "args", ")", ":", "\n", "    ", "acc_logger", "=", "Accuracy_Logger", "(", "n_classes", "=", "args", ".", "n_classes", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0.", "\n", "test_error", "=", "0.", "\n", "\n", "all_probs", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ",", "args", ".", "n_classes", ")", ")", "\n", "all_labels", "=", "np", ".", "zeros", "(", "len", "(", "loader", ")", ")", "\n", "all_preds", "=", "np", ".", "zeros", "(", "len", "(", "loader", ")", ")", "\n", "\n", "slide_ids", "=", "loader", ".", "dataset", ".", "slide_data", "[", "'slide_id'", "]", "\n", "patient_results", "=", "{", "}", "\n", "for", "batch_idx", ",", "(", "data", ",", "label", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "data", ",", "label", "=", "data", ".", "to", "(", "device", ")", ",", "label", ".", "to", "(", "device", ")", "\n", "slide_id", "=", "slide_ids", ".", "iloc", "[", "batch_idx", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", ",", "Y_prob", ",", "Y_hat", ",", "_", ",", "results_dict", "=", "model", "(", "data", ")", "\n", "\n", "", "acc_logger", ".", "log", "(", "Y_hat", ",", "label", ")", "\n", "\n", "probs", "=", "Y_prob", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "all_probs", "[", "batch_idx", "]", "=", "probs", "\n", "all_labels", "[", "batch_idx", "]", "=", "label", ".", "item", "(", ")", "\n", "all_preds", "[", "batch_idx", "]", "=", "Y_hat", ".", "item", "(", ")", "\n", "\n", "patient_results", ".", "update", "(", "{", "slide_id", ":", "{", "'slide_id'", ":", "np", ".", "array", "(", "slide_id", ")", ",", "'prob'", ":", "probs", ",", "'label'", ":", "label", ".", "item", "(", ")", "}", "}", ")", "\n", "\n", "error", "=", "calculate_error", "(", "Y_hat", ",", "label", ")", "\n", "test_error", "+=", "error", "\n", "\n", "", "del", "data", "\n", "test_error", "/=", "len", "(", "loader", ")", "\n", "if", "args", ".", "n_classes", ">", "2", ":", "\n", "        ", "acc1", ",", "acc3", "=", "accuracy", "(", "torch", ".", "from_numpy", "(", "all_probs", ")", ",", "torch", ".", "from_numpy", "(", "all_labels", ")", ",", "topk", "=", "(", "1", ",", "3", ")", ")", "\n", "print", "(", "'top1 acc: {:.3f}, top3 acc: {:.3f}'", ".", "format", "(", "acc1", ".", "item", "(", ")", ",", "acc3", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "np", ".", "unique", "(", "all_labels", ")", ")", "==", "1", ":", "\n", "        ", "auc_score", "=", "-", "1", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "n_classes", "==", "2", ":", "\n", "            ", "auc_score", "=", "roc_auc_score", "(", "all_labels", ",", "all_probs", "[", ":", ",", "1", "]", ")", "\n", "aucs", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "aucs", "=", "[", "]", "\n", "binary_labels", "=", "label_binarize", "(", "all_labels", ",", "classes", "=", "[", "i", "for", "i", "in", "range", "(", "args", ".", "n_classes", ")", "]", ")", "\n", "for", "class_idx", "in", "range", "(", "args", ".", "n_classes", ")", ":", "\n", "                ", "if", "class_idx", "in", "all_labels", ":", "\n", "                    ", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "binary_labels", "[", ":", ",", "class_idx", "]", ",", "all_probs", "[", ":", ",", "class_idx", "]", ")", "\n", "aucs", ".", "append", "(", "auc", "(", "fpr", ",", "tpr", ")", ")", "\n", "", "else", ":", "\n", "                    ", "aucs", ".", "append", "(", "float", "(", "'nan'", ")", ")", "\n", "", "", "if", "args", ".", "micro_average", ":", "\n", "                ", "binary_labels", "=", "label_binarize", "(", "all_labels", ",", "classes", "=", "[", "i", "for", "i", "in", "range", "(", "args", ".", "n_classes", ")", "]", ")", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "binary_labels", ".", "ravel", "(", ")", ",", "all_probs", ".", "ravel", "(", ")", ")", "\n", "auc_score", "=", "auc", "(", "fpr", ",", "tpr", ")", "\n", "", "else", ":", "\n", "                ", "auc_score", "=", "np", ".", "nanmean", "(", "np", ".", "array", "(", "aucs", ")", ")", "\n", "\n", "", "", "", "results_dict", "=", "{", "'slide_id'", ":", "slide_ids", ",", "'Y'", ":", "all_labels", ",", "'Y_hat'", ":", "all_preds", "}", "\n", "for", "c", "in", "range", "(", "args", ".", "n_classes", ")", ":", "\n", "        ", "results_dict", ".", "update", "(", "{", "'p_{}'", ".", "format", "(", "c", ")", ":", "all_probs", "[", ":", ",", "c", "]", "}", ")", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "results_dict", ")", "\n", "return", "patient_results", ",", "test_error", ",", "auc_score", ",", "aucs", ",", "df", ",", "acc_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.infer_dataset": [[147, 171], ["model.eval", "numpy.zeros", "numpy.zeros", "numpy.full", "enumerate", "range", "pandas.DataFrame", "data.to.to", "torch.topk", "torch.topk", "torch.topk", "probs.cpu().numpy.cpu().numpy", "ids.cpu().numpy.cpu().numpy", "results_dict.update", "results_dict.update", "len", "len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "numpy.array", "probs.cpu().numpy.cpu", "ids.cpu().numpy.cpu"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.eval"], ["", "def", "infer_dataset", "(", "model", ",", "dataset", ",", "args", ",", "class_labels", ",", "k", "=", "3", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "all_probs", "=", "np", ".", "zeros", "(", "(", "len", "(", "dataset", ")", ",", "k", ")", ")", "\n", "all_preds", "=", "np", ".", "zeros", "(", "(", "len", "(", "dataset", ")", ",", "k", ")", ")", "\n", "all_preds_str", "=", "np", ".", "full", "(", "(", "len", "(", "dataset", ")", ",", "k", ")", ",", "' '", ",", "dtype", "=", "object", ")", "\n", "slide_ids", "=", "dataset", ".", "slide_data", "\n", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "dataset", ")", ":", "\n", "        ", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", ",", "Y_prob", ",", "Y_hat", ",", "_", ",", "results_dict", "=", "model", "(", "data", ")", "\n", "\n", "", "probs", ",", "ids", "=", "torch", ".", "topk", "(", "Y_prob", ",", "k", ")", "\n", "probs", "=", "probs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ids", "=", "ids", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "all_probs", "[", "batch_idx", "]", "=", "probs", "\n", "all_preds", "[", "batch_idx", "]", "=", "ids", "\n", "all_preds_str", "[", "batch_idx", "]", "=", "np", ".", "array", "(", "class_labels", ")", "[", "ids", "]", "\n", "", "del", "data", "\n", "results_dict", "=", "{", "'slide_id'", ":", "slide_ids", "}", "\n", "for", "c", "in", "range", "(", "k", ")", ":", "\n", "        ", "results_dict", ".", "update", "(", "{", "'Pred_{}'", ".", "format", "(", "c", ")", ":", "all_preds_str", "[", ":", ",", "c", "]", "}", ")", "\n", "results_dict", ".", "update", "(", "{", "'p_{}'", ".", "format", "(", "c", ")", ":", "all_probs", "[", ":", ",", "c", "]", "}", ")", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "results_dict", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.compute_features": [[197, 208], ["os.path.join", "eval_utils.initialize_features_hdf5_file", "range", "eval_utils.initiate_model", "dataset.get_list", "len", "len", "print", "eval_utils.save_features", "numpy.arange", "len", "len"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.initialize_features_hdf5_file", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.initiate_model", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_list", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.save_features"], ["", "def", "compute_features", "(", "dataset", ",", "args", ",", "ckpt_path", ",", "save_dir", ",", "model", "=", "None", ",", "feature_dim", "=", "512", ")", ":", "\n", "    ", "if", "model", "is", "None", ":", "\n", "        ", "model", "=", "initiate_model", "(", "args", ",", "ckpt_path", ")", "\n", "\n", "", "names", "=", "dataset", ".", "get_list", "(", "np", ".", "arange", "(", "len", "(", "dataset", ")", ")", ")", ".", "values", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'features.h5'", ")", "\n", "\n", "initialize_features_hdf5_file", "(", "file_path", ",", "len", "(", "dataset", ")", ",", "feature_dim", "=", "feature_dim", ",", "names", "=", "names", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "print", "(", "\"Progress: {}/{}\"", ".", "format", "(", "i", ",", "len", "(", "dataset", ")", ")", ")", "\n", "save_features", "(", "dataset", ",", "i", ",", "model", ",", "args", ",", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.save_features": [[209, 232], ["dataset.get_list", "print", "features.to.to", "Y_hat.item.item", "Y_prob.view().cpu().numpy.view().cpu().numpy", "bag_feat.view().cpu().numpy.view().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "h5py.File", "print", "type", "model", "model", "Y_prob.view().cpu().numpy.view().cpu", "bag_feat.view().cpu().numpy.view().cpu", "Y_hat.item.item", "Y_prob.view().cpu().numpy.view", "bag_feat.view().cpu().numpy.view"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_list"], ["", "", "def", "save_features", "(", "dataset", ",", "idx", ",", "model", ",", "args", ",", "save_file_path", ")", ":", "\n", "    ", "name", "=", "dataset", ".", "get_list", "(", "idx", ")", "\n", "print", "(", "name", ")", "\n", "features", ",", "label", "=", "dataset", "[", "idx", "]", "\n", "features", "=", "features", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "type", "(", "model", ")", "==", "CLAM", ":", "\n", "            ", "_", ",", "Y_prob", ",", "Y_hat", ",", "_", ",", "results_dict", "=", "model", "(", "features", ",", "instance_eval", "=", "False", ",", "return_features", "=", "True", ")", "\n", "bag_feat", "=", "results_dict", "[", "'features'", "]", "[", "Y_hat", ".", "item", "(", ")", "]", "\n", "", "else", ":", "\n", "            ", "_", ",", "Y_prob", ",", "Y_hat", ",", "_", ",", "results_dict", "=", "model", "(", "features", ",", "return_features", "=", "True", ")", "\n", "bag_feat", "=", "results_dict", "[", "'features'", "]", "\n", "", "", "del", "features", "\n", "Y_hat", "=", "Y_hat", ".", "item", "(", ")", "\n", "Y_prob", "=", "Y_prob", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "bag_feat", "=", "bag_feat", ".", "view", "(", "1", ",", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "with", "h5py", ".", "File", "(", "save_file_path", ",", "'r+'", ")", "as", "file", ":", "\n", "        ", "print", "(", "'label'", ",", "label", ")", "\n", "file", "[", "'features'", "]", "[", "idx", ",", ":", "]", "=", "bag_feat", "\n", "file", "[", "'label'", "]", "[", "idx", "]", "=", "label", "\n", "file", "[", "'Y_hat'", "]", "[", "idx", "]", "=", "Y_hat", "\n", "file", "[", "'Y_prob'", "]", "[", "idx", "]", "=", "Y_prob", "[", "Y_hat", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.initialize_features_hdf5_file": [[233, 259], ["h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.close", "h5py.string_dtype", "h5py.File.create_dataset"], "function", ["None"], ["", "", "def", "initialize_features_hdf5_file", "(", "file_path", ",", "length", ",", "feature_dim", "=", "512", ",", "names", "=", "None", ")", ":", "\n", "\n", "    ", "file", "=", "h5py", ".", "File", "(", "file_path", ",", "\"w\"", ")", "\n", "\n", "dset", "=", "file", ".", "create_dataset", "(", "'features'", ",", "\n", "shape", "=", "(", "length", ",", "feature_dim", ")", ",", "chunks", "=", "(", "1", ",", "feature_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# if names is not None:", "\n", "#     names = np.array(names, dtype='S')", "\n", "#     dset.attrs['names'] = names", "\n", "if", "names", "is", "not", "None", ":", "\n", "        ", "dt", "=", "h5py", ".", "string_dtype", "(", ")", "\n", "label_dset", "=", "file", ".", "create_dataset", "(", "'names'", ",", "\n", "shape", "=", "(", "length", ",", ")", ",", "chunks", "=", "(", "1", ",", ")", ",", "dtype", "=", "dt", ")", "\n", "\n", "", "label_dset", "=", "file", ".", "create_dataset", "(", "'label'", ",", "\n", "shape", "=", "(", "length", ",", ")", ",", "chunks", "=", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "pred_dset", "=", "file", ".", "create_dataset", "(", "'Y_hat'", ",", "\n", "shape", "=", "(", "length", ",", ")", ",", "chunks", "=", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "prob_dset", "=", "file", ".", "create_dataset", "(", "'Y_prob'", ",", "\n", "shape", "=", "(", "length", ",", ")", ",", "chunks", "=", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "file", ".", "close", "(", ")", "\n", "return", "file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.eval2": [[262, 423], ["print", "os.path.join", "print", "save_splits", "print", "print", "print", "print", "print", "print", "print", "models.model_mil.MIL_fc.relocate", "print", "print_network", "torch.load", "torch.load", "torch.load", "models.model_mil.MIL_fc.load_state_dict", "models.model_mil.MIL_fc.eval", "print", "get_split_loader", "get_split_loader", "get_split_loader", "print", "str", "os.path.isdir", "os.mkdir", "SummaryWriter", "print", "GenomicVAE", "torch.load", "torch.load", "torch.load", "OrderedDict", "GenomicVAE.load_state_dict", "GenomicVAE.relocate", "dfs_freeze", "GenomicVAE.eval", "os.path.join", "model_dict.update", "os.path.join", "summary_survival", "print", "summary_survival", "print", "SummaryWriter.close", "len", "len", "len", "CrossEntropySurvLoss", "SmoothTop1SVM", "model_dict.update", "SummaryWriter.add_scalar", "SummaryWriter.add_scalar", "NLLSurvLoss", "CoxSurvLoss.cuda", "torch.CrossEntropyLoss", "SmoothTop1SVM", "torch.CrossEntropyLoss", "models.model_clam.CLAM", "CLAM_Simple", "MIL_Attention_fc_surv", "models.model_attention_mil.MIL_Attention_fc", "model_dict.update", "OrderedDict.items", "CoxSurvLoss", "instance_loss_fn.cuda.cuda", "MM_MIL_Attention_fc_surv", "MM_MIL_Attention_fc", "MaxNet", "models.model_mil.MIL_fc_mc", "models.model_mil.MIL_fc", "args.task.split"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.save_splits", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.MIL_Attention_fc.relocate", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.print_network", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.eval", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.get_split_loader", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.get_split_loader", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.get_split_loader", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.MIL_Attention_fc.relocate", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.dfs_freeze", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.eval", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.summary_survival", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.summary_survival"], ["", "def", "eval2", "(", "datasets", ":", "tuple", ",", "cur", ":", "int", ",", "args", ":", "Namespace", ")", ":", "\n", "    ", "\"\"\"   \n        train for a single fold\n    \"\"\"", "\n", "print", "(", "'\\nTraining Fold {}!'", ".", "format", "(", "cur", ")", ")", "\n", "writer_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "str", "(", "cur", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "writer_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "writer_dir", ")", "\n", "\n", "", "if", "args", ".", "log_data", ":", "\n", "        ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "writer", "=", "SummaryWriter", "(", "writer_dir", ",", "flush_secs", "=", "15", ")", "\n", "\n", "", "else", ":", "\n", "        ", "writer", "=", "None", "\n", "\n", "", "if", "args", ".", "pretrain_VAE", ":", "\n", "        ", "print", "(", "\"Initializing VAE\"", ")", "\n", "VAE", "=", "GenomicVAE", "(", "input_dim", "=", "args", ".", "omic_input_dim", ",", "hidden", "=", "[", "1024", ",", "256", ",", "128", "]", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "'./VAE/logs/tcga_base/000-all/%d/%d/%d_best.ckpt'", "%", "(", "cur", ",", "cur", ",", "cur", ")", ")", "\n", "state_dict", "=", "ckpt", "[", "'state_dict'", "]", "\n", "state_dict", "=", "OrderedDict", "(", "(", "k", "[", "6", ":", "]", ",", "v", ")", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ")", "\n", "VAE", ".", "load_state_dict", "(", "state_dict", ")", "\n", "args", ".", "omic_input_dim", "=", "128", "\n", "VAE", ".", "relocate", "(", ")", "\n", "dfs_freeze", "(", "VAE", ")", "\n", "VAE", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "VAE", "=", "None", "\n", "\n", "", "print", "(", "'\\nInit train/val/test splits...'", ",", "end", "=", "' '", ")", "\n", "train_split", ",", "val_split", ",", "test_split", "=", "datasets", "\n", "save_splits", "(", "datasets", ",", "[", "'train'", ",", "'val'", ",", "'test'", "]", ",", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "'splits_{}.csv'", ".", "format", "(", "cur", ")", ")", ")", "\n", "print", "(", "'Done!'", ")", "\n", "print", "(", "\"Training on {} samples\"", ".", "format", "(", "len", "(", "train_split", ")", ")", ")", "\n", "print", "(", "\"Validating on {} samples\"", ".", "format", "(", "len", "(", "val_split", ")", ")", ")", "\n", "print", "(", "\"Testing on {} samples\"", ".", "format", "(", "len", "(", "test_split", ")", ")", ")", "\n", "\n", "print", "(", "'\\nInit loss function...'", ",", "end", "=", "' '", ")", "\n", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "        ", "if", "args", ".", "bag_loss", "==", "'ce_surv'", ":", "\n", "            ", "loss_fn", "=", "CrossEntropySurvLoss", "(", "alpha", "=", "args", ".", "alpha_surv", ")", "\n", "", "elif", "args", ".", "bag_loss", "==", "'nll_surv'", ":", "\n", "            ", "loss_fn", "=", "NLLSurvLoss", "(", "alpha", "=", "args", ".", "alpha_surv", ")", "\n", "", "elif", "args", ".", "bag_loss", "==", "'cox_surv'", ":", "\n", "            ", "loss_fn", "=", "CoxSurvLoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "bag_loss", "==", "'svm'", ":", "\n", "            ", "from", "topk", "import", "SmoothTop1SVM", "\n", "loss_fn", "=", "SmoothTop1SVM", "(", "n_classes", "=", "args", ".", "n_classes", ")", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "                ", "loss_fn", "=", "loss_fn", ".", "cuda", "(", ")", "\n", "", "", "elif", "args", ".", "bag_loss", "==", "'ce'", ":", "\n", "            ", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "if", "args", ".", "reg_type", "==", "'omic'", ":", "\n", "        ", "reg_fn", "=", "l1_reg_all", "\n", "", "elif", "args", ".", "reg_type", "==", "'pathomic'", ":", "\n", "        ", "reg_fn", "=", "l1_reg_modules", "\n", "", "else", ":", "\n", "        ", "reg_fn", "=", "None", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n", "print", "(", "'\\nInit Model...'", ",", "end", "=", "' '", ")", "\n", "model_dict", "=", "{", "\"dropout\"", ":", "args", ".", "drop_out", ",", "'n_classes'", ":", "args", ".", "n_classes", "}", "\n", "if", "args", ".", "model_type", "in", "[", "'clam'", ",", "'clam_simple'", "]", "and", "args", ".", "subtyping", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "'subtyping'", ":", "True", "}", ")", "\n", "\n", "if", "args", ".", "model_size", "is", "not", "None", ":", "\n", "            ", "model_dict", ".", "update", "(", "{", "\"size_arg\"", ":", "args", ".", "model_size", "}", ")", "\n", "\n", "", "", "if", "args", ".", "model_type", "in", "[", "'clam'", ",", "'clam_simple'", "]", ":", "\n", "        ", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "inst_loss", "==", "'svm'", ":", "\n", "                ", "from", "topk", "import", "SmoothTop1SVM", "\n", "instance_loss_fn", "=", "SmoothTop1SVM", "(", "n_classes", "=", "2", ")", "\n", "if", "device", ".", "type", "==", "'cuda'", ":", "\n", "                    ", "instance_loss_fn", "=", "instance_loss_fn", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "instance_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "if", "args", ".", "model_type", "==", "'clam'", ":", "\n", "                ", "model", "=", "CLAM", "(", "**", "model_dict", ",", "instance_loss_fn", "=", "instance_loss_fn", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "CLAM_Simple", "(", "**", "model_dict", ",", "instance_loss_fn", "=", "instance_loss_fn", ")", "\n", "\n", "", "", "", "elif", "args", ".", "model_type", "==", "'attention_mil'", ":", "\n", "        ", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "            ", "model", "=", "MIL_Attention_fc_surv", "(", "**", "model_dict", ")", "\n", "# model.alpha.requires_grad = False", "\n", "", "else", ":", "\n", "            ", "model", "=", "MIL_Attention_fc", "(", "**", "model_dict", ")", "\n", "\n", "", "", "elif", "args", ".", "model_type", "==", "'mm_attention_mil'", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "'input_dim'", ":", "args", ".", "omic_input_dim", ",", "'meta_dim'", ":", "args", ".", "meta_dim", ",", "\n", "'fusion'", ":", "args", ".", "fusion", ",", "'model_size_wsi'", ":", "args", ".", "model_size_wsi", ",", "'model_size_omic'", ":", "args", ".", "model_size_omic", ",", "\n", "'gate_path'", ":", "args", ".", "gate_path", ",", "'gate_omic'", ":", "args", ".", "gate_omic", ",", "'n_classes'", ":", "args", ".", "n_classes", ",", "\n", "'pretrain'", ":", "args", ".", "pretrain", ",", "'tcga_proj'", ":", "'_'", ".", "join", "(", "args", ".", "task", ".", "split", "(", "'_'", ")", "[", ":", "2", "]", ")", ",", "'split_idx'", ":", "cur", "}", ")", "\n", "\n", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "            ", "model", "=", "MM_MIL_Attention_fc_surv", "(", "**", "model_dict", ")", "\n", "# model.alpha.requires_grad = False", "\n", "", "else", ":", "\n", "            ", "model", "=", "MM_MIL_Attention_fc", "(", "**", "model_dict", ")", "\n", "\n", "", "", "elif", "args", ".", "model_type", "==", "'max_net'", ":", "\n", "        ", "model_dict", "=", "{", "'input_dim'", ":", "args", ".", "omic_input_dim", ",", "'meta_dim'", ":", "args", ".", "meta_dim", ",", "'model_size_omic'", ":", "args", ".", "model_size_omic", ",", "'n_classes'", ":", "args", ".", "n_classes", "}", "\n", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "            ", "model", "=", "MaxNet", "(", "**", "model_dict", ")", "\n", "# model.alpha.requires_grad = False", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "else", ":", "# args.model_type == 'mil'", "\n", "        ", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "n_classes", ">", "2", ":", "\n", "                ", "model", "=", "MIL_fc_mc", "(", "**", "model_dict", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "MIL_fc", "(", "**", "model_dict", ")", "\n", "\n", "", "", "", "model", ".", "relocate", "(", ")", "\n", "print", "(", "'Done!'", ")", "\n", "print_network", "(", "model", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "\"s_{}_checkpoint.pt\"", ".", "format", "(", "cur", ")", ")", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", ",", "strict", "=", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "print", "(", "'\\nInit Loaders...'", ",", "end", "=", "' '", ")", "\n", "train_loader", "=", "get_split_loader", "(", "train_split", ",", "training", "=", "True", ",", "testing", "=", "args", ".", "testing", ",", "\n", "weighted", "=", "args", ".", "weighted_sample", ",", "task_type", "=", "args", ".", "task_type", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "val_loader", "=", "get_split_loader", "(", "val_split", ",", "testing", "=", "args", ".", "testing", ",", "task_type", "=", "args", ".", "task_type", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "test_loader", "=", "get_split_loader", "(", "test_split", ",", "testing", "=", "args", ".", "testing", ",", "task_type", "=", "args", ".", "task_type", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n", "\n", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "        ", "results_val_dict", ",", "val_c_index", "=", "summary_survival", "(", "model", ",", "val_loader", ",", "args", ".", "n_classes", ",", "VAE", ")", "\n", "print", "(", "'Val c-index: {:.4f}'", ".", "format", "(", "val_c_index", ")", ")", "\n", "\n", "results_test_dict", ",", "test_c_index", "=", "summary_survival", "(", "model", ",", "test_loader", ",", "args", ".", "n_classes", ",", "VAE", ")", "\n", "print", "(", "'Test c-index: {:.4f}'", ".", "format", "(", "test_c_index", ")", ")", "\n", "\n", "if", "writer", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'final/val_c_index'", ",", "val_c_index", ",", "0", ")", "\n", "writer", ".", "add_scalar", "(", "'final/test_c_index'", ",", "test_c_index", ",", "0", ")", "\n", "\n", "", "writer", ".", "close", "(", ")", "\n", "return", "results_val_dict", ",", "results_test_dict", ",", "val_c_index", ",", "test_c_index", "\n", "\n", "", "elif", "args", ".", "task_type", "==", "'classification'", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.SubsetSequentialSampler.__init__": [[26, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.SubsetSequentialSampler.__iter__": [[29, 31], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.SubsetSequentialSampler.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.CrossEntropySurvLoss.__init__": [[275, 277], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.15", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.CrossEntropySurvLoss.__call__": [[278, 283], ["utils.ce_loss", "utils.ce_loss"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.ce_loss", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.ce_loss"], ["", "def", "__call__", "(", "self", ",", "hazards", ",", "S", ",", "Y", ",", "c", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "if", "alpha", "is", "None", ":", "\n", "            ", "return", "ce_loss", "(", "hazards", ",", "S", ",", "Y", ",", "c", ",", "alpha", "=", "self", ".", "alpha", ")", "\n", "", "else", ":", "\n", "            ", "return", "ce_loss", "(", "hazards", ",", "S", ",", "Y", ",", "c", ",", "alpha", "=", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.NLLSurvLoss.__init__": [[285, 287], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "0.15", ")", ":", "\n", "        ", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.NLLSurvLoss.__call__": [[288, 293], ["utils.nll_loss", "utils.nll_loss"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.nll_loss", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.nll_loss"], ["", "def", "__call__", "(", "self", ",", "hazards", ",", "S", ",", "Y", ",", "c", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "if", "alpha", "is", "None", ":", "\n", "            ", "return", "nll_loss", "(", "hazards", ",", "S", ",", "Y", ",", "c", ",", "alpha", "=", "self", ".", "alpha", ")", "\n", "", "else", ":", "\n", "            ", "return", "nll_loss", "(", "hazards", ",", "S", ",", "Y", ",", "c", ",", "alpha", "=", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.CoxSurvLoss.__call__": [[295, 309], ["len", "numpy.zeros", "numpy.zeros", "range", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "hazards.reshape", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log"], ["    ", "def", "__call__", "(", "hazards", ",", "S", ",", "c", ",", "**", "kwargs", ")", ":", "\n", "# This calculation credit to Travers Ching https://github.com/traversc/cox-nnet", "\n", "# Cox-nnet: An artificial neural network method for prognosis prediction of high-throughput omics data", "\n", "        ", "current_batch_len", "=", "len", "(", "S", ")", "\n", "R_mat", "=", "np", ".", "zeros", "(", "[", "current_batch_len", ",", "current_batch_len", "]", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "current_batch_len", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "current_batch_len", ")", ":", "\n", "                ", "R_mat", "[", "i", ",", "j", "]", "=", "S", "[", "j", "]", ">=", "S", "[", "i", "]", "\n", "\n", "", "", "R_mat", "=", "torch", ".", "FloatTensor", "(", "R_mat", ")", ".", "to", "(", "device", ")", "\n", "theta", "=", "hazards", ".", "reshape", "(", "-", "1", ")", "\n", "exp_theta", "=", "torch", ".", "exp", "(", "theta", ")", "\n", "loss_cox", "=", "-", "torch", ".", "mean", "(", "(", "theta", "-", "torch", ".", "log", "(", "torch", ".", "sum", "(", "exp_theta", "*", "R_mat", ",", "dim", "=", "1", ")", ")", ")", "*", "(", "1", "-", "c", ")", ")", "\n", "return", "loss_cox", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.collate_MIL": [[35, 39], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "", "def", "collate_MIL", "(", "batch", ")", ":", "\n", "    ", "img", "=", "torch", ".", "cat", "(", "[", "item", "[", "0", "]", "for", "item", "in", "batch", "]", ",", "dim", "=", "0", ")", "\n", "label", "=", "torch", ".", "LongTensor", "(", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", ")", "\n", "return", "[", "img", ",", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.collate_features": [[40, 44], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.vstack"], "function", ["None"], ["", "def", "collate_features", "(", "batch", ")", ":", "\n", "    ", "img", "=", "torch", ".", "cat", "(", "[", "item", "[", "0", "]", "for", "item", "in", "batch", "]", ",", "dim", "=", "0", ")", "\n", "coords", "=", "np", ".", "vstack", "(", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", ")", "\n", "return", "[", "img", ",", "coords", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.collate_MIL_survival": [[45, 52], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().type", "torch.cat().type", "torch.cat().type", "torch.cat().type", "torch.cat().type", "torch.cat().type", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.array", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "collate_MIL_survival", "(", "batch", ")", ":", "\n", "    ", "img", "=", "torch", ".", "cat", "(", "[", "item", "[", "0", "]", "for", "item", "in", "batch", "]", ",", "dim", "=", "0", ")", "\n", "omic", "=", "torch", ".", "cat", "(", "[", "item", "[", "1", "]", "for", "item", "in", "batch", "]", ",", "dim", "=", "0", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "label", "=", "torch", ".", "LongTensor", "(", "[", "item", "[", "2", "]", "for", "item", "in", "batch", "]", ")", "\n", "event_time", "=", "np", ".", "array", "(", "[", "item", "[", "3", "]", "for", "item", "in", "batch", "]", ")", "\n", "c", "=", "torch", ".", "FloatTensor", "(", "[", "item", "[", "4", "]", "for", "item", "in", "batch", "]", ")", "\n", "return", "[", "img", ",", "omic", ",", "label", ",", "event_time", ",", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.get_simple_loader": [[54, 58], ["torch.utils.data.DataLoader", "torch.utils.data.sampler.SequentialSampler"], "function", ["None"], ["", "def", "get_simple_loader", "(", "dataset", ",", "batch_size", "=", "1", ")", ":", "\n", "    ", "kwargs", "=", "{", "'num_workers'", ":", "4", "}", "if", "device", ".", "type", "==", "\"cuda\"", "else", "{", "}", "\n", "loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "sampler", ".", "SequentialSampler", "(", "dataset", ")", ",", "collate_fn", "=", "collate_MIL", ",", "**", "kwargs", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.get_split_loader": [[59, 86], ["numpy.random.choice", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "numpy.arange", "utils.make_weights_for_balanced_classes_split", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "int", "utils.SubsetSequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.WeightedRandomSampler", "torch.utils.data.RandomSampler", "len", "len"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.make_weights_for_balanced_classes_split"], ["", "def", "get_split_loader", "(", "split_dataset", ",", "training", "=", "False", ",", "testing", "=", "False", ",", "weighted", "=", "False", ",", "task_type", "=", "'classification'", ",", "batch_size", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n        return either the validation loader or training loader \n    \"\"\"", "\n", "if", "task_type", "==", "'classification'", ":", "\n", "        ", "collate", "=", "collate_MIL", "\n", "", "elif", "task_type", "==", "'survival'", ":", "\n", "        ", "collate", "=", "collate_MIL_survival", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "kwargs", "=", "{", "'num_workers'", ":", "4", "}", "if", "device", ".", "type", "==", "\"cuda\"", "else", "{", "}", "\n", "if", "not", "testing", ":", "\n", "        ", "if", "training", ":", "\n", "            ", "if", "weighted", ":", "\n", "                ", "weights", "=", "make_weights_for_balanced_classes_split", "(", "split_dataset", ")", "\n", "loader", "=", "DataLoader", "(", "split_dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "WeightedRandomSampler", "(", "weights", ",", "len", "(", "weights", ")", ")", ",", "collate_fn", "=", "collate", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                ", "loader", "=", "DataLoader", "(", "split_dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "RandomSampler", "(", "split_dataset", ")", ",", "collate_fn", "=", "collate", ",", "**", "kwargs", ")", "\n", "", "", "else", ":", "\n", "            ", "loader", "=", "DataLoader", "(", "split_dataset", ",", "batch_size", "=", "batch_size", ",", "sampler", "=", "SequentialSampler", "(", "split_dataset", ")", ",", "collate_fn", "=", "collate", ",", "**", "kwargs", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "ids", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "len", "(", "split_dataset", ")", ",", "int", "(", "len", "(", "split_dataset", ")", "*", "0.1", ")", ")", ",", "replace", "=", "False", ")", "\n", "loader", "=", "DataLoader", "(", "split_dataset", ",", "batch_size", "=", "1", ",", "sampler", "=", "SubsetSequentialSampler", "(", "ids", ")", ",", "collate_fn", "=", "collate", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.get_optim": [[87, 95], ["torch.Adam", "filter", "torch.SGD", "model.parameters", "filter", "model.parameters"], "function", ["None"], ["", "def", "get_optim", "(", "model", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "opt", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "reg", ")", "\n", "", "elif", "args", ".", "opt", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "reg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.print_network": [[96, 109], ["print", "net.parameters", "print", "print", "param.numel"], "function", ["None"], ["", "def", "print_network", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "num_params_train", "=", "0", "\n", "print", "(", "net", ")", "\n", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "n", "=", "param", ".", "numel", "(", ")", "\n", "num_params", "+=", "n", "\n", "if", "param", ".", "requires_grad", ":", "\n", "            ", "num_params_train", "+=", "n", "\n", "\n", "", "", "print", "(", "'Total number of parameters: %d'", "%", "num_params", ")", "\n", "print", "(", "'Total number of trainable parameters: %d'", "%", "num_params_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.generate_split": [[111, 152], ["numpy.arange().astype", "pdb.set_trace", "pdb.set_trace", "numpy.random.seed", "range", "numpy.setdiff1d", "range", "numpy.arange", "all_test_ids.extend", "len", "numpy.intersect1d", "numpy.random.choice", "numpy.setdiff1d", "all_val_ids.extend", "numpy.random.choice", "numpy.setdiff1d", "all_test_ids.extend", "sampled_train_ids.extend", "math.ceil", "numpy.arange", "sampled_train_ids.extend", "sorted", "sorted", "sorted", "len"], "function", ["None"], ["", "def", "generate_split", "(", "cls_ids", ",", "val_num", ",", "test_num", ",", "samples", ",", "n_splits", "=", "5", ",", "\n", "seed", "=", "7", ",", "label_frac", "=", "1.0", ",", "custom_test_ids", "=", "None", ")", ":", "\n", "    ", "indices", "=", "np", ".", "arange", "(", "samples", ")", ".", "astype", "(", "int", ")", "\n", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "if", "custom_test_ids", "is", "not", "None", ":", "\n", "        ", "indices", "=", "np", ".", "setdiff1d", "(", "indices", ",", "custom_test_ids", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "for", "i", "in", "range", "(", "n_splits", ")", ":", "\n", "        ", "all_val_ids", "=", "[", "]", "\n", "all_test_ids", "=", "[", "]", "\n", "sampled_train_ids", "=", "[", "]", "\n", "\n", "if", "custom_test_ids", "is", "not", "None", ":", "# pre-built test split, do not need to sample", "\n", "            ", "all_test_ids", ".", "extend", "(", "custom_test_ids", ")", "\n", "\n", "", "for", "c", "in", "range", "(", "len", "(", "val_num", ")", ")", ":", "\n", "            ", "possible_indices", "=", "np", ".", "intersect1d", "(", "cls_ids", "[", "c", "]", ",", "indices", ")", "#all indices of this class", "\n", "remaining_ids", "=", "possible_indices", "\n", "\n", "if", "val_num", "[", "c", "]", ">", "0", ":", "\n", "                ", "val_ids", "=", "np", ".", "random", ".", "choice", "(", "possible_indices", ",", "val_num", "[", "c", "]", ",", "replace", "=", "False", ")", "# validation ids", "\n", "remaining_ids", "=", "np", ".", "setdiff1d", "(", "possible_indices", ",", "val_ids", ")", "#indices of this class left after validation", "\n", "all_val_ids", ".", "extend", "(", "val_ids", ")", "\n", "\n", "", "if", "custom_test_ids", "is", "None", "and", "test_num", "[", "c", "]", ">", "0", ":", "# sample test split", "\n", "\n", "                ", "test_ids", "=", "np", ".", "random", ".", "choice", "(", "remaining_ids", ",", "test_num", "[", "c", "]", ",", "replace", "=", "False", ")", "\n", "remaining_ids", "=", "np", ".", "setdiff1d", "(", "remaining_ids", ",", "test_ids", ")", "\n", "all_test_ids", ".", "extend", "(", "test_ids", ")", "\n", "\n", "", "if", "label_frac", "==", "1", ":", "\n", "                ", "sampled_train_ids", ".", "extend", "(", "remaining_ids", ")", "\n", "\n", "", "else", ":", "\n", "                ", "sample_num", "=", "math", ".", "ceil", "(", "len", "(", "remaining_ids", ")", "*", "label_frac", ")", "\n", "slice_ids", "=", "np", ".", "arange", "(", "sample_num", ")", "\n", "sampled_train_ids", ".", "extend", "(", "remaining_ids", "[", "slice_ids", "]", ")", "\n", "\n", "", "", "yield", "sorted", "(", "sampled_train_ids", ")", ",", "sorted", "(", "all_val_ids", ")", ",", "sorted", "(", "all_test_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.nth": [[154, 159], ["collections.deque", "next", "itertools.islice"], "function", ["None"], ["", "", "def", "nth", "(", "iterator", ",", "n", ",", "default", "=", "None", ")", ":", "\n", "    ", "if", "n", "is", "None", ":", "\n", "        ", "return", "collections", ".", "deque", "(", "iterator", ",", "maxlen", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "next", "(", "islice", "(", "iterator", ",", "n", ",", "None", ")", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.calculate_error": [[160, 164], ["Y_hat.float().eq().float().mean().item", "Y_hat.float().eq().float().mean", "Y_hat.float().eq().float", "Y_hat.float().eq", "Y.float", "Y_hat.float"], "function", ["None"], ["", "", "def", "calculate_error", "(", "Y_hat", ",", "Y", ")", ":", "\n", "    ", "error", "=", "1.", "-", "Y_hat", ".", "float", "(", ")", ".", "eq", "(", "Y", ".", "float", "(", ")", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "return", "error", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.make_weights_for_balanced_classes_split": [[165, 174], ["float", "range", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "len", "int", "len", "dataset.getlabel", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.getlabel"], ["", "def", "make_weights_for_balanced_classes_split", "(", "dataset", ")", ":", "\n", "    ", "N", "=", "float", "(", "len", "(", "dataset", ")", ")", "\n", "weight_per_class", "=", "[", "N", "/", "len", "(", "dataset", ".", "slide_cls_ids", "[", "c", "]", ")", "for", "c", "in", "range", "(", "len", "(", "dataset", ".", "slide_cls_ids", ")", ")", "]", "\n", "weight", "=", "[", "0", "]", "*", "int", "(", "N", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "y", "=", "dataset", ".", "getlabel", "(", "idx", ")", "\n", "weight", "[", "idx", "]", "=", "weight_per_class", "[", "y", "]", "\n", "\n", "", "return", "torch", ".", "DoubleTensor", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.initialize_weights": [[175, 184], ["module.modules", "isinstance", "torch.init.xavier_normal_", "m.bias.data.zero_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["", "def", "initialize_weights", "(", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.dfs_freeze": [[186, 191], ["model.named_children", "child.parameters", "utils.dfs_freeze"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.dfs_freeze"], ["", "", "", "def", "dfs_freeze", "(", "model", ")", ":", "\n", "    ", "for", "name", ",", "child", "in", "model", ".", "named_children", "(", ")", ":", "\n", "        ", "for", "param", "in", "child", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "dfs_freeze", "(", "child", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.dfs_unfreeze": [[193, 198], ["model.named_children", "child.parameters", "utils.dfs_unfreeze"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.dfs_unfreeze"], ["", "", "def", "dfs_unfreeze", "(", "model", ")", ":", "\n", "    ", "for", "name", ",", "child", "in", "model", ".", "named_children", "(", ")", ":", "\n", "        ", "for", "param", "in", "child", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "dfs_unfreeze", "(", "child", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.nll_loss": [[239, 256], ["len", "Y.view.view", "c.view().float.view().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "loss.mean.mean", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "c.view().float.view", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log"], ["def", "nll_loss", "(", "hazards", ",", "S", ",", "Y", ",", "c", ",", "alpha", "=", "0.4", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "batch_size", "=", "len", "(", "Y", ")", "\n", "Y", "=", "Y", ".", "view", "(", "batch_size", ",", "1", ")", "# ground truth bin, 1,2,...,k", "\n", "c", "=", "c", ".", "view", "(", "batch_size", ",", "1", ")", ".", "float", "(", ")", "#censorship status, 0 or 1", "\n", "if", "S", "is", "None", ":", "\n", "        ", "S", "=", "torch", ".", "cumprod", "(", "1", "-", "hazards", ",", "dim", "=", "1", ")", "# surival is cumulative product of 1 - hazards", "\n", "# without padding, S(0) = S[0], h(0) = h[0]", "\n", "", "S_padded", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "c", ")", ",", "S", "]", ",", "1", ")", "#S(-1) = 0, all patients are alive from (-inf, 0) by definition", "\n", "# after padding, S(0) = S[1], S(1) = S[2], etc, h(0) = h[0]", "\n", "#h[y] = h(1)", "\n", "#S[1] = S(1)", "\n", "uncensored_loss", "=", "-", "(", "1", "-", "c", ")", "*", "(", "torch", ".", "log", "(", "torch", ".", "gather", "(", "S_padded", ",", "1", ",", "Y", ")", ".", "clamp", "(", "min", "=", "eps", ")", ")", "+", "torch", ".", "log", "(", "torch", ".", "gather", "(", "hazards", ",", "1", ",", "Y", ")", ".", "clamp", "(", "min", "=", "eps", ")", ")", ")", "\n", "censored_loss", "=", "-", "c", "*", "torch", ".", "log", "(", "torch", ".", "gather", "(", "S_padded", ",", "1", ",", "Y", "+", "1", ")", ".", "clamp", "(", "min", "=", "eps", ")", ")", "\n", "neg_l", "=", "censored_loss", "+", "uncensored_loss", "\n", "loss", "=", "(", "1", "-", "alpha", ")", "*", "neg_l", "+", "alpha", "*", "uncensored_loss", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.ce_loss": [[257, 273], ["len", "Y.view.view", "c.view().float.view().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "loss.mean.mean", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "c.view().float.view", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather().clamp", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log"], ["", "def", "ce_loss", "(", "hazards", ",", "S", ",", "Y", ",", "c", ",", "alpha", "=", "0.4", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "batch_size", "=", "len", "(", "Y", ")", "\n", "Y", "=", "Y", ".", "view", "(", "batch_size", ",", "1", ")", "# ground truth bin, 1,2,...,k", "\n", "c", "=", "c", ".", "view", "(", "batch_size", ",", "1", ")", ".", "float", "(", ")", "#censorship status, 0 or 1", "\n", "if", "S", "is", "None", ":", "\n", "        ", "S", "=", "torch", ".", "cumprod", "(", "1", "-", "hazards", ",", "dim", "=", "1", ")", "# surival is cumulative product of 1 - hazards", "\n", "# without padding, S(0) = S[0], h(0) = h[0]", "\n", "# after padding, S(0) = S[1], S(1) = S[2], etc, h(0) = h[0]", "\n", "#h[y] = h(1)", "\n", "#S[1] = S(1)", "\n", "", "S_padded", "=", "torch", ".", "cat", "(", "[", "torch", ".", "ones_like", "(", "c", ")", ",", "S", "]", ",", "1", ")", "\n", "reg", "=", "-", "(", "1", "-", "c", ")", "*", "(", "torch", ".", "log", "(", "torch", ".", "gather", "(", "S_padded", ",", "1", ",", "Y", ")", "+", "eps", ")", "+", "torch", ".", "log", "(", "torch", ".", "gather", "(", "hazards", ",", "1", ",", "Y", ")", ".", "clamp", "(", "min", "=", "eps", ")", ")", ")", "\n", "ce_l", "=", "-", "c", "*", "torch", ".", "log", "(", "torch", ".", "gather", "(", "S", ",", "1", ",", "Y", ")", ".", "clamp", "(", "min", "=", "eps", ")", ")", "-", "(", "1", "-", "c", ")", "*", "torch", ".", "log", "(", "1", "-", "torch", ".", "gather", "(", "S", ",", "1", ",", "Y", ")", ".", "clamp", "(", "min", "=", "eps", ")", ")", "\n", "loss", "=", "(", "1", "-", "alpha", ")", "*", "ce_l", "+", "alpha", "*", "reg", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.l1_reg_all": [[310, 319], ["model.parameters", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs().sum", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "", "def", "l1_reg_all", "(", "model", ",", "reg_type", "=", "None", ")", ":", "\n", "    ", "l1_reg", "=", "None", "\n", "\n", "for", "W", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "l1_reg", "is", "None", ":", "\n", "            ", "l1_reg", "=", "torch", ".", "abs", "(", "W", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "l1_reg", "=", "l1_reg", "+", "torch", ".", "abs", "(", "W", ")", ".", "sum", "(", ")", "# torch.abs(W).sum() is equivalent to W.norm(1)", "\n", "", "", "return", "l1_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.l1_reg_modules": [[320, 327], ["utils.l1_reg_all", "utils.l1_reg_all"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.l1_reg_all", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.l1_reg_all"], ["", "def", "l1_reg_modules", "(", "model", ",", "reg_type", "=", "None", ")", ":", "\n", "    ", "l1_reg", "=", "0", "\n", "\n", "l1_reg", "+=", "l1_reg_all", "(", "model", ".", "fc_omic", ")", "\n", "l1_reg", "+=", "l1_reg_all", "(", "model", ".", "mm", ")", "\n", "\n", "return", "l1_reg", "\n", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.__init__": [[22, 26], ["object.__init__", "core_utils.Accuracy_Logger.initialize"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.initialize"], ["def", "__init__", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "super", "(", "Accuracy_Logger", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.initialize": [[27, 29], ["range"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "self", ".", "data", "=", "[", "{", "\"count\"", ":", "0", ",", "\"correct\"", ":", "0", "}", "for", "i", "in", "range", "(", "self", ".", "n_classes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log": [[30, 35], ["int", "int"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "Y_hat", ",", "Y", ")", ":", "\n", "        ", "Y_hat", "=", "int", "(", "Y_hat", ")", "\n", "Y", "=", "int", "(", "Y", ")", "\n", "self", ".", "data", "[", "Y", "]", "[", "\"count\"", "]", "+=", "1", "\n", "self", ".", "data", "[", "Y", "]", "[", "\"correct\"", "]", "+=", "(", "Y_hat", "==", "Y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.log_batch": [[36, 39], ["None"], "methods", ["None"], ["", "def", "log_batch", "(", "self", ",", "count", ",", "correct", ",", "c", ")", ":", "\n", "        ", "self", ".", "data", "[", "c", "]", "[", "\"count\"", "]", "+=", "count", "\n", "self", ".", "data", "[", "c", "]", "[", "\"correct\"", "]", "+=", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Accuracy_Logger.get_summary": [[40, 50], ["float"], "methods", ["None"], ["", "def", "get_summary", "(", "self", ",", "c", ")", ":", "\n", "        ", "count", "=", "self", ".", "data", "[", "c", "]", "[", "\"count\"", "]", "\n", "correct", "=", "self", ".", "data", "[", "c", "]", "[", "\"correct\"", "]", "\n", "\n", "if", "count", "==", "0", ":", "\n", "            ", "acc", "=", "None", "\n", "", "else", ":", "\n", "            ", "acc", "=", "float", "(", "correct", ")", "/", "count", "\n", "\n", "", "return", "acc", ",", "correct", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.EarlyStopping.__init__": [[54, 71], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "warmup", "=", "5", ",", "patience", "=", "15", ",", "stop_epoch", "=", "20", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 20\n            stop_epoch (int): Earliest epoch possible for stopping\n            verbose (bool): If True, prints a message for each validation loss improvement. \n                            Default: False\n        \"\"\"", "\n", "self", ".", "warmup", "=", "warmup", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "stop_epoch", "=", "stop_epoch", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "None", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_loss_min", "=", "np", ".", "Inf", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.EarlyStopping.__call__": [[72, 90], ["core_utils.EarlyStopping.save_checkpoint", "print", "core_utils.EarlyStopping.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Monitor_CIndex.save_checkpoint", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Monitor_CIndex.save_checkpoint"], ["", "def", "__call__", "(", "self", ",", "epoch", ",", "val_loss", ",", "model", ",", "ckpt_name", "=", "'checkpoint.pt'", ")", ":", "\n", "\n", "        ", "score", "=", "-", "val_loss", "\n", "\n", "if", "epoch", "<", "self", ".", "warmup", ":", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "best_score", "is", "None", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ",", "ckpt_name", ")", "\n", "", "elif", "score", "<", "self", ".", "best_score", ":", "\n", "            ", "self", ".", "counter", "+=", "1", "\n", "print", "(", "f'EarlyStopping counter: {self.counter} out of {self.patience}'", ")", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", "and", "epoch", ">", "self", ".", "stop_epoch", ":", "\n", "                ", "self", ".", "early_stop", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ",", "ckpt_name", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.EarlyStopping.save_checkpoint": [[91, 97], ["torch.save", "print", "model.state_dict"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "val_loss", ",", "model", ",", "ckpt_name", ")", ":", "\n", "        ", "'''Saves model when validation loss decrease.'''", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "f'Validation loss decreased ({self.val_loss_min:.6f} --> {val_loss:.6f}).  Saving model ...'", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_name", ")", "\n", "self", ".", "val_loss_min", "=", "val_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Monitor_CIndex.__init__": [[101, 111], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 20\n            stop_epoch (int): Earliest epoch possible for stopping\n            verbose (bool): If True, prints a message for each validation loss improvement. \n                            Default: False\n        \"\"\"", "\n", "self", ".", "best_score", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Monitor_CIndex.__call__": [[112, 124], ["core_utils.Monitor_CIndex.save_checkpoint", "core_utils.Monitor_CIndex.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Monitor_CIndex.save_checkpoint", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Monitor_CIndex.save_checkpoint"], ["", "def", "__call__", "(", "self", ",", "val_cindex", ",", "model", ",", "ckpt_name", ":", "str", "=", "'checkpoint.pt'", ")", ":", "\n", "\n", "        ", "score", "=", "val_cindex", "\n", "\n", "if", "self", ".", "best_score", "is", "None", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "model", ",", "ckpt_name", ")", "\n", "", "elif", "score", ">", "self", ".", "best_score", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "model", ",", "ckpt_name", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.Monitor_CIndex.save_checkpoint": [[125, 128], ["torch.save", "model.state_dict"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "model", ",", "ckpt_name", ")", ":", "\n", "        ", "'''Saves model when validation loss decrease.'''", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.train": [[130, 240], ["print", "os.path.join", "print", "datasets.dataset_generic.save_splits", "print", "print", "print", "print", "print", "print", "models.model_genomic.MaxNet.relocate", "print", "print_network", "print", "get_optim", "print", "print", "get_split_loader", "get_split_loader", "print", "print", "print", "core_utils.Monitor_CIndex", "print", "range", "torch.save", "models.model_genomic.MaxNet.load_state_dict", "core_utils.summary_survival", "print", "SummaryWriter.close", "str", "os.path.isdir", "os.mkdir", "SummaryWriter", "os.path.join", "core_utils.EarlyStopping", "models.model_genomic.MaxNet.state_dict", "os.path.join", "torch.load", "len", "len", "CrossEntropySurvLoss", "models.model_attention_mil.MIL_Attention_fc_surv", "model_dict.update", "core_utils.train_loop_survival", "core_utils.validate_survival", "os.path.join", "NLLSurvLoss", "models.model_mm_attention_mil.MM_MIL_Attention_fc_surv", "CoxSurvLoss", "models.model_genomic.MaxNet"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.save_splits", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.MIL_Attention_fc.relocate", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.print_network", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.get_optim", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.get_split_loader", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.get_split_loader", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.summary_survival", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.train_loop_survival", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.validate_survival"], ["", "", "def", "train", "(", "datasets", ":", "tuple", ",", "cur", ":", "int", ",", "args", ":", "Namespace", ")", ":", "\n", "    ", "\"\"\"   \n        train for a single fold\n    \"\"\"", "\n", "print", "(", "'\\nTraining Fold {}!'", ".", "format", "(", "cur", ")", ")", "\n", "writer_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "str", "(", "cur", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "writer_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "writer_dir", ")", "\n", "\n", "", "if", "args", ".", "log_data", ":", "\n", "        ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "writer", "=", "SummaryWriter", "(", "writer_dir", ",", "flush_secs", "=", "15", ")", "\n", "\n", "", "else", ":", "\n", "        ", "writer", "=", "None", "\n", "\n", "\n", "", "print", "(", "'\\nInit train/val/test splits...'", ",", "end", "=", "' '", ")", "\n", "train_split", ",", "val_split", "=", "datasets", "\n", "save_splits", "(", "datasets", ",", "[", "'train'", ",", "'val'", "]", ",", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "'splits_{}.csv'", ".", "format", "(", "cur", ")", ")", ")", "\n", "print", "(", "'Done!'", ")", "\n", "print", "(", "\"Training on {} samples\"", ".", "format", "(", "len", "(", "train_split", ")", ")", ")", "\n", "print", "(", "\"Validating on {} samples\"", ".", "format", "(", "len", "(", "val_split", ")", ")", ")", "\n", "\n", "print", "(", "'\\nInit loss function...'", ",", "end", "=", "' '", ")", "\n", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "        ", "if", "args", ".", "bag_loss", "==", "'ce_surv'", ":", "\n", "            ", "loss_fn", "=", "CrossEntropySurvLoss", "(", "alpha", "=", "args", ".", "alpha_surv", ")", "\n", "", "elif", "args", ".", "bag_loss", "==", "'nll_surv'", ":", "\n", "            ", "loss_fn", "=", "NLLSurvLoss", "(", "alpha", "=", "args", ".", "alpha_surv", ")", "\n", "", "elif", "args", ".", "bag_loss", "==", "'cox_surv'", ":", "\n", "            ", "loss_fn", "=", "CoxSurvLoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "args", ".", "reg_type", "==", "'omic'", ":", "\n", "        ", "reg_fn", "=", "l1_reg_all", "\n", "", "elif", "args", ".", "reg_type", "==", "'pathomic'", ":", "\n", "        ", "reg_fn", "=", "l1_reg_modules", "\n", "", "else", ":", "\n", "        ", "reg_fn", "=", "None", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n", "print", "(", "'\\nInit Model...'", ",", "end", "=", "' '", ")", "\n", "model_dict", "=", "{", "\"dropout\"", ":", "args", ".", "drop_out", ",", "'n_classes'", ":", "args", ".", "n_classes", "}", "\n", "\n", "if", "args", ".", "model_type", "==", "'attention_mil'", ":", "\n", "        ", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "            ", "model", "=", "MIL_Attention_fc_surv", "(", "**", "model_dict", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "elif", "args", ".", "model_type", "==", "'mm_attention_mil'", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "'input_dim'", ":", "args", ".", "omic_input_dim", ",", "'fusion'", ":", "args", ".", "fusion", ",", "\n", "'model_size_wsi'", ":", "args", ".", "model_size_wsi", ",", "'model_size_omic'", ":", "args", ".", "model_size_omic", ",", "\n", "'gate_path'", ":", "args", ".", "gate_path", ",", "'gate_omic'", ":", "args", ".", "gate_omic", ",", "'n_classes'", ":", "args", ".", "n_classes", "}", ")", "\n", "\n", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "            ", "model", "=", "MM_MIL_Attention_fc_surv", "(", "**", "model_dict", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "elif", "args", ".", "model_type", "==", "'max_net'", ":", "\n", "        ", "model_dict", "=", "{", "'input_dim'", ":", "args", ".", "omic_input_dim", ",", "\n", "'model_size_omic'", ":", "args", ".", "model_size_omic", ",", "'n_classes'", ":", "args", ".", "n_classes", "}", "\n", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "            ", "model", "=", "MaxNet", "(", "**", "model_dict", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "model", ".", "relocate", "(", ")", "\n", "print", "(", "'Done!'", ")", "\n", "print_network", "(", "model", ")", "\n", "\n", "print", "(", "'\\nInit optimizer ...'", ",", "end", "=", "' '", ")", "\n", "optimizer", "=", "get_optim", "(", "model", ",", "args", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n", "print", "(", "'\\nInit Loaders...'", ",", "end", "=", "' '", ")", "\n", "train_loader", "=", "get_split_loader", "(", "train_split", ",", "training", "=", "True", ",", "testing", "=", "args", ".", "testing", ",", "\n", "weighted", "=", "args", ".", "weighted_sample", ",", "task_type", "=", "args", ".", "task_type", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "val_loader", "=", "get_split_loader", "(", "val_split", ",", "testing", "=", "args", ".", "testing", ",", "task_type", "=", "args", ".", "task_type", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n", "print", "(", "'\\nSetup EarlyStopping...'", ",", "end", "=", "' '", ")", "\n", "if", "args", ".", "early_stopping", ":", "\n", "        ", "early_stopping", "=", "EarlyStopping", "(", "warmup", "=", "0", ",", "patience", "=", "10", ",", "stop_epoch", "=", "20", ",", "verbose", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "        ", "early_stopping", "=", "None", "\n", "\n", "", "print", "(", "'\\nSetup Validation C-Index Monitor...'", ",", "end", "=", "' '", ")", "\n", "monitor_cindex", "=", "Monitor_CIndex", "(", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "max_epochs", ")", ":", "\n", "        ", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "            ", "train_loop_survival", "(", "epoch", ",", "model", ",", "train_loader", ",", "optimizer", ",", "args", ".", "n_classes", ",", "writer", ",", "loss_fn", ",", "reg_fn", ",", "args", ".", "lambda_reg", ",", "args", ".", "gc", ")", "\n", "stop", "=", "validate_survival", "(", "cur", ",", "epoch", ",", "model", ",", "val_loader", ",", "args", ".", "n_classes", ",", "early_stopping", ",", "monitor_cindex", ",", "writer", ",", "loss_fn", ",", "reg_fn", ",", "args", ".", "lambda_reg", ",", "args", ".", "results_dir", ")", "\n", "\n", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "\"s_{}_checkpoint.pt\"", ".", "format", "(", "cur", ")", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "\"s_{}_checkpoint.pt\"", ".", "format", "(", "cur", ")", ")", ")", ")", "\n", "results_val_dict", ",", "val_cindex", "=", "summary_survival", "(", "model", ",", "val_loader", ",", "args", ".", "n_classes", ")", "\n", "print", "(", "'Val c-Index: {:.4f}'", ".", "format", "(", "val_cindex", ")", ")", "\n", "writer", ".", "close", "(", ")", "\n", "return", "results_val_dict", ",", "val_cindex", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.train_loop_survival": [[241, 298], ["torch.device", "model.train", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "print", "len", "len", "len", "label.to.to", "c.to.to", "model", "loss_fn", "loss_fn.item", "c.to.item", "loss_fn.backward", "sksurv.metrics.concordance_index_censored", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.cuda.is_available", "data_WSI.to", "data_omic.to", "torch.sum().detach().cpu().numpy", "print", "optimizer.step", "optimizer.zero_grad", "reg_fn", "torch.sum().detach().cpu", "label.to.item", "float", "float", "data_WSI.size", "torch.sum().detach", "torch.sum"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.train"], ["", "def", "train_loop_survival", "(", "epoch", ",", "model", ",", "loader", ",", "optimizer", ",", "n_classes", ",", "writer", "=", "None", ",", "loss_fn", "=", "None", ",", "reg_fn", "=", "None", ",", "lambda_reg", "=", "0.", ",", "gc", "=", "16", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", ".", "train", "(", ")", "\n", "train_loss_surv", ",", "train_loss", "=", "0.", ",", "0.", "\n", "\n", "print", "(", "'\\n'", ")", "\n", "all_risk_scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ")", ")", "\n", "all_censorships", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ")", ")", "\n", "all_event_times", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ")", ")", "\n", "\n", "for", "batch_idx", ",", "(", "data_WSI", ",", "data_omic", ",", "label", ",", "event_time", ",", "c", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "\n", "        ", "data_WSI", ",", "data_omic", "=", "data_WSI", ".", "to", "(", "device", ")", ",", "data_omic", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "c", "=", "c", ".", "to", "(", "device", ")", "\n", "\n", "hazards", ",", "S", ",", "Y_hat", ",", "_", ",", "_", "=", "model", "(", "x_path", "=", "data_WSI", ",", "x_omic", "=", "data_omic", ")", "# return hazards, S, Y_hat, A_raw, results_dict", "\n", "\n", "loss", "=", "loss_fn", "(", "hazards", "=", "hazards", ",", "S", "=", "S", ",", "Y", "=", "label", ",", "c", "=", "c", ")", "\n", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "reg_fn", "is", "None", ":", "\n", "            ", "loss_reg", "=", "0", "\n", "", "else", ":", "\n", "            ", "loss_reg", "=", "reg_fn", "(", "model", ")", "*", "lambda_reg", "\n", "\n", "", "risk", "=", "-", "torch", ".", "sum", "(", "S", ",", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "all_risk_scores", "[", "batch_idx", "]", "=", "risk", "\n", "all_censorships", "[", "batch_idx", "]", "=", "c", ".", "item", "(", ")", "\n", "all_event_times", "[", "batch_idx", "]", "=", "event_time", "\n", "\n", "train_loss_surv", "+=", "loss_value", "\n", "train_loss", "+=", "loss_value", "+", "loss_reg", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'batch {}, loss: {:.4f}, label: {}, event_time: {:.4f}, risk: {:.4f}, bag_size: {}'", ".", "format", "(", "batch_idx", ",", "loss_value", "+", "loss_reg", ",", "label", ".", "item", "(", ")", ",", "float", "(", "event_time", ")", ",", "float", "(", "risk", ")", ",", "data_WSI", ".", "size", "(", "0", ")", ")", ")", "\n", "# backward pass", "\n", "", "loss", "=", "loss", "/", "gc", "+", "loss_reg", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "gc", "==", "0", ":", "\n", "            ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# calculate loss and error for epoch", "\n", "", "", "train_loss_surv", "/=", "len", "(", "loader", ")", "\n", "train_loss", "/=", "len", "(", "loader", ")", "\n", "\n", "# c_index = concordance_index(all_event_times, all_risk_scores, event_observed=1-all_censorships) ", "\n", "c_index", "=", "concordance_index_censored", "(", "(", "1", "-", "all_censorships", ")", ".", "astype", "(", "bool", ")", ",", "all_event_times", ",", "all_risk_scores", ",", "tied_tol", "=", "1e-08", ")", "[", "0", "]", "\n", "\n", "print", "(", "'Epoch: {}, train_loss_surv: {:.4f}, train_loss: {:.4f}, train_c_index: {:.4f}'", ".", "format", "(", "epoch", ",", "train_loss_surv", ",", "train_loss", ",", "c_index", ")", ")", "\n", "\n", "if", "writer", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'train/loss_surv'", ",", "train_loss_surv", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'train/loss'", ",", "train_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'train/c_index'", ",", "c_index", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.validate_survival": [[299, 360], ["torch.device", "model.eval", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "print", "len", "len", "len", "label.to.to", "c.to.to", "loss_fn", "loss_fn.item", "c.to.cpu().numpy", "sksurv.metrics.concordance_index_censored", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.save", "early_stopping", "torch.cuda.is_available", "data_WSI.to", "data_omic.to", "torch.no_grad", "model", "torch.sum().cpu().numpy", "model.state_dict", "os.path.join", "print", "reg_fn", "c.to.cpu", "os.path.join", "torch.sum().cpu", "torch.sum"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.eval"], ["", "", "def", "validate_survival", "(", "cur", ",", "epoch", ",", "model", ",", "loader", ",", "n_classes", ",", "early_stopping", "=", "None", ",", "monitor_cindex", "=", "None", ",", "writer", "=", "None", ",", "loss_fn", "=", "None", ",", "reg_fn", "=", "None", ",", "lambda_reg", "=", "0.", ",", "results_dir", "=", "None", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "# loader.dataset.update_mode(True)", "\n", "val_loss_surv", ",", "val_loss", "=", "0.", ",", "0.", "\n", "all_risk_scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ")", ")", "\n", "all_censorships", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ")", ")", "\n", "all_event_times", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ")", ")", "\n", "# model.alpha.requires_grad=True", "\n", "\n", "for", "batch_idx", ",", "(", "data_WSI", ",", "data_omic", ",", "label", ",", "event_time", ",", "c", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "data_WSI", ",", "data_omic", "=", "data_WSI", ".", "to", "(", "device", ")", ",", "data_omic", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "c", "=", "c", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "hazards", ",", "S", ",", "Y_hat", ",", "_", ",", "_", "=", "model", "(", "x_path", "=", "data_WSI", ",", "x_omic", "=", "data_omic", ")", "# return hazards, S, Y_hat, A_raw, results_dict", "\n", "\n", "", "loss", "=", "loss_fn", "(", "hazards", "=", "hazards", ",", "S", "=", "S", ",", "Y", "=", "label", ",", "c", "=", "c", ",", "alpha", "=", "0", ")", "\n", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "reg_fn", "is", "None", ":", "\n", "            ", "loss_reg", "=", "0", "\n", "", "else", ":", "\n", "            ", "loss_reg", "=", "reg_fn", "(", "model", ")", "*", "lambda_reg", "\n", "\n", "\n", "", "risk", "=", "-", "torch", ".", "sum", "(", "S", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "all_risk_scores", "[", "batch_idx", "]", "=", "risk", "\n", "all_censorships", "[", "batch_idx", "]", "=", "c", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "all_event_times", "[", "batch_idx", "]", "=", "event_time", "\n", "\n", "val_loss_surv", "+=", "loss_value", "\n", "val_loss", "+=", "loss_value", "+", "loss_reg", "\n", "\n", "", "val_loss_surv", "/=", "len", "(", "loader", ")", "\n", "val_loss", "/=", "len", "(", "loader", ")", "\n", "\n", "#c_index = concordance_index(all_event_times, all_risk_scores, event_observed=1-all_censorships) ", "\n", "c_index", "=", "concordance_index_censored", "(", "(", "1", "-", "all_censorships", ")", ".", "astype", "(", "bool", ")", ",", "all_event_times", ",", "all_risk_scores", ",", "tied_tol", "=", "1e-08", ")", "[", "0", "]", "\n", "if", "writer", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'val/loss_surv'", ",", "val_loss_surv", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'val/loss'", ",", "val_loss", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'val/c-index'", ",", "c_index", ",", "epoch", ")", "\n", "\n", "\n", "#monitor_cindex(c_index, model, ckpt_name=os.path.join(results_dir, \"s_{}_maxval_checkpoint.pt\".format(cur)))", "\n", "", "if", "epoch", "==", "10", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "results_dir", ",", "'s_%d_mid_checkpoint.pt'", "%", "cur", ")", ")", "\n", "", "print", "(", "'\\nVal Set, val_loss_surv: {:.4f}, val_loss: {:.4f}, val c-index: {:.4f}'", ".", "format", "(", "val_loss_surv", ",", "val_loss", ",", "c_index", ")", ")", "\n", "\n", "if", "early_stopping", ":", "\n", "        ", "assert", "results_dir", "\n", "early_stopping", "(", "epoch", ",", "val_loss_surv", ",", "model", ",", "ckpt_name", "=", "os", ".", "path", ".", "join", "(", "results_dir", ",", "\"s_{}_minloss_checkpoint.pt\"", ".", "format", "(", "cur", ")", ")", ")", "\n", "\n", "if", "early_stopping", ".", "early_stop", ":", "\n", "            ", "print", "(", "\"Early stopping\"", ")", "\n", "return", "True", "\n", "\n", "# model.alpha.requires_grad=False", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.summary_survival": [[362, 395], ["torch.device", "model.eval", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "len", "label.to.to", "numpy.asscalar", "numpy.asscalar", "numpy.asscalar", "patient_results.update", "sksurv.metrics.concordance_index_censored", "torch.cuda.is_available", "data_WSI.to", "data_omic.to", "torch.no_grad", "model", "torch.sum().cpu().numpy", "numpy.array", "label.to.item", "torch.sum().cpu", "torch.sum"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.eval"], ["", "def", "summary_survival", "(", "model", ",", "loader", ",", "n_classes", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0.", "\n", "\n", "all_risk_scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ")", ")", "\n", "all_censorships", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ")", ")", "\n", "all_event_times", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ")", ")", "\n", "\n", "slide_ids", "=", "loader", ".", "dataset", ".", "slide_data", "[", "'slide_id'", "]", "\n", "patient_results", "=", "{", "}", "\n", "\n", "for", "batch_idx", ",", "(", "data_WSI", ",", "data_omic", ",", "label", ",", "event_time", ",", "c", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "data_WSI", ",", "data_omic", "=", "data_WSI", ".", "to", "(", "device", ")", ",", "data_omic", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "\n", "slide_id", "=", "slide_ids", ".", "iloc", "[", "batch_idx", "]", "\n", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "hazards", ",", "survival", ",", "Y_hat", ",", "_", ",", "_", "=", "model", "(", "x_path", "=", "data_WSI", ",", "x_omic", "=", "data_omic", ")", "\n", "\n", "\n", "", "risk", "=", "np", ".", "asscalar", "(", "-", "torch", ".", "sum", "(", "survival", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "event_time", "=", "np", ".", "asscalar", "(", "event_time", ")", "\n", "c", "=", "np", ".", "asscalar", "(", "c", ")", "\n", "all_risk_scores", "[", "batch_idx", "]", "=", "risk", "\n", "all_censorships", "[", "batch_idx", "]", "=", "c", "\n", "all_event_times", "[", "batch_idx", "]", "=", "event_time", "\n", "patient_results", ".", "update", "(", "{", "slide_id", ":", "{", "'slide_id'", ":", "np", ".", "array", "(", "slide_id", ")", ",", "'risk'", ":", "risk", ",", "'disc_label'", ":", "label", ".", "item", "(", ")", ",", "'survival'", ":", "event_time", ",", "'censorship'", ":", "c", "}", "}", ")", "\n", "\n", "", "c_index", "=", "concordance_index_censored", "(", "(", "1", "-", "all_censorships", ")", ".", "astype", "(", "bool", ")", ",", "all_event_times", ",", "all_risk_scores", ",", "tied_tol", "=", "1e-08", ")", "[", "0", "]", "\n", "return", "patient_results", ",", "c_index", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.interpret_patient_mm": [[397, 399], ["model.captum"], "function", ["None"], ["", "def", "interpret_patient_mm", "(", "x_path", ",", "x_omic", ")", ":", "\n", "    ", "return", "model", ".", "captum", "(", "x_path", ",", "x_omic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.interpret_patient_omic": [[400, 402], ["model.captum"], "function", ["None"], ["", "def", "interpret_patient_omic", "(", "x_omic", ")", ":", "\n", "    ", "return", "model", ".", "captum", "(", "x_omic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.summary_survival_with_shap_mm": [[403, 446], ["torch.device", "model.eval", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "len", "label.to.to", "IntegratedGradients", "data_WSI.unsqueeze.unsqueeze", "data_omic.unsqueeze.unsqueeze", "data_WSI.unsqueeze.requires_grad_", "data_omic.unsqueeze.requires_grad_", "IntegratedGradients.attribute", "ig_attr[].detach().cpu().data.numpy", "numpy.asscalar", "numpy.asscalar", "numpy.asscalar", "patient_results.update", "sksurv.metrics.concordance_index_censored", "torch.cuda.is_available", "data_WSI.unsqueeze.to", "data_omic.unsqueeze.to", "torch.no_grad", "model", "torch.sum().cpu().numpy", "ig_attr[].detach().cpu", "numpy.array", "label.to.item", "torch.sum().cpu", "ig_attr[].detach", "torch.sum"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.eval"], ["", "def", "summary_survival_with_shap_mm", "(", "model", ",", "loader", ",", "n_classes", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0.", "\n", "\n", "all_risk_scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ")", ")", "\n", "all_censorships", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ")", ")", "\n", "all_event_times", "=", "np", ".", "zeros", "(", "(", "len", "(", "loader", ")", ")", ")", "\n", "\n", "slide_ids", "=", "loader", ".", "dataset", ".", "slide_data", "[", "'slide_id'", "]", "\n", "patient_results", "=", "{", "}", "\n", "\n", "for", "batch_idx", ",", "(", "data_WSI", ",", "data_omic", ",", "label", ",", "event_time", ",", "c", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "data_WSI", ",", "data_omic", "=", "data_WSI", ".", "to", "(", "device", ")", ",", "data_omic", ".", "to", "(", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "device", ")", "\n", "\n", "slide_id", "=", "slide_ids", ".", "iloc", "[", "batch_idx", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "hazards", ",", "survival", ",", "Y_hat", ",", "_", ",", "_", "=", "model", "(", "x_path", "=", "data_WSI", ",", "x_omic", "=", "data_omic", ")", "\n", "\n", "\n", "\n", "", "ig", "=", "IntegratedGradients", "(", "interpret_patient_mm", ")", "\n", "data_WSI", "=", "data_WSI", ".", "unsqueeze", "(", "0", ")", "\n", "data_omic", "=", "data_omic", ".", "unsqueeze", "(", "0", ")", "\n", "data_WSI", ".", "requires_grad_", "(", ")", "\n", "data_omic", ".", "requires_grad_", "(", ")", "\n", "\n", "ig_attr", "=", "ig", ".", "attribute", "(", "(", "data_WSI", ",", "data_omic", ")", ",", "n_steps", "=", "n_steps", ")", "\n", "ig_attr_omic", "=", "ig_attr", "[", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "\n", "risk", "=", "np", ".", "asscalar", "(", "-", "torch", ".", "sum", "(", "survival", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "event_time", "=", "np", ".", "asscalar", "(", "event_time", ")", "\n", "c", "=", "np", ".", "asscalar", "(", "c", ")", "\n", "all_risk_scores", "[", "batch_idx", "]", "=", "risk", "\n", "all_censorships", "[", "batch_idx", "]", "=", "c", "\n", "all_event_times", "[", "batch_idx", "]", "=", "event_time", "\n", "patient_results", ".", "update", "(", "{", "slide_id", ":", "{", "'slide_id'", ":", "np", ".", "array", "(", "slide_id", ")", ",", "'risk'", ":", "risk", ",", "'disc_label'", ":", "label", ".", "item", "(", ")", ",", "'survival'", ":", "event_time", ",", "'censorship'", ":", "c", ",", "'attr'", ":", "ig_attr_omic", "}", "}", ")", "\n", "\n", "", "c_index", "=", "concordance_index_censored", "(", "(", "1", "-", "all_censorships", ")", ".", "astype", "(", "bool", ")", ",", "all_event_times", ",", "all_risk_scores", ",", "tied_tol", "=", "1e-08", ")", "[", "0", "]", "\n", "return", "patient_results", ",", "c_index", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.eval_model": [[449, 529], ["print", "print", "datasets.dataset_generic.save_splits", "print", "print", "print", "print", "print", "print", "models.model_genomic.MaxNet.relocate", "print", "print_network", "torch.load", "models.model_genomic.MaxNet.load_state_dict", "models.model_genomic.MaxNet.eval", "print", "get_split_loader", "get_split_loader", "print", "os.path.join", "os.path.join", "core_utils.summary_survival", "len", "len", "CrossEntropySurvLoss", "models.model_attention_mil.MIL_Attention_fc_surv", "model_dict.update", "NLLSurvLoss", "models.model_mm_attention_mil.MM_MIL_Attention_fc_surv", "CoxSurvLoss", "models.model_genomic.MaxNet"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.save_splits", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.MIL_Attention_fc.relocate", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.print_network", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.eval_utils.eval", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.get_split_loader", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.get_split_loader", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.core_utils.summary_survival"], ["", "def", "eval_model", "(", "datasets", ":", "tuple", ",", "cur", ":", "int", ",", "args", ")", ":", "\n", "    ", "\"\"\"   \n        train for a single fold\n    \"\"\"", "\n", "print", "(", "'\\nTraining Fold {}!'", ".", "format", "(", "cur", ")", ")", "\n", "\n", "\n", "\n", "print", "(", "'\\nInit train/val/test splits...'", ",", "end", "=", "' '", ")", "\n", "train_split", ",", "val_split", "=", "datasets", "\n", "save_splits", "(", "datasets", ",", "[", "'train'", ",", "'val'", "]", ",", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "'splits_{}.csv'", ".", "format", "(", "cur", ")", ")", ")", "\n", "print", "(", "'Done!'", ")", "\n", "print", "(", "\"Training on {} samples\"", ".", "format", "(", "len", "(", "train_split", ")", ")", ")", "\n", "print", "(", "\"Validating on {} samples\"", ".", "format", "(", "len", "(", "val_split", ")", ")", ")", "\n", "\n", "print", "(", "'\\nInit loss function...'", ",", "end", "=", "' '", ")", "\n", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "        ", "if", "args", ".", "bag_loss", "==", "'ce_surv'", ":", "\n", "            ", "loss_fn", "=", "CrossEntropySurvLoss", "(", "alpha", "=", "args", ".", "alpha_surv", ")", "\n", "", "elif", "args", ".", "bag_loss", "==", "'nll_surv'", ":", "\n", "            ", "loss_fn", "=", "NLLSurvLoss", "(", "alpha", "=", "args", ".", "alpha_surv", ")", "\n", "", "elif", "args", ".", "bag_loss", "==", "'cox_surv'", ":", "\n", "            ", "loss_fn", "=", "CoxSurvLoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "args", ".", "reg_type", "==", "'omic'", ":", "\n", "        ", "reg_fn", "=", "l1_reg_all", "\n", "", "elif", "args", ".", "reg_type", "==", "'pathomic'", ":", "\n", "        ", "reg_fn", "=", "l1_reg_modules", "\n", "", "else", ":", "\n", "        ", "reg_fn", "=", "None", "\n", "\n", "", "print", "(", "'Done!'", ")", "\n", "\n", "print", "(", "'\\nInit Model...'", ",", "end", "=", "' '", ")", "\n", "model_dict", "=", "{", "\"dropout\"", ":", "args", ".", "drop_out", ",", "'n_classes'", ":", "args", ".", "n_classes", "}", "\n", "if", "args", ".", "model_type", "==", "'attention_mil'", ":", "\n", "        ", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "            ", "model", "=", "MIL_Attention_fc_surv", "(", "**", "model_dict", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "elif", "args", ".", "model_type", "==", "'mm_attention_mil'", ":", "\n", "        ", "model_dict", ".", "update", "(", "{", "'input_dim'", ":", "args", ".", "omic_input_dim", ",", "\n", "'fusion'", ":", "args", ".", "fusion", ",", "'model_size_wsi'", ":", "args", ".", "model_size_wsi", ",", "'model_size_omic'", ":", "args", ".", "model_size_omic", ",", "\n", "'gate_path'", ":", "args", ".", "gate_path", ",", "'gate_omic'", ":", "args", ".", "gate_omic", ",", "'n_classes'", ":", "args", ".", "n_classes", "}", ")", "\n", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "            ", "model", "=", "MM_MIL_Attention_fc_surv", "(", "**", "model_dict", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "elif", "args", ".", "model_type", "==", "'max_net'", ":", "\n", "        ", "model_dict", "=", "{", "'input_dim'", ":", "args", ".", "omic_input_dim", ",", "'model_size_omic'", ":", "args", ".", "model_size_omic", ",", "'n_classes'", ":", "args", ".", "n_classes", "}", "\n", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "            ", "model", "=", "MaxNet", "(", "**", "model_dict", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "model", ".", "relocate", "(", ")", "\n", "print", "(", "'Done!'", ")", "\n", "print_network", "(", "model", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "results_dir", ",", "\"s_{}_checkpoint.pt\"", ".", "format", "(", "cur", ")", ")", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", ",", "strict", "=", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "print", "(", "'\\nInit Loaders...'", ",", "end", "=", "' '", ")", "\n", "train_loader", "=", "get_split_loader", "(", "train_split", ",", "training", "=", "True", ",", "testing", "=", "args", ".", "testing", ",", "\n", "weighted", "=", "args", ".", "weighted_sample", ",", "task_type", "=", "args", ".", "task_type", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "val_loader", "=", "get_split_loader", "(", "val_split", ",", "testing", "=", "args", ".", "testing", ",", "task_type", "=", "args", ".", "task_type", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "print", "(", "'Done!'", ")", "\n", "\n", "results", "=", "{", "}", "\n", "if", "args", ".", "task_type", "==", "'survival'", ":", "\n", "        ", "results_val_dict", ",", "val_c_index", "=", "summary_survival", "(", "model", ",", "val_loader", ",", "args", ".", "n_classes", ")", "\n", "return", "results_val_dict", ",", "val_c_index", "", "", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.__init__": [[35, 91], ["pandas.read_csv", "dataset_generic.Generic_WSI_Classification_Dataset.filter_df", "len", "dataset_generic.Generic_WSI_Classification_Dataset.df_prep", "dataset_generic.Generic_WSI_Classification_Dataset.patient_data_prep", "dataset_generic.Generic_WSI_Classification_Dataset.cls_ids_prep", "dataset_generic.Generic_WSI_Classification_Dataset.init_multi_site_label_dict", "set", "numpy.random.seed", "numpy.random.shuffle", "dataset_generic.Generic_WSI_Classification_Dataset.summarize", "dataset_generic.Generic_WSI_Classification_Dataset.label_dict.values"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.filter_df", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.df_prep", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.patient_data_prep", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.cls_ids_prep", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.init_multi_site_label_dict", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.summarize"], ["\t", "def", "__init__", "(", "self", ",", "\n", "csv_path", "=", "'dataset_csv/ccrcc_clean.csv'", ",", "\n", "shuffle", "=", "False", ",", "\n", "seed", "=", "7", ",", "\n", "print_info", "=", "True", ",", "\n", "label_dict", "=", "{", "}", ",", "\n", "ignore", "=", "[", "]", ",", "\n", "patient_strat", "=", "False", ",", "\n", "label_col", "=", "None", ",", "\n", "patient_voting", "=", "'max'", ",", "\n", "multi_site", "=", "False", ",", "\n", "filter_dict", "=", "{", "}", ",", "\n", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tArgs:\n\t\t\tcsv_file (string): Path to the csv file with annotations.\n\t\t\tshuffle (boolean): Whether to shuffle\n\t\t\tseed (int): random seed for shuffling the data\n\t\t\tprint_info (boolean): Whether to print a summary of the dataset\n\t\t\tlabel_dict (dict): Dictionary with key, value pairs for converting str labels to int\n\t\t\tignore (list): List containing class labels to ignore\n\t\t\tpatient_voting (string): Rule for deciding the patient-level label\n\t\t\"\"\"", "\n", "self", ".", "custom_test_ids", "=", "None", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "print_info", "=", "print_info", "\n", "self", ".", "patient_strat", "=", "patient_strat", "\n", "self", ".", "train_ids", ",", "self", ".", "val_ids", ",", "self", ".", "test_ids", "=", "(", "None", ",", "None", ",", "None", ")", "\n", "self", ".", "data_dir", "=", "None", "\n", "if", "not", "label_col", ":", "\n", "\t\t\t", "label_col", "=", "'label'", "\n", "", "self", ".", "label_col", "=", "label_col", "\n", "\n", "slide_data", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "slide_data", "=", "self", ".", "filter_df", "(", "slide_data", ",", "filter_dict", ")", "\n", "\n", "if", "multi_site", ":", "\n", "\t\t\t", "label_dict", "=", "self", ".", "init_multi_site_label_dict", "(", "slide_data", ",", "label_dict", ")", "\n", "\n", "", "self", ".", "label_dict", "=", "label_dict", "\n", "self", ".", "num_classes", "=", "len", "(", "set", "(", "self", ".", "label_dict", ".", "values", "(", ")", ")", ")", "\n", "\n", "slide_data", "=", "self", ".", "df_prep", "(", "slide_data", ",", "self", ".", "label_dict", ",", "ignore", ",", "self", ".", "label_col", ",", "multi_site", ")", "\n", "\n", "###shuffle data", "\n", "if", "shuffle", ":", "\n", "\t\t\t", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "slide_data", ")", "\n", "\n", "", "self", ".", "slide_data", "=", "slide_data", "\n", "\n", "self", ".", "patient_data_prep", "(", "patient_voting", ")", "\n", "self", ".", "cls_ids_prep", "(", ")", "\n", "\n", "if", "print_info", ":", "\n", "\t\t\t", "self", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.cls_ids_prep": [[92, 102], ["range", "range", "range", "numpy.where", "range", "numpy.where"], "methods", ["None"], ["", "", "def", "cls_ids_prep", "(", "self", ")", ":", "\n", "# store ids corresponding each class at the patient or case level", "\n", "\t\t", "self", ".", "patient_cls_ids", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "\t\t\t", "self", ".", "patient_cls_ids", "[", "i", "]", "=", "np", ".", "where", "(", "self", ".", "patient_data", "[", "'label'", "]", "==", "i", ")", "[", "0", "]", "\n", "\n", "# store ids corresponding each class at the slide level", "\n", "", "self", ".", "slide_cls_ids", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "\t\t\t", "self", ".", "slide_cls_ids", "[", "i", "]", "=", "np", ".", "where", "(", "self", ".", "slide_data", "[", "'label'", "]", "==", "i", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.patient_data_prep": [[103, 120], ["numpy.unique", "numpy.array", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].index.tolist", "patient_labels.append", "numpy.array", "len", "label.max.max.max", "scipy.stats.mode"], "methods", ["None"], ["", "", "def", "patient_data_prep", "(", "self", ",", "patient_voting", "=", "'max'", ")", ":", "\n", "\t\t", "patients", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "self", ".", "slide_data", "[", "'case_id'", "]", ")", ")", "# get unique patients", "\n", "patient_labels", "=", "[", "]", "\n", "\n", "for", "p", "in", "patients", ":", "\n", "\t\t\t", "locations", "=", "self", ".", "slide_data", "[", "self", ".", "slide_data", "[", "'case_id'", "]", "==", "p", "]", ".", "index", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "locations", ")", ">", "0", "\n", "label", "=", "self", ".", "slide_data", "[", "'label'", "]", "[", "locations", "]", ".", "values", "\n", "if", "patient_voting", "==", "'max'", ":", "\n", "\t\t\t\t", "label", "=", "label", ".", "max", "(", ")", "# get patient label (MIL convention)", "\n", "", "elif", "patient_voting", "==", "'maj'", ":", "\n", "\t\t\t\t", "label", "=", "stats", ".", "mode", "(", "label", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "\n", "", "patient_labels", ".", "append", "(", "label", ")", "\n", "\n", "", "self", ".", "patient_data", "=", "{", "'case_id'", ":", "patients", ",", "'label'", ":", "np", ".", "array", "(", "patient_labels", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.init_multi_site_label_dict": [[121, 134], ["print", "numpy.unique", "len", "label_dict.items", "enumerate", "multi_site_dict.update", "print"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "init_multi_site_label_dict", "(", "slide_data", ",", "label_dict", ")", ":", "\n", "\t\t", "print", "(", "'initiating multi-source label dictionary'", ")", "\n", "sites", "=", "np", ".", "unique", "(", "slide_data", "[", "'site'", "]", ".", "values", ")", "\n", "multi_site_dict", "=", "{", "}", "\n", "num_classes", "=", "len", "(", "label_dict", ")", "\n", "for", "key", ",", "val", "in", "label_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t", "for", "idx", ",", "site", "in", "enumerate", "(", "sites", ")", ":", "\n", "\t\t\t\t", "site_key", "=", "(", "key", ",", "site", ")", "\n", "site_val", "=", "val", "+", "idx", "*", "num_classes", "\n", "multi_site_dict", ".", "update", "(", "{", "site_key", ":", "site_val", "}", ")", "\n", "print", "(", "'{} : {}'", ".", "format", "(", "site_key", ",", "site_val", ")", ")", "\n", "", "", "return", "multi_site_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.filter_df": [[135, 145], ["len", "numpy.full", "filter_dict.items", "len", "df[].isin", "numpy.logical_and"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "filter_df", "(", "df", ",", "filter_dict", "=", "{", "}", ")", ":", "\n", "\t\t", "if", "len", "(", "filter_dict", ")", ">", "0", ":", "\n", "\t\t\t", "filter_mask", "=", "np", ".", "full", "(", "len", "(", "df", ")", ",", "True", ",", "bool", ")", "\n", "# assert 'label' not in filter_dict.keys()", "\n", "for", "key", ",", "val", "in", "filter_dict", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "mask", "=", "df", "[", "key", "]", ".", "isin", "(", "val", ")", "\n", "filter_mask", "=", "np", ".", "logical_and", "(", "filter_mask", ",", "mask", ")", "\n", "", "df", "=", "df", "[", "filter_mask", "]", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.df_prep": [[146, 162], ["data[].isin", "data.reset_index", "data[].copy"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "df_prep", "(", "data", ",", "label_dict", ",", "ignore", ",", "label_col", ",", "multi_site", "=", "False", ")", ":", "\n", "\t\t", "if", "label_col", "!=", "'label'", ":", "\n", "\t\t\t", "data", "[", "'label'", "]", "=", "data", "[", "label_col", "]", ".", "copy", "(", ")", "\n", "\n", "", "mask", "=", "data", "[", "'label'", "]", ".", "isin", "(", "ignore", ")", "\n", "data", "=", "data", "[", "~", "mask", "]", "\n", "data", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "for", "i", "in", "data", ".", "index", ":", "\n", "\t\t\t", "key", "=", "data", ".", "loc", "[", "i", ",", "'label'", "]", "\n", "if", "multi_site", ":", "\n", "\t\t\t\t", "site", "=", "data", ".", "loc", "[", "i", ",", "'site'", "]", "\n", "key", "=", "(", "key", ",", "site", ")", "\n", "", "data", ".", "at", "[", "i", ",", "'label'", "]", "=", "label_dict", "[", "key", "]", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.__len__": [[163, 169], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "patient_strat", ":", "\n", "\t\t\t", "return", "len", "(", "self", ".", "patient_data", "[", "'case_id'", "]", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "return", "len", "(", "self", ".", "slide_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.summarize": [[170, 178], ["print", "print", "print", "print", "range", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].value_counts", "print", "print"], "methods", ["None"], ["", "", "def", "summarize", "(", "self", ")", ":", "\n", "\t\t", "print", "(", "\"label column: {}\"", ".", "format", "(", "self", ".", "label_col", ")", ")", "\n", "print", "(", "\"label dictionary: {}\"", ".", "format", "(", "self", ".", "label_dict", ")", ")", "\n", "print", "(", "\"number of classes: {}\"", ".", "format", "(", "self", ".", "num_classes", ")", ")", "\n", "print", "(", "\"slide-level counts: \"", ",", "'\\n'", ",", "self", ".", "slide_data", "[", "'label'", "]", ".", "value_counts", "(", "sort", "=", "False", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "\t\t\t", "print", "(", "'Patient-LVL; Number of samples registered in class %d: %d'", "%", "(", "i", ",", "self", ".", "patient_cls_ids", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "'Slide-LVL; Number of samples registered in class %d: %d'", "%", "(", "i", ",", "self", ".", "slide_cls_ids", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.create_splits": [[179, 195], ["utils.utils.generate_split", "settings.update", "settings.update", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.generate_split"], ["", "", "def", "create_splits", "(", "self", ",", "k", "=", "3", ",", "val_num", "=", "(", "25", ",", "25", ")", ",", "test_num", "=", "(", "40", ",", "40", ")", ",", "label_frac", "=", "1.0", ",", "custom_test_ids", "=", "None", ")", ":", "\n", "\t\t", "settings", "=", "{", "\n", "'n_splits'", ":", "k", ",", "\n", "'val_num'", ":", "val_num", ",", "\n", "'test_num'", ":", "test_num", ",", "\n", "'label_frac'", ":", "label_frac", ",", "\n", "'seed'", ":", "self", ".", "seed", ",", "\n", "'custom_test_ids'", ":", "custom_test_ids", "\n", "}", "\n", "\n", "if", "self", ".", "patient_strat", ":", "\n", "\t\t\t", "settings", ".", "update", "(", "{", "'cls_ids'", ":", "self", ".", "patient_cls_ids", ",", "'samples'", ":", "len", "(", "self", ".", "patient_data", "[", "'case_id'", "]", ")", "}", ")", "\n", "", "else", ":", "\n", "\t\t\t", "settings", ".", "update", "(", "{", "'cls_ids'", ":", "self", ".", "slide_cls_ids", ",", "'samples'", ":", "len", "(", "self", ".", "slide_data", ")", "}", ")", "\n", "\n", "", "self", ".", "split_gen", "=", "generate_split", "(", "**", "settings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.sample_held_out": [[196, 219], ["numpy.random.seed", "range", "len", "test_ids.extend", "numpy.random.choice", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].index.tolist", "slide_ids.extend"], "methods", ["None"], ["", "def", "sample_held_out", "(", "self", ",", "test_num", "=", "(", "40", ",", "40", ")", ")", ":", "\n", "\n", "\t\t", "test_ids", "=", "[", "]", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "#fix seed", "\n", "\n", "if", "self", ".", "patient_strat", ":", "\n", "\t\t\t", "cls_ids", "=", "self", ".", "patient_cls_ids", "\n", "", "else", ":", "\n", "\t\t\t", "cls_ids", "=", "self", ".", "slide_cls_ids", "\n", "\n", "", "for", "c", "in", "range", "(", "len", "(", "test_num", ")", ")", ":", "\n", "\t\t\t", "test_ids", ".", "extend", "(", "np", ".", "random", ".", "choice", "(", "cls_ids", "[", "c", "]", ",", "test_num", "[", "c", "]", ",", "replace", "=", "False", ")", ")", "# validation ids", "\n", "\n", "", "if", "self", ".", "patient_strat", ":", "\n", "\t\t\t", "slide_ids", "=", "[", "]", "\n", "for", "idx", "in", "test_ids", ":", "\n", "\t\t\t\t", "case_id", "=", "self", ".", "patient_data", "[", "'case_id'", "]", "[", "idx", "]", "\n", "slide_indices", "=", "self", ".", "slide_data", "[", "self", ".", "slide_data", "[", "'case_id'", "]", "==", "case_id", "]", ".", "index", ".", "tolist", "(", ")", "\n", "slide_ids", ".", "extend", "(", "slide_indices", ")", "\n", "\n", "", "return", "slide_ids", "\n", "", "else", ":", "\n", "\t\t\t", "return", "test_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.set_splits": [[220, 240], ["utils.utils.nth", "next", "range", "len", "range", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].index.tolist", "slide_ids[].extend", "len"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.nth"], ["", "", "def", "set_splits", "(", "self", ",", "start_from", "=", "None", ")", ":", "\n", "\t\t", "if", "start_from", ":", "\n", "\t\t\t", "ids", "=", "nth", "(", "self", ".", "split_gen", ",", "start_from", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "ids", "=", "next", "(", "self", ".", "split_gen", ")", "\n", "\n", "", "if", "self", ".", "patient_strat", ":", "\n", "\t\t\t", "slide_ids", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "ids", ")", ")", "]", "\n", "\n", "for", "split", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "\t\t\t\t", "for", "idx", "in", "ids", "[", "split", "]", ":", "\n", "\t\t\t\t\t", "case_id", "=", "self", ".", "patient_data", "[", "'case_id'", "]", "[", "idx", "]", "\n", "slide_indices", "=", "self", ".", "slide_data", "[", "self", ".", "slide_data", "[", "'case_id'", "]", "==", "case_id", "]", ".", "index", ".", "tolist", "(", ")", "\n", "slide_ids", "[", "split", "]", ".", "extend", "(", "slide_indices", ")", "\n", "\n", "", "", "self", ".", "train_ids", ",", "self", ".", "val_ids", ",", "self", ".", "test_ids", "=", "slide_ids", "[", "0", "]", ",", "slide_ids", "[", "1", "]", ",", "slide_ids", "[", "2", "]", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "train_ids", ",", "self", ".", "val_ids", ",", "self", ".", "test_ids", "=", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.get_split_from_df": [[241, 253], ["Generic_Split.dropna().reset_index", "len", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].isin", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].dropna().reset_index", "dataset_generic.Generic_Split", "Generic_Split.dropna", "Generic_Split.tolist", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].dropna"], "methods", ["None"], ["", "", "def", "get_split_from_df", "(", "self", ",", "all_splits", ",", "split_key", "=", "'train'", ")", ":", "\n", "\t\t", "split", "=", "all_splits", "[", "split_key", "]", "\n", "split", "=", "split", ".", "dropna", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "if", "len", "(", "split", ")", ">", "0", ":", "\n", "\t\t\t", "mask", "=", "self", ".", "slide_data", "[", "'slide_id'", "]", ".", "isin", "(", "split", ".", "tolist", "(", ")", ")", "\n", "df_slice", "=", "self", ".", "slide_data", "[", "mask", "]", ".", "dropna", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "split", "=", "Generic_Split", "(", "df_slice", ",", "data_dir", "=", "self", ".", "data_dir", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t", "split", "=", "None", "\n", "\n", "", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.get_merged_split_from_df": [[254, 269], ["Generic_Split.dropna().reset_index().tolist", "merged_split.extend", "len", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].isin", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].dropna().reset_index", "dataset_generic.Generic_Split", "Generic_Split.dropna().reset_index", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data[].dropna", "Generic_Split.dropna"], "methods", ["None"], ["", "def", "get_merged_split_from_df", "(", "self", ",", "all_splits", ",", "split_keys", "=", "[", "'train'", "]", ")", ":", "\n", "\t\t", "merged_split", "=", "[", "]", "\n", "for", "split_key", "in", "split_keys", ":", "\n", "\t\t\t", "split", "=", "all_splits", "[", "split_key", "]", "\n", "split", "=", "split", ".", "dropna", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", ".", "tolist", "(", ")", "\n", "merged_split", ".", "extend", "(", "split", ")", "\n", "\n", "", "if", "len", "(", "split", ")", ">", "0", ":", "\n", "\t\t\t", "mask", "=", "self", ".", "slide_data", "[", "'slide_id'", "]", ".", "isin", "(", "merged_split", ")", "\n", "df_slice", "=", "self", ".", "slide_data", "[", "mask", "]", ".", "dropna", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "split", "=", "Generic_Split", "(", "df_slice", ",", "data_dir", "=", "self", ".", "data_dir", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "\t\t\t", "split", "=", "None", "\n", "\n", "", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.return_splits": [[271, 303], ["pandas.read_csv", "dataset_generic.Generic_WSI_Classification_Dataset.get_split_from_df", "dataset_generic.Generic_WSI_Classification_Dataset.get_split_from_df", "dataset_generic.Generic_WSI_Classification_Dataset.get_split_from_df", "len", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data.loc[].reset_index", "dataset_generic.Generic_Split", "len", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data.loc[].reset_index", "dataset_generic.Generic_Split", "len", "dataset_generic.Generic_WSI_Classification_Dataset.slide_data.loc[].reset_index", "dataset_generic.Generic_Split"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_split_from_df", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_split_from_df", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_split_from_df"], ["", "def", "return_splits", "(", "self", ",", "from_id", "=", "True", ",", "csv_path", "=", "None", ")", ":", "\n", "\t\t", "if", "from_id", ":", "\n", "\t\t\t", "if", "len", "(", "self", ".", "train_ids", ")", ">", "0", ":", "\n", "\t\t\t\t", "train_data", "=", "self", ".", "slide_data", ".", "loc", "[", "self", ".", "train_ids", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "train_split", "=", "Generic_Split", "(", "train_data", ",", "data_dir", "=", "self", ".", "data_dir", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "train_split", "=", "None", "\n", "\n", "", "if", "len", "(", "self", ".", "val_ids", ")", ">", "0", ":", "\n", "\t\t\t\t", "val_data", "=", "self", ".", "slide_data", ".", "loc", "[", "self", ".", "val_ids", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "val_split", "=", "Generic_Split", "(", "val_data", ",", "data_dir", "=", "self", ".", "data_dir", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "val_split", "=", "None", "\n", "\n", "", "if", "len", "(", "self", ".", "test_ids", ")", ">", "0", ":", "\n", "\t\t\t\t", "test_data", "=", "self", ".", "slide_data", ".", "loc", "[", "self", ".", "test_ids", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "test_split", "=", "Generic_Split", "(", "test_data", ",", "data_dir", "=", "self", ".", "data_dir", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "test_split", "=", "None", "\n", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t", "assert", "csv_path", "\n", "all_splits", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "train_split", "=", "self", ".", "get_split_from_df", "(", "all_splits", ",", "'train'", ")", "\n", "val_split", "=", "self", ".", "get_split_from_df", "(", "all_splits", ",", "'val'", ")", "\n", "test_split", "=", "self", ".", "get_split_from_df", "(", "all_splits", ",", "'test'", ")", "\n", "\n", "", "return", "train_split", ",", "val_split", ",", "test_split", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.get_list": [[304, 306], ["None"], "methods", ["None"], ["", "def", "get_list", "(", "self", ",", "ids", ")", ":", "\n", "\t\t", "return", "self", ".", "slide_data", "[", "'slide_id'", "]", "[", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.getlabel": [[307, 309], ["None"], "methods", ["None"], ["", "def", "getlabel", "(", "self", ",", "ids", ")", ":", "\n", "\t\t", "return", "self", ".", "slide_data", "[", "'label'", "]", "[", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.__getitem__": [[310, 312], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.test_split_gen": [[313, 367], ["len", "print", "dataset_generic.Generic_WSI_Classification_Dataset.getlabel", "numpy.unique", "numpy.setdiff1d", "numpy.append", "numpy.append", "numpy.append.argsort", "range", "len", "print", "dataset_generic.Generic_WSI_Classification_Dataset.getlabel", "numpy.unique", "numpy.setdiff1d", "numpy.append", "numpy.append", "numpy.append.argsort", "range", "len", "print", "dataset_generic.Generic_WSI_Classification_Dataset.getlabel", "numpy.unique", "numpy.setdiff1d", "numpy.append", "numpy.append", "numpy.append.argsort", "range", "pandas.DataFrame", "numpy.arange", "numpy.full", "len", "print", "numpy.arange", "numpy.full", "len", "print", "numpy.arange", "numpy.full", "len", "print", "len", "len", "len", "numpy.full", "len", "len", "len", "numpy.intersect1d", "numpy.intersect1d", "numpy.intersect1d", "list", "range", "dataset_generic.Generic_WSI_Classification_Dataset.label_dict.keys", "list().index", "len", "len", "list", "dataset_generic.Generic_WSI_Classification_Dataset.label_dict.values"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.getlabel", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.getlabel", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.getlabel"], ["", "def", "test_split_gen", "(", "self", ",", "return_descriptor", "=", "False", ")", ":", "\n", "\t\t", "if", "return_descriptor", ":", "\n", "\t\t\t", "index", "=", "[", "list", "(", "self", ".", "label_dict", ".", "keys", "(", ")", ")", "[", "list", "(", "self", ".", "label_dict", ".", "values", "(", ")", ")", ".", "index", "(", "i", ")", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "columns", "=", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "df", "=", "pd", ".", "DataFrame", "(", "np", ".", "full", "(", "(", "len", "(", "index", ")", ",", "len", "(", "columns", ")", ")", ",", "0", ",", "dtype", "=", "np", ".", "int32", ")", ",", "index", "=", "index", ",", "\n", "columns", "=", "columns", ")", "\n", "", "count", "=", "len", "(", "self", ".", "train_ids", ")", "\n", "print", "(", "'\\nnumber of training samples: {}'", ".", "format", "(", "count", ")", ")", "\n", "labels", "=", "self", ".", "getlabel", "(", "self", ".", "train_ids", ")", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "missing_classes", "=", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "self", ".", "num_classes", ")", ",", "unique", ")", "\n", "unique", "=", "np", ".", "append", "(", "unique", ",", "missing_classes", ")", "\n", "counts", "=", "np", ".", "append", "(", "counts", ",", "np", ".", "full", "(", "len", "(", "missing_classes", ")", ",", "0", ")", ")", "\n", "inds", "=", "unique", ".", "argsort", "(", ")", "\n", "counts", "=", "counts", "[", "inds", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "unique", ")", ")", ":", "\n", "\t\t\t", "print", "(", "'number of samples in cls {}: {}'", ".", "format", "(", "unique", "[", "u", "]", ",", "counts", "[", "u", "]", ")", ")", "\n", "if", "return_descriptor", ":", "\n", "\t\t\t\t", "df", ".", "loc", "[", "index", "[", "u", "]", ",", "'train'", "]", "=", "counts", "[", "u", "]", "\n", "\n", "", "", "count", "=", "len", "(", "self", ".", "val_ids", ")", "\n", "print", "(", "'\\nnumber of val samples: {}'", ".", "format", "(", "count", ")", ")", "\n", "labels", "=", "self", ".", "getlabel", "(", "self", ".", "val_ids", ")", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "missing_classes", "=", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "self", ".", "num_classes", ")", ",", "unique", ")", "\n", "unique", "=", "np", ".", "append", "(", "unique", ",", "missing_classes", ")", "\n", "counts", "=", "np", ".", "append", "(", "counts", ",", "np", ".", "full", "(", "len", "(", "missing_classes", ")", ",", "0", ")", ")", "\n", "inds", "=", "unique", ".", "argsort", "(", ")", "\n", "counts", "=", "counts", "[", "inds", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "unique", ")", ")", ":", "\n", "\t\t\t", "print", "(", "'number of samples in cls {}: {}'", ".", "format", "(", "unique", "[", "u", "]", ",", "counts", "[", "u", "]", ")", ")", "\n", "if", "return_descriptor", ":", "\n", "\t\t\t\t", "df", ".", "loc", "[", "index", "[", "u", "]", ",", "'val'", "]", "=", "counts", "[", "u", "]", "\n", "\n", "", "", "count", "=", "len", "(", "self", ".", "test_ids", ")", "\n", "print", "(", "'\\nnumber of test samples: {}'", ".", "format", "(", "count", ")", ")", "\n", "labels", "=", "self", ".", "getlabel", "(", "self", ".", "test_ids", ")", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "missing_classes", "=", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "self", ".", "num_classes", ")", ",", "unique", ")", "\n", "unique", "=", "np", ".", "append", "(", "unique", ",", "missing_classes", ")", "\n", "counts", "=", "np", ".", "append", "(", "counts", ",", "np", ".", "full", "(", "len", "(", "missing_classes", ")", ",", "0", ")", ")", "\n", "inds", "=", "unique", ".", "argsort", "(", ")", "\n", "counts", "=", "counts", "[", "inds", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "unique", ")", ")", ":", "\n", "\t\t\t", "print", "(", "'number of samples in cls {}: {}'", ".", "format", "(", "unique", "[", "u", "]", ",", "counts", "[", "u", "]", ")", ")", "\n", "if", "return_descriptor", ":", "\n", "\t\t\t\t", "df", ".", "loc", "[", "index", "[", "u", "]", ",", "'test'", "]", "=", "counts", "[", "u", "]", "\n", "\n", "", "", "assert", "len", "(", "np", ".", "intersect1d", "(", "self", ".", "train_ids", ",", "self", ".", "test_ids", ")", ")", "==", "0", "\n", "assert", "len", "(", "np", ".", "intersect1d", "(", "self", ".", "train_ids", ",", "self", ".", "val_ids", ")", ")", "==", "0", "\n", "assert", "len", "(", "np", ".", "intersect1d", "(", "self", ".", "val_ids", ",", "self", ".", "test_ids", ")", ")", "==", "0", "\n", "\n", "if", "return_descriptor", ":", "\n", "\t\t\t", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Classification_Dataset.save_split": [[368, 377], ["dataset_generic.Generic_WSI_Classification_Dataset.get_list", "dataset_generic.Generic_WSI_Classification_Dataset.get_list", "dataset_generic.Generic_WSI_Classification_Dataset.get_list", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.concat", "pandas.concat.to_csv"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_list", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_list", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_list"], ["", "", "def", "save_split", "(", "self", ",", "filename", ")", ":", "\n", "\t\t", "train_split", "=", "self", ".", "get_list", "(", "self", ".", "train_ids", ")", "\n", "val_split", "=", "self", ".", "get_list", "(", "self", ".", "val_ids", ")", "\n", "test_split", "=", "self", ".", "get_list", "(", "self", ".", "test_ids", ")", "\n", "df_tr", "=", "pd", ".", "DataFrame", "(", "{", "'train'", ":", "train_split", "}", ")", "\n", "df_v", "=", "pd", ".", "DataFrame", "(", "{", "'val'", ":", "val_split", "}", ")", "\n", "df_t", "=", "pd", ".", "DataFrame", "(", "{", "'test'", ":", "test_split", "}", ")", "\n", "df", "=", "pd", ".", "concat", "(", "[", "df_tr", ",", "df_v", ",", "df_t", "]", ",", "axis", "=", "1", ")", "\n", "df", ".", "to_csv", "(", "filename", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_MIL_Dataset.__init__": [[380, 386], ["dataset_generic.Generic_WSI_Classification_Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__"], ["\t", "def", "__init__", "(", "self", ",", "\n", "data_dir", ",", "\n", "**", "kwargs", ")", ":", "\n", "\t\t", "super", "(", "Generic_MIL_Dataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "use_h5", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_MIL_Dataset.load_from_h5": [[387, 389], ["None"], "methods", ["None"], ["", "def", "load_from_h5", "(", "self", ",", "toggle", ")", ":", "\n", "\t\t", "self", ".", "use_h5", "=", "toggle", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_MIL_Dataset.__getitem__": [[390, 416], ["type", "os.path.join", "torch.from_numpy", "os.path.join", "torch.load", "h5py.File"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "slide_id", "=", "self", ".", "slide_data", "[", "'slide_id'", "]", "[", "idx", "]", "\n", "label", "=", "self", ".", "slide_data", "[", "'label'", "]", "[", "idx", "]", "\n", "if", "type", "(", "self", ".", "data_dir", ")", "==", "dict", ":", "\n", "\t\t\t", "source", "=", "self", ".", "slide_data", "[", "'source'", "]", "[", "idx", "]", "\n", "data_dir", "=", "self", ".", "data_dir", "[", "source", "]", "\n", "", "else", ":", "\n", "\t\t\t", "data_dir", "=", "self", ".", "data_dir", "\n", "\n", "", "if", "not", "self", ".", "use_h5", ":", "\n", "\t\t\t", "if", "self", ".", "data_dir", ":", "\n", "\t\t\t\t", "full_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'pt_files'", ",", "'{}.pt'", ".", "format", "(", "slide_id", ")", ")", "\n", "features", "=", "torch", ".", "load", "(", "full_path", ")", "\n", "return", "features", ",", "label", "\n", "\n", "", "else", ":", "\n", "\t\t\t\t", "return", "slide_id", ",", "label", "\n", "\n", "", "", "else", ":", "\n", "\t\t\t", "full_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'h5_files'", ",", "'{}.h5'", ".", "format", "(", "slide_id", ")", ")", "\n", "with", "h5py", ".", "File", "(", "full_path", ",", "'r'", ")", "as", "hdf5_file", ":", "\n", "\t\t\t\t", "features", "=", "hdf5_file", "[", "'features'", "]", "[", ":", "]", "\n", "coords", "=", "hdf5_file", "[", "'coords'", "]", "[", ":", "]", "\n", "\n", "", "features", "=", "torch", ".", "from_numpy", "(", "features", ")", "\n", "return", "features", ",", "label", ",", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_Split.__init__": [[419, 427], ["range", "range", "numpy.where"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "slide_data", ",", "data_dir", "=", "None", ",", "num_classes", "=", "2", ")", ":", "\n", "\t\t", "self", ".", "use_h5", "=", "False", "\n", "self", ".", "slide_data", "=", "slide_data", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "slide_cls_ids", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "\t\t\t", "self", ".", "slide_cls_ids", "[", "i", "]", "=", "np", ".", "where", "(", "self", ".", "slide_data", "[", "'label'", "]", "==", "i", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_Split.__len__": [[428, 430], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "slide_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Inference_Dataset.__init__": [[433, 449], ["pandas.read_csv", "numpy.array", "numpy.char.strip", "print", "os.listdir", "len"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "\n", "data_dir", ",", "\n", "csv_path", "=", "None", ",", "\n", "print_info", "=", "True", ",", "\n", ")", ":", "\n", "\t\t", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "print_info", "=", "print_info", "\n", "\n", "if", "csv_path", "is", "not", "None", ":", "\n", "\t\t\t", "data", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "self", ".", "slide_data", "=", "data", "[", "'slide_id'", "]", ".", "values", "\n", "", "else", ":", "\n", "\t\t\t", "data", "=", "np", ".", "array", "(", "os", ".", "listdir", "(", "data_dir", ")", ")", "\n", "self", ".", "slide_data", "=", "np", ".", "char", ".", "strip", "(", "data", ",", "chars", "=", "'.pt'", ")", "\n", "", "if", "print_info", ":", "\n", "\t\t\t", "print", "(", "'total number of slides to infer: '", ",", "len", "(", "self", ".", "slide_data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Inference_Dataset.__len__": [[450, 452], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "slide_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.Generic_WSI_Inference_Dataset.__getitem__": [[453, 458], ["os.path.join", "torch.load"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "slide_file", "=", "self", ".", "slide_data", "[", "idx", "]", "+", "'.pt'", "\n", "full_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "'pt_files'", ",", "slide_file", ")", "\n", "features", "=", "torch", ".", "load", "(", "full_path", ")", "\n", "return", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_generic.save_splits": [[19, 33], ["pd.DataFrame.to_csv", "print", "pandas.concat", "pandas.concat", "pd.DataFrame.values.tolist", "numpy.eye().astype", "numpy.repeat", "pandas.DataFrame", "range", "len", "numpy.eye", "len", "len"], "function", ["None"], ["def", "save_splits", "(", "split_datasets", ",", "column_keys", ",", "filename", ",", "boolean_style", "=", "False", ")", ":", "\n", "\t", "splits", "=", "[", "split_datasets", "[", "i", "]", ".", "slide_data", "[", "'slide_id'", "]", "for", "i", "in", "range", "(", "len", "(", "split_datasets", ")", ")", "]", "\n", "if", "not", "boolean_style", ":", "\n", "\t\t", "df", "=", "pd", ".", "concat", "(", "splits", ",", "ignore_index", "=", "True", ",", "axis", "=", "1", ")", "\n", "df", ".", "columns", "=", "column_keys", "\n", "", "else", ":", "\n", "\t\t", "df", "=", "pd", ".", "concat", "(", "splits", ",", "ignore_index", "=", "True", ",", "axis", "=", "0", ")", "\n", "index", "=", "df", ".", "values", ".", "tolist", "(", ")", "\n", "one_hot", "=", "np", ".", "eye", "(", "len", "(", "split_datasets", ")", ")", ".", "astype", "(", "bool", ")", "\n", "bool_array", "=", "np", ".", "repeat", "(", "one_hot", ",", "[", "len", "(", "dset", ")", "for", "dset", "in", "split_datasets", "]", ",", "axis", "=", "0", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "bool_array", ",", "index", "=", "index", ",", "columns", "=", "[", "'train'", ",", "'val'", ",", "'test'", "]", ")", "\n", "\n", "", "df", ".", "to_csv", "(", "filename", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.__init__": [[37, 145], ["pandas.read_csv", "slide_data.reset_index.reset_index.drop_duplicates().copy", "pandas.qcut", "pandas.cut", "slide_data.reset_index.drop_duplicates.insert", "slide_data.reset_index.reset_index.set_index", "slide_data.reset_index.reset_index.reset_index", "slide_data.reset_index.reset_index.assign", "range", "len", "slide_data.reset_index.reset_index.drop_duplicates", "dataset_survival.Generic_WSI_Survival_Dataset.cls_ids_prep", "slide_data.reset_index.reset_index.reset_index", "numpy.random.seed", "numpy.random.shuffle", "slide_data[].max", "slide_data[].min", "disc_labels.values.astype", "isinstance", "patient_dict.update", "list", "list", "dataset_survival.Generic_WSI_Survival_Dataset.summarize", "slide_data.reset_index.reset_index.drop_duplicates", "numpy.array().reshape", "len", "print", "label_dict.update", "int", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.cls_ids_prep", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.summarize"], ["    ", "def", "__init__", "(", "self", ",", "\n", "csv_path", "=", "'dataset_csv/ccrcc_clean.csv'", ",", "\n", "mode", "=", "'omic'", ",", "\n", "\n", "shuffle", "=", "False", ",", "\n", "seed", "=", "7", ",", "\n", "print_info", "=", "True", ",", "\n", "n_bins", "=", "5", ",", "\n", "ignore", "=", "[", "]", ",", "\n", "patient_strat", "=", "False", ",", "\n", "label_col", "=", "None", ",", "\n", "filter_dict", "=", "{", "}", ",", "\n", "eps", "=", "1e-6", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            csv_file (string): Path to the csv file with annotations.\n            shuffle (boolean): Whether to shuffle\n            seed (int): random seed for shuffling the data\n            print_info (boolean): Whether to print a summary of the dataset\n            label_dict (dict): Dictionary with key, value pairs for converting str labels to int\n            ignore (list): List containing class labels to ignore\n        \"\"\"", "\n", "self", ".", "custom_test_ids", "=", "None", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "print_info", "=", "print_info", "\n", "self", ".", "patient_strat", "=", "patient_strat", "\n", "self", ".", "train_ids", ",", "self", ".", "val_ids", ",", "self", ".", "test_ids", "=", "(", "None", ",", "None", ",", "None", ")", "\n", "self", ".", "data_dir", "=", "None", "\n", "\n", "slide_data", "=", "pd", ".", "read_csv", "(", "csv_path", ",", "index_col", "=", "0", ",", "low_memory", "=", "False", ")", "\n", "if", "'case_id'", "not", "in", "slide_data", ":", "\n", "            ", "slide_data", ".", "index", "=", "slide_data", ".", "index", ".", "str", "[", ":", "12", "]", "\n", "slide_data", "[", "'case_id'", "]", "=", "slide_data", ".", "index", "\n", "slide_data", "=", "slide_data", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "", "if", "\"IDC\"", "in", "slide_data", "[", "'oncotree_code'", "]", ":", "# must be BRCA (and if so, use only IDCs)", "\n", "            ", "slide_data", "=", "slide_data", "[", "slide_data", "[", "'oncotree_code'", "]", "==", "'IDC'", "]", "\n", "\n", "\n", "", "if", "not", "label_col", ":", "\n", "            ", "label_col", "=", "'survival'", "\n", "", "else", ":", "\n", "            ", "assert", "label_col", "in", "slide_data", ".", "columns", "\n", "", "self", ".", "label_col", "=", "label_col", "\n", "###shuffle data", "\n", "if", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "slide_data", ")", "\n", "\n", "#self.slide_data = slide_data", "\n", "", "patients_df", "=", "slide_data", ".", "drop_duplicates", "(", "[", "'case_id'", "]", ")", ".", "copy", "(", ")", "\n", "uncensored_df", "=", "patients_df", "[", "patients_df", "[", "'censorship'", "]", "<", "1", "]", "\n", "\n", "#disc_labels, bins = pd.cut(uncensored_df[label_col], bins=n_bins, right=False, include_lowest=True, labels=np.arange(n_bins), retbins=True)", "\n", "disc_labels", ",", "q_bins", "=", "pd", ".", "qcut", "(", "uncensored_df", "[", "label_col", "]", ",", "q", "=", "n_bins", ",", "retbins", "=", "True", ",", "labels", "=", "False", ")", "\n", "q_bins", "[", "-", "1", "]", "=", "slide_data", "[", "label_col", "]", ".", "max", "(", ")", "+", "eps", "\n", "q_bins", "[", "0", "]", "=", "slide_data", "[", "label_col", "]", ".", "min", "(", ")", "-", "eps", "\n", "\n", "disc_labels", ",", "q_bins", "=", "pd", ".", "cut", "(", "patients_df", "[", "label_col", "]", ",", "bins", "=", "q_bins", ",", "retbins", "=", "True", ",", "labels", "=", "False", ",", "right", "=", "False", ",", "include_lowest", "=", "True", ")", "\n", "patients_df", ".", "insert", "(", "2", ",", "'label'", ",", "disc_labels", ".", "values", ".", "astype", "(", "int", ")", ")", "\n", "\n", "patient_dict", "=", "{", "}", "\n", "slide_data", "=", "slide_data", ".", "set_index", "(", "'case_id'", ")", "\n", "for", "patient", "in", "patients_df", "[", "'case_id'", "]", ":", "\n", "            ", "slide_ids", "=", "slide_data", ".", "loc", "[", "patient", ",", "'slide_id'", "]", "\n", "if", "isinstance", "(", "slide_ids", ",", "str", ")", ":", "\n", "                ", "slide_ids", "=", "np", ".", "array", "(", "slide_ids", ")", ".", "reshape", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "slide_ids", "=", "slide_ids", ".", "values", "\n", "", "patient_dict", ".", "update", "(", "{", "patient", ":", "slide_ids", "}", ")", "\n", "\n", "", "self", ".", "patient_dict", "=", "patient_dict", "\n", "\n", "slide_data", "=", "patients_df", "\n", "slide_data", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "slide_data", "=", "slide_data", ".", "assign", "(", "slide_id", "=", "slide_data", "[", "'case_id'", "]", ")", "\n", "\n", "label_dict", "=", "{", "}", "\n", "key_count", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "q_bins", ")", "-", "1", ")", ":", "\n", "            ", "for", "c", "in", "[", "0", ",", "1", "]", ":", "\n", "                ", "print", "(", "'{} : {}'", ".", "format", "(", "(", "i", ",", "c", ")", ",", "key_count", ")", ")", "\n", "label_dict", ".", "update", "(", "{", "(", "i", ",", "c", ")", ":", "key_count", "}", ")", "\n", "key_count", "+=", "1", "\n", "\n", "", "", "self", ".", "label_dict", "=", "label_dict", "\n", "for", "i", "in", "slide_data", ".", "index", ":", "\n", "            ", "key", "=", "slide_data", ".", "loc", "[", "i", ",", "'label'", "]", "\n", "slide_data", ".", "at", "[", "i", ",", "'disc_label'", "]", "=", "key", "\n", "censorship", "=", "slide_data", ".", "loc", "[", "i", ",", "'censorship'", "]", "\n", "key", "=", "(", "key", ",", "int", "(", "censorship", ")", ")", "\n", "slide_data", ".", "at", "[", "i", ",", "'label'", "]", "=", "label_dict", "[", "key", "]", "\n", "\n", "", "self", ".", "bins", "=", "q_bins", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "label_dict", ")", "\n", "patients_df", "=", "slide_data", ".", "drop_duplicates", "(", "[", "'case_id'", "]", ")", "\n", "self", ".", "patient_data", "=", "{", "'case_id'", ":", "patients_df", "[", "'case_id'", "]", ".", "values", ",", "'label'", ":", "patients_df", "[", "'label'", "]", ".", "values", "}", "\n", "\n", "new_cols", "=", "list", "(", "slide_data", ".", "columns", "[", "-", "2", ":", "]", ")", "+", "list", "(", "slide_data", ".", "columns", "[", ":", "-", "2", "]", ")", "\n", "slide_data", "=", "slide_data", "[", "new_cols", "]", "\n", "self", ".", "slide_data", "=", "slide_data", "\n", "self", ".", "metadata", "=", "slide_data", ".", "columns", "[", ":", "11", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "cls_ids_prep", "(", ")", "\n", "\n", "if", "print_info", ":", "\n", "            ", "self", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.init_multi_site_label_dict": [[147, 160], ["print", "numpy.unique", "len", "label_dict.items", "enumerate", "multi_site_dict.update", "print"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "init_multi_site_label_dict", "(", "slide_data", ",", "label_dict", ")", ":", "\n", "        ", "print", "(", "'initiating multi-source label dictionary'", ")", "\n", "sites", "=", "np", ".", "unique", "(", "slide_data", "[", "'site'", "]", ".", "values", ")", "\n", "multi_site_dict", "=", "{", "}", "\n", "num_classes", "=", "len", "(", "label_dict", ")", "\n", "for", "key", ",", "val", "in", "label_dict", ".", "items", "(", ")", ":", "\n", "            ", "for", "idx", ",", "site", "in", "enumerate", "(", "sites", ")", ":", "\n", "                ", "site_key", "=", "(", "key", ",", "site", ")", "\n", "site_val", "=", "val", "+", "idx", "*", "num_classes", "\n", "multi_site_dict", ".", "update", "(", "{", "site_key", ":", "site_val", "}", ")", "\n", "print", "(", "'{} : {}'", ".", "format", "(", "site_key", ",", "site_val", ")", ")", "\n", "", "", "return", "multi_site_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.cls_ids_prep": [[161, 169], ["range", "range", "range", "numpy.where", "range", "numpy.where"], "methods", ["None"], ["", "def", "cls_ids_prep", "(", "self", ")", ":", "\n", "        ", "self", ".", "patient_cls_ids", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "self", ".", "patient_cls_ids", "[", "i", "]", "=", "np", ".", "where", "(", "self", ".", "patient_data", "[", "'label'", "]", "==", "i", ")", "[", "0", "]", "\n", "\n", "", "self", ".", "slide_cls_ids", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "self", ".", "slide_cls_ids", "[", "i", "]", "=", "np", ".", "where", "(", "self", ".", "slide_data", "[", "'label'", "]", "==", "i", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.patient_data_prep": [[170, 181], ["numpy.unique", "numpy.array", "dataset_survival.Generic_WSI_Survival_Dataset.slide_data[].index.tolist", "patient_labels.append", "numpy.array", "len"], "methods", ["None"], ["", "", "def", "patient_data_prep", "(", "self", ")", ":", "\n", "        ", "patients", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "self", ".", "slide_data", "[", "'case_id'", "]", ")", ")", "# get unique patients", "\n", "patient_labels", "=", "[", "]", "\n", "\n", "for", "p", "in", "patients", ":", "\n", "            ", "locations", "=", "self", ".", "slide_data", "[", "self", ".", "slide_data", "[", "'case_id'", "]", "==", "p", "]", ".", "index", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "locations", ")", ">", "0", "\n", "label", "=", "self", ".", "slide_data", "[", "'label'", "]", "[", "locations", "[", "0", "]", "]", "# get patient label", "\n", "patient_labels", ".", "append", "(", "label", ")", "\n", "\n", "", "self", ".", "patient_data", "=", "{", "'case_id'", ":", "patients", ",", "'label'", ":", "np", ".", "array", "(", "patient_labels", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.df_prep": [[182, 189], ["data[].isin", "data.reset_index", "pandas.cut"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "df_prep", "(", "data", ",", "n_bins", ",", "ignore", ",", "label_col", ")", ":", "\n", "        ", "mask", "=", "data", "[", "label_col", "]", ".", "isin", "(", "ignore", ")", "\n", "data", "=", "data", "[", "~", "mask", "]", "\n", "data", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "disc_labels", ",", "bins", "=", "pd", ".", "cut", "(", "data", "[", "label_col", "]", ",", "bins", "=", "n_bins", ")", "\n", "return", "data", ",", "bins", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.__len__": [[190, 196], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "patient_strat", ":", "\n", "            ", "return", "len", "(", "self", ".", "patient_data", "[", "'case_id'", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "slide_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.summarize": [[197, 205], ["print", "print", "print", "print", "range", "dataset_survival.Generic_WSI_Survival_Dataset.slide_data[].value_counts", "print", "print"], "methods", ["None"], ["", "", "def", "summarize", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"label column: {}\"", ".", "format", "(", "self", ".", "label_col", ")", ")", "\n", "print", "(", "\"label dictionary: {}\"", ".", "format", "(", "self", ".", "label_dict", ")", ")", "\n", "print", "(", "\"number of classes: {}\"", ".", "format", "(", "self", ".", "num_classes", ")", ")", "\n", "print", "(", "\"slide-level counts: \"", ",", "'\\n'", ",", "self", ".", "slide_data", "[", "'label'", "]", ".", "value_counts", "(", "sort", "=", "False", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "print", "(", "'Patient-LVL; Number of samples registered in class %d: %d'", "%", "(", "i", ",", "self", ".", "patient_cls_ids", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "print", "(", "'Slide-LVL; Number of samples registered in class %d: %d'", "%", "(", "i", ",", "self", ".", "slide_cls_ids", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.create_splits": [[206, 222], ["utils.utils.generate_split", "settings.update", "settings.update", "len", "len"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.generate_split"], ["", "", "def", "create_splits", "(", "self", ",", "k", "=", "3", ",", "val_num", "=", "(", "25", ",", "25", ")", ",", "test_num", "=", "(", "40", ",", "40", ")", ",", "label_frac", "=", "1.0", ",", "custom_test_ids", "=", "None", ")", ":", "\n", "        ", "settings", "=", "{", "\n", "'n_splits'", ":", "k", ",", "\n", "'val_num'", ":", "val_num", ",", "\n", "'test_num'", ":", "test_num", ",", "\n", "'label_frac'", ":", "label_frac", ",", "\n", "'seed'", ":", "self", ".", "seed", ",", "\n", "'custom_test_ids'", ":", "self", ".", "custom_test_ids", "\n", "}", "\n", "\n", "if", "self", ".", "patient_strat", ":", "\n", "            ", "settings", ".", "update", "(", "{", "'cls_ids'", ":", "self", ".", "patient_cls_ids", ",", "'samples'", ":", "len", "(", "self", ".", "patient_data", "[", "'case_id'", "]", ")", "}", ")", "\n", "", "else", ":", "\n", "            ", "settings", ".", "update", "(", "{", "'cls_ids'", ":", "self", ".", "slide_cls_ids", ",", "'samples'", ":", "len", "(", "self", ".", "slide_data", ")", "}", ")", "\n", "\n", "", "self", ".", "split_gen", "=", "generate_split", "(", "**", "settings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.set_splits": [[223, 243], ["utils.utils.nth", "next", "range", "len", "range", "dataset_survival.Generic_WSI_Survival_Dataset.slide_data[].index.tolist", "slide_ids[].extend", "len"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.nth"], ["", "def", "set_splits", "(", "self", ",", "start_from", "=", "None", ")", ":", "\n", "        ", "if", "start_from", ":", "\n", "            ", "ids", "=", "nth", "(", "self", ".", "split_gen", ",", "start_from", ")", "\n", "\n", "", "else", ":", "\n", "            ", "ids", "=", "next", "(", "self", ".", "split_gen", ")", "\n", "\n", "", "if", "self", ".", "patient_strat", ":", "\n", "            ", "slide_ids", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "ids", ")", ")", "]", "\n", "\n", "for", "split", "in", "range", "(", "len", "(", "ids", ")", ")", ":", "\n", "                ", "for", "idx", "in", "ids", "[", "split", "]", ":", "\n", "                    ", "case_id", "=", "self", ".", "patient_data", "[", "'case_id'", "]", "[", "idx", "]", "\n", "slide_indices", "=", "self", ".", "slide_data", "[", "self", ".", "slide_data", "[", "'case_id'", "]", "==", "case_id", "]", ".", "index", ".", "tolist", "(", ")", "\n", "slide_ids", "[", "split", "]", ".", "extend", "(", "slide_indices", ")", "\n", "\n", "", "", "self", ".", "train_ids", ",", "self", ".", "val_ids", ",", "self", ".", "test_ids", "=", "slide_ids", "[", "0", "]", ",", "slide_ids", "[", "1", "]", ",", "slide_ids", "[", "2", "]", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_ids", ",", "self", ".", "val_ids", ",", "self", ".", "test_ids", "=", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_split_from_df": [[244, 258], ["Generic_Split.dropna().reset_index", "len", "dataset_survival.Generic_WSI_Survival_Dataset.slide_data[].isin", "dataset_survival.Generic_WSI_Survival_Dataset.slide_data[].reset_index", "dataset_survival.Generic_Split", "Generic_Split.dropna", "Generic_Split.tolist"], "methods", ["None"], ["", "", "def", "get_split_from_df", "(", "self", ",", "all_splits", ":", "dict", ",", "split_key", ":", "str", "=", "'train'", ",", "scaler", "=", "None", ")", ":", "\n", "        ", "split", "=", "all_splits", "[", "split_key", "]", "\n", "split", "=", "split", ".", "dropna", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "#pdb.set_trace()", "\n", "\n", "if", "len", "(", "split", ")", ">", "0", ":", "\n", "            ", "mask", "=", "self", ".", "slide_data", "[", "'slide_id'", "]", ".", "isin", "(", "split", ".", "tolist", "(", ")", ")", "\n", "df_slice", "=", "self", ".", "slide_data", "[", "mask", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "split", "=", "Generic_Split", "(", "df_slice", ",", "metadata", "=", "self", ".", "metadata", ",", "mode", "=", "self", ".", "mode", ",", "data_dir", "=", "self", ".", "data_dir", ",", "label_col", "=", "self", ".", "label_col", ",", "patient_dict", "=", "self", ".", "patient_dict", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "split", "=", "None", "\n", "\n", "", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_merged_split_from_df": [[259, 274], ["Generic_Split.dropna().reset_index().tolist", "merged_split.extend", "len", "dataset_survival.Generic_WSI_Survival_Dataset.slide_data[].isin", "dataset_survival.Generic_WSI_Survival_Dataset.slide_data[].dropna().reset_index", "dataset_survival.Generic_Split", "Generic_Split.dropna().reset_index", "dataset_survival.Generic_WSI_Survival_Dataset.slide_data[].dropna", "Generic_Split.dropna"], "methods", ["None"], ["", "def", "get_merged_split_from_df", "(", "self", ",", "all_splits", ",", "split_keys", "=", "[", "'train'", "]", ")", ":", "\n", "        ", "merged_split", "=", "[", "]", "\n", "for", "split_key", "in", "split_keys", ":", "\n", "            ", "split", "=", "all_splits", "[", "split_key", "]", "\n", "split", "=", "split", ".", "dropna", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", ".", "tolist", "(", ")", "\n", "merged_split", ".", "extend", "(", "split", ")", "\n", "\n", "", "if", "len", "(", "split", ")", ">", "0", ":", "\n", "            ", "mask", "=", "self", ".", "slide_data", "[", "'slide_id'", "]", ".", "isin", "(", "merged_split", ")", "\n", "df_slice", "=", "self", ".", "slide_data", "[", "mask", "]", ".", "dropna", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "split", "=", "Generic_Split", "(", "df_slice", ",", "metadata", "=", "self", ".", "metadata", ",", "data_dir", "=", "self", ".", "data_dir", ",", "label_col", "=", "self", ".", "label_col", ",", "patient_dict", "=", "self", ".", "patient_dict", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "split", "=", "None", "\n", "\n", "", "return", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.return_splits": [[276, 317], ["pandas.read_csv", "dataset_survival.Generic_WSI_Survival_Dataset.get_split_from_df", "dataset_survival.Generic_WSI_Survival_Dataset.get_split_from_df", "print", "dataset_survival.Generic_Split.get_scaler", "dataset_survival.Generic_Split.apply_scaler", "dataset_survival.Generic_Split.apply_scaler", "len", "dataset_survival.Generic_WSI_Survival_Dataset.slide_data.loc[].reset_index", "dataset_survival.Generic_Split", "len", "dataset_survival.Generic_WSI_Survival_Dataset.slide_data.loc[].reset_index", "dataset_survival.Generic_Split", "len", "dataset_survival.Generic_WSI_Survival_Dataset.slide_data.loc[].reset_index", "dataset_survival.Generic_Split"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_split_from_df", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_split_from_df", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_Split.get_scaler", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_Split.apply_scaler", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_Split.apply_scaler"], ["", "def", "return_splits", "(", "self", ",", "from_id", ":", "bool", "=", "True", ",", "csv_path", ":", "str", "=", "None", ")", ":", "\n", "\n", "\n", "        ", "if", "from_id", ":", "\n", "            ", "if", "len", "(", "self", ".", "train_ids", ")", ">", "0", ":", "\n", "                ", "train_data", "=", "self", ".", "slide_data", ".", "loc", "[", "self", ".", "train_ids", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "train_split", "=", "Generic_Split", "(", "train_data", ",", "metadata", "=", "self", ".", "metadata", ",", "data_dir", "=", "self", ".", "data_dir", ",", "label_col", "=", "self", ".", "label_col", ",", "patient_dict", "=", "self", ".", "patient_dict", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "\n", "", "else", ":", "\n", "                ", "train_split", "=", "None", "\n", "\n", "", "if", "len", "(", "self", ".", "val_ids", ")", ">", "0", ":", "\n", "                ", "val_data", "=", "self", ".", "slide_data", ".", "loc", "[", "self", ".", "val_ids", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "val_split", "=", "Generic_Split", "(", "val_data", ",", "metadata", "=", "self", ".", "metadata", ",", "data_dir", "=", "self", ".", "data_dir", ",", "label_col", "=", "self", ".", "label_col", ",", "patient_dict", "=", "self", ".", "patient_dict", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "\n", "", "else", ":", "\n", "                ", "val_split", "=", "None", "\n", "\n", "", "if", "len", "(", "self", ".", "test_ids", ")", ">", "0", ":", "\n", "                ", "test_data", "=", "self", ".", "slide_data", ".", "loc", "[", "self", ".", "test_ids", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "test_split", "=", "Generic_Split", "(", "test_data", ",", "metadata", "=", "self", ".", "metadata", ",", "data_dir", "=", "self", ".", "data_dir", ",", "label_col", "=", "self", ".", "label_col", ",", "patient_dict", "=", "self", ".", "patient_dict", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "\n", "", "else", ":", "\n", "                ", "test_split", "=", "None", "\n", "\n", "", "", "else", ":", "\n", "            ", "assert", "csv_path", "\n", "all_splits", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "train_split", "=", "self", ".", "get_split_from_df", "(", "all_splits", "=", "all_splits", ",", "split_key", "=", "'train'", ")", "\n", "val_split", "=", "self", ".", "get_split_from_df", "(", "all_splits", "=", "all_splits", ",", "split_key", "=", "'val'", ")", "\n", "test_split", "=", "None", "#self.get_split_from_df(all_splits=all_splits, split_key='test')", "\n", "\n", "### --> Normalizing Data", "\n", "print", "(", "\"****** Normalizing Data ******\"", ")", "\n", "scalers", "=", "train_split", ".", "get_scaler", "(", ")", "\n", "train_split", ".", "apply_scaler", "(", "scalers", "=", "scalers", ")", "\n", "val_split", ".", "apply_scaler", "(", "scalers", "=", "scalers", ")", "\n", "#test_split.apply_scaler(scalers=scalers)", "\n", "### <--", "\n", "\n", "", "return", "train_split", ",", "val_split", "#, test_split", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_list": [[318, 320], ["None"], "methods", ["None"], ["", "def", "get_list", "(", "self", ",", "ids", ")", ":", "\n", "        ", "return", "self", ".", "slide_data", "[", "'slide_id'", "]", "[", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.getlabel": [[321, 323], ["None"], "methods", ["None"], ["", "def", "getlabel", "(", "self", ",", "ids", ")", ":", "\n", "        ", "return", "self", ".", "slide_data", "[", "'label'", "]", "[", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.__getitem__": [[324, 326], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.key_pair2desc": [[327, 331], ["None"], "methods", ["None"], ["", "def", "key_pair2desc", "(", "self", ",", "key_pair", ")", ":", "\n", "        ", "label", ",", "censorship", "=", "key_pair", "\n", "label_desc", "=", "(", "self", ".", "bins", "[", "label", "]", ",", "self", ".", "bins", "[", "label", "]", "+", "1", ",", "censorship", ")", "\n", "return", "label_desc", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.test_split_gen": [[332, 387], ["len", "print", "dataset_survival.Generic_WSI_Survival_Dataset.getlabel", "numpy.unique", "numpy.setdiff1d", "numpy.append", "numpy.append", "numpy.append.argsort", "range", "len", "print", "dataset_survival.Generic_WSI_Survival_Dataset.getlabel", "numpy.unique", "numpy.setdiff1d", "numpy.append", "numpy.append", "numpy.append.argsort", "range", "len", "print", "dataset_survival.Generic_WSI_Survival_Dataset.getlabel", "numpy.unique", "numpy.setdiff1d", "numpy.append", "numpy.append", "numpy.append.argsort", "range", "pandas.DataFrame", "numpy.arange", "numpy.full", "len", "print", "numpy.arange", "numpy.full", "len", "print", "numpy.arange", "numpy.full", "len", "print", "len", "len", "len", "dataset_survival.Generic_WSI_Survival_Dataset.key_pair2desc", "numpy.full", "len", "len", "len", "numpy.intersect1d", "numpy.intersect1d", "numpy.intersect1d", "list", "range", "dataset_survival.Generic_WSI_Survival_Dataset.label_dict.keys", "list().index", "len", "len", "list", "dataset_survival.Generic_WSI_Survival_Dataset.label_dict.values"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.getlabel", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.getlabel", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.getlabel", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.key_pair2desc"], ["", "def", "test_split_gen", "(", "self", ",", "return_descriptor", "=", "False", ")", ":", "\n", "        ", "if", "return_descriptor", ":", "\n", "            ", "index", "=", "[", "list", "(", "self", ".", "label_dict", ".", "keys", "(", ")", ")", "[", "list", "(", "self", ".", "label_dict", ".", "values", "(", ")", ")", ".", "index", "(", "i", ")", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "index", "=", "[", "self", ".", "key_pair2desc", "(", "key_pair", ")", "for", "key_pair", "in", "index", "]", "\n", "columns", "=", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "df", "=", "pd", ".", "DataFrame", "(", "np", ".", "full", "(", "(", "len", "(", "index", ")", ",", "len", "(", "columns", ")", ")", ",", "0", ",", "dtype", "=", "np", ".", "int32", ")", ",", "index", "=", "index", ",", "\n", "columns", "=", "columns", ")", "\n", "", "count", "=", "len", "(", "self", ".", "train_ids", ")", "\n", "print", "(", "'\\nnumber of training samples: {}'", ".", "format", "(", "count", ")", ")", "\n", "labels", "=", "self", ".", "getlabel", "(", "self", ".", "train_ids", ")", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "missing_classes", "=", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "self", ".", "num_classes", ")", ",", "unique", ")", "\n", "unique", "=", "np", ".", "append", "(", "unique", ",", "missing_classes", ")", "\n", "counts", "=", "np", ".", "append", "(", "counts", ",", "np", ".", "full", "(", "len", "(", "missing_classes", ")", ",", "0", ")", ")", "\n", "inds", "=", "unique", ".", "argsort", "(", ")", "\n", "counts", "=", "counts", "[", "inds", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "unique", ")", ")", ":", "\n", "            ", "print", "(", "'number of samples in cls {}: {}'", ".", "format", "(", "unique", "[", "u", "]", ",", "counts", "[", "u", "]", ")", ")", "\n", "if", "return_descriptor", ":", "\n", "                ", "df", ".", "loc", "[", "index", "[", "u", "]", ",", "'train'", "]", "=", "counts", "[", "u", "]", "\n", "\n", "", "", "count", "=", "len", "(", "self", ".", "val_ids", ")", "\n", "print", "(", "'\\nnumber of val samples: {}'", ".", "format", "(", "count", ")", ")", "\n", "labels", "=", "self", ".", "getlabel", "(", "self", ".", "val_ids", ")", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "missing_classes", "=", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "self", ".", "num_classes", ")", ",", "unique", ")", "\n", "unique", "=", "np", ".", "append", "(", "unique", ",", "missing_classes", ")", "\n", "counts", "=", "np", ".", "append", "(", "counts", ",", "np", ".", "full", "(", "len", "(", "missing_classes", ")", ",", "0", ")", ")", "\n", "inds", "=", "unique", ".", "argsort", "(", ")", "\n", "counts", "=", "counts", "[", "inds", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "unique", ")", ")", ":", "\n", "            ", "print", "(", "'number of samples in cls {}: {}'", ".", "format", "(", "unique", "[", "u", "]", ",", "counts", "[", "u", "]", ")", ")", "\n", "if", "return_descriptor", ":", "\n", "                ", "df", ".", "loc", "[", "index", "[", "u", "]", ",", "'val'", "]", "=", "counts", "[", "u", "]", "\n", "\n", "", "", "count", "=", "len", "(", "self", ".", "test_ids", ")", "\n", "print", "(", "'\\nnumber of test samples: {}'", ".", "format", "(", "count", ")", ")", "\n", "labels", "=", "self", ".", "getlabel", "(", "self", ".", "test_ids", ")", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "labels", ",", "return_counts", "=", "True", ")", "\n", "missing_classes", "=", "np", ".", "setdiff1d", "(", "np", ".", "arange", "(", "self", ".", "num_classes", ")", ",", "unique", ")", "\n", "unique", "=", "np", ".", "append", "(", "unique", ",", "missing_classes", ")", "\n", "counts", "=", "np", ".", "append", "(", "counts", ",", "np", ".", "full", "(", "len", "(", "missing_classes", ")", ",", "0", ")", ")", "\n", "inds", "=", "unique", ".", "argsort", "(", ")", "\n", "counts", "=", "counts", "[", "inds", "]", "\n", "for", "u", "in", "range", "(", "len", "(", "unique", ")", ")", ":", "\n", "            ", "print", "(", "'number of samples in cls {}: {}'", ".", "format", "(", "unique", "[", "u", "]", ",", "counts", "[", "u", "]", ")", ")", "\n", "if", "return_descriptor", ":", "\n", "                ", "df", ".", "loc", "[", "index", "[", "u", "]", ",", "'test'", "]", "=", "counts", "[", "u", "]", "\n", "\n", "", "", "assert", "len", "(", "np", ".", "intersect1d", "(", "self", ".", "train_ids", ",", "self", ".", "test_ids", ")", ")", "==", "0", "\n", "assert", "len", "(", "np", ".", "intersect1d", "(", "self", ".", "train_ids", ",", "self", ".", "val_ids", ")", ")", "==", "0", "\n", "assert", "len", "(", "np", ".", "intersect1d", "(", "self", ".", "val_ids", ",", "self", ".", "test_ids", ")", ")", "==", "0", "\n", "\n", "if", "return_descriptor", ":", "\n", "            ", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.save_split": [[388, 397], ["dataset_survival.Generic_WSI_Survival_Dataset.get_list", "dataset_survival.Generic_WSI_Survival_Dataset.get_list", "dataset_survival.Generic_WSI_Survival_Dataset.get_list", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.concat", "pandas.concat.to_csv"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_list", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_list", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_WSI_Survival_Dataset.get_list"], ["", "", "def", "save_split", "(", "self", ",", "filename", ")", ":", "\n", "        ", "train_split", "=", "self", ".", "get_list", "(", "self", ".", "train_ids", ")", "\n", "val_split", "=", "self", ".", "get_list", "(", "self", ".", "val_ids", ")", "\n", "test_split", "=", "self", ".", "get_list", "(", "self", ".", "test_ids", ")", "\n", "df_tr", "=", "pd", ".", "DataFrame", "(", "{", "'train'", ":", "train_split", "}", ")", "\n", "df_v", "=", "pd", ".", "DataFrame", "(", "{", "'val'", ":", "val_split", "}", ")", "\n", "df_t", "=", "pd", ".", "DataFrame", "(", "{", "'test'", ":", "test_split", "}", ")", "\n", "df", "=", "pd", ".", "concat", "(", "[", "df_tr", ",", "df_v", ",", "df_t", "]", ",", "axis", "=", "1", ")", "\n", "df", ".", "to_csv", "(", "filename", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_MIL_Survival_Dataset.__init__": [[400, 409], ["dataset_survival.Generic_WSI_Survival_Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "data_dir", ",", "\n", "mode", ":", "str", "=", "'omic'", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "Generic_MIL_Survival_Dataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "use_h5", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_MIL_Survival_Dataset.load_from_h5": [[410, 412], ["None"], "methods", ["None"], ["", "def", "load_from_h5", "(", "self", ",", "toggle", ")", ":", "\n", "        ", "self", ".", "use_h5", "=", "toggle", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_MIL_Survival_Dataset.__getitem__": [[413, 458], ["type", "torch.cat", "os.path.join", "torch.load", "torch.cat.append", "torch.zeros", "torch.tensor", "torch.zeros", "torch.cat", "torch.tensor", "NotImplementedError", "slide_id.rstrip", "os.path.join", "torch.load", "torch.cat.append", "slide_id.rstrip"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "case_id", "=", "self", ".", "slide_data", "[", "'case_id'", "]", "[", "idx", "]", "\n", "label", "=", "self", ".", "slide_data", "[", "'disc_label'", "]", "[", "idx", "]", "\n", "event_time", "=", "self", ".", "slide_data", "[", "self", ".", "label_col", "]", "[", "idx", "]", "\n", "c", "=", "self", ".", "slide_data", "[", "'censorship'", "]", "[", "idx", "]", "\n", "slide_ids", "=", "self", ".", "patient_dict", "[", "case_id", "]", "\n", "\n", "if", "type", "(", "self", ".", "data_dir", ")", "==", "dict", ":", "\n", "            ", "source", "=", "self", ".", "slide_data", "[", "'oncotree_code'", "]", "[", "idx", "]", "\n", "data_dir", "=", "self", ".", "data_dir", "[", "source", "]", "\n", "", "else", ":", "\n", "            ", "data_dir", "=", "self", ".", "data_dir", "\n", "\n", "\n", "", "if", "not", "self", ".", "use_h5", ":", "\n", "            ", "if", "self", ".", "data_dir", ":", "\n", "\n", "                ", "if", "self", ".", "mode", "==", "'path'", ":", "\n", "                    ", "path_features", "=", "[", "]", "\n", "for", "slide_id", "in", "slide_ids", ":", "\n", "                        ", "wsi_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'pt_files'", ",", "'{}.pt'", ".", "format", "(", "slide_id", ".", "rstrip", "(", "'.svs'", ")", ")", ")", "\n", "wsi_bag", "=", "torch", ".", "load", "(", "wsi_path", ")", "\n", "path_features", ".", "append", "(", "wsi_bag", ")", "\n", "", "path_features", "=", "torch", ".", "cat", "(", "path_features", ",", "dim", "=", "0", ")", "\n", "return", "(", "path_features", ",", "torch", ".", "zeros", "(", "(", "1", ",", "1", ")", ")", ",", "label", ",", "event_time", ",", "c", ")", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'omic'", ":", "\n", "                    ", "genomic_features", "=", "torch", ".", "tensor", "(", "self", ".", "genomic_features", "[", "idx", "]", ")", "\n", "return", "(", "torch", ".", "zeros", "(", "(", "1", ",", "1", ")", ")", ",", "genomic_features", ",", "label", ",", "event_time", ",", "c", ")", "\n", "\n", "", "elif", "self", ".", "mode", "==", "'pathomic'", ":", "\n", "                    ", "path_features", "=", "[", "]", "\n", "for", "slide_id", "in", "slide_ids", ":", "\n", "                        ", "wsi_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'pt_files'", ",", "'{}.pt'", ".", "format", "(", "slide_id", ".", "rstrip", "(", "'.svs'", ")", ")", ")", "\n", "wsi_bag", "=", "torch", ".", "load", "(", "wsi_path", ")", "\n", "path_features", ".", "append", "(", "wsi_bag", ")", "\n", "", "path_features", "=", "torch", ".", "cat", "(", "path_features", ",", "dim", "=", "0", ")", "\n", "genomic_features", "=", "torch", ".", "tensor", "(", "self", ".", "genomic_features", "[", "idx", "]", ")", "\n", "return", "(", "path_features", ",", "genomic_features", ",", "label", ",", "event_time", ",", "c", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "(", "'Mode [%s] not implemented.'", "%", "self", ".", "mode", ")", "\n", "### <--", "\n", "", "", "else", ":", "\n", "                ", "return", "slide_ids", ",", "label", ",", "event_time", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_Split.__init__": [[462, 476], ["range", "dataset_survival.Generic_Split.slide_data.drop", "range", "numpy.where"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "slide_data", ",", "metadata", ",", "mode", ",", "data_dir", "=", "None", ",", "label_col", "=", "None", ",", "patient_dict", "=", "None", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "self", ".", "use_h5", "=", "False", "\n", "self", ".", "slide_data", "=", "slide_data", "\n", "self", ".", "metadata", "=", "metadata", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "label_col", "=", "label_col", "\n", "self", ".", "patient_dict", "=", "patient_dict", "\n", "self", ".", "slide_cls_ids", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "self", ".", "slide_cls_ids", "[", "i", "]", "=", "np", ".", "where", "(", "self", ".", "slide_data", "[", "'label'", "]", "==", "i", ")", "[", "0", "]", "\n", "\n", "", "self", ".", "genomic_features", "=", "self", ".", "slide_data", ".", "drop", "(", "self", ".", "metadata", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_Split.__len__": [[477, 479], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "slide_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_Split.get_scaler": [[480, 483], ["sklearn.preprocessing.StandardScaler().fit", "sklearn.preprocessing.StandardScaler"], "methods", ["None"], ["", "def", "get_scaler", "(", "self", ")", ":", "\n", "        ", "scaler_omic", "=", "StandardScaler", "(", ")", ".", "fit", "(", "self", ".", "genomic_features", ")", "\n", "return", "scaler_omic", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.Generic_Split.apply_scaler": [[484, 486], ["scalers.transform"], "methods", ["None"], ["", "def", "apply_scaler", "(", "self", ",", "scalers", ":", "tuple", "=", "None", ")", ":", "\n", "        ", "self", ".", "genomic_features", "=", "scalers", ".", "transform", "(", "self", ".", "genomic_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_survival.save_splits": [[20, 34], ["pd.DataFrame.to_csv", "print", "pandas.concat", "pandas.concat", "pd.DataFrame.values.tolist", "numpy.eye().astype", "numpy.repeat", "pandas.DataFrame", "range", "len", "numpy.eye", "len", "len"], "function", ["None"], ["def", "save_splits", "(", "split_datasets", ",", "column_keys", ",", "filename", ",", "boolean_style", "=", "False", ")", ":", "\n", "    ", "splits", "=", "[", "split_datasets", "[", "i", "]", ".", "slide_data", "[", "'slide_id'", "]", "for", "i", "in", "range", "(", "len", "(", "split_datasets", ")", ")", "]", "\n", "if", "not", "boolean_style", ":", "\n", "        ", "df", "=", "pd", ".", "concat", "(", "splits", ",", "ignore_index", "=", "True", ",", "axis", "=", "1", ")", "\n", "df", ".", "columns", "=", "column_keys", "\n", "", "else", ":", "\n", "        ", "df", "=", "pd", ".", "concat", "(", "splits", ",", "ignore_index", "=", "True", ",", "axis", "=", "0", ")", "\n", "index", "=", "df", ".", "values", ".", "tolist", "(", ")", "\n", "one_hot", "=", "np", ".", "eye", "(", "len", "(", "split_datasets", ")", ")", ".", "astype", "(", "bool", ")", "\n", "bool_array", "=", "np", ".", "repeat", "(", "one_hot", ",", "[", "len", "(", "dset", ")", "for", "dset", "in", "split_datasets", "]", ",", "axis", "=", "0", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "bool_array", ",", "index", "=", "index", ",", "columns", "=", "[", "'train'", ",", "'val'", ",", "'test'", "]", ")", "\n", "\n", "", "df", ".", "to_csv", "(", "filename", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Whole_Slide_Bag.__init__": [[39, 64], ["dataset_h5.Whole_Slide_Bag.summary", "dataset_h5.eval_transforms", "h5py.File", "len"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Whole_Slide_Bag_FP.summary", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.eval_transforms"], ["\t", "def", "__init__", "(", "self", ",", "\n", "file_path", ",", "\n", "pretrained", "=", "False", ",", "\n", "custom_transforms", "=", "None", "\n", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tArgs:\n\t\t\tfile_path (string): Path to the .h5 file containing patched data.\n\t\t\tpretrained (bool): Use ImageNet transforms\n\t\t\tcustom_transforms (callable, optional): Optional transform to be applied on a sample\n\t\t\"\"\"", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "\n", "if", "not", "custom_transforms", ":", "\n", "\t\t\t", "self", ".", "roi_transforms", "=", "eval_transforms", "(", "pretrained", "=", "pretrained", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "roi_transforms", "=", "custom_transforms", "\n", "\n", "", "self", ".", "file_path", "=", "file_path", "\n", "\n", "with", "h5py", ".", "File", "(", "self", ".", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "\t\t\t", "dset", "=", "f", "[", "'imgs'", "]", "\n", "self", ".", "length", "=", "len", "(", "dset", ")", "\n", "\n", "", "self", ".", "summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Whole_Slide_Bag.__len__": [[65, 67], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Whole_Slide_Bag.summary": [[68, 76], ["h5py.File", "dset.attrs.items", "print", "print", "print"], "methods", ["None"], ["", "def", "summary", "(", "self", ")", ":", "\n", "\t\t", "hdf5_file", "=", "h5py", ".", "File", "(", "self", ".", "file_path", ",", "\"r\"", ")", "\n", "dset", "=", "hdf5_file", "[", "'imgs'", "]", "\n", "for", "name", ",", "value", "in", "dset", ".", "attrs", ".", "items", "(", ")", ":", "\n", "\t\t\t", "print", "(", "name", ",", "value", ")", "\n", "\n", "", "print", "(", "'pretrained:'", ",", "self", ".", "pretrained", ")", "\n", "print", "(", "'transformations:'", ",", "self", ".", "roi_transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Whole_Slide_Bag.__getitem__": [[77, 85], ["PIL.Image.fromarray", "dataset_h5.Whole_Slide_Bag.roi_transforms().unsqueeze", "h5py.File", "dataset_h5.Whole_Slide_Bag.roi_transforms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "with", "h5py", ".", "File", "(", "self", ".", "file_path", ",", "'r'", ")", "as", "hdf5_file", ":", "\n", "\t\t\t", "img", "=", "hdf5_file", "[", "'imgs'", "]", "[", "idx", "]", "\n", "coord", "=", "hdf5_file", "[", "'coords'", "]", "[", "idx", "]", "\n", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", "=", "self", ".", "roi_transforms", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img", ",", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Whole_Slide_Bag_FP.__init__": [[87, 119], ["dataset_h5.Whole_Slide_Bag_FP.summary", "dataset_h5.eval_transforms", "h5py.File", "len"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Whole_Slide_Bag_FP.summary", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.eval_transforms"], ["\t", "def", "__init__", "(", "self", ",", "\n", "file_path", ",", "\n", "wsi", ",", "\n", "pretrained", "=", "False", ",", "\n", "custom_transforms", "=", "None", ",", "\n", "custom_downsample", "=", "1", "\n", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tArgs:\n\t\t\tfile_path (string): Path to the .h5 file containing patched data.\n\t\t\tpretrained (bool): Use ImageNet transforms\n\t\t\tcustom_transforms (callable, optional): Optional transform to be applied on a sample\n\t\t\"\"\"", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "wsi", "=", "wsi", "\n", "if", "not", "custom_transforms", ":", "\n", "\t\t\t", "self", ".", "roi_transforms", "=", "eval_transforms", "(", "pretrained", "=", "pretrained", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "roi_transforms", "=", "custom_transforms", "\n", "\n", "", "self", ".", "file_path", "=", "file_path", "\n", "\n", "with", "h5py", ".", "File", "(", "self", ".", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "\t\t\t", "dset", "=", "f", "[", "'coords'", "]", "\n", "self", ".", "patch_level", "=", "f", "[", "'coords'", "]", ".", "attrs", "[", "'patch_level'", "]", "\n", "self", ".", "patch_size", "=", "f", "[", "'coords'", "]", ".", "attrs", "[", "'patch_size'", "]", "\n", "self", ".", "length", "=", "len", "(", "dset", ")", "\n", "if", "custom_downsample", ">", "1", ":", "\n", "\t\t\t\t", "self", ".", "target_patch_size", "=", "(", "self", ".", "patch_size", "//", "custom_downsample", ",", "self", ".", "patch_size", "//", "custom_downsample", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "target_patch_size", "=", "None", "\n", "", "", "self", ".", "summary", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Whole_Slide_Bag_FP.__len__": [[120, 122], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Whole_Slide_Bag_FP.summary": [[123, 133], ["h5py.File", "dset.attrs.items", "print", "print", "print", "print", "print"], "methods", ["None"], ["", "def", "summary", "(", "self", ")", ":", "\n", "\t\t", "hdf5_file", "=", "h5py", ".", "File", "(", "self", ".", "file_path", ",", "\"r\"", ")", "\n", "dset", "=", "hdf5_file", "[", "'coords'", "]", "\n", "for", "name", ",", "value", "in", "dset", ".", "attrs", ".", "items", "(", ")", ":", "\n", "\t\t\t", "print", "(", "name", ",", "value", ")", "\n", "\n", "", "print", "(", "'\\nfeature extraction settings'", ")", "\n", "print", "(", "'target patch size: '", ",", "self", ".", "target_patch_size", ")", "\n", "print", "(", "'pretrained: '", ",", "self", ".", "pretrained", ")", "\n", "print", "(", "'transformations: '", ",", "self", ".", "roi_transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Whole_Slide_Bag_FP.__getitem__": [[134, 142], ["dataset_h5.Whole_Slide_Bag_FP.wsi.read_region().convert", "dataset_h5.Whole_Slide_Bag_FP.roi_transforms().unsqueeze", "h5py.File", "img.resize.resize.resize", "dataset_h5.Whole_Slide_Bag_FP.wsi.read_region", "dataset_h5.Whole_Slide_Bag_FP.roi_transforms"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "with", "h5py", ".", "File", "(", "self", ".", "file_path", ",", "'r'", ")", "as", "hdf5_file", ":", "\n", "\t\t\t", "coord", "=", "hdf5_file", "[", "'coords'", "]", "[", "idx", "]", "\n", "", "img", "=", "self", ".", "wsi", ".", "read_region", "(", "coord", ",", "self", ".", "patch_level", ",", "(", "self", ".", "patch_size", ",", "self", ".", "patch_size", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "target_patch_size", "is", "not", "None", ":", "\n", "\t\t\t", "img", "=", "img", ".", "resize", "(", "self", ".", "target_patch_size", ")", "\n", "", "img", "=", "self", ".", "roi_transforms", "(", "img", ")", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img", ",", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Dataset_All_Bags.__init__": [[159, 161], ["pandas.read_csv"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "csv_path", ")", ":", "\n", "\t\t", "self", ".", "df", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Dataset_All_Bags.__len__": [[162, 164], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.Dataset_All_Bags.__getitem__": [[165, 167], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "return", "self", ".", "df", "[", "'slide_id'", "]", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.datasets.dataset_h5.eval_transforms": [[20, 37], ["torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "eval_transforms", "(", "pretrained", "=", "False", ")", ":", "\n", "\t", "if", "pretrained", ":", "\n", "\t\t", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", "\n", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", "\n", "\n", "", "else", ":", "\n", "\t\t", "mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", "\n", "std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", "\n", "\n", "", "trnsfrms_val", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "]", "\n", ")", "\n", "\n", "return", "trnsfrms_val", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_mm_attention_mil.Attn_Net.__init__": [[25, 37], ["torch.Module.__init__", "model_mm_attention_mil.Attn_Net.module.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "model_mm_attention_mil.Attn_Net.module.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "L", "=", "1024", ",", "D", "=", "256", ",", "dropout", "=", "False", ",", "n_classes", "=", "1", ")", ":", "\n", "        ", "super", "(", "Attn_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "[", "\n", "nn", ".", "Linear", "(", "L", ",", "D", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "module", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "\n", "", "self", ".", "module", ".", "append", "(", "nn", ".", "Linear", "(", "D", ",", "n_classes", ")", ")", "\n", "\n", "self", ".", "module", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_mm_attention_mil.Attn_Net.forward": [[38, 40], ["model_mm_attention_mil.Attn_Net.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", ",", "x", "# N x n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_mm_attention_mil.Attn_Net_Gated.__init__": [[51, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model_mm_attention_mil.Attn_Net_Gated.attention_a.append", "model_mm_attention_mil.Attn_Net_Gated.attention_b.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "L", "=", "1024", ",", "D", "=", "256", ",", "dropout", "=", "False", ",", "n_classes", "=", "1", ")", ":", "\n", "        ", "super", "(", "Attn_Net_Gated", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention_a", "=", "[", "\n", "nn", ".", "Linear", "(", "L", ",", "D", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "attention_b", "=", "[", "nn", ".", "Linear", "(", "L", ",", "D", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "attention_a", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "self", ".", "attention_b", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "\n", "", "self", ".", "attention_a", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "attention_a", ")", "\n", "self", ".", "attention_b", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "attention_b", ")", "\n", "self", ".", "attention_c", "=", "nn", ".", "Linear", "(", "D", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_mm_attention_mil.Attn_Net_Gated.forward": [[67, 73], ["model_mm_attention_mil.Attn_Net_Gated.attention_a", "model_mm_attention_mil.Attn_Net_Gated.attention_b", "model_mm_attention_mil.Attn_Net_Gated.mul", "model_mm_attention_mil.Attn_Net_Gated.attention_c"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "a", "=", "self", ".", "attention_a", "(", "x", ")", "\n", "b", "=", "self", ".", "attention_b", "(", "x", ")", "\n", "A", "=", "a", ".", "mul", "(", "b", ")", "\n", "A", "=", "self", ".", "attention_c", "(", "A", ")", "# N x n_classes", "\n", "return", "A", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_mm_attention_mil.MM_MIL_Attention_fc.__init__": [[91, 122], ["torch.Module.__init__", "fc.append", "fc.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "utils.utils.initialize_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "model_mm_attention_mil.Attn_Net_Gated", "model_mm_attention_mil.Attn_Net", "model_mm_attention_mil.SNN_Block", "fc_omic.append", "model_mm_attention_mil.BilinearFusion", "model_mm_attention_mil.SNN_Block"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.initialize_weights", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_genomic.SNN_Block", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_genomic.SNN_Block"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ":", "int", "=", "2227", ",", "fusion", "=", "'tensor'", ",", "\n", "gate", "=", "True", ",", "gate_path", "=", "True", ",", "gate_omic", "=", "True", ",", "dropout", "=", "True", ",", "\n", "model_size_wsi", ":", "str", "=", "'small'", ",", "model_size_omic", ":", "str", "=", "'small'", ",", "n_classes", "=", "4", ")", ":", "\n", "        ", "super", "(", "MM_MIL_Attention_fc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fusion", "=", "fusion", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "size_dict_WSI", "=", "{", "\"small\"", ":", "[", "1024", ",", "512", ",", "256", "]", ",", "\"big\"", ":", "[", "1024", ",", "512", ",", "384", "]", "}", "\n", "self", ".", "size_dict_omic", "=", "{", "'small'", ":", "[", "256", ",", "256", "]", ",", "'big'", ":", "[", "1024", ",", "1024", ",", "1024", ",", "256", "]", "}", "\n", "\n", "### WSI Attention MIL Construction", "\n", "size", "=", "self", ".", "size_dict_WSI", "[", "model_size_wsi", "]", "\n", "fc", "=", "[", "nn", ".", "Linear", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "fc", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "if", "gate", ":", "attention_net", "=", "Attn_Net_Gated", "(", "L", "=", "size", "[", "1", "]", ",", "D", "=", "size", "[", "2", "]", ",", "dropout", "=", "dropout", ",", "n_classes", "=", "1", ")", "\n", "else", ":", "attention_net", "=", "Attn_Net", "(", "L", "=", "size", "[", "1", "]", ",", "D", "=", "size", "[", "2", "]", ",", "dropout", "=", "dropout", ",", "n_classes", "=", "1", ")", "\n", "fc", ".", "append", "(", "attention_net", ")", "\n", "self", ".", "attention_net", "=", "nn", ".", "Sequential", "(", "*", "fc", ")", "\n", "\n", "### Constructing Genomic SNN", "\n", "hidden", "=", "self", ".", "size_dict_omic", "[", "model_size_omic", "]", "\n", "fc_omic", "=", "[", "SNN_Block", "(", "dim1", "=", "input_dim", ",", "dim2", "=", "hidden", "[", "0", "]", ")", "]", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "hidden", "[", "1", ":", "]", ")", ":", "\n", "            ", "fc_omic", ".", "append", "(", "SNN_Block", "(", "dim1", "=", "hidden", "[", "i", "]", ",", "dim2", "=", "hidden", "[", "i", "+", "1", "]", ",", "dropout", "=", "0.25", ")", ")", "\n", "", "self", ".", "fc_omic", "=", "nn", ".", "Sequential", "(", "*", "fc_omic", ")", "\n", "\n", "### Multimodal Fusion Construction", "\n", "if", "self", ".", "fusion", "==", "'tensor'", ":", "\n", "            ", "self", ".", "mm", "=", "BilinearFusion", "(", "skip", "=", "True", ",", "gate1", "=", "gate_path", ",", "gate2", "=", "gate_omic", ",", "dim1", "=", "512", ",", "dim2", "=", "256", ",", "scale_dim1", "=", "16", ",", "scale_dim2", "=", "8", ")", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "n_classes", ")", "\n", "initialize_weights", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_mm_attention_mil.MM_MIL_Attention_fc.relocate": [[124, 138], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "model_mm_attention_mil.MM_MIL_Attention_fc.classifier.to", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "list", "torch.DataParallel().to", "torch.DataParallel().to", "torch.DataParallel().to", "torch.DataParallel().to", "torch.DataParallel().to", "torch.DataParallel().to", "torch.DataParallel().to", "torch.DataParallel().to", "torch.DataParallel().to", "model_mm_attention_mil.MM_MIL_Attention_fc.attention_net.to", "model_mm_attention_mil.MM_MIL_Attention_fc.fc_omic.to", "model_mm_attention_mil.MM_MIL_Attention_fc.mm.to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel"], "methods", ["None"], ["", "def", "relocate", "(", "self", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">=", "1", ":", "\n", "            ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "self", ".", "attention_net", "=", "nn", ".", "DataParallel", "(", "self", ".", "attention_net", ",", "device_ids", "=", "device_ids", ")", ".", "to", "(", "'cuda:0'", ")", "\n", "self", ".", "fc_omic", "=", "nn", ".", "DataParallel", "(", "self", ".", "fc_omic", ",", "device_ids", "=", "device_ids", ")", ".", "to", "(", "'cuda:0'", ")", "\n", "self", ".", "mm", "=", "nn", ".", "DataParallel", "(", "self", ".", "mm", ",", "device_ids", "=", "device_ids", ")", ".", "to", "(", "'cuda:0'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attention_net", "=", "self", ".", "attention_net", ".", "to", "(", "device", ")", "\n", "self", ".", "fc_omic", "=", "self", ".", "fc_omic", ".", "to", "(", "device", ")", "\n", "self", ".", "mm", "=", "self", ".", "mm", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "self", ".", "classifier", "=", "self", ".", "classifier", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_mm_attention_mil.MM_MIL_Attention_fc.forward": [[140, 142], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "return_features", "=", "False", ",", "attention_only", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_mm_attention_mil.MM_MIL_Attention_fc_surv.__init__": [[144, 152], ["model_mm_attention_mil.MM_MIL_Attention_fc.__init__"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "input_dim", ":", "int", ",", "fusion", ":", "str", "=", "'tensor'", ",", "\n", "gate", "=", "True", ",", "gate_path", "=", "True", ",", "gate_omic", "=", "True", ",", "\n", "model_size_wsi", "=", "\"small\"", ",", "model_size_omic", "=", "'small'", ",", "dropout", "=", "False", ",", "n_classes", "=", "4", ")", ":", "\n", "        ", "super", "(", "MM_MIL_Attention_fc_surv", ",", "self", ")", ".", "__init__", "(", "\n", "input_dim", "=", "input_dim", ",", "fusion", "=", "fusion", ",", "\n", "gate", "=", "gate", ",", "gate_path", "=", "gate_path", ",", "gate_omic", "=", "gate_omic", ",", "\n", "model_size_wsi", "=", "model_size_wsi", ",", "model_size_omic", "=", "model_size_omic", ",", "dropout", "=", "dropout", ",", "n_classes", "=", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_mm_attention_mil.MM_MIL_Attention_fc_surv.forward": [[153, 187], ["model_mm_attention_mil.MM_MIL_Attention_fc_surv.attention_net", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "model_mm_attention_mil.MM_MIL_Attention_fc_surv.fc_omic", "model_mm_attention_mil.MM_MIL_Attention_fc_surv.classifier", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "kwargs.keys", "X.unsqueeze", "model_mm_attention_mil.MM_MIL_Attention_fc_surv.mm", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "kwargs.keys", "results_dict.update"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "h", "=", "kwargs", "[", "'x_path'", "]", "\n", "X", "=", "kwargs", "[", "'x_omic'", "]", "\n", "\n", "A", ",", "h", "=", "self", ".", "attention_net", "(", "h", ")", "\n", "A", "=", "torch", ".", "transpose", "(", "A", ",", "1", ",", "0", ")", "\n", "\n", "if", "'attention_only'", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "if", "kwargs", "[", "'attention_only'", "]", ":", "\n", "                ", "return", "A", "\n", "\n", "", "", "A_raw", "=", "A", "\n", "A", "=", "F", ".", "softmax", "(", "A", ",", "dim", "=", "1", ")", "\n", "M", "=", "torch", ".", "mm", "(", "A", ",", "h", ")", "\n", "\n", "O", "=", "self", ".", "fc_omic", "(", "X", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "if", "self", ".", "fusion", "==", "'tensor'", ":", "\n", "            ", "MM", "=", "self", ".", "mm", "(", "M", ",", "O", ")", "\n", "\n", "", "logits", "=", "self", ".", "classifier", "(", "MM", ")", "\n", "Y_hat", "=", "torch", ".", "topk", "(", "logits", ",", "1", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "hazards", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "# hazards = F.softmax(logits, dim=1)", "\n", "S", "=", "torch", ".", "cumprod", "(", "1", "-", "hazards", ",", "dim", "=", "1", ")", "\n", "# S = 1 - torch.cumsum(hazards, dim=1)", "\n", "results_dict", "=", "{", "}", "\n", "\n", "if", "'return_features'", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "if", "kwargs", "[", "'return_features'", "]", ":", "\n", "                ", "results_dict", ".", "update", "(", "{", "'features'", ":", "M", "}", ")", "\n", "\n", "", "", "return", "hazards", ",", "S", ",", "Y_hat", ",", "A_raw", ",", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_mm_attention_mil.BilinearFusion.__init__": [[189, 210], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Bilinear", "torch.Bilinear", "torch.Bilinear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "skip", "=", "1", ",", "use_bilinear", "=", "1", ",", "gate1", "=", "1", ",", "gate2", "=", "1", ",", "dim1", "=", "128", ",", "dim2", "=", "128", ",", "scale_dim1", "=", "1", ",", "scale_dim2", "=", "1", ",", "mmhid", "=", "512", ",", "dropout_rate", "=", "0.25", ")", ":", "\n", "        ", "super", "(", "BilinearFusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "skip", "=", "skip", "\n", "self", ".", "use_bilinear", "=", "use_bilinear", "\n", "self", ".", "gate1", "=", "gate1", "\n", "self", ".", "gate2", "=", "gate2", "\n", "\n", "dim1_og", ",", "dim2_og", ",", "dim1", ",", "dim2", "=", "dim1", ",", "dim2", ",", "dim1", "//", "scale_dim1", ",", "dim2", "//", "scale_dim2", "\n", "skip_dim", "=", "dim1_og", "+", "dim2_og", "if", "skip", "else", "0", "\n", "\n", "self", ".", "linear_h1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim1_og", ",", "dim1", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "linear_z1", "=", "nn", ".", "Bilinear", "(", "dim1_og", ",", "dim2_og", ",", "dim1", ")", "if", "use_bilinear", "else", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim1_og", "+", "dim2_og", ",", "dim1", ")", ")", "\n", "self", ".", "linear_o1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim1", ",", "dim1", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", ")", "\n", "\n", "self", ".", "linear_h2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim2_og", ",", "dim2", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "linear_z2", "=", "nn", ".", "Bilinear", "(", "dim1_og", ",", "dim2_og", ",", "dim2", ")", "if", "use_bilinear", "else", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim1_og", "+", "dim2_og", ",", "dim2", ")", ")", "\n", "self", ".", "linear_o2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim2", ",", "dim2", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", ")", "\n", "\n", "self", ".", "post_fusion_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "encoder1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "(", "dim1", "+", "1", ")", "*", "(", "dim2", "+", "1", ")", ",", "256", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", ")", "\n", "self", ".", "encoder2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "256", "+", "skip_dim", ",", "mmhid", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", ")", "\n", "#init_max_weights(self)", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_mm_attention_mil.BilinearFusion.forward": [[212, 239], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.bmm().flatten", "torch.bmm().flatten", "torch.bmm().flatten", "torch.bmm().flatten", "torch.bmm().flatten", "torch.bmm().flatten", "torch.bmm().flatten", "torch.bmm().flatten", "torch.bmm().flatten", "model_mm_attention_mil.BilinearFusion.post_fusion_dropout", "model_mm_attention_mil.BilinearFusion.encoder1", "model_mm_attention_mil.BilinearFusion.encoder2", "model_mm_attention_mil.BilinearFusion.linear_h1", "model_mm_attention_mil.BilinearFusion.linear_o1", "model_mm_attention_mil.BilinearFusion.linear_h1", "model_mm_attention_mil.BilinearFusion.linear_o1", "model_mm_attention_mil.BilinearFusion.linear_h2", "model_mm_attention_mil.BilinearFusion.linear_o2", "model_mm_attention_mil.BilinearFusion.linear_h2", "model_mm_attention_mil.BilinearFusion.linear_o2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_mm_attention_mil.BilinearFusion.linear_z1", "model_mm_attention_mil.BilinearFusion.linear_z1", "model_mm_attention_mil.BilinearFusion.linear_z2", "model_mm_attention_mil.BilinearFusion.linear_z2", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_mm_attention_mil.BilinearFusion.unsqueeze", "model_mm_attention_mil.BilinearFusion.unsqueeze", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "vec1", ",", "vec2", ")", ":", "\n", "### Gated Multimodal Units", "\n", "        ", "if", "self", ".", "gate1", ":", "\n", "            ", "h1", "=", "self", ".", "linear_h1", "(", "vec1", ")", "\n", "z1", "=", "self", ".", "linear_z1", "(", "vec1", ",", "vec2", ")", "if", "self", ".", "use_bilinear", "else", "self", ".", "linear_z1", "(", "torch", ".", "cat", "(", "(", "vec1", ",", "vec2", ")", ",", "dim", "=", "1", ")", ")", "\n", "o1", "=", "self", ".", "linear_o1", "(", "nn", ".", "Sigmoid", "(", ")", "(", "z1", ")", "*", "h1", ")", "\n", "", "else", ":", "\n", "            ", "h1", "=", "self", ".", "linear_h1", "(", "vec1", ")", "\n", "o1", "=", "self", ".", "linear_o1", "(", "h1", ")", "\n", "\n", "", "if", "self", ".", "gate2", ":", "\n", "            ", "h2", "=", "self", ".", "linear_h2", "(", "vec2", ")", "\n", "z2", "=", "self", ".", "linear_z2", "(", "vec1", ",", "vec2", ")", "if", "self", ".", "use_bilinear", "else", "self", ".", "linear_z2", "(", "torch", ".", "cat", "(", "(", "vec1", ",", "vec2", ")", ",", "dim", "=", "1", ")", ")", "\n", "o2", "=", "self", ".", "linear_o2", "(", "nn", ".", "Sigmoid", "(", ")", "(", "z2", ")", "*", "h2", ")", "\n", "", "else", ":", "\n", "            ", "h2", "=", "self", ".", "linear_h2", "(", "vec2", ")", "\n", "o2", "=", "self", ".", "linear_o2", "(", "h2", ")", "\n", "\n", "### Fusion", "\n", "", "o1", "=", "torch", ".", "cat", "(", "(", "o1", ",", "torch", ".", "cuda", ".", "FloatTensor", "(", "o1", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "fill_", "(", "1", ")", ")", ",", "1", ")", "\n", "o2", "=", "torch", ".", "cat", "(", "(", "o2", ",", "torch", ".", "cuda", ".", "FloatTensor", "(", "o2", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "fill_", "(", "1", ")", ")", ",", "1", ")", "\n", "o12", "=", "torch", ".", "bmm", "(", "o1", ".", "unsqueeze", "(", "2", ")", ",", "o2", ".", "unsqueeze", "(", "1", ")", ")", ".", "flatten", "(", "start_dim", "=", "1", ")", "# BATCH_SIZE X 1024", "\n", "out", "=", "self", ".", "post_fusion_dropout", "(", "o12", ")", "\n", "out", "=", "self", ".", "encoder1", "(", "out", ")", "\n", "if", "self", ".", "skip", ":", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "vec1", ",", "vec2", ")", ",", "1", ")", "\n", "out", "=", "self", ".", "encoder2", "(", "out", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_mm_attention_mil.SNN_Block": [[83, 88], ["torch.Sequential", "torch.Linear", "torch.ELU", "torch.AlphaDropout"], "function", ["None"], ["def", "SNN_Block", "(", "dim1", ",", "dim2", ",", "dropout", "=", "0.25", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim1", ",", "dim2", ")", ",", "\n", "nn", ".", "ELU", "(", ")", ",", "\n", "nn", ".", "AlphaDropout", "(", "p", "=", "dropout", ",", "inplace", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_genomic.MaxNet.__init__": [[23, 36], ["torch.nn.Module.__init__", "enumerate", "torch.nn.Sequential", "torch.nn.Linear", "model_genomic.init_max_weights", "model_genomic.SNN_Block", "fc_omic.append", "model_genomic.SNN_Block"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_genomic.init_max_weights", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_genomic.SNN_Block", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_genomic.SNN_Block"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ":", "int", ",", "model_size_omic", ":", "str", "=", "'small'", ",", "n_classes", ":", "int", "=", "4", ")", ":", "\n", "        ", "super", "(", "MaxNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "size_dict_omic", "=", "{", "'small'", ":", "[", "256", ",", "256", ",", "256", ",", "256", "]", ",", "'big'", ":", "[", "1024", ",", "1024", ",", "1024", ",", "256", "]", "}", "\n", "\n", "### Constructing Genomic SNN", "\n", "hidden", "=", "self", ".", "size_dict_omic", "[", "model_size_omic", "]", "\n", "fc_omic", "=", "[", "SNN_Block", "(", "dim1", "=", "input_dim", ",", "dim2", "=", "hidden", "[", "0", "]", ")", "]", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "hidden", "[", "1", ":", "]", ")", ":", "\n", "            ", "fc_omic", ".", "append", "(", "SNN_Block", "(", "dim1", "=", "hidden", "[", "i", "]", ",", "dim2", "=", "hidden", "[", "i", "+", "1", "]", ",", "dropout", "=", "0.25", ")", ")", "\n", "", "self", ".", "fc_omic", "=", "nn", ".", "Sequential", "(", "*", "fc_omic", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "hidden", "[", "-", "1", "]", ",", "n_classes", ")", "\n", "init_max_weights", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_genomic.MaxNet.forward": [[38, 47], ["model_genomic.MaxNet.fc_omic", "model_genomic.MaxNet.classifier().unsqueeze", "torch.sigmoid", "torch.cumprod", "torch.topk", "model_genomic.MaxNet.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "kwargs", "[", "'x_omic'", "]", "\n", "features", "=", "self", ".", "fc_omic", "(", "x", ")", "\n", "\n", "logits", "=", "self", ".", "classifier", "(", "features", ")", ".", "unsqueeze", "(", "0", ")", "\n", "Y_hat", "=", "torch", ".", "topk", "(", "logits", ",", "1", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "hazards", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "S", "=", "torch", ".", "cumprod", "(", "1", "-", "hazards", ",", "dim", "=", "1", ")", "\n", "return", "hazards", ",", "S", ",", "Y_hat", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_genomic.MaxNet.relocate": [[48, 59], ["torch.device", "model_genomic.MaxNet.classifier.to", "torch.cuda.device_count", "list", "torch.nn.DataParallel().to", "model_genomic.MaxNet.fc_omic.to", "torch.cuda.is_available", "range", "torch.cuda.device_count", "torch.nn.DataParallel"], "methods", ["None"], ["", "def", "relocate", "(", "self", ")", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "self", ".", "fc_omic", "=", "nn", ".", "DataParallel", "(", "self", ".", "fc_omic", ",", "device_ids", "=", "device_ids", ")", ".", "to", "(", "'cuda:0'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "fc_omic", "=", "self", ".", "fc_omic", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "self", ".", "classifier", "=", "self", ".", "classifier", ".", "to", "(", "device", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_genomic.init_max_weights": [[9, 15], ["module.modules", "type", "m.weight.data.normal_", "m.bias.data.zero_", "math.sqrt", "m.weight.size"], "function", ["None"], ["def", "init_max_weights", "(", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "            ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "m", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "stdv", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_genomic.SNN_Block": [[16, 21], ["torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ELU", "torch.nn.AlphaDropout"], "function", ["None"], ["", "", "", "def", "SNN_Block", "(", "dim1", ",", "dim2", ",", "dropout", "=", "0.25", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim1", ",", "dim2", ")", ",", "\n", "nn", ".", "ELU", "(", ")", ",", "\n", "nn", ".", "AlphaDropout", "(", "p", "=", "dropout", ",", "inplace", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.Attn_Net.__init__": [[22, 34], ["torch.Module.__init__", "model_attention_mil.Attn_Net.module.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "model_attention_mil.Attn_Net.module.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "L", "=", "1024", ",", "D", "=", "256", ",", "dropout", "=", "False", ",", "n_classes", "=", "1", ")", ":", "\n", "        ", "super", "(", "Attn_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "[", "\n", "nn", ".", "Linear", "(", "L", ",", "D", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "module", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "\n", "", "self", ".", "module", ".", "append", "(", "nn", ".", "Linear", "(", "D", ",", "n_classes", ")", ")", "\n", "\n", "self", ".", "module", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.Attn_Net.forward": [[35, 37], ["model_attention_mil.Attn_Net.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", ",", "x", "# N x n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.Attn_Net_Gated.__init__": [[48, 64], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "model_attention_mil.Attn_Net_Gated.attention_a.append", "model_attention_mil.Attn_Net_Gated.attention_b.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "L", "=", "1024", ",", "D", "=", "256", ",", "dropout", "=", "False", ",", "n_classes", "=", "1", ")", ":", "\n", "        ", "super", "(", "Attn_Net_Gated", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention_a", "=", "[", "\n", "nn", ".", "Linear", "(", "L", ",", "D", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "attention_b", "=", "[", "nn", ".", "Linear", "(", "L", ",", "D", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "if", "dropout", ":", "\n", "            ", "self", ".", "attention_a", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "self", ".", "attention_b", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "\n", "", "self", ".", "attention_a", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "attention_a", ")", "\n", "self", ".", "attention_b", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "attention_b", ")", "\n", "\n", "self", ".", "attention_c", "=", "nn", ".", "Linear", "(", "D", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.Attn_Net_Gated.forward": [[65, 71], ["model_attention_mil.Attn_Net_Gated.attention_a", "model_attention_mil.Attn_Net_Gated.attention_b", "model_attention_mil.Attn_Net_Gated.mul", "model_attention_mil.Attn_Net_Gated.attention_c"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "a", "=", "self", ".", "attention_a", "(", "x", ")", "\n", "b", "=", "self", ".", "attention_b", "(", "x", ")", "\n", "A", "=", "a", ".", "mul", "(", "b", ")", "\n", "A", "=", "self", ".", "attention_c", "(", "A", ")", "# N x n_classes", "\n", "return", "A", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.MIL_Attention_fc.__init__": [[83, 103], ["torch.Module.__init__", "fc.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "utils.utils.initialize_weights", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "fc.append", "model_attention_mil.Attn_Net_Gated", "model_attention_mil.Attn_Net", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.utils.utils.initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "gate", "=", "True", ",", "size_arg", "=", "\"small\"", ",", "dropout", "=", "False", ",", "n_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", "MIL_Attention_fc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_dict", "=", "{", "\"small\"", ":", "[", "1024", ",", "512", ",", "256", "]", ",", "\"big\"", ":", "[", "1024", ",", "512", ",", "384", "]", "}", "\n", "size", "=", "self", ".", "size_dict", "[", "size_arg", "]", "\n", "\n", "fc", "=", "[", "nn", ".", "Linear", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", ",", "nn", ".", "ReLU", "(", ")", "]", "\n", "if", "dropout", ":", "\n", "            ", "fc", ".", "append", "(", "nn", ".", "Dropout", "(", "0.25", ")", ")", "\n", "\n", "", "if", "gate", ":", "\n", "            ", "attention_net", "=", "Attn_Net_Gated", "(", "L", "=", "size", "[", "1", "]", ",", "D", "=", "size", "[", "2", "]", ",", "dropout", "=", "dropout", ",", "n_classes", "=", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "attention_net", "=", "Attn_Net", "(", "L", "=", "size", "[", "1", "]", ",", "D", "=", "size", "[", "2", "]", ",", "dropout", "=", "dropout", ",", "n_classes", "=", "1", ")", "\n", "\n", "", "fc", ".", "append", "(", "attention_net", ")", "\n", "self", ".", "attention_net", "=", "nn", ".", "Sequential", "(", "*", "fc", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "size", "[", "1", "]", ",", "n_classes", ")", "\n", "\n", "initialize_weights", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.MIL_Attention_fc.relocate": [[104, 115], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "model_attention_mil.MIL_Attention_fc.classifier.to", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "list", "torch.DataParallel().to", "torch.DataParallel().to", "torch.DataParallel().to", "model_attention_mil.MIL_Attention_fc.attention_net.to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "range", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel"], "methods", ["None"], ["", "def", "relocate", "(", "self", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "device_ids", "=", "list", "(", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "self", ".", "attention_net", "=", "nn", ".", "DataParallel", "(", "self", ".", "attention_net", ",", "device_ids", "=", "device_ids", ")", ".", "to", "(", "'cuda:0'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "attention_net", "=", "self", ".", "attention_net", ".", "to", "(", "device", ")", "\n", "\n", "\n", "", "self", ".", "classifier", "=", "self", ".", "classifier", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.MIL_Attention_fc.forward": [[117, 134], ["model_attention_mil.MIL_Attention_fc.attention_net", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "model_attention_mil.MIL_Attention_fc.classifier", "torch.softmax", "torch.softmax", "torch.softmax", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "results_dict.update"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "return_features", "=", "False", ",", "attention_only", "=", "False", ")", ":", "\n", "        ", "A", ",", "h", "=", "self", ".", "attention_net", "(", "h", ")", "\n", "A", "=", "torch", ".", "transpose", "(", "A", ",", "1", ",", "0", ")", "\n", "if", "attention_only", ":", "\n", "            ", "return", "A", "\n", "", "A_raw", "=", "A", "\n", "A", "=", "F", ".", "softmax", "(", "A", ",", "dim", "=", "1", ")", "\n", "M", "=", "torch", ".", "mm", "(", "A", ",", "h", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "M", ")", "\n", "Y_hat", "=", "torch", ".", "topk", "(", "logits", ",", "1", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "Y_prob", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "results_dict", "=", "{", "}", "\n", "if", "return_features", ":", "\n", "            ", "results_dict", ".", "update", "(", "{", "'features'", ":", "M", "}", ")", "\n", "\n", "", "return", "logits", ",", "Y_prob", ",", "Y_hat", ",", "A_raw", ",", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.MIL_Attention_fc_surv.__init__": [[137, 139], ["model_attention_mil.MIL_Attention_fc.__init__"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gate", "=", "True", ",", "size_arg", "=", "\"small\"", ",", "dropout", "=", "False", ",", "n_classes", "=", "4", ")", ":", "\n", "        ", "super", "(", "MIL_Attention_fc_surv", ",", "self", ")", ".", "__init__", "(", "gate", "=", "gate", ",", "size_arg", "=", "size_arg", ",", "dropout", "=", "dropout", ",", "n_classes", "=", "n_classes", ")", "\n", "# self.alpha = nn.Parameter(torch.tensor([0.5]))", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.model_attention_mil.MIL_Attention_fc_surv.forward": [[141, 167], ["model_attention_mil.MIL_Attention_fc_surv.attention_net", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "model_attention_mil.MIL_Attention_fc_surv.classifier", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "torch.cumprod", "kwargs.keys", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "kwargs.keys", "results_dict.update"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "h", "=", "kwargs", "[", "'x_path'", "]", "\n", "\n", "A", ",", "h", "=", "self", ".", "attention_net", "(", "h", ")", "\n", "A", "=", "torch", ".", "transpose", "(", "A", ",", "1", ",", "0", ")", "\n", "\n", "if", "'attention_only'", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "if", "kwargs", "[", "'attention_only'", "]", ":", "\n", "                ", "return", "A", "\n", "\n", "", "", "A_raw", "=", "A", "\n", "A", "=", "F", ".", "softmax", "(", "A", ",", "dim", "=", "1", ")", "\n", "M", "=", "torch", ".", "mm", "(", "A", ",", "h", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "M", ")", "\n", "Y_hat", "=", "torch", ".", "topk", "(", "logits", ",", "1", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "hazards", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "# hazards = F.softmax(logits, dim=1)", "\n", "S", "=", "torch", ".", "cumprod", "(", "1", "-", "hazards", ",", "dim", "=", "1", ")", "\n", "# S = 1 - torch.cumsum(hazards, dim=1)", "\n", "results_dict", "=", "{", "}", "\n", "\n", "if", "'return_features'", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "if", "kwargs", "[", "'return_features'", "]", ":", "\n", "                ", "results_dict", ".", "update", "(", "{", "'features'", ":", "M", "}", ")", "\n", "\n", "", "", "return", "hazards", ",", "S", ",", "Y_hat", ",", "A_raw", ",", "results_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.Bottleneck_Baseline.__init__": [[22, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck_Baseline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.Bottleneck_Baseline.forward": [[35, 56], ["resnet_custom.Bottleneck_Baseline.conv1", "resnet_custom.Bottleneck_Baseline.bn1", "resnet_custom.Bottleneck_Baseline.relu", "resnet_custom.Bottleneck_Baseline.conv2", "resnet_custom.Bottleneck_Baseline.bn2", "resnet_custom.Bottleneck_Baseline.relu", "resnet_custom.Bottleneck_Baseline.conv3", "resnet_custom.Bottleneck_Baseline.bn3", "resnet_custom.Bottleneck_Baseline.relu", "resnet_custom.Bottleneck_Baseline.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__": [[59, 78], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_custom.ResNet_Baseline._make_layer", "resnet_custom.ResNet_Baseline._make_layer", "resnet_custom.ResNet_Baseline._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnet_custom.ResNet_Baseline.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.__init__", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline._make_layer", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline._make_layer", "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet_Baseline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline._make_layer": [[79, 95], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.ResNet_Baseline.forward": [[96, 110], ["resnet_custom.ResNet_Baseline.conv1", "resnet_custom.ResNet_Baseline.bn1", "resnet_custom.ResNet_Baseline.relu", "resnet_custom.ResNet_Baseline.maxpool", "resnet_custom.ResNet_Baseline.layer1", "resnet_custom.ResNet_Baseline.layer2", "resnet_custom.ResNet_Baseline.layer3", "resnet_custom.ResNet_Baseline.avgpool", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.resnet50_baseline": [[111, 120], ["resnet_custom.ResNet_Baseline", "resnet_custom.load_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.load_pretrained_weights"], ["", "", "def", "resnet50_baseline", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a Modified ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet_Baseline", "(", "Bottleneck_Baseline", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", "=", "load_pretrained_weights", "(", "model", ",", "'resnet50'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.mahmoodlab_PORPOISE.models.resnet_custom.load_pretrained_weights": [[121, 125], ["torch.load_url", "model.load_state_dict"], "function", ["None"], ["", "def", "load_pretrained_weights", "(", "model", ",", "name", ")", ":", "\n", "    ", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "name", "]", ")", "\n", "model", ".", "load_state_dict", "(", "pretrained_dict", ",", "strict", "=", "False", ")", "\n", "return", "model", "\n", "\n"]]}