{"home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupRandomCrop.__init__": [[11, 16], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupRandomCrop.__call__": [[17, 35], ["list", "random.randint", "random.randint", "list.append", "list.append", "img.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "w", ",", "h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "\n", "out_images", "=", "list", "(", ")", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "\n", "for", "img", "in", "img_group", ":", "\n", "# assert(img.size[0] == w and img.size[1] == h)", "\n", "            ", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "out_images", ".", "append", "(", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ")", "\n", "\n", "", "", "return", "out_images", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupCenterCrop.__init__": [[38, 40], ["torchvision.transforms.CenterCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "worker", "=", "torchvision", ".", "transforms", ".", "CenterCrop", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupCenterCrop.__call__": [[41, 43], ["transforms.GroupCenterCrop.worker"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "return", "[", "self", ".", "worker", "(", "img", ")", "for", "img", "in", "img_group", "]", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupRandomHorizontalFlip.__init__": [[56, 58], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "is_flow", "=", "False", ")", ":", "\n", "        ", "self", ".", "is_flow", "=", "is_flow", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupRandomHorizontalFlip.__call__": [[59, 69], ["random.random", "img.transpose", "range", "len", "PIL.ImageOps.invert"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ",", "is_flow", "=", "False", ")", ":", "\n", "        ", "v", "=", "random", ".", "random", "(", ")", "\n", "if", "v", "<", "0.5", ":", "\n", "            ", "ret", "=", "[", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "for", "img", "in", "img_group", "]", "\n", "if", "self", ".", "is_flow", ":", "\n", "                ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "ret", ")", ",", "2", ")", ":", "\n", "                    ", "ret", "[", "i", "]", "=", "ImageOps", ".", "invert", "(", "ret", "[", "i", "]", ")", "# invert flow pixel values when flipping", "\n", "", "", "return", "ret", "\n", "", "else", ":", "\n", "            ", "return", "img_group", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupNormalize.__init__": [[72, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupNormalize.__call__": [[76, 85], ["zip", "t.sub_().div_", "len", "len", "tensor.size", "tensor.size", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "rep_mean", "=", "self", ".", "mean", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "mean", ")", ")", "\n", "rep_std", "=", "self", ".", "std", "*", "(", "tensor", ".", "size", "(", ")", "[", "0", "]", "//", "len", "(", "self", ".", "std", ")", ")", "\n", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "rep_mean", ",", "rep_std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupScale.__init__": [[96, 98], ["torchvision.transforms.Scale"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "worker", "=", "torchvision", ".", "transforms", ".", "Scale", "(", "size", ",", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupScale.__call__": [[99, 101], ["transforms.GroupScale.worker"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "return", "[", "self", ".", "worker", "(", "img", ")", "for", "img", "in", "img_group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupOverSample.__init__": [[104, 111], ["transforms.GroupScale", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "scale_size", "=", "None", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "if", "not", "isinstance", "(", "crop_size", ",", "int", ")", "else", "(", "crop_size", ",", "crop_size", ")", "\n", "\n", "if", "scale_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "scale_worker", "=", "GroupScale", "(", "scale_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_worker", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupOverSample.__call__": [[112, 138], ["transforms.GroupMultiScaleCrop.fill_fix_offset", "list", "transforms.GroupOverSample.scale_worker", "list", "list", "enumerate", "list.extend", "list.extend", "img.crop", "list.append", "img.crop.copy().transpose", "list.append", "list.append", "img.crop.copy", "PIL.ImageOps.invert"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["", "", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "if", "self", ".", "scale_worker", "is", "not", "None", ":", "\n", "            ", "img_group", "=", "self", ".", "scale_worker", "(", "img_group", ")", "\n", "\n", "", "image_w", ",", "image_h", "=", "img_group", "[", "0", "]", ".", "size", "\n", "crop_w", ",", "crop_h", "=", "self", ".", "crop_size", "\n", "\n", "offsets", "=", "GroupMultiScaleCrop", ".", "fill_fix_offset", "(", "False", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "oversample_group", "=", "list", "(", ")", "\n", "for", "o_w", ",", "o_h", "in", "offsets", ":", "\n", "            ", "normal_group", "=", "list", "(", ")", "\n", "flip_group", "=", "list", "(", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "img_group", ")", ":", "\n", "                ", "crop", "=", "img", ".", "crop", "(", "(", "o_w", ",", "o_h", ",", "o_w", "+", "crop_w", ",", "o_h", "+", "crop_h", ")", ")", "\n", "normal_group", ".", "append", "(", "crop", ")", "\n", "flip_crop", "=", "crop", ".", "copy", "(", ")", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "\n", "if", "img", ".", "mode", "==", "'L'", "and", "i", "%", "2", "==", "0", ":", "\n", "                    ", "flip_group", ".", "append", "(", "ImageOps", ".", "invert", "(", "flip_crop", ")", ")", "\n", "", "else", ":", "\n", "                    ", "flip_group", ".", "append", "(", "flip_crop", ")", "\n", "\n", "", "", "oversample_group", ".", "extend", "(", "normal_group", ")", "\n", "oversample_group", ".", "extend", "(", "flip_group", ")", "\n", "", "return", "oversample_group", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupMultiScaleCrop.__init__": [[142, 149], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "scales", "=", "None", ",", "max_distort", "=", "1", ",", "fix_crop", "=", "True", ",", "more_fix_crop", "=", "True", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "if", "scales", "is", "not", "None", "else", "[", "1", ",", ".875", ",", ".75", ",", ".66", "]", "\n", "self", ".", "max_distort", "=", "max_distort", "\n", "self", ".", "fix_crop", "=", "fix_crop", "\n", "self", ".", "more_fix_crop", "=", "more_fix_crop", "\n", "self", ".", "input_size", "=", "input_size", "if", "not", "isinstance", "(", "input_size", ",", "int", ")", "else", "[", "input_size", ",", "input_size", "]", "\n", "self", ".", "interpolation", "=", "Image", ".", "BILINEAR", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupMultiScaleCrop.__call__": [[150, 159], ["transforms.GroupMultiScaleCrop._sample_crop_size", "img.crop", "img.resize"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupMultiScaleCrop._sample_crop_size"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "\n", "        ", "im_size", "=", "img_group", "[", "0", "]", ".", "size", "\n", "\n", "crop_w", ",", "crop_h", ",", "offset_w", ",", "offset_h", "=", "self", ".", "_sample_crop_size", "(", "im_size", ")", "\n", "crop_img_group", "=", "[", "img", ".", "crop", "(", "(", "offset_w", ",", "offset_h", ",", "offset_w", "+", "crop_w", ",", "offset_h", "+", "crop_h", ")", ")", "for", "img", "in", "img_group", "]", "\n", "ret_img_group", "=", "[", "img", ".", "resize", "(", "(", "self", ".", "input_size", "[", "0", "]", ",", "self", ".", "input_size", "[", "1", "]", ")", ",", "self", ".", "interpolation", ")", "\n", "for", "img", "in", "crop_img_group", "]", "\n", "return", "ret_img_group", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupMultiScaleCrop._sample_crop_size": [[160, 183], ["min", "enumerate", "random.choice", "int", "enumerate", "random.randint", "random.randint", "transforms.GroupMultiScaleCrop._sample_fix_offset", "abs", "abs", "abs", "pairs.append"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupMultiScaleCrop._sample_fix_offset"], ["", "def", "_sample_crop_size", "(", "self", ",", "im_size", ")", ":", "\n", "        ", "image_w", ",", "image_h", "=", "im_size", "[", "0", "]", ",", "im_size", "[", "1", "]", "\n", "\n", "# find a crop size", "\n", "base_size", "=", "min", "(", "image_w", ",", "image_h", ")", "\n", "crop_sizes", "=", "[", "int", "(", "base_size", "*", "x", ")", "for", "x", "in", "self", ".", "scales", "]", "\n", "crop_h", "=", "[", "self", ".", "input_size", "[", "1", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "1", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "crop_w", "=", "[", "self", ".", "input_size", "[", "0", "]", "if", "abs", "(", "x", "-", "self", ".", "input_size", "[", "0", "]", ")", "<", "3", "else", "x", "for", "x", "in", "crop_sizes", "]", "\n", "\n", "pairs", "=", "[", "]", "\n", "for", "i", ",", "h", "in", "enumerate", "(", "crop_h", ")", ":", "\n", "            ", "for", "j", ",", "w", "in", "enumerate", "(", "crop_w", ")", ":", "\n", "                ", "if", "abs", "(", "i", "-", "j", ")", "<=", "self", ".", "max_distort", ":", "\n", "                    ", "pairs", ".", "append", "(", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "", "", "crop_pair", "=", "random", ".", "choice", "(", "pairs", ")", "\n", "if", "not", "self", ".", "fix_crop", ":", "\n", "            ", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "image_w", "-", "crop_pair", "[", "0", "]", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "image_h", "-", "crop_pair", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "w_offset", ",", "h_offset", "=", "self", ".", "_sample_fix_offset", "(", "image_w", ",", "image_h", ",", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ")", "\n", "\n", "", "return", "crop_pair", "[", "0", "]", ",", "crop_pair", "[", "1", "]", ",", "w_offset", ",", "h_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupMultiScaleCrop._sample_fix_offset": [[184, 187], ["transforms.GroupMultiScaleCrop.fill_fix_offset", "random.choice"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupMultiScaleCrop.fill_fix_offset"], ["", "def", "_sample_fix_offset", "(", "self", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "offsets", "=", "self", ".", "fill_fix_offset", "(", "self", ".", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", "\n", "return", "random", ".", "choice", "(", "offsets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupMultiScaleCrop.fill_fix_offset": [[188, 212], ["list", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "fill_fix_offset", "(", "more_fix_crop", ",", "image_w", ",", "image_h", ",", "crop_w", ",", "crop_h", ")", ":", "\n", "        ", "w_step", "=", "(", "image_w", "-", "crop_w", ")", "//", "4", "\n", "h_step", "=", "(", "image_h", "-", "crop_h", ")", "//", "4", "\n", "\n", "ret", "=", "list", "(", ")", "\n", "ret", ".", "append", "(", "(", "0", ",", "0", ")", ")", "# upper left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "0", ")", ")", "# upper right", "\n", "ret", ".", "append", "(", "(", "0", ",", "4", "*", "h_step", ")", ")", "# lower left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center", "\n", "\n", "if", "more_fix_crop", ":", "\n", "            ", "ret", ".", "append", "(", "(", "0", ",", "2", "*", "h_step", ")", ")", "# center left", "\n", "ret", ".", "append", "(", "(", "4", "*", "w_step", ",", "2", "*", "h_step", ")", ")", "# center right", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "4", "*", "h_step", ")", ")", "# lower center", "\n", "ret", ".", "append", "(", "(", "2", "*", "w_step", ",", "0", "*", "h_step", ")", ")", "# upper center", "\n", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "1", "*", "h_step", ")", ")", "# upper right quarter", "\n", "ret", ".", "append", "(", "(", "1", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower left quarter", "\n", "ret", ".", "append", "(", "(", "3", "*", "w_step", ",", "3", "*", "h_step", ")", ")", "# lower righ quarter", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupRandomSizedCrop.__init__": [[221, 224], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.GroupRandomSizedCrop.__call__": [[225, 259], ["range", "random.uniform", "int", "int", "list", "transforms.GroupScale", "transforms.GroupRandomCrop", "GroupRandomCrop.", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "list.append", "GroupScale.", "math.sqrt", "math.sqrt", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "*", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.08", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "and", "h", "<=", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img_group", "[", "0", "]", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img_group", "[", "0", "]", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "found", "=", "True", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "found", "=", "False", "\n", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "\n", "", "if", "found", ":", "\n", "            ", "out_group", "=", "list", "(", ")", "\n", "for", "img", "in", "img_group", ":", "\n", "                ", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "out_group", ".", "append", "(", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", ")", "\n", "", "return", "out_group", "\n", "", "else", ":", "\n", "# Fallback", "\n", "            ", "scale", "=", "GroupScale", "(", "self", ".", "size", ",", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "crop", "=", "GroupRandomCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "scale", "(", "img_group", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.Stack.__init__": [[263, 265], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "roll", "=", "False", ")", ":", "\n", "        ", "self", ".", "roll", "=", "roll", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.Stack.__call__": [[266, 274], ["numpy.concatenate", "numpy.expand_dims", "numpy.concatenate", "numpy.concatenate", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img_group", ")", ":", "\n", "        ", "if", "img_group", "[", "0", "]", ".", "mode", "==", "'L'", ":", "\n", "            ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "expand_dims", "(", "x", ",", "2", ")", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", "\n", "", "elif", "img_group", "[", "0", "]", ".", "mode", "==", "'RGB'", ":", "\n", "            ", "if", "self", ".", "roll", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "x", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "for", "x", "in", "img_group", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "img_group", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.ToTorchFormatTensor.__init__": [[279, 281], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "div", "=", "True", ")", ":", "\n", "        ", "self", ".", "div", "=", "div", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.ToTorchFormatTensor.__call__": [[282, 294], ["isinstance", "torch.from_numpy().permute().contiguous", "torch.ByteTensor", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.view", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose().contiguous", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float().div", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.ByteStorage.from_buffer", "len", "torch.from_numpy().permute", "pic.tobytes", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose().transpose", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.float", "torch.from_numpy", "img.transpose().transpose().contiguous.transpose().transpose().contiguous.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "# handle PIL Image", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "len", "(", "pic", ".", "mode", ")", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "", "return", "img", ".", "float", "(", ")", ".", "div", "(", "255", ")", "if", "self", ".", "div", "else", "img", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.transforms.IdentityTransform.__call__": [[298, 300], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.test_tsn.eval_video": [[102, 126], ["torch.autograd.Variable", "torch.autograd.Variable", "net", "torch.sigmoid().data.cpu().numpy().copy", "torch.sigmoid().data.cpu().numpy().copy", "torch.sigmoid().data.cpu().numpy().copy", "torch.sigmoid().data.cpu().numpy().copy", "data.view", "torch.sigmoid().data.cpu().numpy().copy.reshape().mean().reshape", "torch.sigmoid().data.cpu().numpy().copy.reshape().mean().reshape", "data.size", "data.size", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "torch.sigmoid().data.cpu().numpy", "ValueError", "torch.sigmoid().data.cpu().numpy().copy.reshape().mean", "torch.sigmoid().data.cpu().numpy().copy.reshape().mean", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu", "torch.sigmoid().data.cpu().numpy().copy.reshape", "torch.sigmoid().data.cpu().numpy().copy.reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["def", "eval_video", "(", "video_data", ")", ":", "\n", "    ", "i", ",", "data", ",", "label", ",", "label_cont", "=", "video_data", "\n", "num_crop", "=", "args", ".", "test_crops", "\n", "\n", "if", "args", ".", "modality", "==", "'RGB'", ":", "\n", "        ", "length", "=", "3", "\n", "", "elif", "args", ".", "modality", "==", "'Flow'", ":", "\n", "        ", "length", "=", "10", "\n", "", "elif", "args", ".", "modality", "==", "'RGBDiff'", ":", "\n", "        ", "length", "=", "18", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown modality \"", "+", "args", ".", "modality", ")", "\n", "\n", "", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "data", ".", "view", "(", "-", "1", ",", "length", ",", "data", ".", "size", "(", "2", ")", ",", "data", ".", "size", "(", "3", ")", ")", ",", "\n", "volatile", "=", "True", ")", "\n", "\n", "out", "=", "net", "(", "input_var", ",", "None", ")", "\n", "rst", "=", "torch", ".", "sigmoid", "(", "out", "[", "'categorical'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "rst_cont", "=", "torch", ".", "sigmoid", "(", "out", "[", "'continuous'", "]", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "\n", "return", "i", ",", "rst", ".", "reshape", "(", "(", "num_crop", ",", "args", ".", "test_segments", ",", "26", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", ".", "reshape", "(", "\n", "(", "args", ".", "test_segments", ",", "1", ",", "26", ")", "\n", ")", ",", "rst_cont", ".", "reshape", "(", "(", "num_crop", ",", "args", ".", "test_segments", ",", "3", ")", ")", ".", "mean", "(", "axis", "=", "0", ")", ".", "reshape", "(", "\n", "(", "args", ".", "test_segments", ",", "1", ",", "3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.VideoRecord.__init__": [[18, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "row", ")", ":", "\n", "        ", "self", ".", "_data", "=", "row", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.VideoRecord.path": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.VideoRecord.num_frames": [[25, 28], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_frames", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.VideoRecord.min_frame": [[29, 32], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "min_frame", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.VideoRecord.max_frame": [[33, 36], ["int"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_frame", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "self", ".", "_data", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.__init__": [[39, 75], ["pandas.read_csv", "dataset.TSNDataSet.df[].apply", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mode", ",", "\n", "num_segments", "=", "3", ",", "new_length", "=", "1", ",", "modality", "=", "'RGB'", ",", "\n", "image_tmpl", "=", "'img_{:05d}.jpg'", ",", "transform", "=", "None", ",", "\n", "force_grayscale", "=", "False", ",", "random_shift", "=", "True", ",", "test_mode", "=", "False", ",", "context", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "new_length", "=", "new_length", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "image_tmpl", "=", "image_tmpl", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "random_shift", "=", "random_shift", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "\n", "self", ".", "bold_path", "=", "\"/gpu-data/filby/BoLD/BOLD_public\"", "\n", "\n", "self", ".", "context", "=", "context", "\n", "\n", "self", ".", "categorical_emotions", "=", "[", "\"Peace\"", ",", "\"Affection\"", ",", "\"Esteem\"", ",", "\"Anticipation\"", ",", "\"Engagement\"", ",", "\"Confidence\"", ",", "\"Happiness\"", ",", "\n", "\"Pleasure\"", ",", "\"Excitement\"", ",", "\"Surprise\"", ",", "\"Sympathy\"", ",", "\"Doubt/Confusion\"", ",", "\"Disconnect\"", ",", "\n", "\"Fatigue\"", ",", "\"Embarrassment\"", ",", "\"Yearning\"", ",", "\"Disapproval\"", ",", "\"Aversion\"", ",", "\"Annoyance\"", ",", "\"Anger\"", ",", "\n", "\"Sensitivity\"", ",", "\"Sadness\"", ",", "\"Disquietment\"", ",", "\"Fear\"", ",", "\"Pain\"", ",", "\"Suffering\"", "]", "\n", "\n", "self", ".", "continuous_emotions", "=", "[", "\"Valence\"", ",", "\"Arousal\"", ",", "\"Dominance\"", "]", "\n", "\n", "self", ".", "attributes", "=", "[", "\"Gender\"", ",", "\"Age\"", ",", "\"Ethnicity\"", "]", "\n", "\n", "header", "=", "[", "\"video\"", ",", "\"person_id\"", ",", "\"min_frame\"", ",", "\"max_frame\"", "]", "+", "self", ".", "categorical_emotions", "+", "self", ".", "continuous_emotions", "+", "self", ".", "attributes", "+", "[", "\"annotation_confidence\"", "]", "\n", "\n", "# self.df = pd.read_csv(os.path.join(self.bold_path, \"annotations/{}_extra.csv\".format(mode)))", "\n", "self", ".", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "bold_path", ",", "\"annotations/{}.csv\"", ".", "format", "(", "mode", ")", ")", ",", "names", "=", "header", ")", "\n", "self", ".", "df", "[", "\"joints_path\"", "]", "=", "self", ".", "df", "[", "\"video\"", "]", ".", "apply", "(", "rreplace", ",", "args", "=", "[", "\".mp4\"", ",", "\".npy\"", ",", "1", "]", ")", "\n", "\n", "self", ".", "video_list", "=", "self", ".", "df", "[", "\"video\"", "]", "\n", "self", ".", "mode", "=", "mode", "\n", "\n", "self", ".", "embeddings", "=", "np", ".", "load", "(", "\"glove_840B_embeddings.npy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get_context": [[76, 103], ["joints.reshape.reshape.reshape", "int", "int", "int", "int", "int", "int", "round", "round", "round", "round", "round", "round", "numpy.isnan", "numpy.nanmin", "numpy.nanmin", "numpy.nanmax", "numpy.nanmax", "min", "min", "max", "max", "numpy.array", "PIL.Image.fromarray", "max", "min", "len", "numpy.min"], "methods", ["None"], ["", "def", "get_context", "(", "self", ",", "image", ",", "joints", ",", "format", "=", "\"cv2\"", ")", ":", "\n", "        ", "joints", "=", "joints", ".", "reshape", "(", "(", "18", ",", "3", ")", ")", "\n", "joints", "[", "joints", "[", ":", ",", "2", "]", "<", "0.1", "]", "=", "np", ".", "nan", "\n", "joints", "[", "np", ".", "isnan", "(", "joints", "[", ":", ",", "2", "]", ")", "]", "=", "np", ".", "nan", "\n", "\n", "joint_min_x", "=", "int", "(", "round", "(", "np", ".", "nanmin", "(", "joints", "[", ":", ",", "0", "]", ")", ")", ")", "\n", "joint_min_y", "=", "int", "(", "round", "(", "np", ".", "nanmin", "(", "joints", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "\n", "joint_max_x", "=", "int", "(", "round", "(", "np", ".", "nanmax", "(", "joints", "[", ":", ",", "0", "]", ")", ")", ")", "\n", "joint_max_y", "=", "int", "(", "round", "(", "np", ".", "nanmax", "(", "joints", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "\n", "expand_x", "=", "int", "(", "round", "(", "10", "/", "100", "*", "(", "joint_max_x", "-", "joint_min_x", ")", ")", ")", "\n", "expand_y", "=", "int", "(", "round", "(", "10", "/", "100", "*", "(", "joint_max_y", "-", "joint_min_y", ")", ")", ")", "\n", "\n", "if", "format", "==", "\"cv2\"", ":", "\n", "            ", "image", "[", "max", "(", "0", ",", "joint_min_x", "-", "expand_x", ")", ":", "min", "(", "joint_max_x", "+", "expand_x", ",", "image", ".", "shape", "[", "1", "]", ")", "]", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "", "elif", "format", "==", "\"PIL\"", ":", "\n", "            ", "bottom", "=", "min", "(", "joint_max_y", "+", "expand_y", ",", "image", ".", "height", ")", "\n", "right", "=", "min", "(", "joint_max_x", "+", "expand_x", ",", "image", ".", "width", ")", "\n", "top", "=", "max", "(", "0", ",", "joint_min_y", "-", "expand_y", ")", "\n", "left", "=", "max", "(", "0", ",", "joint_min_x", "-", "expand_x", ")", "\n", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", ":", "\n", "                ", "image", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "", "else", ":", "\n", "                ", "image", "[", "top", ":", "bottom", ",", "left", ":", "right", "]", "=", "np", ".", "min", "(", "image", ")", "\n", "", "return", "Image", ".", "fromarray", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get_bounding_box": [[105, 127], ["joints.reshape.reshape.reshape", "int", "int", "int", "int", "int", "int", "round", "round", "round", "round", "round", "round", "numpy.isnan", "numpy.nanmin", "numpy.nanmin", "numpy.nanmax", "numpy.nanmax", "min", "min", "max", "max", "torchvision.crop", "max", "min", "max", "min"], "methods", ["None"], ["", "", "def", "get_bounding_box", "(", "self", ",", "image", ",", "joints", ",", "format", "=", "\"cv2\"", ")", ":", "\n", "        ", "joints", "=", "joints", ".", "reshape", "(", "(", "18", ",", "3", ")", ")", "\n", "joints", "[", "joints", "[", ":", ",", "2", "]", "<", "0.1", "]", "=", "np", ".", "nan", "\n", "joints", "[", "np", ".", "isnan", "(", "joints", "[", ":", ",", "2", "]", ")", "]", "=", "np", ".", "nan", "\n", "\n", "joint_min_x", "=", "int", "(", "round", "(", "np", ".", "nanmin", "(", "joints", "[", ":", ",", "0", "]", ")", ")", ")", "\n", "joint_min_y", "=", "int", "(", "round", "(", "np", ".", "nanmin", "(", "joints", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "\n", "joint_max_x", "=", "int", "(", "round", "(", "np", ".", "nanmax", "(", "joints", "[", ":", ",", "0", "]", ")", ")", ")", "\n", "joint_max_y", "=", "int", "(", "round", "(", "np", ".", "nanmax", "(", "joints", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "\n", "expand_x", "=", "int", "(", "round", "(", "100", "/", "100", "*", "(", "joint_max_x", "-", "joint_min_x", ")", ")", ")", "\n", "expand_y", "=", "int", "(", "round", "(", "100", "/", "100", "*", "(", "joint_max_y", "-", "joint_min_y", ")", ")", ")", "\n", "\n", "if", "format", "==", "\"cv2\"", ":", "\n", "            ", "return", "image", "[", "max", "(", "0", ",", "joint_min_y", "-", "expand_y", ")", ":", "min", "(", "joint_max_y", "+", "expand_y", ",", "image", ".", "shape", "[", "0", "]", ")", ",", "max", "(", "0", ",", "joint_min_x", "-", "expand_x", ")", ":", "min", "(", "joint_max_x", "+", "expand_x", ",", "image", ".", "shape", "[", "1", "]", ")", "]", "\n", "", "elif", "format", "==", "\"PIL\"", ":", "\n", "            ", "bottom", "=", "min", "(", "joint_max_y", "+", "expand_y", ",", "image", ".", "height", ")", "\n", "right", "=", "min", "(", "joint_max_x", "+", "expand_x", ",", "image", ".", "width", ")", "\n", "top", "=", "max", "(", "0", ",", "joint_min_y", "-", "expand_y", ")", "\n", "left", "=", "max", "(", "0", ",", "joint_min_x", "-", "expand_x", ")", "\n", "return", "tF", ".", "crop", "(", "image", ",", "top", ",", "left", ",", "bottom", "-", "top", ",", "right", "-", "left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.joints": [[129, 138], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.load"], "methods", ["None"], ["", "", "def", "joints", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "self", ".", "df", ".", "iloc", "[", "index", "]", "\n", "\n", "joints_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "bold_path", ",", "\"joints\"", ",", "sample", "[", "\"joints_path\"", "]", ")", "\n", "\n", "joints18", "=", "np", ".", "load", "(", "joints_path", ")", "\n", "joints18", "[", ":", ",", "0", "]", "-=", "joints18", "[", "0", ",", "0", "]", "\n", "\n", "return", "joints18", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet._load_image": [[139, 195], ["dataset.TSNDataSet.joints", "PIL.Image.open().convert", "dataset.TSNDataSet.get_context", "dataset.TSNDataSet.get_bounding_box", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "print", "dataset.TSNDataSet.get_context", "dataset.TSNDataSet.get_context", "dataset.TSNDataSet.get_bounding_box", "dataset.TSNDataSet.get_bounding_box", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open", "PIL.Image.open", "dataset.TSNDataSet.image_tmpl.format", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.TSNDataSet.image_tmpl.format", "dataset.TSNDataSet.image_tmpl.format"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.joints", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get_context", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get_bounding_box", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get_context", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get_context", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get_bounding_box", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get_bounding_box"], ["", "def", "_load_image", "(", "self", ",", "directory", ",", "idx", ",", "index", ",", "mode", "=", "\"body\"", ")", ":", "\n", "        ", "joints", "=", "self", ".", "joints", "(", "index", ")", "\n", "\n", "poi_joints", "=", "joints", "[", "joints", "[", ":", ",", "0", "]", "+", "1", "==", "idx", "]", "\n", "sample", "=", "self", ".", "df", ".", "iloc", "[", "index", "]", "\n", "poi_joints", "=", "poi_joints", "[", "(", "poi_joints", "[", ":", ",", "1", "]", "==", "sample", "[", "\"person_id\"", "]", ")", ",", "2", ":", "]", "\n", "if", "self", ".", "modality", "==", "'RGB'", "or", "self", ".", "modality", "==", "'RGBDiff'", ":", "\n", "\n", "            ", "frame", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "idx", ")", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "\n", "if", "mode", "==", "\"context\"", ":", "\n", "                ", "if", "poi_joints", ".", "size", "==", "0", ":", "\n", "                    ", "return", "[", "frame", "]", "\n", "", "context", "=", "self", ".", "get_context", "(", "frame", ",", "poi_joints", ",", "format", "=", "\"PIL\"", ")", "\n", "return", "[", "context", "]", "\n", "\n", "", "if", "poi_joints", ".", "size", "==", "0", ":", "\n", "                ", "body", "=", "frame", "\n", "pass", "#just do the whole frame", "\n", "", "else", ":", "\n", "                ", "body", "=", "self", ".", "get_bounding_box", "(", "frame", ",", "poi_joints", ",", "format", "=", "\"PIL\"", ")", "\n", "\n", "if", "body", ".", "size", "==", "0", ":", "\n", "                    ", "print", "(", "poi_joints", ")", "\n", "body", "=", "frame", "\n", "\n", "", "", "return", "[", "body", "]", "\n", "\n", "# return [Image.open(os.path.join(directory, self.image_tmpl.format(idx))).convert('RGB')]", "\n", "", "elif", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "frame_x", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "'flow_x'", ",", "idx", ")", ")", ")", ".", "convert", "(", "'L'", ")", "\n", "frame_y", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "self", ".", "image_tmpl", ".", "format", "(", "'flow_y'", ",", "idx", ")", ")", ")", ".", "convert", "(", "'L'", ")", "\n", "# frame = cv2.imread(os.path.join(directory, 'img_{:05d}.jpg'.format(idx)))", "\n", "# frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)", "\n", "\n", "if", "mode", "==", "\"context\"", ":", "\n", "                ", "if", "poi_joints", ".", "size", "==", "0", ":", "\n", "                    ", "return", "[", "frame_x", ",", "frame_y", "]", "\n", "", "context_x", "=", "self", ".", "get_context", "(", "frame_x", ",", "poi_joints", ",", "format", "=", "\"PIL\"", ")", "\n", "context_y", "=", "self", ".", "get_context", "(", "frame_y", ",", "poi_joints", ",", "format", "=", "\"PIL\"", ")", "\n", "return", "[", "context_x", ",", "context_y", "]", "\n", "\n", "", "if", "poi_joints", ".", "size", "==", "0", ":", "\n", "                ", "body_x", "=", "frame_x", "\n", "body_y", "=", "frame_y", "\n", "pass", "#just do the whole frame", "\n", "", "else", ":", "\n", "                ", "body_x", "=", "self", ".", "get_bounding_box", "(", "frame_x", ",", "poi_joints", ",", "format", "=", "\"PIL\"", ")", "\n", "body_y", "=", "self", ".", "get_bounding_box", "(", "frame_y", ",", "poi_joints", ",", "format", "=", "\"PIL\"", ")", "\n", "\n", "if", "body_x", ".", "size", "==", "0", ":", "\n", "                    ", "body_x", "=", "frame_x", "\n", "body_y", "=", "frame_y", "\n", "\n", "\n", "", "", "return", "[", "body_x", ",", "body_y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet._sample_indices": [[197, 213], ["numpy.multiply", "numpy.random.randint", "numpy.sort", "numpy.zeros", "list", "numpy.random.randint", "range"], "methods", ["None"], ["", "", "def", "_sample_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "\"\"\"\n\n        :param record: VideoRecord\n        :return: list\n        \"\"\"", "\n", "\n", "average_duration", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "//", "self", ".", "num_segments", "\n", "if", "average_duration", ">", "0", ":", "\n", "            ", "offsets", "=", "np", ".", "multiply", "(", "list", "(", "range", "(", "self", ".", "num_segments", ")", ")", ",", "average_duration", ")", "+", "randint", "(", "average_duration", ",", "size", "=", "self", ".", "num_segments", ")", "# + (record.min_frame+1)", "\n", "# print(record.num_frames, record.min_frame, record.max_frame)", "\n", "", "elif", "record", ".", "num_frames", ">", "self", ".", "num_segments", ":", "\n", "            ", "offsets", "=", "np", ".", "sort", "(", "randint", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ",", "size", "=", "self", ".", "num_segments", ")", ")", "\n", "", "else", ":", "\n", "            ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet._get_val_indices": [[214, 221], ["numpy.array", "numpy.zeros", "float", "int", "range"], "methods", ["None"], ["", "def", "_get_val_indices", "(", "self", ",", "record", ")", ":", "\n", "        ", "if", "record", ".", "num_frames", ">", "self", ".", "num_segments", "+", "self", ".", "new_length", "-", "1", ":", "\n", "            ", "tick", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "offsets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_segments", ",", ")", ")", "\n", "", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet._get_test_indices": [[222, 229], ["numpy.array", "float", "int", "range"], "methods", ["None"], ["", "def", "_get_test_indices", "(", "self", ",", "record", ")", ":", "\n", "\n", "        ", "tick", "=", "(", "record", ".", "num_frames", "-", "self", ".", "new_length", "+", "1", ")", "/", "float", "(", "self", ".", "num_segments", ")", "\n", "\n", "offsets", "=", "np", ".", "array", "(", "[", "int", "(", "tick", "/", "2.0", "+", "tick", "*", "x", ")", "for", "x", "in", "range", "(", "self", ".", "num_segments", ")", "]", ")", "\n", "\n", "return", "offsets", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.__getitem__": [[230, 250], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "cv2.VideoCapture", "cv2.VideoCapture.release", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.VideoRecord", "dataset.TSNDataSet.get", "int", "dataset.TSNDataSet._get_test_indices", "cv2.VideoCapture.get", "dataset.TSNDataSet._sample_indices", "dataset.TSNDataSet._get_val_indices"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet._get_test_indices", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet._sample_indices", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet._get_val_indices"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sample", "=", "self", ".", "df", ".", "iloc", "[", "index", "]", "\n", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "bold_path", ",", "\"videos\"", ",", "self", ".", "df", ".", "iloc", "[", "index", "]", "[", "\"video\"", "]", ")", "\n", "\n", "capture", "=", "cv2", ".", "VideoCapture", "(", "fname", ")", "\n", "frame_count", "=", "int", "(", "capture", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "-", "1", "\n", "\n", "capture", ".", "release", "(", ")", "\n", "\n", "record_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "bold_path", ",", "\"test_raw\"", ",", "sample", "[", "\"video\"", "]", "[", "4", ":", "-", "4", "]", ")", "\n", "\n", "record", "=", "VideoRecord", "(", "[", "record_path", ",", "frame_count", ",", "sample", "[", "\"min_frame\"", "]", ",", "sample", "[", "\"max_frame\"", "]", "]", ")", "\n", "\n", "if", "not", "self", ".", "test_mode", ":", "\n", "            ", "segment_indices", "=", "self", ".", "_sample_indices", "(", "record", ")", "if", "self", ".", "random_shift", "else", "self", ".", "_get_val_indices", "(", "record", ")", "\n", "", "else", ":", "\n", "            ", "segment_indices", "=", "self", ".", "_get_test_indices", "(", "record", ")", "\n", "\n", "", "return", "self", ".", "get", "(", "record", ",", "segment_indices", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get": [[251, 287], ["list", "int", "range", "dataset.TSNDataSet.transform", "dataset.TSNDataSet._load_image", "list.extend", "dataset.TSNDataSet.transform", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "dataset.TSNDataSet._load_image", "list.extend", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet._load_image", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet._load_image"], ["", "def", "get", "(", "self", ",", "record", ",", "indices", ",", "index", ")", ":", "\n", "\n", "        ", "images", "=", "list", "(", ")", "\n", "# print(indices)", "\n", "for", "seg_ind", "in", "indices", ":", "\n", "            ", "p", "=", "int", "(", "seg_ind", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "new_length", ")", ":", "\n", "\n", "                ", "seg_imgs", "=", "self", ".", "_load_image", "(", "record", ".", "path", ",", "p", ",", "index", ",", "mode", "=", "\"body\"", ")", "\n", "\n", "images", ".", "extend", "(", "seg_imgs", ")", "\n", "\n", "if", "self", ".", "context", ":", "\n", "                    ", "seg_imgs", "=", "self", ".", "_load_image", "(", "record", ".", "path", ",", "p", ",", "index", ",", "mode", "=", "\"context\"", ")", "\n", "images", ".", "extend", "(", "seg_imgs", ")", "\n", "\n", "\n", "", "if", "p", "<", "record", ".", "num_frames", ":", "\n", "                    ", "p", "+=", "1", "\n", "\n", "\n", "", "", "", "if", "not", "self", ".", "test_mode", ":", "\n", "            ", "categorical", "=", "self", ".", "df", ".", "iloc", "[", "index", "]", "[", "self", ".", "categorical_emotions", "]", "\n", "\n", "continuous", "=", "self", ".", "df", ".", "iloc", "[", "index", "]", "[", "self", ".", "continuous_emotions", "]", "\n", "continuous", "=", "continuous", "/", "10.0", "# normalize to 0 - 1", "\n", "\n", "if", "self", ".", "transform", "is", "None", ":", "\n", "                ", "process_data", "=", "images", "\n", "", "else", ":", "\n", "                ", "process_data", "=", "self", ".", "transform", "(", "images", ")", "\n", "\n", "", "return", "process_data", ",", "torch", ".", "tensor", "(", "self", ".", "embeddings", ")", ".", "float", "(", ")", ",", "torch", ".", "tensor", "(", "categorical", ")", ".", "float", "(", ")", ",", "torch", ".", "tensor", "(", "continuous", ")", ".", "float", "(", ")", ",", "self", ".", "df", ".", "iloc", "[", "index", "]", "[", "\"video\"", "]", "\n", "", "else", ":", "\n", "            ", "process_data", "=", "self", ".", "transform", "(", "images", ")", "\n", "return", "process_data", ",", "torch", ".", "tensor", "(", "self", ".", "embeddings", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.__len__": [[288, 290], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "df", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.rreplace": [[12, 15], ["s.rsplit", "new.join"], "function", ["None"], ["def", "rreplace", "(", "s", ",", "old", ",", "new", ",", "occurrence", ")", ":", "\n", "    ", "li", "=", "s", ".", "rsplit", "(", "old", ",", "occurrence", ")", "\n", "return", "new", ".", "join", "(", "li", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.train_tsn.main": [[22, 103], ["model.models.TSN", "model.models.TSN.get_optim_policies", "transforms.GroupNormalize", "dataset.TSNDataSet", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "config.get_logger", "config.get_logger.info", "getattr", "getattr", "torch.optim.SGD", "config.init_obj", "trainer.trainer.Trainer", "trainer.trainer.Trainer.train", "dataset.TSNDataSet", "getattr", "getattr", "print", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "transforms.GroupScale", "transforms.Stack", "transforms.ToTorchFormatTensor", "transforms.GroupScale", "transforms.Stack", "transforms.ToTorchFormatTensor", "int", "int"], "function", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN.get_optim_policies", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer.train"], ["def", "main", "(", "args", ",", "config", ")", ":", "\n", "\t", "if", "args", ".", "modality", "==", "'RGB'", ":", "\n", "\t\t", "data_length", "=", "1", "\n", "", "elif", "args", ".", "modality", "==", "'Flow'", ":", "\n", "\t\t", "data_length", "=", "5", "\n", "\n", "\n", "", "model", "=", "TSN", "(", "26", ",", "args", ".", "num_segments", ",", "args", ".", "modality", ",", "\n", "base_model", "=", "args", ".", "arch", ",", "new_length", "=", "data_length", ",", "embed", "=", "args", ".", "embed", ",", "\n", "consensus_type", "=", "args", ".", "consensus_type", ",", "dropout", "=", "args", ".", "dropout", ",", "partial_bn", "=", "not", "args", ".", "no_partialbn", ",", "context", "=", "args", ".", "context", ")", "\n", "\n", "input_mean", "=", "model", ".", "input_mean", "\n", "input_std", "=", "model", ".", "input_std", "\n", "policies", "=", "model", ".", "get_optim_policies", "(", ")", "\n", "\n", "normalize", "=", "GroupNormalize", "(", "input_mean", ",", "input_std", ")", "\n", "\n", "dataset", "=", "TSNDataSet", "(", "\"train\"", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "context", "=", "args", ".", "context", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "\"img_{:05d}.jpg\"", "if", "args", ".", "modality", "in", "[", "\"RGB\"", "]", "else", "args", ".", "flow_prefix", "+", "\"{}_{:05d}.jpg\"", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "Stack", "(", "roll", "=", "args", ".", "arch", "==", "'BNInception'", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "args", ".", "arch", "!=", "'BNInception'", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "TSNDataSet", "(", "\"val\"", ",", "num_segments", "=", "args", ".", "num_segments", ",", "\n", "context", "=", "args", ".", "context", ",", "\n", "new_length", "=", "data_length", ",", "\n", "modality", "=", "args", ".", "modality", ",", "\n", "image_tmpl", "=", "\"img_{:05d}.jpg\"", "if", "args", ".", "modality", "in", "[", "\"RGB\"", "]", "else", "args", ".", "flow_prefix", "+", "\"{}_{:05d}.jpg\"", ",", "\n", "random_shift", "=", "False", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "GroupScale", "(", "(", "int", "(", "224", ")", ",", "int", "(", "224", ")", ")", ")", ",", "\n", "Stack", "(", "roll", "=", "args", ".", "arch", "==", "'BNInception'", ")", ",", "\n", "ToTorchFormatTensor", "(", "div", "=", "args", ".", "arch", "!=", "'BNInception'", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "\n", "logger", "=", "config", ".", "get_logger", "(", "'train'", ")", "\n", "logger", ".", "info", "(", "model", ")", "\n", "\n", "\n", "# get function handles of loss and metrics", "\n", "criterion_categorical", "=", "getattr", "(", "module_loss", ",", "config", "[", "'loss'", "]", ")", "\n", "criterion_continuous", "=", "getattr", "(", "module_loss", ",", "config", "[", "'loss_continuous'", "]", ")", "\n", "\n", "metrics", "=", "[", "getattr", "(", "module_metric", ",", "met", ")", "for", "met", "in", "config", "[", "'metrics'", "]", "]", "\n", "metrics_continuous", "=", "[", "getattr", "(", "module_metric", ",", "met", ")", "for", "met", "in", "config", "[", "'metrics_continuous'", "]", "]", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "policies", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "lr_scheduler", "=", "config", ".", "init_obj", "(", "'lr_scheduler'", ",", "torch", ".", "optim", ".", "lr_scheduler", ",", "optimizer", ")", "\n", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "\t\t", "print", "(", "param_group", "[", "'lr'", "]", ")", "\n", "\n", "", "trainer", "=", "Trainer", "(", "model", ",", "criterion_categorical", ",", "criterion_continuous", ",", "metrics", ",", "metrics_continuous", ",", "optimizer", ",", "\n", "config", "=", "config", ",", "\n", "data_loader", "=", "train_loader", ",", "\n", "valid_data_loader", "=", "val_loader", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ",", "embed", "=", "args", ".", "embed", ")", "\n", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config.ConfigParser.__init__": [[12, 48], ["parse_config._update_config", "pathlib.Path", "parse_config.ConfigParser.save_dir.mkdir", "parse_config.ConfigParser.log_dir.mkdir", "utils.write_json", "logger.setup_logging", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config._update_config", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.write_json", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.logger.logger.setup_logging"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "resume", "=", "None", ",", "modification", "=", "None", ",", "run_id", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        class to parse configuration json file. Handles hyperparameters for training, initializations of modules, checkpoint saving\n        and logging module.\n        :param config: Dict containing configurations, hyperparameters for training. contents of `config.json` file for example.\n        :param resume: String, path to the checkpoint being loaded.\n        :param modification: Dict keychain:value, specifying position values to be replaced from config dict.\n        :param run_id: Unique Identifier for training processes. Used to save checkpoints and training log. Timestamp is being used as default\n        \"\"\"", "\n", "# load config file and apply modification", "\n", "self", ".", "_config", "=", "_update_config", "(", "config", ",", "modification", ")", "\n", "self", ".", "resume", "=", "resume", "\n", "\n", "# set save_dir where trained model and log will be saved.", "\n", "save_dir", "=", "Path", "(", "self", ".", "config", "[", "'trainer'", "]", "[", "'save_dir'", "]", ")", "\n", "\n", "exper_name", "=", "self", ".", "config", "[", "'name'", "]", "\n", "if", "run_id", "is", "None", ":", "# use timestamp as default run-id", "\n", "            ", "run_id", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "r'%m%d_%H%M%S'", ")", "\n", "", "self", ".", "_save_dir", "=", "save_dir", "/", "'models'", "/", "exper_name", "/", "run_id", "\n", "self", ".", "_log_dir", "=", "save_dir", "/", "'log'", "/", "exper_name", "/", "run_id", "\n", "\n", "# make directory for saving checkpoints and log.", "\n", "exist_ok", "=", "run_id", "==", "''", "\n", "self", ".", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "exist_ok", ")", "\n", "self", ".", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "exist_ok", ")", "\n", "\n", "# save updated config file to the checkpoint dir", "\n", "write_json", "(", "self", ".", "config", ",", "self", ".", "save_dir", "/", "'config.json'", ")", "\n", "\n", "# configure logging module", "\n", "setup_logging", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "log_levels", "=", "{", "\n", "0", ":", "logging", ".", "WARNING", ",", "\n", "1", ":", "logging", ".", "INFO", ",", "\n", "2", ":", "logging", ".", "DEBUG", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config.ConfigParser.from_args": [[50, 79], ["utils.read_json", "cls", "args.parse_args.parse_args.add_argument", "isinstance", "args.parse_args.parse_args.parse_args", "pathlib.Path", "pathlib.Path", "utils.read_json.update", "getattr", "utils.read_json", "parse_config._get_opt_name"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.read_json", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.read_json", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config._get_opt_name"], ["", "@", "classmethod", "\n", "def", "from_args", "(", "cls", ",", "args", ",", "options", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this class from some cli arguments. Used in train, test.\n        \"\"\"", "\n", "for", "opt", "in", "options", ":", "\n", "            ", "args", ".", "add_argument", "(", "*", "opt", ".", "flags", ",", "default", "=", "None", ",", "type", "=", "opt", ".", "type", ")", "\n", "", "if", "not", "isinstance", "(", "args", ",", "tuple", ")", ":", "\n", "            ", "args", "=", "args", ".", "parse_args", "(", ")", "\n", "\n", "", "if", "args", ".", "device", "is", "not", "None", ":", "\n", "            ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "device", "\n", "", "if", "args", ".", "resume", "is", "not", "None", ":", "\n", "            ", "resume", "=", "Path", "(", "args", ".", "resume", ")", "\n", "cfg_fname", "=", "resume", ".", "parent", "/", "'config.json'", "\n", "", "else", ":", "\n", "            ", "msg_no_cfg", "=", "\"Configuration file need to be specified. Add '-c config.json', for example.\"", "\n", "assert", "args", ".", "config", "is", "not", "None", ",", "msg_no_cfg", "\n", "resume", "=", "None", "\n", "cfg_fname", "=", "Path", "(", "args", ".", "config", ")", "\n", "\n", "", "config", "=", "read_json", "(", "cfg_fname", ")", "\n", "if", "args", ".", "config", "and", "resume", ":", "\n", "# update new config for fine-tuning", "\n", "            ", "config", ".", "update", "(", "read_json", "(", "args", ".", "config", ")", ")", "\n", "\n", "# parse custom cli options into dictionary", "\n", "", "modification", "=", "{", "opt", ".", "target", ":", "getattr", "(", "args", ",", "_get_opt_name", "(", "opt", ".", "flags", ")", ")", "for", "opt", "in", "options", "}", "\n", "return", "cls", "(", "config", ",", "resume", ",", "modification", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config.ConfigParser.init_obj": [[80, 94], ["dict", "all", "dict.update", "getattr"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update"], ["", "def", "init_obj", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Finds a function handle with the name given as 'type' in config, and returns the\n        instance initialized with corresponding arguments given.\n\n        `object = config.init_obj('name', module, a, b=1)`\n        is equivalent to\n        `object = module.name(a, b=1)`\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "module_args", "=", "dict", "(", "self", "[", "name", "]", "[", "'args'", "]", ")", "\n", "assert", "all", "(", "[", "k", "not", "in", "module_args", "for", "k", "in", "kwargs", "]", ")", ",", "'Overwriting kwargs given in config file is not allowed'", "\n", "module_args", ".", "update", "(", "kwargs", ")", "\n", "return", "getattr", "(", "module", ",", "module_name", ")", "(", "*", "args", ",", "**", "module_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config.ConfigParser.init_ftn": [[95, 109], ["dict", "all", "dict.update", "functools.partial", "getattr"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update"], ["", "def", "init_ftn", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Finds a function handle with the name given as 'type' in config, and returns the\n        function with given arguments fixed with functools.partial.\n\n        `function = config.init_ftn('name', module, a, b=1)`\n        is equivalent to\n        `function = lambda *args, **kwargs: module.name(a, *args, b=1, **kwargs)`.\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "module_args", "=", "dict", "(", "self", "[", "name", "]", "[", "'args'", "]", ")", "\n", "assert", "all", "(", "[", "k", "not", "in", "module_args", "for", "k", "in", "kwargs", "]", ")", ",", "'Overwriting kwargs given in config file is not allowed'", "\n", "module_args", ".", "update", "(", "kwargs", ")", "\n", "return", "partial", "(", "getattr", "(", "module", ",", "module_name", ")", ",", "*", "args", ",", "**", "module_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config.ConfigParser.__getitem__": [[110, 113], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Access items like ordinary dict.\"\"\"", "\n", "return", "self", ".", "config", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config.ConfigParser.get_logger": [[114, 120], ["logging.getLogger", "logging.getLogger.setLevel", "parse_config.ConfigParser.log_levels.keys"], "methods", ["None"], ["", "def", "get_logger", "(", "self", ",", "name", ",", "verbosity", "=", "2", ")", ":", "\n", "        ", "msg_verbosity", "=", "'verbosity option {} is invalid. Valid options are {}.'", ".", "format", "(", "verbosity", ",", "self", ".", "log_levels", ".", "keys", "(", ")", ")", "\n", "assert", "verbosity", "in", "self", ".", "log_levels", ",", "msg_verbosity", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "self", ".", "log_levels", "[", "verbosity", "]", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config.ConfigParser.config": [[122, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config.ConfigParser.save_dir": [[126, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "save_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config.ConfigParser.log_dir": [[130, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "log_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config._update_config": [[135, 143], ["modification.items", "parse_config._set_by_path"], "function", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config._set_by_path"], ["", "", "def", "_update_config", "(", "config", ",", "modification", ")", ":", "\n", "    ", "if", "modification", "is", "None", ":", "\n", "        ", "return", "config", "\n", "\n", "", "for", "k", ",", "v", "in", "modification", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "not", "None", ":", "\n", "            ", "_set_by_path", "(", "config", ",", "k", ",", "v", ")", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config._get_opt_name": [[144, 149], ["flags[].replace", "flg.startswith", "flg.replace"], "function", ["None"], ["", "def", "_get_opt_name", "(", "flags", ")", ":", "\n", "    ", "for", "flg", "in", "flags", ":", "\n", "        ", "if", "flg", ".", "startswith", "(", "'--'", ")", ":", "\n", "            ", "return", "flg", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "", "", "return", "flags", "[", "0", "]", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config._set_by_path": [[150, 154], ["keys.split.split", "parse_config._get_by_path"], "function", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config._get_by_path"], ["", "def", "_set_by_path", "(", "tree", ",", "keys", ",", "value", ")", ":", "\n", "    ", "\"\"\"Set a value in a nested object in tree by sequence of keys.\"\"\"", "\n", "keys", "=", "keys", ".", "split", "(", "';'", ")", "\n", "_get_by_path", "(", "tree", ",", "keys", "[", ":", "-", "1", "]", ")", "[", "keys", "[", "-", "1", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config._get_by_path": [[155, 158], ["functools.reduce"], "function", ["None"], ["", "def", "_get_by_path", "(", "tree", ",", "keys", ")", ":", "\n", "    ", "\"\"\"Access a nested object in tree by sequence of keys.\"\"\"", "\n", "return", "reduce", "(", "getitem", ",", "keys", ",", "tree", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.__init__": [[35, 39], ["pandas.DataFrame", "util.MetricTracker.reset"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.reset"], ["    ", "def", "__init__", "(", "self", ",", "*", "keys", ",", "writer", "=", "None", ")", ":", "\n", "        ", "self", ".", "writer", "=", "writer", "\n", "self", ".", "_data", "=", "pd", ".", "DataFrame", "(", "index", "=", "keys", ",", "columns", "=", "[", "'total'", ",", "'counts'", ",", "'average'", "]", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.reset": [[40, 43], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "col", "in", "self", ".", "_data", ".", "columns", ":", "\n", "            ", "self", ".", "_data", "[", "col", "]", ".", "values", "[", ":", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update": [[44, 50], ["util.MetricTracker.writer.add_scalar"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "key", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ")", "\n", "", "self", ".", "_data", ".", "total", "[", "key", "]", "+=", "value", "*", "n", "\n", "self", ".", "_data", ".", "counts", "[", "key", "]", "+=", "n", "\n", "self", ".", "_data", ".", "average", "[", "key", "]", "=", "self", ".", "_data", ".", "total", "[", "key", "]", "/", "self", ".", "_data", ".", "counts", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.avg": [[51, 53], ["None"], "methods", ["None"], ["", "def", "avg", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "average", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.result": [[54, 56], ["dict"], "methods", ["None"], ["", "def", "result", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "_data", ".", "average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.ensure_dir": [[14, 18], ["pathlib.Path", "pathlib.Path.is_dir", "pathlib.Path.mkdir"], "function", ["None"], ["def", "ensure_dir", "(", "dirname", ")", ":", "\n", "    ", "dirname", "=", "Path", "(", "dirname", ")", "\n", "if", "not", "dirname", ".", "is_dir", "(", ")", ":", "\n", "        ", "dirname", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.read_json": [[19, 23], ["pathlib.Path", "pathlib.Path.open", "json.load"], "function", ["None"], ["", "", "def", "read_json", "(", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'rt'", ")", "as", "handle", ":", "\n", "        ", "return", "json", ".", "load", "(", "handle", ",", "object_hook", "=", "OrderedDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.write_json": [[24, 28], ["pathlib.Path", "pathlib.Path.open", "json.dump"], "function", ["None"], ["", "", "def", "write_json", "(", "content", ",", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'wt'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "content", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.inf_loop": [[29, 33], ["itertools.repeat"], "function", ["None"], ["", "", "def", "inf_loop", "(", "data_loader", ")", ":", "\n", "    ", "''' wrapper function for endless data loader. '''", "\n", "for", "loader", "in", "repeat", "(", "data_loader", ")", ":", "\n", "        ", "yield", "from", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.visualize_skeleton_openpose_18": [[61, 96], ["matplotlib.figure", "plt.figure.add_subplot", "matplotlib.gca().invert_yaxis", "Camera", "range", "Camera.animate", "matplotlib.close", "fig.add_subplot.scatter", "Camera.snap", "numpy.isnan", "matplotlib.gca", "fig.add_subplot.plot"], "function", ["None"], ["def", "visualize_skeleton_openpose_18", "(", "joints", ",", "filename", "=", "\"fig.png\"", ")", ":", "\n", "    ", "joints_edges", "=", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "3", ",", "4", "]", ",", "[", "1", ",", "5", "]", ",", "[", "5", ",", "6", "]", ",", "[", "6", ",", "7", "]", ",", "[", "1", ",", "8", "]", ",", "[", "8", ",", "9", "]", ",", "\n", "[", "9", ",", "10", "]", ",", "[", "1", ",", "11", "]", ",", "[", "11", ",", "12", "]", ",", "[", "12", ",", "13", "]", ",", "[", "0", ",", "14", "]", ",", "[", "14", ",", "16", "]", ",", "[", "0", ",", "15", "]", ",", "[", "15", ",", "17", "]", "]", "\n", "\n", "\n", "joints", "[", "joints", "[", ":", ",", ":", ",", "2", "]", "<", "0.1", "]", "=", "np", ".", "nan", "\n", "joints", "[", "np", ".", "isnan", "(", "joints", "[", ":", ",", ":", ",", "2", "]", ")", "]", "=", "np", ".", "nan", "\n", "\n", "\n", "# ani =   animation.FuncAnimation(fig, update_plot, frames=range(len(sequence)),", "\n", "#                               fargs=(sequence, scat))", "\n", "\n", "\n", "# plt.show()", "\n", "\n", "\n", "from", "celluloid", "import", "Camera", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "plt", ".", "gca", "(", ")", ".", "invert_yaxis", "(", ")", "\n", "\n", "camera", "=", "Camera", "(", "fig", ")", "\n", "for", "frame", "in", "range", "(", "0", ",", "joints", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "        ", "scat", "=", "ax", ".", "scatter", "(", "joints", "[", "frame", ",", ":", ",", "0", "]", ",", "joints", "[", "frame", ",", ":", ",", "1", "]", ")", "\n", "for", "edge", "in", "joints_edges", ":", "\n", "            ", "ax", ".", "plot", "(", "(", "joints", "[", "frame", ",", "edge", "[", "0", "]", ",", "0", "]", ",", "joints", "[", "frame", ",", "edge", "[", "1", "]", ",", "0", "]", ")", ",", "\n", "(", "joints", "[", "frame", ",", "edge", "[", "0", "]", ",", "1", "]", ",", "joints", "[", "frame", ",", "edge", "[", "1", "]", ",", "1", "]", ")", ")", "\n", "\n", "", "camera", ".", "snap", "(", ")", "\n", "\n", "", "animation", "=", "camera", ".", "animate", "(", "interval", "=", "30", ")", "\n", "plt", ".", "close", "(", ")", "\n", "return", "animation", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.make_barplot": [[100, 128], ["numpy.arange", "matplotlib.subplots", "ax.bar", "util.make_barplot.autolabel"], "function", ["None"], ["", "def", "make_barplot", "(", "y", ",", "c", ",", "label", ")", ":", "\n", "\n", "    ", "def", "autolabel", "(", "rects", ")", ":", "\n", "        ", "\"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"", "\n", "for", "rect", "in", "rects", ":", "\n", "            ", "height", "=", "rect", ".", "get_height", "(", ")", "\n", "ax", ".", "annotate", "(", "'{:.02f}'", ".", "format", "(", "height", ")", ",", "\n", "xy", "=", "(", "rect", ".", "get_x", "(", ")", "+", "rect", ".", "get_width", "(", ")", "/", "2", ",", "height", ")", ",", "\n", "xytext", "=", "(", "0", ",", "3", ")", ",", "# 3 points vertical offset", "\n", "textcoords", "=", "\"offset points\"", ",", "\n", "ha", "=", "'center'", ",", "va", "=", "'bottom'", ")", "\n", "\n", "", "", "x", "=", "np", ".", "arange", "(", "len", "(", "c", ")", ")", "# the label locations", "\n", "\n", "width", "=", "0.35", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "rects1", "=", "ax", ".", "bar", "(", "x", ",", "y", ",", "width", ",", "label", "=", "label", ")", "\n", "\n", "autolabel", "(", "rects1", ")", "\n", "\n", "plt", ".", "xticks", "(", "rotation", "=", "90", ")", "\n", "\n", "ax", ".", "set_xticks", "(", "x", ")", "\n", "ax", ".", "set_xticklabels", "(", "c", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.hook_feature": [[134, 137], ["numpy.squeeze", "output.data.cpu().numpy", "output.data.cpu"], "function", ["None"], ["def", "hook_feature", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "    ", "global", "features_blobs", "\n", "features_blobs", "=", "np", ".", "squeeze", "(", "output", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.returnCAM": [[138, 151], ["weight_softmax[].dot", "cam.reshape.reshape", "numpy.uint8", "output_cam.append", "feature_conv.reshape", "numpy.min", "numpy.max", "cv2.resize"], "function", ["None"], ["", "def", "returnCAM", "(", "feature_conv", ",", "weight_softmax", ",", "class_idx", ")", ":", "\n", "# generate the class activation maps upsample to 256x256", "\n", "    ", "size_upsample", "=", "(", "256", ",", "256", ")", "\n", "nc", ",", "h", ",", "w", "=", "feature_conv", ".", "shape", "\n", "output_cam", "=", "[", "]", "\n", "for", "idx", "in", "class_idx", ":", "\n", "        ", "cam", "=", "weight_softmax", "[", "class_idx", "]", ".", "dot", "(", "feature_conv", ".", "reshape", "(", "(", "nc", ",", "h", "*", "w", ")", ")", ")", "\n", "cam", "=", "cam", ".", "reshape", "(", "h", ",", "w", ")", "\n", "cam", "=", "cam", "-", "np", ".", "min", "(", "cam", ")", "\n", "cam_img", "=", "cam", "/", "np", ".", "max", "(", "cam", ")", "\n", "cam_img", "=", "np", ".", "uint8", "(", "255", "*", "cam_img", ")", "\n", "output_cam", ".", "append", "(", "cv2", ".", "resize", "(", "cam_img", ",", "size_upsample", ")", ")", "\n", "", "return", "output_cam", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.setup_cam": [[153, 157], ["model.module.base_model._modules.get().register_forward_hook", "model.module.base_model._modules.get"], "function", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get"], ["", "def", "setup_cam", "(", "model", ")", ":", "\n", "    ", "features_names", "=", "[", "'layer4'", "]", "# this is the last conv layer of the resnet", "\n", "for", "name", "in", "features_names", ":", "\n", "        ", "model", ".", "module", ".", "base_model", ".", "_modules", ".", "get", "(", "name", ")", ".", "register_forward_hook", "(", "hook_feature", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN.__init__": [[11, 78], ["torch.nn.Module.__init__", "print", "models.TSN._prepare_base_model", "models.TSN._prepare_tsn", "ops.basic_ops.ConsensusModule", "ops.basic_ops.ConsensusModule", "ValueError", "models.TSN._prepare_context_model", "print", "models.TSN._construct_flow_model", "print", "ops.basic_ops.ConsensusModule", "torch.nn.Softmax", "torch.nn.Softmax", "models.TSN.partialBN", "print", "models.TSN._construct_flow_model", "print"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN._prepare_base_model", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN._prepare_tsn", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN._prepare_context_model", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN._construct_flow_model", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN.partialBN", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN._construct_flow_model"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_segments", ",", "modality", ",", "\n", "base_model", "=", "'resnet18'", ",", "new_length", "=", "None", ",", "\n", "consensus_type", "=", "'avg'", ",", "before_softmax", "=", "True", ",", "\n", "dropout", "=", "0.8", ",", "modalities_fusion", "=", "'cat'", ",", "\n", "crop_num", "=", "1", ",", "partial_bn", "=", "True", ",", "context", "=", "False", ",", "embed", "=", "False", ")", ":", "\n", "        ", "super", "(", "TSN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "modality", "=", "modality", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "reshape", "=", "True", "\n", "self", ".", "before_softmax", "=", "before_softmax", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "crop_num", "=", "crop_num", "\n", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "embed", "=", "embed", "\n", "\n", "self", ".", "name_base", "=", "base_model", "\n", "if", "not", "before_softmax", "and", "consensus_type", "!=", "'avg'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only avg consensus can be used after Softmax\"", ")", "\n", "\n", "", "if", "new_length", "is", "None", ":", "\n", "            ", "self", ".", "new_length", "=", "1", "if", "modality", "==", "\"RGB\"", "else", "5", "\n", "", "else", ":", "\n", "            ", "self", ".", "new_length", "=", "new_length", "\n", "\n", "", "print", "(", "(", "\"\"\"\nInitializing TSN with base model: {}.\nTSN Configurations:\n    input_modality:     {}\n    num_segments:       {}\n    new_length:         {}\n    consensus_module:   {}\n    dropout_ratio:      {}\n        \"\"\"", ".", "format", "(", "base_model", ",", "self", ".", "modality", ",", "self", ".", "num_segments", ",", "self", ".", "new_length", ",", "consensus_type", ",", "self", ".", "dropout", ")", ")", ")", "\n", "self", ".", "embed", "=", "embed", "\n", "\n", "self", ".", "_prepare_base_model", "(", "base_model", ")", "\n", "\n", "self", ".", "context", "=", "context", "\n", "\n", "if", "context", ":", "\n", "            ", "self", ".", "_prepare_context_model", "(", ")", "\n", "\n", "", "feature_dim", "=", "self", ".", "_prepare_tsn", "(", "num_class", ")", "\n", "\n", "if", "self", ".", "modality", "==", "'Flow'", ":", "\n", "            ", "print", "(", "\"Converting the ImageNet model to a flow init model\"", ")", "\n", "self", ".", "base_model", "=", "self", ".", "_construct_flow_model", "(", "self", ".", "base_model", ")", "\n", "print", "(", "\"Done. Flow model ready...\"", ")", "\n", "\n", "if", "self", ".", "context", ":", "\n", "                ", "print", "(", "\"Converting the context model to a flow init model\"", ")", "\n", "self", ".", "context_model", "=", "self", ".", "_construct_flow_model", "(", "self", ".", "context_model", ")", "\n", "print", "(", "\"Done. Flow model ready...\"", ")", "\n", "\n", "\n", "", "", "self", ".", "consensus", "=", "ConsensusModule", "(", "consensus_type", ")", "\n", "self", ".", "consensus_cont", "=", "ConsensusModule", "(", "consensus_type", ")", "\n", "\n", "if", "self", ".", "embed", ":", "\n", "            ", "self", ".", "consensus_embed", "=", "ConsensusModule", "(", "consensus_type", ")", "\n", "\n", "", "if", "not", "self", ".", "before_softmax", ":", "\n", "            ", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "\n", "", "self", ".", "_enable_pbn", "=", "partial_bn", "\n", "if", "partial_bn", ":", "\n", "            ", "self", ".", "partialBN", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN._prepare_tsn": [[79, 112], ["isinstance", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal", "torch.nn.init.normal", "torch.nn.init.constant", "torch.nn.init.constant", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal", "torch.nn.init.normal", "torch.nn.init.constant", "torch.nn.init.constant", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal", "torch.nn.init.normal", "torch.nn.init.constant", "torch.nn.init.constant", "getattr", "setattr", "setattr", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["None"], ["", "", "def", "_prepare_tsn", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "std", "=", "0.001", "\n", "\n", "if", "isinstance", "(", "self", ".", "base_model", ",", "torch", ".", "nn", ".", "modules", ".", "container", ".", "Sequential", ")", ":", "\n", "            ", "feature_dim", "=", "2048", "\n", "", "else", ":", "\n", "            ", "feature_dim", "=", "getattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ")", ".", "in_features", "\n", "if", "self", ".", "dropout", "==", "0", ":", "\n", "                ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Linear", "(", "feature_dim", ",", "num_class", ")", ")", "\n", "self", ".", "new_fc", "=", "None", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ".", "base_model", ",", "self", ".", "base_model", ".", "last_layer_name", ",", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout", ")", ")", "\n", "\n", "", "", "if", "self", ".", "context", ":", "\n", "            ", "num_feats", "=", "4096", "\n", "", "else", ":", "\n", "            ", "num_feats", "=", "2048", "\n", "\n", "", "if", "self", ".", "embed", ":", "\n", "            ", "self", ".", "embed_fc", "=", "nn", ".", "Linear", "(", "num_feats", ",", "300", ")", "\n", "normal", "(", "self", ".", "embed_fc", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant", "(", "self", ".", "embed_fc", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "new_fc", "=", "nn", ".", "Linear", "(", "num_feats", ",", "num_class", ")", "\n", "normal", "(", "self", ".", "new_fc", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant", "(", "self", ".", "new_fc", ".", "bias", ",", "0", ")", "\n", "\n", "self", ".", "new_fc_1", "=", "nn", ".", "Linear", "(", "num_feats", ",", "3", ")", "\n", "normal", "(", "self", ".", "new_fc_1", ".", "weight", ",", "0", ",", "std", ")", "\n", "constant", "(", "self", ".", "new_fc_1", ".", "bias", ",", "0", ")", "\n", "\n", "\n", "return", "num_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN._prepare_context_model": [[114, 118], ["torch.nn.Sequential", "torch.nn.Sequential", "getattr", "list", "models.TSN.context_model.children"], "methods", ["None"], ["", "def", "_prepare_context_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "context_model", "=", "getattr", "(", "torchvision", ".", "models", ",", "\"resnet50\"", ")", "(", "True", ")", "\n", "modules", "=", "list", "(", "self", ".", "context_model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", "# delete the last fc layer.", "\n", "self", ".", "context_model", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN._prepare_base_model": [[119, 135], ["ValueError", "getattr", "numpy.mean"], "methods", ["None"], ["", "def", "_prepare_base_model", "(", "self", ",", "base_model", ")", ":", "\n", "        ", "import", "torchvision", ",", "torchvision", ".", "models", "\n", "\n", "if", "'resnet'", "in", "base_model", "or", "'vgg'", "in", "base_model", "or", "'resnext'", "in", "base_model", "or", "'densenet'", "in", "base_model", ":", "\n", "            ", "self", ".", "base_model", "=", "getattr", "(", "torchvision", ".", "models", ",", "base_model", ")", "(", "True", ")", "\n", "self", ".", "base_model", ".", "last_layer_name", "=", "'fc'", "\n", "self", ".", "input_size", "=", "224", "\n", "self", ".", "input_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "self", ".", "input_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "if", "self", ".", "modality", "==", "'Flow'", ":", "\n", "                ", "self", ".", "input_mean", "=", "[", "0.5", "]", "\n", "self", ".", "input_std", "=", "[", "np", ".", "mean", "(", "self", ".", "input_std", ")", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown base model: {}'", ".", "format", "(", "base_model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN.train": [[136, 166], ["super().train", "print", "models.TSN.base_model.modules", "isinstance", "print", "models.TSN.context_model.modules", "isinstance", "m.eval", "m.eval"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer.train"], ["", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Override the default train() to freeze the BN parameters\n        :return:\n        \"\"\"", "\n", "super", "(", "TSN", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "count", "=", "0", "\n", "if", "self", ".", "_enable_pbn", ":", "\n", "            ", "print", "(", "\"Freezing BatchNorm2D except the first one.\"", ")", "\n", "for", "m", "in", "self", ".", "base_model", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "count", "+=", "1", "\n", "if", "count", ">=", "(", "2", "if", "self", ".", "_enable_pbn", "else", "1", ")", ":", "\n", "                        ", "m", ".", "eval", "(", ")", "\n", "\n", "# shutdown update in frozen mode", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "", "", "", "count", "=", "0", "\n", "if", "self", ".", "context", ":", "\n", "                ", "print", "(", "\"Freezing BatchNorm2D except the first one.\"", ")", "\n", "for", "m", "in", "self", ".", "context_model", ".", "modules", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                        ", "count", "+=", "1", "\n", "if", "count", ">=", "(", "2", "if", "self", ".", "_enable_pbn", "else", "1", ")", ":", "\n", "                            ", "m", ".", "eval", "(", ")", "\n", "\n", "# shutdown update in frozen mode", "\n", "m", ".", "weight", ".", "requires_grad", "=", "False", "\n", "m", ".", "bias", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN.partialBN": [[169, 171], ["None"], "methods", ["None"], ["", "", "", "", "", "", "def", "partialBN", "(", "self", ",", "enable", ")", ":", "\n", "        ", "self", ".", "_enable_pbn", "=", "enable", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN.get_optim_policies": [[172, 176], ["models.TSN.parameters"], "methods", ["None"], ["", "def", "get_optim_policies", "(", "self", ")", ":", "\n", "        ", "params", "=", "[", "{", "'params'", ":", "self", ".", "parameters", "(", ")", "}", "]", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN.forward": [[179, 221], ["models.TSN.base_model().squeeze().squeeze", "models.TSN.new_fc", "models.TSN.new_fc_1", "base_out_cat.view.view.view", "base_out_cont.view.view.view", "models.TSN.consensus", "models.TSN.squeeze", "models.TSN.consensus_cont", "models.TSN.squeeze", "input.view", "list", "list", "input.view", "models.TSN.context_model().squeeze().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.TSN.embed_fc", "models.TSN.view", "models.TSN.consensus_embed().squeeze", "range", "range", "models.TSN.base_model().squeeze", "input.view.size", "input.view.size", "models.TSN.context_model().squeeze", "models.TSN.consensus_embed", "base_out_cat.view.view.size", "base_out_cont.view.view.size", "input.size", "input.size", "models.TSN.base_model", "models.TSN.size", "models.TSN.context_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "embeddings", ")", ":", "\n", "        ", "sample_len", "=", "(", "3", "if", "self", ".", "modality", "==", "\"RGB\"", "else", "2", ")", "*", "self", ".", "new_length", "\n", "\n", "if", "self", ".", "context", ":", "\n", "            ", "inp", "=", "input", ".", "view", "(", "(", "-", "1", ",", "sample_len", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "\n", "body_indices", "=", "list", "(", "range", "(", "0", ",", "inp", ".", "size", "(", "0", ")", ",", "2", ")", ")", "\n", "context_indices", "=", "list", "(", "range", "(", "1", ",", "inp", ".", "size", "(", "0", ")", ",", "2", ")", ")", "\n", "\n", "body", "=", "inp", "[", "body_indices", "]", "\n", "context", "=", "inp", "[", "context_indices", "]", "\n", "", "else", ":", "\n", "            ", "body", "=", "input", ".", "view", "(", "(", "-", "1", ",", "sample_len", ")", "+", "input", ".", "size", "(", ")", "[", "-", "2", ":", "]", ")", "\n", "\n", "", "base_out", "=", "self", ".", "base_model", "(", "body", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "self", ".", "context", ":", "\n", "            ", "context_out", "=", "self", ".", "context_model", "(", "context", ")", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "base_out", "=", "torch", ".", "cat", "(", "(", "base_out", ",", "context_out", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "outputs", "=", "{", "}", "\n", "\n", "if", "self", ".", "embed", ":", "\n", "            ", "embed_segm", "=", "self", ".", "embed_fc", "(", "base_out", ")", "\n", "embed", "=", "embed_segm", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ")", "+", "embed_segm", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "embed", "=", "self", ".", "consensus_embed", "(", "embed", ")", ".", "squeeze", "(", "1", ")", "\n", "outputs", "[", "'embed'", "]", "=", "embed", "\n", "\n", "\n", "", "base_out_cat", "=", "self", ".", "new_fc", "(", "base_out", ")", "\n", "base_out_cont", "=", "self", ".", "new_fc_1", "(", "base_out", ")", "\n", "\n", "base_out_cat", "=", "base_out_cat", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ")", "+", "base_out_cat", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "base_out_cont", "=", "base_out_cont", ".", "view", "(", "(", "-", "1", ",", "self", ".", "num_segments", ")", "+", "base_out_cont", ".", "size", "(", ")", "[", "1", ":", "]", ")", "\n", "\n", "output", "=", "self", ".", "consensus", "(", "base_out_cat", ")", "\n", "outputs", "[", "'categorical'", "]", "=", "output", ".", "squeeze", "(", "1", ")", "\n", "\n", "output_cont", "=", "self", ".", "consensus_cont", "(", "base_out_cont", ")", "\n", "outputs", "[", "'continuous'", "]", "=", "output_cont", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.models.TSN._construct_flow_model": [[223, 249], ["list", "params[].size", "params[].data.mean().expand().contiguous", "torch.nn.Conv2d", "torch.nn.Conv2d", "setattr", "base_model.modules", "list", "x.clone", "len", "filter", "conv_layer.parameters", "params[].data.mean().expand", "list", "list", "container.state_dict().keys", "isinstance", "range", "params[].data.mean", "len", "len", "container.state_dict"], "methods", ["None"], ["", "def", "_construct_flow_model", "(", "self", ",", "base_model", ")", ":", "\n", "# modify the convolution layers", "\n", "# Torch models are usually defined in a hierarchical way.", "\n", "# nn.modules.children() return all sub modules in a DFS manner", "\n", "        ", "modules", "=", "list", "(", "base_model", ".", "modules", "(", ")", ")", "\n", "first_conv_idx", "=", "list", "(", "filter", "(", "lambda", "x", ":", "isinstance", "(", "modules", "[", "x", "]", ",", "nn", ".", "Conv2d", ")", ",", "list", "(", "range", "(", "len", "(", "modules", ")", ")", ")", ")", ")", "[", "0", "]", "\n", "conv_layer", "=", "modules", "[", "first_conv_idx", "]", "\n", "container", "=", "modules", "[", "first_conv_idx", "-", "1", "]", "\n", "\n", "# modify parameters, assume the first blob contains the convolution kernels", "\n", "params", "=", "[", "x", ".", "clone", "(", ")", "for", "x", "in", "conv_layer", ".", "parameters", "(", ")", "]", "\n", "kernel_size", "=", "params", "[", "0", "]", ".", "size", "(", ")", "\n", "new_kernel_size", "=", "kernel_size", "[", ":", "1", "]", "+", "(", "2", "*", "self", ".", "new_length", ",", ")", "+", "kernel_size", "[", "2", ":", "]", "\n", "new_kernels", "=", "params", "[", "0", "]", ".", "data", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "new_kernel_size", ")", ".", "contiguous", "(", ")", "\n", "\n", "new_conv", "=", "nn", ".", "Conv2d", "(", "2", "*", "self", ".", "new_length", ",", "conv_layer", ".", "out_channels", ",", "\n", "conv_layer", ".", "kernel_size", ",", "conv_layer", ".", "stride", ",", "conv_layer", ".", "padding", ",", "\n", "bias", "=", "True", "if", "len", "(", "params", ")", "==", "2", "else", "False", ")", "\n", "new_conv", ".", "weight", ".", "data", "=", "new_kernels", "\n", "if", "len", "(", "params", ")", "==", "2", ":", "\n", "            ", "new_conv", ".", "bias", ".", "data", "=", "params", "[", "1", "]", ".", "data", "# add bias if neccessary", "\n", "", "layer_name", "=", "list", "(", "container", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "[", "0", "]", "[", ":", "-", "7", "]", "# remove .weight suffix to get the layer name", "\n", "\n", "# replace the first convlution layer", "\n", "setattr", "(", "container", ",", "layer_name", ",", "new_conv", ")", "\n", "return", "base_model", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.nll_loss": [[6, 8], ["torch.nll_loss"], "function", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.nll_loss"], ["def", "nll_loss", "(", "output", ",", "target", ")", ":", "\n", "    ", "return", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.bce_loss": [[10, 19], ["target.clone().detach", "torch.binary_cross_entropy_with_logits", "target.clone"], "function", ["None"], ["", "def", "bce_loss", "(", "output", ",", "target", ")", ":", "\n", "\n", "    ", "t", "=", "target", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "t", "[", "t", ">=", "0.5", "]", "=", "1", "# threshold to get binary labels", "\n", "t", "[", "t", "<", "0.5", "]", "=", "0", "\n", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "output", ",", "t", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.combined_loss": [[20, 26], ["torch.mse_loss", "loss.bce_loss"], "function", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.mse_loss", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.bce_loss"], ["", "def", "combined_loss", "(", "output", ",", "target", ")", ":", "\n", "    ", "l", "=", "F", ".", "mse_loss", "(", "output", ",", "target", ")", "\n", "\n", "l", "+=", "bce_loss", "(", "output", ",", "target", ")", "\n", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.mse_loss": [[27, 29], ["torch.mse_loss"], "function", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.mse_loss"], ["", "def", "mse_loss", "(", "output", ",", "target", ")", ":", "\n", "\t", "return", "F", ".", "mse_loss", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.mse_center_loss": [[31, 52], ["labels.clone().detach", "range", "torch.stack", "torch.stack", "torch.stack", "torch.mse_loss", "output.size", "torch.stack.append", "labels.clone", "p.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.mean", "torch.mean", "torch.mean", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.mse_loss"], ["", "def", "mse_center_loss", "(", "output", ",", "target", ",", "labels", ")", ":", "\n", "    ", "t", "=", "labels", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "t", "[", "t", ">=", "0.5", "]", "=", "1", "# threshold to get binary labels", "\n", "t", "[", "t", "<", "0.5", "]", "=", "0", "\n", "\n", "target", "=", "target", "[", "0", ",", ":", "26", "]", "\n", "\n", "positive_centers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "output", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "p", "=", "target", "[", "t", "[", "i", ",", ":", "]", "==", "1", "]", "\n", "if", "p", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "            ", "positive_center", "=", "torch", ".", "zeros", "(", "300", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "positive_center", "=", "torch", ".", "mean", "(", "p", ",", "dim", "=", "0", ")", "\n", "\n", "", "positive_centers", ".", "append", "(", "positive_center", ")", "\n", "\n", "", "positive_centers", "=", "torch", ".", "stack", "(", "positive_centers", ",", "dim", "=", "0", ")", "\n", "loss", "=", "F", ".", "mse_loss", "(", "output", ",", "positive_centers", ")", "\n", "\n", "return", "loss", "", "", ""]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.accuracy": [[6, 13], ["torch.no_grad", "torch.argmax", "torch.sum().item", "len", "len", "torch.sum"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "pred", "=", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "assert", "pred", ".", "shape", "[", "0", "]", "==", "len", "(", "target", ")", "\n", "correct", "=", "0", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", "==", "target", ")", ".", "item", "(", ")", "\n", "", "return", "correct", "/", "len", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.top_k_acc": [[15, 23], ["torch.no_grad", "range", "len", "torch.topk", "len", "torch.sum().item", "torch.sum"], "function", ["None"], ["", "def", "top_k_acc", "(", "output", ",", "target", ",", "k", "=", "3", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "pred", "=", "torch", ".", "topk", "(", "output", ",", "k", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "assert", "pred", ".", "shape", "[", "0", "]", "==", "len", "(", "target", ")", "\n", "correct", "=", "0", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "correct", "+=", "torch", ".", "sum", "(", "pred", "[", ":", ",", "i", "]", "==", "target", ")", ".", "item", "(", ")", "\n", "", "", "return", "correct", "/", "len", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.average_precision": [[25, 27], ["sklearn.metrics.average_precision_score"], "function", ["None"], ["", "def", "average_precision", "(", "output", ",", "target", ")", ":", "\n", "    ", "return", "sklearn", ".", "metrics", ".", "average_precision_score", "(", "target", ",", "output", ",", "average", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.multilabel_confusion_matrix": [[28, 32], ["sklearn.metrics.multilabel_confusion_matrix"], "function", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.multilabel_confusion_matrix"], ["", "def", "multilabel_confusion_matrix", "(", "output", ",", "target", ")", ":", "\n", "# with warnings.catch_warnings():", "\n", "# warnings.simplefilter(\"ignore\")", "\n", "    ", "return", "sklearn", ".", "metrics", ".", "multilabel_confusion_matrix", "(", "target", ",", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.roc_auc": [[34, 38], ["sklearn.metrics.roc_auc_score"], "function", ["None"], ["", "def", "roc_auc", "(", "output", ",", "target", ")", ":", "\n", "# print(np.sum(target.cpu().detach().numpy(),axis=1),np.sum(target.cpu().detach().numpy(),axis=0))", "\n", "# print(output.size())", "\n", "    ", "return", "sklearn", ".", "metrics", ".", "roc_auc_score", "(", "target", ",", "output", ",", "average", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.mean_squared_error": [[40, 42], ["sklearn.metrics.mean_squared_error"], "function", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.mean_squared_error"], ["", "def", "mean_squared_error", "(", "output", ",", "target", ")", ":", "\n", "    ", "return", "sklearn", ".", "metrics", ".", "mean_squared_error", "(", "target", ",", "output", ",", "multioutput", "=", "'raw_values'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.r2": [[43, 45], ["sklearn.metrics.r2_score"], "function", ["None"], ["", "def", "r2", "(", "output", ",", "target", ")", ":", "\n", "    ", "return", "sklearn", ".", "metrics", ".", "r2_score", "(", "target", ",", "output", ",", "multioutput", "=", "'raw_values'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.ERS": [[46, 48], ["None"], "function", ["None"], ["", "def", "ERS", "(", "mR2", ",", "mAP", ",", "mRA", ")", ":", "\n", "    ", "return", "1", "/", "2", "*", "(", "mR2", "+", "1", "/", "2", "*", "(", "mAP", "+", "mRA", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.ops.basic_ops.Identity.forward": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.ops.basic_ops.SegmentConsensus.__init__": [[13, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "self", ".", "consensus_type", "=", "consensus_type", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "shape", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.ops.basic_ops.SegmentConsensus.forward": [[18, 31], ["input_tensor.size", "input_tensor.mean", "print", "input_tensor.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "self", ".", "shape", "=", "input_tensor", ".", "size", "(", ")", "\n", "if", "self", ".", "consensus_type", "==", "'avg'", ":", "\n", "            ", "output", "=", "input_tensor", ".", "mean", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "", "elif", "self", ".", "consensus_type", "==", "'max'", ":", "\n", "            ", "output", "=", "input_tensor", ".", "max", "(", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "print", "(", "output", ")", "\n", "", "elif", "self", ".", "consensus_type", "==", "'identity'", ":", "\n", "            ", "output", "=", "input_tensor", "\n", "", "else", ":", "\n", "            ", "output", "=", "None", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.ops.basic_ops.SegmentConsensus.backward": [[32, 41], ["grad_output.expand", "float"], "methods", ["None"], ["", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "        ", "if", "self", ".", "consensus_type", "==", "'avg'", ":", "\n", "            ", "grad_in", "=", "grad_output", ".", "expand", "(", "self", ".", "shape", ")", "/", "float", "(", "self", ".", "shape", "[", "self", ".", "dim", "]", ")", "\n", "", "elif", "self", ".", "consensus_type", "==", "'identity'", ":", "\n", "            ", "grad_in", "=", "grad_output", "\n", "", "else", ":", "\n", "            ", "grad_in", "=", "None", "\n", "\n", "", "return", "grad_in", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.ops.basic_ops.ConsensusModule.__init__": [[45, 49], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "consensus_type", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConsensusModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "consensus_type", "=", "consensus_type", "if", "consensus_type", "!=", "'rnn'", "else", "'identity'", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.ops.basic_ops.ConsensusModule.forward": [[50, 52], ["basic_ops.SegmentConsensus"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "SegmentConsensus", "(", "self", ".", "consensus_type", ",", "self", ".", "dim", ")", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.ops.utils.get_grad_hook": [[5, 15], ["print", "print", "print", "print", "print", "grad_out[].size", "grad_in[].size", "grad_out[].data.abs().mean", "grad_in[].data.abs().mean", "grad_out[].data.abs", "grad_in[].data.abs"], "function", ["None"], ["def", "get_grad_hook", "(", "name", ")", ":", "\n", "    ", "def", "hook", "(", "m", ",", "grad_in", ",", "grad_out", ")", ":", "\n", "        ", "print", "(", "(", "name", ",", "grad_out", "[", "0", "]", ".", "data", ".", "abs", "(", ")", ".", "mean", "(", ")", ",", "grad_in", "[", "0", "]", ".", "data", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "print", "(", "(", "grad_out", "[", "0", "]", ".", "size", "(", ")", ")", ")", "\n", "print", "(", "(", "grad_in", "[", "0", "]", ".", "size", "(", ")", ")", ")", "\n", "\n", "print", "(", "(", "grad_out", "[", "0", "]", ")", ")", "\n", "print", "(", "(", "grad_in", "[", "0", "]", ")", ")", "\n", "\n", "", "return", "hook", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.ops.utils.softmax": [[17, 20], ["numpy.exp", "np.exp.sum", "scores.max"], "function", ["None"], ["", "def", "softmax", "(", "scores", ")", ":", "\n", "    ", "es", "=", "np", ".", "exp", "(", "scores", "-", "scores", ".", "max", "(", "axis", "=", "-", "1", ")", "[", "...", ",", "None", "]", ")", "\n", "return", "es", "/", "es", ".", "sum", "(", "axis", "=", "-", "1", ")", "[", "...", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.ops.utils.log_add": [[22, 24], ["numpy.log", "numpy.exp"], "function", ["None"], ["", "def", "log_add", "(", "log_a", ",", "log_b", ")", ":", "\n", "    ", "return", "log_a", "+", "np", ".", "log", "(", "1", "+", "np", ".", "exp", "(", "log_b", "-", "log_a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.ops.utils.class_accuracy": [[26, 36], ["sklearn.metrics.confusion_matrix", "sklearn.metrics.confusion_matrix.sum", "numpy.diag", "cls_acc.mean", "cf.sum.astype"], "function", ["None"], ["", "def", "class_accuracy", "(", "prediction", ",", "label", ")", ":", "\n", "    ", "cf", "=", "confusion_matrix", "(", "prediction", ",", "label", ")", "\n", "cls_cnt", "=", "cf", ".", "sum", "(", "axis", "=", "1", ")", "\n", "cls_hit", "=", "np", ".", "diag", "(", "cf", ")", "\n", "\n", "cls_acc", "=", "cls_hit", "/", "cls_cnt", ".", "astype", "(", "float", ")", "\n", "\n", "mean_cls_acc", "=", "cls_acc", ".", "mean", "(", ")", "\n", "\n", "return", "cls_acc", ",", "mean_cls_acc", "", "", ""]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.data_loader.data_loaders.MnistDataLoader.__init__": [[14, 22], ["torchvision.transforms.Compose", "torchvision.datasets.MNIST", "base.BaseDataLoader.__init__", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "batch_size", ",", "shuffle", "=", "True", ",", "validation_split", "=", "0.0", ",", "num_workers", "=", "1", ",", "training", "=", "True", ")", ":", "\n", "        ", "trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "dataset", "=", "datasets", ".", "MNIST", "(", "self", ".", "data_dir", ",", "train", "=", "training", ",", "download", "=", "True", ",", "transform", "=", "trsfm", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.data_loader.data_loaders.BoLDDataLoader.__init__": [[49, 54], ["dataset.BoLD", "base.BaseDataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "mode", ",", "batch_size", ",", "shuffle", "=", "True", ",", "validation_split", "=", "0.0", ",", "num_workers", "=", "1", ",", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", ".", "BoLD", "(", "mode", "=", "mode", ")", "\n", "if", "mode", "==", "\"val\"", ":", "\n", "            ", "shuffle", "=", "False", "\n", "", "super", "(", ")", ".", "__init__", "(", "self", ".", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ",", "collate_fn", "=", "pad_collate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.data_loader.data_loaders.BoLDDataLoaderImage.__init__": [[59, 64], ["image_body_dataset.BoLD", "base.BaseDataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "mode", ",", "batch_size", ",", "shuffle", "=", "True", ",", "validation_split", "=", "0.0", ",", "num_workers", "=", "1", ",", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "image_body_dataset", ".", "BoLD", "(", "mode", "=", "mode", ")", "\n", "if", "mode", "==", "\"val\"", ":", "\n", "            ", "shuffle", "=", "False", "\n", "", "super", "(", ")", ".", "__init__", "(", "self", ".", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.data_loader.data_loaders.BoLDDataLoaderVideo.__init__": [[70, 75], ["video_dataset.VideoDataset", "base.BaseDataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "mode", ",", "batch_size", ",", "shuffle", "=", "True", ",", "validation_split", "=", "0.0", ",", "num_workers", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "video_dataset", ".", "VideoDataset", "(", "mode", ",", "**", "kwargs", ")", "\n", "if", "mode", "==", "\"val\"", ":", "\n", "            ", "shuffle", "=", "False", "\n", "", "super", "(", ")", ".", "__init__", "(", "self", ".", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.data_loader.data_loaders.my_collate": [[25, 28], ["filter", "torch.utils.data.dataloader.default_collate"], "function", ["None"], ["", "", "def", "my_collate", "(", "batch", ")", ":", "\n", "    ", "batch", "=", "filter", "(", "lambda", "x", ":", "x", "is", "not", "None", ",", "batch", ")", "\n", "return", "torch", ".", "utils", ".", "data", ".", "dataloader", ".", "default_collate", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.data_loader.data_loaders.pad_collate": [[29, 44], ["zip", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "len", "torch.utils.data.dataloader.default_collate", "torch.utils.data.dataloader.default_collate", "torch.tensor"], "function", ["None"], ["", "def", "pad_collate", "(", "batch", ")", ":", "\n", "    ", "batch", "=", "[", "x", "for", "x", "in", "batch", "if", "x", "is", "not", "None", "]", "\n", "# xx, face, hands_left, hands_right paths, targets, targets_continuous = zip(*batch)", "\n", "# xx, laban_body_component, embedding, places_features, paths, targets, targets_continuous = zip(*batch)", "\n", "xx", ",", "laban_body_component", ",", "targets", ",", "targets_continuous", "=", "zip", "(", "*", "batch", ")", "\n", "\n", "x_lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "xx", "]", "\n", "xx_pad", "=", "pad_sequence", "(", "xx", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "ll_pad", "=", "pad_sequence", "(", "laban_body_component", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "\n", "# xx_pad_face = pad_sequence(face, batch_first=True, padding_value=0)", "\n", "# xx_pad_hands_left = pad_sequence(hands_left, batch_first=True, padding_value=0)", "\n", "# xx_pad_hands_right = pad_sequence(hands_right, batch_first=True, padding_value=0)", "\n", "\n", "return", "xx_pad", ",", "ll_pad", ",", "default_collate", "(", "targets", ")", ",", "default_collate", "(", "targets_continuous", ")", ",", "torch", ".", "tensor", "(", "x_lens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.logger.visualization.TensorboardWriter.__init__": [[6, 39], ["datetime.datetime.datetime.now", "str", "logger.warning", "importlib.import_module().SummaryWriter", "importlib.import_module"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "logger", ",", "enabled", ")", ":", "\n", "        ", "self", ".", "writer", "=", "None", "\n", "self", ".", "selected_module", "=", "\"\"", "\n", "self", ".", "log_dir", "=", "log_dir", "\n", "if", "enabled", ":", "\n", "            ", "log_dir", "=", "str", "(", "log_dir", ")", "\n", "\n", "# Retrieve vizualization writer.", "\n", "succeeded", "=", "False", "\n", "for", "module", "in", "[", "\"torch.utils.tensorboard\"", ",", "\"tensorboardX\"", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "writer", "=", "importlib", ".", "import_module", "(", "module", ")", ".", "SummaryWriter", "(", "log_dir", ")", "\n", "succeeded", "=", "True", "\n", "break", "\n", "", "except", "ImportError", ":", "\n", "                    ", "succeeded", "=", "False", "\n", "", "self", ".", "selected_module", "=", "module", "\n", "\n", "", "if", "not", "succeeded", ":", "\n", "                ", "message", "=", "\"Warning: visualization (Tensorboard) is configured to use, but currently not installed on \"", "\"this machine. Please install TensorboardX with 'pip install tensorboardx', upgrade PyTorch to \"", "\"version >= 1.1 to use 'torch.utils.tensorboard' or turn off the option in the 'config.json' file.\"", "\n", "logger", ".", "warning", "(", "message", ")", "\n", "\n", "", "", "self", ".", "step", "=", "0", "\n", "self", ".", "mode", "=", "''", "\n", "\n", "self", ".", "tb_writer_ftns", "=", "{", "\n", "'add_scalar'", ",", "'add_scalars'", ",", "'add_image'", ",", "'add_images'", ",", "'add_audio'", ",", "\n", "'add_text'", ",", "'add_histogram'", ",", "'add_pr_curve'", ",", "'add_embedding'", ",", "'add_figure'", "\n", "}", "\n", "self", ".", "tag_mode_exceptions", "=", "{", "'add_histogram'", ",", "'add_embedding'", "}", "\n", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.logger.visualization.TensorboardWriter.save_results": [[40, 44], ["np.save", "os.path.join"], "methods", ["None"], ["", "def", "save_results", "(", "self", ",", "output", ",", "name", ")", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "import", "os", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "log_dir", ",", "\"%s_%d\"", "%", "(", "name", ",", "self", ".", "step", ")", ")", ",", "output", ")", "\n", "# np.save(os.path.join(self.log_dir,\"output_continuous_%d\"%self.step), output_continuous)", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.logger.visualization.TensorboardWriter.set_step": [[46, 55], ["datetime.datetime.datetime.now", "visualization.TensorboardWriter.add_scalar", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "duration.total_seconds"], "methods", ["None"], ["", "def", "set_step", "(", "self", ",", "step", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "step", "=", "step", "\n", "if", "step", "==", "0", ":", "\n", "            ", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "", "else", ":", "\n", "            ", "duration", "=", "datetime", ".", "now", "(", ")", "-", "self", ".", "timer", "\n", "self", ".", "add_scalar", "(", "'steps_per_sec'", ",", "1", "/", "duration", ".", "total_seconds", "(", ")", ")", "\n", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.logger.visualization.TensorboardWriter.__getattr__": [[56, 80], ["getattr", "object.__getattr__", "getattr.", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.logger.visualization.TensorboardWriter.__getattr__"], ["", "", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        If visualization is configured to use:\n            return add_data() methods of tensorboard with additional information (step, tag) added.\n        Otherwise:\n            return a blank function handle that does nothing\n        \"\"\"", "\n", "if", "name", "in", "self", ".", "tb_writer_ftns", ":", "\n", "            ", "add_data", "=", "getattr", "(", "self", ".", "writer", ",", "name", ",", "None", ")", "\n", "\n", "def", "wrapper", "(", "tag", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "if", "add_data", "is", "not", "None", ":", "\n", "# add mode(train/valid) tag", "\n", "                    ", "if", "name", "not", "in", "self", ".", "tag_mode_exceptions", ":", "\n", "                        ", "tag", "=", "'{}/{}'", ".", "format", "(", "tag", ",", "self", ".", "mode", ")", "\n", "", "add_data", "(", "tag", ",", "data", ",", "self", ".", "step", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "wrapper", "\n", "", "else", ":", "\n", "# default action for returning methods defined in this class, set_step() for instance.", "\n", "            ", "try", ":", "\n", "                ", "attr", "=", "object", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "AttributeError", ":", "\n", "                ", "raise", "AttributeError", "(", "\"type object '{}' has no attribute '{}'\"", ".", "format", "(", "self", ".", "selected_module", ",", "name", ")", ")", "\n", "", "return", "attr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.logger.logger.setup_logging": [[7, 23], ["pathlib.Path", "pathlib.Path.is_file", "utils.read_json", "config[].items", "logging.config.dictConfig", "logging.config.dictConfig", "print", "logging.basicConfig", "logging.basicConfig", "str"], "function", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.read_json"], ["def", "setup_logging", "(", "save_dir", ",", "log_config", "=", "'logger/logger_config.json'", ",", "default_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Setup logging configuration\n    \"\"\"", "\n", "log_config", "=", "Path", "(", "log_config", ")", "\n", "if", "log_config", ".", "is_file", "(", ")", ":", "\n", "        ", "config", "=", "read_json", "(", "log_config", ")", "\n", "# modify logging paths based on run config", "\n", "for", "_", ",", "handler", "in", "config", "[", "'handlers'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'filename'", "in", "handler", ":", "\n", "                ", "handler", "[", "'filename'", "]", "=", "str", "(", "save_dir", "/", "handler", "[", "'filename'", "]", ")", "\n", "\n", "", "", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Warning: logging configuration file is not found in {}.\"", ".", "format", "(", "log_config", ")", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "default_level", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.trainer.trainer.Trainer.__init__": [[19, 54], ["base.BaseTrainer.__init__", "int", "utils.MetricTracker", "utils.MetricTracker", "len", "utils.inf_loop", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.inf_loop"], ["def", "__init__", "(", "self", ",", "model", ",", "criterion", ",", "criterion_continuous", ",", "metric_ftns", ",", "metric_ftns_continuous", ",", "optimizer", ",", "config", ",", "data_loader", ",", "categorical", "=", "True", ",", "continuous", "=", "True", ",", "\n", "valid_data_loader", "=", "None", ",", "lr_scheduler", "=", "None", ",", "len_epoch", "=", "None", ",", "embed", "=", "False", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "model", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "config", ")", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "categorical", "=", "categorical", "\n", "self", ".", "continuous", "=", "continuous", "\n", "\n", "if", "len_epoch", "is", "None", ":", "\n", "# epoch-based training", "\n", "\t\t\t", "self", ".", "len_epoch", "=", "len", "(", "self", ".", "data_loader", ")", "\n", "", "else", ":", "\n", "# iteration-based training", "\n", "\t\t\t", "self", ".", "data_loader", "=", "inf_loop", "(", "data_loader", ")", "\n", "self", ".", "len_epoch", "=", "len_epoch", "\n", "\n", "", "self", ".", "valid_data_loader", "=", "valid_data_loader", "\n", "self", ".", "do_validation", "=", "self", ".", "valid_data_loader", "is", "not", "None", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "self", ".", "log_step", "=", "int", "(", "np", ".", "sqrt", "(", "data_loader", ".", "batch_size", ")", ")", "\n", "\n", "self", ".", "metric_ftns_continuous", "=", "metric_ftns_continuous", "\n", "\n", "self", ".", "criterion_continuous", "=", "criterion_continuous", "\n", "self", ".", "criterion_categorical", "=", "criterion", "\n", "\n", "self", ".", "categorical_class_metrics", "=", "[", "_class", "+", "\"_\"", "+", "m", ".", "__name__", "for", "_class", "in", "valid_data_loader", ".", "dataset", ".", "categorical_emotions", "for", "m", "in", "self", ".", "metric_ftns", "]", "\n", "\n", "self", ".", "continuous_class_metrics", "=", "[", "_class", "+", "\"_\"", "+", "m", ".", "__name__", "for", "_class", "in", "valid_data_loader", ".", "dataset", ".", "continuous_emotions", "for", "m", "in", "self", ".", "metric_ftns_continuous", "]", "\n", "\n", "self", ".", "train_metrics", "=", "MetricTracker", "(", "'mre'", ",", "'loss'", ",", "'loss_categorical'", ",", "'loss_continuous'", ",", "'loss_embed'", ",", "\n", "'map'", ",", "'mse'", ",", "'r2'", ",", "'roc_auc'", ",", "writer", "=", "self", ".", "writer", ")", "\n", "self", ".", "valid_metrics", "=", "MetricTracker", "(", "'mre'", ",", "'loss'", ",", "'loss_categorical'", ",", "'loss_continuous'", ",", "'loss_embed'", ",", "\n", "'map'", ",", "'mse'", ",", "'r2'", ",", "'roc_auc'", ",", "writer", "=", "self", ".", "writer", ")", "\n", "\n", "self", ".", "embed", "=", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.trainer.trainer.Trainer._train_epoch": [[55, 190], ["print", "enumerate", "metrics.update", "metrics.update", "numpy.vstack", "numpy.vstack", "model.metric.average_precision", "model.metric.average_precision", "model.metric.average_precision", "model.metric.average_precision", "model.metric.roc_auc", "model.metric.roc_auc", "model.metric.roc_auc", "model.metric.roc_auc", "metrics.update", "metrics.update", "trainer.Trainer.writer.add_figure", "trainer.Trainer.writer.add_figure", "metrics.update", "numpy.vstack", "numpy.vstack", "model.metric.mean_squared_error", "model.metric.mean_squared_error", "model.metric.mean_squared_error", "model.metric.mean_squared_error", "model.metric.r2", "model.metric.r2", "model.metric.r2", "model.metric.r2", "metrics.update", "metrics.update", "trainer.Trainer.writer.add_figure", "trainer.Trainer.writer.add_figure", "metrics.update", "metrics.result", "print", "trainer.Trainer.model.train", "trainer.Trainer.train_metrics.reset", "torch.set_grad_enabled", "embeddings.to.to.to", "trainer.Trainer.model", "trainer.Trainer.criterion_categorical", "trainer.Trainer.criterion_continuous", "out[].cpu().detach().numpy", "target.cpu().detach().numpy.cpu().detach().numpy.cpu().detach().numpy", "outputs.append", "targets.append", "torch.sigmoid().cpu().detach().numpy", "target_continuous.cpu().detach().numpy.cpu().detach().numpy.cpu().detach().numpy", "outputs_continuous.append", "targets_continuous.append", "trainer.Trainer.writer.set_step", "trainer.Trainer.writer.set_step", "loss.item", "trainer.Trainer.item", "metrics.update", "numpy.mean", "numpy.mean", "utils.make_barplot", "utils.make_barplot", "trainer.Trainer.item", "numpy.mean", "numpy.mean", "utils.make_barplot", "utils.make_barplot", "model.metric.ERS", "model.metric.ERS", "model.metric.ERS", "model.metric.ERS", "trainer.Trainer.model.eval", "trainer.Trainer.valid_metrics.reset", "torch.set_grad_enabled", "data.to", "target.cpu().detach().numpy.cpu().detach().numpy.to", "target_continuous.cpu().detach().numpy.cpu().detach().numpy.to", "trainer.Trainer.optimizer.zero_grad", "torch.sigmoid", "model.loss.mse_center_loss", "model.loss.mse_center_loss", "model.loss.mse_center_loss", "model.loss.mse_center_loss", "loss.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.logger.debug", "model.loss.mse_center_loss.item", "model.loss.mse_center_loss.item", "numpy.mean", "numpy.mean", "numpy.mean", "trainer.Trainer.lr_scheduler.step", "trainer.Trainer._train_epoch", "metrics.result.update", "metrics.result", "out[].cpu().detach", "target.cpu().detach().numpy.cpu().detach().numpy.cpu().detach", "torch.sigmoid().cpu().detach", "target_continuous.cpu().detach().numpy.cpu().detach().numpy.cpu().detach", "trainer.Trainer.writer.save_results", "trainer.Trainer.writer.save_results", "trainer.Trainer._progress", "loss.item", "trainer.Trainer.item", "trainer.Trainer.item", "out[].cpu", "target.cpu().detach().numpy.cpu().detach().numpy.cpu", "torch.sigmoid().cpu", "target_continuous.cpu().detach().numpy.cpu().detach().numpy.cpu", "trainer.Trainer.items", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.average_precision", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.average_precision", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.average_precision", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.average_precision", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.roc_auc", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.roc_auc", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.roc_auc", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.roc_auc", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.mean_squared_error", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.mean_squared_error", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.mean_squared_error", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.mean_squared_error", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.r2", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.r2", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.r2", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.r2", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.result", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.reset", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.logger.visualization.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.logger.visualization.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.make_barplot", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.make_barplot", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.make_barplot", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.make_barplot", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.ERS", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.ERS", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.ERS", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.metric.ERS", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.reset", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.mse_center_loss", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.mse_center_loss", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.mse_center_loss", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.model.loss.mse_center_loss", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.ops.basic_ops.SegmentConsensus.backward", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer._train_epoch", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.result", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.logger.visualization.TensorboardWriter.save_results", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.logger.visualization.TensorboardWriter.save_results", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.trainer.trainer.Trainer._progress"], ["", "def", "_train_epoch", "(", "self", ",", "epoch", ",", "phase", "=", "\"train\"", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tTraining logic for an epoch\n\n\t\t:param epoch: Integer, current training epoch.\n\t\t:return: A log that contains average loss and metric in this epoch.\n\t\t\"\"\"", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "import", "model", ".", "loss", "\n", "print", "(", "\"Finding LR\"", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "\t\t\t", "print", "(", "param_group", "[", "'lr'", "]", ")", "\n", "\n", "", "if", "phase", "==", "\"train\"", ":", "\n", "\t\t\t", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "train_metrics", ".", "reset", "(", ")", "\n", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "metrics", "=", "self", ".", "train_metrics", "\n", "", "elif", "phase", "==", "\"val\"", ":", "\n", "\t\t\t", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "valid_metrics", ".", "reset", "(", ")", "\n", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "metrics", "=", "self", ".", "valid_metrics", "\n", "\n", "", "outputs", "=", "[", "]", "\n", "outputs_continuous", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "targets_continuous", "=", "[", "]", "\n", "\n", "data_loader", "=", "self", ".", "data_loader", "if", "phase", "==", "\"train\"", "else", "self", ".", "valid_data_loader", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "embeddings", ",", "target", ",", "target_continuous", ",", "lengths", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "\t\t\t", "data", ",", "target", ",", "target_continuous", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", ",", "target_continuous", ".", "to", "(", "self", ".", "device", ")", "\n", "embeddings", "=", "embeddings", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "phase", "==", "\"train\"", ":", "\n", "\t\t\t\t", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "out", "=", "self", ".", "model", "(", "data", ",", "embeddings", ")", "\n", "\n", "loss", "=", "0", "\n", "\n", "loss_categorical", "=", "self", ".", "criterion_categorical", "(", "out", "[", "'categorical'", "]", ",", "target", ")", "\n", "loss", "+=", "loss_categorical", "\n", "\n", "loss_continuous", "=", "self", ".", "criterion_continuous", "(", "torch", ".", "sigmoid", "(", "out", "[", "'continuous'", "]", ")", ",", "target_continuous", ")", "\n", "loss", "+=", "loss_continuous", "\n", "\n", "if", "self", ".", "embed", ":", "\n", "\t\t\t\t", "loss_embed", "=", "model", ".", "loss", ".", "mse_center_loss", "(", "out", "[", "'embed'", "]", ",", "embeddings", ",", "target", ")", "\n", "loss", "+=", "loss_embed", "\n", "\n", "", "if", "phase", "==", "\"train\"", ":", "\n", "\t\t\t\t", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "output", "=", "out", "[", "'categorical'", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "target", "=", "target", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "\n", "output_continuous", "=", "torch", ".", "sigmoid", "(", "out", "[", "'continuous'", "]", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "target_continuous", "=", "target_continuous", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "outputs_continuous", ".", "append", "(", "output_continuous", ")", "\n", "targets_continuous", ".", "append", "(", "target_continuous", ")", "\n", "\n", "if", "batch_idx", "%", "self", ".", "log_step", "==", "0", ":", "\n", "\t\t\t\t", "self", ".", "logger", ".", "debug", "(", "'{} Epoch: {} {} Loss: {:.6f} Loss categorical: {:.6f} Loss continuous: {:.6f}'", ".", "format", "(", "\n", "phase", ",", "\n", "epoch", ",", "\n", "self", ".", "_progress", "(", "batch_idx", ")", ",", "\n", "loss", ".", "item", "(", ")", ",", "loss_categorical", ".", "item", "(", ")", ",", "loss_continuous", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "if", "batch_idx", "==", "self", ".", "len_epoch", ":", "\n", "\t\t\t\t", "break", "\n", "\n", "", "", "if", "phase", "==", "\"train\"", ":", "\n", "\t\t\t", "self", ".", "writer", ".", "set_step", "(", "epoch", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "writer", ".", "set_step", "(", "epoch", ",", "\"valid\"", ")", "\n", "\n", "", "metrics", ".", "update", "(", "'loss'", ",", "loss", ".", "item", "(", ")", ")", "\n", "\n", "metrics", ".", "update", "(", "'loss_categorical'", ",", "loss_categorical", ".", "item", "(", ")", ")", "\n", "if", "self", ".", "embed", ":", "\n", "\t\t\t", "metrics", ".", "update", "(", "'loss_embed'", ",", "loss_embed", ".", "item", "(", ")", ")", "\n", "\n", "", "output", "=", "np", ".", "vstack", "(", "outputs", ")", "\n", "target", "=", "np", ".", "vstack", "(", "targets", ")", "\n", "target", "[", "target", ">=", "0.5", "]", "=", "1", "# threshold to get binary labels", "\n", "target", "[", "target", "<", "0.5", "]", "=", "0", "\n", "\n", "ap", "=", "model", ".", "metric", ".", "average_precision", "(", "output", ",", "target", ")", "\n", "roc_auc", "=", "model", ".", "metric", ".", "roc_auc", "(", "output", ",", "target", ")", "\n", "metrics", ".", "update", "(", "\"map\"", ",", "np", ".", "mean", "(", "ap", ")", ")", "\n", "metrics", ".", "update", "(", "\"roc_auc\"", ",", "np", ".", "mean", "(", "roc_auc", ")", ")", "\n", "\n", "self", ".", "writer", ".", "add_figure", "(", "'%s ap per class'", "%", "phase", ",", "make_barplot", "(", "ap", ",", "self", ".", "valid_data_loader", ".", "dataset", ".", "categorical_emotions", ",", "'average_precision'", ")", ")", "\n", "self", ".", "writer", ".", "add_figure", "(", "'%s roc auc per class'", "%", "phase", ",", "make_barplot", "(", "roc_auc", ",", "self", ".", "valid_data_loader", ".", "dataset", ".", "categorical_emotions", ",", "'roc auc'", ")", ")", "\n", "\n", "metrics", ".", "update", "(", "'loss_continuous'", ",", "loss_continuous", ".", "item", "(", ")", ")", "\n", "output_continuous", "=", "np", ".", "vstack", "(", "outputs_continuous", ")", "\n", "target_continuous", "=", "np", ".", "vstack", "(", "targets_continuous", ")", "\n", "\n", "mse", "=", "model", ".", "metric", ".", "mean_squared_error", "(", "output_continuous", ",", "target_continuous", ")", "\n", "r2", "=", "model", ".", "metric", ".", "r2", "(", "output_continuous", ",", "target_continuous", ")", "\n", "\n", "metrics", ".", "update", "(", "\"r2\"", ",", "np", ".", "mean", "(", "r2", ")", ")", "\n", "metrics", ".", "update", "(", "\"mse\"", ",", "np", ".", "mean", "(", "mse", ")", ")", "\n", "\n", "self", ".", "writer", ".", "add_figure", "(", "'%s r2 per class'", "%", "phase", ",", "make_barplot", "(", "r2", ",", "self", ".", "valid_data_loader", ".", "dataset", ".", "continuous_emotions", ",", "'r2'", ")", ")", "\n", "self", ".", "writer", ".", "add_figure", "(", "'%s mse auc per class'", "%", "phase", ",", "make_barplot", "(", "mse", ",", "self", ".", "valid_data_loader", ".", "dataset", ".", "continuous_emotions", ",", "'mse'", ")", ")", "\n", "\n", "metrics", ".", "update", "(", "\"mre\"", ",", "model", ".", "metric", ".", "ERS", "(", "np", ".", "mean", "(", "r2", ")", ",", "np", ".", "mean", "(", "ap", ")", ",", "np", ".", "mean", "(", "roc_auc", ")", ")", ")", "\n", "\n", "log", "=", "metrics", ".", "result", "(", ")", "\n", "\n", "if", "phase", "==", "\"train\"", ":", "\n", "\t\t\t", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "\t\t\t\t", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "if", "self", ".", "do_validation", ":", "\n", "\t\t\t\t", "val_log", "=", "self", ".", "_train_epoch", "(", "epoch", ",", "phase", "=", "\"val\"", ")", "\n", "log", ".", "update", "(", "**", "{", "'val_'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "return", "log", "\n", "\n", "", "elif", "phase", "==", "\"val\"", ":", "\n", "\t\t\t", "if", "self", ".", "categorical", ":", "\n", "\t\t\t\t", "self", ".", "writer", ".", "save_results", "(", "output", ",", "\"output\"", ")", "\n", "", "if", "self", ".", "continuous", ":", "\n", "\t\t\t\t", "self", ".", "writer", ".", "save_results", "(", "output_continuous", ",", "\"output_continuous\"", ")", "\n", "\n", "", "return", "metrics", ".", "result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.trainer.trainer.Trainer._progress": [[192, 201], ["hasattr", "base.format"], "methods", ["None"], ["", "", "def", "_progress", "(", "self", ",", "batch_idx", ")", ":", "\n", "\t\t", "base", "=", "'[{}/{} ({:.0f}%)]'", "\n", "if", "hasattr", "(", "self", ".", "data_loader", ",", "'n_samples'", ")", ":", "\n", "\t\t\t", "current", "=", "batch_idx", "*", "self", ".", "data_loader", ".", "batch_size", "\n", "total", "=", "self", ".", "data_loader", ".", "n_samples", "\n", "", "else", ":", "\n", "\t\t\t", "current", "=", "batch_idx", "\n", "total", "=", "self", ".", "len_epoch", "\n", "", "return", "base", ".", "format", "(", "current", ",", "total", ",", "100.0", "*", "current", "/", "total", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer.__init__": [[10, 49], ["config.get_logger", "base_trainer.BaseTrainer._prepare_device", "model.to", "cfg_trainer.get", "logger.TensorboardWriter", "len", "torch.nn.DataParallel", "base_trainer.BaseTrainer.monitor.split", "cfg_trainer.get", "base_trainer.BaseTrainer._resume_checkpoint"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer._prepare_device", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.None.dataset.TSNDataSet.get", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer._resume_checkpoint"], ["def", "__init__", "(", "self", ",", "model", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "logger", "=", "config", ".", "get_logger", "(", "'trainer'", ",", "config", "[", "'trainer'", "]", "[", "'verbosity'", "]", ")", "\n", "\n", "# setup GPU device if available, move model into configured device", "\n", "self", ".", "device", ",", "device_ids", "=", "self", ".", "_prepare_device", "(", "config", "[", "'n_gpu'", "]", ")", "\n", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "\n", "", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "metric_ftns", "=", "metric_ftns", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "cfg_trainer", "=", "config", "[", "'trainer'", "]", "\n", "self", ".", "epochs", "=", "cfg_trainer", "[", "'epochs'", "]", "\n", "self", ".", "save_period", "=", "cfg_trainer", "[", "'save_period'", "]", "\n", "self", ".", "monitor", "=", "cfg_trainer", ".", "get", "(", "'monitor'", ",", "'off'", ")", "\n", "\n", "# configuration to monitor model performance and save best", "\n", "if", "self", ".", "monitor", "==", "'off'", ":", "\n", "            ", "self", ".", "mnt_mode", "=", "'off'", "\n", "self", ".", "mnt_best", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "mnt_mode", ",", "self", ".", "mnt_metric", "=", "self", ".", "monitor", ".", "split", "(", ")", "\n", "assert", "self", ".", "mnt_mode", "in", "[", "'min'", ",", "'max'", "]", "\n", "\n", "self", ".", "mnt_best", "=", "inf", "if", "self", ".", "mnt_mode", "==", "'min'", "else", "-", "inf", "\n", "self", ".", "early_stop", "=", "cfg_trainer", ".", "get", "(", "'early_stop'", ",", "inf", ")", "\n", "\n", "", "self", ".", "start_epoch", "=", "1", "\n", "\n", "self", ".", "checkpoint_dir", "=", "config", ".", "save_dir", "\n", "\n", "# setup visualization writer instance                ", "\n", "self", ".", "writer", "=", "TensorboardWriter", "(", "config", ".", "log_dir", ",", "self", ".", "logger", ",", "cfg_trainer", "[", "'tensorboard'", "]", ")", "\n", "\n", "if", "config", ".", "resume", "is", "not", "None", ":", "\n", "            ", "self", ".", "_resume_checkpoint", "(", "config", ".", "resume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer._train_epoch": [[50, 58], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an epoch\n\n        :param epoch: Current epoch number\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer.train": [[59, 102], ["range", "base_trainer.BaseTrainer._train_epoch", "log.update", "log.items", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer._save_checkpoint", "base_trainer.BaseTrainer.logger.info", "str", "base_trainer.BaseTrainer.logger.warning"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer._train_epoch", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer._save_checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Full training logic\n        \"\"\"", "\n", "not_improved_count", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "result", "=", "self", ".", "_train_epoch", "(", "epoch", ")", "\n", "\n", "# save logged informations into log dict", "\n", "log", "=", "{", "'epoch'", ":", "epoch", "}", "\n", "log", ".", "update", "(", "result", ")", "\n", "\n", "# print logged informations to the screen", "\n", "for", "key", ",", "value", "in", "log", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'    {:15s}: {}'", ".", "format", "(", "str", "(", "key", ")", ",", "value", ")", ")", "\n", "\n", "# evaluate model performance according to configured metric, save best checkpoint as model_best", "\n", "", "best", "=", "False", "\n", "if", "self", ".", "mnt_mode", "!=", "'off'", ":", "\n", "                ", "try", ":", "\n", "# check whether model performance improved or not, according to specified metric(mnt_metric)", "\n", "                    ", "improved", "=", "(", "self", ".", "mnt_mode", "==", "'min'", "and", "log", "[", "self", ".", "mnt_metric", "]", "<=", "self", ".", "mnt_best", ")", "or", "(", "self", ".", "mnt_mode", "==", "'max'", "and", "log", "[", "self", ".", "mnt_metric", "]", ">=", "self", ".", "mnt_best", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Metric '{}' is not found. \"", "\n", "\"Model performance monitoring is disabled.\"", ".", "format", "(", "self", ".", "mnt_metric", ")", ")", "\n", "self", ".", "mnt_mode", "=", "'off'", "\n", "improved", "=", "False", "\n", "\n", "", "if", "improved", ":", "\n", "                    ", "self", ".", "mnt_best", "=", "log", "[", "self", ".", "mnt_metric", "]", "\n", "not_improved_count", "=", "0", "\n", "best", "=", "True", "\n", "", "else", ":", "\n", "                    ", "not_improved_count", "+=", "1", "\n", "\n", "", "if", "not_improved_count", ">", "self", ".", "early_stop", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"Validation performance didn\\'t improve for {} epochs. \"", "\n", "\"Training stops.\"", ".", "format", "(", "self", ".", "early_stop", ")", ")", "\n", "break", "\n", "\n", "", "", "if", "epoch", "%", "self", ".", "save_period", "==", "0", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "epoch", ",", "save_best", "=", "best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer._prepare_device": [[103, 119], ["torch.cuda.device_count", "torch.device", "list", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.logger.warning", "range"], "methods", ["None"], ["", "", "", "def", "_prepare_device", "(", "self", ",", "n_gpu_use", ")", ":", "\n", "        ", "\"\"\"\n        setup GPU device if available, move model into configured device\n        \"\"\"", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "n_gpu_use", ">", "0", "and", "n_gpu", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: There\\'s no GPU available on this machine,\"", "\n", "\"training will be performed on CPU.\"", ")", "\n", "n_gpu_use", "=", "0", "\n", "", "if", "n_gpu_use", ">", "n_gpu", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: The number of GPU\\'s configured to use is {}, but only {} are available \"", "\n", "\"on this machine.\"", ".", "format", "(", "n_gpu_use", ",", "n_gpu", ")", ")", "\n", "n_gpu_use", "=", "n_gpu", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "n_gpu_use", ">", "0", "else", "'cpu'", ")", "\n", "list_ids", "=", "list", "(", "range", "(", "n_gpu_use", ")", ")", "\n", "return", "device", ",", "list_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer._save_checkpoint": [[120, 144], ["str", "torch.save", "base_trainer.BaseTrainer.logger.info", "type", "base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.optimizer.state_dict", "str", "torch.save", "base_trainer.BaseTrainer.logger.info"], "methods", ["None"], ["", "def", "_save_checkpoint", "(", "self", ",", "epoch", ",", "save_best", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Saving checkpoints\n\n        :param epoch: current epoch number\n        :param log: logging information of the epoch\n        :param save_best: if True, rename the saved checkpoint to 'model_best.pth'\n        \"\"\"", "\n", "arch", "=", "type", "(", "self", ".", "model", ")", ".", "__name__", "\n", "state", "=", "{", "\n", "'arch'", ":", "arch", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'monitor_best'", ":", "self", ".", "mnt_best", ",", "\n", "'config'", ":", "self", ".", "config", "\n", "}", "\n", "filename", "=", "str", "(", "self", ".", "checkpoint_dir", "/", "'checkpoint-epoch{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint: {} ...\"", ".", "format", "(", "filename", ")", ")", "\n", "if", "save_best", ":", "\n", "            ", "best_path", "=", "str", "(", "self", ".", "checkpoint_dir", "/", "'model_best.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "best_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving current best: model_best.pth ...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_trainer.BaseTrainer._resume_checkpoint": [[145, 171], ["str", "base_trainer.BaseTrainer.logger.info", "torch.load", "base_trainer.BaseTrainer.model.load_state_dict", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.optimizer.load_state_dict"], "methods", ["None"], ["", "", "def", "_resume_checkpoint", "(", "self", ",", "resume_path", ")", ":", "\n", "        ", "\"\"\"\n        Resume from saved checkpoints\n\n        :param resume_path: Checkpoint path to be resumed\n        \"\"\"", "\n", "resume_path", "=", "str", "(", "resume_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint: {} ...\"", ".", "format", "(", "resume_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ")", "\n", "self", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "self", ".", "mnt_best", "=", "checkpoint", "[", "'monitor_best'", "]", "\n", "\n", "# load architecture params from checkpoint.", "\n", "if", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", "!=", "self", ".", "config", "[", "'arch'", "]", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Architecture configuration given in config file is different from that of \"", "\n", "\"checkpoint. This may yield an exception while state_dict is being loaded.\"", ")", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "# load optimizer state from checkpoint only when optimizer type is not changed.", "\n", "if", "checkpoint", "[", "'config'", "]", "[", "'optimizer'", "]", "[", "'type'", "]", "!=", "self", ".", "config", "[", "'optimizer'", "]", "[", "'type'", "]", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Optimizer type given in config file is different from that of checkpoint. \"", "\n", "\"Optimizer parameters not being resumed.\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Checkpoint loaded. Resume training from epoch {}\"", ".", "format", "(", "self", ".", "start_epoch", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_data_loader.BaseDataLoader.__init__": [[11, 28], ["len", "base_data_loader.BaseDataLoader._split_sampler", "torch.utils.data.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_data_loader.BaseDataLoader._split_sampler", "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ",", "collate_fn", "=", "default_collate", ")", ":", "\n", "        ", "self", ".", "validation_split", "=", "validation_split", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "self", ".", "batch_idx", "=", "0", "\n", "self", ".", "n_samples", "=", "len", "(", "dataset", ")", "\n", "\n", "self", ".", "sampler", ",", "self", ".", "valid_sampler", "=", "self", ".", "_split_sampler", "(", "self", ".", "validation_split", ")", "\n", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'dataset'", ":", "dataset", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "'collate_fn'", ":", "collate_fn", ",", "\n", "'num_workers'", ":", "num_workers", "\n", "}", "\n", "super", "(", ")", ".", "__init__", "(", "sampler", "=", "self", ".", "sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_data_loader.BaseDataLoader._split_sampler": [[29, 56], ["numpy.arange", "numpy.random.seed", "numpy.random.shuffle", "isinstance", "numpy.delete", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "int", "numpy.arange"], "methods", ["None"], ["", "def", "_split_sampler", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "0.0", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "idx_full", "=", "np", ".", "arange", "(", "self", ".", "n_samples", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_full", ")", "\n", "\n", "if", "isinstance", "(", "split", ",", "int", ")", ":", "\n", "            ", "assert", "split", ">", "0", "\n", "assert", "split", "<", "self", ".", "n_samples", ",", "\"validation set size is configured to be larger than entire dataset.\"", "\n", "len_valid", "=", "split", "\n", "", "else", ":", "\n", "            ", "len_valid", "=", "int", "(", "self", ".", "n_samples", "*", "split", ")", "\n", "\n", "", "valid_idx", "=", "idx_full", "[", "0", ":", "len_valid", "]", "\n", "train_idx", "=", "np", ".", "delete", "(", "idx_full", ",", "np", ".", "arange", "(", "0", ",", "len_valid", ")", ")", "\n", "\n", "train_sampler", "=", "SubsetRandomSampler", "(", "train_idx", ")", "\n", "valid_sampler", "=", "SubsetRandomSampler", "(", "valid_idx", ")", "\n", "\n", "# turn off shuffle option which is mutually exclusive with sampler", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "n_samples", "=", "len", "(", "train_idx", ")", "\n", "\n", "return", "train_sampler", ",", "valid_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_data_loader.BaseDataLoader.split_validation": [[57, 62], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "valid_sampler", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "DataLoader", "(", "sampler", "=", "self", ".", "valid_sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_model.BaseModel.forward": [[10, 18], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass logic\n\n        :return: Model output\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_model.BaseModel.__str__": [[19, 26], ["filter", "sum", "base_model.BaseModel.parameters", "torch.Module.__str__", "numpy.prod", "p.size"], "methods", ["home.repos.pwc.inspect_result.filby89_NTUA-BEEU-eccv2020.base.base_model.BaseModel.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Model prints with number of trainable parameters\n        \"\"\"", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "return", "super", "(", ")", ".", "__str__", "(", ")", "+", "'\\nTrainable parameters: {}'", ".", "format", "(", "params", ")", "\n", "", "", ""]]}