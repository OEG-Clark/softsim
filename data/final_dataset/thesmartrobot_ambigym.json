{"home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.orientation": [[3, 13], ["None"], "function", ["None"], ["def", "orientation", "(", "p1", ",", "p2", ",", "p3", ")", ":", "\n", "    ", "\"\"\"\n    The orientation of the points is:\n    - clockwise if > 0\n    - aligned if == 0\n    - counterclockwise if < 0\n    \"\"\"", "\n", "val", "=", "(", "(", "(", "p2", "[", "1", "]", "-", "p1", "[", "1", "]", ")", "*", "(", "p3", "[", "0", "]", "-", "p2", "[", "0", "]", ")", ")", "\n", "-", "(", "(", "p2", "[", "0", "]", "-", "p1", "[", "0", "]", ")", "*", "(", "p3", "[", "1", "]", "-", "p2", "[", "1", "]", ")", ")", ")", "\n", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.line_segment_line_segment_intersection": [[15, 43], ["numpy.array", "numpy.linalg.det", "numpy.array", "numpy.linalg.det", "numpy.array", "numpy.linalg.det"], "function", ["None"], ["", "def", "line_segment_line_segment_intersection", "(", "pnt1", ",", "pnt2", ",", "pnt3", ",", "pnt4", ")", ":", "\n", "    ", "\"\"\"\n    Point of intersection between two line segments.\n    \"\"\"", "\n", "denom", "=", "np", ".", "array", "(", "[", "[", "pnt1", "[", "0", "]", "-", "pnt2", "[", "0", "]", ",", "pnt3", "[", "0", "]", "-", "pnt4", "[", "0", "]", "]", ",", "\n", "[", "pnt1", "[", "1", "]", "-", "pnt2", "[", "1", "]", ",", "pnt3", "[", "1", "]", "-", "pnt4", "[", "1", "]", "]", "]", ")", "\n", "div", "=", "np", ".", "linalg", ".", "det", "(", "denom", ")", "\n", "if", "div", "==", "0", ":", "\n", "# line segments are parallel", "\n", "        ", "return", "None", "\n", "\n", "", "num", "=", "np", ".", "array", "(", "[", "[", "pnt1", "[", "0", "]", "-", "pnt3", "[", "0", "]", ",", "pnt3", "[", "0", "]", "-", "pnt4", "[", "0", "]", "]", ",", "\n", "[", "pnt1", "[", "1", "]", "-", "pnt3", "[", "1", "]", ",", "pnt3", "[", "1", "]", "-", "pnt4", "[", "1", "]", "]", "]", ")", "\n", "mul", "=", "np", ".", "linalg", ".", "det", "(", "num", ")", "\n", "t", "=", "mul", "/", "div", "\n", "if", "t", "<", "0.0", "or", "t", ">", "1.0", ":", "\n", "# line 1 segment does not intersect line 2", "\n", "        ", "return", "None", "\n", "\n", "", "num", "=", "np", ".", "array", "(", "[", "[", "pnt1", "[", "0", "]", "-", "pnt2", "[", "0", "]", ",", "pnt1", "[", "0", "]", "-", "pnt3", "[", "0", "]", "]", ",", "\n", "[", "pnt1", "[", "1", "]", "-", "pnt2", "[", "1", "]", ",", "pnt1", "[", "1", "]", "-", "pnt3", "[", "1", "]", "]", "]", ")", "\n", "mul", "=", "np", ".", "linalg", ".", "det", "(", "num", ")", "\n", "u", "=", "-", "mul", "/", "div", "\n", "if", "u", "<", "0.0", "or", "u", ">", "1.0", ":", "\n", "# line 1 does not intersect line 2 segment", "\n", "        ", "return", "None", "\n", "\n", "", "return", "pnt1", "+", "t", "*", "(", "pnt2", "-", "pnt1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.line_segment_circle_intersection": [[45, 68], ["numpy.linalg.norm", "numpy.array", "numpy.array", "numpy.array", "numpy.sqrt", "abs", "numpy.sqrt", "numpy.sqrt", "abs", "numpy.sqrt", "numpy.sign", "numpy.sign"], "function", ["None"], ["", "def", "line_segment_circle_intersection", "(", "pnt1", ",", "pnt2", ",", "radius", ")", ":", "\n", "    ", "\"\"\"\n    Points of intersection between a line segment and a circle with\n    center (0,0).\n    \"\"\"", "\n", "diff", "=", "pnt2", "-", "pnt1", "\n", "dr", "=", "np", ".", "linalg", ".", "norm", "(", "diff", ")", "\n", "det", "=", "pnt1", "[", "0", "]", "*", "pnt2", "[", "1", "]", "-", "pnt2", "[", "0", "]", "*", "pnt1", "[", "1", "]", "\n", "\n", "dscr", "=", "radius", "**", "2", "*", "dr", "**", "2", "-", "det", "**", "2", "\n", "\n", "if", "dscr", "<", "0", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n", "", "x1", "=", "(", "det", "*", "diff", "[", "1", "]", "-", "np", ".", "sign", "(", "diff", "[", "1", "]", ")", "*", "diff", "[", "0", "]", "*", "np", ".", "sqrt", "(", "dscr", ")", ")", "/", "dr", "**", "2", "\n", "y1", "=", "(", "-", "det", "*", "diff", "[", "0", "]", "-", "abs", "(", "diff", "[", "1", "]", ")", "*", "np", ".", "sqrt", "(", "dscr", ")", ")", "/", "dr", "**", "2", "\n", "x2", "=", "(", "det", "*", "diff", "[", "1", "]", "+", "np", ".", "sign", "(", "diff", "[", "1", "]", ")", "*", "diff", "[", "0", "]", "*", "np", ".", "sqrt", "(", "dscr", ")", ")", "/", "dr", "**", "2", "\n", "y2", "=", "(", "-", "det", "*", "diff", "[", "0", "]", "+", "abs", "(", "diff", "[", "1", "]", ")", "*", "np", ".", "sqrt", "(", "dscr", ")", ")", "/", "dr", "**", "2", "\n", "\n", "if", "dscr", "==", "0", ":", "\n", "        ", "return", "np", ".", "array", "(", "(", "x1", ",", "y1", ")", ")", ",", "None", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "(", "x1", ",", "y1", ")", ")", ",", "np", ".", "array", "(", "(", "x2", ",", "y2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.distance_point_to_line_segment": [[70, 87], ["numpy.linalg.norm", "numpy.dot", "numpy.linalg.norm"], "function", ["None"], ["", "", "def", "distance_point_to_line_segment", "(", "pnt", ",", "spnt1", ",", "spnt2", ")", ":", "\n", "    ", "segment", "=", "spnt2", "-", "spnt1", "\n", "segment_length", "=", "np", ".", "linalg", ".", "norm", "(", "segment", ")", "\n", "segment_unit", "=", "segment", "/", "segment_length", "\n", "\n", "point", "=", "spnt2", "-", "pnt", "\n", "point_scaled", "=", "point", "/", "segment_length", "\n", "\n", "t", "=", "np", ".", "dot", "(", "segment_unit", ",", "point_scaled", ")", "\n", "if", "t", "<", "0.0", ":", "\n", "        ", "t", "=", "0.0", "\n", "", "elif", "t", ">", "1.0", ":", "\n", "        ", "t", "=", "1.0", "\n", "", "nearest", "=", "segment", "*", "t", "\n", "distance", "=", "np", ".", "linalg", ".", "norm", "(", "nearest", "-", "point", ")", "\n", "nearest", "=", "nearest", "+", "spnt2", "\n", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.fuzzy_equal": [[89, 91], ["abs"], "function", ["None"], ["", "def", "fuzzy_equal", "(", "a", ",", "b", ",", "threshold", "=", "1e-6", ")", ":", "\n", "    ", "return", "abs", "(", "a", "-", "b", ")", "<", "threshold", "", "", ""]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.__init__": [[49, 95], ["e_maze_env.EMazeEnv.seed", "gym.spaces.Discrete", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.seed"], ["def", "__init__", "(", "\n", "self", ",", "\n", "allow_back", "=", "False", ",", "\n", "shadows", "=", "True", ",", "\n", "max_length", "=", "None", ",", "\n", "player_fov", "=", "1.1", "*", "np", ".", "pi", ",", "\n", "player_view_distance", "=", "None", ",", "\n", "cheese_pos", "=", "\"random\"", ",", "\n", "close_paths", "=", "True", ",", "\n", "reward_type", "=", "\"static\"", ",", "\n", ")", ":", "\n", "        ", "self", ".", "seed", "(", ")", "\n", "self", ".", "boundaries", "=", "[", "]", "\n", "self", ".", "entities", "=", "{", "}", "\n", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "n", "=", "(", "4", "+", "allow_back", ")", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "STATE_H", ",", "STATE_W", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "\n", "self", ".", "viewer", "=", "None", "\n", "\n", "# environment parameters", "\n", "# TODO: continuous actions", "\n", "self", ".", "allow_back", "=", "allow_back", "\n", "\n", "self", ".", "shadows", "=", "shadows", "\n", "\n", "self", ".", "max_length", "=", "max_length", "\n", "\n", "assert", "player_fov", ">", "0", "\n", "if", "player_fov", "<=", "2", "*", "np", ".", "pi", ":", "\n", "            ", "self", ".", "player_fov", "=", "player_fov", "\n", "", "else", ":", "\n", "            ", "self", ".", "player_fov", "=", "player_fov", "/", "180", "*", "np", ".", "pi", "\n", "\n", "", "self", ".", "player_view_distance", "=", "player_view_distance", "\n", "\n", "assert", "cheese_pos", "in", "[", "\"random\"", ",", "\"left\"", ",", "\"right\"", "]", "\n", "self", ".", "cheese_pos", "=", "cheese_pos", "\n", "\n", "self", ".", "close_paths", "=", "close_paths", "\n", "self", ".", "paths_closed", "=", "False", "\n", "\n", "assert", "reward_type", "in", "[", "\"static\"", ",", "\"decreasing\"", "]", "\n", "self", ".", "reward_type", "=", "reward_type", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.step": [[96, 133], ["e_maze_env.EMazeEnv._action_resolve", "e_maze_env.EMazeEnv._step", "e_maze_env.EMazeEnv._action_resolve", "e_maze_env.EMazeEnv.render", "e_maze_env.EMazeEnv._close_paths", "bool", "int", "e_maze_env.EMazeEnv.entities.items", "isinstance"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._action_resolve", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._step", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._action_resolve", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.render", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._close_paths"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "dt", "=", "1", "/", "FPS", "\n", "curr_time", "=", "self", ".", "t", "+", "dt", "\n", "self", ".", "_action_resolve", "(", "action", ",", "dt", ")", "\n", "\n", "self", ".", "_step", "(", "dt", ")", "\n", "\n", "self", ".", "_action_resolve", "(", "0", ",", "dt", ")", "# required for discrete actions", "\n", "\n", "if", "self", ".", "close_paths", "and", "not", "self", ".", "paths_closed", ":", "\n", "            ", "self", ".", "_close_paths", "(", ")", "\n", "\n", "", "self", ".", "t", "=", "curr_time", "\n", "self", ".", "steps", "+=", "1", "\n", "\n", "# return variables", "\n", "observation", "=", "self", ".", "render", "(", "mode", "=", "\"rgb_array\"", ")", "\n", "\n", "found", "=", "not", "bool", "(", "\n", "{", "\n", "key", ":", "val", "\n", "for", "key", ",", "val", "in", "self", ".", "entities", ".", "items", "(", ")", "\n", "if", "isinstance", "(", "val", ",", "Cheese", ")", "\n", "}", "\n", ")", "\n", "\n", "if", "self", ".", "reward_type", "==", "\"static\"", ":", "\n", "            ", "reward", "=", "int", "(", "found", ")", "\n", "", "elif", "self", ".", "reward_type", "==", "\"decreasing\"", ":", "\n", "            ", "reward", "=", "-", "1", "if", "not", "found", "else", "0", "\n", "\n", "", "if", "self", ".", "max_length", "is", "not", "None", ":", "\n", "            ", "done", "=", "found", "or", "self", ".", "steps", ">", "self", ".", "max_length", "\n", "", "else", ":", "\n", "            ", "done", "=", "found", "\n", "\n", "", "return", "observation", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._step": [[134, 163], ["e_maze_env.EMazeEnv.entities.values", "e_maze_env.EMazeEnv.entities.values", "e_maze_env.EMazeEnv._advance", "e_maze_env.EMazeEnv._advance", "e_maze_env.EMazeEnv._resolve", "e_maze_env.EMazeEnv._step", "e.time_to_obstacle_collision", "e.time_to_entity_collision"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._advance", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._advance", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._resolve", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._step", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.time_to_obstacle_collision", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.time_to_entity_collision"], ["", "def", "_step", "(", "self", ",", "dt", ")", ":", "\n", "        ", "\"\"\"Advance time by time dt.\"\"\"", "\n", "time_to_collision", "=", "np", ".", "inf", "\n", "collider", "=", "None", "\n", "collidee", "=", "None", "\n", "\n", "for", "e", "in", "self", ".", "entities", ".", "values", "(", ")", ":", "\n", "            ", "for", "o", "in", "self", ".", "boundaries", ":", "\n", "                ", "t", "=", "e", ".", "time_to_obstacle_collision", "(", "o", ")", "\n", "if", "t", "<", "time_to_collision", ":", "\n", "                    ", "time_to_collision", "=", "t", "\n", "collider", "=", "e", "\n", "collidee", "=", "o", "\n", "\n", "", "", "for", "e2", "in", "self", ".", "entities", ".", "values", "(", ")", ":", "\n", "                ", "if", "e2", "is", "e", ":", "\n", "                    ", "continue", "\n", "", "t", "=", "e", ".", "time_to_entity_collision", "(", "e2", ")", "\n", "if", "t", "<", "time_to_collision", ":", "\n", "                    ", "time_to_collision", "=", "t", "\n", "collider", "=", "e", "\n", "collidee", "=", "e2", "\n", "\n", "", "", "", "if", "time_to_collision", ">", "dt", ":", "\n", "            ", "self", ".", "_advance", "(", "dt", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_advance", "(", "time_to_collision", ")", "\n", "self", ".", "_resolve", "(", "collider", ",", "collidee", ")", "\n", "self", ".", "_step", "(", "dt", "-", "time_to_collision", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._action_resolve": [[164, 177], ["e_maze_env.EMazeEnv.entities[].slow", "e_maze_env.EMazeEnv.entities[].turn", "e_maze_env.EMazeEnv.entities[].turn", "e_maze_env.EMazeEnv.entities[].accelerate", "e_maze_env.EMazeEnv.entities[].decelerate"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.slow", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.turn", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.turn", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.accelerate", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.decelerate"], ["", "", "def", "_action_resolve", "(", "self", ",", "action", ",", "dt", ")", ":", "\n", "        ", "\"\"\"Perform action.\"\"\"", "\n", "if", "action", "!=", "0", ":", "\n", "            ", "if", "action", "==", "1", ":", "# turn left", "\n", "                ", "self", ".", "entities", "[", "\"mouse\"", "]", ".", "turn", "(", "-", "dt", ")", "\n", "", "if", "action", "==", "2", ":", "# turn right", "\n", "                ", "self", ".", "entities", "[", "\"mouse\"", "]", ".", "turn", "(", "dt", ")", "\n", "", "if", "action", "==", "3", ":", "# go forward", "\n", "                ", "self", ".", "entities", "[", "\"mouse\"", "]", ".", "accelerate", "(", "dt", ")", "\n", "", "if", "self", ".", "allow_back", "and", "action", "==", "4", ":", "# go backward", "\n", "                ", "self", ".", "entities", "[", "\"mouse\"", "]", ".", "decelerate", "(", "dt", ")", "\n", "", "", "else", ":", "# get back to neutral", "\n", "            ", "self", ".", "entities", "[", "\"mouse\"", "]", ".", "slow", "(", "dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._advance": [[178, 183], ["e_maze_env.EMazeEnv.entities.values", "e.move"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.move"], ["", "", "def", "_advance", "(", "self", ",", "dt", ")", ":", "\n", "        ", "\"\"\"Advance all entities.\"\"\"", "\n", "if", "dt", ">=", "0", ":", "\n", "            ", "for", "e", "in", "self", ".", "entities", ".", "values", "(", ")", ":", "\n", "                ", "e", ".", "move", "(", "dt", "=", "dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._resolve": [[184, 193], ["isinstance", "collider.obstacle_collision", "isinstance", "collider.entity_collision", "e_maze_env.EMazeEnv.entities.items"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.obstacle_collision", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.entity_collision"], ["", "", "", "def", "_resolve", "(", "self", ",", "collider", ",", "collidee", ")", ":", "\n", "        ", "\"\"\"Resolve all collisions.\"\"\"", "\n", "if", "isinstance", "(", "collidee", ",", "Immovable", ")", ":", "\n", "            ", "collider", ".", "obstacle_collision", "(", "collidee", ")", "\n", "", "elif", "isinstance", "(", "collidee", ",", "Movable", ")", ":", "\n", "            ", "collider", ".", "entity_collision", "(", "collidee", ")", "\n", "\n", "", "self", ".", "entities", "=", "{", "\n", "key", ":", "val", "for", "key", ",", "val", "in", "self", ".", "entities", ".", "items", "(", ")", "if", "not", "val", ".", "consumed", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._close_paths": [[195, 207], ["e_maze_env.EMazeEnv.boundaries.append", "e_maze_env.EMazeEnv.boundaries.append", "ambigym.e_maze.objects.Wall", "ambigym.e_maze.objects.Wall"], "methods", ["None"], ["", "def", "_close_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Close paths when the mouse enters a branch.\n        Used when close_paths=True.\n        \"\"\"", "\n", "mouse", "=", "self", ".", "entities", "[", "\"mouse\"", "]", "\n", "if", "mouse", ".", "position", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "self", ".", "boundaries", ".", "append", "(", "Wall", "(", "(", "1.0", ",", "2.0", ")", ",", "(", "1.0", ",", "3.0", ")", ")", ")", "\n", "self", ".", "paths_closed", "=", "True", "\n", "", "if", "mouse", ".", "position", "[", "0", "]", ">", "2.0", ":", "\n", "            ", "self", ".", "boundaries", ".", "append", "(", "Wall", "(", "(", "2.0", ",", "2.0", ")", ",", "(", "2.0", ",", "3.0", ")", ")", ")", "\n", "self", ".", "paths_closed", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.reset": [[208, 215], ["e_maze_env.EMazeEnv._initialize_terrain", "e_maze_env.EMazeEnv.step"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._initialize_terrain", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.step"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_initialize_terrain", "(", ")", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "steps", "=", "0", "\n", "if", "self", ".", "close_paths", ":", "\n", "            ", "self", ".", "paths_closed", "=", "False", "\n", "", "return", "self", ".", "step", "(", "0", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._initialize_terrain": [[216, 244], ["ambigym.e_maze.objects.Wall", "ambigym.e_maze.objects.Wall", "ambigym.e_maze.objects.Wall", "ambigym.e_maze.objects.Wall", "ambigym.e_maze.objects.Wall", "ambigym.e_maze.objects.Wall", "ambigym.e_maze.objects.Window", "ambigym.e_maze.objects.Window", "e_maze_env.EMazeEnv.boundaries.append", "e_maze_env.EMazeEnv.boundaries.append", "ambigym.e_maze.objects.Cheese", "ambigym.e_maze.objects.Mouse", "ambigym.e_maze.objects.Wall", "ambigym.e_maze.objects.Wall", "numpy.random.randint"], "methods", ["None"], ["", "def", "_initialize_terrain", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize the environment.\"\"\"", "\n", "# walls and windows", "\n", "self", ".", "boundaries", "=", "[", "\n", "Wall", "(", "(", "0.0", ",", "0.0", ")", ",", "(", "0.0", ",", "3.0", ")", ")", ",", "\n", "Wall", "(", "(", "0.0", ",", "3.0", ")", ",", "(", "3.0", ",", "3.0", ")", ")", ",", "\n", "Wall", "(", "(", "3.0", ",", "3.0", ")", ",", "(", "3.0", ",", "0.0", ")", ")", ",", "\n", "Wall", "(", "(", "3.0", ",", "0.0", ")", ",", "(", "0.0", ",", "0.0", ")", ")", ",", "\n", "Wall", "(", "(", "1.0", ",", "0.8", ")", ",", "(", "1.0", ",", "2.0", ")", ")", ",", "\n", "Wall", "(", "(", "2.0", ",", "0.8", ")", ",", "(", "2.0", ",", "2.0", ")", ")", ",", "\n", "Window", "(", "(", "1.0", ",", "0.0", ")", ",", "(", "1.0", ",", "0.8", ")", ")", ",", "\n", "Window", "(", "(", "2.0", ",", "0.0", ")", ",", "(", "2.0", ",", "0.8", ")", ")", ",", "\n", "]", "\n", "\n", "if", "self", ".", "close_paths", ":", "\n", "            ", "self", ".", "boundaries", ".", "append", "(", "Wall", "(", "(", "0.5", ",", "2.0", ")", ",", "(", "1.0", ",", "2.0", ")", ")", ")", "\n", "self", ".", "boundaries", ".", "append", "(", "Wall", "(", "(", "2.0", ",", "2.0", ")", ",", "(", "2.5", ",", "2.0", ")", ")", ")", "\n", "\n", "# objects", "\n", "", "cheese_x", "=", "0.5", "\n", "if", "self", ".", "cheese_pos", "==", "\"random\"", ":", "\n", "            ", "cheese_x", "+=", "2.0", "*", "np", ".", "random", ".", "randint", "(", "2", ")", "\n", "", "elif", "self", ".", "cheese_pos", "==", "\"right\"", ":", "\n", "            ", "cheese_x", "+=", "2.0", "\n", "\n", "", "self", ".", "entities", "=", "{", "\n", "\"cheese\"", ":", "Cheese", "(", "(", "cheese_x", ",", "0.5", ")", ")", ",", "\n", "\"mouse\"", ":", "Mouse", "(", "(", "1.5", ",", "1.5", ")", ",", "angle", "=", "0", ",", "fov", "=", "self", ".", "player_fov", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.render": [[246, 292], ["e_maze_env.EMazeEnv.entities.values", "e_maze_env.EMazeEnv.entities[].render", "cv2.cvtColor", "numpy.asarray", "cv2.namedWindow", "cv2.resizeWindow", "boundary.render", "e_maze_env.EMazeEnv._cast_shadow", "e_maze_env.EMazeEnv._render_shadow", "e_maze_env.EMazeEnv._render_view_distance", "cv2.imshow", "cv2.waitKey", "numpy.ones", "numpy.ones", "isinstance", "entity.render", "min", "min"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.render", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.render", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._cast_shadow", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._render_shadow", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._render_view_distance", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "\"human\"", ")", ":", "\n", "        ", "\"\"\"\n        Different rendering modes:\n        'human' will render the environment to the screen.\n        'rgb_array' will compute the RGB array only.\n        \"\"\"", "\n", "if", "\"t\"", "not", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "# reset() not called yet", "\n", "\n", "", "if", "mode", "==", "\"human\"", "and", "self", ".", "viewer", "is", "None", ":", "\n", "            ", "cv2", ".", "namedWindow", "(", "\n", "WND_NAME", ",", "cv2", ".", "WINDOW_GUI_NORMAL", "|", "cv2", ".", "WINDOW_KEEPRATIO", "\n", ")", "\n", "cv2", ".", "resizeWindow", "(", "WND_NAME", ",", "WINDOW_SIZE", ",", "WINDOW_SIZE", ")", "\n", "self", ".", "viewer", "=", "True", "\n", "\n", "", "if", "mode", "==", "\"human\"", ":", "\n", "            ", "unit_length", "=", "(", "min", "(", "VIDEO_W", ",", "VIDEO_H", ")", "-", "1", ")", "/", "WORLD_SIZE", "\n", "image", "=", "np", ".", "ones", "(", "(", "VIDEO_W", ",", "VIDEO_H", ",", "3", ")", ",", "np", ".", "uint8", ")", "*", "255", "\n", "", "if", "mode", "==", "\"rgb_array\"", ":", "\n", "            ", "unit_length", "=", "(", "min", "(", "STATE_W", ",", "STATE_H", ")", "-", "1", ")", "/", "WORLD_SIZE", "\n", "image", "=", "np", ".", "ones", "(", "(", "STATE_W", ",", "STATE_H", ",", "3", ")", ",", "np", ".", "uint8", ")", "*", "255", "\n", "\n", "", "for", "boundary", "in", "self", ".", "boundaries", ":", "\n", "            ", "boundary", ".", "render", "(", "image", ",", "unit_length", ")", "\n", "\n", "", "for", "entity", "in", "self", ".", "entities", ".", "values", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "entity", ",", "Mouse", ")", ":", "\n", "                ", "entity", ".", "render", "(", "image", ",", "unit_length", ")", "\n", "\n", "", "", "if", "self", ".", "shadows", ":", "\n", "            ", "visible", "=", "self", ".", "_cast_shadow", "(", ")", "\n", "image", "=", "self", ".", "_render_shadow", "(", "visible", ",", "image", ",", "unit_length", ")", "\n", "\n", "", "if", "self", ".", "player_view_distance", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "_render_view_distance", "(", "image", ",", "unit_length", ")", "\n", "\n", "", "self", ".", "entities", "[", "\"mouse\"", "]", ".", "render", "(", "image", ",", "unit_length", ")", "\n", "\n", "if", "mode", "==", "\"human\"", "and", "self", ".", "viewer", ":", "\n", "            ", "cv2", ".", "imshow", "(", "WND_NAME", ",", "image", ")", "\n", "key", "=", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n", "", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "arr", "=", "np", ".", "asarray", "(", "image", ")", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._cast_shadow": [[293, 401], ["mouse.sort_obstacle_endpoint_angles", "list.sort", "mouse.point_on_obstacle_along_angle", "list", "list.sort", "set", "mouse.point_on_obstacle_along_angle", "visible_walls.append", "visible_walls.append", "mouse.point_on_obstacle_along_angle", "mouse.distance_to_obstacle_along_angle", "all", "all", "mouse.distance_to_obstacle_along_angle", "mouse.closest_distance_to_obstacle_clockwise_of_angle", "ambigym.e_maze.utils.fuzzy_equal", "list.append", "ambigym.e_maze.utils.fuzzy_equal", "to_remove.append", "mouse.angle_to_point", "ambigym.e_maze.utils.orientation", "mouse.angle_to_point", "ambigym.e_maze.utils.orientation", "mouse.distance_to_obstacle_along_angle", "mouse.closest_distance_to_obstacle_clockwise_of_angle", "ambigym.e_maze.utils.fuzzy_equal", "ambigym.e_maze.utils.fuzzy_equal", "mouse.angle_to_point", "mouse.angle_to_point"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.sort_obstacle_endpoint_angles", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.point_on_obstacle_along_angle", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.point_on_obstacle_along_angle", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.point_on_obstacle_along_angle", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.distance_to_obstacle_along_angle", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.distance_to_obstacle_along_angle", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.closest_distance_to_obstacle_clockwise_of_angle", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.fuzzy_equal", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.fuzzy_equal", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.angle_to_point", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.orientation", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.angle_to_point", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.orientation", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.distance_to_obstacle_along_angle", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.closest_distance_to_obstacle_clockwise_of_angle", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.fuzzy_equal", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.fuzzy_equal", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.angle_to_point", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.angle_to_point"], ["", "def", "_cast_shadow", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compute the location of shadows cast by boundaries.\"\"\"", "\n", "mouse", "=", "self", ".", "entities", "[", "\"mouse\"", "]", "\n", "nontransparent", "=", "[", "b", "for", "b", "in", "self", ".", "boundaries", "if", "not", "b", ".", "transparent", "]", "\n", "# find angles of endpoints of boundaries relative to mouse", "\n", "endpoint_angles", "=", "mouse", ".", "sort_obstacle_endpoint_angles", "(", "nontransparent", ")", "\n", "\n", "# initialize obstacles and closest_obstacle at first angle", "\n", "obstacles", "=", "[", "\n", "b", "\n", "for", "b", "in", "nontransparent", "\n", "if", "mouse", ".", "distance_to_obstacle_along_angle", "(", "b", ",", "endpoint_angles", "[", "0", "]", ")", "\n", "<", "np", ".", "inf", "\n", "]", "\n", "obstacles", ".", "sort", "(", "\n", "key", "=", "lambda", "o", ":", "(", "\n", "mouse", ".", "distance_to_obstacle_along_angle", "(", "o", ",", "endpoint_angles", "[", "0", "]", ")", ",", "\n", "mouse", ".", "closest_distance_to_obstacle_clockwise_of_angle", "(", "\n", "o", ",", "endpoint_angles", "[", "0", "]", "\n", ")", ",", "# fix for obstacles starting at same point", "\n", ")", "\n", ")", "\n", "closest_obstacle", "=", "obstacles", "[", "0", "]", "\n", "# start first wall", "\n", "old_point", "=", "mouse", ".", "point_on_obstacle_along_angle", "(", "\n", "closest_obstacle", ",", "endpoint_angles", "[", "0", "]", "\n", ")", "\n", "\n", "# list to hold lit walls", "\n", "visible_walls", "=", "[", "mouse", ".", "position", "]", "\n", "\n", "# loop over endpoint angles", "\n", "for", "angle", "in", "endpoint_angles", ":", "\n", "\n", "# add any walls that begin at this angle to list", "\n", "            ", "for", "boundary", "in", "nontransparent", ":", "\n", "                ", "these_points", "=", "[", "\n", "p", "\n", "for", "p", "in", "boundary", ".", "points", "\n", "if", "fuzzy_equal", "(", "mouse", ".", "angle_to_point", "(", "p", ")", ",", "angle", ")", "\n", "]", "\n", "if", "these_points", ":", "\n", "                    ", "other_points", "=", "[", "\n", "p", "\n", "for", "p", "in", "boundary", ".", "points", "\n", "if", "not", "fuzzy_equal", "(", "mouse", ".", "angle_to_point", "(", "p", ")", ",", "angle", ")", "\n", "]", "\n", "counterclockwise", "=", "[", "\n", "orientation", "(", "mouse", ".", "position", ",", "p", ",", "o", ")", "<", "0", "\n", "for", "p", "in", "these_points", "\n", "for", "o", "in", "other_points", "\n", "]", "\n", "if", "all", "(", "counterclockwise", ")", ":", "\n", "                        ", "obstacles", ".", "append", "(", "boundary", ")", "\n", "", "", "", "obstacles", "=", "list", "(", "set", "(", "obstacles", ")", ")", "\n", "\n", "# remove any walls that end at this angle from list", "\n", "to_remove", "=", "[", "]", "\n", "for", "boundary", "in", "obstacles", ":", "\n", "                ", "these_points", "=", "[", "\n", "p", "\n", "for", "p", "in", "boundary", ".", "points", "\n", "if", "fuzzy_equal", "(", "mouse", ".", "angle_to_point", "(", "p", ")", ",", "angle", ")", "\n", "]", "\n", "if", "these_points", ":", "\n", "                    ", "other_points", "=", "[", "\n", "p", "\n", "for", "p", "in", "boundary", ".", "points", "\n", "if", "not", "fuzzy_equal", "(", "mouse", ".", "angle_to_point", "(", "p", ")", ",", "angle", ")", "\n", "]", "\n", "clockwise", "=", "[", "\n", "orientation", "(", "mouse", ".", "position", ",", "p", ",", "o", ")", ">", "0", "\n", "for", "p", "in", "these_points", "\n", "for", "o", "in", "other_points", "\n", "]", "\n", "if", "all", "(", "clockwise", ")", ":", "\n", "                        ", "to_remove", ".", "append", "(", "boundary", ")", "\n", "", "", "", "obstacles", "=", "[", "o", "for", "o", "in", "obstacles", "if", "o", "not", "in", "to_remove", "]", "\n", "\n", "# figure out which wall is now nearest", "\n", "obstacles", ".", "sort", "(", "\n", "key", "=", "lambda", "o", ":", "(", "\n", "mouse", ".", "distance_to_obstacle_along_angle", "(", "o", ",", "angle", ")", ",", "\n", "mouse", ".", "closest_distance_to_obstacle_clockwise_of_angle", "(", "\n", "o", ",", "angle", "\n", ")", ",", "# fix for obstacles starting at same point", "\n", ")", "\n", ")", "\n", "\n", "# if nearest wall changed or this is the last iteration", "\n", "nearest_wall_changed", "=", "obstacles", "[", "0", "]", "is", "not", "closest_obstacle", "\n", "is_last_iter", "=", "angle", "==", "endpoint_angles", "[", "-", "1", "]", "\n", "if", "nearest_wall_changed", "or", "is_last_iter", ":", "\n", "# complete current wall", "\n", "                ", "new_point", "=", "mouse", ".", "point_on_obstacle_along_angle", "(", "\n", "closest_obstacle", ",", "angle", "\n", ")", "\n", "\n", "visible_walls", ".", "append", "(", "old_point", ")", "\n", "visible_walls", ".", "append", "(", "new_point", ")", "\n", "\n", "# and begin a new one", "\n", "closest_obstacle", "=", "obstacles", "[", "0", "]", "\n", "old_point", "=", "mouse", ".", "point_on_obstacle_along_angle", "(", "\n", "closest_obstacle", ",", "angle", "\n", ")", "\n", "\n", "", "", "return", "visible_walls", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._render_shadow": [[402, 415], ["numpy.vstack", "vertices.reshape", "cv2.polylines", "cv2.fillPoly", "cv2.bitwise_and", "numpy.zeros_like"], "methods", ["None"], ["", "def", "_render_shadow", "(", "self", ",", "polygon", ",", "image", ",", "unit_length", ")", ":", "\n", "        ", "\"\"\"\n        Render shadows cast by boundaries.\n        Used when shadows=True.\n        \"\"\"", "\n", "polygon", "=", "np", ".", "vstack", "(", "polygon", ")", "\n", "mask", "=", "np", ".", "zeros_like", "(", "image", ",", "np", ".", "uint8", ")", "*", "255", "\n", "color", "=", "WHITE", "\n", "vertices", "=", "(", "polygon", "*", "unit_length", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "pts", "=", "vertices", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "2", ")", ")", "\n", "cv2", ".", "polylines", "(", "mask", ",", "[", "pts", "]", ",", "True", ",", "color", ",", "1", ")", "\n", "cv2", ".", "fillPoly", "(", "mask", ",", "[", "pts", "]", ",", "color", ")", "\n", "return", "cv2", ".", "bitwise_and", "(", "image", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv._render_view_distance": [[416, 428], ["tuple", "int", "cv2.circle", "cv2.bitwise_and", "numpy.zeros_like"], "methods", ["None"], ["", "def", "_render_view_distance", "(", "self", ",", "image", ",", "unit_length", ")", ":", "\n", "        ", "\"\"\"\n        Render shadows cast by limited view distance.\n        Used when player_view_distance!=None.\n        \"\"\"", "\n", "mask", "=", "np", ".", "zeros_like", "(", "image", ",", "np", ".", "uint8", ")", "*", "255", "\n", "mouse", "=", "self", ".", "entities", "[", "\"mouse\"", "]", "\n", "center", "=", "tuple", "(", "(", "mouse", ".", "position", "*", "unit_length", ")", ".", "astype", "(", "int", ")", ")", "\n", "radius", "=", "int", "(", "self", ".", "player_view_distance", "*", "unit_length", ")", "\n", "color", "=", "WHITE", "\n", "cv2", ".", "circle", "(", "mask", ",", "center", ",", "radius", ",", "color", ",", "-", "1", ")", "\n", "return", "cv2", ".", "bitwise_and", "(", "image", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.close": [[429, 435], ["cv2.waitKey", "cv2.destroyAllWindows", "LOGGER.warning"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "viewer", "is", "not", "None", ":", "\n", "            ", "cv2", ".", "waitKey", "(", "1", ")", "\n", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "LOGGER", ".", "warning", "(", "\"Program window closed.\"", ")", "\n", "self", ".", "viewer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.seed": [[436, 439], ["gym.utils.seeding.np_random"], "methods", ["None"], ["", "", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_random", ",", "seed", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.test_environment": [[441, 541], ["e_maze_env.EMazeEnv", "e_maze_env.EMazeEnv.reset", "LOGGER.warning", "e_maze_env.EMazeEnv.close", "e_maze_env.EMazeEnv.step", "e_maze_env.EMazeEnv.render", "keyboard.Listener", "listener.join", "datetime.now().strftime", "LOGGER.warning", "cv2.VideoWriter", "range", "cv2.VideoWriter.release", "LOGGER.warning", "e_maze_env.EMazeEnv.render", "e_maze_env.EMazeEnv.step", "e_maze_env.EMazeEnv.render", "keyboard.KeyCode.from_char", "e_maze_env.EMazeEnv.render", "cv2.cvtColor", "cv2.imwrite", "LOGGER.warning", "isinstance", "img_array.append", "e_maze_env.EMazeEnv.close", "e_maze_env.EMazeEnv.close", "cv2.VideoWriter_fourcc", "len", "cv2.VideoWriter.write", "datetime.now"], "function", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.reset", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.close", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.step", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.render", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.render", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.step", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.render", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.render", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.close", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.e_maze_env.EMazeEnv.close"], ["", "", "def", "test_environment", "(", "record_video", "=", "False", ",", "mode", "=", "\"human\"", ",", "**", "env_kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Test the environment.\n\n    Use arrow keys to move.\n    Press s to save an image of the current view.\n    Press esc to exit.\n\n    The window closes when the cheese is consumed.\n\n    Keyword arguments:\n    record_video -- specify whether to record a video while testing.\n    mode -- used for recording, specify which view to record.\n    env_kwargs -- environment parameters.\n\n    When record_video=True, a video will be saved in\n    the current working folder.\n    \"\"\"", "\n", "from", "pynput", "import", "keyboard", "\n", "from", "pynput", ".", "keyboard", "import", "Key", "\n", "\n", "def", "on_press", "(", "key", ")", ":", "\n", "        ", "if", "env", ".", "steps", "==", "1", ":", "\n", "            ", "env", ".", "render", "(", ")", "\n", "env", ".", "step", "(", "0", ")", "\n", "env", ".", "render", "(", ")", "\n", "return", "True", "\n", "\n", "", "if", "key", "==", "keyboard", ".", "KeyCode", ".", "from_char", "(", "\"s\"", ")", ":", "\n", "            ", "rgb", "=", "env", ".", "render", "(", "mode", "=", "\"rgb_array\"", ")", "\n", "rgb", "=", "cv2", ".", "cvtColor", "(", "rgb", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "cv2", ".", "imwrite", "(", "\"env.png\"", ",", "rgb", ")", "\n", "LOGGER", ".", "warning", "(", "\"Image saved.\"", ")", "\n", "return", "True", "\n", "\n", "", "action", "=", "0", "\n", "if", "key", "==", "Key", ".", "left", ":", "\n", "            ", "action", "=", "1", "\n", "", "if", "key", "==", "Key", ".", "right", ":", "\n", "            ", "action", "=", "2", "\n", "", "if", "key", "==", "Key", ".", "up", ":", "\n", "            ", "action", "=", "3", "\n", "", "if", "(", "\n", "key", "==", "Key", ".", "down", "\n", "and", "\"allow_back\"", "in", "env_kwargs", "\n", "and", "env_kwargs", "[", "\"allow_back\"", "]", "\n", ")", ":", "\n", "            ", "action", "=", "4", "\n", "\n", "", "s", ",", "_", ",", "done", ",", "_", "=", "env", ".", "step", "(", "action", ")", "\n", "r", "=", "env", ".", "render", "(", ")", "\n", "if", "record_video", "and", "isinstance", "(", "r", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "if", "mode", "==", "\"human\"", ":", "\n", "                ", "frame", "=", "r", "\n", "", "if", "mode", "==", "\"rgb_array\"", ":", "\n", "                ", "frame", "=", "s", "\n", "", "img_array", ".", "append", "(", "frame", ")", "\n", "", "if", "done", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "return", "False", "\n", "", "return", "True", "\n", "\n", "", "def", "on_release", "(", "key", ")", ":", "\n", "        ", "if", "key", "==", "Key", ".", "esc", ":", "\n", "# Stop listener", "\n", "            ", "env", ".", "close", "(", ")", "\n", "return", "False", "\n", "", "return", "True", "\n", "\n", "", "if", "record_video", ":", "\n", "        ", "img_array", "=", "[", "]", "\n", "\n", "", "env", "=", "EMazeEnv", "(", "**", "env_kwargs", ")", "\n", "env", ".", "reset", "(", ")", "\n", "LOGGER", ".", "warning", "(", "\"Press a key to start.\"", ")", "\n", "with", "keyboard", ".", "Listener", "(", "\n", "on_press", "=", "on_press", ",", "on_release", "=", "on_release", "\n", ")", "as", "listener", ":", "\n", "        ", "listener", ".", "join", "(", ")", "\n", "", "env", ".", "close", "(", ")", "\n", "\n", "if", "record_video", ":", "\n", "        ", "from", "datetime", "import", "datetime", "\n", "\n", "now", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ")", "\n", "\n", "LOGGER", ".", "warning", "(", "\"Making video...\"", ")", "\n", "height", ",", "width", ",", "layers", "=", "img_array", "[", "0", "]", ".", "shape", "\n", "size", "=", "(", "width", ",", "height", ")", "\n", "\n", "out", "=", "cv2", ".", "VideoWriter", "(", "\n", "f\"cont_mouse_demo_{mode}_{now}.avi\"", ",", "\n", "cv2", ".", "VideoWriter_fourcc", "(", "*", "\"FMP4\"", ")", ",", "\n", "FPS", ",", "\n", "size", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "img_array", ")", ")", ":", "\n", "            ", "out", ".", "write", "(", "img_array", "[", "i", "]", ")", "\n", "", "out", ".", "release", "(", ")", "\n", "LOGGER", ".", "warning", "(", "\"Done.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.immovable.Immovable.__init__": [[9, 25], ["isinstance", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "position", ",", "traversable", ",", "transparent", ")", ":", "\n", "        ", "\"\"\"\n        Construct an immovable object.\n        \n        Keyword arguments:\n        position -- permanent position of the immovable\n        traversable -- True if movables can freely move through\n        transparent -- False if this object casts shadows\n        \"\"\"", "\n", "self", ".", "position", "=", "(", "\n", "position", "\n", "if", "isinstance", "(", "position", ",", "np", ".", "ndarray", ")", "\n", "else", "np", ".", "array", "(", "position", ")", "\n", ")", "\n", "self", ".", "traversable", "=", "traversable", "\n", "self", ".", "transparent", "=", "transparent", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.immovable.Immovable.render": [[26, 33], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        To be implemented by subclasses.\n\n        How to render the movable.\n        \"\"\"", "\n", "raise", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.wall.Wall.__init__": [[12, 15], ["Immovable.__init__", "numpy.array", "numpy.array", "wall.Wall._position"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.__init__", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.window.Window._position"], ["def", "__init__", "(", "self", ",", "point1", ",", "point2", ")", ":", "\n", "        ", "self", ".", "points", "=", "[", "np", ".", "array", "(", "point1", ")", ",", "np", ".", "array", "(", "point2", ")", "]", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "_position", "(", ")", ",", "False", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.wall.Wall._position": [[16, 18], ["sum"], "methods", ["None"], ["", "def", "_position", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "points", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.wall.Wall.length": [[19, 23], ["numpy.linalg.norm"], "methods", ["None"], ["", "@", "property", "\n", "def", "length", "(", "self", ")", ":", "\n", "        ", "\"\"\"Length of the wall.\"\"\"", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "self", ".", "points", "[", "1", "]", "-", "self", ".", "points", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.wall.Wall.angle": [[24, 29], ["numpy.arctan2"], "methods", ["None"], ["", "@", "property", "\n", "def", "angle", "(", "self", ")", ":", "\n", "        ", "\"\"\"Orientation of the wall.\"\"\"", "\n", "return", "np", ".", "arctan2", "(", "self", ".", "points", "[", "1", "]", "[", "1", "]", "-", "self", ".", "points", "[", "0", "]", "[", "1", "]", ",", "\n", "self", ".", "points", "[", "1", "]", "[", "0", "]", "-", "self", ".", "points", "[", "0", "]", "[", "0", "]", ")", "%", "(", "2.0", "*", "np", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.wall.Wall.render": [[30, 35], ["tuple", "tuple", "cv2.line"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "image", ",", "unit_length", ")", ":", "\n", "        ", "pt1", "=", "tuple", "(", "(", "self", ".", "points", "[", "0", "]", "*", "unit_length", ")", ".", "astype", "(", "int", ")", ")", "\n", "pt2", "=", "tuple", "(", "(", "self", ".", "points", "[", "1", "]", "*", "unit_length", ")", ".", "astype", "(", "int", ")", ")", "\n", "color", "=", "RED", "\n", "cv2", ".", "line", "(", "image", ",", "pt1", ",", "pt2", ",", "color", ",", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.window.Window.__init__": [[12, 15], ["Immovable.__init__", "numpy.array", "numpy.array", "window.Window._position"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.__init__", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.window.Window._position"], ["def", "__init__", "(", "self", ",", "point1", ",", "point2", ")", ":", "\n", "        ", "self", ".", "points", "=", "[", "np", ".", "array", "(", "point1", ")", ",", "np", ".", "array", "(", "point2", ")", "]", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "_position", "(", ")", ",", "False", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.window.Window._position": [[16, 18], ["sum"], "methods", ["None"], ["", "def", "_position", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "points", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.window.Window.length": [[19, 23], ["numpy.linalg.norm"], "methods", ["None"], ["", "@", "property", "\n", "def", "length", "(", "self", ")", ":", "\n", "        ", "\"\"\"Length of the window.\"\"\"", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "self", ".", "points", "[", "1", "]", "-", "self", ".", "points", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.window.Window.angle": [[24, 29], ["numpy.arctan2"], "methods", ["None"], ["", "@", "property", "\n", "def", "angle", "(", "self", ")", ":", "\n", "        ", "\"\"\"Orientation of the window.\"\"\"", "\n", "return", "np", ".", "arctan2", "(", "self", ".", "points", "[", "1", "]", "[", "1", "]", "-", "self", ".", "points", "[", "0", "]", "[", "1", "]", ",", "\n", "self", ".", "points", "[", "1", "]", "[", "0", "]", "-", "self", ".", "points", "[", "0", "]", "[", "0", "]", ")", "%", "(", "2.0", "*", "np", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.window.Window.render": [[30, 35], ["tuple", "tuple", "cv2.line"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "image", ",", "unit_length", ")", ":", "\n", "        ", "pt1", "=", "tuple", "(", "(", "self", ".", "points", "[", "0", "]", "*", "unit_length", ")", ".", "astype", "(", "int", ")", ")", "\n", "pt2", "=", "tuple", "(", "(", "self", ".", "points", "[", "1", "]", "*", "unit_length", ")", ".", "astype", "(", "int", ")", ")", "\n", "color", "=", "LIGHT_BLUE", "\n", "cv2", ".", "line", "(", "image", ",", "pt1", ",", "pt2", ",", "color", ",", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.__init__": [[12, 54], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "position", ",", "angle", "=", "0.0", ",", "speed", "=", "0.0", ",", "turn_rate", "=", "0.0", ",", "\n", "max_speed", "=", "None", ",", "min_speed", "=", "None", ",", "\n", "mass", "=", "0", ",", "force", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Construct a movable object.\n\n        Set force=None to move in discrete time. (always move at max_speed)\n\n        Keyword arguments:\n        position -- current position\n        angle -- current facing direction\n        speed -- current speed\n        turn_rate -- turning speed\n        max_speed -- maximum allowed forward speed\n        min_speed -- maximum allowed backwards speed\n        mass -- mass of the movable\n        force -- force exerted when accelerating\n\n        Position must be a tuple, list or numpy.ndarray.\n        Setting force=None requires max_speed to be specified.\n        Specifying max_speed and setting min_speed=None,\n        will set min_speed=max_speed.\n        \"\"\"", "\n", "assert", "speed", "is", "not", "None", "\n", "if", "max_speed", "is", "not", "None", ":", "\n", "            ", "assert", "max_speed", ">=", "0", "\n", "assert", "-", "max_speed", "<=", "speed", "<=", "max_speed", "\n", "", "if", "min_speed", "is", "not", "None", ":", "\n", "            ", "assert", "min_speed", "<=", "0", "\n", "assert", "min_speed", "<=", "speed", "\n", "", "assert", "turn_rate", "is", "not", "None", "\n", "assert", "max_speed", "is", "not", "None", "or", "force", "is", "not", "None", "\n", "\n", "self", ".", "position", "=", "position", "# current position", "\n", "self", ".", "angle", "=", "angle", "# current angle", "\n", "self", ".", "speed", "=", "speed", "# current speed", "\n", "self", ".", "turn_rate", "=", "turn_rate", "# turn rate", "\n", "self", ".", "max_speed", "=", "max_speed", "# maximum forward speed", "\n", "self", ".", "min_speed", "=", "max_speed", "if", "min_speed", "is", "None", "else", "min_speed", "# maximum backwards speed", "\n", "self", ".", "mass", "=", "mass", "# mass of movable", "\n", "self", ".", "force", "=", "force", "# force exerted when accelerating", "\n", "self", ".", "consumed", "=", "False", "# if movable has (been) consumed", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.position": [[59, 62], ["isinstance", "numpy.array"], "methods", ["None"], ["", "@", "position", ".", "setter", "\n", "def", "position", "(", "self", ",", "position", ")", ":", "\n", "        ", "self", ".", "_position", "=", "position", "if", "isinstance", "(", "position", ",", "np", ".", "ndarray", ")", "else", "np", ".", "array", "(", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.angle": [[67, 70], ["None"], "methods", ["None"], ["", "@", "angle", ".", "setter", "\n", "def", "angle", "(", "self", ",", "angle", ")", ":", "\n", "        ", "self", ".", "_angle", "=", "angle", "%", "(", "2.0", "*", "np", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.velocity": [[71, 76], ["numpy.array", "numpy.cos", "numpy.sin"], "methods", ["None"], ["", "@", "property", "\n", "def", "velocity", "(", "self", ")", ":", "\n", "        ", "\"\"\"Velocity of the movable.\"\"\"", "\n", "return", "np", ".", "array", "(", "[", "self", ".", "speed", "*", "np", ".", "cos", "(", "self", ".", "angle", ")", ",", "\n", "self", ".", "speed", "*", "np", ".", "sin", "(", "self", ".", "angle", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.dimensions": [[77, 85], ["None"], "methods", ["None"], ["", "def", "dimensions", "(", "self", ",", "angle", ")", ":", "\n", "        ", "\"\"\"\n        To be implemented by subclasses.\n\n        Radial distance from center point to the edge \n        of this movable at the given angle.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.render": [[86, 93], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        To be implemented by subclasses.\n\n        How to render the movable.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.move": [[94, 109], ["str", "ValueError"], "methods", ["None"], ["", "def", "move", "(", "self", ",", "dt", "=", "0.001", ",", "position", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Translational movement for the movable.\n\n        Set dt > 0.0 to make the movable move at its current speed.\n        Set dt is None to set position to given position.\n        \"\"\"", "\n", "assert", "dt", ">=", "0", "or", "dt", "is", "None", ",", "'dt = '", "+", "str", "(", "dt", ")", "\n", "\n", "if", "dt", "is", "None", ":", "\n", "            ", "if", "position", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"Position must be specified when dt is None.\"", ")", "\n", "", "self", ".", "position", "=", "position", "\n", "", "else", ":", "\n", "            ", "self", ".", "position", "+=", "self", ".", "velocity", "*", "dt", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.turn": [[110, 125], ["ValueError"], "methods", ["None"], ["", "", "def", "turn", "(", "self", ",", "dt", "=", "0.001", ",", "angle", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Rotational movement for the movable.\n\n        Set dt > 0.0 to make the movable turn counterclockwise.\n        Set dt < 0.0 to make the movable turn clockwise.\n        Set dt is None to set angle to given angle.\n        \"\"\"", "\n", "\n", "if", "dt", "is", "None", ":", "\n", "            ", "if", "angle", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"Angle must be specified when dt is None.\"", ")", "\n", "", "self", ".", "angle", "=", "angle", "\n", "", "else", ":", "\n", "            ", "self", ".", "angle", "+=", "(", "self", ".", "turn_rate", "*", "dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.accelerate": [[126, 143], ["None"], "methods", ["None"], ["", "", "def", "accelerate", "(", "self", ",", "dt", "=", "0.001", ")", ":", "\n", "        ", "\"\"\"\n        Increase movement speed.\n\n        Discrete: set speed to max_speed.\n        Continuous: increase speed proportional to force.\n                    If max_speed was set, speed will max out at max_speed.\n        \"\"\"", "\n", "if", "self", ".", "force", "is", "None", ":", "\n", "            ", "self", ".", "speed", "=", "self", ".", "max_speed", "\n", "", "else", ":", "\n", "            ", "ds", "=", "self", ".", "force", "/", "self", ".", "mass", "*", "dt", "\n", "speed", "=", "self", ".", "speed", "+", "ds", "\n", "if", "self", ".", "max_speed", "is", "not", "None", "and", "speed", ">", "self", ".", "max_speed", ":", "\n", "                ", "self", ".", "speed", "=", "self", ".", "max_speed", "\n", "", "else", ":", "\n", "                ", "self", ".", "speed", "=", "speed", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.slow": [[144, 160], ["abs", "numpy.sign"], "methods", ["None"], ["", "", "", "def", "slow", "(", "self", ",", "dt", "=", "0.001", ")", ":", "\n", "        ", "\"\"\"\n        Reduce absolute movement speed to come to a standstill.\n        \n        Discrete: set speed to zero.\n        Continuous: reduce speed proportional to force.\n        \"\"\"", "\n", "if", "self", ".", "force", "is", "None", ":", "\n", "            ", "self", ".", "speed", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "if", "not", "self", ".", "speed", "==", "0.0", ":", "\n", "                ", "ds", "=", "self", ".", "force", "/", "self", ".", "mass", "*", "dt", "\n", "if", "ds", "<", "abs", "(", "self", ".", "speed", ")", ":", "\n", "                    ", "self", ".", "speed", "-=", "np", ".", "sign", "(", "self", ".", "speed", ")", "*", "ds", "\n", "", "else", ":", "\n", "                    ", "self", ".", "speed", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.decelerate": [[161, 178], ["None"], "methods", ["None"], ["", "", "", "", "def", "decelerate", "(", "self", ",", "dt", "=", "0.001", ")", ":", "\n", "        ", "\"\"\"\n        Reduce movement speed to go backwards.\n\n        Discrete: set speed to min_speed.\n        Continuous: increase speed proportional to force.\n                    If min_speed was set, speed will max out at min_speed.\n        \"\"\"", "\n", "if", "self", ".", "force", "is", "None", ":", "\n", "            ", "self", ".", "speed", "=", "self", ".", "min_speed", "\n", "", "else", ":", "\n", "            ", "ds", "=", "-", "self", ".", "force", "/", "self", ".", "mass", "*", "dt", "\n", "speed", "=", "self", ".", "speed", "+", "ds", "\n", "if", "self", ".", "min_speed", "is", "not", "None", "and", "speed", "<", "self", ".", "min_speed", ":", "\n", "                ", "self", ".", "speed", "=", "self", ".", "min_speed", "\n", "", "else", ":", "\n", "                ", "self", ".", "speed", "=", "speed", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.angle_to_point": [[179, 186], ["numpy.arctan2"], "methods", ["None"], ["", "", "", "def", "angle_to_point", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the angle at which the given point sits\n        relative to the position of this movable.\n        \"\"\"", "\n", "return", "np", ".", "arctan2", "(", "point", "[", "1", "]", "-", "self", ".", "position", "[", "1", "]", ",", "\n", "point", "[", "0", "]", "-", "self", ".", "position", "[", "0", "]", ")", "%", "(", "2.0", "*", "np", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.distance_to_point": [[187, 193], ["int", "numpy.linalg.norm"], "methods", ["None"], ["", "def", "distance_to_point", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the distance to a point from the position of this movable.\n        \"\"\"", "\n", "# unfortunate fix for floating point errors", "\n", "return", "int", "(", "np", ".", "linalg", ".", "norm", "(", "point", "-", "self", ".", "position", ")", "*", "1e6", "+", "0.5", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.point_on_obstacle_along_angle": [[194, 217], ["numpy.cos", "numpy.sin", "numpy.array", "ambigym.e_maze.utils.line_segment_line_segment_intersection", "ambigym.e_maze.utils.fuzzy_equal", "max", "movable.Movable.angle_to_point", "movable.Movable.distance_to_point", "movable.Movable.distance_to_point", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.line_segment_line_segment_intersection", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.fuzzy_equal", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.angle_to_point", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.distance_to_point", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.distance_to_point"], ["", "def", "point_on_obstacle_along_angle", "(", "self", ",", "obstacle", ",", "angle", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the intersection point of the radial line\n        from the position of this movable at the given angle\n        with the given obstacle.\n\n        (Only implemented for obstacles which are line segments.)\n        \"\"\"", "\n", "for", "p", "in", "obstacle", ".", "points", ":", "\n", "            ", "if", "fuzzy_equal", "(", "self", ".", "angle_to_point", "(", "p", ")", ",", "angle", ")", ":", "\n", "                ", "return", "p", "\n", "\n", "", "", "pnt1", "=", "self", ".", "position", "\n", "c", "=", "np", ".", "cos", "(", "angle", ")", "\n", "s", "=", "np", ".", "sin", "(", "angle", ")", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "c", ",", "-", "s", "]", ",", "[", "s", ",", "c", "]", "]", ")", "\n", "length", "=", "max", "(", "self", ".", "distance_to_point", "(", "obstacle", ".", "points", "[", "0", "]", ")", ",", "\n", "self", ".", "distance_to_point", "(", "obstacle", ".", "points", "[", "1", "]", ")", ")", "+", "0.5", "\n", "pnt2", "=", "R", "@", "np", ".", "array", "(", "[", "length", ",", "0.0", "]", ")", "+", "pnt1", "\n", "pnt3", "=", "obstacle", ".", "points", "[", "0", "]", "\n", "pnt4", "=", "obstacle", ".", "points", "[", "1", "]", "\n", "\n", "return", "line_segment_line_segment_intersection", "(", "pnt1", ",", "pnt2", ",", "pnt3", ",", "pnt4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.distance_to_obstacle_along_angle": [[218, 232], ["movable.Movable.point_on_obstacle_along_angle", "movable.Movable.distance_to_point"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.point_on_obstacle_along_angle", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.distance_to_point"], ["", "def", "distance_to_obstacle_along_angle", "(", "self", ",", "obstacle", ",", "angle", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the distance along the radial line \n        from the position of this movable at the given angle \n        to the given obstacle.\n\n        (Only implemented for obstacles which are line segments.)\n        \"\"\"", "\n", "point", "=", "self", ".", "point_on_obstacle_along_angle", "(", "obstacle", ",", "angle", ")", "\n", "\n", "if", "point", "is", "None", ":", "\n", "            ", "return", "np", ".", "inf", "\n", "\n", "", "return", "self", ".", "distance_to_point", "(", "point", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.points_of_obstacle_clockwise_of_point": [[233, 245], ["ambigym.e_maze.utils.orientation", "clockwise_points.append"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.orientation"], ["", "def", "points_of_obstacle_clockwise_of_point", "(", "self", ",", "obstacle", ",", "point", ")", ":", "\n", "        ", "\"\"\"\n        Obtain the list of vertices of the given obstacle \n        which lie in clockwise direction of the line \n        from the position of this movable to the given point.\n        \"\"\"", "\n", "clockwise_points", "=", "[", "]", "\n", "for", "p", "in", "obstacle", ".", "points", ":", "\n", "            ", "if", "orientation", "(", "self", ".", "position", ",", "point", ",", "p", ")", "<", "0", ":", "\n", "                ", "clockwise_points", ".", "append", "(", "p", ")", "\n", "\n", "", "", "return", "clockwise_points", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.points_of_obstacle_clockwise_of_angle": [[246, 258], ["movable.Movable.point_on_obstacle_along_angle", "movable.Movable.points_of_obstacle_clockwise_of_point"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.point_on_obstacle_along_angle", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.points_of_obstacle_clockwise_of_point"], ["", "def", "points_of_obstacle_clockwise_of_angle", "(", "self", ",", "obstacle", ",", "angle", ")", ":", "\n", "        ", "\"\"\"\n        Obtain the list of vertices of the given obstacle \n        which lie in clockwise direction of the radial line \n        from the position of this movable at the given angle.\n        \"\"\"", "\n", "point", "=", "self", ".", "point_on_obstacle_along_angle", "(", "obstacle", ",", "angle", ")", "\n", "\n", "if", "point", "is", "None", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "return", "self", ".", "points_of_obstacle_clockwise_of_point", "(", "obstacle", ",", "point", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.closest_distance_to_obstacle_clockwise_of_angle": [[259, 283], ["movable.Movable.point_on_obstacle_along_angle", "movable.Movable.points_of_obstacle_clockwise_of_point", "ambigym.e_maze.utils.distance_point_to_line_segment"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.point_on_obstacle_along_angle", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.points_of_obstacle_clockwise_of_point", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.distance_point_to_line_segment"], ["", "def", "closest_distance_to_obstacle_clockwise_of_angle", "(", "self", ",", "obstacle", ",", "angle", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the closest distance \n        from the position of this movable to the given obstacle \n        for the part of the obstacle which lies clockwise of the radial line \n        from the position of this movable at the given angle.\n\n        (Only implemented for obstacles which are line segments.)\n        \"\"\"", "\n", "closest_distance", "=", "np", ".", "inf", "\n", "\n", "point", "=", "self", ".", "point_on_obstacle_along_angle", "(", "obstacle", ",", "angle", ")", "\n", "\n", "if", "point", "is", "None", ":", "\n", "            ", "return", "closest_distance", "\n", "\n", "", "points", "=", "self", ".", "points_of_obstacle_clockwise_of_point", "(", "obstacle", ",", "point", ")", "\n", "\n", "for", "p", "in", "points", ":", "\n", "            ", "d", "=", "distance_point_to_line_segment", "(", "self", ".", "position", ",", "point", ",", "p", ")", "\n", "if", "d", "<", "closest_distance", ":", "\n", "                ", "closest_distance", "=", "d", "\n", "\n", "", "", "return", "closest_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.time_to_obstacle_collision": [[284, 301], ["movable.Movable.distance_to_obstacle_along_angle"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.distance_to_obstacle_along_angle"], ["", "def", "time_to_obstacle_collision", "(", "self", ",", "obstacle", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the time until this movable will collide \n        with the given obstacle.\n        \"\"\"", "\n", "if", "self", ".", "speed", "==", "0.0", ":", "\n", "            ", "return", "np", ".", "inf", "\n", "\n", "", "if", "self", ".", "speed", "<", "0.0", ":", "\n", "            ", "angle", "=", "(", "self", ".", "angle", "+", "np", ".", "pi", ")", "%", "(", "2.0", "*", "np", ".", "pi", ")", "\n", "speed", "=", "-", "self", ".", "speed", "\n", "", "else", ":", "\n", "            ", "angle", "=", "self", ".", "angle", "\n", "speed", "=", "self", ".", "speed", "\n", "\n", "", "distance", "=", "self", ".", "distance_to_obstacle_along_angle", "(", "obstacle", ",", "angle", ")", "\n", "return", "distance", "/", "speed", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.bounce_obstacle": [[302, 315], ["None"], "methods", ["None"], ["", "def", "bounce_obstacle", "(", "self", ",", "obstacle", ")", ":", "\n", "        ", "\"\"\"\n        Handle collision with the given obstacle.\n\n        Discrete: set speed to zero.\n        Continuous: elastic collision. (behavior is subject to change)\n        \"\"\"", "\n", "if", "self", ".", "force", "is", "None", ":", "\n", "            ", "self", ".", "speed", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "theta", "=", "obstacle", ".", "angle", "\n", "theta", "=", "theta", "-", "np", ".", "pi", "if", "theta", ">", "np", ".", "pi", "else", "theta", "\n", "self", ".", "angle", "=", "(", "2", "*", "theta", "-", "self", ".", "angle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.distance_to_entity": [[316, 321], ["movable.Movable.distance_to_point"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.distance_to_point"], ["", "", "def", "distance_to_entity", "(", "self", ",", "entity", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the distance to the given entity.\n        \"\"\"", "\n", "return", "self", ".", "distance_to_point", "(", "entity", ".", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.time_to_entity_collision": [[322, 345], ["movable.Movable.angle_to_point", "numpy.dot", "movable.Movable.dimensions", "entity.dimensions", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.angle_to_point", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.dimensions", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.dimensions"], ["", "def", "time_to_entity_collision", "(", "self", ",", "entity", ")", ":", "\n", "        ", "\"\"\"\n        Calculate the time until this movable will collide \n        with the given entity.\n        \"\"\"", "\n", "if", "self", ".", "speed", "==", "0.0", ":", "\n", "            ", "return", "np", ".", "inf", "\n", "\n", "", "dr", "=", "entity", ".", "position", "-", "self", ".", "position", "\n", "dv", "=", "entity", ".", "velocity", "-", "self", ".", "velocity", "\n", "\n", "if", "np", ".", "dot", "(", "dr", ",", "dv", ")", ">=", "0", ":", "\n", "            ", "return", "np", ".", "inf", "\n", "\n", "", "angle", "=", "self", ".", "angle_to_point", "(", "entity", ".", "position", ")", "\n", "angle2", "=", "(", "angle", "+", "np", ".", "pi", ")", "%", "(", "2.0", "*", "np", ".", "pi", ")", "\n", "sigma", "=", "self", ".", "dimensions", "(", "angle", ")", "+", "entity", ".", "dimensions", "(", "angle2", ")", "\n", "d", "=", "np", ".", "dot", "(", "dr", ",", "dv", ")", "**", "2", "-", "np", ".", "dot", "(", "dv", ",", "dv", ")", "*", "(", "np", ".", "dot", "(", "dr", ",", "dr", ")", "-", "sigma", "**", "2", ")", "\n", "\n", "if", "d", "<=", "0", ":", "\n", "            ", "return", "np", ".", "inf", "\n", "\n", "", "return", "-", "(", "np", ".", "dot", "(", "dr", ",", "dv", ")", "+", "np", ".", "sqrt", "(", "d", ")", ")", "/", "np", ".", "dot", "(", "dv", ",", "dv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.bounce_entity": [[346, 376], ["numpy.arctan2", "numpy.arctan2", "numpy.linalg.norm", "numpy.linalg.norm", "movable.Movable.dimensions", "entity.dimensions", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.dimensions", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.dimensions"], ["", "def", "bounce_entity", "(", "self", ",", "entity", ")", ":", "\n", "        ", "\"\"\"\n        Currently unused.\n\n        Handle collision with the given entity.\n\n        Discrete: set speed of both movables to zero.\n        Continuous: elastic collision. (behavior is subject to change)\n        \"\"\"", "\n", "if", "self", ".", "force", "is", "None", ":", "\n", "            ", "self", ".", "speed", "=", "0.0", "\n", "entity", ".", "speed", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "dr", "=", "entity", ".", "position", "-", "self", ".", "position", "\n", "dv", "=", "entity", ".", "velocity", "-", "self", ".", "velocity", "\n", "sigma", "=", "self", ".", "dimensions", "(", "angle", ")", "+", "entity", ".", "dimensions", "(", "angle2", ")", "\n", "\n", "J", "=", "2", "*", "self", ".", "mass", "*", "entity", ".", "mass", "*", "np", ".", "dot", "(", "dr", ",", "dv", ")", "/", "sigma", "/", "(", "self", ".", "mass", "+", "entity", ".", "mass", ")", "\n", "vJ", "=", "J", "*", "dr", "/", "sigma", "\n", "v1", "=", "self", ".", "velocity", "+", "vJ", "/", "self", ".", "mass", "\n", "v2", "=", "entity", ".", "velocity", "-", "vJ", "/", "entity", ".", "mass", "\n", "\n", "self", ".", "angle", "=", "np", ".", "arctan2", "(", "v1", "[", "1", "]", ",", "v1", "[", "0", "]", ")", "\n", "entity", ".", "angle", "=", "np", ".", "arctan2", "(", "v2", "[", "1", "]", ",", "v2", "[", "0", "]", ")", "\n", "\n", "speed1", "=", "np", ".", "linalg", ".", "norm", "(", "v1", ")", "\n", "self", ".", "speed", "=", "speed1", "\n", "speed2", "=", "np", ".", "linalg", ".", "norm", "(", "v2", ")", "\n", "entity", ".", "speed", "=", "speed2", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.obstacle_collision": [[377, 384], ["None"], "methods", ["None"], ["", "", "def", "obstacle_collision", "(", "self", ",", "obstacle", ")", ":", "\n", "        ", "\"\"\"\n        To be implemented by subclasses.\n\n        Resolve collision with the given obstacle.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.entity_collision": [[385, 392], ["None"], "methods", ["None"], ["", "def", "entity_collision", "(", "self", ",", "entity", ")", ":", "\n", "        ", "\"\"\"\n        To be implemented by subclasses.\n\n        Resolve collision with the given entity.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.sort_obstacle_endpoint_angles": [[393, 404], ["list", "list.sort", "list.append", "movable.Movable.angle_to_point", "set"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.angle_to_point"], ["", "def", "sort_obstacle_endpoint_angles", "(", "self", ",", "obstacles", ")", ":", "\n", "        ", "\"\"\"\n        Sort vertices of a list of obstacles according to the angle\n        relative to the position of this movable.\n        \"\"\"", "\n", "points", "=", "[", "p", "for", "o", "in", "obstacles", "for", "p", "in", "o", ".", "points", "]", "\n", "point_angles", "=", "[", "self", ".", "angle_to_point", "(", "p", ")", "for", "p", "in", "points", "]", "\n", "filtered_angles", "=", "list", "(", "set", "(", "point_angles", ")", ")", "\n", "filtered_angles", ".", "sort", "(", ")", "\n", "filtered_angles", ".", "append", "(", "filtered_angles", "[", "0", "]", ")", "\n", "return", "filtered_angles", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.consume": [[405, 408], ["None"], "methods", ["None"], ["", "def", "consume", "(", "self", ")", ":", "\n", "        ", "\"\"\"Consume this movable.\"\"\"", "\n", "self", ".", "consumed", "=", "True", "", "", "", ""]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.cheese.Cheese.__init__": [[12, 15], ["Movable.__init__"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.__init__"], ["def", "__init__", "(", "self", ",", "position", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "position", ",", "max_speed", "=", "0.0", ",", "mass", "=", "5", ")", "\n", "self", ".", "radius", "=", "0.2", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.cheese.Cheese.dimensions": [[16, 18], ["None"], "methods", ["None"], ["", "def", "dimensions", "(", "self", ",", "angle", ")", ":", "\n", "        ", "return", "self", ".", "radius", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.cheese.Cheese.render": [[19, 24], ["tuple", "int", "cv2.circle"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "image", ",", "unit_length", ")", ":", "\n", "        ", "center", "=", "tuple", "(", "(", "self", ".", "position", "*", "unit_length", ")", ".", "astype", "(", "int", ")", ")", "\n", "radius", "=", "int", "(", "self", ".", "radius", "*", "unit_length", ")", "\n", "color", "=", "YELLOW", "\n", "cv2", ".", "circle", "(", "image", ",", "center", ",", "radius", ",", "color", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.cheese.Cheese.obstacle_collision": [[25, 27], ["cheese.Cheese.bounce_obstacle"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.bounce_obstacle"], ["", "def", "obstacle_collision", "(", "self", ",", "obstacle", ")", ":", "\n", "        ", "self", ".", "bounce_obstacle", "(", "obstacle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.cheese.Cheese.entity_collision": [[28, 30], ["None"], "methods", ["None"], ["", "def", "entity_collision", "(", "self", ",", "entity", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.__init__": [[15, 30], ["Movable.__init__"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.__init__"], ["def", "__init__", "(", "\n", "self", ",", "position", ",", "angle", "=", "np", ".", "pi", "/", "2.0", ",", "speed", "=", "0.0", ",", "fov", "=", "1.1", "*", "np", ".", "pi", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "position", ",", "\n", "angle", "=", "angle", ",", "\n", "speed", "=", "speed", ",", "\n", "turn_rate", "=", "2", "*", "np", ".", "pi", ",", "\n", "max_speed", "=", "1", ",", "\n", "min_speed", "=", "-", "0.2", ",", "\n", "mass", "=", "0.02", ",", "\n", ")", "\n", "self", ".", "head_size", "=", "0.1", "\n", "self", ".", "hip_size", "=", "0.05", "\n", "self", ".", "fov", "=", "fov", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.dimensions": [[31, 54], ["numpy.array", "numpy.array", "numpy.cos", "numpy.sin", "numpy.array", "ambigym.e_maze.utils.line_segment_line_segment_intersection", "ambigym.e_maze.utils.line_segment_line_segment_intersection", "ambigym.e_maze.utils.line_segment_line_segment_intersection", "min", "numpy.array", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.line_segment_line_segment_intersection", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.line_segment_line_segment_intersection", "home.repos.pwc.inspect_result.thesmartrobot_ambigym.e_maze.utils.line_segment_line_segment_intersection"], ["", "def", "dimensions", "(", "self", ",", "angle", ")", ":", "\n", "        ", "\"\"\"\n        Radial distance from center to edge at a given angle.\n        \"\"\"", "\n", "ori", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "rad", "=", "np", ".", "array", "(", "[", "self", ".", "head_size", "+", "self", ".", "hip_size", ",", "0", "]", ")", "\n", "\n", "c", "=", "np", ".", "cos", "(", "self", ".", "angle", "-", "angle", ")", "\n", "s", "=", "np", ".", "sin", "(", "self", ".", "angle", "-", "angle", ")", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "c", ",", "-", "s", "]", ",", "[", "s", ",", "c", "]", "]", ")", "\n", "pt1", "=", "R", "@", "np", ".", "array", "(", "[", "self", ".", "head_size", ",", "0.0", "]", ")", "\n", "pt2", "=", "R", "@", "np", ".", "array", "(", "[", "-", "self", ".", "head_size", ",", "self", ".", "hip_size", "]", ")", "\n", "pt3", "=", "R", "@", "np", ".", "array", "(", "[", "-", "self", ".", "head_size", ",", "-", "self", ".", "hip_size", "]", ")", "\n", "\n", "i1", "=", "line_segment_line_segment_intersection", "(", "ori", ",", "rad", ",", "pt1", ",", "pt2", ")", "\n", "i2", "=", "line_segment_line_segment_intersection", "(", "ori", ",", "rad", ",", "pt2", ",", "pt3", ")", "\n", "i3", "=", "line_segment_line_segment_intersection", "(", "ori", ",", "rad", ",", "pt3", ",", "pt1", ")", "\n", "\n", "dist1", "=", "np", ".", "linalg", ".", "norm", "(", "i1", ")", "if", "i1", "is", "not", "None", "else", "np", ".", "inf", "\n", "dist2", "=", "np", ".", "linalg", ".", "norm", "(", "i2", ")", "if", "i2", "is", "not", "None", "else", "np", ".", "inf", "\n", "dist3", "=", "np", ".", "linalg", ".", "norm", "(", "i3", ")", "if", "i3", "is", "not", "None", "else", "np", ".", "inf", "\n", "\n", "return", "min", "(", "dist1", ",", "dist2", ",", "dist3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.render": [[55, 73], ["numpy.cos", "numpy.sin", "numpy.array", "numpy.vstack().astype", "numpy.vstack().astype.reshape", "cv2.polylines", "cv2.fillPoly", "numpy.vstack", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "image", ",", "unit_length", ")", ":", "\n", "        ", "c", "=", "np", ".", "cos", "(", "self", ".", "angle", ")", "\n", "s", "=", "np", ".", "sin", "(", "self", ".", "angle", ")", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "c", ",", "-", "s", "]", ",", "[", "s", ",", "c", "]", "]", ")", "\n", "pt1", "=", "(", "\n", "self", ".", "position", "+", "R", "@", "np", ".", "array", "(", "[", "self", ".", "head_size", ",", "0.0", "]", ")", "\n", ")", "*", "unit_length", "\n", "pt2", "=", "(", "\n", "self", ".", "position", "+", "R", "@", "np", ".", "array", "(", "[", "-", "self", ".", "head_size", ",", "self", ".", "hip_size", "]", ")", "\n", ")", "*", "unit_length", "\n", "pt3", "=", "(", "\n", "self", ".", "position", "+", "R", "@", "np", ".", "array", "(", "[", "-", "self", ".", "head_size", ",", "-", "self", ".", "hip_size", "]", ")", "\n", ")", "*", "unit_length", "\n", "vertices", "=", "np", ".", "vstack", "(", "(", "pt1", ",", "pt2", ",", "pt3", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "pts", "=", "vertices", ".", "reshape", "(", "(", "-", "1", ",", "1", ",", "2", ")", ")", "\n", "color", "=", "GREY", "\n", "cv2", ".", "polylines", "(", "image", ",", "[", "pts", "]", ",", "True", ",", "color", ",", "2", ")", "\n", "cv2", ".", "fillPoly", "(", "image", ",", "[", "pts", "]", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.time_to_obstacle_collision": [[74, 85], ["super().time_to_obstacle_collision"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.time_to_obstacle_collision"], ["", "def", "time_to_obstacle_collision", "(", "self", ",", "obstacle", ")", ":", "\n", "# TODO: consider angular speed?", "\n", "        ", "if", "self", ".", "speed", "==", "0.0", ":", "\n", "            ", "return", "np", ".", "inf", "\n", "\n", "", "point_time", "=", "super", "(", ")", ".", "time_to_obstacle_collision", "(", "obstacle", ")", "\n", "\n", "speed", "=", "-", "self", ".", "speed", "if", "self", ".", "speed", "<", "0.0", "else", "self", ".", "speed", "\n", "size_time", "=", "self", ".", "head_size", "/", "speed", "\n", "\n", "return", "point_time", "-", "size_time", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.time_to_entity_collision": [[86, 89], ["super().time_to_entity_collision"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.time_to_entity_collision"], ["", "def", "time_to_entity_collision", "(", "self", ",", "entity", ")", ":", "\n", "# TODO: consider angular speed?", "\n", "        ", "return", "super", "(", ")", ".", "time_to_entity_collision", "(", "entity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.obstacle_collision": [[90, 93], ["mouse.Mouse.bounce_obstacle"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.bounce_obstacle"], ["", "def", "obstacle_collision", "(", "self", ",", "obstacle", ")", ":", "\n", "        ", "\"\"\"Resolve collision with an obstacle (immovable).\"\"\"", "\n", "self", ".", "bounce_obstacle", "(", "obstacle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.entity_collision": [[94, 98], ["isinstance", "entity.consume"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.movable.Movable.consume"], ["", "def", "entity_collision", "(", "self", ",", "entity", ")", ":", "\n", "        ", "\"\"\"Resolve collision with an entity (movable).\"\"\"", "\n", "if", "isinstance", "(", "entity", ",", "Cheese", ")", ":", "\n", "            ", "entity", ".", "consume", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.sort_obstacle_endpoint_angles": [[99, 117], ["super().sort_obstacle_endpoint_angles", "filtered_angles.insert", "filtered_angles.append"], "methods", ["home.repos.pwc.inspect_result.thesmartrobot_ambigym.objects.mouse.Mouse.sort_obstacle_endpoint_angles"], ["", "", "def", "sort_obstacle_endpoint_angles", "(", "self", ",", "obstacles", ")", ":", "\n", "        ", "\"\"\"\n        Sort a list of obstacles (immovable) by clockwise angle\n        with angle (facing direction) of the mouse.\n        \"\"\"", "\n", "angles", "=", "super", "(", ")", ".", "sort_obstacle_endpoint_angles", "(", "obstacles", ")", "\n", "angles", "=", "angles", "[", ":", "-", "1", "]", "\n", "left", "=", "(", "self", ".", "angle", "-", "self", ".", "fov", "/", "2", ")", "%", "(", "2.0", "*", "np", ".", "pi", ")", "\n", "right", "=", "(", "self", ".", "angle", "+", "self", ".", "fov", "/", "2", ")", "%", "(", "2.0", "*", "np", ".", "pi", ")", "\n", "if", "left", "<", "right", ":", "\n", "            ", "filtered_angles", "=", "[", "a", "for", "a", "in", "angles", "if", "left", "<", "a", "<", "right", "]", "\n", "", "else", ":", "\n", "            ", "left_angles", "=", "[", "a", "for", "a", "in", "angles", "if", "left", "<", "a", "]", "\n", "right_angles", "=", "[", "a", "for", "a", "in", "angles", "if", "a", "<", "right", "]", "\n", "filtered_angles", "=", "left_angles", "+", "right_angles", "\n", "", "filtered_angles", ".", "insert", "(", "0", ",", "left", ")", "\n", "filtered_angles", ".", "append", "(", "right", ")", "\n", "return", "filtered_angles", "\n", "", "", ""]]}