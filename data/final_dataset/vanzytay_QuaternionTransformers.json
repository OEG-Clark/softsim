{"home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.LshGating.__init__": [[1080, 1117], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.constant", "quaternion_attention.LshGating._idx_to_bits", "six.moves.range"], "methods", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.LshGating._idx_to_bits"], ["def", "__init__", "(", "self", ",", "depth", ",", "nb_hyperplanes", ",", "nb_replicat", "=", "1", ",", "trainable", "=", "False", ")", ":", "\n", "    ", "\"\"\"Construct the gating function parameters.\n\n    Compute the gates for a single head.\n\n    Args:\n      depth (int): Dimension of the key/queries to dispatch\n      nb_hyperplanes (int): Nb of vectors use to split the space. Will determine\n        the number of buckets (2^nb_hyperplanes - 1).\n      nb_replicat (int): Redundancy to avoid the edge cases (to be in one bucket\n        the input should be in a majority)\n      trainable (bool): If True, a balance loss is added to force the hyperplane\n        to divide the key/query space evenly\n    \"\"\"", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "nb_hyperplanes", "=", "nb_hyperplanes", "\n", "self", ".", "nb_buckets", "=", "2", "**", "nb_hyperplanes", "\n", "self", ".", "nb_replicat", "=", "nb_replicat", "# Unused for now", "\n", "self", ".", "trainable", "=", "trainable", "# Unused for now", "\n", "\n", "self", ".", "dispatchers", "=", "{", "}", "\n", "\n", "assert", "self", ".", "nb_replicat", "==", "1", "# For now", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"lsh_gating\"", ")", ":", "\n", "# Vectors defining the hyperplanes", "\n", "      ", "self", ".", "t_vectors", "=", "tf", ".", "get_variable", "(", "\n", "\"vector\"", ",", "\n", "shape", "=", "(", "self", ".", "depth", ",", "self", ".", "nb_hyperplanes", "*", "self", ".", "nb_replicat", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "trainable", "=", "self", ".", "trainable", ",", "\n", ")", "\n", "# Projection vector from the bit space to similarity score space", "\n", "self", ".", "t_group", "=", "tf", ".", "constant", "(", "\n", "[", "self", ".", "_idx_to_bits", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "nb_buckets", ")", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "name", "=", "\"group\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.LshGating._idx_to_bits": [[1118, 1122], ["[].zfill", "bin"], "methods", ["None"], ["", "", "def", "_idx_to_bits", "(", "self", ",", "i", ")", ":", "\n", "    ", "\"\"\"Convert an group index to its bit representation.\"\"\"", "\n", "bits", "=", "bin", "(", "i", ")", "[", "2", ":", "]", ".", "zfill", "(", "self", ".", "nb_hyperplanes", ")", "# Pad the bits str with 0", "\n", "return", "[", "-", "1.0", "if", "b", "==", "\"0\"", "else", "1.0", "for", "b", "in", "bits", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.LshGating.get_gates": [[1123, 1155], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.stop_gradient", "tensorflow.matmul", "tensorflow.sign", "tensorflow.argmax", "tensorflow.one_hot", "tensorflow.matmul"], "methods", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", "\"lsh_gating\"", ")", "\n", "def", "get_gates", "(", "self", ",", "x", ")", ":", "\n", "    ", "\"\"\"Return the bucket id of the given tensor.\n\n    Args:\n      x (tf.Tensor): float32 of shape [length, depth]\n\n    Returns:\n      tf.Tensor: One-hot vector int64 of shape [heads, length, nb_buckets]\n        containing the id of the bucket\n    \"\"\"", "\n", "\n", "# The balance loss don't propagate to the rest of the network", "\n", "x", "=", "tf", ".", "stop_gradient", "(", "x", ")", "\n", "# [length, depth] * [depth, nb_vectors * replicat]", "\n", "x", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "t_vectors", ")", "\n", "# [length, nb_vector * replicat]", "\n", "x", "=", "tf", ".", "sign", "(", "x", ")", "# Get on which side of the hyperplane the keys are.", "\n", "\n", "# x = tf.reshape(x, [-1, nb_replicat, nb_vector])", "\n", "# [length, replicat, nb_vector] * [nb_vector, 2^nb_vector - 1]", "\n", "\n", "x", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "t_group", ",", "transpose_b", "=", "True", ")", "/", "self", ".", "nb_hyperplanes", "\n", "# We get a similarity score for each of the group between [-1, 1]", "\n", "# [length, (replicat,) 2^nb_vector - 1]", "\n", "# Do an argmax to get the most likely group for each replicat", "\n", "x", "=", "tf", ".", "argmax", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", "# [length(, replicat)]", "\n", "# One-hot for compatibility with the sparse dispatcher", "\n", "x", "=", "tf", ".", "one_hot", "(", "x", ",", "self", ".", "nb_buckets", ")", "\n", "# TODO(epot): Use a loss to force an even distribution", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.compute_attention_component": [[27, 75], ["antecedent.get_shape().as_list", "tensorflow.get_variable", "tensorflow.cast", "tensorflow.reshape", "tensorflow.tensordot", "quarternion_ffn_3d", "tensor2tensor.layers.common_layers.conv1d", "antecedent.get_shape().as_list", "antecedent.get_shape", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer", "antecedent.get_shape"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_ffn_3d"], ["def", "compute_attention_component", "(", "antecedent", ",", "\n", "total_depth", ",", "\n", "filter_width", "=", "1", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"c\"", ",", "\n", "vars_3d_num_heads", "=", "0", ")", ":", "\n", "  ", "\"\"\"Computes attention compoenent (query, key or value).\n\n  Args:\n    antecedent: a Tensor with shape [batch, length, channels]\n    total_depth: an integer\n    filter_width: An integer specifying how wide you want the attention\n      component to be.\n    padding: One of \"VALID\", \"SAME\" or \"LEFT\". Default is VALID: No padding.\n    name: a string specifying scope name.\n    vars_3d_num_heads: an optional integer (if we want to use 3d variables)\n\n  Returns:\n    c : [batch, length, depth] tensor\n  \"\"\"", "\n", "input_depth", "=", "antecedent", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "initializer_stddev", "=", "input_depth", "**", "-", "0.5", "\n", "if", "\"q\"", "in", "name", ":", "\n", "    ", "depth_per_head", "=", "total_depth", "\n", "initializer_stddev", "*=", "depth_per_head", "**", "-", "0.5", "\n", "", "if", "vars_3d_num_heads", ">", "0", ":", "\n", "    ", "assert", "filter_width", "==", "1", "\n", "input_depth", "=", "antecedent", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "depth_per_head", "=", "total_depth", "//", "vars_3d_num_heads", "\n", "initializer_stddev", "=", "input_depth", "**", "-", "0.5", "\n", "if", "\"q\"", "in", "name", ":", "\n", "      ", "initializer_stddev", "*=", "depth_per_head", "**", "-", "0.5", "\n", "", "var", "=", "tf", ".", "get_variable", "(", "\n", "name", ",", "[", "input_depth", ",", "\n", "vars_3d_num_heads", ",", "\n", "total_depth", "//", "vars_3d_num_heads", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "initializer_stddev", ")", ")", "\n", "var", "=", "tf", ".", "cast", "(", "var", ",", "antecedent", ".", "dtype", ")", "\n", "var", "=", "tf", ".", "reshape", "(", "var", ",", "[", "input_depth", ",", "total_depth", "]", ")", "\n", "return", "tf", ".", "tensordot", "(", "antecedent", ",", "var", ",", "axes", "=", "1", ")", "\n", "", "if", "filter_width", "==", "1", ":", "\n", "      ", "return", "quarternion_ffn_3d", "(", "antecedent", ",", "total_depth", ",", "name", "=", "name", ",", "\n", "init", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "initializer_stddev", ")", ")", "\n", "# return common_layers.dense(", "\n", "#     antecedent, total_depth, use_bias=False, name=name)", "\n", "", "else", ":", "\n", "    ", "return", "common_layers", ".", "conv1d", "(", "\n", "antecedent", ",", "total_depth", ",", "filter_width", ",", "padding", "=", "padding", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.compute_qkv": [[76, 126], ["quaternion_attention.compute_attention_component", "quaternion_attention.compute_attention_component", "quaternion_attention.compute_attention_component"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.compute_attention_component", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.compute_attention_component", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.compute_attention_component"], ["", "", "def", "compute_qkv", "(", "query_antecedent", ",", "\n", "memory_antecedent", ",", "\n", "total_key_depth", ",", "\n", "total_value_depth", ",", "\n", "q_filter_width", "=", "1", ",", "\n", "kv_filter_width", "=", "1", ",", "\n", "q_padding", "=", "\"VALID\"", ",", "\n", "kv_padding", "=", "\"VALID\"", ",", "\n", "vars_3d_num_heads", "=", "0", ")", ":", "\n", "  ", "\"\"\"Computes query, key and value.\n\n  Args:\n    query_antecedent: a Tensor with shape [batch, length_q, channels]\n    memory_antecedent: a Tensor with shape [batch, length_m, channels]\n    total_key_depth: an integer\n    total_value_depth: an integer\n    q_filter_width: An integer specifying how wide you want the query to be.\n    kv_filter_width: An integer specifying how wide you want the keys and values\n    to be.\n    q_padding: One of \"VALID\", \"SAME\" or \"LEFT\". Default is VALID: No padding.\n    kv_padding: One of \"VALID\", \"SAME\" or \"LEFT\". Default is VALID: No padding.\n    vars_3d_num_heads: an optional (if we want to use 3d variables)\n\n  Returns:\n    q, k, v : [batch, length, depth] tensors\n  \"\"\"", "\n", "if", "memory_antecedent", "is", "None", ":", "\n", "    ", "memory_antecedent", "=", "query_antecedent", "\n", "", "q", "=", "compute_attention_component", "(", "\n", "query_antecedent", ",", "\n", "total_key_depth", ",", "\n", "q_filter_width", ",", "\n", "q_padding", ",", "\n", "\"q\"", ",", "\n", "vars_3d_num_heads", "=", "vars_3d_num_heads", ")", "\n", "k", "=", "compute_attention_component", "(", "\n", "memory_antecedent", ",", "\n", "total_key_depth", ",", "\n", "kv_filter_width", ",", "\n", "kv_padding", ",", "\n", "\"k\"", ",", "\n", "vars_3d_num_heads", "=", "vars_3d_num_heads", ")", "\n", "v", "=", "compute_attention_component", "(", "\n", "memory_antecedent", ",", "\n", "total_value_depth", ",", "\n", "kv_filter_width", ",", "\n", "kv_padding", ",", "\n", "\"v\"", ",", "\n", "vars_3d_num_heads", "=", "vars_3d_num_heads", ")", "\n", "return", "q", ",", "k", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.multihead_attention": [[127, 399], ["ValueError", "ValueError", "tensorflow.variable_scope", "quaternion_attention.split_heads", "callable", "quaternion_attention.combine_heads", "quaternion_attention..set_shape", "quaternion_attention.compute_qkv", "quaternion_attention.split_heads", "quaternion_attention.split_heads", "attention_type", "isinstance", "tensorflow.get_variable", "tensorflow.cast", "tensorflow.reshape", "tensorflow.tensordot", "quarternion_ffn_3d", "NotImplementedError", "ValueError", "quaternion_attention.compute_attention_component", "quaternion_attention.split_heads", "quaternion_attention.split_heads", "kwargs.get", "quaternion_attention.dot_product_attention", "tensorflow.concat", "tensorflow.concat", "tensorflow.transpose", "tensorflow.python.ops.inplace_ops.alias_inplace_update", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.python.ops.inplace_ops.alias_inplace_update", "tensorflow.transpose", "print", "quaternion_attention.quaternion_dot_product_attention", "quaternion_attention..shape.as_list", "tensorflow.random_normal_initializer", "tensorflow.squeeze", "tensorflow.squeeze", "quaternion_attention.dot_product_attention_relative", "quaternion_attention..", "quaternion_attention..", "quaternion_attention.masked_within_block_local_attention_1d", "quaternion_attention.masked_relative_local_attention_1d", "quaternion_attention.masked_local_attention_1d", "quaternion_attention.local_attention_1d", "quaternion_attention..", "quaternion_attention.."], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.compute_qkv", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_ffn_3d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.compute_attention_component", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_attention", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.quaternion_dot_product_attention", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_attention_relative", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.masked_within_block_local_attention_1d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.masked_relative_local_attention_1d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.masked_local_attention_1d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.local_attention_1d"], ["", "def", "multihead_attention", "(", "query_antecedent", ",", "\n", "memory_antecedent", ",", "\n", "bias", ",", "\n", "total_key_depth", ",", "\n", "total_value_depth", ",", "\n", "output_depth", ",", "\n", "num_heads", ",", "\n", "dropout_rate", ",", "\n", "attention_type", "=", "\"dot_product\"", ",", "\n", "max_relative_position", "=", "None", ",", "\n", "heads_share_relative_embedding", "=", "False", ",", "\n", "add_relative_to_values", "=", "False", ",", "\n", "image_shapes", "=", "None", ",", "\n", "block_length", "=", "128", ",", "\n", "block_width", "=", "128", ",", "\n", "q_filter_width", "=", "1", ",", "\n", "kv_filter_width", "=", "1", ",", "\n", "q_padding", "=", "\"VALID\"", ",", "\n", "kv_padding", "=", "\"VALID\"", ",", "\n", "cache", "=", "None", ",", "\n", "gap_size", "=", "0", ",", "\n", "num_memory_blocks", "=", "2", ",", "\n", "name", "=", "\"multihead_attention\"", ",", "\n", "save_weights_to", "=", "None", ",", "\n", "make_image_summary", "=", "True", ",", "\n", "dropout_broadcast_dims", "=", "None", ",", "\n", "vars_3d", "=", "False", ",", "\n", "is_training", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Multihead scaled-dot-product attention with input/output transformations.\n\n  Args:\n    query_antecedent: a Tensor with shape [batch, length_q, channels]\n    memory_antecedent: a Tensor with shape [batch, length_m, channels] or None\n    bias: bias Tensor (see attention_bias())\n    total_key_depth: an integer\n    total_value_depth: an integer\n    output_depth: an integer\n    num_heads: an integer dividing total_key_depth and total_value_depth\n    dropout_rate: a floating point number\n    attention_type: a string, either \"dot_product\", \"dot_product_relative\",\n                    \"local_mask_right\", \"local_unmasked\", \"masked_dilated_1d\",\n                    \"unmasked_dilated_1d\", graph, or any attention function\n                    with the signature (query, key, value, **kwargs)\n    max_relative_position: Maximum distance between inputs to generate\n                           unique relation embeddings for. Only relevant\n                           when using \"dot_product_relative\" attention.\n    heads_share_relative_embedding: boolean to share relative embeddings\n    add_relative_to_values: a boolean for whether to add relative component to\n                            values.\n    image_shapes: optional tuple of integer scalars.\n                  see comments for attention_image_summary()\n    block_length: an integer - relevant for \"local_mask_right\"\n    block_width: an integer - relevant for \"local_unmasked\"\n    q_filter_width: An integer specifying how wide you want the query to be.\n    kv_filter_width: An integer specifying how wide you want the keys and values\n                     to be.\n    q_padding: One of \"VALID\", \"SAME\" or \"LEFT\". Default is VALID: No padding.\n               kv_padding: One of \"VALID\", \"SAME\" or \"LEFT\". Default is \"VALID\":\n               no padding.\n    cache: dict containing Tensors which are the results of previous\n           attentions, used for fast decoding. Expects the dict to contrain two\n           keys ('k' and 'v'), for the initial call the values for these keys\n           should be empty Tensors of the appropriate shape.\n               'k' [batch_size, 0, key_channels]\n               'v' [batch_size, 0, value_channels]\n    gap_size: Integer option for dilated attention to indicate spacing between\n              memory blocks.\n    num_memory_blocks: Integer option to indicate how many memory blocks to look\n                       at.\n    name: an optional string.\n    save_weights_to: an optional dictionary to capture attention weights\n      for vizualization; the weights tensor will be appended there under\n      a string key created from the variable scope (including name).\n    make_image_summary: Whether to make an attention image summary.\n    dropout_broadcast_dims:  an optional list of integers less than 4\n      specifying in which dimensions to broadcast the dropout decisions.\n      saves memory.\n    vars_3d: use 3-dimensional variables for input/output transformations\n    **kwargs (dict): Parameters for the attention function\n\n  Caching:\n    WARNING: For decoder self-attention, i.e. when memory_antecedent == None,\n    the caching assumes that the bias contains future masking.\n\n    The caching works by saving all the previous key and value values so that\n    you are able to send just the last query location to this attention\n    function. I.e. if the cache dict is provided it assumes the query is of the\n    shape [batch_size, 1, hidden_dim] rather than the full memory.\n\n  Returns:\n    The result of the attention transformation. The output shape is\n        [batch_size, length_q, hidden_dim]\n    unless the cache dict is provided in which case only the last memory\n    position is calculated and the output shape is [batch_size, 1, hidden_dim]\n    Optionally returns an additional loss parameters (ex: load balance loss for\n    the experts) returned by the attention_type function.\n\n  Raises:\n    ValueError: if the key depth or value depth are not divisible by the\n      number of attention heads.\n  \"\"\"", "\n", "\n", "if", "total_key_depth", "%", "num_heads", "!=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Key depth (%d) must be divisible by the number of \"", "\n", "\"attention heads (%d).\"", "%", "(", "total_key_depth", ",", "num_heads", ")", ")", "\n", "", "if", "total_value_depth", "%", "num_heads", "!=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Value depth (%d) must be divisible by the number of \"", "\n", "\"attention heads (%d).\"", "%", "(", "total_value_depth", ",", "num_heads", ")", ")", "\n", "", "vars_3d_num_heads", "=", "num_heads", "if", "vars_3d", "else", "0", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"multihead_attention\"", ",", "\n", "values", "=", "[", "query_antecedent", ",", "memory_antecedent", "]", ")", ":", "\n", "\n", "    ", "if", "cache", "is", "None", "or", "memory_antecedent", "is", "None", ":", "\n", "      ", "q", ",", "k", ",", "v", "=", "compute_qkv", "(", "query_antecedent", ",", "memory_antecedent", ",", "\n", "total_key_depth", ",", "total_value_depth", ",", "q_filter_width", ",", "\n", "kv_filter_width", ",", "q_padding", ",", "kv_padding", ",", "\n", "vars_3d_num_heads", "=", "vars_3d_num_heads", ")", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "      ", "if", "attention_type", "not", "in", "[", "\"dot_product\"", ",", "\"dot_product_relative\"", ",", "\"quaternion_dot_product\"", "]", ":", "\n", "# TODO(petershaw): Support caching when using relative position", "\n", "# representations, i.e. \"dot_product_relative\" attention.", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"Caching is not guaranteed to work with attention types other than\"", "\n", "\" dot_product.\"", ")", "\n", "", "if", "bias", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"Bias required for caching. See function docstring \"", "\n", "\"for details.\"", ")", "\n", "\n", "", "if", "memory_antecedent", "is", "not", "None", ":", "\n", "# Encoder-Decoder Attention Cache", "\n", "        ", "q", "=", "compute_attention_component", "(", "query_antecedent", ",", "total_key_depth", ",", "\n", "q_filter_width", ",", "q_padding", ",", "\"q\"", ",", "\n", "vars_3d_num_heads", "=", "vars_3d_num_heads", ")", "\n", "k", "=", "cache", "[", "\"k_encdec\"", "]", "\n", "v", "=", "cache", "[", "\"v_encdec\"", "]", "\n", "", "else", ":", "\n", "        ", "k", "=", "split_heads", "(", "k", ",", "num_heads", ")", "\n", "v", "=", "split_heads", "(", "v", ",", "num_heads", ")", "\n", "decode_loop_step", "=", "kwargs", ".", "get", "(", "\"decode_loop_step\"", ")", "\n", "if", "decode_loop_step", "is", "None", ":", "\n", "          ", "k", "=", "cache", "[", "\"k\"", "]", "=", "tf", ".", "concat", "(", "[", "cache", "[", "\"k\"", "]", ",", "k", "]", ",", "axis", "=", "2", ")", "\n", "v", "=", "cache", "[", "\"v\"", "]", "=", "tf", ".", "concat", "(", "[", "cache", "[", "\"v\"", "]", ",", "v", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "# Inplace update is required for inference on TPU.", "\n", "# Inplace_ops only supports inplace_update on the first dimension.", "\n", "# The performance of current implementation is better than updating", "\n", "# the tensor by adding the result of matmul(one_hot,", "\n", "# update_in_current_step)", "\n", "          ", "tmp_k", "=", "tf", ".", "transpose", "(", "cache", "[", "\"k\"", "]", ",", "perm", "=", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "tmp_k", "=", "inplace_ops", ".", "alias_inplace_update", "(", "\n", "tmp_k", ",", "decode_loop_step", ",", "tf", ".", "squeeze", "(", "k", ",", "axis", "=", "2", ")", ")", "\n", "k", "=", "cache", "[", "\"k\"", "]", "=", "tf", ".", "transpose", "(", "tmp_k", ",", "perm", "=", "[", "1", ",", "2", ",", "0", ",", "3", "]", ")", "\n", "tmp_v", "=", "tf", ".", "transpose", "(", "cache", "[", "\"v\"", "]", ",", "perm", "=", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "tmp_v", "=", "inplace_ops", ".", "alias_inplace_update", "(", "\n", "tmp_v", ",", "decode_loop_step", ",", "tf", ".", "squeeze", "(", "v", ",", "axis", "=", "2", ")", ")", "\n", "v", "=", "cache", "[", "\"v\"", "]", "=", "tf", ".", "transpose", "(", "tmp_v", ",", "perm", "=", "[", "1", ",", "2", ",", "0", ",", "3", "]", ")", "\n", "\n", "", "", "", "q", "=", "split_heads", "(", "q", ",", "num_heads", ")", "\n", "if", "cache", "is", "None", ":", "\n", "      ", "k", "=", "split_heads", "(", "k", ",", "num_heads", ")", "\n", "v", "=", "split_heads", "(", "v", ",", "num_heads", ")", "\n", "\n", "", "key_depth_per_head", "=", "total_key_depth", "//", "num_heads", "\n", "if", "not", "vars_3d", ":", "\n", "      ", "q", "*=", "key_depth_per_head", "**", "-", "0.5", "\n", "\n", "", "additional_returned_value", "=", "None", "\n", "if", "callable", "(", "attention_type", ")", ":", "# Generic way to extend multihead_attention", "\n", "      ", "x", "=", "attention_type", "(", "q", ",", "k", ",", "v", ",", "**", "kwargs", ")", "\n", "if", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "        ", "x", ",", "additional_returned_value", "=", "x", "# Unpack", "\n", "", "", "elif", "attention_type", "==", "\"dot_product\"", ":", "\n", "      ", "x", "=", "dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "bias", ",", "dropout_rate", ",", "image_shapes", ",", "\n", "save_weights_to", "=", "save_weights_to", ",", "\n", "make_image_summary", "=", "make_image_summary", ",", "\n", "dropout_broadcast_dims", "=", "dropout_broadcast_dims", ")", "\n", "", "elif", "attention_type", "==", "'quaternion_dot_product'", ":", "\n", "        ", "print", "(", "\"Using QDP attention..\"", ")", "\n", "x", "=", "quaternion_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "bias", ",", "dropout_rate", ",", "image_shapes", ",", "\n", "save_weights_to", "=", "save_weights_to", ",", "\n", "make_image_summary", "=", "make_image_summary", ",", "\n", "dropout_broadcast_dims", "=", "dropout_broadcast_dims", ")", "\n", "\n", "", "elif", "attention_type", "==", "\"dot_product_relative\"", ":", "\n", "      ", "x", "=", "dot_product_attention_relative", "(", "\n", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "bias", ",", "\n", "max_relative_position", ",", "\n", "dropout_rate", ",", "\n", "image_shapes", ",", "\n", "make_image_summary", "=", "make_image_summary", ",", "\n", "cache", "=", "cache", "is", "not", "None", ")", "\n", "", "elif", "attention_type", "==", "\"dot_product_unmasked_relative_v2\"", ":", "\n", "      ", "x", "=", "dot_product_unmasked_self_attention_relative_v2", "(", "\n", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "bias", ",", "\n", "max_relative_position", ",", "\n", "dropout_rate", ",", "\n", "image_shapes", ",", "\n", "make_image_summary", "=", "make_image_summary", ",", "\n", "dropout_broadcast_dims", "=", "dropout_broadcast_dims", ",", "\n", "heads_share_relative_embedding", "=", "heads_share_relative_embedding", ",", "\n", "add_relative_to_values", "=", "add_relative_to_values", ")", "\n", "", "elif", "attention_type", "==", "\"dot_product_relative_v2\"", ":", "\n", "      ", "x", "=", "dot_product_self_attention_relative_v2", "(", "\n", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "bias", ",", "\n", "max_relative_position", ",", "\n", "dropout_rate", ",", "\n", "image_shapes", ",", "\n", "make_image_summary", "=", "make_image_summary", ",", "\n", "dropout_broadcast_dims", "=", "dropout_broadcast_dims", ",", "\n", "heads_share_relative_embedding", "=", "heads_share_relative_embedding", ",", "\n", "add_relative_to_values", "=", "add_relative_to_values", ")", "\n", "", "elif", "attention_type", "==", "\"local_within_block_mask_right\"", ":", "\n", "      ", "x", "=", "masked_within_block_local_attention_1d", "(", "\n", "q", ",", "k", ",", "v", ",", "block_length", "=", "block_length", ")", "\n", "", "elif", "attention_type", "==", "\"local_relative_mask_right\"", ":", "\n", "      ", "x", "=", "masked_relative_local_attention_1d", "(", "\n", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "block_length", "=", "block_length", ",", "\n", "make_image_summary", "=", "make_image_summary", ",", "\n", "dropout_rate", "=", "dropout_rate", ",", "\n", "heads_share_relative_embedding", "=", "heads_share_relative_embedding", ",", "\n", "add_relative_to_values", "=", "add_relative_to_values", ",", "\n", "name", "=", "\"masked_relative_local_attention_1d\"", ")", "\n", "", "elif", "attention_type", "==", "\"local_mask_right\"", ":", "\n", "      ", "x", "=", "masked_local_attention_1d", "(", "\n", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "block_length", "=", "block_length", ",", "\n", "make_image_summary", "=", "make_image_summary", ")", "\n", "", "elif", "attention_type", "==", "\"local_unmasked\"", ":", "\n", "      ", "x", "=", "local_attention_1d", "(", "\n", "q", ",", "k", ",", "v", ",", "block_length", "=", "block_length", ",", "filter_width", "=", "block_width", ")", "\n", "", "elif", "attention_type", "==", "\"masked_dilated_1d\"", ":", "\n", "      ", "x", "=", "masked_dilated_self_attention_1d", "(", "q", ",", "k", ",", "v", ",", "block_length", ",", "block_width", ",", "\n", "gap_size", ",", "num_memory_blocks", ")", "\n", "", "else", ":", "\n", "      ", "assert", "attention_type", "==", "\"unmasked_dilated_1d\"", "\n", "x", "=", "dilated_self_attention_1d", "(", "q", ",", "k", ",", "v", ",", "block_length", ",", "block_width", ",", "\n", "gap_size", ",", "num_memory_blocks", ")", "\n", "", "x", "=", "combine_heads", "(", "x", ")", "\n", "\n", "# Set last dim specifically.", "\n", "x", ".", "set_shape", "(", "x", ".", "shape", ".", "as_list", "(", ")", "[", ":", "-", "1", "]", "+", "[", "total_value_depth", "]", ")", "\n", "\n", "if", "vars_3d", ":", "\n", "      ", "o_var", "=", "tf", ".", "get_variable", "(", "\n", "\"o\"", ",", "[", "num_heads", ",", "total_value_depth", "//", "num_heads", ",", "output_depth", "]", ")", "\n", "o_var", "=", "tf", ".", "cast", "(", "o_var", ",", "x", ".", "dtype", ")", "\n", "o_var", "=", "tf", ".", "reshape", "(", "o_var", ",", "[", "total_value_depth", ",", "output_depth", "]", ")", "\n", "x", "=", "tf", ".", "tensordot", "(", "x", ",", "o_var", ",", "axes", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "quarternion_ffn_3d", "(", "x", ",", "output_depth", ",", "name", "=", "'output_transfom'", ",", "\n", "init", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "output_depth", "**", "-", "0.5", ")", ")", "\n", "# x = common_layers.dense(", "\n", "#     x, output_depth, use_bias=False, name=\"output_transform\")", "\n", "", "if", "additional_returned_value", "is", "not", "None", ":", "\n", "      ", "return", "x", ",", "additional_returned_value", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_standardized_layers": [[406, 615], ["quaternion_attention.get_standardized_layers.register_layer"], "function", ["None"], ["def", "get_standardized_layers", "(", "hparams", ",", "dp", "=", "None", ")", ":", "\n", "  ", "\"\"\"Get the common attention and feed-forward layers.\n\n  The returned layer functions will have the following signature:\n\n    y, extra_loss = fct(x)\n\n  extra_loss is set to 0.0 if the layer doesn't have extra loss.\n  If dp is provided, the layers will be distributed within the devices.\n  If moe wants to be used, both dp and model need to be set.\n\n  Args:\n    hparams (tf.HParams): the model hparameters\n    dp (expert_utils.Parallelism): A data parallelism object. If not given,\n      the dp calls are simply ignored.\n\n  Returns:\n    dict[str:fct]: A dictionary containing the standardized functions\n  \"\"\"", "\n", "\n", "def", "partial", "(", "fct", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Same as functools.partial but with functools.wraps.\"\"\"", "\n", "return", "functools", ".", "wraps", "(", "fct", ")", "(", "functools", ".", "partial", "(", "fct", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n", "", "def", "register_layer", "(", "\n", "fct_in", ",", "\n", "default_args", "=", "None", ",", "\n", "default_kwargs", "=", "None", ",", "\n", "use_dp", "=", "True", ",", "\n", "recompute_grad", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Turn a function into its standardized version.\n\n    Args:\n      fct_in (fct): The function to register\n      default_args (list): The default parameters to add to the function.\n      default_kwargs (dict): The default parameters to add to the function.\n        Those arguments can be overwritten when calling the function.\n      use_dp (bool): Wrap the function call within a dataparallelism object if\n        dp is available. Some layers (like MOE) must be called without dp.\n      recompute_grad (bool): If True, recompute the function during the\n        backward pass to save memory\n\n    Returns:\n      fct: the standardized layer function.\n    \"\"\"", "\n", "# The kwargs given when calling the function overwrite the default ones", "\n", "fct_in", "=", "partial", "(", "fct_in", ",", "*", "(", "default_args", "or", "[", "]", ")", ",", "**", "(", "default_kwargs", "or", "{", "}", ")", ")", "\n", "\n", "@", "functools", ".", "wraps", "(", "fct_in", ")", "\n", "def", "decorator", "(", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "      ", "\"\"\"Call the layer function.\"\"\"", "\n", "fct", "=", "fct_in", "# For closure. Could use nonlocal with Python 3", "\n", "# Eventually create the memory optimized version of the function", "\n", "if", "recompute_grad", ":", "\n", "        ", "fct", "=", "partial", "(", "fct", ",", "**", "kwargs", ")", "# recompute_grad only accept args", "\n", "fct", "=", "common_layers", ".", "recompute_grad", "(", "fct", ")", "\n", "kwargs", "=", "{", "}", "\n", "\n", "# Eventually use dp (if given and not MoE)", "\n", "", "if", "use_dp", "and", "dp", "is", "not", "None", ":", "\n", "        ", "y", "=", "dp", "(", "fct", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "y", "=", "fct", "(", "x", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# Eventually capture the extra loss", "\n", "", "extra_loss", "=", "0.0", "\n", "if", "isinstance", "(", "y", ",", "tuple", ")", ":", "\n", "        ", "y", ",", "extra_loss", "=", "y", "\n", "\n", "", "return", "y", ",", "extra_loss", "\n", "\n", "", "return", "decorator", "\n", "\n", "", "total_key_depth", "=", "hparams", ".", "attention_key_channels", "or", "hparams", ".", "hidden_size", "\n", "total_value_depth", "=", "hparams", ".", "attention_value_channels", "or", "hparams", ".", "hidden_size", "\n", "\n", "# Attention layers:", "\n", "\n", "# === Multi-head full attention layer ===", "\n", "multihead_attention_fn", "=", "register_layer", "(", "\n", "multihead_attention", ",", "\n", "default_kwargs", "=", "dict", "(", "\n", "memory_antecedent", "=", "None", ",", "# Self-attention by default", "\n", "bias", "=", "None", ",", "\n", "total_key_depth", "=", "total_key_depth", ",", "\n", "total_value_depth", "=", "total_value_depth", ",", "\n", "output_depth", "=", "hparams", ".", "hidden_size", ",", "\n", "num_heads", "=", "hparams", ".", "num_heads", ",", "\n", "dropout_rate", "=", "hparams", ".", "attention_dropout", ",", "\n", ")", ")", "\n", "\n", "# === Memory efficient full-attention layer ===", "\n", "# Save memory by not storing the activations and", "\n", "# recomputing them during the backward pass", "\n", "memeff_attention_base_fn", "=", "register_layer", "(", "\n", "multihead_attention", ",", "\n", "default_kwargs", "=", "dict", "(", "\n", "total_key_depth", "=", "total_key_depth", ",", "\n", "total_value_depth", "=", "total_value_depth", ",", "\n", "output_depth", "=", "hparams", ".", "hidden_size", ",", "\n", "num_heads", "=", "hparams", ".", "num_heads", ",", "\n", "dropout_rate", "=", "hparams", ".", "attention_dropout", ",", "\n", ")", ",", "\n", "recompute_grad", "=", "True", ",", "\n", ")", "\n", "\n", "def", "memeff_attention_fn", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Modify args/kwargs for compatibility with recompute_grad.\"\"\"", "\n", "kwargs", "=", "kwargs", ".", "copy", "(", ")", "\n", "assert", "len", "(", "args", ")", "==", "1", "\n", "x", "=", "args", "[", "0", "]", "\n", "memory_antecedent", "=", "kwargs", ".", "pop", "(", "\"memory_antecedent\"", ",", "x", ")", "# Same as x if None", "\n", "if", "kwargs", ".", "get", "(", "\"bias\"", ",", "None", ")", "is", "not", "None", ":", "# Case where bias has been set", "\n", "      ", "args", "=", "(", "x", ",", "memory_antecedent", ",", "kwargs", ".", "pop", "(", "\"bias\"", ")", ")", "\n", "", "else", ":", "\n", "# Otherwise, only 2 args. This is necessary as recompute_grad does not", "\n", "# support None values.", "\n", "      ", "args", "=", "(", "x", ",", "memory_antecedent", ")", "\n", "", "return", "memeff_attention_base_fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# === Local attention (unmasked) layer ===", "\n", "# Reuse same parameters as multihead_attention", "\n", "# Don't mask the future", "\n", "", "local_attention_fn", "=", "partial", "(", "\n", "multihead_attention_fn", ",", "\n", "block_length", "=", "hparams", ".", "attention_loc_block_length", ",", "\n", "block_width", "=", "hparams", ".", "attention_loc_block_width", ",", "\n", "attention_type", "=", "\"local_unmasked\"", ",", "\n", ")", "\n", "\n", "# === Local attention (masked) layer ===", "\n", "# Reuse same parameters as multihead_attention", "\n", "# Only works for self attention. Always mask the future.", "\n", "local_attention_masked_fn", "=", "partial", "(", "\n", "multihead_attention_fn", ",", "\n", "block_length", "=", "hparams", ".", "attention_loc_block_length", ",", "\n", "attention_type", "=", "\"local_mask_right\"", ",", "\n", ")", "\n", "\n", "# === Masked memory-compressed multihead self attention layer ===", "\n", "# Only works for self attention. Always mask the future.", "\n", "compressed_attention_masked_fn", "=", "register_layer", "(", "\n", "multihead_self_attention_reduced", ",", "\n", "default_kwargs", "=", "dict", "(", "\n", "factor", "=", "hparams", ".", "attention_red_factor", ",", "\n", "nonlinearity", "=", "hparams", ".", "attention_red_nonlinearity", ",", "\n", "reduction_type", "=", "hparams", ".", "attention_red_type", ",", "\n", "multihead_params", "=", "dict", "(", "\n", "total_key_depth", "=", "total_key_depth", ",", "\n", "total_value_depth", "=", "total_value_depth", ",", "\n", "num_heads", "=", "hparams", ".", "num_heads", ",", "\n", "dropout_rate", "=", "hparams", ".", "attention_dropout", ",", "\n", ")", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# === Unmasked memory-compressed multihead self attention layer ===", "\n", "# Only works for self attention. Never mask the future. Bias never added", "\n", "compressed_attention_fn", "=", "partial", "(", "\n", "compressed_attention_masked_fn", ",", "\n", "add_mask", "=", "False", ",", "\n", ")", "\n", "\n", "# Feed-forwards layers:", "\n", "\n", "# === FC layer ===", "\n", "conv_hidden_relu", "=", "register_layer", "(", "\n", "common_layers", ".", "conv_hidden_relu", ",", "\n", "default_kwargs", "=", "dict", "(", "\n", "hidden_size", "=", "hparams", ".", "filter_size", ",", "\n", "output_size", "=", "hparams", ".", "hidden_size", ",", "\n", "dropout", "=", "hparams", ".", "relu_dropout", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# === Separable convolution layer ===", "\n", "# No mask applied", "\n", "sep_conv_relu", "=", "partial", "(", "\n", "conv_hidden_relu", ",", "\n", "padding", "=", "\"SAME\"", ",", "\n", "# Parameters copied from the transformer model, could add hparams", "\n", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "\n", "second_kernel_size", "=", "(", "31", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# === Separable convolution layer (masked version) ===", "\n", "# Mask the future", "\n", "sep_conv_relu_masked", "=", "partial", "(", "\n", "sep_conv_relu", ",", "\n", "padding", "=", "\"LEFT\"", ",", "# Mask future for decoder", "\n", ")", "\n", "\n", "# Define all available layers", "\n", "\n", "layers", "=", "dict", "(", "\n", "# Attention layers:", "\n", "a", "=", "multihead_attention_fn", ",", "# Multihead full attention", "\n", "loc", "=", "local_attention_fn", ",", "# Local attention", "\n", "locm", "=", "local_attention_masked_fn", ",", "# Local attention (masked)", "\n", "red", "=", "compressed_attention_fn", ",", "# Memory-compressed attention", "\n", "redm", "=", "compressed_attention_masked_fn", ",", "# Memory-compressed att (masked)", "\n", "mem", "=", "memeff_attention_fn", ",", "# Memory efficient", "\n", "# Feed-forward layers:", "\n", "fc", "=", "conv_hidden_relu", ",", "# Fully connected", "\n", "sep", "=", "sep_conv_relu", ",", "# Separable convolution (unmasked)", "\n", "sepm", "=", "sep_conv_relu_masked", ",", "# Separable convolution (masked)", "\n", ")", "\n", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_standard_attention_hparams": [[617, 660], ["hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam", "hparams.add_hparam"], "function", ["None"], ["", "def", "add_standard_attention_hparams", "(", "hparams", ")", ":", "\n", "  ", "\"\"\"Adds the hparams used by get_standadized_layers.\"\"\"", "\n", "# All hyperparameters ending in \"dropout\" are automatically set to 0.0", "\n", "# when not in training mode.", "\n", "\n", "# hparams used and which should have been defined outside (in", "\n", "# common_hparams):", "\n", "# Global flags", "\n", "# hparams.mode", "\n", "# hparams.hidden_size", "\n", "# Pre-post processing flags", "\n", "# hparams.layer_preprocess_sequence", "\n", "# hparams.layer_postprocess_sequence", "\n", "# hparams.layer_prepostprocess_dropout", "\n", "# hparams.norm_type", "\n", "# hparams.norm_epsilon", "\n", "# Mixture-of-Expert flags", "\n", "# hparams.moe_hidden_sizes", "\n", "# hparams.moe_num_experts", "\n", "# hparams.moe_k", "\n", "# hparams.moe_loss_coef", "\n", "\n", "# Attention layers flags", "\n", "hparams", ".", "add_hparam", "(", "\"num_heads\"", ",", "8", ")", "\n", "hparams", ".", "add_hparam", "(", "\"attention_key_channels\"", ",", "0", ")", "\n", "hparams", ".", "add_hparam", "(", "\"attention_value_channels\"", ",", "0", ")", "\n", "hparams", ".", "add_hparam", "(", "\"attention_dropout\"", ",", "0.0", ")", "\n", "# Attention: Local", "\n", "hparams", ".", "add_hparam", "(", "\"attention_loc_block_length\"", ",", "256", ")", "\n", "# Attention: Local (unmasked only): How much to look left.", "\n", "hparams", ".", "add_hparam", "(", "\"attention_loc_block_width\"", ",", "128", ")", "\n", "# Attention: Memory-compressed", "\n", "hparams", ".", "add_hparam", "(", "\"attention_red_factor\"", ",", "3", ")", "\n", "hparams", ".", "add_hparam", "(", "\"attention_red_type\"", ",", "\"conv\"", ")", "\n", "hparams", ".", "add_hparam", "(", "\"attention_red_nonlinearity\"", ",", "\"none\"", ")", "\n", "\n", "# Fully connected layers flags", "\n", "# To be more consistent, should use filter_size to also control the MOE", "\n", "# size if moe_hidden_sizes not set.", "\n", "hparams", ".", "add_hparam", "(", "\"filter_size\"", ",", "2048", ")", "\n", "hparams", ".", "add_hparam", "(", "\"relu_dropout\"", ",", "0.0", ")", "\n", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.encoder_decoder_attention_loss": [[662, 718], ["tensorflow.stack", "tensorflow.reduce_mean", "tensorflow_probability.distributions.Categorical", "tensorflow_probability.distributions.Categorical", "tensorflow_probability.distributions.kl_divergence", "tensorflow.nn.softmax", "tensorflow.losses.mean_squared_error", "quaternion_attention.encoder_decoder_attention_loss.combine_attentions"], "function", ["None"], ["", "def", "encoder_decoder_attention_loss", "(", "expected_attention_logits", ",", "\n", "actual_attentions", ",", "\n", "loss_type", "=", "\"kl_divergence\"", ",", "\n", "loss_multiplier", "=", "1.0", ")", ":", "\n", "  ", "\"\"\"Computes encdec attention loss between expected and actual attentions.\n\n  Args:\n    expected_attention_logits: Tensor storing the expected encoder-decoder\n      attention logits with shape [batch_size, target_length, input_length].\n    actual_attentions: Dictionary with actual attention logits for different\n      attention types and hidden layers.\n    loss_type: type of the loss function.\n    loss_multiplier: multiplier for the attention loss.\n\n  Returns:\n    KL_divergence loss between the actual and expected attention logits.\n  \"\"\"", "\n", "\n", "def", "combine_attentions", "(", "attention_list", ")", ":", "\n", "    ", "\"\"\"Combine different layer attentions and then average over layers/heads.\"\"\"", "\n", "# Stack all hidden layer attention tensors to get a tensor with shape", "\n", "# [num_hidden_layers, batch_size, num_heads, target_length, input_length].", "\n", "attentions", "=", "tf", ".", "stack", "(", "attention_list", ")", "\n", "# Reduce mean across all layers (axis=0) and all heads (axis=2) to get a", "\n", "# tensor with shape [batch_size, target_length, input_length].", "\n", "return", "tf", ".", "reduce_mean", "(", "attentions", ",", "[", "0", ",", "2", "]", ")", "\n", "\n", "", "def", "kl_divergence_loss", "(", "expected_logits", ",", "actual_logits", ")", ":", "\n", "    ", "p", "=", "tfp", ".", "distributions", ".", "Categorical", "(", "logits", "=", "expected_logits", ")", "\n", "q", "=", "tfp", ".", "distributions", ".", "Categorical", "(", "logits", "=", "actual_logits", ")", "\n", "return", "tfp", ".", "distributions", ".", "kl_divergence", "(", "p", ",", "q", ")", "\n", "\n", "", "def", "mse_loss", "(", "expected_logits", ",", "actual_weights", ")", ":", "\n", "    ", "expected_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "expected_logits", ")", "\n", "return", "tf", ".", "losses", ".", "mean_squared_error", "(", "expected_weights", ",", "actual_weights", ")", "\n", "\n", "# For each hidden layer, we have attention-logit and attention-weight tensors", "\n", "# with shape [batch_size, num_heads, target_length, input_length].", "\n", "", "loss", "=", "0.0", "\n", "if", "loss_type", "==", "\"mse\"", ":", "\n", "    ", "actual_encdec_attention_weights", "=", "[", "\n", "t", "for", "layer_key", ",", "t", "in", "actual_attentions", ".", "items", "(", ")", "\n", "if", "\"encdec_attention\"", "in", "layer_key", "and", "not", "layer_key", ".", "endswith", "(", "\"/logits\"", ")", "\n", "]", "\n", "actual_attention_weights", "=", "combine_attentions", "(", "\n", "actual_encdec_attention_weights", ")", "\n", "loss", "=", "mse_loss", "(", "expected_attention_logits", ",", "actual_attention_weights", ")", "\n", "", "else", ":", "\n", "    ", "actual_encdec_attention_logits", "=", "[", "\n", "t", "for", "layer_key", ",", "t", "in", "actual_attentions", ".", "items", "(", ")", "\n", "if", "\"encdec_attention\"", "in", "layer_key", "and", "layer_key", ".", "endswith", "(", "\"/logits\"", ")", "\n", "]", "\n", "actual_attention_logits", "=", "combine_attentions", "(", "actual_encdec_attention_logits", ")", "\n", "loss", "=", "kl_divergence_loss", "(", "expected_attention_logits", ",", "\n", "actual_attention_logits", ")", "\n", "", "return", "loss", "*", "loss_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_timing_signal_1d": [[720, 768], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.to_float", "tensorflow.concat", "tensorflow.pad", "tensorflow.reshape", "math.log", "tensorflow.maximum", "tensorflow.exp", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.sin", "tensorflow.cos", "float", "float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.mod", "tensorflow.range"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "get_timing_signal_1d", "(", "length", ",", "\n", "channels", ",", "\n", "min_timescale", "=", "1.0", ",", "\n", "max_timescale", "=", "1.0e4", ",", "\n", "start_index", "=", "0", ")", ":", "\n", "  ", "\"\"\"Gets a bunch of sinusoids of different frequencies.\n\n  Each channel of the input Tensor is incremented by a sinusoid of a different\n  frequency and phase.\n\n  This allows attention to learn to use absolute and relative positions.\n  Timing signals should be added to some precursors of both the query and the\n  memory inputs to attention.\n\n  The use of relative position is possible because sin(x+y) and cos(x+y) can be\n  expressed in terms of y, sin(x) and cos(x).\n\n  In particular, we use a geometric sequence of timescales starting with\n  min_timescale and ending with max_timescale.  The number of different\n  timescales is equal to channels / 2. For each timescale, we\n  generate the two sinusoidal signals sin(timestep/timescale) and\n  cos(timestep/timescale).  All of these sinusoids are concatenated in\n  the channels dimension.\n\n  Args:\n    length: scalar, length of timing signal sequence.\n    channels: scalar, size of timing embeddings to create. The number of\n        different timescales is equal to channels / 2.\n    min_timescale: a float\n    max_timescale: a float\n    start_index: index of first position\n\n  Returns:\n    a Tensor of timing signals [1, length, channels]\n  \"\"\"", "\n", "position", "=", "tf", ".", "to_float", "(", "tf", ".", "range", "(", "length", ")", "+", "start_index", ")", "\n", "num_timescales", "=", "channels", "//", "2", "\n", "log_timescale_increment", "=", "(", "\n", "math", ".", "log", "(", "float", "(", "max_timescale", ")", "/", "float", "(", "min_timescale", ")", ")", "/", "\n", "tf", ".", "maximum", "(", "tf", ".", "to_float", "(", "num_timescales", ")", "-", "1", ",", "1", ")", ")", "\n", "inv_timescales", "=", "min_timescale", "*", "tf", ".", "exp", "(", "\n", "tf", ".", "to_float", "(", "tf", ".", "range", "(", "num_timescales", ")", ")", "*", "-", "log_timescale_increment", ")", "\n", "scaled_time", "=", "tf", ".", "expand_dims", "(", "position", ",", "1", ")", "*", "tf", ".", "expand_dims", "(", "inv_timescales", ",", "0", ")", "\n", "signal", "=", "tf", ".", "concat", "(", "[", "tf", ".", "sin", "(", "scaled_time", ")", ",", "tf", ".", "cos", "(", "scaled_time", ")", "]", ",", "axis", "=", "1", ")", "\n", "signal", "=", "tf", ".", "pad", "(", "signal", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "tf", ".", "mod", "(", "channels", ",", "2", ")", "]", "]", ")", "\n", "signal", "=", "tf", ".", "reshape", "(", "signal", ",", "[", "1", ",", "length", ",", "channels", "]", ")", "\n", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_timing_signal_1d": [[770, 808], ["tensor2tensor.utils.expert_utils.add_name_scope", "quaternion_attention.get_timing_signal_1d", "tensor2tensor.layers.common_layers.shape_list", "tensor2tensor.layers.common_layers.shape_list"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_timing_signal_1d"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "add_timing_signal_1d", "(", "x", ",", "\n", "min_timescale", "=", "1.0", ",", "\n", "max_timescale", "=", "1.0e4", ",", "\n", "start_index", "=", "0", ")", ":", "\n", "  ", "\"\"\"Adds a bunch of sinusoids of different frequencies to a Tensor.\n\n  Each channel of the input Tensor is incremented by a sinusoid of a different\n  frequency and phase.\n\n  This allows attention to learn to use absolute and relative positions.\n  Timing signals should be added to some precursors of both the query and the\n  memory inputs to attention.\n\n  The use of relative position is possible because sin(x+y) and cos(x+y) can be\n  experessed in terms of y, sin(x) and cos(x).\n\n  In particular, we use a geometric sequence of timescales starting with\n  min_timescale and ending with max_timescale.  The number of different\n  timescales is equal to channels / 2. For each timescale, we\n  generate the two sinusoidal signals sin(timestep/timescale) and\n  cos(timestep/timescale).  All of these sinusoids are concatenated in\n  the channels dimension.\n\n  Args:\n    x: a Tensor with shape [batch, length, channels]\n    min_timescale: a float\n    max_timescale: a float\n    start_index: index of first position\n\n  Returns:\n    a Tensor the same shape as x.\n  \"\"\"", "\n", "length", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "1", "]", "\n", "channels", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "2", "]", "\n", "signal", "=", "get_timing_signal_1d", "(", "length", ",", "channels", ",", "min_timescale", ",", "max_timescale", ",", "\n", "start_index", ")", "\n", "return", "x", "+", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_layer_timing_signal_learned_1d": [[810, 832], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.get_variable", "tensorflow.random_normal_initializer"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "get_layer_timing_signal_learned_1d", "(", "channels", ",", "layer", ",", "num_layers", ")", ":", "\n", "  ", "\"\"\"get n-dimensional embedding as the layer (vertical) timing signal.\n\n  Adds embeddings to represent the position of the layer in the tower.\n\n  Args:\n    channels: dimension of the timing signal\n    layer: layer num\n    num_layers: total number of layers\n\n  Returns:\n    a Tensor of timing signals [1, 1, channels].\n  \"\"\"", "\n", "shape", "=", "[", "num_layers", ",", "1", ",", "1", ",", "channels", "]", "\n", "layer_embedding", "=", "(", "\n", "tf", ".", "get_variable", "(", "\n", "\"layer_embedding\"", ",", "\n", "shape", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "channels", "**", "-", "0.5", ")", ")", "*", "\n", "(", "channels", "**", "0.5", ")", ")", "\n", "return", "layer_embedding", "[", "layer", ",", ":", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_layer_timing_signal_learned_1d": [[834, 852], ["tensor2tensor.utils.expert_utils.add_name_scope", "quaternion_attention.get_layer_timing_signal_learned_1d", "tensor2tensor.layers.common_layers.shape_list"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_layer_timing_signal_learned_1d"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "add_layer_timing_signal_learned_1d", "(", "x", ",", "layer", ",", "num_layers", ")", ":", "\n", "  ", "\"\"\"Add n-dimensional embedding as the layer (vertical) timing signal.\n\n  Adds embeddings to represent the position of the layer in the tower.\n\n  Args:\n    x: a tensor with shape [batch, length, depth]\n    layer: layer num\n    num_layers: total number of layers\n\n  Returns:\n    a Tensor the same shape as x.\n  \"\"\"", "\n", "channels", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "-", "1", "]", "\n", "signal", "=", "get_layer_timing_signal_learned_1d", "(", "channels", ",", "layer", ",", "num_layers", ")", "\n", "x", "+=", "signal", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_layer_timing_signal_sinusoid_1d": [[854, 871], ["tensor2tensor.utils.expert_utils.add_name_scope", "quaternion_attention.get_timing_signal_1d", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_timing_signal_1d"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "get_layer_timing_signal_sinusoid_1d", "(", "channels", ",", "layer", ",", "num_layers", ")", ":", "\n", "  ", "\"\"\"Add sinusoids of different frequencies as layer (vertical) timing signal.\n\n  Args:\n    channels: dimension of the timing signal\n    layer: layer num\n    num_layers: total number of layers\n\n  Returns:\n    a Tensor of timing signals [1, 1, channels].\n  \"\"\"", "\n", "\n", "signal", "=", "get_timing_signal_1d", "(", "num_layers", ",", "channels", ")", "\n", "layer_signal", "=", "tf", ".", "expand_dims", "(", "signal", "[", ":", ",", "layer", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "layer_signal", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_layer_timing_signal_sinusoid_1d": [[873, 890], ["tensor2tensor.utils.expert_utils.add_name_scope", "quaternion_attention.get_layer_timing_signal_sinusoid_1d", "tensor2tensor.layers.common_layers.shape_list"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_layer_timing_signal_sinusoid_1d"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "add_layer_timing_signal_sinusoid_1d", "(", "x", ",", "layer", ",", "num_layers", ")", ":", "\n", "  ", "\"\"\"Add sinusoids of different frequencies as layer (vertical) timing signal.\n\n  Args:\n    x: a Tensor with shape [batch, length, channels]\n    layer: layer num\n    num_layers: total number of layers\n\n  Returns:\n    a Tensor the same shape as x.\n  \"\"\"", "\n", "\n", "channels", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "-", "1", "]", "\n", "signal", "=", "get_layer_timing_signal_sinusoid_1d", "(", "channels", ",", "layer", ",", "num_layers", ")", "\n", "\n", "return", "x", "+", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_timing_signal_1d_given_position": [[892, 922], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.concat", "tensorflow.pad", "tensor2tensor.layers.common_layers.cast_like", "tensor2tensor.layers.common_layers.shape_list", "math.log", "tensorflow.exp", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.expand_dims", "tensorflow.sin", "tensorflow.cos", "float", "float", "tensorflow.to_float", "tensorflow.mod", "tensorflow.range"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "add_timing_signal_1d_given_position", "(", "x", ",", "\n", "position", ",", "\n", "min_timescale", "=", "1.0", ",", "\n", "max_timescale", "=", "1.0e4", ")", ":", "\n", "  ", "\"\"\"Adds sinusoids of diff frequencies to a Tensor, with timing position given.\n\n  Args:\n    x: a Tensor with shape [batch, length, channels]\n    position: a Tensor with shape [batch, length]\n    min_timescale: a float\n    max_timescale: a float\n\n  Returns:\n    a Tensor the same shape as x.\n  \"\"\"", "\n", "channels", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "2", "]", "\n", "num_timescales", "=", "channels", "//", "2", "\n", "log_timescale_increment", "=", "(", "\n", "math", ".", "log", "(", "float", "(", "max_timescale", ")", "/", "float", "(", "min_timescale", ")", ")", "/", "\n", "(", "tf", ".", "to_float", "(", "num_timescales", ")", "-", "1", ")", ")", "\n", "inv_timescales", "=", "min_timescale", "*", "tf", ".", "exp", "(", "\n", "tf", ".", "to_float", "(", "tf", ".", "range", "(", "num_timescales", ")", ")", "*", "-", "log_timescale_increment", ")", "\n", "scaled_time", "=", "(", "\n", "tf", ".", "expand_dims", "(", "tf", ".", "to_float", "(", "position", ")", ",", "2", ")", "*", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "expand_dims", "(", "inv_timescales", ",", "0", ")", ",", "0", ")", ")", "\n", "signal", "=", "tf", ".", "concat", "(", "[", "tf", ".", "sin", "(", "scaled_time", ")", ",", "tf", ".", "cos", "(", "scaled_time", ")", "]", ",", "axis", "=", "2", ")", "\n", "signal", "=", "tf", ".", "pad", "(", "signal", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "tf", ".", "mod", "(", "channels", ",", "2", ")", "]", "]", ")", "\n", "signal", "=", "common_layers", ".", "cast_like", "(", "signal", ",", "x", ")", "\n", "return", "x", "+", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_timing_signal_nd": [[924, 979], ["tensor2tensor.utils.expert_utils.add_name_scope", "six.moves.range", "len", "tensor2tensor.layers.common_layers.shape_list", "math.log", "tensorflow.exp", "tensorflow.to_float", "tensorflow.concat", "tensorflow.pad", "six.moves.range", "six.moves.range", "x.get_shape().as_list", "tensorflow.to_float", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "float", "float", "tensorflow.to_float", "tensorflow.sin", "tensorflow.cos", "x.get_shape", "tensorflow.range"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "add_timing_signal_nd", "(", "x", ",", "min_timescale", "=", "1.0", ",", "max_timescale", "=", "1.0e4", ")", ":", "\n", "  ", "\"\"\"Adds a bunch of sinusoids of different frequencies to a Tensor.\n\n  Each channel of the input Tensor is incremented by a sinusoid of a different\n  frequency and phase in one of the positional dimensions.\n\n  This allows attention to learn to use absolute and relative positions.\n  Timing signals should be added to some precursors of both the query and the\n  memory inputs to attention.\n\n  The use of relative position is possible because sin(a+b) and cos(a+b) can be\n  experessed in terms of b, sin(a) and cos(a).\n\n  x is a Tensor with n \"positional\" dimensions, e.g. one dimension for a\n  sequence or two dimensions for an image\n\n  We use a geometric sequence of timescales starting with\n  min_timescale and ending with max_timescale.  The number of different\n  timescales is equal to channels // (n * 2). For each timescale, we\n  generate the two sinusoidal signals sin(timestep/timescale) and\n  cos(timestep/timescale).  All of these sinusoids are concatenated in\n  the channels dimension.\n\n  Args:\n    x: a Tensor with shape [batch, d1 ... dn, channels]\n    min_timescale: a float\n    max_timescale: a float\n\n  Returns:\n    a Tensor the same shape as x.\n  \"\"\"", "\n", "num_dims", "=", "len", "(", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "-", "2", "\n", "channels", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "-", "1", "]", "\n", "num_timescales", "=", "channels", "//", "(", "num_dims", "*", "2", ")", "\n", "log_timescale_increment", "=", "(", "\n", "math", ".", "log", "(", "float", "(", "max_timescale", ")", "/", "float", "(", "min_timescale", ")", ")", "/", "\n", "(", "tf", ".", "to_float", "(", "num_timescales", ")", "-", "1", ")", ")", "\n", "inv_timescales", "=", "min_timescale", "*", "tf", ".", "exp", "(", "\n", "tf", ".", "to_float", "(", "tf", ".", "range", "(", "num_timescales", ")", ")", "*", "-", "log_timescale_increment", ")", "\n", "for", "dim", "in", "range", "(", "num_dims", ")", ":", "\n", "    ", "length", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "dim", "+", "1", "]", "\n", "position", "=", "tf", ".", "to_float", "(", "tf", ".", "range", "(", "length", ")", ")", "\n", "scaled_time", "=", "tf", ".", "expand_dims", "(", "position", ",", "1", ")", "*", "tf", ".", "expand_dims", "(", "\n", "inv_timescales", ",", "0", ")", "\n", "signal", "=", "tf", ".", "concat", "(", "[", "tf", ".", "sin", "(", "scaled_time", ")", ",", "tf", ".", "cos", "(", "scaled_time", ")", "]", ",", "axis", "=", "1", ")", "\n", "prepad", "=", "dim", "*", "2", "*", "num_timescales", "\n", "postpad", "=", "channels", "-", "(", "dim", "+", "1", ")", "*", "2", "*", "num_timescales", "\n", "signal", "=", "tf", ".", "pad", "(", "signal", ",", "[", "[", "0", ",", "0", "]", ",", "[", "prepad", ",", "postpad", "]", "]", ")", "\n", "for", "_", "in", "range", "(", "1", "+", "dim", ")", ":", "\n", "      ", "signal", "=", "tf", ".", "expand_dims", "(", "signal", ",", "0", ")", "\n", "", "for", "_", "in", "range", "(", "num_dims", "-", "1", "-", "dim", ")", ":", "\n", "      ", "signal", "=", "tf", ".", "expand_dims", "(", "signal", ",", "-", "2", ")", "\n", "", "x", "+=", "signal", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_positional_embedding": [[981, 1005], ["tensorflow.name_scope", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.cast", "tensorflow.get_variable", "tensorflow.maximum", "tensorflow.cond", "tensorflow.less", "tensorflow.expand_dims", "tensorflow.gather", "tensorflow.slice", "tensorflow.pad", "tensorflow.to_int32"], "function", ["None"], ["", "def", "add_positional_embedding", "(", "x", ",", "max_length", ",", "name", ",", "positions", "=", "None", ")", ":", "\n", "  ", "\"\"\"Adds positional embedding.\n\n  Args:\n    x: Tensor with shape [batch, length, depth].\n    max_length: int representing static maximum size of any dimension.\n    name: str representing name of the embedding tf.Variable.\n    positions: Tensor with shape [batch, length].\n\n  Returns:\n    Tensor of same shape as x.\n  \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"add_positional_embedding\"", ")", ":", "\n", "    ", "_", ",", "length", ",", "depth", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "var", "=", "tf", ".", "cast", "(", "tf", ".", "get_variable", "(", "name", ",", "[", "max_length", ",", "depth", "]", ")", ",", "x", ".", "dtype", ")", "\n", "if", "positions", "is", "None", ":", "\n", "      ", "pad_length", "=", "tf", ".", "maximum", "(", "0", ",", "length", "-", "max_length", ")", "\n", "sliced", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "less", "(", "length", ",", "max_length", ")", ",", "\n", "lambda", ":", "tf", ".", "slice", "(", "var", ",", "[", "0", ",", "0", "]", ",", "[", "length", ",", "-", "1", "]", ")", ",", "\n", "lambda", ":", "tf", ".", "pad", "(", "var", ",", "[", "[", "0", ",", "pad_length", "]", ",", "[", "0", ",", "0", "]", "]", ")", ")", "\n", "return", "x", "+", "tf", ".", "expand_dims", "(", "sliced", ",", "0", ")", "\n", "", "else", ":", "\n", "      ", "return", "x", "+", "tf", ".", "gather", "(", "var", ",", "tf", ".", "to_int32", "(", "positions", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_positional_embedding_nd": [[1007, 1041], ["tensorflow.name_scope", "tensor2tensor.layers.common_layers.shape_list", "six.moves.range", "len", "tensorflow.get_variable", "tensorflow.slice", "tensorflow.random_normal_initializer"], "function", ["None"], ["", "", "", "def", "add_positional_embedding_nd", "(", "x", ",", "max_length", ",", "name", ")", ":", "\n", "  ", "\"\"\"Adds n-dimensional positional embedding.\n\n  The embeddings add to all positional dimensions of the tensor.\n\n  Args:\n    x: Tensor with shape [batch, p1 ... pn, depth]. It has n positional\n      dimensions, i.e., 1 for text, 2 for images, 3 for video, etc.\n    max_length: int representing static maximum size of any dimension.\n    name: str representing name of the embedding tf.Variable.\n\n  Returns:\n    Tensor of same shape as x.\n  \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"add_positional_embedding_nd\"", ")", ":", "\n", "    ", "x_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "num_dims", "=", "len", "(", "x_shape", ")", "-", "2", "\n", "depth", "=", "x_shape", "[", "-", "1", "]", "\n", "base_shape", "=", "[", "1", "]", "*", "(", "num_dims", "+", "1", ")", "+", "[", "depth", "]", "\n", "base_start", "=", "[", "0", "]", "*", "(", "num_dims", "+", "2", ")", "\n", "base_size", "=", "[", "-", "1", "]", "+", "[", "1", "]", "*", "num_dims", "+", "[", "depth", "]", "\n", "for", "i", "in", "range", "(", "num_dims", ")", ":", "\n", "      ", "shape", "=", "base_shape", "[", ":", "]", "\n", "start", "=", "base_start", "[", ":", "]", "\n", "size", "=", "base_size", "[", ":", "]", "\n", "shape", "[", "i", "+", "1", "]", "=", "max_length", "\n", "size", "[", "i", "+", "1", "]", "=", "x_shape", "[", "i", "+", "1", "]", "\n", "var", "=", "tf", ".", "get_variable", "(", "\n", "name", "+", "\"_%d\"", "%", "i", ",", "\n", "shape", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "depth", "**", "-", "0.5", ")", ")", "\n", "var", "=", "var", "*", "depth", "**", "0.5", "\n", "x", "+=", "tf", ".", "slice", "(", "var", ",", "start", ",", "size", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.make_edge_vectors": [[1043, 1075], ["tensorflow.variable_scope", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.one_hot", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.to_float", "tensorflow.random_normal_initializer"], "function", ["None"], ["", "", "def", "make_edge_vectors", "(", "adjacency_matrix", ",", "num_edge_types", ",", "depth", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Gets edge vectors for the edge types in the adjacency matrix.\n\n  Args:\n    adjacency_matrix: A [batch, num_nodes, num_nodes] tensor of ints.\n    num_edge_types: Number of different edge types\n    depth: Number of channels\n    name: a string\n  Returns:\n    A [batch, num_nodes, num_nodes, depth] vector of tensors\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"edge_vectors\"", ")", ":", "\n", "    ", "att_adj_vectors_shape", "=", "[", "num_edge_types", ",", "depth", "]", "\n", "adjacency_matrix_shape", "=", "common_layers", ".", "shape_list", "(", "adjacency_matrix", ")", "\n", "adj_vectors", "=", "(", "\n", "tf", ".", "get_variable", "(", "\n", "\"adj_vectors\"", ",", "\n", "att_adj_vectors_shape", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "0", ",", "depth", "**", "-", "0.5", ")", ")", "*", "\n", "(", "depth", "**", "0.5", ")", ")", "\n", "# Avoiding gathers so that it works on TPUs", "\n", "# adjacency_matrix_one_hot has shape", "\n", "# [batch, num_nodes, num_nodes, num_edge_types]", "\n", "\n", "adjacency_matrix_one_hot", "=", "tf", ".", "one_hot", "(", "adjacency_matrix", ",", "num_edge_types", ")", "\n", "\n", "att_adj_vectors", "=", "tf", ".", "matmul", "(", "\n", "tf", ".", "reshape", "(", "tf", ".", "to_float", "(", "adjacency_matrix_one_hot", ")", ",", "[", "-", "1", ",", "num_edge_types", "]", ")", ",", "\n", "adj_vectors", ")", "\n", "return", "tf", ".", "reshape", "(", "att_adj_vectors", ",", "\n", "[", "adjacency_matrix_shape", "[", "0", "]", ",", "adjacency_matrix_shape", "[", "1", "]", ",", "\n", "adjacency_matrix_shape", "[", "2", "]", ",", "depth", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.embedding_to_padding": [[1157, 1172], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.abs", "tensorflow.equal"], "function", ["None"], ["", "", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "embedding_to_padding", "(", "emb", ")", ":", "\n", "  ", "\"\"\"Calculates the padding mask based on which embeddings are all zero.\n\n  We have hacked symbol_modality to return all-zero embeddings for padding.\n\n  Args:\n    emb: a Tensor with shape [..., depth].\n\n  Returns:\n    a float Tensor with shape [...]. Each element is 1 if its corresponding\n    embedding vector is all zero, and is 0 otherwise.\n  \"\"\"", "\n", "emb_sum", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "emb", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "tf", ".", "to_float", "(", "tf", ".", "equal", "(", "emb_sum", ",", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.padding_to_length": [[1174, 1185], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.to_int32", "tensorflow.reduce_sum"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "padding_to_length", "(", "padding", ")", ":", "\n", "  ", "\"\"\"Calculate the length of mask based on padding.\n\n  Args:\n    padding: a Tensor with shape [..., length].\n  Returns:\n    a Tensor with shape [...].\n  \"\"\"", "\n", "non_padding", "=", "1.0", "-", "padding", "\n", "return", "tf", ".", "to_int32", "(", "tf", ".", "reduce_sum", "(", "non_padding", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_local": [[1187, 1213], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensor2tensor.layers.common_layers.ones_matrix_band_part"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "attention_bias_local", "(", "length", ",", "max_backward", ",", "max_forward", ")", ":", "\n", "  ", "\"\"\"Create an bias tensor to be added to attention logits.\n\n  A position may attend to positions at most max_distance from it,\n  forward and backwards.\n\n  This does not actually save any computation.\n\n  Args:\n    length: int\n    max_backward: int, maximum distance backward to attend. Negative values\n      indicate unlimited.\n    max_forward: int, maximum distance forward to attend. Negative values\n      indicate unlimited.\n\n  Returns:\n    a `Tensor` with shape [1, 1, length, length].\n  \"\"\"", "\n", "band", "=", "common_layers", ".", "ones_matrix_band_part", "(", "\n", "length", ",", "\n", "length", ",", "\n", "max_backward", ",", "\n", "max_forward", ",", "\n", "out_shape", "=", "[", "1", ",", "1", ",", "length", ",", "length", "]", ")", "\n", "return", "-", "1e9", "*", "(", "1.0", "-", "band", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_lower_triangle": [[1215, 1228], ["tensor2tensor.utils.expert_utils.add_name_scope", "quaternion_attention.attention_bias_local"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_local"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "attention_bias_lower_triangle", "(", "length", ")", ":", "\n", "  ", "\"\"\"Create an bias tensor to be added to attention logits.\n\n  Allows a query to attend to all positions up to and including its own.\n\n  Args:\n   length: a Scalar.\n\n  Returns:\n    a `Tensor` with shape [1, 1, length, length].\n  \"\"\"", "\n", "return", "attention_bias_local", "(", "length", ",", "-", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_same_segment": [[1230, 1248], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.expand_dims", "tensorflow.to_float", "tensorflow.not_equal", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "attention_bias_same_segment", "(", "query_segment_id", ",", "memory_segment_id", ")", ":", "\n", "  ", "\"\"\"Create an bias tensor to be added to attention logits.\n\n  Positions with the same segment_ids can see each other.\n\n  Args:\n    query_segment_id: a float `Tensor` with shape [batch, query_length].\n    memory_segment_id: a float `Tensor` with shape [batch, memory_length].\n\n  Returns:\n    a `Tensor` with shape [batch, 1, query_length, memory_length].\n  \"\"\"", "\n", "ret", "=", "tf", ".", "to_float", "(", "\n", "tf", ".", "not_equal", "(", "\n", "tf", ".", "expand_dims", "(", "query_segment_id", ",", "2", ")", ",", "\n", "tf", ".", "expand_dims", "(", "memory_segment_id", ",", "1", ")", ")", ")", "*", "-", "1e9", "\n", "return", "tf", ".", "expand_dims", "(", "ret", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_ignore_padding": [[1250, 1262], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "attention_bias_ignore_padding", "(", "memory_padding", ")", ":", "\n", "  ", "\"\"\"Create an bias tensor to be added to attention logits.\n\n  Args:\n    memory_padding: a float `Tensor` with shape [batch, memory_length].\n\n  Returns:\n    a `Tensor` with shape [batch, 1, 1, memory_length].\n  \"\"\"", "\n", "ret", "=", "memory_padding", "*", "-", "1e9", "\n", "return", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "ret", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_to_padding": [[1264, 1279], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.squeeze", "tensorflow.to_float", "tensorflow.less"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "attention_bias_to_padding", "(", "attention_bias", ")", ":", "\n", "  ", "\"\"\"Inverse of attention_bias_ignore_padding().\n\n  Args:\n    attention_bias: a `Tensor` with shape [batch, 1, 1, memory_length], as\n      returned by attention_bias_ignore_padding().\n\n  Returns:\n    a Tensor with shape [batch, memory_length] with 1.0 in padding positions\n    and 0.0 in non-padding positions.\n  \"\"\"", "\n", "# `attention_bias` is a large negative number in padding positions and 0.0", "\n", "# elsewhere.", "\n", "return", "tf", ".", "squeeze", "(", "tf", ".", "to_float", "(", "tf", ".", "less", "(", "attention_bias", ",", "-", "1", ")", ")", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_prepend_inputs_full_attention": [[1281, 1313], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.cumsum", "tensorflow.cumsum", "tensorflow.greater", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.to_float"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "attention_bias_prepend_inputs_full_attention", "(", "padding", ")", ":", "\n", "  ", "\"\"\"Create a bias tensor for prepend_mode=\"prepend_inputs_full_attention\".\n\n  See prepend_inputs in common_hparams.py.\n\n  Produces a bias tensor to be used in self-attention.\n\n  This bias tensor allows for full connectivity in the \"inputs\" part of\n  the sequence and masked connectivity in the targets part.\n\n  Args:\n    padding: a float `Tensor` with shape [batch, length] with\n      ones in positions corresponding to padding.  In each row, a single\n      padding position separates the input part from the target part.\n\n  Returns:\n    a `Tensor` with shape [batch, 1, length, length].\n  \"\"\"", "\n", "# Everything past the first padding position is part of the target.", "\n", "# This Tensor has zeros for the source portion and separator,", "\n", "# and ones for the target portion.", "\n", "in_target", "=", "tf", ".", "cumsum", "(", "padding", ",", "axis", "=", "1", ",", "exclusive", "=", "True", ")", "\n", "# The position within the target, or 0 if part of the source.", "\n", "target_pos", "=", "tf", ".", "cumsum", "(", "in_target", ",", "axis", "=", "1", ")", "\n", "# A position with a lesser target_pos cannot see a position with greater", "\n", "# target_pos.", "\n", "illegal_connections", "=", "tf", ".", "greater", "(", "\n", "tf", ".", "expand_dims", "(", "target_pos", ",", "1", ")", ",", "tf", ".", "expand_dims", "(", "target_pos", ",", "2", ")", ")", "\n", "bias", "=", "tf", ".", "to_float", "(", "illegal_connections", ")", "*", "-", "1e9", "\n", "bias", "=", "tf", ".", "expand_dims", "(", "bias", ",", "1", ")", "\n", "return", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_proximal": [[1315, 1328], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.to_float", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.log", "tensorflow.abs"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "attention_bias_proximal", "(", "length", ")", ":", "\n", "  ", "\"\"\"Bias for self-attention to encourage attention to close positions.\n\n  Args:\n    length: an integer scalar.\n\n  Returns:\n    a Tensor with shape [1, 1, length, length]\n  \"\"\"", "\n", "r", "=", "tf", ".", "to_float", "(", "tf", ".", "range", "(", "length", ")", ")", "\n", "diff", "=", "tf", ".", "expand_dims", "(", "r", ",", "0", ")", "-", "tf", ".", "expand_dims", "(", "r", ",", "1", ")", "\n", "return", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "-", "tf", ".", "log", "(", "1", "+", "tf", ".", "abs", "(", "diff", ")", ")", ",", "0", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_batch": [[1330, 1363], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.expand_dims", "tensorflow.expand_dims", "condition_fn", "tensorflow.squeeze", "tensorflow.to_float", "quaternion_attention.attention_bias_batch.to_float"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "attention_bias_batch", "(", "batch_coordinates_q", ",", "\n", "batch_coordinates_k", "=", "None", ",", "\n", "condition_fn", "=", "None", ")", ":", "\n", "  ", "\"\"\"Generate a mask to prevent the batch to attend to each others.\n\n  Args:\n    batch_coordinates_q: Int-like Tensor of shape [length_q, 1] containing the\n      coordinates of the batches\n    batch_coordinates_k: Int-like Tensor of shape [length_k, 1] containing the\n      coordinates of the batches. If None, do self-attention.\n    condition_fn: Callable defining the attention mask.\n\n  Returns:\n    Float-like Tensor of shape [length_q, length_k] containing either 0 or\n    -infinity (-1e9).\n  \"\"\"", "\n", "if", "batch_coordinates_k", "is", "None", ":", "\n", "    ", "batch_coordinates_k", "=", "batch_coordinates_q", "\n", "\n", "# Convert to float first because of b/25387198.", "\n", "", "def", "to_float", "(", "bc", ")", ":", "\n", "    ", "bc", "=", "tf", ".", "squeeze", "(", "bc", ",", "1", ")", "\n", "bc", "=", "tf", ".", "to_float", "(", "bc", ")", "\n", "return", "bc", "\n", "\n", "# Broadcast to create [length_q, length_k] mask.", "\n", "", "bc_v", "=", "tf", ".", "expand_dims", "(", "to_float", "(", "batch_coordinates_q", ")", ",", "1", ")", "\n", "bc_h", "=", "tf", ".", "expand_dims", "(", "to_float", "(", "batch_coordinates_k", ")", ",", "0", ")", "\n", "bias_batch", "=", "bc_h", "-", "bc_v", "\n", "bias_batch", "=", "condition_fn", "(", "bias_batch", ")", "\n", "bias_batch", "*=", "-", "1e9", "\n", "return", "bias_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_last_dimension": [[1381, 1399], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.reshape", "isinstance", "isinstance"], "function", ["None"], ["@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "split_last_dimension", "(", "x", ",", "n", ")", ":", "\n", "  ", "\"\"\"Reshape x so that the last dimension becomes two dimensions.\n\n  The first of these two dimensions is n.\n\n  Args:\n    x: a Tensor with shape [..., m]\n    n: an integer.\n\n  Returns:\n    a Tensor with shape [..., n, m/n]\n  \"\"\"", "\n", "x_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "m", "=", "x_shape", "[", "-", "1", "]", "\n", "if", "isinstance", "(", "m", ",", "int", ")", "and", "isinstance", "(", "n", ",", "int", ")", ":", "\n", "    ", "assert", "m", "%", "n", "==", "0", "\n", "", "return", "tf", ".", "reshape", "(", "x", ",", "x_shape", "[", ":", "-", "1", "]", "+", "[", "n", ",", "m", "//", "n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_last_two_dimensions": [[1401, 1414], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.reshape"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "combine_last_two_dimensions", "(", "x", ")", ":", "\n", "  ", "\"\"\"Reshape x so that the last two dimension become one.\n\n  Args:\n    x: a Tensor with shape [..., a, b]\n\n  Returns:\n    a Tensor with shape [..., ab]\n  \"\"\"", "\n", "x_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "a", ",", "b", "=", "x_shape", "[", "-", "2", ":", "]", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "x_shape", "[", ":", "-", "2", "]", "+", "[", "a", "*", "b", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_first_two_dimensions": [[1416, 1432], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.reshape", "tf.reshape.set_shape", "tensorflow.concat", "x.get_shape", "tensor2tensor.layers.common_layers.shape_list"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "combine_first_two_dimensions", "(", "x", ")", ":", "\n", "  ", "\"\"\"Reshape x so that the first two dimension become one.\n\n  Args:\n    x: a Tensor with shape [a, b, ...]\n\n  Returns:\n    a Tensor with shape [ab, ...]\n  \"\"\"", "\n", "ret", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "concat", "(", "[", "[", "-", "1", "]", ",", "common_layers", ".", "shape_list", "(", "x", ")", "[", "2", ":", "]", "]", ",", "0", ")", ")", "\n", "old_shape", "=", "x", ".", "get_shape", "(", ")", ".", "dims", "\n", "a", ",", "b", "=", "old_shape", "[", ":", "2", "]", "\n", "new_shape", "=", "[", "a", "*", "b", "if", "a", "and", "b", "else", "None", "]", "+", "old_shape", "[", "2", ":", "]", "\n", "ret", ".", "set_shape", "(", "new_shape", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads": [[1434, 1452], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.split", "tensorflow.concat", "tensorflow.transpose", "tf.concat.append", "quaternion_attention.split_last_dimension"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_last_dimension"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "split_heads", "(", "x", ",", "num_heads", ")", ":", "\n", "  ", "\"\"\"Split channels (dimension 2) into multiple heads (becomes dimension 1).\n\n  Args:\n    x: a Tensor with shape [batch, length, channels]\n    num_heads: an integer\n\n  Returns:\n    a Tensor with shape [batch, num_heads, length, channels / num_heads]\n  \"\"\"", "\n", "x", "=", "tf", ".", "split", "(", "x", ",", "4", ",", "axis", "=", "2", ")", "\n", "output", "=", "[", "]", "\n", "for", "_x", "in", "x", ":", "\n", "      ", "_x", "=", "tf", ".", "transpose", "(", "split_last_dimension", "(", "_x", ",", "num_heads", ")", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "output", ".", "append", "(", "_x", ")", "\n", "", "output", "=", "tf", ".", "concat", "(", "output", ",", "axis", "=", "3", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads_2d": [[1453, 1465], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.transpose", "quaternion_attention.split_last_dimension"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_last_dimension"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "split_heads_2d", "(", "x", ",", "num_heads", ")", ":", "\n", "  ", "\"\"\"Split channels (dimension 3) into multiple heads (becomes dimension 1).\n\n  Args:\n    x: a Tensor with shape [batch, height, width, channels]\n    num_heads: an integer\n\n  Returns:\n    a Tensor with shape [batch, num_heads, height, width, channels / num_heads]\n  \"\"\"", "\n", "return", "tf", ".", "transpose", "(", "split_last_dimension", "(", "x", ",", "num_heads", ")", ",", "[", "0", ",", "3", ",", "1", ",", "2", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_heads": [[1467, 1484], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.split", "tensorflow.concat", "quaternion_attention.combine_last_two_dimensions", "tf.concat.append", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_last_two_dimensions"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "combine_heads", "(", "x", ")", ":", "\n", "  ", "\"\"\"Inverse of split_heads.\n\n  Args:\n    x: a Tensor with shape [batch, num_heads, length, channels / num_heads]\n\n  Returns:\n    a Tensor with shape [batch, length, channels]\n  \"\"\"", "\n", "x", "=", "tf", ".", "split", "(", "x", ",", "4", ",", "axis", "=", "3", ")", "\n", "output", "=", "[", "]", "\n", "for", "_x", "in", "x", ":", "\n", "      ", "_x", "=", "combine_last_two_dimensions", "(", "tf", ".", "transpose", "(", "_x", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", ")", "\n", "output", ".", "append", "(", "_x", ")", "\n", "", "output", "=", "tf", ".", "concat", "(", "output", ",", "axis", "=", "2", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_heads_2d": [[1485, 1497], ["tensor2tensor.utils.expert_utils.add_name_scope", "quaternion_attention.combine_last_two_dimensions", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_last_two_dimensions"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "combine_heads_2d", "(", "x", ")", ":", "\n", "  ", "\"\"\"Inverse of split_heads_2d.\n\n  Args:\n    x: a Tensor with shape\n      [batch, num_heads, height, width, channels / num_heads]\n\n  Returns:\n    a Tensor with shape [batch, height, width, channels]\n  \"\"\"", "\n", "return", "combine_last_two_dimensions", "(", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "3", ",", "1", ",", "4", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_image_summary": [[1499, 1541], ["tensorflow.cast", "tensorflow.transpose", "tensorflow.pow", "tensorflow.pad", "quaternion_attention.split_last_dimension", "tensorflow.reduce_max", "tensorflow.summary.image", "tensor2tensor.layers.common_layers.shape_list", "len", "list", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "list", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.mod", "len"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_last_dimension"], ["", "def", "attention_image_summary", "(", "attn", ",", "image_shapes", "=", "None", ")", ":", "\n", "  ", "\"\"\"Compute color image summary.\n\n  Args:\n    attn: a Tensor with shape [batch, num_heads, query_length, memory_length]\n    image_shapes: optional tuple of integer scalars.\n      If the query positions and memory positions represent the\n      pixels of flattened images, then pass in their dimensions:\n        (query_rows, query_cols, memory_rows, memory_cols).\n      If the query positions and memory positions represent the\n      pixels x channels of flattened images, then pass in their dimensions:\n        (query_rows, query_cols, query_channels,\n         memory_rows, memory_cols, memory_channels).\n  \"\"\"", "\n", "attn", "=", "tf", ".", "cast", "(", "attn", ",", "tf", ".", "float32", ")", "\n", "num_heads", "=", "common_layers", ".", "shape_list", "(", "attn", ")", "[", "1", "]", "\n", "# [batch, query_length, memory_length, num_heads]", "\n", "image", "=", "tf", ".", "transpose", "(", "attn", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "image", "=", "tf", ".", "pow", "(", "image", ",", "0.2", ")", "# for high-dynamic-range", "\n", "# Each head will correspond to one of RGB.", "\n", "# pad the heads to be a multiple of 3", "\n", "image", "=", "tf", ".", "pad", "(", "image", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "tf", ".", "mod", "(", "-", "num_heads", ",", "3", ")", "]", "]", ")", "\n", "image", "=", "split_last_dimension", "(", "image", ",", "3", ")", "\n", "image", "=", "tf", ".", "reduce_max", "(", "image", ",", "4", ")", "\n", "if", "image_shapes", "is", "not", "None", ":", "\n", "    ", "if", "len", "(", "image_shapes", ")", "==", "4", ":", "\n", "      ", "q_rows", ",", "q_cols", ",", "m_rows", ",", "m_cols", "=", "list", "(", "image_shapes", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "-", "1", ",", "q_rows", ",", "q_cols", ",", "m_rows", ",", "m_cols", ",", "3", "]", ")", "\n", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", "]", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "[", "-", "1", ",", "q_rows", "*", "m_rows", ",", "q_cols", "*", "m_cols", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "      ", "assert", "len", "(", "image_shapes", ")", "==", "6", "\n", "q_rows", ",", "q_cols", ",", "q_channnels", ",", "m_rows", ",", "m_cols", ",", "m_channels", "=", "list", "(", "\n", "image_shapes", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "\n", "image", ",", "\n", "[", "-", "1", ",", "q_rows", ",", "q_cols", ",", "q_channnels", ",", "m_rows", ",", "m_cols", ",", "m_channels", ",", "3", "]", ")", "\n", "image", "=", "tf", ".", "transpose", "(", "image", ",", "[", "0", ",", "1", ",", "4", ",", "3", ",", "2", ",", "5", ",", "6", ",", "7", "]", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "\n", "image", ",", "\n", "[", "-", "1", ",", "q_rows", "*", "m_rows", "*", "q_channnels", ",", "q_cols", "*", "m_cols", "*", "m_channels", ",", "3", "]", ")", "\n", "", "", "tf", ".", "summary", ".", "image", "(", "\"attention\"", ",", "image", ",", "max_outputs", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.grouped_attention_multihead": [[1543, 1796], ["tensor2tensor.layers.common_layers.shape_list", "tensor2tensor.layers.common_layers.shape_list", "tensor2tensor.layers.common_layers.shape_list", "ValueError", "ValueError", "tensorflow.variable_scope", "tensor2tensor.layers.common_layers.dense", "tensor2tensor.layers.common_layers.dense", "quaternion_attention.split_heads", "quaternion_attention.split_heads", "tensor2tensor.layers.common_layers.dense", "quaternion_attention.split_heads", "tensorflow.get_variable", "tensor2tensor.layers.common_layers.dense", "quaternion_attention.split_heads", "tensorflow.get_variable", "quaternion_attention.combine_first_two_dimensions", "quaternion_attention.combine_first_two_dimensions", "quaternion_attention.combine_first_two_dimensions", "quaternion_attention.combine_first_two_dimensions", "quaternion_attention.combine_first_two_dimensions", "quaternion_attention.combine_first_two_dimensions", "tensorflow.argmax", "tensorflow.one_hot", "tensorflow.to_float", "tensorflow.maximum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.minimum", "tensorflow.minimum", "tensor2tensor.utils.expert_utils.TruncatingDispatcher", "tensor2tensor.utils.expert_utils.TruncatingDispatcher", "expert_utils.TruncatingDispatcher.gates", "expert_utils.TruncatingDispatcher.gates", "expert_utils.TruncatingDispatcher.dispatch", "expert_utils.TruncatingDispatcher.dispatch", "tensorflow.split", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.nn.log_softmax", "tensorflow.exp", "tensorflow.stop_gradient", "tensorflow.expand_dims", "tensorflow.matmul", "expert_utils.TruncatingDispatcher.combine", "tensorflow.reshape", "quaternion_attention.combine_heads", "tensor2tensor.layers.common_layers.dense", "expert_utils.TruncatingDispatcher.combine", "expert_utils.TruncatingDispatcher.combine", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.greater", "tensorflow.reshape", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.reduce_sum", "tensorflow.to_float", "tensor2tensor.layers.common_layers.should_generate_summaries", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.one_hot", "tensorflow.to_float", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.to_float", "tensorflow.stop_gradient", "tensorflow.exp", "expert_utils.TruncatingDispatcher.gates", "expert_utils.TruncatingDispatcher.gates", "tensorflow.reduce_sum", "min", "tensorflow.minimum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.summary.scalar", "tensorflow.pow", "tensorflow.stack", "tensorflow.summary.image", "tensorflow.expand_dims", "tensorflow.summary.image", "expert_utils.TruncatingDispatcher.nonpadding", "expert_utils.TruncatingDispatcher.length_coordinate", "expert_utils.TruncatingDispatcher.length_coordinate", "tensorflow.greater", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensor2tensor.layers.common_layers.ones_matrix_band_part", "tensorflow.expand_dims", "tensorflow.reduce_sum", "tensorflow.maximum", "tensorflow.pow", "tensorflow.to_float"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_first_two_dimensions", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_first_two_dimensions", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_first_two_dimensions", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_first_two_dimensions", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_first_two_dimensions", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_first_two_dimensions", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_heads"], ["", "def", "grouped_attention_multihead", "(", "query_antecedent", ",", "\n", "memory_antecedent", ",", "\n", "total_key_depth", ",", "\n", "total_value_depth", ",", "\n", "output_depth", ",", "\n", "num_heads", ",", "\n", "num_groups", ",", "\n", "memory_target_density", "=", "2.0", ",", "\n", "multiplicative_overhead", "=", "1.25", ",", "\n", "additive_overhead", "=", "8.0", ",", "\n", "mask_right", "=", "False", ",", "\n", "make_image_summary", "=", "True", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Multi-head dot-product attention with sparsity.\n\n  For each attention head, the queries are partitioned into groups.\n  For each group, only a subset of the key-value pairs are considered.\n\n  The choices of groups are selected based on trained predictors of\n  the total attention given the group inclusion.\n\n  memory_target_density indicates the average how many groups in which\n  a key-value pair should participate.\n\n  We use auxiliary losses to ensure that each group contains roughly\n  the same number of queries and the same number of key-value pairs.\n  If for a given sequence, the actual number of queries/pairs sent to\n  an expert exceeds this target by a factor of more than\n  multiplicative_overhead, then the last ones are dropped.  We use\n  this drop-last policy to avoid bleeding information backwards, which\n  is necessary when using this function with autoregressive\n  prediction.\n\n  Args:\n    query_antecedent: a Tensor with shape [batch, length_q, channels]\n    memory_antecedent: a Tensor with shape [batch, length_m, channels]\n    total_key_depth: an integer\n    total_value_depth: an integer\n    output_depth: an integer\n    num_heads: an integer dividing total_key_depth and total_value_depth\n    num_groups: an integer\n    memory_target_density: a floating point scalar\n    multiplicative_overhead: a floating point scalar\n    additive_overhead: a floating point scalar\n    mask_right: a boolean\n    make_image_summary: a boolean\n    name: an optional string\n\n  Returns:\n    A Tensor with shape [batch, length_q, output_depth]\n\n  Raises:\n    ValueError: if the key depth or value depth are not divisible by the\n      number of attention heads.\n  \"\"\"", "\n", "batch", "=", "common_layers", ".", "shape_list", "(", "query_antecedent", ")", "[", "0", "]", "\n", "length_q", "=", "common_layers", ".", "shape_list", "(", "query_antecedent", ")", "[", "1", "]", "\n", "length_kv", "=", "common_layers", ".", "shape_list", "(", "memory_antecedent", ")", "[", "1", "]", "\n", "\n", "if", "total_key_depth", "%", "num_heads", "!=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Key depth (%d) must be divisible by the number of \"", "\n", "\"attention heads (%d).\"", "%", "(", "total_key_depth", ",", "num_heads", ")", ")", "\n", "", "depth_qk", "=", "total_key_depth", "//", "num_heads", "\n", "if", "total_value_depth", "%", "num_heads", "!=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Value depth (%d) must be divisible by the number of \"", "\n", "\"attention heads (%d).\"", "%", "(", "total_value_depth", ",", "num_heads", ")", ")", "\n", "", "depth_v", "=", "total_value_depth", "//", "num_heads", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"multihead_attention_sparse\"", ",", "\n", "values", "=", "[", "query_antecedent", ",", "memory_antecedent", "]", ")", ":", "\n", "    ", "q", "=", "common_layers", ".", "dense", "(", "\n", "query_antecedent", ",", "total_key_depth", ",", "use_bias", "=", "False", ",", "name", "=", "\"q_transform\"", ")", "\n", "kv", "=", "common_layers", ".", "dense", "(", "\n", "memory_antecedent", ",", "\n", "total_key_depth", "+", "total_value_depth", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "\"kv_transform\"", ")", "\n", "q", "=", "split_heads", "(", "q", ",", "num_heads", ")", "\n", "kv", "=", "split_heads", "(", "kv", ",", "num_heads", ")", "\n", "# Make predictions about q_total and m_total.", "\n", "# These are used to determine group inclusion.", "\n", "# We will train these by auxiliary losses.  We use stop_gradient here", "\n", "# to keep these losses from back-propagating to the rest of the model.", "\n", "# We add biases that help balance the usage of the experts.", "\n", "q_pred", "=", "common_layers", ".", "dense", "(", "\n", "tf", ".", "stop_gradient", "(", "query_antecedent", ")", ",", "\n", "num_heads", "*", "num_groups", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "\"q_pred\"", ")", "\n", "q_pred", "=", "split_heads", "(", "q_pred", ",", "num_heads", ")", "\n", "q_bias", "=", "tf", ".", "get_variable", "(", "\"q_bias\"", ",", "[", "1", ",", "num_heads", ",", "1", ",", "num_groups", "]", ")", "\n", "q_pred_biased", "=", "q_pred", "+", "q_bias", "\n", "m_pred", "=", "common_layers", ".", "dense", "(", "\n", "tf", ".", "stop_gradient", "(", "memory_antecedent", ")", ",", "\n", "num_heads", "*", "num_groups", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "\"m_pred\"", ")", "\n", "m_pred", "=", "split_heads", "(", "m_pred", ",", "num_heads", ")", "\n", "m_bias", "=", "tf", ".", "get_variable", "(", "\"m_bias\"", ",", "[", "1", ",", "num_heads", ",", "1", ",", "num_groups", "]", ")", "\n", "m_pred_biased", "=", "m_pred", "+", "m_bias", "\n", "q", "*=", "depth_qk", "**", "-", "0.5", "\n", "# q, kv, q_pred, m_pred are all [batch, heads, length_[q/m], ?]", "\n", "# now reshape them all to [batch * heads, length, ?]", "\n", "q", "=", "combine_first_two_dimensions", "(", "q", ")", "\n", "kv", "=", "combine_first_two_dimensions", "(", "kv", ")", "\n", "q_pred", "=", "combine_first_two_dimensions", "(", "q_pred", ")", "\n", "m_pred", "=", "combine_first_two_dimensions", "(", "m_pred", ")", "\n", "q_pred_biased", "=", "combine_first_two_dimensions", "(", "q_pred_biased", ")", "\n", "m_pred_biased", "=", "combine_first_two_dimensions", "(", "m_pred_biased", ")", "\n", "q_group", "=", "tf", ".", "argmax", "(", "q_pred_biased", ",", "axis", "=", "2", ")", "\n", "q_requests", "=", "tf", ".", "one_hot", "(", "q_group", ",", "num_groups", ",", "axis", "=", "-", "1", ")", "\n", "m_requests", "=", "tf", ".", "to_float", "(", "tf", ".", "greater", "(", "m_pred_biased", ",", "0.0", ")", ")", "\n", "# include first memory position in all groups, to avoid division by zero.", "\n", "m_requests", "=", "tf", ".", "maximum", "(", "\n", "m_requests", ",", "tf", ".", "reshape", "(", "tf", ".", "one_hot", "(", "[", "0", "]", ",", "length_kv", ")", ",", "[", "1", ",", "length_kv", ",", "1", "]", ")", ")", "\n", "q_group_size", "=", "tf", ".", "reduce_sum", "(", "q_requests", ",", "1", ")", "\n", "m_group_size", "=", "tf", ".", "reduce_sum", "(", "m_requests", ",", "1", ")", "\n", "q_group_target_size", "=", "tf", ".", "to_float", "(", "length_q", ")", "/", "tf", ".", "to_float", "(", "num_groups", ")", "\n", "m_group_target_size", "=", "(", "\n", "tf", ".", "to_float", "(", "length_kv", ")", "*", "memory_target_density", "/", "\n", "tf", ".", "to_float", "(", "num_groups", ")", ")", "\n", "capacity_q", "=", "tf", ".", "minimum", "(", "\n", "length_q", ",", "\n", "tf", ".", "to_int32", "(", "q_group_target_size", "*", "multiplicative_overhead", "+", "\n", "additive_overhead", ")", ")", "\n", "capacity_m", "=", "tf", ".", "minimum", "(", "\n", "length_kv", ",", "\n", "tf", ".", "to_int32", "(", "m_group_target_size", "*", "multiplicative_overhead", "+", "\n", "additive_overhead", ")", ")", "\n", "q_dispatcher", "=", "expert_utils", ".", "TruncatingDispatcher", "(", "q_requests", ",", "capacity_q", ")", "\n", "m_dispatcher", "=", "expert_utils", ".", "TruncatingDispatcher", "(", "m_requests", ",", "capacity_m", ")", "\n", "q_gates", "=", "q_dispatcher", ".", "gates", "(", ")", "\n", "m_gates", "=", "m_dispatcher", ".", "gates", "(", ")", "\n", "dispatched_q", "=", "q_dispatcher", ".", "dispatch", "(", "q", ")", "\n", "dispatched_kv", "=", "m_dispatcher", ".", "dispatch", "(", "kv", ")", "\n", "# dispatched_q: [batch * num_heads, num_groups, capacity_q, depth_qk]", "\n", "# dispatched_kv:", "\n", "#   [batch * num_heads, num_groups, capacity_m, depth_qk + depth_v]", "\n", "k", ",", "v", "=", "tf", ".", "split", "(", "dispatched_kv", ",", "[", "depth_qk", ",", "depth_v", "]", ",", "axis", "=", "3", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "dispatched_q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "bias", "=", "tf", ".", "expand_dims", "(", "(", "m_dispatcher", ".", "nonpadding", "(", ")", "-", "1.0", ")", "*", "1e9", ",", "2", ")", "\n", "if", "mask_right", ":", "\n", "      ", "q_coordinate", "=", "tf", ".", "to_float", "(", "\n", "tf", ".", "expand_dims", "(", "q_dispatcher", ".", "length_coordinate", "(", ")", ",", "3", ")", ")", "\n", "m_coordinate", "=", "tf", ".", "to_float", "(", "\n", "tf", ".", "expand_dims", "(", "m_dispatcher", ".", "length_coordinate", "(", ")", ",", "2", ")", ")", "\n", "bias", "+=", "tf", ".", "to_float", "(", "tf", ".", "greater", "(", "m_coordinate", ",", "q_coordinate", ")", ")", "*", "-", "1e9", "\n", "", "logits", "+=", "bias", "\n", "log_weights", "=", "tf", ".", "nn", ".", "log_softmax", "(", "logits", ")", "\n", "weights", "=", "tf", ".", "exp", "(", "log_weights", ")", "\n", "# For each query, this is the log of the sum of the unnormalized weights.", "\n", "q_total", "=", "tf", ".", "stop_gradient", "(", "logits", "[", ":", ",", ":", ",", ":", ",", ":", "1", "]", "-", "log_weights", "[", ":", ",", ":", ",", ":", ",", ":", "1", "]", ")", "\n", "# For each key, this is the sum of the normalized weights.", "\n", "m_total", "=", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "stop_gradient", "(", "weights", ")", ",", "axis", "=", "2", ")", ",", "-", "1", ")", "\n", "o", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "o", "=", "q_dispatcher", ".", "combine", "(", "o", ")", "\n", "\n", "o", "=", "tf", ".", "reshape", "(", "o", ",", "[", "batch", ",", "num_heads", ",", "length_q", ",", "depth_v", "]", ")", "\n", "o", "=", "combine_heads", "(", "o", ")", "\n", "o", "=", "common_layers", ".", "dense", "(", "\n", "o", ",", "output_depth", ",", "use_bias", "=", "False", ",", "name", "=", "\"output_transform\"", ")", "\n", "\n", "m_total", "=", "m_dispatcher", ".", "combine", "(", "m_total", ")", "\n", "q_total", "=", "q_dispatcher", ".", "combine", "(", "q_total", ")", "\n", "q_total", "=", "tf", ".", "squeeze", "(", "q_total", ",", "-", "1", ")", "\n", "m_total", "=", "tf", ".", "squeeze", "(", "m_total", ",", "-", "1", ")", "\n", "# Compute summed m predictions for all groups", "\n", "m_pred_used", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "m_pred", ")", "*", "m_dispatcher", ".", "gates", "(", ")", ",", "axis", "=", "2", ")", "\n", "q_pred_used", "=", "tf", ".", "reduce_sum", "(", "q_pred", "*", "q_dispatcher", ".", "gates", "(", ")", ",", "axis", "=", "2", ")", "\n", "epsilon", "=", "1e-3", "\n", "m_pred_used", "=", "tf", ".", "log", "(", "m_pred_used", "+", "epsilon", ")", "\n", "m_total", "=", "tf", ".", "log", "(", "m_total", "+", "epsilon", ")", "\n", "m_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "m_total", "-", "m_pred_used", ")", "\n", "q_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "(", "q_total", "-", "q_pred_used", ")", "*", "tf", ".", "reduce_sum", "(", "q_gates", ",", "axis", "=", "2", ")", ")", "\n", "\n", "q_loss", "/=", "tf", ".", "to_float", "(", "batch", "*", "length_q", ")", "\n", "m_loss", "/=", "tf", ".", "to_float", "(", "batch", "*", "length_kv", ")", "\n", "\n", "# We would like the query groups to be equal sized.  The group", "\n", "# size is discrete, so we need some trick here.  We add a loss", "\n", "# proportional to the product of the group size and the", "\n", "# predictions for that group.  This encourages the predictions to", "\n", "# decrease for groups that are too big.", "\n", "q_group_deviation", "=", "(", "q_group_size", "/", "q_group_target_size", ")", "-", "1.0", "\n", "q_balance_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "reduce_mean", "(", "q_pred_biased", ",", "axis", "=", "1", ")", "*", "\n", "q_group_deviation", ")", "/", "tf", ".", "to_float", "(", "batch", ")", "\n", "m_group_deviation", "=", "(", "m_group_size", "/", "m_group_target_size", ")", "-", "1.0", "\n", "m_balance_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "reduce_mean", "(", "m_pred_biased", ",", "axis", "=", "1", ")", "*", "\n", "m_group_deviation", ")", "/", "tf", ".", "to_float", "(", "batch", ")", "\n", "\n", "# The losses in this function only propagate back to variables", "\n", "# defined in this function, and the losses outside of this", "\n", "# function only propagate back to variables outside of this", "\n", "# function.  Assuming some kind of adaptive learning algorithm,", "\n", "# it should not matter how much we scale the losses in this function.", "\n", "# Still we scale them down a lot so that they should not show up", "\n", "# much in the overall loss for the model.", "\n", "extra_loss_multiplier", "=", "1e-3", "\n", "extra_loss", "=", "q_loss", "+", "m_loss", "+", "q_balance_loss", "+", "m_balance_loss", "\n", "extra_loss", "*=", "extra_loss_multiplier", "\n", "\n", "# Show a bunch of summaries.", "\n", "if", "common_layers", ".", "should_generate_summaries", "(", ")", "and", "make_image_summary", ":", "\n", "      ", "tf", ".", "summary", ".", "histogram", "(", "\"q_group_size\"", ",", "q_group_size", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"m_group_size\"", ",", "m_group_size", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"q_loss\"", ",", "q_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"m_loss\"", ",", "m_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"q_balance_loss\"", ",", "q_balance_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"m_balance_loss\"", ",", "m_balance_loss", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"m_pred_used\"", ",", "m_pred_used", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"m_total\"", ",", "m_total", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"q_pred_used\"", ",", "q_pred_used", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"q_total\"", ",", "q_total", ")", "\n", "if", "make_image_summary", ":", "\n", "# image summaries are expensive.", "\n", "# So we restrict them to head_num<4, query_position<512, batch_index=0.", "\n", "        ", "trunc_heads", "=", "min", "(", "4", ",", "num_heads", ")", "\n", "trunc_length_q", "=", "tf", ".", "minimum", "(", "length_q", ",", "512", ")", "\n", "# We recompute the attention for the first example, in an inefficient", "\n", "# way - masking.  This lets us show pretty pictures.", "\n", "# [trunc_heads, length_q, group]", "\n", "q_gates_trunc", "=", "q_gates", "[", ":", "trunc_heads", ",", ":", "trunc_length_q", ",", ":", "]", "\n", "# [trunc_heads, length_kv, group]", "\n", "m_gates_trunc", "=", "m_gates", "[", ":", "trunc_heads", ",", ":", ",", ":", "]", "\n", "grouping_mask", "=", "tf", ".", "matmul", "(", "\n", "q_gates_trunc", ",", "m_gates_trunc", ",", "transpose_b", "=", "True", ")", "\n", "q_trunc", "=", "q", "[", ":", "trunc_heads", ",", ":", "trunc_length_q", ",", ":", "]", "\n", "k_trunc", "=", "kv", "[", ":", "trunc_heads", ",", ":", ",", ":", "depth_qk", "]", "\n", "logits_trunc", "=", "tf", ".", "matmul", "(", "q_trunc", ",", "k_trunc", ",", "transpose_b", "=", "True", ")", "\n", "if", "mask_right", ":", "\n", "          ", "band", "=", "common_layers", ".", "ones_matrix_band_part", "(", "trunc_length_q", ",", "length_kv", ",", "\n", "-", "1", ",", "0", ")", "\n", "trunc_bias", "=", "tf", ".", "expand_dims", "(", "(", "1.0", "-", "band", ")", "*", "-", "1e9", ",", "0", ")", "\n", "logits_trunc", "+=", "trunc_bias", "\n", "", "att_trunc", "=", "tf", ".", "nn", ".", "softmax", "(", "logits_trunc", ")", "\n", "mask_coverage", "=", "tf", ".", "reduce_sum", "(", "grouping_mask", "*", "att_trunc", ")", "/", "(", "\n", "tf", ".", "to_float", "(", "trunc_length_q", ")", "*", "trunc_heads", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"coverage\"", ",", "mask_coverage", ")", "\n", "att_trunc_hdr", "=", "tf", ".", "pow", "(", "att_trunc", ",", "0.2", ")", "# for high-dynamic-range", "\n", "mask_channel", "=", "grouping_mask", "*", "tf", ".", "maximum", "(", "att_trunc_hdr", ",", "0.3", ")", "\n", "image", "=", "tf", ".", "stack", "(", "[", "att_trunc_hdr", ",", "mask_channel", ",", "mask_channel", "]", ",", "axis", "=", "3", ")", "\n", "tf", ".", "summary", ".", "image", "(", "\"att\"", ",", "image", ",", "max_outputs", "=", "trunc_heads", ")", "\n", "# show one group for each head.", "\n", "att_per_group", "=", "tf", ".", "expand_dims", "(", "weights", "[", ":", "trunc_heads", ",", "0", ",", ":", ",", ":", "]", ",", "-", "1", ")", "\n", "tf", ".", "summary", ".", "image", "(", "\n", "\"att_per_group_%d\"", ",", "\n", "tf", ".", "pow", "(", "att_per_group", ",", "0.2", ")", ",", "\n", "max_outputs", "=", "trunc_heads", ")", "\n", "", "", "return", "o", ",", "extra_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_attention": [[1797, 1846], ["tensorflow.variable_scope", "tensorflow.matmul", "tensorflow.nn.softmax", "tensor2tensor.layers.common_layers.dropout_with_broadcast_dims", "tensorflow.matmul", "tensor2tensor.layers.common_layers.cast_like", "tensor2tensor.layers.common_layers.should_generate_summaries", "quaternion_attention.attention_image_summary"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_image_summary"], ["", "", "def", "dot_product_attention", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "bias", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "image_shapes", "=", "None", ",", "\n", "name", "=", "None", ",", "\n", "make_image_summary", "=", "True", ",", "\n", "save_weights_to", "=", "None", ",", "\n", "dropout_broadcast_dims", "=", "None", ")", ":", "\n", "  ", "\"\"\"Dot-product attention.\n\n  Args:\n    q: Tensor with shape [..., length_q, depth_k].\n    k: Tensor with shape [..., length_kv, depth_k]. Leading dimensions must\n      match with q.\n    v: Tensor with shape [..., length_kv, depth_v] Leading dimensions must\n      match with q.\n    bias: bias Tensor (see attention_bias())\n    dropout_rate: a float.\n    image_shapes: optional tuple of integer scalars.\n      see comments for attention_image_summary()\n    name: an optional string\n    make_image_summary: True if you want an image summary.\n    save_weights_to: an optional dictionary to capture attention weights\n      for visualization; the weights tensor will be appended there under\n      a string key created from the variable scope (including name).\n    dropout_broadcast_dims: an optional list of integers less than rank of q.\n      Specifies in which dimensions to broadcast the dropout decisions.\n\n  Returns:\n    Tensor with shape [..., length_q, depth_v].\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"dot_product_attention\"", ",", "values", "=", "[", "q", ",", "k", ",", "v", "]", ")", "as", "scope", ":", "\n", "    ", "logits", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "# [..., length_q, length_kv]", "\n", "if", "bias", "is", "not", "None", ":", "\n", "      ", "bias", "=", "common_layers", ".", "cast_like", "(", "bias", ",", "logits", ")", "\n", "logits", "+=", "bias", "\n", "", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "if", "save_weights_to", "is", "not", "None", ":", "\n", "      ", "save_weights_to", "[", "scope", ".", "name", "]", "=", "weights", "\n", "save_weights_to", "[", "scope", ".", "name", "+", "\"/logits\"", "]", "=", "logits", "\n", "# Drop out attention links for each head.", "\n", "", "weights", "=", "common_layers", ".", "dropout_with_broadcast_dims", "(", "\n", "weights", ",", "1.0", "-", "dropout_rate", ",", "broadcast_dims", "=", "dropout_broadcast_dims", ")", "\n", "if", "common_layers", ".", "should_generate_summaries", "(", ")", "and", "make_image_summary", ":", "\n", "      ", "attention_image_summary", "(", "weights", ",", "image_shapes", ")", "\n", "", "return", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.quaternion_dot_product_attention": [[1848, 1902], ["tensorflow.split", "tensorflow.concat", "tensorflow.variable_scope", "quarternion_attention", "enumerate", "tensorflow.nn.softmax", "tensor2tensor.layers.common_layers.dropout_with_broadcast_dims", "tensorflow.matmul", "tf.concat.append", "tensor2tensor.layers.common_layers.cast_like"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_attention"], ["", "", "def", "quaternion_dot_product_attention", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "bias", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "image_shapes", "=", "None", ",", "\n", "name", "=", "None", ",", "\n", "make_image_summary", "=", "True", ",", "\n", "save_weights_to", "=", "None", ",", "\n", "dropout_broadcast_dims", "=", "None", ")", ":", "\n", "    ", "\"\"\"Dot-product attention.\n    Args:\n    q: Tensor with shape [..., length_q, depth_k].\n    k: Tensor with shape [..., length_kv, depth_k]. Leading dimensions must\n      match with q.\n    v: Tensor with shape [..., length_kv, depth_v] Leading dimensions must\n      match with q.\n    bias: bias Tensor (see attention_bias())\n    dropout_rate: a float.\n    image_shapes: optional tuple of integer scalars.\n      see comments for attention_image_summary()\n    name: an optional string\n    make_image_summary: True if you want an image summary.\n    save_weights_to: an optional dictionary to capture attention weights\n      for visualization; the weights tensor will be appended there under\n      a string key created from the variable scope (including name).\n    dropout_broadcast_dims: an optional list of integers less than rank of q.\n      Specifies in which dimensions to broadcast the dropout decisions.\n    Returns:\n    Tensor with shape [..., length_q, depth_v].\n    \"\"\"", "\n", "v_vals", "=", "tf", ".", "split", "(", "v", ",", "4", ",", "axis", "=", "-", "1", ")", "\n", "output", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"dot_product_attention\"", ",", "values", "=", "[", "q", ",", "k", ",", "v", "]", ")", "as", "scope", ":", "\n", "# logits = tf.matmul(q, k, transpose_b=True)  # [..., length_q, length_kv]", "\n", "        ", "all_logits", "=", "quarternion_attention", "(", "q", ",", "k", ")", "\n", "for", "i", ",", "logits", "in", "enumerate", "(", "all_logits", ")", ":", "\n", "            ", "if", "bias", "is", "not", "None", ":", "\n", "                  ", "bias", "=", "common_layers", ".", "cast_like", "(", "bias", ",", "logits", ")", "\n", "logits", "+=", "bias", "\n", "", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "# if save_weights_to is not None:", "\n", "#   save_weights_to[scope.name] = weights", "\n", "#   save_weights_to[scope.name + \"/logits\"] = logits", "\n", "# Drop out attention links for each head.", "\n", "weights", "=", "common_layers", ".", "dropout_with_broadcast_dims", "(", "\n", "weights", ",", "1.0", "-", "dropout_rate", ",", "broadcast_dims", "=", "dropout_broadcast_dims", ")", "\n", "# if common_layers.should_generate_summaries() and make_image_summary:", "\n", "#   attention_image_summary(weights, image_shapes)", "\n", "o", "=", "tf", ".", "matmul", "(", "weights", ",", "v_vals", "[", "i", "]", ")", "\n", "output", ".", "append", "(", "o", ")", "\n", "", "", "output", "=", "tf", ".", "concat", "(", "output", ",", "axis", "=", "-", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._generate_relative_positions_matrix": [[1904, 1919], ["tensorflow.clip_by_value", "tensorflow.range", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.transpose", "tensorflow.range"], "function", ["None"], ["", "def", "_generate_relative_positions_matrix", "(", "length", ",", "max_relative_position", ",", "\n", "cache", "=", "False", ")", ":", "\n", "  ", "\"\"\"Generates matrix of relative positions between inputs.\"\"\"", "\n", "if", "not", "cache", ":", "\n", "    ", "range_vec", "=", "tf", ".", "range", "(", "length", ")", "\n", "range_mat", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "range_vec", ",", "[", "length", "]", ")", ",", "[", "length", ",", "length", "]", ")", "\n", "distance_mat", "=", "range_mat", "-", "tf", ".", "transpose", "(", "range_mat", ")", "\n", "", "else", ":", "\n", "    ", "distance_mat", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "-", "length", "+", "1", ",", "1", ",", "1", ")", ",", "0", ")", "\n", "", "distance_mat_clipped", "=", "tf", ".", "clip_by_value", "(", "distance_mat", ",", "-", "max_relative_position", ",", "\n", "max_relative_position", ")", "\n", "# Shift values to be >= 0. Each integer still uniquely identifies a relative", "\n", "# position difference.", "\n", "final_mat", "=", "distance_mat_clipped", "+", "max_relative_position", "\n", "return", "final_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._generate_relative_positions_embeddings": [[1921, 1933], ["tensorflow.variable_scope", "quaternion_attention._generate_relative_positions_matrix", "tensorflow.get_variable", "tensorflow.gather"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._generate_relative_positions_matrix"], ["", "def", "_generate_relative_positions_embeddings", "(", "length", ",", "depth", ",", "\n", "max_relative_position", ",", "name", ",", "\n", "cache", "=", "False", ")", ":", "\n", "  ", "\"\"\"Generates tensor of size [1 if cache else length, length, depth].\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "    ", "relative_positions_matrix", "=", "_generate_relative_positions_matrix", "(", "\n", "length", ",", "max_relative_position", ",", "cache", "=", "cache", ")", "\n", "vocab_size", "=", "max_relative_position", "*", "2", "+", "1", "\n", "# Generates embedding for each relative position of dimension depth.", "\n", "embeddings_table", "=", "tf", ".", "get_variable", "(", "\"embeddings\"", ",", "[", "vocab_size", ",", "depth", "]", ")", "\n", "embeddings", "=", "tf", ".", "gather", "(", "embeddings_table", ",", "relative_positions_matrix", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._relative_attention_inner": [[1935, 1967], ["tensorflow.matmul", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.shape", "x.get_shape().as_list", "tensorflow.shape", "x.get_shape"], "function", ["None"], ["", "", "def", "_relative_attention_inner", "(", "x", ",", "y", ",", "z", ",", "transpose", ")", ":", "\n", "  ", "\"\"\"Relative position-aware dot-product attention inner calculation.\n\n  This batches matrix multiply calculations to avoid unnecessary broadcasting.\n\n  Args:\n    x: Tensor with shape [batch_size, heads, length or 1, length or depth].\n    y: Tensor with shape [batch_size, heads, length or 1, depth].\n    z: Tensor with shape [length or 1, length, depth].\n    transpose: Whether to transpose inner matrices of y and z. Should be true if\n        last dimension of x is depth, not length.\n\n  Returns:\n    A Tensor with shape [batch_size, heads, length, length or depth].\n  \"\"\"", "\n", "batch_size", "=", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", "\n", "heads", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "length", "=", "tf", ".", "shape", "(", "x", ")", "[", "2", "]", "\n", "\n", "# xy_matmul is [batch_size, heads, length or 1, length or depth]", "\n", "xy_matmul", "=", "tf", ".", "matmul", "(", "x", ",", "y", ",", "transpose_b", "=", "transpose", ")", "\n", "# x_t is [length or 1, batch_size, heads, length or depth]", "\n", "x_t", "=", "tf", ".", "transpose", "(", "x", ",", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "# x_t_r is [length or 1, batch_size * heads, length or depth]", "\n", "x_t_r", "=", "tf", ".", "reshape", "(", "x_t", ",", "[", "length", ",", "heads", "*", "batch_size", ",", "-", "1", "]", ")", "\n", "# x_tz_matmul is [length or 1, batch_size * heads, length or depth]", "\n", "x_tz_matmul", "=", "tf", ".", "matmul", "(", "x_t_r", ",", "z", ",", "transpose_b", "=", "transpose", ")", "\n", "# x_tz_matmul_r is [length or 1, batch_size, heads, length or depth]", "\n", "x_tz_matmul_r", "=", "tf", ".", "reshape", "(", "x_tz_matmul", ",", "[", "length", ",", "batch_size", ",", "heads", ",", "-", "1", "]", ")", "\n", "# x_tz_matmul_r_t is [batch_size, heads, length or 1, length or depth]", "\n", "x_tz_matmul_r_t", "=", "tf", ".", "transpose", "(", "x_tz_matmul_r", ",", "[", "1", ",", "2", ",", "0", ",", "3", "]", ")", "\n", "return", "xy_matmul", "+", "x_tz_matmul_r_t", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_attention_relative": [[1969, 2034], ["ValueError", "tensorflow.variable_scope", "quaternion_attention._generate_relative_positions_embeddings", "quaternion_attention._generate_relative_positions_embeddings", "quaternion_attention._relative_attention_inner", "tensorflow.nn.softmax", "tensorflow.nn.dropout", "quaternion_attention._relative_attention_inner", "q.get_shape().assert_is_compatible_with", "q.get_shape().assert_is_compatible_with", "k.get_shape().as_list", "tensor2tensor.layers.common_layers.shape_list", "quaternion_attention.attention_image_summary", "k.get_shape", "v.get_shape", "q.get_shape", "q.get_shape", "k.get_shape", "tensorflow.get_variable_scope"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._generate_relative_positions_embeddings", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._generate_relative_positions_embeddings", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._relative_attention_inner", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._relative_attention_inner", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_image_summary"], ["", "def", "dot_product_attention_relative", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "bias", ",", "\n", "max_relative_position", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "image_shapes", "=", "None", ",", "\n", "name", "=", "None", ",", "\n", "make_image_summary", "=", "True", ",", "\n", "cache", "=", "False", ")", ":", "\n", "  ", "\"\"\"Calculate relative position-aware dot-product self-attention.\n\n  The attention calculation is augmented with learned representations for the\n  relative position between each element in q and each element in k and v.\n\n  Args:\n    q: a Tensor with shape [batch, heads, length, depth].\n    k: a Tensor with shape [batch, heads, length, depth].\n    v: a Tensor with shape [batch, heads, length, depth].\n    bias: bias Tensor.\n    max_relative_position: an integer specifying the maximum distance between\n        inputs that unique position embeddings should be learned for.\n    dropout_rate: a floating point number.\n    image_shapes: optional tuple of integer scalars.\n    name: an optional string.\n    make_image_summary: Whether to make an attention image summary.\n    cache: whether use cache mode\n\n  Returns:\n    A Tensor.\n\n  Raises:\n    ValueError: if max_relative_position is not > 0.\n  \"\"\"", "\n", "if", "not", "max_relative_position", ":", "\n", "    ", "raise", "ValueError", "(", "\"Max relative position (%s) should be > 0 when using \"", "\n", "\"relative self attention.\"", "%", "(", "max_relative_position", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"dot_product_attention_relative\"", ",", "values", "=", "[", "q", ",", "k", ",", "v", "]", ")", ":", "\n", "\n", "# This calculation only works for self attention.", "\n", "# q, k and v must therefore have the same shape.", "\n", "    ", "if", "not", "cache", ":", "\n", "      ", "q", ".", "get_shape", "(", ")", ".", "assert_is_compatible_with", "(", "k", ".", "get_shape", "(", ")", ")", "\n", "q", ".", "get_shape", "(", ")", ".", "assert_is_compatible_with", "(", "v", ".", "get_shape", "(", ")", ")", "\n", "\n", "# Use separate embeddings suitable for keys and values.", "\n", "", "depth", "=", "k", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "length", "=", "common_layers", ".", "shape_list", "(", "k", ")", "[", "2", "]", "\n", "relations_keys", "=", "_generate_relative_positions_embeddings", "(", "\n", "length", ",", "depth", ",", "max_relative_position", ",", "\"relative_positions_keys\"", ",", "\n", "cache", "=", "cache", ")", "\n", "relations_values", "=", "_generate_relative_positions_embeddings", "(", "\n", "length", ",", "depth", ",", "max_relative_position", ",", "\"relative_positions_values\"", ",", "\n", "cache", "=", "cache", ")", "\n", "\n", "# Compute self attention considering the relative position embeddings.", "\n", "logits", "=", "_relative_attention_inner", "(", "q", ",", "k", ",", "relations_keys", ",", "True", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "      ", "logits", "+=", "bias", "\n", "", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "weights", "=", "tf", ".", "nn", ".", "dropout", "(", "weights", ",", "1.0", "-", "dropout_rate", ")", "\n", "if", "not", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse", "and", "make_image_summary", ":", "\n", "      ", "attention_image_summary", "(", "weights", ",", "image_shapes", ")", "\n", "", "return", "_relative_attention_inner", "(", "weights", ",", "v", ",", "relations_values", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._relative_position_to_absolute_position_masked": [[2036, 2061], ["tensor2tensor.layers.common_layers.shape_list", "tensorflow.pad", "tensorflow.reshape", "tensorflow.slice"], "function", ["None"], ["", "", "def", "_relative_position_to_absolute_position_masked", "(", "x", ")", ":", "\n", "  ", "\"\"\"Helper to dot_product_self_attention_relative_v2.\n\n  Rearrange an attention logits or weights Tensor.\n\n  The dimensions of the input represent:\n  [batch, heads, query_position, memory_position - query_position + length - 1]\n\n  The dimensions of the output represent:\n  [batch, heads, query_position, memory_position]\n\n  Only works with masked_attention.  Undefined behavior for regions of the\n  input where memory_position > query_position.\n\n  Args:\n    x: a Tensor with shape [batch, heads, length, length]\n\n  Returns:\n    a Tensor with shape [batch, heads, length, length]\n  \"\"\"", "\n", "batch", ",", "heads", ",", "length", ",", "_", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "1", ",", "0", "]", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "batch", ",", "heads", ",", "1", "+", "length", ",", "length", "]", ")", "\n", "x", "=", "tf", ".", "slice", "(", "x", ",", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._absolute_position_to_relative_position_masked": [[2063, 2088], ["tensor2tensor.layers.common_layers.shape_list", "tensorflow.pad", "tensorflow.reshape", "tensorflow.slice"], "function", ["None"], ["", "def", "_absolute_position_to_relative_position_masked", "(", "x", ")", ":", "\n", "  ", "\"\"\"Helper to dot_product_self_attention_relative_v2.\n\n  Rearrange an attention logits or weights Tensor.\n\n  The dimensions of the input represent:\n  [batch, heads, query_position, memory_position]\n\n  The dimensions of the output represent:\n  [batch, heads, query_position, memory_position - query_position + length - 1]\n\n  Only works with masked_attention.  Undefined behavior for regions of the\n  input where memory_position > query_position.\n\n  Args:\n    x: a Tensor with shape [batch, heads, length, length]\n\n  Returns:\n    a Tensor with shape [batch, heads, length, length]\n  \"\"\"", "\n", "batch", ",", "heads", ",", "length", ",", "_", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "batch", ",", "heads", ",", "length", ",", "length", "+", "1", "]", ")", "\n", "x", "=", "tf", ".", "slice", "(", "x", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "batch", ",", "heads", ",", "length", ",", "length", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_relative_embeddings_left": [[2090, 2138], ["tensorflow.get_variable", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.pad", "tensorflow.slice", "tensorflow.pad", "tensorflow.slice", "tensorflow.random_normal_initializer"], "function", ["None"], ["", "def", "get_relative_embeddings_left", "(", "max_relative_position", ",", "length", ",", "depth", ",", "\n", "num_heads", ",", "heads_share_relative_embedding", ",", "\n", "name", ")", ":", "\n", "  ", "\"\"\"Instantiate or retrieve relative embeddings, sliced according to length.\n\n  Use for masked case where the relative attention is only looking left.\n\n  Args:\n    max_relative_position: an Integer for the number of entries in the relative\n      embedding, which corresponds to the max relative distance that is\n      considered.\n    length: an Integer, specifies the length of the input sequence for which\n      this relative embedding is retrieved for.\n    depth: an Integer, specifies the depth for relative embeddings.\n    num_heads: an Integer, specifies the number of heads.\n    heads_share_relative_embedding: a Boolean specifying if the relative\n      embedding is shared across heads.\n    name: a string giving the name of the embedding variables.\n\n  Returns:\n    a Tensor with shape [length, depth]\n  \"\"\"", "\n", "initializer_stddev", "=", "depth", "**", "-", "0.5", "\n", "if", "heads_share_relative_embedding", ":", "\n", "    ", "embedding_shape", "=", "(", "max_relative_position", ",", "depth", ")", "\n", "", "else", ":", "\n", "    ", "embedding_shape", "=", "(", "num_heads", ",", "max_relative_position", ",", "depth", ")", "\n", "", "relative_embeddings", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "name", ",", "shape", "=", "embedding_shape", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "initializer_stddev", ")", ")", "\n", "# Pad first before slice to avoid using tf.cond.", "\n", "pad_length", "=", "tf", ".", "maximum", "(", "length", "-", "max_relative_position", ",", "0", ")", "\n", "start_slice_position", "=", "tf", ".", "maximum", "(", "max_relative_position", "-", "length", ",", "0", ")", "\n", "if", "heads_share_relative_embedding", ":", "\n", "    ", "padded_relative_embeddings", "=", "tf", ".", "pad", "(", "\n", "relative_embeddings", ",", "\n", "[", "[", "pad_length", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "used_relative_embeddings", "=", "tf", ".", "slice", "(", "\n", "padded_relative_embeddings", ",", "\n", "[", "start_slice_position", ",", "0", "]", ",", "[", "length", ",", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "    ", "padded_relative_embeddings", "=", "tf", ".", "pad", "(", "\n", "relative_embeddings", ",", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "pad_length", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "used_relative_embeddings", "=", "tf", ".", "slice", "(", "\n", "padded_relative_embeddings", ",", "\n", "[", "0", ",", "start_slice_position", ",", "0", "]", ",", "[", "-", "1", ",", "length", ",", "-", "1", "]", ")", "\n", "", "return", "used_relative_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_self_attention_relative_v2": [[2140, 2231], ["ValueError", "tensorflow.variable_scope", "q.get_shape().assert_is_compatible_with", "q.get_shape().assert_is_compatible_with", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.matmul", "quaternion_attention.get_relative_embeddings_left", "quaternion_attention.matmul_with_relative_keys", "quaternion_attention._relative_position_to_absolute_position_masked", "tensorflow.nn.softmax", "tensor2tensor.layers.common_layers.dropout_with_broadcast_dims", "tensorflow.matmul", "k.get_shape", "v.get_shape", "tensor2tensor.layers.common_layers.should_generate_summaries", "quaternion_attention.attention_image_summary", "quaternion_attention._absolute_position_to_relative_position_masked", "quaternion_attention.get_relative_embeddings_left", "quaternion_attention.matmul_with_relative_values", "q.get_shape", "q.get_shape", "tensor2tensor.layers.common_layers.shape_list"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_relative_embeddings_left", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.matmul_with_relative_keys", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._relative_position_to_absolute_position_masked", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_image_summary", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._absolute_position_to_relative_position_masked", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_relative_embeddings_left", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.matmul_with_relative_values"], ["", "def", "dot_product_self_attention_relative_v2", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "bias", ",", "\n", "max_relative_position", "=", "None", ",", "\n", "dropout_rate", "=", "0.0", ",", "\n", "image_shapes", "=", "None", ",", "\n", "name", "=", "None", ",", "\n", "make_image_summary", "=", "True", ",", "\n", "dropout_broadcast_dims", "=", "None", ",", "\n", "heads_share_relative_embedding", "=", "False", ",", "\n", "add_relative_to_values", "=", "False", ")", ":", "\n", "  ", "\"\"\"Calculate relative position-aware dot-product self-attention.\n\n  Only works for masked self-attention (no looking forward).\n\n  The attention calculation is augmented with learned representations for the\n  relative position between each element in q and each element in k and v.\n\n  Args:\n    q: a Tensor with shape [batch, heads, length, depth].\n    k: a Tensor with shape [batch, heads, length, depth].\n    v: a Tensor with shape [batch, heads, length, depth].\n    bias: bias Tensor.\n    max_relative_position: an integer indicating the maximum relative distance\n      to look back - changing this invalidates checkpoints\n    dropout_rate: a floating point number.\n    image_shapes: optional tuple of integer scalars.\n    name: an optional string.\n    make_image_summary: Whether to make an attention image summary.\n    dropout_broadcast_dims:  an optional list of integers less than 4\n      specifying in which dimensions to broadcast the dropout decisions.\n      saves memory.\n    heads_share_relative_embedding: a boolean indicating wheather to share\n      relative embeddings between attention heads.\n    add_relative_to_values: a boolean for whether to add relative component to\n      values.\n\n  Returns:\n    A Tensor.\n\n  Raises:\n    ValueError: if max_relative_position is not > 0.\n  \"\"\"", "\n", "if", "not", "max_relative_position", ":", "\n", "    ", "raise", "ValueError", "(", "\"Max relative position (%s) should be > 0 when using \"", "\n", "\"relative self attention.\"", "%", "(", "max_relative_position", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "\n", "default_name", "=", "\"dot_product_self_attention_relative_v2\"", ",", "\n", "values", "=", "[", "q", ",", "k", ",", "v", "]", ")", ":", "\n", "\n", "# This calculation only works for self attention.", "\n", "# q, k and v must therefore have the same shape.", "\n", "    ", "q", ".", "get_shape", "(", ")", ".", "assert_is_compatible_with", "(", "k", ".", "get_shape", "(", ")", ")", "\n", "q", ".", "get_shape", "(", ")", ".", "assert_is_compatible_with", "(", "v", ".", "get_shape", "(", ")", ")", "\n", "\n", "# Use separate embeddings suitable for keys and values.", "\n", "_", ",", "num_heads", ",", "length", ",", "depth_k", "=", "common_layers", ".", "shape_list", "(", "k", ")", "\n", "\n", "# [batch, num_heads, query_length, memory_length]", "\n", "logits", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "key_relative_embeddings", "=", "get_relative_embeddings_left", "(", "\n", "max_relative_position", ",", "length", ",", "depth_k", ",", "num_heads", ",", "\n", "heads_share_relative_embedding", ",", "\"key_relative_embeddings\"", ")", "\n", "\n", "rel_logits", "=", "matmul_with_relative_keys", "(", "q", ",", "key_relative_embeddings", ",", "\n", "heads_share_relative_embedding", ")", "\n", "rel_logits", "=", "_relative_position_to_absolute_position_masked", "(", "rel_logits", ")", "\n", "logits", "+=", "rel_logits", "\n", "if", "bias", "is", "not", "None", ":", "\n", "      ", "logits", "+=", "bias", "\n", "\n", "", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "# Dropping out the attention links for each of the heads.", "\n", "weights", "=", "common_layers", ".", "dropout_with_broadcast_dims", "(", "\n", "weights", ",", "1.0", "-", "dropout_rate", ",", "broadcast_dims", "=", "dropout_broadcast_dims", ")", "\n", "if", "common_layers", ".", "should_generate_summaries", "(", ")", "and", "make_image_summary", ":", "\n", "      ", "attention_image_summary", "(", "weights", ",", "image_shapes", ")", "\n", "", "output", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "if", "add_relative_to_values", ":", "\n", "# [batch, num_heads, query_length, memory_length]", "\n", "      ", "relative_weights", "=", "_absolute_position_to_relative_position_masked", "(", "weights", ")", "\n", "depth_v", "=", "common_layers", ".", "shape_list", "(", "v", ")", "[", "3", "]", "\n", "value_relative_embeddings", "=", "get_relative_embeddings_left", "(", "\n", "max_relative_position", ",", "length", ",", "depth_v", ",", "num_heads", ",", "\n", "heads_share_relative_embedding", ",", "\"value_relative_embeddings\"", ")", "\n", "output", "+=", "matmul_with_relative_values", "(", "\n", "relative_weights", ",", "value_relative_embeddings", ",", "\n", "heads_share_relative_embedding", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._absolute_position_to_relative_position_unmasked": [[2233, 2262], ["tensor2tensor.layers.common_layers.shape_list", "tensorflow.pad", "tensorflow.reshape", "tensorflow.pad", "tensorflow.reshape", "tensorflow.slice"], "function", ["None"], ["", "", "def", "_absolute_position_to_relative_position_unmasked", "(", "x", ")", ":", "\n", "  ", "\"\"\"Helper function for dot_product_unmasked_self_attention_relative_v2.\n\n  Rearrange an attention logits or weights Tensor.\n\n  The dimensions of the input represent:\n  [batch, heads, query_position, memory_position]\n\n  The dimensions of the output represent:\n  [batch, heads, query_position, memory_position - query_position + length - 1]\n\n  Only works with unmasked_attention.\n\n  Args:\n    x: a Tensor with shape [batch, heads, length, length]\n\n  Returns:\n    a Tensor with shape [batch, heads, length, 2*length-1]\n  \"\"\"", "\n", "batch", ",", "heads", ",", "length", ",", "_", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "# padd along column", "\n", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "length", "-", "1", "]", "]", ")", "\n", "x_flat", "=", "tf", ".", "reshape", "(", "x", ",", "[", "batch", ",", "heads", ",", "length", "**", "2", "+", "length", "*", "(", "length", "-", "1", ")", "]", ")", "\n", "# add 0's in the beginning that will skew the elements after reshape", "\n", "x_flat", "=", "tf", ".", "pad", "(", "x_flat", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "length", ",", "0", "]", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x_flat", ",", "[", "batch", ",", "heads", ",", "length", ",", "2", "*", "length", "]", ")", "\n", "x", "=", "tf", ".", "slice", "(", "x", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", ",", "[", "batch", ",", "heads", ",", "length", ",", "\n", "2", "*", "length", "-", "1", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_relative_embeddings_left_right": [[2264, 2314], ["tensorflow.get_variable", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.pad", "tensorflow.slice", "tensorflow.pad", "tensorflow.slice", "tensorflow.random_normal_initializer"], "function", ["None"], ["", "def", "get_relative_embeddings_left_right", "(", "max_relative_position", ",", "length", ",", "depth", ",", "\n", "num_heads", ",", "\n", "heads_share_relative_embedding", ",", "\n", "name", ")", ":", "\n", "  ", "\"\"\"Instantiate or retrieve relative embeddings, sliced according to length.\n\n  Use for unmasked case where the relative attention looks both left and right.\n\n  Args:\n    max_relative_position: an Integer for the number of entries in the relative\n      embedding, which corresponds to the max relative distance that is\n      considered.\n    length: an Integer, specifies the length of the input sequence for which\n      this relative embedding is retrieved for.\n    depth: an Integer, specifies the depth for relative embeddings.\n    num_heads: an Integer, specifies the number of heads.\n    heads_share_relative_embedding: a Boolean specifying if the relative\n      embedding is shared across heads.\n    name: a string giving the name of the embedding variables.\n\n  Returns:\n    a Tensor with shape [length, depth]\n  \"\"\"", "\n", "initializer_stddev", "=", "depth", "**", "-", "0.5", "\n", "max_relative_position_unmasked", "=", "2", "*", "max_relative_position", "-", "1", "\n", "if", "heads_share_relative_embedding", ":", "\n", "    ", "embedding_shape", "=", "(", "max_relative_position_unmasked", ",", "depth", ")", "\n", "", "else", ":", "\n", "    ", "embedding_shape", "=", "(", "num_heads", ",", "max_relative_position_unmasked", ",", "depth", ")", "\n", "", "relative_embeddings", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "name", ",", "shape", "=", "embedding_shape", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "initializer_stddev", ")", ")", "\n", "# Pad first before slice to avoid using tf.cond.", "\n", "pad_length", "=", "tf", ".", "maximum", "(", "length", "-", "max_relative_position", ",", "0", ")", "\n", "slice_start_position", "=", "tf", ".", "maximum", "(", "max_relative_position", "-", "length", ",", "0", ")", "\n", "if", "heads_share_relative_embedding", ":", "\n", "    ", "padded_relative_embeddings", "=", "tf", ".", "pad", "(", "\n", "relative_embeddings", ",", "\n", "[", "[", "pad_length", ",", "pad_length", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "used_relative_embeddings", "=", "tf", ".", "slice", "(", "\n", "padded_relative_embeddings", ",", "\n", "[", "slice_start_position", ",", "0", "]", ",", "[", "2", "*", "length", "-", "1", ",", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "    ", "padded_relative_embeddings", "=", "tf", ".", "pad", "(", "\n", "relative_embeddings", ",", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "pad_length", ",", "pad_length", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "used_relative_embeddings", "=", "tf", ".", "slice", "(", "\n", "padded_relative_embeddings", ",", "\n", "[", "0", ",", "slice_start_position", ",", "0", "]", ",", "[", "-", "1", ",", "2", "*", "length", "-", "1", ",", "-", "1", "]", ")", "\n", "", "return", "used_relative_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_unmasked_self_attention_relative_v2": [[2316, 2406], ["ValueError", "tensorflow.variable_scope", "q.get_shape().assert_is_compatible_with", "q.get_shape().assert_is_compatible_with", "tensorflow.matmul", "tensor2tensor.layers.common_layers.shape_list", "quaternion_attention.get_relative_embeddings_left_right", "quaternion_attention.matmul_with_relative_keys", "quaternion_attention._relative_position_to_absolute_position_unmasked", "tensorflow.nn.softmax", "tensor2tensor.layers.common_layers.dropout_with_broadcast_dims", "tensorflow.matmul", "k.get_shape", "v.get_shape", "tensor2tensor.layers.common_layers.shape_list", "tensor2tensor.layers.common_layers.should_generate_summaries", "quaternion_attention.attention_image_summary", "quaternion_attention._absolute_position_to_relative_position_unmasked", "quaternion_attention.get_relative_embeddings_left_right", "quaternion_attention.matmul_with_relative_values", "q.get_shape", "q.get_shape", "tensor2tensor.layers.common_layers.shape_list"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_relative_embeddings_left_right", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.matmul_with_relative_keys", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._relative_position_to_absolute_position_unmasked", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_image_summary", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._absolute_position_to_relative_position_unmasked", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_relative_embeddings_left_right", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.matmul_with_relative_values"], ["", "def", "dot_product_unmasked_self_attention_relative_v2", "(", "\n", "q", ",", "k", ",", "v", ",", "bias", ",", "max_relative_position", "=", "None", ",", "dropout_rate", "=", "0.0", ",", "\n", "image_shapes", "=", "None", ",", "name", "=", "None", ",", "make_image_summary", "=", "True", ",", "\n", "dropout_broadcast_dims", "=", "None", ",", "heads_share_relative_embedding", "=", "False", ",", "\n", "add_relative_to_values", "=", "False", ")", ":", "\n", "  ", "\"\"\"Calculate relative position-aware dot-product self-attention.\n\n  The attention calculation is augmented with learned representations for the\n  relative position between each element in q and each element in k and v.\n\n  Args:\n    q: a Tensor with shape [batch, heads, length, depth].\n    k: a Tensor with shape [batch, heads, length, depth].\n    v: a Tensor with shape [batch, heads, length, depth].\n    bias: bias Tensor.\n    max_relative_position: an integer the max relative embedding considered.\n      Changing this invalidates checkpoints.\n    dropout_rate: a floating point number.\n    image_shapes: optional tuple of integer scalars.\n    name: an optional string.\n    make_image_summary: Whether to make an attention image summary.\n    dropout_broadcast_dims:  an optional list of integers less than 4\n      specifying in which dimensions to broadcast the dropout decisions.\n      saves memory.\n    heads_share_relative_embedding: a boolean indicating wheather to share\n      relative embeddings between attention heads.\n    add_relative_to_values: a boolean for whether to add relative component to\n      values.\n\n  Returns:\n    A Tensor.\n\n  Raises:\n    ValueError: if max_relative_position is not > 0.\n  \"\"\"", "\n", "if", "not", "max_relative_position", ":", "\n", "    ", "raise", "ValueError", "(", "\"Max relative position (%s) should be > 0 when using \"", "\n", "\"relative self attention.\"", "%", "(", "max_relative_position", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "\n", "default_name", "=", "\"dot_product_unmasked_self_attention_relative_v2\"", ",", "\n", "values", "=", "[", "q", ",", "k", ",", "v", "]", ")", ":", "\n", "\n", "# This calculation only works for self attention.", "\n", "# q, k and v must therefore have the same shape.", "\n", "    ", "q", ".", "get_shape", "(", ")", ".", "assert_is_compatible_with", "(", "k", ".", "get_shape", "(", ")", ")", "\n", "q", ".", "get_shape", "(", ")", ".", "assert_is_compatible_with", "(", "v", ".", "get_shape", "(", ")", ")", "\n", "\n", "# [batch, num_heads, query_length, memory_length]", "\n", "logits", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "\n", "length", "=", "common_layers", ".", "shape_list", "(", "q", ")", "[", "2", "]", "\n", "k_shape", "=", "common_layers", ".", "shape_list", "(", "k", ")", "\n", "num_heads", "=", "k_shape", "[", "1", "]", "\n", "depth_k", "=", "k_shape", "[", "-", "1", "]", "\n", "\n", "key_relative_embeddings", "=", "get_relative_embeddings_left_right", "(", "\n", "max_relative_position", ",", "length", ",", "depth_k", ",", "num_heads", ",", "\n", "heads_share_relative_embedding", ",", "\n", "\"key_relative_embeddings\"", ")", "\n", "unmasked_rel_logits", "=", "matmul_with_relative_keys", "(", "\n", "q", ",", "key_relative_embeddings", ",", "heads_share_relative_embedding", ")", "\n", "unmasked_rel_logits", "=", "_relative_position_to_absolute_position_unmasked", "(", "\n", "unmasked_rel_logits", ")", "\n", "logits", "+=", "unmasked_rel_logits", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "      ", "logits", "+=", "bias", "\n", "", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "# dropping out the attention links for each of the heads", "\n", "weights", "=", "common_layers", ".", "dropout_with_broadcast_dims", "(", "\n", "weights", ",", "1.0", "-", "dropout_rate", ",", "broadcast_dims", "=", "dropout_broadcast_dims", ")", "\n", "# relative_weights.set_shape([None, None, None, max_length])", "\n", "if", "common_layers", ".", "should_generate_summaries", "(", ")", "and", "make_image_summary", ":", "\n", "      ", "attention_image_summary", "(", "weights", ",", "image_shapes", ")", "\n", "", "ret", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "if", "add_relative_to_values", ":", "\n", "# Adds the contribution of the weighted relative embeddings to the values.", "\n", "# [batch, num_heads, query_length, 2*memory_length-1]", "\n", "      ", "relative_weights", "=", "_absolute_position_to_relative_position_unmasked", "(", "\n", "weights", ")", "\n", "depth_v", "=", "common_layers", ".", "shape_list", "(", "v", ")", "[", "3", "]", "\n", "value_relative_embeddings", "=", "get_relative_embeddings_left_right", "(", "\n", "max_relative_position", ",", "length", ",", "depth_v", ",", "num_heads", ",", "\n", "heads_share_relative_embedding", ",", "\"value_relative_embeddings\"", ")", "\n", "ret", "+=", "matmul_with_relative_values", "(", "\n", "relative_weights", ",", "value_relative_embeddings", ",", "\n", "heads_share_relative_embedding", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.masked_within_block_local_attention_1d": [[2408, 2462], ["tensorflow.variable_scope", "tensor2tensor.layers.common_layers.shape_list", "isinstance", "tensorflow.mod", "tensorflow.pad", "tensorflow.pad", "tensorflow.pad", "tensorflow.div", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.slice", "tf.slice.set_shape", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.contrib.util.constant_value", "quaternion_attention.attention_bias_lower_triangle", "int", "isinstance"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_lower_triangle"], ["", "", "def", "masked_within_block_local_attention_1d", "(", "q", ",", "k", ",", "v", ",", "block_length", "=", "64", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Attention to the source and a neighborhood to the left within a block.\n\n  The sequence is divided into blocks of length block_length. Attention for a\n  given query position can only see memory positions less than or equal to the\n  query position in the corresponding block.\n\n  Args:\n    q: a Tensor with shape [batch, heads, length, depth_k]\n    k: a Tensor with shape [batch, heads, length, depth_k]\n    v: a Tensor with shape [batch, heads, length, depth_v]\n    block_length: an integer\n    name: an optional string\n\n  Returns:\n    a Tensor of shape [batch, heads, length, depth_v]\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"within_local_attention_1d\"", ",", "values", "=", "[", "q", ",", "k", ",", "v", "]", ")", ":", "\n", "    ", "batch", ",", "heads", ",", "length", ",", "depth_k", "=", "common_layers", ".", "shape_list", "(", "q", ")", "\n", "depth_v", "=", "common_layers", ".", "shape_list", "(", "v", ")", "[", "-", "1", "]", "\n", "if", "isinstance", "(", "block_length", ",", "tf", ".", "Tensor", ")", ":", "\n", "      ", "const", "=", "tf", ".", "contrib", ".", "util", ".", "constant_value", "(", "block_length", ")", "\n", "if", "const", "is", "not", "None", ":", "\n", "        ", "block_length", "=", "int", "(", "const", ")", "\n", "\n", "# Pad query, key, value to ensure multiple of block length.", "\n", "", "", "original_length", "=", "length", "\n", "padding_size", "=", "tf", ".", "mod", "(", "-", "length", ",", "block_length", ")", "\n", "length", "+=", "padding_size", "\n", "padding", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "padding_size", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "q", "=", "tf", ".", "pad", "(", "q", ",", "padding", ")", "\n", "k", "=", "tf", ".", "pad", "(", "k", ",", "padding", ")", "\n", "v", "=", "tf", ".", "pad", "(", "v", ",", "padding", ")", "\n", "\n", "# Compute attention for all subsequent query blocks.", "\n", "num_blocks", "=", "tf", ".", "div", "(", "length", ",", "block_length", ")", "\n", "q", "=", "tf", ".", "reshape", "(", "q", ",", "[", "batch", ",", "heads", ",", "num_blocks", ",", "block_length", ",", "depth_k", "]", ")", "\n", "k", "=", "tf", ".", "reshape", "(", "k", ",", "[", "batch", ",", "heads", ",", "num_blocks", ",", "block_length", ",", "depth_k", "]", ")", "\n", "v", "=", "tf", ".", "reshape", "(", "v", ",", "[", "batch", ",", "heads", ",", "num_blocks", ",", "block_length", ",", "depth_v", "]", ")", "\n", "# [batch, heads, num_blocks, block_length, block_length]", "\n", "attention", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "attention", "+=", "tf", ".", "reshape", "(", "attention_bias_lower_triangle", "(", "block_length", ")", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "block_length", ",", "block_length", "]", ")", "\n", "attention", "=", "tf", ".", "nn", ".", "softmax", "(", "attention", ")", "\n", "# [batch, heads, num_blocks, block_length, depth_v]", "\n", "output", "=", "tf", ".", "matmul", "(", "attention", ",", "v", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "batch", ",", "heads", ",", "-", "1", ",", "depth_v", "]", ")", "\n", "\n", "# Remove the padding if introduced.", "\n", "output", "=", "tf", ".", "slice", "(", "output", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "original_length", ",", "-", "1", "]", ")", "\n", "output", ".", "set_shape", "(", "[", "None", "if", "isinstance", "(", "dim", ",", "tf", ".", "Tensor", ")", "else", "dim", "for", "dim", "in", "\n", "(", "batch", ",", "heads", ",", "length", ",", "depth_v", ")", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._relative_position_to_absolute_position_unmasked": [[2464, 2492], ["tensor2tensor.layers.common_layers.shape_list", "tensorflow.zeros", "tensorflow.concat", "tensorflow.reshape", "tensorflow.zeros", "tensorflow.concat", "tensorflow.reshape"], "function", ["None"], ["", "", "def", "_relative_position_to_absolute_position_unmasked", "(", "x", ")", ":", "\n", "  ", "\"\"\"Converts tensor from relative to aboslute indexing for local attention.\n\n  Args:\n    x: a Tensor of shape [batch (or batch*num_blocks), heads,\n                          length, 2 * length - 1]\n\n  Returns:\n    A Tensor of shape [batch (or batch*num_blocks), heads, length, length-1]\n  \"\"\"", "\n", "x_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "batch", "=", "x_shape", "[", "0", "]", "\n", "heads", "=", "x_shape", "[", "1", "]", "\n", "length", "=", "x_shape", "[", "2", "]", "\n", "# Concat columns of pad to shift from relative to absolute indexing.", "\n", "col_pad", "=", "tf", ".", "zeros", "(", "(", "batch", ",", "heads", ",", "length", ",", "1", ")", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "col_pad", "]", ",", "axis", "=", "3", ")", "\n", "\n", "# Concat extra elements so to add up to shape (len+1, 2*len-1).", "\n", "flat_x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "batch", ",", "heads", ",", "length", "*", "2", "*", "length", "]", ")", "\n", "flat_pad", "=", "tf", ".", "zeros", "(", "(", "batch", ",", "heads", ",", "length", "-", "1", ")", ")", "\n", "flat_x_padded", "=", "tf", ".", "concat", "(", "[", "flat_x", ",", "flat_pad", "]", ",", "axis", "=", "2", ")", "\n", "\n", "# Reshape and slice out the padded elements.", "\n", "final_x", "=", "tf", ".", "reshape", "(", "flat_x_padded", ",", "[", "batch", ",", "heads", ",", "length", "+", "1", ",", "2", "*", "length", "-", "1", "]", ")", "\n", "final_x", "=", "final_x", "[", ":", ",", ":", ",", ":", ",", "length", "-", "1", ":", "]", "\n", "final_x", "=", "final_x", "[", ":", ",", ":", ",", ":", "length", ",", ":", "]", "\n", "return", "final_x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.masked_local_attention_1d": [[2494, 2603], ["tensorflow.variable_scope", "tensor2tensor.layers.common_layers.shape_list", "isinstance", "tensorflow.mod", "tensorflow.pad", "tensorflow.pad", "tensorflow.pad", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "quaternion_attention.dot_product_attention", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "quaternion_attention._make_local_block", "quaternion_attention._make_local_block", "tensorflow.slice", "tensorflow.reshape", "tensor2tensor.layers.common_layers.ones_matrix_band_part", "quaternion_attention.dot_product_attention", "tensorflow.reshape", "tensorflow.concat", "tensorflow.slice", "tensorflow.reshape", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.contrib.util.constant_value", "isinstance", "isinstance", "tensorflow.where", "isinstance", "isinstance", "tensorflow.div", "quaternion_attention.attention_bias_lower_triangle", "tensor2tensor.layers.common_layers.shape_list", "int", "tensorflow.less"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_attention", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._make_local_block", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._make_local_block", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_attention", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_lower_triangle"], ["", "def", "masked_local_attention_1d", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "block_length", "=", "128", ",", "\n", "make_image_summary", "=", "False", ",", "\n", "dropout_rate", "=", "0.", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Attention to the source position and a neighborhood to the left of it.\n\n  The sequence is divided into blocks of length block_length. Attention for a\n  given query position can only see memory positions less than or equal to the\n  query position, in the corresponding block and the previous block.\n\n  Args:\n    q: a Tensor with shape [batch, heads, length, depth_k]\n    k: a Tensor with shape [batch, heads, length, depth_k]\n    v: a Tensor with shape [batch, heads, length, depth_v]\n    block_length: an integer\n    make_image_summary: a boolean, whether to make an attention image summary.\n    dropout_rate: Dropout rate for attention dropout\n    name: an optional string\n\n  Returns:\n    a Tensor of shape [batch, heads, length, depth_v]\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"local_attention_1d\"", ",", "values", "=", "[", "q", ",", "k", ",", "v", "]", ")", ":", "\n", "    ", "batch", ",", "heads", ",", "length", ",", "depth_k", "=", "common_layers", ".", "shape_list", "(", "q", ")", "\n", "depth_v", "=", "common_layers", ".", "shape_list", "(", "v", ")", "[", "-", "1", "]", "\n", "if", "isinstance", "(", "block_length", ",", "tf", ".", "Tensor", ")", ":", "\n", "      ", "const", "=", "tf", ".", "contrib", ".", "util", ".", "constant_value", "(", "block_length", ")", "\n", "if", "const", "is", "not", "None", ":", "\n", "        ", "block_length", "=", "int", "(", "const", ")", "\n", "# If (length < 2 * block_length), then we use only one block.", "\n", "", "", "if", "isinstance", "(", "length", ",", "int", ")", "and", "isinstance", "(", "block_length", ",", "int", ")", ":", "\n", "      ", "block_length", "=", "length", "if", "length", "<", "block_length", "*", "2", "else", "block_length", "\n", "", "else", ":", "\n", "      ", "block_length", "=", "tf", ".", "where", "(", "\n", "tf", ".", "less", "(", "length", ",", "block_length", "*", "2", ")", ",", "length", ",", "block_length", ")", "\n", "\n", "# Pad query, key, value to ensure multiple of block length.", "\n", "", "original_length", "=", "length", "\n", "padding_size", "=", "tf", ".", "mod", "(", "-", "length", ",", "block_length", ")", "\n", "length", "+=", "padding_size", "\n", "padding", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "padding_size", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "q", "=", "tf", ".", "pad", "(", "q", ",", "padding", ")", "\n", "k", "=", "tf", ".", "pad", "(", "k", ",", "padding", ")", "\n", "v", "=", "tf", ".", "pad", "(", "v", ",", "padding", ")", "\n", "\n", "if", "isinstance", "(", "length", ",", "int", ")", "and", "isinstance", "(", "block_length", ",", "int", ")", ":", "\n", "      ", "num_blocks", "=", "length", "//", "block_length", "\n", "", "else", ":", "\n", "      ", "num_blocks", "=", "tf", ".", "div", "(", "length", ",", "block_length", ")", "\n", "\n", "# Compute attention for the first query block.", "\n", "", "first_q", "=", "tf", ".", "slice", "(", "q", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "block_length", ",", "-", "1", "]", ")", "\n", "first_k", "=", "tf", ".", "slice", "(", "k", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "block_length", ",", "-", "1", "]", ")", "\n", "first_v", "=", "tf", ".", "slice", "(", "v", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "block_length", ",", "-", "1", "]", ")", "\n", "\n", "first_output", "=", "dot_product_attention", "(", "\n", "first_q", ",", "\n", "first_k", ",", "\n", "first_v", ",", "\n", "attention_bias_lower_triangle", "(", "block_length", ")", ",", "\n", "dropout_rate", "=", "dropout_rate", ",", "\n", "make_image_summary", "=", "make_image_summary", ",", "\n", "name", "=", "\"first_block\"", ")", "\n", "\n", "# Compute attention for all subsequent query blocks.", "\n", "q", "=", "tf", ".", "reshape", "(", "q", ",", "[", "batch", ",", "heads", ",", "num_blocks", ",", "block_length", ",", "depth_k", "]", ")", "\n", "k", "=", "tf", ".", "reshape", "(", "k", ",", "[", "batch", ",", "heads", ",", "num_blocks", ",", "block_length", ",", "depth_k", "]", ")", "\n", "v", "=", "tf", ".", "reshape", "(", "v", ",", "[", "batch", ",", "heads", ",", "num_blocks", ",", "block_length", ",", "depth_v", "]", ")", "\n", "\n", "local_k", "=", "_make_local_block", "(", "k", ",", "depth_k", ",", "batch", ",", "heads", ",", "num_blocks", ",", "\n", "block_length", ")", "\n", "local_v", "=", "_make_local_block", "(", "v", ",", "depth_v", ",", "batch", ",", "heads", ",", "num_blocks", ",", "\n", "block_length", ")", "\n", "tail_q", "=", "tf", ".", "slice", "(", "q", ",", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "tail_q", "=", "tf", ".", "reshape", "(", "tail_q", ",", "\n", "[", "batch", ",", "heads", ",", "num_blocks", "-", "1", ",", "block_length", ",", "depth_k", "]", ")", "\n", "local_length", "=", "common_layers", ".", "shape_list", "(", "local_k", ")", "[", "3", "]", "\n", "\n", "# make sure source_pos <= target_pos", "\n", "good_part", "=", "common_layers", ".", "ones_matrix_band_part", "(", "\n", "block_length", ",", "\n", "local_length", ",", "\n", "-", "1", ",", "\n", "block_length", ",", "\n", "out_shape", "=", "[", "1", ",", "1", ",", "1", ",", "block_length", ",", "local_length", "]", ")", "\n", "bias", "=", "(", "1.0", "-", "good_part", ")", "*", "-", "1e9", "\n", "# TODO(noam): figure out how to show a summary for the remaining blocks.", "\n", "# The naive way currently causes errors due to empty tensors.", "\n", "# output: [batch, heads, num_blocks-1, block_length, depth_v]", "\n", "tail_output", "=", "dot_product_attention", "(", "\n", "tail_q", ",", "\n", "local_k", ",", "\n", "local_v", ",", "\n", "bias", ",", "\n", "dropout_rate", "=", "dropout_rate", ",", "\n", "make_image_summary", "=", "False", ",", "\n", "name", "=", "\"tail_block\"", ")", "\n", "tail_output", "=", "tf", ".", "reshape", "(", "\n", "tail_output", ",", "[", "batch", ",", "heads", ",", "(", "num_blocks", "-", "1", ")", "*", "block_length", ",", "depth_v", "]", ")", "\n", "output", "=", "tf", ".", "concat", "(", "[", "first_output", ",", "tail_output", "]", ",", "axis", "=", "2", ")", "\n", "\n", "# Remove the padding if introduced.", "\n", "output", "=", "tf", ".", "slice", "(", "output", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "original_length", ",", "-", "1", "]", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "batch", ",", "heads", ",", "original_length", ",", "depth_v", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._make_local_block": [[2605, 2613], ["tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.reshape"], "function", ["None"], ["", "", "def", "_make_local_block", "(", "x", ",", "depth", ",", "batch", ",", "heads", ",", "num_blocks", ",", "block_length", ")", ":", "\n", "  ", "\"\"\"Helper function to create a local version of the keys or values for 1d.\"\"\"", "\n", "prev_block", "=", "tf", ".", "slice", "(", "x", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "num_blocks", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "cur_block", "=", "tf", ".", "slice", "(", "x", ",", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "local_block", "=", "tf", ".", "concat", "(", "[", "prev_block", ",", "cur_block", "]", ",", "3", ")", "\n", "return", "tf", ".", "reshape", "(", "local_block", ",", "\n", "[", "batch", ",", "heads", ",", "num_blocks", "-", "1", ",", "block_length", "*", "2", ",", "depth", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.masked_relative_local_attention_1d": [[2615, 2824], ["ValueError", "tensorflow.variable_scope", "tensorflow.mod", "tensorflow.pad", "tensorflow.pad", "tensorflow.pad", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "quaternion_attention.get_relative_embeddings_left", "quaternion_attention.matmul_with_relative_keys", "tensorflow.matmul", "quaternion_attention._relative_position_to_absolute_position_masked", "tensor2tensor.layers.common_layers.cast_like", "tensorflow.nn.softmax", "tensor2tensor.layers.common_layers.dropout_with_broadcast_dims", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "quaternion_attention._make_local_block", "quaternion_attention._make_local_block", "tensorflow.slice", "tensorflow.reshape", "quaternion_attention.masked_relative_local_attention_1d._reshape_for_relative"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_relative_embeddings_left", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.matmul_with_relative_keys", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._relative_position_to_absolute_position_masked", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._make_local_block", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention._make_local_block"], ["", "def", "masked_relative_local_attention_1d", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "block_length", "=", "128", ",", "\n", "make_image_summary", "=", "False", ",", "\n", "dropout_rate", "=", "0.", ",", "\n", "heads_share_relative_embedding", "=", "False", ",", "\n", "add_relative_to_values", "=", "False", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Masked local 1d attention with relative positions.\n\n  The sequence is divided into blocks of length block_size.\n  Attention for a given query position can only see memory positions\n  less than or equal to the query position, in the corresponding block\n  and the previous block.\n\n  If mask_right is True, then a target position cannot see greater source\n  positions.\n\n  Args:\n    q: a Tensor with shape [batch, heads, length, depth_k]\n    k: a Tensor with shape [batch, heads, length, depth_k]\n    v: a Tensor with shape [batch, heads, length, depth_v]\n    block_length: an integer\n    make_image_summary: a boolean, whether to make an attention image summary.\n    dropout_rate: Dropout rate for attention dropout\n    heads_share_relative_embedding: a boolean for sharing relative embeddings.\n    add_relative_to_values: a boolean for whether to add relative component to\n        values.\n    name: an optional string\n\n  Returns:\n    a Tensor of shape [batch, heads, length, depth_v]\n\n  Raises:\n    ValueError: wwhen the name for the variable scope is not passed.\n  \"\"\"", "\n", "if", "not", "name", ":", "\n", "    ", "raise", "ValueError", "(", "\"Name must be assigned since reuse for variable scope is \"", "\n", "\"set to tf.AUTO_REUSE, in order to reuse relative \"", "\n", "\"embeddings of keys and values.\"", ")", "\n", "\n", "# Reuse flag is set to auto_reuse to reuse relative embeddings of keys and", "\n", "# values across blocks (first and tail blocks).", "\n", "", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"masked_relative_local_attention_1d\"", ",", "\n", "values", "=", "[", "q", ",", "k", ",", "v", "]", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "\n", "    ", "default_block_length", "=", "block_length", "\n", "batch", "=", "common_layers", ".", "shape_list", "(", "q", ")", "[", "0", "]", "\n", "heads", "=", "common_layers", ".", "shape_list", "(", "q", ")", "[", "1", "]", "\n", "length", "=", "common_layers", ".", "shape_list", "(", "q", ")", "[", "2", "]", "\n", "# If (length < 2 * block_length), then we use only one block.", "\n", "if", "isinstance", "(", "length", ",", "int", ")", "and", "isinstance", "(", "block_length", ",", "int", ")", ":", "\n", "      ", "block_length", "=", "length", "if", "length", "<", "block_length", "*", "2", "else", "block_length", "\n", "", "else", ":", "\n", "      ", "block_length", "=", "tf", ".", "where", "(", "\n", "tf", ".", "less", "(", "length", ",", "block_length", "*", "2", ")", ",", "length", ",", "block_length", ")", "\n", "", "depth_k", "=", "common_layers", ".", "shape_list", "(", "k", ")", "[", "3", "]", "\n", "depth_v", "=", "common_layers", ".", "shape_list", "(", "v", ")", "[", "3", "]", "\n", "original_length", "=", "length", "\n", "padding_size", "=", "tf", ".", "mod", "(", "-", "length", ",", "block_length", ")", "\n", "length", "+=", "padding_size", "\n", "padding", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "padding_size", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "q", "=", "tf", ".", "pad", "(", "q", ",", "padding", ")", "\n", "k", "=", "tf", ".", "pad", "(", "k", ",", "padding", ")", "\n", "v", "=", "tf", ".", "pad", "(", "v", ",", "padding", ")", "\n", "\n", "num_blocks", "=", "length", "//", "block_length", "\n", "# compute attention for the first query block.", "\n", "first_q", "=", "tf", ".", "slice", "(", "q", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "block_length", ",", "-", "1", "]", ")", "\n", "first_k", "=", "tf", ".", "slice", "(", "k", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "block_length", ",", "-", "1", "]", ")", "\n", "first_v", "=", "tf", ".", "slice", "(", "v", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "block_length", ",", "-", "1", "]", ")", "\n", "# Relative embeddings will be used later as well.", "\n", "# TODO(avaswani,annahuang): check why 2*bl was breaking for music", "\n", "# Needs to be known at static shape inference time, hence cannot be", "\n", "# 2 * block_length.", "\n", "rel_embed_length", "=", "4", "*", "default_block_length", "\n", "# We only multiply with the needed embeddings as we slice them out.", "\n", "first_rel_embeddings", "=", "get_relative_embeddings_left", "(", "\n", "rel_embed_length", ",", "block_length", ",", "depth_k", ",", "heads", ",", "\n", "heads_share_relative_embedding", ",", "\"relative_embeddings\"", ")", "\n", "first_rel_logits", "=", "matmul_with_relative_keys", "(", "\n", "first_q", ",", "first_rel_embeddings", ",", "heads_share_relative_embedding", ")", "\n", "first_logits", "=", "tf", ".", "matmul", "(", "first_q", ",", "first_k", ",", "transpose_b", "=", "True", ")", "\n", "first_logits", "+=", "(", "\n", "_relative_position_to_absolute_position_masked", "(", "first_rel_logits", ")", ")", "\n", "# adding a mask", "\n", "first_logits", "+=", "(", "\n", "common_layers", ".", "cast_like", "(", "attention_bias_lower_triangle", "(", "block_length", ")", ",", "\n", "first_logits", ")", ")", "\n", "first_att", "=", "tf", ".", "nn", ".", "softmax", "(", "first_logits", ",", "\n", "name", "=", "\"first_attention_weights\"", ")", "\n", "# dropping out the attention links for each of the heads", "\n", "first_att", "=", "common_layers", ".", "dropout_with_broadcast_dims", "(", "\n", "first_att", ",", "1.0", "-", "dropout_rate", ",", "\n", "broadcast_dims", "=", "None", ")", "\n", "# only call image summary for the first block", "\n", "if", "common_layers", ".", "should_generate_summaries", "(", ")", "and", "make_image_summary", ":", "\n", "      ", "attention_image_summary", "(", "first_att", ",", "None", ")", "\n", "", "first_output", "=", "tf", ".", "matmul", "(", "first_att", ",", "first_v", ")", "\n", "\n", "# compute attention for all subsequent query blocks.", "\n", "q", "=", "tf", ".", "reshape", "(", "q", ",", "[", "batch", ",", "heads", ",", "num_blocks", ",", "block_length", ",", "depth_k", "]", ")", "\n", "k", "=", "tf", ".", "reshape", "(", "k", ",", "[", "batch", ",", "heads", ",", "num_blocks", ",", "block_length", ",", "depth_k", "]", ")", "\n", "v", "=", "tf", ".", "reshape", "(", "v", ",", "[", "batch", ",", "heads", ",", "num_blocks", ",", "block_length", ",", "depth_v", "]", ")", "\n", "local_k", "=", "_make_local_block", "(", "k", ",", "depth_k", ",", "batch", ",", "heads", ",", "num_blocks", ",", "\n", "block_length", ")", "\n", "local_v", "=", "_make_local_block", "(", "v", ",", "depth_v", ",", "batch", ",", "heads", ",", "num_blocks", ",", "\n", "block_length", ")", "\n", "tail_q", "=", "tf", ".", "slice", "(", "q", ",", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "tail_q", "=", "tf", ".", "reshape", "(", "tail_q", ",", "\n", "[", "batch", ",", "heads", ",", "num_blocks", "-", "1", ",", "block_length", ",", "depth_k", "]", ")", "\n", "local_length", "=", "common_layers", ".", "shape_list", "(", "local_k", ")", "[", "3", "]", "\n", "\n", "# collapsing num blocks and batch size so that we can reuse", "\n", "# functions", "\n", "def", "_reshape_for_relative", "(", "x", ")", ":", "\n", "      ", "x_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "# [batch, num_blocks, heads, length, depth]", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "batch", "*", "x_shape", "[", "2", "]", ",", "heads", ",", "x_shape", "[", "3", "]", ",", "\n", "x_shape", "[", "4", "]", "]", ")", "\n", "return", "x", "\n", "", "rel_tail_q", "=", "_reshape_for_relative", "(", "tail_q", ")", "\n", "rel_k", "=", "_reshape_for_relative", "(", "local_k", ")", "\n", "rel_v", "=", "_reshape_for_relative", "(", "local_v", ")", "\n", "rel_embeddings", "=", "get_relative_embeddings_left", "(", "\n", "rel_embed_length", ",", "2", "*", "block_length", ",", "depth_k", ",", "heads", ",", "\n", "heads_share_relative_embedding", ",", "\"relative_embeddings\"", ")", "\n", "rel_logits", "=", "matmul_with_relative_keys", "(", "\n", "rel_tail_q", ",", "rel_embeddings", ",", "heads_share_relative_embedding", ")", "\n", "# Computing relative logits separately for the masked and unmasked parts", "\n", "# because the reshaping logic is different for both", "\n", "masked_rel_logits", "=", "tf", ".", "slice", "(", "rel_logits", ",", "[", "0", ",", "0", ",", "0", ",", "block_length", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "masked_rel_logits", "=", "_relative_position_to_absolute_position_masked", "(", "\n", "masked_rel_logits", ")", "\n", "unmasked_rel_logits", "=", "tf", ".", "slice", "(", "rel_logits", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "2", "*", "block_length", "-", "1", "]", ")", "\n", "unmasked_rel_logits", "=", "_relative_position_to_absolute_position_unmasked", "(", "\n", "unmasked_rel_logits", ")", "\n", "all_rel_logits", "=", "tf", ".", "concat", "(", "[", "unmasked_rel_logits", ",", "masked_rel_logits", "]", ",", "\n", "axis", "=", "3", ")", "\n", "all_logits", "=", "(", "\n", "tf", ".", "matmul", "(", "rel_tail_q", ",", "rel_k", ",", "transpose_b", "=", "True", ")", "+", "all_rel_logits", ")", "\n", "# make sure source_pos <= target_pos", "\n", "good_part", "=", "common_layers", ".", "ones_matrix_band_part", "(", "block_length", ",", "\n", "local_length", ",", "\n", "-", "1", ",", "block_length", ")", "\n", "mask", "=", "(", "1.0", "-", "good_part", ")", "*", "-", "1e9", "\n", "mask", "=", "common_layers", ".", "cast_like", "(", "mask", ",", "all_logits", ")", "\n", "all_logits", "+=", "tf", ".", "reshape", "(", "mask", ",", "[", "1", ",", "1", ",", "block_length", ",", "local_length", "]", ")", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "all_logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "# [batch (* num_blocks), heads, query_length (=block_length),", "\n", "# key_length (=2*block_length)]", "\n", "weights", "=", "common_layers", ".", "dropout_with_broadcast_dims", "(", "\n", "weights", ",", "1.0", "-", "dropout_rate", ",", "\n", "broadcast_dims", "=", "None", ")", "\n", "\n", "output", "=", "tf", ".", "matmul", "(", "weights", ",", "rel_v", ")", "\n", "if", "add_relative_to_values", ":", "\n", "# Adds the contribution of the weighted relative embeddings to the values.", "\n", "      ", "weights_for_unmasked", ",", "weights_for_masked", "=", "(", "\n", "tf", ".", "split", "(", "weights", ",", "2", ",", "axis", "=", "3", ")", ")", "\n", "rel_weights_unmasked", "=", "_absolute_position_to_relative_position_unmasked", "(", "\n", "weights_for_unmasked", ")", "\n", "rel_weights_masked", "=", "_absolute_position_to_relative_position_masked", "(", "\n", "weights_for_masked", ")", "\n", "\n", "value_rel_embeddings_unmasked", "=", "get_relative_embeddings_left", "(", "\n", "rel_embed_length", ",", "2", "*", "block_length", ",", "depth_v", ",", "\n", "heads", ",", "heads_share_relative_embedding", ",", "\n", "\"value_relative_embeddings\"", ")", "\n", "# The unmasked part starts with index -1 as opposed 0 has take uptil last.", "\n", "if", "heads_share_relative_embedding", ":", "\n", "        ", "value_rel_embeddings_unmasked", "=", "value_rel_embeddings_unmasked", "[", ":", "-", "1", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "value_rel_embeddings_unmasked", "=", "value_rel_embeddings_unmasked", "[", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "", "value_rel_embeddings_masked", "=", "get_relative_embeddings_left", "(", "\n", "rel_embed_length", ",", "block_length", ",", "depth_v", ",", "\n", "heads", ",", "heads_share_relative_embedding", ",", "\n", "\"value_relative_embeddings\"", ")", "\n", "\n", "# [batch (*num_blocks), heads, query length, key length]", "\n", "rel_weights", "=", "tf", ".", "concat", "(", "\n", "[", "rel_weights_unmasked", ",", "rel_weights_masked", "]", ",", "axis", "=", "3", ")", "\n", "if", "heads_share_relative_embedding", ":", "\n", "        ", "value_rel_embeddings_concat_axis", "=", "0", "\n", "", "else", ":", "\n", "        ", "value_rel_embeddings_concat_axis", "=", "1", "\n", "", "value_rel_embeddings", "=", "tf", ".", "concat", "(", "\n", "[", "value_rel_embeddings_unmasked", ",", "value_rel_embeddings_masked", "]", ",", "\n", "axis", "=", "value_rel_embeddings_concat_axis", ")", "\n", "output_rel", "=", "matmul_with_relative_values", "(", "\n", "rel_weights", ",", "value_rel_embeddings", ",", "heads_share_relative_embedding", ")", "\n", "output", "+=", "output_rel", "\n", "\n", "# bring to [batch, heads, num_blocks-1, block_length, depth]", "\n", "", "output", "=", "tf", ".", "reshape", "(", "output", ",", "\n", "[", "batch", ",", "num_blocks", "-", "1", ",", "heads", ",", "block_length", ",", "depth_v", "]", ")", "\n", "output", "=", "tf", ".", "transpose", "(", "output", ",", "[", "0", ",", "2", ",", "1", ",", "3", ",", "4", "]", ")", "\n", "\n", "output", "=", "tf", ".", "reshape", "(", "\n", "output", ",", "[", "batch", ",", "heads", ",", "(", "num_blocks", "-", "1", ")", "*", "block_length", ",", "depth_v", "]", ")", "\n", "output", "=", "tf", ".", "concat", "(", "[", "first_output", ",", "output", "]", ",", "axis", "=", "2", ")", "\n", "output", "=", "tf", ".", "slice", "(", "output", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "original_length", ",", "-", "1", "]", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "batch", ",", "heads", ",", "original_length", ",", "depth_v", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.matmul_with_relative_values": [[2826, 2832], ["tensorflow.einsum", "tensorflow.einsum"], "function", ["None"], ["", "", "def", "matmul_with_relative_values", "(", "x", ",", "y", ",", "heads_share_relative_embedding", ")", ":", "\n", "  ", "if", "heads_share_relative_embedding", ":", "\n", "    ", "ret", "=", "tf", ".", "einsum", "(", "\"bhlm,md->bhld\"", ",", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "    ", "ret", "=", "tf", ".", "einsum", "(", "\"bhlm,hmd->bhld\"", ",", "x", ",", "y", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.matmul_with_relative_keys": [[2834, 2840], ["tensorflow.einsum", "tensorflow.einsum"], "function", ["None"], ["", "def", "matmul_with_relative_keys", "(", "x", ",", "y", ",", "heads_share_relative_embedding", ")", ":", "\n", "  ", "if", "heads_share_relative_embedding", ":", "\n", "    ", "ret", "=", "tf", ".", "einsum", "(", "\"bhld,md->bhlm\"", ",", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "    ", "ret", "=", "tf", ".", "einsum", "(", "\"bhld,hmd->bhlm\"", ",", "x", ",", "y", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.local_attention_1d": [[2842, 2926], ["tensorflow.variable_scope", "tensor2tensor.layers.common_layers.shape_list", "quaternion_attention.local_attention_1d.pad_to_multiple"], "function", ["None"], ["", "def", "local_attention_1d", "(", "q", ",", "k", ",", "v", ",", "block_length", "=", "128", ",", "filter_width", "=", "100", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Strided block local self-attention.\n\n  The sequence is divided into blocks of length block_length. Attention for a\n  given query position can see all memory positions in the corresponding block\n  and filter_width many positions to the left of the block.\n\n  Args:\n    q: a Tensor with shape [batch, heads, length, depth_k]\n    k: a Tensor with shape [batch, heads, length, depth_k]\n    v: a Tensor with shape [batch, heads, length, depth_v]\n    block_length: an integer\n    filter_width: an integer indicating how much to look left.\n    name: an optional string\n\n  Returns:\n    a Tensor of shape [batch, heads, length, depth_v]\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"local_self_attention_1d\"", ",", "values", "=", "[", "q", ",", "k", ",", "v", "]", ")", ":", "\n", "    ", "batch_size", ",", "num_heads", ",", "original_length", ",", "_", "=", "common_layers", ".", "shape_list", "(", "q", ")", "\n", "depth_v", "=", "common_layers", ".", "shape_list", "(", "v", ")", "[", "-", "1", "]", "\n", "\n", "# Pad query, key, value to ensure multiple of corresponding lengths.", "\n", "def", "pad_to_multiple", "(", "x", ",", "pad_length", ")", ":", "\n", "      ", "x_length", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "2", "]", "\n", "return", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "-", "x_length", "%", "pad_length", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "", "def", "pad_l_and_r", "(", "x", ",", "pad_length", ")", ":", "\n", "      ", "return", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "pad_length", ",", "pad_length", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "", "q", "=", "pad_to_multiple", "(", "q", ",", "block_length", ")", "\n", "k", "=", "pad_to_multiple", "(", "k", ",", "block_length", ")", "\n", "v", "=", "pad_to_multiple", "(", "v", ",", "block_length", ")", "\n", "\n", "# Set up query blocks.", "\n", "new_q_shape", "=", "common_layers", ".", "shape_list", "(", "q", ")", "\n", "q", "=", "reshape_by_blocks", "(", "q", ",", "new_q_shape", ",", "block_length", ")", "\n", "\n", "# Set up key and value blocks.", "\n", "# Get gather indices.", "\n", "k", "=", "pad_l_and_r", "(", "k", ",", "filter_width", ")", "\n", "v", "=", "pad_l_and_r", "(", "v", ",", "filter_width", ")", "\n", "length", "=", "common_layers", ".", "shape_list", "(", "k", ")", "[", "2", "]", "\n", "full_filter_width", "=", "block_length", "+", "2", "*", "filter_width", "\n", "indices", "=", "tf", ".", "range", "(", "0", ",", "length", ",", "delta", "=", "1", ",", "name", "=", "\"index_range\"", ")", "\n", "indices", "=", "tf", ".", "reshape", "(", "indices", ",", "[", "1", ",", "-", "1", ",", "1", "]", ")", "# [1, length, 1] for convs", "\n", "kernel", "=", "tf", ".", "expand_dims", "(", "tf", ".", "eye", "(", "full_filter_width", ")", ",", "axis", "=", "1", ")", "\n", "gather_indices", "=", "tf", ".", "nn", ".", "conv1d", "(", "\n", "tf", ".", "cast", "(", "indices", ",", "tf", ".", "float32", ")", ",", "\n", "kernel", ",", "\n", "block_length", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"gather_conv\"", ")", "\n", "\n", "gather_indices", "=", "tf", ".", "squeeze", "(", "tf", ".", "cast", "(", "gather_indices", ",", "tf", ".", "int32", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# Reshape keys and values to [length, batch, heads, dim] for gather. Then", "\n", "# reshape to [batch, heads, blocks, block_length + filter_width, dim].", "\n", "k_t", "=", "tf", ".", "transpose", "(", "k", ",", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "k_new", "=", "tf", ".", "gather", "(", "k_t", ",", "gather_indices", ")", "\n", "k_new", "=", "tf", ".", "transpose", "(", "k_new", ",", "[", "2", ",", "3", ",", "0", ",", "1", ",", "4", "]", ")", "\n", "\n", "attention_bias", "=", "tf", ".", "expand_dims", "(", "embedding_to_padding", "(", "k_new", ")", "*", "-", "1e9", ",", "axis", "=", "-", "2", ")", "\n", "\n", "v_t", "=", "tf", ".", "transpose", "(", "v", ",", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "v_new", "=", "tf", ".", "gather", "(", "v_t", ",", "gather_indices", ")", "\n", "v_new", "=", "tf", ".", "transpose", "(", "v_new", ",", "[", "2", ",", "3", ",", "0", ",", "1", ",", "4", "]", ")", "\n", "\n", "output", "=", "dot_product_attention", "(", "\n", "q", ",", "\n", "k_new", ",", "\n", "v_new", ",", "\n", "attention_bias", ",", "\n", "dropout_rate", "=", "0.", ",", "\n", "name", "=", "\"local_1d\"", ",", "\n", "make_image_summary", "=", "False", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "batch_size", ",", "num_heads", ",", "-", "1", ",", "depth_v", "]", ")", "\n", "\n", "# Remove the padding if introduced.", "\n", "output", "=", "tf", ".", "slice", "(", "output", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "original_length", ",", "-", "1", "]", ")", "\n", "output", ".", "set_shape", "(", "[", "None", "if", "isinstance", "(", "dim", ",", "tf", ".", "Tensor", ")", "else", "dim", "for", "dim", "in", "\n", "(", "batch_size", ",", "num_heads", ",", "original_length", ",", "depth_v", ")", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.reshape_by_blocks": [[2928, 2945], ["tensorflow.reshape"], "function", ["None"], ["", "", "def", "reshape_by_blocks", "(", "x", ",", "x_shape", ",", "memory_block_size", ")", ":", "\n", "  ", "\"\"\"Reshapes input by splitting its length over blocks of memory_block_size.\n\n  Args:\n    x: a Tensor with shape [batch, heads, length, depth]\n    x_shape: tf.TensorShape of x.\n    memory_block_size: Integer which divides length.\n\n  Returns:\n    Tensor with shape\n    [batch, heads, length // memory_block_size, memory_block_size, depth].\n  \"\"\"", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "\n", "x_shape", "[", "0", "]", ",", "x_shape", "[", "1", "]", ",", "x_shape", "[", "2", "]", "//", "memory_block_size", ",", "\n", "memory_block_size", ",", "x_shape", "[", "3", "]", "\n", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dilated_self_attention_1d": [[2947, 3067], ["tensorflow.variable_scope", "pad_l_and_r.get_shape().as_list", "tensor2tensor.layers.common_layers.shape_list", "quaternion_attention.local_attention_1d.pad_to_multiple"], "function", ["None"], ["", "def", "dilated_self_attention_1d", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "query_block_size", "=", "128", ",", "\n", "memory_block_size", "=", "128", ",", "\n", "gap_size", "=", "2", ",", "\n", "num_memory_blocks", "=", "2", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Dilated self-attention.\n\n  Args:\n    q: a Tensor with shape [batch, heads, length, depth_k]\n    k: a Tensor with shape [batch, heads, length, depth_k]\n    v: a Tensor with shape [batch, heads, length, depth_v]\n    query_block_size: an integer indicating size of query block\n    memory_block_size: an integer indicating the size of a memory block.\n    gap_size: an integer indicating the gap size\n    num_memory_blocks: how many memory blocks to look at to the left and right.\n      Each will be separated by gap_size.\n    name: an optional string\n\n  Returns:\n    a Tensor of shape [batch, heads, length, depth_v]\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"dilated_self_attention_1d\"", ",", "values", "=", "[", "q", ",", "k", ",", "v", "]", ")", ":", "\n", "    ", "v_list_shape", "=", "v", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "v_shape", "=", "common_layers", ".", "shape_list", "(", "v", ")", "\n", "depth_v", "=", "v_shape", "[", "3", "]", "\n", "batch_size", "=", "v_shape", "[", "0", "]", "\n", "num_heads", "=", "v_shape", "[", "1", "]", "\n", "original_length", "=", "common_layers", ".", "shape_list", "(", "q", ")", "[", "2", "]", "\n", "\n", "# Pad query, key, value to ensure multiple of corresponding lengths.", "\n", "def", "pad_to_multiple", "(", "x", ",", "pad_length", ")", ":", "\n", "      ", "x_length", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "2", "]", "\n", "return", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "-", "x_length", "%", "pad_length", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "", "def", "pad_l_and_r", "(", "x", ",", "pad_length", ")", ":", "\n", "      ", "return", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "pad_length", ",", "pad_length", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "", "q", "=", "pad_to_multiple", "(", "q", ",", "query_block_size", ")", "\n", "v", "=", "pad_to_multiple", "(", "v", ",", "query_block_size", ")", "\n", "k", "=", "pad_to_multiple", "(", "k", ",", "query_block_size", ")", "\n", "q", ".", "set_shape", "(", "v_list_shape", ")", "\n", "v", ".", "set_shape", "(", "v_list_shape", ")", "\n", "k", ".", "set_shape", "(", "v_list_shape", ")", "\n", "\n", "# Set up query blocks.", "\n", "new_q_shape", "=", "common_layers", ".", "shape_list", "(", "q", ")", "\n", "q", "=", "reshape_by_blocks", "(", "q", ",", "new_q_shape", ",", "query_block_size", ")", "\n", "self_k_part", "=", "reshape_by_blocks", "(", "k", ",", "new_q_shape", ",", "query_block_size", ")", "\n", "self_v_part", "=", "reshape_by_blocks", "(", "v", ",", "new_q_shape", ",", "query_block_size", ")", "\n", "\n", "# Set up key and value windows.", "\n", "k_v_padding", "=", "(", "gap_size", "+", "memory_block_size", ")", "*", "num_memory_blocks", "\n", "k", "=", "pad_l_and_r", "(", "k", ",", "k_v_padding", ")", "\n", "v", "=", "pad_l_and_r", "(", "v", ",", "k_v_padding", ")", "\n", "\n", "# Get gather indices.", "\n", "index_length", "=", "(", "new_q_shape", "[", "2", "]", "-", "query_block_size", "+", "memory_block_size", ")", "\n", "indices", "=", "tf", ".", "range", "(", "0", ",", "index_length", ",", "delta", "=", "1", ",", "name", "=", "\"index_range\"", ")", "\n", "indices", "=", "tf", ".", "reshape", "(", "indices", ",", "[", "1", ",", "-", "1", ",", "1", "]", ")", "# [1, length, 1] for convs", "\n", "kernel", "=", "tf", ".", "expand_dims", "(", "tf", ".", "eye", "(", "memory_block_size", ")", ",", "axis", "=", "1", ")", "\n", "gather_indices", "=", "tf", ".", "nn", ".", "conv1d", "(", "\n", "tf", ".", "cast", "(", "indices", ",", "tf", ".", "float32", ")", ",", "\n", "kernel", ",", "\n", "query_block_size", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"gather_conv\"", ")", "\n", "\n", "gather_indices", "=", "tf", ".", "squeeze", "(", "tf", ".", "cast", "(", "gather_indices", ",", "tf", ".", "int32", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# Get left and right memory blocks for each query.", "\n", "# [length, batch, heads, dim]", "\n", "k_t", "=", "tf", ".", "transpose", "(", "k", ",", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "v_t", "=", "tf", ".", "transpose", "(", "v", ",", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "left_k", "=", "gather_dilated_memory_blocks", "(", "\n", "k_t", "[", ":", "-", "k_v_padding", ",", ":", ",", ":", ",", ":", "]", ",", "num_memory_blocks", ",", "gap_size", ",", "\n", "query_block_size", ",", "memory_block_size", ",", "gather_indices", ")", "\n", "left_v", "=", "gather_dilated_memory_blocks", "(", "\n", "v_t", "[", ":", "-", "k_v_padding", ",", ":", ",", ":", ",", ":", "]", ",", "num_memory_blocks", ",", "gap_size", ",", "\n", "query_block_size", ",", "memory_block_size", ",", "gather_indices", ")", "\n", "\n", "right_k", "=", "gather_dilated_memory_blocks", "(", "\n", "k_t", "[", "k_v_padding", ":", ",", ":", ",", ":", ",", ":", "]", ",", "\n", "num_memory_blocks", ",", "\n", "gap_size", ",", "\n", "query_block_size", ",", "\n", "memory_block_size", ",", "\n", "gather_indices", ",", "\n", "direction", "=", "\"right\"", ")", "\n", "right_v", "=", "gather_dilated_memory_blocks", "(", "\n", "v_t", "[", "k_v_padding", ":", ",", ":", ",", ":", ",", ":", "]", ",", "\n", "num_memory_blocks", ",", "\n", "gap_size", ",", "\n", "query_block_size", ",", "\n", "memory_block_size", ",", "\n", "gather_indices", ",", "\n", "direction", "=", "\"right\"", ")", "\n", "\n", "k_windows", "=", "tf", ".", "concat", "(", "[", "left_k", ",", "self_k_part", ",", "right_k", "]", ",", "axis", "=", "3", ")", "\n", "v_windows", "=", "tf", ".", "concat", "(", "[", "left_v", ",", "self_v_part", ",", "right_v", "]", ",", "axis", "=", "3", ")", "\n", "attention_bias", "=", "tf", ".", "expand_dims", "(", "\n", "embedding_to_padding", "(", "k_windows", ")", "*", "-", "1e9", ",", "axis", "=", "-", "2", ")", "\n", "\n", "output", "=", "dot_product_attention", "(", "\n", "q", ",", "\n", "k_windows", ",", "\n", "v_windows", ",", "\n", "attention_bias", ",", "\n", "dropout_rate", "=", "0.", ",", "\n", "name", "=", "\"dilated_1d\"", ",", "\n", "make_image_summary", "=", "False", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "batch_size", ",", "num_heads", ",", "-", "1", ",", "depth_v", "]", ")", "\n", "\n", "# Remove the padding if introduced.", "\n", "output", "=", "tf", ".", "slice", "(", "output", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "original_length", ",", "-", "1", "]", ")", "\n", "output", ".", "set_shape", "(", "v_list_shape", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_dilated_memory_blocks": [[3069, 3111], ["six.moves.range", "tensorflow.concat", "gathered_blocks.append", "tensorflow.gather", "tensorflow.transpose", "quaternion_attention.gather_dilated_memory_blocks.gather_dilated_1d_blocks"], "function", ["None"], ["", "", "def", "gather_dilated_memory_blocks", "(", "x", ",", "\n", "num_memory_blocks", ",", "\n", "gap_size", ",", "\n", "query_block_size", ",", "\n", "memory_block_size", ",", "\n", "gather_indices", ",", "\n", "direction", "=", "\"left\"", ")", ":", "\n", "  ", "\"\"\"Gathers blocks with gaps in between.\n\n  Args:\n    x: Tensor of shape [length, batch, heads, depth]\n    num_memory_blocks: how many memory blocks to look in \"direction\". Each will\n      be separated by gap_size.\n    gap_size: an integer indicating the gap size\n    query_block_size: an integer indicating size of query block\n    memory_block_size: an integer indicating the size of a memory block.\n    gather_indices: The indices to gather from.\n    direction: left or right\n\n  Returns:\n    Tensor of shape [batch, heads, blocks, block_length, depth]\n  \"\"\"", "\n", "gathered_blocks", "=", "[", "]", "\n", "# gathering memory blocks", "\n", "for", "block_id", "in", "range", "(", "num_memory_blocks", ")", ":", "\n", "    ", "block_end_index", "=", "-", "(", "query_block_size", "+", "gap_size", "*", "\n", "(", "block_id", "+", "1", ")", "+", "memory_block_size", "*", "block_id", ")", "-", "1", "\n", "block_start_index", "=", "(", "\n", "(", "memory_block_size", "+", "gap_size", ")", "*", "(", "num_memory_blocks", "-", "(", "block_id", "+", "1", ")", ")", ")", "\n", "if", "direction", "!=", "\"left\"", ":", "\n", "      ", "[", "block_end_index", ",", "\n", "block_start_index", "]", "=", "[", "-", "block_start_index", "-", "1", ",", "-", "block_end_index", "+", "1", "]", "\n", "\n", "", "def", "gather_dilated_1d_blocks", "(", "x", ",", "gather_indices", ")", ":", "\n", "      ", "x_new", "=", "tf", ".", "gather", "(", "x", ",", "gather_indices", ")", "\n", "# [batch, heads, blocks, block_length, dim]", "\n", "return", "tf", ".", "transpose", "(", "x_new", ",", "[", "2", ",", "3", ",", "0", ",", "1", ",", "4", "]", ")", "\n", "\n", "", "gathered_blocks", ".", "append", "(", "\n", "gather_dilated_1d_blocks", "(", "x", "[", "block_start_index", ":", "block_end_index", "]", ",", "\n", "gather_indices", ")", ")", "\n", "", "return", "tf", ".", "concat", "(", "gathered_blocks", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.masked_dilated_self_attention_1d": [[3113, 3226], ["tensorflow.variable_scope", "pad_l.get_shape().as_list", "tensor2tensor.layers.common_layers.shape_list", "quaternion_attention.local_attention_1d.pad_to_multiple"], "function", ["None"], ["", "def", "masked_dilated_self_attention_1d", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "query_block_size", "=", "64", ",", "\n", "memory_block_size", "=", "64", ",", "\n", "gap_size", "=", "2", ",", "\n", "num_memory_blocks", "=", "2", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Dilated self-attention. TODO(avaswani): Try it and write a paper on it.\n\n  Args:\n    q: a Tensor with shape [batch, heads, length, depth_k]\n    k: a Tensor with shape [batch, heads, length, depth_k]\n    v: a Tensor with shape [batch, heads, length, depth_v]\n    query_block_size: an integer\n    memory_block_size: an integer indicating how much to look left.\n    gap_size: an integer indicating the gap size\n    num_memory_blocks: how many memory blocks to look at to the left. Each will\n      be separated by gap_size.\n    name: an optional string\n\n  Returns:\n    a Tensor of shape [batch, heads, length, depth_v]\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"masked_dilated_self_attention_1d\"", ",", "values", "=", "[", "q", ",", "k", ",", "v", "]", ")", ":", "\n", "    ", "v_list_shape", "=", "v", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "v_shape", "=", "common_layers", ".", "shape_list", "(", "v", ")", "\n", "depth_v", "=", "v_shape", "[", "3", "]", "\n", "batch_size", "=", "v_shape", "[", "0", "]", "\n", "num_heads", "=", "v_shape", "[", "1", "]", "\n", "original_length", "=", "common_layers", ".", "shape_list", "(", "q", ")", "[", "2", "]", "\n", "\n", "# Pad query, key, value to ensure multiple of corresponding lengths.", "\n", "def", "pad_to_multiple", "(", "x", ",", "pad_length", ")", ":", "\n", "      ", "x_length", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "2", "]", "\n", "return", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "-", "x_length", "%", "pad_length", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "", "def", "pad_l", "(", "x", ",", "left_pad_length", ")", ":", "\n", "      ", "return", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "left_pad_length", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "", "q", "=", "pad_to_multiple", "(", "q", ",", "query_block_size", ")", "\n", "v", "=", "pad_to_multiple", "(", "v", ",", "query_block_size", ")", "\n", "k", "=", "pad_to_multiple", "(", "k", ",", "query_block_size", ")", "\n", "q", ".", "set_shape", "(", "v_list_shape", ")", "\n", "v", ".", "set_shape", "(", "v_list_shape", ")", "\n", "k", ".", "set_shape", "(", "v_list_shape", ")", "\n", "\n", "# Set up query blocks.", "\n", "new_q_shape", "=", "common_layers", ".", "shape_list", "(", "q", ")", "\n", "q", "=", "reshape_by_blocks", "(", "q", ",", "new_q_shape", ",", "query_block_size", ")", "\n", "\n", "# Set up key and value windows.", "\n", "self_k_part", "=", "reshape_by_blocks", "(", "k", ",", "new_q_shape", ",", "query_block_size", ")", "\n", "self_v_part", "=", "reshape_by_blocks", "(", "v", ",", "new_q_shape", ",", "query_block_size", ")", "\n", "k_v_padding", "=", "(", "gap_size", "+", "memory_block_size", ")", "*", "num_memory_blocks", "\n", "k", "=", "pad_l", "(", "k", ",", "k_v_padding", ")", "\n", "v", "=", "pad_l", "(", "v", ",", "k_v_padding", ")", "\n", "\n", "# Get gather indices.", "\n", "index_length", "=", "(", "new_q_shape", "[", "2", "]", "-", "query_block_size", "+", "memory_block_size", ")", "\n", "\n", "indices", "=", "tf", ".", "range", "(", "0", ",", "index_length", ",", "delta", "=", "1", ",", "name", "=", "\"index_range\"", ")", "\n", "indices", "=", "tf", ".", "reshape", "(", "indices", ",", "[", "1", ",", "-", "1", ",", "1", "]", ")", "# [1, length, 1] for convs", "\n", "kernel", "=", "tf", ".", "expand_dims", "(", "tf", ".", "eye", "(", "memory_block_size", ")", ",", "axis", "=", "1", ")", "\n", "gather_indices", "=", "tf", ".", "nn", ".", "conv1d", "(", "\n", "tf", ".", "cast", "(", "indices", ",", "tf", ".", "float32", ")", ",", "\n", "kernel", ",", "\n", "query_block_size", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"gather_conv\"", ")", "\n", "gather_indices", "=", "tf", ".", "squeeze", "(", "tf", ".", "cast", "(", "gather_indices", ",", "tf", ".", "int32", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# Get left and right memory blocks for each query.", "\n", "# [length, batch, heads, dim]", "\n", "k_t", "=", "tf", ".", "transpose", "(", "k", ",", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "v_t", "=", "tf", ".", "transpose", "(", "v", ",", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "\n", "k_unmasked_windows", "=", "gather_dilated_memory_blocks", "(", "\n", "k_t", ",", "num_memory_blocks", ",", "gap_size", ",", "query_block_size", ",", "memory_block_size", ",", "\n", "gather_indices", ")", "\n", "v_unmasked_windows", "=", "gather_dilated_memory_blocks", "(", "\n", "v_t", ",", "num_memory_blocks", ",", "gap_size", ",", "query_block_size", ",", "memory_block_size", ",", "\n", "gather_indices", ")", "\n", "\n", "# Combine memory windows.", "\n", "block_q_shape", "=", "common_layers", ".", "shape_list", "(", "q", ")", "\n", "masked_attention_bias", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "attention_bias_lower_triangle", "(", "query_block_size", ")", ",", "axis", "=", "0", ")", ",", "\n", "[", "block_q_shape", "[", "0", "]", ",", "block_q_shape", "[", "1", "]", ",", "block_q_shape", "[", "2", "]", ",", "1", ",", "1", "]", ")", "\n", "padding_attention_bias", "=", "tf", ".", "expand_dims", "(", "\n", "embedding_to_padding", "(", "k_unmasked_windows", ")", "*", "-", "1e9", ",", "axis", "=", "-", "2", ")", "\n", "padding_attention_bias", "=", "tf", ".", "tile", "(", "padding_attention_bias", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "query_block_size", ",", "1", "]", ")", "\n", "attention_bias", "=", "tf", ".", "concat", "(", "\n", "[", "masked_attention_bias", ",", "padding_attention_bias", "]", ",", "axis", "=", "-", "1", ")", "\n", "# combine memory windows", "\n", "k_windows", "=", "tf", ".", "concat", "(", "[", "self_k_part", ",", "k_unmasked_windows", "]", ",", "3", ")", "\n", "v_windows", "=", "tf", ".", "concat", "(", "[", "self_v_part", ",", "v_unmasked_windows", "]", ",", "3", ")", "\n", "output", "=", "dot_product_attention", "(", "\n", "q", ",", "\n", "k_windows", ",", "\n", "v_windows", ",", "\n", "attention_bias", ",", "\n", "dropout_rate", "=", "0.", ",", "\n", "name", "=", "\"dilated_1d\"", ",", "\n", "make_image_summary", "=", "False", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "batch_size", ",", "num_heads", ",", "-", "1", ",", "depth_v", "]", ")", "\n", "\n", "# Remove the padding if introduced.", "\n", "output", "=", "tf", ".", "slice", "(", "output", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "original_length", ",", "-", "1", "]", ")", "\n", "output", ".", "set_shape", "(", "v_list_shape", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.local_attention_2d": [[3228, 3297], ["tensorflow.variable_scope", "tensor2tensor.layers.common_layers.shape_list", "quaternion_attention.pad_to_multiple_2d", "quaternion_attention.pad_to_multiple_2d", "quaternion_attention.pad_to_multiple_2d", "tensorflow.pad", "tensorflow.pad", "quaternion_attention.gather_indices_2d", "quaternion_attention.gather_blocks_2d", "quaternion_attention.gather_indices_2d", "quaternion_attention.gather_blocks_2d", "quaternion_attention.gather_blocks_2d", "tensorflow.expand_dims", "quaternion_attention.dot_product_attention", "tensor2tensor.layers.common_layers.shape_list", "quaternion_attention.scatter_blocks_2d", "tensorflow.slice", "tensorflow.to_float", "quaternion_attention.embedding_to_padding"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.pad_to_multiple_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.pad_to_multiple_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.pad_to_multiple_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_indices_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_blocks_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_indices_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_blocks_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_blocks_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_attention", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.scatter_blocks_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.embedding_to_padding"], ["", "", "def", "local_attention_2d", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "query_shape", "=", "(", "8", ",", "16", ")", ",", "\n", "memory_flange", "=", "(", "8", ",", "16", ")", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Strided block local self-attention.\n\n  The 2-D sequence is divided into 2-D blocks of shape query_shape. Attention\n  for a given query position can only see memory positions less than or equal to\n  the query position. The memory positions are the corresponding block with\n  memory_flange many positions to add to the height and width of the block\n  (namely, left, top, and right).\n\n  Args:\n    q: a Tensor with shape [batch, heads, h, w, depth_k]\n    k: a Tensor with shape [batch, heads, h, w, depth_k]\n    v: a Tensor with shape [batch, heads, h, w, depth_v]. In the current\n      implementation, depth_v must be equal to depth_k.\n    query_shape: an tuple indicating the height and width of each query block.\n    memory_flange: an integer indicating how much to look in height and width\n      from each query block.\n    name: an optional string\n\n  Returns:\n    a Tensor of shape [batch, heads, h, w, depth_v]\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"local_self_attention_2d\"", ",", "values", "=", "[", "q", ",", "k", ",", "v", "]", ")", ":", "\n", "    ", "v_shape", "=", "common_layers", ".", "shape_list", "(", "v", ")", "\n", "\n", "# Pad query, key, value to ensure multiple of corresponding lengths.", "\n", "q", "=", "pad_to_multiple_2d", "(", "q", ",", "query_shape", ")", "\n", "k", "=", "pad_to_multiple_2d", "(", "k", ",", "query_shape", ")", "\n", "v", "=", "pad_to_multiple_2d", "(", "v", ",", "query_shape", ")", "\n", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "memory_flange", "[", "0", "]", ",", "memory_flange", "[", "1", "]", "]", ",", "\n", "[", "memory_flange", "[", "0", "]", ",", "memory_flange", "[", "1", "]", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "k", "=", "tf", ".", "pad", "(", "k", ",", "paddings", ")", "\n", "v", "=", "tf", ".", "pad", "(", "v", ",", "paddings", ")", "\n", "\n", "# Set up query blocks.", "\n", "q_indices", "=", "gather_indices_2d", "(", "q", ",", "query_shape", ",", "query_shape", ")", "\n", "q_new", "=", "gather_blocks_2d", "(", "q", ",", "q_indices", ")", "\n", "\n", "# Set up key and value blocks.", "\n", "memory_shape", "=", "(", "query_shape", "[", "0", "]", "+", "2", "*", "memory_flange", "[", "0", "]", ",", "\n", "query_shape", "[", "1", "]", "+", "2", "*", "memory_flange", "[", "1", "]", ")", "\n", "k_and_v_indices", "=", "gather_indices_2d", "(", "k", ",", "memory_shape", ",", "query_shape", ")", "\n", "k_new", "=", "gather_blocks_2d", "(", "k", ",", "k_and_v_indices", ")", "\n", "v_new", "=", "gather_blocks_2d", "(", "v", ",", "k_and_v_indices", ")", "\n", "\n", "attention_bias", "=", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "to_float", "(", "embedding_to_padding", "(", "k_new", ")", ")", "*", "-", "1e9", ",", "axis", "=", "-", "2", ")", "\n", "output", "=", "dot_product_attention", "(", "\n", "q_new", ",", "\n", "k_new", ",", "\n", "v_new", ",", "\n", "attention_bias", ",", "\n", "dropout_rate", "=", "0.", ",", "\n", "name", "=", "\"local_2d\"", ",", "\n", "make_image_summary", "=", "False", ")", "\n", "# Put representations back into original shapes.", "\n", "padded_q_shape", "=", "common_layers", ".", "shape_list", "(", "q", ")", "\n", "output", "=", "scatter_blocks_2d", "(", "output", ",", "q_indices", ",", "padded_q_shape", ")", "\n", "\n", "# Remove the padding if introduced.", "\n", "output", "=", "tf", ".", "slice", "(", "output", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "v_shape", "[", "2", "]", ",", "v_shape", "[", "3", "]", ",", "-", "1", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.pad_to_multiple_2d": [[3299, 3311], ["tensorflow.pad", "tf.pad.get_shape().as_list", "tf.pad.set_shape", "x.get_shape", "tf.pad.get_shape", "tensor2tensor.layers.common_layers.shape_list", "tensor2tensor.layers.common_layers.shape_list"], "function", ["None"], ["", "", "def", "pad_to_multiple_2d", "(", "x", ",", "block_shape", ")", ":", "\n", "  ", "\"\"\"Making sure x is a multiple of shape. x is [batch, heads, h, w, depth].\"\"\"", "\n", "old_shape", "=", "x", ".", "get_shape", "(", ")", ".", "dims", "\n", "last", "=", "old_shape", "[", "-", "1", "]", "\n", "height_padding", "=", "-", "common_layers", ".", "shape_list", "(", "x", ")", "[", "2", "]", "%", "block_shape", "[", "0", "]", "\n", "width_padding", "=", "-", "common_layers", ".", "shape_list", "(", "x", ")", "[", "3", "]", "%", "block_shape", "[", "1", "]", "\n", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "height_padding", "]", ",", "[", "0", ",", "width_padding", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "padded_x", "=", "tf", ".", "pad", "(", "x", ",", "paddings", ")", "\n", "padded_shape", "=", "padded_x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "padded_shape", "=", "padded_shape", "[", ":", "-", "1", "]", "+", "[", "last", "]", "\n", "padded_x", ".", "set_shape", "(", "padded_shape", ")", "\n", "return", "padded_x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.reshape_range": [[3313, 3318], ["tensor2tensor.layers.common_layers.shape_list", "tensorflow.reshape"], "function", ["None"], ["", "def", "reshape_range", "(", "tensor", ",", "i", ",", "j", ",", "shape", ")", ":", "\n", "  ", "\"\"\"Reshapes a tensor between dimensions i and j.\"\"\"", "\n", "t_shape", "=", "common_layers", ".", "shape_list", "(", "tensor", ")", "\n", "target_shape", "=", "t_shape", "[", ":", "i", "]", "+", "shape", "+", "t_shape", "[", "j", ":", "]", "\n", "return", "tf", ".", "reshape", "(", "tensor", ",", "target_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_blocks_2d": [[3320, 3329], ["tensor2tensor.layers.common_layers.shape_list", "quaternion_attention.reshape_range", "tensorflow.transpose", "tensorflow.gather", "tensorflow.transpose", "tensorflow.reduce_prod"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.reshape_range"], ["", "def", "gather_blocks_2d", "(", "x", ",", "indices", ")", ":", "\n", "  ", "\"\"\"Gathers flattened blocks from x.\"\"\"", "\n", "x_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "x", "=", "reshape_range", "(", "x", ",", "2", ",", "4", ",", "[", "tf", ".", "reduce_prod", "(", "x_shape", "[", "2", ":", "4", "]", ")", "]", ")", "\n", "# [length, batch, heads, dim]", "\n", "x_t", "=", "tf", ".", "transpose", "(", "x", ",", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "x_new", "=", "tf", ".", "gather", "(", "x_t", ",", "indices", ")", "\n", "# returns [batch, heads, num_blocks, block_length ** 2, dim]", "\n", "return", "tf", ".", "transpose", "(", "x_new", ",", "[", "2", ",", "3", ",", "0", ",", "1", ",", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.scatter_blocks_2d": [[3331, 3342], ["tensor2tensor.layers.common_layers.shape_list", "tensorflow.transpose", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.reshape", "tensorflow.scatter_nd", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.reshape"], "function", ["None"], ["", "def", "scatter_blocks_2d", "(", "x", ",", "indices", ",", "shape", ")", ":", "\n", "  ", "\"\"\"scatters blocks from x into shape with indices.\"\"\"", "\n", "x_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "# [length, batch, heads, dim]", "\n", "x_t", "=", "tf", ".", "transpose", "(", "\n", "tf", ".", "reshape", "(", "x", ",", "[", "x_shape", "[", "0", "]", ",", "x_shape", "[", "1", "]", ",", "-", "1", ",", "x_shape", "[", "-", "1", "]", "]", ")", ",", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "x_t_shape", "=", "common_layers", ".", "shape_list", "(", "x_t", ")", "\n", "indices", "=", "tf", ".", "reshape", "(", "indices", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "scattered_x", "=", "tf", ".", "scatter_nd", "(", "indices", ",", "x_t", ",", "x_t_shape", ")", "\n", "scattered_x", "=", "tf", ".", "transpose", "(", "scattered_x", ",", "[", "1", ",", "2", ",", "0", ",", "3", "]", ")", "\n", "return", "tf", ".", "reshape", "(", "scattered_x", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_indices_2d": [[3344, 3366], ["tensorflow.eye", "quaternion_attention.reshape_range", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.range", "tensorflow.reshape", "tensorflow.nn.conv2d", "all", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "tensor2tensor.layers.common_layers.shape_list", "functools.reduce", "tensorflow.reduce_prod", "isinstance"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.reshape_range"], ["", "def", "gather_indices_2d", "(", "x", ",", "block_shape", ",", "block_stride", ")", ":", "\n", "  ", "\"\"\"Getting gather indices.\"\"\"", "\n", "# making an identity matrix kernel", "\n", "kernel", "=", "tf", ".", "eye", "(", "block_shape", "[", "0", "]", "*", "block_shape", "[", "1", "]", ")", "\n", "kernel", "=", "reshape_range", "(", "kernel", ",", "0", ",", "1", ",", "[", "block_shape", "[", "0", "]", ",", "block_shape", "[", "1", "]", ",", "1", "]", ")", "\n", "# making indices [1, h, w, 1] to appy convs", "\n", "x_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "indices", "=", "tf", ".", "range", "(", "x_shape", "[", "2", "]", "*", "x_shape", "[", "3", "]", ")", "\n", "indices", "=", "tf", ".", "reshape", "(", "indices", ",", "[", "1", ",", "x_shape", "[", "2", "]", ",", "x_shape", "[", "3", "]", ",", "1", "]", ")", "\n", "indices", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "tf", ".", "cast", "(", "indices", ",", "tf", ".", "float32", ")", ",", "\n", "kernel", ",", "\n", "strides", "=", "[", "1", ",", "block_stride", "[", "0", "]", ",", "block_stride", "[", "1", "]", ",", "1", "]", ",", "\n", "padding", "=", "\"VALID\"", ")", "\n", "# making indices [num_blocks, dim] to gather", "\n", "dims", "=", "common_layers", ".", "shape_list", "(", "indices", ")", "[", ":", "3", "]", "\n", "if", "all", "(", "[", "isinstance", "(", "dim", ",", "int", ")", "for", "dim", "in", "dims", "]", ")", ":", "\n", "    ", "num_blocks", "=", "functools", ".", "reduce", "(", "operator", ".", "mul", ",", "dims", ",", "1", ")", "\n", "", "else", ":", "\n", "    ", "num_blocks", "=", "tf", ".", "reduce_prod", "(", "dims", ")", "\n", "", "indices", "=", "tf", ".", "reshape", "(", "indices", ",", "[", "num_blocks", ",", "-", "1", "]", ")", "\n", "return", "tf", ".", "cast", "(", "indices", ",", "tf", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.make_2d_block_raster_mask": [[3368, 3408], ["tensor2tensor.layers.common_layers.ones_matrix_band_part", "tensorflow.split", "tensorflow.concat", "numpy.prod", "numpy.prod", "tensorflow.concat", "six.moves.range", "tensorflow.ones", "tensorflow.concat", "tensorflow.ones", "tensorflow.zeros", "numpy.prod", "numpy.prod", "numpy.prod"], "function", ["None"], ["", "def", "make_2d_block_raster_mask", "(", "query_shape", ",", "memory_flange", ")", ":", "\n", "  ", "\"\"\"Creates a mask for 2d block raster scan.\n\n  The query mask can look to the left, top left, top, and top right, but\n  not to the right. Inside the query, we have the standard raster scan\n  masking.\n  Args:\n    query_shape: A tuple of ints (query_height, query_width)\n    memory_flange: A tuple of ints\n      (memory_flange_height, memory_flange_width)\n\n  Returns:\n    A tensor of shape query_size, memory_size\n  \"\"\"", "\n", "# mask inside the query block", "\n", "query_triangle", "=", "common_layers", ".", "ones_matrix_band_part", "(", "\n", "np", ".", "prod", "(", "query_shape", ")", ",", "np", ".", "prod", "(", "query_shape", ")", ",", "-", "1", ",", "0", ")", "\n", "split_query_masks", "=", "tf", ".", "split", "(", "query_triangle", ",", "query_shape", "[", "0", "]", ",", "axis", "=", "1", ")", "\n", "# adding mask for left and right", "\n", "mask_pieces", "=", "[", "\n", "tf", ".", "concat", "(", "\n", "[", "\n", "tf", ".", "ones", "(", "[", "np", ".", "prod", "(", "query_shape", ")", ",", "memory_flange", "[", "1", "]", "]", ")", ",", "\n", "split_query_masks", "[", "i", "]", ",", "\n", "tf", ".", "zeros", "(", "[", "np", ".", "prod", "(", "query_shape", ")", ",", "memory_flange", "[", "1", "]", "]", ")", "\n", "]", ",", "\n", "axis", "=", "1", ")", "for", "i", "in", "range", "(", "query_shape", "[", "0", "]", ")", "\n", "]", "\n", "# adding mask for top", "\n", "final_mask", "=", "tf", ".", "concat", "(", "\n", "[", "\n", "tf", ".", "ones", "(", "[", "\n", "np", ".", "prod", "(", "query_shape", ")", ",", "\n", "(", "query_shape", "[", "1", "]", "+", "2", "*", "memory_flange", "[", "1", "]", ")", "*", "memory_flange", "[", "0", "]", "\n", "]", ")", ",", "\n", "tf", ".", "concat", "(", "mask_pieces", ",", "axis", "=", "1", ")", "\n", "]", ",", "\n", "axis", "=", "1", ")", "\n", "# 0.0 is visible location, 1.0 is masked.", "\n", "return", "1.", "-", "final_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_memory_region": [[3410, 3462], ["quaternion_attention.pad_to_multiple_2d", "quaternion_attention.gather_blocks_2d", "tensorflow.pad", "quaternion_attention.gather_indices_2d", "quaternion_attention.gather_blocks_2d", "quaternion_attention.gather_indices_2d", "quaternion_attention.gather_blocks_2d", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.pad_to_multiple_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_blocks_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_indices_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_blocks_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_indices_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_blocks_2d"], ["", "def", "get_memory_region", "(", "x", ",", "query_block_shape", ",", "memory_flange", ",", "q_indices", ")", ":", "\n", "  ", "\"\"\"Get the memory regions that surround a 2d query.\n\n    The memory regions will be the left and top right.\n\n  Args:\n    x: A tensor with shape [batch, heads, height, width, depth]\n    query_block_shape: a 2-d tuple of integers\n    memory_flange: a 2-d tuple of integers\n    q_indices: a tensor of indices for each of the center blocks.\n      [num_blocks, block_length]\n  Returns:\n    x_flange: A tensor of shape [batch, heads, #blocks, block_length, depth]\n  \"\"\"", "\n", "# Padding x to be multiple of query_shape and then", "\n", "# extracting the memory blocks from the same regions as the query blocks", "\n", "x_query_padded", "=", "pad_to_multiple_2d", "(", "x", ",", "query_block_shape", ")", "\n", "x_center", "=", "gather_blocks_2d", "(", "x_query_padded", ",", "q_indices", ")", "\n", "# Then padding the flange region", "\n", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "memory_flange", "[", "0", "]", ",", "0", "]", ",", "\n", "[", "memory_flange", "[", "1", "]", ",", "memory_flange", "[", "1", "]", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "x_memory_padded", "=", "tf", ".", "pad", "(", "x_query_padded", ",", "paddings", ")", "\n", "left_x", "=", "None", "\n", "top_x", "=", "None", "\n", "# Extracting the memory regions around the query block. left_x_region extends", "\n", "# to the left and the top_x_region is the combination of top left, top, and", "\n", "# top right of the query block", "\n", "# if no left region", "\n", "if", "memory_flange", "[", "1", "]", ">", "0", ":", "\n", "    ", "left_x_region", "=", "x_memory_padded", "[", ":", ",", ":", ",", "memory_flange", "[", "\n", "0", "]", ":", ",", ":", "-", "(", "query_block_shape", "[", "1", "]", "+", "memory_flange", "[", "1", "]", ")", ",", ":", "]", "\n", "left_memory_shape", "=", "(", "query_block_shape", "[", "0", "]", ",", "memory_flange", "[", "1", "]", ")", "\n", "left_indices", "=", "gather_indices_2d", "(", "left_x_region", ",", "left_memory_shape", ",", "\n", "query_block_shape", ")", "\n", "left_x", "=", "gather_blocks_2d", "(", "left_x_region", ",", "left_indices", ")", "\n", "# if no top region", "\n", "", "if", "memory_flange", "[", "0", "]", ">", "0", ":", "\n", "    ", "top_x_region", "=", "x_memory_padded", "[", ":", ",", ":", ",", ":", "-", "query_block_shape", "[", "0", "]", ",", ":", ",", ":", "]", "\n", "\n", "top_memory_shape", "=", "(", "memory_flange", "[", "0", "]", ",", "\n", "query_block_shape", "[", "1", "]", "+", "2", "*", "memory_flange", "[", "1", "]", ")", "\n", "\n", "top_indices", "=", "gather_indices_2d", "(", "top_x_region", ",", "top_memory_shape", ",", "\n", "query_block_shape", ")", "\n", "\n", "top_x", "=", "gather_blocks_2d", "(", "top_x_region", ",", "top_indices", ")", "\n", "", "x_flange", "=", "None", "\n", "if", "top_x", "is", "not", "None", "and", "left_x", "is", "not", "None", ":", "\n", "    ", "x_flange", "=", "tf", ".", "concat", "(", "[", "top_x", ",", "left_x", "]", ",", "axis", "=", "3", ")", "\n", "", "else", ":", "\n", "    ", "x_flange", "=", "top_x", "if", "top_x", "is", "not", "None", "else", "left_x", "\n", "", "return", "x_flange", ",", "x_center", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_shifted_center_blocks": [[3464, 3486], ["quaternion_attention.gather_blocks_2d", "quaternion_attention.get_shifted_center_blocks.shift_right_2d_blocks"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_blocks_2d"], ["", "def", "get_shifted_center_blocks", "(", "x", ",", "indices", ")", ":", "\n", "  ", "\"\"\"Get right shifted blocks for masked local attention 2d.\n\n  Args:\n    x: A tensor with shape [batch, heads, height, width, depth]\n    indices: The indices to gather blocks\n\n  Returns:\n    x_shifted: a tensor of extracted blocks, each block right shifted along\n      length.\n  \"\"\"", "\n", "center_x", "=", "gather_blocks_2d", "(", "x", ",", "indices", ")", "\n", "\n", "# Shift right along the length dimension", "\n", "def", "shift_right_2d_blocks", "(", "x", ")", ":", "\n", "    ", "\"\"\"Shift the second to last dimension of x right by one.\"\"\"", "\n", "shifted_targets", "=", "(", "\n", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "return", "shifted_targets", "\n", "\n", "", "x_shifted", "=", "shift_right_2d_blocks", "(", "center_x", ")", "\n", "return", "x_shifted", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.right_shift_blockwise": [[3488, 3519], ["tensorflow.variable_scope", "pad_to_multiple_2d.get_shape().as_list", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.expand_dims", "quaternion_attention.pad_to_multiple_2d", "tensor2tensor.layers.common_layers.shape_list", "quaternion_attention.gather_indices_2d", "quaternion_attention.get_shifted_center_blocks", "quaternion_attention.scatter_blocks_2d", "tensorflow.squeeze", "tensorflow.slice", "tf.slice.set_shape", "pad_to_multiple_2d.get_shape"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.pad_to_multiple_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_indices_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_shifted_center_blocks", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.scatter_blocks_2d"], ["", "def", "right_shift_blockwise", "(", "x", ",", "query_shape", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Right shifts once in every block.\n\n  Args:\n    x: a tensor of shape [batch, height, width, depth]\n    query_shape: A 2d tuple of ints\n    name: a string\n\n  Returns:\n    output: a tensor of the same shape as x\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"right_shift_blockwise\"", ",", "values", "=", "[", "x", "]", ")", ":", "\n", "    ", "x_list_shape", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "x_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "# Add a dummy dimension for heads.", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "axis", "=", "1", ")", "\n", "x", "=", "pad_to_multiple_2d", "(", "x", ",", "query_shape", ")", "\n", "padded_x_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "# Set up q blocks.", "\n", "x_indices", "=", "gather_indices_2d", "(", "x", ",", "query_shape", ",", "query_shape", ")", "\n", "x_new", "=", "get_shifted_center_blocks", "(", "x", ",", "x_indices", ")", "\n", "\n", "# Put representations back into original shapes.", "\n", "output", "=", "scatter_blocks_2d", "(", "x_new", ",", "x_indices", ",", "padded_x_shape", ")", "\n", "# Remove the dummy head dimension.", "\n", "output", "=", "tf", ".", "squeeze", "(", "output", ",", "axis", "=", "1", ")", "\n", "# Remove the padding if introduced.", "\n", "output", "=", "tf", ".", "slice", "(", "output", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "x_shape", "[", "1", "]", ",", "x_shape", "[", "2", "]", ",", "-", "1", "]", ")", "\n", "output", ".", "set_shape", "(", "x_list_shape", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.masked_local_attention_2d": [[3521, 3612], ["tensorflow.variable_scope", "tensor2tensor.layers.common_layers.shape_list", "quaternion_attention.pad_to_multiple_2d", "quaternion_attention.gather_indices_2d", "quaternion_attention.gather_blocks_2d", "quaternion_attention.get_memory_region", "quaternion_attention.get_memory_region", "numpy.prod", "quaternion_attention.attention_bias_lower_triangle", "tensorflow.reshape", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.tile", "quaternion_attention.dot_product_attention", "tensor2tensor.layers.common_layers.shape_list", "quaternion_attention.scatter_blocks_2d", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.tile", "numpy.prod", "tensorflow.concat", "quaternion_attention.embedding_to_padding"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.pad_to_multiple_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_indices_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.gather_blocks_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_memory_region", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_memory_region", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_lower_triangle", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_attention", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.scatter_blocks_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.embedding_to_padding"], ["", "", "def", "masked_local_attention_2d", "(", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "query_shape", "=", "(", "8", ",", "16", ")", ",", "\n", "memory_flange", "=", "(", "8", ",", "16", ")", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Strided block local self-attention.\n\n  Each position in a query block can attend to all the generated queries in\n  the query block, which are generated in raster scan, and positions that are\n  generated to the left and top. The shapes are specified by query shape and\n  memory flange. Note that if you're using this function, you do not need to\n  right shift. Right shifting happens inside this function separately for each\n  block.\n\n  Args:\n    q: a Tensor with shape [batch, heads, h, w, depth_k]\n    k: a Tensor with shape [batch, heads, h, w, depth_k]\n    v: a Tensor with shape [batch, heads, h, w, depth_v]. In the current\n      implementation, depth_v must be equal to depth_k.\n    query_shape: an tuple indicating the height and width of each query block.\n      query_shape = block_shape\n    memory_flange: an integer indicating how much to look in height and width\n      from each query block.\n      memory shape = query_shape + (block_flange[0], 2*block_flange[1])\n    name: an optional string\n\n  Returns:\n    a Tensor of shape [batch, heads, h, w, depth_v]\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"local_masked_self_attention_2d\"", ",", "values", "=", "[", "q", ",", "k", ",", "v", "]", ")", ":", "\n", "    ", "v_shape", "=", "common_layers", ".", "shape_list", "(", "v", ")", "\n", "\n", "# Pad query to ensure multiple of corresponding lengths.", "\n", "q", "=", "pad_to_multiple_2d", "(", "q", ",", "query_shape", ")", "\n", "\n", "# Set up query blocks.", "\n", "q_indices", "=", "gather_indices_2d", "(", "q", ",", "query_shape", ",", "query_shape", ")", "\n", "q_new", "=", "gather_blocks_2d", "(", "q", ",", "q_indices", ")", "\n", "\n", "# Set up key and value blocks.", "\n", "k_flange", ",", "k_center", "=", "get_memory_region", "(", "k", ",", "query_shape", ",", "memory_flange", ",", "\n", "q_indices", ")", "\n", "v_flange", ",", "v_center", "=", "get_memory_region", "(", "v", ",", "query_shape", ",", "memory_flange", ",", "\n", "q_indices", ")", "\n", "if", "k_flange", "is", "not", "None", ":", "\n", "      ", "k_new", "=", "tf", ".", "concat", "(", "[", "k_flange", ",", "k_center", "]", ",", "axis", "=", "3", ")", "\n", "v_new", "=", "tf", ".", "concat", "(", "[", "v_flange", ",", "v_center", "]", ",", "axis", "=", "3", ")", "\n", "", "else", ":", "\n", "      ", "k_new", "=", "k_center", "\n", "v_new", "=", "v_center", "\n", "\n", "# Set up the masks.", "\n", "", "query_elements", "=", "np", ".", "prod", "(", "query_shape", ")", "\n", "padding_mask", "=", "None", "\n", "if", "k_flange", "is", "not", "None", ":", "\n", "      ", "padding_mask", "=", "tf", ".", "expand_dims", "(", "\n", "embedding_to_padding", "(", "k_flange", ")", "*", "-", "1e9", ",", "axis", "=", "-", "2", ")", "\n", "padding_mask", "=", "tf", ".", "tile", "(", "padding_mask", ",", "[", "1", ",", "1", ",", "1", ",", "query_elements", ",", "1", "]", ")", "\n", "\n", "", "center_attention_bias", "=", "attention_bias_lower_triangle", "(", "\n", "np", ".", "prod", "(", "query_elements", ")", ")", "\n", "center_attention_bias", "=", "tf", ".", "reshape", "(", "\n", "center_attention_bias", ",", "[", "1", ",", "1", ",", "1", ",", "query_elements", ",", "query_elements", "]", ")", "\n", "v_center_shape", "=", "common_layers", ".", "shape_list", "(", "v_center", ")", "\n", "center_attention_bias", "=", "tf", ".", "tile", "(", "\n", "center_attention_bias", ",", "\n", "[", "v_center_shape", "[", "0", "]", ",", "v_center_shape", "[", "1", "]", ",", "v_center_shape", "[", "2", "]", ",", "1", ",", "1", "]", ")", "\n", "if", "padding_mask", "is", "not", "None", ":", "\n", "# Combine the mask for padding and visible region.", "\n", "      ", "attention_bias", "=", "tf", ".", "concat", "(", "[", "padding_mask", ",", "center_attention_bias", "]", ",", "axis", "=", "4", ")", "\n", "", "else", ":", "\n", "      ", "attention_bias", "=", "center_attention_bias", "\n", "\n", "", "output", "=", "dot_product_attention", "(", "\n", "q_new", ",", "\n", "k_new", ",", "\n", "v_new", ",", "\n", "attention_bias", ",", "\n", "dropout_rate", "=", "0.", ",", "\n", "name", "=", "\"masked_local_2d\"", ",", "\n", "make_image_summary", "=", "False", ")", "\n", "# Put representations back into original shapes.", "\n", "padded_q_shape", "=", "common_layers", ".", "shape_list", "(", "q", ")", "\n", "output", "=", "scatter_blocks_2d", "(", "output", ",", "q_indices", ",", "padded_q_shape", ")", "\n", "\n", "# Remove the padding if introduced.", "\n", "output", "=", "tf", ".", "slice", "(", "output", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "v_shape", "[", "2", "]", ",", "v_shape", "[", "3", "]", ",", "-", "1", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.multihead_attention_2d": [[3613, 3673], ["ValueError", "ValueError", "tensorflow.variable_scope", "quaternion_attention.compute_qkv", "quaternion_attention.split_heads_2d", "quaternion_attention.split_heads_2d", "quaternion_attention.split_heads_2d", "quaternion_attention.combine_heads_2d", "tensor2tensor.layers.common_layers.dense", "quaternion_attention.local_attention_2d", "quaternion_attention.masked_local_attention_2d"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.compute_qkv", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.combine_heads_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.local_attention_2d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.masked_local_attention_2d"], ["", "", "def", "multihead_attention_2d", "(", "query_antecedent", ",", "\n", "memory_antecedent", ",", "\n", "total_key_depth", ",", "\n", "total_value_depth", ",", "\n", "output_depth", ",", "\n", "num_heads", ",", "\n", "attention_type", "=", "\"local_attention_2d\"", ",", "\n", "query_shape", "=", "(", "8", ",", "16", ")", ",", "\n", "memory_flange", "=", "(", "8", ",", "16", ")", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"2d Multihead scaled-dot-product attention with inp/output transformations.\n\n  Args:\n    query_antecedent: a Tensor with shape [batch, h, w, depth_k]\n    memory_antecedent: a Tensor with shape [batch, h, w, depth_k]\n    total_key_depth: an integer\n    total_value_depth: an integer\n    output_depth: an integer\n    num_heads: an integer dividing total_key_depth and total_value_depth\n    attention_type: String, type of attention function to use.\n    query_shape: an tuple indicating the height and width of each query block.\n    memory_flange: an integer indicating how much to look in height and width\n    name: an optional string\n\n  Returns:\n    A Tensor of shape [batch, h, w, output_depth]\n\n  Raises:\n    ValueError: if the key depth or value depth are not divisible by the\n      number of attention heads.\n  \"\"\"", "\n", "if", "total_key_depth", "%", "num_heads", "!=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Key depth (%d) must be divisible by the number of \"", "\n", "\"attention heads (%d).\"", "%", "(", "total_key_depth", ",", "num_heads", ")", ")", "\n", "", "if", "total_value_depth", "%", "num_heads", "!=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Value depth (%d) must be divisible by the number of \"", "\n", "\"attention heads (%d).\"", "%", "(", "total_value_depth", ",", "num_heads", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "\n", "default_name", "=", "\"multihead_attention_2d\"", ",", "\n", "values", "=", "[", "query_antecedent", ",", "memory_antecedent", "]", ")", ":", "\n", "    ", "q", ",", "k", ",", "v", "=", "compute_qkv", "(", "query_antecedent", ",", "memory_antecedent", ",", "total_key_depth", ",", "\n", "total_value_depth", ")", "\n", "# after splitting, shape is [batch, heads, h, w, depth]", "\n", "q", "=", "split_heads_2d", "(", "q", ",", "num_heads", ")", "\n", "k", "=", "split_heads_2d", "(", "k", ",", "num_heads", ")", "\n", "v", "=", "split_heads_2d", "(", "v", ",", "num_heads", ")", "\n", "key_depth_per_head", "=", "total_key_depth", "//", "num_heads", "\n", "q", "*=", "key_depth_per_head", "**", "-", "0.5", "\n", "if", "attention_type", "==", "\"local_attention_2d\"", ":", "\n", "      ", "x", "=", "local_attention_2d", "(", "\n", "q", ",", "k", ",", "v", ",", "query_shape", "=", "query_shape", ",", "memory_flange", "=", "memory_flange", ")", "\n", "", "else", ":", "\n", "      ", "assert", "attention_type", "==", "\"masked_local_attention_2d\"", "\n", "x", "=", "masked_local_attention_2d", "(", "\n", "q", ",", "k", ",", "v", ",", "query_shape", "=", "query_shape", ",", "memory_flange", "=", "memory_flange", ")", "\n", "", "x", "=", "combine_heads_2d", "(", "x", ")", "\n", "x", "=", "common_layers", ".", "dense", "(", "\n", "x", ",", "output_depth", ",", "use_bias", "=", "False", ",", "name", "=", "\"output_transform\"", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.ffn_self_attention_layer": [[3675, 3738], ["tensorflow.variable_scope", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "quaternion_attention.dot_product_attention", "tensorflow.reshape", "tensor2tensor.layers.common_layers.dense", "tensor2tensor.layers.common_layers.dense", "tensorflow.expand_dims", "tensorflow.split", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.split", "tensor2tensor.layers.common_layers.dense", "tensor2tensor.layers.common_layers.dense", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_attention"], ["", "", "def", "ffn_self_attention_layer", "(", "x", ",", "\n", "filter_depth", ",", "\n", "output_depth", ",", "\n", "num_parts", ",", "\n", "dropout_rate", ",", "\n", "share_kv", "=", "False", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Self-attention feedforward layer.\n\n  We use self-attention to do feedforward computations. We apply this function\n  positionwise where for each position, we linearly transform the output to have\n  depth filter_depth, and break up the result depth-wise into num_parts\n  contiguous parts. The parts self-attend, we concatenate the results\n  depth-wise, and we linearly transform to a depth of output_depth. The goal is\n  to get multiplicative interactions between components of a representation.\n\n  Args:\n    x: a Tensor with shape [batch, length, channels]\n    filter_depth: an integer\n    output_depth: an integer\n    num_parts: an integer dividing filter depth\n    dropout_rate: a floating point number\n    share_kv: Share the key value transform\n    name: an optional string\n\n  Returns:\n    A Tensor with shape [batch, length, output_depth].\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"feedforward_self_attention\"", ",", "values", "=", "[", "x", "]", ")", ":", "\n", "    ", "x_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "part_depth", "=", "filter_depth", "//", "num_parts", "\n", "if", "not", "share_kv", ":", "\n", "      ", "combined", "=", "common_layers", ".", "dense", "(", "\n", "x", ",", "filter_depth", "*", "3", ",", "use_bias", "=", "False", ",", "name", "=", "\"qkv_transform\"", ")", "\n", "combined", "=", "tf", ".", "expand_dims", "(", "combined", ",", "axis", "=", "2", ")", "\n", "q", ",", "k", ",", "v", "=", "tf", ".", "split", "(", "combined", ",", "3", ",", "axis", "=", "3", ")", "\n", "", "else", ":", "\n", "      ", "q", "=", "tf", ".", "expand_dims", "(", "\n", "common_layers", ".", "dense", "(", "\n", "x", ",", "filter_depth", ",", "use_bias", "=", "False", ",", "name", "=", "\"q_transform\"", ")", ",", "\n", "axis", "=", "2", ")", "\n", "kv_combined", "=", "tf", ".", "expand_dims", "(", "\n", "common_layers", ".", "dense", "(", "\n", "tf", ".", "concat", "(", "[", "x", ",", "x", "]", ",", "axis", "=", "1", ")", ",", "\n", "filter_depth", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "\"kv_transform\"", ")", ",", "\n", "axis", "=", "2", ")", "\n", "k", ",", "v", "=", "tf", ".", "split", "(", "kv_combined", ",", "[", "x_shape", "[", "1", "]", ",", "x_shape", "[", "1", "]", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "batch_q", "=", "tf", ".", "reshape", "(", "q", ",", "[", "-", "1", ",", "1", ",", "num_parts", ",", "part_depth", "]", ")", "\n", "batch_k", "=", "tf", ".", "reshape", "(", "k", ",", "[", "-", "1", ",", "1", ",", "num_parts", ",", "part_depth", "]", ")", "\n", "batch_v", "=", "tf", ".", "reshape", "(", "v", ",", "[", "-", "1", ",", "1", ",", "num_parts", ",", "part_depth", "]", ")", "\n", "\n", "batch_q", "*=", "part_depth", "**", "-", "0.5", "\n", "# non-masked bias", "\n", "bias", "=", "None", "\n", "x", "=", "dot_product_attention", "(", "batch_q", ",", "batch_k", ",", "batch_v", ",", "bias", ",", "dropout_rate", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "x_shape", "[", "0", "]", ",", "x_shape", "[", "1", "]", ",", "filter_depth", "]", ")", "\n", "x", "=", "common_layers", ".", "dense", "(", "\n", "x", ",", "output_depth", ",", "use_bias", "=", "False", ",", "name", "=", "\"output_transform\"", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.parameter_attention": [[3740, 3810], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensor2tensor.layers.common_layers.dense", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "common_layers.dense.set_shape", "tensor2tensor.layers.common_layers.dense", "tensor2tensor.layers.common_layers.shape_list", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.nn.dropout", "tensorflow.random_normal_initializer", "tensorflow.random_normal_initializer"], "function", ["None"], ["", "", "def", "parameter_attention", "(", "x", ",", "\n", "total_key_depth", ",", "\n", "total_value_depth", ",", "\n", "output_depth", ",", "\n", "memory_rows", ",", "\n", "num_heads", ",", "\n", "dropout_rate", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Attention over parameters.\n\n  We use the same multi-headed attention as in the other layers, but the memory\n  keys and values are model parameters. There are no linear transformation on\n  the keys or values.\n\n  We are also a bit more careful about memory usage, since the number of\n  memory positions may be very large.\n\n  Args:\n    x: a Tensor with shape [batch, length_q, channels]\n    total_key_depth: an integer\n    total_value_depth: an integer\n    output_depth: an integer\n    memory_rows: an integer\n    num_heads: an integer dividing total_key_depth and total_value_depth\n    dropout_rate: a floating point number\n    name: an optional string\n\n  Returns:\n    A Tensor with shape [batch, length_q, output_depth].\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"parameter_attention\"", ",", "values", "=", "[", "x", "]", ")", ":", "\n", "    ", "head_size_k", "=", "total_key_depth", "//", "num_heads", "\n", "head_size_v", "=", "total_value_depth", "//", "num_heads", "\n", "var_shape_k", "=", "[", "num_heads", ",", "memory_rows", ",", "head_size_k", "]", "\n", "var_shape_v", "=", "[", "num_heads", ",", "memory_rows", ",", "head_size_v", "]", "\n", "k", "=", "tf", ".", "get_variable", "(", "\n", "\"k\"", ",", "\n", "var_shape_k", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "0", ",", "output_depth", "**", "-", "0.5", "*", "(", "num_heads", "**", "0.5", ")", ")", ")", "\n", "v", "=", "tf", ".", "get_variable", "(", "\n", "\"v\"", ",", "\n", "var_shape_v", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "0", ",", "output_depth", "**", "-", "0.5", "*", "(", "output_depth", "**", "0.5", ")", ")", ")", "\n", "batch_size", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "0", "]", "\n", "length", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "1", "]", "\n", "q", "=", "common_layers", ".", "dense", "(", "\n", "x", ",", "total_key_depth", ",", "use_bias", "=", "False", ",", "name", "=", "\"q_transform\"", ")", "\n", "if", "dropout_rate", ":", "\n", "# This is a cheaper form of attention dropout where we use to use", "\n", "# the same dropout decisions across batch elements and query positions,", "\n", "# but different decisions across heads and memory positions.", "\n", "      ", "v", "=", "tf", ".", "nn", ".", "dropout", "(", "\n", "v", ",", "1.0", "-", "dropout_rate", ",", "noise_shape", "=", "[", "num_heads", ",", "memory_rows", ",", "1", "]", ")", "\n", "# query is [batch, length, hidden_size]", "\n", "# reshape and transpose it to [heads, batch * length, head_size]", "\n", "", "q", "=", "tf", ".", "reshape", "(", "q", ",", "[", "batch_size", ",", "length", ",", "num_heads", ",", "head_size_k", "]", ")", "\n", "q", "=", "tf", ".", "transpose", "(", "q", ",", "[", "2", ",", "0", ",", "1", ",", "3", "]", ")", "\n", "q", "=", "tf", ".", "reshape", "(", "q", ",", "[", "num_heads", ",", "batch_size", "*", "length", ",", "head_size_k", "]", ")", "\n", "weights", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "weights", ")", "\n", "y", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "num_heads", ",", "batch_size", ",", "length", ",", "head_size_v", "]", ")", "\n", "y", "=", "tf", ".", "transpose", "(", "y", ",", "[", "1", ",", "2", ",", "0", ",", "3", "]", ")", "\n", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "batch_size", ",", "length", ",", "total_value_depth", "]", ")", "\n", "y", ".", "set_shape", "(", "[", "None", ",", "None", ",", "total_value_depth", "]", ")", "\n", "y", "=", "common_layers", ".", "dense", "(", "\n", "y", ",", "output_depth", ",", "use_bias", "=", "False", ",", "name", "=", "\"output_transform\"", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.coordinate_tensor": [[3812, 3831], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensorflow.range", "tensorflow.one_hot", "tensorflow.size", "tensorflow.zeros", "tensorflow.reshape", "tensorflow.size"], "function", ["None"], ["", "", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "coordinate_tensor", "(", "shape", ",", "axis", ")", ":", "\n", "  ", "\"\"\"Return a tensor with given shape containing coordinate along given axis.\n\n  Args:\n    shape: a Tensor representing the shape of the output Tensor\n    axis: an integer\n\n  Returns:\n    A tensor with shape shape and type tf.int32, where each elements its\n    coordinate along the given axis.\n  \"\"\"", "\n", "if", "axis", "<", "0", ":", "\n", "    ", "axis", "=", "tf", ".", "size", "(", "shape", ")", "+", "axis", "# Convert to positive for the one_hot indice", "\n", "\n", "", "r", "=", "tf", ".", "range", "(", "shape", "[", "axis", "]", ")", "\n", "r_shape", "=", "tf", ".", "one_hot", "(", "\n", "axis", ",", "tf", ".", "size", "(", "shape", ")", ",", "on_value", "=", "-", "1", ",", "off_value", "=", "1", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "return", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "int32", ")", "+", "tf", ".", "reshape", "(", "r", ",", "r_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.self_attention_expert": [[3833, 3940], ["tensorflow.cond", "tensorflow.summary.scalar", "tensorflow.cond", "tf.reshape.get_shape().as_list", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.equal", "attention_bias_coordinates", "tensorflow.equal", "tensorflow.Print", "tensorflow.reshape", "add_or_set_if"], "function", ["None"], ["", "def", "self_attention_expert", "(", "x", ",", "\n", "batch_coordinate", ",", "\n", "mask_right", "=", "True", ",", "\n", "split_batch", "=", "False", ",", "\n", "attention_num_head", "=", "1", ",", "\n", "attention_kq_size", "=", "None", ",", "\n", "attention_v_size", "=", "None", ")", ":", "\n", "  ", "\"\"\"Implementing attention that runs inside each expert.\n\n  Args:\n    x: A tensor of shape[batch, depth]. Contains representations from\n      different positions, which are lexicographically ordered.\n    batch_coordinate: A tensor of shape [batch, 1] containing the batch\n      coordinate of each element in x. This is needed to make sure that\n      positions from different sequences don't attend to each other.\n    mask_right: A bool. If true, we will not attend to positions on the right,\n      just as decoder self attention.\n    split_batch (bool): If True, each sequence of the batch is processed\n      individually on a loop. If False, the sequences are processed all at\n      once and a mask is applied to isolate the sequences from each others\n    attention_num_head (int): number of attention heads\n    attention_kq_size (int): dimension used for the attention key, and query\n    attention_v_size (int): dimension used for the attention value\n\n  Returns:\n    out: A tensor of shape [batch, depth].\n  example use:\n  expert_utils.local_moe(\n     ...\n     expert_fn=functools.partial(self_attention_expert, mask_right=)\n     )\n  \"\"\"", "\n", "\n", "depth", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "length", "=", "common_layers", ".", "shape_list", "(", "batch_coordinate", ")", "[", "0", "]", "\n", "\n", "# Print a warning message if one of the expert isn't used (useful at", "\n", "# inference where summaries aren't used and the gating function don't add", "\n", "# noise)", "\n", "global", "_expert_count", "# Hack to make each expert have a unique id", "\n", "_expert_count", "+=", "1", "\n", "length", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "equal", "(", "length", ",", "0", ")", ",", "\n", "lambda", ":", "tf", ".", "Print", "(", "# pylint: disable=g-long-lambda", "\n", "length", ",", "[", "length", "]", ",", "\"Expert {} empty: \"", ".", "format", "(", "_expert_count", ")", ")", ",", "\n", "lambda", ":", "length", ",", "\n", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"batch_size\"", ",", "length", ",", "family", "=", "\"experts_stats_batch_size\"", ")", "\n", "\n", "attention_kq_size", "=", "attention_kq_size", "or", "depth", "\n", "attention_v_size", "=", "attention_v_size", "or", "depth", "\n", "\n", "def", "length_not_null", "(", "x", ",", "batch_coordinate", ")", ":", "\n", "    ", "\"\"\"Branch of the graph only evaluated when length isn't null.\"\"\"", "\n", "\n", "# Mask between the sequences (not used if map_ids is used)", "\n", "bias_batch", "=", "attention_bias_coordinates", "(", "batch_coordinate", ")", "\n", "\n", "def", "add_or_set_if", "(", "prev_bias", ",", "new_bias", ",", "condition", ")", ":", "\n", "      ", "\"\"\"Add the bias together while considering the None case.\"\"\"", "\n", "if", "not", "condition", ":", "\n", "        ", "return", "prev_bias", "\n", "", "if", "prev_bias", "is", "None", ":", "\n", "        ", "return", "new_bias", "\n", "", "return", "prev_bias", "+", "new_bias", "\n", "\n", "", "def", "mask_and_call_attention", "(", "x", ")", ":", "\n", "      ", "\"\"\"Function applied once for each sequence of the batch.\"\"\"", "\n", "\n", "# Mask to prevent sequences of attending to the future", "\n", "length", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "1", "]", "# x has shape [1, length,...]", "\n", "bias_past", "=", "tf", ".", "reshape", "(", "\n", "attention_bias_lower_triangle", "(", "length", ")", ",", "[", "length", ",", "length", "]", ")", "\n", "# bias has shape [length, length]", "\n", "\n", "bias", "=", "None", "\n", "bias", "=", "add_or_set_if", "(", "bias", ",", "bias_past", ",", "mask_right", ")", "\n", "bias", "=", "add_or_set_if", "(", "bias", ",", "bias_batch", ",", "not", "split_batch", ")", "\n", "bias", "=", "tf", ".", "reshape", "(", "bias", ",", "[", "1", ",", "1", ",", "length", ",", "length", "]", ")", "\n", "\n", "return", "multihead_attention", "(", "\n", "x", ",", "\n", "None", ",", "\n", "bias", ",", "\n", "total_key_depth", "=", "attention_kq_size", ",", "\n", "total_value_depth", "=", "attention_v_size", ",", "\n", "output_depth", "=", "depth", ",", "\n", "num_heads", "=", "attention_num_head", ",", "\n", "dropout_rate", "=", "0.0", ")", "\n", "\n", "", "if", "split_batch", ":", "\n", "      ", "out", "=", "expert_utils", ".", "map_ids", "(", "x", ",", "batch_coordinate", ",", "mask_and_call_attention", ")", "\n", "", "else", ":", "\n", "      ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "1", ",", "length", ",", "depth", "]", ")", "\n", "out", "=", "mask_and_call_attention", "(", "x", ")", "\n", "out", "=", "tf", ".", "squeeze", "(", "out", ",", "0", ")", "\n", "", "return", "out", "\n", "\n", "# If the length is empty, just forward an empty tensor (avoid having to", "\n", "# evaluate multihead_attention with tensor having dim equal to zeros)", "\n", "", "out", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "equal", "(", "length", ",", "0", ")", ",", "\n", "lambda", ":", "tf", ".", "zeros", "(", "shape", "=", "[", "0", ",", "depth", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"empty_out\"", ")", ",", "\n", "lambda", ":", "length_not_null", "(", "x", ",", "batch_coordinate", ")", ",", "\n", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.local_expert_attention": [[3942, 3988], ["tensorflow.expand_dims", "tensorflow.variable_scope", "tensor2tensor.utils.expert_utils.local_moe", "quaternion_attention.coordinate_tensor", "functools.partial", "tensor2tensor.layers.common_layers.shape_list"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.coordinate_tensor"], ["", "def", "local_expert_attention", "(", "x", ",", "\n", "k", ",", "\n", "loss_coef", ",", "\n", "attention_num_experts", ",", "\n", "train", "=", "True", ",", "\n", "batch_coordinate", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Attention using a mixture of experts.\n\n    Positions sent to the same expert can attend to each other.\n    The mixture of experts is \"local\" in that it is replicated on each\n    datashard.\n\n    local_moe flatten all batches so to avoid problems with padding (ex: all\n    padding going to the same expert, self attention attending to non null\n    padding tokens,...), the padding should be removed before.\n\n  Args:\n    x: a Tensor with shape [batch, length, depth] or [1, batch*length, depth]\n    k: The number of experts to dispatch each example to\n    loss_coef: a scalar. A multiplier for the expert loss\n    attention_num_experts: The number of experts to use\n    train: a boolean for the current mode\n    batch_coordinate (tf.Tensor): int32 tensor of shape [1, batch*length, 1]\n      containing the batch ids. If None, deduced from first dim of x.\n    **kwargs: Arguments to forward to self_attention_expert\n\n  Returns:\n    y: a Tensor with shape [batch, length, depth]\n    loss: a Scalar\n  \"\"\"", "\n", "if", "batch_coordinate", "is", "None", ":", "\n", "    ", "batch_coordinate", "=", "tf", ".", "expand_dims", "(", "\n", "coordinate_tensor", "(", "common_layers", ".", "shape_list", "(", "x", ")", "[", ":", "-", "1", "]", ",", "axis", "=", "0", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"local_expert_attention\"", ")", ":", "\n", "    ", "additional_dispatch_params", "=", "{", "\"batch_coordinate\"", ":", "batch_coordinate", "}", "\n", "return", "expert_utils", ".", "local_moe", "(", "\n", "x", ",", "\n", "train", ",", "\n", "functools", ".", "partial", "(", "self_attention_expert", ",", "**", "kwargs", ")", ",", "\n", "attention_num_experts", ",", "\n", "k", "=", "k", ",", "\n", "loss_coef", "=", "loss_coef", ",", "\n", "pass_x", "=", "True", ",", "\n", "pass_gates", "=", "False", ",", "\n", "additional_dispatch_params", "=", "additional_dispatch_params", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.expert_dot_product": [[3991, 4054], ["tensor2tensor.utils.expert_utils.add_name_scope", "attention_bias_coordinates", "tensorflow.cond", "tensorflow.squeeze", "tensorflow.squeeze", "tensor2tensor.layers.common_layers.shape_list", "tensor2tensor.layers.common_layers.shape_list", "v.get_shape().as_list", "attention_bias_future", "tensorflow.expand_dims", "tensorflow.zeros", "tensorflow.Print", "quaternion_attention.dot_product_attention", "tensorflow.logical_or", "tensorflow.expand_dims", "tensorflow.equal", "tensorflow.equal", "v.get_shape"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_attention"], ["", "", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "expert_dot_product", "(", "q", ",", "k", ",", "v", ",", "info_q", ",", "info_k", ")", ":", "\n", "  ", "\"\"\"Perform dot product on a subset of the sequence.\n\n  Can add a mask to the attention to prevent sequences to attend to each other\n  and to prevent attention to the future.\n\n  Args:\n    q (tf.Tensor): Queries of shape [length_expert_q, depth_k]\n    k (tf.Tensor): Keys of shape [length_expert_k, depth_k]\n    v (tf.Tensor): Values of shape [length_expert_k, depth_v]\n    info_q (BatchInfo): Batch info for queries. If None, no mask is added\n    info_k (BatchInfo): Batch info for keys\n\n  Returns:\n    tf.Tensor: dot product attention output ([length_expert_q, depth_v])\n  \"\"\"", "\n", "\n", "length_q", "=", "common_layers", ".", "shape_list", "(", "q", ")", "[", "0", "]", "\n", "length_k", "=", "common_layers", ".", "shape_list", "(", "k", ")", "[", "0", "]", "\n", "depth_v", "=", "v", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "# Create the mask", "\n", "bias", "=", "attention_bias_coordinates", "(", "info_q", ".", "coordinates", ",", "info_k", ".", "coordinates", ")", "\n", "if", "info_k", ".", "order", "is", "not", "None", ":", "\n", "    ", "bias", "+=", "attention_bias_future", "(", "info_q", ".", "order", ",", "info_k", ".", "order", ")", "\n", "\n", "# Restore batch and head dimension", "\n", "", "q", ",", "k", ",", "v", "=", "[", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "t", ",", "0", ")", ",", "0", ")", "for", "t", "in", "(", "q", ",", "k", ",", "v", ")", "]", "\n", "\n", "def", "is_zero", "(", ")", ":", "\n", "    ", "zeros", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "1", ",", "length_q", ",", "depth_v", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "zeros", "=", "tf", ".", "Print", "(", "zeros", ",", "[", "length_k", ",", "length_q", "]", ",", "\"length_k/length_q: \"", ")", "\n", "return", "zeros", "\n", "\n", "", "def", "is_not_zero", "(", ")", ":", "\n", "    ", "return", "dot_product_attention", "(", "\n", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "bias", "=", "bias", ",", "\n", "# No image summary to avoid \"Retval[0] does not have value\" (because", "\n", "# inside a condition)", "\n", "make_image_summary", "=", "False", ",", "\n", ")", "\n", "\n", "# TODO(epot): Should make sure a query gets at least one key. Because the", "\n", "# different sequences of a batch are merged, it's possible that a", "\n", "# query from a sequence only receive memory from another sequence, so", "\n", "# with the mask, the query will perform a softmax on -infinity values.", "\n", "# A hack could be to add at least one sequence of each batch on each group so", "\n", "# the query can attend to at least one element.", "\n", "# Softmax(Q.K)*V", "\n", "", "v_out", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "logical_or", "(", "tf", ".", "equal", "(", "length_q", ",", "0", ")", ",", "tf", ".", "equal", "(", "length_k", ",", "0", ")", ")", ",", "\n", "is_zero", ",", "\n", "is_not_zero", ",", "\n", ")", "\n", "\n", "# Remove batch and head dimension", "\n", "v_out", "=", "tf", ".", "squeeze", "(", "v_out", ",", "axis", "=", "0", ")", "\n", "v_out", "=", "tf", ".", "squeeze", "(", "v_out", ",", "axis", "=", "0", ")", "\n", "return", "v_out", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_single_head": [[4056, 4116], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensor2tensor.utils.expert_utils.SparseDispatcher", "tensor2tensor.utils.expert_utils.SparseDispatcher", "six.moves.zip", "expert_utils.SparseDispatcher.combine", "gates_q.get_shape().as_list", "expert_utils.SparseDispatcher.dispatch", "expert_utils.SparseDispatcher.dispatch", "expert_utils.SparseDispatcher.dispatch", "quaternion_attention.dot_product_single_head.eventually_dispatch"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "dot_product_single_head", "(", "q", ",", "k", ",", "v", ",", "gates_q", ",", "gates_k", ",", "bi", ")", ":", "\n", "  ", "\"\"\"Perform a dot product attention on a single sequence on a single head.\n\n  This function dispatch the q, k, v and loop over the buckets to compute the\n  attention dot product on each subsequences.\n\n  Args:\n    q (tf.Tensor): [length_q, depth_q]\n    k (tf.Tensor): [length_k, depth_q]\n    v (tf.Tensor): [length_k, depth_v]\n    gates_q (tf.Tensor): One-hot vector of shape [length_q, nb_buckets]\n    gates_k (tf.Tensor): One-hot vector of shape [length_k, nb_buckets]\n    bi (BatchInfo): Contains the batch coordinates and sequence order\n\n  Returns:\n    tf.Tensor: [length_q, depth_v]\n  \"\"\"", "\n", "\n", "nb_buckets", "=", "gates_q", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "q_dispatcher", "=", "expert_utils", ".", "SparseDispatcher", "(", "nb_buckets", ",", "gates_q", ")", "\n", "k_dispatcher", "=", "expert_utils", ".", "SparseDispatcher", "(", "nb_buckets", ",", "gates_k", ")", "\n", "\n", "def", "eventually_dispatch", "(", "dispatcher", ",", "value", ")", ":", "\n", "    ", "if", "value", "is", "not", "None", ":", "\n", "      ", "return", "dispatcher", ".", "dispatch", "(", "value", ")", "\n", "", "return", "[", "None", "]", "*", "nb_buckets", "\n", "\n", "# Iterate over every dispatched group", "\n", "", "list_v_out", "=", "[", "]", "\n", "for", "(", "\n", "q_i", ",", "\n", "k_i", ",", "\n", "v_i", ",", "\n", "qbc", ",", "\n", "qbo", ",", "\n", "kbc", ",", "\n", "kbo", ",", "\n", ")", "in", "zip", "(", "\n", "# Dispatch queries, keys and values", "\n", "q_dispatcher", ".", "dispatch", "(", "q", ")", ",", "\n", "k_dispatcher", ".", "dispatch", "(", "k", ")", ",", "\n", "k_dispatcher", ".", "dispatch", "(", "v", ")", ",", "\n", "# Also dispatch the sequence positions and batch coordinates", "\n", "eventually_dispatch", "(", "q_dispatcher", ",", "bi", ".", "coordinates", ")", ",", "\n", "eventually_dispatch", "(", "q_dispatcher", ",", "bi", ".", "order", ")", ",", "\n", "eventually_dispatch", "(", "k_dispatcher", ",", "bi", ".", "coordinates", ")", ",", "\n", "eventually_dispatch", "(", "k_dispatcher", ",", "bi", ".", "order", ")", ",", "\n", ")", ":", "\n", "    ", "list_v_out", ".", "append", "(", "\n", "expert_dot_product", "(", "\n", "q_i", ",", "\n", "k_i", ",", "\n", "v_i", ",", "\n", "info_q", "=", "BatchInfo", "(", "coordinates", "=", "qbc", ",", "order", "=", "qbo", ")", ",", "\n", "info_k", "=", "BatchInfo", "(", "coordinates", "=", "kbc", ",", "order", "=", "kbo", ")", ")", ")", "\n", "\n", "# Combine all buckets together to restore the original length", "\n", "", "return", "q_dispatcher", ".", "combine", "(", "list_v_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.map_fn_switch": [[4118, 4144], ["tensorflow.stack", "tensorflow.map_fn", "tensorflow.unstack", "fn", "six.moves.zip"], "function", ["None"], ["", "def", "map_fn_switch", "(", "fn", ",", "elems", ",", "use_map_fn", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Construct the graph with either tf.map_fn or a python for loop.\n\n  This function is mainly for for benchmarking purpose.\n\n  tf.map_fn is dynamic but is much slower than creating a static graph with\n  for loop. However, having a for loop make the graph much longer to build\n  and can consume too much RAM on distributed setting.\n\n  Args:\n    fn (fct): same that tf.map_fn but for now can only return a single tensor\n      value (instead of a tuple of tensor for the general case)\n    elems (tuple): same that tf.map_fn\n    use_map_fn (bool): If True, tf.map_fn is used, if False, for _ in _: is used\n      instead\n    **kwargs: Additional tf.map_fn arguments (ignored if use_map_fn is False)\n\n  Returns:\n    tf.Tensor: the output of tf.map_fn\n  \"\"\"", "\n", "if", "use_map_fn", ":", "\n", "    ", "return", "tf", ".", "map_fn", "(", "fn", ",", "elems", ",", "**", "kwargs", ")", "\n", "", "elems_unpacked", "=", "(", "tf", ".", "unstack", "(", "e", ")", "for", "e", "in", "elems", ")", "\n", "out_unpacked", "=", "[", "fn", "(", "e", ")", "for", "e", "in", "zip", "(", "*", "elems_unpacked", ")", "]", "\n", "out", "=", "tf", ".", "stack", "(", "out_unpacked", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.sparse_dot_product_attention": [[4146, 4241], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensor2tensor.layers.common_layers.shape_list", "tensor2tensor.utils.expert_utils.add_name_scope", "quaternion_attention.sparse_dot_product_attention.flatten_first_dims"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "sparse_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "bi", ",", "use_map_fn", ",", "experts_params", ")", ":", "\n", "  ", "\"\"\"Sparse multihead self attention.\n\n  Perform an approximation of the full multihead attention by dispatching\n  the tokens using their keys/values. Thus the attention matrix are only\n  computed each times on a subset of the tokens.\n\n  Notes:\n   * The function don't perform scaling here (multihead_attention does\n  the /sqrt(depth)).\n   * The padding should have been removed (so batch size should be 1 but length\n   contains the elements from all different batches)\n   * Right now, only self attention is supported so length_q and length_kv\n   should be identical and the function will add triangular mask.\n   * If bi.order is not None, The bias is added inside this function to\n   prevent attention to the future.\n\n  Args:\n    q (tf.Tensor): Queries of shape [batch, heads, length_q, depth_k]\n    k (tf.Tensor): Keys of shape [batch, heads, length_q, depth_k]\n    v (tf.Tensor): Values of shape [batch, heads, length_kv, depth_v]\n    bi (BatchInfo): Contains the batch coordinates and sequence order\n    use_map_fn (bool): Use either tf.map_fn of python for loop to compute the\n      heads separately\n    experts_params (dict): Additional params for the local expert\n\n  Returns:\n    tf.Tensor: Approximation of Softmax(Q.K) * V, of shape\n      [batch, heads, length_q, depth_v]\n  \"\"\"", "\n", "batch_size", ",", "nb_heads", ",", "_", ",", "depth", "=", "common_layers", ".", "shape_list", "(", "q", ")", "\n", "\n", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "flatten_first_dims", "(", "x", ")", ":", "\n", "    ", "\"\"\"Reshape such that x is [num_heads, -1, depth].\"\"\"", "\n", "# Case 1: Either constant batch size of size 1 or batch already flattened", "\n", "if", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "0", "]", "==", "1", ":", "\n", "      ", "return", "tf", ".", "squeeze", "(", "x", ",", "axis", "=", "0", ")", "\n", "\n", "# Case 2: Flatten batch dimension", "\n", "", "x", "=", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "nb_heads", ",", "-", "1", ",", "depth", "]", ")", "\n", "return", "x", "\n", "\n", "", "def", "flatten_batch", "(", "x", ")", ":", "\n", "    ", "if", "x", "is", "None", ":", "\n", "      ", "return", "x", "\n", "", "return", "expert_utils", ".", "flatten_all_but_last", "(", "x", ")", "\n", "\n", "", "q", "=", "flatten_first_dims", "(", "q", ")", "\n", "k", "=", "flatten_first_dims", "(", "k", ")", "\n", "v", "=", "flatten_first_dims", "(", "v", ")", "\n", "bi", "=", "BatchInfo", "(", "\n", "coordinates", "=", "flatten_batch", "(", "bi", ".", "coordinates", ")", ",", "\n", "order", "=", "flatten_batch", "(", "bi", ".", "order", ")", ",", "\n", ")", "\n", "\n", "# Unstack heads", "\n", "list_q", "=", "tf", ".", "unstack", "(", "q", ")", "# list[tf.Tensor(shape=[batch * length, depth])]", "\n", "list_k", "=", "tf", ".", "unstack", "(", "k", ")", "\n", "list_v", "=", "tf", ".", "unstack", "(", "v", ")", "\n", "\n", "list_gates_q", "=", "[", "]", "\n", "list_gates_k", "=", "[", "]", "\n", "\n", "total_loss", "=", "0.0", "\n", "# There might be a more optimized way to compute all heads at once", "\n", "for", "single_q", ",", "single_k", ",", "_", "in", "zip", "(", "list_q", ",", "list_k", ",", "list_v", ")", ":", "\n", "# Each head get its own dispatcher", "\n", "    ", "lhs_gating", "=", "LshGating", "(", "\n", "depth", "=", "single_q", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", ",", "**", "experts_params", ")", "\n", "\n", "list_gates_q", ".", "append", "(", "lhs_gating", ".", "get_gates", "(", "single_q", ")", ")", "\n", "list_gates_k", ".", "append", "(", "lhs_gating", ".", "get_gates", "(", "single_k", ")", ")", "\n", "\n", "", "gates_q", "=", "tf", ".", "stack", "(", "list_gates_q", ")", "\n", "gates_k", "=", "tf", ".", "stack", "(", "list_gates_k", ")", "\n", "\n", "# Process each head separately.", "\n", "v_out", "=", "map_fn_switch", "(", "\n", "lambda", "args", ":", "dot_product_single_head", "(", "bi", "=", "bi", ",", "*", "args", ")", ",", "\n", "elems", "=", "(", "q", ",", "k", ",", "v", ",", "gates_q", ",", "gates_k", ")", ",", "\n", "dtype", "=", "(", "tf", ".", "float32", ")", ",", "\n", "parallel_iterations", "=", "2", ",", "\n", "use_map_fn", "=", "use_map_fn", ",", "\n", ")", "\n", "\n", "# Restore original shape as expected by multihead_attention", "\n", "if", "isinstance", "(", "batch_size", ",", "int", ")", "and", "batch_size", "==", "1", ":", "\n", "    ", "v_out", "=", "tf", ".", "expand_dims", "(", "v_out", ",", "axis", "=", "0", ")", "# Restore batch_size = 1", "\n", "", "else", ":", "\n", "    ", "v_out", "=", "tf", ".", "reshape", "(", "v_out", ",", "[", "nb_heads", ",", "batch_size", ",", "-", "1", ",", "depth", "]", ")", "\n", "v_out", "=", "tf", ".", "transpose", "(", "v_out", ",", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "", "return", "v_out", ",", "total_loss", "/", "nb_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.dot_product_batched_head": [[4243, 4313], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensor2tensor.utils.expert_utils.add_name_scope", "quaternion_attention.dot_product_batched_head.add_summary_capacity"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "dot_product_batched_head", "(", "q", ",", "k", ",", "v", ",", "gates_q", ",", "gates_k", ",", "mask_right", "=", "False", ")", ":", "\n", "  ", "\"\"\"Perform a dot product attention on a single sequence on a single head.\n\n  This function dispatch the q, k, v and loop over the buckets to compute the\n  attention dot product on each subsequences.\n\n  Args:\n    q (tf.Tensor): [batch*heads, length_q, depth_q]\n    k (tf.Tensor): [batch*heads, length_k, depth_q]\n    v (tf.Tensor): [batch*heads, length_k, depth_v]\n    gates_q (tf.Tensor): One-hot of shape [batch*heads, length_q, nb_buckets]\n    gates_k (tf.Tensor): One-hot of shape [batch*heads, length_k, nb_buckets]\n    mask_right (bool): Add a bias to prevent attention to the future\n\n  Returns:\n    tf.Tensor: [length_q, depth_v]\n  \"\"\"", "\n", "nb_buckets", "=", "common_layers", ".", "shape_list", "(", "gates_q", ")", "[", "-", "1", "]", "\n", "\n", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "get_dispatcher", "(", "gates", ")", ":", "\n", "    ", "\"\"\"Construct dispatcher for gates.\"\"\"", "\n", "length", "=", "common_layers", ".", "shape_list", "(", "gates", ")", "[", "1", "]", "\n", "# Count the number of ones per batch (and keep the max value)", "\n", "nb_elems_to_dispatch", "=", "tf", ".", "reduce_sum", "(", "gates", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "nb_elems_to_dispatch", "=", "tf", ".", "reduce_max", "(", "nb_elems_to_dispatch", ")", "\n", "nb_elems_to_dispatch", "=", "tf", ".", "to_int32", "(", "nb_elems_to_dispatch", ")", "\n", "capacity", "=", "nb_elems_to_dispatch", "//", "nb_buckets", "*", "2", "# Capacity is hardcoded", "\n", "capacity", "=", "tf", ".", "minimum", "(", "length", ",", "capacity", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"dispatch_capacity\"", ",", "capacity", ",", "family", "=", "\"lsh\"", ")", "\n", "return", "expert_utils", ".", "TruncatingDispatcher", "(", "gates", ",", "capacity", ")", "\n", "\n", "", "def", "add_summary_capacity", "(", "x", ",", "prefix", ")", ":", "\n", "# Monitor if capacity overflow", "\n", "    ", "x", "=", "x", "[", "0", ",", "...", "]", "# Take first batch/head", "\n", "x", "=", "tf", ".", "reduce_sum", "(", "x", ",", "axis", "=", "0", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "prefix", "+", "\"_min\"", ",", "tf", ".", "reduce_min", "(", "x", ")", ",", "family", "=", "\"lsh\"", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "prefix", "+", "\"_max\"", ",", "tf", ".", "reduce_max", "(", "x", ")", ",", "family", "=", "\"lsh\"", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "prefix", "+", "\"capacity_distribution\"", ",", "x", ",", "family", "=", "\"lsh\"", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "# Show the first 3 buckets", "\n", "      ", "tf", ".", "summary", ".", "scalar", "(", "\"{}_{}\"", ".", "format", "(", "prefix", ",", "i", ")", ",", "x", "[", "i", "]", ",", "family", "=", "\"lsh\"", ")", "\n", "\n", "", "", "add_summary_capacity", "(", "gates_q", ",", "\"q\"", ")", "\n", "add_summary_capacity", "(", "gates_k", ",", "\"k\"", ")", "\n", "\n", "q_dispatcher", "=", "get_dispatcher", "(", "gates_q", ")", "\n", "k_dispatcher", "=", "get_dispatcher", "(", "gates_k", ")", "\n", "\n", "q", "=", "q_dispatcher", ".", "dispatch", "(", "q", ")", "\n", "k", "=", "k_dispatcher", ".", "dispatch", "(", "k", ")", "\n", "v", "=", "k_dispatcher", ".", "dispatch", "(", "v", ")", "\n", "\n", "# Bias of shape [batch*heads, nb_buckets, 1, capacity] broadcasted to every", "\n", "# queries", "\n", "bias", "=", "tf", ".", "expand_dims", "(", "(", "k_dispatcher", ".", "nonpadding", "(", ")", "-", "1.0", ")", "*", "1e9", ",", "2", ")", "\n", "if", "mask_right", ":", "\n", "    ", "q_coordinate", "=", "tf", ".", "to_float", "(", "\n", "tf", ".", "expand_dims", "(", "q_dispatcher", ".", "length_coordinate", "(", ")", ",", "3", ")", ")", "\n", "k_coordinate", "=", "tf", ".", "to_float", "(", "\n", "tf", ".", "expand_dims", "(", "k_dispatcher", ".", "length_coordinate", "(", ")", ",", "2", ")", ")", "\n", "bias", "+=", "tf", ".", "to_float", "(", "tf", ".", "greater", "(", "k_coordinate", ",", "q_coordinate", ")", ")", "*", "-", "1e9", "\n", "# The sequence padding is not masked but is ignored on the next layers", "\n", "\n", "# q, k, v now have shape [batch*heads, nb_bucket, capacity, depth]", "\n", "# The buckets can be seen as different heads", "\n", "", "v_out", "=", "dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "bias", "=", "bias", ")", "\n", "\n", "# Combine all buckets together to restore the original length", "\n", "return", "q_dispatcher", ".", "combine", "(", "v_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.sparse_dot_product_attention_truncated": [[4315, 4420], ["tensor2tensor.utils.expert_utils.add_name_scope", "tensor2tensor.layers.common_layers.shape_list", "tensor2tensor.utils.expert_utils.add_name_scope", "quaternion_attention.sparse_dot_product_attention_truncated.get_gates_head"], "function", ["None"], ["", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "sparse_dot_product_attention_truncated", "(", "\n", "q", ",", "\n", "k", ",", "\n", "v", ",", "\n", "bi", ",", "# Unused", "\n", "experts_params", ",", "\n", "use_map_fn", "=", "False", ",", "# Unused", "\n", "mask_right", "=", "False", ",", "\n", ")", ":", "# pylint: disable=unused-argument", "\n", "  ", "\"\"\"Sparse multihead self attention.\n\n  Perform an approximation of the full multihead attention by dispatching\n  the tokens using their keys/values. Thus the attention matrix are only\n  computed each times on a subset of the tokens.\n\n  Notes:\n   * The function don't perform scaling here (multihead_attention does\n  the /sqrt(depth)).\n   * The padding should have been removed (so batch size should be 1 but length\n   contains the elements from all different batches)\n   * Right now, only self attention is supported so length_q and length_kv\n   should be identical and the function will add triangular mask.\n   * If bi.order is not None, The bias is added inside this function to\n   prevent attention to the future.\n\n  Args:\n    q (tf.Tensor): Queries of shape [batch, heads, length_q, depth_k]\n    k (tf.Tensor): Keys of shape [batch, heads, length_q, depth_k]\n    v (tf.Tensor): Values of shape [batch, heads, length_kv, depth_v]\n    bi (BatchInfo): Contains the batch coordinates and sequence order\n    experts_params (dict): Additional params for the local expert\n    use_map_fn (bool): Use either tf.map_fn of python for loop to compute the\n      heads separately\n    mask_right (bool):\n  Returns:\n    tf.Tensor: Approximation of Softmax(Q.K) * V, of shape\n      [batch, heads, length_q, depth_v]\n  \"\"\"", "\n", "# Currently depth is the same for for q and v", "\n", "batch_size", ",", "nb_heads", ",", "_", ",", "depth", "=", "common_layers", ".", "shape_list", "(", "q", ")", "\n", "\n", "total_loss", "=", "0.0", "\n", "\n", "# Each head get its own dispatcher", "\n", "list_lsh", "=", "[", "LshGating", "(", "depth", "=", "depth", ",", "**", "experts_params", ")", "for", "_", "in", "range", "(", "nb_heads", ")", "]", "\n", "\n", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "get_gates_head", "(", "x", ",", "add_first", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return the gates for each heads of the current x.\n\n    Args:\n      x (tf.Tensor): of shape [batch, heads, length, depth]\n      add_first (bool): if True, add the first element on each bucket\n\n    Returns:\n      tf.Tensor: gates of shape [batch, heads, length, num_buckets]\n    \"\"\"", "\n", "length", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "2", "]", "\n", "\n", "# Invert heads/batch", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "nb_heads", ",", "batch_size", "*", "length", ",", "depth", "]", ")", "\n", "\n", "list_x", "=", "tf", ".", "unstack", "(", "x", ")", "# list[tf.Tensor(shape=[batch * length, depth])]", "\n", "\n", "# Unstack heads", "\n", "list_gates", "=", "[", "]", "\n", "# There might be a more optimized way to compute all heads at once", "\n", "for", "lsh", ",", "single_x", "in", "zip", "(", "list_lsh", ",", "list_x", ")", ":", "\n", "# Each head get its own dispatcher", "\n", "      ", "gates", "=", "lsh", ".", "get_gates", "(", "single_x", ")", "\n", "nb_buckets", "=", "gates", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "# Reshape to [batch, length, depth] but should consider sequence", "\n", "# padding in that case (also dispatch the padding)", "\n", "gates", "=", "tf", ".", "reshape", "(", "gates", ",", "[", "batch_size", ",", "length", ",", "nb_buckets", "]", ")", "\n", "list_gates", ".", "append", "(", "gates", ")", "\n", "\n", "", "gates", "=", "tf", ".", "stack", "(", "list_gates", ")", "\n", "\n", "# Restore original shape", "\n", "gates", "=", "tf", ".", "reshape", "(", "gates", ",", "[", "nb_heads", ",", "batch_size", ",", "length", ",", "nb_buckets", "]", ")", "\n", "gates", "=", "tf", ".", "transpose", "(", "gates", ",", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "\n", "\n", "# Dispatch the first element to every gates to avoid empty buckets", "\n", "if", "add_first", ":", "\n", "      ", "gates", "=", "tf", ".", "maximum", "(", "gates", ",", "\n", "tf", ".", "reshape", "(", "tf", ".", "one_hot", "(", "[", "0", "]", ",", "length", ")", ",", "[", "1", ",", "1", ",", "length", ",", "1", "]", ")", ")", "\n", "\n", "", "return", "gates", "\n", "\n", "", "gates_q", "=", "get_gates_head", "(", "q", ")", "\n", "gates_k", "=", "get_gates_head", "(", "k", ",", "add_first", "=", "True", ")", "\n", "\n", "# [batch, heads, length, depth] => [batch*heads, length, depth]", "\n", "q", ",", "k", ",", "v", ",", "gates_q", ",", "gates_k", "=", "[", "\n", "combine_first_two_dimensions", "(", "t", ")", "for", "t", "in", "(", "q", ",", "k", ",", "v", ",", "gates_q", ",", "gates_k", ")", "\n", "]", "\n", "\n", "v_out", "=", "dot_product_batched_head", "(", "q", ",", "k", ",", "v", ",", "gates_q", ",", "gates_k", ",", "mask_right", ")", "\n", "\n", "# Restore original dimension", "\n", "v_out", "=", "tf", ".", "reshape", "(", "v_out", ",", "[", "batch_size", ",", "nb_heads", ",", "-", "1", ",", "depth", "]", ")", "\n", "\n", "return", "v_out", ",", "total_loss", "/", "nb_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.deconv_elems_1d": [[4422, 4449], ["tensor2tensor.utils.expert_utils.add_var_scope", "tensorflow.expand_dims", "tensorflow.layers.conv2d_transpose", "tensorflow.squeeze", "tf.squeeze.get_shape().as_list", "tf.squeeze.get_shape"], "function", ["None"], ["", "@", "expert_utils", ".", "add_var_scope", "(", ")", "\n", "def", "deconv_elems_1d", "(", "x", ",", "factor", ",", "out_depth", "=", "None", ")", ":", "\n", "  ", "\"\"\"Increase the length and change the dimensionality.\n\n  Expand/project each positions of dim depth of the input into\n  factor*tokens of dim out_depth\n\n  Args:\n    x (tf.Tensor): shape [batch_size, length, depth]\n    factor (int): Multiplicative factor of each tokens.\n    out_depth (int): Output depth (if None, keep depth constant)\n\n  Returns:\n    tf.Tensor: shape [batch_size, length*factor, out_depth]\n  \"\"\"", "\n", "out_depth", "=", "out_depth", "or", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "1", ")", "# [batch_size, 1, length, depth]", "\n", "x", "=", "tf", ".", "layers", ".", "conv2d_transpose", "(", "\n", "inputs", "=", "x", ",", "\n", "filters", "=", "out_depth", ",", "\n", "kernel_size", "=", "(", "1", ",", "factor", ")", ",", "\n", "strides", "=", "(", "1", ",", "factor", ")", ",", "\n", "padding", "=", "\"valid\"", ",", "\n", "data_format", "=", "\"channels_last\"", ",", "\n", ")", "# [batch_size, 1, length*factor, out_depth]", "\n", "x", "=", "tf", ".", "squeeze", "(", "x", ",", "1", ")", "# [batch_size, length*factor, depth]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.conv_elems_1d": [[4451, 4482], ["tensor2tensor.utils.expert_utils.add_var_scope", "tensorflow.expand_dims", "tensorflow.layers.conv2d", "tensorflow.squeeze", "tf.squeeze.get_shape().as_list", "tf.squeeze.get_shape"], "function", ["None"], ["", "@", "expert_utils", ".", "add_var_scope", "(", ")", "\n", "def", "conv_elems_1d", "(", "x", ",", "factor", ",", "out_depth", "=", "None", ")", ":", "\n", "  ", "\"\"\"Decrease the length and change the dimensionality.\n\n  Merge/restore/compress factors positions of dim depth of the input into\n  a single position of dim out_depth.\n  This is basically just a strided convolution without overlap\n  between each strides. The original length has to be divided by factor.\n\n  Args:\n    x (tf.Tensor): shape [batch_size, length, depth]\n    factor (int): Length compression factor.\n    out_depth (int): Output depth\n\n  Returns:\n    tf.Tensor: shape [batch_size, length//factor, out_depth]\n  \"\"\"", "\n", "out_depth", "=", "out_depth", "or", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "# with tf.control_dependencies(  # Dynamic assertion", "\n", "#     [tf.assert_equal(tf.shape(x)[1] % factor, 0)]):", "\n", "x", "=", "tf", ".", "expand_dims", "(", "x", ",", "1", ")", "# [batch_size, 1, length, depth]", "\n", "x", "=", "tf", ".", "layers", ".", "conv2d", "(", "\n", "inputs", "=", "x", ",", "\n", "filters", "=", "out_depth", ",", "\n", "kernel_size", "=", "(", "1", ",", "factor", ")", ",", "\n", "strides", "=", "(", "1", ",", "factor", ")", ",", "\n", "padding", "=", "\"valid\"", ",", "\n", "data_format", "=", "\"channels_last\"", ",", "\n", ")", "# [batch_size, 1, length//factor, out_depth]", "\n", "x", "=", "tf", ".", "squeeze", "(", "x", ",", "1", ")", "# [batch_size, length//factor, depth]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.local_reduction_attention": [[4484, 4565], ["tensor2tensor.utils.expert_utils.add_var_scope", "tensor2tensor.utils.expert_utils.add_name_scope", "quaternion_attention.multihead_attention", "q.get_shape().as_list", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.squeeze", "tensorflow.pad", "tensorflow.reshape", "pad_and_reshape"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.multihead_attention"], ["", "@", "expert_utils", ".", "add_var_scope", "(", ")", "\n", "def", "local_reduction_attention", "(", "x", ",", "block_length", ",", "multihead_params", ")", ":", "\n", "  ", "\"\"\"Reduce the length dimension using self attention.\n\n  Args:\n    x (tf.Tensor): float32 of shape [batch, length, depth]\n    block_length (int): Block length for local attention (Compression factor)\n    multihead_params (dict): parameters for multihead attention\n\n  Returns:\n    tf.Tensor: Compressed tensor of shape [batch, length // factor, depth]\n  \"\"\"", "\n", "\n", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "dot_product_self_local_attention_flattened", "(", "q", ",", "k", ",", "v", ")", ":", "\n", "    ", "\"\"\"Strided block local self-attention.\n\n    No overlap between the blocks.\n\n    Args:\n      q (tf.Tensor): shape [batch, heads, length, depth_k]\n      k (tf.Tensor): shape [batch, heads, length, depth_k]\n      v (tf.Tensor): shape [batch, heads, length, depth_v]\n\n    Returns:\n      tf.Tensor: shape [batch, heads, length, depth_v]\n    \"\"\"", "\n", "_", ",", "num_head", ",", "_", ",", "depth", "=", "q", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "\n", "# Extract the blocks", "\n", "def", "pad_and_reshape", "(", "x", ")", ":", "\n", "      ", "\"\"\"Split the length dim into [num_block, block_length].\"\"\"", "\n", "length_x", "=", "common_layers", ".", "shape_list", "(", "x", ")", "[", "2", "]", "\n", "# Add some padding, but won't matter as the last block will never be", "\n", "# attended by the query (after compression)", "\n", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "-", "length_x", "%", "block_length", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "\n", "x", ",", "\n", "[", "\n", "common_layers", ".", "shape_list", "(", "x", ")", "[", "0", "]", ",", "# Batch", "\n", "num_head", ",", "# Head", "\n", "common_layers", ".", "shape_list", "(", "x", ")", "[", "2", "]", "//", "block_length", ",", "# Num blocks", "\n", "block_length", ",", "# Block length", "\n", "depth", ",", "# Depth", "\n", "]", ")", "\n", "return", "x", "\n", "\n", "", "q", ",", "k", ",", "v", "=", "[", "pad_and_reshape", "(", "t", ")", "for", "t", "in", "(", "q", ",", "k", ",", "v", ")", "]", "\n", "\n", "# Perform attention on the flattened dot product", "\n", "logits", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "logits", "=", "tf", ".", "reshape", "(", "\n", "logits", ",", "\n", "[", "\n", "common_layers", ".", "shape_list", "(", "logits", ")", "[", "0", "]", ",", "# Batch", "\n", "num_head", ",", "# Head", "\n", "common_layers", ".", "shape_list", "(", "logits", ")", "[", "2", "]", ",", "# Num blocks", "\n", "block_length", "**", "2", ",", "# Flatten last dimension", "\n", "]", ")", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "weights", "=", "tf", ".", "reshape", "(", "\n", "weights", ",", "\n", "[", "\n", "common_layers", ".", "shape_list", "(", "weights", ")", "[", "0", "]", ",", "# Batch", "\n", "num_head", ",", "# Head", "\n", "common_layers", ".", "shape_list", "(", "weights", ")", "[", "2", "]", ",", "# Num blocks", "\n", "block_length", ",", "\n", "block_length", ",", "# Restore the block length dimension", "\n", "]", ")", "\n", "weights", "=", "tf", ".", "reduce_sum", "(", "weights", ",", "axis", "=", "3", ",", "keep_dims", "=", "True", ")", "# Compress block", "\n", "v_out", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "# [1, block_length] @ [block_length, depth]", "\n", "v_out", "=", "tf", ".", "squeeze", "(", "v_out", ",", "axis", "=", "3", ")", "\n", "return", "v_out", "\n", "\n", "", "return", "multihead_attention", "(", "\n", "x", ",", "\n", "None", ",", "\n", "bias", "=", "None", ",", "\n", "output_depth", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", ",", "\n", "attention_type", "=", "dot_product_self_local_attention_flattened", ",", "\n", "**", "multihead_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.multihead_self_attention_reduced": [[4567, 4660], ["tensor2tensor.utils.expert_utils.add_var_scope", "tensorflow.concat", "tensor2tensor.utils.expert_utils.add_name_scope", "quaternion_attention.multihead_attention", "ValueError", "NotImplementedError", "x.get_shape().as_list", "quaternion_attention.local_reduction_attention", "tensorflow.nn.sigmoid", "tensorflow.to_float", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "quaternion_attention.conv_elems_1d", "ValueError", "ValueError", "tensorflow.to_float", "x.get_shape", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.greater", "quaternion_attention.multihead_self_attention_reduced.construct_bias_vectors"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.multihead_attention", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.local_reduction_attention", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.conv_elems_1d"], ["", "@", "expert_utils", ".", "add_var_scope", "(", ")", "\n", "def", "multihead_self_attention_reduced", "(", "\n", "x", ",", "\n", "memory_antecedent", "=", "None", ",", "\n", "bias", "=", "None", ",", "\n", "factor", "=", "None", ",", "\n", "multihead_params", "=", "None", ",", "\n", "nonlinearity", "=", "\"none\"", ",", "\n", "reduction_type", "=", "\"conv\"", ",", "\n", "add_mask", "=", "True", ",", "\n", ")", ":", "\n", "  ", "\"\"\"Reduce the length dimension by compressing with conv.\n\n  Args:\n    x (tf.Tensor): float32 of shape [batch, length, depth]\n    memory_antecedent (tf.Tensor): Unsupported for now\n    bias (tf.Tensor): Ignored\n    factor (int): compression factor for the memory sequence\n    multihead_params (dict): parameters for multihead attention\n    nonlinearity (str): Add some non-linearity after the memory block\n    reduction_type (str): type of compression\n    add_mask (bool): If True, add the bias to prevent attention to the future\n\n  Returns:\n    (tf.Tensor): float32 of shape [batch, length, depth]\n\n  Raises:\n    ValueError: If reduction_type or nonlinearity is invalid\n  \"\"\"", "\n", "if", "not", "factor", "or", "not", "multihead_params", ":", "\n", "    ", "raise", "ValueError", "(", "\"factor and multihead_params should be set\"", ")", "\n", "", "if", "memory_antecedent", "is", "not", "None", ":", "\n", "    ", "raise", "NotImplementedError", "(", "\n", "\"multihead_self_attention_reduced only works with self-attention\"", ")", "\n", "\n", "", "depth", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "# Could try to have some overlap between the blocks but that would", "\n", "# create conv artifacts, would make it difficult to not attend to the future", "\n", "# within one group and the padding should be handled specially.", "\n", "\n", "# Reduce the memory dimension", "\n", "if", "reduction_type", "==", "\"attention\"", ":", "\n", "    ", "memory_x", "=", "local_reduction_attention", "(", "x", ",", "factor", ",", "multihead_params", ")", "\n", "", "elif", "reduction_type", "==", "\"conv\"", ":", "\n", "# With valid padding, the last block won't be computed (not attended anyway)", "\n", "    ", "memory_x", "=", "conv_elems_1d", "(", "x", ",", "factor", ")", "\n", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown reduction type {}\"", ".", "format", "(", "reduction_type", ")", ")", "\n", "\n", "", "if", "nonlinearity", "==", "\"silu\"", ":", "\n", "    ", "memory_x", "*=", "tf", ".", "nn", ".", "sigmoid", "(", "memory_x", ")", "\n", "", "elif", "nonlinearity", "!=", "\"none\"", ":", "\n", "    ", "raise", "ValueError", "(", "\"Unknown non linearity {}\"", ".", "format", "(", "nonlinearity", ")", ")", "\n", "\n", "", "memory_x", "=", "tf", ".", "concat", "(", "\n", "# Add the first elem to make it attendable by everyone (otherwise the", "\n", "# first block cannot attend to anything)", "\n", "[", "x", "[", ":", ",", ":", "1", ",", ":", "]", ",", "memory_x", "]", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", "\n", "# Construct the bias", "\n", "@", "expert_utils", ".", "add_name_scope", "(", ")", "\n", "def", "construct_bias_vectors", "(", "t", ",", "axis", ")", ":", "\n", "    ", "length", "=", "tf", ".", "to_float", "(", "common_layers", ".", "shape_list", "(", "t", ")", "[", "1", "]", ")", "\n", "length_coordinates", "=", "tf", ".", "range", "(", "length", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "length_coordinates", "=", "tf", ".", "expand_dims", "(", "length_coordinates", ",", "axis", "=", "axis", ")", "\n", "# [1, length_k] or [length_q, 1]", "\n", "return", "length_coordinates", "\n", "\n", "", "if", "add_mask", ":", "# Create mask to prevent attention to the future", "\n", "    ", "bias", "=", "tf", ".", "to_float", "(", "\n", "tf", ".", "greater", "(", "\n", "# Because we add the first elem to the memory block and it can be", "\n", "# attended by anyone,we don't need to add +1 anymore to prevent self", "\n", "# attention Use * factor to make sure the last tokens  of a block", "\n", "# cannot attend the block", "\n", "construct_bias_vectors", "(", "memory_x", ",", "0", ")", "*", "factor", ",", "\n", "# +epsilon to avoid float equality", "\n", "construct_bias_vectors", "(", "x", ",", "1", ")", "+", "1e-3", ",", "\n", ")", ")", "*", "-", "1e9", "\n", "bias", "=", "tf", ".", "expand_dims", "(", "bias", ",", "axis", "=", "0", ")", "\n", "bias", "=", "tf", ".", "expand_dims", "(", "bias", ",", "axis", "=", "0", ")", "# [1, 1, length_k, length_q]", "\n", "", "else", ":", "\n", "    ", "bias", "=", "None", "\n", "\n", "", "return", "multihead_attention", "(", "\n", "query_antecedent", "=", "x", ",", "\n", "memory_antecedent", "=", "memory_x", ",", "\n", "bias", "=", "bias", ",", "\n", "output_depth", "=", "depth", ",", "\n", "**", "multihead_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.scaled_dot_product_attention_simple": [[4662, 4686], ["tensorflow.variable_scope", "tensorflow.rsqrt", "tensorflow.matmul", "tensorflow.nn.softmax", "tensor2tensor.layers.common_layers.should_generate_summaries", "tensorflow.matmul", "tensorflow.to_float", "tensorflow.summary.image", "tensorflow.expand_dims", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.pow"], "function", ["None"], ["", "def", "scaled_dot_product_attention_simple", "(", "q", ",", "k", ",", "v", ",", "bias", ",", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Scaled dot-product attention. One head. One spatial dimension.\n\n  Args:\n    q: a Tensor with shape [batch, length_q, depth_k]\n    k: a Tensor with shape [batch, length_kv, depth_k]\n    v: a Tensor with shape [batch, length_kv, depth_v]\n    bias: optional Tensor broadcastable to [batch, length_q, length_kv]\n    name: an optional string\n\n  Returns:\n    A Tensor.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "name", ",", "default_name", "=", "\"scaled_dot_product_attention_simple\"", ")", ":", "\n", "    ", "scalar", "=", "tf", ".", "rsqrt", "(", "tf", ".", "to_float", "(", "common_layers", ".", "shape_list", "(", "q", ")", "[", "2", "]", ")", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "q", "*", "scalar", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "      ", "logits", "+=", "bias", "\n", "", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ",", "name", "=", "\"attention_weights\"", ")", "\n", "if", "common_layers", ".", "should_generate_summaries", "(", ")", ":", "\n", "      ", "tf", ".", "summary", ".", "image", "(", "\n", "\"attention\"", ",", "tf", ".", "expand_dims", "(", "tf", ".", "pow", "(", "weights", ",", "0.2", ")", ",", "3", ")", ",", "max_outputs", "=", "1", ")", "\n", "", "return", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.multihead_self_attention_memory_efficient": [[4691, 4811], ["x.get_shape().as_list", "tensor2tensor.layers.common_layers.layer_norm_compute", "tensorflow.unstack", "tensorflow.unstack", "six.moves.range", "tensorflow.squeeze", "tensorflow.variable_scope", "quaternion_attention.multihead_self_attention_memory_efficient.forward_fn"], "function", ["None"], ["def", "multihead_self_attention_memory_efficient", "(", "x", ",", "\n", "bias", ",", "\n", "num_heads", ",", "\n", "head_size", "=", "None", ",", "\n", "epsilon", "=", "1e-6", ",", "\n", "forget", "=", "True", ",", "\n", "test_vars", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Multihead scaled-dot-product self-attention.\n\n  Includes layer norm.\n\n  Returns multihead-self-attention(layer_norm(x))\n\n  Computes one attention head at a time to avoid exhausting memory.\n\n  If forget=True, then forget all forwards activations and recompute on\n  the backwards pass.\n\n  Args:\n    x: a Tensor with shape [batch, length, input_size]\n    bias: an attention bias tensor broadcastable to [batch, 1, length, length]\n    num_heads: an integer\n    head_size: an optional integer - defaults to input_size/num_heads\n    epsilon: a float, for layer norm\n    forget: a boolean - forget forwards activations and recompute on backprop\n    test_vars: optional tuple of variables for testing purposes\n    name: an optional string\n\n  Returns:\n    A Tensor.\n  \"\"\"", "\n", "io_size", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "if", "head_size", "is", "None", ":", "\n", "    ", "assert", "io_size", "%", "num_heads", "==", "0", "\n", "head_size", "=", "io_size", "/", "num_heads", "\n", "\n", "", "def", "forward_internal", "(", "x", ",", "wqkv", ",", "wo", ",", "attention_bias", ",", "norm_scale", ",", "norm_bias", ")", ":", "\n", "    ", "\"\"\"Forward function.\"\"\"", "\n", "n", "=", "common_layers", ".", "layer_norm_compute", "(", "x", ",", "epsilon", ",", "norm_scale", ",", "norm_bias", ")", "\n", "wqkv_split", "=", "tf", ".", "unstack", "(", "wqkv", ",", "num", "=", "num_heads", ")", "\n", "wo_split", "=", "tf", ".", "unstack", "(", "wo", ",", "num", "=", "num_heads", ")", "\n", "y", "=", "0", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "      ", "with", "tf", ".", "control_dependencies", "(", "[", "y", "]", "if", "h", ">", "0", "else", "[", "]", ")", ":", "\n", "        ", "combined", "=", "tf", ".", "nn", ".", "conv1d", "(", "n", ",", "wqkv_split", "[", "h", "]", ",", "1", ",", "\"SAME\"", ")", "\n", "q", ",", "k", ",", "v", "=", "tf", ".", "split", "(", "combined", ",", "3", ",", "axis", "=", "2", ")", "\n", "o", "=", "scaled_dot_product_attention_simple", "(", "q", ",", "k", ",", "v", ",", "attention_bias", ")", "\n", "y", "+=", "tf", ".", "nn", ".", "conv1d", "(", "o", ",", "wo_split", "[", "h", "]", ",", "1", ",", "\"SAME\"", ")", "\n", "", "", "return", "y", "\n", "\n", "", "key", "=", "(", "\n", "\"multihead_self_attention_memory_efficient %s %s\"", "%", "(", "num_heads", ",", "epsilon", ")", ")", "\n", "if", "not", "forget", ":", "\n", "    ", "forward_fn", "=", "forward_internal", "\n", "", "elif", "key", "in", "_function_cache", ":", "\n", "    ", "forward_fn", "=", "_function_cache", "[", "key", "]", "\n", "", "else", ":", "\n", "\n", "    ", "@", "function", ".", "Defun", "(", "compiled", "=", "True", ")", "\n", "def", "grad_fn", "(", "x", ",", "wqkv", ",", "wo", ",", "attention_bias", ",", "norm_scale", ",", "norm_bias", ",", "dy", ")", ":", "\n", "      ", "\"\"\"Custom gradient function.\"\"\"", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "dy", "]", ")", ":", "\n", "        ", "n", "=", "common_layers", ".", "layer_norm_compute", "(", "x", ",", "epsilon", ",", "norm_scale", ",", "norm_bias", ")", "\n", "wqkv_split", "=", "tf", ".", "unstack", "(", "wqkv", ",", "num", "=", "num_heads", ")", "\n", "wo_split", "=", "tf", ".", "unstack", "(", "wo", ",", "num", "=", "num_heads", ")", "\n", "deps", "=", "[", "]", "\n", "dwqkvs", "=", "[", "]", "\n", "dwos", "=", "[", "]", "\n", "dn", "=", "0", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "          ", "with", "tf", ".", "control_dependencies", "(", "deps", ")", ":", "\n", "            ", "combined", "=", "tf", ".", "nn", ".", "conv1d", "(", "n", ",", "wqkv_split", "[", "h", "]", ",", "1", ",", "\"SAME\"", ")", "\n", "q", ",", "k", ",", "v", "=", "tf", ".", "split", "(", "combined", ",", "3", ",", "axis", "=", "2", ")", "\n", "o", "=", "scaled_dot_product_attention_simple", "(", "q", ",", "k", ",", "v", ",", "attention_bias", ")", "\n", "partial_y", "=", "tf", ".", "nn", ".", "conv1d", "(", "o", ",", "wo_split", "[", "h", "]", ",", "1", ",", "\"SAME\"", ")", "\n", "pdn", ",", "dwqkvh", ",", "dwoh", "=", "tf", ".", "gradients", "(", "\n", "ys", "=", "[", "partial_y", "]", ",", "\n", "xs", "=", "[", "n", ",", "wqkv_split", "[", "h", "]", ",", "wo_split", "[", "h", "]", "]", ",", "\n", "grad_ys", "=", "[", "dy", "]", ")", "\n", "dn", "+=", "pdn", "\n", "dwqkvs", ".", "append", "(", "dwqkvh", ")", "\n", "dwos", ".", "append", "(", "dwoh", ")", "\n", "deps", "=", "[", "dn", ",", "dwqkvh", ",", "dwoh", "]", "\n", "", "", "dwqkv", "=", "tf", ".", "stack", "(", "dwqkvs", ")", "\n", "dwo", "=", "tf", ".", "stack", "(", "dwos", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "deps", ")", ":", "\n", "          ", "dx", ",", "dnorm_scale", ",", "dnorm_bias", "=", "tf", ".", "gradients", "(", "\n", "ys", "=", "[", "n", "]", ",", "xs", "=", "[", "x", ",", "norm_scale", ",", "norm_bias", "]", ",", "grad_ys", "=", "[", "dn", "]", ")", "\n", "", "return", "(", "dx", ",", "dwqkv", ",", "dwo", ",", "tf", ".", "zeros_like", "(", "attention_bias", ")", ",", "dnorm_scale", ",", "\n", "dnorm_bias", ")", "\n", "\n", "", "", "@", "function", ".", "Defun", "(", "\n", "grad_func", "=", "grad_fn", ",", "compiled", "=", "True", ",", "separate_compiled_gradients", "=", "True", ")", "\n", "def", "forward_fn", "(", "x", ",", "wqkv", ",", "wo", ",", "attention_bias", ",", "norm_scale", ",", "norm_bias", ")", ":", "\n", "      ", "return", "forward_internal", "(", "x", ",", "wqkv", ",", "wo", ",", "attention_bias", ",", "norm_scale", ",", "\n", "norm_bias", ")", "\n", "\n", "", "_function_cache", "[", "key", "]", "=", "forward_fn", "\n", "\n", "", "if", "bias", "is", "not", "None", ":", "\n", "    ", "bias", "=", "tf", ".", "squeeze", "(", "bias", ",", "1", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ",", "default_name", "=", "\"multihead_attention\"", ",", "values", "=", "[", "x", "]", ")", ":", "\n", "# TODO(noam): it would be nice to save memory by casting x to float16", "\n", "# here, but this causes problems with the gradients.  Figure out if there", "\n", "# is a way to leave the gradients as float32.", "\n", "    ", "if", "test_vars", "is", "not", "None", ":", "\n", "      ", "wqkv", ",", "wo", ",", "norm_scale", ",", "norm_bias", "=", "list", "(", "test_vars", ")", "\n", "", "else", ":", "\n", "      ", "wqkv", "=", "tf", ".", "get_variable", "(", "\n", "\"wqkv\"", ",", "[", "num_heads", ",", "1", ",", "io_size", ",", "3", "*", "head_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "io_size", "**", "-", "0.5", ")", ")", "\n", "wo", "=", "tf", ".", "get_variable", "(", "\n", "\"wo\"", ",", "[", "num_heads", ",", "1", ",", "head_size", ",", "io_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "\n", "stddev", "=", "(", "head_size", "*", "num_heads", ")", "**", "-", "0.5", ")", ")", "\n", "norm_scale", ",", "norm_bias", "=", "common_layers", ".", "layer_norm_vars", "(", "io_size", ")", "\n", "", "y", "=", "forward_fn", "(", "x", ",", "wqkv", ",", "wo", ",", "bias", ",", "norm_scale", ",", "norm_bias", ")", "\n", "y", ".", "set_shape", "(", "x", ".", "get_shape", "(", ")", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.QuarternionRNN.__init__": [[183, 203], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "qlib.make_quarternion_mul", "qlib.make_quarternion_mul", "qlib.make_quarternion_mul", "tensorflow.orthogonal_initializer"], "methods", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.make_quarternion_mul", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.make_quarternion_mul", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.make_quarternion_mul"], ["\t", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "\n", "initializer", "=", "None", ",", "name", "=", "''", ",", "reuse", "=", "None", ")", ":", "\n", "\t\t", "\"\"\" Rough implementation (need double-check)\n\t\tfrom the Quarternion RNN paper. For now, works decently.\n\t\t\"\"\"", "\n", "self", ".", "dim", "=", "output_dim", "\n", "with", "tf", ".", "variable_scope", "(", "\"QuartRNN{}\"", ".", "format", "(", "name", ")", ",", "reuse", "=", "reuse", ")", "as", "scope", ":", "\n", "\t\t\t", "if", "(", "initializer", "is", "None", ")", ":", "\n", "# initializer = tf.contrib.layers.xavier_initializer()", "\n", "\t\t\t\t", "initialzier", "=", "tf", ".", "orthogonal_initializer", "(", ")", "\n", "", "input_dim", "=", "input_dim", "//", "4", "\n", "self", ".", "Wh", "=", "tf", ".", "get_variable", "(", "\"Wh\"", ",", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "initializer", "=", "initializer", ")", "\n", "self", ".", "Wx", "=", "tf", ".", "get_variable", "(", "\"Wx\"", ",", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "initializer", "=", "initializer", ")", "\n", "self", ".", "Wy", "=", "tf", ".", "get_variable", "(", "\"Wy\"", ",", "[", "input_dim", ",", "output_dim", "]", ",", "\n", "initializer", "=", "initializer", ")", "\n", "self", ".", "Wh", "=", "make_quarternion_mul", "(", "self", ".", "Wh", ")", "\n", "self", ".", "Wx", "=", "make_quarternion_mul", "(", "self", ".", "Wx", ")", "\n", "self", ".", "Wy", "=", "make_quarternion_mul", "(", "self", ".", "Wy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.QuarternionRNN.state_size": [[204, 207], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.QuarternionRNN.output_size": [[208, 211], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.QuarternionRNN.__call__": [[213, 221], ["tensorflow.nn.sigmoid", "tensorflow.nn.tanh", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tinputs: 2-D tensor of shape [batch_size, feats + [gates]]\n\t\t\"\"\"", "\n", "new_state", "=", "tf", ".", "matmul", "(", "state", ",", "self", ".", "Wh", ")", "+", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "Wx", ")", "\n", "new_state", "=", "tf", ".", "nn", ".", "sigmoid", "(", "new_state", ")", "\n", "output", "=", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "matmul", "(", "inputs", ",", "self", ".", "Wy", ")", ")", "\n", "return", "output", ",", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.make_quarternion_mul": [[26, 34], ["tensorflow.split", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat"], "function", ["None"], ["def", "make_quarternion_mul", "(", "kernel", ",", "concat_dim", "=", "0", ")", ":", "\n", "\t", "r", ",", "i", ",", "j", ",", "k", "=", "tf", ".", "split", "(", "kernel", ",", "4", ",", "axis", "=", "-", "1", ")", "\n", "r2", "=", "tf", ".", "concat", "(", "[", "r", ",", "-", "i", ",", "-", "j", ",", "-", "k", "]", ",", "axis", "=", "-", "1", ")", "# 0, 1, 2, 3", "\n", "i2", "=", "tf", ".", "concat", "(", "[", "i", ",", "r", ",", "-", "k", ",", "j", "]", ",", "axis", "=", "-", "1", ")", "# 1, 0, 3, 2", "\n", "j2", "=", "tf", ".", "concat", "(", "[", "j", ",", "k", ",", "r", ",", "-", "i", "]", ",", "axis", "=", "-", "1", ")", "# 2, 3, 0, 1", "\n", "k2", "=", "tf", ".", "concat", "(", "[", "k", ",", "-", "j", ",", "i", ",", "r", "]", ",", "axis", "=", "-", "1", ")", "# 3, 2, 1, 0", "\n", "hamilton", "=", "tf", ".", "concat", "(", "[", "r2", ",", "i2", ",", "j2", ",", "k2", "]", ",", "axis", "=", "concat_dim", ")", "\n", "return", "hamilton", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_r": [[35, 37], ["tensorflow.split"], "function", ["None"], ["", "def", "get_r", "(", "x", ",", "a", "=", "1", ")", ":", "\n", "\t", "return", "tf", ".", "split", "(", "x", ",", "4", ",", "axis", "=", "a", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_i": [[38, 40], ["tensorflow.split"], "function", ["None"], ["", "def", "get_i", "(", "x", ",", "a", "=", "1", ")", ":", "\n", "\t", "return", "tf", ".", "split", "(", "x", ",", "4", ",", "axis", "=", "a", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_j": [[41, 43], ["tensorflow.split"], "function", ["None"], ["", "def", "get_j", "(", "x", ",", "a", "=", "1", ")", ":", "\n", "\t", "return", "tf", ".", "split", "(", "x", ",", "4", ",", "axis", "=", "a", ")", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_k": [[44, 46], ["tensorflow.split"], "function", ["None"], ["", "def", "get_k", "(", "x", ",", "a", "=", "1", ")", ":", "\n", "\t", "return", "tf", ".", "split", "(", "x", ",", "4", ",", "axis", "=", "a", ")", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_attention": [[47, 73], ["print", "print", "print", "tensorflow.split", "tensorflow.split", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.shape", "tensorflow.shape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "function", ["None"], ["", "def", "quarternion_attention", "(", "a", ",", "b", ")", ":", "\n", "\t", "\"\"\" Performs dot product attention between two quarternion sequences.\n\n\ta = bsz x al x dim\n\tb = bsz x bl x dim\n\n\tfollowing:\n\t(rr' - xx' - yy' - zz')  +\n\t\t(rx' + xr' + yz' - zy')i +\n\t\t(ry' - xz' + yr' + zx')j +\n\t\t(rz' + xy' - yx' + zr')k +\n\n\tthe output should be one attention matrix for each component (r,i,j,k)\n\t\"\"\"", "\n", "print", "(", "\"light Attention!\"", ")", "\n", "print", "(", "a", ")", "\n", "print", "(", "b", ")", "\n", "al", ",", "bl", "=", "tf", ".", "shape", "(", "a", ")", "[", "2", "]", ",", "tf", ".", "shape", "(", "b", ")", "[", "2", "]", "\n", "\n", "ar", ",", "ax", ",", "ay", ",", "az", "=", "tf", ".", "split", "(", "a", ",", "4", ",", "axis", "=", "-", "1", ")", "\n", "br", ",", "bx", ",", "by", ",", "bz", "=", "tf", ".", "split", "(", "b", ",", "4", ",", "axis", "=", "-", "1", ")", "\n", "r", "=", "tf", ".", "matmul", "(", "ar", ",", "br", ",", "transpose_b", "=", "True", ")", "-", "tf", ".", "matmul", "(", "ax", ",", "bx", ",", "transpose_b", "=", "True", ")", "-", "tf", ".", "matmul", "(", "ay", ",", "by", ",", "transpose_b", "=", "True", ")", "-", "tf", ".", "matmul", "(", "az", ",", "bz", ",", "transpose_b", "=", "True", ")", "\n", "i", "=", "tf", ".", "matmul", "(", "ar", ",", "bx", ",", "transpose_b", "=", "True", ")", "+", "tf", ".", "matmul", "(", "ax", ",", "br", ",", "transpose_b", "=", "True", ")", "+", "tf", ".", "matmul", "(", "ay", ",", "bz", ",", "transpose_b", "=", "True", ")", "-", "tf", ".", "matmul", "(", "az", ",", "by", ",", "transpose_b", "=", "True", ")", "\n", "j", "=", "tf", ".", "matmul", "(", "ar", ",", "by", ",", "transpose_b", "=", "True", ")", "-", "tf", ".", "matmul", "(", "ax", ",", "bz", ",", "transpose_b", "=", "True", ")", "+", "tf", ".", "matmul", "(", "ay", ",", "br", ",", "transpose_b", "=", "True", ")", "+", "tf", ".", "matmul", "(", "az", ",", "bx", ",", "transpose_b", "=", "True", ")", "\n", "k", "=", "tf", ".", "matmul", "(", "ar", ",", "bz", ",", "transpose_b", "=", "True", ")", "+", "tf", ".", "matmul", "(", "ax", ",", "by", ",", "transpose_b", "=", "True", ")", "-", "tf", ".", "matmul", "(", "ay", ",", "bx", ",", "transpose_b", "=", "True", ")", "+", "tf", ".", "matmul", "(", "az", ",", "br", ",", "transpose_b", "=", "True", ")", "\n", "return", "[", "r", ",", "i", ",", "j", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_dot_product_att": [[74, 90], ["tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape", "tensorflow.tile", "qlib.quarternion_dot", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.shape", "tensorflow.shape", "tf.tile.get_shape().as_list", "tensorflow.shape", "tf.tile.get_shape"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_dot"], ["", "def", "quarternion_dot_product_att", "(", "a", ",", "b", ")", ":", "\n", "\t", "\"\"\" Wrapper for two sequences\n\t\"\"\"", "\n", "al", "=", "tf", ".", "shape", "(", "a", ")", "[", "1", "]", "\n", "bl", "=", "tf", ".", "shape", "(", "b", ")", "[", "1", "]", "\n", "# print(a)", "\n", "d", "=", "a", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "bsz", "=", "tf", ".", "shape", "(", "b", ")", "[", "0", "]", "\n", "a", "=", "tf", ".", "reshape", "(", "a", ",", "[", "-", "1", ",", "d", "]", ")", "\n", "a", "=", "tf", ".", "tile", "(", "a", ",", "[", "bl", ",", "1", "]", ")", "\n", "b", "=", "tf", ".", "reshape", "(", "b", ",", "[", "-", "1", ",", "d", "]", ")", "\n", "b", "=", "tf", ".", "tile", "(", "b", ",", "[", "al", ",", "1", "]", ")", "\n", "att", "=", "quarternion_dot", "(", "a", ",", "b", ")", "\n", "att", "=", "tf", ".", "reshape", "(", "att", ",", "[", "bsz", ",", "-", "1", ",", "al", "*", "bl", "]", ")", "\n", "att", "=", "tf", ".", "reduce_sum", "(", "att", ",", "1", ")", "\n", "return", "tf", ".", "reshape", "(", "att", ",", "[", "-", "1", ",", "al", "*", "bl", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_dot_3d": [[91, 98], ["tensorflow.reshape", "tensorflow.reshape", "qlib.quarternion_dot", "tensorflow.reshape", "tf.reshape.get_shape().as_list", "tensorflow.shape", "tf.reshape.get_shape"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_dot"], ["", "def", "quarternion_dot_3d", "(", "q0", ",", "q1", ")", ":", "\n", "\t", "d", "=", "q0", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "sq", "=", "tf", ".", "shape", "(", "q0", ")", "[", "1", "]", "\n", "q0", "=", "tf", ".", "reshape", "(", "q0", ",", "[", "-", "1", ",", "d", "]", ")", "\n", "q1", "=", "tf", ".", "reshape", "(", "q1", ",", "[", "-", "1", ",", "d", "]", ")", "\n", "out", "=", "quarternion_dot", "(", "q0", ",", "q1", ")", "\n", "return", "tf", ".", "reshape", "(", "out", ",", "[", "-", "1", ",", "sq", ",", "d", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_dot": [[99, 122], ["qlib.get_r", "qlib.get_i", "qlib.get_j", "qlib.get_k", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.concat", "qlib.get_k", "tensorflow.concat", "qlib.get_k", "tensorflow.concat", "qlib.get_k", "tensorflow.concat", "qlib.get_k", "qlib.get_j", "qlib.get_j", "qlib.get_j", "qlib.get_j", "qlib.get_r", "qlib.get_i", "qlib.get_r", "qlib.get_i", "qlib.get_r", "qlib.get_i", "qlib.get_r", "qlib.get_i"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_r", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_i", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_j", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_k", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_k", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_k", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_k", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_k", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_j", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_j", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_j", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_j", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_r", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_i", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_r", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_i", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_r", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_i", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_r", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.get_i"], ["", "def", "quarternion_dot", "(", "q0", ",", "q1", ")", ":", "\n", "\t", "\"\"\" Quarternion product between 2 quarternions\n\n\treturns same shape and acts like element-wise quarternion mul\n\t\"\"\"", "\n", "q1_r", "=", "get_r", "(", "q1", ")", "\n", "q1_i", "=", "get_i", "(", "q1", ")", "\n", "q1_j", "=", "get_j", "(", "q1", ")", "\n", "q1_k", "=", "get_k", "(", "q1", ")", "\n", "\n", "r_base", "=", "tf", ".", "multiply", "(", "q0", ",", "q1", ")", "\n", "r", "=", "get_r", "(", "r_base", ")", "-", "get_i", "(", "r_base", ")", "-", "get_j", "(", "r_base", ")", "-", "get_k", "(", "r_base", ")", "\n", "\n", "i_base", "=", "tf", ".", "multiply", "(", "q0", ",", "tf", ".", "concat", "(", "[", "q1_i", ",", "q1_r", ",", "q1_k", ",", "q1_j", "]", ",", "1", ")", ")", "\n", "i", "=", "get_r", "(", "i_base", ")", "+", "get_i", "(", "i_base", ")", "+", "get_j", "(", "i_base", ")", "-", "get_k", "(", "i_base", ")", "\n", "\n", "j_base", "=", "tf", ".", "multiply", "(", "q0", ",", "tf", ".", "concat", "(", "[", "q1_j", ",", "q1_k", ",", "q1_r", ",", "q1_i", "]", ",", "1", ")", ")", "\n", "j", "=", "get_r", "(", "j_base", ")", "-", "get_i", "(", "j_base", ")", "+", "get_j", "(", "j_base", ")", "+", "get_k", "(", "j_base", ")", "\n", "\n", "k_base", "=", "tf", ".", "multiply", "(", "q0", ",", "tf", ".", "concat", "(", "[", "q1_k", ",", "q1_j", ",", "q1_i", ",", "q1_r", "]", ",", "1", ")", ")", "\n", "k", "=", "get_r", "(", "k_base", ")", "+", "get_i", "(", "k_base", ")", "-", "get_j", "(", "k_base", ")", "+", "get_k", "(", "k_base", ")", "\n", "\n", "return", "tf", ".", "concat", "(", "[", "r", ",", "i", ",", "j", ",", "k", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_concat": [[123, 140], ["tensorflow.concat", "tensorflow.split", "range", "tensorflow.concat", "final.append", "range", "output[].append"], "function", ["None"], ["", "def", "quarternion_concat", "(", "x", ",", "axis", ")", ":", "\n", "\t", "\"\"\" Helpful if we have 2 quarternions in [r,i,j,k].\n\tWe can't simply concat them as it would mess the components.\n\tSo in this case, we extract each component and concat them individually.\n\t\"\"\"", "\n", "output", "=", "[", "[", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "for", "_x", "in", "x", ":", "\n", "\t\t", "sp", "=", "tf", ".", "split", "(", "_x", ",", "4", ",", "axis", "=", "axis", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "\t\t\t", "output", "[", "i", "]", ".", "append", "(", "sp", "[", "i", "]", ")", "\n", "\n", "", "", "final", "=", "[", "]", "\n", "for", "o", "in", "output", ":", "\n", "\t\t", "o", "=", "tf", ".", "concat", "(", "o", ",", "axis", ")", "\n", "final", ".", "append", "(", "o", ")", "\n", "\n", "", "return", "tf", ".", "concat", "(", "final", ",", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_ffn_3d": [[141, 155], ["print", "tensorflow.reshape", "qlib.quarternion_ffn", "tensorflow.reshape", "tf.reshape.get_shape().as_list", "tensorflow.shape", "tf.reshape.get_shape"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_ffn"], ["", "def", "quarternion_ffn_3d", "(", "x", ",", "dim", ",", "name", "=", "''", ",", "init", "=", "None", ",", "\n", "num_layers", "=", "1", ",", "activation", "=", "None", ",", "reuse", "=", "None", ")", ":", "\n", "\t", "\"\"\" Quarternion Feed-forward layers to 3D input [bsz x seq_len x dim]\n\treturns same shape tensor with new projected dimension.\n\t\"\"\"", "\n", "print", "(", "\"QFFN layer..\"", ")", "\n", "_d", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "sq", "=", "tf", ".", "shape", "(", "x", ")", "[", "1", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "_d", "]", ")", "\n", "x", "=", "quarternion_ffn", "(", "x", ",", "dim", ",", "name", "=", "name", ",", "init", "=", "init", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "activation", "=", "activation", ",", "reuse", "=", "reuse", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "sq", ",", "dim", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_ffn": [[156, 173], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.variable_scope", "tensorflow.get_variable", "qlib.make_quarternion_mul", "tensorflow.matmul", "x.get_shape().as_list", "activation", "x.get_shape"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.make_quarternion_mul"], ["", "def", "quarternion_ffn", "(", "x", ",", "dim", ",", "name", "=", "''", ",", "init", "=", "None", ",", "\n", "num_layers", "=", "1", ",", "activation", "=", "None", ",", "reuse", "=", "None", ")", ":", "\n", "\t", "\"\"\" Implements quarternion feed-forward layer\n\n\tx is [bsz x features] tensor\n\t\"\"\"", "\n", "if", "(", "init", "is", "None", ")", ":", "\n", "\t\t", "init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "# init = q_xavier_initializer()", "\n", "", "input_dim", "=", "x", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "//", "4", "\n", "with", "tf", ".", "variable_scope", "(", "'Q{}'", ".", "format", "(", "name", ")", ",", "reuse", "=", "reuse", ")", "as", "scope", ":", "\n", "\t\t", "kernel", "=", "tf", ".", "get_variable", "(", "'quarternion'", ",", "[", "input_dim", ",", "dim", "]", ",", "initializer", "=", "init", ")", "\n", "hamilton", "=", "make_quarternion_mul", "(", "kernel", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "x", ",", "hamilton", ")", "\n", "if", "(", "activation", ")", ":", "\n", "\t\t\t", "output", "=", "activation", "(", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.hamilton_product": [[174, 178], ["qlib.make_quarternion_mul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.make_quarternion_mul"], ["", "", "def", "hamilton_product", "(", "x", ",", "kernel", ")", ":", "\n", "\t", "h", "=", "make_quarternion_mul", "(", "kernel", ")", "\n", "output", "=", "tf", ".", "matmul", "(", "x", ",", "h", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_transformer.transformer_prepare_encoder": [[32, 99], ["inputs.shape.as_list", "hparams.get", "layers.quaternion_attention.attention_bias_same_segment", "layers.quaternion_attention.attention_bias_same_segment", "layers.quaternion_attention.embedding_to_padding", "layers.quaternion_attention.attention_bias_ignore_padding", "layers.quaternion_attention.attention_bias_proximal", "tensor2tensor.layers.common_layers.embedding", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "layers.quaternion_attention.add_timing_signal_1d_given_position", "layers.quaternion_attention.add_timing_signal_1d", "layers.quaternion_attention.add_positional_embedding", "tensor2tensor.layers.common_layers.shape_list"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_same_segment", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_same_segment", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.embedding_to_padding", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_ignore_padding", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_proximal", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_timing_signal_1d_given_position", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_timing_signal_1d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_positional_embedding"], ["def", "transformer_prepare_encoder", "(", "inputs", ",", "target_space", ",", "hparams", ",", "features", "=", "None", ")", ":", "\n", "  ", "\"\"\"Prepare one shard of the model for the encoder.\n\n  Args:\n    inputs: a Tensor.\n    target_space: a Tensor.\n    hparams: run hyperparameters\n    features: optionally pass the entire features dictionary as well.\n      This is needed now for \"packed\" datasets.\n\n  Returns:\n    encoder_input: a Tensor, bottom of encoder stack\n    encoder_self_attention_bias: a bias tensor for use in encoder self-attention\n    encoder_decoder_attention_bias: a bias tensor for use in encoder-decoder\n      attention\n  \"\"\"", "\n", "ishape_static", "=", "inputs", ".", "shape", ".", "as_list", "(", ")", "\n", "encoder_input", "=", "inputs", "\n", "if", "features", "and", "\"inputs_segmentation\"", "in", "features", ":", "\n", "# Packed dataset.  Keep the examples from seeing each other.", "\n", "    ", "inputs_segmentation", "=", "features", "[", "\"inputs_segmentation\"", "]", "\n", "inputs_position", "=", "features", "[", "\"inputs_position\"", "]", "\n", "targets_segmentation", "=", "features", "[", "\"targets_segmentation\"", "]", "\n", "encoder_self_attention_bias", "=", "common_attention", ".", "attention_bias_same_segment", "(", "\n", "inputs_segmentation", ",", "inputs_segmentation", ")", "\n", "encoder_decoder_attention_bias", "=", "(", "\n", "common_attention", ".", "attention_bias_same_segment", "(", "targets_segmentation", ",", "\n", "inputs_segmentation", ")", ")", "\n", "", "else", ":", "\n", "# Usual case - not a packed dataset.", "\n", "    ", "encoder_padding", "=", "common_attention", ".", "embedding_to_padding", "(", "encoder_input", ")", "\n", "ignore_padding", "=", "common_attention", ".", "attention_bias_ignore_padding", "(", "\n", "encoder_padding", ")", "\n", "encoder_self_attention_bias", "=", "ignore_padding", "\n", "encoder_decoder_attention_bias", "=", "ignore_padding", "\n", "inputs_position", "=", "None", "\n", "", "if", "hparams", ".", "proximity_bias", ":", "\n", "    ", "encoder_self_attention_bias", "+=", "common_attention", ".", "attention_bias_proximal", "(", "\n", "common_layers", ".", "shape_list", "(", "inputs", ")", "[", "1", "]", ")", "\n", "", "if", "hparams", ".", "get", "(", "\"use_target_space_embedding\"", ",", "True", ")", ":", "\n", "# Append target_space_id embedding to inputs.", "\n", "    ", "emb_target_space", "=", "common_layers", ".", "embedding", "(", "\n", "target_space", ",", "\n", "32", ",", "\n", "ishape_static", "[", "-", "1", "]", ",", "\n", "name", "=", "\"target_space_embedding\"", ",", "\n", "dtype", "=", "tf", ".", "bfloat16", "\n", "if", "hparams", ".", "activation_dtype", "==", "\"bfloat16\"", "else", "tf", ".", "float32", ")", "\n", "emb_target_space", "=", "tf", ".", "reshape", "(", "emb_target_space", ",", "[", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "encoder_input", "+=", "emb_target_space", "\n", "", "if", "hparams", ".", "pos", "==", "\"timing\"", ":", "\n", "    ", "if", "inputs_position", "is", "not", "None", ":", "\n", "      ", "encoder_input", "=", "common_attention", ".", "add_timing_signal_1d_given_position", "(", "\n", "encoder_input", ",", "inputs_position", ")", "\n", "", "else", ":", "\n", "      ", "encoder_input", "=", "common_attention", ".", "add_timing_signal_1d", "(", "encoder_input", ")", "\n", "", "", "elif", "hparams", ".", "pos", "==", "\"emb\"", ":", "\n", "    ", "encoder_input", "=", "common_attention", ".", "add_positional_embedding", "(", "\n", "encoder_input", ",", "hparams", ".", "max_length", ",", "\"inputs_positional_embedding\"", ",", "\n", "inputs_position", ")", "\n", "", "if", "hparams", ".", "activation_dtype", "==", "\"bfloat16\"", ":", "\n", "    ", "encoder_self_attention_bias", "=", "tf", ".", "cast", "(", "encoder_self_attention_bias", ",", "\n", "tf", ".", "bfloat16", ")", "\n", "encoder_decoder_attention_bias", "=", "tf", ".", "cast", "(", "encoder_decoder_attention_bias", ",", "\n", "tf", ".", "bfloat16", ")", "\n", "", "return", "(", "encoder_input", ",", "encoder_self_attention_bias", ",", "\n", "encoder_decoder_attention_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_transformer.transformer_encoder": [[101, 207], ["tensor2tensor.layers.common_layers.comma_separated_string_to_integer_list", "tensor2tensor.utils.mlperf_log.transformer_print", "tensor2tensor.utils.mlperf_log.transformer_print", "tensor2tensor.utils.mlperf_log.transformer_print", "getattr", "tensorflow.variable_scope", "range", "tensor2tensor.utils.mlperf_log.transformer_print", "tensor2tensor.layers.common_layers.layer_preprocess", "layers.quaternion_attention.attention_bias_to_padding", "tensor2tensor.utils.expert_utils.PadRemover", "tensor2tensor.layers.common_layers.is_xla_compiled", "tensorflow.variable_scope", "tensorflow.variable_scope", "layers.quaternion_attention.multihead_attention", "tensor2tensor.layers.common_layers.layer_postprocess", "tensorflow.variable_scope", "quaternion_transformer.transformer_ffn_layer", "tensor2tensor.layers.common_layers.layer_postprocess", "tensor2tensor.layers.common_layers.layer_preprocess", "tensor2tensor.layers.common_layers.layer_preprocess", "hparams.get", "hparams.get"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_to_padding", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.multihead_attention", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_transformer.transformer_ffn_layer"], ["", "def", "transformer_encoder", "(", "encoder_input", ",", "\n", "encoder_self_attention_bias", ",", "\n", "hparams", ",", "\n", "name", "=", "\"encoder\"", ",", "\n", "nonpadding", "=", "None", ",", "\n", "save_weights_to", "=", "None", ",", "\n", "make_image_summary", "=", "True", ",", "\n", "losses", "=", "None", ",", "\n", "attn_bias_for_padding", "=", "None", ")", ":", "\n", "  ", "\"\"\"A stack of transformer layers.\n\n  Args:\n    encoder_input: a Tensor\n    encoder_self_attention_bias: bias Tensor for self-attention\n       (see common_attention.attention_bias())\n    hparams: hyperparameters for model\n    name: a string\n    nonpadding: optional Tensor with shape [batch_size, encoder_length]\n      indicating what positions are not padding.  This must either be\n      passed in, which we do for \"packed\" datasets, or inferred from\n      encoder_self_attention_bias.  The knowledge about padding is used\n      for pad_remover(efficiency) and to mask out padding in convolutional\n      layers.\n    save_weights_to: an optional dictionary to capture attention weights\n      for visualization; the weights tensor will be appended there under\n      a string key created from the variable scope (including name).\n    make_image_summary: Whether to make an attention image summary.\n    losses: optional list onto which to append extra training losses\n    attn_bias_for_padding: Padded attention bias in case a unidirectional\n      encoder is being used where future attention is masked.\n\n  Returns:\n    y: a Tensors\n  \"\"\"", "\n", "x", "=", "encoder_input", "\n", "attention_dropout_broadcast_dims", "=", "(", "\n", "common_layers", ".", "comma_separated_string_to_integer_list", "(", "\n", "getattr", "(", "hparams", ",", "\"attention_dropout_broadcast_dims\"", ",", "\"\"", ")", ")", ")", "\n", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_NUM_HIDDEN_LAYERS", ",", "\n", "value", "=", "hparams", ".", "num_encoder_layers", "or", "hparams", ".", "num_hidden_layers", ")", "\n", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_ATTENTION_DROPOUT", ",", "\n", "value", "=", "hparams", ".", "attention_dropout", ")", "\n", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_ATTENTION_DENSE", ",", "\n", "value", "=", "{", "\n", "\"use_bias\"", ":", "\"false\"", ",", "\n", "\"num_heads\"", ":", "hparams", ".", "num_heads", ",", "\n", "\"hidden_size\"", ":", "hparams", ".", "hidden_size", "\n", "}", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "    ", "if", "nonpadding", "is", "not", "None", ":", "\n", "      ", "padding", "=", "1.0", "-", "nonpadding", "\n", "", "else", ":", "\n", "      ", "attention_bias", "=", "encoder_self_attention_bias", "\n", "if", "attn_bias_for_padding", "is", "not", "None", ":", "\n", "        ", "attention_bias", "=", "attn_bias_for_padding", "\n", "", "padding", "=", "common_attention", ".", "attention_bias_to_padding", "(", "attention_bias", ")", "\n", "nonpadding", "=", "1.0", "-", "padding", "\n", "", "pad_remover", "=", "None", "\n", "if", "hparams", ".", "use_pad_remover", "and", "not", "common_layers", ".", "is_xla_compiled", "(", ")", ":", "\n", "      ", "pad_remover", "=", "expert_utils", ".", "PadRemover", "(", "padding", ")", "\n", "", "for", "layer", "in", "range", "(", "hparams", ".", "num_encoder_layers", "or", "hparams", ".", "num_hidden_layers", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "\"layer_%d\"", "%", "layer", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"self_attention\"", ")", ":", "\n", "            ", "is_training", "=", "hparams", ".", "mode", "==", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", "\n", "y", "=", "common_attention", ".", "multihead_attention", "(", "\n", "common_layers", ".", "layer_preprocess", "(", "x", ",", "hparams", ")", ",", "\n", "None", ",", "\n", "encoder_self_attention_bias", ",", "\n", "hparams", ".", "attention_key_channels", "or", "hparams", ".", "hidden_size", ",", "\n", "hparams", ".", "attention_value_channels", "or", "hparams", ".", "hidden_size", ",", "\n", "hparams", ".", "hidden_size", ",", "\n", "hparams", ".", "num_heads", ",", "\n", "hparams", ".", "attention_dropout", ",", "\n", "attention_type", "=", "hparams", ".", "self_attention_type", ",", "\n", "max_relative_position", "=", "hparams", ".", "max_relative_position", ",", "\n", "heads_share_relative_embedding", "=", "(", "\n", "hparams", ".", "heads_share_relative_embedding", ")", ",", "\n", "add_relative_to_values", "=", "hparams", ".", "add_relative_to_values", ",", "\n", "save_weights_to", "=", "save_weights_to", ",", "\n", "make_image_summary", "=", "make_image_summary", ",", "\n", "dropout_broadcast_dims", "=", "attention_dropout_broadcast_dims", ",", "\n", "max_length", "=", "hparams", ".", "get", "(", "\"max_length\"", ")", ",", "\n", "vars_3d", "=", "hparams", ".", "get", "(", "\"attention_variables_3d\"", ")", ",", "\n", "is_training", "=", "is_training", ")", "\n", "x", "=", "common_layers", ".", "layer_postprocess", "(", "x", ",", "y", ",", "hparams", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"ffn\"", ")", ":", "\n", "            ", "y", "=", "transformer_ffn_layer", "(", "\n", "common_layers", ".", "layer_preprocess", "(", "x", ",", "hparams", ")", ",", "\n", "hparams", ",", "\n", "pad_remover", ",", "\n", "conv_padding", "=", "\"SAME\"", ",", "\n", "nonpadding_mask", "=", "nonpadding", ",", "\n", "losses", "=", "losses", ")", "\n", "x", "=", "common_layers", ".", "layer_postprocess", "(", "x", ",", "y", ",", "hparams", ")", "\n", "\n", "# if normalization is done in layer_preprocess, then it should also be done", "\n", "# on the output, since the output can grow very large, being the sum of", "\n", "# a whole stack of unnormalized layer outputs.", "\n", "", "", "", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_NORM", ",", "\n", "value", "=", "{", "\"hidden_size\"", ":", "hparams", ".", "hidden_size", "}", ")", "\n", "return", "common_layers", ".", "layer_preprocess", "(", "x", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_transformer.quaternion_dense_relu_dense": [[208, 245], ["quarternion_ffn_3d", "quarternion_ffn_3d", "tensor2tensor.layers.common_layers.dropout_with_broadcast_dims", "layer_name.format", "layer_name.format"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_ffn_3d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.qlib.quarternion_ffn_3d"], ["", "", "def", "quaternion_dense_relu_dense", "(", "inputs", ",", "\n", "filter_size", ",", "\n", "output_size", ",", "\n", "output_activation", "=", "None", ",", "\n", "dropout", "=", "0.0", ",", "\n", "dropout_broadcast_dims", "=", "None", ",", "\n", "layer_collection", "=", "None", ",", "\n", "name", "=", "None", ")", ":", "\n", "  ", "\"\"\"Quaternion Hidden layer with RELU activation followed by linear projection.\"\"\"", "\n", "# layer_name is appended with \"conv1\" or \"conv2\" in this method only for", "\n", "# historical reasons. These are in fact dense layers.", "\n", "layer_name", "=", "\"%s_{}\"", "%", "name", "if", "name", "else", "\"{}\"", "\n", "# h = dense(", "\n", "#     inputs,", "\n", "#     filter_size,", "\n", "#     use_bias=True,", "\n", "#     activation=tf.nn.relu,", "\n", "#     layer_collection=layer_collection,", "\n", "#     name=layer_name.format(\"conv1\"))", "\n", "h", "=", "quarternion_ffn_3d", "(", "inputs", ",", "filter_size", ",", "\n", "name", "=", "layer_name", ".", "format", "(", "'qconv1'", ")", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "\n", "if", "dropout", "!=", "0.0", ":", "\n", "    ", "h", "=", "common_layers", ".", "dropout_with_broadcast_dims", "(", "\n", "h", ",", "1.0", "-", "dropout", ",", "broadcast_dims", "=", "dropout_broadcast_dims", ")", "\n", "# o = dense(", "\n", "#     h,", "\n", "#     output_size,", "\n", "#     activation=output_activation,", "\n", "#     use_bias=True,", "\n", "#     layer_collection=layer_collection,", "\n", "#     name=layer_name.format(\"conv2\"))", "\n", "", "o", "=", "quarternion_ffn_3d", "(", "h", ",", "output_size", ",", "\n", "name", "=", "layer_name", ".", "format", "(", "'qconv2'", ")", ",", "\n", "activation", "=", "output_activation", ")", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_transformer.transformer_ffn_layer": [[246, 416], ["tensor2tensor.layers.common_layers.comma_separated_string_to_integer_list", "getattr", "tensor2tensor.utils.mlperf_log.transformer_print", "tensor2tensor.utils.mlperf_log.transformer_print", "tensor2tensor.utils.mlperf_log.transformer_print", "quaternion_transformer.quaternion_dense_relu_dense", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensor2tensor.utils.mlperf_log.transformer_print", "tensor2tensor.utils.mlperf_log.transformer_print", "tensor2tensor.utils.mlperf_log.transformer_print", "tensor2tensor.layers.common_layers.dense_relu_dense", "tensorflow.concat", "pad_remover.remove", "pad_remover.restore", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensor2tensor.layers.common_layers.conv_relu_conv", "tensorflow.squeeze", "tensorflow.concat", "pad_remover.remove", "pad_remover.restore", "layers.quaternion_attention.parameter_attention", "tensorflow.squeeze", "tensor2tensor.layers.common_layers.conv_hidden_relu", "tensor2tensor.layers.common_layers.sru", "tensor2tensor.utils.expert_utils.local_moe_tpu", "tensor2tensor.utils.expert_utils.local_moe", "losses.append", "tensor2tensor.utils.expert_utils.ffn_expert_fn"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_transformer.quaternion_dense_relu_dense", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.parameter_attention"], ["", "def", "transformer_ffn_layer", "(", "x", ",", "\n", "hparams", ",", "\n", "pad_remover", "=", "None", ",", "\n", "conv_padding", "=", "\"LEFT\"", ",", "\n", "nonpadding_mask", "=", "None", ",", "\n", "losses", "=", "None", ",", "\n", "cache", "=", "None", ",", "\n", "decode_loop_step", "=", "None", ",", "\n", "readout_filter_size", "=", "0", ")", ":", "\n", "  ", "\"\"\"Feed-forward layer in the transformer.\n\n  Args:\n    x: a Tensor of shape [batch_size, length, hparams.hidden_size]\n    hparams: hyperparameters for model\n    pad_remover: an expert_utils.PadRemover object tracking the padding\n      positions. If provided, when using convolutional settings, the padding\n      is removed before applying the convolution, and restored afterward. This\n      can give a significant speedup.\n    conv_padding: a string - either \"LEFT\" or \"SAME\".\n    nonpadding_mask: an optional Tensor with shape [batch_size, length].\n      needed for convolutional layers with \"SAME\" padding.\n      Contains 1.0 in positions corresponding to nonpadding.\n    losses: optional list onto which to append extra training losses\n    cache: dict, containing tensors which are the results of previous\n        attentions, used for fast decoding.\n    decode_loop_step: An integer, step number of the decoding loop.\n        Only used for inference on TPU.\n    readout_filter_size: if it's greater than 0, then it will be used instead of\n      filter_size\n\n\n  Returns:\n    a Tensor of shape [batch_size, length, hparams.hidden_size]\n\n  Raises:\n    ValueError: If losses arg is None, but layer generates extra losses.\n  \"\"\"", "\n", "ffn_layer", "=", "hparams", ".", "ffn_layer", "\n", "relu_dropout_broadcast_dims", "=", "(", "\n", "common_layers", ".", "comma_separated_string_to_integer_list", "(", "\n", "getattr", "(", "hparams", ",", "\"relu_dropout_broadcast_dims\"", ",", "\"\"", ")", ")", ")", "\n", "if", "ffn_layer", "==", "\"conv_hidden_relu\"", ":", "\n", "# Backwards compatibility", "\n", "    ", "ffn_layer", "=", "\"dense_relu_dense\"", "\n", "", "if", "ffn_layer", "==", "\"dense_relu_dense\"", ":", "\n", "# In simple convolution mode, use `pad_remover` to speed up processing.", "\n", "    ", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_FFN_FILTER_DENSE", ",", "\n", "value", "=", "{", "\n", "\"filter_size\"", ":", "hparams", ".", "filter_size", ",", "\n", "\"use_bias\"", ":", "\"True\"", ",", "\n", "\"activation\"", ":", "mlperf_log", ".", "RELU", "\n", "}", ")", "\n", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_FFN_OUTPUT_DENSE", ",", "\n", "value", "=", "{", "\n", "\"hidden_size\"", ":", "hparams", ".", "hidden_size", ",", "\n", "\"use_bias\"", ":", "\"True\"", ",", "\n", "}", ")", "\n", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_RELU_DROPOUT", ",", "value", "=", "hparams", ".", "relu_dropout", ")", "\n", "if", "pad_remover", ":", "\n", "      ", "original_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "# Collapse `x` across examples, and remove padding positions.", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "concat", "(", "[", "[", "-", "1", "]", ",", "original_shape", "[", "2", ":", "]", "]", ",", "axis", "=", "0", ")", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "pad_remover", ".", "remove", "(", "x", ")", ",", "axis", "=", "0", ")", "\n", "", "conv_output", "=", "quaternion_dense_relu_dense", "(", "\n", "x", ",", "\n", "hparams", ".", "filter_size", ",", "\n", "hparams", ".", "hidden_size", ",", "\n", "dropout", "=", "hparams", ".", "relu_dropout", ",", "\n", "dropout_broadcast_dims", "=", "relu_dropout_broadcast_dims", ")", "\n", "if", "pad_remover", ":", "\n", "# Restore `conv_output` to the original shape of `x`, including padding.", "\n", "      ", "conv_output", "=", "tf", ".", "reshape", "(", "\n", "pad_remover", ".", "restore", "(", "tf", ".", "squeeze", "(", "conv_output", ",", "axis", "=", "0", ")", ")", ",", "original_shape", ")", "\n", "", "return", "conv_output", "\n", "", "elif", "ffn_layer", "==", "\"raw_dense_relu_dense\"", ":", "\n", "# In simple convolution mode, use `pad_remover` to speed up processing.", "\n", "    ", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_FFN_FILTER_DENSE", ",", "\n", "value", "=", "{", "\n", "\"filter_size\"", ":", "hparams", ".", "filter_size", ",", "\n", "\"use_bias\"", ":", "\"True\"", ",", "\n", "\"activation\"", ":", "mlperf_log", ".", "RELU", "\n", "}", ")", "\n", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_FFN_OUTPUT_DENSE", ",", "\n", "value", "=", "{", "\n", "\"hidden_size\"", ":", "hparams", ".", "hidden_size", ",", "\n", "\"use_bias\"", ":", "\"True\"", ",", "\n", "}", ")", "\n", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_RELU_DROPOUT", ",", "value", "=", "hparams", ".", "relu_dropout", ")", "\n", "if", "pad_remover", ":", "\n", "      ", "original_shape", "=", "common_layers", ".", "shape_list", "(", "x", ")", "\n", "# Collapse `x` across examples, and remove padding positions.", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "tf", ".", "concat", "(", "[", "[", "-", "1", "]", ",", "original_shape", "[", "2", ":", "]", "]", ",", "axis", "=", "0", ")", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "pad_remover", ".", "remove", "(", "x", ")", ",", "axis", "=", "0", ")", "\n", "", "conv_output", "=", "common_layers", ".", "dense_relu_dense", "(", "\n", "x", ",", "\n", "hparams", ".", "filter_size", ",", "\n", "hparams", ".", "hidden_size", ",", "\n", "dropout", "=", "hparams", ".", "relu_dropout", ",", "\n", "dropout_broadcast_dims", "=", "relu_dropout_broadcast_dims", ")", "\n", "if", "pad_remover", ":", "\n", "# Restore `conv_output` to the original shape of `x`, including padding.", "\n", "      ", "conv_output", "=", "tf", ".", "reshape", "(", "\n", "pad_remover", ".", "restore", "(", "tf", ".", "squeeze", "(", "conv_output", ",", "axis", "=", "0", ")", ")", ",", "original_shape", ")", "\n", "", "return", "conv_output", "\n", "", "elif", "ffn_layer", "==", "\"conv_relu_conv\"", ":", "\n", "    ", "return", "common_layers", ".", "conv_relu_conv", "(", "\n", "x", ",", "\n", "readout_filter_size", "or", "hparams", ".", "filter_size", ",", "\n", "hparams", ".", "hidden_size", ",", "\n", "first_kernel_size", "=", "hparams", ".", "conv_first_kernel", ",", "\n", "second_kernel_size", "=", "1", ",", "\n", "padding", "=", "conv_padding", ",", "\n", "nonpadding_mask", "=", "nonpadding_mask", ",", "\n", "dropout", "=", "hparams", ".", "relu_dropout", ",", "\n", "cache", "=", "cache", ",", "\n", "decode_loop_step", "=", "decode_loop_step", ")", "\n", "", "elif", "ffn_layer", "==", "\"parameter_attention\"", ":", "\n", "    ", "return", "common_attention", ".", "parameter_attention", "(", "\n", "x", ",", "hparams", ".", "parameter_attention_key_channels", "or", "hparams", ".", "hidden_size", ",", "\n", "hparams", ".", "parameter_attention_value_channels", "or", "hparams", ".", "hidden_size", ",", "\n", "hparams", ".", "hidden_size", ",", "readout_filter_size", "or", "hparams", ".", "filter_size", ",", "\n", "hparams", ".", "num_heads", ",", "\n", "hparams", ".", "attention_dropout", ")", "\n", "", "elif", "ffn_layer", "==", "\"conv_hidden_relu_with_sepconv\"", ":", "\n", "    ", "return", "common_layers", ".", "conv_hidden_relu", "(", "\n", "x", ",", "\n", "readout_filter_size", "or", "hparams", ".", "filter_size", ",", "\n", "hparams", ".", "hidden_size", ",", "\n", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "\n", "second_kernel_size", "=", "(", "31", ",", "1", ")", ",", "\n", "padding", "=", "\"LEFT\"", ",", "\n", "dropout", "=", "hparams", ".", "relu_dropout", ")", "\n", "", "elif", "ffn_layer", "==", "\"sru\"", ":", "\n", "    ", "return", "common_layers", ".", "sru", "(", "x", ")", "\n", "", "elif", "ffn_layer", "==", "\"local_moe_tpu\"", ":", "\n", "    ", "overhead", "=", "(", "\n", "hparams", ".", "moe_overhead_train", "\n", "if", "hparams", ".", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", "else", "\n", "hparams", ".", "moe_overhead_eval", ")", "\n", "ret", ",", "loss", "=", "expert_utils", ".", "local_moe_tpu", "(", "\n", "x", ",", "\n", "hparams", ".", "filter_size", "//", "2", ",", "\n", "hparams", ".", "hidden_size", ",", "\n", "hparams", ".", "moe_num_experts", ",", "\n", "overhead", "=", "overhead", ",", "\n", "loss_coef", "=", "hparams", ".", "moe_loss_coef", ")", "\n", "", "elif", "ffn_layer", "==", "\"local_moe\"", ":", "\n", "    ", "overhead", "=", "(", "\n", "hparams", ".", "moe_overhead_train", "\n", "if", "hparams", ".", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", "else", "\n", "hparams", ".", "moe_overhead_eval", ")", "\n", "ret", ",", "loss", "=", "expert_utils", ".", "local_moe", "(", "\n", "x", ",", "\n", "True", ",", "\n", "expert_utils", ".", "ffn_expert_fn", "(", "hparams", ".", "hidden_size", ",", "[", "hparams", ".", "filter_size", "]", ",", "\n", "hparams", ".", "hidden_size", ")", ",", "\n", "hparams", ".", "moe_num_experts", ",", "\n", "k", "=", "hparams", ".", "moe_k", ",", "\n", "hparams", "=", "hparams", ")", "\n", "losses", ".", "append", "(", "loss", ")", "\n", "return", "ret", "\n", "", "else", ":", "\n", "    ", "assert", "ffn_layer", "==", "\"none\"", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer.__init__": [[63, 66], ["tensor2tensor.utils.t2t_model.T2TModel.__init__", "dict"], "methods", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "QuaternionTransformer", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "attention_weights", "=", "dict", "(", ")", "# For visualizing attention heads.", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer.encode": [[67, 109], ["tensor2tensor.layers.common_layers.flatten4d3d", "transformer_prepare_encoder", "tensor2tensor.utils.mlperf_log.transformer_print", "tensorflow.nn.dropout", "transformer_encoder", "quaternion.features_to_nonpadding", "tensor2tensor.layers.common_layers.is_xla_compiled"], "methods", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_transformer.transformer_prepare_encoder", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_transformer.transformer_encoder", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.features_to_nonpadding"], ["", "def", "encode", "(", "self", ",", "inputs", ",", "target_space", ",", "hparams", ",", "features", "=", "None", ",", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Encode transformer inputs.\n\n    Args:\n      inputs: Transformer inputs [batch_size, input_length, 1, hidden_dim] which\n        will be flattened along the two spatial dimensions.\n      target_space: scalar, target space ID.\n      hparams: hyperparameters for model.\n      features: optionally pass the entire features dictionary as well.\n        This is needed now for \"packed\" datasets.\n      losses: optional list onto which to append extra training losses\n\n    Returns:\n      Tuple of:\n          encoder_output: Encoder representation.\n              [batch_size, input_length, hidden_dim]\n          encoder_decoder_attention_bias: Bias and mask weights for\n              encoder-decoder attention. [batch_size, input_length]\n    \"\"\"", "\n", "inputs", "=", "common_layers", ".", "flatten4d3d", "(", "inputs", ")", "\n", "\n", "encoder_input", ",", "self_attention_bias", ",", "encoder_decoder_attention_bias", "=", "(", "\n", "transformer_prepare_encoder", "(", "\n", "inputs", ",", "target_space", ",", "hparams", ",", "features", "=", "features", ")", ")", "\n", "\n", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_LAYER_POSTPROCESS_DROPOUT", ",", "\n", "value", "=", "hparams", ".", "layer_prepostprocess_dropout", ")", "\n", "\n", "encoder_input", "=", "tf", ".", "nn", ".", "dropout", "(", "encoder_input", ",", "\n", "1.0", "-", "hparams", ".", "layer_prepostprocess_dropout", ")", "\n", "\n", "encoder_output", "=", "transformer_encoder", "(", "\n", "encoder_input", ",", "\n", "self_attention_bias", ",", "\n", "hparams", ",", "\n", "nonpadding", "=", "features_to_nonpadding", "(", "features", ",", "\"inputs\"", ")", ",", "\n", "save_weights_to", "=", "self", ".", "attention_weights", ",", "\n", "make_image_summary", "=", "not", "common_layers", ".", "is_xla_compiled", "(", ")", ",", "\n", "losses", "=", "losses", ")", "\n", "\n", "return", "encoder_output", ",", "encoder_decoder_attention_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer.decode": [[110, 168], ["tensor2tensor.utils.mlperf_log.transformer_print", "tensorflow.nn.dropout", "quaternion.transformer_decoder", "tensor2tensor.layers.common_layers.is_xla_compiled", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.transformer_decoder"], ["", "def", "decode", "(", "self", ",", "\n", "decoder_input", ",", "\n", "encoder_output", ",", "\n", "encoder_decoder_attention_bias", ",", "\n", "decoder_self_attention_bias", ",", "\n", "hparams", ",", "\n", "cache", "=", "None", ",", "\n", "decode_loop_step", "=", "None", ",", "\n", "nonpadding", "=", "None", ",", "\n", "losses", "=", "None", ")", ":", "\n", "    ", "\"\"\"Decode Transformer outputs from encoder representation.\n\n    Args:\n      decoder_input: inputs to bottom of the model.\n          [batch_size, decoder_length, hidden_dim]\n      encoder_output: Encoder representation.\n          [batch_size, input_length, hidden_dim]\n      encoder_decoder_attention_bias: Bias and mask weights for\n          encoder-decoder attention. [batch_size, input_length]\n      decoder_self_attention_bias: Bias and mask weights for decoder\n          self-attention. [batch_size, decoder_length]\n      hparams: hyperparameters for model.\n      cache: dict, containing tensors which are the results of previous\n          attentions, used for fast decoding.\n      decode_loop_step: An integer, step number of the decoding loop.\n          Only used for inference on TPU.\n      nonpadding: optional Tensor with shape [batch_size, decoder_length]\n      losses: optional list onto which to append extra training losses\n\n    Returns:\n      Final decoder representation. [batch_size, decoder_length, hidden_dim]\n    \"\"\"", "\n", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_LAYER_POSTPROCESS_DROPOUT", ",", "\n", "value", "=", "hparams", ".", "layer_prepostprocess_dropout", ")", "\n", "decoder_input", "=", "tf", ".", "nn", ".", "dropout", "(", "decoder_input", ",", "\n", "1.0", "-", "hparams", ".", "layer_prepostprocess_dropout", ")", "\n", "\n", "decoder_output", "=", "transformer_decoder", "(", "\n", "decoder_input", ",", "\n", "encoder_output", ",", "\n", "decoder_self_attention_bias", ",", "\n", "encoder_decoder_attention_bias", ",", "\n", "hparams", ",", "\n", "cache", "=", "cache", ",", "\n", "decode_loop_step", "=", "decode_loop_step", ",", "\n", "nonpadding", "=", "nonpadding", ",", "\n", "save_weights_to", "=", "self", ".", "attention_weights", ",", "\n", "losses", "=", "losses", ")", "\n", "\n", "if", "(", "common_layers", ".", "is_xla_compiled", "(", ")", "and", "\n", "hparams", ".", "mode", "==", "tf", ".", "estimator", ".", "ModeKeys", ".", "TRAIN", ")", ":", "\n", "# TPU does not react kindly to extra dimensions.", "\n", "# TODO(noam): remove this once TPU is more forgiving of extra dims.", "\n", "      ", "return", "decoder_output", "\n", "", "else", ":", "\n", "# Expand since t2t expects 4d tensors.", "\n", "      ", "return", "tf", ".", "expand_dims", "(", "decoder_output", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer.body": [[169, 222], ["tensor2tensor.layers.common_layers.shape_list", "tensor2tensor.layers.common_layers.flatten4d3d", "quaternion.transformer_prepare_decoder", "quaternion.QuaternionTransformer.decode", "features.get", "tensorflow.reshape", "quaternion.QuaternionTransformer.encode", "layers.quaternion_attention.encoder_decoder_attention_loss", "quaternion.features_to_nonpadding", "tensorflow.add_n"], "methods", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.transformer_prepare_decoder", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer.decode", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer.encode", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.encoder_decoder_attention_loss", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.features_to_nonpadding"], ["", "", "def", "body", "(", "self", ",", "features", ")", ":", "\n", "    ", "\"\"\"Transformer main model_fn.\n\n    Args:\n      features: Map of features to the model. Should contain the following:\n          \"inputs\": Transformer inputs.\n              [batch_size, input_length, 1, hidden_dim].\n          \"targets\": Target decoder outputs.\n              [batch_size, decoder_length, 1, hidden_dim]\n          \"target_space_id\": A scalar int from data_generators.problem.SpaceID.\n\n    Returns:\n      Final decoder representation. [batch_size, decoder_length, hidden_dim]\n    \"\"\"", "\n", "hparams", "=", "self", ".", "_hparams", "\n", "\n", "losses", "=", "[", "]", "\n", "\n", "if", "self", ".", "has_input", ":", "\n", "      ", "inputs", "=", "features", "[", "\"inputs\"", "]", "\n", "target_space", "=", "features", "[", "\"target_space_id\"", "]", "\n", "encoder_output", ",", "encoder_decoder_attention_bias", "=", "self", ".", "encode", "(", "\n", "inputs", ",", "target_space", ",", "hparams", ",", "features", "=", "features", ",", "losses", "=", "losses", ")", "\n", "", "else", ":", "\n", "      ", "encoder_output", ",", "encoder_decoder_attention_bias", "=", "(", "None", ",", "None", ")", "\n", "\n", "", "targets", "=", "features", "[", "\"targets\"", "]", "\n", "targets_shape", "=", "common_layers", ".", "shape_list", "(", "targets", ")", "\n", "targets", "=", "common_layers", ".", "flatten4d3d", "(", "targets", ")", "\n", "decoder_input", ",", "decoder_self_attention_bias", "=", "transformer_prepare_decoder", "(", "\n", "targets", ",", "hparams", ",", "features", "=", "features", ")", "\n", "decoder_output", "=", "self", ".", "decode", "(", "\n", "decoder_input", ",", "\n", "encoder_output", ",", "\n", "encoder_decoder_attention_bias", ",", "\n", "decoder_self_attention_bias", ",", "\n", "hparams", ",", "\n", "nonpadding", "=", "features_to_nonpadding", "(", "features", ",", "\"targets\"", ")", ",", "\n", "losses", "=", "losses", ")", "\n", "\n", "expected_attentions", "=", "features", ".", "get", "(", "\"expected_attentions\"", ")", "\n", "if", "expected_attentions", "is", "not", "None", ":", "\n", "      ", "attention_loss", "=", "common_attention", ".", "encoder_decoder_attention_loss", "(", "\n", "expected_attentions", ",", "self", ".", "attention_weights", ",", "\n", "hparams", ".", "expected_attention_loss_type", ",", "\n", "hparams", ".", "expected_attention_loss_multiplier", ")", "\n", "return", "decoder_output", ",", "{", "\"attention_loss\"", ":", "attention_loss", "}", "\n", "\n", "", "ret", "=", "tf", ".", "reshape", "(", "decoder_output", ",", "targets_shape", ")", "\n", "if", "losses", ":", "\n", "      ", "return", "ret", ",", "{", "\"extra_loss\"", ":", "tf", ".", "add_n", "(", "losses", ")", "}", "\n", "", "else", ":", "\n", "      ", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer._greedy_infer": [[223, 251], ["super()._greedy_infer", "tensorflow.variable_scope", "quaternion.QuaternionTransformer._fast_decode", "quaternion.QuaternionTransformer._fast_decode_tpu"], "methods", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer._greedy_infer", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer._fast_decode", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer._fast_decode_tpu"], ["", "", "def", "_greedy_infer", "(", "self", ",", "features", ",", "decode_length", ",", "use_tpu", "=", "False", ")", ":", "\n", "    ", "\"\"\"Fast version of greedy decoding.\n\n    Args:\n      features: an map of string to `Tensor`\n      decode_length: an integer.  How many additional timesteps to decode.\n      use_tpu: A bool. Whether to build the inference graph for TPU.\n\n    Returns:\n      A dict of decoding results {\n          \"outputs\": integer `Tensor` of decoded ids of shape\n              [batch_size, <= decode_length] if beam_size == 1 or\n              [batch_size, top_beams, <= decode_length]\n          \"scores\": decoding log probs from the beam search,\n              None if using greedy decoding (beam_size=1)\n      }\n\n    Raises:\n      NotImplementedError: If there are multiple data shards.\n    \"\"\"", "\n", "# For real-valued modalities use the slow decode path for now.", "\n", "if", "(", "self", ".", "_target_modality_is_real", "or", "\n", "self", ".", "_hparams", ".", "self_attention_type", "!=", "\"dot_product\"", ")", ":", "\n", "      ", "return", "super", "(", "Transformer", ",", "self", ")", ".", "_greedy_infer", "(", "features", ",", "decode_length", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "      ", "if", "use_tpu", ":", "\n", "        ", "return", "self", ".", "_fast_decode_tpu", "(", "features", ",", "decode_length", ")", "\n", "", "return", "self", ".", "_fast_decode", "(", "features", ",", "decode_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer._beam_decode": [[252, 293], ["quaternion.QuaternionTransformer._beam_decode_slow", "tensorflow.variable_scope", "quaternion.QuaternionTransformer._fast_decode", "quaternion.QuaternionTransformer._fast_decode_tpu"], "methods", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer._fast_decode", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer._fast_decode_tpu"], ["", "", "def", "_beam_decode", "(", "self", ",", "\n", "features", ",", "\n", "decode_length", ",", "\n", "beam_size", ",", "\n", "top_beams", ",", "\n", "alpha", ",", "\n", "use_tpu", "=", "False", ")", ":", "\n", "    ", "\"\"\"Beam search decoding.\n\n    Args:\n      features: an map of string to `Tensor`\n      decode_length: an integer.  How many additional timesteps to decode.\n      beam_size: number of beams.\n      top_beams: an integer. How many of the beams to return.\n      alpha: Float that controls the length penalty. larger the alpha, stronger\n        the preference for longer translations.\n      use_tpu: A bool, whether to do beam decode on TPU.\n\n    Returns:\n      A dict of decoding results {\n          \"outputs\": integer `Tensor` of decoded ids of shape\n              [batch_size, <= decode_length] if beam_size == 1 or\n              [batch_size, top_beams, <= decode_length]\n          \"scores\": decoding log probs from the beam search,\n              None if using greedy decoding (beam_size=1)\n      }\n    \"\"\"", "\n", "if", "(", "self", ".", "_hparams", ".", "self_attention_type", "not", "in", "[", "\"dot_product\"", ",", "\n", "\"dot_product_relative\"", "]", ")", ":", "\n", "# Caching is not guaranteed to work with attention types other than", "\n", "# dot_product.", "\n", "# TODO(petershaw): Support fast decoding when using relative", "\n", "# position representations, i.e. \"dot_product_relative\" attention.", "\n", "      ", "return", "self", ".", "_beam_decode_slow", "(", "features", ",", "decode_length", ",", "beam_size", ",", "\n", "top_beams", ",", "alpha", ",", "use_tpu", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "      ", "if", "use_tpu", ":", "\n", "        ", "return", "self", ".", "_fast_decode_tpu", "(", "\n", "features", ",", "decode_length", ",", "beam_size", ",", "top_beams", ",", "alpha", ")", "\n", "", "return", "self", ".", "_fast_decode", "(", "\n", "features", ",", "decode_length", ",", "beam_size", ",", "top_beams", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer._fast_decode_tpu": [[294, 511], ["layers.quaternion_attention.attention_bias_lower_triangle", "quaternion.fast_decode_tpu", "NotImplementedError", "NotImplementedError", "tensorflow.expand_dims", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.reshape", "features.get", "tensor2tensor.layers.common_layers.expand_squeeze_to_nd", "tensorflow.to_int64", "tensor2tensor.layers.common_layers.shape_list", "layers.quaternion_attention.get_timing_signal_1d", "tensor2tensor.layers.common_layers.flatten4d3d", "tensorflow.cond", "layers.quaternion_attention.attention_bias_proximal", "tensorflow.expand_dims", "quaternion.QuaternionTransformer._fast_decode_tpu.preprocess_targets"], "methods", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_lower_triangle", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.fast_decode_tpu", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_timing_signal_1d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_proximal"], ["", "", "def", "_fast_decode_tpu", "(", "self", ",", "\n", "features", ",", "\n", "decode_length", ",", "\n", "beam_size", "=", "1", ",", "\n", "top_beams", "=", "1", ",", "\n", "alpha", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Fast decoding.\n\n    Implements both greedy and beam search decoding on TPU, uses beam search\n    iff beam_size > 1, otherwise beam search related arguments are ignored.\n\n    Args:\n      features: A map of string to model features.\n      decode_length: An integer, how many additional timesteps to decode.\n      beam_size: An integer, number of beams.\n      top_beams: An integer, how many of the beams to return.\n      alpha: A float that controls the length penalty. Larger the alpha,\n        stronger the preference for longer translations.\n\n    Returns:\n      A dict of decoding results {\n          \"outputs\": integer `Tensor` of decoded ids of shape\n              [batch_size, <= decode_length] if beam_size == 1 or\n              [batch_size, top_beams, <= decode_length]\n          \"scores\": decoding log probs from the beam search,\n              None if using greedy decoding (beam_size=1)\n      }.\n\n    Raises:\n      NotImplementedError: If there are multiple data shards.\n    \"\"\"", "\n", "if", "self", ".", "_num_datashards", "!=", "1", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\"Fast decoding only supports a single shard.\"", ")", "\n", "", "if", "\"targets_segmentation\"", "in", "features", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\n", "\"Decoding not supported on packed datasets \"", "\n", "\" If you want to decode from a dataset, use the non-packed version\"", "\n", "\" of the dataset when decoding.\"", ")", "\n", "", "dp", "=", "self", ".", "_data_parallelism", "\n", "hparams", "=", "self", ".", "_hparams", "\n", "target_modality", "=", "self", ".", "_problem_hparams", ".", "modality", "[", "\"targets\"", "]", "\n", "\n", "if", "self", ".", "has_input", ":", "\n", "      ", "inputs", "=", "features", "[", "\"inputs\"", "]", "\n", "if", "target_modality", ".", "is_class_modality", ":", "\n", "        ", "decode_length", "=", "1", "\n", "", "else", ":", "\n", "        ", "decode_length", "=", "(", "\n", "common_layers", ".", "shape_list", "(", "inputs", ")", "[", "1", "]", "+", "features", ".", "get", "(", "\n", "\"decode_length\"", ",", "decode_length", ")", ")", "\n", "\n", "# TODO(llion): Clean up this reshaping logic.", "\n", "", "inputs", "=", "tf", ".", "expand_dims", "(", "inputs", ",", "axis", "=", "1", ")", "\n", "if", "len", "(", "inputs", ".", "shape", ")", "<", "5", ":", "\n", "        ", "inputs", "=", "tf", ".", "expand_dims", "(", "inputs", ",", "axis", "=", "4", ")", "\n", "", "s", "=", "common_layers", ".", "shape_list", "(", "inputs", ")", "\n", "batch_size", "=", "s", "[", "0", "]", "\n", "inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "s", "[", "0", "]", "*", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ",", "s", "[", "4", "]", "]", ")", "\n", "# _shard_features called to ensure that the variable names match", "\n", "inputs", "=", "self", ".", "_shard_features", "(", "{", "\"inputs\"", ":", "inputs", "}", ")", "[", "\"inputs\"", "]", "\n", "input_modality", "=", "self", ".", "_problem_hparams", ".", "modality", "[", "\"inputs\"", "]", "\n", "with", "tf", ".", "variable_scope", "(", "input_modality", ".", "name", ")", ":", "\n", "        ", "inputs", "=", "input_modality", ".", "bottom_sharded", "(", "inputs", ",", "dp", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"body\"", ")", ":", "\n", "        ", "encoder_output", ",", "encoder_decoder_attention_bias", "=", "dp", "(", "\n", "self", ".", "encode", ",", "\n", "inputs", ",", "\n", "features", "[", "\"target_space_id\"", "]", ",", "\n", "hparams", ",", "\n", "features", "=", "features", ")", "\n", "", "encoder_output", "=", "encoder_output", "[", "0", "]", "\n", "encoder_decoder_attention_bias", "=", "encoder_decoder_attention_bias", "[", "0", "]", "\n", "partial_targets", "=", "None", "\n", "", "else", ":", "\n", "# The problem has no inputs.", "\n", "      ", "encoder_output", "=", "None", "\n", "encoder_decoder_attention_bias", "=", "None", "\n", "\n", "# Prepare partial targets.", "\n", "# In either features[\"inputs\"] or features[\"targets\"].", "\n", "# We force the outputs to begin with these sequences.", "\n", "partial_targets", "=", "features", ".", "get", "(", "\"inputs\"", ")", "\n", "if", "partial_targets", "is", "None", ":", "\n", "        ", "partial_targets", "=", "features", "[", "\"targets\"", "]", "\n", "", "assert", "partial_targets", "is", "not", "None", "\n", "partial_targets", "=", "common_layers", ".", "expand_squeeze_to_nd", "(", "partial_targets", ",", "2", ")", "\n", "partial_targets", "=", "tf", ".", "to_int64", "(", "partial_targets", ")", "\n", "partial_targets_shape", "=", "common_layers", ".", "shape_list", "(", "partial_targets", ")", "\n", "partial_targets_length", "=", "partial_targets_shape", "[", "1", "]", "\n", "decode_length", "=", "(", "\n", "partial_targets_length", "+", "features", ".", "get", "(", "\"decode_length\"", ",", "decode_length", ")", ")", "\n", "batch_size", "=", "partial_targets_shape", "[", "0", "]", "\n", "\n", "", "if", "hparams", ".", "pos", "==", "\"timing\"", ":", "\n", "      ", "positional_encoding", "=", "common_attention", ".", "get_timing_signal_1d", "(", "\n", "decode_length", "+", "1", ",", "hparams", ".", "hidden_size", ")", "\n", "", "elif", "hparams", ".", "pos", "==", "\"emb\"", ":", "\n", "      ", "positional_encoding", "=", "common_attention", ".", "add_positional_embedding", "(", "\n", "tf", ".", "zeros", "(", "[", "1", ",", "decode_length", "+", "1", ",", "hparams", ".", "hidden_size", "]", ")", ",", "\n", "hparams", ".", "max_length", ",", "\"body/targets_positional_embedding\"", ",", "None", ")", "\n", "", "else", ":", "\n", "      ", "positional_encoding", "=", "None", "\n", "\n", "", "def", "preprocess_targets", "(", "targets", ",", "i", ")", ":", "\n", "      ", "\"\"\"Performs preprocessing steps on the targets to prepare for the decoder.\n\n      This includes:\n        - Embedding the ids.\n        - Flattening to 3D tensor.\n        - Optionally adding timing signals.\n\n      Args:\n        targets: A tensor, inputs ids to the decoder. [batch_size, 1].\n        i: An integer, Step number of the decoding loop.\n\n      Returns:\n        A tensor, processed targets [batch_size, 1, hidden_dim].\n      \"\"\"", "\n", "# _shard_features called to ensure that the variable names match", "\n", "targets", "=", "self", ".", "_shard_features", "(", "{", "\"targets\"", ":", "targets", "}", ")", "[", "\"targets\"", "]", "\n", "with", "tf", ".", "variable_scope", "(", "target_modality", ".", "name", ")", ":", "\n", "        ", "targets", "=", "target_modality", ".", "targets_bottom_sharded", "(", "targets", ",", "dp", ")", "[", "0", "]", "\n", "", "targets", "=", "common_layers", ".", "flatten4d3d", "(", "targets", ")", "\n", "\n", "# TODO(llion): Explain! Is this even needed?", "\n", "targets", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "equal", "(", "i", ",", "0", ")", ",", "lambda", ":", "tf", ".", "zeros_like", "(", "targets", ")", ",", "lambda", ":", "targets", ")", "\n", "\n", "if", "positional_encoding", "is", "not", "None", ":", "\n", "        ", "positional_encoding_shape", "=", "positional_encoding", ".", "shape", ".", "as_list", "(", ")", "\n", "targets", "+=", "tf", ".", "slice", "(", "\n", "positional_encoding", ",", "[", "0", ",", "i", ",", "0", "]", ",", "\n", "[", "positional_encoding_shape", "[", "0", "]", ",", "1", ",", "positional_encoding_shape", "[", "2", "]", "]", ")", "\n", "", "return", "targets", "\n", "\n", "", "decoder_self_attention_bias", "=", "(", "\n", "common_attention", ".", "attention_bias_lower_triangle", "(", "decode_length", ")", ")", "\n", "if", "hparams", ".", "proximity_bias", ":", "\n", "      ", "decoder_self_attention_bias", "+=", "common_attention", ".", "attention_bias_proximal", "(", "\n", "decode_length", ")", "\n", "\n", "", "def", "symbols_to_logits_tpu_fn", "(", "ids", ",", "i", ",", "cache", ")", ":", "\n", "      ", "\"\"\"Go from ids to logits for next symbol on TPU.\n\n      Args:\n        ids: A tensor, symbol IDs.\n        i: An integer, step number of the decoding loop. Only used for inference\n            on TPU.\n        cache: A dict, containing tensors which are the results of previous\n            attentions, used for fast decoding.\n\n      Returns:\n        ret: A tensor, computed logits.\n        cache: A dict, containing tensors which are the results of previous\n            attentions, used for fast decoding.\n      \"\"\"", "\n", "ids", "=", "ids", "[", ":", ",", "-", "1", ":", "]", "\n", "targets", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "ids", ",", "axis", "=", "2", ")", ",", "axis", "=", "3", ")", "\n", "targets", "=", "preprocess_targets", "(", "targets", ",", "i", ")", "\n", "\n", "bias_shape", "=", "decoder_self_attention_bias", ".", "shape", ".", "as_list", "(", ")", "\n", "bias", "=", "tf", ".", "slice", "(", "decoder_self_attention_bias", ",", "[", "0", ",", "0", ",", "i", ",", "0", "]", ",", "\n", "[", "bias_shape", "[", "0", "]", ",", "bias_shape", "[", "1", "]", ",", "1", ",", "bias_shape", "[", "3", "]", "]", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"body\"", ")", ":", "\n", "        ", "body_outputs", "=", "dp", "(", "\n", "self", ".", "decode", ",", "\n", "targets", ",", "\n", "cache", ".", "get", "(", "\"encoder_output\"", ")", ",", "\n", "cache", ".", "get", "(", "\"encoder_decoder_attention_bias\"", ")", ",", "\n", "bias", ",", "\n", "hparams", ",", "\n", "cache", ",", "\n", "i", ",", "\n", "nonpadding", "=", "features_to_nonpadding", "(", "features", ",", "\"targets\"", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "target_modality", ".", "name", ")", ":", "\n", "        ", "logits", "=", "target_modality", ".", "top_sharded", "(", "body_outputs", ",", "None", ",", "dp", ")", "[", "0", "]", "\n", "\n", "", "ret", "=", "tf", ".", "squeeze", "(", "logits", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "if", "partial_targets", "is", "not", "None", ":", "\n", "# If the position is within the given partial targets, we alter the", "\n", "# logits to always return those values.", "\n", "# A faster approach would be to process the partial targets in one", "\n", "# iteration in order to fill the corresponding parts of the cache.", "\n", "# This would require broader changes, though.", "\n", "        ", "vocab_size", "=", "tf", ".", "shape", "(", "ret", ")", "[", "1", "]", "\n", "\n", "def", "forced_logits", "(", ")", ":", "\n", "          ", "return", "tf", ".", "one_hot", "(", "\n", "tf", ".", "tile", "(", "\n", "tf", ".", "slice", "(", "partial_targets", ",", "[", "0", ",", "i", "]", ",", "\n", "[", "partial_targets", ".", "shape", ".", "as_list", "(", ")", "[", "0", "]", ",", "1", "]", ")", ",", "\n", "[", "beam_size", "]", ")", ",", "vocab_size", ",", "0.0", ",", "-", "1e9", ")", "\n", "\n", "", "ret", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "less", "(", "i", ",", "partial_targets_length", ")", ",", "forced_logits", ",", "lambda", ":", "ret", ")", "\n", "", "return", "ret", ",", "cache", "\n", "\n", "", "ret", "=", "fast_decode_tpu", "(", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_decoder_attention_bias", "=", "encoder_decoder_attention_bias", ",", "\n", "symbols_to_logits_fn", "=", "symbols_to_logits_tpu_fn", ",", "\n", "hparams", "=", "hparams", ",", "\n", "decode_length", "=", "decode_length", ",", "\n", "vocab_size", "=", "target_modality", ".", "top_dimensionality", ",", "\n", "beam_size", "=", "beam_size", ",", "\n", "top_beams", "=", "top_beams", ",", "\n", "alpha", "=", "alpha", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "force_decode_length", "=", "self", ".", "_decode_hparams", ".", "force_decode_length", ")", "\n", "if", "partial_targets", "is", "not", "None", ":", "\n", "      ", "if", "beam_size", "<=", "1", "or", "top_beams", "<=", "1", ":", "\n", "        ", "ret", "[", "\"outputs\"", "]", "=", "ret", "[", "\"outputs\"", "]", "[", ":", ",", "partial_targets_length", ":", "]", "\n", "", "else", ":", "\n", "        ", "ret", "[", "\"outputs\"", "]", "=", "ret", "[", "\"outputs\"", "]", "[", ":", ",", ":", ",", "partial_targets_length", ":", "]", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformer._fast_decode": [[512, 707], ["layers.quaternion_attention.attention_bias_lower_triangle", "quaternion.fast_decode", "NotImplementedError", "NotImplementedError", "tensorflow.expand_dims", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.reshape", "features.get", "tensor2tensor.layers.common_layers.expand_squeeze_to_nd", "tensorflow.to_int64", "tensor2tensor.layers.common_layers.shape_list", "layers.quaternion_attention.get_timing_signal_1d", "tensor2tensor.layers.common_layers.flatten4d3d", "tensorflow.cond", "layers.quaternion_attention.attention_bias_proximal", "tensorflow.expand_dims", "quaternion.QuaternionTransformer._fast_decode_tpu.preprocess_targets"], "methods", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_lower_triangle", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.fast_decode", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.get_timing_signal_1d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_proximal"], ["", "def", "_fast_decode", "(", "self", ",", "\n", "features", ",", "\n", "decode_length", ",", "\n", "beam_size", "=", "1", ",", "\n", "top_beams", "=", "1", ",", "\n", "alpha", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Fast decoding.\n\n    Implements both greedy and beam search decoding, uses beam search iff\n    beam_size > 1, otherwise beam search related arguments are ignored.\n\n    Args:\n      features: a map of string to model  features.\n      decode_length: an integer.  How many additional timesteps to decode.\n      beam_size: number of beams.\n      top_beams: an integer. How many of the beams to return.\n      alpha: Float that controls the length penalty. larger the alpha, stronger\n        the preference for longer translations.\n\n    Returns:\n      A dict of decoding results {\n          \"outputs\": integer `Tensor` of decoded ids of shape\n              [batch_size, <= decode_length] if beam_size == 1 or\n              [batch_size, top_beams, <= decode_length]\n          \"scores\": decoding log probs from the beam search,\n              None if using greedy decoding (beam_size=1)\n      }\n\n    Raises:\n      NotImplementedError: If there are multiple data shards.\n    \"\"\"", "\n", "if", "self", ".", "_num_datashards", "!=", "1", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\"Fast decoding only supports a single shard.\"", ")", "\n", "", "dp", "=", "self", ".", "_data_parallelism", "\n", "hparams", "=", "self", ".", "_hparams", "\n", "target_modality", "=", "self", ".", "_problem_hparams", ".", "modality", "[", "\"targets\"", "]", "\n", "if", "\"targets_segmentation\"", "in", "features", ":", "\n", "      ", "raise", "NotImplementedError", "(", "\n", "\"Decoding not supported on packed datasets \"", "\n", "\" If you want to decode from a dataset, use the non-packed version\"", "\n", "\" of the dataset when decoding.\"", ")", "\n", "", "if", "self", ".", "has_input", ":", "\n", "      ", "inputs", "=", "features", "[", "\"inputs\"", "]", "\n", "if", "target_modality", ".", "is_class_modality", ":", "\n", "        ", "decode_length", "=", "1", "\n", "", "else", ":", "\n", "        ", "decode_length", "=", "(", "\n", "common_layers", ".", "shape_list", "(", "inputs", ")", "[", "1", "]", "+", "features", ".", "get", "(", "\n", "\"decode_length\"", ",", "decode_length", ")", ")", "\n", "\n", "# TODO(llion): Clean up this reshaping logic.", "\n", "", "inputs", "=", "tf", ".", "expand_dims", "(", "inputs", ",", "axis", "=", "1", ")", "\n", "if", "len", "(", "inputs", ".", "shape", ")", "<", "5", ":", "\n", "        ", "inputs", "=", "tf", ".", "expand_dims", "(", "inputs", ",", "axis", "=", "4", ")", "\n", "", "s", "=", "common_layers", ".", "shape_list", "(", "inputs", ")", "\n", "batch_size", "=", "s", "[", "0", "]", "\n", "inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "s", "[", "0", "]", "*", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", ",", "s", "[", "4", "]", "]", ")", "\n", "# _shard_features called to ensure that the variable names match", "\n", "inputs", "=", "self", ".", "_shard_features", "(", "{", "\"inputs\"", ":", "inputs", "}", ")", "[", "\"inputs\"", "]", "\n", "input_modality", "=", "self", ".", "_problem_hparams", ".", "modality", "[", "\"inputs\"", "]", "\n", "with", "tf", ".", "variable_scope", "(", "input_modality", ".", "name", ")", ":", "\n", "        ", "inputs", "=", "input_modality", ".", "bottom_sharded", "(", "inputs", ",", "dp", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"body\"", ")", ":", "\n", "        ", "encoder_output", ",", "encoder_decoder_attention_bias", "=", "dp", "(", "\n", "self", ".", "encode", ",", "\n", "inputs", ",", "\n", "features", "[", "\"target_space_id\"", "]", ",", "\n", "hparams", ",", "\n", "features", "=", "features", ")", "\n", "", "encoder_output", "=", "encoder_output", "[", "0", "]", "\n", "encoder_decoder_attention_bias", "=", "encoder_decoder_attention_bias", "[", "0", "]", "\n", "partial_targets", "=", "None", "\n", "", "else", ":", "\n", "# The problem has no inputs.", "\n", "      ", "encoder_output", "=", "None", "\n", "encoder_decoder_attention_bias", "=", "None", "\n", "\n", "# Prepare partial targets.", "\n", "# In either features[\"inputs\"] or features[\"targets\"].", "\n", "# We force the outputs to begin with these sequences.", "\n", "partial_targets", "=", "features", ".", "get", "(", "\"inputs\"", ")", "\n", "if", "partial_targets", "is", "None", ":", "\n", "        ", "partial_targets", "=", "features", "[", "\"targets\"", "]", "\n", "", "assert", "partial_targets", "is", "not", "None", "\n", "partial_targets", "=", "common_layers", ".", "expand_squeeze_to_nd", "(", "partial_targets", ",", "2", ")", "\n", "partial_targets", "=", "tf", ".", "to_int64", "(", "partial_targets", ")", "\n", "partial_targets_shape", "=", "common_layers", ".", "shape_list", "(", "partial_targets", ")", "\n", "partial_targets_length", "=", "partial_targets_shape", "[", "1", "]", "\n", "decode_length", "=", "(", "\n", "partial_targets_length", "+", "features", ".", "get", "(", "\"decode_length\"", ",", "decode_length", ")", ")", "\n", "batch_size", "=", "partial_targets_shape", "[", "0", "]", "\n", "\n", "", "if", "hparams", ".", "pos", "==", "\"timing\"", ":", "\n", "      ", "positional_encoding", "=", "common_attention", ".", "get_timing_signal_1d", "(", "\n", "decode_length", "+", "1", ",", "hparams", ".", "hidden_size", ")", "\n", "", "elif", "hparams", ".", "pos", "==", "\"emb\"", ":", "\n", "      ", "positional_encoding", "=", "common_attention", ".", "add_positional_embedding", "(", "\n", "tf", ".", "zeros", "(", "[", "1", ",", "decode_length", ",", "hparams", ".", "hidden_size", "]", ")", ",", "\n", "hparams", ".", "max_length", ",", "\"body/targets_positional_embedding\"", ",", "None", ")", "\n", "", "else", ":", "\n", "      ", "positional_encoding", "=", "None", "\n", "\n", "", "def", "preprocess_targets", "(", "targets", ",", "i", ")", ":", "\n", "      ", "\"\"\"Performs preprocessing steps on the targets to prepare for the decoder.\n\n      This includes:\n        - Embedding the ids.\n        - Flattening to 3D tensor.\n        - Optionally adding timing signals.\n\n      Args:\n        targets: inputs ids to the decoder. [batch_size, 1]\n        i: scalar, Step number of the decoding loop.\n\n      Returns:\n        Processed targets [batch_size, 1, hidden_dim]\n      \"\"\"", "\n", "# _shard_features called to ensure that the variable names match", "\n", "targets", "=", "self", ".", "_shard_features", "(", "{", "\"targets\"", ":", "targets", "}", ")", "[", "\"targets\"", "]", "\n", "with", "tf", ".", "variable_scope", "(", "target_modality", ".", "name", ")", ":", "\n", "        ", "targets", "=", "target_modality", ".", "targets_bottom_sharded", "(", "targets", ",", "dp", ")", "[", "0", "]", "\n", "", "targets", "=", "common_layers", ".", "flatten4d3d", "(", "targets", ")", "\n", "\n", "# TODO(llion): Explain! Is this even needed?", "\n", "targets", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "equal", "(", "i", ",", "0", ")", ",", "lambda", ":", "tf", ".", "zeros_like", "(", "targets", ")", ",", "lambda", ":", "targets", ")", "\n", "\n", "if", "positional_encoding", "is", "not", "None", ":", "\n", "        ", "targets", "+=", "positional_encoding", "[", ":", ",", "i", ":", "i", "+", "1", "]", "\n", "", "return", "targets", "\n", "\n", "", "decoder_self_attention_bias", "=", "(", "\n", "common_attention", ".", "attention_bias_lower_triangle", "(", "decode_length", ")", ")", "\n", "if", "hparams", ".", "proximity_bias", ":", "\n", "      ", "decoder_self_attention_bias", "+=", "common_attention", ".", "attention_bias_proximal", "(", "\n", "decode_length", ")", "\n", "\n", "", "def", "symbols_to_logits_fn", "(", "ids", ",", "i", ",", "cache", ")", ":", "\n", "      ", "\"\"\"Go from ids to logits for next symbol.\"\"\"", "\n", "ids", "=", "ids", "[", ":", ",", "-", "1", ":", "]", "\n", "targets", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "ids", ",", "axis", "=", "2", ")", ",", "axis", "=", "3", ")", "\n", "targets", "=", "preprocess_targets", "(", "targets", ",", "i", ")", "\n", "\n", "bias", "=", "decoder_self_attention_bias", "[", ":", ",", ":", ",", "i", ":", "i", "+", "1", ",", ":", "i", "+", "1", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"body\"", ")", ":", "\n", "        ", "body_outputs", "=", "dp", "(", "\n", "self", ".", "decode", ",", "\n", "targets", ",", "\n", "cache", ".", "get", "(", "\"encoder_output\"", ")", ",", "\n", "cache", ".", "get", "(", "\"encoder_decoder_attention_bias\"", ")", ",", "\n", "bias", ",", "\n", "hparams", ",", "\n", "cache", ",", "\n", "nonpadding", "=", "features_to_nonpadding", "(", "features", ",", "\"targets\"", ")", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "target_modality", ".", "name", ")", ":", "\n", "        ", "logits", "=", "target_modality", ".", "top_sharded", "(", "body_outputs", ",", "None", ",", "dp", ")", "[", "0", "]", "\n", "\n", "", "ret", "=", "tf", ".", "squeeze", "(", "logits", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "if", "partial_targets", "is", "not", "None", ":", "\n", "# If the position is within the given partial targets, we alter the", "\n", "# logits to always return those values.", "\n", "# A faster approach would be to process the partial targets in one", "\n", "# iteration in order to fill the corresponding parts of the cache.", "\n", "# This would require broader changes, though.", "\n", "        ", "vocab_size", "=", "tf", ".", "shape", "(", "ret", ")", "[", "1", "]", "\n", "\n", "def", "forced_logits", "(", ")", ":", "\n", "          ", "return", "tf", ".", "one_hot", "(", "\n", "tf", ".", "tile", "(", "partial_targets", "[", ":", ",", "i", "]", ",", "[", "beam_size", "]", ")", ",", "vocab_size", ",", "0.0", ",", "\n", "-", "1e9", ")", "\n", "\n", "", "ret", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "less", "(", "i", ",", "partial_targets_length", ")", ",", "forced_logits", ",", "lambda", ":", "ret", ")", "\n", "", "return", "ret", ",", "cache", "\n", "\n", "", "ret", "=", "fast_decode", "(", "\n", "encoder_output", "=", "encoder_output", ",", "\n", "encoder_decoder_attention_bias", "=", "encoder_decoder_attention_bias", ",", "\n", "symbols_to_logits_fn", "=", "symbols_to_logits_fn", ",", "\n", "hparams", "=", "hparams", ",", "\n", "decode_length", "=", "decode_length", ",", "\n", "vocab_size", "=", "target_modality", ".", "top_dimensionality", ",", "\n", "beam_size", "=", "beam_size", ",", "\n", "top_beams", "=", "top_beams", ",", "\n", "alpha", "=", "alpha", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "force_decode_length", "=", "self", ".", "_decode_hparams", ".", "force_decode_length", ")", "\n", "if", "partial_targets", "is", "not", "None", ":", "\n", "      ", "if", "beam_size", "<=", "1", "or", "top_beams", "<=", "1", ":", "\n", "        ", "ret", "[", "\"outputs\"", "]", "=", "ret", "[", "\"outputs\"", "]", "[", ":", ",", "partial_targets_length", ":", "]", "\n", "", "else", ":", "\n", "        ", "ret", "[", "\"outputs\"", "]", "=", "ret", "[", "\"outputs\"", "]", "[", ":", ",", ":", ",", "partial_targets_length", ":", "]", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.QuaternionTransformerEncoder.body": [[1068, 1088], ["tensor2tensor.layers.common_layers.flatten4d3d", "transformer_prepare_encoder", "tensorflow.nn.dropout", "transformer_encoder", "tensorflow.expand_dims", "quaternion.features_to_nonpadding"], "methods", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_transformer.transformer_prepare_encoder", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_transformer.transformer_encoder", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.features_to_nonpadding"], ["def", "body", "(", "self", ",", "features", ")", ":", "\n", "    ", "hparams", "=", "self", ".", "_hparams", "\n", "inputs", "=", "features", "[", "\"inputs\"", "]", "\n", "target_space", "=", "features", "[", "\"target_space_id\"", "]", "\n", "\n", "inputs", "=", "common_layers", ".", "flatten4d3d", "(", "inputs", ")", "\n", "\n", "(", "encoder_input", ",", "encoder_self_attention_bias", ",", "_", ")", "=", "(", "\n", "transformer_prepare_encoder", "(", "inputs", ",", "target_space", ",", "hparams", ")", ")", "\n", "\n", "encoder_input", "=", "tf", ".", "nn", ".", "dropout", "(", "encoder_input", ",", "\n", "1.0", "-", "hparams", ".", "layer_prepostprocess_dropout", ")", "\n", "encoder_output", "=", "transformer_encoder", "(", "\n", "encoder_input", ",", "\n", "encoder_self_attention_bias", ",", "\n", "hparams", ",", "\n", "nonpadding", "=", "features_to_nonpadding", "(", "features", ",", "\"inputs\"", ")", ")", "\n", "encoder_output", "=", "tf", ".", "expand_dims", "(", "encoder_output", ",", "2", ")", "\n", "\n", "return", "encoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.fast_decode_tpu": [[709, 886], ["tensor2tensor.utils.mlperf_log.transformer_print", "hparams.get", "six.moves.range", "tensor2tensor.utils.beam_search.beam_search", "tensorflow.zeros", "tensorflow.fill", "tensorflow.zeros", "tensorflow.while_loop", "tensor2tensor.layers.common_layers.shape_list", "layers.quaternion_attention.split_heads", "layers.quaternion_attention.split_heads", "tensorflow.zeros", "six.moves.range", "tensorflow.ones", "symbols_to_logits_fn", "tensor2tensor.layers.common_layers.log_prob_from_logits", "getattr", "tensor2tensor.layers.common_layers.sample_with_temperature", "tensorflow.equal", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.expand_dims", "tensorflow.transpose", "tensorflow.python.ops.inplace_ops.alias_inplace_update", "tensorflow.transpose", "tensorflow.logical_not", "tensorflow.ones", "tensorflow.TensorShape", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.variable_scope", "layers.quaternion_attention.compute_attention_component", "layers.quaternion_attention.split_heads", "layers.quaternion_attention.compute_attention_component", "layers.quaternion_attention.split_heads", "tensorflow.squeeze", "tensorflow.reduce_all", "tensor.shape.as_list", "tensorflow.constant", "tensorflow.range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.python.util.nest.map_structure", "tensorflow.TensorShape", "tensorflow.to_int64"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.compute_attention_component", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.compute_attention_component", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads"], ["", "", "def", "fast_decode_tpu", "(", "encoder_output", ",", "\n", "encoder_decoder_attention_bias", ",", "\n", "symbols_to_logits_fn", ",", "\n", "hparams", ",", "\n", "decode_length", ",", "\n", "vocab_size", ",", "\n", "beam_size", "=", "1", ",", "\n", "top_beams", "=", "1", ",", "\n", "alpha", "=", "1.0", ",", "\n", "sos_id", "=", "0", ",", "\n", "eos_id", "=", "beam_search", ".", "EOS_ID", ",", "\n", "batch_size", "=", "None", ",", "\n", "force_decode_length", "=", "False", ",", "\n", "scope_prefix", "=", "\"body/\"", ")", ":", "\n", "  ", "\"\"\"Given encoder output and a symbols to logits function, does fast decoding.\n\n  Implements both greedy and beam search decoding for TPU, uses beam search iff\n  beam_size > 1, otherwise beam search related arguments are ignored.\n\n  Args:\n    encoder_output: A tensor, output from encoder.\n    encoder_decoder_attention_bias: A tensor, bias for use in encoder-decoder\n        attention.\n    symbols_to_logits_fn: Incremental decoding, function mapping triple\n        `(ids, step, cache)` to symbol logits.\n    hparams: Run hyperparameters.\n    decode_length: An integer, how many additional timesteps to decode.\n    vocab_size: Output vocabulary size.\n    beam_size: An integer, number of beams.\n    top_beams: An integer, how many of the beams to return.\n    alpha: A float that controls the length penalty. Larger the alpha, stronger\n      the preference for longer translations.\n    sos_id: Start-of-sequence symbol.\n    eos_id: End-of-sequence symbol.\n    batch_size: An integer, must be passed if there is no input.\n    force_decode_length: A bool, whether to force the full decode length, or if\n        False, stop when all beams hit eos_id.\n    scope_prefix: str, prefix for decoder layer variable scopes.\n\n  Returns:\n    A dict of decoding results {\n        \"outputs\": integer `Tensor` of decoded ids of shape\n            [batch_size, <= decode_length] if top_beams == 1 or\n            [batch_size, top_beams, <= decode_length] otherwise\n        \"scores\": decoding log probs from the beam search,\n            None if using greedy decoding (beam_size=1)\n    }.\n\n  Raises:\n    NotImplementedError: If beam size > 1 with partial targets.\n  \"\"\"", "\n", "if", "encoder_output", "is", "not", "None", ":", "\n", "    ", "batch_size", "=", "common_layers", ".", "shape_list", "(", "encoder_output", ")", "[", "0", "]", "\n", "\n", "", "key_channels", "=", "hparams", ".", "attention_key_channels", "or", "hparams", ".", "hidden_size", "\n", "value_channels", "=", "hparams", ".", "attention_value_channels", "or", "hparams", ".", "hidden_size", "\n", "num_layers", "=", "hparams", ".", "num_decoder_layers", "or", "hparams", ".", "num_hidden_layers", "\n", "vars_3d_num_heads", "=", "(", "\n", "hparams", ".", "num_heads", "if", "hparams", ".", "get", "(", "\"attention_variables_3d\"", ")", "else", "0", ")", "\n", "\n", "cache", "=", "{", "\n", "\"layer_%d\"", "%", "layer", ":", "{", "\n", "\"k\"", ":", "\n", "common_attention", ".", "split_heads", "(", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "decode_length", ",", "key_channels", "]", ")", ",", "\n", "hparams", ".", "num_heads", ")", ",", "\n", "\"v\"", ":", "\n", "common_attention", ".", "split_heads", "(", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "decode_length", ",", "value_channels", "]", ")", ",", "\n", "hparams", ".", "num_heads", ")", ",", "\n", "\"f\"", ":", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "decode_length", ",", "hparams", ".", "hidden_size", "]", ")", ",", "\n", "}", "for", "layer", "in", "range", "(", "num_layers", ")", "\n", "}", "\n", "\n", "if", "encoder_output", "is", "not", "None", ":", "\n", "    ", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "      ", "layer_name", "=", "\"layer_%d\"", "%", "layer", "\n", "with", "tf", ".", "variable_scope", "(", "\n", "\"%sdecoder/%s/encdec_attention/multihead_attention\"", "%", "(", "scope_prefix", ",", "\n", "layer_name", ")", ")", ":", "\n", "        ", "k_encdec", "=", "common_attention", ".", "compute_attention_component", "(", "\n", "encoder_output", ",", "key_channels", ",", "name", "=", "\"k\"", ",", "\n", "vars_3d_num_heads", "=", "vars_3d_num_heads", ")", "\n", "k_encdec", "=", "common_attention", ".", "split_heads", "(", "k_encdec", ",", "hparams", ".", "num_heads", ")", "\n", "v_encdec", "=", "common_attention", ".", "compute_attention_component", "(", "\n", "encoder_output", ",", "value_channels", ",", "name", "=", "\"v\"", ",", "\n", "vars_3d_num_heads", "=", "vars_3d_num_heads", ")", "\n", "v_encdec", "=", "common_attention", ".", "split_heads", "(", "v_encdec", ",", "hparams", ".", "num_heads", ")", "\n", "", "cache", "[", "layer_name", "]", "[", "\"k_encdec\"", "]", "=", "k_encdec", "\n", "cache", "[", "layer_name", "]", "[", "\"v_encdec\"", "]", "=", "v_encdec", "\n", "\n", "", "cache", "[", "\"encoder_output\"", "]", "=", "encoder_output", "\n", "cache", "[", "\"encoder_decoder_attention_bias\"", "]", "=", "encoder_decoder_attention_bias", "\n", "\n", "", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_SEQ_BEAM_SEARCH", ",", "\n", "value", "=", "{", "\n", "\"vocab_size\"", ":", "vocab_size", ",", "\n", "\"batch_size\"", ":", "batch_size", ",", "\n", "\"beam_size\"", ":", "beam_size", ",", "\n", "\"alpha\"", ":", "alpha", ",", "\n", "\"max_decode_length\"", ":", "decode_length", "\n", "}", ")", "\n", "if", "beam_size", ">", "1", ":", "# Beam Search", "\n", "    ", "initial_ids", "=", "sos_id", "*", "tf", ".", "ones", "(", "[", "batch_size", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "decoded_ids", ",", "scores", "=", "beam_search", ".", "beam_search", "(", "\n", "symbols_to_logits_fn", ",", "\n", "initial_ids", ",", "\n", "beam_size", ",", "\n", "decode_length", ",", "\n", "vocab_size", ",", "\n", "alpha", ",", "\n", "states", "=", "cache", ",", "\n", "eos_id", "=", "eos_id", ",", "\n", "stop_early", "=", "(", "top_beams", "==", "1", ")", ",", "\n", "use_tpu", "=", "True", ")", "\n", "\n", "if", "top_beams", "==", "1", ":", "\n", "      ", "decoded_ids", "=", "decoded_ids", "[", ":", ",", "0", ",", "1", ":", "]", "\n", "scores", "=", "scores", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "      ", "decoded_ids", "=", "decoded_ids", "[", ":", ",", ":", "top_beams", ",", "1", ":", "]", "\n", "scores", "=", "scores", "[", ":", ",", ":", "top_beams", "]", "\n", "", "", "else", ":", "# Greedy", "\n", "    ", "def", "inner_loop", "(", "i", ",", "hit_eos", ",", "next_id", ",", "decoded_ids", ",", "cache", ",", "log_prob", ")", ":", "\n", "      ", "\"\"\"One step of greedy decoding.\"\"\"", "\n", "logits", ",", "cache", "=", "symbols_to_logits_fn", "(", "next_id", ",", "i", ",", "cache", ")", "\n", "log_probs", "=", "common_layers", ".", "log_prob_from_logits", "(", "logits", ")", "\n", "temperature", "=", "getattr", "(", "hparams", ",", "\"sampling_temp\"", ",", "0.0", ")", "\n", "if", "hparams", ".", "sampling_method", "==", "\"argmax\"", ":", "\n", "        ", "temperature", "=", "0.0", "\n", "", "next_id", "=", "common_layers", ".", "sample_with_temperature", "(", "logits", ",", "temperature", ")", "\n", "hit_eos", "|=", "tf", ".", "equal", "(", "next_id", ",", "eos_id", ")", "\n", "\n", "log_prob_indices", "=", "tf", ".", "stack", "(", "\n", "[", "tf", ".", "range", "(", "tf", ".", "to_int64", "(", "batch_size", ")", ")", ",", "next_id", "]", ",", "axis", "=", "1", ")", "\n", "log_prob", "+=", "tf", ".", "gather_nd", "(", "log_probs", ",", "log_prob_indices", ")", "\n", "\n", "next_id", "=", "tf", ".", "expand_dims", "(", "next_id", ",", "axis", "=", "1", ")", "\n", "decoded_ids", "=", "tf", ".", "transpose", "(", "decoded_ids", ")", "\n", "decoded_ids", "=", "inplace_ops", ".", "alias_inplace_update", "(", "\n", "decoded_ids", ",", "i", ",", "tf", ".", "squeeze", "(", "next_id", ",", "axis", "=", "1", ")", ")", "\n", "decoded_ids", "=", "tf", ".", "transpose", "(", "decoded_ids", ")", "\n", "return", "i", "+", "1", ",", "hit_eos", ",", "next_id", ",", "decoded_ids", ",", "cache", ",", "log_prob", "\n", "\n", "", "def", "is_not_finished", "(", "i", ",", "hit_eos", ",", "*", "_", ")", ":", "\n", "      ", "finished", "=", "i", ">=", "decode_length", "\n", "if", "not", "force_decode_length", ":", "\n", "        ", "finished", "|=", "tf", ".", "reduce_all", "(", "hit_eos", ")", "\n", "", "return", "tf", ".", "logical_not", "(", "finished", ")", "\n", "\n", "", "decoded_ids", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "decode_length", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "hit_eos", "=", "tf", ".", "fill", "(", "[", "batch_size", "]", ",", "False", ")", "\n", "next_id", "=", "sos_id", "*", "tf", ".", "ones", "(", "[", "batch_size", ",", "1", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "initial_log_prob", "=", "tf", ".", "zeros", "(", "[", "batch_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "def", "compute_cache_shape_invariants", "(", "tensor", ")", ":", "\n", "      ", "return", "tf", ".", "TensorShape", "(", "tensor", ".", "shape", ".", "as_list", "(", ")", ")", "\n", "\n", "", "_", ",", "_", ",", "_", ",", "decoded_ids", ",", "_", ",", "log_prob", "=", "tf", ".", "while_loop", "(", "\n", "is_not_finished", ",", "\n", "inner_loop", ",", "[", "\n", "tf", ".", "constant", "(", "0", ")", ",", "hit_eos", ",", "next_id", ",", "decoded_ids", ",", "cache", ",", "\n", "initial_log_prob", "\n", "]", ",", "\n", "shape_invariants", "=", "[", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "batch_size", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "batch_size", ",", "1", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "batch_size", ",", "decode_length", "]", ")", ",", "\n", "nest", ".", "map_structure", "(", "compute_cache_shape_invariants", ",", "cache", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "batch_size", "]", ")", ",", "\n", "]", ")", "\n", "scores", "=", "log_prob", "\n", "\n", "", "return", "{", "\"outputs\"", ":", "decoded_ids", ",", "\"scores\"", ":", "scores", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.fast_decode": [[888, 1062], ["cache.update", "hparams.get", "six.moves.range", "six.moves.range", "tensor2tensor.utils.beam_search.beam_search", "tensorflow.zeros", "tensorflow.fill", "tensorflow.zeros", "tensorflow.while_loop", "tensor2tensor.layers.common_layers.shape_list", "tensorflow.zeros", "tensorflow.ones", "symbols_to_logits_fn", "tensor2tensor.layers.common_layers.log_prob_from_logits", "getattr", "tensor2tensor.layers.common_layers.sample_with_temperature", "tensorflow.equal", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.logical_not", "tensorflow.ones", "layers.quaternion_attention.split_heads", "layers.quaternion_attention.split_heads", "six.moves.range", "tensorflow.variable_scope", "layers.quaternion_attention.compute_attention_component", "layers.quaternion_attention.split_heads", "layers.quaternion_attention.compute_attention_component", "layers.quaternion_attention.split_heads", "tensorflow.reduce_all", "tensorflow.constant", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.range", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.TensorShape", "tensorflow.python.util.nest.map_structure", "tensorflow.TensorShape", "tensorflow.to_int64"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.compute_attention_component", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.compute_attention_component", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.split_heads"], ["", "def", "fast_decode", "(", "encoder_output", ",", "\n", "encoder_decoder_attention_bias", ",", "\n", "symbols_to_logits_fn", ",", "\n", "hparams", ",", "\n", "decode_length", ",", "\n", "vocab_size", ",", "\n", "beam_size", "=", "1", ",", "\n", "top_beams", "=", "1", ",", "\n", "alpha", "=", "1.0", ",", "\n", "sos_id", "=", "0", ",", "\n", "eos_id", "=", "beam_search", ".", "EOS_ID", ",", "\n", "batch_size", "=", "None", ",", "\n", "force_decode_length", "=", "False", ",", "\n", "scope_prefix", "=", "\"body/\"", ",", "\n", "cache", "=", "None", ")", ":", "\n", "  ", "\"\"\"Given encoder output and a symbols to logits function, does fast decoding.\n\n  Implements both greedy and beam search decoding, uses beam search iff\n  beam_size > 1, otherwise beam search related arguments are ignored.\n\n  Args:\n    encoder_output: Output from encoder.\n    encoder_decoder_attention_bias: a bias tensor for use in encoder-decoder\n      attention\n    symbols_to_logits_fn: Incremental decoding; function mapping triple `(ids,\n      step, cache)` to symbol logits.\n    hparams: run hyperparameters\n    decode_length: an integer.  How many additional timesteps to decode.\n    vocab_size: Output vocabulary size.\n    beam_size: number of beams.\n    top_beams: an integer. How many of the beams to return.\n    alpha: Float that controls the length penalty. larger the alpha, stronger\n      the preference for longer translations.\n    sos_id: End-of-sequence symbol in beam search.\n    eos_id: End-of-sequence symbol in beam search.\n    batch_size: an integer scalar - must be passed if there is no input\n    force_decode_length: bool, whether to force the full decode length, or if\n      False, stop when all beams hit eos_id.\n    scope_prefix: str, prefix for decoder layer variable scopes.\n    cache: cache dictionary for additional predictions.\n\n  Returns:\n      A dict of decoding results {\n          \"outputs\": integer `Tensor` of decoded ids of shape\n              [batch_size, <= decode_length] if top_beams == 1 or\n              [batch_size, top_beams, <= decode_length] otherwise\n          \"scores\": decoding log probs from the beam search,\n              None if using greedy decoding (beam_size=1)\n      }\n\n    Raises:\n      NotImplementedError: If beam size > 1 with partial targets.\n  \"\"\"", "\n", "if", "encoder_output", "is", "not", "None", ":", "\n", "    ", "batch_size", "=", "common_layers", ".", "shape_list", "(", "encoder_output", ")", "[", "0", "]", "\n", "\n", "", "key_channels", "=", "hparams", ".", "attention_key_channels", "or", "hparams", ".", "hidden_size", "\n", "value_channels", "=", "hparams", ".", "attention_value_channels", "or", "hparams", ".", "hidden_size", "\n", "num_layers", "=", "hparams", ".", "num_decoder_layers", "or", "hparams", ".", "num_hidden_layers", "\n", "vars_3d_num_heads", "=", "(", "\n", "hparams", ".", "num_heads", "if", "hparams", ".", "get", "(", "\"attention_variables_3d\"", ")", "else", "0", ")", "\n", "\n", "if", "cache", "is", "None", ":", "\n", "    ", "cache", "=", "{", "}", "\n", "", "cache", ".", "update", "(", "{", "\n", "\"layer_%d\"", "%", "layer", ":", "{", "# pylint: disable=g-complex-comprehension", "\n", "\"k\"", ":", "\n", "common_attention", ".", "split_heads", "(", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "0", ",", "key_channels", "]", ")", ",", "hparams", ".", "num_heads", ")", ",", "\n", "\"v\"", ":", "\n", "common_attention", ".", "split_heads", "(", "\n", "tf", ".", "zeros", "(", "[", "batch_size", ",", "0", ",", "value_channels", "]", ")", ",", "hparams", ".", "num_heads", ")", ",", "\n", "}", "for", "layer", "in", "range", "(", "num_layers", ")", "\n", "}", ")", "\n", "\n", "# If `ffn_layer` is in `[\"dense_relu_dense\" or \"conv_hidden_relu\"]`, then the", "\n", "# cache key \"f\" won't be used, which means that the` shape of cache[\"f\"]`", "\n", "# won't be changed to", "\n", "# `[beamsize*batch_size, decode_length, hparams.hidden_size]` and may cause", "\n", "# error when applying `nest.map reshape function` on it.", "\n", "if", "hparams", ".", "ffn_layer", "not", "in", "[", "\"dense_relu_dense\"", ",", "\"conv_hidden_relu\"", "]", ":", "\n", "    ", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "      ", "cache", "[", "\"layer_%d\"", "%", "layer", "]", "[", "\"f\"", "]", "=", "tf", ".", "zeros", "(", "\n", "[", "batch_size", ",", "0", ",", "hparams", ".", "hidden_size", "]", ")", "\n", "\n", "", "", "if", "encoder_output", "is", "not", "None", ":", "\n", "    ", "for", "layer", "in", "range", "(", "num_layers", ")", ":", "\n", "      ", "layer_name", "=", "\"layer_%d\"", "%", "layer", "\n", "with", "tf", ".", "variable_scope", "(", "\"%sdecoder/%s/encdec_attention/multihead_attention\"", "\n", "%", "(", "scope_prefix", ",", "layer_name", ")", ")", ":", "\n", "        ", "k_encdec", "=", "common_attention", ".", "compute_attention_component", "(", "\n", "encoder_output", ",", "\n", "key_channels", ",", "\n", "name", "=", "\"k\"", ",", "\n", "vars_3d_num_heads", "=", "vars_3d_num_heads", ")", "\n", "k_encdec", "=", "common_attention", ".", "split_heads", "(", "k_encdec", ",", "hparams", ".", "num_heads", ")", "\n", "v_encdec", "=", "common_attention", ".", "compute_attention_component", "(", "\n", "encoder_output", ",", "\n", "value_channels", ",", "\n", "name", "=", "\"v\"", ",", "\n", "vars_3d_num_heads", "=", "vars_3d_num_heads", ")", "\n", "v_encdec", "=", "common_attention", ".", "split_heads", "(", "v_encdec", ",", "hparams", ".", "num_heads", ")", "\n", "", "cache", "[", "layer_name", "]", "[", "\"k_encdec\"", "]", "=", "k_encdec", "\n", "cache", "[", "layer_name", "]", "[", "\"v_encdec\"", "]", "=", "v_encdec", "\n", "\n", "", "cache", "[", "\"encoder_output\"", "]", "=", "encoder_output", "\n", "cache", "[", "\"encoder_decoder_attention_bias\"", "]", "=", "encoder_decoder_attention_bias", "\n", "\n", "", "if", "beam_size", ">", "1", ":", "# Beam Search", "\n", "    ", "initial_ids", "=", "sos_id", "*", "tf", ".", "ones", "(", "[", "batch_size", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "decoded_ids", ",", "scores", ",", "cache", "=", "beam_search", ".", "beam_search", "(", "\n", "symbols_to_logits_fn", ",", "\n", "initial_ids", ",", "\n", "beam_size", ",", "\n", "decode_length", ",", "\n", "vocab_size", ",", "\n", "alpha", ",", "\n", "states", "=", "cache", ",", "\n", "eos_id", "=", "eos_id", ",", "\n", "stop_early", "=", "(", "top_beams", "==", "1", ")", ")", "\n", "\n", "if", "top_beams", "==", "1", ":", "\n", "      ", "decoded_ids", "=", "decoded_ids", "[", ":", ",", "0", ",", "1", ":", "]", "\n", "scores", "=", "scores", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "      ", "decoded_ids", "=", "decoded_ids", "[", ":", ",", ":", "top_beams", ",", "1", ":", "]", "\n", "scores", "=", "scores", "[", ":", ",", ":", "top_beams", "]", "\n", "", "", "else", ":", "# Greedy", "\n", "\n", "    ", "def", "inner_loop", "(", "i", ",", "hit_eos", ",", "next_id", ",", "decoded_ids", ",", "cache", ",", "log_prob", ")", ":", "\n", "      ", "\"\"\"One step of greedy decoding.\"\"\"", "\n", "logits", ",", "cache", "=", "symbols_to_logits_fn", "(", "next_id", ",", "i", ",", "cache", ")", "\n", "log_probs", "=", "common_layers", ".", "log_prob_from_logits", "(", "logits", ")", "\n", "temperature", "=", "getattr", "(", "hparams", ",", "\"sampling_temp\"", ",", "0.0", ")", "\n", "if", "hparams", ".", "sampling_method", "==", "\"argmax\"", ":", "\n", "        ", "temperature", "=", "0.0", "\n", "", "next_id", "=", "common_layers", ".", "sample_with_temperature", "(", "logits", ",", "temperature", ")", "\n", "hit_eos", "|=", "tf", ".", "equal", "(", "next_id", ",", "eos_id", ")", "\n", "\n", "log_prob_indices", "=", "tf", ".", "stack", "(", "[", "tf", ".", "range", "(", "tf", ".", "to_int64", "(", "batch_size", ")", ")", ",", "next_id", "]", ",", "\n", "axis", "=", "1", ")", "\n", "log_prob", "+=", "tf", ".", "gather_nd", "(", "log_probs", ",", "log_prob_indices", ")", "\n", "\n", "next_id", "=", "tf", ".", "expand_dims", "(", "next_id", ",", "axis", "=", "1", ")", "\n", "decoded_ids", "=", "tf", ".", "concat", "(", "[", "decoded_ids", ",", "next_id", "]", ",", "axis", "=", "1", ")", "\n", "return", "i", "+", "1", ",", "hit_eos", ",", "next_id", ",", "decoded_ids", ",", "cache", ",", "log_prob", "\n", "\n", "", "def", "is_not_finished", "(", "i", ",", "hit_eos", ",", "*", "_", ")", ":", "\n", "      ", "finished", "=", "i", ">=", "decode_length", "\n", "if", "not", "force_decode_length", ":", "\n", "        ", "finished", "|=", "tf", ".", "reduce_all", "(", "hit_eos", ")", "\n", "", "return", "tf", ".", "logical_not", "(", "finished", ")", "\n", "\n", "", "decoded_ids", "=", "tf", ".", "zeros", "(", "[", "batch_size", ",", "0", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "hit_eos", "=", "tf", ".", "fill", "(", "[", "batch_size", "]", ",", "False", ")", "\n", "next_id", "=", "sos_id", "*", "tf", ".", "ones", "(", "[", "batch_size", ",", "1", "]", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "initial_log_prob", "=", "tf", ".", "zeros", "(", "[", "batch_size", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "_", ",", "_", ",", "_", ",", "decoded_ids", ",", "cache", ",", "log_prob", "=", "tf", ".", "while_loop", "(", "\n", "is_not_finished", ",", "\n", "inner_loop", ",", "[", "\n", "tf", ".", "constant", "(", "0", ")", ",", "hit_eos", ",", "next_id", ",", "decoded_ids", ",", "cache", ",", "\n", "initial_log_prob", "\n", "]", ",", "\n", "shape_invariants", "=", "[", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "None", "]", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", ",", "None", "]", ")", ",", "\n", "nest", ".", "map_structure", "(", "beam_search", ".", "get_state_shape_invariants", ",", "cache", ")", ",", "\n", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "]", ")", "\n", "scores", "=", "log_prob", "\n", "\n", "", "return", "{", "\"outputs\"", ":", "decoded_ids", ",", "\"scores\"", ":", "scores", ",", "\"cache\"", ":", "cache", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.features_to_nonpadding": [[1090, 1095], ["tensorflow.minimum", "tensorflow.to_float"], "function", ["None"], ["", "", "def", "features_to_nonpadding", "(", "features", ",", "inputs_or_targets", "=", "\"inputs\"", ")", ":", "\n", "  ", "key", "=", "inputs_or_targets", "+", "\"_segmentation\"", "\n", "if", "features", "and", "key", "in", "features", ":", "\n", "    ", "return", "tf", ".", "minimum", "(", "tf", ".", "to_float", "(", "features", "[", "key", "]", ")", ",", "1.0", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.transformer_prepare_decoder": [[1097, 1153], ["tensor2tensor.layers.common_layers.shift_right_3d", "layers.quaternion_attention.embedding_to_padding", "layers.quaternion_attention.attention_bias_ignore_padding", "layers.quaternion_attention.attention_bias_same_segment", "layers.quaternion_attention.attention_bias_proximal", "tensorflow.cast", "layers.quaternion_attention.attention_bias_prepend_inputs_full_attention", "layers.quaternion_attention.attention_bias_lower_triangle", "layers.quaternion_attention.add_timing_signal_1d_given_position", "layers.quaternion_attention.add_timing_signal_1d", "layers.quaternion_attention.add_positional_embedding", "layers.quaternion_attention.embedding_to_padding", "tensor2tensor.layers.common_layers.shape_list", "tensor2tensor.layers.common_layers.shape_list"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.embedding_to_padding", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_ignore_padding", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_same_segment", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_proximal", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_prepend_inputs_full_attention", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.attention_bias_lower_triangle", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_timing_signal_1d_given_position", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_timing_signal_1d", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.add_positional_embedding", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.embedding_to_padding"], ["", "def", "transformer_prepare_decoder", "(", "targets", ",", "hparams", ",", "features", "=", "None", ")", ":", "\n", "  ", "\"\"\"Prepare one shard of the model for the decoder.\n\n  Args:\n    targets: a Tensor.\n    hparams: run hyperparameters\n    features: optionally pass the entire features dictionary as well.\n      This is needed now for \"packed\" datasets.\n\n  Returns:\n    decoder_input: a Tensor, bottom of decoder stack\n    decoder_self_attention_bias: a bias tensor for use in decoder self-attention\n  \"\"\"", "\n", "if", "hparams", ".", "causal_decoder_self_attention", ":", "\n", "# Causal attention.", "\n", "    ", "if", "hparams", ".", "prepend_mode", "==", "\"prepend_inputs_full_attention\"", ":", "\n", "      ", "decoder_self_attention_bias", "=", "(", "\n", "common_attention", ".", "attention_bias_prepend_inputs_full_attention", "(", "\n", "common_attention", ".", "embedding_to_padding", "(", "targets", ")", ")", ")", "\n", "", "else", ":", "\n", "      ", "decoder_self_attention_bias", "=", "(", "\n", "common_attention", ".", "attention_bias_lower_triangle", "(", "\n", "common_layers", ".", "shape_list", "(", "targets", ")", "[", "1", "]", ")", ")", "\n", "", "", "else", ":", "\n", "# Full attention.", "\n", "    ", "decoder_padding", "=", "common_attention", ".", "embedding_to_padding", "(", "targets", ")", "\n", "decoder_self_attention_bias", "=", "(", "\n", "common_attention", ".", "attention_bias_ignore_padding", "(", "decoder_padding", ")", ")", "\n", "\n", "", "if", "features", "and", "\"targets_segmentation\"", "in", "features", ":", "\n", "# \"Packed\" dataset - keep the examples from seeing each other.", "\n", "    ", "targets_segmentation", "=", "features", "[", "\"targets_segmentation\"", "]", "\n", "targets_position", "=", "features", "[", "\"targets_position\"", "]", "\n", "decoder_self_attention_bias", "+=", "common_attention", ".", "attention_bias_same_segment", "(", "\n", "targets_segmentation", ",", "targets_segmentation", ")", "\n", "", "else", ":", "\n", "    ", "targets_position", "=", "None", "\n", "", "if", "hparams", ".", "proximity_bias", ":", "\n", "    ", "decoder_self_attention_bias", "+=", "common_attention", ".", "attention_bias_proximal", "(", "\n", "common_layers", ".", "shape_list", "(", "targets", ")", "[", "1", "]", ")", "\n", "", "decoder_input", "=", "common_layers", ".", "shift_right_3d", "(", "targets", ")", "\n", "if", "hparams", ".", "pos", "==", "\"timing\"", ":", "\n", "    ", "if", "targets_position", "is", "not", "None", ":", "\n", "      ", "decoder_input", "=", "common_attention", ".", "add_timing_signal_1d_given_position", "(", "\n", "decoder_input", ",", "targets_position", ")", "\n", "", "else", ":", "\n", "      ", "decoder_input", "=", "common_attention", ".", "add_timing_signal_1d", "(", "decoder_input", ")", "\n", "", "", "elif", "hparams", ".", "pos", "==", "\"emb\"", ":", "\n", "    ", "decoder_input", "=", "common_attention", ".", "add_positional_embedding", "(", "\n", "decoder_input", ",", "hparams", ".", "max_length", ",", "\"targets_positional_embedding\"", ",", "\n", "targets_position", ")", "\n", "\n", "", "if", "hparams", ".", "activation_dtype", "==", "\"bfloat16\"", ":", "\n", "    ", "decoder_self_attention_bias", "=", "tf", ".", "cast", "(", "decoder_self_attention_bias", ",", "\n", "tf", ".", "bfloat16", ")", "\n", "", "return", "(", "decoder_input", ",", "decoder_self_attention_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.transformer_decoder": [[1155, 1285], ["tensor2tensor.layers.common_layers.comma_separated_string_to_integer_list", "tensor2tensor.utils.mlperf_log.transformer_print", "tensor2tensor.utils.mlperf_log.transformer_print", "tensor2tensor.utils.mlperf_log.transformer_print", "getattr", "tensorflow.variable_scope", "six.moves.range", "tensor2tensor.utils.mlperf_log.transformer_print", "tensor2tensor.layers.common_layers.layer_preprocess", "tensorflow.variable_scope", "tensorflow.variable_scope", "layers.quaternion_attention.multihead_attention", "tensor2tensor.layers.common_layers.layer_postprocess", "tensorflow.variable_scope", "transformer_ffn_layer", "tensor2tensor.layers.common_layers.layer_postprocess", "tensor2tensor.layers.common_layers.layer_preprocess", "tensorflow.variable_scope", "layers.quaternion_attention.multihead_attention", "tensor2tensor.layers.common_layers.layer_postprocess", "tensor2tensor.layers.common_layers.layer_preprocess", "hparams.get", "hparams.get", "tensor2tensor.layers.common_layers.layer_preprocess", "hparams.get", "hparams.get"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.multihead_attention", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_transformer.transformer_ffn_layer", "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.layers.quaternion_attention.multihead_attention"], ["", "def", "transformer_decoder", "(", "decoder_input", ",", "\n", "encoder_output", ",", "\n", "decoder_self_attention_bias", ",", "\n", "encoder_decoder_attention_bias", ",", "\n", "hparams", ",", "\n", "cache", "=", "None", ",", "\n", "decode_loop_step", "=", "None", ",", "\n", "name", "=", "\"decoder\"", ",", "\n", "nonpadding", "=", "None", ",", "\n", "save_weights_to", "=", "None", ",", "\n", "make_image_summary", "=", "True", ",", "\n", "losses", "=", "None", ")", ":", "\n", "  ", "\"\"\"A stack of transformer layers.\n\n  Args:\n    decoder_input: a Tensor\n    encoder_output: a Tensor\n    decoder_self_attention_bias: bias Tensor for self-attention\n      (see common_attention.attention_bias())\n    encoder_decoder_attention_bias: bias Tensor for encoder-decoder attention\n      (see common_attention.attention_bias())\n    hparams: hyperparameters for model\n    cache: dict, containing tensors which are the results of previous\n        attentions, used for fast decoding.\n    decode_loop_step: An integer, step number of the decoding loop.\n        Only used for inference on TPU.\n    name: a string\n    nonpadding: optional Tensor with shape [batch_size, encoder_length]\n      indicating what positions are not padding.  This is used\n      to mask out padding in convolutional layers.  We generally only\n      need this mask for \"packed\" datasets, because for ordinary datasets,\n      no padding is ever followed by nonpadding.\n    save_weights_to: an optional dictionary to capture attention weights\n      for visualization; the weights tensor will be appended there under\n      a string key created from the variable scope (including name).\n    make_image_summary: Whether to make an attention image summary.\n    losses: optional list onto which to append extra training losses\n\n  Returns:\n    y: a Tensors\n  \"\"\"", "\n", "x", "=", "decoder_input", "\n", "attention_dropout_broadcast_dims", "=", "(", "\n", "common_layers", ".", "comma_separated_string_to_integer_list", "(", "\n", "getattr", "(", "hparams", ",", "\"attention_dropout_broadcast_dims\"", ",", "\"\"", ")", ")", ")", "\n", "\n", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_NUM_HIDDEN_LAYERS", ",", "\n", "value", "=", "hparams", ".", "num_decoder_layers", "or", "hparams", ".", "num_hidden_layers", ")", "\n", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_ATTENTION_DROPOUT", ",", "\n", "value", "=", "hparams", ".", "attention_dropout", ")", "\n", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_ATTENTION_DENSE", ",", "\n", "value", "=", "{", "\n", "\"use_bias\"", ":", "\"false\"", ",", "\n", "\"num_heads\"", ":", "hparams", ".", "num_heads", ",", "\n", "\"hidden_size\"", ":", "hparams", ".", "hidden_size", "\n", "}", ")", "\n", "is_training", "=", "hparams", ".", "mode", "==", "tf", ".", "contrib", ".", "learn", ".", "ModeKeys", ".", "TRAIN", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "    ", "for", "layer", "in", "range", "(", "hparams", ".", "num_decoder_layers", "or", "hparams", ".", "num_hidden_layers", ")", ":", "\n", "      ", "layer_name", "=", "\"layer_%d\"", "%", "layer", "\n", "layer_cache", "=", "cache", "[", "layer_name", "]", "if", "cache", "is", "not", "None", "else", "None", "\n", "with", "tf", ".", "variable_scope", "(", "layer_name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "\"self_attention\"", ")", ":", "\n", "          ", "y", "=", "common_attention", ".", "multihead_attention", "(", "\n", "common_layers", ".", "layer_preprocess", "(", "x", ",", "hparams", ")", ",", "\n", "None", ",", "\n", "decoder_self_attention_bias", ",", "\n", "hparams", ".", "attention_key_channels", "or", "hparams", ".", "hidden_size", ",", "\n", "hparams", ".", "attention_value_channels", "or", "hparams", ".", "hidden_size", ",", "\n", "hparams", ".", "hidden_size", ",", "\n", "hparams", ".", "num_heads", ",", "\n", "hparams", ".", "attention_dropout", ",", "\n", "attention_type", "=", "hparams", ".", "self_attention_type", ",", "\n", "max_relative_position", "=", "hparams", ".", "max_relative_position", ",", "\n", "heads_share_relative_embedding", "=", "(", "\n", "hparams", ".", "heads_share_relative_embedding", ")", ",", "\n", "add_relative_to_values", "=", "hparams", ".", "add_relative_to_values", ",", "\n", "save_weights_to", "=", "save_weights_to", ",", "\n", "cache", "=", "layer_cache", ",", "\n", "make_image_summary", "=", "make_image_summary", ",", "\n", "dropout_broadcast_dims", "=", "attention_dropout_broadcast_dims", ",", "\n", "max_length", "=", "hparams", ".", "get", "(", "\"max_length\"", ")", ",", "\n", "decode_loop_step", "=", "decode_loop_step", ",", "\n", "vars_3d", "=", "hparams", ".", "get", "(", "\"attention_variables_3d\"", ")", ",", "\n", "is_training", "=", "is_training", ")", "\n", "x", "=", "common_layers", ".", "layer_postprocess", "(", "x", ",", "y", ",", "hparams", ")", "\n", "", "if", "encoder_output", "is", "not", "None", ":", "\n", "          ", "with", "tf", ".", "variable_scope", "(", "\"encdec_attention\"", ")", ":", "\n", "            ", "y", "=", "common_attention", ".", "multihead_attention", "(", "\n", "common_layers", ".", "layer_preprocess", "(", "x", ",", "hparams", ")", ",", "\n", "encoder_output", ",", "\n", "encoder_decoder_attention_bias", ",", "\n", "hparams", ".", "attention_key_channels", "or", "hparams", ".", "hidden_size", ",", "\n", "hparams", ".", "attention_value_channels", "or", "hparams", ".", "hidden_size", ",", "\n", "hparams", ".", "hidden_size", ",", "\n", "hparams", ".", "num_heads", ",", "\n", "hparams", ".", "attention_dropout", ",", "\n", "max_relative_position", "=", "hparams", ".", "max_relative_position", ",", "\n", "attention_type", "=", "hparams", ".", "self_attention_type", ",", "\n", "heads_share_relative_embedding", "=", "(", "\n", "hparams", ".", "heads_share_relative_embedding", ")", ",", "\n", "add_relative_to_values", "=", "hparams", ".", "add_relative_to_values", ",", "\n", "save_weights_to", "=", "save_weights_to", ",", "\n", "cache", "=", "layer_cache", ",", "\n", "make_image_summary", "=", "make_image_summary", ",", "\n", "dropout_broadcast_dims", "=", "attention_dropout_broadcast_dims", ",", "\n", "max_length", "=", "hparams", ".", "get", "(", "\"max_length\"", ")", ",", "\n", "vars_3d", "=", "hparams", ".", "get", "(", "\"attention_variables_3d\"", ")", ",", "\n", "is_training", "=", "is_training", ")", "\n", "x", "=", "common_layers", ".", "layer_postprocess", "(", "x", ",", "y", ",", "hparams", ")", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "\"ffn\"", ")", ":", "\n", "          ", "y", "=", "transformer_ffn_layer", "(", "\n", "common_layers", ".", "layer_preprocess", "(", "x", ",", "hparams", ")", ",", "\n", "hparams", ",", "\n", "conv_padding", "=", "\"LEFT\"", ",", "\n", "nonpadding_mask", "=", "nonpadding", ",", "\n", "losses", "=", "losses", ",", "\n", "cache", "=", "layer_cache", ",", "\n", "decode_loop_step", "=", "decode_loop_step", ")", "\n", "x", "=", "common_layers", ".", "layer_postprocess", "(", "x", ",", "y", ",", "hparams", ")", "\n", "# if normalization is done in layer_preprocess, then it should also be done", "\n", "# on the output, since the output can grow very large, being the sum of", "\n", "# a whole stack of unnormalized layer outputs.", "\n", "", "", "", "mlperf_log", ".", "transformer_print", "(", "\n", "key", "=", "mlperf_log", ".", "MODEL_HP_NORM", ",", "\n", "value", "=", "{", "\"hidden_size\"", ":", "hparams", ".", "hidden_size", "}", ")", "\n", "return", "common_layers", ".", "layer_preprocess", "(", "x", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_v1": [[1287, 1350], ["tensor2tensor.layers.common_hparams.basic_params1", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam", "common_hparams.basic_params1.add_hparam"], "function", ["None"], ["", "", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_base_v1", "(", ")", ":", "\n", "  ", "\"\"\"Set of hyperparameters.\"\"\"", "\n", "hparams", "=", "common_hparams", ".", "basic_params1", "(", ")", "\n", "hparams", ".", "norm_type", "=", "\"layer\"", "\n", "hparams", ".", "hidden_size", "=", "512", "\n", "hparams", ".", "batch_size", "=", "4096", "\n", "hparams", ".", "max_length", "=", "256", "\n", "hparams", ".", "clip_grad_norm", "=", "0.", "# i.e. no gradient clipping", "\n", "hparams", ".", "optimizer_adam_epsilon", "=", "1e-9", "\n", "hparams", ".", "learning_rate_schedule", "=", "\"legacy\"", "\n", "hparams", ".", "learning_rate_decay_scheme", "=", "\"noam\"", "\n", "hparams", ".", "learning_rate", "=", "0.1", "\n", "hparams", ".", "learning_rate_warmup_steps", "=", "4000", "\n", "hparams", ".", "initializer_gain", "=", "1.0", "\n", "hparams", ".", "num_hidden_layers", "=", "6", "\n", "hparams", ".", "initializer", "=", "\"uniform_unit_scaling\"", "\n", "hparams", ".", "weight_decay", "=", "0.0", "\n", "hparams", ".", "optimizer_adam_beta1", "=", "0.9", "\n", "hparams", ".", "optimizer_adam_beta2", "=", "0.98", "\n", "hparams", ".", "num_sampled_classes", "=", "0", "\n", "hparams", ".", "label_smoothing", "=", "0.1", "\n", "hparams", ".", "shared_embedding_and_softmax_weights", "=", "True", "\n", "hparams", ".", "symbol_modality_num_shards", "=", "16", "\n", "hparams", ".", "max_relative_position", "=", "20", "\n", "\n", "# Add new ones like this.", "\n", "hparams", ".", "add_hparam", "(", "\"filter_size\"", ",", "2048", ")", "\n", "# Layer-related flags. If zero, these fall back on hparams.num_hidden_layers.", "\n", "hparams", ".", "add_hparam", "(", "\"num_encoder_layers\"", ",", "0", ")", "\n", "hparams", ".", "add_hparam", "(", "\"num_decoder_layers\"", ",", "0", ")", "\n", "# Attention-related flags.", "\n", "hparams", ".", "add_hparam", "(", "\"num_heads\"", ",", "8", ")", "\n", "hparams", ".", "add_hparam", "(", "\"attention_key_channels\"", ",", "0", ")", "\n", "hparams", ".", "add_hparam", "(", "\"attention_value_channels\"", ",", "0", ")", "\n", "hparams", ".", "add_hparam", "(", "\"ffn_layer\"", ",", "\"dense_relu_dense\"", ")", "\n", "hparams", ".", "add_hparam", "(", "\"parameter_attention_key_channels\"", ",", "0", ")", "\n", "hparams", ".", "add_hparam", "(", "\"parameter_attention_value_channels\"", ",", "0", ")", "\n", "# All hyperparameters ending in \"dropout\" are automatically set to 0.0", "\n", "# when not in training mode.", "\n", "hparams", ".", "add_hparam", "(", "\"attention_dropout\"", ",", "0.0", ")", "\n", "hparams", ".", "add_hparam", "(", "\"attention_dropout_broadcast_dims\"", ",", "\"\"", ")", "\n", "hparams", ".", "add_hparam", "(", "\"relu_dropout\"", ",", "0.0", ")", "\n", "hparams", ".", "add_hparam", "(", "\"relu_dropout_broadcast_dims\"", ",", "\"\"", ")", "\n", "hparams", ".", "add_hparam", "(", "\"pos\"", ",", "\"timing\"", ")", "# timing, none", "\n", "hparams", ".", "add_hparam", "(", "\"nbr_decoder_problems\"", ",", "1", ")", "\n", "hparams", ".", "add_hparam", "(", "\"proximity_bias\"", ",", "False", ")", "\n", "hparams", ".", "add_hparam", "(", "\"causal_decoder_self_attention\"", ",", "True", ")", "\n", "hparams", ".", "add_hparam", "(", "\"use_pad_remover\"", ",", "True", ")", "\n", "hparams", ".", "add_hparam", "(", "\"self_attention_type\"", ",", "\"dot_product\"", ")", "\n", "hparams", ".", "add_hparam", "(", "\"conv_first_kernel\"", ",", "3", ")", "\n", "hparams", ".", "add_hparam", "(", "\"attention_variables_3d\"", ",", "False", ")", "\n", "hparams", ".", "add_hparam", "(", "\"use_target_space_embedding\"", ",", "True", ")", "\n", "# These parameters are only used when ffn_layer==\"local_moe_tpu\"", "\n", "hparams", ".", "add_hparam", "(", "\"moe_overhead_train\"", ",", "1.0", ")", "\n", "hparams", ".", "add_hparam", "(", "\"moe_overhead_eval\"", ",", "2.0", ")", "\n", "hparams", ".", "moe_num_experts", "=", "16", "\n", "hparams", ".", "moe_loss_coef", "=", "1e-3", "\n", "# If specified, use this value instead of problem name in metrics.py.", "\n", "# This is useful for programs that can automatically compare experiments side", "\n", "#   by side based on the same metric names.", "\n", "hparams", ".", "add_hparam", "(", "\"overload_eval_metric_name\"", ",", "\"\"", ")", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_v2": [[1352, 1364], ["quaternion.quaternion_transformer_base_v1"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_v1"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_base_v2", "(", ")", ":", "\n", "  ", "\"\"\"Set of hyperparameters.\"\"\"", "\n", "hparams", "=", "quaternion_transformer_base_v1", "(", ")", "\n", "hparams", ".", "layer_preprocess_sequence", "=", "\"n\"", "\n", "hparams", ".", "layer_postprocess_sequence", "=", "\"da\"", "\n", "hparams", ".", "layer_prepostprocess_dropout", "=", "0.1", "\n", "hparams", ".", "attention_dropout", "=", "0.1", "\n", "hparams", ".", "relu_dropout", "=", "0.1", "\n", "hparams", ".", "learning_rate_warmup_steps", "=", "8000", "\n", "hparams", ".", "learning_rate", "=", "0.2", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_v3": [[1365, 1378], ["quaternion.quaternion_transformer_base_v2"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_v2"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_base_v3", "(", ")", ":", "\n", "  ", "\"\"\"Base parameters for Transformer model.\"\"\"", "\n", "# Update parameters here, then occasionally cut a versioned set, e.g.", "\n", "# transformer_base_v2.", "\n", "hparams", "=", "quaternion_transformer_base_v2", "(", ")", "\n", "hparams", ".", "optimizer_adam_beta2", "=", "0.997", "\n", "# New way of specifying learning rate schedule.", "\n", "# Equivalent to previous version.", "\n", "hparams", ".", "learning_rate_schedule", "=", "(", "\n", "\"constant*linear_warmup*rsqrt_decay*rsqrt_hidden_size\"", ")", "\n", "hparams", ".", "learning_rate_constant", "=", "2.0", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base": [[1380, 1385], ["quaternion.quaternion_transformer_base_v3"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_v3"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_base", "(", ")", ":", "\n", "  ", "\"\"\"Base parameters for Transformer model.\"\"\"", "\n", "hparams", "=", "quaternion_transformer_base_v3", "(", ")", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_mem8": [[1386, 1392], ["quaternion.quaternion_transformer_base_v3"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_v3"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_base_mem8", "(", ")", ":", "\n", "  ", "\"\"\"Base parameters for Transformer model.\"\"\"", "\n", "hparams", "=", "quaternion_transformer_base_v3", "(", ")", "\n", "hparams", ".", "num_mem", "=", "8", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_mem16": [[1393, 1399], ["quaternion.quaternion_transformer_base_v3"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_v3"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_base_mem16", "(", ")", ":", "\n", "  ", "\"\"\"Base parameters for Transformer model.\"\"\"", "\n", "hparams", "=", "quaternion_transformer_base_v3", "(", ")", "\n", "hparams", ".", "num_mem", "=", "16", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_big": [[1402, 1414], ["transformer_base"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_big", "(", ")", ":", "\n", "  ", "\"\"\"HParams for transformer big model on WMT.\"\"\"", "\n", "hparams", "=", "transformer_base", "(", ")", "\n", "hparams", ".", "hidden_size", "=", "1024", "\n", "hparams", ".", "filter_size", "=", "4096", "\n", "# Reduce batch size to 2048 from 4096 to be able to train the model on a GPU", "\n", "# with 12 GB memory. For example, NVIDIA TITAN V GPU.", "\n", "hparams", ".", "batch_size", "=", "2048", "\n", "hparams", ".", "num_heads", "=", "16", "\n", "hparams", ".", "layer_prepostprocess_dropout", "=", "0.3", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_tall": [[1416, 1430], ["transformer_base"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_tall", "(", ")", ":", "\n", "  ", "\"\"\"Hparams for transformer on LM for pretraining/finetuning/mixing.\"\"\"", "\n", "hparams", "=", "transformer_base", "(", ")", "\n", "hparams", ".", "batch_size", "=", "2048", "\n", "hparams", ".", "hidden_size", "=", "768", "\n", "hparams", ".", "filter_size", "=", "3072", "\n", "hparams", ".", "num_hidden_layers", "=", "12", "\n", "hparams", ".", "num_heads", "=", "12", "\n", "hparams", ".", "label_smoothing", "=", "0.0", "\n", "hparams", ".", "max_length", "=", "512", "\n", "hparams", ".", "eval_drop_long_sequences", "=", "True", "\n", "hparams", ".", "multiproblem_mixing_schedule", "=", "\"pretrain\"", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_tall_finetune_textclass": [[1432, 1448], ["transformer_tall"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_tall_finetune_textclass", "(", ")", ":", "\n", "  ", "\"\"\"Hparams for transformer on LM for finetuning on text class problems.\"\"\"", "\n", "hparams", "=", "transformer_tall", "(", ")", "\n", "hparams", ".", "learning_rate_constant", "=", "6.25e-5", "\n", "hparams", ".", "learning_rate_schedule", "=", "(", "\n", "\"linear_warmup*constant*linear_decay\"", ")", "\n", "hparams", ".", "multiproblem_schedule_max_examples", "=", "0", "\n", "hparams", ".", "multiproblem_target_eval_only", "=", "True", "\n", "hparams", ".", "multiproblem_class_loss_multiplier", "=", "4", "\n", "hparams", ".", "learning_rate_warmup_steps", "=", "50", "\n", "# Set train steps to learning_rate_decay_steps or less", "\n", "hparams", ".", "learning_rate_decay_steps", "=", "25000", "\n", "hparams", ".", "multiproblem_reweight_label_loss", "=", "True", "\n", "hparams", ".", "multiproblem_label_weight", "=", "0.95", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_tall_pretrain_lm": [[1450, 1467], ["transformer_tall"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_tall_pretrain_lm", "(", ")", ":", "\n", "  ", "\"\"\"Hparams for transformer on LM pretraining (with 64k vocab).\"\"\"", "\n", "hparams", "=", "transformer_tall", "(", ")", "\n", "hparams", ".", "learning_rate_constant", "=", "2e-4", "\n", "hparams", ".", "learning_rate_schedule", "=", "(", "\n", "\"linear_warmup*constant*cosdecay\"", ")", "\n", "hparams", ".", "optimizer", "=", "\"AdamW\"", "\n", "hparams", ".", "optimizer_adam_beta1", "=", "0.9", "\n", "hparams", ".", "optimizer_adam_beta2", "=", "0.999", "\n", "hparams", ".", "optimizer_adam_epsilon", "=", "1e-8", "\n", "# Set max examples to something big when pretraining only the LM, definitely", "\n", "# something an order of magnitude bigger than number of train steps.", "\n", "hparams", ".", "multiproblem_schedule_max_examples", "=", "5e8", "\n", "# Set train steps to learning_rate_decay_steps or less", "\n", "hparams", ".", "learning_rate_decay_steps", "=", "5000000", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_tall_pretrain_lm_tpu_adafactor": [[1469, 1479], ["transformer_tall_pretrain_lm", "update_hparams_for_tpu"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_tall_pretrain_lm_tpu_adafactor", "(", ")", ":", "\n", "  ", "\"\"\"Hparams for transformer on LM pretraining (with 64k vocab) on TPU.\"\"\"", "\n", "hparams", "=", "transformer_tall_pretrain_lm", "(", ")", "\n", "update_hparams_for_tpu", "(", "hparams", ")", "\n", "hparams", ".", "max_length", "=", "1024", "\n", "# For multi-problem on TPU we need it in absolute examples.", "\n", "hparams", ".", "batch_size", "=", "8", "\n", "hparams", ".", "multiproblem_vocab_size", "=", "2", "**", "16", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_tall_pretrain_lm_tpu_adafactor_large": [[1481, 1492], ["transformer_tall_pretrain_lm_tpu_adafactor"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_tall_pretrain_lm_tpu_adafactor_large", "(", ")", ":", "\n", "  ", "\"\"\"Hparams for transformer on LM pretraining on TPU, large model.\"\"\"", "\n", "hparams", "=", "transformer_tall_pretrain_lm_tpu_adafactor", "(", ")", "\n", "hparams", ".", "hidden_size", "=", "1024", "\n", "hparams", ".", "num_heads", "=", "16", "\n", "hparams", ".", "filter_size", "=", "32768", "\n", "hparams", ".", "batch_size", "=", "4", "\n", "hparams", ".", "multiproblem_mixing_schedule", "=", "\"constant\"", "\n", "hparams", ".", "multiproblem_schedule_threshold", "=", "0.3", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_tall_pretrain_lm_tpu": [[1494, 1503], ["transformer_tall_pretrain_lm_tpu_adafactor"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_tall_pretrain_lm_tpu", "(", ")", ":", "\n", "  ", "\"\"\"Hparams for transformer on LM pretraining on TPU with AdamW.\"\"\"", "\n", "hparams", "=", "transformer_tall_pretrain_lm_tpu_adafactor", "(", ")", "\n", "# Optimizer gets reset in update_hparams_for_tpu so we set it again here.", "\n", "hparams", ".", "learning_rate_constant", "=", "2e-4", "\n", "hparams", ".", "learning_rate_schedule", "=", "(", "\"linear_warmup * constant * cosdecay\"", ")", "\n", "hparams", ".", "optimizer", "=", "\"AdamW\"", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_tall_finetune_cnndm": [[1505, 1522], ["transformer_tall"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_tall_finetune_cnndm", "(", ")", ":", "\n", "  ", "\"\"\"Hparams for transformer on LM for finetuning on cnndm summarization.\"\"\"", "\n", "hparams", "=", "transformer_tall", "(", ")", "\n", "hparams", ".", "batch_size", "=", "4096", "\n", "hparams", ".", "multiproblem_max_input_length", "=", "412", "\n", "hparams", ".", "multiproblem_max_target_length", "=", "100", "\n", "hparams", ".", "multiproblem_schedule_max_examples", "=", "0", "\n", "hparams", ".", "learning_rate_schedule", "=", "(", "\n", "\"linear_warmup*constant*cosdecay\"", ")", "\n", "hparams", ".", "learning_rate_constant", "=", "5e-5", "\n", "hparams", ".", "learning_rate_warmup_steps", "=", "100", "\n", "# Set train steps to learning_rate_decay_steps or less", "\n", "hparams", ".", "learning_rate_decay_steps", "=", "40000", "\n", "hparams", ".", "multiproblem_target_eval_only", "=", "True", "\n", "hparams", ".", "multiproblem_vocab_size", "=", "2", "**", "16", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_tall_big": [[1524, 1530], ["transformer_tall"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_tall_big", "(", ")", ":", "\n", "  ", "\"\"\"Hparams for transformer on LM+MNLI.\"\"\"", "\n", "hparams", "=", "transformer_tall", "(", ")", "\n", "hparams", ".", "num_hidden_layers", "=", "18", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_big_single_gpu": [[1532, 1539], ["transformer_big"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_big_single_gpu", "(", ")", ":", "\n", "  ", "\"\"\"HParams for transformer big model for single GPU.\"\"\"", "\n", "hparams", "=", "transformer_big", "(", ")", "\n", "hparams", ".", "layer_prepostprocess_dropout", "=", "0.1", "\n", "hparams", ".", "learning_rate_warmup_steps", "=", "16000", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_single_gpu": [[1541, 1549], ["quaternion.quaternion_transformer_base"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_base_single_gpu", "(", ")", ":", "\n", "  ", "\"\"\"HParams for transformer base model for single GPU.\"\"\"", "\n", "hparams", "=", "quaternion_transformer_base", "(", ")", "\n", "hparams", ".", "batch_size", "=", "2048", "\n", "hparams", ".", "learning_rate_warmup_steps", "=", "16000", "\n", "hparams", ".", "mem_size", "=", "4", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_single_gpu_mem8": [[1550, 1558], ["quaternion.quaternion_transformer_base"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_base_single_gpu_mem8", "(", ")", ":", "\n", "  ", "\"\"\"HParams for transformer base model for single GPU.\"\"\"", "\n", "hparams", "=", "quaternion_transformer_base", "(", ")", "\n", "hparams", ".", "batch_size", "=", "2048", "\n", "hparams", ".", "learning_rate_warmup_steps", "=", "16000", "\n", "hparams", ".", "num_mem", "=", "8", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_multistep8": [[1559, 1566], ["transformer_base"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_base_multistep8", "(", ")", ":", "\n", "  ", "\"\"\"HParams for simulating 8 GPUs with MultistepAdam optimizer.\"\"\"", "\n", "hparams", "=", "transformer_base", "(", ")", "\n", "hparams", ".", "optimizer", "=", "\"MultistepAdam\"", "\n", "hparams", ".", "optimizer_multistep_accumulate_steps", "=", "8", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_parsing_base": [[1568, 1580], ["transformer_base"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_parsing_base", "(", ")", ":", "\n", "  ", "\"\"\"HParams for parsing on WSJ only.\"\"\"", "\n", "hparams", "=", "transformer_base", "(", ")", "\n", "hparams", ".", "attention_dropout", "=", "0.2", "\n", "hparams", ".", "layer_prepostprocess_dropout", "=", "0.2", "\n", "hparams", ".", "max_length", "=", "512", "\n", "hparams", ".", "learning_rate_warmup_steps", "=", "16000", "\n", "hparams", ".", "hidden_size", "=", "1024", "\n", "hparams", ".", "learning_rate", "=", "0.05", "\n", "hparams", ".", "shared_embedding_and_softmax_weights", "=", "False", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_parsing_big": [[1582, 1593], ["transformer_big"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_parsing_big", "(", ")", ":", "\n", "  ", "\"\"\"HParams for parsing on WSJ semi-supervised.\"\"\"", "\n", "hparams", "=", "transformer_big", "(", ")", "\n", "hparams", ".", "max_length", "=", "512", "\n", "hparams", ".", "shared_source_target_embedding", "=", "False", "\n", "hparams", ".", "learning_rate_warmup_steps", "=", "4000", "\n", "hparams", ".", "layer_prepostprocess_dropout", "=", "0.1", "\n", "hparams", ".", "batch_size", "=", "2048", "\n", "hparams", ".", "learning_rate", "=", "0.05", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_parsing_ice": [[1595, 1602], ["transformer_base_single_gpu"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_parsing_ice", "(", ")", ":", "\n", "  ", "\"\"\"HParams for parsing and tagging Icelandic text.\"\"\"", "\n", "hparams", "=", "transformer_base_single_gpu", "(", ")", "\n", "hparams", ".", "batch_size", "=", "4096", "\n", "hparams", ".", "shared_embedding_and_softmax_weights", "=", "False", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_tiny": [[1604, 1612], ["quaternion.quaternion_transformer_base"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_tiny", "(", ")", ":", "\n", "  ", "hparams", "=", "quaternion_transformer_base", "(", ")", "\n", "hparams", ".", "num_hidden_layers", "=", "2", "\n", "hparams", ".", "hidden_size", "=", "128", "\n", "hparams", ".", "filter_size", "=", "512", "\n", "hparams", ".", "num_heads", "=", "4", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_test": [[1614, 1622], ["transformer_base"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_test", "(", ")", ":", "\n", "  ", "hparams", "=", "transformer_base", "(", ")", "\n", "hparams", ".", "num_hidden_layers", "=", "2", "\n", "hparams", ".", "hidden_size", "=", "16", "\n", "hparams", ".", "filter_size", "=", "8", "\n", "hparams", ".", "num_heads", "=", "2", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_small": [[1624, 1632], ["quaternion.quaternion_transformer_base"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_small", "(", ")", ":", "\n", "  ", "hparams", "=", "quaternion_transformer_base", "(", ")", "\n", "hparams", ".", "num_hidden_layers", "=", "2", "\n", "hparams", ".", "hidden_size", "=", "256", "\n", "hparams", ".", "filter_size", "=", "1024", "\n", "hparams", ".", "num_heads", "=", "4", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_l2": [[1634, 1639], ["transformer_base"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_l2", "(", ")", ":", "\n", "  ", "hparams", "=", "transformer_base", "(", ")", "\n", "hparams", ".", "num_hidden_layers", "=", "2", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_l4": [[1641, 1646], ["transformer_base"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_l4", "(", ")", ":", "\n", "  ", "hparams", "=", "transformer_base", "(", ")", "\n", "hparams", ".", "num_hidden_layers", "=", "4", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_l8": [[1648, 1653], ["transformer_base"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_l8", "(", ")", ":", "\n", "  ", "hparams", "=", "transformer_base", "(", ")", "\n", "hparams", ".", "num_hidden_layers", "=", "8", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_l10": [[1655, 1660], ["transformer_base"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_l10", "(", ")", ":", "\n", "  ", "hparams", "=", "transformer_base", "(", ")", "\n", "hparams", ".", "num_hidden_layers", "=", "10", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_h1": [[1662, 1667], ["transformer_base"], "function", ["None"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_h1", "(", ")", ":", "\n", "  ", "hparams", "=", "transformer_base", "(", ")", "\n", "hparams", ".", "num_heads", "=", "1", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_prepend_v2": [[1814, 1820], ["quaternion.quaternion_transformer_base_v2"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_v2"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_prepend_v2", "(", ")", ":", "\n", "  ", "hparams", "=", "quaternion_transformer_base_v2", "(", ")", "\n", "hparams", ".", "prepend_mode", "=", "\"prepend_inputs_masked_attention\"", "\n", "hparams", ".", "max_length", "=", "0", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_prepend_v1": [[1822, 1828], ["quaternion.quaternion_transformer_base_v1"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base_v1"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_prepend_v1", "(", ")", ":", "\n", "  ", "hparams", "=", "quaternion_transformer_base_v1", "(", ")", "\n", "hparams", ".", "prepend_mode", "=", "\"prepend_inputs_masked_attention\"", "\n", "hparams", ".", "max_length", "=", "0", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_prepend": [[1830, 1833], ["quaternion.quaternion_transformer_prepend_v2"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_prepend_v2"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_prepend", "(", ")", ":", "\n", "  ", "return", "quaternion_transformer_prepend_v2", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_prepend_mem_8": [[1834, 1838], ["quaternion.quaternion_transformer_prepend_v2"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_prepend_v2"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_prepend_mem_8", "(", ")", ":", "\n", "  ", "hparams", ".", "num_mem", "=", "8", "\n", "return", "quaternion_transformer_prepend_v2", "(", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_relative": [[1853, 1861], ["quaternion.quaternion_transformer_base"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_base"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_relative", "(", ")", ":", "\n", "  ", "\"\"\"Use relative position embeddings instead of absolute position encodings.\"\"\"", "\n", "hparams", "=", "quaternion_transformer_base", "(", ")", "\n", "hparams", ".", "pos", "=", "None", "\n", "hparams", ".", "self_attention_type", "=", "\"dot_product_relative\"", "\n", "hparams", ".", "max_relative_position", "=", "20", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_relative_tiny": [[1863, 1871], ["quaternion.quaternion_transformer_relative"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_relative"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_relative_tiny", "(", ")", ":", "\n", "  ", "hparams", "=", "quaternion_transformer_relative", "(", ")", "\n", "hparams", ".", "num_hidden_layers", "=", "2", "\n", "hparams", ".", "hidden_size", "=", "128", "\n", "hparams", ".", "filter_size", "=", "512", "\n", "hparams", ".", "num_heads", "=", "4", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_relative_big": [[1873, 1880], ["quaternion.quaternion_transformer_big"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_big"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_relative_big", "(", ")", ":", "\n", "  ", "hparams", "=", "quaternion_transformer_big", "(", ")", "\n", "hparams", ".", "pos", "=", "None", "\n", "hparams", ".", "self_attention_type", "=", "\"dot_product_relative\"", "\n", "hparams", ".", "max_relative_position", "=", "20", "\n", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_timeseries": [[1882, 1888], ["quaternion.quaternion_transformer_small"], "function", ["home.repos.pwc.inspect_result.vanzytay_QuaternionTransformers.models.quaternion.quaternion_transformer_small"], ["", "@", "registry", ".", "register_hparams", "\n", "def", "quaternion_transformer_timeseries", "(", ")", ":", "\n", "  ", "hparams", "=", "quaternion_transformer_small", "(", ")", "\n", "hparams", ".", "batch_size", "=", "256", "\n", "hparams", ".", "learning_rate_warmup_steps", "=", "2000", "\n", "return", "hparams", "\n", "\n"]]}