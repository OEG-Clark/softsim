{"home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.remap_values.remap": [[14, 25], ["warnings.catch_warnings", "warnings.filterwarnings", "skimage.io.imread", "set().issubset", "changes.items", "skimage.io.imsave", "set", "numpy.unique", "set", "numpy.unique"], "function", ["None"], ["def", "remap", "(", "changes", ":", "Dict", "[", "int", ",", "int", "]", ",", "filename", ":", "str", ")", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ",", "category", "=", "UserWarning", ")", "\n", "\n", "acc", "=", "imread", "(", "filename", ")", "\n", "assert", "set", "(", "np", ".", "unique", "(", "acc", ")", ")", ".", "issubset", "(", "changes", ")", ",", "(", "set", "(", "changes", ")", ",", "np", ".", "unique", "(", "acc", ")", ")", "\n", "\n", "for", "a", ",", "b", "in", "changes", ".", "items", "(", ")", ":", "\n", "            ", "acc", "[", "acc", "==", "a", "]", "=", "b", "\n", "\n", "", "imsave", "(", "filename", ",", "acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.remap_values.main": [[27, 36], ["pathlib.Path", "eval", "functools.partial", "map", "utils.mmap_", "len", "pathlib.Path.glob"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.mmap_"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "assert", "len", "(", "argv", ")", "==", "3", "\n", "\n", "folder", "=", "Path", "(", "argv", "[", "1", "]", ")", "\n", "changes", "=", "eval", "(", "argv", "[", "2", "]", ")", "\n", "remap_", "=", "partial", "(", "remap", ",", "changes", ")", "\n", "\n", "targets", ":", "Iterable", "[", "str", "]", "=", "map", "(", "str", ",", "folder", ".", "glob", "(", "\"*.png\"", ")", ")", "\n", "mmap_", "(", "remap_", ",", "targets", ")", "\n", "# for filename in targets:", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.train_regression.main": [[22, 133], ["print", "networks.resnext101.to", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "functools.partial", "functools.partial", "utils.map_", "utils.map_", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "print", "range", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.load", "torch.load", "torch.load", "networks.resnext101.parameters", "pathlib.Path().glob", "pathlib.Path", "pathlib.Path().glob", "pathlib.Path", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "float", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torchvision.models.resnet101", "print", "print", "torch.Linear", "print", "networks.resnext101", "functools.partial", "operator.itemgetter", "str", "str", "train_regression.do_epc", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train_regression.do_epc", "[].mean", "print", "print", "pathlib.Path().parent.mkdir", "torch.save", "torch.save", "torch.save", "img.convert", "torch.tensor", "torch.tensor", "torch.tensor", "img.convert", "torch.tensor", "torch.tensor", "torch.tensor", "pathlib.Path", "pathlib.Path", "len", "len", "len", "len", "print", "numpy.array", "numpy.array", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.resnext101", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.train_regression.do_epc", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.train_regression.do_epc", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.save", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.save", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.save"], ["def", "main", "(", "args", ":", "argparse", ".", "Namespace", ")", "->", "None", ":", "\n", "    ", "print", "(", "\"\\n>>> Setting up\"", ")", "\n", "cpu", ":", "bool", "=", "args", ".", "cpu", "or", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "if", "cpu", "else", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "args", ".", "weights", ":", "\n", "        ", "print", "(", "f\">> Loading weights from {args.weights}\"", ")", "\n", "net", "=", "torch", ".", "load", "(", "args", ".", "weights", ")", "\n", "", "elif", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "\">> Starting from pre-trained network\"", ")", "\n", "net", "=", "models", ".", "resnet101", "(", "pretrained", "=", "True", ")", "\n", "print", "(", "\"> Recreating its last FC layer\"", ")", "\n", "in_", ",", "out_", "=", "net", ".", "fc", ".", "in_features", ",", "net", ".", "fc", ".", "out_features", "\n", "print", "(", "f\"> Going from shape {(in_, out_)} to {(8192, args.n_class)}\"", ")", "\n", "net", ".", "fc", "=", "nn", ".", "Linear", "(", "8192", ",", "args", ".", "n_class", ")", "# Change only the last layer", "\n", "", "else", ":", "\n", "        ", "print", "(", "\">> Using a brand new netwerk\"", ")", "\n", "net", "=", "resnext101", "(", "baseWidth", "=", "args", ".", "base_width", ",", "cardinality", "=", "args", ".", "cardinality", ",", "n_class", "=", "args", ".", "n_class", ")", "\n", "", "net", ".", "to", "(", "device", ")", "\n", "\n", "lr", ":", "float", "=", "args", ".", "lr", "\n", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# Dataloaderz and shitz", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "png_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "img", ":", "img", ".", "convert", "(", "'L'", ")", ",", "\n", "lambda", "img", ":", "np", ".", "array", "(", "img", ")", "[", "np", ".", "newaxis", ",", "...", "]", ",", "\n", "lambda", "nd", ":", "nd", "/", "255", ",", "# max <= 1", "\n", "lambda", "nd", ":", "torch", ".", "tensor", "(", "nd", ",", "dtype", "=", "torch", ".", "float32", ")", ",", "\n", "normalize", "if", "args", ".", "pretrained", "else", "id_", "\n", "]", ")", "\n", "gt_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "img", ":", "img", ".", "convert", "(", "'L'", ")", ",", "\n", "lambda", "img", ":", "np", ".", "array", "(", "img", ")", "[", "np", ".", "newaxis", ",", "...", "]", ",", "\n", "lambda", "nd", ":", "torch", ".", "tensor", "(", "nd", ",", "dtype", "=", "torch", ".", "int64", ")", ",", "\n", "partial", "(", "class2one_hot", ",", "C", "=", "args", ".", "n_class", ")", ",", "\n", "itemgetter", "(", "0", ")", "\n", "]", ")", "\n", "\n", "gen_dataset", "=", "partial", "(", "SliceDataset", ",", "\n", "transforms", "=", "[", "png_transform", ",", "gt_transform", "]", ",", "\n", "are_hots", "=", "[", "False", ",", "True", "]", ",", "\n", "debug", "=", "args", ".", "debug", ",", "\n", "C", "=", "args", ".", "n_class", ",", "\n", "in_memory", "=", "args", ".", "in_memory", ",", "\n", "bounds_generators", "=", "[", "]", ",", "\n", "ignore_norm", "=", "args", ".", "pretrained", ")", "\n", "\n", "data_loader", "=", "partial", "(", "DataLoader", ",", "\n", "num_workers", "=", "args", ".", "batch_size", "+", "5", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "train_filenames", ":", "List", "[", "str", "]", "=", "map_", "(", "lambda", "p", ":", "str", "(", "p", ".", "name", ")", ",", "Path", "(", "args", ".", "data_root", ",", "args", ".", "train_subfolder", ",", "\"img\"", ")", ".", "glob", "(", "\"*\"", ")", ")", "\n", "train_folders", ":", "List", "[", "Path", "]", "=", "[", "Path", "(", "args", ".", "data_root", ",", "args", ".", "train_subfolder", ",", "f", ")", "for", "f", "in", "[", "\"img\"", ",", "\"gt\"", "]", "]", "\n", "\n", "val_filenames", ":", "List", "[", "str", "]", "=", "map_", "(", "lambda", "p", ":", "str", "(", "p", ".", "name", ")", ",", "Path", "(", "args", ".", "data_root", ",", "args", ".", "val_subfolder", ",", "\"img\"", ")", ".", "glob", "(", "\"*\"", ")", ")", "\n", "val_folders", ":", "List", "[", "Path", "]", "=", "[", "Path", "(", "args", ".", "data_root", ",", "args", ".", "val_subfolder", ",", "f", ")", "for", "f", "in", "[", "\"img\"", ",", "\"gt\"", "]", "]", "\n", "\n", "train_set", ":", "Dataset", "=", "gen_dataset", "(", "train_filenames", ",", "train_folders", ",", "augment", "=", "args", ".", "augment", ")", "\n", "val_set", ":", "Dataset", "=", "gen_dataset", "(", "val_filenames", ",", "val_folders", ")", "\n", "\n", "train_loader", ":", "DataLoader", "=", "data_loader", "(", "train_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "val_loader", ":", "DataLoader", "=", "data_loader", "(", "val_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "\n", "print", "(", ")", "\n", "\n", "best_perf", ":", "float", "=", "-", "1", "\n", "best_epc", ":", "int", "=", "-", "1", "\n", "\n", "metrics", ":", "Dict", "[", "str", ",", "Tensor", "]", "=", "{", "\"tra_loss\"", ":", "torch", ".", "zeros", "(", "(", "args", ".", "epc", ",", "len", "(", "train_loader", ")", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ",", "\n", "\"tra_diff\"", ":", "torch", ".", "zeros", "(", "(", "args", ".", "epc", ",", "len", "(", "train_set", ")", ",", "args", ".", "n_class", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ",", "\n", "\"val_loss\"", ":", "torch", ".", "zeros", "(", "(", "args", ".", "epc", ",", "len", "(", "val_loader", ")", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ",", "\n", "\"val_diff\"", ":", "torch", ".", "zeros", "(", "(", "args", ".", "epc", ",", "len", "(", "val_set", ")", ",", "args", ".", "n_class", ")", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "}", "\n", "for", "i", "in", "range", "(", "args", ".", "epc", ")", ":", "\n", "        ", "sizes", ":", "Tensor", "\n", "predicted_sizes", ":", "Tensor", "\n", "loss", ":", "Tensor", "\n", "\n", "if", "not", "args", ".", "no_training", ":", "\n", "            ", "net", ",", "train_metrics", "=", "do_epc", "(", "i", ",", "\"train\"", ",", "net", ",", "train_loader", ",", "device", ",", "criterion", ",", "args", ",", "optimizer", ")", "\n", "for", "k", "in", "train_metrics", ":", "\n", "                ", "metrics", "[", "\"tra_\"", "+", "k", "]", "[", "i", "]", "=", "train_metrics", "[", "k", "]", "[", "...", "]", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "net", ",", "val_metrics", "=", "do_epc", "(", "i", ",", "\"val\"", ",", "net", ",", "val_loader", ",", "device", ",", "criterion", ",", "args", ")", "\n", "for", "k", "in", "val_metrics", ":", "\n", "                ", "metrics", "[", "\"val_\"", "+", "k", "]", "[", "i", "]", "=", "val_metrics", "[", "k", "]", "[", "...", "]", "\n", "\n", "", "", "epc_perf", ":", "float", "=", "float", "(", "metrics", "[", "\"val_diff\"", "]", "[", "i", ",", "...", ",", "args", ".", "idc", "]", ".", "mean", "(", ")", ")", "\n", "if", "epc_perf", "<", "best_perf", "or", "i", "==", "0", ":", "\n", "            ", "best_perf", "=", "epc_perf", "\n", "best_epc", "=", "i", "\n", "\n", "print", "(", "f\"> Best results at epoch {best_epc}: diff: {best_perf:12.2f}\"", ")", "\n", "print", "(", "f\"> Saving network weights to {args.save_dest}\"", ")", "\n", "Path", "(", "args", ".", "save_dest", ")", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "net", ",", "args", ".", "save_dest", ")", "\n", "\n", "", "if", "i", "in", "[", "args", ".", "epc", "//", "2", ",", "3", "*", "args", ".", "epc", "//", "4", "]", ":", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "lr", "*=", "0.5", "\n", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "print", "(", "f'> New learning Rate: {lr}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.train_regression.do_epc": [[135, 198], ["len", "len", "utils.tqdm_", "enumerate", "utils.tqdm_.close", "print", "net.train", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.einsum().type", "net", "criterion", "criterion.detach().item", "utils.tqdm_.set_postfix", "utils.tqdm_.update", "net.eval", "e.to", "len", "len", "len", "optimizer.zero_grad", "images.view", "torch.stack", "torch.stack", "torch.stack", "criterion.backward", "optimizer.step", "torch.abs", "torch.abs", "torch.abs", "[].mean", "[].mean", "torch.einsum", "criterion.detach", "stat_dict.items", "net.detach", "einsum().type.detach", "nice_dict.items"], "function", ["None"], ["", "", "", "", "def", "do_epc", "(", "epc", ":", "int", ",", "mode", ":", "str", ",", "net", ":", "Any", ",", "loader", ":", "DataLoader", ",", "device", ",", "criterion", ",", "args", ",", "\n", "optimizer", ":", "Any", "=", "None", ")", "->", "Tuple", "[", "Any", ",", "Dict", "[", "str", ",", "Tensor", "]", "]", ":", "\n", "    ", "assert", "mode", "in", "[", "\"train\"", ",", "\"val\"", "]", "\n", "\n", "desc", ":", "str", "\n", "if", "mode", "==", "\"train\"", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "desc", "=", "f\">> Training   ({epc})\"", "\n", "", "elif", "mode", "==", "\"val\"", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "desc", "=", "f\">> Validation ({epc})\"", "\n", "\n", "", "total_iteration", ":", "int", "=", "len", "(", "loader", ")", "# U", "\n", "total_images", ":", "int", "=", "len", "(", "loader", ".", "dataset", ")", "# D", "\n", "\n", "metrics", "=", "{", "\"loss\"", ":", "torch", ".", "zeros", "(", "(", "total_iteration", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ",", "\n", "\"diff\"", ":", "torch", ".", "zeros", "(", "(", "total_images", ",", "args", ".", "n_class", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "}", "\n", "\n", "tq_iter", "=", "tqdm_", "(", "total", "=", "total_iteration", ",", "desc", "=", "desc", ")", "\n", "done_img", ":", "int", "=", "0", "\n", "for", "j", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "data", "[", "1", ":", "]", "=", "[", "e", ".", "to", "(", "device", ")", "for", "e", "in", "data", "[", "1", ":", "]", "]", "# Move all tensors to device", "\n", "# filenames, images, targets = data[:3]", "\n", "filenames", ",", "images", ",", "targets", "=", "data", "\n", "assert", "len", "(", "filenames", ")", "==", "len", "(", "images", ")", "==", "len", "(", "targets", ")", "\n", "B", ":", "int", "=", "len", "(", "images", ")", "\n", "\n", "sizes", "=", "einsum", "(", "\"bcwh->bc\"", ",", "targets", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "if", "optimizer", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "if", "args", ".", "pretrained", ":", "\n", "            ", "b", ",", "c", ",", "w", ",", "h", "=", "images", ".", "shape", "\n", "assert", "c", "==", "1", "\n", "viewed", "=", "images", ".", "view", "(", "(", "b", ",", "w", ",", "h", ")", ")", "\n", "new_img", "=", "torch", ".", "stack", "(", "[", "viewed", ",", "viewed", ",", "viewed", "]", ",", "dim", "=", "1", ")", "\n", "assert", "new_img", ".", "shape", "==", "(", "b", ",", "3", ",", "w", ",", "h", ")", ",", "new_img", ".", "shape", "\n", "images", "=", "new_img", "\n", "\n", "", "predicted_sizes", "=", "net", "(", "images", ")", "\n", "assert", "sizes", ".", "shape", "==", "predicted_sizes", ".", "shape", "\n", "\n", "loss", "=", "criterion", "(", "predicted_sizes", "[", ":", ",", "args", ".", "idc", "]", ",", "sizes", "[", ":", ",", "args", ".", "idc", "]", ")", "\n", "\n", "if", "optimizer", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "metrics", "[", "\"loss\"", "]", "[", "j", "]", "=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "metrics", "[", "\"diff\"", "]", "[", "done_img", ":", "done_img", "+", "B", ",", "...", "]", "=", "torch", ".", "abs", "(", "predicted_sizes", ".", "detach", "(", ")", "-", "sizes", ".", "detach", "(", ")", ")", "[", "...", "]", "\n", "\n", "stat_dict", ":", "Dict", "=", "{", "\"loss\"", ":", "metrics", "[", "\"loss\"", "]", "[", ":", "j", "]", ".", "mean", "(", ")", ",", "\n", "\"diff\"", ":", "metrics", "[", "\"diff\"", "]", "[", ":", "done_img", "+", "B", ",", "args", ".", "idc", "]", ".", "mean", "(", ")", "}", "\n", "nice_dict", ":", "Dict", "=", "{", "k", ":", "f\"{v:12.2f}\"", "for", "(", "k", ",", "v", ")", "in", "stat_dict", ".", "items", "(", ")", "}", "\n", "\n", "done_img", "+=", "B", "\n", "tq_iter", ".", "set_postfix", "(", "nice_dict", ")", "\n", "tq_iter", ".", "update", "(", "1", ")", "\n", "", "tq_iter", ".", "close", "(", ")", "\n", "print", "(", "f\"{desc} \"", "+", "', '", ".", "join", "(", "f\"{k}={v}\"", "for", "(", "k", ",", "v", ")", "in", "nice_dict", ".", "items", "(", ")", ")", ")", "\n", "\n", "return", "net", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.train_regression.get_args": [[200, 233], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["None"], ["", "def", "get_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Hyperparams'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--n_class\"", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_dest\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_root\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--epc\"", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_subfolder\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--val_subfolder\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--idc\"", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--cardinality'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'ResNet cardinality (group).'", ")", "\n", "parser", ".", "add_argument", "(", "'--base-width'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'ResNet base width.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "'--learning-rate'", ",", "default", "=", "0.0000005", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'LR'", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.9", ",", "type", "=", "float", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'W'", ",", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--augment'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--weights'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pretrained\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_training\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Trick to rerun evaluation a trained network.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cpu\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--in_memory\"", ",", "action", "=", "'store_true'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "\"\\n\"", ",", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.main": [[14, 32], ["print", "list", "print", "utils.map_", "functools.partial", "utils.mmap_", "pathlib.Path().glob", "pathlib.Path", "d_folder.mkdir", "folders[].glob", "str", "pathlib.Path", "len", "utils.map_"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.mmap_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_"], ["def", "main", "(", "args", ":", "argparse", ".", "Namespace", ")", "->", "None", ":", "\n", "    ", "print", "(", "f'>>> Starting data augmentation (original + {args.n_aug} new images)'", ")", "\n", "\n", "root_dir", ":", "str", "=", "args", ".", "root_dir", "\n", "dest_dir", ":", "str", "=", "args", ".", "dest_dir", "\n", "\n", "folders", ":", "List", "[", "Path", "]", "=", "list", "(", "Path", "(", "root_dir", ")", ".", "glob", "(", "\"*\"", ")", ")", "\n", "dest_folders", ":", "List", "[", "Path", "]", "=", "[", "Path", "(", "dest_dir", ",", "p", ".", "name", ")", "for", "p", "in", "folders", "]", "\n", "print", "(", "f\"Will augment data from {len(folders)} folders ({map_(str, folders)})\"", ")", "\n", "\n", "# Create all the destination folders", "\n", "for", "d_folder", "in", "dest_folders", ":", "\n", "        ", "d_folder", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "names", ":", "List", "[", "str", "]", "=", "map_", "(", "lambda", "p", ":", "str", "(", "p", ".", "name", ")", ",", "folders", "[", "0", "]", ".", "glob", "(", "\"*.png\"", ")", ")", "\n", "\n", "partial_process", "=", "partial", "(", "process_name", ",", "folders", "=", "folders", ",", "dest_folders", "=", "dest_folders", ",", "n_aug", "=", "args", ".", "n_aug", ",", "args", "=", "args", ")", "\n", "mmap_", "(", "partial_process", ",", "names", ")", "\n", "# for name in tqdm(names, ncols=75):", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.process_name": [[36, 51], ["augment.save", "range", "PIL.Image.open().convert", "pathlib.Path", "utils.augment", "augment.save", "PIL.Image.open", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.save", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.augment", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.save"], ["", "def", "process_name", "(", "name", ":", "str", ",", "folders", ":", "List", "[", "Path", "]", ",", "dest_folders", ":", "List", "[", "Path", "]", ",", "n_aug", ":", "int", ",", "args", ")", "->", "None", ":", "\n", "    ", "images", ":", "List", "[", "Image", ".", "Image", "]", "=", "[", "Image", ".", "open", "(", "Path", "(", "folder", ",", "name", ")", ")", ".", "convert", "(", "'L'", ")", "for", "folder", "in", "folders", "]", "\n", "\n", "stem", ":", "str", "=", "Path", "(", "name", ")", ".", "stem", "\n", "\n", "# Save the unmodified images as _0", "\n", "save", "(", "stem", ",", "0", ",", "images", ",", "dest_folders", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "n_aug", "+", "1", ")", ":", "\n", "        ", "augmented", ":", "List", "[", "Image", ".", "Image", "]", "=", "augment", "(", "*", "images", ",", "\n", "rotate_angle", "=", "args", ".", "rotate_angle", ",", "\n", "flip", "=", "args", ".", "flip", ",", "\n", "mirror", "=", "args", ".", "mirror", ",", "\n", "rotate", "=", "args", ".", "rotate", ",", "\n", "scale", "=", "args", ".", "scale", ")", "\n", "save", "(", "stem", ",", "i", ",", "augmented", ",", "dest_folders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.save": [[53, 58], ["zip", "len", "len", "img.save", "pathlib.Path().with_suffix", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.save"], ["", "", "def", "save", "(", "stem", ":", "str", ",", "n", ":", "int", ",", "imgs", ":", "List", "[", "Image", ".", "Image", "]", ",", "dest_folders", ":", "List", "[", "Path", "]", ")", ":", "\n", "    ", "assert", "len", "(", "imgs", ")", "==", "len", "(", "dest_folders", ")", "\n", "\n", "for", "img", ",", "folder", "in", "zip", "(", "imgs", ",", "dest_folders", ")", ":", "\n", "        ", "img", ".", "save", "(", "Path", "(", "folder", ",", "f\"{n}_{stem}\"", ")", ".", "with_suffix", "(", "\".png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.get_args": [[60, 77], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["None"], ["", "", "def", "get_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Data augmentation parameters'", ")", "\n", "parser", ".", "add_argument", "(", "'--root_dir'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--dest_dir'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--n_aug'", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--flip'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--mirror'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--rotate'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--scale'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--rotate_angle'", ",", "type", "=", "float", ",", "default", "=", "45", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.Dummy.__init__": [[27, 32], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ":", "int", ",", "out_dim", ":", "int", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "down", "=", "nn", ".", "Conv2d", "(", "in_dim", ",", "10", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "10", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.Dummy.forward": [[33, 35], ["networks.Dummy.up", "networks.Dummy.down"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "up", "(", "self", ".", "down", "(", "input", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleNeckDownSampling.__init__": [[41, 59], ["torch.nn.Module.__init__", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "layers.conv_block_1", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.PReLU", "torch.nn.PReLU", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "projectionFactor", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Main branch", "\n", "self", ".", "maxpool0", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "return_indices", "=", "True", ")", "\n", "# Secondary branch", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "in_dim", ",", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ")", "\n", "self", ".", "PReLU0", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ")", "\n", "self", ".", "PReLU1", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "self", ".", "block2", "=", "conv_block_1", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "out_dim", ")", "\n", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p", "=", "0.01", ")", "\n", "self", ".", "PReLU3", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleNeckDownSampling.forward": [[60, 91], ["networks.BottleNeckDownSampling.maxpool0", "networks.BottleNeckDownSampling.conv0", "networks.BottleNeckDownSampling.bn0", "networks.BottleNeckDownSampling.PReLU0", "networks.BottleNeckDownSampling.conv1", "networks.BottleNeckDownSampling.bn1", "networks.BottleNeckDownSampling.PReLU1", "networks.BottleNeckDownSampling.block2", "networks.BottleNeckDownSampling.do", "abs", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.BottleNeckDownSampling.PReLU3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Main branch", "\n", "        ", "maxpool_output", ",", "indices", "=", "self", ".", "maxpool0", "(", "input", ")", "\n", "\n", "# Secondary branch", "\n", "c0", "=", "self", ".", "conv0", "(", "input", ")", "\n", "b0", "=", "self", ".", "bn0", "(", "c0", ")", "\n", "p0", "=", "self", ".", "PReLU0", "(", "b0", ")", "\n", "\n", "c1", "=", "self", ".", "conv1", "(", "p0", ")", "\n", "b1", "=", "self", ".", "bn1", "(", "c1", ")", "\n", "p1", "=", "self", ".", "PReLU1", "(", "b1", ")", "\n", "\n", "p2", "=", "self", ".", "block2", "(", "p1", ")", "\n", "\n", "do", "=", "self", ".", "do", "(", "p2", ")", "\n", "\n", "# Zero padding the feature maps from the main branch", "\n", "depth_to_pad", "=", "abs", "(", "maxpool_output", ".", "shape", "[", "1", "]", "-", "do", ".", "shape", "[", "1", "]", ")", "\n", "padding", "=", "torch", ".", "zeros", "(", "maxpool_output", ".", "shape", "[", "0", "]", ",", "depth_to_pad", ",", "maxpool_output", ".", "shape", "[", "2", "]", ",", "\n", "maxpool_output", ".", "shape", "[", "3", "]", ",", "device", "=", "maxpool_output", ".", "device", ")", "\n", "maxpool_output_pad", "=", "torch", ".", "cat", "(", "(", "maxpool_output", ",", "padding", ")", ",", "1", ")", "\n", "output", "=", "maxpool_output_pad", "+", "do", "\n", "\n", "# _, c, _, _ = maxpool_output.shape", "\n", "# output = do", "\n", "# output[:, :c, :, :] += maxpool_output", "\n", "\n", "final_output", "=", "self", ".", "PReLU3", "(", "output", ")", "\n", "\n", "return", "final_output", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleNeckDownSamplingDilatedConv.__init__": [[94, 110], ["torch.nn.Module.__init__", "layers.conv_block_1", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "layers.conv_block_1", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.PReLU", "torch.nn.PReLU", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "projectionFactor", ",", "out_dim", ",", "dilation", ")", ":", "\n", "        ", "super", "(", "BottleNeckDownSamplingDilatedConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Main branch", "\n", "\n", "# Secondary branch", "\n", "self", ".", "block0", "=", "conv_block_1", "(", "in_dim", ",", "int", "(", "in_dim", "/", "projectionFactor", ")", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ")", "\n", "self", ".", "PReLU1", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "self", ".", "block2", "=", "conv_block_1", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "out_dim", ")", "\n", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p", "=", "0.01", ")", "\n", "self", ".", "PReLU3", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleNeckDownSamplingDilatedConv.forward": [[111, 127], ["networks.BottleNeckDownSamplingDilatedConv.block0", "networks.BottleNeckDownSamplingDilatedConv.conv1", "networks.BottleNeckDownSamplingDilatedConv.bn1", "networks.BottleNeckDownSamplingDilatedConv.PReLU1", "networks.BottleNeckDownSamplingDilatedConv.block2", "networks.BottleNeckDownSamplingDilatedConv.do", "networks.BottleNeckDownSamplingDilatedConv.PReLU3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Secondary branch", "\n", "        ", "b0", "=", "self", ".", "block0", "(", "input", ")", "\n", "\n", "c1", "=", "self", ".", "conv1", "(", "b0", ")", "\n", "b1", "=", "self", ".", "bn1", "(", "c1", ")", "\n", "p1", "=", "self", ".", "PReLU1", "(", "b1", ")", "\n", "\n", "b2", "=", "self", ".", "block2", "(", "p1", ")", "\n", "\n", "do", "=", "self", ".", "do", "(", "b2", ")", "\n", "\n", "output", "=", "input", "+", "do", "\n", "output", "=", "self", ".", "PReLU3", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleNeckDownSamplingDilatedConvLast.__init__": [[130, 147], ["torch.nn.Module.__init__", "layers.conv_block_1", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "layers.conv_block_1", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "projectionFactor", ",", "out_dim", ",", "dilation", ")", ":", "\n", "        ", "super", "(", "BottleNeckDownSamplingDilatedConvLast", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Main branch", "\n", "\n", "# Secondary branch", "\n", "self", ".", "block0", "=", "conv_block_1", "(", "in_dim", ",", "int", "(", "in_dim", "/", "projectionFactor", ")", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ")", "\n", "self", ".", "PReLU1", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "self", ".", "block2", "=", "conv_block_1", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "out_dim", ")", "\n", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p", "=", "0.01", ")", "\n", "self", ".", "conv_out", "=", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "PReLU3", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleNeckDownSamplingDilatedConvLast.forward": [[148, 165], ["networks.BottleNeckDownSamplingDilatedConvLast.block0", "networks.BottleNeckDownSamplingDilatedConvLast.conv1", "networks.BottleNeckDownSamplingDilatedConvLast.bn1", "networks.BottleNeckDownSamplingDilatedConvLast.PReLU1", "networks.BottleNeckDownSamplingDilatedConvLast.block2", "networks.BottleNeckDownSamplingDilatedConvLast.do", "networks.BottleNeckDownSamplingDilatedConvLast.PReLU3", "networks.BottleNeckDownSamplingDilatedConvLast.conv_out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "# Secondary branch", "\n", "        ", "b0", "=", "self", ".", "block0", "(", "input", ")", "\n", "\n", "c1", "=", "self", ".", "conv1", "(", "b0", ")", "\n", "b1", "=", "self", ".", "bn1", "(", "c1", ")", "\n", "p1", "=", "self", ".", "PReLU1", "(", "b1", ")", "\n", "\n", "b2", "=", "self", ".", "block2", "(", "p1", ")", "\n", "\n", "do", "=", "self", ".", "do", "(", "b2", ")", "\n", "\n", "output", "=", "self", ".", "conv_out", "(", "input", ")", "+", "do", "\n", "output", "=", "self", ".", "PReLU3", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleNeckNormal.__init__": [[168, 184], ["torch.nn.Module.__init__", "layers.conv_block_1", "layers.conv_block_3_3", "layers.conv_block_1", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.PReLU", "torch.nn.PReLU", "int", "int", "int", "int", "layers.conv_block_1"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_3_3", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "projectionFactor", ",", "dropoutRate", ")", ":", "\n", "        ", "super", "(", "BottleNeckNormal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "# Main branch", "\n", "\n", "# Secondary branch", "\n", "self", ".", "block0", "=", "conv_block_1", "(", "in_dim", ",", "int", "(", "in_dim", "/", "projectionFactor", ")", ")", "\n", "self", ".", "block1", "=", "conv_block_3_3", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "int", "(", "in_dim", "/", "projectionFactor", ")", ")", "\n", "self", ".", "block2", "=", "conv_block_1", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "out_dim", ")", "\n", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p", "=", "dropoutRate", ")", "\n", "self", ".", "PReLU_out", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "if", "in_dim", ">", "out_dim", ":", "\n", "            ", "self", ".", "conv_out", "=", "conv_block_1", "(", "in_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleNeckNormal.forward": [[185, 200], ["networks.BottleNeckNormal.block0", "networks.BottleNeckNormal.block1", "networks.BottleNeckNormal.block2", "networks.BottleNeckNormal.do", "networks.BottleNeckNormal.PReLU_out", "networks.BottleNeckNormal.conv_out"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Main branch", "\n", "# Secondary branch", "\n", "        ", "b0", "=", "self", ".", "block0", "(", "input", ")", "\n", "b1", "=", "self", ".", "block1", "(", "b0", ")", "\n", "b2", "=", "self", ".", "block2", "(", "b1", ")", "\n", "do", "=", "self", ".", "do", "(", "b2", ")", "\n", "\n", "if", "self", ".", "in_dim", ">", "self", ".", "out_dim", ":", "\n", "            ", "output", "=", "self", ".", "conv_out", "(", "input", ")", "+", "do", "\n", "", "else", ":", "\n", "            ", "output", "=", "input", "+", "do", "\n", "", "output", "=", "self", ".", "PReLU_out", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleNeckNormal_Asym.__init__": [[203, 219], ["torch.nn.Module.__init__", "layers.conv_block_1", "layers.conv_block_Asym", "layers.conv_block_1", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.PReLU", "torch.nn.PReLU", "int", "int", "int", "int", "layers.conv_block_1"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_Asym", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "projectionFactor", ",", "dropoutRate", ")", ":", "\n", "        ", "super", "(", "BottleNeckNormal_Asym", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "# Main branch", "\n", "\n", "# Secondary branch", "\n", "self", ".", "block0", "=", "conv_block_1", "(", "in_dim", ",", "int", "(", "in_dim", "/", "projectionFactor", ")", ")", "\n", "self", ".", "block1", "=", "conv_block_Asym", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "5", ")", "\n", "self", ".", "block2", "=", "conv_block_1", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "out_dim", ")", "\n", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p", "=", "dropoutRate", ")", "\n", "self", ".", "PReLU_out", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "if", "in_dim", ">", "out_dim", ":", "\n", "            ", "self", ".", "conv_out", "=", "conv_block_1", "(", "in_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleNeckNormal_Asym.forward": [[220, 235], ["networks.BottleNeckNormal_Asym.block0", "networks.BottleNeckNormal_Asym.block1", "networks.BottleNeckNormal_Asym.block2", "networks.BottleNeckNormal_Asym.do", "networks.BottleNeckNormal_Asym.PReLU_out", "networks.BottleNeckNormal_Asym.conv_out"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Main branch", "\n", "# Secondary branch", "\n", "        ", "b0", "=", "self", ".", "block0", "(", "input", ")", "\n", "b1", "=", "self", ".", "block1", "(", "b0", ")", "\n", "b2", "=", "self", ".", "block2", "(", "b1", ")", "\n", "do", "=", "self", ".", "do", "(", "b2", ")", "\n", "\n", "if", "self", ".", "in_dim", ">", "self", ".", "out_dim", ":", "\n", "            ", "output", "=", "self", ".", "conv_out", "(", "input", ")", "+", "do", "\n", "", "else", ":", "\n", "            ", "output", "=", "input", "+", "do", "\n", "", "output", "=", "self", ".", "PReLU_out", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleNeckUpSampling.__init__": [[238, 253], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "layers.conv_block_1", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.PReLU", "torch.nn.PReLU", "int", "int", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "projectionFactor", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "BottleNeckUpSampling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Main branch", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "in_dim", ",", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn0", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ")", "\n", "self", ".", "PReLU0", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ")", "\n", "self", ".", "PReLU1", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "self", ".", "block2", "=", "conv_block_1", "(", "int", "(", "in_dim", "/", "projectionFactor", ")", ",", "out_dim", ")", "\n", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p", "=", "0.01", ")", "\n", "self", ".", "PReLU3", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleNeckUpSampling.forward": [[254, 269], ["networks.BottleNeckUpSampling.conv0", "networks.BottleNeckUpSampling.bn0", "networks.BottleNeckUpSampling.PReLU0", "networks.BottleNeckUpSampling.conv1", "networks.BottleNeckUpSampling.bn1", "networks.BottleNeckUpSampling.PReLU1", "networks.BottleNeckUpSampling.block2", "networks.BottleNeckUpSampling.do"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Secondary branch", "\n", "        ", "c0", "=", "self", ".", "conv0", "(", "input", ")", "\n", "b0", "=", "self", ".", "bn0", "(", "c0", ")", "\n", "p0", "=", "self", ".", "PReLU0", "(", "b0", ")", "\n", "\n", "c1", "=", "self", ".", "conv1", "(", "p0", ")", "\n", "b1", "=", "self", ".", "bn1", "(", "c1", ")", "\n", "p1", "=", "self", ".", "PReLU1", "(", "b1", ")", "\n", "\n", "p2", "=", "self", ".", "block2", "(", "p1", ")", "\n", "\n", "do", "=", "self", ".", "do", "(", "p2", ")", "\n", "\n", "return", "do", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.ENet.__init__": [[272, 345], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "networks.BottleNeckDownSampling", "networks.BottleNeckNormal", "networks.BottleNeckNormal", "networks.BottleNeckNormal", "networks.BottleNeckNormal", "networks.BottleNeckDownSampling", "networks.BottleNeckNormal", "networks.BottleNeckDownSamplingDilatedConv", "networks.BottleNeckNormal_Asym", "networks.BottleNeckDownSamplingDilatedConv", "networks.BottleNeckNormal", "networks.BottleNeckDownSamplingDilatedConv", "networks.BottleNeckNormal_Asym", "networks.BottleNeckDownSamplingDilatedConv", "networks.BottleNeckNormal", "networks.BottleNeckDownSamplingDilatedConv", "networks.BottleNeckNormal_Asym", "networks.BottleNeckDownSamplingDilatedConv", "networks.BottleNeckNormal", "networks.BottleNeckDownSamplingDilatedConv", "networks.BottleNeckNormal_Asym", "networks.BottleNeckDownSamplingDilatedConvLast", "torch.nn.MaxUnpool2d", "torch.nn.MaxUnpool2d", "networks.BottleNeckUpSampling", "torch.nn.PReLU", "torch.nn.PReLU", "networks.BottleNeckNormal", "networks.BottleNeckNormal", "torch.nn.MaxUnpool2d", "torch.nn.MaxUnpool2d", "networks.BottleNeckUpSampling", "networks.BottleNeckNormal", "torch.nn.PReLU", "torch.nn.PReLU", "layers.upSampleConv", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.upSampleConv"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "projecting_factor", "=", "4", "\n", "self", ".", "n_kernels", "=", "16", "\n", "\n", "# Initial", "\n", "self", ".", "conv0", "=", "nn", ".", "Conv2d", "(", "nin", ",", "15", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "maxpool0", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "return_indices", "=", "True", ")", "\n", "\n", "# First group", "\n", "self", ".", "bottleNeck1_0", "=", "BottleNeckDownSampling", "(", "self", ".", "n_kernels", ",", "self", ".", "projecting_factor", ",", "self", ".", "n_kernels", "*", "4", ")", "\n", "self", ".", "bottleNeck1_1", "=", "BottleNeckNormal", "(", "self", ".", "n_kernels", "*", "4", ",", "self", ".", "n_kernels", "*", "4", ",", "self", ".", "projecting_factor", ",", "0.01", ")", "\n", "self", ".", "bottleNeck1_2", "=", "BottleNeckNormal", "(", "self", ".", "n_kernels", "*", "4", ",", "self", ".", "n_kernels", "*", "4", ",", "self", ".", "projecting_factor", ",", "0.01", ")", "\n", "self", ".", "bottleNeck1_3", "=", "BottleNeckNormal", "(", "self", ".", "n_kernels", "*", "4", ",", "self", ".", "n_kernels", "*", "4", ",", "self", ".", "projecting_factor", ",", "0.01", ")", "\n", "self", ".", "bottleNeck1_4", "=", "BottleNeckNormal", "(", "self", ".", "n_kernels", "*", "4", ",", "self", ".", "n_kernels", "*", "4", ",", "self", ".", "projecting_factor", ",", "0.01", ")", "\n", "\n", "# Second group", "\n", "self", ".", "bottleNeck2_0", "=", "BottleNeckDownSampling", "(", "self", ".", "n_kernels", "*", "4", ",", "self", ".", "projecting_factor", ",", "self", ".", "n_kernels", "*", "8", ")", "\n", "self", ".", "bottleNeck2_1", "=", "BottleNeckNormal", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "0.1", ")", "\n", "self", ".", "bottleNeck2_2", "=", "BottleNeckDownSamplingDilatedConv", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "self", ".", "n_kernels", "*", "8", ",", "2", ")", "\n", "self", ".", "bottleNeck2_3", "=", "BottleNeckNormal_Asym", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "0.1", ")", "\n", "self", ".", "bottleNeck2_4", "=", "BottleNeckDownSamplingDilatedConv", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "self", ".", "n_kernels", "*", "8", ",", "4", ")", "\n", "self", ".", "bottleNeck2_5", "=", "BottleNeckNormal", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "0.1", ")", "\n", "self", ".", "bottleNeck2_6", "=", "BottleNeckDownSamplingDilatedConv", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "self", ".", "n_kernels", "*", "8", ",", "8", ")", "\n", "self", ".", "bottleNeck2_7", "=", "BottleNeckNormal_Asym", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "0.1", ")", "\n", "self", ".", "bottleNeck2_8", "=", "BottleNeckDownSamplingDilatedConv", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "self", ".", "n_kernels", "*", "8", ",", "16", ")", "\n", "\n", "# Third group", "\n", "self", ".", "bottleNeck3_1", "=", "BottleNeckNormal", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "0.1", ")", "\n", "self", ".", "bottleNeck3_2", "=", "BottleNeckDownSamplingDilatedConv", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "self", ".", "n_kernels", "*", "8", ",", "2", ")", "\n", "self", ".", "bottleNeck3_3", "=", "BottleNeckNormal_Asym", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "0.1", ")", "\n", "self", ".", "bottleNeck3_4", "=", "BottleNeckDownSamplingDilatedConv", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "self", ".", "n_kernels", "*", "8", ",", "4", ")", "\n", "self", ".", "bottleNeck3_5", "=", "BottleNeckNormal", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "0.1", ")", "\n", "self", ".", "bottleNeck3_6", "=", "BottleNeckDownSamplingDilatedConv", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "self", ".", "n_kernels", "*", "8", ",", "8", ")", "\n", "self", ".", "bottleNeck3_7", "=", "BottleNeckNormal_Asym", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "0.1", ")", "\n", "self", ".", "bottleNeck3_8", "=", "BottleNeckDownSamplingDilatedConvLast", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "self", ".", "n_kernels", "*", "4", ",", "16", ")", "\n", "\n", "# ### Decoding path ####", "\n", "# Unpooling 1", "\n", "self", ".", "unpool_0", "=", "nn", ".", "MaxUnpool2d", "(", "2", ")", "\n", "\n", "self", ".", "bottleNeck_Up_1_0", "=", "BottleNeckUpSampling", "(", "self", ".", "n_kernels", "*", "8", ",", "self", ".", "projecting_factor", ",", "\n", "self", ".", "n_kernels", "*", "4", ")", "\n", "self", ".", "PReLU_Up_1", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "self", ".", "bottleNeck_Up_1_1", "=", "BottleNeckNormal", "(", "self", ".", "n_kernels", "*", "4", ",", "self", ".", "n_kernels", "*", "4", ",", "self", ".", "projecting_factor", ",", "\n", "0.1", ")", "\n", "self", ".", "bottleNeck_Up_1_2", "=", "BottleNeckNormal", "(", "self", ".", "n_kernels", "*", "4", ",", "self", ".", "n_kernels", ",", "self", ".", "projecting_factor", ",", "0.1", ")", "\n", "\n", "# Unpooling 2", "\n", "self", ".", "unpool_1", "=", "nn", ".", "MaxUnpool2d", "(", "2", ")", "\n", "self", ".", "bottleNeck_Up_2_1", "=", "BottleNeckUpSampling", "(", "self", ".", "n_kernels", "*", "2", ",", "self", ".", "projecting_factor", ",", "self", ".", "n_kernels", ")", "\n", "self", ".", "bottleNeck_Up_2_2", "=", "BottleNeckNormal", "(", "self", ".", "n_kernels", ",", "self", ".", "n_kernels", ",", "self", ".", "projecting_factor", ",", "0.1", ")", "\n", "self", ".", "PReLU_Up_2", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "# Unpooling Last", "\n", "self", ".", "deconv3", "=", "upSampleConv", "(", "self", ".", "n_kernels", ",", "self", ".", "n_kernels", ")", "\n", "\n", "self", ".", "out_025", "=", "nn", ".", "Conv2d", "(", "self", ".", "n_kernels", "*", "8", ",", "nout", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "out_05", "=", "nn", ".", "Conv2d", "(", "self", ".", "n_kernels", ",", "nout", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "final", "=", "nn", ".", "Conv2d", "(", "self", ".", "n_kernels", ",", "nout", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.ENet.forward": [[346, 404], ["networks.ENet.conv0", "networks.ENet.maxpool0", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.ENet.bottleNeck1_0", "networks.ENet.bottleNeck1_1", "networks.ENet.bottleNeck1_2", "networks.ENet.bottleNeck1_3", "networks.ENet.bottleNeck1_4", "networks.ENet.bottleNeck2_0", "networks.ENet.bottleNeck2_1", "networks.ENet.bottleNeck2_2", "networks.ENet.bottleNeck2_3", "networks.ENet.bottleNeck2_4", "networks.ENet.bottleNeck2_5", "networks.ENet.bottleNeck2_6", "networks.ENet.bottleNeck2_7", "networks.ENet.bottleNeck2_8", "networks.ENet.bottleNeck3_1", "networks.ENet.bottleNeck3_2", "networks.ENet.bottleNeck3_3", "networks.ENet.bottleNeck3_4", "networks.ENet.bottleNeck3_5", "networks.ENet.bottleNeck3_6", "networks.ENet.bottleNeck3_7", "networks.ENet.bottleNeck3_8", "networks.ENet.unpool_0", "networks.ENet.bottleNeck_Up_1_0", "networks.ENet.PReLU_Up_1", "networks.ENet.bottleNeck_Up_1_1", "networks.ENet.bottleNeck_Up_1_2", "networks.ENet.unpool_1", "networks.ENet.bottleNeck_Up_2_1", "networks.ENet.bottleNeck_Up_2_2", "networks.ENet.PReLU_Up_2", "networks.ENet.deconv3", "networks.ENet.final", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv_0", "=", "self", ".", "conv0", "(", "input", ")", "# This will go as res in deconv path", "\n", "maxpool_0", ",", "indices_0", "=", "self", ".", "maxpool0", "(", "input", ")", "\n", "outputInitial", "=", "torch", ".", "cat", "(", "(", "conv_0", ",", "maxpool_0", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# First group", "\n", "bn1_0", ",", "indices_1", "=", "self", ".", "bottleNeck1_0", "(", "outputInitial", ")", "\n", "bn1_1", "=", "self", ".", "bottleNeck1_1", "(", "bn1_0", ")", "\n", "bn1_2", "=", "self", ".", "bottleNeck1_2", "(", "bn1_1", ")", "\n", "bn1_3", "=", "self", ".", "bottleNeck1_3", "(", "bn1_2", ")", "\n", "bn1_4", "=", "self", ".", "bottleNeck1_4", "(", "bn1_3", ")", "\n", "\n", "# Second group", "\n", "bn2_0", ",", "indices_2", "=", "self", ".", "bottleNeck2_0", "(", "bn1_4", ")", "\n", "bn2_1", "=", "self", ".", "bottleNeck2_1", "(", "bn2_0", ")", "\n", "bn2_2", "=", "self", ".", "bottleNeck2_2", "(", "bn2_1", ")", "\n", "bn2_3", "=", "self", ".", "bottleNeck2_3", "(", "bn2_2", ")", "\n", "bn2_4", "=", "self", ".", "bottleNeck2_4", "(", "bn2_3", ")", "\n", "bn2_5", "=", "self", ".", "bottleNeck2_5", "(", "bn2_4", ")", "\n", "bn2_6", "=", "self", ".", "bottleNeck2_6", "(", "bn2_5", ")", "\n", "bn2_7", "=", "self", ".", "bottleNeck2_7", "(", "bn2_6", ")", "\n", "bn2_8", "=", "self", ".", "bottleNeck2_8", "(", "bn2_7", ")", "\n", "\n", "# Third group", "\n", "bn3_1", "=", "self", ".", "bottleNeck3_1", "(", "bn2_8", ")", "\n", "bn3_2", "=", "self", ".", "bottleNeck3_2", "(", "bn3_1", ")", "\n", "bn3_3", "=", "self", ".", "bottleNeck3_3", "(", "bn3_2", ")", "\n", "bn3_4", "=", "self", ".", "bottleNeck3_4", "(", "bn3_3", ")", "\n", "bn3_5", "=", "self", ".", "bottleNeck3_5", "(", "bn3_4", ")", "\n", "bn3_6", "=", "self", ".", "bottleNeck3_6", "(", "bn3_5", ")", "\n", "bn3_7", "=", "self", ".", "bottleNeck3_7", "(", "bn3_6", ")", "\n", "bn3_8", "=", "self", ".", "bottleNeck3_8", "(", "bn3_7", ")", "\n", "\n", "# #### Deconvolution Path ####", "\n", "#  First block #", "\n", "unpool_0", "=", "self", ".", "unpool_0", "(", "bn3_8", ",", "indices_2", ")", "\n", "\n", "# bn_up_1_0 = self.bottleNeck_Up_1_0(unpool_0) # Not concatenate", "\n", "bn_up_1_0", "=", "self", ".", "bottleNeck_Up_1_0", "(", "torch", ".", "cat", "(", "(", "unpool_0", ",", "bn1_4", ")", ",", "dim", "=", "1", ")", ")", "# concatenate", "\n", "\n", "up_block_1", "=", "self", ".", "PReLU_Up_1", "(", "unpool_0", "+", "bn_up_1_0", ")", "\n", "\n", "bn_up_1_1", "=", "self", ".", "bottleNeck_Up_1_1", "(", "up_block_1", ")", "\n", "bn_up_1_2", "=", "self", ".", "bottleNeck_Up_1_2", "(", "bn_up_1_1", ")", "\n", "\n", "#  Second block #", "\n", "unpool_1", "=", "self", ".", "unpool_1", "(", "bn_up_1_2", ",", "indices_1", ")", "\n", "\n", "# bn_up_2_1 = self.bottleNeck_Up_2_1(unpool_1) # Not concatenate", "\n", "bn_up_2_1", "=", "self", ".", "bottleNeck_Up_2_1", "(", "torch", ".", "cat", "(", "(", "unpool_1", ",", "outputInitial", ")", ",", "dim", "=", "1", ")", ")", "# concatenate", "\n", "\n", "bn_up_2_2", "=", "self", ".", "bottleNeck_Up_2_2", "(", "bn_up_2_1", ")", "\n", "\n", "up_block_1", "=", "self", ".", "PReLU_Up_2", "(", "unpool_1", "+", "bn_up_2_2", ")", "\n", "\n", "unpool_12", "=", "self", ".", "deconv3", "(", "up_block_1", ")", "\n", "\n", "return", "self", ".", "final", "(", "unpool_12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.Conv_residual_conv.__init__": [[407, 416], ["torch.nn.Module.__init__", "layers.conv_block", "layers.conv_block_3", "layers.conv_block"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_3", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "act_fn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "act_fn", "=", "act_fn", "\n", "\n", "self", ".", "conv_1", "=", "conv_block", "(", "self", ".", "in_dim", ",", "self", ".", "out_dim", ",", "act_fn", ")", "\n", "self", ".", "conv_2", "=", "conv_block_3", "(", "self", ".", "out_dim", ",", "self", ".", "out_dim", ",", "act_fn", ")", "\n", "self", ".", "conv_3", "=", "conv_block", "(", "self", ".", "out_dim", ",", "self", ".", "out_dim", ",", "act_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.Conv_residual_conv.forward": [[417, 423], ["networks.Conv_residual_conv.conv_1", "networks.Conv_residual_conv.conv_2", "networks.Conv_residual_conv.conv_3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv_1", "=", "self", ".", "conv_1", "(", "input", ")", "\n", "conv_2", "=", "self", ".", "conv_2", "(", "conv_1", ")", "\n", "res", "=", "conv_1", "+", "conv_2", "\n", "conv_3", "=", "self", ".", "conv_3", "(", "res", ")", "\n", "return", "conv_3", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.ResidualUNet.__init__": [[426, 469], ["torch.nn.Module.__init__", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.ReLU", "torch.nn.ReLU", "networks.Conv_residual_conv", "layers.maxpool", "networks.Conv_residual_conv", "layers.maxpool", "networks.Conv_residual_conv", "layers.maxpool", "networks.Conv_residual_conv", "layers.maxpool", "networks.Conv_residual_conv", "layers.conv_decod_block", "networks.Conv_residual_conv", "layers.conv_decod_block", "networks.Conv_residual_conv", "layers.conv_decod_block", "networks.Conv_residual_conv", "layers.conv_decod_block", "networks.Conv_residual_conv", "torch.nn.Conv2d", "torch.nn.Conv2d", "networks.ResidualUNet.modules", "print", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.maxpool", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.maxpool", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.maxpool", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.maxpool", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_decod_block", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_decod_block", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_decod_block", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_decod_block"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "32", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dim", "=", "input_nc", "\n", "self", ".", "out_dim", "=", "ngf", "\n", "self", ".", "final_out_dim", "=", "output_nc", "\n", "act_fn", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "act_fn_2", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# Encoder", "\n", "self", ".", "down_1", "=", "Conv_residual_conv", "(", "self", ".", "in_dim", ",", "self", ".", "out_dim", ",", "act_fn", ")", "\n", "self", ".", "pool_1", "=", "maxpool", "(", ")", "\n", "self", ".", "down_2", "=", "Conv_residual_conv", "(", "self", ".", "out_dim", ",", "self", ".", "out_dim", "*", "2", ",", "act_fn", ")", "\n", "self", ".", "pool_2", "=", "maxpool", "(", ")", "\n", "self", ".", "down_3", "=", "Conv_residual_conv", "(", "self", ".", "out_dim", "*", "2", ",", "self", ".", "out_dim", "*", "4", ",", "act_fn", ")", "\n", "self", ".", "pool_3", "=", "maxpool", "(", ")", "\n", "self", ".", "down_4", "=", "Conv_residual_conv", "(", "self", ".", "out_dim", "*", "4", ",", "self", ".", "out_dim", "*", "8", ",", "act_fn", ")", "\n", "self", ".", "pool_4", "=", "maxpool", "(", ")", "\n", "\n", "# Bridge between Encoder-Decoder", "\n", "self", ".", "bridge", "=", "Conv_residual_conv", "(", "self", ".", "out_dim", "*", "8", ",", "self", ".", "out_dim", "*", "16", ",", "act_fn", ")", "\n", "\n", "# Decoder", "\n", "self", ".", "deconv_1", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "16", ",", "self", ".", "out_dim", "*", "8", ",", "act_fn_2", ")", "\n", "self", ".", "up_1", "=", "Conv_residual_conv", "(", "self", ".", "out_dim", "*", "8", ",", "self", ".", "out_dim", "*", "8", ",", "act_fn_2", ")", "\n", "self", ".", "deconv_2", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "8", ",", "self", ".", "out_dim", "*", "4", ",", "act_fn_2", ")", "\n", "self", ".", "up_2", "=", "Conv_residual_conv", "(", "self", ".", "out_dim", "*", "4", ",", "self", ".", "out_dim", "*", "4", ",", "act_fn_2", ")", "\n", "self", ".", "deconv_3", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "4", ",", "self", ".", "out_dim", "*", "2", ",", "act_fn_2", ")", "\n", "self", ".", "up_3", "=", "Conv_residual_conv", "(", "self", ".", "out_dim", "*", "2", ",", "self", ".", "out_dim", "*", "2", ",", "act_fn_2", ")", "\n", "self", ".", "deconv_4", "=", "conv_decod_block", "(", "self", ".", "out_dim", "*", "2", ",", "self", ".", "out_dim", ",", "act_fn_2", ")", "\n", "self", ".", "up_4", "=", "Conv_residual_conv", "(", "self", ".", "out_dim", ",", "self", ".", "out_dim", ",", "act_fn_2", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Conv2d", "(", "self", ".", "out_dim", ",", "self", ".", "final_out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "# Params initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "print", "(", "f\"Initialized {self.__class__.__name__} succesfully\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.ResidualUNet.forward": [[470, 498], ["networks.ResidualUNet.down_1", "networks.ResidualUNet.down_2", "networks.ResidualUNet.down_3", "networks.ResidualUNet.down_4", "networks.ResidualUNet.bridge", "networks.ResidualUNet.deconv_1", "networks.ResidualUNet.up_1", "networks.ResidualUNet.deconv_2", "networks.ResidualUNet.up_2", "networks.ResidualUNet.deconv_3", "networks.ResidualUNet.up_3", "networks.ResidualUNet.deconv_4", "networks.ResidualUNet.up_4", "networks.ResidualUNet.out", "networks.ResidualUNet.pool_1", "networks.ResidualUNet.pool_2", "networks.ResidualUNet.pool_3", "networks.ResidualUNet.pool_4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# Encoding path", "\n", "\n", "        ", "down_1", "=", "self", ".", "down_1", "(", "input", ")", "# This will go as res in deconv path", "\n", "down_2", "=", "self", ".", "down_2", "(", "self", ".", "pool_1", "(", "down_1", ")", ")", "\n", "down_3", "=", "self", ".", "down_3", "(", "self", ".", "pool_2", "(", "down_2", ")", ")", "\n", "down_4", "=", "self", ".", "down_4", "(", "self", ".", "pool_3", "(", "down_3", ")", ")", "\n", "\n", "bridge", "=", "self", ".", "bridge", "(", "self", ".", "pool_4", "(", "down_4", ")", ")", "\n", "\n", "# Decoding path", "\n", "deconv_1", "=", "self", ".", "deconv_1", "(", "bridge", ")", "\n", "skip_1", "=", "(", "deconv_1", "+", "down_4", ")", "/", "2", "# Residual connection", "\n", "up_1", "=", "self", ".", "up_1", "(", "skip_1", ")", "\n", "\n", "deconv_2", "=", "self", ".", "deconv_2", "(", "up_1", ")", "\n", "skip_2", "=", "(", "deconv_2", "+", "down_3", ")", "/", "2", "# Residual connection", "\n", "up_2", "=", "self", ".", "up_2", "(", "skip_2", ")", "\n", "\n", "deconv_3", "=", "self", ".", "deconv_3", "(", "up_2", ")", "\n", "skip_3", "=", "(", "deconv_3", "+", "down_2", ")", "/", "2", "# Residual connection", "\n", "up_3", "=", "self", ".", "up_3", "(", "skip_3", ")", "\n", "\n", "deconv_4", "=", "self", ".", "deconv_4", "(", "up_3", ")", "\n", "skip_4", "=", "(", "deconv_4", "+", "down_1", ")", "/", "2", "# Residual connection", "\n", "up_4", "=", "self", ".", "up_4", "(", "skip_4", ")", "\n", "\n", "return", "self", ".", "out", "(", "up_4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.UNet.__init__": [[501, 525], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "layers.upSampleConv", "torch.nn.Sequential", "torch.nn.Sequential", "layers.upSampleConv", "torch.nn.Sequential", "torch.nn.Sequential", "layers.upSampleConv", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "layers.convBatch", "layers.convBatch", "layers.convBatch", "layers.convBatch", "layers.convBatch", "layers.convBatch", "layers.convBatch", "layers.residualConv", "layers.convBatch", "layers.convBatch", "layers.convBatch", "layers.convBatch", "layers.convBatch", "layers.convBatch", "layers.convBatch"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.upSampleConv", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.upSampleConv", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.upSampleConv", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ",", "nG", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv0", "=", "nn", ".", "Sequential", "(", "convBatch", "(", "nin", ",", "nG", ")", ",", "\n", "convBatch", "(", "nG", ",", "nG", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "convBatch", "(", "nG", "*", "1", ",", "nG", "*", "2", ",", "stride", "=", "2", ")", ",", "\n", "convBatch", "(", "nG", "*", "2", ",", "nG", "*", "2", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "convBatch", "(", "nG", "*", "2", ",", "nG", "*", "4", ",", "stride", "=", "2", ")", ",", "\n", "convBatch", "(", "nG", "*", "4", ",", "nG", "*", "4", ")", ")", "\n", "\n", "self", ".", "bridge", "=", "nn", ".", "Sequential", "(", "convBatch", "(", "nG", "*", "4", ",", "nG", "*", "8", ",", "stride", "=", "2", ")", ",", "\n", "residualConv", "(", "nG", "*", "8", ",", "nG", "*", "8", ")", ",", "\n", "convBatch", "(", "nG", "*", "8", ",", "nG", "*", "8", ")", ")", "\n", "\n", "self", ".", "deconv1", "=", "upSampleConv", "(", "nG", "*", "8", ",", "nG", "*", "8", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "convBatch", "(", "nG", "*", "12", ",", "nG", "*", "4", ")", ",", "\n", "convBatch", "(", "nG", "*", "4", ",", "nG", "*", "4", ")", ")", "\n", "self", ".", "deconv2", "=", "upSampleConv", "(", "nG", "*", "4", ",", "nG", "*", "4", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "convBatch", "(", "nG", "*", "6", ",", "nG", "*", "2", ")", ",", "\n", "convBatch", "(", "nG", "*", "2", ",", "nG", "*", "2", ")", ")", "\n", "self", ".", "deconv3", "=", "upSampleConv", "(", "nG", "*", "2", ",", "nG", "*", "2", ")", "\n", "self", ".", "conv7", "=", "nn", ".", "Sequential", "(", "convBatch", "(", "nG", "*", "3", ",", "nG", "*", "1", ")", ",", "\n", "convBatch", "(", "nG", "*", "1", ",", "nG", "*", "1", ")", ")", "\n", "self", ".", "final", "=", "nn", ".", "Conv2d", "(", "nG", ",", "nout", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.UNet.forward": [[526, 540], ["input.float.float.float", "networks.UNet.conv0", "networks.UNet.conv1", "networks.UNet.conv2", "networks.UNet.bridge", "networks.UNet.deconv1", "networks.UNet.deconv2", "networks.UNet.deconv3", "networks.UNet.conv7", "networks.UNet.final", "networks.UNet.conv5", "networks.UNet.conv6", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "input", "=", "input", ".", "float", "(", ")", "\n", "x0", "=", "self", ".", "conv0", "(", "input", ")", "\n", "x1", "=", "self", ".", "conv1", "(", "x0", ")", "\n", "x2", "=", "self", ".", "conv2", "(", "x1", ")", "\n", "\n", "bridge", "=", "self", ".", "bridge", "(", "x2", ")", "\n", "\n", "y0", "=", "self", ".", "deconv1", "(", "bridge", ")", "\n", "y1", "=", "self", ".", "deconv2", "(", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "y0", ",", "x2", ")", ",", "dim", "=", "1", ")", ")", ")", "\n", "y2", "=", "self", ".", "deconv3", "(", "self", ".", "conv6", "(", "torch", ".", "cat", "(", "(", "y1", ",", "x1", ")", ",", "dim", "=", "1", ")", ")", ")", "\n", "y3", "=", "self", ".", "conv7", "(", "torch", ".", "cat", "(", "(", "y2", ",", "x0", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "self", ".", "final", "(", "y3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.fcn8s.__init__": [[543, 602], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Dropout2d", "torch.nn.Dropout2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ",", "learned_billinear", "=", "False", ")", ":", "\n", "        ", "super", "(", "fcn8s", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "learned_billinear", "=", "learned_billinear", "\n", "self", ".", "n_classes", "=", "nout", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nin", ",", "64", ",", "3", ",", "padding", "=", "100", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "4096", ",", "7", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "4096", ",", "4096", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout2d", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "4096", ",", "self", ".", "n_classes", ",", "1", ")", ",", ")", "\n", "\n", "self", ".", "forward_path", ":", "Iterable", "[", "Any", "]", "=", "[", "self", ".", "conv1", ",", "self", ".", "conv2", ",", "self", ".", "conv3", ",", "self", ".", "conv4", ",", "self", ".", "conv5", ",", "self", ".", "classifier", "]", "\n", "\n", "self", ".", "score_pool4", "=", "nn", ".", "Conv2d", "(", "512", ",", "self", ".", "n_classes", ",", "1", ")", "\n", "self", ".", "score_pool3", "=", "nn", ".", "Conv2d", "(", "256", ",", "self", ".", "n_classes", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.fcn8s.apply": [[603, 607], ["print", "torchvision.vgg16", "networks.fcn8s.init_vgg16_params"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.fcn8s.init_vgg16_params"], ["", "def", "apply", "(", "self", ",", "_", ")", "->", "None", ":", "\n", "        ", "print", "(", "\"Override default apply fn, call its own weight init instead\"", ")", "\n", "vgg16", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "init_vgg16_params", "(", "vgg16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.fcn8s.forward": [[608, 621], ["utils.compose_acc", "networks.fcn8s.score_pool4", "networks.fcn8s.score_pool3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "networks.fcn8s.size", "networks.fcn8s.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.compose_acc"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "_", ",", "_", ",", "_", ",", "conv3", ",", "conv4", ",", "_", ",", "score", "=", "compose_acc", "(", "self", ".", "forward_path", ",", "x", ")", "\n", "\n", "score_pool4", "=", "self", ".", "score_pool4", "(", "conv4", ")", "\n", "score_pool3", "=", "self", ".", "score_pool3", "(", "conv3", ")", "\n", "\n", "score", "=", "F", ".", "interpolate", "(", "score", ",", "size", "=", "score_pool4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "score", "+=", "score_pool4", "\n", "score", "=", "F", ".", "interpolate", "(", "score", ",", "size", "=", "score_pool3", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "score", "+=", "score_pool3", "\n", "out", "=", "F", ".", "interpolate", "(", "score", ",", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.fcn8s.init_vgg16_params": [[622, 650], ["list", "enumerate", "zip", "vgg16.features.children", "zip", "l1.weight.data.view", "l1.bias.data.view", "networks.fcn8s.classifier[].weight.size", "l1.weight.data[].view", "l2.weight.size", "l2.bias.size", "l2.weight.size", "isinstance", "isinstance", "l1.weight.size", "l2.weight.size", "l1.bias.size", "l2.bias.size"], "methods", ["None"], ["", "def", "init_vgg16_params", "(", "self", ",", "vgg16", ",", "copy_fc8", "=", "True", ")", ":", "\n", "        ", "blocks", "=", "[", "self", ".", "conv1", ",", "\n", "self", ".", "conv2", ",", "\n", "self", ".", "conv3", ",", "\n", "self", ".", "conv4", ",", "\n", "self", ".", "conv5", "]", "\n", "\n", "ranges", "=", "[", "[", "0", ",", "4", "]", ",", "[", "5", ",", "9", "]", ",", "[", "10", ",", "16", "]", ",", "[", "17", ",", "23", "]", ",", "[", "24", ",", "29", "]", "]", "\n", "features", "=", "list", "(", "vgg16", ".", "features", ".", "children", "(", ")", ")", "\n", "\n", "for", "idx", ",", "conv", "in", "enumerate", "(", "blocks", ")", ":", "\n", "            ", "for", "l1", ",", "l2", "in", "zip", "(", "features", "[", "ranges", "[", "idx", "]", "[", "0", "]", ":", "ranges", "[", "idx", "]", "[", "1", "]", "]", ",", "conv", ")", ":", "\n", "                ", "if", "isinstance", "(", "l1", ",", "nn", ".", "Conv2d", ")", "and", "isinstance", "(", "l2", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "assert", "l1", ".", "weight", ".", "size", "(", ")", "==", "l2", ".", "weight", ".", "size", "(", ")", "\n", "assert", "l1", ".", "bias", ".", "size", "(", ")", "==", "l2", ".", "bias", ".", "size", "(", ")", "\n", "l2", ".", "weight", ".", "data", "=", "l1", ".", "weight", ".", "data", "\n", "l2", ".", "bias", ".", "data", "=", "l1", ".", "bias", ".", "data", "\n", "", "", "", "for", "i1", ",", "i2", "in", "zip", "(", "[", "0", ",", "3", "]", ",", "[", "0", ",", "3", "]", ")", ":", "\n", "            ", "l1", "=", "vgg16", ".", "classifier", "[", "i1", "]", "\n", "l2", "=", "self", ".", "classifier", "[", "i2", "]", "\n", "l2", ".", "weight", ".", "data", "=", "l1", ".", "weight", ".", "data", ".", "view", "(", "l2", ".", "weight", ".", "size", "(", ")", ")", "\n", "l2", ".", "bias", ".", "data", "=", "l1", ".", "bias", ".", "data", ".", "view", "(", "l2", ".", "bias", ".", "size", "(", ")", ")", "\n", "", "n_class", "=", "self", ".", "classifier", "[", "6", "]", ".", "weight", ".", "size", "(", ")", "[", "0", "]", "\n", "if", "copy_fc8", ":", "\n", "            ", "l1", "=", "vgg16", ".", "classifier", "[", "6", "]", "\n", "l2", "=", "self", ".", "classifier", "[", "6", "]", "\n", "l2", ".", "weight", ".", "data", "=", "l1", ".", "weight", ".", "data", "[", ":", "n_class", ",", ":", "]", ".", "view", "(", "l2", ".", "weight", ".", "size", "(", ")", ")", "\n", "l2", ".", "bias", ".", "data", "=", "l1", ".", "bias", ".", "data", "[", ":", "n_class", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.Bottleneck.__init__": [[654, 664], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "expansion", "=", "4", ",", "growthRate", "=", "12", ",", "dropRate", "=", "0", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "planes", "=", "expansion", "*", "growthRate", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "growthRate", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropRate", "=", "dropRate", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.Bottleneck.forward": [[665, 678], ["networks.Bottleneck.bn1", "networks.Bottleneck.relu", "networks.Bottleneck.conv1", "networks.Bottleneck.bn2", "networks.Bottleneck.relu", "networks.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "dropRate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "dropRate", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.DenseNet.__init__": [[681, 714], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "networks.DenseNet._make_denseblock", "networks.DenseNet._make_transition", "networks.DenseNet._make_denseblock", "networks.DenseNet._make_transition", "networks.DenseNet._make_denseblock", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "networks.DenseNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.DenseNet._make_denseblock", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.DenseNet._make_transition", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.DenseNet._make_denseblock", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.DenseNet._make_transition", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.DenseNet._make_denseblock"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "22", ",", "block", "=", "Bottleneck", ",", "\n", "dropRate", "=", "0", ",", "num_classes", "=", "10", ",", "growthRate", "=", "12", ",", "compressionRate", "=", "2", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "depth", "-", "4", ")", "%", "3", "==", "0", ",", "'depth should be 3n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "3", "if", "block", "==", "BasicBlock", "else", "(", "depth", "-", "4", ")", "//", "6", "\n", "\n", "self", ".", "growthRate", "=", "growthRate", "\n", "self", ".", "dropRate", "=", "dropRate", "\n", "\n", "# self.inplanes is a global variable used across multiple", "\n", "# helper functions", "\n", "self", ".", "inplanes", "=", "growthRate", "*", "2", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "dense1", "=", "self", ".", "_make_denseblock", "(", "block", ",", "n", ")", "\n", "self", ".", "trans1", "=", "self", ".", "_make_transition", "(", "compressionRate", ")", "\n", "self", ".", "dense2", "=", "self", ".", "_make_denseblock", "(", "block", ",", "n", ")", "\n", "self", ".", "trans2", "=", "self", ".", "_make_transition", "(", "compressionRate", ")", "\n", "self", ".", "dense3", "=", "self", ".", "_make_denseblock", "(", "block", ",", "n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "inplanes", ",", "num_classes", ")", "\n", "\n", "# Weight initialization", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.DenseNet._make_denseblock": [[715, 723], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_denseblock", "(", "self", ",", "block", ",", "blocks", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "blocks", ")", ":", "\n", "# Currently we fix the expansion ratio as the default value", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "growthRate", "=", "self", ".", "growthRate", ",", "dropRate", "=", "self", ".", "dropRate", ")", ")", "\n", "self", ".", "inplanes", "+=", "self", ".", "growthRate", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.DenseNet._make_transition": [[724, 729], ["int", "networks.Transition", "math.floor"], "methods", ["None"], ["", "def", "_make_transition", "(", "self", ",", "compressionRate", ")", ":", "\n", "        ", "inplanes", "=", "self", ".", "inplanes", "\n", "outplanes", "=", "int", "(", "math", ".", "floor", "(", "self", ".", "inplanes", "//", "compressionRate", ")", ")", "\n", "self", ".", "inplanes", "=", "outplanes", "\n", "return", "Transition", "(", "inplanes", ",", "outplanes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.DenseNet.forward": [[730, 744], ["networks.DenseNet.conv1", "networks.DenseNet.trans1", "networks.DenseNet.trans2", "networks.DenseNet.dense3", "networks.DenseNet.bn", "networks.DenseNet.relu", "networks.DenseNet.avgpool", "networks.DenseNet.view", "networks.DenseNet.fc", "networks.DenseNet.dense1", "networks.DenseNet.dense2", "networks.DenseNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "dense3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BasicBlock.__init__": [[747, 755], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "expansion", "=", "1", ",", "growthRate", "=", "12", ",", "dropRate", "=", "0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# planes = expansion * growthRate", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "growthRate", ",", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "dropRate", "=", "dropRate", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BasicBlock.forward": [[756, 766], ["networks.BasicBlock.bn1", "networks.BasicBlock.relu", "networks.BasicBlock.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "if", "self", ".", "dropRate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "dropRate", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.Transition.__init__": [[769, 775], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "outplanes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "outplanes", ",", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.Transition.forward": [[776, 782], ["networks.Transition.bn1", "networks.Transition.relu", "networks.Transition.conv1", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleneckC.__init__": [[791, 814], ["torch.nn.Module.__init__", "int", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "math.floor"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "baseWidth", ",", "cardinality", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            inplanes: input channel dimensionality\n            planes: output channel dimensionality\n            baseWidth: base width.\n            cardinality: num of convolution groups.\n            stride: conv stride. Replaces pooling layer.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "D", "=", "int", "(", "math", ".", "floor", "(", "planes", "*", "(", "baseWidth", "/", "64", ")", ")", ")", "\n", "C", "=", "cardinality", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "D", "*", "C", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "D", "*", "C", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "D", "*", "C", ",", "D", "*", "C", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "C", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "D", "*", "C", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "D", "*", "C", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.BottleneckC.forward": [[815, 837], ["networks.BottleneckC.conv1", "networks.BottleneckC.bn1", "networks.BottleneckC.relu", "networks.BottleneckC.conv2", "networks.BottleneckC.bn2", "networks.BottleneckC.relu", "networks.BottleneckC.conv3", "networks.BottleneckC.bn3", "torch.dropout", "torch.dropout", "networks.BottleneckC.relu", "networks.BottleneckC.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "0.5", ",", "training", "=", "self", ".", "training", ")", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.ResNeXt.__init__": [[844, 880], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "networks.ResNeXt._make_layer", "networks.ResNeXt._make_layer", "networks.ResNeXt._make_layer", "networks.ResNeXt._make_layer", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Linear", "torch.nn.Linear", "networks.ResNeXt.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.ResNeXt._make_layer", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.ResNeXt._make_layer", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.ResNeXt._make_layer", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.ResNeXt._make_layer"], ["def", "__init__", "(", "self", ",", "baseWidth", ",", "cardinality", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n            baseWidth: baseWidth for ResNeXt.\n            cardinality: number of convolution groups.\n            layers: config of layers, e.g., [3, 4, 6, 3]\n            num_classes: number of classes\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "block", "=", "BottleneckC", "\n", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "baseWidth", "=", "baseWidth", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "output_size", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "64", ",", "7", ",", "2", ",", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "# self.fc = nn.Linear(512 * block.expansion, 1)", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "self", ".", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.ResNeXt._make_layer": [[881, 905], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "\"\"\" Stack n bottleneck modules where n is inferred from the depth of the network.\n        Args:\n            block: block type used to construct ResNext\n            planes: number of output channels (need to multiply by block.expansion)\n            blocks: number of blocks to be built\n            stride: factor to reduce the spatial dimensionality in the first bottleneck of the block.\n        Returns: a Module consisting of n sequential bottlenecks.\n        \"\"\"", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "baseWidth", ",", "self", ".", "cardinality", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "self", ".", "baseWidth", ",", "self", ".", "cardinality", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.ResNeXt.forward": [[906, 920], ["networks.ResNeXt.conv1", "networks.ResNeXt.bn1", "networks.ResNeXt.relu", "networks.ResNeXt.maxpool1", "networks.ResNeXt.layer1", "networks.ResNeXt.layer2", "networks.ResNeXt.layer3", "networks.ResNeXt.layer4", "networks.ResNeXt.avgpool", "networks.ResNeXt.view", "networks.ResNeXt.fc", "networks.ResNeXt.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.weights_init": [[18, 24], ["torch.nn.init.xavier_normal_", "type", "type", "type", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["def", "weights_init", "(", "m", ")", ":", "\n", "    ", "if", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", "or", "type", "(", "m", ")", "==", "nn", ".", "ConvTranspose2d", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "", "elif", "type", "(", "m", ")", "==", "nn", ".", "BatchNorm2d", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.resnext101": [[922, 928], ["networks.ResNeXt"], "function", ["None"], ["", "", "def", "resnext101", "(", "baseWidth", ",", "cardinality", ",", "n_class", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Construct ResNeXt-101.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "baseWidth", ",", "cardinality", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "n_class", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.main.setup": [[27, 68], ["print", "torch.load.to", "eval", "enumerate", "torch.device", "torch.device", "torch.device", "torch.device", "print", "getattr", "getattr.to", "torch.load.apply", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "utils.depth", "print", "loss_fns.append", "utils.map_", "getattr", "torch.cuda.is_available", "torch.cuda.is_available", "torch.load", "torch.load", "torch.load", "torch.load", "__import__", "torch.load.parameters", "torch.load.parameters", "getattr", "tmp.append", "operator.itemgetter", "__import__", "eval", "getattr.", "__import__", "getattr."], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.networks.fcn8s.apply", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.depth", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_"], ["def", "setup", "(", "args", ",", "n_class", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", ",", "Any", ",", "List", "[", "List", "[", "Callable", "]", "]", ",", "List", "[", "List", "[", "float", "]", "]", ",", "Callable", "]", ":", "\n", "    ", "print", "(", "\"\\n>>> Setting up\"", ")", "\n", "cpu", ":", "bool", "=", "args", ".", "cpu", "or", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "if", "cpu", "else", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "\n", "if", "args", ".", "weights", ":", "\n", "        ", "if", "cpu", ":", "\n", "            ", "net", "=", "torch", ".", "load", "(", "args", ".", "weights", ",", "map_location", "=", "'cpu'", ")", "\n", "", "else", ":", "\n", "            ", "net", "=", "torch", ".", "load", "(", "args", ".", "weights", ")", "\n", "", "print", "(", "f\">> Restored weights from {args.weights} successfully.\"", ")", "\n", "", "else", ":", "\n", "        ", "net_class", "=", "getattr", "(", "__import__", "(", "'networks'", ")", ",", "args", ".", "network", ")", "\n", "net", "=", "net_class", "(", "args", ".", "modalities", ",", "n_class", ")", ".", "to", "(", "device", ")", "\n", "net", ".", "apply", "(", "weights_init", ")", "\n", "", "net", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "use_sgd", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "l_rate", ",", "momentum", "=", "0.99", ",", "weight_decay", "=", "5e-4", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "l_rate", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ",", "amsgrad", "=", "False", ")", "\n", "\n", "# print(args.losses)", "\n", "", "list_losses", "=", "eval", "(", "args", ".", "losses", ")", "\n", "if", "depth", "(", "list_losses", ")", "==", "1", ":", "# For compatibility reasons, avoid changing all the previous configuration files", "\n", "        ", "list_losses", "=", "[", "list_losses", "]", "\n", "\n", "", "loss_fns", ":", "List", "[", "List", "[", "Callable", "]", "]", "=", "[", "]", "\n", "for", "i", ",", "losses", "in", "enumerate", "(", "list_losses", ")", ":", "\n", "        ", "print", "(", "f\">> {i}th list of losses: {losses}\"", ")", "\n", "tmp", ":", "List", "[", "Callable", "]", "=", "[", "]", "\n", "for", "loss_name", ",", "loss_params", ",", "_", ",", "_", ",", "fn", ",", "_", "in", "losses", ":", "\n", "            ", "loss_class", "=", "getattr", "(", "__import__", "(", "'losses'", ")", ",", "loss_name", ")", "\n", "tmp", ".", "append", "(", "loss_class", "(", "**", "loss_params", ",", "fn", "=", "fn", ")", ")", "\n", "", "loss_fns", ".", "append", "(", "tmp", ")", "\n", "\n", "", "loss_weights", ":", "List", "[", "List", "[", "float", "]", "]", "=", "[", "map_", "(", "itemgetter", "(", "5", ")", ",", "losses", ")", "for", "losses", "in", "list_losses", "]", "\n", "\n", "scheduler", "=", "getattr", "(", "__import__", "(", "'scheduler'", ")", ",", "args", ".", "scheduler", ")", "(", "**", "eval", "(", "args", ".", "scheduler_params", ")", ")", "\n", "\n", "return", "net", ",", "optimizer", ",", "device", ",", "loss_fns", ",", "loss_weights", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.main.do_epoch": [[70, 232], ["sum", "sum", "max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "utils.tqdm_", "enumerate", "utils.tqdm_.close", "print", "net.train", "map", "len", "zip", "len", "print", "print", "net.eval", "len", "len", "len", "net", "torch.softmax", "utils.probs2one_hot", "zip", "functools.reduce", "range", "slice", "utils.dice_coef", "slice", "utils.tqdm_.set_postfix", "utils.tqdm_.update", "intersections.sum", "print", "e.to", "len", "len", "optimizer.zero_grad", "pred_probs.detach", "len", "len", "len", "len", "functools.reduce.backward", "optimizer.step", "len", "losses[].detach", "utils.dice_batch", "utils.haussdorf", "utils.iIoU", "utils.inter_sum", "utils.union_sum", "len", "loss_log[].mean", "unions.sum", "loss_fn", "warnings.catch_warnings", "warnings.filterwarnings", "utils.probs2class", "utils.save_images", "all_dices[].mean", "haussdorf_log[].mean", "batch_dices[].mean", "iiou_log[].mean", "all_dices[].mean", "haussdorf_log[].mean", "stat_dict.items", "str", "nice_dict.items", "intersections.sum", "all_dices[].mean", "iiou_log[].mean", "unions.sum"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.probs2one_hot", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.haussdorf", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.iIoU", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.inter_sum", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.union_sum", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.probs2class", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.save_images"], ["", "def", "do_epoch", "(", "mode", ":", "str", ",", "net", ":", "Any", ",", "device", ":", "Any", ",", "loaders", ":", "List", "[", "DataLoader", "]", ",", "epc", ":", "int", ",", "\n", "list_loss_fns", ":", "List", "[", "List", "[", "Callable", "]", "]", ",", "list_loss_weights", ":", "List", "[", "List", "[", "float", "]", "]", ",", "C", ":", "int", ",", "\n", "savedir", ":", "str", "=", "\"\"", ",", "optimizer", ":", "Any", "=", "None", ",", "\n", "metric_axis", ":", "List", "[", "int", "]", "=", "[", "1", "]", ",", "compute_haussdorf", ":", "bool", "=", "False", ",", "compute_miou", ":", "bool", "=", "False", ",", "\n", "temperature", ":", "float", "=", "1", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", ",", "Tensor", ",", "Tensor", ",", "Tuple", "[", "None", ",", "Tensor", "]", "]", ":", "\n", "    ", "assert", "mode", "in", "[", "\"train\"", ",", "\"val\"", "]", "\n", "\n", "if", "mode", "==", "\"train\"", ":", "\n", "        ", "net", ".", "train", "(", ")", "\n", "desc", "=", "f\">> Training   ({epc})\"", "\n", "", "elif", "mode", "==", "\"val\"", ":", "\n", "        ", "net", ".", "eval", "(", ")", "\n", "desc", "=", "f\">> Validation ({epc})\"", "\n", "\n", "", "total_iteration", ":", "int", "=", "sum", "(", "len", "(", "loader", ")", "for", "loader", "in", "loaders", ")", "# U", "\n", "total_images", ":", "int", "=", "sum", "(", "len", "(", "loader", ".", "dataset", ")", "for", "loader", "in", "loaders", ")", "# D", "\n", "n_loss", ":", "int", "=", "max", "(", "map", "(", "len", ",", "list_loss_fns", ")", ")", "\n", "\n", "all_dices", ":", "Tensor", "=", "torch", ".", "zeros", "(", "(", "total_images", ",", "C", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "batch_dices", ":", "Tensor", "=", "torch", ".", "zeros", "(", "(", "total_iteration", ",", "C", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "loss_log", ":", "Tensor", "=", "torch", ".", "zeros", "(", "(", "total_iteration", ",", "n_loss", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "haussdorf_log", ":", "Tensor", "=", "torch", ".", "zeros", "(", "(", "total_images", ",", "C", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "iiou_log", ":", "Tensor", "=", "torch", ".", "zeros", "(", "(", "total_images", ",", "C", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "intersections", ":", "Tensor", "=", "torch", ".", "zeros", "(", "(", "total_images", ",", "C", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "unions", ":", "Tensor", "=", "torch", ".", "zeros", "(", "(", "total_images", ",", "C", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "\n", "few_axis", ":", "bool", "=", "len", "(", "metric_axis", ")", "<=", "3", "\n", "\n", "done_img", ":", "int", "=", "0", "\n", "done_batch", ":", "int", "=", "0", "\n", "tq_iter", "=", "tqdm_", "(", "total", "=", "total_iteration", ",", "desc", "=", "desc", ")", "\n", "for", "i", ",", "(", "loader", ",", "loss_fns", ",", "loss_weights", ")", "in", "enumerate", "(", "zip", "(", "loaders", ",", "list_loss_fns", ",", "list_loss_weights", ")", ")", ":", "\n", "        ", "L", ":", "int", "=", "len", "(", "loss_fns", ")", "\n", "\n", "for", "data", "in", "loader", ":", "\n", "            ", "data", "[", "1", ":", "]", "=", "[", "e", ".", "to", "(", "device", ")", "for", "e", "in", "data", "[", "1", ":", "]", "]", "# Move all tensors to device", "\n", "filenames", ",", "image", ",", "target", "=", "data", "[", ":", "3", "]", "\n", "assert", "not", "target", ".", "requires_grad", "\n", "labels", "=", "data", "[", "3", ":", "3", "+", "L", "]", "\n", "bounds", "=", "data", "[", "3", "+", "L", ":", "]", "\n", "assert", "len", "(", "labels", ")", "==", "len", "(", "bounds", ")", "\n", "\n", "B", "=", "len", "(", "image", ")", "\n", "\n", "# Reset gradients", "\n", "if", "optimizer", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Forward", "\n", "", "pred_logits", ":", "Tensor", "=", "net", "(", "image", ")", "\n", "pred_probs", ":", "Tensor", "=", "F", ".", "softmax", "(", "temperature", "*", "pred_logits", ",", "dim", "=", "1", ")", "\n", "predicted_mask", ":", "Tensor", "=", "probs2one_hot", "(", "pred_probs", ".", "detach", "(", ")", ")", "# Used only for dice computation", "\n", "assert", "not", "predicted_mask", ".", "requires_grad", "\n", "\n", "assert", "len", "(", "bounds", ")", "==", "len", "(", "loss_fns", ")", "==", "len", "(", "loss_weights", ")", "==", "len", "(", "labels", ")", "\n", "ziped", "=", "zip", "(", "loss_fns", ",", "labels", ",", "loss_weights", ",", "bounds", ")", "\n", "losses", "=", "[", "w", "*", "loss_fn", "(", "pred_probs", ",", "label", ",", "bound", ")", "for", "loss_fn", ",", "label", ",", "w", ",", "bound", "in", "ziped", "]", "\n", "loss", "=", "reduce", "(", "add", ",", "losses", ")", "\n", "assert", "loss", ".", "shape", "==", "(", ")", ",", "loss", ".", "shape", "\n", "\n", "# if epc >= 1 and False:", "\n", "#     import matplotlib.pyplot as plt", "\n", "#     _, axes = plt.subplots(nrows=1, ncols=3)", "\n", "#     axes[0].imshow(image[0, 0].cpu().numpy(), cmap='gray')", "\n", "#     axes[0].contour(target[0, 1].cpu().numpy(), cmap='rainbow')", "\n", "\n", "#     pred_np = pred_probs[0, 1].detach().cpu().numpy()", "\n", "#     axes[1].imshow(pred_np)", "\n", "\n", "#     bins = np.linspace(0, 1, 50)", "\n", "#     axes[2].hist(pred_np.flatten(), bins)", "\n", "#     print(bounds)", "\n", "#     print(bounds[2].cpu().numpy())", "\n", "#     print(bounds[2][0, 1].cpu().numpy())", "\n", "#     print(pred_np.sum())", "\n", "#     plt.show()", "\n", "\n", "# Backward", "\n", "if", "optimizer", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Compute and log metrics", "\n", "# loss_log[done_batch] = loss.detach()", "\n", "", "for", "j", "in", "range", "(", "len", "(", "loss_fns", ")", ")", ":", "\n", "                ", "loss_log", "[", "done_batch", ",", "j", "]", "=", "losses", "[", "j", "]", ".", "detach", "(", ")", "\n", "\n", "", "sm_slice", "=", "slice", "(", "done_img", ",", "done_img", "+", "B", ")", "# Values only for current batch", "\n", "\n", "dices", ":", "Tensor", "=", "dice_coef", "(", "predicted_mask", ",", "target", ")", "\n", "assert", "dices", ".", "shape", "==", "(", "B", ",", "C", ")", ",", "(", "dices", ".", "shape", ",", "B", ",", "C", ")", "\n", "all_dices", "[", "sm_slice", ",", "...", "]", "=", "dices", "\n", "\n", "if", "B", ">", "1", "and", "mode", "==", "\"val\"", ":", "\n", "                ", "batch_dice", ":", "Tensor", "=", "dice_batch", "(", "predicted_mask", ",", "target", ")", "\n", "assert", "batch_dice", ".", "shape", "==", "(", "C", ",", ")", ",", "(", "batch_dice", ".", "shape", ",", "B", ",", "C", ")", "\n", "batch_dices", "[", "done_batch", "]", "=", "batch_dice", "\n", "\n", "", "if", "compute_haussdorf", ":", "\n", "                ", "haussdorf_res", ":", "Tensor", "=", "haussdorf", "(", "predicted_mask", ",", "target", ")", "\n", "assert", "haussdorf_res", ".", "shape", "==", "(", "B", ",", "C", ")", "\n", "haussdorf_log", "[", "sm_slice", "]", "=", "haussdorf_res", "\n", "", "if", "compute_miou", ":", "\n", "                ", "IoUs", ":", "Tensor", "=", "iIoU", "(", "predicted_mask", ",", "target", ")", "\n", "assert", "IoUs", ".", "shape", "==", "(", "B", ",", "C", ")", ",", "IoUs", ".", "shape", "\n", "iiou_log", "[", "sm_slice", "]", "=", "IoUs", "\n", "intersections", "[", "sm_slice", "]", "=", "inter_sum", "(", "predicted_mask", ",", "target", ")", "\n", "unions", "[", "sm_slice", "]", "=", "union_sum", "(", "predicted_mask", ",", "target", ")", "\n", "\n", "# Save images", "\n", "", "if", "savedir", ":", "\n", "                ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                    ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ",", "category", "=", "UserWarning", ")", "\n", "predicted_class", ":", "Tensor", "=", "probs2class", "(", "pred_probs", ")", "\n", "save_images", "(", "predicted_class", ",", "filenames", ",", "savedir", ",", "mode", ",", "epc", ")", "\n", "\n", "# Logging", "\n", "", "", "big_slice", "=", "slice", "(", "0", ",", "done_img", "+", "B", ")", "# Value for current and previous batches", "\n", "\n", "dsc_dict", "=", "{", "f\"DSC{n}\"", ":", "all_dices", "[", "big_slice", ",", "n", "]", ".", "mean", "(", ")", "for", "n", "in", "metric_axis", "}", "if", "few_axis", "else", "{", "}", "\n", "\n", "hauss_dict", "=", "{", "f\"HD{n}\"", ":", "haussdorf_log", "[", "big_slice", ",", "n", "]", ".", "mean", "(", ")", "for", "n", "in", "metric_axis", "}", "if", "compute_haussdorf", "and", "few_axis", "else", "{", "}", "\n", "\n", "batch_dict", "=", "{", "f\"bDSC{n}\"", ":", "batch_dices", "[", ":", "done_batch", ",", "n", "]", ".", "mean", "(", ")", "for", "n", "in", "metric_axis", "}", "if", "B", ">", "1", "and", "mode", "==", "\"val\"", "and", "few_axis", "else", "{", "}", "\n", "\n", "miou_dict", "=", "{", "f\"iIoU\"", ":", "iiou_log", "[", "big_slice", ",", "metric_axis", "]", ".", "mean", "(", ")", ",", "\n", "f\"mIoU\"", ":", "(", "intersections", ".", "sum", "(", "dim", "=", "0", ")", "/", "(", "unions", ".", "sum", "(", "dim", "=", "0", ")", "+", "1e-10", ")", ")", ".", "mean", "(", ")", "}", "if", "compute_miou", "else", "{", "}", "\n", "\n", "if", "len", "(", "metric_axis", ")", ">", "1", ":", "\n", "                ", "mean_dict", "=", "{", "\"DSC\"", ":", "all_dices", "[", "big_slice", ",", "metric_axis", "]", ".", "mean", "(", ")", "}", "\n", "if", "compute_haussdorf", ":", "\n", "                    ", "mean_dict", "[", "\"HD\"", "]", "=", "haussdorf_log", "[", "big_slice", ",", "metric_axis", "]", ".", "mean", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "mean_dict", "=", "{", "}", "\n", "\n", "", "stat_dict", "=", "{", "**", "miou_dict", ",", "**", "dsc_dict", ",", "**", "hauss_dict", ",", "**", "mean_dict", ",", "**", "batch_dict", ",", "\n", "\"loss\"", ":", "loss_log", "[", ":", "done_batch", "]", ".", "mean", "(", ")", "}", "\n", "nice_dict", "=", "{", "k", ":", "f\"{v:.3f}\"", "for", "(", "k", ",", "v", ")", "in", "stat_dict", ".", "items", "(", ")", "}", "\n", "\n", "done_img", "+=", "B", "\n", "done_batch", "+=", "1", "\n", "tq_iter", ".", "set_postfix", "(", "{", "**", "nice_dict", ",", "\"loader\"", ":", "str", "(", "i", ")", "}", ")", "\n", "tq_iter", ".", "update", "(", "1", ")", "\n", "", "", "tq_iter", ".", "close", "(", ")", "\n", "print", "(", "f\"{desc} \"", "+", "', '", ".", "join", "(", "f\"{k}={v}\"", "for", "(", "k", ",", "v", ")", "in", "nice_dict", ".", "items", "(", ")", ")", ")", "\n", "\n", "if", "compute_miou", ":", "\n", "        ", "mIoUs", ":", "Tensor", "=", "(", "intersections", ".", "sum", "(", "dim", "=", "0", ")", "/", "(", "unions", ".", "sum", "(", "dim", "=", "0", ")", "+", "1e-10", ")", ")", "\n", "assert", "mIoUs", ".", "shape", "==", "(", "C", ",", ")", ",", "mIoUs", ".", "shape", "\n", "", "else", ":", "\n", "        ", "mIoUs", "=", "None", "\n", "\n", "", "if", "not", "few_axis", "and", "False", ":", "\n", "        ", "print", "(", "f\"DSC: {[f'{all_dices[:, n].mean():.3f}' for n in metric_axis]}\"", ")", "\n", "print", "(", "f\"iIoU: {[f'{iiou_log[:, n].mean():.3f}' for n in metric_axis]}\"", ")", "\n", "if", "mIoUs", ":", "\n", "            ", "print", "(", "f\"mIoU: {[f'{mIoUs[n]:.3f}' for n in metric_axis]}\"", ")", "\n", "\n", "", "", "return", "loss_log", ",", "all_dices", ",", "batch_dices", ",", "haussdorf_log", ",", "mIoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.main.run": [[234, 344], ["main.setup", "dataloader.get_loaders", "sum", "sum", "sum", "sum", "max", "torch.zeros().to().type", "torch.zeros().to().type", "print", "range", "print", "map", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "torch.zeros().type", "main.do_epoch", "metrics.items", "pandas.DataFrame", "pd.DataFrame.to_csv", "val_dice[].mean", "scheduler", "len", "len", "len", "len", "torch.zeros().to", "torch.zeros().to", "torch.no_grad", "torch.no_grad", "main.do_epoch", "eval", "numpy.save", "pathlib.Path", "pathlib.Path", "pathlib.Path.exists", "shutil.copytree", "torch.save", "torch.save", "print", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "pathlib.Path", "e.cpu().numpy", "metrics[].mean().cpu().numpy", "metrics[].mean().cpu().numpy", "[].mean().cpu().numpy", "[].mean().cpu().numpy", "[].mean().cpu().numpy", "[].mean().cpu().numpy", "val_haussdorf[].mean", "open", "f.write", "shutil.rmtree", "pathlib.Path", "pathlib.Path", "pathlib.Path", "print", "torch.zeros", "torch.zeros", "eval", "eval", "pathlib.Path", "str", "len", "e.cpu", "metrics[].mean().cpu", "metrics[].mean().cpu", "[].mean().cpu", "[].mean().cpu", "[].mean().cpu", "[].mean().cpu", "[].mean", "metrics[].mean", "metrics[].mean", "[].mean", "[].mean", "[].mean", "[].mean"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.main.setup", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.dataloader.get_loaders", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.main.do_epoch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.main.do_epoch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.save", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.save", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.augment.save"], ["", "def", "run", "(", "args", ":", "argparse", ".", "Namespace", ")", "->", "Dict", "[", "str", ",", "Tensor", "]", ":", "\n", "    ", "n_class", ":", "int", "=", "args", ".", "n_class", "\n", "lr", ":", "float", "=", "args", ".", "l_rate", "\n", "savedir", ":", "str", "=", "args", ".", "workdir", "\n", "n_epoch", ":", "int", "=", "args", ".", "n_epoch", "\n", "val_f", ":", "int", "=", "args", ".", "val_loader_id", "\n", "\n", "loss_fns", ":", "List", "[", "List", "[", "Callable", "]", "]", "\n", "loss_weights", ":", "List", "[", "List", "[", "float", "]", "]", "\n", "net", ",", "optimizer", ",", "device", ",", "loss_fns", ",", "loss_weights", ",", "scheduler", "=", "setup", "(", "args", ",", "n_class", ")", "\n", "train_loaders", ":", "List", "[", "DataLoader", "]", "\n", "val_loaders", ":", "List", "[", "DataLoader", "]", "\n", "train_loaders", ",", "val_loaders", "=", "get_loaders", "(", "args", ",", "args", ".", "dataset", ",", "\n", "args", ".", "batch_size", ",", "n_class", ",", "\n", "args", ".", "debug", ",", "args", ".", "in_memory", ")", "\n", "\n", "n_tra", ":", "int", "=", "sum", "(", "len", "(", "tr_lo", ".", "dataset", ")", "for", "tr_lo", "in", "train_loaders", ")", "# Number of images in dataset", "\n", "l_tra", ":", "int", "=", "sum", "(", "len", "(", "tr_lo", ")", "for", "tr_lo", "in", "train_loaders", ")", "# Number of iteration per epc: different if batch_size > 1", "\n", "n_val", ":", "int", "=", "sum", "(", "len", "(", "vl_lo", ".", "dataset", ")", "for", "vl_lo", "in", "val_loaders", ")", "\n", "l_val", ":", "int", "=", "sum", "(", "len", "(", "vl_lo", ")", "for", "vl_lo", "in", "val_loaders", ")", "\n", "n_loss", ":", "int", "=", "max", "(", "map", "(", "len", ",", "loss_fns", ")", ")", "\n", "\n", "best_dice", ":", "Tensor", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "best_epoch", ":", "int", "=", "0", "\n", "metrics", "=", "{", "\"val_dice\"", ":", "torch", ".", "zeros", "(", "(", "n_epoch", ",", "n_val", ",", "n_class", ")", ",", "device", "=", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", ",", "\n", "\"val_batch_dice\"", ":", "torch", ".", "zeros", "(", "(", "n_epoch", ",", "l_val", ",", "n_class", ")", ",", "device", "=", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", ",", "\n", "\"val_loss\"", ":", "torch", ".", "zeros", "(", "(", "n_epoch", ",", "l_val", ",", "len", "(", "loss_fns", "[", "val_f", "]", ")", ")", ",", "device", "=", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", ",", "\n", "\"tra_dice\"", ":", "torch", ".", "zeros", "(", "(", "n_epoch", ",", "n_tra", ",", "n_class", ")", ",", "device", "=", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", ",", "\n", "\"tra_batch_dice\"", ":", "torch", ".", "zeros", "(", "(", "n_epoch", ",", "l_tra", ",", "n_class", ")", ",", "device", "=", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", ",", "\n", "\"tra_loss\"", ":", "torch", ".", "zeros", "(", "(", "n_epoch", ",", "l_tra", ",", "n_loss", ")", ",", "device", "=", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", "}", "\n", "if", "args", ".", "compute_haussdorf", ":", "\n", "        ", "metrics", "[", "\"val_haussdorf\"", "]", "=", "torch", ".", "zeros", "(", "(", "n_epoch", ",", "n_val", ",", "n_class", ")", ",", "device", "=", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "", "if", "args", ".", "compute_miou", ":", "\n", "        ", "metrics", "[", "\"val_mIoUs\"", "]", "=", "torch", ".", "zeros", "(", "(", "n_epoch", ",", "n_class", ")", ",", "device", "=", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "metrics", "[", "\"tra_mIoUs\"", "]", "=", "torch", ".", "zeros", "(", "(", "n_epoch", ",", "n_class", ")", ",", "device", "=", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "", "print", "(", "\"\\n>>> Starting the training\"", ")", "\n", "for", "i", "in", "range", "(", "n_epoch", ")", ":", "\n", "# Do training and validation loops", "\n", "        ", "tra_loss", ",", "tra_dice", ",", "tra_batch_dice", ",", "_", ",", "tra_mIoUs", "=", "do_epoch", "(", "\"train\"", ",", "net", ",", "device", ",", "train_loaders", ",", "i", ",", "\n", "loss_fns", ",", "loss_weights", ",", "n_class", ",", "\n", "savedir", "=", "savedir", "if", "args", ".", "save_train", "else", "\"\"", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "metric_axis", "=", "args", ".", "metric_axis", ",", "\n", "compute_miou", "=", "args", ".", "compute_miou", ",", "\n", "temperature", "=", "args", ".", "temperature", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "val_loss", ",", "val_dice", ",", "val_batch_dice", ",", "val_haussdorf", ",", "val_mIoUs", "=", "do_epoch", "(", "\"val\"", ",", "net", ",", "device", ",", "val_loaders", ",", "i", ",", "\n", "[", "loss_fns", "[", "val_f", "]", "]", ",", "\n", "[", "loss_weights", "[", "val_f", "]", "]", ",", "\n", "n_class", ",", "\n", "savedir", "=", "savedir", ",", "\n", "metric_axis", "=", "args", ".", "metric_axis", ",", "\n", "compute_haussdorf", "=", "args", ".", "compute_haussdorf", ",", "\n", "compute_miou", "=", "args", ".", "compute_miou", ",", "\n", "temperature", "=", "args", ".", "temperature", ")", "\n", "\n", "# Sort and save the metrics", "\n", "", "for", "k", "in", "metrics", ":", "\n", "            ", "assert", "metrics", "[", "k", "]", "[", "i", "]", ".", "shape", "==", "eval", "(", "k", ")", ".", "shape", ",", "(", "metrics", "[", "k", "]", "[", "i", "]", ".", "shape", ",", "eval", "(", "k", ")", ".", "shape", ",", "k", ")", "\n", "metrics", "[", "k", "]", "[", "i", "]", "=", "eval", "(", "k", ")", "\n", "\n", "", "for", "k", ",", "e", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "np", ".", "save", "(", "Path", "(", "savedir", ",", "f\"{k}.npy\"", ")", ",", "e", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "{", "\"tra_loss\"", ":", "metrics", "[", "\"tra_loss\"", "]", ".", "mean", "(", "dim", "=", "(", "1", ",", "2", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"val_loss\"", ":", "metrics", "[", "\"val_loss\"", "]", ".", "mean", "(", "dim", "=", "(", "1", ",", "2", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"tra_dice\"", ":", "metrics", "[", "\"tra_dice\"", "]", "[", ":", ",", ":", ",", "-", "1", "]", ".", "mean", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"val_dice\"", ":", "metrics", "[", "\"val_dice\"", "]", "[", ":", ",", ":", ",", "-", "1", "]", ".", "mean", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"tra_batch_dice\"", ":", "metrics", "[", "\"tra_batch_dice\"", "]", "[", ":", ",", ":", ",", "-", "1", "]", ".", "mean", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"val_batch_dice\"", ":", "metrics", "[", "\"val_batch_dice\"", "]", "[", ":", ",", ":", ",", "-", "1", "]", ".", "mean", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "df", ".", "to_csv", "(", "Path", "(", "savedir", ",", "args", ".", "csv", ")", ",", "float_format", "=", "\"%.4f\"", ",", "index_label", "=", "\"epoch\"", ")", "\n", "\n", "# Save model if better", "\n", "current_dice", ":", "Tensor", "=", "val_dice", "[", ":", ",", "args", ".", "metric_axis", "]", ".", "mean", "(", ")", "\n", "if", "current_dice", ">", "best_dice", ":", "\n", "            ", "best_epoch", "=", "i", "\n", "best_dice", "=", "current_dice", "\n", "if", "args", ".", "compute_haussdorf", ":", "\n", "                ", "best_haussdorf", "=", "val_haussdorf", "[", ":", ",", "args", ".", "metric_axis", "]", ".", "mean", "(", ")", "\n", "\n", "", "with", "open", "(", "Path", "(", "savedir", ",", "\"best_epoch.txt\"", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "str", "(", "i", ")", ")", "\n", "", "best_folder", "=", "Path", "(", "savedir", ",", "\"best_epoch\"", ")", "\n", "if", "best_folder", ".", "exists", "(", ")", ":", "\n", "                ", "rmtree", "(", "best_folder", ")", "\n", "", "copytree", "(", "Path", "(", "savedir", ",", "f\"iter{i:03d}\"", ")", ",", "Path", "(", "best_folder", ")", ")", "\n", "torch", ".", "save", "(", "net", ",", "Path", "(", "savedir", ",", "\"best.pkl\"", ")", ")", "\n", "\n", "", "optimizer", ",", "loss_fns", ",", "loss_weights", "=", "scheduler", "(", "i", ",", "optimizer", ",", "loss_fns", ",", "loss_weights", ")", "\n", "\n", "# if args.schedule and (i > (best_epoch + 20)):", "\n", "if", "args", ".", "schedule", "and", "(", "i", "%", "(", "best_epoch", "+", "20", ")", "==", "0", ")", ":", "# Yeah, ugly but will clean that later", "\n", "            ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "lr", "*=", "0.5", "\n", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "print", "(", "f'>> New learning Rate: {lr}'", ")", "\n", "\n", "", "", "if", "i", ">", "0", "and", "not", "(", "i", "%", "5", ")", ":", "\n", "            ", "maybe_hauss", "=", "f', Haussdorf: {best_haussdorf:.3f}'", "if", "args", ".", "compute_haussdorf", "else", "''", "\n", "print", "(", "f\">> Best results at epoch {best_epoch}: DSC: {best_dice:.3f}{maybe_hauss}\"", ")", "\n", "\n", "# Because displaying the results at the end is actually convenient", "\n", "", "", "maybe_hauss", "=", "f', Haussdorf: {best_haussdorf:.3f}'", "if", "args", ".", "compute_haussdorf", "else", "''", "\n", "print", "(", "f\">> Best results at epoch {best_epoch}: DSC: {best_dice:.3f}{maybe_hauss}\"", ")", "\n", "for", "metric", "in", "metrics", ":", "\n", "        ", "if", "\"val\"", "in", "metric", "or", "\"loss\"", "in", "metric", ":", "# Do not care about training values, nor the loss (keep it simple)", "\n", "            ", "print", "(", "f\"\\t{metric}: {metrics[metric][best_epoch].mean(dim=0)}\"", ")", "\n", "\n", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.main.get_args": [[346, 400], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "list", "range"], "function", ["None"], ["", "def", "get_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Hyperparams'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "# parser.add_argument('--weak_subfolder', type=str, required=True)", "\n", "parser", ".", "add_argument", "(", "\"--csv\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--workdir\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--losses\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"List of list of (loss_name, loss_params, bounds_name, bounds_params, fn, weight)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--folders\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"List of list of (subfolder, transform, is_hot)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--network\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"The network to use\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--grp_regex\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_class\"", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--metric_axis\"", ",", "type", "=", "int", ",", "nargs", "=", "'*'", ",", "required", "=", "True", ",", "help", "=", "\"Classes to display metrics. \\\n        Display only the average of everything if empty\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cpu\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--in_memory\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--schedule\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_sgd\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--compute_haussdorf\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--compute_miou\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_train\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--group\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Group the patient slices together for validation. \\\n        Useful to compute the 3d dice, but might destroy the memory for datasets with a lot of slices per patient.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--group_train\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Group the patient slices together for training. \\\n        Useful to compute the 3d dice, but might destroy the memory for datasets with a lot of slices per patient.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--n_epoch'", ",", "nargs", "=", "'?'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "\n", "help", "=", "'# of the epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--l_rate'", ",", "nargs", "=", "'?'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "\n", "help", "=", "'Learning Rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "\"Temperature for the softmax\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scheduler\"", ",", "type", "=", "str", ",", "default", "=", "\"DummyScheduler\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--scheduler_params\"", ",", "type", "=", "str", ",", "default", "=", "\"{}\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--modalities\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--weights\"", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"Stored weights to restore\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--training_folders\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "\"train\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--validation_folder\"", ",", "type", "=", "str", ",", "default", "=", "\"val\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--val_loader_id\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"\"\"\n                        Kinda housefiry at the moment. When we have several train loader (for hybrid training\n                        for instance), wants only one validation loader. The way the dataloading creation is\n                        written at the moment, it will create several validation loader on the same topfolder (val),\n                        but with different folders/bounds ; which will basically duplicate the evaluation.\n                        \"\"\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "args", ".", "metric_axis", "==", "[", "]", ":", "\n", "        ", "args", ".", "metric_axis", "=", "list", "(", "range", "(", "args", ".", "n_class", ")", ")", "\n", "", "print", "(", "\"\\n\"", ",", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.bounds.PreciseBounds.__init__": [[10, 17], ["getattr", "print", "__import__"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "margin", ":", "float", "=", "kwargs", "[", "'margin'", "]", "\n", "self", ".", "mode", ":", "str", "=", "kwargs", "[", "'mode'", "]", "\n", "\n", "self", ".", "__fn__", "=", "getattr", "(", "__import__", "(", "'utils'", ")", ",", "kwargs", "[", "'fn'", "]", ")", "\n", "\n", "print", "(", "f\"Initialized {self.__class__.__name__} with {kwargs}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.bounds.PreciseBounds.__call__": [[18, 34], ["[].type", "torch.stack", "torch.max().type", "ValueError", "torch.max", "bounds.PreciseBounds.__fn__", "torch.ones_like", "torch.zeros"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ":", "Tensor", ",", "target", ":", "Tensor", ",", "weak_target", ":", "Tensor", ",", "filename", ":", "str", ")", "->", "Tensor", ":", "\n", "        ", "value", ":", "Tensor", "=", "self", ".", "__fn__", "(", "target", "[", "None", ",", "...", "]", ")", "[", "0", "]", ".", "type", "(", "torch", ".", "float32", ")", "# cwh and not bcwh", "\n", "margin", ":", "Tensor", "\n", "if", "self", ".", "mode", "==", "\"percentage\"", ":", "\n", "            ", "margin", "=", "value", "*", "self", ".", "margin", "\n", "", "elif", "self", ".", "mode", "==", "\"abs\"", ":", "\n", "            ", "margin", "=", "torch", ".", "ones_like", "(", "value", ")", "*", "self", ".", "margin", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode\"", ")", "\n", "\n", "", "with_margin", ":", "Tensor", "=", "torch", ".", "stack", "(", "[", "value", "-", "margin", ",", "value", "+", "margin", "]", ",", "dim", "=", "-", "1", ")", "\n", "assert", "with_margin", ".", "shape", "==", "(", "*", "value", ".", "shape", ",", "2", ")", ",", "with_margin", ".", "shape", "\n", "\n", "res", "=", "torch", ".", "max", "(", "with_margin", ",", "torch", ".", "zeros", "(", "*", "value", ".", "shape", ",", "2", ")", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.bounds.PredictionBounds.__init__": [[37, 45], ["torch.load", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "margin", ":", "float", "=", "kwargs", "[", "'margin'", "]", "\n", "self", ".", "mode", ":", "str", "=", "kwargs", "[", "'mode'", "]", "\n", "\n", "# Do it on CPU to avoid annoying the main loop", "\n", "self", ".", "net", ":", "Callable", "[", "Tensor", ",", "[", "Tensor", "]", "]", "=", "torch", ".", "load", "(", "kwargs", "[", "'net'", "]", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "print", "(", "f\"Initialized {self.__class__.__name__} with {kwargs}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.bounds.PredictionBounds.__call__": [[46, 63], ["torch.stack", "torch.max().type", "torch.no_grad", "[].type", "ValueError", "torch.max", "torch.ones_like", "torch.zeros", "bounds.PredictionBounds.net"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "image", ":", "Tensor", ",", "target", ":", "Tensor", ",", "weak_target", ":", "Tensor", ",", "filename", ":", "str", ")", "->", "Tensor", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "value", ":", "Tensor", "=", "self", ".", "net", "(", "image", "[", "None", ",", "...", "]", ")", "[", "0", "]", ".", "type", "(", "torch", ".", "float32", ")", "[", "...", ",", "None", "]", "# cwh and not bcwh", "\n", "", "margin", ":", "Tensor", "\n", "if", "self", ".", "mode", "==", "\"percentage\"", ":", "\n", "            ", "margin", "=", "value", "*", "self", ".", "margin", "\n", "", "elif", "self", ".", "mode", "==", "\"abs\"", ":", "\n", "            ", "margin", "=", "torch", ".", "ones_like", "(", "value", ")", "*", "self", ".", "margin", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode\"", ")", "\n", "\n", "", "with_margin", ":", "Tensor", "=", "torch", ".", "stack", "(", "[", "value", "-", "margin", ",", "value", "+", "margin", "]", ",", "dim", "=", "-", "1", ")", "\n", "assert", "with_margin", ".", "shape", "==", "(", "*", "value", ".", "shape", ",", "2", ")", ",", "with_margin", ".", "shape", "\n", "\n", "res", "=", "torch", ".", "max", "(", "with_margin", ",", "torch", ".", "zeros", "(", "*", "value", ".", "shape", ",", "2", ")", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.inference.runInference": [[21, 82], ["print", "torch.load", "torch.load", "torch.device", "torch.device", "torch.load.to", "print", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "utils.map_", "dataloader.SliceDataset", "torch.utils.data.DataLoader", "print", "len", "utils.tqdm_", "pathlib.Path", "folders[].glob", "enumerate", "torch.no_grad", "torch.no_grad", "str", "image.to.to", "torch.load.", "torch.softmax", "img.convert", "torch.tensor", "torch.tensor", "numpy.array", "torch.zeros", "torch.zeros", "warnings.catch_warnings", "warnings.simplefilter", "utils.save_images", "numpy.array", "utils.probs2class", "thresholded.argmax"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.save_images", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.probs2class"], ["def", "runInference", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "print", "(", "'>>> Loading model'", ")", "\n", "net", "=", "torch", ".", "load", "(", "args", ".", "model_weights", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "net", ".", "to", "(", "device", ")", "\n", "\n", "print", "(", "'>>> Loading the data'", ")", "\n", "batch_size", ":", "int", "=", "args", ".", "batch_size", "\n", "num_classes", ":", "int", "=", "args", ".", "num_classes", "\n", "\n", "png_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "img", ":", "img", ".", "convert", "(", "'L'", ")", ",", "\n", "lambda", "img", ":", "np", ".", "array", "(", "img", ")", "[", "np", ".", "newaxis", ",", "...", "]", ",", "\n", "lambda", "nd", ":", "nd", "/", "255", ",", "# max <= 1", "\n", "lambda", "nd", ":", "torch", ".", "tensor", "(", "nd", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "]", ")", "\n", "dummy_gt", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "img", ":", "np", ".", "array", "(", "img", ")", ",", "\n", "lambda", "nd", ":", "torch", ".", "zeros", "(", "(", "num_classes", ",", "*", "(", "nd", ".", "shape", ")", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "]", ")", "\n", "\n", "folders", ":", "List", "[", "Path", "]", "=", "[", "Path", "(", "args", ".", "data_folder", ")", "]", "\n", "names", ":", "List", "[", "str", "]", "=", "map_", "(", "lambda", "p", ":", "str", "(", "p", ".", "name", ")", ",", "folders", "[", "0", "]", ".", "glob", "(", "\"*.png\"", ")", ")", "\n", "dt_set", "=", "SliceDataset", "(", "names", ",", "\n", "folders", "*", "2", ",", "# Duplicate for compatibility reasons", "\n", "are_hots", "=", "[", "False", ",", "False", "]", ",", "\n", "transforms", "=", "[", "png_transform", ",", "dummy_gt", "]", ",", "# So it is happy about the target size", "\n", "bounds_generators", "=", "[", "]", ",", "\n", "debug", "=", "False", ",", "\n", "C", "=", "num_classes", ")", "\n", "loader", "=", "DataLoader", "(", "dt_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "batch_size", "+", "2", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "print", "(", "'>>> Starting the inference'", ")", "\n", "savedir", ":", "str", "=", "args", ".", "save_folder", "\n", "total_iteration", "=", "len", "(", "loader", ")", "\n", "desc", "=", "f\">> Inference\"", "\n", "tq_iter", "=", "tqdm_", "(", "enumerate", "(", "loader", ")", ",", "total", "=", "total_iteration", ",", "desc", "=", "desc", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "j", ",", "(", "filenames", ",", "image", ",", "_", ")", "in", "tq_iter", ":", "\n", "            ", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "\n", "pred_logits", ":", "Tensor", "=", "net", "(", "image", ")", "\n", "pred_probs", ":", "Tensor", "=", "F", ".", "softmax", "(", "pred_logits", ",", "dim", "=", "1", ")", "\n", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "\n", "predicted_class", ":", "Tensor", "\n", "if", "args", ".", "mode", "==", "\"argmax\"", ":", "\n", "                    ", "predicted_class", "=", "probs2class", "(", "pred_probs", ")", "\n", "", "elif", "args", ".", "mode", "==", "'probs'", ":", "\n", "                    ", "predicted_class", "=", "(", "pred_probs", "[", ":", ",", "args", ".", "probs_class", ",", "...", "]", "*", "255", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "", "elif", "args", ".", "mode", "==", "\"threshold\"", ":", "\n", "                    ", "thresholded", ":", "Tensor", "=", "pred_probs", "[", ":", ",", "...", "]", ">", "args", ".", "threshold", "\n", "predicted_class", "=", "thresholded", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "", "save_images", "(", "predicted_class", ",", "filenames", ",", "savedir", ",", "\"\"", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.inference.get_args": [[84, 101], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["None"], ["", "", "", "", "def", "get_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Inference parameters'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_folder'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"The folder containing the images to predict\"", ")", "\n", "parser", ".", "add_argument", "(", "'--save_folder'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--model_weights'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'argmax'", ",", "choices", "=", "[", "'argmax'", ",", "'threshold'", ",", "'probs'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--threshold'", ",", "type", "=", "float", ",", "default", "=", ".5", ")", "\n", "parser", ".", "add_argument", "(", "'--probs_class'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.report.main": [[10, 18], ["print", "report.display_metric", "report.display_metric", "len"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.report.display_metric", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.report.display_metric"], ["def", "main", "(", "args", ")", "->", "None", ":", "\n", "    ", "print", "(", "f\"Reporting on {len(args.folders)} folders.\"", ")", "\n", "\n", "main_metric", ":", "str", "=", "args", ".", "metrics", "[", "0", "]", "\n", "\n", "best_epoch", ":", "List", "[", "int", "]", "=", "display_metric", "(", "args", ",", "main_metric", ",", "args", ".", "folders", ",", "args", ".", "axises", ")", "\n", "for", "metric", "in", "args", ".", "metrics", "[", "1", ":", "]", ":", "\n", "        ", "display_metric", "(", "args", ",", "metric", ",", "args", ".", "folders", ",", "args", ".", "axises", ",", "best_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.report.display_metric": [[20, 50], ["print", "enumerate", "pathlib.Path().with_suffix", "data.mean", "data.std", "print", "len", "numpy.load", "numpy.argmax", "averages[].mean", "averages[].std", "pathlib.Path", "pathlib.Path"], "function", ["None"], ["", "", "def", "display_metric", "(", "args", ",", "metric", ":", "str", ",", "folders", ":", "List", "[", "str", "]", ",", "axises", ":", "Tuple", "[", "int", "]", ",", "best_epoch", ":", "List", "[", "int", "]", "=", "None", ")", ":", "\n", "    ", "print", "(", "f\"{metric} (classes {axises})\"", ")", "\n", "\n", "if", "not", "best_epoch", ":", "\n", "        ", "get_epoch", "=", "True", "\n", "best_epoch", "=", "[", "0", "]", "*", "len", "(", "folders", ")", "\n", "", "else", ":", "\n", "        ", "get_epoch", "=", "False", "\n", "\n", "", "for", "i", ",", "folder", "in", "enumerate", "(", "folders", ")", ":", "\n", "        ", "file", ":", "Path", "=", "Path", "(", "folder", ",", "metric", ")", ".", "with_suffix", "(", "\".npy\"", ")", "\n", "data", ":", "np", ".", "ndarray", "=", "np", ".", "load", "(", "file", ")", "[", ":", ",", ":", ",", "axises", "]", "# Epoch, sample, classes", "\n", "averages", ":", "np", ".", "ndarray", "=", "data", ".", "mean", "(", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "stds", ":", "np", ".", "ndarray", "=", "data", ".", "std", "(", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "if", "get_epoch", ":", "\n", "            ", "best_epoch", "[", "i", "]", "=", "np", ".", "argmax", "(", "averages", ")", "\n", "\n", "", "val", ":", "float", "\n", "val_std", ":", "float", "\n", "if", "args", ".", "mode", "==", "'max'", ":", "\n", "            ", "val", "=", "averages", "[", "best_epoch", "[", "i", "]", "]", "\n", "val_std", "=", "stds", "[", "best_epoch", "[", "i", "]", "]", "\n", "", "else", ":", "\n", "            ", "val", "=", "averages", "[", "-", "args", ".", "last_n_epc", ":", "]", ".", "mean", "(", ")", "\n", "val_std", "=", "averages", "[", "-", "args", ".", "last_n_epc", ":", "]", ".", "std", "(", ")", "\n", "\n", "", "print", "(", "f\"\\t{Path(folder).name}: {val:.{args.precision}f} ({val_std:.{args.precision}f}) at epoch {best_epoch[i]}\"", ")", "\n", "\n", "", "return", "best_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.report.get_args": [[52, 66], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["None"], ["", "def", "get_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Plot data over time'", ")", "\n", "parser", ".", "add_argument", "(", "'--folders'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "nargs", "=", "'+'", ",", "help", "=", "\"The folders containing the file\"", ")", "\n", "parser", ".", "add_argument", "(", "'--metrics'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--axises'", ",", "type", "=", "int", ",", "required", "=", "True", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'max'", ",", "choices", "=", "[", "'max'", ",", "'avg'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--last_n_epc'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--precision'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.plot_ablation_patients.get_curve": [[17, 19], ["p.parents[].name.split"], "function", ["None"], ["def", "get_curve", "(", "p", ":", "Path", ")", "->", "str", ":", "\n", "    ", "return", "'_'", ".", "join", "(", "p", ".", "parents", "[", "0", "]", ".", "name", ".", "split", "(", "\"_\"", ")", "[", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.plot_ablation_patients.get_number": [[21, 23], ["int", "p.parents[].name.split"], "function", ["None"], ["", "def", "get_number", "(", "p", ":", "Path", ")", "->", "int", ":", "\n", "    ", "return", "int", "(", "p", ".", "parents", "[", "0", "]", ".", "name", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.plot_ablation_patients.main": [[25, 110], ["matplotlib.rc", "utils.map_", "utils.map_", "utils.map_", "sorted", "print", "print", "print", "print", "sorted", "matplotlib.figure", "plt.figure.gca", "fig.gca.set_ylim", "fig.gca.set_xlim", "fig.gca.set_yticks", "fig.gca.set_xticks", "fig.gca.set_xlabel", "fig.gca.set_ylabel", "fig.gca.grid", "collections.defaultdict", "enumerate", "numbers_max.items", "fig.gca.legend", "plt.figure.tight_layout", "set", "set", "fig.gca.set_title", "fig.gca.set_title", "zip", "zip", "matplotlib.plot", "plt.figure.savefig", "matplotlib.show", "len", "len", "curve_xs.append", "numpy.load", "arr.mean", "curve_ys.append", "max", "zip", "matplotlib.errorbar", "matplotlib.plot", "curve_vals.mean", "curve_vals.std", "curve_ys_std.append", "arr_mean[].max", "sorted", "zip", "sorted", "operator.itemgetter", "zip", "operator.itemgetter"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_"], ["", "def", "main", "(", "args", ":", "argparse", ".", "Namespace", ")", "->", "None", ":", "\n", "    ", "plt", ".", "rc", "(", "'font'", ",", "size", "=", "args", ".", "fontsize", ")", "\n", "\n", "paths", ":", "List", "[", "Path", "]", "=", "map_", "(", "Path", ",", "args", ".", "metric_logs", ")", "\n", "\n", "numbers", ":", "List", "[", "int", "]", "=", "map_", "(", "get_number", ",", "paths", ")", "\n", "curves", ":", "List", "[", "str", "]", "=", "map_", "(", "get_curve", ",", "paths", ")", "\n", "uniq_curves", ":", "List", "[", "str", "]", "=", "sorted", "(", "set", "(", "curves", ")", ")", "\n", "if", "args", ".", "labels", ":", "\n", "        ", "assert", "len", "(", "uniq_curves", ")", "==", "len", "(", "args", ".", "labels", ")", "\n", "\n", "", "print", "(", "args", ".", "metric_logs", ")", "\n", "print", "(", "paths", ")", "\n", "print", "(", "numbers", ")", "\n", "print", "(", "curves", ")", "\n", "\n", "idx", ":", "List", "[", "int", "]", "=", "sorted", "(", "set", "(", "numbers", ")", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "args", ".", "figsize", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "\n", "ax", ".", "set_ylim", "(", "[", "0", ",", "1", "]", ")", "\n", "ax", ".", "set_xlim", "(", "[", "0", ",", "76", "]", ")", "\n", "\n", "ax", ".", "set_yticks", "(", "np", ".", "mgrid", "[", "0", ":", "1.1", ":", ".2", "]", ")", "\n", "ax", ".", "set_xticks", "(", "[", "0", "]", "+", "idx", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "\"# of fully anotated patient\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"DSC\"", ")", "\n", "ax", ".", "grid", "(", "True", ",", "axis", "=", "'y'", ")", "\n", "\n", "if", "args", ".", "title", ":", "\n", "        ", "ax", ".", "set_title", "(", "args", ".", "title", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_title", "(", "f\"Comparison between {', '.join(uniq_curves)} training\"", ")", "\n", "\n", "", "numbers_max", ":", "Dict", "[", "int", ",", "float", "]", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "i", ",", "curve", "in", "enumerate", "(", "uniq_curves", ")", ":", "\n", "        ", "curve_xs", ":", "List", "[", "int", "]", "=", "[", "]", "\n", "curve_ys", ":", "List", "[", "float", "]", "=", "[", "]", "\n", "curve_ys_std", ":", "List", "[", "float", "]", "=", "[", "]", "\n", "\n", "for", "sub_curve", ",", "number", ",", "path", "in", "zip", "(", "curves", ",", "numbers", ",", "paths", ")", ":", "\n", "            ", "if", "sub_curve", "!=", "curve", ":", "\n", "                ", "continue", "\n", "\n", "", "curve_xs", ".", "append", "(", "number", ")", "\n", "\n", "arr", ":", "np", ".", "ndarray", "=", "np", ".", "load", "(", "path", ")", "\n", "arr_mean", ":", "np", ".", "ndarray", "=", "arr", ".", "mean", "(", "axis", "=", "1", ")", "\n", "val", ":", "float", "\n", "if", "args", ".", "mean_last", ":", "\n", "                ", "curve_vals", ":", "np", ".", "ndarray", "=", "arr_mean", "[", "-", "args", ".", "last_epc", ":", ",", "args", ".", "metric_axis", "]", "\n", "val", "=", "curve_vals", ".", "mean", "(", ")", "\n", "std", ":", "float", "=", "curve_vals", ".", "std", "(", ")", "\n", "\n", "curve_ys_std", ".", "append", "(", "std", ")", "\n", "", "else", ":", "\n", "                ", "val", "=", "arr_mean", "[", ":", ",", "args", ".", "metric_axis", "]", ".", "max", "(", ")", "\n", "\n", "", "curve_ys", ".", "append", "(", "val", ")", "\n", "\n", "numbers_max", "[", "number", "]", "=", "max", "(", "val", ",", "numbers_max", "[", "number", "]", ")", "\n", "\n", "# Zip tuple, sort it according to item 0, unzip", "\n", "", "curve_xs", ",", "curve_ys", "=", "zip", "(", "*", "sorted", "(", "zip", "(", "curve_xs", ",", "curve_ys", ")", ",", "key", "=", "itemgetter", "(", "0", ")", ")", ")", "\n", "\n", "if", "args", ".", "mean_last", ":", "\n", "            ", "curve_xs", ",", "curve_ys_std", "=", "zip", "(", "*", "sorted", "(", "zip", "(", "curve_xs", ",", "curve_ys_std", ")", ",", "key", "=", "itemgetter", "(", "0", ")", ")", ")", "\n", "\n", "lab", ":", "str", "=", "args", ".", "labels", "[", "i", "]", "if", "args", ".", "labels", "else", "curve", "\n", "plt", ".", "errorbar", "(", "curve_xs", ",", "curve_ys", ",", "yerr", "=", "curve_ys_std", ",", "capsize", "=", "3", ",", "label", "=", "lab", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "plot", "(", "curve_xs", ",", "curve_ys", ",", "label", "=", "curve", ")", "\n", "\n", "", "", "for", "x", ",", "y", "in", "numbers_max", ".", "items", "(", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "[", "x", ",", "x", "]", ",", "[", "0", ",", "y", "]", ",", "color", "=", "'gray'", ",", "linewidth", "=", ".25", ")", "\n", "", "ax", ".", "legend", "(", "loc", "=", "args", ".", "loc", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "if", "args", ".", "savefig", ":", "\n", "        ", "fig", ".", "savefig", "(", "args", ".", "savefig", ")", "\n", "\n", "", "if", "not", "args", ".", "headless", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.plot_ablation_patients.get_args": [[112, 133], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "matplotlib.legend.Legend.codes.copy", "matplotlib.legend.Legend.codes.copy"], "function", ["None"], ["", "", "def", "get_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Hyperparams'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--metric_logs\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--metric_axis\"", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--headless\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--mean_last\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--title\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "\"--savefig\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--figsize\"", ",", "type", "=", "int", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "14", ",", "9", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--fontsize\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--labels\"", ",", "type", "=", "str", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "\"--last_epc\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "\"--loc\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "choices", "=", "matplotlib", ".", "legend", ".", "Legend", ".", "codes", ".", "copy", "(", ")", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "\"\\n\"", ",", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.interpolate.__init__": [[22, 27], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", ",", "mode", "=", "'nearest'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.interpolate.forward": [[28, 30], ["torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "cin", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "cin", ",", "mode", "=", "self", ".", "mode", ",", "scale_factor", "=", "self", ".", "scale_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.residualConv.__init__": [[122, 134], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.convBatch", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", "residualConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "\n", "convBatch", "(", "nin", ",", "nout", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nout", ",", "nout", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", "\n", ")", "\n", "self", ".", "res", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "nin", "!=", "nout", ":", "\n", "            ", "self", ".", "res", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nin", ",", "nout", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.residualConv.forward": [[136, 139], ["layers.residualConv.convs", "torch.leaky_relu", "torch.leaky_relu", "layers.residualConv.res"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "convs", "(", "input", ")", "\n", "return", "F", ".", "leaky_relu", "(", "out", "+", "self", ".", "res", "(", "input", ")", ",", "0.2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch": [[7, 12], ["torch.Sequential", "layer", "torch.BatchNorm2d", "torch.PReLU"], "function", ["None"], ["def", "convBatch", "(", "nin", ",", "nout", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "layer", "=", "nn", ".", "Conv2d", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "layer", "(", "nin", ",", "nout", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ",", "dilation", "=", "dilation", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.downSampleConv": [[15, 18], ["torch.Sequential", "layers.convBatch"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch"], ["", "def", "downSampleConv", "(", "nin", ",", "nout", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "convBatch", "(", "nin", ",", "nout", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.upSampleConv": [[32, 38], ["torch.Sequential", "layers.interpolate", "layers.convBatch", "layers.convBatch"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.convBatch"], ["", "", "def", "upSampleConv", "(", "nin", ",", "nout", ",", "kernel_size", "=", "3", ",", "upscale", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "# nn.Upsample(scale_factor=upscale),", "\n", "interpolate", "(", "mode", "=", "'nearest'", ",", "scale_factor", "=", "upscale", ")", ",", "\n", "convBatch", "(", "nin", ",", "nout", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", ",", "\n", "convBatch", "(", "nout", ",", "nout", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "bias", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block": [[41, 48], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d"], "function", ["None"], ["", "def", "conv_block", "(", "in_dim", ",", "out_dim", ",", "act_fn", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "act_fn", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_1": [[50, 57], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU"], "function", ["None"], ["", "def", "conv_block_1", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_Asym": [[59, 67], ["torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU", "tuple", "tuple"], "function", ["None"], ["", "def", "conv_block_Asym", "(", "in_dim", ",", "out_dim", ",", "kernelSize", ")", ":", "\n", "    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "[", "kernelSize", ",", "1", "]", ",", "padding", "=", "tuple", "(", "[", "2", ",", "0", "]", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "[", "1", ",", "kernelSize", "]", ",", "padding", "=", "tuple", "(", "[", "0", ",", "2", "]", ")", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_3_3": [[69, 76], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.PReLU"], "function", ["None"], ["", "def", "conv_block_3_3", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block_3": [[78, 86], ["torch.Sequential", "layers.conv_block", "layers.conv_block", "torch.Conv2d", "torch.BatchNorm2d"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_block"], ["", "def", "conv_block_3", "(", "in_dim", ",", "out_dim", ",", "act_fn", ")", ":", "\n", "    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "conv_block", "(", "in_dim", ",", "out_dim", ",", "act_fn", ")", ",", "\n", "conv_block", "(", "out_dim", ",", "out_dim", ",", "act_fn", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv": [[88, 103], ["torch.LeakyReLU", "layer", "layers.insert", "torch.Sequential", "layers.append", "torch.BatchNorm2d", "layers.append", "layers.append", "activ"], "function", ["None"], ["", "def", "conv", "(", "nin", ",", "nout", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "layer", "=", "nn", ".", "Conv2d", ",", "\n", "BN", "=", "False", ",", "ws", "=", "False", ",", "activ", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "gainWS", "=", "2", ")", ":", "\n", "    ", "convlayer", "=", "layer", "(", "nin", ",", "nout", ",", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "bias", ")", "\n", "layers", "=", "[", "]", "\n", "if", "BN", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "BatchNorm2d", "(", "nout", ")", ")", "\n", "", "if", "activ", "is", "not", "None", ":", "\n", "        ", "if", "activ", "==", "nn", ".", "PReLU", ":", "\n", "# to avoid sharing the same parameter, activ must be set to nn.PReLU (without '()')", "\n", "            ", "layers", ".", "append", "(", "activ", "(", "num_parameters", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "# if activ == nn.PReLU(), the parameter will be shared for the whole network !", "\n", "            ", "layers", ".", "append", "(", "activ", ")", "\n", "", "", "layers", ".", "insert", "(", "ws", ",", "convlayer", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.conv_decod_block": [[106, 113], ["torch.Sequential", "torch.ConvTranspose2d", "torch.BatchNorm2d"], "function", ["None"], ["", "def", "conv_decod_block", "(", "in_dim", ",", "out_dim", ",", "act_fn", ")", ":", "\n", "    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_dim", ",", "out_dim", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", ",", "\n", "act_fn", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.layers.maxpool": [[115, 118], ["torch.MaxPool2d"], "function", ["None"], ["", "def", "maxpool", "(", ")", ":", "\n", "    ", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "return", "pool", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.scheduler.DummyScheduler.__call__": [[11, 14], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "epoch", ":", "int", ",", "optimizer", ":", "Any", ",", "loss_fns", ":", "List", "[", "List", "[", "Callable", "]", "]", ",", "loss_weights", ":", "List", "[", "List", "[", "float", "]", "]", ")", "->", "Tuple", "[", "float", ",", "List", "[", "List", "[", "Callable", "]", "]", ",", "List", "[", "List", "[", "float", "]", "]", "]", ":", "\n", "        ", "return", "optimizer", ",", "loss_fns", ",", "loss_weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.hist.run": [[15, 59], ["utils.map_", "matplotlib.figure", "plt.figure.gca", "fig.gca.set_xlim", "fig.gca.set_xlabel", "fig.gca.set_ylabel", "fig.gca.grid", "fig.gca.set_title", "numpy.linspace", "zip", "fig.gca.legend", "plt.figure.tight_layout", "len", "len", "len", "NotImplementedError", "pathlib.Path", "len", "utils.map_", "plt.figure.savefig", "matplotlib.show", "a[].mean", "numpy.argmax", "fig.gca.hist"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_"], ["def", "run", "(", "args", ":", "argparse", ".", "Namespace", ")", "->", "None", ":", "\n", "    ", "assert", "len", "(", "args", ".", "folders", ")", "<=", "len", "(", "colors", ")", "\n", "\n", "if", "len", "(", "args", ".", "columns", ")", ">", "1", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only 1 columns at a time is handled for now\"", ")", "\n", "\n", "", "paths", ":", "List", "[", "Path", "]", "=", "[", "Path", "(", "f", ",", "args", ".", "filename", ")", "for", "f", "in", "args", ".", "folders", "]", "\n", "arrays", ":", "List", "[", "np", ".", "ndarray", "]", "=", "map_", "(", "np", ".", "load", ",", "paths", ")", "\n", "metric_name", ":", "str", "=", "paths", "[", "0", "]", ".", "stem", "\n", "\n", "if", "len", "(", "arrays", "[", "0", "]", ".", "shape", ")", "==", "2", ":", "\n", "        ", "arrays", "=", "map_", "(", "lambda", "a", ":", "a", "[", "...", ",", "np", ".", "newaxis", "]", ",", "arrays", ")", "\n", "", "epoch", ",", "_", ",", "class_", "=", "arrays", "[", "0", "]", ".", "shape", "\n", "for", "a", "in", "arrays", "[", "1", ":", "]", ":", "\n", "        ", "ea", ",", "_", ",", "ca", "=", "a", ".", "shape", "\n", "assert", "epoch", "==", "ea", "and", "class_", "==", "ca", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "14", ",", "9", ")", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "# ax.set_ylim([0, 1])", "\n", "ax", ".", "set_xlim", "(", "[", "0", ",", "1", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "metric_name", ")", "\n", "ax", ".", "set_ylabel", "(", "\"Percentage\"", ")", "\n", "ax", ".", "grid", "(", "True", ",", "axis", "=", "'y'", ")", "\n", "ax", ".", "set_title", "(", "f\"{metric_name} histograms\"", ")", "\n", "\n", "bins", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "args", ".", "nbins", ")", "\n", "for", "a", ",", "c", ",", "p", "in", "zip", "(", "arrays", ",", "colors", ",", "paths", ")", ":", "\n", "        ", "for", "k", "in", "args", ".", "columns", ":", "\n", "            ", "mean_a", "=", "a", "[", "...", ",", "k", "]", ".", "mean", "(", "axis", "=", "1", ")", "\n", "best_epoch", ":", "int", "=", "np", ".", "argmax", "(", "mean_a", ")", "\n", "\n", "# values = a[args.epc, :, k]", "\n", "values", "=", "a", "[", "best_epoch", ",", ":", ",", "k", "]", "\n", "\n", "ax", ".", "hist", "(", "values", ",", "bins", ",", "alpha", "=", "0.5", ",", "label", "=", "f\"{p.parent.name}-{k}\"", ",", "color", "=", "c", ")", "\n", "", "", "ax", ".", "legend", "(", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "if", "args", ".", "savefig", ":", "\n", "        ", "fig", ".", "savefig", "(", "args", ".", "savefig", ")", "\n", "\n", "", "if", "not", "args", ".", "headless", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.hist.get_args": [[61, 84], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["None"], ["", "", "def", "get_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Plot data over time'", ")", "\n", "parser", ".", "add_argument", "(", "'--folders'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "nargs", "=", "'+'", ",", "help", "=", "\"The folders containing the file\"", ")", "\n", "parser", ".", "add_argument", "(", "'--filename'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--columns'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "0", ",", "help", "=", "\"Which columns of the third axis to plot\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--savefig\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--headless\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--smooth\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Help for compatibility with other plotting functions, does not do anything.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nbins\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--epc\"", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "\n", "# Dummies", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Dummy for compatibility\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fontsize\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"Dummy opt for compatibility\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ylabel\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "\"--loc\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--labels\"", ",", "type", "=", "str", ",", "nargs", "=", "'*'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.plot.run": [[16, 105], ["matplotlib.rc", "utils.map_", "matplotlib.figure", "plt.figure.gca", "fig.gca.set_ylim", "fig.gca.set_xlim", "fig.gca.set_yticks", "fig.gca.set_xlabel", "fig.gca.grid", "numpy.linspace", "numpy.arange", "enumerate", "fig.gca.legend", "plt.figure.tight_layout", "len", "len", "len", "len", "pathlib.Path", "len", "utils.map_", "fig.gca.set_ylabel", "fig.gca.set_ylabel", "fig.gca.set_title", "fig.gca.set_title", "zip", "a.mean", "zip", "zip", "plt.figure.savefig", "matplotlib.show", "mean_a[].mean", "fig.gca.plot", "fig.gca.plot", "fig.gca.plot", "pathlib.Path", "len", "scipy.interpolate.spline", "len", "print", "print", "len", "values.min", "values.max", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_"], ["def", "run", "(", "args", ":", "argparse", ".", "Namespace", ")", "->", "None", ":", "\n", "    ", "plt", ".", "rc", "(", "'font'", ",", "size", "=", "args", ".", "fontsize", ")", "\n", "\n", "colors", ":", "List", "[", "str", "]", "=", "args", ".", "colors", "if", "args", ".", "colors", "else", "util_colors", "\n", "\n", "styles", "=", "[", "'--'", ",", "'-.'", ",", "':'", "]", "\n", "assert", "len", "(", "args", ".", "folders", ")", "<=", "len", "(", "colors", ")", "\n", "assert", "len", "(", "args", ".", "columns", ")", "<=", "len", "(", "styles", ")", "\n", "\n", "paths", ":", "List", "[", "Path", "]", "=", "[", "Path", "(", "f", ",", "args", ".", "filename", ")", "for", "f", "in", "args", ".", "folders", "]", "\n", "arrays", ":", "List", "[", "np", ".", "ndarray", "]", "=", "map_", "(", "np", ".", "load", ",", "paths", ")", "\n", "\n", "if", "len", "(", "arrays", "[", "0", "]", ".", "shape", ")", "==", "2", ":", "\n", "        ", "arrays", "=", "map_", "(", "lambda", "a", ":", "a", "[", "...", ",", "np", ".", "newaxis", "]", ",", "arrays", ")", "\n", "", "epoch", ",", "_", ",", "class_", "=", "arrays", "[", "0", "]", ".", "shape", "\n", "for", "a", "in", "arrays", "[", "1", ":", "]", ":", "\n", "        ", "ea", ",", "_", ",", "ca", "=", "a", ".", "shape", "\n", "assert", "epoch", "==", "ea", "and", "class_", "==", "ca", ",", "(", "epoch", ",", "class_", ",", "a", ".", "shape", ")", "\n", "\n", "", "n_epoch", "=", "arrays", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "args", ".", "figsize", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "ax", ".", "set_ylim", "(", "args", ".", "ylim", ")", "\n", "ax", ".", "set_xlim", "(", "[", "0", ",", "n_epoch", "-", "2", "]", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "mgrid", "[", "0", ":", "1.1", ":", ".1", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "\"Epoch\"", ")", "\n", "if", "args", ".", "ylabel", ":", "\n", "        ", "ax", ".", "set_ylabel", "(", "args", ".", "ylabel", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_ylabel", "(", "Path", "(", "args", ".", "filename", ")", ".", "stem", ")", "\n", "", "ax", ".", "grid", "(", "True", ",", "axis", "=", "'y'", ")", "\n", "if", "args", ".", "title", ":", "\n", "        ", "ax", ".", "set_title", "(", "args", ".", "title", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_title", "(", "f\"{paths[0].stem} over epochs\"", ")", "\n", "\n", "", "if", "args", ".", "labels", ":", "\n", "        ", "labels", "=", "args", ".", "labels", "\n", "", "else", ":", "\n", "        ", "labels", "=", "[", "p", ".", "parent", ".", "name", "for", "p", "in", "paths", "]", "\n", "\n", "", "xnew", "=", "np", ".", "linspace", "(", "0", ",", "n_epoch", ",", "n_epoch", "*", "4", ")", "\n", "epcs", "=", "np", ".", "arange", "(", "n_epoch", ")", "\n", "for", "i", ",", "(", "a", ",", "c", ",", "p", ",", "l", ")", "in", "enumerate", "(", "zip", "(", "arrays", ",", "colors", ",", "paths", ",", "labels", ")", ")", ":", "\n", "        ", "mean_a", "=", "a", ".", "mean", "(", "axis", "=", "1", ")", "\n", "\n", "if", "len", "(", "args", ".", "columns", ")", ">", "1", "and", "not", "args", ".", "no_mean", ":", "\n", "            ", "mean_column", "=", "mean_a", "[", ":", ",", "args", ".", "columns", "]", ".", "mean", "(", "axis", "=", "1", ")", "\n", "ax", ".", "plot", "(", "epcs", ",", "mean_column", ",", "color", "=", "c", ",", "linestyle", "=", "'-'", ",", "label", "=", "f\"{l}-mean\"", ",", "linewidth", "=", "2", ")", "\n", "\n", "", "for", "k", ",", "s", "in", "zip", "(", "args", ".", "columns", ",", "styles", ")", ":", "\n", "            ", "values", "=", "mean_a", "[", "...", ",", "k", "]", "\n", "\n", "if", "args", ".", "smooth", ":", "\n", "                ", "smoothed", "=", "spline", "(", "epcs", ",", "values", ",", "xnew", ")", "\n", "x", ",", "y", "=", "xnew", ",", "smoothed", "\n", "", "else", ":", "\n", "                ", "x", ",", "y", "=", "epcs", ",", "values", "\n", "\n", "", "lab", "=", "l", "if", "len", "(", "args", ".", "columns", ")", "==", "1", "else", "f\"{l}-{k}\"", "\n", "\n", "sty", ":", "str", "\n", "if", "len", "(", "args", ".", "columns", ")", "==", "1", ":", "\n", "                ", "if", "args", ".", "curves_styles", ":", "\n", "                    ", "sty", "=", "args", ".", "curves_styles", "[", "i", "]", "[", "1", ":", "]", "# Have to remove the extra space", "\n", "", "else", ":", "\n", "                    ", "sty", "=", "'-'", "\n", "", "", "else", ":", "\n", "                ", "sty", "=", "s", "\n", "\n", "", "ax", ".", "plot", "(", "x", ",", "y", ",", "linestyle", "=", "sty", ",", "color", "=", "c", ",", "label", "=", "lab", ",", "linewidth", "=", "1.5", ")", "\n", "if", "args", ".", "min", ":", "\n", "                ", "print", "(", "f\"{Path(p).parents[0]}, class {k}: {values.min():.04f}\"", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "f\"{Path(p).parents[0]}, class {k}: {values.max():.04f}\"", ")", "\n", "\n", "", "", "", "if", "args", ".", "hline", ":", "\n", "        ", "for", "v", ",", "l", ",", "s", "in", "zip", "(", "args", ".", "hline", ",", "args", ".", "l_line", ",", "styles", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "[", "0", ",", "n_epoch", "]", ",", "[", "v", ",", "v", "]", ",", "linestyle", "=", "s", ",", "linewidth", "=", "1", ",", "color", "=", "'green'", ",", "label", "=", "l", ")", "\n", "\n", "", "", "ax", ".", "legend", "(", "loc", "=", "args", ".", "loc", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "if", "args", ".", "savefig", ":", "\n", "        ", "fig", ".", "savefig", "(", "args", ".", "savefig", ")", "\n", "\n", "", "if", "not", "args", ".", "headless", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.plot.get_args": [[107, 140], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "matplotlib.legend.Legend.codes.copy", "matplotlib.legend.Legend.codes.copy"], "function", ["None"], ["", "", "def", "get_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Plot data over time'", ")", "\n", "parser", ".", "add_argument", "(", "'--folders'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "nargs", "=", "'+'", ",", "help", "=", "\"The folders containing the file\"", ")", "\n", "parser", ".", "add_argument", "(", "'--filename'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--headless\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--smooth\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--min\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Display the min of each file instead of maximum\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Dummy for compatibility\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_mean\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Don't plot the mean line\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--savefig\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--columns'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "0", ",", "help", "=", "\"Which columns of the third axis to plot\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--hline\"", ",", "type", "=", "float", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "\"--ylim\"", ",", "type", "=", "float", ",", "nargs", "=", "2", ",", "default", "=", "[", "0", ",", "1", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--l_line\"", ",", "type", "=", "str", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "\"--title\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "\"--ylabel\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "\"--labels\"", ",", "type", "=", "str", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "\"--colors\"", ",", "type", "=", "str", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "\"--figsize\"", ",", "type", "=", "int", ",", "nargs", "=", "'*'", ",", "default", "=", "[", "14", ",", "9", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--fontsize\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--curves_styles\"", ",", "type", "=", "str", ",", "nargs", "=", "'*'", ",", "choices", "=", "[", "' -'", ",", "' --'", ",", "' -.'", ",", "' :'", "]", ",", "\n", "help", "=", "\"Careful: put an extra space at the beginning of the street, to avoid a parsing error.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--loc\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "choices", "=", "matplotlib", ".", "legend", ".", "Legend", ".", "codes", ".", "copy", "(", ")", ")", "\n", "parser", ".", "add_argument", "(", "\"--epc\"", ",", "type", "=", "int", ",", "help", "=", "\"Dummy to maintain call compatibility with hist.py and moustache.py\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.dataloader.SliceDataset.__init__": [[139, 174], ["dataloader.SliceDataset.check_files", "dataloader.SliceDataset.load_images", "len", "len", "len", "print", "len", "len", "len", "print", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.dataloader.SliceDataset.check_files", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.dataloader.SliceDataset.load_images"], ["    ", "def", "__init__", "(", "self", ",", "filenames", ":", "List", "[", "str", "]", ",", "folders", ":", "List", "[", "Path", "]", ",", "are_hots", ":", "List", "[", "bool", "]", ",", "\n", "bounds_generators", ":", "List", "[", "Callable", "]", ",", "transforms", ":", "List", "[", "Callable", "]", ",", "debug", "=", "False", ",", "quiet", "=", "False", ",", "\n", "C", "=", "4", ",", "in_memory", ":", "bool", "=", "False", ",", "spacing_dict", ":", "Dict", "[", "str", ",", "Tuple", "[", "float", ",", "float", "]", "]", "=", "None", ",", "\n", "augment", ":", "bool", "=", "False", ",", "ignore_norm", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "self", ".", "folders", ":", "List", "[", "Path", "]", "=", "folders", "\n", "self", ".", "transforms", ":", "List", "[", "Callable", "[", "[", "D", "]", ",", "Tensor", "]", "]", "=", "transforms", "\n", "assert", "len", "(", "self", ".", "transforms", ")", "==", "len", "(", "self", ".", "folders", ")", "\n", "\n", "self", ".", "are_hots", ":", "List", "[", "bool", "]", "=", "are_hots", "\n", "self", ".", "filenames", ":", "List", "[", "str", "]", "=", "filenames", "\n", "self", ".", "debug", "=", "debug", "\n", "self", ".", "C", ":", "int", "=", "C", "# Number of classes", "\n", "self", ".", "in_memory", ":", "bool", "=", "in_memory", "\n", "self", ".", "quiet", ":", "bool", "=", "quiet", "\n", "self", ".", "bounds_generators", ":", "List", "[", "Callable", "]", "=", "bounds_generators", "\n", "self", ".", "spacing_dict", ":", "Optional", "[", "Dict", "[", "str", ",", "Tuple", "[", "float", ",", "float", "]", "]", "]", "=", "spacing_dict", "\n", "self", ".", "augment", ":", "bool", "=", "augment", "\n", "self", ".", "ignore_norm", ":", "bool", "=", "ignore_norm", "\n", "assert", "len", "(", "self", ".", "bounds_generators", ")", "==", "(", "len", "(", "self", ".", "folders", ")", "-", "2", ")", "\n", "\n", "if", "self", ".", "debug", ":", "\n", "            ", "self", ".", "filenames", "=", "self", ".", "filenames", "[", ":", "10", "]", "\n", "\n", "", "assert", "self", ".", "check_files", "(", ")", "# Make sure all file exists", "\n", "\n", "if", "not", "self", ".", "quiet", ":", "\n", "            ", "print", "(", "f\">> Initializing {self.__class__.__name__} with {len(self.filenames)} images\"", ")", "\n", "if", "self", ".", "augment", ":", "\n", "                ", "print", "(", "\"> Will augment data online\"", ")", "\n", "\n", "# Load things in memory if needed", "\n", "", "", "self", ".", "files", ":", "List", "[", "List", "[", "F", "]", "]", "=", "SliceDataset", ".", "load_images", "(", "self", ".", "folders", ",", "self", ".", "filenames", ",", "self", ".", "in_memory", ")", "\n", "assert", "len", "(", "self", ".", "files", ")", "==", "len", "(", "self", ".", "folders", ")", "\n", "for", "files", "in", "self", ".", "files", ":", "\n", "            ", "assert", "len", "(", "files", ")", "==", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.dataloader.SliceDataset.check_files": [[175, 185], ["pathlib.Path().exists", "pathlib.Path().exists", "pathlib.Path", "pathlib.Path"], "methods", ["None"], ["", "", "def", "check_files", "(", "self", ")", "->", "bool", ":", "\n", "        ", "for", "folder", "in", "self", ".", "folders", ":", "\n", "            ", "if", "not", "Path", "(", "folder", ")", ".", "exists", "(", ")", ":", "\n", "                ", "return", "False", "\n", "\n", "", "for", "f_n", "in", "self", ".", "filenames", ":", "\n", "                ", "if", "not", "Path", "(", "folder", ",", "f_n", ")", ".", "exists", "(", ")", ":", "\n", "                    ", "return", "False", "\n", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.dataloader.SliceDataset.load_images": [[186, 201], ["pathlib.Path", "print", "dataloader.SliceDataset.load_images.load"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_images", "(", "folders", ":", "List", "[", "Path", "]", ",", "filenames", ":", "List", "[", "str", "]", ",", "in_memory", ":", "bool", ",", "quiet", "=", "False", ")", "->", "List", "[", "List", "[", "F", "]", "]", ":", "\n", "        ", "def", "load", "(", "folder", ":", "Path", ",", "filename", ":", "str", ")", "->", "F", ":", "\n", "            ", "p", ":", "Path", "=", "Path", "(", "folder", ",", "filename", ")", "\n", "if", "in_memory", ":", "\n", "                ", "with", "open", "(", "p", ",", "'rb'", ")", "as", "data", ":", "\n", "                    ", "res", "=", "io", ".", "BytesIO", "(", "data", ".", "read", "(", ")", ")", "\n", "", "return", "res", "\n", "", "return", "p", "\n", "", "if", "in_memory", "and", "not", "quiet", ":", "\n", "            ", "print", "(", "\"> Loading the data in memory...\"", ")", "\n", "\n", "", "files", ":", "List", "[", "List", "[", "F", "]", "]", "=", "[", "[", "load", "(", "f", ",", "im", ")", "for", "im", "in", "filenames", "]", "for", "f", "in", "folders", "]", "\n", "\n", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.dataloader.SliceDataset.__len__": [[202, 204], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.dataloader.SliceDataset.__getitem__": [[205, 249], ["pathlib.Path", "zip", "utils.augment", "len", "len", "len", "tr", "f", "PIL.Image.open", "ValueError", "numpy.array", "int", "int", "resizing_fn", "zip", "t_tensors[].min", "t_tensors[].max", "utils.one_hot", "torch.einsum", "zip", "numpy.load", "t_tensors[].min", "t_tensors[].max"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.augment", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.one_hot"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "List", "[", "Any", "]", ":", "\n", "        ", "filename", ":", "str", "=", "self", ".", "filenames", "[", "index", "]", "\n", "path_name", ":", "Path", "=", "Path", "(", "filename", ")", "\n", "images", ":", "List", "[", "D", "]", "\n", "\n", "if", "path_name", ".", "suffix", "==", "\".png\"", ":", "\n", "            ", "images", "=", "[", "Image", ".", "open", "(", "files", "[", "index", "]", ")", "for", "files", "in", "self", ".", "files", "]", "\n", "", "elif", "path_name", ".", "suffix", "==", "\".npy\"", ":", "\n", "            ", "images", "=", "[", "np", ".", "load", "(", "files", "[", "index", "]", ")", "for", "files", "in", "self", ".", "files", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "filename", ")", "\n", "\n", "", "if", "self", ".", "spacing_dict", ":", "\n", "            ", "dx", ",", "dy", "=", "self", ".", "spacing_dict", "[", "path_name", ".", "stem", "]", "\n", "arrs", "=", "[", "np", ".", "array", "(", "im", ")", "for", "im", "in", "images", "]", "\n", "\n", "w", ",", "h", "=", "arrs", "[", "0", "]", ".", "shape", "\n", "nw", ",", "nh", "=", "int", "(", "w", "/", "dx", ")", ",", "int", "(", "h", "/", "dy", ")", "\n", "\n", "images", "=", "[", "resizing_fn", "(", "arr", ",", "(", "nw", ",", "nh", ")", ")", "for", "arr", "in", "arrs", "]", "\n", "\n", "", "if", "self", ".", "augment", ":", "\n", "            ", "images", "=", "augment", "(", "*", "images", ")", "\n", "\n", "# Final transforms and assertions", "\n", "", "assert", "len", "(", "images", ")", "==", "len", "(", "self", ".", "folders", ")", "==", "len", "(", "self", ".", "transforms", ")", "\n", "t_tensors", ":", "List", "[", "Tensor", "]", "=", "[", "tr", "(", "e", ")", "for", "(", "tr", ",", "e", ")", "in", "zip", "(", "self", ".", "transforms", ",", "images", ")", "]", "\n", "\n", "# main image is between 0 and 1", "\n", "if", "not", "self", ".", "ignore_norm", ":", "\n", "            ", "assert", "0", "<=", "t_tensors", "[", "0", "]", ".", "min", "(", ")", "and", "t_tensors", "[", "0", "]", ".", "max", "(", ")", "<=", "1", ",", "(", "t_tensors", "[", "0", "]", ".", "min", "(", ")", ",", "t_tensors", "[", "0", "]", ".", "max", "(", ")", ")", "\n", "", "_", ",", "w", ",", "h", "=", "t_tensors", "[", "0", "]", ".", "shape", "\n", "for", "ttensor", "in", "t_tensors", "[", "1", ":", "]", ":", "# Things should be one-hot or at least have the shape", "\n", "            ", "assert", "ttensor", ".", "shape", "==", "(", "self", ".", "C", ",", "w", ",", "h", ")", ",", "(", "ttensor", ".", "shape", ",", "self", ".", "C", ",", "w", ",", "h", ")", "\n", "\n", "", "for", "ttensor", ",", "is_hot", "in", "zip", "(", "t_tensors", ",", "self", ".", "are_hots", ")", ":", "# All masks (ground truths) are class encoded", "\n", "            ", "if", "is_hot", ":", "\n", "                ", "assert", "one_hot", "(", "ttensor", ",", "axis", "=", "0", ")", ",", "torch", ".", "einsum", "(", "\"cwh->wh\"", ",", "ttensor", ")", "\n", "\n", "", "", "img", ",", "gt", "=", "t_tensors", "[", ":", "2", "]", "\n", "bounds", "=", "[", "f", "(", "img", ",", "gt", ",", "t", ",", "filename", ")", "for", "f", ",", "t", "in", "zip", "(", "self", ".", "bounds_generators", ",", "t_tensors", "[", "2", ":", "]", ")", "]", "\n", "\n", "# return t_tensors + [filename] + bounds", "\n", "return", "[", "filename", "]", "+", "t_tensors", "+", "bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.dataloader.PatientSampler.__init__": [[252, 283], ["re.compile", "utils.map_", "list", "print", "dict", "enumerate", "match.group", "set", "len", "len", "zip", "sum", "len", "random.sample", "pathlib.Path", "itertools.repeat", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ":", "SliceDataset", ",", "grp_regex", ",", "shuffle", "=", "False", ")", "->", "None", ":", "\n", "        ", "filenames", ":", "List", "[", "str", "]", "=", "dataset", ".", "filenames", "\n", "# Might be needed in case of escape sequence fuckups", "\n", "# self.grp_regex = bytes(grp_regex, \"utf-8\").decode('unicode_escape')", "\n", "self", ".", "grp_regex", "=", "grp_regex", "\n", "\n", "# Configure the shuffling function", "\n", "self", ".", "shuffle", ":", "bool", "=", "shuffle", "\n", "self", ".", "shuffle_fn", ":", "Callable", "=", "(", "lambda", "x", ":", "random", ".", "sample", "(", "x", ",", "len", "(", "x", ")", ")", ")", "if", "self", ".", "shuffle", "else", "id_", "\n", "\n", "# print(f\"Grouping using {self.grp_regex} regex\")", "\n", "# assert grp_regex == \"(patient\\d+_\\d+)_\\d+\"", "\n", "# grouping_regex: Pattern = re.compile(\"grp_regex\")", "\n", "grouping_regex", ":", "Pattern", "=", "re", ".", "compile", "(", "self", ".", "grp_regex", ")", "\n", "\n", "stems", ":", "List", "[", "str", "]", "=", "[", "Path", "(", "filename", ")", ".", "stem", "for", "filename", "in", "filenames", "]", "# avoid matching the extension", "\n", "matches", ":", "List", "[", "Match", "]", "=", "map_", "(", "grouping_regex", ".", "match", ",", "stems", ")", "\n", "patients", ":", "List", "[", "str", "]", "=", "[", "match", ".", "group", "(", "1", ")", "for", "match", "in", "matches", "]", "\n", "\n", "unique_patients", ":", "List", "[", "str", "]", "=", "list", "(", "set", "(", "patients", ")", ")", "\n", "assert", "len", "(", "unique_patients", ")", "<", "len", "(", "filenames", ")", "\n", "print", "(", "f\"Found {len(unique_patients)} unique patients out of {len(filenames)} images ; regex: {self.grp_regex}\"", ")", "\n", "\n", "self", ".", "idx_map", ":", "Dict", "[", "str", ",", "List", "[", "int", "]", "]", "=", "dict", "(", "zip", "(", "unique_patients", ",", "repeat", "(", "None", ")", ")", ")", "\n", "for", "i", ",", "patient", "in", "enumerate", "(", "patients", ")", ":", "\n", "            ", "if", "not", "self", ".", "idx_map", "[", "patient", "]", ":", "\n", "                ", "self", ".", "idx_map", "[", "patient", "]", "=", "[", "]", "\n", "\n", "", "self", ".", "idx_map", "[", "patient", "]", "+=", "[", "i", "]", "\n", "# print(self.idx_map)", "\n", "", "assert", "sum", "(", "len", "(", "self", ".", "idx_map", "[", "k", "]", ")", "for", "k", "in", "unique_patients", ")", "==", "len", "(", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.dataloader.PatientSampler.__len__": [[286, 288], ["len", "dataloader.PatientSampler.idx_map.keys"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx_map", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.dataloader.PatientSampler.__iter__": [[289, 293], ["list", "dataloader.PatientSampler.shuffle_fn", "iter", "dataloader.PatientSampler.idx_map.values"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "values", "=", "list", "(", "self", ".", "idx_map", ".", "values", "(", ")", ")", "\n", "shuffled", "=", "self", ".", "shuffle_fn", "(", "values", ")", "\n", "return", "iter", "(", "shuffled", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.dataloader.get_loaders": [[30, 136], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "eval", "eval", "print", "enumerate", "utils.depth", "list_bounds_generators.append", "utils.depth", "zip", "zip", "print", "functools.partial", "functools.partial", "utils.map_", "functools.partial.", "train_loaders.append", "functools.partial", "operator.itemgetter", "getattr", "tmp.append", "pathlib.Path", "train_folders[].glob", "dataloader.PatientSampler", "functools.partial.", "functools.partial.", "print", "utils.map_", "functools.partial.", "functools.partial.", "img.convert", "torch.tensor", "img.convert", "numpy.asarray", "numpy.rollaxis", "torch.tensor", "torch.tensor", "img.convert", "torch.tensor", "numpy.array", "torch.zeros", "tmp.append", "__import__", "getattr.", "str", "pathlib.Path", "val_folders[].glob", "dataloader.PatientSampler", "numpy.array", "numpy.array", "numpy.array", "len", "str", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.depth", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.depth", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_"], ["def", "get_loaders", "(", "args", ",", "data_folder", ":", "str", ",", "\n", "batch_size", ":", "int", ",", "n_class", ":", "int", ",", "\n", "debug", ":", "bool", ",", "in_memory", ":", "bool", ")", "->", "Tuple", "[", "List", "[", "DataLoader", "]", ",", "List", "[", "DataLoader", "]", "]", ":", "\n", "    ", "png_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "img", ":", "img", ".", "convert", "(", "'L'", ")", ",", "\n", "lambda", "img", ":", "np", ".", "array", "(", "img", ")", "[", "np", ".", "newaxis", ",", "...", "]", ",", "\n", "lambda", "nd", ":", "nd", "/", "255", ",", "# max <= 1", "\n", "lambda", "nd", ":", "torch", ".", "tensor", "(", "nd", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "]", ")", "\n", "color_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "img", ":", "img", ".", "convert", "(", "'RGB'", ")", ",", "\n", "lambda", "img", ":", "np", ".", "asarray", "(", "img", ")", ",", "\n", "lambda", "arr", ":", "np", ".", "rollaxis", "(", "arr", ",", "2", ",", "0", ")", ",", "\n", "lambda", "nd", ":", "nd", "/", "255", ",", "# max <= 1", "\n", "lambda", "nd", ":", "torch", ".", "tensor", "(", "nd", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "]", ")", "\n", "npy_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "npy", ":", "np", ".", "array", "(", "npy", ")", "[", "np", ".", "newaxis", ",", "...", "]", ",", "\n", "lambda", "nd", ":", "torch", ".", "tensor", "(", "nd", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "]", ")", "\n", "gt_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "img", ":", "img", ".", "convert", "(", "'L'", ")", ",", "\n", "lambda", "img", ":", "np", ".", "array", "(", "img", ")", "[", "np", ".", "newaxis", ",", "...", "]", ",", "\n", "lambda", "nd", ":", "torch", ".", "tensor", "(", "nd", ",", "dtype", "=", "torch", ".", "int64", ")", ",", "\n", "partial", "(", "class2one_hot", ",", "C", "=", "n_class", ")", ",", "\n", "itemgetter", "(", "0", ")", "\n", "]", ")", "\n", "dummy_gt", "=", "transforms", ".", "Compose", "(", "[", "\n", "lambda", "img", ":", "np", ".", "array", "(", "img", ")", ",", "\n", "lambda", "nd", ":", "torch", ".", "zeros", "(", "(", "n_class", ",", "*", "(", "nd", ".", "shape", ")", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "]", ")", "\n", "\n", "losses_list", "=", "eval", "(", "args", ".", "losses", ")", "\n", "if", "depth", "(", "losses_list", ")", "==", "1", ":", "\n", "        ", "losses_list", "=", "[", "losses_list", "]", "\n", "\n", "", "list_bounds_generators", ":", "List", "[", "List", "[", "Callable", "]", "]", "=", "[", "]", "\n", "for", "losses", "in", "losses_list", ":", "\n", "        ", "tmp", "=", "[", "]", "\n", "\n", "for", "_", ",", "_", ",", "bounds_name", ",", "bounds_params", ",", "fn", ",", "_", "in", "losses", ":", "\n", "            ", "if", "bounds_name", "is", "None", ":", "\n", "                ", "tmp", ".", "append", "(", "lambda", "*", "a", ":", "torch", ".", "zeros", "(", "n_class", ",", "1", ",", "2", ")", ")", "\n", "continue", "\n", "\n", "", "bounds_class", "=", "getattr", "(", "__import__", "(", "'bounds'", ")", ",", "bounds_name", ")", "\n", "tmp", ".", "append", "(", "bounds_class", "(", "C", "=", "args", ".", "n_class", ",", "fn", "=", "fn", ",", "**", "bounds_params", ")", ")", "\n", "", "list_bounds_generators", ".", "append", "(", "tmp", ")", "\n", "\n", "", "list_folders_list", "=", "eval", "(", "args", ".", "folders", ")", "\n", "if", "depth", "(", "list_folders_list", ")", "==", "1", ":", "# For compatibility reasons, avoid changing all the previous configuration files", "\n", "        ", "list_folders_list", "=", "[", "list_folders_list", "]", "\n", "# print(folders_list)", "\n", "\n", "# Prepare the datasets and dataloaders", "\n", "", "print", "(", ")", "\n", "train_loaders", "=", "[", "]", "\n", "# val_loader = None", "\n", "for", "i", ",", "(", "train_topfolder", ",", "folders_list", ",", "bounds_generators", ")", "in", "enumerate", "(", "zip", "(", "args", ".", "training_folders", ",", "list_folders_list", ",", "list_bounds_generators", ")", ")", ":", "\n", "\n", "        ", "folders", ",", "trans", ",", "are_hots", "=", "zip", "(", "*", "folders_list", ")", "\n", "print", "(", "f\">> {i}th training loader: {train_topfolder} with {folders}\"", ")", "\n", "\n", "# Create partial functions: Easier for readability later (see the difference between train and validation)", "\n", "gen_dataset", "=", "partial", "(", "SliceDataset", ",", "\n", "transforms", "=", "trans", ",", "\n", "are_hots", "=", "are_hots", ",", "\n", "debug", "=", "debug", ",", "\n", "C", "=", "n_class", ",", "\n", "in_memory", "=", "in_memory", ",", "\n", "bounds_generators", "=", "bounds_generators", ")", "\n", "data_loader", "=", "partial", "(", "DataLoader", ",", "\n", "num_workers", "=", "batch_size", "+", "5", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n", "train_folders", ":", "List", "[", "Path", "]", "=", "[", "Path", "(", "data_folder", ",", "train_topfolder", ",", "f", ")", "for", "f", "in", "folders", "]", "\n", "# I assume all files have the same name inside their folder: makes things much easier", "\n", "train_names", ":", "List", "[", "str", "]", "=", "map_", "(", "lambda", "p", ":", "str", "(", "p", ".", "name", ")", ",", "train_folders", "[", "0", "]", ".", "glob", "(", "\"*\"", ")", ")", "\n", "train_set", "=", "gen_dataset", "(", "train_names", ",", "\n", "train_folders", ")", "\n", "if", "args", ".", "group_train", ":", "\n", "            ", "train_sampler", "=", "PatientSampler", "(", "train_set", ",", "args", ".", "grp_regex", ",", "shuffle", "=", "True", ")", "\n", "train_loader", "=", "data_loader", "(", "train_set", ",", "\n", "batch_sampler", "=", "train_sampler", ")", "\n", "", "else", ":", "\n", "            ", "train_loader", "=", "data_loader", "(", "train_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "", "train_loaders", ".", "append", "(", "train_loader", ")", "\n", "\n", "if", "i", "==", "args", ".", "val_loader_id", "or", "(", "args", ".", "val_loader_id", "==", "-", "1", "and", "(", "i", "+", "1", ")", "==", "len", "(", "args", ".", "training_folders", ")", ")", ":", "\n", "            ", "print", "(", "f\">> Validation dataloader (id {args.val_loader_id}), {train_topfolder} {folders}\"", ")", "\n", "val_folders", ":", "List", "[", "Path", "]", "=", "[", "Path", "(", "data_folder", ",", "args", ".", "validation_folder", ",", "f", ")", "for", "f", "in", "folders", "]", "\n", "val_names", ":", "List", "[", "str", "]", "=", "map_", "(", "lambda", "p", ":", "str", "(", "p", ".", "name", ")", ",", "val_folders", "[", "0", "]", ".", "glob", "(", "\"*\"", ")", ")", "\n", "val_set", "=", "gen_dataset", "(", "val_names", ",", "\n", "val_folders", ")", "\n", "val_sampler", "=", "PatientSampler", "(", "val_set", ",", "args", ".", "grp_regex", ",", "shuffle", "=", "False", ")", "if", "args", ".", "group", "else", "None", "\n", "val_batch_size", "=", "1", "if", "val_sampler", "else", "batch_size", "\n", "val_loader", "=", "data_loader", "(", "val_set", ",", "\n", "batch_sampler", "=", "val_sampler", ",", "\n", "batch_size", "=", "val_batch_size", ")", "\n", "\n", "", "", "return", "train_loaders", ",", "[", "val_loader", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.moustache.run": [[15, 62], ["utils.map_", "matplotlib.figure", "plt.figure.gca", "fig.gca.set_ylim", "fig.gca.set_xlabel", "fig.gca.set_ylabel", "fig.gca.grid", "fig.gca.set_title", "enumerate", "fig.gca.set_xticklabels", "fig.gca.set_xticks", "fig.gca.set_yticks", "plt.figure.tight_layout", "len", "len", "len", "NotImplementedError", "pathlib.Path", "len", "len", "utils.map_", "zip", "plt.figure.savefig", "matplotlib.show", "set", "a[].mean", "numpy.argmax", "fig.gca.boxplot", "print", "utils.map_", "len", "values.min", "numpy.percentile", "values.mean", "numpy.percentile", "values.max"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_"], ["def", "run", "(", "args", ":", "argparse", ".", "Namespace", ")", "->", "None", ":", "\n", "    ", "assert", "len", "(", "args", ".", "folders", ")", "<=", "len", "(", "colors", ")", "\n", "\n", "if", "len", "(", "args", ".", "columns", ")", ">", "1", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only 1 columns at a time is handled for now\"", ")", "\n", "\n", "", "paths", ":", "List", "[", "Path", "]", "=", "[", "Path", "(", "f", ",", "args", ".", "filename", ")", "for", "f", "in", "args", ".", "folders", "]", "\n", "arrays", ":", "List", "[", "np", ".", "ndarray", "]", "=", "map_", "(", "np", ".", "load", ",", "paths", ")", "\n", "metric_name", ":", "str", "=", "paths", "[", "0", "]", ".", "stem", "\n", "\n", "assert", "len", "(", "set", "(", "a", ".", "shape", "for", "a", "in", "arrays", ")", ")", "==", "1", "# All arrays should have the same shape", "\n", "if", "len", "(", "arrays", "[", "0", "]", ".", "shape", ")", "==", "2", ":", "\n", "        ", "arrays", "=", "map_", "(", "lambda", "a", ":", "a", "[", "...", ",", "np", ".", "newaxis", "]", ",", "arrays", ")", "# Add an extra dimension for column selection", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "14", ",", "9", ")", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "ax", ".", "set_ylim", "(", "[", "0", ",", "1", "]", ")", "\n", "# ax.set_xlim([0, len(args.folders) + 1])", "\n", "ax", ".", "set_xlabel", "(", "metric_name", ")", "\n", "ax", ".", "set_ylabel", "(", "\"Percentage\"", ")", "\n", "ax", ".", "grid", "(", "True", ",", "axis", "=", "'y'", ")", "\n", "ax", ".", "set_title", "(", "f\"{metric_name} moustaches\"", ")", "\n", "\n", "# bins = np.linspace(0, 1, args.nbins)", "\n", "for", "i", ",", "(", "a", ",", "c", ",", "p", ")", "in", "enumerate", "(", "zip", "(", "arrays", ",", "colors", ",", "paths", ")", ")", ":", "\n", "        ", "for", "k", "in", "args", ".", "columns", ":", "\n", "            ", "mean_a", "=", "a", "[", "...", ",", "k", "]", ".", "mean", "(", "axis", "=", "1", ")", "\n", "best_epoch", ":", "int", "=", "np", ".", "argmax", "(", "mean_a", ")", "\n", "\n", "# values = a[args.epc, :, k]", "\n", "values", "=", "a", "[", "best_epoch", ",", ":", ",", "k", "]", "\n", "\n", "ax", ".", "boxplot", "(", "values", ",", "positions", "=", "[", "i", "+", "1", "]", ",", "manage_xticks", "=", "False", ",", "showmeans", "=", "True", ",", "meanline", "=", "True", ",", "whis", "=", "[", "5", ",", "95", "]", ")", "\n", "print", "(", "f\"{p.parent.stem:10}: min {values.min():.03f} 25{np.percentile(values, 25):.03f} \"", "\n", "+", "f\"avg {values.mean():.03f} 75 {np.percentile(values, 75):.03f} max {values.max():.03f} at epc {best_epoch}\"", ")", "\n", "# ax.legend()", "\n", "\n", "", "", "ax", ".", "set_xticklabels", "(", "[", "\"\"", "]", "+", "map_", "(", "lambda", "p", ":", "p", ".", "parent", ".", "stem", ",", "paths", ")", ")", "\n", "ax", ".", "set_xticks", "(", "np", ".", "mgrid", "[", "0", ":", "len", "(", "args", ".", "folders", ")", "+", "1", "]", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "mgrid", "[", "0", ":", "1.1", ":", ".1", "]", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "if", "args", ".", "savefig", ":", "\n", "        ", "fig", ".", "savefig", "(", "args", ".", "savefig", ")", "\n", "\n", "", "if", "not", "args", ".", "headless", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.moustache.get_args": [[64, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print"], "function", ["None"], ["", "", "def", "get_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Plot data over time'", ")", "\n", "parser", ".", "add_argument", "(", "'--folders'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "nargs", "=", "'+'", ",", "help", "=", "\"The folders containing the file\"", ")", "\n", "parser", ".", "add_argument", "(", "'--filename'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--columns'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "0", ",", "help", "=", "\"Which columns of the third axis to plot\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--savefig\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--headless\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nbins\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--epc\"", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "\n", "# Dummies", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Dummy for compatibility\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fontsize\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"Dummy opt for compatibility\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ylabel\"", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "\"--labels\"", ",", "type", "=", "str", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "\"--loc\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.str2bool": [[34, 41], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_": [[43, 45], ["list", "map", "PIL.Image.fromarray", "PIL.ImageOps.flip", "PIL.ImageOps.mirror", "numpy.np.flip", "numpy.np.fliplr"], "function", ["None"], ["", "", "def", "map_", "(", "fn", ":", "Callable", "[", "[", "A", "]", ",", "B", "]", ",", "iter", ":", "Iterable", "[", "A", "]", ")", "->", "List", "[", "B", "]", ":", "\n", "    ", "return", "list", "(", "map", "(", "fn", ",", "iter", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.mmap_": [[47, 49], ["multiprocessing.pool.Pool().map", "multiprocessing.pool.Pool"], "function", ["None"], ["", "def", "mmap_", "(", "fn", ":", "Callable", "[", "[", "A", "]", ",", "B", "]", ",", "iter", ":", "Iterable", "[", "A", "]", ")", "->", "List", "[", "B", "]", ":", "\n", "    ", "return", "Pool", "(", ")", ".", "map", "(", "fn", ",", "iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.uc_": [[51, 53], ["functools.partial"], "function", ["None"], ["", "def", "uc_", "(", "fn", ":", "Callable", ")", "->", "Callable", ":", "\n", "    ", "return", "partial", "(", "uncurry", ",", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.uncurry": [[55, 57], ["fn"], "function", ["None"], ["", "def", "uncurry", "(", "fn", ":", "Callable", ",", "args", ":", "List", "[", "Any", "]", ")", "->", "Any", ":", "\n", "    ", "return", "fn", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.id_": [[59, 61], ["None"], "function", ["None"], ["", "def", "id_", "(", "x", ")", ":", "\n", "    ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.flatten_": [[63, 65], ["None"], "function", ["None"], ["", "def", "flatten_", "(", "to_flat", ":", "Iterable", "[", "Iterable", "[", "A", "]", "]", ")", "->", "List", "[", "A", "]", ":", "\n", "    ", "return", "[", "e", "for", "l", "in", "to_flat", "for", "e", "in", "l", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.depth": [[67, 75], ["type", "utils.depth"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.depth"], ["", "def", "depth", "(", "e", ":", "List", ")", "->", "int", ":", "\n", "    ", "\"\"\"\n    Compute the depth of nested lists\n    \"\"\"", "\n", "if", "type", "(", "e", ")", "==", "list", "and", "e", ":", "\n", "        ", "return", "1", "+", "depth", "(", "e", "[", "0", "]", ")", "\n", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.compose": [[77, 79], ["functools.reduce", "f"], "function", ["None"], ["", "def", "compose", "(", "fns", ",", "init", ")", ":", "\n", "    ", "return", "reduce", "(", "lambda", "acc", ",", "f", ":", "f", "(", "acc", ")", ",", "fns", ",", "init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.compose_acc": [[81, 83], ["functools.reduce", "f"], "function", ["None"], ["", "def", "compose_acc", "(", "fns", ",", "init", ")", ":", "\n", "    ", "return", "reduce", "(", "lambda", "acc", ",", "f", ":", "acc", "+", "[", "f", "(", "acc", "[", "-", "1", "]", ")", "]", ",", "fns", ",", "[", "init", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.soft_size": [[86, 88], ["torch.einsum"], "function", ["None"], ["", "def", "soft_size", "(", "a", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "return", "torch", ".", "einsum", "(", "\"bcwh->bc\"", ",", "a", ")", "[", "...", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.batch_soft_size": [[90, 92], ["torch.einsum"], "function", ["None"], ["", "def", "batch_soft_size", "(", "a", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "return", "torch", ".", "einsum", "(", "\"bcwh->c\"", ",", "a", ")", "[", "...", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.soft_centroid": [[94, 113], ["utils.map_", "a.type", "torch.stack", "torch.einsum", "torch.einsum", "torch.einsum", "torch.Tensor().to().type", "torch.Tensor().to", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_"], ["", "def", "soft_centroid", "(", "a", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "b", ",", "c", ",", "w", ",", "h", "=", "a", ".", "shape", "\n", "\n", "ws", ",", "hs", "=", "map_", "(", "lambda", "e", ":", "Tensor", "(", "e", ")", ".", "to", "(", "a", ".", "device", ")", ".", "type", "(", "torch", ".", "float32", ")", ",", "np", ".", "mgrid", "[", "0", ":", "w", ",", "0", ":", "h", "]", ")", "\n", "assert", "ws", ".", "shape", "==", "hs", ".", "shape", "==", "(", "w", ",", "h", ")", "\n", "\n", "flotted", "=", "a", ".", "type", "(", "torch", ".", "float32", ")", "\n", "tot", "=", "einsum", "(", "\"bcwh->bc\"", ",", "flotted", ")", "+", "1e-10", "\n", "assert", "tot", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "cw", "=", "einsum", "(", "\"bcwh,wh->bc\"", ",", "flotted", ",", "ws", ")", "/", "tot", "\n", "ch", "=", "einsum", "(", "\"bcwh,wh->bc\"", ",", "flotted", ",", "hs", ")", "/", "tot", "\n", "assert", "cw", ".", "dtype", "==", "ch", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "res", "=", "torch", ".", "stack", "(", "[", "cw", ",", "ch", "]", ",", "dim", "=", "2", ")", "\n", "assert", "res", ".", "shape", "==", "(", "b", ",", "c", ",", "2", ")", "\n", "assert", "res", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.uniq": [[116, 118], ["set", "torch.unique().numpy", "torch.unique", "a.cpu"], "function", ["None"], ["", "def", "uniq", "(", "a", ":", "Tensor", ")", "->", "Set", ":", "\n", "    ", "return", "set", "(", "torch", ".", "unique", "(", "a", ".", "cpu", "(", ")", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.sset": [[120, 122], ["uniq().issubset", "utils.uniq"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.uniq"], ["", "def", "sset", "(", "a", ":", "Tensor", ",", "sub", ":", "Iterable", ")", "->", "bool", ":", "\n", "    ", "return", "uniq", "(", "a", ")", ".", "issubset", "(", "sub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.eq": [[124, 126], ["torch.eq().all", "torch.eq"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.eq"], ["", "def", "eq", "(", "a", ":", "Tensor", ",", "b", ")", "->", "bool", ":", "\n", "    ", "return", "torch", ".", "eq", "(", "a", ",", "b", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.simplex": [[128, 132], ["t.sum().type", "torch.ones_like", "torch.allclose", "t.sum"], "function", ["None"], ["", "def", "simplex", "(", "t", ":", "Tensor", ",", "axis", "=", "1", ")", "->", "bool", ":", "\n", "    ", "_sum", "=", "t", ".", "sum", "(", "axis", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "_ones", "=", "torch", ".", "ones_like", "(", "_sum", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "torch", ".", "allclose", "(", "_sum", ",", "_ones", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.one_hot": [[134, 136], ["utils.simplex", "utils.sset"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.simplex", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.sset"], ["", "def", "one_hot", "(", "t", ":", "Tensor", ",", "axis", "=", "1", ")", "->", "bool", ":", "\n", "    ", "return", "simplex", "(", "t", ",", "axis", ")", "and", "sset", "(", "t", ",", "[", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.meta_dice": [[139, 150], ["utils.one_hot", "utils.one_hot", "torch.einsum().type", "torch.einsum", "torch.einsum", "torch.einsum", "utils.intersection"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.one_hot", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.one_hot", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.intersection"], ["", "def", "meta_dice", "(", "sum_str", ":", "str", ",", "label", ":", "Tensor", ",", "pred", ":", "Tensor", ",", "smooth", ":", "float", "=", "1e-8", ")", "->", "float", ":", "\n", "    ", "assert", "label", ".", "shape", "==", "pred", ".", "shape", "\n", "assert", "one_hot", "(", "label", ")", "\n", "assert", "one_hot", "(", "pred", ")", "\n", "\n", "inter_size", ":", "Tensor", "=", "einsum", "(", "sum_str", ",", "[", "intersection", "(", "label", ",", "pred", ")", "]", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "sum_sizes", ":", "Tensor", "=", "(", "einsum", "(", "sum_str", ",", "[", "label", "]", ")", "+", "einsum", "(", "sum_str", ",", "[", "pred", "]", ")", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "dices", ":", "Tensor", "=", "(", "2", "*", "inter_size", "+", "smooth", ")", "/", "(", "sum_sizes", "+", "smooth", ")", "\n", "\n", "return", "dices", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.intersection": [[156, 161], ["utils.sset", "utils.sset"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.sset", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.sset"], ["def", "intersection", "(", "a", ":", "Tensor", ",", "b", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "assert", "a", ".", "shape", "==", "b", ".", "shape", "\n", "assert", "sset", "(", "a", ",", "[", "0", ",", "1", "]", ")", "\n", "assert", "sset", "(", "b", ",", "[", "0", ",", "1", "]", ")", "\n", "return", "a", "&", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.union": [[163, 168], ["utils.sset", "utils.sset"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.sset", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.sset"], ["", "def", "union", "(", "a", ":", "Tensor", ",", "b", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "assert", "a", ".", "shape", "==", "b", ".", "shape", "\n", "assert", "sset", "(", "a", ",", "[", "0", ",", "1", "]", ")", "\n", "assert", "sset", "(", "b", ",", "[", "0", ",", "1", "]", ")", "\n", "return", "a", "|", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.inter_sum": [[170, 172], ["torch.einsum", "intersection().type", "utils.intersection"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.intersection"], ["", "def", "inter_sum", "(", "a", ":", "Tensor", ",", "b", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "return", "einsum", "(", "\"bcwh->bc\"", ",", "intersection", "(", "a", ",", "b", ")", ".", "type", "(", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.union_sum": [[174, 176], ["torch.einsum", "union().type", "utils.union"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.union"], ["", "def", "union_sum", "(", "a", ":", "Tensor", ",", "b", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "return", "einsum", "(", "\"bcwh->bc\"", ",", "union", "(", "a", ",", "b", ")", ".", "type", "(", "torch", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.haussdorf": [[178, 198], ["utils.one_hot", "utils.one_hot", "torch.zeros", "preds.cpu().numpy", "target.cpu().numpy", "range", "range", "preds.cpu", "target.cpu", "utils.numpy_haussdorf", "utils.numpy_haussdorf"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.one_hot", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.one_hot", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.numpy_haussdorf", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.numpy_haussdorf"], ["", "def", "haussdorf", "(", "preds", ":", "Tensor", ",", "target", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "assert", "preds", ".", "shape", "==", "target", ".", "shape", "\n", "assert", "one_hot", "(", "preds", ")", "\n", "assert", "one_hot", "(", "target", ")", "\n", "\n", "B", ",", "C", ",", "_", ",", "_", "=", "preds", ".", "shape", "\n", "\n", "res", "=", "torch", ".", "zeros", "(", "(", "B", ",", "C", ")", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "preds", ".", "device", ")", "\n", "n_pred", "=", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "n_target", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "        ", "if", "C", "==", "2", ":", "\n", "            ", "res", "[", "b", ",", ":", "]", "=", "numpy_haussdorf", "(", "n_pred", "[", "b", ",", "0", "]", ",", "n_target", "[", "b", ",", "0", "]", ")", "\n", "continue", "\n", "\n", "", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "            ", "res", "[", "b", ",", "c", "]", "=", "numpy_haussdorf", "(", "n_pred", "[", "b", ",", "c", "]", ",", "n_target", "[", "b", ",", "c", "]", ")", "\n", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.numpy_haussdorf": [[200, 205], ["max", "len", "scipy.spatial.distance.directed_hausdorff", "scipy.spatial.distance.directed_hausdorff"], "function", ["None"], ["", "def", "numpy_haussdorf", "(", "pred", ":", "np", ".", "ndarray", ",", "target", ":", "np", ".", "ndarray", ")", "->", "float", ":", "\n", "    ", "assert", "len", "(", "pred", ".", "shape", ")", "==", "2", "\n", "assert", "pred", ".", "shape", "==", "target", ".", "shape", "\n", "\n", "return", "max", "(", "directed_hausdorff", "(", "pred", ",", "target", ")", "[", "0", "]", ",", "directed_hausdorff", "(", "target", ",", "pred", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.iIoU": [[207, 212], ["utils.inter_sum", "utils.union_sum"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.inter_sum", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.union_sum"], ["", "def", "iIoU", "(", "pred", ":", "Tensor", ",", "target", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "IoUs", "=", "inter_sum", "(", "pred", ",", "target", ")", "/", "(", "union_sum", "(", "pred", ",", "target", ")", "+", "1e-10", ")", "\n", "assert", "IoUs", ".", "shape", "==", "pred", ".", "shape", "[", ":", "2", "]", "\n", "\n", "return", "IoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.probs2class": [[215, 223], ["utils.simplex", "probs.argmax"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.simplex"], ["", "def", "probs2class", "(", "probs", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "b", ",", "_", ",", "w", ",", "h", "=", "probs", ".", "shape", "# type: Tuple[int, int, int, int]", "\n", "assert", "simplex", "(", "probs", ")", "\n", "\n", "res", "=", "probs", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "assert", "res", ".", "shape", "==", "(", "b", ",", "w", ",", "h", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.class2one_hot": [[225, 238], ["utils.sset", "torch.stack().type", "utils.one_hot", "len", "seg.unsqueeze.unsqueeze", "list", "len", "range", "torch.stack", "range"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.sset", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.one_hot"], ["", "def", "class2one_hot", "(", "seg", ":", "Tensor", ",", "C", ":", "int", ")", "->", "Tensor", ":", "\n", "    ", "if", "len", "(", "seg", ".", "shape", ")", "==", "2", ":", "# Only w, h, used by the dataloader", "\n", "        ", "seg", "=", "seg", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "", "assert", "sset", "(", "seg", ",", "list", "(", "range", "(", "C", ")", ")", ")", "\n", "assert", "len", "(", "seg", ".", "shape", ")", "==", "3", ",", "seg", ".", "shape", "\n", "\n", "b", ",", "w", ",", "h", "=", "seg", ".", "shape", "# type: Tuple[int, int, int]", "\n", "\n", "res", "=", "torch", ".", "stack", "(", "[", "seg", "==", "c", "for", "c", "in", "range", "(", "C", ")", "]", ",", "dim", "=", "1", ")", ".", "type", "(", "torch", ".", "int32", ")", "\n", "assert", "res", ".", "shape", "==", "(", "b", ",", "C", ",", "w", ",", "h", ")", "\n", "assert", "one_hot", "(", "res", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.fast_np_class2one_hot": [[240, 254], ["set().issubset", "numpy.zeros", "numpy.put_along_axis", "numpy.all", "set().issubset", "len", "list", "utils.fast_np_class2one_hot", "set", "range", "np.zeros.sum", "set", "numpy.unique", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.fast_np_class2one_hot"], ["", "def", "fast_np_class2one_hot", "(", "seg", ":", "Tensor", ",", "C", ":", "int", ")", "->", "Tensor", ":", "\n", "    ", "if", "len", "(", "seg", ".", "shape", ")", "==", "2", ":", "# Only w, h, used by the dataloader", "\n", "        ", "return", "fast_np_class2one_hot", "(", "seg", "[", "None", ",", "...", "]", ",", "C", ")", "[", "0", "]", "\n", "", "assert", "set", "(", "np", ".", "unique", "(", "seg", ")", ")", ".", "issubset", "(", "list", "(", "range", "(", "C", ")", ")", ")", "\n", "\n", "b", ",", "w", ",", "h", "=", "seg", ".", "shape", "# type: Tuple[int, int, int]", "\n", "\n", "res", "=", "np", ".", "zeros", "(", "(", "b", ",", "C", ",", "w", ",", "h", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "np", ".", "put_along_axis", "(", "res", ",", "seg", "[", ":", ",", "None", ",", "...", "]", ",", "1", ",", "axis", "=", "1", ")", "\n", "assert", "res", ".", "shape", "==", "(", "b", ",", "C", ",", "w", ",", "h", ")", "\n", "assert", "np", ".", "all", "(", "res", ".", "sum", "(", "axis", "=", "1", ")", "==", "1", ")", "\n", "assert", "set", "(", "np", ".", "unique", "(", "res", ")", ")", ".", "issubset", "(", "[", "0", ",", "1", "]", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.probs2one_hot": [[256, 265], ["utils.simplex", "utils.class2one_hot", "utils.one_hot", "utils.probs2class"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.simplex", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.class2one_hot", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.one_hot", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.probs2class"], ["", "def", "probs2one_hot", "(", "probs", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "_", ",", "C", ",", "_", ",", "_", "=", "probs", ".", "shape", "\n", "assert", "simplex", "(", "probs", ")", "\n", "\n", "res", "=", "class2one_hot", "(", "probs2class", "(", "probs", ")", ",", "C", ")", "\n", "assert", "res", ".", "shape", "==", "probs", ".", "shape", "\n", "assert", "one_hot", "(", "res", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.save_images": [[268, 276], ["zip", "pathlib.Path().with_suffix", "Path().with_suffix.parent.mkdir", "skimage.io.imsave", "str", "seg.cpu().numpy", "pathlib.Path", "seg.cpu"], "function", ["None"], ["", "def", "save_images", "(", "segs", ":", "Tensor", ",", "names", ":", "Iterable", "[", "str", "]", ",", "root", ":", "str", ",", "mode", ":", "str", ",", "iter", ":", "int", ")", "->", "None", ":", "\n", "    ", "b", ",", "w", ",", "h", "=", "segs", ".", "shape", "# Since we have the class numbers, we do not need a C axis", "\n", "\n", "for", "seg", ",", "name", "in", "zip", "(", "segs", ",", "names", ")", ":", "\n", "        ", "save_path", "=", "Path", "(", "root", ",", "f\"iter{iter:03d}\"", ",", "mode", ",", "name", ")", ".", "with_suffix", "(", "\".png\"", ")", "\n", "save_path", ".", "parent", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "imsave", "(", "str", "(", "save_path", ")", ",", "seg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.augment": [[278, 305], ["isinstance", "utils.map_", "list", "utils.map_", "utils.map_", "random.uniform", "utils.map_", "random.uniform", "utils.map_", "utils.map_", "all", "random.random", "random.random", "random.random", "random.random", "int", "int", "random.randint", "random.randint", "e.rotate", "i.resize", "i.crop"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_"], ["", "", "def", "augment", "(", "*", "arrs", ":", "Union", "[", "np", ".", "ndarray", ",", "Image", ".", "Image", "]", ",", "rotate_angle", ":", "float", "=", "45", ",", "\n", "flip", ":", "bool", "=", "True", ",", "mirror", ":", "bool", "=", "True", ",", "\n", "rotate", ":", "bool", "=", "True", ",", "scale", ":", "bool", "=", "False", ")", "->", "List", "[", "Image", ".", "Image", "]", ":", "\n", "    ", "imgs", ":", "List", "[", "Image", ".", "Image", "]", "=", "map_", "(", "Image", ".", "fromarray", ",", "arrs", ")", "if", "isinstance", "(", "arrs", "[", "0", "]", ",", "np", ".", "ndarray", ")", "else", "list", "(", "arrs", ")", "\n", "\n", "if", "flip", "and", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "imgs", "=", "map_", "(", "ImageOps", ".", "flip", ",", "imgs", ")", "\n", "", "if", "mirror", "and", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "imgs", "=", "map_", "(", "ImageOps", ".", "mirror", ",", "imgs", ")", "\n", "", "if", "rotate", "and", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "angle", ":", "float", "=", "uniform", "(", "-", "rotate_angle", ",", "rotate_angle", ")", "\n", "imgs", "=", "map_", "(", "lambda", "e", ":", "e", ".", "rotate", "(", "angle", ")", ",", "imgs", ")", "\n", "", "if", "scale", "and", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "scale_factor", ":", "float", "=", "uniform", "(", "1", ",", "1.2", ")", "\n", "w", ",", "h", "=", "imgs", "[", "0", "]", ".", "size", "# Tuple[int, int]", "\n", "nw", ",", "nh", "=", "int", "(", "w", "*", "scale_factor", ")", ",", "int", "(", "h", "*", "scale_factor", ")", "# Tuple[int, int]", "\n", "\n", "# Resize", "\n", "imgs", "=", "map_", "(", "lambda", "i", ":", "i", ".", "resize", "(", "(", "nw", ",", "nh", ")", ")", ",", "imgs", ")", "\n", "\n", "# Now need to crop to original size", "\n", "bw", ",", "bh", "=", "randint", "(", "0", ",", "nw", "-", "w", ")", ",", "randint", "(", "0", ",", "nh", "-", "h", ")", "# Tuple[int, int]", "\n", "\n", "imgs", "=", "map_", "(", "lambda", "i", ":", "i", ".", "crop", "(", "(", "bw", ",", "bh", ",", "bw", "+", "w", ",", "bh", "+", "h", ")", ")", ",", "imgs", ")", "\n", "assert", "all", "(", "i", ".", "size", "==", "(", "w", ",", "h", ")", "for", "i", "in", "imgs", ")", "\n", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.augment_arr": [[307, 323], ["list", "random.random", "utils.map_", "random.random", "utils.map_"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_"], ["", "def", "augment_arr", "(", "*", "arrs_a", ":", "np", ".", "ndarray", ")", "->", "List", "[", "np", ".", "ndarray", "]", ":", "\n", "    ", "arrs", "=", "list", "(", "arrs_a", ")", "# manoucherie type check", "\n", "\n", "if", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "arrs", "=", "map_", "(", "np", ".", "flip", ",", "arrs", ")", "\n", "", "if", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "arrs", "=", "map_", "(", "np", ".", "fliplr", ",", "arrs", ")", "\n", "# if random() > 0.5:", "\n", "#     orig_shape = arrs[0].shape", "\n", "\n", "#     angle = random() * 90 - 45", "\n", "#     arrs = map_(lambda e: sp.ndimage.rotate(e, angle, order=1), arrs)", "\n", "\n", "#     arrs = get_center(orig_shape, *arrs)", "\n", "\n", "", "return", "arrs", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.get_center": [[325, 342], ["utils.get_center.g_center"], "function", ["None"], ["", "def", "get_center", "(", "shape", ":", "Tuple", ",", "*", "arrs", ":", "np", ".", "ndarray", ")", "->", "List", "[", "np", ".", "ndarray", "]", ":", "\n", "    ", "def", "g_center", "(", "arr", ")", ":", "\n", "        ", "if", "arr", ".", "shape", "==", "shape", ":", "\n", "            ", "return", "arr", "\n", "\n", "", "dx", "=", "(", "arr", ".", "shape", "[", "0", "]", "-", "shape", "[", "0", "]", ")", "//", "2", "\n", "dy", "=", "(", "arr", ".", "shape", "[", "1", "]", "-", "shape", "[", "1", "]", ")", "//", "2", "\n", "\n", "if", "dx", "==", "0", "or", "dy", "==", "0", ":", "\n", "            ", "return", "arr", "[", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", "]", "\n", "\n", "", "res", "=", "arr", "[", "dx", ":", "-", "dx", ",", "dy", ":", "-", "dy", "]", "[", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", "]", "# Deal with off-by-one errors", "\n", "assert", "res", ".", "shape", "==", "shape", ",", "(", "res", ".", "shape", ",", "shape", ",", "dx", ",", "dy", ")", "\n", "\n", "return", "res", "\n", "\n", "", "return", "[", "g_center", "(", "arr", ")", "for", "arr", "in", "arrs", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.CrossEntropy.__init__": [[16, 20], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# Self.idc is used to filter out some classes of the target mask. Use fancy indexing", "\n", "        ", "self", ".", "idc", ":", "List", "[", "int", "]", "=", "kwargs", "[", "\"idc\"", "]", "\n", "print", "(", "f\"Initialized {self.__class__.__name__} with {kwargs}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.CrossEntropy.__call__": [[21, 31], ["target[].type", "utils.simplex", "utils.simplex", "torch.einsum", "mask.sum"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.simplex", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.simplex"], ["", "def", "__call__", "(", "self", ",", "probs", ":", "Tensor", ",", "target", ":", "Tensor", ",", "_", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "assert", "simplex", "(", "probs", ")", "and", "simplex", "(", "target", ")", "\n", "\n", "log_p", ":", "Tensor", "=", "(", "probs", "[", ":", ",", "self", ".", "idc", ",", "...", "]", "+", "1e-10", ")", ".", "log", "(", ")", "\n", "mask", ":", "Tensor", "=", "target", "[", ":", ",", "self", ".", "idc", ",", "...", "]", ".", "type", "(", "torch", ".", "float32", ")", "\n", "\n", "loss", "=", "-", "einsum", "(", "\"bcwh,bcwh->\"", ",", "mask", ",", "log_p", ")", "\n", "loss", "/=", "mask", ".", "sum", "(", ")", "+", "1e-10", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__init__": [[37, 43], ["len", "getattr", "print", "__import__"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "idc", ":", "List", "[", "int", "]", "=", "kwargs", "[", "\"idc\"", "]", "\n", "self", ".", "C", "=", "len", "(", "self", ".", "idc", ")", "\n", "self", ".", "__fn__", "=", "getattr", "(", "__import__", "(", "'utils'", ")", ",", "kwargs", "[", "'fn'", "]", ")", "\n", "\n", "print", "(", "f\"Initialized {self.__class__.__name__} with {kwargs}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.losses.NaivePenalty.__call__": [[44, 76], ["utils.simplex", "losses.NaivePenalty.__fn__", "functools.reduce", "functools.reduce", "res.sum", "torch.max", "losses.NaivePenalty.__call__.penalty"], "methods", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.simplex"], ["", "def", "__call__", "(", "self", ",", "probs", ":", "Tensor", ",", "target", ":", "Tensor", ",", "bounds", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "def", "penalty", "(", "z", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "            ", "assert", "z", ".", "shape", "==", "(", ")", "\n", "\n", "return", "torch", ".", "max", "(", "torch", ".", "zeros_like", "(", "z", ")", ",", "z", ")", "**", "2", "\n", "\n", "", "assert", "simplex", "(", "probs", ")", "# and simplex(target)  # Actually, does not care about second part", "\n", "assert", "probs", ".", "shape", "==", "target", ".", "shape", "\n", "\n", "b", ",", "_", ",", "w", ",", "h", "=", "probs", ".", "shape", "# type: Tuple[int, int, int, int]", "\n", "_", ",", "_", ",", "k", ",", "two", "=", "bounds", ".", "shape", "# scalar or vector", "\n", "assert", "two", "==", "2", "\n", "# assert k == 1  # Keep it simple for now", "\n", "value", ":", "Tensor", "=", "self", ".", "__fn__", "(", "probs", "[", ":", ",", "self", ".", "idc", ",", "...", "]", ")", "\n", "lower_b", "=", "bounds", "[", ":", ",", "self", ".", "idc", ",", ":", ",", "0", "]", "\n", "upper_b", "=", "bounds", "[", ":", ",", "self", ".", "idc", ",", ":", ",", "1", "]", "\n", "\n", "assert", "value", ".", "shape", "==", "(", "b", ",", "self", ".", "C", ",", "k", ")", ",", "value", ".", "shape", "\n", "assert", "lower_b", ".", "shape", "==", "upper_b", ".", "shape", "==", "(", "b", ",", "self", ".", "C", ",", "k", ")", ",", "lower_b", ".", "shape", "\n", "\n", "upper_z", ":", "Tensor", "=", "(", "value", "-", "upper_b", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "flatten", "(", ")", "\n", "lower_z", ":", "Tensor", "=", "(", "lower_b", "-", "value", ")", ".", "type", "(", "torch", ".", "float32", ")", ".", "flatten", "(", ")", "\n", "\n", "upper_penalty", ":", "Tensor", "=", "reduce", "(", "add", ",", "(", "penalty", "(", "e", ")", "for", "e", "in", "upper_z", ")", ")", "\n", "lower_penalty", ":", "Tensor", "=", "reduce", "(", "add", ",", "(", "penalty", "(", "e", ")", "for", "e", "in", "lower_z", ")", ")", "\n", "\n", "res", ":", "Tensor", "=", "upper_penalty", "+", "lower_penalty", "\n", "\n", "loss", ":", "Tensor", "=", "res", ".", "sum", "(", ")", "/", "(", "w", "*", "h", ")", "\n", "assert", "loss", ".", "requires_grad", "==", "probs", ".", "requires_grad", "# Handle the case for validation", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.norm_arr": [[25, 32], ["img.astype", "res.astype", "img.astype.min", "shifted.max"], "function", ["None"], ["def", "norm_arr", "(", "img", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "casted", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "shifted", "=", "casted", "-", "casted", ".", "min", "(", ")", "\n", "norm", "=", "shifted", "/", "shifted", ".", "max", "(", ")", "\n", "res", "=", "255", "*", "norm", "\n", "\n", "return", "res", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.get_frame": [[34, 40], ["re.match", "ValueError", "re.match.group"], "function", ["None"], ["", "def", "get_frame", "(", "filename", ":", "str", ",", "regex", ":", "str", "=", "\".*_frame(\\d+)(_gt)?\\.nii.*\"", ")", "->", "str", ":", "\n", "    ", "matched", "=", "re", ".", "match", "(", "regex", ",", "filename", ")", "\n", "\n", "if", "matched", ":", "\n", "        ", "return", "matched", ".", "group", "(", "1", ")", "\n", "", "raise", "ValueError", "(", "regex", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.get_p_id": [[42, 50], ["None"], "function", ["None"], ["", "def", "get_p_id", "(", "path", ":", "Path", ")", "->", "str", ":", "\n", "    ", "'''\n    The patient ID, for the ACDC dataset, is the folder containing the data.\n    '''", "\n", "res", "=", "path", ".", "parent", ".", "name", "\n", "\n", "assert", "\"patient\"", "in", "res", ",", "res", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.save_slices": [[52, 144], ["slice_acdc.get_p_id", "slice_acdc.get_frame", "nibabel.load().header.get_zooms", "numpy.asarray", "numpy.asarray", "slice_acdc.norm_arr", "functools.partial", "pathlib.Path", "pathlib.Path", "numpy.zeros", "range", "resize_", "numpy.einsum", "numpy.array_equal", "np.einsum.sum", "slice_acdc.get_p_id", "slice_acdc.get_frame", "norm_arr.min", "norm_arr.max", "resize_().astype", "resize_", "set().issubset", "r_gt.astype.astype", "range", "set", "set", "set", "set", "resize_.astype", "nibabel.load", "nibabel.load", "norm_arr.min", "norm_arr.max", "set", "numpy.unique", "zip", "numpy.unique", "numpy.unique", "nibabel.load", "str", "str", "resize_", "set", "numpy.unique", "r_img.min", "r_img.max", "utils.map_", "save_dir.mkdir", "str", "numpy.unique", "utils.augment", "warnings.catch_warnings", "warnings.filterwarnings", "skimage.io.imsave", "str", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.get_p_id", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.get_frame", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.norm_arr", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.get_p_id", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.get_frame", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.augment"], ["", "def", "save_slices", "(", "img_p", ":", "Path", ",", "gt_p", ":", "Path", ",", "\n", "dest_dir", ":", "Path", ",", "shape", ":", "Tuple", "[", "int", ",", "int", "]", ",", "n_augment", ":", "int", ",", "\n", "img_dir", ":", "str", "=", "\"img\"", ",", "gt_dir", ":", "str", "=", "\"gt\"", ")", "->", "Tuple", "[", "Any", ",", "Any", ",", "Any", ",", "Any", "]", ":", "\n", "    ", "p_id", ":", "str", "=", "get_p_id", "(", "img_p", ")", "\n", "assert", "\"patient\"", "in", "p_id", "\n", "assert", "p_id", "==", "get_p_id", "(", "gt_p", ")", "\n", "\n", "f_id", ":", "str", "=", "get_frame", "(", "img_p", ".", "name", ")", "\n", "assert", "f_id", "==", "get_frame", "(", "gt_p", ".", "name", ")", "\n", "\n", "# Load the data", "\n", "dx", ",", "dy", ",", "dz", "=", "nib", ".", "load", "(", "str", "(", "img_p", ")", ")", ".", "header", ".", "get_zooms", "(", ")", "\n", "assert", "dz", "in", "[", "5", ",", "6.5", ",", "7", ",", "10", "]", ",", "dz", "\n", "img", "=", "np", ".", "asarray", "(", "nib", ".", "load", "(", "str", "(", "img_p", ")", ")", ".", "dataobj", ")", "\n", "gt", "=", "np", ".", "asarray", "(", "nib", ".", "load", "(", "str", "(", "gt_p", ")", ")", ".", "dataobj", ")", "\n", "\n", "nx", ",", "ny", "=", "shape", "\n", "fx", "=", "nx", "/", "img", ".", "shape", "[", "0", "]", "\n", "fy", "=", "ny", "/", "img", ".", "shape", "[", "1", "]", "\n", "# print(f\"Before dx {dx:.04f}, dy {dy:.04f}\")", "\n", "dx", "/=", "fx", "\n", "dy", "/=", "fy", "\n", "# print(f\"After dx {dx:.04f}, dy {dy:.04f}\")", "\n", "\n", "# print(dx, dy, dz)", "\n", "pixel_surface", ":", "float", "=", "dx", "*", "dy", "\n", "voxel_volume", ":", "float", "=", "dx", "*", "dy", "*", "dz", "\n", "\n", "assert", "img", ".", "shape", "==", "gt", ".", "shape", "\n", "# assert img.shape[:-1] == shape", "\n", "assert", "img", ".", "dtype", "in", "[", "np", ".", "uint8", ",", "np", ".", "int16", ",", "np", ".", "float32", "]", "\n", "\n", "# Normalize and check data content", "\n", "norm_img", "=", "norm_arr", "(", "img", ")", "# We need to normalize the whole 3d img, not 2d slices", "\n", "assert", "0", "==", "norm_img", ".", "min", "(", ")", "and", "norm_img", ".", "max", "(", ")", "==", "255", ",", "(", "norm_img", ".", "min", "(", ")", ",", "norm_img", ".", "max", "(", ")", ")", "\n", "assert", "gt", ".", "dtype", "==", "norm_img", ".", "dtype", "==", "np", ".", "uint8", "\n", "\n", "resize_", ":", "Callable", "=", "partial", "(", "resize", ",", "mode", "=", "\"constant\"", ",", "preserve_range", "=", "True", ",", "anti_aliasing", "=", "False", ")", "\n", "\n", "save_dir_img", ":", "Path", "=", "Path", "(", "dest_dir", ",", "img_dir", ")", "\n", "save_dir_gt", ":", "Path", "=", "Path", "(", "dest_dir", ",", "gt_dir", ")", "\n", "sizes_2d", ":", "np", ".", "ndarray", "=", "np", ".", "zeros", "(", "img", ".", "shape", "[", "-", "1", "]", ")", "\n", "for", "j", "in", "range", "(", "img", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "        ", "img_s", "=", "norm_img", "[", ":", ",", ":", ",", "j", "]", "\n", "gt_s", "=", "gt", "[", ":", ",", ":", ",", "j", "]", "\n", "assert", "img_s", ".", "shape", "==", "gt_s", ".", "shape", "\n", "assert", "gt_s", ".", "dtype", "==", "np", ".", "uint8", "\n", "\n", "# Resize and check the data are still what we expect", "\n", "r_img", ":", "np", ".", "ndarray", "=", "resize_", "(", "img_s", ",", "shape", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "r_gt", ":", "np", ".", "ndarray", "=", "resize_", "(", "gt_s", ",", "shape", ",", "order", "=", "0", ")", "\n", "# r_gt: np.ndarray = np.array(Image.fromarray(gt_s, mode='L').resize(shape))", "\n", "assert", "set", "(", "uniq", "(", "r_gt", ")", ")", ".", "issubset", "(", "set", "(", "uniq", "(", "gt", ")", ")", ")", ",", "(", "r_gt", ".", "dtype", ",", "uniq", "(", "r_gt", ")", ")", "\n", "r_gt", "=", "r_gt", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "assert", "r_img", ".", "dtype", "==", "r_gt", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "0", "<=", "r_img", ".", "min", "(", ")", "and", "r_img", ".", "max", "(", ")", "<=", "255", "# The range might be smaller", "\n", "sizes_2d", "[", "j", "]", "=", "(", "r_gt", "==", "3", ")", ".", "astype", "(", "np", ".", "int64", ")", ".", "sum", "(", ")", "\n", "\n", "for", "k", "in", "range", "(", "n_augment", "+", "1", ")", ":", "\n", "            ", "if", "k", "==", "0", ":", "\n", "                ", "a_img", ",", "a_gt", "=", "r_img", ",", "r_gt", "\n", "", "else", ":", "\n", "                ", "a_img", ",", "a_gt", "=", "map_", "(", "np", ".", "asarray", ",", "augment", "(", "r_img", ",", "r_gt", ")", ")", "\n", "\n", "", "for", "save_dir", ",", "data", "in", "zip", "(", "[", "save_dir_img", ",", "save_dir_gt", "]", ",", "[", "a_img", ",", "a_gt", "]", ")", ":", "\n", "                ", "filename", "=", "f\"{p_id}_{f_id}_{k}_{j}.png\"", "\n", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                    ", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ",", "category", "=", "UserWarning", ")", "\n", "imsave", "(", "str", "(", "Path", "(", "save_dir", ",", "filename", ")", ")", ",", "data", ")", "\n", "\n", "", "", "", "", "lv_gt", "=", "(", "gt", "==", "3", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "assert", "set", "(", "np", ".", "unique", "(", "lv_gt", ")", ")", "<=", "set", "(", "[", "0", ",", "1", "]", ")", "\n", "assert", "lv_gt", ".", "shape", "==", "gt", ".", "shape", "\n", "\n", "lv_gt", "=", "resize_", "(", "lv_gt", ",", "(", "*", "shape", ",", "img", ".", "shape", "[", "-", "1", "]", ")", ",", "order", "=", "0", ")", "\n", "assert", "set", "(", "np", ".", "unique", "(", "lv_gt", ")", ")", "<=", "set", "(", "[", "0", ",", "1", "]", ")", "\n", "\n", "slices_sizes_px", "=", "np", ".", "einsum", "(", "\"xyz->z\"", ",", "lv_gt", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "assert", "np", ".", "array_equal", "(", "slices_sizes_px", ",", "sizes_2d", ")", ",", "(", "slices_sizes_px", ",", "sizes_2d", ")", "\n", "# slices_sizes_px = sizes_2d[...]", "\n", "slices_sizes_px", "=", "slices_sizes_px", "[", "slices_sizes_px", ">", "0", "]", "\n", "slices_sizes_mm2", "=", "slices_sizes_px", "*", "pixel_surface", "\n", "\n", "# volume_size_px = np.einsum(\"xyz->\", lv_gt)", "\n", "volume_size_px", "=", "slices_sizes_px", ".", "sum", "(", ")", "\n", "volume_size_mm3", "=", "volume_size_px", "*", "voxel_volume", "\n", "\n", "# print(f\"{slices_sizes_px.mean():.0f}, {volume_size_px}\")", "\n", "\n", "return", "slices_sizes_px", ",", "slices_sizes_mm2", ",", "volume_size_px", ",", "volume_size_mm3", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.main": [[146, 213], ["pathlib.Path", "pathlib.Path", "src_path.exists", "sorted", "sorted", "list", "print", "pprint.pprint", "sorted", "random.sample", "set().isdisjoint", "zip", "dest_path.exists", "len", "len", "zip", "set", "len", "len", "len", "set", "len", "len", "len", "zip", "pathlib.Path", "print", "functools.partial", "utils.mmap_", "zip", "utils.flatten_", "utils.flatten_", "print", "print", "print", "matplotlib.subplots", "axes.flatten.flatten", "axes[].set_title", "axes[].boxplot", "axes[].set_title", "axes[].boxplot", "axes[].set_title", "axes[].hist", "axes[].set_title", "axes[].hist", "src_path.rglob", "len", "utils.map_", "len", "set", "len", "len", "len", "len", "len", "utils.uc_", "zip", "len", "min", "max", "numpy.percentile", "numpy.percentile", "str", "len", "slice_acdc.get_p_id", "slice_acdc.get_p_id", "str", "str", "len", "min", "max", "len", "len"], "function", ["home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.mmap_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.flatten_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.flatten_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.map_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.None.utils.uc_", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.get_p_id", "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.get_p_id"], ["", "def", "main", "(", "args", ":", "argparse", ".", "Namespace", ")", ":", "\n", "    ", "src_path", ":", "Path", "=", "Path", "(", "args", ".", "source_dir", ")", "\n", "dest_path", ":", "Path", "=", "Path", "(", "args", ".", "dest_dir", ")", "\n", "\n", "# Assume the cleaning up is done before calling the script", "\n", "assert", "src_path", ".", "exists", "(", ")", "\n", "assert", "not", "dest_path", ".", "exists", "(", ")", "\n", "\n", "# Get all the file names, avoid the temporal ones", "\n", "nii_paths", ":", "List", "[", "Path", "]", "=", "[", "p", "for", "p", "in", "src_path", ".", "rglob", "(", "'*.nii.gz'", ")", "if", "\"_4d\"", "not", "in", "str", "(", "p", ")", "]", "\n", "assert", "len", "(", "nii_paths", ")", "%", "2", "==", "0", ",", "\"Uneven number of .nii, one+ pair is broken\"", "\n", "\n", "# We sort now, but also id matching is checked while iterating later on", "\n", "img_nii_paths", ":", "List", "[", "Path", "]", "=", "sorted", "(", "p", "for", "p", "in", "nii_paths", "if", "\"_gt\"", "not", "in", "str", "(", "p", ")", ")", "\n", "gt_nii_paths", ":", "List", "[", "Path", "]", "=", "sorted", "(", "p", "for", "p", "in", "nii_paths", "if", "\"_gt\"", "in", "str", "(", "p", ")", ")", "\n", "assert", "len", "(", "img_nii_paths", ")", "==", "len", "(", "gt_nii_paths", ")", "==", "200", "\n", "paths", ":", "List", "[", "Tuple", "[", "Path", ",", "Path", "]", "]", "=", "list", "(", "zip", "(", "img_nii_paths", ",", "gt_nii_paths", ")", ")", "\n", "\n", "print", "(", "f\"Found {len(img_nii_paths)} pairs in total\"", ")", "\n", "pprint", "(", "paths", "[", ":", "5", "]", ")", "\n", "\n", "pids", ":", "List", "[", "str", "]", "=", "sorted", "(", "set", "(", "map_", "(", "get_p_id", ",", "img_nii_paths", ")", ")", ")", "\n", "assert", "len", "(", "pids", ")", "==", "(", "len", "(", "img_nii_paths", ")", "//", "2", ")", ",", "(", "len", "(", "pids", ")", ",", "len", "(", "img_nii_paths", ")", ")", "\n", "\n", "validation_pids", ":", "List", "[", "str", "]", "=", "random", ".", "sample", "(", "pids", ",", "args", ".", "retains", ")", "\n", "\n", "validation_paths", ":", "List", "[", "Tuple", "[", "Path", ",", "Path", "]", "]", "=", "[", "p", "for", "p", "in", "paths", "if", "get_p_id", "(", "p", "[", "0", "]", ")", "in", "validation_pids", "]", "\n", "training_paths", ":", "List", "[", "Tuple", "[", "Path", ",", "Path", "]", "]", "=", "[", "p", "for", "p", "in", "paths", "if", "get_p_id", "(", "p", "[", "0", "]", ")", "not", "in", "validation_pids", "]", "\n", "assert", "set", "(", "validation_paths", ")", ".", "isdisjoint", "(", "set", "(", "training_paths", ")", ")", "\n", "assert", "len", "(", "paths", ")", "==", "(", "len", "(", "validation_paths", ")", "+", "len", "(", "training_paths", ")", ")", "\n", "assert", "len", "(", "validation_paths", ")", "==", "2", "*", "args", ".", "retains", "\n", "assert", "len", "(", "training_paths", ")", "==", "(", "len", "(", "paths", ")", "-", "2", "*", "args", ".", "retains", ")", "\n", "\n", "for", "mode", ",", "_paths", ",", "n_augment", "in", "zip", "(", "[", "\"train\"", ",", "\"val\"", "]", ",", "[", "training_paths", ",", "validation_paths", "]", ",", "[", "args", ".", "n_augment", ",", "0", "]", ")", ":", "\n", "        ", "img_paths", ",", "gt_paths", "=", "zip", "(", "*", "_paths", ")", "# type: Tuple[Any, Any]", "\n", "\n", "dest_dir", "=", "Path", "(", "dest_path", ",", "mode", ")", "\n", "print", "(", "f\"Slicing {len(img_paths)} pairs to {dest_dir}\"", ")", "\n", "assert", "len", "(", "img_paths", ")", "==", "len", "(", "gt_paths", ")", "\n", "\n", "pfun", "=", "partial", "(", "save_slices", ",", "dest_dir", "=", "dest_dir", ",", "shape", "=", "args", ".", "shape", ",", "n_augment", "=", "n_augment", ")", "\n", "all_sizes", "=", "mmap_", "(", "uc_", "(", "pfun", ")", ",", "zip", "(", "img_paths", ",", "gt_paths", ")", ")", "\n", "# for paths in tqdm(list(zip(img_paths, gt_paths)), ncols=50):", "\n", "#     uc_(pfun)(paths)", "\n", "\n", "all_slices_sizes_px", ",", "all_slices_sizes_mm2", ",", "all_volume_size_px", ",", "all_volume_size_mm3", "=", "zip", "(", "*", "all_sizes", ")", "\n", "\n", "flat_sizes_px", "=", "flatten_", "(", "all_slices_sizes_px", ")", "\n", "flat_sizes_mm2", "=", "flatten_", "(", "all_slices_sizes_mm2", ")", "\n", "print", "(", "\"px\"", ",", "len", "(", "flat_sizes_px", ")", ",", "min", "(", "flat_sizes_px", ")", ",", "max", "(", "flat_sizes_px", ")", ")", "\n", "print", "(", "'\\t'", ",", "\"px 5/95\"", ",", "np", ".", "percentile", "(", "flat_sizes_px", ",", "5", ")", ",", "np", ".", "percentile", "(", "flat_sizes_px", ",", "95", ")", ")", "\n", "print", "(", "'\\t'", ",", "\"mm2\"", ",", "f\"{min(flat_sizes_mm2):.02f}\"", ",", "f\"{max(flat_sizes_mm2):.02f}\"", ")", "\n", "\n", "_", ",", "axes", "=", "plt", ".", "subplots", "(", "nrows", "=", "2", ",", "ncols", "=", "2", ")", "\n", "axes", "=", "axes", ".", "flatten", "(", ")", "\n", "\n", "axes", "[", "0", "]", ".", "set_title", "(", "\"Slice surface (pixel)\"", ")", "\n", "axes", "[", "0", "]", ".", "boxplot", "(", "all_slices_sizes_px", ",", "whis", "=", "[", "0", ",", "100", "]", ")", "\n", "\n", "axes", "[", "1", "]", ".", "set_title", "(", "\"Slice surface (mm2)\"", ")", "\n", "axes", "[", "1", "]", ".", "boxplot", "(", "all_slices_sizes_mm2", ",", "whis", "=", "[", "0", ",", "100", "]", ")", "\n", "\n", "axes", "[", "2", "]", ".", "set_title", "(", "\"LV volume (pixel)\"", ")", "\n", "axes", "[", "2", "]", ".", "hist", "(", "all_volume_size_px", ",", "bins", "=", "len", "(", "all_volume_size_px", ")", "//", "2", ")", "\n", "\n", "axes", "[", "3", "]", ".", "set_title", "(", "\"LV volume (mm3)\"", ")", "\n", "axes", "[", "3", "]", ".", "hist", "(", "all_volume_size_mm3", ",", "bins", "=", "len", "(", "all_volume_size_px", ")", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LIVIAETS_semi_curriculum.preprocess.slice_acdc.get_args": [[217, 234], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.seed", "print"], "function", ["None"], ["", "", "def", "get_args", "(", ")", "->", "argparse", ".", "Namespace", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Slicing parameters'", ")", "\n", "parser", ".", "add_argument", "(", "'--source_dir'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--dest_dir'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--img_dir'", ",", "type", "=", "str", ",", "default", "=", "\"IMG\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gt_dir'", ",", "type", "=", "str", ",", "default", "=", "\"GT\"", ")", "\n", "parser", ".", "add_argument", "(", "'--shape'", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "256", ",", "256", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--retains'", ",", "type", "=", "int", ",", "default", "=", "25", ",", "help", "=", "\"Number of retained patient for the validation data\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--n_augment'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"Number of augmentation to create per image, only for the training set\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "print", "(", "args", ")", "\n", "\n", "return", "args", "\n", "\n"]]}