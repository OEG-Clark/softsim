{"home.repos.pwc.inspect_result.andrehe02_go-probe.go_probe.gtp_agent.GreedyTermination.__init__": [[11, 15], ["dlgo.agent.termination.TerminationStrategy.__init__"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.__init__"], ["    ", "def", "__init__", "(", "self", ",", "margin", ")", ":", "\n", "        ", "TerminationStrategy", ".", "__init__", "(", "self", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "moved", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.go_probe.gtp_agent.GreedyTermination.should_pass": [[16, 25], ["dlgo.scoring.compute_game_result"], "methods", ["None"], ["", "def", "should_pass", "(", "self", ",", "game_state", ")", ":", "\n", "        ", "own_color", "=", "game_state", ".", "next_player", "\n", "if", "game_state", ".", "last_move", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "if", "game_state", ".", "last_move", ".", "is_pass", ":", "\n", "            ", "game_result", "=", "scoring", ".", "compute_game_result", "(", "game_state", ")", "\n", "if", "game_result", ".", "winner", "==", "own_color", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.go_probe.gtp_agent.GreedyTermination.should_resign": [[26, 35], ["dlgo.scoring.compute_game_result", "print", "str"], "methods", ["None"], ["", "def", "should_resign", "(", "self", ",", "game_state", ")", ":", "\n", "        ", "own_color", "=", "game_state", ".", "next_player", "\n", "game_result", "=", "scoring", ".", "compute_game_result", "(", "game_state", ")", "\n", "print", "(", "'WINNING MARGIN'", "+", "str", "(", "game_result", ".", "winning_margin", ")", ")", "\n", "if", "self", ".", "moved", ":", "\n", "            ", "if", "game_result", ".", "winner", "!=", "own_color", "and", "game_result", ".", "winning_margin", ">=", "self", ".", "margin", ":", "\n", "                ", "return", "True", "\n", "", "", "self", ".", "moved", "+=", "1", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.go_probe.gtp_agent.ModelWrapper.__init__": [[37, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "", "def", "predict", "(", "self", ",", "X", ")", ":", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.go_probe.gtp_agent.ModelWrapper.predict": [[39, 43], ["numpy.concatenate", "gtp_agent.ModelWrapper.model().detach", "torch.nn.functional.softmax().numpy", "numpy.ones", "gtp_agent.ModelWrapper.model", "torch.nn.functional.softmax", "torch.Tensor"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "np", ".", "concatenate", "(", "(", "X", ",", "np", ".", "ones", "(", "(", "1", ",", "1", ",", "19", ",", "19", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "y", "=", "self", ".", "model", "(", "torch", ".", "Tensor", "(", "X", ")", ")", ".", "detach", "(", ")", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "y", ",", "dim", "=", "1", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.go_probe.gtp_agent.main": [[44, 57], ["go_probe.models.go.GoModel", "torch.load", "go_probe.models.go.GoModel.load_state_dict", "dlgo.encoders.sevenplane.SevenPlaneEncoder", "dlgo.agent.predict.DeepLearningAgent", "dlgo.agent.termination.TerminationAgent", "dlgo.gtp.GTPFrontend", "dlgo.gtp.GTPFrontend.run", "gtp_agent.ModelWrapper", "gtp_agent.GreedyTermination", "torch.device"], "function", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.DefaultExperiment.run"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "go_model", "=", "GoModel", "(", "None", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "'C:/Users/andre/Desktop/go-probe/model_ckpt.pth.tar'", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "state_dict", "=", "{", "key", "[", "7", ":", "]", ":", "state_dict", "[", "key", "]", "for", "key", "in", "state_dict", "}", "#remove 'module.' prefix", "\n", "go_model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "encoder", "=", "SevenPlaneEncoder", "(", "(", "19", ",", "19", ")", ")", "\n", "dlagent", "=", "DeepLearningAgent", "(", "ModelWrapper", "(", "go_model", ")", ",", "encoder", ")", "\n", "agent", "=", "TerminationAgent", "(", "dlagent", ",", "GreedyTermination", "(", "40", ")", ")", "\n", "\n", "frontend", "=", "GTPFrontend", "(", "agent", ")", "\n", "frontend", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.utils.visual.draw_go_board": [[5, 51], ["matplotlib.figure", "plt.figure.patch.set_facecolor", "plt.figure.add_subplot", "range", "range", "fig.add_subplot.set_position", "fig.add_subplot.set_axis_off", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "range", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "fig.add_subplot.plot", "fig.add_subplot.plot", "len", "range", "range", "fig.add_subplot.plot", "len", "fig.add_subplot.plot", "fig.add_subplot.plot", "visual.draw_go_board.draw_stone"], "function", ["None"], ["def", "draw_go_board", "(", "b_board", ",", "w_board", ",", "feat", ")", ":", "\n", "# create a 8\" x 8\" board", "\n", "    ", "if", "b_board", "is", "None", ":", "\n", "        ", "b_board", "=", "np", ".", "zeros", "(", "(", "19", ",", "19", ")", ")", "\n", "", "if", "w_board", "is", "None", ":", "\n", "        ", "w_board", "=", "np", ".", "zeros", "(", "(", "19", ",", "19", ")", ")", "\n", "", "if", "feat", "is", "None", ":", "\n", "        ", "feat", "=", "np", ".", "zeros", "(", "(", "19", ",", "19", ")", ")", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "[", "8", ",", "8", "]", ")", "\n", "fig", ".", "patch", ".", "set_facecolor", "(", "(", "1", ",", "1", ",", ".8", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "\n", "# draw the grid", "\n", "for", "x", "in", "range", "(", "19", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "[", "x", ",", "x", "]", ",", "[", "0", ",", "18", "]", ",", "'k'", ")", "\n", "", "for", "y", "in", "range", "(", "19", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "[", "0", ",", "18", "]", ",", "[", "y", ",", "y", "]", ",", "'k'", ")", "\n", "\n", "# scale the axis area to fill the whole figure", "\n", "", "ax", ".", "set_position", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "\n", "# get rid of axes and everything (the figure background will show through)", "\n", "ax", ".", "set_axis_off", "(", ")", "\n", "\n", "# scale the plot area conveniently (the board is in 0,0..18,18)", "\n", "ax", ".", "set_xlim", "(", "-", "1", ",", "19", ")", "\n", "ax", ".", "set_ylim", "(", "-", "1", ",", "19", ")", "\n", "\n", "def", "draw_stone", "(", "row", ",", "col", ",", "color", ")", ":", "\n", "        ", "if", "color", "==", "'b'", ":", "\n", "            ", "ax", ".", "plot", "(", "row", ",", "col", ",", "'o'", ",", "markersize", "=", "25", ",", "markeredgecolor", "=", "(", "0", ",", "0", ",", "0", ")", ",", "markerfacecolor", "=", "'k'", ",", "markeredgewidth", "=", "2", ")", "\n", "", "elif", "color", "==", "'w'", ":", "\n", "            ", "ax", ".", "plot", "(", "row", ",", "col", ",", "'o'", ",", "markersize", "=", "25", ",", "markeredgecolor", "=", "(", ".5", ",", ".5", ",", ".5", ")", ",", "markerfacecolor", "=", "'w'", ",", "markeredgewidth", "=", "2", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "b_board", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "b_board", "[", "0", "]", ")", ")", ":", "\n", "            ", "if", "b_board", "[", "i", "]", "[", "j", "]", ":", "\n", "                ", "draw_stone", "(", "i", ",", "j", ",", "'b'", ")", "\n", "", "if", "w_board", "[", "i", "]", "[", "j", "]", ":", "\n", "                ", "draw_stone", "(", "i", ",", "j", ",", "'w'", ")", "\n", "\n", "", "", "", "for", "r", "in", "range", "(", "19", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "19", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "r", ",", "c", ",", "'X'", ",", "markersize", "=", "feat", "[", "r", "]", "[", "c", "]", ",", "markerfacecolor", "=", "'r'", ")", "\n", "", "", "return", "ax", "\n", "", ""]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.filter_annotations.filter_annotations": [[5, 49], ["tqdm.tqdm", "print", "print", "dlgo.goboard_fast.GameState.new_game", "filtered.append", "sgf.split", "move_name.index", "len", "filter_annotations.filter_annotations.get_game_state"], "function", ["None"], ["def", "filter_annotations", "(", "ants", ")", ":", "\n", "    ", "'''\n    Samples with wrong board sizes, invalid move sequences, or empty boards are removed.\n    We also skip all samples with the \"Add Empty\" action in their move sequences. \n    \"AE\" is used to remove a piece in order to show an alternative move sequence, \n    but our GameState objects don't support this.\n    '''", "\n", "def", "get_game_state", "(", "sgf", ")", ":", "\n", "        ", "game", "=", "goboard", ".", "GameState", ".", "new_game", "(", "19", ")", "\n", "move_seq", "=", "sgf", ".", "split", "(", "';'", ")", "[", "1", ":", "-", "1", "]", "\n", "for", "move_name", "in", "move_seq", ":", "\n", "            ", "idx", "=", "move_name", ".", "index", "(", "'['", ")", "\n", "col_s", ",", "row_s", "=", "move_name", "[", "idx", "+", "1", "]", ",", "move_name", "[", "idx", "+", "2", "]", "\n", "col", "=", "ord", "(", "col_s", ")", "-", "97", "\n", "row", "=", "19", "-", "ord", "(", "row_s", ")", "+", "96", "\n", "if", "'B'", "in", "move_name", ":", "\n", "                ", "game", ".", "board", ".", "place_stone", "(", "Player", ".", "black", ",", "Point", "(", "row", "+", "1", ",", "col", "+", "1", ")", ")", "\n", "game", ".", "next_player", "=", "Player", ".", "white", "\n", "", "elif", "'W'", "in", "move_name", ":", "\n", "                ", "game", ".", "board", ".", "place_stone", "(", "Player", ".", "white", ",", "Point", "(", "row", "+", "1", ",", "col", "+", "1", ")", ")", "\n", "game", ".", "next_player", "=", "Player", ".", "black", "\n", "", "", "return", "game", "\n", "\n", "", "filtered", "=", "[", "]", "\n", "skipped", "=", "{", "'size'", ":", "0", ",", "'moves'", ":", "0", ",", "'backtrack'", ":", "0", ",", "'empty'", ":", "0", "}", "\n", "for", "ant", "in", "tqdm", "(", "ants", ")", ":", "\n", "        ", "if", "'AE'", "in", "ant", "[", "'sgf'", "]", ":", "\n", "            ", "skipped", "[", "'backtrack'", "]", "+=", "1", "\n", "continue", "\n", "", "if", "len", "(", "ant", "[", "'board_state'", "]", "[", "0", "]", ")", "!=", "19", ":", "\n", "            ", "skipped", "[", "'size'", "]", "+=", "1", "\n", "continue", "\n", "", "try", ":", "\n", "            ", "game", "=", "get_game_state", "(", "ant", "[", "'sgf'", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "skipped", "[", "'moves'", "]", "+=", "1", "\n", "continue", "\n", "", "if", "not", "game", ".", "board", "or", "not", "(", "'W'", "in", "ant", "[", "'sgf'", "]", "or", "'B'", "in", "ant", "[", "'sgf'", "]", ")", ":", "\n", "            ", "skipped", "[", "'empty'", "]", "+=", "1", "\n", "continue", "\n", "", "filtered", ".", "append", "(", "ant", ")", "\n", "", "print", "(", "'Skipped for reasons:'", ",", "skipped", ")", "\n", "print", "(", "'%d of %d samples usable'", "%", "(", "len", "(", "filtered", ")", ",", "len", "(", "ants", ")", ")", ")", "\n", "return", "filtered", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.filter_annotations.main": [[50, 59], ["pkl.load", "filter_annotations.filter_annotations", "random.seed", "random.shuffle", "open", "open", "pkl.dump"], "function", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.filter_annotations.filter_annotations", "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.shuffle"], ["", "def", "main", "(", "fname", ",", "output", ")", ":", "\n", "    ", "import", "pickle", "as", "pkl", "\n", "ants", "=", "pkl", ".", "load", "(", "open", "(", "fname", ",", "'rb'", ")", ")", "\n", "filtered", "=", "filter_annotations", "(", "ants", ")", "\n", "import", "random", "\n", "random", ".", "seed", "(", "0", ")", "\n", "random", ".", "shuffle", "(", "filtered", ")", "\n", "with", "open", "(", "output", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pkl", ".", "dump", "(", "filtered", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.generate_word_sets.count": [[6, 18], ["collections.defaultdict", "set", "ant[].lower", "re.sub().split", "re.sub", "len", "set.add"], "function", ["None"], ["def", "count", "(", "words", ",", "annotations", ")", ":", "\n", "    ", "freqs", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "ant", "in", "annotations", ":", "\n", "        ", "counted", "=", "set", "(", ")", "\n", "cmt", "=", "ant", "[", "'comments'", "]", ".", "lower", "(", ")", "\n", "for", "word", "in", "re", ".", "sub", "(", "'[^A-Za-z0-9 ]+'", ",", "''", ",", "cmt", ")", ".", "split", "(", "' '", ")", ":", "\n", "            ", "if", "len", "(", "word", ")", "<", "2", ":", "\n", "                ", "continue", "\n", "", "if", "word", "in", "words", "and", "word", "not", "in", "counted", ":", "\n", "                ", "freqs", "[", "word", "]", "+=", "1", "\n", "counted", ".", "add", "(", "word", ")", "\n", "", "", "", "return", "freqs", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.generate_word_sets.get_vocabulary": [[19, 28], ["collections.defaultdict", "ant[].lower", "re.sub().split", "re.sub", "len", "word.isalpha"], "function", ["None"], ["", "def", "get_vocabulary", "(", "annotations", ")", ":", "\n", "    ", "word_freqs", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "ant", "in", "annotations", ":", "\n", "        ", "cmt", "=", "ant", "[", "'comments'", "]", ".", "lower", "(", ")", "\n", "for", "word", "in", "re", ".", "sub", "(", "'[^A-Za-z0-9 ]+'", ",", "''", ",", "cmt", ")", ".", "split", "(", "' '", ")", ":", "\n", "            ", "if", "len", "(", "word", ")", "<", "2", "or", "not", "word", ".", "isalpha", "(", ")", ":", "\n", "                ", "continue", "\n", "", "word_freqs", "[", "word", "]", "+=", "1", "\n", "", "", "return", "word_freqs", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.generate_word_sets.main": [[29, 78], ["pkl.load", "print", "generate_word_sets.get_vocabulary", "print", "generate_word_sets.count", "word_freqs.sort", "print", "print", "go_word_freqs.sort", "print", "print", "random.seed", "print", "print", "open", "open", "f.readlines", "random.choice.strip", "min", "max", "len", "random.choice", "open", "open", "open", "selected_words.append", "f.write", "f.write", "f.write"], "function", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.generate_word_sets.get_vocabulary", "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.generate_word_sets.count"], ["", "def", "main", "(", "fname", ",", "dict_file", ")", ":", "\n", "    ", "import", "pickle", "as", "pkl", "\n", "ants", "=", "pkl", ".", "load", "(", "open", "(", "fname", ",", "'rb'", ")", ")", "\n", "\n", "print", "(", "\"Collecting annotation vocabulary\"", ")", "\n", "vocab", "=", "get_vocabulary", "(", "ants", ")", "\n", "print", "(", "\"Counting word frequencies\"", ")", "\n", "freqs", "=", "count", "(", "vocab", ",", "ants", ")", "\n", "word_freqs", "=", "[", "(", "w", ",", "freqs", "[", "w", "]", ")", "for", "w", "in", "vocab", "]", "\n", "word_freqs", ".", "sort", "(", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "\n", "top_words", "=", "[", "x", "[", "0", "]", "for", "x", "in", "word_freqs", "[", ":", "WORDS_PER_CATEGORY", "]", "]", "\n", "print", "(", "\"Most frequent control words: \"", ")", "\n", "print", "(", "top_words", ")", "\n", "\n", "with", "open", "(", "dict_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "go_dict", "=", "f", ".", "readlines", "(", ")", "\n", "", "go_dict", "=", "[", "w", ".", "strip", "(", ")", "for", "w", "in", "go_dict", "]", "\n", "go_word_freqs", "=", "[", "(", "w", ",", "freqs", "[", "w", "]", ")", "for", "w", "in", "go_dict", "]", "\n", "go_word_freqs", ".", "sort", "(", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", "\n", "top_go_words", "=", "[", "x", "[", "0", "]", "for", "x", "in", "go_word_freqs", "[", ":", "WORDS_PER_CATEGORY", "]", "]", "\n", "print", "(", "\"Most freqeuent keywords: \"", ")", "\n", "print", "(", "top_go_words", ")", "\n", "\n", "go_freq_set", "=", "[", "freqs", "[", "w", "]", "for", "w", "in", "top_go_words", "]", "\n", "min_freq", ",", "max_freq", "=", "min", "(", "go_freq_set", ")", ",", "max", "(", "go_freq_set", ")", "\n", "similar_freq_words", "=", "[", "w", "for", "w", "in", "vocab", "if", "min_freq", "<=", "freqs", "[", "w", "]", "<=", "max_freq", "]", "\n", "\n", "import", "random", "\n", "selected_words", "=", "[", "]", "\n", "random", ".", "seed", "(", "1", ")", "\n", "while", "len", "(", "selected_words", ")", "<", "WORDS_PER_CATEGORY", ":", "\n", "        ", "w", "=", "random", ".", "choice", "(", "similar_freq_words", ")", "\n", "if", "w", "not", "in", "top_go_words", "and", "w", "not", "in", "selected_words", ":", "\n", "            ", "selected_words", ".", "append", "(", "w", ")", "\n", "\n", "", "", "print", "(", "\"Similar frequency control words: \"", ")", "\n", "print", "(", "selected_words", ")", "\n", "\n", "with", "open", "(", "'top_control_words.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "w", "in", "top_words", ":", "\n", "            ", "f", ".", "write", "(", "w", "+", "'\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "'sim_control_words.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "w", "in", "selected_words", ":", "\n", "            ", "f", ".", "write", "(", "w", "+", "'\\n'", ")", "\n", "\n", "", "", "with", "open", "(", "'top_go_words.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "w", "in", "top_go_words", ":", "\n", "            ", "f", ".", "write", "(", "w", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.pattern_features.has_wall": [[3, 25], ["numpy.sum", "range", "range", "range", "range"], "function", ["None"], ["def", "has_wall", "(", "svp", ")", ":", "\n", "    ", "own", "=", "np", ".", "sum", "(", "svp", "[", "0", ":", "3", "]", ",", "axis", "=", "0", ")", "\n", "minlen", "=", "4", "\n", "for", "r", "in", "range", "(", "19", ")", ":", "\n", "        ", "cont", "=", "0", "\n", "for", "c", "in", "range", "(", "19", ")", ":", "\n", "            ", "if", "own", "[", "r", "]", "[", "c", "]", ":", "\n", "                ", "cont", "+=", "1", "\n", "", "else", ":", "\n", "                ", "cont", "=", "0", "\n", "", "if", "cont", ">=", "minlen", ":", "\n", "                ", "return", "True", "\n", "", "", "", "for", "c", "in", "range", "(", "19", ")", ":", "\n", "        ", "cont", "=", "0", "\n", "for", "r", "in", "range", "(", "19", ")", ":", "\n", "            ", "if", "own", "[", "r", "]", "[", "c", "]", ":", "\n", "                ", "cont", "+=", "1", "\n", "", "else", ":", "\n", "                ", "cont", "=", "0", "\n", "", "if", "cont", ">=", "minlen", ":", "\n", "                ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.pattern_features.has_eye": [[26, 67], ["numpy.sum", "numpy.sum", "pattern_features.has_eye.mark_surrounded"], "function", ["None"], ["", "def", "has_eye", "(", "svp", ")", ":", "\n", "\n", "    ", "def", "_is_surrounded", "(", "own", ",", "opp", ",", "i", ",", "j", ",", "marked", ")", ":", "\n", "        ", "if", "marked", "[", "i", "]", "[", "j", "]", ":", "\n", "            ", "return", "True", "\n", "", "if", "opp", "[", "i", "]", "[", "j", "]", ":", "\n", "            ", "return", "False", "\n", "", "if", "own", "[", "i", "]", "[", "j", "]", ":", "\n", "            ", "return", "True", "\n", "", "marked", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "adj_list", "=", "(", "(", "i", "+", "1", ",", "j", ")", ",", "(", "i", "-", "1", ",", "j", ")", ",", "(", "i", ",", "j", "-", "1", ")", ",", "(", "i", ",", "j", "+", "1", ")", ")", "\n", "for", "adj", "in", "adj_list", ":", "\n", "            ", "if", "adj", "[", "0", "]", "<", "0", "or", "adj", "[", "0", "]", ">", "18", "or", "adj", "[", "1", "]", "<", "0", "or", "adj", "[", "1", "]", ">", "18", ":", "\n", "                ", "continue", "\n", "", "if", "not", "_is_surrounded", "(", "own", ",", "opp", ",", "adj", "[", "0", "]", ",", "adj", "[", "1", "]", ",", "marked", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n", "", "def", "is_surrounded", "(", "own", ",", "opp", ",", "i", ",", "j", ")", ":", "\n", "        ", "marked", "=", "np", ".", "zeros", "(", "(", "19", ",", "19", ")", ")", "\n", "if", "_is_surrounded", "(", "own", ",", "opp", ",", "i", ",", "j", ",", "marked", ")", ":", "\n", "            ", "return", "marked", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "", "def", "mark_surrounded", "(", "own", ",", "opp", ")", ":", "\n", "        ", "marked", "=", "np", ".", "zeros", "(", "(", "19", ",", "19", ")", ")", "\n", "for", "i", "in", "range", "(", "19", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "19", ")", ":", "\n", "                ", "if", "not", "marked", "[", "i", "]", "[", "j", "]", ":", "\n", "                    ", "group", "=", "is_surrounded", "(", "own", ",", "opp", ",", "i", ",", "j", ")", "\n", "if", "group", "is", "not", "None", ":", "\n", "                        ", "marked", "+=", "group", "\n", "if", "np", ".", "any", "(", "group", ")", ":", "\n", "                            ", "return", "True", "\n", "", "", "", "", "", "return", "marked", "\n", "\n", "", "own", "=", "np", ".", "sum", "(", "svp", "[", "0", ":", "3", "]", ",", "axis", "=", "0", ")", "\n", "opp", "=", "np", ".", "sum", "(", "svp", "[", "3", ":", "6", "]", ",", "axis", "=", "0", ")", "\n", "marks", "=", "mark_surrounded", "(", "own", ",", "opp", ")", "\n", "return", "np", ".", "any", "(", "marks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.pattern_features.has_cut": [[68, 120], ["numpy.sum", "numpy.sum", "numpy.zeros", "numpy.zeros", "range", "enumerate", "stone_set.add", "range", "enumerate", "set.intersection", "adj_set.add", "pattern_features.has_cut.same_color_region"], "function", ["None"], ["", "def", "has_cut", "(", "svp", ")", ":", "\n", "\n", "    ", "def", "same_color_region", "(", "board", ",", "opp", ",", "i", ",", "j", ",", "stone_set", ",", "adj_set", ",", "marked", ")", ":", "\n", "        ", "if", "marked", "[", "i", "]", "[", "j", "]", "==", "1", ":", "\n", "            ", "return", "\n", "", "marked", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "stone_set", ".", "add", "(", "(", "i", ",", "j", ")", ")", "\n", "adj_list", "=", "(", "(", "i", "+", "1", ",", "j", ")", ",", "(", "i", "-", "1", ",", "j", ")", ",", "(", "i", ",", "j", "-", "1", ")", ",", "(", "i", ",", "j", "+", "1", ")", ")", "\n", "for", "adj", "in", "adj_list", ":", "\n", "            ", "if", "adj", "[", "0", "]", "<", "0", "or", "adj", "[", "0", "]", ">", "18", "or", "adj", "[", "1", "]", "<", "0", "or", "adj", "[", "1", "]", ">", "18", ":", "\n", "                ", "continue", "\n", "", "if", "not", "board", "[", "adj", "[", "0", "]", "]", "[", "adj", "[", "1", "]", "]", "and", "not", "opp", "[", "adj", "[", "0", "]", "]", "[", "adj", "[", "1", "]", "]", ":", "\n", "                ", "adj_set", ".", "add", "(", "adj", ")", "\n", "", "if", "board", "[", "adj", "[", "0", "]", "]", "[", "adj", "[", "1", "]", "]", "==", "board", "[", "i", "]", "[", "j", "]", ":", "\n", "                ", "same_color_region", "(", "board", ",", "opp", ",", "adj", "[", "0", "]", ",", "adj", "[", "1", "]", ",", "stone_set", ",", "adj_set", ",", "marked", ")", "\n", "\n", "", "", "", "own", "=", "np", ".", "sum", "(", "svp", "[", "0", ":", "3", "]", ",", "axis", "=", "0", ")", "\n", "opp", "=", "np", ".", "sum", "(", "svp", "[", "3", ":", "6", "]", ",", "axis", "=", "0", ")", "\n", "\n", "marked", "=", "np", ".", "zeros", "(", "(", "19", ",", "19", ")", ")", "\n", "X", "=", "[", "]", "\n", "marked", "=", "np", ".", "zeros", "(", "(", "19", ",", "19", ")", ")", "\n", "for", "i", "in", "range", "(", "19", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "19", ")", ":", "\n", "            ", "if", "marked", "[", "i", "]", "[", "j", "]", ":", "\n", "                ", "continue", "\n", "", "if", "opp", "[", "i", "]", "[", "j", "]", ":", "\n", "                ", "s", ",", "a", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "same_color_region", "(", "opp", ",", "own", ",", "i", ",", "j", ",", "s", ",", "a", ",", "marked", ")", "\n", "X", ".", "append", "(", "(", "s", ",", "a", ")", ")", "\n", "\n", "", "", "", "for", "ai", ",", "(", "s", ",", "a", ")", "in", "enumerate", "(", "X", ")", ":", "\n", "        ", "for", "a2i", ",", "(", "s2", ",", "a2", ")", "in", "enumerate", "(", "X", ")", ":", "\n", "            ", "if", "ai", "==", "a2i", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "s", ")", "+", "len", "(", "s2", ")", "<", "3", ":", "\n", "                ", "continue", "\n", "", "inter", "=", "set", ".", "intersection", "(", "a", ",", "a2", ")", "\n", "if", "len", "(", "inter", ")", "==", "1", ":", "\n", "                ", "for", "r", ",", "c", "in", "inter", ":", "\n", "                    ", "libs", "=", "0", "\n", "if", "r", ">", "0", "and", "not", "opp", "[", "r", "-", "1", "]", "[", "c", "]", ":", "\n", "                        ", "libs", "+=", "1", "\n", "", "if", "r", "<", "18", "and", "not", "opp", "[", "r", "+", "1", "]", "[", "c", "]", ":", "\n", "                        ", "libs", "+=", "1", "\n", "", "if", "c", ">", "0", "and", "not", "opp", "[", "r", "]", "[", "c", "-", "1", "]", ":", "\n", "                        ", "libs", "+=", "1", "\n", "", "if", "c", "<", "18", "and", "not", "opp", "[", "r", "]", "[", "c", "+", "1", "]", ":", "\n", "                        ", "libs", "+=", "1", "\n", "", "if", "libs", ">=", "2", ":", "\n", "                        ", "return", "True", "\n", "", "", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.pattern_features.has_ladder": [[121, 150], ["numpy.sum", "numpy.sum", "numpy.zeros", "range", "range", "pattern_features.has_ladder.in_grid"], "function", ["None"], ["", "def", "has_ladder", "(", "svp", ")", ":", "\n", "\n", "    ", "def", "in_grid", "(", "i", ",", "j", ")", ":", "\n", "        ", "return", "0", "<=", "i", "<", "19", "and", "0", "<=", "j", "<", "19", "\n", "\n", "", "own", "=", "np", ".", "sum", "(", "svp", "[", "0", ":", "3", "]", ",", "axis", "=", "0", ")", "\n", "opp", "=", "np", ".", "sum", "(", "svp", "[", "3", ":", "6", "]", ",", "axis", "=", "0", ")", "\n", "\n", "ft", "=", "np", ".", "zeros", "(", "(", "19", ",", "19", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "18", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "18", ")", ":", "\n", "            ", "if", "own", "[", "i", "]", "[", "j", "]", "or", "opp", "[", "i", "]", "[", "j", "]", ":", "\n", "                ", "continue", "\n", "", "continues_ladder", "=", "False", "\n", "libs", "=", "0", "\n", "owns", "=", "0", "\n", "adjs", "=", "(", "(", "i", "-", "1", ",", "j", ")", ",", "(", "i", "+", "1", ",", "j", ")", ",", "(", "i", ",", "j", "-", "1", ")", ",", "(", "i", ",", "j", "+", "1", ")", ")", "\n", "for", "r", ",", "c", "in", "adjs", ":", "\n", "                ", "if", "not", "in_grid", "(", "r", ",", "c", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "not", "own", "[", "r", "]", "[", "c", "]", "and", "not", "opp", "[", "r", "]", "[", "c", "]", ":", "\n", "                    ", "libs", "+=", "1", "\n", "", "if", "own", "[", "r", "]", "[", "c", "]", ":", "\n", "                    ", "owns", "+=", "1", "\n", "", "if", "svp", "[", "0", "]", "[", "r", "]", "[", "c", "]", ":", "\n", "                    ", "continues_ladder", "=", "True", "\n", "", "", "if", "continues_ladder", "and", "libs", "==", "2", "and", "owns", "==", "1", ":", "\n", "                ", "return", "True", "\n", "", "", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.__init__": [[15, 32], ["random.seed", "os.walk", "random.shuffle", "int", "int", "print", "print", "print", "os.path.join", "fname.replace", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.shuffle"], ["    ", "def", "__init__", "(", "self", ",", "feature_name", ",", "label_name", ",", "data_dir", ",", "train_p", ",", "test_p", ",", "batch_size", ",", "seed", "=", "0", ")", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "filenames", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "for", "fname", "in", "files", "if", "feature_name", "in", "fname", "]", "\n", "", "data_files", "=", "[", "(", "fname", ",", "fname", ".", "replace", "(", "feature_name", ",", "label_name", ")", ")", "for", "fname", "in", "filenames", "]", "\n", "\n", "random", ".", "shuffle", "(", "data_files", ")", "\n", "\n", "num_train_files", "=", "int", "(", "len", "(", "data_files", ")", "*", "train_p", ")", "\n", "num_test_files", "=", "int", "(", "len", "(", "data_files", ")", "*", "test_p", ")", "\n", "self", ".", "splits", "=", "{", "'test'", ":", "data_files", "[", ":", "num_test_files", "]", ",", "'train'", ":", "data_files", "[", "num_test_files", ":", "num_test_files", "+", "num_train_files", "]", "}", "\n", "print", "(", "'done loading data'", ")", "\n", "print", "(", "'split sizes:'", ")", "\n", "for", "key", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "            ", "print", "(", "key", ",", "len", "(", "self", ".", "splits", "[", "key", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.shuffle": [[33, 38], ["random.shuffle", "random.seed"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.shuffle"], ["", "", "def", "shuffle", "(", "self", ",", "split", ",", "seed", "=", "None", ")", ":", "\n", "        ", "assert", "split", "in", "[", "'train'", ",", "'test'", "]", "\n", "if", "seed", "is", "not", "None", ":", "\n", "            ", "random", ".", "seed", "(", "seed", ")", "\n", "", "random", ".", "shuffle", "(", "self", ".", "splits", "[", "split", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.loader": [[40, 43], ["torch.utils.data.DataLoader", "datasets.SplitLoader"], "methods", ["None"], ["", "def", "loader", "(", "self", ",", "split", ",", "max_ram_files", "=", "50", ",", "num_workers", "=", "0", ")", ":", "\n", "        ", "assert", "split", "in", "[", "'train'", ",", "'test'", "]", "\n", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "SplitLoader", "(", "self", ".", "splits", "[", "split", "]", ",", "self", ".", "batch_size", ",", "max_ram_files", ")", ",", "batch_size", "=", "1", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate", ",", "num_workers", "=", "num_workers", ")", "# just 1 worker since it should be super fast anyway", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.CrossValDataset.__init__": [[48, 60], ["random.seed", "os.walk", "random.shuffle", "os.path.join", "fname.replace"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.shuffle"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "feature_name", ",", "label_name", ",", "n_fold", ",", "batch_size", ",", "seed", "=", "0", ")", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "for", "root", ",", "_", ",", "files", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "filenames", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "for", "fname", "in", "files", "if", "feature_name", "in", "fname", "]", "\n", "\n", "", "data_files", "=", "[", "(", "fname", ",", "fname", ".", "replace", "(", "feature_name", ",", "label_name", ")", ")", "for", "fname", "in", "filenames", "]", "\n", "random", ".", "shuffle", "(", "data_files", ")", "\n", "\n", "self", ".", "data_files", "=", "data_files", "\n", "self", ".", "n_fold", "=", "n_fold", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.CrossValDataset.val_split": [[61, 67], ["CrossValDataset.Split", "len", "len"], "methods", ["None"], ["", "def", "val_split", "(", "self", ",", "val_idx", ")", ":", "\n", "        ", "start", "=", "len", "(", "self", ".", "data_files", ")", "*", "val_idx", "//", "self", ".", "n_fold", "\n", "end", "=", "len", "(", "self", ".", "data_files", ")", "*", "(", "val_idx", "+", "1", ")", "//", "self", ".", "n_fold", "\n", "test_split", "=", "self", ".", "data_files", "[", "start", ":", "end", "]", "\n", "train_split", "=", "self", ".", "data_files", "[", ":", "start", "]", "+", "self", ".", "data_files", "[", "end", ":", "]", "\n", "return", "CrossValDataset", ".", "Split", "(", "train_split", ",", "test_split", ",", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.SplitLoader.__init__": [[87, 99], ["super().__init__", "len", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.__init__", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load"], ["    ", "def", "__init__", "(", "self", ",", "filenames", ",", "batch_size", ",", "max_ram_files", "=", "1", ")", ":", "\n", "        ", "super", "(", "SplitLoader", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filenames", "=", "filenames", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "max_ram_files", "=", "max_ram_files", "\n", "self", ".", "loaded_inputs", ",", "self", ".", "loaded_labels", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "prev_load_pos", "=", "0", "\n", "self", ".", "load_pos", "=", "0", "\n", "self", ".", "pos", "=", "0", "\n", "\n", "features_file", ",", "labels_file", "=", "self", ".", "filenames", "[", "0", "]", "\n", "self", ".", "bucket_size", "=", "len", "(", "np", ".", "load", "(", "labels_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.SplitLoader.__len__": [[100, 102], ["int", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "len", "(", "self", ".", "filenames", ")", "*", "self", ".", "bucket_size", "/", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.SplitLoader.__iter__": [[104, 106], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.SplitLoader.__next__": [[108, 133], ["torch.utils.data.get_worker_info", "len", "range", "numpy.concatenate", "numpy.concatenate", "len", "min", "datasets.SplitLoader.loaded_inputs.append", "datasets.SplitLoader.loaded_labels.append", "len", "numpy.load", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "increment", "=", "self", ".", "max_ram_files", "\n", "worker_info", "=", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "\n", "if", "worker_info", "is", "not", "None", ":", "# # in a worker process", "\n", "            ", "increment", "=", "self", ".", "max_ram_files", "*", "worker_info", ".", "num_workers", "\n", "worker_id", "=", "worker_info", ".", "id", "\n", "if", "self", ".", "load_pos", "==", "0", ":", "\n", "                ", "self", ".", "load_pos", "=", "worker_id", "*", "self", ".", "max_ram_files", "\n", "", "", "if", "self", ".", "pos", ">=", "len", "(", "self", ".", "loaded_labels", ")", ":", "\n", "            ", "if", "self", ".", "load_pos", ">=", "len", "(", "self", ".", "filenames", ")", ":", "\n", "                ", "raise", "StopIteration", "\n", "", "self", ".", "loaded_inputs", ",", "self", ".", "loaded_labels", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "load_pos", ",", "min", "(", "len", "(", "self", ".", "filenames", ")", ",", "self", ".", "load_pos", "+", "self", ".", "max_ram_files", ")", ")", ":", "\n", "                ", "features_file", ",", "labels_file", "=", "self", ".", "filenames", "[", "i", "]", "\n", "self", ".", "loaded_inputs", ".", "append", "(", "np", ".", "load", "(", "features_file", ")", ")", "\n", "self", ".", "loaded_labels", ".", "append", "(", "np", ".", "load", "(", "labels_file", ")", ")", "\n", "", "self", ".", "loaded_inputs", "=", "np", ".", "concatenate", "(", "self", ".", "loaded_inputs", ",", "axis", "=", "0", ")", "\n", "self", ".", "loaded_labels", "=", "np", ".", "concatenate", "(", "self", ".", "loaded_labels", ",", "axis", "=", "0", ")", "\n", "self", ".", "prev_load_pos", "=", "self", ".", "load_pos", "\n", "self", ".", "load_pos", "+=", "increment", "\n", "self", ".", "pos", "=", "0", "\n", "", "inputs", ",", "labels", "=", "self", ".", "loaded_inputs", "[", "self", ".", "pos", ":", "self", ".", "pos", "+", "self", ".", "batch_size", "]", ",", "self", ".", "loaded_labels", "[", "self", ".", "pos", ":", "self", ".", "pos", "+", "self", ".", "batch_size", "]", "\n", "progress", "=", "self", ".", "prev_load_pos", "# num files we've finished going through, not counting the current ones", "\n", "self", ".", "pos", "+=", "self", ".", "batch_size", "\n", "return", "inputs", ",", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.collate": [[9, 12], ["torch.FloatTensor", "torch.LongTensor"], "function", ["None"], ["def", "collate", "(", "batch", ")", ":", "\n", "    ", "inputs", ",", "labels", "=", "batch", "[", "0", "]", "\n", "return", "torch", ".", "FloatTensor", "(", "inputs", ")", ",", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.generate_dataset.seven_planes": [[11, 30], ["dlgo.goboard_fast.GameState.new_game", "dlgo.encoders.sevenplane.SevenPlaneEncoder", "dlgo.encoders.sevenplane.SevenPlaneEncoder.encode", "numpy.ones", "numpy.concatenate", "sgf_str.split", "move_name.index", "ord", "goboard.GameState.new_game.board.place_stone", "ord", "dlgo.gotypes.Point", "goboard.GameState.new_game.board.place_stone", "dlgo.gotypes.Point"], "function", ["None"], ["def", "seven_planes", "(", "ant", ")", ":", "\n", "    ", "sgf_str", "=", "ant", "[", "'sgf'", "]", "\n", "game", "=", "goboard", ".", "GameState", ".", "new_game", "(", "19", ")", "\n", "move_seq", "=", "sgf_str", ".", "split", "(", "';'", ")", "[", "1", ":", "-", "1", "]", "\n", "for", "move_name", "in", "move_seq", ":", "\n", "        ", "idx", "=", "move_name", ".", "index", "(", "'['", ")", "\n", "col_s", ",", "row_s", "=", "move_name", "[", "idx", "+", "1", "]", ",", "move_name", "[", "idx", "+", "2", "]", "\n", "col", "=", "ord", "(", "col_s", ")", "-", "97", "\n", "row", "=", "19", "-", "ord", "(", "row_s", ")", "+", "96", "\n", "if", "'B'", "in", "move_name", ":", "\n", "            ", "game", ".", "board", ".", "place_stone", "(", "Player", ".", "black", ",", "Point", "(", "row", "+", "1", ",", "col", "+", "1", ")", ")", "\n", "game", ".", "next_player", "=", "Player", ".", "white", "\n", "", "elif", "'W'", "in", "move_name", ":", "\n", "            ", "game", ".", "board", ".", "place_stone", "(", "Player", ".", "white", ",", "Point", "(", "row", "+", "1", ",", "col", "+", "1", ")", ")", "\n", "game", ".", "next_player", "=", "Player", ".", "black", "\n", "", "", "encoder", "=", "SevenPlaneEncoder", "(", "(", "19", ",", "19", ")", ")", "\n", "svp", "=", "encoder", ".", "encode", "(", "game", ")", "\n", "ones", "=", "np", ".", "ones", "(", "(", "1", ",", "19", ",", "19", ")", ")", "\n", "return", "np", ".", "concatenate", "(", "(", "svp", ",", "ones", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.generate_dataset.AGZ_features": [[31, 66], ["dlgo.goboard_fast.GameState.new_game", "numpy.zeros", "dlgo.encoders.sevenplane.SevenPlaneEncoder", "enumerate", "sgf_str.split", "move_name.index", "ord", "goboard.GameState.new_game.board.place_stone", "dlgo.encoders.sevenplane.SevenPlaneEncoder.encode", "numpy.sum", "numpy.sum", "ord", "dlgo.gotypes.Point", "goboard.GameState.new_game.board.place_stone", "len", "dlgo.gotypes.Point"], "function", ["None"], ["", "def", "AGZ_features", "(", "ant", ")", ":", "\n", "    ", "sgf_str", "=", "ant", "[", "'sgf'", "]", "\n", "game", "=", "goboard", ".", "GameState", ".", "new_game", "(", "19", ")", "\n", "move_seq", "=", "sgf_str", ".", "split", "(", "';'", ")", "[", "1", ":", "-", "1", "]", "\n", "AGZ_feat", "=", "np", ".", "zeros", "(", "(", "18", ",", "19", ",", "19", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "encoder", "=", "SevenPlaneEncoder", "(", "(", "19", ",", "19", ")", ")", "\n", "\n", "for", "mv", ",", "move_name", "in", "enumerate", "(", "move_seq", ")", ":", "\n", "        ", "idx", "=", "move_name", ".", "index", "(", "'['", ")", "\n", "col_s", ",", "row_s", "=", "move_name", "[", "idx", "+", "1", "]", ",", "move_name", "[", "idx", "+", "2", "]", "\n", "col", "=", "ord", "(", "col_s", ")", "-", "97", "\n", "row", "=", "19", "-", "ord", "(", "row_s", ")", "+", "96", "\n", "if", "'B'", "in", "move_name", ":", "\n", "            ", "game", ".", "board", ".", "place_stone", "(", "Player", ".", "black", ",", "Point", "(", "row", "+", "1", ",", "col", "+", "1", ")", ")", "\n", "game", ".", "next_player", "=", "Player", ".", "white", "\n", "", "elif", "'W'", "in", "move_name", ":", "\n", "            ", "game", ".", "board", ".", "place_stone", "(", "Player", ".", "white", ",", "Point", "(", "row", "+", "1", ",", "col", "+", "1", ")", ")", "\n", "game", ".", "next_player", "=", "Player", ".", "black", "\n", "\n", "", "t", "=", "len", "(", "move_seq", ")", "-", "mv", "-", "1", "\n", "if", "t", "<", "8", ":", "\n", "            ", "svp", "=", "encoder", ".", "encode", "(", "game", ")", "\n", "own", "=", "np", ".", "sum", "(", "svp", "[", "0", ":", "3", "]", ",", "axis", "=", "0", ")", "\n", "opp", "=", "np", ".", "sum", "(", "svp", "[", "3", ":", "6", "]", ",", "axis", "=", "0", ")", "\n", "if", "t", "%", "2", "==", "1", ":", "\n", "                ", "own", ",", "opp", "=", "opp", ",", "own", "\n", "", "AGZ_feat", "[", "t", "*", "2", "]", "=", "own", "\n", "AGZ_feat", "[", "t", "*", "2", "+", "1", "]", "=", "opp", "\n", "\n", "", "if", "game", ".", "next_player", "==", "Player", ".", "black", ":", "\n", "            ", "AGZ_feat", "[", "16", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "AGZ_feat", "[", "17", "]", "=", "1", "\n", "\n", "", "", "return", "AGZ_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.generate_dataset.make_bag_of_words": [[67, 78], ["cmt.lower.lower", "numpy.zeros", "re.sub().split", "len", "re.sub", "cmt.lower.lower", "words.index"], "function", ["None"], ["", "def", "make_bag_of_words", "(", "words", ")", ":", "\n", "    ", "def", "bow", "(", "ant", ")", ":", "\n", "        ", "nonlocal", "words", "\n", "cmt", "=", "ant", "[", "'comments'", "]", "\n", "cmt", "=", "cmt", ".", "lower", "(", ")", "\n", "label", "=", "np", ".", "zeros", "(", "len", "(", "words", ")", ")", "\n", "for", "word", "in", "re", ".", "sub", "(", "'[^A-Za-z0-9 ]+'", ",", "''", ",", "cmt", ".", "lower", "(", ")", ")", ".", "split", "(", "' '", ")", ":", "\n", "            ", "if", "word", "in", "words", ":", "\n", "                ", "label", "[", "words", ".", "index", "(", "word", ")", "]", "=", "1", "\n", "", "", "return", "label", "\n", "", "return", "bow", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.generate_dataset.patterns": [[80, 84], ["generate_dataset.seven_planes", "numpy.array", "has_eye", "has_wall", "has_cut", "has_ladder"], "function", ["home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.generate_dataset.seven_planes", "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.pattern_features.has_eye", "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.pattern_features.has_wall", "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.pattern_features.has_cut", "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.pattern_features.has_ladder"], ["def", "patterns", "(", "ant", ")", ":", "\n", "    ", "svp", "=", "seven_planes", "(", "ant", ")", "\n", "label", "=", "np", ".", "array", "(", "[", "has_eye", "(", "svp", ")", ",", "has_wall", "(", "svp", ")", ",", "has_cut", "(", "svp", ")", ",", "has_ladder", "(", "svp", ")", "]", ")", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.generate_dataset.write_dataset": [[85, 91], ["tqdm.tqdm", "range", "zip", "numpy.stack", "numpy.save", "os.path.join", "feature_func", "len"], "function", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.save"], ["", "def", "write_dataset", "(", "ants", ",", "feature_funcs", ",", "feature_names", ",", "path", ",", "bucket_size", "=", "1024", ")", ":", "\n", "    ", "fname_bases", "=", "[", "f", "+", "\"_%d.npy\"", "for", "f", "in", "feature_names", "]", "\n", "for", "bkt", "in", "tqdm", "(", "range", "(", "(", "len", "(", "ants", ")", "-", "1", ")", "//", "bucket_size", "+", "1", ")", ")", ":", "\n", "        ", "for", "fname_base", ",", "feature_func", "in", "zip", "(", "fname_bases", ",", "feature_funcs", ")", ":", "\n", "            ", "fts", "=", "np", ".", "stack", "(", "feature_func", "(", "ant", ")", "for", "ant", "in", "ants", "[", "bkt", "*", "bucket_size", ":", "(", "bkt", "+", "1", ")", "*", "bucket_size", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "fname_base", "%", "bkt", ")", ",", "fts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.go_experiment.GoExperiment.__init__": [[13, 17], ["go_probe.experiments.DefaultExperiment.__init__", "go_probe.models.load_go_model", "go_probe.models.load_go_model.cuda"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.__init__", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.go.load_go_model"], ["def", "__init__", "(", "self", ",", "dataset", ",", "model_weights", ")", ":", "\n", "        ", "super", "(", "GoExperiment", ",", "self", ")", ".", "__init__", "(", "dataset", ")", "\n", "model", "=", "load_go_model", "(", "model_weights", ")", "\n", "self", ".", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.go_experiment.GoExperiment.dataloader": [[18, 22], ["go_experiment.GoExperiment.dataset.loader", "go_experiment.GoExperiment.dataset.shuffle"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.loader", "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.shuffle"], ["", "def", "dataloader", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "dataset", ".", "shuffle", "(", "split", ")", "\n", "", "return", "self", ".", "dataset", ".", "loader", "(", "split", ",", "num_workers", "=", "4", ",", "max_ram_files", "=", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.go_experiment.GoExperiment.get_internal_reps": [[23, 26], ["go_experiment.GoExperiment.model.forward_layer_outputs", "rep.flatten().cuda", "rep.flatten"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.go.GoModel.forward_layer_outputs"], ["", "def", "get_internal_reps", "(", "self", ",", "X", ")", ":", "\n", "        ", "reps", "=", "self", ".", "model", ".", "forward_layer_outputs", "(", "X", ")", "\n", "return", "[", "rep", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "for", "rep", "in", "reps", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.BaseExperiment.init_probes": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "init_probes", "(", "self", ")", ":", "\n", "        ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.BaseExperiment.dataloader": [[14, 16], ["None"], "methods", ["None"], ["", "def", "dataloader", "(", "self", ",", "split", ")", ":", "\n", "        ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.BaseExperiment.get_internal_reps": [[17, 19], ["None"], "methods", ["None"], ["", "def", "get_internal_reps", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.BaseExperiment.report_metrics": [[20, 22], ["None"], "methods", ["None"], ["", "def", "report_metrics", "(", "self", ")", ":", "\n", "        ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.BaseExperiment.run": [[23, 25], ["None"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.DefaultExperiment.__init__": [[33, 35], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.DefaultExperiment.init_probes": [[36, 39], ["torch.Linear().cuda", "torch.Linear().cuda", "torch.Linear().cuda", "torch.Adam", "torch.Adam", "torch.Adam", "probe.parameters", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "init_probes", "(", "self", ")", ":", "\n", "        ", "self", ".", "probes", "=", "[", "nn", ".", "Linear", "(", "dim", ",", "self", ".", "label_dim", ")", ".", "cuda", "(", ")", "for", "dim", "in", "self", ".", "probe_dims", "]", "\n", "self", ".", "optims", "=", "[", "optim", ".", "Adam", "(", "probe", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "for", "probe", "in", "self", ".", "probes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.DefaultExperiment.dataloader": [[40, 44], ["base.DefaultExperiment.dataset.loader", "base.DefaultExperiment.dataset.shuffle"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.loader", "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.shuffle"], ["", "def", "dataloader", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "dataset", ".", "shuffle", "(", "split", ")", "\n", "", "return", "self", ".", "dataset", ".", "loader", "(", "split", ",", "max_ram_files", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.DefaultExperiment.report_metrics": [[45, 67], ["base.DefaultExperiment.dataloader", "tqdm.tqdm.tqdm", "numpy.concatenate", "numpy.zeros", "range", "X.float().cuda.float().cuda.float().cuda", "base.DefaultExperiment.get_internal_reps", "enumerate", "numpy.concatenate.append", "numpy.concatenate", "len", "range", "range", "probe", "preds[].append", "y.cpu().numpy", "len", "sklearn.metrics.roc_auc_score", "len", "X.float().cuda.float().cuda.float", "zip", "p.detach().cpu().numpy", "y.cpu", "p.detach().cpu", "p.detach"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.elf_experiment.ELFExperiment.dataloader", "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.elf_experiment.ELFExperiment.get_internal_reps"], ["", "def", "report_metrics", "(", "self", ")", ":", "\n", "        ", "test_loader", "=", "self", ".", "dataloader", "(", "'test'", ")", "\n", "preds", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "self", ".", "probes", ")", ")", "]", "\n", "labels", "=", "[", "]", "\n", "for", "X", ",", "y", "in", "tqdm", "(", "test_loader", ")", ":", "\n", "            ", "X", "=", "X", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "reps", "=", "self", ".", "get_internal_reps", "(", "X", ")", "\n", "batch_preds", "=", "[", "probe", "(", "rep", ")", "for", "probe", ",", "rep", "in", "zip", "(", "self", ".", "probes", ",", "reps", ")", "]", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "batch_preds", ")", ":", "\n", "                ", "preds", "[", "i", "]", ".", "append", "(", "p", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "labels", ".", "append", "(", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "preds", "=", "[", "np", ".", "concatenate", "(", "p", ",", "axis", "=", "0", ")", "for", "p", "in", "preds", "]", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ",", "axis", "=", "0", ")", "\n", "\n", "aucs", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "probes", ")", ",", "self", ".", "label_dim", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "probes", ")", ")", ":", "\n", "            ", "for", "lbl", "in", "range", "(", "self", ".", "label_dim", ")", ":", "\n", "                ", "labels_", "=", "labels", "[", ":", ",", "lbl", "]", "\n", "preds_", "=", "preds", "[", "i", "]", "[", ":", ",", "lbl", "]", "\n", "auc", "=", "roc_auc_score", "(", "labels_", ",", "preds_", ")", "\n", "aucs", "[", "i", ",", "lbl", "]", "=", "auc", "\n", "", "", "return", "aucs", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.DefaultExperiment.run": [[68, 89], ["base.DefaultExperiment.init_probes", "numpy.zeros", "range", "base.DefaultExperiment.dataloader", "tqdm.tqdm.tqdm", "base.DefaultExperiment.report_metrics", "numpy.maximum", "print", "len", "X.float().cuda.float().cuda.float().cuda", "y.float().cuda.float().cuda.float().cuda", "base.DefaultExperiment.get_internal_reps", "zip", "numpy.maximum.mean", "probe", "base.DefaultExperiment.criterion", "base.DefaultExperiment.backward", "torch.step", "torch.step", "torch.step", "torch.zero_grad", "torch.zero_grad", "torch.zero_grad", "X.float().cuda.float().cuda.float", "y.float().cuda.float().cuda.float"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.DefaultExperiment.init_probes", "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.elf_experiment.ELFExperiment.dataloader", "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.base.DefaultExperiment.report_metrics", "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.elf_experiment.ELFExperiment.get_internal_reps"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "init_probes", "(", ")", "\n", "best_aucs", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "probes", ")", ",", "self", ".", "label_dim", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "num_epochs", ")", ":", "\n", "            ", "train_loader", "=", "self", ".", "dataloader", "(", "'train'", ")", "\n", "for", "X", ",", "y", "in", "tqdm", "(", "train_loader", ")", ":", "\n", "                ", "X", "=", "X", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "reps", "=", "self", ".", "get_internal_reps", "(", "X", ")", "\n", "for", "rep", ",", "probe", ",", "optim", "in", "zip", "(", "reps", ",", "self", ".", "probes", ",", "self", ".", "optims", ")", ":", "\n", "                    ", "pred", "=", "probe", "(", "rep", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "pred", ",", "y", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "optim", ".", "step", "(", ")", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "", "", "aucs", "=", "self", ".", "report_metrics", "(", ")", "\n", "best_aucs", "=", "np", ".", "maximum", "(", "best_aucs", ",", "aucs", ")", "\n", "print", "(", "best_aucs", ".", "mean", "(", "axis", "=", "1", ")", ")", "\n", "", "return", "best_aucs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.control_experiment.CtrlExperiment.__init__": [[13, 17], ["go_probe.experiments.DefaultExperiment.__init__", "go_probe.models.load_control_model", "go_probe.models.load_control_model.cuda"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.__init__", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.go.load_control_model"], ["def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "CtrlExperiment", ",", "self", ")", ".", "__init__", "(", "dataset", ")", "\n", "model", "=", "load_control_model", "(", ")", "\n", "self", ".", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.control_experiment.CtrlExperiment.dataloader": [[18, 22], ["control_experiment.CtrlExperiment.dataset.loader", "control_experiment.CtrlExperiment.dataset.shuffle"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.loader", "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.shuffle"], ["", "def", "dataloader", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "dataset", ".", "shuffle", "(", "split", ")", "\n", "", "return", "self", ".", "dataset", ".", "loader", "(", "split", ",", "num_workers", "=", "16", ",", "max_ram_files", "=", "40", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.control_experiment.CtrlExperiment.get_internal_reps": [[23, 26], ["control_experiment.CtrlExperiment.model.forward_layer_outputs", "rep.flatten().cuda", "rep.flatten"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.go.GoModel.forward_layer_outputs"], ["", "def", "get_internal_reps", "(", "self", ",", "X", ")", ":", "\n", "        ", "reps", "=", "self", ".", "model", ".", "forward_layer_outputs", "(", "X", ")", "\n", "return", "[", "rep", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "for", "rep", "in", "reps", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.elf_experiment.ELFExperiment.__init__": [[13, 17], ["go_probe.experiments.DefaultExperiment.__init__", "go_probe.models.load_elf_model", "go_probe.models.load_elf_model.cuda"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.__init__", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.load_elf_model"], ["def", "__init__", "(", "self", ",", "dataset", ",", "model_weights", ")", ":", "\n", "        ", "super", "(", "ELFExperiment", ",", "self", ")", ".", "__init__", "(", "dataset", ")", "\n", "model", "=", "load_elf_model", "(", "model_weights", ")", "\n", "self", ".", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.elf_experiment.ELFExperiment.dataloader": [[18, 22], ["elf_experiment.ELFExperiment.dataset.loader", "elf_experiment.ELFExperiment.dataset.shuffle"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.loader", "home.repos.pwc.inspect_result.andrehe02_go-probe.datasets.datasets.DefaultDataset.shuffle"], ["", "def", "dataloader", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "dataset", ".", "shuffle", "(", "split", ")", "\n", "", "return", "self", ".", "dataset", ".", "loader", "(", "split", ",", "num_workers", "=", "2", ",", "max_ram_files", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.experiments.elf_experiment.ELFExperiment.get_internal_reps": [[23, 26], ["elf_experiment.ELFExperiment.model.resnet_layer_output_generator", "rep.flatten().cuda", "rep.flatten"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.resnet_layer_output_generator"], ["", "def", "get_internal_reps", "(", "self", ",", "X", ")", ":", "\n", "        ", "for", "rep", "in", "self", ".", "model", ".", "resnet_layer_output_generator", "(", "X", ")", ":", "\n", "            ", "yield", "rep", ".", "flatten", "(", "start_dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.go.GoModel.__init__": [[10, 21], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "GoModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Conv2d", "(", "8", ",", "64", ",", "7", ",", "padding", "=", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "48", ",", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "48", ",", "48", ",", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "48", ",", "32", ",", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "32", ",", "5", ",", "padding", "=", "2", ")", "]", ")", "\n", "self", ".", "nonlinear", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "output_linear", "=", "nn", ".", "Linear", "(", "19", "*", "19", "*", "32", ",", "19", "*", "19", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.go.GoModel.forward": [[23, 29], ["range", "go.GoModel.output_linear", "len", "go.GoModel.nonlinear", "go.GoModel.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "convs", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "convs", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "nonlinear", "(", "x", ")", "\n", "", "x", "=", "self", ".", "output_linear", "(", "x", ".", "flatten", "(", "1", ")", ")", "\n", "return", "x", "# batch x NB_CLASSES (361) of scores", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.go.GoModel.forward_layer_outputs": [[30, 37], ["range", "len", "go.GoModel.nonlinear", "layer_outputs.append", "go.GoModel.detach"], "methods", ["None"], ["", "def", "forward_layer_outputs", "(", "self", ",", "x", ")", ":", "\n", "        ", "layer_outputs", "=", "[", "x", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "convs", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "convs", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "nonlinear", "(", "x", ")", "\n", "layer_outputs", ".", "append", "(", "x", ".", "detach", "(", ")", ")", "\n", "", "return", "layer_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.go.load_go_model": [[38, 46], ["go.GoModel", "torch.load", "torch.load", "torch.load", "GoModel.load_state_dict", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load"], ["", "", "def", "load_go_model", "(", "path", ",", "rm_prefix", "=", "True", ")", ":", "\n", "    ", "model", "=", "GoModel", "(", "None", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "torch", ".", "device", "(", "'cuda'", ")", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "if", "rm_prefix", ":", "\n", "        ", "state_dict", "=", "{", "key", "[", "7", ":", "]", ":", "state_dict", "[", "key", "]", "for", "key", "in", "state_dict", "}", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.go.load_control_model": [[47, 50], ["go.GoModel"], "function", ["None"], ["", "def", "load_control_model", "(", ")", ":", "\n", "    ", "model", "=", "GoModel", "(", "None", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.__init__": [[17, 32], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.__init__"], ["def", "__init__", "(", "self", ",", "option_map", ",", "params", ")", ":", "\n", "        ", "\"\"\"Initialize model with ``args``.\n\n        Set ``step`` to ``0`` and ``volatile`` to ```false``.\n\n        ``step`` records the number of times the weight has been updated.\n        ``volatile`` indicates that the Variable should be used in\n        inference mode, i.e. don't save the history.\n        \"\"\"", "\n", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "option_map", "=", "option_map", "\n", "self", ".", "options", "=", "option_map", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "step", "=", "0", "\n", "self", ".", "volatile", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.clone": [[33, 50], ["model.load_state_dict", "type", "deepcopy", "model.cuda", "elf.Model.state_dict"], "methods", ["None"], ["", "def", "clone", "(", "self", ",", "gpu", "=", "None", ")", ":", "\n", "        ", "\"\"\"Deep copy an existing model.\n\n        ``options``, ``step`` and ``state_dict`` are copied.\n\n        Args:\n            gpu(int): gpu id to be put the model on\n\n        Returns:\n            Cloned model\n        \"\"\"", "\n", "model", "=", "type", "(", "self", ")", "(", "self", ".", "option_map", ",", "self", ".", "params", ")", "\n", "model", ".", "load_state_dict", "(", "deepcopy", "(", "self", ".", "state_dict", "(", ")", ")", ")", "\n", "model", ".", "step", "=", "self", ".", "step", "\n", "if", "gpu", "is", "not", "None", ":", "\n", "            ", "model", ".", "cuda", "(", "gpu", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.set_volatile": [[51, 59], ["None"], "methods", ["None"], ["", "def", "set_volatile", "(", "self", ",", "volatile", ")", ":", "\n", "        ", "\"\"\"Set model to ``volatile``.\n\n        Args:\n            volatile(bool): indicating that the Variable should be used in\n                            inference mode, i.e. don't save the history.\n        \"\"\"", "\n", "self", ".", "volatile", "=", "volatile", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model._var": [[60, 70], ["isinstance", "Variable"], "methods", ["None"], ["", "def", "_var", "(", "self", ",", "x", ")", ":", "\n", "        ", "''' Convert tensor x to a pytorch Variable.\n\n        Returns:\n            Variable for x\n        '''", "\n", "if", "not", "isinstance", "(", "x", ",", "Variable", ")", ":", "\n", "            ", "return", "Variable", "(", "x", ",", "volatile", "=", "self", ".", "volatile", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.before_update": [[71, 78], ["None"], "methods", ["None"], ["", "", "def", "before_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Customized operations for each model before update.\n\n        To be extended.\n\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.save": [[79, 106], ["deepcopy().cpu().state_dict", "range", "print", "vars", "deepcopy().cpu", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "sleep", "deepcopy"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.save", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.save", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.save", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.save", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.save", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.save", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.save", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.save", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.save"], ["", "def", "save", "(", "self", ",", "filename", ",", "num_trial", "=", "10", ")", ":", "\n", "        ", "\"\"\"Save current model, step and args to ``filename``\n\n        Args:\n            filename(str): filename to be saved.\n            num_trial(int): maximum number of retries to save a model.\n        \"\"\"", "\n", "# Avoid calling the constructor by doing self.clone()", "\n", "# deepcopy should do it", "\n", "state_dict", "=", "deepcopy", "(", "self", ")", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", "\n", "\n", "# Note that the save might experience issues, so if we encounter", "\n", "# errors, try a few times and then give up.", "\n", "content", "=", "{", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'step'", ":", "self", ".", "step", ",", "\n", "'options'", ":", "vars", "(", "self", ".", "options", ")", ",", "\n", "}", "\n", "for", "i", "in", "range", "(", "num_trial", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "torch", ".", "save", "(", "content", ",", "filename", ")", "\n", "return", "\n", "", "except", "BaseException", ":", "\n", "                ", "sleep", "(", "1", ")", "\n", "", "", "print", "(", "\n", "\"Failed to save %s after %d trials, giving up ...\"", "%", "\n", "(", "filename", ",", "num_trial", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load": [[107, 159], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "isinstance", "torch.load.get", "torch.load.get", "torch.load.get", "os.path.realpath", "elf.Model.load_state_dict", "list", "elf.Model.load_state_dict", "torch.load.get", "torch.load.get", "torch.load.get", "torch.load.get", "torch.load.get", "torch.load.get", "vars", "sd.keys", "set", "set", "key.startswith", "torch.load.get.keys", "vars.keys", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load"], ["", "def", "load", "(", "\n", "self", ",", "filename", ",", "\n", "omit_keys", "=", "[", "]", ",", "replace_prefix", "=", "[", "]", ",", "check_loaded_options", "=", "True", ")", ":", "\n", "        ", "''' Load current model, step and args from ``filename``\n\n        Args:\n            filename(str): model filename to load from\n            omit_keys(list): list of omitted keys.\n                             Sometimes model will have extra keys and weights\n                             (e.g. due to extra tasks during training).\n                             We should omit them;\n                             otherwise loading will not work.\n        '''", "\n", "data", "=", "torch", ".", "load", "(", "filename", ")", "\n", "\n", "if", "isinstance", "(", "data", ",", "OrderedDict", ")", ":", "\n", "            ", "self", ".", "load_state_dict", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "for", "k", "in", "omit_keys", ":", "\n", "                ", "del", "data", "[", "\"state_dict\"", "]", "[", "k", "+", "\".weight\"", "]", "\n", "del", "data", "[", "\"state_dict\"", "]", "[", "k", "+", "\".bias\"", "]", "\n", "\n", "", "sd", "=", "data", "[", "\"state_dict\"", "]", "\n", "\n", "keys", "=", "list", "(", "sd", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "keys", ":", "\n", "# Should be commented out for PyTorch > 0.40", "\n", "# if key.endswith(\"num_batches_tracked\"):", "\n", "#    del sd[key]", "\n", "#     continue", "\n", "                ", "for", "src", ",", "dst", "in", "replace_prefix", ":", "\n", "                    ", "if", "key", ".", "startswith", "(", "src", ")", ":", "\n", "# print(f\"Src=\\\"{src}\\\", Dst=\\\"{dst}\\\"\")", "\n", "                        ", "sd", "[", "dst", "+", "key", "[", "len", "(", "src", ")", ":", "]", "]", "=", "sd", "[", "key", "]", "\n", "del", "sd", "[", "key", "]", "\n", "\n", "", "", "", "self", ".", "load_state_dict", "(", "sd", ")", "\n", "", "self", ".", "step", "=", "data", ".", "get", "(", "\"step\"", ",", "0", ")", "\n", "self", ".", "filename", "=", "os", ".", "path", ".", "realpath", "(", "data", ".", "get", "(", "\"filename\"", ",", "filename", ")", ")", "\n", "\n", "if", "check_loaded_options", ":", "\n", "# Ensure that for options defined in both the current model", "\n", "# options and the loaded model options, the values match between", "\n", "# current model and loaded model.", "\n", "            ", "loaded_options", "=", "data", ".", "get", "(", "'options'", ",", "{", "}", ")", "\n", "current_options", "=", "vars", "(", "self", ".", "options", ")", "\n", "\n", "for", "option_name", "in", "(", "set", "(", "loaded_options", ".", "keys", "(", ")", ")", "&", "set", "(", "current_options", ".", "keys", "(", ")", ")", ")", ":", "\n", "                ", "if", "loaded_options", "[", "option_name", "]", "!=", "current_options", "[", "option_name", "]", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "f'Discrepancy between current and loaded model '", "\n", "f'parameter: {option_name} '", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load_from": [[164, 176], ["hasattr", "hasattr", "elf.Model.load_state_dict", "deepcopy", "model.state_dict"], "methods", ["None"], ["", "", "", "", "def", "load_from", "(", "self", ",", "model", ")", ":", "\n", "        ", "''' Load from an existing model. State is not deep copied.\n        To deep copy the model, uss ``clone``.\n        '''", "\n", "if", "hasattr", "(", "model", ",", "'option_map'", ")", ":", "\n", "            ", "self", ".", "option_map", "=", "model", ".", "option_map", "\n", "\n", "", "if", "hasattr", "(", "model", ",", "'params'", ")", ":", "\n", "            ", "self", ".", "params", "=", "deepcopy", "(", "model", ".", "params", ")", "\n", "\n", "", "self", ".", "load_state_dict", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "step", "=", "model", ".", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.inc_step": [[177, 181], ["None"], "methods", ["None"], ["", "def", "inc_step", "(", "self", ")", ":", "\n", "        ", "''' increment the step.\n        ``step`` records the number of times the weight has been updated.'''", "\n", "self", ".", "step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.signature": [[182, 189], ["None"], "methods", ["None"], ["", "def", "signature", "(", "self", ")", ":", "\n", "        ", "'''Get model's signature.\n\n        Returns:\n            the model's signature string, specified by step.\n        '''", "\n", "return", "\"Model[%d]\"", "%", "self", ".", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.prepare_cooldown": [[190, 193], ["None"], "methods", ["None"], ["", "def", "prepare_cooldown", "(", "self", ")", ":", "\n", "        ", "\"\"\"Prepare for \"cooldown\" forward passes (useful for batchnorm).\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Block.__init__": [[197, 203], ["elf.Model.__init__", "elf.Block._conv_layer", "elf.Block._conv_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.__init__", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue._conv_layer", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue._conv_layer"], ["    ", "def", "__init__", "(", "self", ",", "option_map", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "option_map", ",", "params", ")", "\n", "self", ".", "options", "=", "option_map", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "if", "self", ".", "options", ".", "leaky_relu", "else", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv_lower", "=", "self", ".", "_conv_layer", "(", ")", "\n", "self", ".", "conv_upper", "=", "self", ".", "_conv_layer", "(", "relu", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Block._conv_layer": [[204, 231], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.append", "layers.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "def", "_conv_layer", "(", "\n", "self", ",", "\n", "input_channel", "=", "None", ",", "\n", "output_channel", "=", "None", ",", "\n", "kernel", "=", "3", ",", "\n", "relu", "=", "True", ")", ":", "\n", "        ", "if", "input_channel", "is", "None", ":", "\n", "            ", "input_channel", "=", "self", ".", "options", ".", "dim", "\n", "", "if", "output_channel", "is", "None", ":", "\n", "            ", "output_channel", "=", "self", ".", "options", ".", "dim", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "\n", "input_channel", ",", "\n", "output_channel", ",", "\n", "kernel", ",", "\n", "padding", "=", "(", "kernel", "//", "2", ")", ",", "\n", ")", ")", "\n", "if", "self", ".", "options", ".", "bn", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "nn", ".", "BatchNorm2d", "(", "output_channel", ",", "\n", "momentum", "=", "(", "self", ".", "options", ".", "bn_momentum", "or", "None", ")", ",", "\n", "eps", "=", "self", ".", "options", ".", "bn_eps", ")", ")", "\n", "", "if", "relu", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "relu", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Block.forward": [[232, 238], ["elf.Block.conv_lower", "elf.Block.conv_upper", "elf.Block.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ")", ":", "\n", "        ", "s1", "=", "self", ".", "conv_lower", "(", "s", ")", "\n", "s1", "=", "self", ".", "conv_upper", "(", "s1", ")", "\n", "s1", "=", "s1", "+", "s", "\n", "s", "=", "self", ".", "relu", "(", "s1", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.GoResNet.__init__": [[242, 249], ["elf.Model.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "elf.GoResNet.blocks.append", "elf.Block"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.__init__"], ["    ", "def", "__init__", "(", "self", ",", "option_map", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "option_map", ",", "params", ")", "\n", "self", ".", "options", "=", "option_map", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "options", ".", "num_block", ")", ":", "\n", "            ", "self", ".", "blocks", ".", "append", "(", "Block", "(", "option_map", ",", "params", ")", ")", "\n", "", "self", ".", "resnet", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.GoResNet.forward": [[250, 252], ["elf.GoResNet.resnet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "self", ".", "resnet", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.GoResNet.layer_output_generator": [[253, 258], ["block", "block.detach"], "methods", ["None"], ["", "def", "layer_output_generator", "(", "self", ",", "s", ")", ":", "\n", "        ", "x", "=", "s", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "yield", "x", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.__init__": [[263, 308], ["elf.Model.__init__", "elf.Model_PolicyValue._conv_layer", "elf.Model_PolicyValue._conv_layer", "elf.Model_PolicyValue._conv_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.Tanh", "torch.Tanh", "torch.Tanh", "elf.GoResNet", "elf.Model_PolicyValue._check_and_init_distributed_model", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "elf.Model_PolicyValue.init_conv.cuda", "elf.Model_PolicyValue.resnet.cuda", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.__init__", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue._conv_layer", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue._conv_layer", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue._conv_layer", "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue._check_and_init_distributed_model"], ["    ", "def", "__init__", "(", "self", ",", "option_map", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "option_map", ",", "params", ")", "\n", "\n", "self", ".", "options", "=", "option_map", "\n", "self", ".", "board_size", "=", "params", "[", "\"board_size\"", "]", "\n", "self", ".", "num_planes", "=", "params", "[", "\"num_planes\"", "]", "\n", "# print(\"#future_action: \" + str(self.num_future_actions))", "\n", "# print(\"#num_planes: \" + str(self.num_planes))", "\n", "\n", "# Network structure of AlphaGo Zero", "\n", "# https://www.nature.com/nature/journal/v550/n7676/full/nature24270.html", "\n", "\n", "# Simple method. multiple conv layers.", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "if", "self", ".", "options", ".", "leaky_relu", "else", "nn", ".", "ReLU", "(", ")", "\n", "last_planes", "=", "self", ".", "num_planes", "\n", "\n", "self", ".", "init_conv", "=", "self", ".", "_conv_layer", "(", "last_planes", ")", "\n", "\n", "self", ".", "pi_final_conv", "=", "self", ".", "_conv_layer", "(", "self", ".", "options", ".", "dim", ",", "2", ",", "1", ")", "\n", "self", ".", "value_final_conv", "=", "self", ".", "_conv_layer", "(", "self", ".", "options", ".", "dim", ",", "1", ",", "1", ")", "\n", "\n", "d", "=", "self", ".", "board_size", "**", "2", "\n", "\n", "# Plus 1 for pass.", "\n", "self", ".", "pi_linear", "=", "nn", ".", "Linear", "(", "d", "*", "2", ",", "d", "+", "1", ")", "\n", "self", ".", "value_linear1", "=", "nn", ".", "Linear", "(", "d", ",", "256", ")", "\n", "self", ".", "value_linear2", "=", "nn", ".", "Linear", "(", "256", ",", "1", ")", "\n", "\n", "# Softmax as the final layer", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "resnet", "=", "GoResNet", "(", "option_map", ",", "params", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "self", ".", "options", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "self", ".", "init_conv", ".", "cuda", "(", "self", ".", "options", ".", "gpu", ")", "\n", "self", ".", "resnet", ".", "cuda", "(", "self", ".", "options", ".", "gpu", ")", "\n", "\n", "", "if", "self", ".", "options", ".", "use_data_parallel", ":", "\n", "            ", "if", "self", ".", "options", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "self", ".", "init_conv", "=", "nn", ".", "DataParallel", "(", "\n", "self", ".", "init_conv", ",", "output_device", "=", "self", ".", "options", ".", "gpu", ")", "\n", "self", ".", "resnet", "=", "nn", ".", "DataParallel", "(", "\n", "self", ".", "resnet", ",", "output_device", "=", "self", ".", "options", ".", "gpu", ")", "\n", "\n", "", "", "self", ".", "_check_and_init_distributed_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue._check_and_init_distributed_model": [[309, 344], ["torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel", "torch.is_initialized", "torch.is_initialized", "torch.is_initialized", "print", "torch.init_process_group", "torch.init_process_group", "torch.init_process_group", "RuntimeError", "int", "os.environ.get"], "methods", ["None"], ["", "def", "_check_and_init_distributed_model", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "options", ".", "use_data_parallel_distributed", ":", "\n", "            ", "return", "\n", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "            ", "world_size", "=", "self", ".", "options", ".", "dist_world_size", "\n", "url", "=", "self", ".", "options", ".", "dist_url", "\n", "rank", "=", "self", ".", "options", ".", "dist_rank", "\n", "# This is for SLURM's special use case", "\n", "if", "rank", "==", "-", "1", ":", "\n", "                ", "rank", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "\"SLURM_NODEID\"", ")", ")", "\n", "\n", "", "print", "(", "\"=> Distributed training: world size: {}, rank: {}, URL: {}\"", ".", "\n", "format", "(", "world_size", ",", "rank", ",", "url", ")", ")", "\n", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ",", "\n", "init_method", "=", "url", ",", "\n", "rank", "=", "rank", ",", "\n", "world_size", "=", "world_size", ")", "\n", "\n", "# Initialize the distributed data parallel model", "\n", "", "master_gpu", "=", "self", ".", "options", ".", "gpu", "\n", "if", "master_gpu", "is", "None", "or", "master_gpu", "<", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Distributed training requires \"", "\n", "\"to put the model on the GPU, but the GPU is \"", "\n", "\"not given in the argument\"", ")", "\n", "# This is needed for distributed model since the distributed model", "\n", "# initialization will require the model be on the GPU, even though", "\n", "# the later code will put the same model on the GPU again with", "\n", "# self.options.gpu, so this should be ok", "\n", "# self.resnet.cuda(master_gpu)", "\n", "", "self", ".", "init_conv", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "self", ".", "init_conv", ")", "\n", "self", ".", "resnet", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "self", ".", "resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue._conv_layer": [[345, 372], ["layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "layers.append", "layers.append", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["None"], ["", "def", "_conv_layer", "(", "\n", "self", ",", "\n", "input_channel", "=", "None", ",", "\n", "output_channel", "=", "None", ",", "\n", "kernel", "=", "3", ",", "\n", "relu", "=", "True", ")", ":", "\n", "        ", "if", "input_channel", "is", "None", ":", "\n", "            ", "input_channel", "=", "self", ".", "options", ".", "dim", "\n", "", "if", "output_channel", "is", "None", ":", "\n", "            ", "output_channel", "=", "self", ".", "options", ".", "dim", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "nn", ".", "Conv2d", "(", "\n", "input_channel", ",", "\n", "output_channel", ",", "\n", "kernel", ",", "\n", "padding", "=", "(", "kernel", "//", "2", ")", "\n", ")", ")", "\n", "if", "self", ".", "options", ".", "bn", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "nn", ".", "BatchNorm2d", "(", "output_channel", ",", "\n", "momentum", "=", "(", "self", ".", "options", ".", "bn_momentum", "or", "None", ")", ",", "\n", "eps", "=", "self", ".", "options", ".", "bn_eps", ")", ")", "\n", "", "if", "relu", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "relu", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.prepare_cooldown": [[373, 381], ["elf.Model_PolicyValue.modules", "module.__class__.__name__.startswith", "print", "print", "module.reset_running_stats"], "methods", ["None"], ["", "def", "prepare_cooldown", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'BatchNorm'", ")", ":", "\n", "                    ", "module", ".", "reset_running_stats", "(", ")", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "print", "(", "\"The module doesn't have method 'reset_running_stats', \"", "\n", "\"skipping. Please set bn_momentum to 0.1\"", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.forward": [[384, 403], ["elf.Model_PolicyValue.init_conv", "elf.Model_PolicyValue.resnet", "elf.Model_PolicyValue.pi_final_conv", "elf.Model_PolicyValue.pi_linear", "elf.Model_PolicyValue.logsoftmax", "elf.Model_PolicyValue.exp", "elf.Model_PolicyValue.value_final_conv", "elf.Model_PolicyValue.relu", "elf.Model_PolicyValue.value_linear2", "elf.Model_PolicyValue.tanh", "dict", "elf.Model_PolicyValue.exp.view", "elf.Model_PolicyValue.value_linear1", "elf.Model_PolicyValue.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "x", "\n", "\n", "s", "=", "self", ".", "init_conv", "(", "s", ")", "\n", "s", "=", "self", ".", "resnet", "(", "s", ")", "\n", "\n", "d", "=", "self", ".", "board_size", "**", "2", "\n", "\n", "pi", "=", "self", ".", "pi_final_conv", "(", "s", ")", "\n", "pi", "=", "self", ".", "pi_linear", "(", "pi", ".", "view", "(", "-", "1", ",", "d", "*", "2", ")", ")", "\n", "logpi", "=", "self", ".", "logsoftmax", "(", "pi", ")", "\n", "pi", "=", "logpi", ".", "exp", "(", ")", "\n", "\n", "V", "=", "self", ".", "value_final_conv", "(", "s", ")", "\n", "V", "=", "self", ".", "relu", "(", "self", ".", "value_linear1", "(", "V", ".", "view", "(", "-", "1", ",", "d", ")", ")", ")", "\n", "V", "=", "self", ".", "value_linear2", "(", "V", ")", "\n", "V", "=", "self", ".", "tanh", "(", "V", ")", "\n", "\n", "return", "dict", "(", "logpi", "=", "logpi", ",", "pi", "=", "pi", ",", "V", "=", "V", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.forward_to_resnet": [[404, 411], ["elf.Model_PolicyValue.init_conv", "elf.Model_PolicyValue.resnet", "elf.Model_PolicyValue.detach"], "methods", ["None"], ["", "def", "forward_to_resnet", "(", "self", ",", "x", ")", ":", "\n", "        ", "s", "=", "x", "\n", "\n", "s", "=", "self", ".", "init_conv", "(", "s", ")", "\n", "s", "=", "self", ".", "resnet", "(", "s", ")", "\n", "\n", "return", "[", "s", ".", "detach", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model_PolicyValue.resnet_layer_output_generator": [[412, 417], ["elf.Model_PolicyValue.init_conv", "elf.Model_PolicyValue.resnet.layer_output_generator"], "methods", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.GoResNet.layer_output_generator"], ["", "def", "resnet_layer_output_generator", "(", "self", ",", "x", ")", ":", "\n", "# so that we don't store every layer in memory", "\n", "        ", "s", "=", "x", "\n", "s", "=", "self", ".", "init_conv", "(", "s", ")", "\n", "yield", "from", "self", ".", "resnet", ".", "layer_output_generator", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.load_elf_model": [[431, 444], ["elf.Model_PolicyValue", "elf.Model.load", "item.split"], "function", ["home.repos.pwc.inspect_result.andrehe02_go-probe.models.elf.Model.load"], ["def", "load_elf_model", "(", "path", ")", ":", "\n", "    ", "model", "=", "Model_PolicyValue", "(", "DefaultModelOptions", ",", "params", ")", "\n", "_replace_prefix", "=", "[", "\"resnet.module,resnet\"", ",", "\"init_conv.module,init_conv\"", "]", "\n", "replace_prefix", "=", "[", "\n", "item", ".", "split", "(", "\",\"", ")", "\n", "for", "item", "in", "_replace_prefix", "\n", "]", "\n", "model", ".", "load", "(", "\n", "path", ",", "\n", "omit_keys", "=", "[", "]", ",", "\n", "replace_prefix", "=", "replace_prefix", ",", "\n", "check_loaded_options", "=", "False", ")", "\n", "return", "model", "\n", "\n"]]}