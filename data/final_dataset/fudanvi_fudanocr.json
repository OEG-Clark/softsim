{"home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.train.SupportSample.__init__": [[49, 51], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pair", ")", ":", "\n", "        ", "self", ".", "samples", "=", "pair", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.train.SupportSample.__len__": [[51, 53], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.train.SupportSample.__getitem__": [[53, 55], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "samples", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.train.train": [[63, 78], ["model.train", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "print", "writer.add_scalar", "len"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.train"], ["def", "train", "(", "epoch", ",", "iteration", ",", "image", ",", "length", ",", "text_input", ",", "text_gt", ",", "character_level_label", ")", ":", "\n", "    ", "global", "times", "\n", "global", "confusing_dict", "\n", "global", "gallery_combine", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "result", "=", "model", "(", "image", ",", "length", ",", "text_input", ")", "\n", "text_pred", "=", "result", "[", "'pred'", "]", "\n", "# conv_feature = result['conv']", "\n", "loss", "=", "criterion", "(", "text_pred", ",", "text_gt", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "print", "(", "'epoch : {} | iter : {}/{} | loss : {}'", ".", "format", "(", "epoch", ",", "iteration", ",", "len", "(", "train_loader", ")", ",", "loss", ")", ")", "\n", "writer", ".", "add_scalar", "(", "'loss'", ",", "loss", ",", "times", ")", "\n", "times", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.train.test": [[80, 176], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.save", "torch.save", "torch.save", "open", "print", "model.eval", "iter", "len", "range", "print", "open", "open.write", "open.close", "model.state_dict", "iter.next", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "util.converter", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "range", "range", "range", "torch.save", "torch.save", "torch.save", "print", "exit", "text_gt_list.append", "model", "torch.cat", "torch.cat", "torch.cat", "range", "text_pred_list.append", "range", "text_prob_list.append", "util.tensor2str().replace", "util.rectify", "util.tensor2str().replace", "label[].replace", "util.is_correct", "print", "open.write", "model.state_dict", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.max", "torch.max", "torch.max", "[].long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "torch.max", "now_pred[].view", "now_pred.append", "now_pred.append", "len", "util.tensor2str", "util.tensor2str", "torch.zeros", "torch.zeros", "torch.zeros", "torch.softmax", "torch.softmax", "torch.softmax", "len", "[].long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.converter", "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.rectify", "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.is_correct", "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.tensor2str", "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.tensor2str"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'./history/{}/model.pth'", ".", "format", "(", "config", "[", "'exp_name'", "]", ")", ")", "\n", "result_file", "=", "open", "(", "'./history/{}/accuracy_record.txt'", ".", "format", "(", "config", "[", "'exp_name'", "]", ")", ",", "'w+'", ",", "encoding", "=", "'utf-8'", ")", "\n", "print", "(", "\"Start Eval!\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "dataloader", "=", "iter", "(", "test_loader", ")", "\n", "test_loader_len", "=", "len", "(", "test_loader", ")", "\n", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "if", "config", "[", "'mode'", "]", "==", "'stroke'", ":", "\n", "        ", "max_length", "=", "30", "\n", "", "elif", "config", "[", "'mode'", "]", "==", "'character'", ":", "\n", "        ", "max_length", "=", "2", "\n", "", "clean_cache", "=", "False", "\n", "\n", "for", "iteration", "in", "range", "(", "test_loader_len", ")", ":", "\n", "        ", "data", "=", "dataloader", ".", "next", "(", ")", "\n", "image", ",", "label", "=", "data", "\n", "image", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "image", ",", "size", "=", "(", "config", "[", "'image_size'", "]", ",", "config", "[", "'image_size'", "]", ")", ")", "\n", "length", ",", "text_input", ",", "text_gt", ",", "character_level_label", "=", "converter", "(", "mode", ",", "label", ")", "\n", "\n", "text_gt_list", "=", "[", "]", "\n", "start", "=", "0", "\n", "for", "i", "in", "length", ":", "\n", "            ", "text_gt_list", ".", "append", "(", "text_gt", "[", "start", ":", "start", "+", "i", "]", ")", "\n", "start", "+=", "i", "\n", "\n", "", "batch", "=", "image", ".", "shape", "[", "0", "]", "\n", "pred", "=", "torch", ".", "zeros", "(", "batch", ",", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "image_features", "=", "None", "\n", "prob", "=", "torch", ".", "zeros", "(", "batch", ",", "max_length", ")", ".", "float", "(", ")", "\n", "for", "i", "in", "range", "(", "max_length", ")", ":", "\n", "            ", "length", "=", "torch", ".", "zeros", "(", "batch", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "+", "i", "+", "1", "\n", "result", "=", "model", "(", "image", ",", "length", ",", "pred", ",", "conv_feature", "=", "image_features", ",", "test", "=", "True", ")", "\n", "prediction", "=", "result", "[", "'pred'", "]", "\n", "now_pred", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "prediction", ",", "2", ")", ",", "2", ")", "[", "1", "]", "\n", "prob", "[", ":", ",", "i", "]", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "prediction", ",", "2", ")", ",", "2", ")", "[", "0", "]", "[", ":", ",", "-", "1", "]", "\n", "pred", "=", "torch", ".", "cat", "(", "(", "pred", ",", "now_pred", "[", ":", ",", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", ",", "1", ")", "\n", "image_features", "=", "result", "[", "'conv'", "]", "\n", "\n", "", "text_pred_list", "=", "[", "]", "\n", "text_prob_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "now_pred", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_length", ")", ":", "\n", "                ", "if", "pred", "[", "i", "]", "[", "j", "]", "!=", "len", "(", "alphabet", ")", "-", "1", ":", "\n", "                    ", "now_pred", ".", "append", "(", "pred", "[", "i", "]", "[", "j", "]", ")", "\n", "", "else", ":", "\n", "                    ", "now_pred", ".", "append", "(", "pred", "[", "i", "]", "[", "j", "]", ")", "\n", "break", "\n", "", "", "text_pred_list", ".", "append", "(", "torch", ".", "Tensor", "(", "now_pred", ")", "[", "1", ":", "]", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "overall_prob", "=", "1.0", "\n", "for", "j", "in", "range", "(", "len", "(", "now_pred", ")", "-", "1", ")", ":", "\n", "                ", "overall_prob", "*=", "prob", "[", "i", "]", "[", "j", "]", "\n", "", "text_prob_list", ".", "append", "(", "overall_prob", ")", "\n", "\n", "", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "state", "=", "False", "\n", "pred_origin", "=", "tensor2str", "(", "mode", ",", "text_pred_list", "[", "i", "]", ")", ".", "replace", "(", "'$'", ",", "''", ")", "\n", "pred", "=", "rectify", "(", "mode", ",", "pred_origin", ")", "\n", "gt", "=", "tensor2str", "(", "mode", ",", "text_gt_list", "[", "i", "]", ")", ".", "replace", "(", "'$'", ",", "''", ")", "\n", "word_label", "=", "label", "[", "i", "]", ".", "replace", "(", "'$'", ",", "''", ")", "\n", "if", "iteration", "==", "0", "and", "i", "==", "0", ":", "\n", "                ", "clean_cache", "=", "True", "\n", "", "else", ":", "\n", "                ", "clean_cache", "=", "False", "\n", "\n", "", "whether_is_correct", "=", "is_correct", "(", "epoch", ",", "model", ",", "mode", ",", "image_features", "[", "i", "]", ",", "pred", ",", "gt", ",", "word_label", ",", "clean_cache", ")", "\n", "if", "whether_is_correct", "[", "'correct'", "]", ":", "\n", "                ", "correct", "+=", "1", "\n", "state", "=", "True", "\n", "", "start", "+=", "i", "\n", "total", "+=", "1", "\n", "print", "(", "'{} | {} | {} | {} | {} | {} | {}'", ".", "format", "(", "total", ",", "pred", ",", "gt", ",", "state", ",", "text_prob_list", "[", "i", "]", ",", "correct", "/", "total", ",", "\n", "pred_origin", ")", ")", "\n", "result_file", ".", "write", "(", "\n", "'{} | {} | {} | {} | {} | {}\\n'", ".", "format", "(", "total", ",", "pred", ",", "gt", ",", "state", ",", "text_prob_list", "[", "i", "]", ",", "pred_origin", ")", ")", "\n", "\n", "", "", "print", "(", "\"ACC : {}\"", ".", "format", "(", "correct", "/", "total", ")", ")", "\n", "global", "best_acc", "\n", "if", "correct", "/", "total", ">", "best_acc", ":", "\n", "        ", "best_acc", "=", "correct", "/", "total", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'./history/{}/best_model.pth'", ".", "format", "(", "config", "[", "'exp_name'", "]", ")", ")", "\n", "\n", "", "f", "=", "open", "(", "'./history/{}/record.txt'", ".", "format", "(", "config", "[", "'exp_name'", "]", ")", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "\n", "f", ".", "write", "(", "\"Epoch : {} | ACC : {}\\n\"", ".", "format", "(", "epoch", ",", "correct", "/", "total", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "if", "config", "[", "'test_only'", "]", ":", "\n", "        ", "print", "(", "'Finish testing'", ")", "\n", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.find_most_likely": [[44, 48], ["lis.index", "Levenshtein.distance", "min"], "function", ["None"], ["", "", "def", "find_most_likely", "(", "key", ",", "value", ")", ":", "\n", "    ", "lis", "=", "[", "Levenshtein", ".", "distance", "(", "key", ",", "i", ")", "for", "i", "in", "value", "]", "\n", "i", "=", "lis", ".", "index", "(", "min", "(", "lis", ")", ")", "\n", "return", "value", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.get_dataloader": [[50, 64], ["root.endswith", "open", "pickle.load", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.lmdbReader.lmdbDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data.lmdbReader.resizeNormalize"], "function", ["None"], ["", "def", "get_dataloader", "(", "root", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "if", "root", ".", "endswith", "(", "'pkl'", ")", ":", "\n", "        ", "f", "=", "open", "(", "root", ",", "'rb'", ")", "\n", "dataset", "=", "pkl", ".", "load", "(", "f", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "config", "[", "'batch'", "]", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "8", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "lmdbDataset", "(", "root", ",", "resizeNormalize", "(", "(", "config", "[", "'image_size'", "]", ",", "config", "[", "'image_size'", "]", ")", ")", ",", "\n", "alphabet", "=", "alphabet_character", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "config", "[", "'batch'", "]", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "8", ",", "\n", ")", "\n", "", "return", "dataloader", ",", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.get_data_package": [[66, 88], ["config[].split", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "config[].split", "torch.utils.data.ConcatDataset", "torch.utils.data.ConcatDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "util.get_dataloader", "train_dataset.append", "util.get_dataloader", "test_dataset.append"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.get_dataloader", "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.get_dataloader"], ["", "def", "get_data_package", "(", ")", ":", "\n", "    ", "train_dataset", "=", "[", "]", "\n", "for", "dataset_root", "in", "config", "[", "'train_dataset'", "]", ".", "split", "(", "','", ")", ":", "\n", "        ", "_", ",", "dataset", "=", "get_dataloader", "(", "dataset_root", ",", "shuffle", "=", "True", ")", "\n", "train_dataset", ".", "append", "(", "dataset", ")", "\n", "", "train_dataset_total", "=", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "train_dataset", ")", "\n", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset_total", ",", "batch_size", "=", "config", "[", "'batch'", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "\n", ")", "\n", "\n", "test_dataset", "=", "[", "]", "\n", "for", "dataset_root", "in", "config", "[", "'test_dataset'", "]", ".", "split", "(", "','", ")", ":", "\n", "        ", "_", ",", "dataset", "=", "get_dataloader", "(", "dataset_root", ",", "shuffle", "=", "True", ")", "\n", "test_dataset", ".", "append", "(", "dataset", ")", "\n", "", "test_dataset_total", "=", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "test_dataset", ")", "\n", "\n", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset_total", ",", "batch_size", "=", "config", "[", "'batch'", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "\n", ")", "\n", "\n", "return", "train_dataloader", ",", "test_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.converter": [[90, 117], ["len", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "max", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "range", "sum", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "range", "range", "range", "len", "torch.Tensor().long", "torch.Tensor().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "len", "len", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len"], "function", ["None"], ["", "def", "converter", "(", "mode", ",", "label", ")", ":", "\n", "    ", "character_level_label", "=", "label", "\n", "if", "mode", "==", "'character'", ":", "\n", "        ", "label", "=", "[", "i", "for", "i", "in", "label", "]", "\n", "alp2num", "=", "alp2num_character", "\n", "", "elif", "mode", "==", "'stroke'", ":", "\n", "        ", "label", "=", "[", "character_to_strokelist", "[", "i", "[", "0", "]", "]", "+", "'$'", "for", "i", "in", "label", "]", "\n", "alp2num", "=", "alp2num_stroke", "\n", "\n", "", "batch", "=", "len", "(", "label", ")", "\n", "length", "=", "torch", ".", "Tensor", "(", "[", "len", "(", "i", ")", "for", "i", "in", "label", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "max_length", "=", "max", "(", "length", ")", "\n", "\n", "text_input", "=", "torch", ".", "zeros", "(", "batch", ",", "max_length", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "label", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "            ", "text_input", "[", "i", "]", "[", "j", "+", "1", "]", "=", "alp2num", "[", "label", "[", "i", "]", "[", "j", "]", "]", "\n", "\n", "", "", "sum_length", "=", "sum", "(", "length", ")", "\n", "text_all", "=", "torch", ".", "zeros", "(", "sum_length", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "label", "[", "i", "]", ")", ")", ":", "\n", "            ", "text_all", "[", "start", "+", "j", "]", "=", "alp2num", "[", "label", "[", "i", "]", "[", "j", "]", "]", "\n", "", "start", "+=", "len", "(", "label", "[", "i", "]", ")", "\n", "\n", "", "return", "length", ",", "text_input", ",", "text_all", ",", "character_level_label", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.get_alphabet": [[119, 124], ["None"], "function", ["None"], ["", "def", "get_alphabet", "(", "mode", ")", ":", "\n", "    ", "if", "mode", "==", "'character'", ":", "\n", "        ", "return", "alphabet_character", "\n", "", "elif", "mode", "==", "'stroke'", ":", "\n", "        ", "return", "alphabet_stroke", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.tensor2str": [[126, 132], ["util.get_alphabet"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.get_alphabet"], ["", "", "def", "tensor2str", "(", "mode", ",", "tensor", ")", ":", "\n", "    ", "alphabet", "=", "get_alphabet", "(", "mode", ")", "\n", "string", "=", "\"\"", "\n", "for", "i", "in", "tensor", ":", "\n", "        ", "string", "+=", "alphabet", "[", "i", "]", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.must_in_screen": [[134, 142], ["os.popen().readlines", "len", "print", "exit", "os.popen", "string.strip"], "function", ["None"], ["", "def", "must_in_screen", "(", ")", ":", "\n", "    ", "text", "=", "os", ".", "popen", "(", "'echo $STY'", ")", ".", "readlines", "(", ")", "\n", "string", "=", "''", "\n", "for", "line", "in", "text", ":", "\n", "        ", "string", "+=", "line", "\n", "", "if", "len", "(", "string", ".", "strip", "(", ")", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"Code must be executed in **SCREEN**!\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.saver": [[144, 174], ["os.mkdir", "print", "time.asctime", "open", "open.close", "os.path.join", "shutil.copyfile", "os.path.join", "shutil.copyfile", "os.path.join", "shutil.copyfile", "os.path.join", "shutil.copyfile", "shutil.rmtree", "time.localtime", "os.path.join", "time.time", "str"], "function", ["None"], ["", "", "def", "saver", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "'./history/{}'", ".", "format", "(", "config", "[", "'exp_name'", "]", ")", ")", "\n", "", "except", ":", "\n", "        ", "pass", "\n", "", "os", ".", "mkdir", "(", "'./history/{}'", ".", "format", "(", "config", "[", "'exp_name'", "]", ")", ")", "\n", "\n", "import", "time", "\n", "\n", "print", "(", "'**** Experiment Name: {} ****'", ".", "format", "(", "config", "[", "'exp_name'", "]", ")", ")", "\n", "\n", "localtime", "=", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "'./history'", ",", "config", "[", "'exp_name'", "]", ",", "str", "(", "localtime", ")", ")", ",", "'w+'", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "src", "=", "'./train.py'", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "'./history'", ",", "config", "[", "'exp_name'", "]", ",", "'train.py'", ")", "\n", "copyfile", "(", "src", ",", "dst", ")", "\n", "\n", "src", "=", "'./util.py'", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "'./history'", ",", "config", "[", "'exp_name'", "]", ",", "'util.py'", ")", "\n", "copyfile", "(", "src", ",", "dst", ")", "\n", "\n", "src", "=", "'./config.py'", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "'./history'", ",", "config", "[", "'exp_name'", "]", ",", "'config.py'", ")", "\n", "copyfile", "(", "src", ",", "dst", ")", "\n", "\n", "src", "=", "'./model/transformer.py'", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "'./history'", ",", "config", "[", "'exp_name'", "]", ",", "'transformer.py'", ")", "\n", "copyfile", "(", "src", ",", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.rectify": [[176, 183], ["util.find_most_likely"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.find_most_likely"], ["", "def", "rectify", "(", "mode", ",", "string", ")", ":", "\n", "    ", "if", "mode", "==", "'character'", ":", "\n", "        ", "return", "string", "\n", "", "elif", "mode", "==", "'stroke'", ":", "\n", "        ", "if", "string", "not", "in", "strokes", ":", "\n", "            ", "string", "=", "find_most_likely", "(", "string", ",", "strokes", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.get_support_sample_feature_stroke": [[188, 210], ["model.eval", "open", "pickle.load", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.no_grad", "torch.no_grad", "iter", "len", "range", "torch.cat", "torch.cat", "iter.next", "torch.nn.functional.interpolate.cuda", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "gallery.append", "model"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval"], ["def", "get_support_sample_feature_stroke", "(", "model", ",", "root", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "f", "=", "open", "(", "root", ",", "'rb'", ")", "\n", "confusing_dict", ",", "support_dataset", "=", "pkl", ".", "load", "(", "f", ")", "\n", "batch", "=", "64", "\n", "support_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "support_dataset", ",", "batch_size", "=", "batch", ",", "num_workers", "=", "8", ",", "shuffle", "=", "False", ",", "\n", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dataloader", "=", "iter", "(", "support_dataloader", ")", "\n", "train_loader_len", "=", "len", "(", "support_dataloader", ")", "\n", "gallery", "=", "[", "]", "\n", "for", "iteration", "in", "range", "(", "train_loader_len", ")", ":", "\n", "            ", "data", "=", "dataloader", ".", "next", "(", ")", "\n", "image", ",", "label", "=", "data", "\n", "image", "=", "image", ".", "cuda", "(", ")", "\n", "image", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "image", ",", "size", "=", "(", "config", "[", "'image_size'", "]", ",", "config", "[", "'image_size'", "]", ")", ")", "\n", "conv_features", "=", "model", "(", "image", ",", "None", ",", "None", ")", "[", "'conv'", "]", "\n", "gallery", ".", "append", "(", "conv_features", ")", "\n", "\n", "", "gallery_combine", "=", "torch", ".", "cat", "(", "[", "i", "for", "i", "in", "gallery", "]", ",", "0", ")", "\n", "", "return", "confusing_dict", ",", "gallery_combine", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.is_correct": [[212, 275], ["torch.cuda.empty_cache", "torch.cuda.empty_cache", "len", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.mean", "torch.mean", "torch.mean.argmin", "print", "util.get_support_sample_feature_stroke", "util.get_support_sample_feature_stroke", "confusing_feature_stroke.append", "confusing_feature_stroke.append", "print", "torch.cat", "torch.cat", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "mse_loss", "mse_loss"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.get_support_sample_feature_stroke", "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.get_support_sample_feature_stroke"], ["", "def", "is_correct", "(", "epoch", ",", "model", ",", "mode", ",", "probe_feature", ",", "pred", ",", "gt", ",", "word_label", ",", "clean_cache", ")", ":", "\n", "    ", "global", "confusing_feature_stroke", "\n", "if", "clean_cache", ":", "\n", "        ", "confusing_feature_stroke", "=", "None", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "if", "mode", "==", "'character'", ":", "\n", "        ", "if", "pred", "==", "word_label", ":", "\n", "            ", "return", "{", "\n", "'correct'", ":", "True", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "\n", "'correct'", ":", "False", "\n", "}", "\n", "", "", "elif", "mode", "==", "'stroke'", ":", "\n", "        ", "if", "pred", "!=", "gt", ":", "\n", "            ", "return", "{", "\n", "'correct'", ":", "False", "\n", "}", "\n", "", "if", "len", "(", "confusing_stroke_dic", "[", "pred", "]", ")", "==", "1", ":", "\n", "            ", "return", "{", "\n", "'correct'", ":", "True", "\n", "}", "\n", "", "else", ":", "\n", "            ", "if", "confusing_feature_stroke", "is", "None", ":", "\n", "                ", "confusing_dict1", ",", "gallery_combine1", "=", "get_support_sample_feature_stroke", "(", "model", ",", "\n", "'./data/print_font_template/simsun.pkl'", ")", "\n", "confusing_dict2", ",", "gallery_combine2", "=", "get_support_sample_feature_stroke", "(", "model", ",", "\n", "'./data/print_font_template/simfang.pkl'", ")", "\n", "confusing_feature_stroke", "=", "[", "]", "\n", "confusing_feature_stroke", ".", "append", "(", "(", "confusing_dict1", ",", "gallery_combine1", ")", ")", "\n", "confusing_feature_stroke", ".", "append", "(", "(", "confusing_dict2", ",", "gallery_combine2", ")", ")", "\n", "", "else", ":", "\n", "                ", "confusing_dict1", ",", "gallery_combine1", "=", "confusing_feature_stroke", "[", "0", "]", "\n", "confusing_dict2", ",", "gallery_combine2", "=", "confusing_feature_stroke", "[", "1", "]", "\n", "\n", "", "if", "pred", "not", "in", "confusing_dict1", ":", "\n", "                ", "print", "(", "'error'", ")", "\n", "return", "{", "\n", "'correct'", ":", "False", "\n", "}", "\n", "\n", "", "confusing_list", "=", "confusing_dict1", "[", "pred", "]", "\n", "gallery_feature1", "=", "gallery_combine1", "[", "torch", ".", "Tensor", "(", "confusing_list", ")", ".", "long", "(", ")", "]", "\n", "gallery_feature2", "=", "gallery_combine2", "[", "torch", ".", "Tensor", "(", "confusing_list", ")", ".", "long", "(", ")", "]", "\n", "\n", "scores1", "=", "torch", ".", "Tensor", "(", "[", "mse_loss", "(", "probe_feature", ",", "i", ")", "for", "i", "in", "gallery_feature1", "]", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "scores2", "=", "torch", ".", "Tensor", "(", "[", "mse_loss", "(", "probe_feature", ",", "i", ")", "for", "i", "in", "gallery_feature2", "]", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "scores", "=", "torch", ".", "mean", "(", "torch", ".", "cat", "(", "[", "scores1", ",", "scores2", "]", ",", "1", ")", ",", "1", ")", "\n", "\n", "min_index", "=", "scores", ".", "argmin", "(", ")", "\n", "confusing_character", "=", "confusing_character_340", "[", "confusing_list", "[", "min_index", "]", "]", "\n", "print", "(", "'min_index'", ",", "min_index", ",", "confusing_character", ",", "word_label", ")", "\n", "\n", "if", "confusing_character", "==", "word_label", ":", "\n", "                ", "return", "{", "\n", "'correct'", ":", "True", "\n", "}", "\n", "", "else", ":", "\n", "                ", "return", "{", "\n", "'correct'", ":", "False", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.stroke-level-decomposition.util.to_gray_image_zero_one": [[278, 285], ["None"], "function", ["None"], ["", "", "", "", "def", "to_gray_image_zero_one", "(", "tensor", ")", ":", "\n", "    ", "R", "=", "tensor", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "G", "=", "tensor", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "B", "=", "tensor", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", "\n", "tensor", "=", "0.299", "*", "R", "+", "0.587", "*", "G", "+", "0.114", "*", "B", "\n", "tensor", "=", "(", "tensor", "/", "2", ")", "+", "0.5", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.Bottleneck.__init__": [[21, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "input_dim", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "input_dim", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "input_dim", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.Bottleneck.forward": [[30, 45], ["transformer.Bottleneck.conv1", "transformer.Bottleneck.bn1", "transformer.Bottleneck.relu", "transformer.Bottleneck.conv2", "transformer.Bottleneck.bn2", "transformer.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "# out = self.se(out)", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.BasicBlock.__init__": [[49, 57], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "downsample", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.BasicBlock.forward": [[58, 75], ["transformer.BasicBlock.conv1", "transformer.BasicBlock.bn1", "transformer.BasicBlock.relu", "transformer.BasicBlock.conv2", "transformer.BasicBlock.bn2", "transformer.BasicBlock.relu", "transformer.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "!=", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.ResNet.__init__": [[79, 114], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "transformer.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "transformer.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "transformer.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "transformer.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_in", ",", "block", ",", "layers", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_in", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer1_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "256", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer1_conv", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer1_bn", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "layer1_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer2_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "256", ",", "layers", "[", "1", "]", ")", "\n", "self", ".", "layer2_conv", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer2_bn", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "layer2_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer3_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "512", ",", "layers", "[", "2", "]", ")", "\n", "self", ".", "layer3_conv", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer3_bn", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "layer3_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer4_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "512", ",", "layers", "[", "3", "]", ")", "\n", "self", ".", "layer4_conv2", "=", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer4_conv2_bn", "=", "nn", ".", "BatchNorm2d", "(", "1024", ")", "\n", "self", ".", "layer4_conv2_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.ResNet._make_layer": [[115, 129], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ")", ":", "\n", "\n", "        ", "if", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ",", ")", "\n", "", "else", ":", "\n", "            ", "downsample", "=", "None", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "downsample", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "planes", ",", "planes", ",", "downsample", "=", "None", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.ResNet.forward": [[130, 165], ["transformer.ResNet.conv1", "transformer.ResNet.bn1", "transformer.ResNet.relu1", "transformer.ResNet.pool", "transformer.ResNet.conv2", "transformer.ResNet.bn2", "transformer.ResNet.relu2", "transformer.ResNet.layer1", "transformer.ResNet.layer1_conv", "transformer.ResNet.layer1_bn", "transformer.ResNet.layer1_relu", "transformer.ResNet.layer2", "transformer.ResNet.layer2_conv", "transformer.ResNet.layer2_bn", "transformer.ResNet.layer2_relu", "transformer.ResNet.layer3", "transformer.ResNet.layer3_conv", "transformer.ResNet.layer3_bn", "transformer.ResNet.layer3_relu", "transformer.ResNet.layer4", "transformer.ResNet.layer4_conv2", "transformer.ResNet.layer4_conv2_bn", "transformer.ResNet.layer4_conv2_relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "\n", "# x = self.layer1_pool(x)", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1_bn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1_relu", "(", "x", ")", "\n", "\n", "# x = self.layer2_pool(x)", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2_bn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2_relu", "(", "x", ")", "\n", "\n", "# x = self.layer3_pool(x)", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3_bn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3_relu", "(", "x", ")", "\n", "\n", "# x = self.layer4_pool(x)", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4_conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4_conv2_bn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4_conv2_relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.PositionalEncoding.__init__": [[172, 184], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze.unsqueeze.unsqueeze", "transformer.PositionalEncoding.register_buffer", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "dropout", ",", "max_len", "=", "7000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.PositionalEncoding.forward": [[185, 189], ["transformer.PositionalEncoding.dropout", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "Variable", "(", "self", ".", "pe", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", ",", "\n", "requires_grad", "=", "False", ")", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.MultiHeadedAttention.__init__": [[192, 202], ["torch.Module.__init__", "transformer.clones", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ",", "compress_attention", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "compress_attention", "=", "compress_attention", "\n", "self", ".", "compress_attention_linear", "=", "nn", ".", "Linear", "(", "h", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.MultiHeadedAttention.forward": [[203, 219], ["query.size", "transformer.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.attention"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "align", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "query", ",", "key", ",", "value", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "]", "\n", "\n", "x", ",", "attention_map", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "align", "=", "align", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", ",", "attention_map", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.LayerNorm.__init__": [[245, 250], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "a", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "self", ".", "b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.LayerNorm.forward": [[251, 255], ["x.mean", "x.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "self", ".", "a", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.PositionwiseFeedForward.__init__": [[258, 263], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_ff", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ff", ")", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_ff", ",", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.PositionwiseFeedForward.forward": [[264, 266], ["transformer.PositionwiseFeedForward.w_2", "transformer.PositionwiseFeedForward.dropout", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "transformer.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "w_2", "(", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.Generator.__init__": [[269, 273], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "vocab", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "d_model", ",", "vocab", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.Generator.forward": [[274, 276], ["transformer.Generator.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "proj", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.Embeddings.__init__": [[279, 283], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "vocab", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lut", "=", "nn", ".", "Embedding", "(", "vocab", ",", "d_model", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.Embeddings.forward": [[284, 287], ["transformer.Embeddings.lut", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "embed", "=", "self", ".", "lut", "(", "x", ")", "*", "math", ".", "sqrt", "(", "self", ".", "d_model", ")", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.Decoder.__init__": [[291, 302], ["torch.Module.__init__", "transformer.MultiHeadedAttention", "transformer.LayerNorm", "transformer.MultiHeadedAttention", "transformer.LayerNorm", "transformer.PositionwiseFeedForward", "transformer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mask_multihead", "=", "MultiHeadedAttention", "(", "h", "=", "4", ",", "d_model", "=", "1024", ",", "dropout", "=", "0.1", ")", "\n", "self", ".", "mul_layernorm1", "=", "LayerNorm", "(", "features", "=", "1024", ")", "\n", "\n", "self", ".", "multihead", "=", "MultiHeadedAttention", "(", "h", "=", "4", ",", "d_model", "=", "1024", ",", "dropout", "=", "0.1", ",", "compress_attention", "=", "True", ")", "\n", "self", ".", "mul_layernorm2", "=", "LayerNorm", "(", "features", "=", "1024", ")", "\n", "\n", "self", ".", "pff", "=", "PositionwiseFeedForward", "(", "1024", ",", "2048", ")", "\n", "self", ".", "mul_layernorm3", "=", "LayerNorm", "(", "features", "=", "1024", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.Decoder.forward": [[303, 318], ["subsequent_mask().cuda", "transformer.Decoder.mul_layernorm1", "conv_feature.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "transformer.Decoder.multihead", "transformer.Decoder.mul_layernorm2", "transformer.Decoder.mul_layernorm3", "transformer.subsequent_mask", "conv_feature.view().permute().contiguous.view().permute().contiguous.view().permute", "transformer.Decoder.pff", "transformer.Decoder.mask_multihead", "conv_feature.view().permute().contiguous.view().permute().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.subsequent_mask"], ["", "def", "forward", "(", "self", ",", "text", ",", "conv_feature", ")", ":", "\n", "        ", "text_max_length", "=", "text", ".", "shape", "[", "1", "]", "\n", "mask", "=", "subsequent_mask", "(", "text_max_length", ")", ".", "cuda", "(", ")", "\n", "\n", "result", "=", "text", "\n", "result", "=", "self", ".", "mul_layernorm1", "(", "result", "+", "self", ".", "mask_multihead", "(", "result", ",", "result", ",", "result", ",", "mask", "=", "mask", ")", "[", "0", "]", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "conv_feature", ".", "shape", "\n", "conv_feature", "=", "conv_feature", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "word_image_align", ",", "attention_map", "=", "self", ".", "multihead", "(", "result", ",", "conv_feature", ",", "conv_feature", ",", "mask", "=", "None", ")", "\n", "result", "=", "self", ".", "mul_layernorm2", "(", "result", "+", "word_image_align", ")", "\n", "\n", "result", "=", "self", ".", "mul_layernorm3", "(", "result", "+", "self", ".", "pff", "(", "result", ")", ")", "\n", "\n", "return", "result", ",", "attention_map", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.Transformer.__init__": [[322, 338], ["torch.Module.__init__", "len", "transformer.Embeddings", "transformer.PositionalEncoding", "ResNet().cuda", "transformer.Decoder", "transformer.Generator", "transformer.Transformer.parameters", "transformer.ResNet", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mode", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "word_n_class", "=", "len", "(", "alphabet", ")", "\n", "self", ".", "embedding_word", "=", "Embeddings", "(", "512", ",", "self", ".", "word_n_class", ")", "\n", "self", ".", "pe", "=", "PositionalEncoding", "(", "d_model", "=", "512", ",", "dropout", "=", "0.1", ",", "max_len", "=", "7000", ")", "\n", "\n", "self", ".", "encoder", "=", "ResNet", "(", "num_in", "=", "3", ",", "block", "=", "BasicBlock", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", ")", "\n", "self", ".", "generator_word", "=", "Generator", "(", "1024", ",", "self", ".", "word_n_class", ")", "\n", "self", ".", "attribute", "=", "None", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.Transformer.forward": [[339, 377], ["transformer.Transformer.embedding_word", "transformer.Transformer.pe().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transformer.Transformer.decoder", "transformer.Transformer.generator_word", "transformer.Transformer.encoder", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "enumerate", "transformer.Transformer.pe", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "image", ",", "text_length", ",", "text_input", ",", "conv_feature", "=", "None", ",", "test", "=", "False", ")", ":", "\n", "\n", "        ", "if", "conv_feature", "is", "None", ":", "\n", "            ", "conv_feature", "=", "self", ".", "encoder", "(", "image", ")", "\n", "\n", "", "if", "text_length", "is", "None", ":", "\n", "            ", "return", "{", "\n", "'conv'", ":", "conv_feature", ",", "\n", "}", "\n", "\n", "", "text_embedding", "=", "self", ".", "embedding_word", "(", "text_input", ")", "\n", "postion_embedding", "=", "self", ".", "pe", "(", "torch", ".", "zeros", "(", "text_embedding", ".", "shape", ")", ".", "cuda", "(", ")", ")", ".", "cuda", "(", ")", "\n", "text_input_with_pe", "=", "torch", ".", "cat", "(", "[", "text_embedding", ",", "postion_embedding", "]", ",", "2", ")", "\n", "batch", ",", "seq_len", ",", "_", "=", "text_input_with_pe", ".", "shape", "\n", "text_input_with_pe", ",", "attention_map", "=", "self", ".", "decoder", "(", "text_input_with_pe", ",", "conv_feature", ")", "\n", "word_decoder_result", "=", "self", ".", "generator_word", "(", "text_input_with_pe", ")", "\n", "\n", "if", "test", ":", "\n", "            ", "return", "{", "\n", "'pred'", ":", "word_decoder_result", ",", "\n", "'map'", ":", "attention_map", ",", "\n", "'conv'", ":", "conv_feature", ",", "\n", "}", "\n", "\n", "", "else", ":", "\n", "            ", "total_length", "=", "torch", ".", "sum", "(", "text_length", ")", ".", "data", "\n", "probs_res", "=", "torch", ".", "zeros", "(", "total_length", ",", "self", ".", "word_n_class", ")", ".", "type_as", "(", "word_decoder_result", ".", "data", ")", "\n", "\n", "start", "=", "0", "\n", "for", "index", ",", "length", "in", "enumerate", "(", "text_length", ")", ":", "\n", "                ", "length", "=", "length", ".", "data", "\n", "probs_res", "[", "start", ":", "start", "+", "length", ",", ":", "]", "=", "word_decoder_result", "[", "index", ",", "0", ":", "0", "+", "length", ",", ":", "]", "\n", "start", "=", "start", "+", "length", "\n", "\n", "", "return", "{", "\n", "'pred'", ":", "probs_res", ",", "\n", "'map'", ":", "attention_map", ",", "\n", "'conv'", ":", "conv_feature", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.clones": [[167, 169], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "", "def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.subsequent_mask": [[221, 225], ["numpy.triu().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.triu", "numpy.ones"], "function", ["None"], ["", "", "def", "subsequent_mask", "(", "size", ")", ":", "\n", "    ", "attn_shape", "=", "(", "1", ",", "size", ",", "size", ")", "\n", "subsequent_mask", "=", "np", ".", "triu", "(", "np", ".", "ones", "(", "attn_shape", ")", ",", "k", "=", "1", ")", ".", "astype", "(", "'uint8'", ")", "\n", "return", "torch", ".", "from_numpy", "(", "subsequent_mask", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.transformer.attention": [[227, 242], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "key.transpose", "float"], "function", ["None"], ["", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ",", "align", "=", "None", ")", ":", "\n", "    ", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.edsr.MeanShift.__init__": [[8, 16], ["torch.Conv2d.__init__", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "edsr.MeanShift.parameters", "float", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rgb_mean", ",", "sign", ")", ":", "\n", "        ", "super", "(", "MeanShift", ",", "self", ")", ".", "__init__", "(", "3", ",", "3", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "weight", ".", "data", "=", "torch", ".", "eye", "(", "3", ")", ".", "view", "(", "3", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bias", ".", "data", "=", "float", "(", "sign", ")", "*", "torch", ".", "Tensor", "(", "rgb_mean", ")", "\n", "\n", "# Freeze the MeanShift layer", "\n", "for", "params", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "params", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.edsr._Residual_Block.__init__": [[19, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "_Residual_Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.edsr._Residual_Block.forward": [[26, 33], ["edsr._Residual_Block.relu", "edsr._Residual_Block.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "edsr._Residual_Block.conv1"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.add", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.add", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.add", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.add"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity_data", "=", "x", "\n", "output", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "output", "=", "self", ".", "conv2", "(", "output", ")", "\n", "output", "*=", "0.1", "\n", "output", "=", "torch", ".", "add", "(", "output", ",", "identity_data", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.edsr.EDSR.__init__": [[36, 71], ["torch.Module.__init__", "edsr.MeanShift", "torch.Conv2d", "torch.Conv2d", "edsr.EDSR.make_layer", "torch.Conv2d", "torch.Conv2d", "range", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "edsr.MeanShift", "edsr.EDSR.modules", "int", "upscale_block.append", "upscale_block.append", "isinstance", "math.log2", "torch.Conv2d", "torch.Conv2d", "torch.PixelShuffle", "torch.PixelShuffle", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ")", ":", "\n", "        ", "super", "(", "EDSR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "rgb_mean", "=", "(", "0.4488", ",", "0.4371", ",", "0.4040", ")", "\n", "self", ".", "sub_mean", "=", "MeanShift", "(", "rgb_mean", ",", "-", "1", ")", "\n", "\n", "self", ".", "conv_input", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "residual", "=", "self", ".", "make_layer", "(", "_Residual_Block", ",", "32", ")", "\n", "\n", "self", ".", "conv_mid", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "upscale_block", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "math", ".", "log2", "(", "scale_factor", ")", ")", ")", ":", "\n", "            ", "upscale_block", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "256", "*", "4", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "upscale_block", ".", "append", "(", "nn", ".", "PixelShuffle", "(", "2", ")", ")", "\n", "", "self", ".", "upscale", "=", "nn", ".", "Sequential", "(", "\n", "*", "upscale_block", "\n", ")", "\n", "\n", "self", ".", "conv_output", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "add_mean", "=", "MeanShift", "(", "rgb_mean", ",", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.edsr.EDSR.make_layer": [[72, 77], ["range", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "", "", "def", "make_layer", "(", "self", ",", "block", ",", "num_of_layer", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_of_layer", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.edsr.EDSR.forward": [[78, 88], ["edsr.EDSR.sub_mean", "edsr.EDSR.conv_input", "edsr.EDSR.conv_mid", "torch.add", "torch.add", "torch.add", "torch.add", "edsr.EDSR.upscale", "edsr.EDSR.conv_output", "edsr.EDSR.add_mean", "edsr.EDSR.residual"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.add", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.add", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.add", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.add"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "sub_mean", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_input", "(", "out", ")", "\n", "residual", "=", "out", "\n", "out", "=", "self", ".", "conv_mid", "(", "self", ".", "residual", "(", "out", ")", ")", "\n", "out", "=", "torch", ".", "add", "(", "out", ",", "residual", ")", "\n", "out", "=", "self", ".", "upscale", "(", "out", ")", "\n", "out", "=", "self", ".", "conv_output", "(", "out", ")", "\n", "out", "=", "self", ".", "add_mean", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.attention_recognition_head.AttentionRecognitionHead.__init__": [[15, 24], ["torch.nn.Module.__init__", "attention_recognition_head.DecoderUnit"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "max_len_labels", ",", "in_planes", "=", "512", ",", "sDim", "=", "512", ",", "attDim", "=", "512", ")", ":", "\n", "    ", "super", "(", "AttentionRecognitionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "# this is the output classes. So it includes the <EOS>.", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "self", ".", "max_len_labels", "=", "max_len_labels", "\n", "\n", "self", ".", "decoder", "=", "DecoderUnit", "(", "sDim", "=", "sDim", ",", "xDim", "=", "in_planes", ",", "yDim", "=", "num_classes", ",", "attDim", "=", "attDim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.attention_recognition_head.AttentionRecognitionHead.forward": [[25, 41], ["x.size", "torch.zeros", "range", "torch.cat", "max", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.cat.append", "torch.zeros().fill_", "_.unsqueeze", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", ",", "targets", ",", "lengths", "=", "x", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# Decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "sDim", ")", "\n", "outputs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "max", "(", "lengths", ")", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "# the last one is used as the <BOS>.", "\n", "", "else", ":", "\n", "        ", "y_prev", "=", "targets", "[", ":", ",", "i", "-", "1", "]", "\n", "", "output", ",", "state", "=", "self", ".", "decoder", "(", "x", ",", "state", ",", "y_prev", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "[", "_", ".", "unsqueeze", "(", "1", ")", "for", "_", "in", "outputs", "]", ",", "1", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.attention_recognition_head.AttentionRecognitionHead.sample": [[43, 65], ["x.size", "torch.zeros", "range", "torch.cat", "torch.cat", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.nn.functional.softmax", "torch.nn.functional.softmax.max", "torch.cat.append", "torch.cat.append", "torch.zeros().fill_", "predicted.unsqueeze", "score.unsqueeze", "torch.zeros"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", ",", "_", ",", "_", "=", "x", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# Decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", ",", "self", ".", "sDim", ")", "\n", "\n", "predicted_ids", ",", "predicted_scores", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "max_len_labels", ")", ":", "\n", "      ", "if", "i", "==", "0", ":", "\n", "        ", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "y_prev", "=", "predicted", "\n", "\n", "", "output", ",", "state", "=", "self", ".", "decoder", "(", "x", ",", "state", ",", "y_prev", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "score", ",", "predicted", "=", "output", ".", "max", "(", "1", ")", "\n", "predicted_ids", ".", "append", "(", "predicted", ".", "unsqueeze", "(", "1", ")", ")", "\n", "predicted_scores", ".", "append", "(", "score", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "predicted_ids", "=", "torch", ".", "cat", "(", "predicted_ids", ",", "1", ")", "\n", "predicted_scores", "=", "torch", ".", "cat", "(", "predicted_scores", ",", "1", ")", "\n", "# return predicted_ids.squeeze(), predicted_scores.squeeze()", "\n", "return", "predicted_ids", ",", "predicted_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.attention_recognition_head.AttentionRecognitionHead.beam_search": [[66, 182], ["x.size", "x.unsqueeze().permute().repeat().permute().contiguous().view", "torch.zeros", "torch.Tensor", "scores.view.fill_", "scores.view.index_fill_", "torch.zeros().fill_", "list", "list", "list", "range", "list", "stored_scores[].view().topk", "sorted_score.clone", "sorted_score.clone.topk", "range", "tensor.repeat", "torch.Tensor().long", "attention_recognition_head.AttentionRecognitionHead.decoder", "torch.nn.functional.log_softmax", "attention_recognition_head.AttentionRecognitionHead.beam_search._inflate"], "methods", ["None"], ["", "def", "beam_search", "(", "self", ",", "x", ",", "beam_width", ",", "eos", ")", ":", "\n", "\n", "    ", "def", "_inflate", "(", "tensor", ",", "times", ",", "dim", ")", ":", "\n", "      ", "repeat_dims", "=", "[", "1", "]", "*", "tensor", ".", "dim", "(", ")", "\n", "repeat_dims", "[", "dim", "]", "=", "times", "\n", "return", "tensor", ".", "repeat", "(", "*", "repeat_dims", ")", "\n", "\n", "# https://github.com/IBM/pytorch-seq2seq/blob/fede87655ddce6c94b38886089e05321dc9802af/seq2seq/models/TopKDecoder.py", "\n", "", "batch_size", ",", "l", ",", "d", "=", "x", ".", "size", "(", ")", "\n", "# inflated_encoder_feats = _inflate(encoder_feats, beam_width, 0) # ABC --> AABBCC -/-> ABCABC", "\n", "inflated_encoder_feats", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "repeat", "(", "(", "beam_width", ",", "1", ",", "1", ",", "1", ")", ")", ".", "permute", "(", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "l", ",", "d", ")", "\n", "\n", "# Initialize the decoder", "\n", "state", "=", "torch", ".", "zeros", "(", "1", ",", "batch_size", "*", "beam_width", ",", "self", ".", "sDim", ")", "\n", "pos_index", "=", "(", "torch", ".", "Tensor", "(", "range", "(", "batch_size", ")", ")", "*", "beam_width", ")", ".", "long", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "# Initialize the scores", "\n", "sequence_scores", "=", "torch", ".", "Tensor", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "sequence_scores", ".", "fill_", "(", "-", "float", "(", "'Inf'", ")", ")", "\n", "sequence_scores", ".", "index_fill_", "(", "0", ",", "torch", ".", "Tensor", "(", "[", "i", "*", "beam_width", "for", "i", "in", "range", "(", "0", ",", "batch_size", ")", "]", ")", ".", "long", "(", ")", ",", "0.0", ")", "\n", "# sequence_scores.fill_(0.0)", "\n", "\n", "# Initialize the input vector", "\n", "y_prev", "=", "torch", ".", "zeros", "(", "(", "batch_size", "*", "beam_width", ")", ")", ".", "fill_", "(", "self", ".", "num_classes", ")", "\n", "# Store decisions for backtracking", "\n", "stored_scores", "=", "list", "(", ")", "\n", "stored_predecessors", "=", "list", "(", ")", "\n", "stored_emitted_symbols", "=", "list", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_len_labels", ")", ":", "\n", "      ", "output", ",", "state", "=", "self", ".", "decoder", "(", "inflated_encoder_feats", ",", "state", ",", "y_prev", ")", "\n", "log_softmax_output", "=", "F", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "\n", "sequence_scores", "=", "_inflate", "(", "sequence_scores", ",", "self", ".", "num_classes", ",", "1", ")", "\n", "sequence_scores", "+=", "log_softmax_output", "\n", "scores", ",", "candidates", "=", "sequence_scores", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "topk", "(", "beam_width", ",", "dim", "=", "1", ")", "\n", "\n", "# Reshape input = (bk, 1) and sequence_scores = (bk, 1)", "\n", "y_prev", "=", "(", "candidates", "%", "self", ".", "num_classes", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "sequence_scores", "=", "scores", ".", "view", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "\n", "# Update fields for next timestep", "\n", "predecessors", "=", "(", "candidates", "/", "self", ".", "num_classes", "+", "pos_index", ".", "expand_as", "(", "candidates", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ",", "1", ")", "\n", "state", "=", "state", ".", "index_select", "(", "1", ",", "predecessors", ".", "squeeze", "(", ")", ")", "\n", "\n", "# Update sequence socres and erase scores for <eos> symbol so that they aren't expanded", "\n", "stored_scores", ".", "append", "(", "sequence_scores", ".", "clone", "(", ")", ")", "\n", "eos_indices", "=", "y_prev", ".", "view", "(", "-", "1", ",", "1", ")", ".", "eq", "(", "eos", ")", "\n", "if", "eos_indices", ".", "nonzero", "(", ")", ".", "dim", "(", ")", ">", "0", ":", "\n", "        ", "sequence_scores", ".", "masked_fill_", "(", "eos_indices", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# Cache results for backtracking", "\n", "", "stored_predecessors", ".", "append", "(", "predecessors", ")", "\n", "stored_emitted_symbols", ".", "append", "(", "y_prev", ")", "\n", "\n", "# Do backtracking to return the optimal values", "\n", "#====== backtrak ======#", "\n", "# Initialize return variables given different types", "\n", "", "p", "=", "list", "(", ")", "\n", "l", "=", "[", "[", "self", ".", "max_len_labels", "]", "*", "beam_width", "for", "_", "in", "range", "(", "batch_size", ")", "]", "# Placeholder for lengths of top-k sequences", "\n", "\n", "# the last step output of the beams are not sorted", "\n", "# thus they are sorted here", "\n", "sorted_score", ",", "sorted_idx", "=", "stored_scores", "[", "-", "1", "]", ".", "view", "(", "batch_size", ",", "beam_width", ")", ".", "topk", "(", "beam_width", ")", "\n", "# initialize the sequence scores with the sorted last step beam scores", "\n", "s", "=", "sorted_score", ".", "clone", "(", ")", "\n", "\n", "batch_eos_found", "=", "[", "0", "]", "*", "batch_size", "# the number of EOS found", "\n", "# in the backward loop below for each batch", "\n", "t", "=", "self", ".", "max_len_labels", "-", "1", "\n", "# initialize the back pointer with the sorted order of the last step beams.", "\n", "# add pos_index for indexing variable with b*k as the first dimension.", "\n", "t_predecessors", "=", "(", "sorted_idx", "+", "pos_index", ".", "expand_as", "(", "sorted_idx", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "while", "t", ">=", "0", ":", "\n", "# Re-order the variables with the back pointer", "\n", "      ", "current_symbol", "=", "stored_emitted_symbols", "[", "t", "]", ".", "index_select", "(", "0", ",", "t_predecessors", ")", "\n", "t_predecessors", "=", "stored_predecessors", "[", "t", "]", ".", "index_select", "(", "0", ",", "t_predecessors", ")", ".", "squeeze", "(", ")", "\n", "eos_indices", "=", "stored_emitted_symbols", "[", "t", "]", ".", "eq", "(", "eos", ")", ".", "nonzero", "(", ")", "\n", "if", "eos_indices", ".", "dim", "(", ")", ">", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "eos_indices", ".", "size", "(", "0", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "# Indices of the EOS symbol for both variables", "\n", "# with b*k as the first dimension, and b, k for", "\n", "# the first two dimensions", "\n", "          ", "idx", "=", "eos_indices", "[", "i", "]", "\n", "b_idx", "=", "int", "(", "idx", "[", "0", "]", "/", "beam_width", ")", "\n", "# The indices of the replacing position", "\n", "# according to the replacement strategy noted above", "\n", "res_k_idx", "=", "beam_width", "-", "(", "batch_eos_found", "[", "b_idx", "]", "%", "beam_width", ")", "-", "1", "\n", "batch_eos_found", "[", "b_idx", "]", "+=", "1", "\n", "res_idx", "=", "b_idx", "*", "beam_width", "+", "res_k_idx", "\n", "\n", "# Replace the old information in return variables", "\n", "# with the new ended sequence information", "\n", "t_predecessors", "[", "res_idx", "]", "=", "stored_predecessors", "[", "t", "]", "[", "idx", "[", "0", "]", "]", "\n", "current_symbol", "[", "res_idx", "]", "=", "stored_emitted_symbols", "[", "t", "]", "[", "idx", "[", "0", "]", "]", "\n", "s", "[", "b_idx", ",", "res_k_idx", "]", "=", "stored_scores", "[", "t", "]", "[", "idx", "[", "0", "]", ",", "[", "0", "]", "]", "\n", "l", "[", "b_idx", "]", "[", "res_k_idx", "]", "=", "t", "+", "1", "\n", "\n", "# record the back tracked results", "\n", "", "", "p", ".", "append", "(", "current_symbol", ")", "\n", "\n", "t", "-=", "1", "\n", "\n", "# Sort and re-order again as the added ended sequences may change", "\n", "# the order (very unlikely)", "\n", "", "s", ",", "re_sorted_idx", "=", "s", ".", "topk", "(", "beam_width", ")", "\n", "for", "b_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "      ", "l", "[", "b_idx", "]", "=", "[", "l", "[", "b_idx", "]", "[", "k_idx", ".", "item", "(", ")", "]", "for", "k_idx", "in", "re_sorted_idx", "[", "b_idx", ",", ":", "]", "]", "\n", "\n", "", "re_sorted_idx", "=", "(", "re_sorted_idx", "+", "pos_index", ".", "expand_as", "(", "re_sorted_idx", ")", ")", ".", "view", "(", "batch_size", "*", "beam_width", ")", "\n", "\n", "# Reverse the sequences and re-order at the same time", "\n", "# It is reversed because the backtracking happens in reverse time order", "\n", "p", "=", "[", "step", ".", "index_select", "(", "0", ",", "re_sorted_idx", ")", ".", "view", "(", "batch_size", ",", "beam_width", ",", "-", "1", ")", "for", "step", "in", "reversed", "(", "p", ")", "]", "\n", "p", "=", "torch", ".", "cat", "(", "p", ",", "-", "1", ")", "[", ":", ",", "0", ",", ":", "]", "\n", "return", "p", ",", "torch", ".", "ones_like", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.attention_recognition_head.AttentionUnit.__init__": [[185, 195], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["  ", "def", "__init__", "(", "self", ",", "sDim", ",", "xDim", ",", "attDim", ")", ":", "\n", "    ", "super", "(", "AttentionUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "xDim", "=", "xDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "\n", "self", ".", "sEmbed", "=", "nn", ".", "Linear", "(", "sDim", ",", "attDim", ")", "\n", "self", ".", "xEmbed", "=", "nn", ".", "Linear", "(", "xDim", ",", "attDim", ")", "\n", "self", ".", "wEmbed", "=", "nn", ".", "Linear", "(", "attDim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.attention_recognition_head.AttentionUnit.init_weights": [[198, 205], ["torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "    ", "init", ".", "normal_", "(", "self", ".", "sEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "sEmbed", ".", "bias", ",", "0", ")", "\n", "init", ".", "normal_", "(", "self", ".", "xEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "xEmbed", ".", "bias", ",", "0", ")", "\n", "init", ".", "normal_", "(", "self", ".", "wEmbed", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "wEmbed", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.attention_recognition_head.AttentionUnit.forward": [[206, 226], ["x.contiguous().view.contiguous().view.size", "x.contiguous().view.contiguous().view.contiguous().view", "attention_recognition_head.AttentionUnit.xEmbed", "xProj.view.view.view", "sPrev.squeeze.squeeze.squeeze", "attention_recognition_head.AttentionUnit.sEmbed", "torch.unsqueeze", "sProj.expand.expand.expand", "torch.tanh", "sumTanh.view.view.view", "attention_recognition_head.AttentionUnit.wEmbed", "vProj.view.view.view", "torch.nn.functional.softmax", "x.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sPrev", ")", ":", "\n", "    ", "batch_size", ",", "T", ",", "_", "=", "x", ".", "size", "(", ")", "# [b x T x xDim]", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "xDim", ")", "# [(b x T) x xDim]", "\n", "xProj", "=", "self", ".", "xEmbed", "(", "x", ")", "# [(b x T) x attDim]", "\n", "xProj", "=", "xProj", ".", "view", "(", "batch_size", ",", "T", ",", "-", "1", ")", "# [b x T x attDim]", "\n", "\n", "sPrev", "=", "sPrev", ".", "squeeze", "(", "0", ")", "\n", "sProj", "=", "self", ".", "sEmbed", "(", "sPrev", ")", "# [b x attDim]", "\n", "sProj", "=", "torch", ".", "unsqueeze", "(", "sProj", ",", "1", ")", "# [b x 1 x attDim]", "\n", "sProj", "=", "sProj", ".", "expand", "(", "batch_size", ",", "T", ",", "self", ".", "attDim", ")", "# [b x T x attDim]", "\n", "\n", "sumTanh", "=", "torch", ".", "tanh", "(", "sProj", "+", "xProj", ")", "\n", "sumTanh", "=", "sumTanh", ".", "view", "(", "-", "1", ",", "self", ".", "attDim", ")", "\n", "\n", "vProj", "=", "self", ".", "wEmbed", "(", "sumTanh", ")", "# [(b x T) x 1]", "\n", "vProj", "=", "vProj", ".", "view", "(", "batch_size", ",", "T", ")", "\n", "\n", "alpha", "=", "F", ".", "softmax", "(", "vProj", ",", "dim", "=", "1", ")", "# attention weights for each sample in the minibatch", "\n", "\n", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.attention_recognition_head.DecoderUnit.__init__": [[229, 241], ["torch.nn.Module.__init__", "attention_recognition_head.AttentionUnit", "torch.nn.Embedding", "torch.nn.GRU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["  ", "def", "__init__", "(", "self", ",", "sDim", ",", "xDim", ",", "yDim", ",", "attDim", ")", ":", "\n", "    ", "super", "(", "DecoderUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sDim", "=", "sDim", "\n", "self", ".", "xDim", "=", "xDim", "\n", "self", ".", "yDim", "=", "yDim", "\n", "self", ".", "attDim", "=", "attDim", "\n", "self", ".", "emdDim", "=", "attDim", "\n", "\n", "self", ".", "attention_unit", "=", "AttentionUnit", "(", "sDim", ",", "xDim", ",", "attDim", ")", "\n", "self", ".", "tgt_embedding", "=", "nn", ".", "Embedding", "(", "yDim", "+", "1", ",", "self", ".", "emdDim", ")", "# the last is used for <BOS> ", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "input_size", "=", "xDim", "+", "self", ".", "emdDim", ",", "hidden_size", "=", "sDim", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "sDim", ",", "yDim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.attention_recognition_head.DecoderUnit.init_weights": [[244, 248], ["torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "    ", "init", ".", "normal_", "(", "self", ".", "tgt_embedding", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "normal_", "(", "self", ".", "fc", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "init", ".", "constant_", "(", "self", ".", "fc", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.attention_recognition_head.DecoderUnit.forward": [[249, 262], ["x.size", "attention_recognition_head.DecoderUnit.attention_unit", "torch.bmm().squeeze", "attention_recognition_head.DecoderUnit.tgt_embedding", "attention_recognition_head.DecoderUnit.gru", "attention_recognition_head.DecoderUnit.squeeze", "attention_recognition_head.DecoderUnit.fc", "yPrev.long", "torch.cat().unsqueeze", "torch.bmm", "attention_recognition_head.DecoderUnit.unsqueeze", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sPrev", ",", "yPrev", ")", ":", "\n", "# x: feature sequence from the image decoder.", "\n", "    ", "batch_size", ",", "T", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "alpha", "=", "self", ".", "attention_unit", "(", "x", ",", "sPrev", ")", "\n", "context", "=", "torch", ".", "bmm", "(", "alpha", ".", "unsqueeze", "(", "1", ")", ",", "x", ")", ".", "squeeze", "(", "1", ")", "\n", "#", "\n", "yProj", "=", "self", ".", "tgt_embedding", "(", "yPrev", ".", "long", "(", ")", ")", "\n", "# self.gru.flatten_parameters()", "\n", "output", ",", "state", "=", "self", ".", "gru", "(", "torch", ".", "cat", "(", "[", "yProj", ",", "context", "]", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "sPrev", ")", "\n", "output", "=", "output", ".", "squeeze", "(", "1", ")", "\n", "\n", "output", "=", "self", ".", "fc", "(", "output", ")", "\n", "return", "output", ",", "state", "", "", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tps_spatial_transformer.TPSSpatialTransformer.__init__": [[56, 96], ["torch.Module.__init__", "tps_spatial_transformer.build_output_control_points", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tps_spatial_transformer.compute_partial_repr", "forward_kernel[].copy_", "forward_kernel[].fill_", "forward_kernel[].fill_", "forward_kernel[].copy_", "forward_kernel[].copy_", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "torch.inverse", "list", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat.split", "torch.cat.split", "torch.cat.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tps_spatial_transformer.compute_partial_repr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "tps_spatial_transformer.TPSSpatialTransformer.register_buffer", "build_output_control_points.transpose", "itertools.product", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tps_spatial_transformer.build_output_control_points", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tps_spatial_transformer.compute_partial_repr", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tps_spatial_transformer.compute_partial_repr"], ["  ", "def", "__init__", "(", "self", ",", "output_image_size", "=", "None", ",", "num_control_points", "=", "None", ",", "margins", "=", "None", ")", ":", "\n", "    ", "super", "(", "TPSSpatialTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_image_size", "=", "output_image_size", "\n", "self", ".", "num_control_points", "=", "num_control_points", "\n", "self", ".", "margins", "=", "margins", "\n", "\n", "self", ".", "target_height", ",", "self", ".", "target_width", "=", "output_image_size", "\n", "target_control_points", "=", "build_output_control_points", "(", "num_control_points", ",", "margins", ")", "\n", "N", "=", "num_control_points", "\n", "# N = N - 4", "\n", "\n", "# create padded kernel matrix", "\n", "forward_kernel", "=", "torch", ".", "zeros", "(", "N", "+", "3", ",", "N", "+", "3", ")", "\n", "target_control_partial_repr", "=", "compute_partial_repr", "(", "target_control_points", ",", "target_control_points", ")", "\n", "forward_kernel", "[", ":", "N", ",", ":", "N", "]", ".", "copy_", "(", "target_control_partial_repr", ")", "\n", "forward_kernel", "[", ":", "N", ",", "-", "3", "]", ".", "fill_", "(", "1", ")", "\n", "forward_kernel", "[", "-", "3", ",", ":", "N", "]", ".", "fill_", "(", "1", ")", "\n", "forward_kernel", "[", ":", "N", ",", "-", "2", ":", "]", ".", "copy_", "(", "target_control_points", ")", "\n", "forward_kernel", "[", "-", "2", ":", ",", ":", "N", "]", ".", "copy_", "(", "target_control_points", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "# compute inverse matrix", "\n", "inverse_kernel", "=", "torch", ".", "inverse", "(", "forward_kernel", ")", "\n", "\n", "# create target cordinate matrix", "\n", "HW", "=", "self", ".", "target_height", "*", "self", ".", "target_width", "\n", "target_coordinate", "=", "list", "(", "itertools", ".", "product", "(", "range", "(", "self", ".", "target_height", ")", ",", "range", "(", "self", ".", "target_width", ")", ")", ")", "\n", "target_coordinate", "=", "torch", ".", "Tensor", "(", "target_coordinate", ")", "# HW x 2", "\n", "Y", ",", "X", "=", "target_coordinate", ".", "split", "(", "1", ",", "dim", "=", "1", ")", "\n", "Y", "=", "Y", "/", "(", "self", ".", "target_height", "-", "1", ")", "\n", "X", "=", "X", "/", "(", "self", ".", "target_width", "-", "1", ")", "\n", "target_coordinate", "=", "torch", ".", "cat", "(", "[", "X", ",", "Y", "]", ",", "dim", "=", "1", ")", "# convert from (y, x) to (x, y)", "\n", "target_coordinate_partial_repr", "=", "compute_partial_repr", "(", "target_coordinate", ",", "target_control_points", ")", "\n", "target_coordinate_repr", "=", "torch", ".", "cat", "(", "[", "\n", "target_coordinate_partial_repr", ",", "torch", ".", "ones", "(", "HW", ",", "1", ")", ",", "target_coordinate", "\n", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# register precomputed matrices", "\n", "self", ".", "register_buffer", "(", "'inverse_kernel'", ",", "inverse_kernel", ")", "\n", "self", ".", "register_buffer", "(", "'padding_matrix'", ",", "torch", ".", "zeros", "(", "3", ",", "2", ")", ")", "\n", "self", ".", "register_buffer", "(", "'target_coordinate_repr'", ",", "target_coordinate_repr", ")", "\n", "self", ".", "register_buffer", "(", "'target_control_points'", ",", "target_control_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tps_spatial_transformer.TPSSpatialTransformer.forward": [[97, 113], ["source_control_points.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.view", "torch.matmul.view", "torch.matmul.view", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "tps_spatial_transformer.grid_sample", "source_control_points.ndimension", "source_control_points.size", "source_control_points.size", "tps_spatial_transformer.TPSSpatialTransformer.padding_matrix.expand"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tps_spatial_transformer.grid_sample"], ["", "def", "forward", "(", "self", ",", "input", ",", "source_control_points", ")", ":", "\n", "    ", "assert", "source_control_points", ".", "ndimension", "(", ")", "==", "3", "\n", "assert", "source_control_points", ".", "size", "(", "1", ")", "==", "self", ".", "num_control_points", "\n", "assert", "source_control_points", ".", "size", "(", "2", ")", "==", "2", "\n", "batch_size", "=", "source_control_points", ".", "size", "(", "0", ")", "\n", "\n", "Y", "=", "torch", ".", "cat", "(", "[", "source_control_points", ",", "self", ".", "padding_matrix", ".", "expand", "(", "batch_size", ",", "3", ",", "2", ")", "]", ",", "1", ")", "\n", "mapping_matrix", "=", "torch", ".", "matmul", "(", "self", ".", "inverse_kernel", ",", "Y", ")", "\n", "source_coordinate", "=", "torch", ".", "matmul", "(", "self", ".", "target_coordinate_repr", ",", "mapping_matrix", ")", "\n", "\n", "grid", "=", "source_coordinate", ".", "view", "(", "-", "1", ",", "self", ".", "target_height", ",", "self", ".", "target_width", ",", "2", ")", "\n", "grid", "=", "torch", ".", "clamp", "(", "grid", ",", "0", ",", "1", ")", "# the source_control_points may be out of [0, 1].", "\n", "# the input to grid_sample is normalized [-1, 1], but what we get is [0, 1]", "\n", "grid", "=", "2.0", "*", "grid", "-", "1.0", "\n", "output_maps", "=", "grid_sample", "(", "input", ",", "grid", ",", "canvas", "=", "None", ")", "\n", "return", "output_maps", ",", "source_coordinate", "", "", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tps_spatial_transformer.grid_sample": [[10, 19], ["torch.grid_sample", "input.data.new().fill_", "torch.grid_sample", "input.data.new", "input.size"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tps_spatial_transformer.grid_sample", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tps_spatial_transformer.grid_sample"], ["def", "grid_sample", "(", "input", ",", "grid", ",", "canvas", "=", "None", ")", ":", "\n", "  ", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ")", "\n", "if", "canvas", "is", "None", ":", "\n", "    ", "return", "output", "\n", "", "else", ":", "\n", "    ", "input_mask", "=", "input", ".", "data", ".", "new", "(", "input", ".", "size", "(", ")", ")", ".", "fill_", "(", "1", ")", "\n", "output_mask", "=", "F", ".", "grid_sample", "(", "input_mask", ",", "grid", ")", "\n", "padded_output", "=", "output", "*", "output_mask", "+", "canvas", "*", "(", "1", "-", "output_mask", ")", "\n", "return", "padded_output", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tps_spatial_transformer.compute_partial_repr": [[22, 35], ["input_points.size", "control_points.size", "repr_matrix.masked_fill_", "input_points.view", "control_points.view", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "", "def", "compute_partial_repr", "(", "input_points", ",", "control_points", ")", ":", "\n", "  ", "N", "=", "input_points", ".", "size", "(", "0", ")", "\n", "M", "=", "control_points", ".", "size", "(", "0", ")", "\n", "pairwise_diff", "=", "input_points", ".", "view", "(", "N", ",", "1", ",", "2", ")", "-", "control_points", ".", "view", "(", "1", ",", "M", ",", "2", ")", "\n", "# original implementation, very slow", "\n", "# pairwise_dist = torch.sum(pairwise_diff ** 2, dim = 2) # square of distance", "\n", "pairwise_diff_square", "=", "pairwise_diff", "*", "pairwise_diff", "\n", "pairwise_dist", "=", "pairwise_diff_square", "[", ":", ",", ":", ",", "0", "]", "+", "pairwise_diff_square", "[", ":", ",", ":", ",", "1", "]", "\n", "repr_matrix", "=", "0.5", "*", "pairwise_dist", "*", "torch", ".", "log", "(", "pairwise_dist", ")", "\n", "# fix numerical error for 0 * log(0), substitute all nan with 0", "\n", "mask", "=", "repr_matrix", "!=", "repr_matrix", "\n", "repr_matrix", ".", "masked_fill_", "(", "mask", ",", "0", ")", "\n", "return", "repr_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tps_spatial_transformer.build_output_control_points": [[38, 51], ["numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.ones", "numpy.ones"], "function", ["None"], ["", "def", "build_output_control_points", "(", "num_control_points", ",", "margins", ")", ":", "\n", "  ", "margin_x", ",", "margin_y", "=", "margins", "\n", "num_ctrl_pts_per_side", "=", "num_control_points", "//", "2", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "margin_x", ",", "1.0", "-", "margin_x", ",", "num_ctrl_pts_per_side", ")", "\n", "ctrl_pts_y_top", "=", "np", ".", "ones", "(", "num_ctrl_pts_per_side", ")", "*", "margin_y", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "ones", "(", "num_ctrl_pts_per_side", ")", "*", "(", "1.0", "-", "margin_y", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "# ctrl_pts_top = ctrl_pts_top[1:-1,:]", "\n", "# ctrl_pts_bottom = ctrl_pts_bottom[1:-1,:]", "\n", "output_ctrl_pts_arr", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", "\n", "output_ctrl_pts", "=", "torch", ".", "Tensor", "(", "output_ctrl_pts_arr", ")", "\n", "return", "output_ctrl_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tsrn.TSRN.__init__": [[19, 60], ["torch.nn.Module.__init__", "int", "torch.nn.Sequential", "torch.nn.Sequential", "range", "setattr", "block_.append", "setattr", "math.log", "math.log", "math.log", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "setattr", "torch.nn.Sequential", "torch.nn.Sequential", "tsrn.UpsampleBLock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "tps_spatial_transformer.TPSSpatialTransformer", "stn_head.STNHead", "math.log", "math.log", "math.log", "math.log", "tsrn.RecurrentResidualBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "range", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "width", "=", "128", ",", "height", "=", "32", ",", "STN", "=", "False", ",", "srb_nums", "=", "5", ",", "mask", "=", "False", ",", "hidden_units", "=", "32", ")", ":", "\n", "        ", "super", "(", "TSRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", "=", "3", "\n", "if", "mask", ":", "\n", "            ", "in_planes", "=", "4", "\n", "", "assert", "math", ".", "log", "(", "scale_factor", ",", "2", ")", "%", "1", "==", "0", "\n", "upsample_block_num", "=", "int", "(", "math", ".", "log", "(", "scale_factor", ",", "2", ")", ")", "\n", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "2", "*", "hidden_units", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", "# nn.ReLU()", "\n", ")", "\n", "self", ".", "srb_nums", "=", "srb_nums", "\n", "for", "i", "in", "range", "(", "srb_nums", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ",", "RecurrentResidualBlock", "(", "2", "*", "hidden_units", ")", ")", "\n", "\n", "", "setattr", "(", "self", ",", "'block%d'", "%", "(", "srb_nums", "+", "2", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", ",", "2", "*", "hidden_units", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2", "*", "hidden_units", ")", "\n", ")", ")", "\n", "\n", "# self.non_local = NonLocalBlock2D(64, 64)", "\n", "block_", "=", "[", "UpsampleBLock", "(", "2", "*", "hidden_units", ",", "2", ")", "for", "_", "in", "range", "(", "upsample_block_num", ")", "]", "\n", "block_", ".", "append", "(", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", ",", "in_planes", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ")", "\n", "setattr", "(", "self", ",", "'block%d'", "%", "(", "srb_nums", "+", "3", ")", ",", "nn", ".", "Sequential", "(", "*", "block_", ")", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "in_planes", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tsrn.TSRN.forward": [[61, 75], ["range", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "tsrn.TSRN.stn_head", "tsrn.TSRN.tps", "tsrn.TSRN.block1", "getattr", "getattr", "str", "str", "str", "str", "str"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# embed()", "\n", "        ", "if", "self", ".", "stn", "and", "self", ".", "training", ":", "\n", "# x = F.interpolate(x, self.tps_inputsize, mode='bilinear', align_corners=True)", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "block", "=", "{", "'1'", ":", "self", ".", "block1", "(", "x", ")", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "srb_nums", "+", "1", ")", ":", "\n", "            ", "block", "[", "str", "(", "i", "+", "2", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ")", "(", "block", "[", "str", "(", "i", "+", "1", ")", "]", ")", "\n", "\n", "", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "3", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "self", ".", "srb_nums", "+", "3", ")", ")", "(", "(", "block", "[", "'1'", "]", "+", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "2", ")", "]", ")", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "3", ")", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tsrn.RecurrentResidualBlock.__init__": [[78, 88], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "tsrn.GruBlock", "tsrn.mish", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "tsrn.GruBlock"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "RecurrentResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "gru1", "=", "GruBlock", "(", "channels", ",", "channels", ")", "\n", "# self.prelu = nn.ReLU()", "\n", "self", ".", "prelu", "=", "mish", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "gru2", "=", "GruBlock", "(", "channels", ",", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tsrn.RecurrentResidualBlock.forward": [[89, 99], ["tsrn.RecurrentResidualBlock.conv1", "tsrn.RecurrentResidualBlock.bn1", "tsrn.RecurrentResidualBlock.prelu", "tsrn.RecurrentResidualBlock.conv2", "tsrn.RecurrentResidualBlock.bn2", "tsrn.RecurrentResidualBlock.gru1().transpose().contiguous", "tsrn.RecurrentResidualBlock.gru2().contiguous", "tsrn.RecurrentResidualBlock.gru1().transpose", "tsrn.RecurrentResidualBlock.gru2", "tsrn.RecurrentResidualBlock.gru1", "tsrn.RecurrentResidualBlock.transpose().contiguous", "tsrn.RecurrentResidualBlock.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "self", ".", "conv1", "(", "x", ")", "\n", "residual", "=", "self", ".", "bn1", "(", "residual", ")", "\n", "residual", "=", "self", ".", "prelu", "(", "residual", ")", "\n", "residual", "=", "self", ".", "conv2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "bn2", "(", "residual", ")", "\n", "\n", "residual", "=", "self", ".", "gru1", "(", "residual", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "contiguous", "(", ")", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "self", ".", "gru2", "(", "x", "+", "residual", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tsrn.UpsampleBLock.__init__": [[102, 109], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PixelShuffle", "torch.nn.PixelShuffle", "tsrn.mish"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "up_scale", ")", ":", "\n", "        ", "super", "(", "UpsampleBLock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "*", "up_scale", "**", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "up_scale", ")", "\n", "# self.prelu = nn.ReLU()", "\n", "self", ".", "prelu", "=", "mish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tsrn.UpsampleBLock.forward": [[110, 115], ["tsrn.UpsampleBLock.conv", "tsrn.UpsampleBLock.pixel_shuffle", "tsrn.UpsampleBLock.prelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "pixel_shuffle", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tsrn.mish.__init__": [[118, 121], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "mish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activated", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tsrn.mish.forward": [[122, 126], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softplus", "torch.softplus"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "activated", ":", "\n", "            ", "x", "=", "x", "*", "(", "torch", ".", "tanh", "(", "F", ".", "softplus", "(", "x", ")", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tsrn.GruBlock.__init__": [[129, 134], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GRU", "torch.nn.GRU"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "GruBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "out_channels", "%", "2", "==", "0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "out_channels", ",", "out_channels", "//", "2", ",", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tsrn.GruBlock.forward": [[135, 146], ["tsrn.GruBlock.conv1", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.view", "tsrn.GruBlock.gru", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: b, c, w, h", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "# b, w, h, c", "\n", "b", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "b", "[", "0", "]", "*", "b", "[", "1", "]", ",", "b", "[", "2", "]", ",", "b", "[", "3", "]", ")", "# b*w, h, c", "\n", "x", ",", "_", "=", "self", ".", "gru", "(", "x", ")", "\n", "# x = self.gru(x)[0]", "\n", "x", "=", "x", ".", "view", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ",", "b", "[", "2", "]", ",", "b", "[", "3", "]", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.rdn.sub_pixel.__init__": [[11, 16], ["torch.Module.__init__", "modules.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.PixelShuffle", "torch.PixelShuffle", "torch.PixelShuffle"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale", ",", "act", "=", "False", ")", ":", "\n", "        ", "super", "(", "sub_pixel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "append", "(", "nn", ".", "PixelShuffle", "(", "scale", ")", ")", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.rdn.sub_pixel.forward": [[17, 20], ["rdn.sub_pixel.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.rdn.make_dense.__init__": [[23, 27], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nChannels", ",", "growthRate", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", "make_dense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nChannels", ",", "growthRate", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.rdn.make_dense.forward": [[28, 32], ["torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rdn.make_dense.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "x", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.rdn.RDB.__init__": [[36, 45], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "modules.append", "rdn.make_dense"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nChannels", ",", "nDenselayer", ",", "growthRate", ")", ":", "\n", "        ", "super", "(", "RDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels_", "=", "nChannels", "\n", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nDenselayer", ")", ":", "\n", "            ", "modules", ".", "append", "(", "make_dense", "(", "nChannels_", ",", "growthRate", ")", ")", "\n", "nChannels_", "+=", "growthRate", "\n", "", "self", ".", "dense_layers", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "self", ".", "conv_1x1", "=", "nn", ".", "Conv2d", "(", "nChannels_", ",", "nChannels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.rdn.RDB.forward": [[46, 51], ["rdn.RDB.dense_layers", "rdn.RDB.conv_1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dense_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "conv_1x1", "(", "out", ")", "\n", "out", "=", "out", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.rdn.RDN.__init__": [[55, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "rdn.RDB", "rdn.RDB", "rdn.RDB", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "rdn.sub_pixel", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nChannel", "=", "3", ",", "nDenselayer", "=", "6", ",", "nFeat", "=", "64", ",", "scale_factor", "=", "2", ",", "growthRate", "=", "32", ")", ":", "\n", "        ", "super", "(", "RDN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# F-1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nChannel", ",", "nFeat", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "# F0", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "# RDBs 3", "\n", "self", ".", "RDB1", "=", "RDB", "(", "nFeat", ",", "nDenselayer", ",", "growthRate", ")", "\n", "self", ".", "RDB2", "=", "RDB", "(", "nFeat", ",", "nDenselayer", ",", "growthRate", ")", "\n", "self", ".", "RDB3", "=", "RDB", "(", "nFeat", ",", "nDenselayer", ",", "growthRate", ")", "\n", "# global feature fusion (GFF)", "\n", "self", ".", "GFF_1x1", "=", "nn", ".", "Conv2d", "(", "nFeat", "*", "3", ",", "nFeat", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "GFF_3x3", "=", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "# Upsampler", "\n", "self", ".", "conv_up", "=", "nn", ".", "Conv2d", "(", "nFeat", ",", "nFeat", "*", "scale_factor", "*", "scale_factor", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "upsample", "=", "sub_pixel", "(", "scale_factor", ")", "\n", "# conv", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nFeat", ",", "nChannel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.rdn.RDN.forward": [[75, 91], ["rdn.RDN.conv1", "rdn.RDN.conv2", "rdn.RDN.RDB1", "rdn.RDN.RDB2", "rdn.RDN.RDB3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rdn.RDN.GFF_1x1", "rdn.RDN.GFF_3x3", "rdn.RDN.conv_up", "rdn.RDN.upsample", "rdn.RDN.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "F_", "=", "self", ".", "conv1", "(", "x", ")", "\n", "F_0", "=", "self", ".", "conv2", "(", "F_", ")", "\n", "F_1", "=", "self", ".", "RDB1", "(", "F_0", ")", "\n", "F_2", "=", "self", ".", "RDB2", "(", "F_1", ")", "\n", "F_3", "=", "self", ".", "RDB3", "(", "F_2", ")", "\n", "FF", "=", "torch", ".", "cat", "(", "(", "F_1", ",", "F_2", ",", "F_3", ")", ",", "1", ")", "\n", "FdLF", "=", "self", ".", "GFF_1x1", "(", "FF", ")", "\n", "FGF", "=", "self", ".", "GFF_3x3", "(", "FdLF", ")", "\n", "FDF", "=", "FGF", "+", "F_", "\n", "us", "=", "self", ".", "conv_up", "(", "FDF", ")", "\n", "us", "=", "self", ".", "upsample", "(", "us", ")", "\n", "\n", "output", "=", "self", ".", "conv3", "(", "us", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.STNHead.__init__": [[26, 54], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "stn_head.STNHead.init_weights", "stn_head.STNHead.init_weights", "stn_head.STNHead.init_stn", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.MaxPool2d", "stn_head.conv3x3_block", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.STNHead.init_weights", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.STNHead.init_weights", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.STNHead.init_stn", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.conv3x3_block", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.conv3x3_block"], ["  ", "def", "__init__", "(", "self", ",", "in_planes", ",", "num_ctrlpoints", ",", "activation", "=", "'none'", ")", ":", "\n", "    ", "super", "(", "STNHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "self", ".", "num_ctrlpoints", "=", "num_ctrlpoints", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "stn_convnet", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3_block", "(", "in_planes", ",", "32", ")", ",", "# 32*64", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "32", ",", "64", ")", ",", "# 16*32", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "64", ",", "128", ")", ",", "# 8*16", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "128", ",", "256", ")", ",", "# 4*8", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "conv3x3_block", "(", "256", ",", "256", ")", ",", "# 2*4,", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "1", ",", "2", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ")", ",", "\n", "conv3x3_block", "(", "256", ",", "256", ")", ")", "# 1*2", "\n", "\n", "self", ".", "stn_fc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", "*", "256", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "stn_fc2", "=", "nn", ".", "Linear", "(", "512", ",", "num_ctrlpoints", "*", "2", ")", "\n", "\n", "self", ".", "init_weights", "(", "self", ".", "stn_convnet", ")", "\n", "self", ".", "init_weights", "(", "self", ".", "stn_fc1", ")", "\n", "self", ".", "init_stn", "(", "self", ".", "stn_fc2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.STNHead.init_weights": [[55, 68], ["module.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "          ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.STNHead.init_stn": [[69, 87], ["int", "numpy.linspace", "numpy.stack", "numpy.stack", "numpy.concatenate().astype", "stn_fc2.weight.data.zero_", "torch.Tensor().view", "numpy.ones", "numpy.ones", "numpy.concatenate", "torch.Tensor", "numpy.log", "torch.nn.functional.relu", "torch.Tensor"], "methods", ["None"], ["", "", "", "def", "init_stn", "(", "self", ",", "stn_fc2", ")", ":", "\n", "    ", "margin", "=", "0.01", "\n", "sampling_num_per_side", "=", "int", "(", "self", ".", "num_ctrlpoints", "/", "2", ")", "\n", "ctrl_pts_x", "=", "np", ".", "linspace", "(", "margin", ",", "1.", "-", "margin", ",", "sampling_num_per_side", ")", "\n", "ctrl_pts_y_top", "=", "np", ".", "ones", "(", "sampling_num_per_side", ")", "*", "margin", "\n", "ctrl_pts_y_bottom", "=", "np", ".", "ones", "(", "sampling_num_per_side", ")", "*", "(", "1", "-", "margin", ")", "\n", "ctrl_pts_top", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_top", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_pts_bottom", "=", "np", ".", "stack", "(", "[", "ctrl_pts_x", ",", "ctrl_pts_y_bottom", "]", ",", "axis", "=", "1", ")", "\n", "ctrl_points", "=", "np", ".", "concatenate", "(", "[", "ctrl_pts_top", ",", "ctrl_pts_bottom", "]", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# print(ctrl_points.shape)", "\n", "if", "self", ".", "activation", "is", "'none'", ":", "\n", "      ", "pass", "\n", "", "elif", "self", ".", "activation", "==", "'sigmoid'", ":", "\n", "      ", "ctrl_points", "=", "-", "np", ".", "log", "(", "1.", "/", "ctrl_points", "-", "1.", ")", "\n", "", "elif", "self", ".", "activation", "==", "'relu'", ":", "\n", "      ", "ctrl_points", "=", "F", ".", "relu", "(", "torch", ".", "Tensor", "(", "ctrl_points", ")", ")", "\n", "", "stn_fc2", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "stn_fc2", ".", "bias", ".", "data", "=", "torch", ".", "Tensor", "(", "ctrl_points", ")", ".", "view", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.STNHead.forward": [[88, 100], ["stn_head.STNHead.stn_convnet", "torch.nn.functional.relu.size", "torch.nn.functional.relu.view", "stn_head.STNHead.stn_fc1", "stn_head.STNHead.stn_fc2", "torch.nn.functional.relu.view", "torch.sigmoid", "torch.nn.functional.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "stn_convnet", "(", "x", ")", "\n", "batch_size", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "img_feat", "=", "self", ".", "stn_fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "stn_fc2", "(", "0.1", "*", "img_feat", ")", "\n", "if", "self", ".", "activation", "==", "'sigmoid'", ":", "\n", "      ", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "if", "self", ".", "activation", "==", "'relu'", ":", "\n", "      ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "num_ctrlpoints", ",", "2", ")", "\n", "return", "img_feat", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.stn_head.conv3x3_block": [[13, 23], ["torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "function", ["None"], ["def", "conv3x3_block", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "conv_layer", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv_layer", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.LayerNorm.__init__": [[27, 33], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# print(features)", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.LayerNorm.forward": [[34, 38], ["x.mean", "x.std"], "methods", ["None"], ["        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "self", ".", "a_2", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "b_2", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.FeatureEnhancer.__init__": [[66, 76], ["torch.nn.Module.__init__", "tbsrn.MultiHeadedAttention", "tbsrn.LayerNorm", "tbsrn.PositionwiseFeedForward", "tbsrn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["        ", "super", "(", "FeatureEnhancer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "multihead", "=", "MultiHeadedAttention", "(", "h", "=", "4", ",", "d_model", "=", "128", ",", "dropout", "=", "0.1", ")", "\n", "self", ".", "mul_layernorm1", "=", "LayerNorm", "(", "features", "=", "128", ")", "\n", "\n", "self", ".", "pff", "=", "PositionwiseFeedForward", "(", "128", ",", "128", ")", "\n", "self", ".", "mul_layernorm3", "=", "LayerNorm", "(", "features", "=", "128", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "conv_feature", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.FeatureEnhancer.forward": [[77, 96], ["positionalencoding2d().float().cuda().unsqueeze().view", "position2d.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.permute().contiguous", "torch.cat.permute().contiguous", "tbsrn.FeatureEnhancer.mul_layernorm1", "tbsrn.FeatureEnhancer.mul_layernorm3", "tbsrn.FeatureEnhancer.linear", "tbsrn.FeatureEnhancer.permute().contiguous", "positionalencoding2d().float().cuda().unsqueeze", "torch.cat.permute", "torch.cat.permute", "tbsrn.FeatureEnhancer.pff", "tbsrn.FeatureEnhancer.permute", "tbsrn.FeatureEnhancer.multihead", "positionalencoding2d().float().cuda", "positionalencoding2d().float", "tbsrn.positionalencoding2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.positionalencoding2d"], ["        ", "'''\n        text : (batch, seq_len, embedding_size)\n        global_info: (batch, embedding_size, 1, 1)\n        conv_feature: (batch, channel, H, W)\n        '''", "\n", "batch", "=", "conv_feature", ".", "shape", "[", "0", "]", "\n", "position2d", "=", "positionalencoding2d", "(", "64", ",", "16", ",", "64", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "view", "(", "1", ",", "64", ",", "1024", ")", "\n", "position2d", "=", "position2d", ".", "repeat", "(", "batch", ",", "1", ",", "1", ")", "\n", "conv_feature", "=", "torch", ".", "cat", "(", "[", "conv_feature", ",", "position2d", "]", ",", "1", ")", "# batch, 128(64+64), 32, 128", "\n", "result", "=", "conv_feature", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "origin_result", "=", "result", "\n", "result", "=", "self", ".", "mul_layernorm1", "(", "origin_result", "+", "self", ".", "multihead", "(", "result", ",", "result", ",", "result", ",", "mask", "=", "None", ")", "[", "0", "]", ")", "\n", "origin_result", "=", "result", "\n", "result", "=", "self", ".", "mul_layernorm3", "(", "origin_result", "+", "self", ".", "pff", "(", "result", ")", ")", "\n", "result", "=", "self", ".", "linear", "(", "result", ")", "\n", "return", "result", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "\n", "", "", "class", "MultiHeadedAttention", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ",", "compress_attention", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.MultiHeadedAttention.__init__": [[99, 111], ["torch.nn.Module.__init__", "tbsrn.clones", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.clones"], ["assert", "d_model", "%", "h", "==", "0", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "compress_attention", "=", "compress_attention", "\n", "self", ".", "compress_attention_linear", "=", "nn", ".", "Linear", "(", "h", ",", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "align", "=", "None", ")", ":", "\n", "        ", "\"Implements Figure 2\"", "\n", "if", "mask", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.MultiHeadedAttention.forward": [[112, 133], ["query.size", "tbsrn.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.attention"], ["# Same mask applied to all h heads.", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k", "\n", "query", ",", "key", ",", "value", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "]", "\n", "\n", "# 2) Apply attention on all the projected vectors in batch.", "\n", "x", ",", "attention_map", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "align", "=", "align", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear.", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", ",", "attention_map", "\n", "\n", "\n", "", "", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ",", "align", "=", "None", ")", ":", "\n", "    ", "\"Compute 'Scaled Dot Product Attention'\"", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.PositionwiseFeedForward.__init__": [[159, 164], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_ff", ",", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "w_2", "(", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.PositionwiseFeedForward.forward": [[165, 167], ["tbsrn.PositionwiseFeedForward.w_2", "tbsrn.PositionwiseFeedForward.dropout", "torch.relu", "torch.relu", "tbsrn.PositionwiseFeedForward.w_1"], "methods", ["None"], ["\n", "", "", "class", "TBSRN", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "width", "=", "128", ",", "height", "=", "32", ",", "STN", "=", "True", ",", "srb_nums", "=", "5", ",", "mask", "=", "False", ",", "hidden_units", "=", "32", ",", "input_channel", "=", "3", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.TBSRN.__init__": [[170, 216], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "int", "torch.nn.Sequential", "torch.nn.Sequential", "range", "setattr", "block_.append", "setattr", "math.log", "math.log", "math.log", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "setattr", "torch.nn.Sequential", "torch.nn.Sequential", "tbsrn.UpsampleBLock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "tps_spatial_transformer.TPSSpatialTransformer", "stn_head.STNHead", "math.log", "math.log", "math.log", "math.log", "tbsrn.RecurrentResidualBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "range", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channel", ",", "3", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "3", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "in_planes", "=", "3", "\n", "if", "mask", ":", "\n", "            ", "in_planes", "=", "4", "\n", "", "assert", "math", ".", "log", "(", "scale_factor", ",", "2", ")", "%", "1", "==", "0", "\n", "upsample_block_num", "=", "int", "(", "math", ".", "log", "(", "scale_factor", ",", "2", ")", ")", "\n", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "2", "*", "hidden_units", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", "# nn.ReLU()", "\n", ")", "\n", "self", ".", "srb_nums", "=", "srb_nums", "\n", "for", "i", "in", "range", "(", "srb_nums", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ",", "RecurrentResidualBlock", "(", "2", "*", "hidden_units", ")", ")", "\n", "\n", "", "setattr", "(", "self", ",", "'block%d'", "%", "(", "srb_nums", "+", "2", ")", ",", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", ",", "2", "*", "hidden_units", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "2", "*", "hidden_units", ")", "\n", ")", ")", "\n", "\n", "# self.non_local = NonLocalBlock2D(64, 64)", "\n", "block_", "=", "[", "UpsampleBLock", "(", "2", "*", "hidden_units", ",", "2", ")", "for", "_", "in", "range", "(", "upsample_block_num", ")", "]", "\n", "block_", ".", "append", "(", "nn", ".", "Conv2d", "(", "2", "*", "hidden_units", ",", "in_planes", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ")", "\n", "setattr", "(", "self", ",", "'block%d'", "%", "(", "srb_nums", "+", "3", ")", ",", "nn", ".", "Sequential", "(", "*", "block_", ")", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "in_planes", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stn", "and", "self", ".", "training", ":", "\n", "# x = F.interpolate(x, self.tps_inputsize, mode='bilinear', align_corners=True)", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.TBSRN.forward": [[217, 236], ["time.time", "range", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "time.time", "tbsrn.TBSRN.stn_head", "tbsrn.TBSRN.tps", "tbsrn.TBSRN.block1", "getattr", "getattr", "str", "str", "str", "str", "str"], "methods", ["None"], ["            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "block", "=", "{", "'1'", ":", "self", ".", "block1", "(", "x", ")", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "srb_nums", "+", "1", ")", ":", "\n", "            ", "block", "[", "str", "(", "i", "+", "2", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "i", "+", "2", ")", ")", "(", "block", "[", "str", "(", "i", "+", "1", ")", "]", ")", "\n", "\n", "", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "3", ")", "]", "=", "getattr", "(", "self", ",", "'block%d'", "%", "(", "self", ".", "srb_nums", "+", "3", ")", ")", "(", "(", "block", "[", "'1'", "]", "+", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "2", ")", "]", ")", ")", "\n", "output", "=", "torch", ".", "tanh", "(", "block", "[", "str", "(", "self", ".", "srb_nums", "+", "3", ")", "]", ")", "\n", "return", "output", "\n", "\n", "\n", "", "", "class", "RecurrentResidualBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "RecurrentResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "gru1", "=", "GruBlock", "(", "channels", ",", "channels", ")", "\n", "# self.prelu = nn.ReLU()", "\n", "self", ".", "prelu", "=", "mish", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.RecurrentResidualBlock.__init__": [[239, 254], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "tbsrn.GruBlock", "tbsrn.mish", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "tbsrn.GruBlock", "tbsrn.FeatureEnhancer", "tbsrn.RecurrentResidualBlock.parameters", "p.dim", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["self", ".", "gru2", "=", "GruBlock", "(", "channels", ",", "channels", ")", "\n", "self", ".", "feature_enhancer", "=", "FeatureEnhancer", "(", ")", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "self", ".", "conv1", "(", "x", ")", "\n", "residual", "=", "self", ".", "bn1", "(", "residual", ")", "\n", "residual", "=", "self", ".", "prelu", "(", "residual", ")", "\n", "residual", "=", "self", ".", "conv2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "bn2", "(", "residual", ")", "\n", "\n", "size", "=", "residual", ".", "shape", "\n", "residual", "=", "residual", ".", "view", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.RecurrentResidualBlock.forward": [[255, 267], ["tbsrn.RecurrentResidualBlock.conv1", "tbsrn.RecurrentResidualBlock.bn1", "tbsrn.RecurrentResidualBlock.prelu", "tbsrn.RecurrentResidualBlock.conv2", "tbsrn.RecurrentResidualBlock.bn2", "residual.resize.resize.view", "tbsrn.RecurrentResidualBlock.feature_enhancer", "residual.resize.resize.resize"], "methods", ["None"], ["residual", "=", "self", ".", "feature_enhancer", "(", "residual", ")", "\n", "residual", "=", "residual", ".", "resize", "(", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "size", "[", "2", "]", ",", "size", "[", "3", "]", ")", "\n", "return", "x", "+", "residual", "\n", "\n", "\n", "\n", "", "", "class", "UpsampleBLock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "up_scale", ")", ":", "\n", "        ", "super", "(", "UpsampleBLock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "*", "up_scale", "**", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "up_scale", ")", "\n", "# self.prelu = nn.ReLU()", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.UpsampleBLock.__init__": [[271, 278], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PixelShuffle", "torch.nn.PixelShuffle", "tbsrn.mish"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "pixel_shuffle", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "mish", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.UpsampleBLock.forward": [[279, 284], ["tbsrn.UpsampleBLock.conv", "tbsrn.UpsampleBLock.pixel_shuffle", "tbsrn.UpsampleBLock.prelu"], "methods", ["None"], ["        ", "super", "(", "mish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activated", "=", "True", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "activated", ":", "\n", "            ", "x", "=", "x", "*", "(", "torch", ".", "tanh", "(", "F", ".", "softplus", "(", "x", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.mish.__init__": [[287, 290], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["\n", "", "", "class", "GruBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "GruBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.mish.forward": [[291, 295], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.softplus", "torch.softplus"], "methods", ["None"], ["assert", "out_channels", "%", "2", "==", "0", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "out_channels", ",", "out_channels", "//", "2", ",", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.GruBlock.__init__": [[298, 303], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GRU", "torch.nn.GRU"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", "# b, w, h, c", "\n", "b", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "b", "[", "0", "]", "*", "b", "[", "1", "]", ",", "b", "[", "2", "]", ",", "b", "[", "3", "]", ")", "# b*w, h, c", "\n", "x", ",", "_", "=", "self", ".", "gru", "(", "x", ")", "\n", "# x = self.gru(x)[0]", "\n", "x", "=", "x", ".", "view", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ",", "b", "[", "2", "]", ",", "b", "[", "3", "]", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.GruBlock.forward": [[304, 315], ["tbsrn.GruBlock.conv1", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.view", "tbsrn.GruBlock.gru", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.permute"], "methods", ["None"], ["x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "x", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.clones": [[19, 22], ["torch.nn.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["    ", "\"Produce N identical layers.\"", "\n", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.positionalencoding2d": [[40, 63], ["torch.zeros", "torch.zeros", "int", "torch.exp", "torch.exp", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.sin().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "ValueError", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.sin().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "math.log", "math.log", "torch.sin().transpose", "torch.sin().transpose", "torch.cos().transpose", "torch.cos().transpose", "torch.sin().transpose", "torch.sin().transpose", "torch.cos().transpose", "torch.cos().transpose", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.cos", "torch.cos"], "function", ["None"], ["    ", "\"\"\"\n    :param d_model: dimension of the model\n    :param height: height of the positions\n    :param width: width of the positions\n    :return: d_model*height*width position matrix\n    \"\"\"", "\n", "if", "d_model", "%", "4", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot use sin/cos positional encoding with \"", "\n", "\"odd dimension (got dim={:d})\"", ".", "format", "(", "d_model", ")", ")", "\n", "", "pe", "=", "torch", ".", "zeros", "(", "d_model", ",", "height", ",", "width", ")", "\n", "# Each dimension use half of d_model", "\n", "d_model", "=", "int", "(", "d_model", "/", "2", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0.", ",", "d_model", ",", "2", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pos_w", "=", "torch", ".", "arange", "(", "0.", ",", "width", ")", ".", "unsqueeze", "(", "1", ")", "\n", "pos_h", "=", "torch", ".", "arange", "(", "0.", ",", "height", ")", ".", "unsqueeze", "(", "1", ")", "\n", "pe", "[", "0", ":", "d_model", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "sin", "(", "pos_w", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "height", ",", "1", ")", "\n", "pe", "[", "1", ":", "d_model", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "cos", "(", "pos_w", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "height", ",", "1", ")", "\n", "pe", "[", "d_model", ":", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "sin", "(", "pos_h", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "width", ")", "\n", "pe", "[", "d_model", "+", "1", ":", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "cos", "(", "pos_h", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "width", ")", "\n", "\n", "return", "pe", "\n", "\n", "", "class", "FeatureEnhancer", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.tbsrn.attention": [[135, 154], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "math.sqrt", "math.sqrt", "scores.masked_fill.masked_fill", "dropout", "torch.matmul", "torch.matmul", "key.transpose", "float"], "function", ["None"], ["d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# print(mask)", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n", "\n", "", "class", "PositionwiseFeedForward", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"Implements FFN equation.\"", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.srcnn.SRCNN.__init__": [[19, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "tps_spatial_transformer.TPSSpatialTransformer", "stn_head.STNHead", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "in_planes", "=", "3", ",", "STN", "=", "False", ",", "height", "=", "32", ",", "width", "=", "128", ")", ":", "\n", "        ", "super", "(", "SRCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upscale_factor", "=", "scale_factor", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "64", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "in_planes", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", ",", "width", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "3", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.srcnn.SRCNN.forward": [[43, 55], ["srcnn.SRCNN.conv1", "srcnn.SRCNN.relu1", "srcnn.SRCNN.conv2", "srcnn.SRCNN.relu2", "srcnn.SRCNN.conv3", "srcnn.SRCNN.stn_head", "srcnn.SRCNN.tps", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stn", ":", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "upscale_factor", ")", "\n", "", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.srresnet.SRResNet.__init__": [[15, 52], ["int", "torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "srresnet.ResidualBlock", "srresnet.ResidualBlock", "srresnet.ResidualBlock", "srresnet.ResidualBlock", "srresnet.ResidualBlock", "torch.nn.Sequential", "torch.nn.Sequential", "block8.append", "torch.nn.Sequential", "torch.nn.Sequential", "math.log", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "srresnet.UpsampleBLock", "torch.nn.Conv2d", "torch.nn.Conv2d", "tps_spatial_transformer.TPSSpatialTransformer", "stn_head.STNHead", "range", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "STN", "=", "False", ",", "width", "=", "128", ",", "height", "=", "32", ",", "mask", "=", "False", ")", ":", "\n", "        ", "upsample_block_num", "=", "int", "(", "math", ".", "log", "(", "scale_factor", ",", "2", ")", ")", "\n", "super", "(", "SRResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", "=", "3", "\n", "if", "mask", ":", "\n", "            ", "in_planes", "=", "4", "\n", "", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "64", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ",", "\n", "nn", ".", "PReLU", "(", ")", "\n", ")", "\n", "self", ".", "block2", "=", "ResidualBlock", "(", "64", ")", "\n", "self", ".", "block3", "=", "ResidualBlock", "(", "64", ")", "\n", "self", ".", "block4", "=", "ResidualBlock", "(", "64", ")", "\n", "self", ".", "block5", "=", "ResidualBlock", "(", "64", ")", "\n", "self", ".", "block6", "=", "ResidualBlock", "(", "64", ")", "\n", "self", ".", "block7", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", ")", "\n", "block8", "=", "[", "UpsampleBLock", "(", "64", ",", "2", ")", "for", "_", "in", "range", "(", "upsample_block_num", ")", "]", "\n", "block8", ".", "append", "(", "nn", ".", "Conv2d", "(", "64", ",", "in_planes", ",", "kernel_size", "=", "9", ",", "padding", "=", "4", ")", ")", "\n", "self", ".", "block8", "=", "nn", ".", "Sequential", "(", "*", "block8", ")", "\n", "self", ".", "tps_inputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "tps_outputsize", "=", "[", "height", "//", "scale_factor", ",", "width", "//", "scale_factor", "]", "\n", "num_control_points", "=", "20", "\n", "tps_margins", "=", "[", "0.05", ",", "0.05", "]", "\n", "self", ".", "stn", "=", "STN", "\n", "if", "self", ".", "stn", ":", "\n", "            ", "self", ".", "tps", "=", "TPSSpatialTransformer", "(", "\n", "output_image_size", "=", "tuple", "(", "tps_outputsize", ")", ",", "\n", "num_control_points", "=", "num_control_points", ",", "\n", "margins", "=", "tuple", "(", "tps_margins", ")", ")", "\n", "\n", "self", ".", "stn_head", "=", "STNHead", "(", "\n", "in_planes", "=", "in_planes", ",", "\n", "num_ctrlpoints", "=", "num_control_points", ",", "\n", "activation", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.srresnet.SRResNet.forward": [[53, 68], ["srresnet.SRResNet.block1", "srresnet.SRResNet.block2", "srresnet.SRResNet.block3", "srresnet.SRResNet.block4", "srresnet.SRResNet.block5", "srresnet.SRResNet.block6", "srresnet.SRResNet.block7", "srresnet.SRResNet.block8", "torch.tanh", "torch.tanh", "srresnet.SRResNet.stn_head", "srresnet.SRResNet.tps"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# embed()", "\n", "        ", "if", "self", ".", "stn", "and", "self", ".", "training", ":", "\n", "            ", "_", ",", "ctrl_points_x", "=", "self", ".", "stn_head", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "tps", "(", "x", ",", "ctrl_points_x", ")", "\n", "", "block1", "=", "self", ".", "block1", "(", "x", ")", "\n", "block2", "=", "self", ".", "block2", "(", "block1", ")", "\n", "block3", "=", "self", ".", "block3", "(", "block2", ")", "\n", "block4", "=", "self", ".", "block4", "(", "block3", ")", "\n", "block5", "=", "self", ".", "block5", "(", "block4", ")", "\n", "block6", "=", "self", ".", "block6", "(", "block5", ")", "\n", "block7", "=", "self", ".", "block7", "(", "block6", ")", "\n", "block8", "=", "self", ".", "block8", "(", "block1", "+", "block7", ")", "\n", "\n", "return", "F", ".", "tanh", "(", "block8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.srresnet.ResidualBlock.__init__": [[71, 78], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.srresnet.ResidualBlock.forward": [[79, 87], ["srresnet.ResidualBlock.conv1", "srresnet.ResidualBlock.bn1", "srresnet.ResidualBlock.prelu", "srresnet.ResidualBlock.conv2", "srresnet.ResidualBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "self", ".", "conv1", "(", "x", ")", "\n", "residual", "=", "self", ".", "bn1", "(", "residual", ")", "\n", "residual", "=", "self", ".", "prelu", "(", "residual", ")", "\n", "residual", "=", "self", ".", "conv2", "(", "residual", ")", "\n", "residual", "=", "self", ".", "bn2", "(", "residual", ")", "\n", "\n", "return", "x", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.srresnet.UpsampleBLock.__init__": [[90, 95], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PixelShuffle", "torch.nn.PixelShuffle", "torch.nn.PReLU", "torch.nn.PReLU"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "up_scale", ")", ":", "\n", "        ", "super", "(", "UpsampleBLock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", "*", "up_scale", "**", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "pixel_shuffle", "=", "nn", ".", "PixelShuffle", "(", "up_scale", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.srresnet.UpsampleBLock.forward": [[96, 101], ["srresnet.UpsampleBLock.conv", "srresnet.UpsampleBLock.pixel_shuffle", "srresnet.UpsampleBLock.prelu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "pixel_shuffle", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.srresnet.Discriminator.__init__": [[104, 142], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "1024", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.srresnet.Discriminator.forward": [[144, 147], ["x.size", "torch.sigmoid", "torch.sigmoid", "srresnet.Discriminator.net().view", "srresnet.Discriminator.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "return", "F", ".", "sigmoid", "(", "self", ".", "net", "(", "x", ")", ".", "view", "(", "batch_size", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.ResidualDenseBlock_5C.__init__": [[17, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", "=", "64", ",", "gc", "=", "32", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "ResidualDenseBlock_5C", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# gc: growth channel, i.e. intermediate channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "nf", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "nf", "+", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "nf", "+", "2", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "nf", "+", "3", "*", "gc", ",", "gc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "nf", "+", "4", "*", "gc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.ResidualDenseBlock_5C.forward": [[30, 37], ["esrgan.ResidualDenseBlock_5C.lrelu", "esrgan.ResidualDenseBlock_5C.lrelu", "esrgan.ResidualDenseBlock_5C.lrelu", "esrgan.ResidualDenseBlock_5C.lrelu", "esrgan.ResidualDenseBlock_5C.conv5", "esrgan.ResidualDenseBlock_5C.conv1", "esrgan.ResidualDenseBlock_5C.conv2", "esrgan.ResidualDenseBlock_5C.conv3", "esrgan.ResidualDenseBlock_5C.conv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "lrelu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x2", "=", "self", ".", "lrelu", "(", "self", ".", "conv2", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ")", ",", "1", ")", ")", ")", "\n", "x3", "=", "self", ".", "lrelu", "(", "self", ".", "conv3", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ")", ",", "1", ")", ")", ")", "\n", "x4", "=", "self", ".", "lrelu", "(", "self", ".", "conv4", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ")", ",", "1", ")", ")", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "torch", ".", "cat", "(", "(", "x", ",", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "1", ")", ")", "\n", "return", "x5", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.RRDB.__init__": [[42, 47], ["torch.Module.__init__", "esrgan.ResidualDenseBlock_5C", "esrgan.ResidualDenseBlock_5C", "esrgan.ResidualDenseBlock_5C"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["def", "__init__", "(", "self", ",", "nf", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "RDB1", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB2", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "self", ".", "RDB3", "=", "ResidualDenseBlock_5C", "(", "nf", ",", "gc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.RRDB.forward": [[48, 53], ["esrgan.RRDB.RDB1", "esrgan.RRDB.RDB2", "esrgan.RRDB.RDB3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "RDB1", "(", "x", ")", "\n", "out", "=", "self", ".", "RDB2", "(", "out", ")", "\n", "out", "=", "self", ".", "RDB3", "(", "out", ")", "\n", "return", "out", "*", "0.2", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.RRDBNet.__init__": [[56, 74], ["torch.Module.__init__", "functools.partial", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "esrgan.make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "math.log", "setattr", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.make_layer"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "in_nc", "=", "3", ",", "out_nc", "=", "3", ",", "nf", "=", "64", ",", "nb", "=", "23", ",", "gc", "=", "32", ")", ":", "\n", "        ", "super", "(", "RRDBNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "RRDB_block_f", "=", "functools", ".", "partial", "(", "RRDB", ",", "nf", "=", "nf", ",", "gc", "=", "gc", ")", "\n", "self", ".", "upsample_block_num", "=", "int", "(", "math", ".", "log", "(", "scale_factor", ",", "2", ")", ")", "\n", "self", ".", "conv_first", "=", "nn", ".", "Conv2d", "(", "in_nc", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "RRDB_trunk", "=", "make_layer", "(", "RRDB_block_f", ",", "nb", ")", "\n", "self", ".", "trunk_conv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "#### upsampling", "\n", "# self.upconv1 = nn.Conv2d(nf, nf, 3, 1, 1, bias=True)", "\n", "# self.upconv2 = nn.Conv2d(nf, nf, 3, 1, 1, bias=True)", "\n", "# self.upconv3 = nn.Conv2d(nf, nf, 3, 1, 1, bias=True)", "\n", "for", "i", "in", "range", "(", "self", ".", "upsample_block_num", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'upconv%d'", "%", "(", "i", "+", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", ")", "\n", "", "self", ".", "HRconv", "=", "nn", ".", "Conv2d", "(", "nf", ",", "nf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "nf", ",", "out_nc", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "lrelu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.RRDBNet.forward": [[75, 87], ["esrgan.RRDBNet.conv_first", "esrgan.RRDBNet.trunk_conv", "range", "esrgan.RRDBNet.conv_last", "esrgan.RRDBNet.RRDB_trunk", "esrgan.RRDBNet.lrelu", "esrgan.RRDBNet.lrelu", "esrgan.RRDBNet.HRconv", "getattr", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fea", "=", "self", ".", "conv_first", "(", "x", ")", "\n", "trunk", "=", "self", ".", "trunk_conv", "(", "self", ".", "RRDB_trunk", "(", "fea", ")", ")", "\n", "fea", "=", "fea", "+", "trunk", "\n", "# fea = self.lrelu(self.upconv1(F.interpolate(fea, scale_factor=2, mode='nearest')))", "\n", "# fea = self.lrelu(self.upconv2(F.interpolate(fea, scale_factor=2, mode='nearest')))", "\n", "# fea = self.lrelu(self.upconv3(F.interpolate(fea, scale_factor=2, mode='nearest')))", "\n", "for", "i", "in", "range", "(", "self", ".", "upsample_block_num", ")", ":", "\n", "            ", "fea", "=", "self", ".", "lrelu", "(", "getattr", "(", "self", ",", "'upconv%d'", "%", "(", "i", "+", "1", ")", ")", "(", "F", ".", "interpolate", "(", "fea", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ")", ")", "\n", "", "out", "=", "self", ".", "conv_last", "(", "self", ".", "lrelu", "(", "self", ".", "HRconv", "(", "fea", ")", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.SubDiscriminator.__init__": [[108, 135], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "esrgan.conv_block", "esrgan.conv_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.conv_block", "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.conv_block"], ["    ", "def", "__init__", "(", "self", ",", "act_type", "=", "'leakyrelu'", ",", "num_conv_block", "=", "4", ")", ":", "\n", "        ", "super", "(", "SubDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block", "=", "[", "]", "\n", "\n", "in_channels", "=", "3", "\n", "out_channels", "=", "64", "\n", "\n", "for", "_", "in", "range", "(", "num_conv_block", ")", ":", "\n", "            ", "block", "+=", "conv_block", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "act_type", "=", "act_type", ",", "pad_type", "=", "None", ",", "\n", "norm_type", "=", "'instancenorm'", ")", "\n", "in_channels", "=", "out_channels", "\n", "block", "+=", "conv_block", "(", "in_channels", ",", "out_channels", ",", "stride", "=", "2", ",", "act_type", "=", "act_type", ",", "n_padding", "=", "1", ")", "\n", "out_channels", "*=", "2", "\n", "\n", "", "out_channels", "//=", "2", "\n", "in_channels", "=", "out_channels", "\n", "\n", "block", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ")", "]", "\n", "\n", "self", ".", "feature_extraction", "=", "nn", ".", "Sequential", "(", "*", "block", ")", "\n", "\n", "self", ".", "classification", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "9", "*", "9", ",", "100", ")", ",", "\n", "nn", ".", "Linear", "(", "100", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.SubDiscriminator.forward": [[137, 142], ["esrgan.SubDiscriminator.feature_extraction", "esrgan.SubDiscriminator.view", "esrgan.SubDiscriminator.classification", "esrgan.SubDiscriminator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "feature_extraction", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classification", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.make_layer": [[9, 14], ["range", "torch.Sequential", "layers.append", "block"], "function", ["None"], ["def", "make_layer", "(", "block", ",", "n_layers", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "layers", ".", "append", "(", "block", "(", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.model.esrgan.conv_block": [[89, 105], ["torch.Conv2d", "get_n_padding", "padding", "normalization", "activation", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential"], "function", ["None"], ["", "", "def", "conv_block", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "True", ",", "\n", "act_type", "=", "'leakyrelu'", ",", "pad_type", "=", "'reflection'", ",", "norm_type", "=", "None", ",", "negative_slope", "=", "0.2", ",", "n_prelu", "=", "1", ",", "\n", "inplace", "=", "True", ",", "n_padding", "=", "None", ")", ":", "\n", "    ", "n_pad", "=", "n_padding", "if", "n_padding", "else", "get_n_padding", "(", "kernel_size", ",", "dilation", ")", "\n", "pad", "=", "padding", "(", "pad_type", ",", "n_pad", ")", "if", "pad_type", "else", "None", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "0", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "norm", "=", "normalization", "(", "norm_type", ",", "out_channels", ")", "if", "norm_type", "else", "None", "\n", "act", "=", "activation", "(", "act_type", ",", "inplace", "=", "inplace", ",", "negative_slope", "=", "negative_slope", ",", "n_prelu", "=", "n_prelu", ")", "if", "act_type", "else", "None", "\n", "if", "(", "norm", "is", "None", ")", "and", "(", "act_type", "is", "None", ")", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "pad", ",", "conv", ")", "\n", "", "if", "pad_type", "is", "None", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "conv", ",", "act", ")", "\n", "", "if", "norm", "is", "None", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "pad", ",", "conv", ",", "act", ")", "\n", "", "else", ":", "\n", "        ", "return", "nn", ".", "Sequential", "(", "pad", ",", "conv", ",", "norm", ",", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.data.lmdbReader.lmdbDataset.__init__": [[14, 34], ["lmdb.open", "print", "sys.exit", "lmdbReader.lmdbDataset.env.begin", "int", "txn.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "transform", "=", "None", ",", "alphabet", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "'num-samples'", ".", "encode", "(", ")", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "alphabet", "=", "alphabet", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.data.lmdbReader.lmdbDataset.__len__": [[35, 37], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.data.lmdbReader.lmdbDataset.__getitem__": [[38, 72], ["len", "len", "lmdbReader.lmdbDataset.env.begin", "txn.get", "six.BytesIO", "six.BytesIO.write", "six.BytesIO.seek", "str", "label.lower.lower.lower", "len", "img_key.encode", "PIL.Image.open", "txn.get().decode", "len", "lmdbReader.lmdbDataset.transform", "print", "txn.get", "random.randint", "label_key.encode", "len"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", ">", "len", "(", "self", ")", ":", "\n", "            ", "index", "=", "len", "(", "self", ")", "-", "1", "\n", "", "assert", "index", "<=", "len", "(", "self", ")", ",", "'Error %d'", "%", "index", "\n", "index", "+=", "1", "\n", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "img_key", "=", "'image-%09d'", "%", "index", "\n", "imgbuf", "=", "txn", ".", "get", "(", "img_key", ".", "encode", "(", ")", ")", "\n", "\n", "buf", "=", "six", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "try", ":", "\n", "                ", "img", "=", "Image", ".", "open", "(", "buf", ")", "\n", "", "except", "IOError", ":", "\n", "                ", "print", "(", "'Corrupted image for %d'", "%", "index", ")", "\n", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "", "label_key", "=", "'label-%09d'", "%", "index", "\n", "label", "=", "str", "(", "txn", ".", "get", "(", "label_key", ".", "encode", "(", ")", ")", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "\n", "if", "label", "not", "in", "self", ".", "alphabet", ":", "\n", "                ", "return", "self", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", "-", "1", ")", "]", "\n", "\n", "", "if", "len", "(", "label", ")", "<=", "0", ":", "\n", "                ", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "", "label", "+=", "'$'", "\n", "label", "=", "label", ".", "lower", "(", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "", "return", "(", "img", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.data.lmdbReader.resizeNormalize.__init__": [[75, 80], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.data.lmdbReader.resizeNormalize.__call__": [[81, 87], ["lmdbReader.resizeNormalize.resize", "lmdbReader.resizeNormalize.toTensor", "lmdbReader.resizeNormalize.sub_().div_", "lmdbReader.resizeNormalize.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "img", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "img", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.scene-text-telescope.main.main": [[8, 16], ["interfaces.super_resolution.TextSR", "interfaces.super_resolution.TextSR.test", "interfaces.super_resolution.TextSR.demo", "interfaces.super_resolution.TextSR.train"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.test", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.demo", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.train"], ["def", "main", "(", "config", ",", "args", ")", ":", "\n", "    ", "Mission", "=", "TextSR", "(", "config", ",", "args", ")", "\n", "if", "args", ".", "test", ":", "\n", "        ", "Mission", ".", "test", "(", ")", "\n", "", "elif", "args", ".", "demo", ":", "\n", "        ", "Mission", ".", "demo", "(", ")", "\n", "", "else", ":", "\n", "        ", "Mission", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_moran.strLabelConverterForAttention.__init__": [[17, 27], ["alphabet.split", "enumerate"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphabet", ",", "sep", ")", ":", "\n", "        ", "self", ".", "_scanned_list", "=", "False", "\n", "self", ".", "_out_of_list", "=", "''", "\n", "self", ".", "_ignore_case", "=", "True", "\n", "self", ".", "sep", "=", "sep", "\n", "self", ".", "alphabet", "=", "alphabet", ".", "split", "(", "sep", ")", "\n", "\n", "self", ".", "dict", "=", "{", "}", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "self", ".", "alphabet", ")", ":", "\n", "            ", "self", ".", "dict", "[", "item", "]", "=", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_moran.strLabelConverterForAttention.scan": [[28, 52], ["range", "tuple", "len", "range", "text.append", "len", "[].lower", "open", "open.write", "open.close", "print"], "methods", ["None"], ["", "", "def", "scan", "(", "self", ",", "text", ")", ":", "\n", "# print(text)", "\n", "        ", "text_tmp", "=", "text", "\n", "text", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "text_tmp", ")", ")", ":", "\n", "            ", "text_result", "=", "''", "\n", "for", "j", "in", "range", "(", "len", "(", "text_tmp", "[", "i", "]", ")", ")", ":", "\n", "                ", "chara", "=", "text_tmp", "[", "i", "]", "[", "j", "]", ".", "lower", "(", ")", "if", "self", ".", "_ignore_case", "else", "text_tmp", "[", "i", "]", "[", "j", "]", "\n", "if", "chara", "not", "in", "self", ".", "alphabet", ":", "\n", "                    ", "if", "chara", "in", "self", ".", "_out_of_list", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "self", ".", "_out_of_list", "+=", "chara", "\n", "file_out_of_list", "=", "open", "(", "\"out_of_list.txt\"", ",", "\"a+\"", ")", "\n", "file_out_of_list", ".", "write", "(", "chara", "+", "\"\\n\"", ")", "\n", "file_out_of_list", ".", "close", "(", ")", "\n", "print", "(", "'\" %s \" is not in alphabet...'", "%", "chara", ")", "\n", "continue", "\n", "", "", "else", ":", "\n", "                    ", "text_result", "+=", "chara", "\n", "", "", "text", ".", "append", "(", "text_result", ")", "\n", "", "text_result", "=", "tuple", "(", "text", ")", "\n", "self", ".", "_scanned_list", "=", "True", "\n", "return", "text_result", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_moran.strLabelConverterForAttention.encode": [[53, 78], ["isinstance", "utils_moran.strLabelConverterForAttention.scan", "isinstance", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "utils_moran.strLabelConverterForAttention.encode", "len", "char.lower"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_moran.strLabelConverterForAttention.scan", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode"], ["", "def", "encode", "(", "self", ",", "text", ",", "scanned", "=", "True", ")", ":", "\n", "        ", "\"\"\"Support batch or single str.\n\n        Args:\n            text (str or list of str): texts to convert.\n\n        Returns:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n        \"\"\"", "\n", "self", ".", "_scanned_list", "=", "scanned", "\n", "if", "not", "self", ".", "_scanned_list", ":", "\n", "            ", "text", "=", "self", ".", "scan", "(", "text", ")", "\n", "\n", "", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "text", "=", "[", "\n", "self", ".", "dict", "[", "char", ".", "lower", "(", ")", "if", "self", ".", "_ignore_case", "else", "char", "]", "\n", "for", "char", "in", "text", "\n", "]", "\n", "length", "=", "[", "len", "(", "text", ")", "]", "\n", "", "elif", "isinstance", "(", "text", ",", "collections", ".", "Iterable", ")", ":", "\n", "            ", "length", "=", "[", "len", "(", "s", ")", "for", "s", "in", "text", "]", "\n", "text", "=", "''", ".", "join", "(", "text", ")", "\n", "text", ",", "_", "=", "self", ".", "encode", "(", "text", ")", "\n", "", "return", "(", "torch", ".", "LongTensor", "(", "text", ")", ",", "torch", ".", "LongTensor", "(", "length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_moran.strLabelConverterForAttention.decode": [[79, 108], ["length.numel", "range", "t.numel", "t.numel", "t.numel", "length.sum", "t.numel", "length.sum", "length.numel", "texts.append", "utils_moran.strLabelConverterForAttention.decode", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.decode"], ["", "def", "decode", "(", "self", ",", "t", ",", "length", ")", ":", "\n", "        ", "\"\"\"Decode encoded texts back into strs.\n\n        Args:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n\n        Raises:\n            AssertionError: when the texts and its length does not match.\n\n        Returns:\n            text (str or list of str): texts to convert.\n        \"\"\"", "\n", "if", "length", ".", "numel", "(", ")", "==", "1", ":", "\n", "            ", "length", "=", "length", "[", "0", "]", "\n", "assert", "t", ".", "numel", "(", ")", "==", "length", ",", "\"text with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ")", "\n", "return", "''", ".", "join", "(", "[", "self", ".", "alphabet", "[", "i", "]", "for", "i", "in", "t", "]", ")", "\n", "", "else", ":", "\n", "# batch mode", "\n", "            ", "assert", "t", ".", "numel", "(", ")", "==", "length", ".", "sum", "(", ")", ",", "\"texts with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ".", "sum", "(", ")", ")", "\n", "texts", "=", "[", "]", "\n", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "length", ".", "numel", "(", ")", ")", ":", "\n", "                ", "l", "=", "length", "[", "i", "]", "\n", "texts", ".", "append", "(", "\n", "self", ".", "decode", "(", "\n", "t", "[", "index", ":", "index", "+", "l", "]", ",", "torch", ".", "LongTensor", "(", "[", "l", "]", ")", ")", ")", "\n", "index", "+=", "l", "\n", "", "return", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_moran.averager.__init__": [[112, 114], ["utils_moran.averager.reset"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_moran.averager.add": [[115, 125], ["isinstance", "v.sum.sum.data.numel", "v.sum.sum.data.sum", "isinstance", "v.sum.sum.numel", "v.sum.sum.sum"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "v", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "            ", "count", "=", "v", ".", "data", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "data", ".", "sum", "(", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "count", "=", "v", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "sum", "(", ")", "\n", "\n", "", "self", ".", "n_count", "+=", "count", "\n", "self", ".", "sum", "+=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_moran.averager.reset": [[126, 129], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_count", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_moran.averager.val": [[130, 135], ["float"], "methods", ["None"], ["", "def", "val", "(", "self", ")", ":", "\n", "        ", "res", "=", "0", "\n", "if", "self", ".", "n_count", "!=", "0", ":", "\n", "            ", "res", "=", "self", ".", "sum", "/", "float", "(", "self", ".", "n_count", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_moran.loadData": [[136, 143], ["utils_moran.get_torch_version", "v.resize_().copy_", "v.data.resize_().copy_", "v.resize_", "v.data.resize_", "data.size", "data.size"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_moran.get_torch_version"], ["", "", "def", "loadData", "(", "v", ",", "data", ")", ":", "\n", "    ", "major", ",", "_", "=", "get_torch_version", "(", ")", "\n", "\n", "if", "major", ">=", "1", ":", "\n", "        ", "v", ".", "resize_", "(", "data", ".", "size", "(", ")", ")", ".", "copy_", "(", "data", ")", "\n", "", "else", ":", "\n", "        ", "v", ".", "data", ".", "resize_", "(", "data", ".", "size", "(", ")", ")", ".", "copy_", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_moran.get_torch_version": [[144, 151], ["str().split", "int", "int", "str"], "function", ["None"], ["", "", "def", "get_torch_version", "(", ")", ":", "\n", "    ", "\"\"\"\n    Find pytorch version and return it as integers\n    for major and minor versions\n    \"\"\"", "\n", "torch_version", "=", "str", "(", "torch", ".", "__version__", ")", ".", "split", "(", "\".\"", ")", "\n", "return", "int", "(", "torch_version", "[", "0", "]", ")", ",", "int", "(", "torch_version", "[", "1", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_crnn.strLabelConverter.__init__": [[21, 31], ["enumerate", "alphabet.lower.lower.lower"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphabet", ",", "ignore_case", "=", "True", ")", ":", "\n", "        ", "self", ".", "_ignore_case", "=", "ignore_case", "\n", "if", "self", ".", "_ignore_case", ":", "\n", "            ", "alphabet", "=", "alphabet", ".", "lower", "(", ")", "\n", "", "self", ".", "alphabet", "=", "alphabet", "+", "'-'", "# for `-1` index", "\n", "\n", "self", ".", "dict", "=", "{", "}", "\n", "for", "i", ",", "char", "in", "enumerate", "(", "alphabet", ")", ":", "\n", "# NOTE: 0 is reserved for 'blank' required by wrap_ctc", "\n", "            ", "self", ".", "dict", "[", "char", "]", "=", "i", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_crnn.strLabelConverter.encode": [[32, 53], ["isinstance", "isinstance", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "len", "utils_crnn.strLabelConverter.encode", "len", "char.lower"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode"], ["", "", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Support batch or single str.\n\n        Args:\n            text (str or list of str): texts to convert.\n\n        Returns:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n        \"\"\"", "\n", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "text", "=", "[", "\n", "self", ".", "dict", "[", "char", ".", "lower", "(", ")", "if", "self", ".", "_ignore_case", "else", "char", "]", "\n", "for", "char", "in", "text", "\n", "]", "\n", "length", "=", "[", "len", "(", "text", ")", "]", "\n", "", "elif", "isinstance", "(", "text", ",", "collections", ".", "Iterable", ")", ":", "\n", "            ", "length", "=", "[", "len", "(", "s", ")", "for", "s", "in", "text", "]", "\n", "text", "=", "''", ".", "join", "(", "text", ")", "\n", "text", ",", "_", "=", "self", ".", "encode", "(", "text", ")", "\n", "", "return", "(", "torch", ".", "IntTensor", "(", "text", ")", ",", "torch", ".", "IntTensor", "(", "length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_crnn.strLabelConverter.decode": [[54, 90], ["length.numel", "range", "t.numel", "t.numel", "range", "t.numel", "length.sum", "t.numel", "length.sum", "length.numel", "texts.append", "utils_crnn.strLabelConverter.decode", "char_list.append", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.decode"], ["", "def", "decode", "(", "self", ",", "t", ",", "length", ",", "raw", "=", "False", ")", ":", "\n", "        ", "\"\"\"Decode encoded texts back into strs.\n\n        Args:\n            torch.IntTensor [length_0 + length_1 + ... length_{n - 1}]: encoded texts.\n            torch.IntTensor [n]: length of each text.\n\n        Raises:\n            AssertionError: when the texts and its length does not match.\n\n        Returns:\n            text (str or list of str): texts to convert.\n        \"\"\"", "\n", "if", "length", ".", "numel", "(", ")", "==", "1", ":", "\n", "            ", "length", "=", "length", "[", "0", "]", "\n", "assert", "t", ".", "numel", "(", ")", "==", "length", ",", "\"text with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ")", "\n", "if", "raw", ":", "\n", "                ", "return", "''", ".", "join", "(", "[", "self", ".", "alphabet", "[", "i", "-", "1", "]", "for", "i", "in", "t", "]", ")", "\n", "", "else", ":", "\n", "                ", "char_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "length", ")", ":", "\n", "                    ", "if", "t", "[", "i", "]", "!=", "0", "and", "(", "not", "(", "i", ">", "0", "and", "t", "[", "i", "-", "1", "]", "==", "t", "[", "i", "]", ")", ")", ":", "\n", "                        ", "char_list", ".", "append", "(", "self", ".", "alphabet", "[", "t", "[", "i", "]", "-", "1", "]", ")", "\n", "", "", "return", "''", ".", "join", "(", "char_list", ")", "\n", "", "", "else", ":", "\n", "# batch mode", "\n", "            ", "assert", "t", ".", "numel", "(", ")", "==", "length", ".", "sum", "(", ")", ",", "\"texts with length: {} does not match declared length: {}\"", ".", "format", "(", "t", ".", "numel", "(", ")", ",", "length", ".", "sum", "(", ")", ")", "\n", "texts", "=", "[", "]", "\n", "index", "=", "0", "\n", "for", "i", "in", "range", "(", "length", ".", "numel", "(", ")", ")", ":", "\n", "                ", "l", "=", "length", "[", "i", "]", "\n", "texts", ".", "append", "(", "\n", "self", ".", "decode", "(", "\n", "t", "[", "index", ":", "index", "+", "l", "]", ",", "torch", ".", "IntTensor", "(", "[", "l", "]", ")", ",", "raw", "=", "raw", ")", ")", "\n", "index", "+=", "l", "\n", "", "return", "texts", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_crnn.averager.__init__": [[95, 97], ["utils_crnn.averager.reset"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_crnn.averager.add": [[98, 108], ["isinstance", "v.sum.sum.data.numel", "v.sum.sum.data.sum", "isinstance", "v.sum.sum.numel", "v.sum.sum.sum"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "v", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "            ", "count", "=", "v", ".", "data", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "data", ".", "sum", "(", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "count", "=", "v", ".", "numel", "(", ")", "\n", "v", "=", "v", ".", "sum", "(", ")", "\n", "\n", "", "self", ".", "n_count", "+=", "count", "\n", "self", ".", "sum", "+=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_crnn.averager.reset": [[109, 112], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "n_count", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_crnn.averager.val": [[113, 118], ["float"], "methods", ["None"], ["", "def", "val", "(", "self", ")", ":", "\n", "        ", "res", "=", "0", "\n", "if", "self", ".", "n_count", "!=", "0", ":", "\n", "            ", "res", "=", "self", ".", "sum", "/", "float", "(", "self", ".", "n_count", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_crnn.oneHot": [[120, 131], ["v_length.size", "v_length.max", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "range", "v[].view().long", "v_onehot[].scatter_", "torch.FloatTensor", "torch.FloatTensor", "v[].view"], "function", ["None"], ["", "", "def", "oneHot", "(", "v", ",", "v_length", ",", "nc", ")", ":", "\n", "    ", "batchSize", "=", "v_length", ".", "size", "(", "0", ")", "\n", "maxLength", "=", "v_length", ".", "max", "(", ")", "\n", "v_onehot", "=", "torch", ".", "FloatTensor", "(", "batchSize", ",", "maxLength", ",", "nc", ")", ".", "fill_", "(", "0", ")", "\n", "acc", "=", "0", "\n", "for", "i", "in", "range", "(", "batchSize", ")", ":", "\n", "        ", "length", "=", "v_length", "[", "i", "]", "\n", "label", "=", "v", "[", "acc", ":", "acc", "+", "length", "]", ".", "view", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", "\n", "v_onehot", "[", "i", ",", ":", "length", "]", ".", "scatter_", "(", "1", ",", "label", ",", "1.0", ")", "\n", "acc", "+=", "length", "\n", "", "return", "v_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_crnn.loadData": [[133, 135], ["v.data.resize_().copy_", "v.data.resize_", "data.size"], "function", ["None"], ["", "def", "loadData", "(", "v", ",", "data", ")", ":", "\n", "    ", "v", ".", "data", ".", "resize_", "(", "data", ".", "size", "(", ")", ")", ".", "copy_", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_crnn.prettyPrint": [[137, 141], ["print", "print", "str", "v.data.type", "v.size", "v.max", "v.min", "v.mean"], "function", ["None"], ["", "def", "prettyPrint", "(", "v", ")", ":", "\n", "    ", "print", "(", "'Size {0}, Type: {1}'", ".", "format", "(", "str", "(", "v", ".", "size", "(", ")", ")", ",", "v", ".", "data", ".", "type", "(", ")", ")", ")", "\n", "print", "(", "'| Max: %f | Min: %f | Mean: %f'", "%", "(", "v", ".", "max", "(", ")", ".", "data", "[", "0", "]", ",", "v", ".", "min", "(", ")", ".", "data", "[", "0", "]", ",", "\n", "v", ".", "mean", "(", ")", ".", "data", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.utils_crnn.assureRatio": [[143, 150], ["main.size", "torch.UpsamplingBilinear2d", "nn.UpsamplingBilinear2d."], "function", ["None"], ["", "def", "assureRatio", "(", "img", ")", ":", "\n", "    ", "\"\"\"Ensure imgH <= imgW.\"\"\"", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "img", ".", "size", "(", ")", "\n", "if", "h", ">", "w", ":", "\n", "        ", "main", "=", "nn", ".", "UpsamplingBilinear2d", "(", "size", "=", "(", "h", ",", "h", ")", ",", "scale_factor", "=", "None", ")", "\n", "img", "=", "main", "(", "img", ")", "\n", "", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics._normalize_text": [[15, 18], ["text.lower", "filter"], "function", ["None"], ["def", "_normalize_text", "(", "text", ")", ":", "\n", "    ", "text", "=", "''", ".", "join", "(", "filter", "(", "lambda", "x", ":", "x", "in", "(", "string", ".", "digits", "+", "string", ".", "ascii_letters", ")", ",", "text", ")", ")", "\n", "return", "text", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.get_str_list": [[20, 69], ["utils.to_numpy.size", "len", "utils.to_numpy", "utils.to_numpy", "range", "range", "dataset.char2id.keys", "range", "pred_list.append", "range", "targ_list.append", "utils.to_numpy.dim", "utils.to_numpy.dim", "utils.to_numpy.size", "utils.to_numpy.size", "metrics._normalize_text", "metrics._normalize_text", "targ_list_i.append", "pred_list_i.append", "IPython.embed"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.labelmaps.to_numpy", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.labelmaps.to_numpy", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics._normalize_text", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics._normalize_text"], ["", "def", "get_str_list", "(", "output", ",", "target", ",", "dataset", "=", "None", ")", ":", "\n", "# label_seq", "\n", "    ", "assert", "output", ".", "dim", "(", ")", "==", "2", "and", "target", ".", "dim", "(", ")", "==", "2", "\n", "\n", "end_label", "=", "dataset", ".", "char2id", "[", "dataset", ".", "EOS", "]", "\n", "unknown_label", "=", "dataset", ".", "char2id", "[", "dataset", ".", "UNKNOWN", "]", "\n", "num_samples", ",", "max_len_labels", "=", "output", ".", "size", "(", ")", "\n", "num_classes", "=", "len", "(", "dataset", ".", "char2id", ".", "keys", "(", ")", ")", "\n", "assert", "num_samples", "==", "target", ".", "size", "(", "0", ")", "and", "max_len_labels", "==", "target", ".", "size", "(", "1", ")", "\n", "output", "=", "to_numpy", "(", "output", ")", "\n", "target", "=", "to_numpy", "(", "target", ")", "\n", "\n", "# list of char list", "\n", "pred_list", ",", "targ_list", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "pred_list_i", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_len_labels", ")", ":", "\n", "            ", "if", "output", "[", "i", ",", "j", "]", "!=", "end_label", ":", "\n", "                ", "if", "output", "[", "i", ",", "j", "]", "!=", "unknown_label", ":", "\n", "                    ", "try", ":", "\n", "                        ", "pred_list_i", ".", "append", "(", "dataset", ".", "id2char", "[", "output", "[", "i", ",", "j", "]", "]", ")", "\n", "", "except", ":", "\n", "                        ", "embed", "(", "header", "=", "'problem'", ")", "\n", "", "", "", "else", ":", "\n", "                ", "break", "\n", "", "", "pred_list", ".", "append", "(", "pred_list_i", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "targ_list_i", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "max_len_labels", ")", ":", "\n", "            ", "if", "target", "[", "i", ",", "j", "]", "!=", "end_label", ":", "\n", "                ", "if", "target", "[", "i", ",", "j", "]", "!=", "unknown_label", ":", "\n", "                    ", "targ_list_i", ".", "append", "(", "dataset", ".", "id2char", "[", "target", "[", "i", ",", "j", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "break", "\n", "", "", "targ_list", ".", "append", "(", "targ_list_i", ")", "\n", "\n", "# char list to string", "\n", "# if dataset.lowercase:", "\n", "", "if", "True", ":", "\n", "# pred_list = [''.join(pred).lower() for pred in pred_list]", "\n", "# targ_list = [''.join(targ).lower() for targ in targ_list]", "\n", "        ", "pred_list", "=", "[", "_normalize_text", "(", "pred", ")", "for", "pred", "in", "pred_list", "]", "\n", "targ_list", "=", "[", "_normalize_text", "(", "targ", ")", "for", "targ", "in", "targ_list", "]", "\n", "", "else", ":", "\n", "        ", "pred_list", "=", "[", "''", ".", "join", "(", "pred", ")", "for", "pred", "in", "pred_list", "]", "\n", "targ_list", "=", "[", "''", ".", "join", "(", "targ", ")", "for", "targ", "in", "targ_list", "]", "\n", "\n", "", "return", "pred_list", ",", "targ_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics._lexicon_search": [[71, 78], ["numpy.asarray", "numpy.argmin", "np.asarray.append", "editdistance.eval", "metrics._normalize_text", "metrics._normalize_text"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics._normalize_text", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics._normalize_text"], ["", "def", "_lexicon_search", "(", "lexicon", ",", "word", ")", ":", "\n", "    ", "edit_distances", "=", "[", "]", "\n", "for", "lex_word", "in", "lexicon", ":", "\n", "        ", "edit_distances", ".", "append", "(", "editdistance", ".", "eval", "(", "_normalize_text", "(", "lex_word", ")", ",", "_normalize_text", "(", "word", ")", ")", ")", "\n", "", "edit_distances", "=", "np", ".", "asarray", "(", "edit_distances", ",", "dtype", "=", "np", ".", "int", ")", "\n", "argmin", "=", "np", ".", "argmin", "(", "edit_distances", ")", "\n", "return", "lexicon", "[", "argmin", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.Accuracy": [[80, 86], ["metrics.get_str_list", "len", "zip", "sum"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.get_str_list"], ["", "def", "Accuracy", "(", "output", ",", "target", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "output", ",", "target", ",", "dataset", ")", "\n", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.Accuracy_with_lexicon": [[88, 125], ["metrics.get_str_list", "accuracys.append", "len", "accuracys.append", "accuracys.append", "accuracys.append", "accuracys.append", "accuracys.append", "accuracys.append", "zip", "sum", "len", "len", "metrics._lexicon_search", "len", "len", "len", "metrics._lexicon_search", "len", "len", "len", "metrics._lexicon_search", "len", "zip", "zip", "sum", "zip", "zip", "sum", "zip", "zip", "sum"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.get_str_list", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics._lexicon_search", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics._lexicon_search", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics._lexicon_search"], ["", "def", "Accuracy_with_lexicon", "(", "output", ",", "target", ",", "dataset", "=", "None", ",", "file_names", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "output", ",", "target", ",", "dataset", ")", "\n", "accuracys", "=", "[", "]", "\n", "\n", "# with no lexicon", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "# lexicon50", "\n", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons50", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "accuracys", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons50", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "# lexicon1k", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons1k", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "accuracys", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons1k", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "# lexiconfull", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexiconsfull", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "accuracys", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexiconsfull", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "acc_list", "=", "[", "(", "pred", "==", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "accuracy", "=", "1.0", "*", "sum", "(", "acc_list", ")", "/", "len", "(", "acc_list", ")", "\n", "accuracys", ".", "append", "(", "accuracy", ")", "\n", "\n", "", "return", "accuracys", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.EditDistance": [[127, 133], ["metrics.get_str_list", "sum", "editdistance.eval", "zip"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.get_str_list", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval"], ["", "def", "EditDistance", "(", "output", ",", "target", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "output", ",", "target", ",", "dataset", ")", "\n", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "eds", "=", "sum", "(", "ed_list", ")", "\n", "return", "eds", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.EditDistance_with_lexicon": [[135, 172], ["metrics.get_str_list", "sum", "eds.append", "editdistance.eval", "eds.append", "sum", "eds.append", "eds.append", "sum", "eds.append", "eds.append", "sum", "eds.append", "zip", "len", "len", "metrics._lexicon_search", "editdistance.eval", "len", "len", "metrics._lexicon_search", "editdistance.eval", "len", "len", "metrics._lexicon_search", "editdistance.eval", "zip", "zip", "zip", "zip", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.get_str_list", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics._lexicon_search", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics._lexicon_search", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics._lexicon_search", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval"], ["", "def", "EditDistance_with_lexicon", "(", "output", ",", "target", ",", "dataset", "=", "None", ",", "file_names", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "output", ",", "target", ",", "dataset", ")", "\n", "eds", "=", "[", "]", "\n", "\n", "# with no lexicon", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "# lexicon50", "\n", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons50", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "eds", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons50", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "# lexicon1k", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexicons1k", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "eds", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexicons1k", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "# lexiconfull", "\n", "", "if", "len", "(", "file_names", ")", "==", "0", "or", "len", "(", "dataset", ".", "lexiconsfull", "[", "file_names", "[", "0", "]", "]", ")", "==", "0", ":", "\n", "        ", "eds", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "refined_pred_list", "=", "[", "_lexicon_search", "(", "dataset", ".", "lexiconsfull", "[", "file_name", "]", ",", "pred", ")", "for", "file_name", ",", "pred", "in", "zip", "(", "file_names", ",", "pred_list", ")", "]", "\n", "ed_list", "=", "[", "editdistance", ".", "eval", "(", "pred", ",", "targ", ")", "for", "pred", ",", "targ", "in", "zip", "(", "refined_pred_list", ",", "targ_list", ")", "]", "\n", "ed", "=", "sum", "(", "ed_list", ")", "\n", "eds", ".", "append", "(", "ed", ")", "\n", "\n", "", "return", "eds", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.RecPostProcess": [[174, 187], ["metrics.get_str_list", "output.size", "utils.to_numpy", "enumerate", "min", "math.exp", "score_list.append", "len", "sum", "map"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.get_str_list", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.labelmaps.to_numpy"], ["", "def", "RecPostProcess", "(", "output", ",", "target", ",", "score", ",", "dataset", "=", "None", ")", ":", "\n", "    ", "pred_list", ",", "targ_list", "=", "get_str_list", "(", "output", ",", "target", ",", "dataset", ")", "\n", "max_len_labels", "=", "output", ".", "size", "(", "1", ")", "\n", "score_list", "=", "[", "]", "\n", "\n", "score", "=", "to_numpy", "(", "score", ")", "\n", "for", "i", ",", "pred", "in", "enumerate", "(", "pred_list", ")", ":", "\n", "        ", "len_pred", "=", "len", "(", "pred", ")", "+", "1", "# eos should be included", "\n", "len_pred", "=", "min", "(", "max_len_labels", ",", "len_pred", ")", "# maybe the predicted string don't include a eos.", "\n", "score_i", "=", "score", "[", "i", ",", ":", "len_pred", "]", "\n", "score_i", "=", "math", ".", "exp", "(", "sum", "(", "map", "(", "math", ".", "log", ",", "score_i", ")", ")", ")", "\n", "score_list", ".", "append", "(", "score_i", ")", "\n", "", "return", "pred_list", ",", "targ_list", ",", "score_list", "", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr.SSIM.__init__": [[54, 60], ["super().__init__", "ssim_psnr.create_window"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "create_window", "(", "window_size", ",", "self", ".", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr.SSIM.forward": [[61, 79], ["img1.size", "ssim_psnr._ssim", "ssim_psnr.create_window", "window.cuda.cuda.type_as", "ssim_psnr.SSIM.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr._ssim", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr.create_window"], ["", "def", "forward", "(", "self", ",", "img1", ",", "img2", ")", ":", "\n", "        ", "img1", "=", "img1", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "img2", "=", "img2", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "\n", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "\n", "if", "channel", "==", "self", ".", "channel", "and", "self", ".", "window", ".", "data", ".", "type", "(", ")", "==", "img1", ".", "data", ".", "type", "(", ")", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "                ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "self", ".", "window_size", ",", "channel", ",", "self", ".", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr.calculate_psnr": [[9, 16], ["float", "torch.log10", "torch.log10", "torch.sqrt", "torch.sqrt"], "function", ["None"], ["def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 1]", "\n", "\n", "    ", "mse", "=", "(", "(", "img1", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "*", "255", "-", "img2", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", "*", "255", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "torch", ".", "log10", "(", "255.0", "/", "torch", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr.gaussian": [[18, 21], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], ["", "def", "gaussian", "(", "window_size", ",", "sigma", ")", ":", "\n", "    ", "gauss", "=", "torch", ".", "Tensor", "(", "[", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr.create_window": [[23, 28], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "ssim_psnr.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr.gaussian"], ["", "def", "create_window", "(", "window_size", ",", "channel", ")", ":", "\n", "    ", "_1D_window", "=", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "Variable", "(", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr._ssim": [[30, 51], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["None"], ["", "def", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "mu1", "=", "F", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "F", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "F", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "F", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "F", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "C1", "=", "0.01", "**", "2", "\n", "C2", "=", "0.03", "**", "2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "ssim_map", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr.ssim": [[81, 90], ["img1.size", "ssim_psnr.create_window", "window.cuda.type_as", "ssim_psnr._ssim", "window.cuda.cuda", "img1.get_device"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr.create_window", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.ssim_psnr._ssim"], ["", "", "def", "ssim", "(", "img1", ",", "img2", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ")", ":", "\n", "    ", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "window", "=", "create_window", "(", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "        ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "return", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.calculate_PSNR_SSIM.main": [[12, 66], ["sorted", "enumerate", "print", "glob.glob", "print", "print", "calculate_PSNR_SSIM.calculate_psnr", "calculate_PSNR_SSIM.calculate_ssim", "print", "PSNR_all.append", "SSIM_all.append", "os.path.splitext", "cv2.imread", "cv2.imread", "calculate_PSNR_SSIM.bgr2ycbcr", "calculate_PSNR_SSIM.bgr2ycbcr", "os.path.basename", "os.path.join", "ValueError", "sum", "len", "sum", "len"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.calculate_PSNR_SSIM.calculate_psnr", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.calculate_PSNR_SSIM.calculate_ssim", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.calculate_PSNR_SSIM.bgr2ycbcr", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.calculate_PSNR_SSIM.bgr2ycbcr"], ["def", "main", "(", ")", ":", "\n", "# Configurations", "\n", "\n", "# GT - Ground-truth;", "\n", "# Gen: Generated / Restored / Recovered images", "\n", "    ", "folder_GT", "=", "'/mnt/SSD/xtwang/BasicSR_datasets/val_set5/Set5'", "\n", "folder_Gen", "=", "'/home/xtwang/Projects/BasicSR/results/RRDB_PSNR_x4/set5'", "\n", "\n", "crop_border", "=", "4", "\n", "suffix", "=", "''", "# suffix for Gen images", "\n", "test_Y", "=", "False", "# True: test Y channel only; False: test RGB channels", "\n", "\n", "PSNR_all", "=", "[", "]", "\n", "SSIM_all", "=", "[", "]", "\n", "img_list", "=", "sorted", "(", "glob", ".", "glob", "(", "folder_GT", "+", "'/*'", ")", ")", "\n", "\n", "if", "test_Y", ":", "\n", "        ", "print", "(", "'Testing Y channel.'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Testing RGB channels.'", ")", "\n", "\n", "", "for", "i", ",", "img_path", "in", "enumerate", "(", "img_list", ")", ":", "\n", "        ", "base_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "im_GT", "=", "cv2", ".", "imread", "(", "img_path", ")", "/", "255.", "\n", "im_Gen", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "folder_Gen", ",", "base_name", "+", "suffix", "+", "'.png'", ")", ")", "/", "255.", "\n", "\n", "if", "test_Y", "and", "im_GT", ".", "shape", "[", "2", "]", "==", "3", ":", "# evaluate on Y channel in YCbCr color space", "\n", "            ", "im_GT_in", "=", "bgr2ycbcr", "(", "im_GT", ")", "\n", "im_Gen_in", "=", "bgr2ycbcr", "(", "im_Gen", ")", "\n", "", "else", ":", "\n", "            ", "im_GT_in", "=", "im_GT", "\n", "im_Gen_in", "=", "im_Gen", "\n", "\n", "# crop borders", "\n", "", "if", "im_GT_in", ".", "ndim", "==", "3", ":", "\n", "            ", "cropped_GT", "=", "im_GT_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", ":", "]", "\n", "cropped_Gen", "=", "im_Gen_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", ",", ":", "]", "\n", "", "elif", "im_GT_in", ".", "ndim", "==", "2", ":", "\n", "            ", "cropped_GT", "=", "im_GT_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "\n", "cropped_Gen", "=", "im_Gen_in", "[", "crop_border", ":", "-", "crop_border", ",", "crop_border", ":", "-", "crop_border", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Wrong image dimension: {}. Should be 2 or 3.'", ".", "format", "(", "im_GT_in", ".", "ndim", ")", ")", "\n", "\n", "# calculate PSNR and SSIM", "\n", "", "PSNR", "=", "calculate_psnr", "(", "cropped_GT", "*", "255", ",", "cropped_Gen", "*", "255", ")", "\n", "\n", "SSIM", "=", "calculate_ssim", "(", "cropped_GT", "*", "255", ",", "cropped_Gen", "*", "255", ")", "\n", "print", "(", "'{:3d} - {:25}. \\tPSNR: {:.6f} dB, \\tSSIM: {:.6f}'", ".", "format", "(", "\n", "i", "+", "1", ",", "base_name", ",", "PSNR", ",", "SSIM", ")", ")", "\n", "PSNR_all", ".", "append", "(", "PSNR", ")", "\n", "SSIM_all", ".", "append", "(", "SSIM", ")", "\n", "", "print", "(", "'Average: PSNR: {:.6f} dB, SSIM: {:.6f}'", ".", "format", "(", "\n", "sum", "(", "PSNR_all", ")", "/", "len", "(", "PSNR_all", ")", ",", "\n", "sum", "(", "SSIM_all", ")", "/", "len", "(", "SSIM_all", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.calculate_PSNR_SSIM.calculate_psnr": [[68, 76], ["img1.astype.astype", "img2.astype.astype", "numpy.mean", "float", "math.log10", "math.sqrt"], "function", ["None"], ["", "def", "calculate_psnr", "(", "img1", ",", "img2", ")", ":", "\n", "# img1 and img2 have range [0, 255]", "\n", "    ", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "img1", "-", "img2", ")", "**", "2", ")", "\n", "if", "mse", "==", "0", ":", "\n", "        ", "return", "float", "(", "'inf'", ")", "\n", "", "return", "20", "*", "math", ".", "log10", "(", "255.0", "/", "math", ".", "sqrt", "(", "mse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.calculate_PSNR_SSIM.ssim": [[78, 99], ["img1.astype.astype", "img2.astype.astype", "cv2.getGaussianKernel", "numpy.outer", "ssim_map.mean", "cv2.getGaussianKernel.transpose", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D", "cv2.filter2D"], "function", ["None"], ["", "def", "ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "C1", "=", "(", "0.01", "*", "255", ")", "**", "2", "\n", "C2", "=", "(", "0.03", "*", "255", ")", "**", "2", "\n", "\n", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float64", ")", "\n", "kernel", "=", "cv2", ".", "getGaussianKernel", "(", "11", ",", "1.5", ")", "\n", "window", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ".", "transpose", "(", ")", ")", "\n", "\n", "mu1", "=", "cv2", ".", "filter2D", "(", "img1", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "# valid", "\n", "mu2", "=", "cv2", ".", "filter2D", "(", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "\n", "mu1_sq", "=", "mu1", "**", "2", "\n", "mu2_sq", "=", "mu2", "**", "2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "cv2", ".", "filter2D", "(", "img1", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_sq", "\n", "sigma2_sq", "=", "cv2", ".", "filter2D", "(", "img2", "**", "2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu2_sq", "\n", "sigma12", "=", "cv2", ".", "filter2D", "(", "img1", "*", "img2", ",", "-", "1", ",", "window", ")", "[", "5", ":", "-", "5", ",", "5", ":", "-", "5", "]", "-", "mu1_mu2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "return", "ssim_map", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.calculate_PSNR_SSIM.calculate_ssim": [[101, 120], ["ValueError", "calculate_PSNR_SSIM.ssim", "ValueError", "range", "numpy.array().mean", "ssims.append", "calculate_PSNR_SSIM.ssim", "calculate_PSNR_SSIM.ssim", "numpy.array", "numpy.squeeze", "numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.calculate_PSNR_SSIM.ssim", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.calculate_PSNR_SSIM.ssim"], ["", "def", "calculate_ssim", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''calculate SSIM\n    the same outputs as MATLAB's\n    img1, img2: [0, 255]\n    '''", "\n", "if", "not", "img1", ".", "shape", "==", "img2", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'Input images must have the same dimensions.'", ")", "\n", "", "if", "img1", ".", "ndim", "==", "2", ":", "\n", "        ", "return", "ssim", "(", "img1", ",", "img2", ")", "\n", "", "elif", "img1", ".", "ndim", "==", "3", ":", "\n", "        ", "if", "img1", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "            ", "ssims", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "ssims", ".", "append", "(", "ssim", "(", "img1", ",", "img2", ")", ")", "\n", "", "return", "np", ".", "array", "(", "ssims", ")", ".", "mean", "(", ")", "\n", "", "elif", "img1", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "return", "ssim", "(", "np", ".", "squeeze", "(", "img1", ")", ",", "np", ".", "squeeze", "(", "img2", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Wrong input image dimensions.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.calculate_PSNR_SSIM.bgr2ycbcr": [[122, 144], ["img.astype", "rlt.round.astype", "rlt.round.round", "numpy.dot", "numpy.matmul"], "function", ["None"], ["", "", "def", "bgr2ycbcr", "(", "img", ",", "only_y", "=", "True", ")", ":", "\n", "    ", "'''same as matlab rgb2ycbcr\n    only_y: only return Y channel\n    Input:\n        uint8, [0, 255]\n        float, [0, 1]\n    '''", "\n", "in_img_type", "=", "img", ".", "dtype", "\n", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "in_img_type", "!=", "np", ".", "uint8", ":", "\n", "        ", "img", "*=", "255.", "\n", "# convert", "\n", "", "if", "only_y", ":", "\n", "        ", "rlt", "=", "np", ".", "dot", "(", "img", ",", "[", "24.966", ",", "128.553", ",", "65.481", "]", ")", "/", "255.0", "+", "16.0", "\n", "", "else", ":", "\n", "        ", "rlt", "=", "np", ".", "matmul", "(", "img", ",", "[", "[", "24.966", ",", "112.0", ",", "-", "18.214", "]", ",", "[", "128.553", ",", "-", "74.203", ",", "-", "93.786", "]", ",", "\n", "[", "65.481", ",", "-", "37.797", ",", "112.0", "]", "]", ")", "/", "255.0", "+", "[", "16", ",", "128", ",", "128", "]", "\n", "", "if", "in_img_type", "==", "np", ".", "uint8", ":", "\n", "        ", "rlt", "=", "rlt", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "        ", "rlt", "/=", "255.", "\n", "", "return", "rlt", ".", "astype", "(", "in_img_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.labelmaps.get_vocabulary": [[6, 29], ["list.append", "list.append", "list.append", "list", "list", "list", "list", "KeyError"], "function", ["None"], ["def", "get_vocabulary", "(", "voc_type", ",", "EOS", "=", "'EOS'", ",", "PADDING", "=", "'PADDING'", ",", "UNKNOWN", "=", "'UNKNOWN'", ")", ":", "\n", "    ", "'''\n    voc_type: str: one of 'LOWERCASE', 'ALLCASES', 'ALLCASES_SYMBOLS'\n    '''", "\n", "voc", "=", "None", "\n", "types", "=", "[", "'digit'", ",", "'lower'", ",", "'upper'", ",", "'all'", "]", "\n", "if", "voc_type", "==", "'digit'", ":", "\n", "        ", "voc", "=", "list", "(", "string", ".", "digits", ")", "\n", "", "elif", "voc_type", "==", "'lower'", ":", "\n", "      ", "voc", "=", "list", "(", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", ")", "\n", "", "elif", "voc_type", "==", "'upper'", ":", "\n", "        ", "voc", "=", "list", "(", "string", ".", "digits", "+", "string", ".", "ascii_letters", ")", "\n", "", "elif", "voc_type", "==", "'all'", ":", "\n", "        ", "voc", "=", "list", "(", "string", ".", "digits", "+", "string", ".", "ascii_letters", "+", "string", ".", "punctuation", ")", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "(", "'voc_type Error'", ")", "\n", "\n", "# update the voc with specifical chars", "\n", "", "voc", ".", "append", "(", "EOS", ")", "\n", "voc", ".", "append", "(", "PADDING", ")", "\n", "voc", ".", "append", "(", "UNKNOWN", ")", "\n", "\n", "return", "voc", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.labelmaps.char2id": [[32, 34], ["dict", "zip", "range", "len"], "function", ["None"], ["", "def", "char2id", "(", "voc", ")", ":", "\n", "    ", "return", "dict", "(", "zip", "(", "voc", ",", "range", "(", "len", "(", "voc", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.labelmaps.id2char": [[36, 38], ["dict", "zip", "range", "len"], "function", ["None"], ["", "def", "id2char", "(", "voc", ")", ":", "\n", "    ", "return", "dict", "(", "zip", "(", "range", "(", "len", "(", "voc", ")", ")", ",", "voc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.labelmaps.labels2strs": [[40, 61], ["labelmaps.to_numpy", "range", "labels.unsqueeze.ndimension", "labels.unsqueeze.unsqueeze", "labels.unsqueeze.dim", "strings.append", "string.append"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.labelmaps.to_numpy"], ["", "def", "labels2strs", "(", "labels", ",", "id2char", ",", "char2id", ")", ":", "\n", "# labels: batch_size x len_seq", "\n", "    ", "if", "labels", ".", "ndimension", "(", ")", "==", "1", ":", "\n", "        ", "labels", "=", "labels", ".", "unsqueeze", "(", "0", ")", "\n", "", "assert", "labels", ".", "dim", "(", ")", "==", "2", "\n", "labels", "=", "to_numpy", "(", "labels", ")", "\n", "strings", "=", "[", "]", "\n", "batch_size", "=", "labels", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "label", "=", "labels", "[", "i", "]", "\n", "string", "=", "[", "]", "\n", "for", "l", "in", "label", ":", "\n", "            ", "if", "l", "==", "char2id", "[", "'EOS'", "]", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "string", ".", "append", "(", "id2char", "[", "l", "]", ")", "\n", "", "", "string", "=", "''", ".", "join", "(", "string", ")", "\n", "strings", ".", "append", "(", "string", ")", "\n", "\n", "", "return", "strings", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.labelmaps.to_numpy": [[63, 70], ["torch.is_tensor", "tensor.cpu().numpy", "ValueError", "tensor.cpu", "type", "type"], "function", ["None"], ["", "def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "type", "(", "tensor", ")", ".", "__module__", "!=", "'numpy'", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to numpy array\"", "\n", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.labelmaps.to_torch": [[72, 79], ["torch.from_numpy", "type", "torch.is_tensor", "ValueError", "type"], "function", ["None"], ["", "def", "to_torch", "(", "ndarray", ")", ":", "\n", "    ", "if", "type", "(", "ndarray", ")", ".", "__module__", "==", "'numpy'", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "ndarray", ")", "\n", "", "elif", "not", "torch", ".", "is_tensor", "(", "ndarray", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to torch tensor\"", "\n", ".", "format", "(", "type", "(", "ndarray", ")", ")", ")", "\n", "", "return", "ndarray", "\n", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.meters.AverageMeter.__init__": [[7, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.meters.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.meters.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "", "", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.__init__": [[38, 45], ["enumerate"], "methods", ["None"], ["if", "value", "not", "in", "confusing_stroke_dic", ":", "\n", "        ", "confusing_stroke_dic", "[", "value", "]", "=", "[", "i", "]", "\n", "", "else", ":", "\n", "        ", "confusing_stroke_dic", "[", "value", "]", ".", "append", "(", "i", ")", "\n", "\n", "\n", "", "", "def", "find_most_likely", "(", "key", ",", "value", ")", ":", "\n", "    ", "lis", "=", "[", "Levenshtein", ".", "distance", "(", "key", ",", "i", ")", "for", "i", "in", "value", "]", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode": [[46, 69], ["isinstance", "isinstance", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "len", "util.strLabelConverter.encode", "len"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode"], ["i", "=", "lis", ".", "index", "(", "min", "(", "lis", ")", ")", "\n", "return", "value", "[", "i", "]", "\n", "\n", "\n", "", "def", "get_dataloader", "(", "root", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "if", "root", ".", "endswith", "(", "'pkl'", ")", ":", "\n", "        ", "f", "=", "open", "(", "root", ",", "'rb'", ")", "\n", "dataset", "=", "pkl", ".", "load", "(", "f", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "config", "[", "'batch'", "]", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "8", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "lmdbDataset", "(", "root", ",", "resizeNormalize", "(", "(", "config", "[", "'image_size'", "]", ",", "config", "[", "'image_size'", "]", ")", ")", ",", "\n", "alphabet", "=", "alphabet_character", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "batch_size", "=", "config", "[", "'batch'", "]", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "8", ",", "\n", ")", "\n", "", "return", "dataloader", ",", "dataset", "\n", "\n", "\n", "", "def", "get_data_package", "(", ")", ":", "\n", "    ", "train_dataset", "=", "[", "]", "\n", "for", "dataset_root", "in", "config", "[", "'train_dataset'", "]", ".", "split", "(", "','", ")", ":", "\n", "        ", "_", ",", "dataset", "=", "get_dataloader", "(", "dataset_root", ",", "shuffle", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.decode": [[70, 106], ["length.numel", "range", "t.numel", "t.numel", "range", "t.numel", "length.sum", "t.numel", "length.sum", "length.numel", "texts.append", "util.strLabelConverter.decode", "char_list.append", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.decode"], ["train_dataset", ".", "append", "(", "dataset", ")", "\n", "", "train_dataset_total", "=", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "train_dataset", ")", "\n", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset_total", ",", "batch_size", "=", "config", "[", "'batch'", "]", ",", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "\n", ")", "\n", "\n", "test_dataset", "=", "[", "]", "\n", "for", "dataset_root", "in", "config", "[", "'test_dataset'", "]", ".", "split", "(", "','", ")", ":", "\n", "        ", "_", ",", "dataset", "=", "get_dataloader", "(", "dataset_root", ",", "shuffle", "=", "True", ")", "\n", "test_dataset", ".", "append", "(", "dataset", ")", "\n", "", "test_dataset_total", "=", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "test_dataset", ")", "\n", "\n", "test_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset_total", ",", "batch_size", "=", "config", "[", "'batch'", "]", ",", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "\n", ")", "\n", "\n", "return", "train_dataloader", ",", "test_dataloader", "\n", "\n", "\n", "", "def", "converter", "(", "mode", ",", "label", ")", ":", "\n", "    ", "character_level_label", "=", "label", "\n", "if", "mode", "==", "'character'", ":", "\n", "        ", "label", "=", "[", "i", "for", "i", "in", "label", "]", "\n", "alp2num", "=", "alp2num_character", "\n", "", "elif", "mode", "==", "'stroke'", ":", "\n", "        ", "label", "=", "[", "character_to_strokelist", "[", "i", "[", "0", "]", "]", "+", "'$'", "for", "i", "in", "label", "]", "\n", "alp2num", "=", "alp2num_stroke", "\n", "\n", "", "batch", "=", "len", "(", "label", ")", "\n", "length", "=", "torch", ".", "Tensor", "(", "[", "len", "(", "i", ")", "for", "i", "in", "label", "]", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "max_length", "=", "max", "(", "length", ")", "\n", "\n", "text_input", "=", "torch", ".", "zeros", "(", "batch", ",", "max_length", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "label", "[", "i", "]", ")", "-", "1", ")", ":", "\n", "            ", "text_input", "[", "i", "]", "[", "j", "+", "1", "]", "=", "alp2num", "[", "label", "[", "i", "]", "[", "j", "]", "]", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.__init__": [[111, 113], ["util.averager.reset"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.reset"], ["for", "i", "in", "range", "(", "batch", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "label", "[", "i", "]", ")", ")", ":", "\n", "            ", "text_all", "[", "start", "+", "j", "]", "=", "alp2num", "[", "label", "[", "i", "]", "[", "j", "]", "]", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.add": [[114, 124], ["isinstance", "v.sum.sum.data.numel", "v.sum.sum.data.sum", "isinstance", "v.sum.sum.numel", "v.sum.sum.sum"], "methods", ["None"], ["", "start", "+=", "len", "(", "label", "[", "i", "]", ")", "\n", "\n", "", "return", "length", ",", "text_input", ",", "text_all", ",", "character_level_label", "\n", "\n", "\n", "", "def", "get_alphabet", "(", "mode", ")", ":", "\n", "    ", "if", "mode", "==", "'character'", ":", "\n", "        ", "return", "alphabet_character", "\n", "", "elif", "mode", "==", "'stroke'", ":", "\n", "        ", "return", "alphabet_stroke", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.reset": [[125, 128], ["None"], "methods", ["None"], ["\n", "", "", "def", "tensor2str", "(", "mode", ",", "tensor", ")", ":", "\n", "    ", "alphabet", "=", "get_alphabet", "(", "mode", ")", "\n", "string", "=", "\"\"", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.averager.val": [[129, 134], ["float"], "methods", ["None"], ["for", "i", "in", "tensor", ":", "\n", "        ", "string", "+=", "alphabet", "[", "i", "]", "\n", "", "return", "string", "\n", "\n", "\n", "", "def", "must_in_screen", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.str_filt": [[12, 25], ["str_.replace.lower", "str_.replace.replace"], "function", ["None"], ["mse_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "alphabet_stroke", "=", "'<12345$'", "\n", "alp2num_stroke", "=", "{", "}", "\n", "for", "index", ",", "char", "in", "enumerate", "(", "alphabet_stroke", ")", ":", "\n", "    ", "alp2num_stroke", "[", "char", "]", "=", "index", "\n", "\n", "", "confusing_character_340", "=", "'\u57c3\u6328\u53ed\u53f2\u592e\u53ea\u5427\u543c\u9091\u516b\u4eba\u5165\u5df4\u5b54\u575d\u6c5e\u8d21\u767e\u6709\u6273\u5742\u62cc\u5e78\u8d1d\u5188\u5185\u6c34\u5167\u94a1\u94a2\u94a0\u5fc5\u8bae\u7f16\u9a97\u9a73\u7eb5\u6355\u57d4\u67e5\u76f8\u660c\u9580\u573a\u626c\u626f\u5740\u6c89\u6c88\u5403\u5412\u6301\u5c01\u70bd\u70b4\u4ec7\u5316\u5904\u5916\u6b21\u8863\u4ece\u7236\u5bf8\u4e0b\u642d\u5854\u5927\u4e08\u6b79\u5c24\u53cb\u62c5\u5766\u4e39\u5300\u65e6\u76ee\u4e14\u6c2e\u6bef\u5200\u529b\u4e43\u9093\u4e88\u5824\u63d0\u7535\u53f7\u9493\u9492\u4e01\u5341\u76ef\u65f1\u53ee\u7532\u7533\u53f6\u9489\u9488\u8ba2\u8ba1\u4e22\u5ef7\u4f97\u4fa3\u72ec\u98a8\u675c\u6760\u809a\u809b\u5806\u63a8\u6735\u6742\u5384\u5339\u513f\u51e0\u4e5d\u5c14\u4e50\u4e4f\u516c\u5e06\u5c81\u756a\u91c9\u77fe\u77fd\u51e1\u53ca\u4e45\u4e48\u52fa\u4e38\u5915\u98de\u5203\u98ce\u6b20\u8bbd\u519c\u51e4\u52fe\u592b\u5929\u8ba3\u793b\u5e72\u4e8e\u521a\u5219\u7eb2\u7eb3\u94ec\u94ed\u5404\u540d\u5de5\u58eb\u571f\u529f\u6254\u5f13\u5df1\u5df3\u5df2\u5de9\u573e\u6267\u6c9f\u6ca1\u572d\u625b\u679c\u5473\u90af\u82c7\u79ef\u79e7\u8ba5\u5197\u5409\u6263\u6c72\u6c50\u7ea7\u7ea6\u52a0\u53ec\u59d0\u59b2\u5dfe\u5c71\u8346\u834a\u6676\u9593\u4e95\u5f00\u666f\u667e\u7396\u9ea6\u7393\u6cae\u6cea\u5177\u660a\u6289\u5757\u5747\u574d\u6297\u5751\u8003\u6258\u57ae\u630e\u5764\u62bc\u5783\u62c9\u7c7b\u7c80\u51b7\u8fd9\u96b6\u5f55\u516d\u6587\u9f99\u620a\u5415\u540c\u94dd\u94dc\u9a86\u7edc\u6bdb\u6c14\u8302\u830f\u68a6\u68b5\u5195\u665a\u672b\u793a\u672a\u5450\u5458\u725b\u624b\u5348\u556a\u556b\u62cd\u8005\u62a8\u576a\u62ab\u5761\u9a91\u7eee\u4e18\u4ed5\u72ac\u592a\u5238\u52b5\u5374\u6292\u58e4\u6518\u65e5\u66f0\u8089\u7f51\u547b\u5477\u5931\u77e2\u77f3\u53f3\u4ec0\u4ec3\u9a76\u7ec7\u5858\u642a\u7530\u7531\u8fe2\u8fe6\u6c40\u6c41\u51f8\u5360\u536b\u5b50\u65e0\u5143\u5434\u8c9d\u7199\u7155\u5413\u540b\u663e\u54d1\u6e58\u6e23\u5144\u53f1\u53fd\u65ed\u65ec\u65e8\u65ee\u8be2\u8be3\u7ece\u9a7f\u5401\u65e9\u4e91\u4e13\u6655\u6656\u8a08\u8a02\u5834\u63da\u5f08\u5955'", "\n", "alphabet_character", "=", "'<\u554a\u963f\u57c3\u6328\u54ce\u5509\u54c0\u7691\u764c\u853c\u77ee\u827e\u788d\u7231\u9698\u978d\u6c28\u5b89\u4ffa\u6309\u6697\u5cb8\u80fa\u6848\u80ae\u6602\u76ce\u51f9\u6556\u71ac\u7ff1\u8884\u50b2\u5965\u61ca\u6fb3\u82ad\u634c\u6252\u53ed\u5427\u7b06\u516b\u75a4\u5df4\u62d4\u8dcb\u9776\u628a\u8019\u575d\u9738\u7f62\u7238\u767d\u67cf\u767e\u6446\u4f70\u8d25\u62dc\u7a17\u6591\u73ed\u642c\u6273\u822c\u9881\u677f\u7248\u626e\u62cc\u4f34\u74e3\u534a\u529e\u7eca\u90a6\u5e2e\u6886\u699c\u8180\u7ed1\u68d2\u78c5\u868c\u9551\u508d\u8c24\u82de\u80de\u5305\u8912\u5265\u8584\u96f9\u4fdd\u5821\u9971\u5b9d\u62b1\u62a5\u66b4\u8c79\u9c8d\u7206\u676f\u7891\u60b2\u5351\u5317\u8f88\u80cc\u8d1d\u94a1\u500d\u72c8\u5907\u60eb\u7119\u88ab\u5954\u82ef\u672c\u7b28\u5d29\u7ef7\u752d\u6cf5\u8e66\u8ff8\u903c\u9f3b\u6bd4\u9119\u7b14\u5f7c\u78a7\u84d6\u853d\u6bd5\u6bd9\u6bd6\u5e01\u5e87\u75f9\u95ed\u655d\u5f0a\u5fc5\u8f9f\u58c1\u81c2\u907f\u965b\u97ad\u8fb9\u7f16\u8d2c\u6241\u4fbf\u53d8\u535e\u8fa8\u8fa9\u8fab\u904d\u6807\u5f6a\u8198\u8868\u9cd6\u618b\u522b\u762a\u5f6c\u658c\u6fd2\u6ee8\u5bbe\u6448\u5175\u51b0\u67c4\u4e19\u79c9\u997c\u70b3\u75c5\u5e76\u73bb\u83e0\u64ad\u62e8\u94b5\u6ce2\u535a\u52c3\u640f\u94c2\u7b94\u4f2f\u5e1b\u8236\u8116\u818a\u6e24\u6cca\u9a73\u6355\u535c\u54fa\u8865\u57e0\u4e0d\u5e03\u6b65\u7c3f\u90e8\u6016\u64e6\u731c\u88c1\u6750\u624d\u8d22\u776c\u8e29\u91c7\u5f69\u83dc\u8521\u9910\u53c2\u8695\u6b8b\u60ed\u60e8\u707f\u82cd\u8231\u4ed3\u6ca7\u85cf\u64cd\u7cd9\u69fd\u66f9\u8349\u5395\u7b56\u4fa7\u518c\u6d4b\u5c42\u8e6d\u63d2\u53c9\u832c\u8336\u67e5\u78b4\u643d\u5bdf\u5c94\u5dee\u8be7\u62c6\u67f4\u8c7a\u6400\u63ba\u8749\u998b\u8c17\u7f20\u94f2\u4ea7\u9610\u98a4\u660c\u7316\u573a\u5c1d\u5e38\u957f\u507f\u80a0\u5382\u655e\u7545\u5531\u5021\u8d85\u6284\u949e\u671d\u5632\u6f6e\u5de2\u5435\u7092\u8f66\u626f\u64a4\u63a3\u5f7b\u6f88\u90f4\u81e3\u8fb0\u5c18\u6668\u5ff1\u6c89\u9648\u8d81\u886c\u6491\u79f0\u57ce\u6a59\u6210\u5448\u4e58\u7a0b\u60e9\u6f84\u8bda\u627f\u901e\u9a8b\u79e4\u5403\u75f4\u6301\u5319\u6c60\u8fdf\u5f1b\u9a70\u803b\u9f7f\u4f88\u5c3a\u8d64\u7fc5\u65a5\u70bd\u5145\u51b2\u866b\u5d07\u5ba0\u62bd\u916c\u7574\u8e0c\u7a20\u6101\u7b79\u4ec7\u7ef8\u7785\u4e11\u81ed\u521d\u51fa\u6a71\u53a8\u8e87\u9504\u96cf\u6ec1\u9664\u695a\u7840\u50a8\u77d7\u6410\u89e6\u5904\u63e3\u5ddd\u7a7f\u693d\u4f20\u8239\u5598\u4e32\u75ae\u7a97\u5e62\u5e8a\u95ef\u521b\u5439\u708a\u6376\u9524\u5782\u6625\u693f\u9187\u5507\u6df3\u7eaf\u8822\u6233\u7ef0\u75b5\u8328\u78c1\u96cc\u8f9e\u6148\u74f7\u8bcd\u6b64\u523a\u8d50\u6b21\u806a\u8471\u56f1\u5306\u4ece\u4e1b\u51d1\u7c97\u918b\u7c07\u4fc3\u8e7f\u7be1\u7a9c\u6467\u5d14\u50ac\u8106\u7601\u7cb9\u6dec\u7fe0\u6751\u5b58\u5bf8\u78cb\u64ae\u6413\u63aa\u632b\u9519\u642d\u8fbe\u7b54\u7629\u6253\u5927\u5446\u6b79\u50a3\u6234\u5e26\u6b86\u4ee3\u8d37\u888b\u5f85\u902e\u6020\u803d\u62c5\u4e39\u5355\u90f8\u63b8\u80c6\u65e6\u6c2e\u4f46\u60ee\u6de1\u8bde\u5f39\u86cb\u5f53\u6321\u515a\u8361\u6863\u5200\u6363\u8e48\u5012\u5c9b\u7977\u5bfc\u5230\u7a3b\u60bc\u9053\u76d7\u5fb7\u5f97\u7684\u8e6c\u706f\u767b\u7b49\u77aa\u51f3\u9093\u5824\u4f4e\u6ef4\u8fea\u654c\u7b1b\u72c4\u6da4\u7fdf\u5ae1\u62b5\u5e95\u5730\u8482\u7b2c\u5e1d\u5f1f\u9012\u7f14\u98a0\u6382\u6ec7\u7898\u70b9\u5178\u975b\u57ab\u7535\u4f43\u7538\u5e97\u60e6\u5960\u6dc0\u6bbf\u7889\u53fc\u96d5\u51cb\u5201\u6389\u540a\u9493\u8c03\u8dcc\u7239\u789f\u8776\u8fed\u8c0d\u53e0\u4e01\u76ef\u53ee\u9489\u9876\u9f0e\u952d\u5b9a\u8ba2\u4e22\u4e1c\u51ac\u8463\u61c2\u52a8\u680b\u4f97\u606b\u51bb\u6d1e\u515c\u6296\u6597\u9661\u8c46\u9017\u75d8\u90fd\u7763\u6bd2\u728a\u72ec\u8bfb\u5835\u7779\u8d4c\u675c\u9540\u809a\u5ea6\u6e21\u5992\u7aef\u77ed\u953b\u6bb5\u65ad\u7f0e\u5806\u5151\u961f\u5bf9\u58a9\u5428\u8e72\u6566\u987f\u56e4\u949d\u76fe\u9041\u6387\u54c6\u591a\u593a\u579b\u8eb2\u6735\u8dfa\u8235\u5241\u60f0\u5815\u86fe\u5ce8\u9e45\u4fc4\u989d\u8bb9\u5a25\u6076\u5384\u627c\u904f\u9102\u997f\u6069\u800c\u513f\u8033\u5c14\u9975\u6d31\u4e8c\u8d30\u53d1\u7f5a\u7b4f\u4f10\u4e4f\u9600\u6cd5\u73d0\u85e9\u5e06\u756a\u7ffb\u6a0a\u77fe\u9492\u7e41\u51e1\u70e6\u53cd\u8fd4\u8303\u8d29\u72af\u996d\u6cdb\u574a\u82b3\u65b9\u80aa\u623f\u9632\u59a8\u4eff\u8bbf\u7eba\u653e\u83f2\u975e\u5561\u98de\u80a5\u532a\u8bfd\u5420\u80ba\u5e9f\u6cb8\u8d39\u82ac\u915a\u5429\u6c1b\u5206\u7eb7\u575f\u711a\u6c7e\u7c89\u594b\u4efd\u5fff\u6124\u7caa\u4e30\u5c01\u67ab\u8702\u5cf0\u950b\u98ce\u75af\u70fd\u9022\u51af\u7f1d\u8bbd\u5949\u51e4\u4f5b\u5426\u592b\u6577\u80a4\u5b75\u6276\u62c2\u8f90\u5e45\u6c1f\u7b26\u4f0f\u4fd8\u670d\u6d6e\u6daa\u798f\u88b1\u5f17\u752b\u629a\u8f85\u4fef\u91dc\u65a7\u812f\u8151\u5e9c\u8150\u8d74\u526f\u8986\u8d4b\u590d\u5085\u4ed8\u961c\u7236\u8179\u8d1f\u5bcc\u8ba3\u9644\u5987\u7f1a\u5490\u5676\u560e\u8be5\u6539\u6982\u9499\u76d6\u6e89\u5e72\u7518\u6746\u67d1\u7aff\u809d\u8d76\u611f\u79c6\u6562\u8d63\u5188\u521a\u94a2\u7f38\u809b\u7eb2\u5c97\u6e2f\u6760\u7bd9\u768b\u9ad8\u818f\u7f94\u7cd5\u641e\u9550\u7a3f\u544a\u54e5\u6b4c\u6401\u6208\u9e3d\u80f3\u7599\u5272\u9769\u845b\u683c\u86e4\u9601\u9694\u94ec\u4e2a\u5404\u7ed9\u6839\u8ddf\u8015\u66f4\u5e9a\u7fb9\u57c2\u803f\u6897\u5de5\u653b\u529f\u606d\u9f9a\u4f9b\u8eac\u516c\u5bab\u5f13\u5de9\u6c5e\u62f1\u8d21\u5171\u94a9\u52fe\u6c9f\u82df\u72d7\u57a2\u6784\u8d2d\u591f\u8f9c\u83c7\u5495\u7b8d\u4f30\u6cbd\u5b64\u59d1\u9f13\u53e4\u86ca\u9aa8\u8c37\u80a1\u6545\u987e\u56fa\u96c7\u522e\u74dc\u5250\u5be1\u6302\u8902\u4e56\u62d0\u602a\u68fa\u5173\u5b98\u51a0\u89c2\u7ba1\u9986\u7f50\u60ef\u704c\u8d2f\u5149\u5e7f\u901b\u7470\u89c4\u572d\u7845\u5f52\u9f9f\u95fa\u8f68\u9b3c\u8be1\u7678\u6842\u67dc\u8dea\u8d35\u523d\u8f8a\u6eda\u68cd\u9505\u90ed\u56fd\u679c\u88f9\u8fc7\u54c8\u9ab8\u5b69\u6d77\u6c26\u4ea5\u5bb3\u9a87\u9163\u61a8\u90af\u97e9\u542b\u6db5\u5bd2\u51fd\u558a\u7f55\u7ff0\u64bc\u634d\u65f1\u61be\u608d\u710a\u6c57\u6c49\u592f\u676d\u822a\u58d5\u568e\u8c6a\u6beb\u90dd\u597d\u8017\u53f7\u6d69\u5475\u559d\u8377\u83cf\u6838\u79be\u548c\u4f55\u5408\u76d2\u8c89\u9602\u6cb3\u6db8\u8d6b\u8910\u9e64\u8d3a\u563f\u9ed1\u75d5\u5f88\u72e0\u6068\u54fc\u4ea8\u6a2a\u8861\u6052\u8f70\u54c4\u70d8\u8679\u9e3f\u6d2a\u5b8f\u5f18\u7ea2\u5589\u4faf\u7334\u543c\u539a\u5019\u540e\u547c\u4e4e\u5ffd\u745a\u58f6\u846b\u80e1\u8774\u72d0\u7cca\u6e56\u5f27\u864e\u552c\u62a4\u4e92\u6caa\u6237\u82b1\u54d7\u534e\u733e\u6ed1\u753b\u5212\u5316\u8bdd\u69d0\u5f8a\u6000\u6dee\u574f\u6b22\u73af\u6853\u8fd8\u7f13\u6362\u60a3\u5524\u75ea\u8c62\u7115\u6da3\u5ba6\u5e7b\u8352\u614c\u9ec4\u78fa\u8757\u7c27\u7687\u51f0\u60f6\u714c\u6643\u5e4c\u604d\u8c0e\u7070\u6325\u8f89\u5fbd\u6062\u86d4\u56de\u6bc1\u6094\u6167\u5349\u60e0\u6666\u8d3f\u79fd\u4f1a\u70e9\u6c47\u8bb3\u8bf2\u7ed8\u8364\u660f\u5a5a\u9b42\u6d51\u6df7\u8c41\u6d3b\u4f19\u706b\u83b7\u6216\u60d1\u970d\u8d27\u7978\u51fb\u573e\u57fa\u673a\u7578\u7a3d\u79ef\u7b95\u808c\u9965\u8ff9\u6fc0\u8ba5\u9e21\u59ec\u7ee9\u7f09\u5409\u6781\u68d8\u8f91\u7c4d\u96c6\u53ca\u6025\u75be\u6c72\u5373\u5ac9\u7ea7\u6324\u51e0\u810a\u5df1\u84df\u6280\u5180\u5b63\u4f0e\u796d\u5242\u60b8\u6d4e\u5bc4\u5bc2\u8ba1\u8bb0\u65e2\u5fcc\u9645\u5993\u7ee7\u7eaa\u5609\u67b7\u5939\u4f73\u5bb6\u52a0\u835a\u988a\u8d3e\u7532\u94be\u5047\u7a3c\u4ef7\u67b6\u9a7e\u5ac1\u6b7c\u76d1\u575a\u5c16\u7b3a\u95f4\u714e\u517c\u80a9\u8270\u5978\u7f04\u8327\u68c0\u67ec\u78b1\u7877\u62e3\u6361\u7b80\u4fed\u526a\u51cf\u8350\u69db\u9274\u8df5\u8d31\u89c1\u952e\u7bad\u4ef6\u5065\u8230\u5251\u996f\u6e10\u6e85\u6da7\u5efa\u50f5\u59dc\u5c06\u6d46\u6c5f\u7586\u848b\u6868\u5956\u8bb2\u5320\u9171\u964d\u8549\u6912\u7901\u7126\u80f6\u4ea4\u90ca\u6d47\u9a84\u5a07\u56bc\u6405\u94f0\u77eb\u4fa5\u811a\u72e1\u89d2\u997a\u7f34\u7ede\u527f\u6559\u9175\u8f7f\u8f83\u53eb\u7a96\u63ed\u63a5\u7686\u79f8\u8857\u9636\u622a\u52ab\u8282\u6854\u6770\u6377\u776b\u7aed\u6d01\u7ed3\u89e3\u59d0\u6212\u85c9\u82a5\u754c\u501f\u4ecb\u75a5\u8beb\u5c4a\u5dfe\u7b4b\u65a4\u91d1\u4eca\u6d25\u895f\u7d27\u9526\u4ec5\u8c28\u8fdb\u9773\u664b\u7981\u8fd1\u70ec\u6d78\u5c3d\u52b2\u8346\u5162\u830e\u775b\u6676\u9cb8\u4eac\u60ca\u7cbe\u7cb3\u7ecf\u4e95\u8b66\u666f\u9888\u9759\u5883\u656c\u955c\u5f84\u75c9\u9756\u7adf\u7ade\u51c0\u70af\u7a98\u63ea\u7a76\u7ea0\u7396\u97ed\u4e45\u7078\u4e5d\u9152\u53a9\u6551\u65e7\u81fc\u8205\u548e\u5c31\u759a\u97a0\u62d8\u72d9\u75bd\u5c45\u9a79\u83ca\u5c40\u5480\u77e9\u4e3e\u6cae\u805a\u62d2\u636e\u5de8\u5177\u8ddd\u8e1e\u952f\u4ff1\u53e5\u60e7\u70ac\u5267\u6350\u9e43\u5a1f\u5026\u7737\u5377\u7ee2\u6485\u652b\u6289\u6398\u5014\u7235\u89c9\u51b3\u8bc0\u7edd\u5747\u83cc\u94a7\u519b\u541b\u5cfb\u4fca\u7ae3\u6d5a\u90e1\u9a8f\u5580\u5496\u5361\u54af\u5f00\u63e9\u6977\u51ef\u6168\u520a\u582a\u52d8\u574e\u780d\u770b\u5eb7\u6177\u7ce0\u625b\u6297\u4ea2\u7095\u8003\u62f7\u70e4\u9760\u5777\u82db\u67ef\u68f5\u78d5\u9897\u79d1\u58f3\u54b3\u53ef\u6e34\u514b\u523b\u5ba2\u8bfe\u80af\u5543\u57a6\u6073\u5751\u542d\u7a7a\u6050\u5b54\u63a7\u62a0\u53e3\u6263\u5bc7\u67af\u54ed\u7a9f\u82e6\u9177\u5e93\u88e4\u5938\u57ae\u630e\u8de8\u80ef\u5757\u7b77\u4fa9\u5feb\u5bbd\u6b3e\u5321\u7b50\u72c2\u6846\u77ff\u7736\u65f7\u51b5\u4e8f\u76d4\u5cbf\u7aa5\u8475\u594e\u9b41\u5080\u9988\u6127\u6e83\u5764\u6606\u6346\u56f0\u62ec\u6269\u5ed3\u9614\u5783\u62c9\u5587\u8721\u814a\u8fa3\u5566\u83b1\u6765\u8d56\u84dd\u5a6a\u680f\u62e6\u7bee\u9611\u5170\u6f9c\u8c30\u63fd\u89c8\u61d2\u7f06\u70c2\u6ee5\u7405\u6994\u72fc\u5eca\u90ce\u6717\u6d6a\u635e\u52b3\u7262\u8001\u4f6c\u59e5\u916a\u70d9\u6d9d\u52d2\u4e50\u96f7\u956d\u857e\u78ca\u7d2f\u5121\u5792\u64c2\u808b\u7c7b\u6cea\u68f1\u695e\u51b7\u5398\u68a8\u7281\u9ece\u7bf1\u72f8\u79bb\u6f13\u7406\u674e\u91cc\u9ca4\u793c\u8389\u8354\u540f\u6817\u4e3d\u5389\u52b1\u783e\u5386\u5229\u5088\u4f8b\u4fd0\u75e2\u7acb\u7c92\u6ca5\u96b6\u529b\u7483\u54e9\u4fe9\u8054\u83b2\u8fde\u9570\u5ec9\u601c\u6d9f\u5e18\u655b\u8138\u94fe\u604b\u70bc\u7ec3\u7cae\u51c9\u6881\u7cb1\u826f\u4e24\u8f86\u91cf\u667e\u4eae\u8c05\u64a9\u804a\u50da\u7597\u71ce\u5be5\u8fbd\u6f66\u4e86\u6482\u9563\u5ed6\u6599\u5217\u88c2\u70c8\u52a3\u730e\u7433\u6797\u78f7\u9716\u4e34\u90bb\u9cde\u6dcb\u51db\u8d41\u541d\u62ce\u73b2\u83f1\u96f6\u9f84\u94c3\u4f36\u7f9a\u51cc\u7075\u9675\u5cad\u9886\u53e6\u4ee4\u6e9c\u7409\u69b4\u786b\u998f\u7559\u5218\u7624\u6d41\u67f3\u516d\u9f99\u804b\u5499\u7b3c\u7abf\u9686\u5784\u62e2\u9647\u697c\u5a04\u6402\u7bd3\u6f0f\u964b\u82a6\u5362\u9885\u5e90\u7089\u63b3\u5364\u864f\u9c81\u9e93\u788c\u9732\u8def\u8d42\u9e7f\u6f5e\u7984\u5f55\u9646\u622e\u9a74\u5415\u94dd\u4fa3\u65c5\u5c65\u5c61\u7f15\u8651\u6c2f\u5f8b\u7387\u6ee4\u7eff\u5ce6\u631b\u5b6a\u6ee6\u5375\u4e71\u63a0\u7565\u62a1\u8f6e\u4f26\u4ed1\u6ca6\u7eb6\u8bba\u841d\u87ba\u7f57\u903b\u9523\u7ba9\u9aa1\u88f8\u843d\u6d1b\u9a86\u7edc\u5988\u9ebb\u739b\u7801\u8682\u9a6c\u9a82\u561b\u5417\u57cb\u4e70\u9ea6\u5356\u8fc8\u8109\u7792\u9992\u86ee\u6ee1\u8513\u66fc\u6162\u6f2b\u8c29\u8292\u832b\u76f2\u6c13\u5fd9\u83bd\u732b\u8305\u951a\u6bdb\u77db\u94c6\u536f\u8302\u5192\u5e3d\u8c8c\u8d38\u4e48\u73ab\u679a\u6885\u9176\u9709\u7164\u6ca1\u7709\u5a92\u9541\u6bcf\u7f8e\u6627\u5bd0\u59b9\u5a9a\u95e8\u95f7\u4eec\u840c\u8499\u6aac\u76df\u9530\u731b\u68a6\u5b5f\u772f\u919a\u9761\u7cdc\u8ff7\u8c1c\u5f25\u7c73\u79d8\u89c5\u6ccc\u871c\u5bc6\u5e42\u68c9\u7720\u7ef5\u5195\u514d\u52c9\u5a29\u7f05\u9762\u82d7\u63cf\u7784\u85d0\u79d2\u6e3a\u5e99\u5999\u8511\u706d\u6c11\u62bf\u76bf\u654f\u60af\u95fd\u660e\u879f\u9e23\u94ed\u540d\u547d\u8c2c\u6478\u6479\u8611\u6a21\u819c\u78e8\u6469\u9b54\u62b9\u672b\u83ab\u58a8\u9ed8\u6cab\u6f20\u5bde\u964c\u8c0b\u725f\u67d0\u62c7\u7261\u4ea9\u59c6\u6bcd\u5893\u66ae\u5e55\u52df\u6155\u6728\u76ee\u7766\u7267\u7a46\u62ff\u54ea\u5450\u94a0\u90a3\u5a1c\u7eb3\u6c16\u4e43\u5976\u8010\u5948\u5357\u7537\u96be\u56ca\u6320\u8111\u607c\u95f9\u6dd6\u5462\u9981\u5185\u5ae9\u80fd\u59ae\u9713\u502a\u6ce5\u5c3c\u62df\u4f60\u533f\u817b\u9006\u6eba\u852b\u62c8\u5e74\u78be\u64b5\u637b\u5ff5\u5a18\u917f\u9e1f\u5c3f\u634f\u8042\u5b7d\u556e\u954a\u954d\u6d85\u60a8\u67e0\u72de\u51dd\u5b81\u62e7\u6cde\u725b\u626d\u94ae\u7ebd\u8113\u6d53\u519c\u5f04\u5974\u52aa\u6012\u5973\u6696\u8650\u759f\u632a\u61e6\u7cef\u8bfa\u54e6\u6b27\u9e25\u6bb4\u85d5\u5455\u5076\u6ca4\u556a\u8db4\u722c\u5e15\u6015\u7436\u62cd\u6392\u724c\u5f98\u6e43\u6d3e\u6500\u6f58\u76d8\u78d0\u76fc\u7554\u5224\u53db\u4e53\u5e9e\u65c1\u802a\u80d6\u629b\u5486\u5228\u70ae\u888d\u8dd1\u6ce1\u5478\u80da\u57f9\u88f4\u8d54\u966a\u914d\u4f69\u6c9b\u55b7\u76c6\u7830\u62a8\u70f9\u6f8e\u5f6d\u84ec\u68da\u787c\u7bf7\u81a8\u670b\u9e4f\u6367\u78b0\u576f\u7812\u9739\u6279\u62ab\u5288\u7435\u6bd7\u5564\u813e\u75b2\u76ae\u5339\u75de\u50fb\u5c41\u8b6c\u7bc7\u504f\u7247\u9a97\u98d8\u6f02\u74e2\u7968\u6487\u77a5\u62fc\u9891\u8d2b\u54c1\u8058\u4e52\u576a\u82f9\u840d\u5e73\u51ed\u74f6\u8bc4\u5c4f\u5761\u6cfc\u9887\u5a46\u7834\u9b44\u8feb\u7c95\u5256\u6251\u94fa\u4ec6\u8386\u8461\u83e9\u84b2\u57d4\u6734\u5703\u666e\u6d66\u8c31\u66dd\u7011\u671f\u6b3a\u6816\u621a\u59bb\u4e03\u51c4\u6f06\u67d2\u6c8f\u5176\u68cb\u5947\u6b67\u7566\u5d0e\u8110\u9f50\u65d7\u7948\u7941\u9a91\u8d77\u5c82\u4e5e\u4f01\u542f\u5951\u780c\u5668\u6c14\u8fc4\u5f03\u6c7d\u6ce3\u8bab\u6390\u6070\u6d3d\u7275\u6266\u948e\u94c5\u5343\u8fc1\u7b7e\u4edf\u8c26\u4e7e\u9ed4\u94b1\u94b3\u524d\u6f5c\u9063\u6d45\u8c34\u5811\u5d4c\u6b20\u6b49\u67aa\u545b\u8154\u7f8c\u5899\u8537\u5f3a\u62a2\u6a47\u9539\u6572\u6084\u6865\u77a7\u4e54\u4fa8\u5de7\u9798\u64ac\u7fd8\u5ced\u4fcf\u7a8d\u5207\u8304\u4e14\u602f\u7a83\u94a6\u4fb5\u4eb2\u79e6\u7434\u52e4\u82b9\u64d2\u79bd\u5bdd\u6c81\u9752\u8f7b\u6c22\u503e\u537f\u6e05\u64ce\u6674\u6c30\u60c5\u9877\u8bf7\u5e86\u743c\u7a77\u79cb\u4e18\u90b1\u7403\u6c42\u56da\u914b\u6cc5\u8d8b\u533a\u86c6\u66f2\u8eaf\u5c48\u9a71\u6e20\u53d6\u5a36\u9f8b\u8da3\u53bb\u5708\u98a7\u6743\u919b\u6cc9\u5168\u75ca\u62f3\u72ac\u5238\u529d\u7f3a\u7094\u7638\u5374\u9e4a\u69b7\u786e\u96c0\u88d9\u7fa4\u7136\u71c3\u5189\u67d3\u74e4\u58e4\u6518\u56b7\u8ba9\u9976\u6270\u7ed5\u60f9\u70ed\u58ec\u4ec1\u4eba\u5fcd\u97e7\u4efb\u8ba4\u5203\u598a\u7eab\u6254\u4ecd\u65e5\u620e\u8338\u84c9\u8363\u878d\u7194\u6eb6\u5bb9\u7ed2\u5197\u63c9\u67d4\u8089\u8339\u8815\u5112\u5b7a\u5982\u8fb1\u4e73\u6c5d\u5165\u8925\u8f6f\u962e\u854a\u745e\u9510\u95f0\u6da6\u82e5\u5f31\u6492\u6d12\u8428\u816e\u9cc3\u585e\u8d5b\u4e09\u53c1\u4f1e\u6563\u6851\u55d3\u4e27\u6414\u9a9a\u626b\u5ac2\u745f\u8272\u6da9\u68ee\u50e7\u838e\u7802\u6740\u5239\u6c99\u7eb1\u50bb\u5565\u715e\u7b5b\u6652\u73ca\u82eb\u6749\u5c71\u5220\u717d\u886b\u95ea\u9655\u64c5\u8d61\u81b3\u5584\u6c55\u6247\u7f2e\u5892\u4f24\u5546\u8d4f\u664c\u4e0a\u5c1a\u88f3\u68a2\u634e\u7a0d\u70e7\u828d\u52fa\u97f6\u5c11\u54e8\u90b5\u7ecd\u5962\u8d4a\u86c7\u820c\u820d\u8d66\u6444\u5c04\u6151\u6d89\u793e\u8bbe\u7837\u7533\u547b\u4f38\u8eab\u6df1\u5a20\u7ec5\u795e\u6c88\u5ba1\u5a76\u751a\u80be\u614e\u6e17\u58f0\u751f\u7525\u7272\u5347\u7ef3\u7701\u76db\u5269\u80dc\u5723\u5e08\u5931\u72ee\u65bd\u6e7f\u8bd7\u5c38\u8671\u5341\u77f3\u62fe\u65f6\u4ec0\u98df\u8680\u5b9e\u8bc6\u53f2\u77e2\u4f7f\u5c4e\u9a76\u59cb\u5f0f\u793a\u58eb\u4e16\u67ff\u4e8b\u62ed\u8a93\u901d\u52bf\u662f\u55dc\u566c\u9002\u4ed5\u4f8d\u91ca\u9970\u6c0f\u5e02\u6043\u5ba4\u89c6\u8bd5\u6536\u624b\u9996\u5b88\u5bff\u6388\u552e\u53d7\u7626\u517d\u852c\u67a2\u68b3\u6b8a\u6292\u8f93\u53d4\u8212\u6dd1\u758f\u4e66\u8d4e\u5b70\u719f\u85af\u6691\u66d9\u7f72\u8700\u9ecd\u9f20\u5c5e\u672f\u8ff0\u6811\u675f\u620d\u7ad6\u5885\u5eb6\u6570\u6f31\u6055\u5237\u800d\u6454\u8870\u7529\u5e05\u6813\u62f4\u971c\u53cc\u723d\u8c01\u6c34\u7761\u7a0e\u542e\u77ac\u987a\u821c\u8bf4\u7855\u6714\u70c1\u65af\u6495\u5636\u601d\u79c1\u53f8\u4e1d\u6b7b\u8086\u5bfa\u55e3\u56db\u4f3a\u4f3c\u9972\u5df3\u677e\u8038\u6002\u9882\u9001\u5b8b\u8bbc\u8bf5\u641c\u8258\u64de\u55fd\u82cf\u9165\u4fd7\u7d20\u901f\u7c9f\u50f3\u5851\u6eaf\u5bbf\u8bc9\u8083\u9178\u849c\u7b97\u867d\u968b\u968f\u7ee5\u9ad3\u788e\u5c81\u7a57\u9042\u96a7\u795f\u5b59\u635f\u7b0b\u84d1\u68ad\u5506\u7f29\u7410\u7d22\u9501\u6240\u584c\u4ed6\u5b83\u5979\u5854\u736d\u631e\u8e4b\u8e0f\u80ce\u82d4\u62ac\u53f0\u6cf0\u915e\u592a\u6001\u6c70\u574d\u644a\u8d2a\u762b\u6ee9\u575b\u6a80\u75f0\u6f6d\u8c2d\u8c08\u5766\u6bef\u8892\u78b3\u63a2\u53f9\u70ad\u6c64\u5858\u642a\u5802\u68e0\u819b\u5510\u7cd6\u5018\u8eba\u6dcc\u8d9f\u70eb\u638f\u6d9b\u6ed4\u7ee6\u8404\u6843\u9003\u6dd8\u9676\u8ba8\u5957\u7279\u85e4\u817e\u75bc\u8a8a\u68af\u5254\u8e22\u9511\u63d0\u9898\u8e44\u557c\u4f53\u66ff\u568f\u60d5\u6d95\u5243\u5c49\u5929\u6dfb\u586b\u7530\u751c\u606c\u8214\u8146\u6311\u6761\u8fe2\u773a\u8df3\u8d34\u94c1\u5e16\u5385\u542c\u70c3\u6c40\u5ef7\u505c\u4ead\u5ead\u633a\u8247\u901a\u6850\u916e\u77b3\u540c\u94dc\u5f64\u7ae5\u6876\u6345\u7b52\u7edf\u75db\u5077\u6295\u5934\u900f\u51f8\u79c3\u7a81\u56fe\u5f92\u9014\u6d82\u5c60\u571f\u5410\u5154\u6e4d\u56e2\u63a8\u9893\u817f\u8715\u892a\u9000\u541e\u5c6f\u81c0\u62d6\u6258\u8131\u9e35\u9640\u9a6e\u9a7c\u692d\u59a5\u62d3\u553e\u6316\u54c7\u86d9\u6d3c\u5a03\u74e6\u889c\u6b6a\u5916\u8c4c\u5f2f\u6e7e\u73a9\u987d\u4e38\u70f7\u5b8c\u7897\u633d\u665a\u7696\u60cb\u5b9b\u5a49\u4e07\u8155\u6c6a\u738b\u4ea1\u6789\u7f51\u5f80\u65fa\u671b\u5fd8\u5984\u5a01\u5dcd\u5fae\u5371\u97e6\u8fdd\u6845\u56f4\u552f\u60df\u4e3a\u6f4d\u7ef4\u82c7\u840e\u59d4\u4f1f\u4f2a\u5c3e\u7eac\u672a\u851a\u5473\u754f\u80c3\u5582\u9b4f\u4f4d\u6e2d\u8c13\u5c09\u6170\u536b\u761f\u6e29\u868a\u6587\u95fb\u7eb9\u543b\u7a33\u7d0a\u95ee\u55e1\u7fc1\u74ee\u631d\u8717\u6da1\u7a9d\u6211\u65a1\u5367\u63e1\u6c83\u5deb\u545c\u94a8\u4e4c\u6c61\u8bec\u5c4b\u65e0\u829c\u68a7\u543e\u5434\u6bcb\u6b66\u4e94\u6342\u5348\u821e\u4f0d\u4fae\u575e\u620a\u96fe\u6664\u7269\u52ff\u52a1\u609f\u8bef\u6614\u7199\u6790\u897f\u7852\u77fd\u6670\u563b\u5438\u9521\u727a\u7a00\u606f\u5e0c\u6089\u819d\u5915\u60dc\u7184\u70ef\u6eaa\u6c50\u7280\u6a84\u88ad\u5e2d\u4e60\u5ab3\u559c\u94e3\u6d17\u7cfb\u9699\u620f\u7ec6\u778e\u867e\u5323\u971e\u8f96\u6687\u5ce1\u4fa0\u72ed\u4e0b\u53a6\u590f\u5413\u6380\u9528\u5148\u4ed9\u9c9c\u7ea4\u54b8\u8d24\u8854\u8237\u95f2\u6d8e\u5f26\u5acc\u663e\u9669\u73b0\u732e\u53bf\u817a\u9985\u7fa1\u5baa\u9677\u9650\u7ebf\u76f8\u53a2\u9576\u9999\u7bb1\u8944\u6e58\u4e61\u7fd4\u7965\u8be6\u60f3\u54cd\u4eab\u9879\u5df7\u6a61\u50cf\u5411\u8c61\u8427\u785d\u9704\u524a\u54ee\u56a3\u9500\u6d88\u5bb5\u6dc6\u6653\u5c0f\u5b5d\u6821\u8096\u5578\u7b11\u6548\u6954\u4e9b\u6b47\u874e\u978b\u534f\u631f\u643a\u90aa\u659c\u80c1\u8c10\u5199\u68b0\u5378\u87f9\u61c8\u6cc4\u6cfb\u8c22\u5c51\u85aa\u82af\u950c\u6b23\u8f9b\u65b0\u5ffb\u5fc3\u4fe1\u8845\u661f\u8165\u7329\u60fa\u5174\u5211\u578b\u5f62\u90a2\u884c\u9192\u5e78\u674f\u6027\u59d3\u5144\u51f6\u80f8\u5308\u6c79\u96c4\u718a\u4f11\u4fee\u7f9e\u673d\u55c5\u9508\u79c0\u8896\u7ee3\u589f\u620c\u9700\u865a\u5618\u987b\u5f90\u8bb8\u84c4\u9157\u53d9\u65ed\u5e8f\u755c\u6064\u7d6e\u5a7f\u7eea\u7eed\u8f69\u55a7\u5ba3\u60ac\u65cb\u7384\u9009\u7663\u7729\u7eda\u9774\u859b\u5b66\u7a74\u96ea\u8840\u52cb\u718f\u5faa\u65ec\u8be2\u5bfb\u9a6f\u5de1\u6b89\u6c5b\u8bad\u8baf\u900a\u8fc5\u538b\u62bc\u9e26\u9e2d\u5440\u4e2b\u82bd\u7259\u869c\u5d16\u8859\u6daf\u96c5\u54d1\u4e9a\u8bb6\u7109\u54bd\u9609\u70df\u6df9\u76d0\u4e25\u7814\u8712\u5ca9\u5ef6\u8a00\u989c\u960e\u708e\u6cbf\u5944\u63a9\u773c\u884d\u6f14\u8273\u5830\u71d5\u538c\u781a\u96c1\u5501\u5f66\u7130\u5bb4\u8c1a\u9a8c\u6b83\u592e\u9e2f\u79e7\u6768\u626c\u4f6f\u75a1\u7f8a\u6d0b\u9633\u6c27\u4ef0\u75d2\u517b\u6837\u6f3e\u9080\u8170\u5996\u7476\u6447\u5c27\u9065\u7a91\u8c23\u59da\u54ac\u8200\u836f\u8981\u8000\u6930\u564e\u8036\u7237\u91ce\u51b6\u4e5f\u9875\u6396\u4e1a\u53f6\u66f3\u814b\u591c\u6db2\u4e00\u58f9\u533b\u63d6\u94f1\u4f9d\u4f0a\u8863\u9890\u5937\u9057\u79fb\u4eea\u80f0\u7591\u6c82\u5b9c\u59e8\u5f5d\u6905\u8681\u501a\u5df2\u4e59\u77e3\u4ee5\u827a\u6291\u6613\u9091\u5c79\u4ebf\u5f79\u81c6\u9038\u8084\u75ab\u4ea6\u88d4\u610f\u6bc5\u5fc6\u4e49\u76ca\u6ea2\u8be3\u8bae\u8c0a\u8bd1\u5f02\u7ffc\u7fcc\u7ece\u8335\u836b\u56e0\u6bb7\u97f3\u9634\u59fb\u541f\u94f6\u6deb\u5bc5\u996e\u5c39\u5f15\u9690\u5370\u82f1\u6a31\u5a74\u9e70\u5e94\u7f28\u83b9\u8424\u8425\u8367\u8747\u8fce\u8d62\u76c8\u5f71\u9896\u786c\u6620\u54df\u62e5\u4f63\u81c3\u75c8\u5eb8\u96cd\u8e0a\u86f9\u548f\u6cf3\u6d8c\u6c38\u607f\u52c7\u7528\u5e7d\u4f18\u60a0\u5fe7\u5c24\u7531\u90ae\u94c0\u72b9\u6cb9\u6e38\u9149\u6709\u53cb\u53f3\u4f51\u91c9\u8bf1\u53c8\u5e7c\u8fc2\u6de4\u4e8e\u76c2\u6986\u865e\u611a\u8206\u4f59\u4fde\u903e\u9c7c\u6109\u6e1d\u6e14\u9685\u4e88\u5a31\u96e8\u4e0e\u5c7f\u79b9\u5b87\u8bed\u7fbd\u7389\u57df\u828b\u90c1\u5401\u9047\u55bb\u5cea\u5fa1\u6108\u6b32\u72f1\u80b2\u8a89\u6d74\u5bd3\u88d5\u9884\u8c6b\u9a6d\u9e33\u6e0a\u51a4\u5143\u57a3\u8881\u539f\u63f4\u8f95\u56ed\u5458\u5706\u733f\u6e90\u7f18\u8fdc\u82d1\u613f\u6028\u9662\u66f0\u7ea6\u8d8a\u8dc3\u94a5\u5cb3\u7ca4\u6708\u60a6\u9605\u8018\u4e91\u90e7\u5300\u9668\u5141\u8fd0\u8574\u915d\u6655\u97f5\u5b55\u531d\u7838\u6742\u683d\u54c9\u707e\u5bb0\u8f7d\u518d\u5728\u54b1\u6512\u6682\u8d5e\u8d43\u810f\u846c\u906d\u7cdf\u51ff\u85fb\u67a3\u65e9\u6fa1\u86a4\u8e81\u566a\u9020\u7682\u7076\u71e5\u8d23\u62e9\u5219\u6cfd\u8d3c\u600e\u589e\u618e\u66fe\u8d60\u624e\u55b3\u6e23\u672d\u8f67\u94e1\u95f8\u7728\u6805\u69a8\u548b\u4e4d\u70b8\u8bc8\u6458\u658b\u5b85\u7a84\u503a\u5be8\u77bb\u6be1\u8a79\u7c98\u6cbe\u76cf\u65a9\u8f97\u5d2d\u5c55\u8638\u6808\u5360\u6218\u7ad9\u6e5b\u7efd\u6a1f\u7ae0\u5f70\u6f33\u5f20\u638c\u6da8\u6756\u4e08\u5e10\u8d26\u4ed7\u80c0\u7634\u969c\u62db\u662d\u627e\u6cbc\u8d75\u7167\u7f69\u5146\u8087\u53ec\u906e\u6298\u54f2\u86f0\u8f99\u8005\u9517\u8517\u8fd9\u6d59\u73cd\u659f\u771f\u7504\u7827\u81fb\u8d1e\u9488\u4fa6\u6795\u75b9\u8bca\u9707\u632f\u9547\u9635\u84b8\u6323\u7741\u5f81\u72f0\u4e89\u6014\u6574\u62ef\u6b63\u653f\u5e27\u75c7\u90d1\u8bc1\u829d\u679d\u652f\u5431\u8718\u77e5\u80a2\u8102\u6c41\u4e4b\u7ec7\u804c\u76f4\u690d\u6b96\u6267\u503c\u4f84\u5740\u6307\u6b62\u8dbe\u53ea\u65e8\u7eb8\u5fd7\u631a\u63b7\u81f3\u81f4\u7f6e\u5e1c\u5cd9\u5236\u667a\u79e9\u7a1a\u8d28\u7099\u75d4\u6ede\u6cbb\u7a92\u4e2d\u76c5\u5fe0\u949f\u8877\u7ec8\u79cd\u80bf\u91cd\u4ef2\u4f17\u821f\u5468\u5dde\u6d32\u8bcc\u7ca5\u8f74\u8098\u5e1a\u5492\u76b1\u5b99\u663c\u9aa4\u73e0\u682a\u86db\u6731\u732a\u8bf8\u8bdb\u9010\u7af9\u70db\u716e\u62c4\u77a9\u5631\u4e3b\u8457\u67f1\u52a9\u86c0\u8d2e\u94f8\u7b51\u4f4f\u6ce8\u795d\u9a7b\u6293\u722a\u62fd\u4e13\u7816\u8f6c\u64b0\u8d5a\u7bc6\u6869\u5e84\u88c5\u5986\u649e\u58ee\u72b6\u690e\u9525\u8ffd\u8d58\u5760\u7f00\u8c06\u51c6\u6349\u62d9\u5353\u684c\u7422\u8301\u914c\u5544\u7740\u707c\u6d4a\u5179\u54a8\u8d44\u59ff\u6ecb\u6dc4\u5b5c\u7d2b\u4ed4\u7c7d\u6ed3\u5b50\u81ea\u6e0d\u5b57\u9b03\u68d5\u8e2a\u5b97\u7efc\u603b\u7eb5\u90b9\u8d70\u594f\u63cd\u79df\u8db3\u5352\u65cf\u7956\u8bc5\u963b\u7ec4\u94bb\u7e82\u5634\u9189\u6700\u7f6a\u5c0a\u9075\u6628\u5de6\u4f50\u67de\u505a\u4f5c\u5750\u5ea7$'", "\n", "alp2num_character", "=", "{", "}", "\n", "for", "index", ",", "char", "in", "enumerate", "(", "alphabet_character", ")", ":", "\n", "    ", "alp2num_character", "[", "char", "]", "=", "index", "\n", "\n", "", "character_to_strokelist", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.oneHot": [[136, 147], ["v_length.size", "v_length.max", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "range", "v[].view().long", "v_onehot[].scatter_", "torch.FloatTensor", "torch.FloatTensor", "v[].view"], "function", ["None"], ["string", "=", "''", "\n", "for", "line", "in", "text", ":", "\n", "        ", "string", "+=", "line", "\n", "", "if", "len", "(", "string", ".", "strip", "(", ")", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"Code must be executed in **SCREEN**!\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "\n", "", "", "def", "saver", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "'./history/{}'", ".", "format", "(", "config", "[", "'exp_name'", "]", ")", ")", "\n", "", "except", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.loadData": [[149, 152], ["v.resize_().copy_", "v.resize_", "data.size"], "function", ["None"], ["", "os", ".", "mkdir", "(", "'./history/{}'", ".", "format", "(", "config", "[", "'exp_name'", "]", ")", ")", "\n", "\n", "import", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.prettyPrint": [[153, 157], ["print", "print", "str", "v.data.type", "v.size", "v.max", "v.min", "v.mean"], "function", ["None"], ["print", "(", "'**** Experiment Name: {} ****'", ".", "format", "(", "config", "[", "'exp_name'", "]", ")", ")", "\n", "\n", "localtime", "=", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "'./history'", ",", "config", "[", "'exp_name'", "]", ",", "str", "(", "localtime", ")", ")", ",", "'w+'", ")", "\n", "f", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.assureRatio": [[159, 166], ["main.size", "torch.UpsamplingBilinear2d", "nn.UpsamplingBilinear2d."], "function", ["None"], ["src", "=", "'./train.py'", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "'./history'", ",", "config", "[", "'exp_name'", "]", ",", "'train.py'", ")", "\n", "copyfile", "(", "src", ",", "dst", ")", "\n", "\n", "src", "=", "'./util.py'", "\n", "dst", "=", "os", ".", "path", ".", "join", "(", "'./history'", ",", "config", "[", "'exp_name'", "]", ",", "'util.py'", ")", "\n", "copyfile", "(", "src", ",", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.__init__": [[34, 74], ["object.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "utils.ssim_psnr.SSIM", "utils.utils_moran.strLabelConverterForAttention", "utils.utils_crnn.strLabelConverter", "base.TextBase.check_exp_name", "base.TextBase.make_logger", "base.TextBase.make_writer", "base.TextBase.clean_old_ckpt", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.check_exp_name", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.make_logger", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.make_writer", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.clean_old_ckpt"], ["        ", "super", "(", "TextBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "scale_factor", "=", "self", ".", "config", ".", "TRAIN", ".", "down_sample_scale", "\n", "if", "self", ".", "args", ".", "syn", ":", "\n", "            ", "self", ".", "align_collate", "=", "alignCollate_syn", "\n", "self", ".", "load_dataset", "=", "lmdbDataset", "\n", "", "elif", "self", ".", "args", ".", "mixed", ":", "\n", "            ", "self", ".", "align_collate", "=", "alignCollate_real", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_mix", "\n", "", "else", ":", "\n", "            ", "self", ".", "align_collate", "=", "alignCollate_real", "\n", "self", ".", "load_dataset", "=", "lmdbDataset_real", "\n", "", "self", ".", "resume", "=", "args", ".", "resume", "if", "args", ".", "resume", "is", "not", "None", "else", "config", ".", "TRAIN", ".", "resume", "\n", "self", ".", "batch_size", "=", "args", ".", "batch_size", "if", "args", ".", "batch_size", "is", "not", "None", "else", "self", ".", "config", ".", "TRAIN", ".", "batch_size", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "alpha_dict", "=", "{", "\n", "'digit'", ":", "string", ".", "digits", ",", "\n", "'lower'", ":", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", ",", "\n", "'upper'", ":", "string", ".", "digits", "+", "string", ".", "ascii_letters", ",", "\n", "'all'", ":", "string", ".", "digits", "+", "string", ".", "ascii_letters", "+", "string", ".", "punctuation", "\n", "}", "\n", "self", ".", "test_data_dir", "=", "self", ".", "args", ".", "test_data_dir", "if", "self", ".", "args", ".", "test_data_dir", "is", "not", "None", "else", "self", ".", "config", ".", "TEST", ".", "test_data_dir", "\n", "self", ".", "voc_type", "=", "self", ".", "config", ".", "TRAIN", ".", "voc_type", "\n", "self", ".", "alphabet", "=", "alpha_dict", "[", "self", ".", "voc_type", "]", "\n", "self", ".", "max_len", "=", "config", ".", "TRAIN", ".", "max_len", "\n", "# self.vis_dir = self.args.vis_dir if self.args.vis_dir is not None else self.config.TRAIN.VAL.vis_dir", "\n", "self", ".", "cal_psnr", "=", "ssim_psnr", ".", "calculate_psnr", "\n", "self", ".", "cal_ssim", "=", "ssim_psnr", ".", "SSIM", "(", ")", "\n", "self", ".", "mask", "=", "self", ".", "args", ".", "mask", "\n", "alphabet_moran", "=", "':'", ".", "join", "(", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", "+", "'$'", ")", "\n", "self", ".", "converter_moran", "=", "utils_moran", ".", "strLabelConverterForAttention", "(", "alphabet_moran", ",", "':'", ")", "\n", "self", ".", "converter_crnn", "=", "utils_crnn", ".", "strLabelConverter", "(", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", ")", "\n", "if", "not", "args", ".", "test", "and", "not", "args", ".", "demo", ":", "\n", "            ", "self", ".", "clean_old_ckpt", "(", ")", "\n", "", "self", ".", "logging", "=", "logging", "\n", "self", ".", "make_logger", "(", ")", "\n", "self", ".", "make_writer", "(", ")", "\n", "\n", "", "def", "make_logger", "(", "self", ")", ":", "\n", "        ", "self", ".", "logging", ".", "basicConfig", "(", "filename", "=", "\"checkpoint/{}/log.txt\"", ".", "format", "(", "self", ".", "args", ".", "exp_name", ")", ",", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.make_logger": [[89, 97], ["base.TextBase.logging.basicConfig", "base.TextBase.logging.getLogger().addHandler", "base.TextBase.logging.info", "os.path.exists", "os.mkdir", "logging.StreamHandler", "str", "base.TextBase.logging.getLogger"], "methods", ["None"], ["\n", "\n", "", "def", "get_train_data", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "if", "isinstance", "(", "cfg", ".", "train_data_dir", ",", "list", ")", ":", "\n", "            ", "dataset_list", "=", "[", "]", "\n", "for", "data_dir_", "in", "cfg", ".", "train_data_dir", ":", "\n", "                ", "dataset_list", ".", "append", "(", "\n", "self", ".", "load_dataset", "(", "root", "=", "data_dir_", ",", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.clean_old_ckpt": [[98, 107], ["os.path.exists", "os.mkdir", "input", "shutil.rmtree", "print", "input.strip", "print", "exit"], "methods", ["None"], ["voc_type", "=", "cfg", ".", "voc_type", ",", "\n", "max_len", "=", "cfg", ".", "max_len", ")", ")", "\n", "", "train_dataset", "=", "dataset", ".", "ConcatDataset", "(", "dataset_list", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'check trainRoot'", ")", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "int", "(", "cfg", ".", "workers", ")", ",", "\n", "collate_fn", "=", "self", ".", "align_collate", "(", "imgH", "=", "cfg", ".", "height", ",", "imgW", "=", "cfg", ".", "width", ",", "down_sample_scale", "=", "cfg", ".", "down_sample_scale", ",", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.make_writer": [[109, 111], ["torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter"], "methods", ["None"], ["drop_last", "=", "True", ")", "\n", "return", "train_dataset", ",", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.get_train_data": [[113, 133], ["isinstance", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.ConcatDataset", "TypeError", "dataset_list.append", "int", "base.TextBase.align_collate", "base.TextBase.load_dataset"], "methods", ["None"], ["        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "assert", "isinstance", "(", "cfg", ".", "VAL", ".", "val_data_dir", ",", "list", ")", "\n", "dataset_list", "=", "[", "]", "\n", "loader_list", "=", "[", "]", "\n", "for", "data_dir_", "in", "cfg", ".", "VAL", ".", "val_data_dir", ":", "\n", "            ", "val_dataset", ",", "val_loader", "=", "self", ".", "get_test_data", "(", "data_dir_", ")", "\n", "dataset_list", ".", "append", "(", "val_dataset", ")", "\n", "loader_list", ".", "append", "(", "val_loader", ")", "\n", "", "return", "dataset_list", ",", "loader_list", "\n", "\n", "", "def", "get_test_data", "(", "self", ",", "dir_", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "test_dataset", "=", "self", ".", "load_dataset", "(", "root", "=", "dir_", ",", "\n", "voc_type", "=", "cfg", ".", "voc_type", ",", "\n", "max_len", "=", "cfg", ".", "max_len", ",", "\n", "test", "=", "True", ",", "\n", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "int", "(", "cfg", ".", "workers", ")", ",", "\n", "collate_fn", "=", "self", ".", "align_collate", "(", "imgH", "=", "cfg", ".", "height", ",", "imgW", "=", "cfg", ".", "width", ",", "down_sample_scale", "=", "cfg", ".", "down_sample_scale", ",", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.get_val_data": [[134, 144], ["isinstance", "base.TextBase.get_test_data", "dataset_list.append", "loader_list.append"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.get_test_data"], ["mask", "=", "self", ".", "mask", ")", ",", "\n", "drop_last", "=", "False", ")", "\n", "return", "test_dataset", ",", "test_loader", "\n", "\n", "", "def", "generator_init", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "if", "self", ".", "args", ".", "arch", "==", "'tbsrn'", ":", "\n", "            ", "model", "=", "tbsrn", ".", "TBSRN", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "\n", "STN", "=", "self", ".", "args", ".", "STN", ",", "mask", "=", "self", ".", "mask", ",", "srb_nums", "=", "self", ".", "args", ".", "srb", ",", "hidden_units", "=", "self", ".", "args", ".", "hd_u", ")", "\n", "image_crit", "=", "text_focus_loss", ".", "TextFocusLoss", "(", "self", ".", "args", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'tsrn'", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.get_test_data": [[145, 159], ["base.TextBase.load_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "int", "base.TextBase.align_collate"], "methods", ["None"], ["            ", "model", "=", "tsrn", ".", "TSRN", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "\n", "STN", "=", "self", ".", "args", ".", "STN", ",", "mask", "=", "self", ".", "mask", ",", "srb_nums", "=", "self", ".", "args", ".", "srb", ",", "hidden_units", "=", "self", ".", "args", ".", "hd_u", ")", "\n", "image_crit", "=", "text_focus_loss", ".", "TextFocusLoss", "(", "self", ".", "args", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'bicubic'", "and", "self", ".", "args", ".", "test", ":", "\n", "            ", "model", "=", "bicubic", ".", "BICUBIC", "(", "scale_factor", "=", "self", ".", "scale_factor", ")", "\n", "image_crit", "=", "text_focus_loss", ".", "TextFocusLoss", "(", "self", ".", "args", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'srcnn'", ":", "\n", "            ", "model", "=", "srcnn", ".", "SRCNN", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "STN", "=", "self", ".", "args", ".", "STN", ")", "\n", "image_crit", "=", "text_focus_loss", ".", "TextFocusLoss", "(", "self", ".", "args", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'vdsr'", ":", "\n", "            ", "model", "=", "vdsr", ".", "VDSR", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "STN", "=", "self", ".", "args", ".", "STN", ")", "\n", "image_crit", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'srres'", ":", "\n", "            ", "model", "=", "srresnet", ".", "SRResNet", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "\n", "STN", "=", "self", ".", "args", ".", "STN", ",", "mask", "=", "self", ".", "mask", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.generator_init": [[160, 207], ["loss.stroke_focus_loss.StrokeFocusLoss", "base.get_parameter_number", "base.TextBase.logging.info", "lapsrn.LapSRN.tbsrn.TBSRN", "lapsrn.LapSRN.to", "loss.stroke_focus_loss.StrokeFocusLoss.to", "lapsrn.LapSRN.tsrn.TSRN", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "base.TextBase.logging.info", "bicubic.BICUBIC", "lapsrn.LapSRN.load_state_dict", "lapsrn.LapSRN.load_state_dict", "lapsrn.LapSRN.srcnn.SRCNN", "vdsr.VDSR", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "lapsrn.LapSRN.srresnet.SRResNet", "[].items", "lapsrn.LapSRN.esrgan.RRDBNet", "rdn.RDN", "lapsrn.LapSRN.edsr.EDSR", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "lapsrn.LapSRN"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.get_parameter_number"], ["image_crit", "=", "text_focus_loss", ".", "TextFocusLoss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'esrgan'", ":", "\n", "            ", "model", "=", "esrgan", ".", "RRDBNet", "(", "scale_factor", "=", "self", ".", "scale_factor", ")", "\n", "image_crit", "=", "nn", ".", "L1Loss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'rdn'", ":", "\n", "            ", "model", "=", "rdn", ".", "RDN", "(", "scale_factor", "=", "self", ".", "scale_factor", ")", "\n", "image_crit", "=", "nn", ".", "L1Loss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'edsr'", ":", "\n", "            ", "model", "=", "edsr", ".", "EDSR", "(", "scale_factor", "=", "self", ".", "scale_factor", ")", "\n", "image_crit", "=", "nn", ".", "L1Loss", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "arch", "==", "'lapsrn'", ":", "\n", "            ", "model", "=", "lapsrn", ".", "LapSRN", "(", "scale_factor", "=", "self", ".", "scale_factor", ",", "width", "=", "cfg", ".", "width", ",", "height", "=", "cfg", ".", "height", ",", "STN", "=", "self", ".", "args", ".", "STN", ")", "\n", "image_crit", "=", "lapsrn", ".", "L1_Charbonnier_loss", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "", "if", "self", ".", "args", ".", "arch", "!=", "'bicubic'", ":", "\n", "            ", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "image_crit", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "cfg", ".", "ngpu", ">", "1", ":", "\n", "                ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "# image_crit = torch.nn.DataParallel(image_crit)", "\n", "", "if", "self", ".", "resume", "is", "not", "''", ":", "\n", "                ", "self", ".", "logging", ".", "info", "(", "'loading pre-trained model from %s '", "%", "self", ".", "resume", ")", "\n", "if", "self", ".", "config", ".", "TRAIN", ".", "ngpu", "==", "1", ":", "\n", "                    ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "resume", ")", "[", "'state_dict_G'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "model", ".", "load_state_dict", "(", "\n", "{", "'module.'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "torch", ".", "load", "(", "self", ".", "resume", ")", "[", "'state_dict_G'", "]", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "", "", "para_num", "=", "get_parameter_number", "(", "model", ")", "\n", "self", ".", "logging", ".", "info", "(", "'Total Parameters {}'", ".", "format", "(", "para_num", ")", ")", "\n", "\n", "return", "{", "'model'", ":", "model", ",", "'crit'", ":", "image_crit", "}", "\n", "\n", "", "def", "optimizer_init", "(", "self", ",", "model", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "lr", ",", "\n", "betas", "=", "(", "cfg", ".", "beta1", ",", "0.999", ")", ")", "\n", "return", "optimizer", "\n", "\n", "", "def", "tripple_display", "(", "self", ",", "image_in", ",", "image_out", ",", "image_target", ",", "pred_str_lr", ",", "pred_str_sr", ",", "label_strs", ",", "index", ")", ":", "\n", "        ", "for", "i", "in", "(", "range", "(", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "n_vis", ")", ")", ":", "\n", "            ", "tensor_in", "=", "image_in", "[", "i", "]", "[", ":", "3", ",", ":", ",", ":", "]", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "image_target", ".", "shape", "[", "-", "2", "]", ",", "image_target", ".", "shape", "[", "-", "1", "]", ")", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.optimizer_init": [[208, 213], ["torch.Adam", "torch.Adam", "torch.Adam", "model.parameters"], "methods", ["None"], ["\n", "tensor_in", "=", "transform", "(", "tensor_in", ".", "cpu", "(", ")", ")", "\n", "tensor_out", "=", "image_out", "[", "i", "]", "[", ":", "3", ",", ":", ",", ":", "]", "\n", "tensor_target", "=", "image_target", "[", "i", "]", "[", ":", "3", ",", ":", ",", ":", "]", "\n", "images", "=", "(", "[", "tensor_in", ",", "tensor_out", ".", "cpu", "(", ")", ",", "tensor_target", ".", "cpu", "(", ")", "]", ")", "\n", "vis_im", "=", "torch", ".", "stack", "(", "images", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.tripple_display": [[214, 239], ["range", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torchvision.utils.make_grid", "os.path.join", "os.path.join", "im_name.replace.replace.replace", "transforms.Compose.cpu", "tensor_out.cpu", "tensor_target.cpu", "os.path.exists", "os.mkdir", "str", "os.path.exists", "os.mkdir", "torchvision.utils.save_image", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "os.path.join"], "methods", ["None"], ["vis_im", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "vis_im", ",", "nrow", "=", "1", ",", "padding", "=", "0", ")", "\n", "out_root", "=", "os", ".", "path", ".", "join", "(", "'./demo'", ",", "self", ".", "vis_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_root", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "out_root", ")", "\n", "", "out_path", "=", "os", ".", "path", ".", "join", "(", "out_root", ",", "str", "(", "index", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "out_path", ")", "\n", "", "im_name", "=", "pred_str_lr", "[", "i", "]", "+", "'_'", "+", "pred_str_sr", "[", "i", "]", "+", "'_'", "+", "label_strs", "[", "i", "]", "+", "'_.png'", "\n", "im_name", "=", "im_name", ".", "replace", "(", "'/'", ",", "''", ")", "\n", "if", "index", "is", "not", "0", ":", "\n", "                ", "torchvision", ".", "utils", ".", "save_image", "(", "vis_im", ",", "os", ".", "path", ".", "join", "(", "out_path", ",", "im_name", ")", ",", "padding", "=", "0", ")", "\n", "\n", "", "", "", "def", "test_display", "(", "self", ",", "image_in", ",", "image_out", ",", "image_target", ",", "pred_str_lr", ",", "pred_str_sr", ",", "label_strs", ",", "str_filt", ")", ":", "\n", "        ", "visualized", "=", "0", "\n", "for", "i", "in", "(", "range", "(", "image_in", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "            ", "if", "True", ":", "\n", "                ", "if", "(", "str_filt", "(", "pred_str_lr", "[", "i", "]", ",", "'lower'", ")", "!=", "str_filt", "(", "label_strs", "[", "i", "]", ",", "'lower'", ")", ")", "and", "(", "str_filt", "(", "pred_str_sr", "[", "i", "]", ",", "'lower'", ")", "==", "str_filt", "(", "label_strs", "[", "i", "]", ",", "'lower'", ")", ")", ":", "\n", "                    ", "visualized", "+=", "1", "\n", "tensor_in", "=", "image_in", "[", "i", "]", ".", "cpu", "(", ")", "\n", "tensor_out", "=", "image_out", "[", "i", "]", ".", "cpu", "(", ")", "\n", "tensor_target", "=", "image_target", "[", "i", "]", ".", "cpu", "(", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "image_target", ".", "shape", "[", "-", "2", "]", ",", "image_target", ".", "shape", "[", "-", "1", "]", ")", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.test_display": [[240, 268], ["range", "image_in[].cpu", "image_out[].cpu", "image_target[].cpu", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torchvision.utils.make_grid", "os.path.join", "im_name.replace.replace.replace", "torchvision.utils.save_image", "str_filt", "str_filt", "str_filt", "str_filt", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.join", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.str_filt", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.str_filt", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.str_filt", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.str_filt"], [")", "\n", "tensor_in", "=", "transform", "(", "tensor_in", ")", "\n", "images", "=", "(", "[", "tensor_in", ",", "tensor_out", ",", "tensor_target", "]", ")", "\n", "vis_im", "=", "torch", ".", "stack", "(", "images", ")", "\n", "vis_im", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "vis_im", ",", "nrow", "=", "1", ",", "padding", "=", "0", ")", "\n", "out_root", "=", "os", ".", "path", ".", "join", "(", "'./display'", ",", "self", ".", "vis_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_root", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "out_root", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "out_root", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "out_root", ")", "\n", "", "im_name", "=", "pred_str_lr", "[", "i", "]", "+", "'_'", "+", "pred_str_sr", "[", "i", "]", "+", "'_'", "+", "label_strs", "[", "i", "]", "+", "'_.png'", "\n", "im_name", "=", "im_name", ".", "replace", "(", "'/'", ",", "''", ")", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "vis_im", ",", "os", ".", "path", ".", "join", "(", "out_root", ",", "im_name", ")", ",", "padding", "=", "0", ")", "\n", "", "", "", "return", "visualized", "\n", "\n", "", "def", "save_checkpoint", "(", "self", ",", "netG", ",", "epoch", ",", "iters", ",", "best_acc_dict", ",", "best_model_info", ",", "is_best", ",", "converge_list", ",", "exp_name", ")", ":", "\n", "# ckpt_path = os.path.join('checkpoint', exp_name, self.vis_dir)", "\n", "        ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "'checkpoint'", ",", "exp_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "ckpt_path", ")", "\n", "", "save_dict", "=", "{", "\n", "'state_dict_G'", ":", "netG", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'info'", ":", "{", "'arch'", ":", "self", ".", "args", ".", "arch", ",", "'iters'", ":", "iters", ",", "'epochs'", ":", "epoch", ",", "'batch_size'", ":", "self", ".", "batch_size", ",", "\n", "'voc_type'", ":", "self", ".", "voc_type", ",", "'up_scale_factor'", ":", "self", ".", "scale_factor", "}", ",", "\n", "'best_history_res'", ":", "best_acc_dict", ",", "\n", "'best_model_info'", ":", "best_model_info", ",", "\n", "'param_num'", ":", "sum", "(", "[", "param", ".", "nelement", "(", ")", "for", "param", "in", "netG", ".", "module", ".", "parameters", "(", ")", "]", ")", ",", "\n", "'converge'", ":", "converge_list", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.save_checkpoint": [[269, 287], ["os.path.join", "os.path.exists", "os.mkdir", "netG.module.state_dict", "sum", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.join", "param.nelement", "netG.module.parameters"], "methods", ["None"], ["if", "is_best", ":", "\n", "            ", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "'model_best.pth'", ")", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "'checkpoint.pth'", ")", ")", "\n", "\n", "", "", "def", "MORAN_init", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "alphabet", "=", "':'", ".", "join", "(", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", "+", "'$'", ")", "\n", "MORAN", "=", "moran", ".", "MORAN", "(", "1", ",", "len", "(", "alphabet", ".", "split", "(", "':'", ")", ")", ",", "256", ",", "32", ",", "100", ",", "BidirDecoder", "=", "True", ",", "\n", "inputDataType", "=", "'torch.cuda.FloatTensor'", ",", "CUDA", "=", "True", ")", "\n", "model_path", "=", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "moran_pretrained", "\n", "self", ".", "logging", ".", "info", "(", "'loading pre-trained moran model from %s'", "%", "model_path", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "MORAN_state_dict_rename", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", "# remove `module.`", "\n", "MORAN_state_dict_rename", "[", "name", "]", "=", "v", "\n", "", "MORAN", ".", "load_state_dict", "(", "MORAN_state_dict_rename", ")", "\n", "MORAN", "=", "MORAN", ".", "to", "(", "self", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.MORAN_init": [[288, 307], ["moran.MORAN", "base.TextBase.logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.load.items", "torch.load.items", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "len", "k.replace", "alphabet.split", "range"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval"], ["MORAN", "=", "torch", ".", "nn", ".", "DataParallel", "(", "MORAN", ",", "device_ids", "=", "range", "(", "cfg", ".", "ngpu", ")", ")", "\n", "for", "p", "in", "MORAN", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "MORAN", ".", "eval", "(", ")", "\n", "return", "MORAN", "\n", "\n", "", "def", "parse_moran_data", "(", "self", ",", "imgs_input", ")", ":", "\n", "        ", "batch_size", "=", "imgs_input", ".", "shape", "[", "0", "]", "\n", "imgs_input", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "imgs_input", ",", "(", "32", ",", "100", ")", ",", "mode", "=", "'bicubic'", ")", "\n", "R", "=", "imgs_input", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "G", "=", "imgs_input", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "B", "=", "imgs_input", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", "\n", "tensor", "=", "0.299", "*", "R", "+", "0.587", "*", "G", "+", "0.114", "*", "B", "\n", "text", "=", "torch", ".", "LongTensor", "(", "batch_size", "*", "5", ")", "\n", "length", "=", "torch", ".", "IntTensor", "(", "batch_size", ")", "\n", "max_iter", "=", "20", "\n", "t", ",", "l", "=", "self", ".", "converter_moran", ".", "encode", "(", "[", "'0'", "*", "max_iter", "]", "*", "batch_size", ")", "\n", "utils_moran", ".", "loadData", "(", "text", ",", "t", ")", "\n", "utils_moran", ".", "loadData", "(", "length", ",", "l", ")", "\n", "return", "tensor", ",", "length", ",", "text", ",", "text", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.parse_moran_data": [[308, 322], ["torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "base.TextBase.converter_moran.encode", "utils.utils_moran.loadData", "utils.utils_moran.loadData"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.loadData", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.loadData"], ["\n", "", "def", "CRNN_init", "(", "self", ")", ":", "\n", "        ", "model", "=", "crnn", ".", "CRNN", "(", "32", ",", "1", ",", "37", ",", "256", ")", "\n", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "aster_info", "=", "AsterInfo", "(", "cfg", ".", "voc_type", ")", "\n", "model_path", "=", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "crnn_pretrained", "\n", "self", ".", "logging", ".", "info", "(", "'loading pretrained crnn model from %s'", "%", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "return", "model", ",", "aster_info", "\n", "\n", "", "def", "parse_crnn_data", "(", "self", ",", "imgs_input", ")", ":", "\n", "        ", "imgs_input", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "imgs_input", ",", "(", "32", ",", "100", ")", ",", "mode", "=", "'bicubic'", ")", "\n", "R", "=", "imgs_input", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "G", "=", "imgs_input", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.CRNN_init": [[323, 332], ["model.to.crnn.CRNN", "model.to.to.to", "base.AsterInfo", "base.TextBase.logging.info", "model.to.to.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["B", "=", "imgs_input", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", "\n", "tensor", "=", "0.299", "*", "R", "+", "0.587", "*", "G", "+", "0.114", "*", "B", "\n", "return", "tensor", "\n", "\n", "", "def", "Aster_init", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "aster_info", "=", "AsterInfo", "(", "cfg", ".", "voc_type", ")", "\n", "aster", "=", "recognizer", ".", "RecognizerBuilder", "(", "arch", "=", "'ResNet_ASTER'", ",", "rec_num_classes", "=", "aster_info", ".", "rec_num_classes", ",", "\n", "sDim", "=", "512", ",", "attDim", "=", "512", ",", "max_len_labels", "=", "aster_info", ".", "max_len", ",", "\n", "eos", "=", "aster_info", ".", "char2id", "[", "aster_info", ".", "EOS", "]", ",", "STN_ON", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.parse_crnn_data": [[333, 340], ["torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["aster", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "rec_pretrained", ")", "[", "'state_dict'", "]", ")", "\n", "self", ".", "logging", ".", "info", "(", "'load pred_trained aster model from %s'", "%", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "rec_pretrained", ")", "\n", "aster", "=", "aster", ".", "to", "(", "self", ".", "device", ")", "\n", "aster", "=", "torch", ".", "nn", ".", "DataParallel", "(", "aster", ",", "device_ids", "=", "range", "(", "cfg", ".", "ngpu", ")", ")", "\n", "return", "aster", ",", "aster_info", "\n", "\n", "", "def", "parse_aster_data", "(", "self", ",", "imgs_input", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.Aster_init": [[341, 352], ["base.AsterInfo", "recognizer.RecognizerBuilder", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "base.TextBase.logging.info", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "range"], "methods", ["None"], ["aster_info", "=", "AsterInfo", "(", "cfg", ".", "voc_type", ")", "\n", "input_dict", "=", "{", "}", "\n", "images_input", "=", "imgs_input", ".", "to", "(", "self", ".", "device", ")", "\n", "input_dict", "[", "'images'", "]", "=", "images_input", "*", "2", "-", "1", "\n", "batch_size", "=", "images_input", ".", "shape", "[", "0", "]", "\n", "input_dict", "[", "'rec_targets'", "]", "=", "torch", ".", "IntTensor", "(", "batch_size", ",", "aster_info", ".", "max_len", ")", ".", "fill_", "(", "1", ")", "\n", "input_dict", "[", "'rec_lengths'", "]", "=", "[", "aster_info", ".", "max_len", "]", "*", "batch_size", "\n", "return", "input_dict", "\n", "\n", "\n", "", "", "class", "AsterInfo", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "voc_type", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.parse_aster_data": [[353, 363], ["base.AsterInfo", "imgs_input.to", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor().fill_", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor"], "methods", ["None"], ["        ", "super", "(", "AsterInfo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "assert", "voc_type", "in", "[", "'digit'", ",", "'lower'", ",", "'upper'", ",", "'all'", "]", "\n", "self", ".", "EOS", "=", "'EOS'", "\n", "self", ".", "max_len", "=", "100", "\n", "self", ".", "PADDING", "=", "'PADDING'", "\n", "self", ".", "UNKNOWN", "=", "'UNKNOWN'", "\n", "self", ".", "voc", "=", "get_vocabulary", "(", "voc_type", ",", "EOS", "=", "self", ".", "EOS", ",", "PADDING", "=", "self", ".", "PADDING", ",", "UNKNOWN", "=", "self", ".", "UNKNOWN", ")", "\n", "self", ".", "char2id", "=", "dict", "(", "zip", "(", "self", ".", "voc", ",", "range", "(", "len", "(", "self", ".", "voc", ")", ")", ")", ")", "\n", "self", ".", "id2char", "=", "dict", "(", "zip", "(", "range", "(", "len", "(", "self", ".", "voc", ")", ")", ",", "self", ".", "voc", ")", ")", "\n", "self", ".", "rec_num_classes", "=", "len", "(", "self", ".", "voc", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.AsterInfo.__init__": [[366, 378], ["object.__init__", "utils.labelmaps.get_vocabulary", "dict", "dict", "len", "zip", "zip", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.labelmaps.get_vocabulary"], []], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.get_parameter_number": [[29, 32], ["sum", "p.numel", "net.parameters"], "function", ["None"], ["    ", "total_num", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "net", ".", "parameters", "(", ")", ")", "\n", "return", "total_num", "\n", "\n", "", "class", "TextBase", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.train": [[37, 138], ["super_resolution.TextSR.get_train_data", "super_resolution.TextSR.get_val_data", "super_resolution.TextSR.generator_init", "super_resolution.TextSR.CRNN_init", "super_resolution.TextSR.optimizer_init", "dict", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "range", "zip", "enumerate", "model.train", "model.parameters", "images_lr.to.to.to", "images_hr.to.to.to", "model", "image_crit", "super_resolution.TextSR.writer.add_scalar", "super_resolution.TextSR.writer.add_scalar", "super_resolution.TextSR.writer.add_scalar", "super_resolution.TextSR.zero_grad", "loss_im.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "super_resolution.TextSR.step", "len", "model.parameters", "logging.info", "logging.info", "enumerate", "super_resolution.TextSR.save_checkpoint", "val_loader_dir.split", "len", "logging.info", "super_resolution.TextSR.eval", "converge_list.append", "float", "sum", "sum", "logging.info", "super_resolution.TextSR.save_checkpoint", "datetime.datetime.datetime.now().strftime", "len", "float", "super_resolution.TextSR.config.TRAIN.VAL.val_data_dir[].split", "float", "logging.info", "logging.info", "current_acc_dict.values", "current_acc_dict.values", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.get_train_data", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.get_val_data", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.generator_init", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.CRNN_init", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.optimizer_init", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.train", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.save_checkpoint", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.save_checkpoint"], ["    ", "def", "train", "(", "self", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "config", ".", "TRAIN", "\n", "train_dataset", ",", "train_loader", "=", "self", ".", "get_train_data", "(", ")", "\n", "val_dataset_list", ",", "val_loader_list", "=", "self", ".", "get_val_data", "(", ")", "\n", "model_dict", "=", "self", ".", "generator_init", "(", ")", "\n", "model", ",", "image_crit", "=", "model_dict", "[", "'model'", "]", ",", "model_dict", "[", "'crit'", "]", "\n", "\n", "aster", ",", "aster_info", "=", "self", ".", "CRNN_init", "(", ")", "\n", "optimizer_G", "=", "self", ".", "optimizer_init", "(", "model", ")", "\n", "\n", "# if not os.path.exists(cfg.ckpt_dir):", "\n", "#     os.makedirs(cfg.ckpt_dir)", "\n", "best_history_acc", "=", "dict", "(", "\n", "zip", "(", "[", "val_loader_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "val_loader_dir", "in", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "val_data_dir", "]", ",", "\n", "[", "0", "]", "*", "len", "(", "val_loader_list", ")", ")", ")", "\n", "best_model_acc", "=", "copy", ".", "deepcopy", "(", "best_history_acc", ")", "\n", "best_model_psnr", "=", "copy", ".", "deepcopy", "(", "best_history_acc", ")", "\n", "best_model_ssim", "=", "copy", ".", "deepcopy", "(", "best_history_acc", ")", "\n", "best_acc", "=", "0", "\n", "converge_list", "=", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "cfg", ".", "epochs", ")", ":", "\n", "            ", "for", "j", ",", "data", "in", "(", "enumerate", "(", "train_loader", ")", ")", ":", "\n", "                ", "model", ".", "train", "(", ")", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "True", "\n", "", "iters", "=", "len", "(", "train_loader", ")", "*", "epoch", "+", "j", "\n", "\n", "images_hr", ",", "images_lr", ",", "label_strs", "=", "data", "\n", "images_lr", "=", "images_lr", ".", "to", "(", "self", ".", "device", ")", "\n", "images_hr", "=", "images_hr", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "sr_img", "=", "model", "(", "images_lr", ")", "\n", "\n", "loss", ",", "mse_loss", ",", "attention_loss", ",", "recognition_loss", "=", "image_crit", "(", "sr_img", ",", "images_hr", ",", "label_strs", ")", "\n", "\n", "global", "times", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'loss/mse_loss'", ",", "mse_loss", ",", "times", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'loss/position_loss'", ",", "attention_loss", ",", "times", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'loss/content_loss'", ",", "recognition_loss", ",", "times", ")", "\n", "times", "+=", "1", "\n", "\n", "loss_im", "=", "loss", "*", "100", "\n", "\n", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "loss_im", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "0.25", ")", "\n", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "if", "iters", "%", "cfg", ".", "displayInterval", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "'[{}]\\t'", "\n", "'Epoch: [{}][{}/{}]\\t'", "\n", "# 'vis_dir={:s}\\t'", "\n", "'total_loss {:.3f} \\t'", "\n", "'mse_loss {:.3f} \\t'", "\n", "'attention_loss {:.3f} \\t'", "\n", "'recognition_loss {:.3f} \\t'", "\n", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "epoch", ",", "j", "+", "1", ",", "len", "(", "train_loader", ")", ",", "\n", "# self.vis_dir,", "\n", "float", "(", "loss_im", ".", "data", ")", ",", "\n", "mse_loss", ",", "\n", "attention_loss", ",", "\n", "recognition_loss", "\n", ")", ")", "\n", "\n", "", "if", "iters", "%", "cfg", ".", "VAL", ".", "valInterval", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "'======================================================'", ")", "\n", "current_acc_dict", "=", "{", "}", "\n", "for", "k", ",", "val_loader", "in", "enumerate", "(", "val_loader_list", ")", ":", "\n", "                        ", "data_name", "=", "self", ".", "config", ".", "TRAIN", ".", "VAL", ".", "val_data_dir", "[", "k", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "logging", ".", "info", "(", "'evaling %s'", "%", "data_name", ")", "\n", "metrics_dict", "=", "self", ".", "eval", "(", "model", ",", "val_loader", ",", "image_crit", ",", "iters", ",", "aster", ",", "aster_info", ",", "data_name", ")", "\n", "converge_list", ".", "append", "(", "{", "'iterator'", ":", "iters", ",", "\n", "'acc'", ":", "metrics_dict", "[", "'accuracy'", "]", ",", "\n", "'psnr'", ":", "metrics_dict", "[", "'psnr_avg'", "]", ",", "\n", "'ssim'", ":", "metrics_dict", "[", "'ssim_avg'", "]", "}", ")", "\n", "acc", "=", "metrics_dict", "[", "'accuracy'", "]", "\n", "current_acc_dict", "[", "data_name", "]", "=", "float", "(", "acc", ")", "\n", "if", "acc", ">", "best_history_acc", "[", "data_name", "]", ":", "\n", "\n", "                            ", "data_for_evaluation", "=", "metrics_dict", "[", "'images_and_labels'", "]", "\n", "\n", "best_history_acc", "[", "data_name", "]", "=", "float", "(", "acc", ")", "\n", "best_history_acc", "[", "'epoch'", "]", "=", "epoch", "\n", "logging", ".", "info", "(", "'best_%s = %.2f%%*'", "%", "(", "data_name", ",", "best_history_acc", "[", "data_name", "]", "*", "100", ")", ")", "\n", "\n", "", "else", ":", "\n", "                            ", "logging", ".", "info", "(", "'best_%s = %.2f%%'", "%", "(", "data_name", ",", "best_history_acc", "[", "data_name", "]", "*", "100", ")", ")", "\n", "", "", "if", "sum", "(", "current_acc_dict", ".", "values", "(", ")", ")", ">", "best_acc", ":", "\n", "                        ", "best_acc", "=", "sum", "(", "current_acc_dict", ".", "values", "(", ")", ")", "\n", "best_model_acc", "=", "current_acc_dict", "\n", "best_model_acc", "[", "'epoch'", "]", "=", "epoch", "\n", "best_model_psnr", "[", "data_name", "]", "=", "metrics_dict", "[", "'psnr_avg'", "]", "\n", "best_model_ssim", "[", "data_name", "]", "=", "metrics_dict", "[", "'ssim_avg'", "]", "\n", "best_model_info", "=", "{", "'accuracy'", ":", "best_model_acc", ",", "'psnr'", ":", "best_model_psnr", ",", "'ssim'", ":", "best_model_ssim", "}", "\n", "logging", ".", "info", "(", "'saving best model'", ")", "\n", "self", ".", "save_checkpoint", "(", "model", ",", "epoch", ",", "iters", ",", "best_history_acc", ",", "best_model_info", ",", "True", ",", "\n", "converge_list", ",", "self", ".", "args", ".", "exp_name", ")", "\n", "\n", "", "", "if", "iters", "%", "cfg", ".", "saveInterval", "==", "0", ":", "\n", "                    ", "best_model_info", "=", "{", "'accuracy'", ":", "best_model_acc", ",", "'psnr'", ":", "best_model_psnr", ",", "'ssim'", ":", "best_model_ssim", "}", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.get_crnn_pred": [[140, 156], ["predict_result.append", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["self", ".", "args", ".", "exp_name", ")", "\n", "\n", "\n", "", "", "", "", "def", "get_crnn_pred", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "alphabet", "=", "'-0123456789abcdefghijklmnopqrstuvwxyz'", "\n", "predict_result", "=", "[", "]", "\n", "for", "output", "in", "outputs", ":", "\n", "            ", "max_index", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "[", "1", "]", "\n", "out_str", "=", "\"\"", "\n", "last", "=", "\"\"", "\n", "for", "i", "in", "max_index", ":", "\n", "                ", "if", "alphabet", "[", "i", "]", "!=", "last", ":", "\n", "                    ", "if", "i", "!=", "0", ":", "\n", "                        ", "out_str", "+=", "alphabet", "[", "i", "]", "\n", "last", "=", "alphabet", "[", "i", "]", "\n", "", "else", ":", "\n", "                        ", "last", "=", "\"\"", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval": [[158, 237], ["model.parameters", "recognizer.parameters", "model.eval", "recognizer.eval", "enumerate", "logging.info", "logging.info", "round", "round", "round", "logging.info", "images_lr.to.to.to", "images_hr.to.to.to", "model", "metric_dict[].append", "metric_dict[].append", "super_resolution.TextSR.parse_crnn_data", "recognizer", "recognizer.permute().contiguous", "super_resolution.TextSR.get_crnn_pred", "metric_dict[].append", "zip", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "sum", "len", "sum", "len", "round.item", "round.item", "super_resolution.TextSR.writer.add_scalar", "super_resolution.TextSR.writer.add_scalar", "super_resolution.TextSR.writer.add_scalar", "random.randint", "super_resolution.TextSR.writer.add_image", "super_resolution.TextSR.writer.add_image", "super_resolution.TextSR.writer.add_image", "super_resolution.TextSR.cal_psnr", "super_resolution.TextSR.cal_ssim", "datetime.datetime.datetime.now().strftime", "float", "float", "len", "recognizer.permute", "images_hr.to.to.detach().cpu", "model.detach().cpu", "utils.util.str_filt", "datetime.datetime.datetime.now", "images_hr.to.to.detach", "model.detach"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.get_crnn_pred", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.str_filt"], ["", "return", "predict_result", "\n", "\n", "\n", "", "def", "eval", "(", "self", ",", "model", ",", "val_loader", ",", "image_crit", ",", "index", ",", "recognizer", ",", "aster_info", ",", "mode", ")", ":", "\n", "        ", "global", "easy_test_times", "\n", "global", "medium_test_times", "\n", "global", "hard_test_times", "\n", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "for", "p", "in", "recognizer", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "eval", "(", ")", "\n", "recognizer", ".", "eval", "(", ")", "\n", "n_correct", "=", "0", "\n", "n_correct_lr", "=", "0", "\n", "sum_images", "=", "0", "\n", "metric_dict", "=", "{", "'psnr'", ":", "[", "]", ",", "'ssim'", ":", "[", "]", ",", "'accuracy'", ":", "0.0", ",", "'psnr_avg'", ":", "0.0", ",", "'ssim_avg'", ":", "0.0", ",", "\n", "'images_and_labels'", ":", "[", "]", "}", "\n", "image_start_index", "=", "0", "\n", "for", "i", ",", "data", "in", "(", "enumerate", "(", "val_loader", ")", ")", ":", "\n", "            ", "images_hr", ",", "images_lr", ",", "label_strs", "=", "data", "\n", "val_batch_size", "=", "images_lr", ".", "shape", "[", "0", "]", "\n", "images_lr", "=", "images_lr", ".", "to", "(", "self", ".", "device", ")", "\n", "images_hr", "=", "images_hr", ".", "to", "(", "self", ".", "device", ")", "\n", "images_sr", "=", "model", "(", "images_lr", ")", "\n", "\n", "if", "i", "==", "len", "(", "val_loader", ")", "-", "1", ":", "\n", "                ", "index", "=", "random", ".", "randint", "(", "0", ",", "images_lr", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "f'vis/{mode}/lr_image'", ",", "images_lr", "[", "index", ",", "...", "]", ",", "easy_test_times", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "f'vis/{mode}/sr_image'", ",", "images_sr", "[", "index", ",", "...", "]", ",", "easy_test_times", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "f'vis/{mode}/hr_image'", ",", "images_hr", "[", "index", ",", "...", "]", ",", "easy_test_times", ")", "\n", "\n", "", "metric_dict", "[", "'psnr'", "]", ".", "append", "(", "self", ".", "cal_psnr", "(", "images_sr", ",", "images_hr", ")", ")", "\n", "metric_dict", "[", "'ssim'", "]", ".", "append", "(", "self", ".", "cal_ssim", "(", "images_sr", ",", "images_hr", ")", ")", "\n", "\n", "recognizer_dict_sr", "=", "self", ".", "parse_crnn_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "recognizer_output_sr", "=", "recognizer", "(", "recognizer_dict_sr", ")", "\n", "outputs_sr", "=", "recognizer_output_sr", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "predict_result_sr", "=", "self", ".", "get_crnn_pred", "(", "outputs_sr", ")", "\n", "metric_dict", "[", "'images_and_labels'", "]", ".", "append", "(", "\n", "(", "images_hr", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "images_sr", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "label_strs", ",", "predict_result_sr", ")", ")", "\n", "\n", "cnt", "=", "0", "\n", "for", "pred", ",", "target", "in", "zip", "(", "predict_result_sr", ",", "label_strs", ")", ":", "\n", "# self.logging.info('{} | {} | {} | {}\\n'.format(write_line, pred, str_filt(target, 'lower'),", "\n", "#                                      pred == str_filt(target, 'lower')))", "\n", "# write_line += 1", "\n", "                ", "if", "pred", "==", "str_filt", "(", "target", ",", "'lower'", ")", ":", "\n", "                    ", "n_correct", "+=", "1", "\n", "", "cnt", "+=", "1", "\n", "\n", "", "sum_images", "+=", "val_batch_size", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "psnr_avg", "=", "sum", "(", "metric_dict", "[", "'psnr'", "]", ")", "/", "len", "(", "metric_dict", "[", "'psnr'", "]", ")", "\n", "ssim_avg", "=", "sum", "(", "metric_dict", "[", "'ssim'", "]", ")", "/", "len", "(", "metric_dict", "[", "'ssim'", "]", ")", "\n", "logging", ".", "info", "(", "'[{}]\\t'", "\n", "'loss_rec {:.3f}| loss_im {:.3f}\\t'", "\n", "'PSNR {:.2f} | SSIM {:.4f}\\t'", "\n", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "0", ",", "0", ",", "\n", "float", "(", "psnr_avg", ")", ",", "float", "(", "ssim_avg", ")", ",", ")", ")", "\n", "logging", ".", "info", "(", "'save display images'", ")", "\n", "accuracy", "=", "round", "(", "n_correct", "/", "sum_images", ",", "4", ")", "\n", "psnr_avg", "=", "round", "(", "psnr_avg", ".", "item", "(", ")", ",", "6", ")", "\n", "ssim_avg", "=", "round", "(", "ssim_avg", ".", "item", "(", ")", ",", "6", ")", "\n", "logging", ".", "info", "(", "'sr_accuray: %.2f%%'", "%", "(", "accuracy", "*", "100", ")", ")", "\n", "metric_dict", "[", "'accuracy'", "]", "=", "accuracy", "\n", "metric_dict", "[", "'psnr_avg'", "]", "=", "psnr_avg", "\n", "metric_dict", "[", "'ssim_avg'", "]", "=", "ssim_avg", "\n", "\n", "if", "mode", "==", "'easy'", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "'{}_accuracy'", ".", "format", "(", "mode", ")", ",", "accuracy", ",", "easy_test_times", ")", "\n", "easy_test_times", "+=", "1", "\n", "", "if", "mode", "==", "'medium'", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "'{}_accuracy'", ".", "format", "(", "mode", ")", ",", "accuracy", ",", "medium_test_times", ")", "\n", "medium_test_times", "+=", "1", "\n", "", "if", "mode", "==", "'hard'", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "'{}_accuracy'", ".", "format", "(", "mode", ")", ",", "accuracy", ",", "hard_test_times", ")", "\n", "hard_test_times", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.test": [[238, 354], ["super_resolution.TextSR.generator_init", "os.listdir", "os.path.exists", "os.mkdir", "open", "open.close", "shutil.rmtree", "super_resolution.TextSR.get_test_data", "logging.info", "time.time", "enumerate", "time.time", "round", "round", "round", "float", "logging.info", "os.path.join", "super_resolution.TextSR.args.test_data_dir.split", "super_resolution.TextSR.MORAN_init", "super_resolution.TextSR.eval", "model.parameters", "model.eval", "images_lr.to.to.to", "images_hr.to.to.to", "time.time", "model", "time.time", "metric_dict[].append", "metric_dict[].append", "zip", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "sum", "len", "sum", "len", "round.item", "round.item", "super_resolution.TextSR.Aster_init", "aster.eval", "super_resolution.TextSR.cal_psnr", "super_resolution.TextSR.cal_ssim", "super_resolution.TextSR.parse_moran_data", "super_resolution.TextSR.", "preds.transpose().contiguous().view.transpose().contiguous().view.max", "super_resolution.TextSR.converter_moran.decode", "logging.info", "super_resolution.TextSR.CRNN_init", "crnn.eval", "super_resolution.TextSR.parse_aster_data", "aster", "utils.metrics.get_str_list", "super_resolution.TextSR.parse_aster_data", "aster", "utils.metrics.get_str_list", "utils.util.str_filt", "utils.util.str_filt", "pred.split", "super_resolution.TextSR.parse_crnn_data", "crnn", "crnn.max", "preds.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "super_resolution.TextSR.converter_crnn.decode", "range", "datetime.datetime.datetime.now().strftime", "len", "to_pil", "to_pil", "to_pil", "to_pil.save", "to_pil.save", "to_pil.save", "open.write", "preds.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "images_lr[].cpu", "images_sr[].cpu", "images_hr[].cpu", "datetime.datetime.datetime.now", "crnn.size", "preds.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.generator_init", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.get_test_data", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.MORAN_init", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.Aster_init", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.parse_moran_data", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.CRNN_init", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.parse_aster_data", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.get_str_list", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.parse_aster_data", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.metrics.get_str_list", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.str_filt", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.str_filt", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.parse_crnn_data", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.decode"], ["\n", "", "return", "metric_dict", "\n", "\n", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "model_dict", "=", "self", ".", "generator_init", "(", ")", "\n", "model", ",", "image_crit", "=", "model_dict", "[", "'model'", "]", ",", "model_dict", "[", "'crit'", "]", "\n", "items", "=", "os", ".", "listdir", "(", "self", ".", "test_data_dir", ")", "\n", "for", "test_dir", "in", "items", ":", "\n", "            ", "test_data", ",", "test_loader", "=", "self", ".", "get_test_data", "(", "os", ".", "path", ".", "join", "(", "self", ".", "test_data_dir", ",", "test_dir", ")", ")", "\n", "data_name", "=", "self", ".", "args", ".", "test_data_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "logging", ".", "info", "(", "'evaling %s'", "%", "data_name", ")", "\n", "if", "self", ".", "args", ".", "rec", "==", "'moran'", ":", "\n", "                ", "moran", "=", "self", ".", "MORAN_init", "(", ")", "\n", "moran", ".", "eval", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'aster'", ":", "\n", "                ", "aster", ",", "aster_info", "=", "self", ".", "Aster_init", "(", ")", "\n", "aster", ".", "eval", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'crnn'", ":", "\n", "                ", "crnn", ",", "_", "=", "self", ".", "CRNN_init", "(", ")", "\n", "crnn", ".", "eval", "(", ")", "\n", "", "if", "self", ".", "args", ".", "arch", "!=", "'bicubic'", ":", "\n", "                ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "eval", "(", ")", "\n", "", "n_correct", "=", "0", "\n", "sum_images", "=", "0", "\n", "metric_dict", "=", "{", "'psnr'", ":", "[", "]", ",", "'ssim'", ":", "[", "]", ",", "'accuracy'", ":", "0.0", ",", "'psnr_avg'", ":", "0.0", ",", "'ssim_avg'", ":", "0.0", "}", "\n", "current_acc_dict", "=", "{", "test_dir", ":", "0", "}", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "sr_time", "=", "0", "\n", "for", "i", ",", "data", "in", "(", "enumerate", "(", "test_loader", ")", ")", ":", "\n", "                ", "images_hr", ",", "images_lr", ",", "label_strs", "=", "data", "\n", "val_batch_size", "=", "images_lr", ".", "shape", "[", "0", "]", "\n", "images_lr", "=", "images_lr", ".", "to", "(", "self", ".", "device", ")", "\n", "images_hr", "=", "images_hr", ".", "to", "(", "self", ".", "device", ")", "\n", "sr_beigin", "=", "time", ".", "time", "(", ")", "\n", "images_sr", "=", "model", "(", "images_lr", ")", "\n", "\n", "# print('srshape',images_sr.shape)", "\n", "# print('hrshape',images_hr.shape)", "\n", "\n", "# images_sr = images_lr", "\n", "sr_end", "=", "time", ".", "time", "(", ")", "\n", "sr_time", "+=", "sr_end", "-", "sr_beigin", "\n", "metric_dict", "[", "'psnr'", "]", ".", "append", "(", "self", ".", "cal_psnr", "(", "images_sr", ",", "images_hr", ")", ")", "\n", "metric_dict", "[", "'ssim'", "]", ".", "append", "(", "self", ".", "cal_ssim", "(", "images_sr", ",", "images_hr", ")", ")", "\n", "\n", "if", "self", ".", "args", ".", "rec", "==", "'moran'", ":", "\n", "                    ", "moran_input", "=", "self", ".", "parse_moran_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "moran_output", "=", "moran", "(", "moran_input", "[", "0", "]", ",", "moran_input", "[", "1", "]", ",", "moran_input", "[", "2", "]", ",", "moran_input", "[", "3", "]", ",", "test", "=", "True", ",", "\n", "debug", "=", "True", ")", "\n", "preds", ",", "preds_reverse", "=", "moran_output", "[", "0", "]", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "1", ")", "\n", "sim_preds", "=", "self", ".", "converter_moran", ".", "decode", "(", "preds", ".", "data", ",", "moran_input", "[", "1", "]", ".", "data", ")", "\n", "pred_str_sr", "=", "[", "pred", ".", "split", "(", "'$'", ")", "[", "0", "]", "for", "pred", "in", "sim_preds", "]", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'aster'", ":", "\n", "                    ", "aster_dict_sr", "=", "self", ".", "parse_aster_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "aster_output_sr", "=", "aster", "(", "aster_dict_sr", "[", "\"images\"", "]", ")", "\n", "pred_rec_sr", "=", "aster_output_sr", "[", "'output'", "]", "[", "'pred_rec'", "]", "\n", "pred_str_sr", ",", "_", "=", "get_str_list", "(", "pred_rec_sr", ",", "aster_dict_sr", "[", "'rec_targets'", "]", ",", "dataset", "=", "aster_info", ")", "\n", "\n", "aster_dict_lr", "=", "self", ".", "parse_aster_data", "(", "images_lr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "aster_output_lr", "=", "aster", "(", "aster_dict_lr", ")", "\n", "pred_rec_lr", "=", "aster_output_lr", "[", "'output'", "]", "[", "'pred_rec'", "]", "\n", "pred_str_lr", ",", "_", "=", "get_str_list", "(", "pred_rec_lr", ",", "aster_dict_lr", "[", "'rec_targets'", "]", ",", "dataset", "=", "aster_info", ")", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'crnn'", ":", "\n", "                    ", "crnn_input", "=", "self", ".", "parse_crnn_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "crnn_output", "=", "crnn", "(", "crnn_input", ")", "\n", "_", ",", "preds", "=", "crnn_output", ".", "max", "(", "2", ")", "\n", "preds", "=", "preds", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "preds_size", "=", "torch", ".", "IntTensor", "(", "[", "crnn_output", ".", "size", "(", "0", ")", "]", "*", "val_batch_size", ")", "\n", "pred_str_sr", "=", "self", ".", "converter_crnn", ".", "decode", "(", "preds", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "False", ")", "\n", "", "for", "pred", ",", "target", "in", "zip", "(", "pred_str_sr", ",", "label_strs", ")", ":", "\n", "                    ", "if", "str_filt", "(", "pred", ",", "'lower'", ")", "==", "str_filt", "(", "target", ",", "'lower'", ")", ":", "\n", "                        ", "n_correct", "+=", "1", "\n", "", "", "sum_images", "+=", "val_batch_size", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "if", "i", "%", "10", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "'Evaluation: [{}][{}/{}]\\t'", "\n", ".", "format", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "i", "+", "1", ",", "len", "(", "test_loader", ")", ",", ")", ")", "\n", "# self.test_display(images_lr, images_sr, images_hr, pred_str_lr, pred_str_sr, label_strs, str_filt)", "\n", "", "", "time_end", "=", "time", ".", "time", "(", ")", "\n", "psnr_avg", "=", "sum", "(", "metric_dict", "[", "'psnr'", "]", ")", "/", "len", "(", "metric_dict", "[", "'psnr'", "]", ")", "\n", "ssim_avg", "=", "sum", "(", "metric_dict", "[", "'ssim'", "]", ")", "/", "len", "(", "metric_dict", "[", "'ssim'", "]", ")", "\n", "acc", "=", "round", "(", "n_correct", "/", "sum_images", ",", "4", ")", "\n", "fps", "=", "sum_images", "/", "(", "time_end", "-", "time_begin", ")", "\n", "psnr_avg", "=", "round", "(", "psnr_avg", ".", "item", "(", ")", ",", "6", ")", "\n", "ssim_avg", "=", "round", "(", "ssim_avg", ".", "item", "(", ")", ",", "6", ")", "\n", "current_acc_dict", "[", "test_dir", "]", "=", "float", "(", "acc", ")", "\n", "result", "=", "{", "'accuracy'", ":", "current_acc_dict", ",", "'psnr_avg'", ":", "psnr_avg", ",", "'ssim_avg'", ":", "ssim_avg", ",", "'fps'", ":", "fps", "}", "\n", "logging", ".", "info", "(", "result", ")", "\n", "\n", "", "", "def", "demo", "(", "self", ")", ":", "\n", "        ", "mask_", "=", "self", ".", "args", ".", "mask", "\n", "\n", "def", "transform_", "(", "path", ")", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "path", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "64", ",", "16", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "img_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", "\n", "if", "mask_", ":", "\n", "                ", "mask", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "thres", "=", "np", ".", "array", "(", "mask", ")", ".", "mean", "(", ")", "\n", "mask", "=", "mask", ".", "point", "(", "lambda", "x", ":", "0", "if", "x", ">", "thres", "else", "255", ")", "\n", "mask", "=", "transforms", ".", "ToTensor", "(", ")", "(", "mask", ")", "\n", "img_tensor", "=", "torch", ".", "cat", "(", "(", "img_tensor", ",", "mask", ")", ",", "0", ")", "\n", "", "img_tensor", "=", "img_tensor", ".", "unsqueeze", "(", "0", ")", "\n", "return", "img_tensor", "\n", "\n", "", "model_dict", "=", "self", ".", "generator_init", "(", ")", "\n", "model", ",", "image_crit", "=", "model_dict", "[", "'model'", "]", ",", "model_dict", "[", "'crit'", "]", "\n", "if", "self", ".", "args", ".", "rec", "==", "'moran'", ":", "\n", "            ", "moran", "=", "self", ".", "MORAN_init", "(", ")", "\n", "moran", ".", "eval", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'aster'", ":", "\n", "            ", "aster", ",", "aster_info", "=", "self", ".", "Aster_init", "(", ")", "\n", "aster", ".", "eval", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.demo": [[370, 460], ["super_resolution.TextSR.generator_init", "time.time", "tqdm.tqdm.tqdm", "len", "time.time", "logging.info", "PIL.Image.open", "img.resize.resize.resize", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "super_resolution.TextSR.MORAN_init", "super_resolution.TextSR.eval", "model.parameters", "model.eval", "os.listdir", "super_resolution.TextSR.demo.transform_"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.generator_init", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.MORAN_init", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval"], ["images_sr", "=", "model", "(", "images_lr", ")", "\n", "\n", "sr_end", "=", "time", ".", "time", "(", ")", "\n", "sr_time", "+=", "sr_end", "-", "sr_beigin", "\n", "if", "self", ".", "args", ".", "rec", "==", "'moran'", ":", "\n", "                ", "moran_input", "=", "self", ".", "parse_moran_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "moran_output", "=", "moran", "(", "moran_input", "[", "0", "]", ",", "moran_input", "[", "1", "]", ",", "moran_input", "[", "2", "]", ",", "moran_input", "[", "3", "]", ",", "test", "=", "True", ",", "\n", "debug", "=", "True", ")", "\n", "preds", ",", "preds_reverse", "=", "moran_output", "[", "0", "]", "\n", "_", ",", "preds", "=", "preds", ".", "max", "(", "1", ")", "\n", "sim_preds", "=", "self", ".", "converter_moran", ".", "decode", "(", "preds", ".", "data", ",", "moran_input", "[", "1", "]", ".", "data", ")", "\n", "pred_str_sr", "=", "[", "pred", ".", "split", "(", "'$'", ")", "[", "0", "]", "for", "pred", "in", "sim_preds", "]", "\n", "\n", "moran_input_lr", "=", "self", ".", "parse_moran_data", "(", "images_lr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "moran_output_lr", "=", "moran", "(", "moran_input_lr", "[", "0", "]", ",", "moran_input_lr", "[", "1", "]", ",", "moran_input_lr", "[", "2", "]", ",", "moran_input_lr", "[", "3", "]", ",", "\n", "test", "=", "True", ",", "\n", "debug", "=", "True", ")", "\n", "preds_lr", ",", "preds_reverse_lr", "=", "moran_output_lr", "[", "0", "]", "\n", "_", ",", "preds_lr", "=", "preds_lr", ".", "max", "(", "1", ")", "\n", "sim_preds_lr", "=", "self", ".", "converter_moran", ".", "decode", "(", "preds_lr", ".", "data", ",", "moran_input_lr", "[", "1", "]", ".", "data", ")", "\n", "pred_str_lr", "=", "[", "pred", ".", "split", "(", "'$'", ")", "[", "0", "]", "for", "pred", "in", "sim_preds_lr", "]", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'aster'", ":", "\n", "                ", "aster_dict_sr", "=", "self", ".", "parse_aster_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "aster_output_sr", "=", "aster", "(", "aster_dict_sr", ")", "\n", "pred_rec_sr", "=", "aster_output_sr", "[", "'output'", "]", "[", "'pred_rec'", "]", "\n", "pred_str_sr", ",", "_", "=", "get_str_list", "(", "pred_rec_sr", ",", "aster_dict_sr", "[", "'rec_targets'", "]", ",", "dataset", "=", "aster_info", ")", "\n", "\n", "aster_dict_lr", "=", "self", ".", "parse_aster_data", "(", "images_lr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "aster_output_lr", "=", "aster", "(", "aster_dict_lr", ")", "\n", "pred_rec_lr", "=", "aster_output_lr", "[", "'output'", "]", "[", "'pred_rec'", "]", "\n", "pred_str_lr", ",", "_", "=", "get_str_list", "(", "pred_rec_lr", ",", "aster_dict_lr", "[", "'rec_targets'", "]", ",", "dataset", "=", "aster_info", ")", "\n", "", "elif", "self", ".", "args", ".", "rec", "==", "'crnn'", ":", "\n", "                ", "crnn_input", "=", "self", ".", "parse_crnn_data", "(", "images_sr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "crnn_output", "=", "crnn", "(", "crnn_input", ")", "\n", "_", ",", "preds", "=", "crnn_output", ".", "max", "(", "2", ")", "\n", "preds", "=", "preds", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "preds_size", "=", "torch", ".", "IntTensor", "(", "[", "crnn_output", ".", "size", "(", "0", ")", "]", "*", "1", ")", "\n", "pred_str_sr", "=", "self", ".", "converter_crnn", ".", "decode", "(", "preds", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "False", ")", "\n", "\n", "crnn_input_lr", "=", "self", ".", "parse_crnn_data", "(", "images_lr", "[", ":", ",", ":", "3", ",", ":", ",", ":", "]", ")", "\n", "crnn_output_lr", "=", "crnn", "(", "crnn_input_lr", ")", "\n", "_", ",", "preds_lr", "=", "crnn_output_lr", ".", "max", "(", "2", ")", "\n", "preds_lr", "=", "preds_lr", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "preds_size", "=", "torch", ".", "IntTensor", "(", "[", "crnn_output_lr", ".", "size", "(", "0", ")", "]", "*", "1", ")", "\n", "pred_str_lr", "=", "self", ".", "converter_crnn", ".", "decode", "(", "preds_lr", ".", "data", ",", "preds_size", ".", "data", ",", "raw", "=", "False", ")", "\n", "", "logging", ".", "info", "(", "'{} ===> {}'", ".", "format", "(", "pred_str_lr", ",", "pred_str_sr", ")", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "sum_images", "=", "len", "(", "os", ".", "listdir", "(", "self", ".", "args", ".", "demo_dir", ")", ")", "\n", "time_end", "=", "time", ".", "time", "(", ")", "\n", "fps", "=", "sum_images", "/", "(", "time_end", "-", "time_begin", ")", "\n", "logging", ".", "info", "(", "'fps={}'", ".", "format", "(", "fps", ")", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "embed", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.base.TextBase.check_exp_name": [[75, 87], ["str", "time.strftime", "time.strftime", "time.localtime", "time.localtime"], "methods", ["None"], ["level", "=", "self", ".", "logging", ".", "INFO", ",", "\n", "format", "=", "'[%(asctime)s.%(msecs)03d] %(message)s'", ",", "datefmt", "=", "'%H:%M:%S'", ")", "\n", "self", ".", "logging", ".", "getLogger", "(", ")", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", ")", "\n", "self", ".", "logging", ".", "info", "(", "str", "(", "self", ".", "args", ")", ")", "\n", "\n", "", "def", "clean_old_ckpt", "(", "self", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "'checkpoint/{}'", ".", "format", "(", "self", ".", "args", ".", "exp_name", ")", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "'checkpoint/{}'", ".", "format", "(", "self", ".", "args", ".", "exp_name", ")", ")", "\n", "print", "(", "f'Clean the old checkpoint {self.args.exp_name}'", ")", "\n", "", "os", ".", "mkdir", "(", "'checkpoint/{}'", ".", "format", "(", "self", ".", "args", ".", "exp_name", ")", ")", "\n", "\n", "\n", "", "def", "make_writer", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.to_gray_tensor": [[355, 361], ["None"], "methods", ["None"], ["", "elif", "self", ".", "args", ".", "rec", "==", "'crnn'", ":", "\n", "            ", "crnn", ",", "_", "=", "self", ".", "CRNN_init", "(", ")", "\n", "crnn", ".", "eval", "(", ")", "\n", "", "if", "self", ".", "args", ".", "arch", "!=", "'bicubic'", ":", "\n", "            ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "eval", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.get_mask": [[362, 369], ["super_resolution.TextSR.segmenter", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "to_pil"], "methods", ["None"], ["", "n_correct", "=", "0", "\n", "sum_images", "=", "0", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "sr_time", "=", "0", "\n", "for", "im_name", "in", "tqdm", "(", "os", ".", "listdir", "(", "self", ".", "args", ".", "demo_dir", ")", ")", ":", "\n", "            ", "images_lr", "=", "transform_", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "demo_dir", ",", "im_name", ")", ")", "\n", "images_lr", "=", "images_lr", ".", "to", "(", "self", ".", "device", ")", "\n", "sr_beigin", "=", "time", ".", "time", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.crop_800k.t_split": [[14, 24], ["i.split", "t.split", "list1.append"], "function", ["None"], ["def", "t_split", "(", "txt", ")", ":", "\n", "    ", "list1", "=", "[", "]", "\n", "for", "i", "in", "txt", ":", "\n", "        ", "c", "=", "i", ".", "split", "(", "' '", ")", "\n", "for", "t", "in", "c", ":", "\n", "            ", "tt", "=", "t", ".", "split", "(", "'\\n'", ")", "\n", "for", "ttt", "in", "tt", ":", "\n", "                ", "if", "ttt", "!=", "''", ":", "\n", "                    ", "list1", ".", "append", "(", "ttt", ")", "\n", "", "", "", "", "return", "list1", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.crop_800k.gt_box": [[26, 35], ["range", "numpy.zeros", "range", "list_bbox.append"], "function", ["None"], ["", "def", "gt_box", "(", "contours", ")", ":", "\n", "    ", "list_bbox", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "contours", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "quad_points", "=", "numpy", ".", "zeros", "(", "(", "4", ",", "1", ",", "2", ")", ",", "dtype", "=", "'float32'", ")", "\n", "for", "k", "in", "range", "(", "4", ")", ":", "\n", "            ", "quad_points", "[", "k", "]", "[", "0", "]", "[", "0", "]", "=", "contours", "[", "0", "]", "[", "k", "]", "[", "j", "]", "\n", "quad_points", "[", "k", "]", "[", "0", "]", "[", "1", "]", "=", "contours", "[", "1", "]", "[", "k", "]", "[", "j", "]", "\n", "", "list_bbox", ".", "append", "(", "quad_points", ")", "# quad_points.astype(numpy.int32)", "\n", "", "return", "list_bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.crop_800k.crop_rect": [[37, 55], ["range", "len", "list_bbox[].reshape", "numpy.transpose", "math.floor", "math.ceil", "math.floor", "math.ceil", "numpy.zeros", "list_rect.append", "temp1[].min", "temp1[].max", "temp1[].min", "temp1[].max"], "function", ["None"], ["", "def", "crop_rect", "(", "list_bbox", ")", ":", "\n", "    ", "list_rect", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "list_bbox", ")", ")", ":", "\n", "        ", "temp", "=", "list_bbox", "[", "i", "]", ".", "reshape", "(", "4", ",", "2", ")", "\n", "temp1", "=", "numpy", ".", "transpose", "(", "temp", ")", "\n", "x_min", "=", "math", ".", "floor", "(", "temp1", "[", "0", "]", ".", "min", "(", ")", ")", "\n", "x_max", "=", "math", ".", "ceil", "(", "temp1", "[", "0", "]", ".", "max", "(", ")", ")", "\n", "y_min", "=", "math", ".", "floor", "(", "temp1", "[", "1", "]", ".", "min", "(", ")", ")", "\n", "y_max", "=", "math", ".", "ceil", "(", "temp1", "[", "1", "]", ".", "max", "(", ")", ")", "\n", "\n", "quad_points", "=", "numpy", ".", "zeros", "(", "(", "4", ",", "1", ",", "2", ")", ",", "dtype", "=", "'int32'", ")", "\n", "quad_points", "[", "0", "]", "[", "0", "]", "=", "[", "x_min", ",", "y_min", "]", "\n", "quad_points", "[", "1", "]", "[", "0", "]", "=", "[", "x_max", ",", "y_min", "]", "\n", "quad_points", "[", "2", "]", "[", "0", "]", "=", "[", "x_max", ",", "y_max", "]", "\n", "quad_points", "[", "3", "]", "[", "0", "]", "=", "[", "x_min", ",", "y_max", "]", "\n", "list_rect", ".", "append", "(", "quad_points", ")", "\n", "", "return", "list_rect", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.crop_800k.main": [[57, 144], ["scipy.io.loadmat", "os.getcwd", "tqdm.tqdm", "print", "range", "crop_800k.t_split", "crop_800k.gt_box", "crop_800k.crop_rect", "os.path.join", "cv2.imread", "range", "len", "contours.reshape.reshape", "len", "max", "min", "max", "min", "range", "os.path.join", "cv2.imwrite", "len", "label.replace.replace", "os.path.exists", "os.mkdir", "os.path.join", "open", "json.dumps", "f1.write", "im_name.split", "str", "str", "str", "str", "[].split", "im_name.split", "im_name.split"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.crop_800k.t_split", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.crop_800k.gt_box", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.crop_800k.crop_rect"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "m", "=", "loadmat", "(", "args", ".", "gt_path", ")", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "# symbol = ['~','`','!','@','$','#','%','^','&','*','(',')','-','+','=','_',", "\n", "#           '|',',','[',']','\\\\',':',';','\\'','\"','.','?','<','>','/','{','}']", "\n", "symbol", "=", "string", ".", "punctuation", "\n", "count", "=", "0", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "m", "[", "'imnames'", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "\n", "        ", "contours", "=", "m", "[", "'wordBB'", "]", "[", "0", "]", "[", "i", "]", "# note: cotours.shape=(2,4,len(labels))", "\n", "if", "len", "(", "contours", ".", "shape", ")", "==", "2", ":", "\n", "            ", "contours", "=", "contours", ".", "reshape", "(", "2", ",", "4", ",", "1", ")", "\n", "", "im_name", "=", "m", "[", "'imnames'", "]", "[", "0", "]", "[", "i", "]", "[", "0", "]", "\n", "txt", "=", "m", "[", "'txt'", "]", "[", "0", "]", "[", "i", "]", "\n", "\n", "labels", "=", "t_split", "(", "txt", ")", "\n", "\n", "BBox", "=", "gt_box", "(", "contours", ")", "# the list of groundtruth boundingboxs,quadrilateral shape", "\n", "RectBox", "=", "crop_rect", "(", "BBox", ")", "# the list of minimum circumscribed rectangle of the BBOXs", "\n", "count", "+=", "contours", ".", "shape", "[", "2", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "syntext_path", ",", "im_name", ")", "\n", "im", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "x_min", "=", "max", "(", "RectBox", "[", "j", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", ",", "0", ")", "\n", "x_max", "=", "min", "(", "RectBox", "[", "j", "]", "[", "1", "]", "[", "0", "]", "[", "0", "]", ",", "im", ".", "shape", "[", "1", "]", ")", "\n", "y_min", "=", "max", "(", "RectBox", "[", "j", "]", "[", "0", "]", "[", "0", "]", "[", "1", "]", ",", "0", ")", "\n", "y_max", "=", "min", "(", "RectBox", "[", "j", "]", "[", "2", "]", "[", "0", "]", "[", "1", "]", ",", "im", ".", "shape", "[", "0", "]", ")", "\n", "# these 4 lines are used to ensure the box does not stretch out of the image", "\n", "\n", "im1", "=", "im", "[", "y_min", ":", "y_max", ",", "x_min", ":", "x_max", "]", "\n", "label", "=", "labels", "[", "j", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "symbol", ")", ")", ":", "\n", "                ", "label", "=", "label", ".", "replace", "(", "symbol", "[", "idx", "]", ",", "''", ")", "\n", "\n", "", "new_name", "=", "im_name", ".", "split", "(", "'/'", ")", "[", "0", "]", "+", "'_'", "+", "im_name", ".", "split", "(", "'/'", ")", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_'", "+", "str", "(", "\n", "j", ")", "+", "'_'", "+", "label", "+", "'.jpg'", "\n", "im_new_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_path", ",", "'syntxt_crop'", ",", "im_name", ".", "split", "(", "'/'", ")", "[", "0", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_new_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "im_new_path", ")", "\n", "", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "im_new_path", ",", "new_name", ")", ",", "im1", ")", "\n", "\n", "with", "open", "(", "'./syntxt_crop.odgt'", ",", "'a'", ")", "as", "f1", ":", "\n", "                ", "dict1", "=", "{", "'im_path'", ":", "str", "(", "im_new_path", ")", ",", "'im_name'", ":", "str", "(", "new_name", ")", ",", "'label'", ":", "str", "(", "labels", "[", "j", "]", ")", "}", "\n", "js", "=", "json", ".", "dumps", "(", "dict1", ")", "\n", "f1", ".", "write", "(", "js", "+", "'\\n'", ")", "\n", "\n", "", "", "''' \n        plot the bbox and rectangle of each word\n        \n        BBox1=[]\n        for i in range(len(BBox)):\n            BBox1.append(BBox[i].astype(numpy.int32))\n\n        im1=cv2.polylines(im,RectBox,isClosed=True,color=(255,255,255),thickness=1,lineType=8)\n        im2=cv2.polylines(im,BBox1,isClosed=True,color=(255,255,255),thickness=1,lineType=8)\n        '''", "\n", "\n", "'''\n        wordBoundingBox is based on four points (x1,y1),(x2,y2),(x3,y3),(x4,y4)\n        each picture has n BOXes,which is same as the numbers of the labels.\n        (the labels could be splited from the txt)\n        the labels and the wordBBs are of one-to-one correspondence\n        \n        eg.\n        m['wordBB'][0][12]=\n        array([[[144.11255, 280.32397, 425.85638, 508.72253],                    ## x1  \n                [221.60611, 421.7674 , 489.43262, 580.4785 ],                    ## x2\n                [210.23676, 421.62714, 488.78485, 579.8429 ],                    ## x3      k\n                [132.7432 , 280.18372, 425.20862, 508.0869 ]],                   ## x4      |\n                                                                                            |\n               [[203.68845, 384.30234, 359.90906, 360.9495 ],                    ## y1      |\n                [223.97514, 385.26584, 360.70734, 361.85043],                    ## y2      *\n                [267.40524, 405.8596 , 412.29712, 412.47342],                    ## y3\n                [247.11855, 404.8961 , 411.49884, 411.57248]]], dtype=float32)   ## y4\n                ##BOX1##    ##BOX2##    ##BOX3##    ##BOX4##\n                                j----->\n        m['imnames'][0][12]=\n        array(['8/ballet_106_109.jpg'], dtype='<U20')\n        \n        m['txt'][0][12]=\n        array(['the         ', '[Description', 'V8 V12      '], dtype='<U12')\n        \n        t_split(m['txt'][0][12])=\n        ['the', '[Description', 'V8', 'V12']\n        '''", "\n", "", "print", "(", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.lmdbDataset.__init__": [[51, 71], ["torch.utils.data.Dataset.__init__", "lmdb.open", "print", "sys.exit", "dataset.lmdbDataset.env.begin", "int", "txn.get"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "31", ",", "test", "=", "True", ")", ":", "\n", "        ", "super", "(", "lmdbDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "\n", "", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "voc_type", "=", "voc_type", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.lmdbDataset.__len__": [[72, 74], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.lmdbDataset.__getitem__": [[75, 92], ["dataset.lmdbDataset.env.begin", "str", "utils.str_filt", "len", "dataset.lmdbDataset.get().decode", "dataset.buf2PIL", "dataset.buf2PIL", "dataset.lmdbDataset.get", "len"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.str_filt", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.buf2PIL"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "\n", "\n", "label_key", "=", "b'label-%09d'", "%", "index", "\n", "word", "=", "str", "(", "txn", ".", "get", "(", "label_key", ")", ".", "decode", "(", ")", ")", "\n", "\n", "try", ":", "\n", "            ", "img", "=", "buf2PIL", "(", "txn", ",", "b'image_hr-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "", "except", "TypeError", ":", "\n", "            ", "img", "=", "buf2PIL", "(", "txn", ",", "b'image-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "", "except", "IOError", "or", "len", "(", "label", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "return", "img", ",", "label_str", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.lmdbDataset_real.__init__": [[95, 115], ["torch.utils.data.Dataset.__init__", "lmdb.open", "print", "sys.exit", "dataset.lmdbDataset_real.env.begin", "int", "txn.get"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_real", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.lmdbDataset_real.__len__": [[116, 118], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.lmdbDataset_real.__getitem__": [[119, 134], ["dataset.lmdbDataset_real.env.begin", "str", "utils.str_filt", "len", "dataset.lmdbDataset_real.get().decode", "dataset.buf2PIL", "dataset.buf2PIL", "dataset.lmdbDataset_real.get", "len"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.str_filt", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.buf2PIL"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "\n", "label_key", "=", "b'label-%09d'", "%", "index", "\n", "word", "=", "str", "(", "txn", ".", "get", "(", "label_key", ")", ".", "decode", "(", ")", ")", "\n", "img_HR_key", "=", "b'image_hr-%09d'", "%", "index", "# 128*32", "\n", "img_lr_key", "=", "b'image_lr-%09d'", "%", "index", "# 64*16", "\n", "try", ":", "\n", "            ", "img_HR", "=", "buf2PIL", "(", "txn", ",", "img_HR_key", ",", "'RGB'", ")", "\n", "img_lr", "=", "buf2PIL", "(", "txn", ",", "img_lr_key", ",", "'RGB'", ")", "\n", "", "except", "IOError", "or", "len", "(", "word", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "return", "self", "[", "index", "+", "1", "]", "\n", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.resizeNormalize.__init__": [[137, 142], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "mask", "=", "False", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.resizeNormalize.__call__": [[143, 153], ["img.resize.resize.resize", "dataset.resizeNormalize.toTensor", "img.resize.resize.convert", "numpy.array().mean", "dataset.resizeNormalize.point", "dataset.resizeNormalize.toTensor", "torch.cat", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "img_tensor", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "if", "self", ".", "mask", ":", "\n", "            ", "mask", "=", "img", ".", "convert", "(", "'L'", ")", "\n", "thres", "=", "np", ".", "array", "(", "mask", ")", ".", "mean", "(", ")", "\n", "mask", "=", "mask", ".", "point", "(", "lambda", "x", ":", "0", "if", "x", ">", "thres", "else", "255", ")", "\n", "mask", "=", "self", ".", "toTensor", "(", "mask", ")", "\n", "img_tensor", "=", "torch", ".", "cat", "(", "(", "img_tensor", ",", "mask", ")", ",", "0", ")", "\n", "", "return", "img_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.lmdbDataset_mix.__init__": [[156, 176], ["torch.utils.data.Dataset.__init__", "lmdb.open", "print", "sys.exit", "dataset.lmdbDataset_mix.env.begin", "int", "txn.get"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ",", "voc_type", "=", "'upper'", ",", "max_len", "=", "100", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "lmdbDataset_mix", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "env", "=", "lmdb", ".", "open", "(", "\n", "root", ",", "\n", "max_readers", "=", "1", ",", "\n", "readonly", "=", "True", ",", "\n", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "\n", "meminit", "=", "False", ")", "\n", "\n", "if", "not", "self", ".", "env", ":", "\n", "            ", "print", "(", "'cannot creat lmdb from %s'", "%", "(", "root", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "nSamples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "self", ".", "nSamples", "=", "nSamples", "\n", "", "self", ".", "voc_type", "=", "voc_type", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.lmdbDataset_mix.__len__": [[177, 179], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.lmdbDataset_mix.__getitem__": [[180, 203], ["dataset.lmdbDataset_mix.env.begin", "str", "utils.str_filt", "len", "dataset.lmdbDataset_mix.get().decode", "dataset.buf2PIL", "dataset.buf2PIL", "dataset.buf2PIL", "random.uniform", "dataset.buf2PIL", "dataset.lmdbDataset_mix.get", "dataset.buf2PIL"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.str_filt", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.decode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.buf2PIL"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "index", "+=", "1", "\n", "txn", "=", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "\n", "label_key", "=", "b'label-%09d'", "%", "index", "\n", "word", "=", "str", "(", "txn", ".", "get", "(", "label_key", ")", ".", "decode", "(", ")", ")", "\n", "if", "self", ".", "test", ":", "\n", "            ", "try", ":", "\n", "                ", "img_HR", "=", "buf2PIL", "(", "txn", ",", "b'image_hr-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "img_lr", "=", "buf2PIL", "(", "txn", ",", "b'image_lr-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "", "except", ":", "\n", "                ", "img_HR", "=", "buf2PIL", "(", "txn", ",", "b'image-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "img_lr", "=", "img_HR", "\n", "\n", "", "", "else", ":", "\n", "            ", "img_HR", "=", "buf2PIL", "(", "txn", ",", "b'image_hr-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<", "0.5", ":", "\n", "                ", "img_lr", "=", "buf2PIL", "(", "txn", ",", "b'image_lr-%09d'", "%", "index", ",", "'RGB'", ")", "\n", "", "else", ":", "\n", "                ", "img_lr", "=", "img_HR", "\n", "\n", "", "", "label_str", "=", "str_filt", "(", "word", ",", "self", ".", "voc_type", ")", "\n", "return", "img_HR", ",", "img_lr", ",", "label_str", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.randomSequentialSampler.__init__": [[207, 210], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "num_samples", "=", "len", "(", "data_source", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.randomSequentialSampler.__iter__": [[211, 226], ["torch.LongTensor().fill_", "range", "iter", "len", "len", "random.randint", "random.randint", "torch.LongTensor", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "n_batch", "=", "len", "(", "self", ")", "//", "self", ".", "batch_size", "\n", "tail", "=", "len", "(", "self", ")", "%", "self", ".", "batch_size", "\n", "index", "=", "torch", ".", "LongTensor", "(", "len", "(", "self", ")", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "n_batch", ")", ":", "\n", "            ", "random_start", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", "-", "self", ".", "batch_size", ")", "\n", "batch_index", "=", "random_start", "+", "torch", ".", "arange", "(", "0", ",", "self", ".", "batch_size", ")", "\n", "index", "[", "i", "*", "self", ".", "batch_size", ":", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", "]", "=", "batch_index", "\n", "# deal with tail", "\n", "", "if", "tail", ":", "\n", "            ", "random_start", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ")", "-", "self", ".", "batch_size", ")", "\n", "tail_index", "=", "random_start", "+", "torch", ".", "arange", "(", "0", ",", "tail", ")", "\n", "index", "[", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", ":", "]", "=", "tail_index", "\n", "\n", "", "return", "iter", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.randomSequentialSampler.__len__": [[227, 229], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.alignCollate_syn.__init__": [[232, 239], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgH", "=", "64", ",", "imgW", "=", "256", ",", "down_sample_scale", "=", "4", ",", "keep_ratio", "=", "False", ",", "min_ratio", "=", "1", ",", "mask", "=", "False", ")", ":", "\n", "        ", "self", ".", "imgH", "=", "imgH", "\n", "self", ".", "imgW", "=", "imgW", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "self", ".", "min_ratio", "=", "min_ratio", "\n", "self", ".", "down_sample_scale", "=", "down_sample_scale", "\n", "self", ".", "mask", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.alignCollate_syn.__call__": [[240, 255], ["zip", "dataset.resizeNormalize", "dataset.resizeNormalize", "torch.cat", "torch.cat", "resizeNormalize.", "image.resize", "resizeNormalize.", "t.unsqueeze", "t.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images", ",", "label_strs", "=", "zip", "(", "*", "batch", ")", "\n", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "transform", "=", "resizeNormalize", "(", "(", "imgW", ",", "imgH", ")", ",", "self", ".", "mask", ")", "\n", "transform2", "=", "resizeNormalize", "(", "(", "imgW", "//", "self", ".", "down_sample_scale", ",", "imgH", "//", "self", ".", "down_sample_scale", ")", ",", "self", ".", "mask", ")", "\n", "\n", "images_hr", "=", "[", "transform", "(", "image", ")", "for", "image", "in", "images", "]", "\n", "images_hr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_hr", "]", ",", "0", ")", "\n", "\n", "images_lr", "=", "[", "image", ".", "resize", "(", "(", "image", ".", "size", "[", "0", "]", "//", "self", ".", "down_sample_scale", ",", "image", ".", "size", "[", "1", "]", "//", "self", ".", "down_sample_scale", ")", ",", "Image", ".", "BICUBIC", ")", "for", "image", "in", "images", "]", "\n", "images_lr", "=", "[", "transform2", "(", "image", ")", "for", "image", "in", "images_lr", "]", "\n", "images_lr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_lr", "]", ",", "0", ")", "\n", "\n", "return", "images_hr", ",", "images_lr", ",", "label_strs", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.alignCollate_real.__call__": [[258, 271], ["zip", "dataset.resizeNormalize", "dataset.resizeNormalize", "torch.cat", "torch.cat", "resizeNormalize.", "resizeNormalize.", "t.unsqueeze", "t.unsqueeze"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images_HR", ",", "images_lr", ",", "label_strs", "=", "zip", "(", "*", "batch", ")", "\n", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "transform", "=", "resizeNormalize", "(", "(", "imgW", ",", "imgH", ")", ",", "self", ".", "mask", ")", "\n", "transform2", "=", "resizeNormalize", "(", "(", "imgW", "//", "self", ".", "down_sample_scale", ",", "imgH", "//", "self", ".", "down_sample_scale", ")", ",", "self", ".", "mask", ")", "\n", "images_HR", "=", "[", "transform", "(", "image", ")", "for", "image", "in", "images_HR", "]", "\n", "images_HR", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_HR", "]", ",", "0", ")", "\n", "\n", "images_lr", "=", "[", "transform2", "(", "image", ")", "for", "image", "in", "images_lr", "]", "\n", "images_lr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_lr", "]", ",", "0", ")", "\n", "\n", "return", "images_HR", ",", "images_lr", ",", "label_strs", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.ConcatDataset.cumsum": [[283, 291], ["len", "r.append"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "cumsum", "(", "sequence", ")", ":", "\n", "        ", "r", ",", "s", "=", "[", "]", ",", "0", "\n", "for", "e", "in", "sequence", ":", "\n", "            ", "l", "=", "len", "(", "e", ")", "\n", "r", ".", "append", "(", "l", "+", "s", ")", "\n", "s", "+=", "l", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.ConcatDataset.__init__": [[292, 297], ["torch.utils.data.Dataset.__init__", "list", "dataset.ConcatDataset.cumsum", "len"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.ConcatDataset.cumsum"], ["", "def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "datasets", ")", ">", "0", ",", "'datasets should not be an empty iterable'", "\n", "self", ".", "datasets", "=", "list", "(", "datasets", ")", "\n", "self", ".", "cumulative_sizes", "=", "self", ".", "cumsum", "(", "self", ".", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.ConcatDataset.__len__": [[298, 300], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cumulative_sizes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.ConcatDataset.__getitem__": [[301, 308], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "", "return", "self", ".", "datasets", "[", "dataset_idx", "]", "[", "sample_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.ConcatDataset.cummulative_sizes": [[309, 314], ["warnings.warn"], "methods", ["None"], ["", "@", "property", "\n", "def", "cummulative_sizes", "(", "self", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"cummulative_sizes attribute is renamed to \"", "\n", "\"cumulative_sizes\"", ",", "DeprecationWarning", ",", "stacklevel", "=", "2", ")", "\n", "return", "self", ".", "cumulative_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.rand_crop": [[27, 32], ["im.crop", "random.uniform", "random.uniform"], "function", ["None"], ["def", "rand_crop", "(", "im", ")", ":", "\n", "    ", "w", ",", "h", "=", "im", ".", "size", "\n", "p1", "=", "(", "random", ".", "uniform", "(", "0", ",", "w", "*", "(", "1", "-", "scale", ")", ")", ",", "random", ".", "uniform", "(", "0", ",", "h", "*", "(", "1", "-", "scale", ")", ")", ")", "\n", "p2", "=", "(", "p1", "[", "0", "]", "+", "scale", "*", "w", ",", "p1", "[", "1", "]", "+", "scale", "*", "h", ")", "\n", "return", "im", ".", "crop", "(", "p1", "+", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.central_crop": [[34, 39], ["im.crop"], "function", ["None"], ["", "def", "central_crop", "(", "im", ")", ":", "\n", "    ", "w", ",", "h", "=", "im", ".", "size", "\n", "p1", "=", "(", "(", "(", "1", "-", "scale", ")", "*", "w", "/", "2", ")", ",", "(", "1", "-", "scale", ")", "*", "h", "/", "2", ")", "\n", "p2", "=", "(", "(", "1", "+", "scale", ")", "*", "w", "/", "2", ",", "(", "1", "+", "scale", ")", "*", "h", "/", "2", ")", "\n", "return", "im", ".", "crop", "(", "p1", "+", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.dataset.buf2PIL": [[41, 48], ["txn.get", "six.BytesIO", "six.BytesIO.write", "six.BytesIO.seek", "PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "buf2PIL", "(", "txn", ",", "key", ",", "type", "=", "'RGB'", ")", ":", "\n", "    ", "imgbuf", "=", "txn", ".", "get", "(", "key", ")", "\n", "buf", "=", "six", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "im", "=", "Image", ".", "open", "(", "buf", ")", ".", "convert", "(", "type", ")", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.voc_data.load_voc.__init__": [[48, 56], ["torch.utils.data.Dataset.__init__", "os.listdir", "os.path.join", "os.listdir.remove"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ")", ":", "\n", "        ", "super", "(", "load_voc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "im_names", "=", "os", ".", "listdir", "(", "self", ".", "root", ")", "\n", "for", "name", "in", "im_names", ":", "\n", "            ", "if", "'.jpg'", "not", "in", "name", ":", "\n", "                ", "im_names", ".", "remove", "(", "name", ")", "\n", "", "", "self", ".", "im_path", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "im_name", ")", "for", "im_name", "in", "im_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.voc_data.load_voc.__len__": [[57, 59], ["voc_data.load_voc.im_path.__len__"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.voc_data.load_voc.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "im_path", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.voc_data.load_voc.__getitem__": [[60, 64], ["PIL.Image.open", "voc_data.rand_crop"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.rand_crop"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "im_input", "=", "Image", ".", "open", "(", "self", ".", "im_path", "[", "index", "]", ")", "\n", "im_label", "=", "rand_crop", "(", "im_input", ")", "\n", "return", "im_input", ",", "im_label", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.voc_data.resizeNormalize.__init__": [[67, 71], ["torchvision.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "toTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.voc_data.resizeNormalize.__call__": [[72, 80], ["sp_noise.resize", "voc_data.resizeNormalize.toTensor", "sp_noise.sub_().div_", "cv2.cvtColor", "voc_data.sp_noise", "numpy.asarray", "sp_noise.sub_"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.voc_data.sp_noise"], ["", "def", "__call__", "(", "self", ",", "img", ",", "noise", "=", "False", ")", ":", "\n", "        ", "img", "=", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "if", "noise", ":", "\n", "            ", "img", "=", "cv2", ".", "cvtColor", "(", "numpy", ".", "asarray", "(", "img", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "img", "=", "sp_noise", "(", "img", ",", "0.5", ")", "\n", "", "img", "=", "self", ".", "toTensor", "(", "img", ")", "\n", "img", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.voc_data.alignCollate.__init__": [[84, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgH", "=", "256", ",", "imgW", "=", "256", ",", "down_sample_scale", "=", "1", ")", ":", "\n", "        ", "self", ".", "imgH", "=", "imgH", "\n", "self", ".", "imgW", "=", "imgW", "\n", "self", ".", "down_sample_scale", "=", "down_sample_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.voc_data.alignCollate.__call__": [[89, 103], ["zip", "voc_data.resizeNormalize", "voc_data.resizeNormalize", "torch.cat", "torch.cat", "resizeNormalize.", "image.resize", "resizeNormalize.", "t.unsqueeze", "t.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "images_lr", ",", "images_hr", "=", "zip", "(", "*", "batch", ")", "\n", "imgH", "=", "self", ".", "imgH", "\n", "imgW", "=", "self", ".", "imgW", "\n", "transform", "=", "resizeNormalize", "(", "(", "imgW", ",", "imgH", ")", ")", "\n", "transform2", "=", "resizeNormalize", "(", "(", "imgW", "//", "self", ".", "down_sample_scale", ",", "imgH", "//", "self", ".", "down_sample_scale", ")", ",", "True", ")", "\n", "images_hr", "=", "[", "transform", "(", "image", ")", "for", "image", "in", "images_hr", "]", "\n", "images_hr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_hr", "]", ",", "0", ")", "\n", "\n", "images_lr", "=", "[", "image", ".", "resize", "(", "(", "image", ".", "size", "[", "0", "]", "//", "self", ".", "down_sample_scale", ",", "image", ".", "size", "[", "1", "]", "//", "self", ".", "down_sample_scale", ")", ",", "Image", ".", "BICUBIC", ")", "for", "image", "in", "images_lr", "]", "\n", "images_lr", "=", "[", "transform2", "(", "image", ")", "for", "image", "in", "images_lr", "]", "\n", "images_lr", "=", "torch", ".", "cat", "(", "[", "t", ".", "unsqueeze", "(", "0", ")", "for", "t", "in", "images_lr", "]", ",", "0", ")", "\n", "\n", "return", "images_lr", ",", "images_hr", "", "", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.voc_data.rand_crop": [[24, 30], ["im.crop", "random.uniform", "random.uniform"], "function", ["None"], ["def", "rand_crop", "(", "im", ")", ":", "\n", "    ", "w", ",", "h", "=", "im", ".", "size", "\n", "scale", "=", "0.95", "\n", "p1", "=", "(", "random", ".", "uniform", "(", "0", ",", "w", "*", "(", "1", "-", "scale", ")", ")", ",", "random", ".", "uniform", "(", "0", ",", "h", "*", "(", "1", "-", "scale", ")", ")", ")", "\n", "p2", "=", "(", "p1", "[", "0", "]", "+", "scale", "*", "w", ",", "p1", "[", "1", "]", "+", "scale", "*", "h", ")", "\n", "return", "im", ".", "crop", "(", "p1", "+", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.voc_data.sp_noise": [[32, 45], ["numpy.zeros", "range", "range", "random.random"], "function", ["None"], ["", "def", "sp_noise", "(", "image", ",", "prob", ")", ":", "\n", "    ", "output", "=", "np", ".", "zeros", "(", "image", ".", "shape", ",", "np", ".", "uint8", ")", "\n", "thres", "=", "1", "-", "prob", "\n", "for", "i", "in", "range", "(", "image", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "image", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "rdn", "=", "random", ".", "random", "(", ")", "\n", "if", "rdn", "<", "prob", ":", "\n", "                ", "output", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "elif", "rdn", ">", "thres", ":", "\n", "                ", "output", "[", "i", "]", "[", "j", "]", "=", "255", "\n", "", "else", ":", "\n", "                ", "output", "[", "i", "]", "[", "j", "]", "=", "image", "[", "i", "]", "[", "j", "]", "\n", "", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.rand_crop": [[17, 23], ["im.crop", "random.uniform", "random.uniform"], "function", ["None"], ["def", "rand_crop", "(", "im", ")", ":", "\n", "    ", "w", ",", "h", "=", "im", ".", "size", "\n", "scale", "=", "0.95", "\n", "p1", "=", "(", "random", ".", "uniform", "(", "0", ",", "w", "*", "(", "1", "-", "scale", ")", ")", ",", "random", ".", "uniform", "(", "0", ",", "h", "*", "(", "1", "-", "scale", ")", ")", ")", "\n", "p2", "=", "(", "p1", "[", "0", "]", "+", "scale", "*", "w", ",", "p1", "[", "1", "]", "+", "scale", "*", "h", ")", "\n", "return", "im", ".", "crop", "(", "p1", "+", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.buf2PIL": [[25, 34], ["txn.get", "six.BytesIO", "six.BytesIO.write", "six.BytesIO.seek", "PIL.Image.open().convert", "im.rotate.rotate", "PIL.Image.open"], "function", ["None"], ["", "def", "buf2PIL", "(", "txn", ",", "key", ",", "type", "=", "'RGB'", ",", "degree", "=", "0", ")", ":", "\n", "    ", "imgbuf", "=", "txn", ".", "get", "(", "key", ")", "\n", "buf", "=", "six", ".", "BytesIO", "(", ")", "\n", "buf", ".", "write", "(", "imgbuf", ")", "\n", "buf", ".", "seek", "(", "0", ")", "\n", "im", "=", "Image", ".", "open", "(", "buf", ")", ".", "convert", "(", "type", ")", "\n", "if", "degree", "is", "not", "0", ":", "\n", "        ", "im", "=", "im", ".", "rotate", "(", "angle", "=", "degree", ",", "resample", "=", "Image", ".", "BICUBIC", ")", "\n", "", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.PIL2buf": [[36, 43], ["im.save", "os.remove", "str", "os.path.join", "open", "f.read", "os.path.join", "int", "os.path.join", "time.time"], "function", ["None"], ["", "def", "PIL2buf", "(", "im", ")", ":", "\n", "    ", "name", "=", "str", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "+", "'.jpg'", "\n", "im", ".", "save", "(", "os", ".", "path", ".", "join", "(", "'./'", ",", "name", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'./'", ",", "name", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "imageBin", "=", "f", ".", "read", "(", ")", "\n", "", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "'./'", ",", "name", ")", ")", "\n", "return", "imageBin", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.checkImageIsValid": [[45, 54], ["numpy.fromstring", "cv2.imdecode"], "function", ["None"], ["", "def", "checkImageIsValid", "(", "imageBin", ")", ":", "\n", "    ", "if", "imageBin", "is", "None", ":", "\n", "        ", "return", "False", "\n", "", "imageBuf", "=", "np", ".", "fromstring", "(", "imageBin", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "cv2", ".", "imdecode", "(", "imageBuf", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "imgH", ",", "imgW", "=", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", "\n", "if", "imgH", "*", "imgW", "==", "0", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.writeCache": [[56, 62], ["env.begin", "cache.items", "txn.put", "type", "k.encode.encode"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode"], ["", "def", "writeCache", "(", "env", ",", "cache", ")", ":", "\n", "    ", "with", "env", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "        ", "for", "k", ",", "v", "in", "cache", ".", "items", "(", ")", ":", "\n", "            ", "if", "type", "(", "k", ")", "is", "not", "bytes", ":", "\n", "                ", "k", "=", "k", ".", "encode", "(", ")", "\n", "", "txn", ".", "put", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb._is_difficult": [[64, 67], ["isinstance", "re.match"], "function", ["None"], ["", "", "", "def", "_is_difficult", "(", "word", ")", ":", "\n", "    ", "assert", "isinstance", "(", "word", ",", "str", ")", "\n", "return", "not", "re", ".", "match", "(", "'^[\\w]+$'", ",", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.createDataset_detection": [[69, 127], ["len", "lmdb.open", "range", "str().encode", "create_lmdb.writeCache", "print", "len", "len", "len", "os.path.exists", "os.mkdir", "box_x.encode", "box_y.encode", "len", "os.path.exists", "print", "open", "f.read", "labelList[].encode", "open().read", "open().read", "create_lmdb.writeCache", "print", "str", "open", "open"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.writeCache", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.writeCache"], ["", "def", "createDataset_detection", "(", "outputPath", ",", "imagePathList", ",", "box_x_list", ",", "box_y_list", ",", "\n", "labelList", ",", "region_mask_list", ",", "pixel_mask_list", ")", ":", "\n", "    ", "\"\"\"\n  Create LMDB dataset for CRNN training.\n  ARGS:\n      outputPath      : LMDB output path\n      imagePathList   : list of image path\n      labelList       : list of corresponding groundtruth texts\n      box_x_list      : coordinate x of gt_boxed\n      box_y_list      : coordinate y of gt_boxed\n      region_mask_list: region_mask images\n      pixel_mask_list : pixel_mask images\n  \"\"\"", "\n", "assert", "(", "len", "(", "imagePathList", ")", "==", "len", "(", "box_x_list", ")", "==", "len", "(", "box_y_list", ")", ")", "\n", "nSamples", "=", "len", "(", "imagePathList", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outputPath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "outputPath", ")", "\n", "", "env", "=", "lmdb", ".", "open", "(", "outputPath", ",", "map_size", "=", "1099511627776", ")", "\n", "cache", "=", "{", "}", "\n", "cnt", "=", "1", "\n", "for", "i", "in", "range", "(", "nSamples", ")", ":", "\n", "        ", "imagePath", "=", "imagePathList", "[", "i", "]", "\n", "box_x", "=", "box_x_list", "[", "i", "]", "\n", "box_y", "=", "box_y_list", "[", "i", "]", "\n", "if", "len", "(", "box_x", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "imagePath", ")", ":", "\n", "            ", "print", "(", "'%s does not exist'", "%", "imagePath", ")", "\n", "continue", "\n", "", "with", "open", "(", "imagePath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "imageBin", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "imageKey", "=", "'image-%09d'", "%", "cnt", "\n", "cache", "[", "imageKey", "]", "=", "imageBin", "\n", "box_x_Key", "=", "'boxes_x-%09d'", "%", "cnt", "\n", "box_y_Key", "=", "'boxes_y-%09d'", "%", "cnt", "\n", "cache", "[", "box_x_Key", "]", "=", "box_x", ".", "encode", "(", ")", "\n", "cache", "[", "box_y_Key", "]", "=", "box_y", ".", "encode", "(", ")", "\n", "\n", "if", "labelList", ":", "\n", "            ", "labelKey", "=", "'label-%09d'", "%", "cnt", "\n", "cache", "[", "labelKey", "]", "=", "labelList", "[", "i", "]", ".", "encode", "(", ")", "\n", "", "if", "region_mask_list", ":", "\n", "            ", "region_mask_Key", "=", "'region_mask-%09d'", "%", "cnt", "\n", "cache", "[", "region_mask_Key", "]", "=", "open", "(", "region_mask_list", "[", "i", "]", ",", "'rb'", ")", ".", "read", "(", ")", "\n", "", "if", "pixel_mask_list", ":", "\n", "            ", "pixel_mask_Key", "=", "'pixel_mask-%09d'", "%", "cnt", "\n", "cache", "[", "pixel_mask_Key", "]", "=", "open", "(", "pixel_mask_list", "[", "i", "]", ",", "'rb'", ")", ".", "read", "(", ")", "\n", "# embed()", "\n", "", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "            ", "writeCache", "(", "env", ",", "cache", ")", "\n", "cache", "=", "{", "}", "\n", "print", "(", "'Written %d / %d'", "%", "(", "cnt", ",", "nSamples", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "", "nSamples", "=", "cnt", "-", "1", "\n", "cache", "[", "'num-samples'", "]", "=", "str", "(", "nSamples", ")", ".", "encode", "(", ")", "\n", "writeCache", "(", "env", ",", "cache", ")", "\n", "print", "(", "'Created dataset with %d samples'", "%", "nSamples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.createDataset_inpainting": [[129, 182], ["len", "lmdb.open", "range", "str().encode", "create_lmdb.writeCache", "print", "len", "len", "len", "os.path.exists", "os.mkdir", "box_x.encode", "box_y.encode", "len", "os.path.exists", "print", "open", "f.read", "labelList[].encode", "open().read", "open().read", "create_lmdb.writeCache", "print", "str", "open", "open"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.writeCache", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.writeCache"], ["", "def", "createDataset_inpainting", "(", "outputPath", ",", "imagePathList", ",", "labelList", ")", ":", "\n", "    ", "\"\"\"\n  Create LMDB dataset for CRNN training.\n  ARGS:\n      outputPath      : LMDB output path\n      imagePathList   : list of image path\n      labelList       : list of corresponding groundtruth texts\n  \"\"\"", "\n", "assert", "(", "len", "(", "imagePathList", ")", "==", "len", "(", "box_x_list", ")", "==", "len", "(", "box_y_list", ")", ")", "\n", "nSamples", "=", "len", "(", "imagePathList", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outputPath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "outputPath", ")", "\n", "", "env", "=", "lmdb", ".", "open", "(", "outputPath", ",", "map_size", "=", "1099511627776", ")", "\n", "cache", "=", "{", "}", "\n", "cnt", "=", "1", "\n", "for", "i", "in", "range", "(", "nSamples", ")", ":", "\n", "        ", "imagePath", "=", "imagePathList", "[", "i", "]", "\n", "box_x", "=", "box_x_list", "[", "i", "]", "\n", "box_y", "=", "box_y_list", "[", "i", "]", "\n", "if", "len", "(", "box_x", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "imagePath", ")", ":", "\n", "            ", "print", "(", "'%s does not exist'", "%", "imagePath", ")", "\n", "continue", "\n", "", "with", "open", "(", "imagePath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "imageBin", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "imageKey", "=", "'image-%09d'", "%", "cnt", "\n", "cache", "[", "imageKey", "]", "=", "imageBin", "\n", "box_x_Key", "=", "'boxes_x-%09d'", "%", "cnt", "\n", "box_y_Key", "=", "'boxes_y-%09d'", "%", "cnt", "\n", "cache", "[", "box_x_Key", "]", "=", "box_x", ".", "encode", "(", ")", "\n", "cache", "[", "box_y_Key", "]", "=", "box_y", ".", "encode", "(", ")", "\n", "\n", "if", "labelList", ":", "\n", "            ", "labelKey", "=", "'label-%09d'", "%", "cnt", "\n", "cache", "[", "labelKey", "]", "=", "labelList", "[", "i", "]", ".", "encode", "(", ")", "\n", "", "if", "region_mask_list", ":", "\n", "            ", "region_mask_Key", "=", "'region_mask-%09d'", "%", "cnt", "\n", "cache", "[", "region_mask_Key", "]", "=", "open", "(", "region_mask_list", "[", "i", "]", ",", "'rb'", ")", ".", "read", "(", ")", "\n", "", "if", "pixel_mask_list", ":", "\n", "            ", "pixel_mask_Key", "=", "'pixel_mask-%09d'", "%", "cnt", "\n", "cache", "[", "pixel_mask_Key", "]", "=", "open", "(", "pixel_mask_list", "[", "i", "]", ",", "'rb'", ")", ".", "read", "(", ")", "\n", "# embed()", "\n", "", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "            ", "writeCache", "(", "env", ",", "cache", ")", "\n", "cache", "=", "{", "}", "\n", "print", "(", "'Written %d / %d'", "%", "(", "cnt", ",", "nSamples", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "", "nSamples", "=", "cnt", "-", "1", "\n", "cache", "[", "'num-samples'", "]", "=", "str", "(", "nSamples", ")", ".", "encode", "(", ")", "\n", "writeCache", "(", "env", ",", "cache", ")", "\n", "print", "(", "'Created dataset with %d samples'", "%", "nSamples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.createDataset": [[184, 234], ["len", "lmdb.open", "range", "str().encode", "create_lmdb.writeCache", "print", "len", "len", "os.path.exists", "os.mkdir", "label.encode", "len", "os.path.exists", "print", "open", "f.read", "create_lmdb.writeCache", "print", "str", "create_lmdb.checkImageIsValid", "print"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.writeCache", "home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.writeCache", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.checkImageIsValid"], ["", "def", "createDataset", "(", "outputPath", ",", "imagePathList", ",", "labelList", ",", "lexiconList", "=", "None", ",", "checkValid", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n  Create LMDB dataset for CRNN training.\n  ARGS:\n      outputPath    : LMDB output path\n      imagePathList : list of image path\n      labelList     : list of corresponding groundtruth texts\n      lexiconList   : (optional) list of lexicon lists\n      checkValid    : if true, check the validity of every image\n  \"\"\"", "\n", "assert", "(", "len", "(", "imagePathList", ")", "==", "len", "(", "labelList", ")", ")", "\n", "nSamples", "=", "len", "(", "imagePathList", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outputPath", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "outputPath", ")", "\n", "", "env", "=", "lmdb", ".", "open", "(", "outputPath", ",", "map_size", "=", "1099511627776", ")", "\n", "cache", "=", "{", "}", "\n", "cnt", "=", "1", "\n", "for", "i", "in", "range", "(", "nSamples", ")", ":", "\n", "        ", "imagePath", "=", "imagePathList", "[", "i", "]", "\n", "label", "=", "labelList", "[", "i", "]", "\n", "if", "len", "(", "label", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "imagePath", ")", ":", "\n", "            ", "print", "(", "'%s does not exist'", "%", "imagePath", ")", "\n", "continue", "\n", "", "with", "open", "(", "imagePath", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "imageBin", "=", "f", ".", "read", "(", ")", "\n", "", "if", "checkValid", ":", "\n", "            ", "if", "not", "checkImageIsValid", "(", "imageBin", ")", ":", "\n", "                ", "print", "(", "'%s is not a valid image'", "%", "imagePath", ")", "\n", "continue", "\n", "\n", "", "", "imageKey", "=", "'image-%09d'", "%", "cnt", "\n", "labelKey", "=", "'label-%09d'", "%", "cnt", "\n", "cache", "[", "imageKey", "]", "=", "imageBin", "\n", "\n", "cache", "[", "labelKey", "]", "=", "label", ".", "encode", "(", ")", "\n", "if", "lexiconList", ":", "\n", "            ", "lexiconKey", "=", "'lexicon-%09d'", "%", "cnt", "\n", "cache", "[", "lexiconKey", "]", "=", "' '", ".", "join", "(", "lexiconList", "[", "i", "]", ")", "\n", "# embed()", "\n", "", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "            ", "writeCache", "(", "env", ",", "cache", ")", "\n", "cache", "=", "{", "}", "\n", "print", "(", "'Written %d / %d'", "%", "(", "cnt", ",", "nSamples", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "", "nSamples", "=", "cnt", "-", "1", "\n", "cache", "[", "'num-samples'", "]", "=", "str", "(", "nSamples", ")", ".", "encode", "(", ")", "\n", "writeCache", "(", "env", ",", "cache", ")", "\n", "print", "(", "'Created dataset with %d samples'", "%", "nSamples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.create_800k": [[236, 271], ["tqdm.tqdm", "print", "create_lmdb.createDataset", "os.path.exists", "os.mkdir", "open", "json.loads", "f.readlines", "PIL.Image.open", "len", "os.path.join", "image_labels.append", "image_names.append", "image_paths.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.createDataset"], ["", "def", "create_800k", "(", ")", ":", "\n", "    ", "json_path", "=", "'/home/wwj/0_LAB/dataset/SynthText/syntxt_crop.odgt'", "\n", "lmdb_output_path", "=", "'/home/wwj/0_LAB/dataset/LMDB/syn800k_HR2'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "lmdb_output_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "lmdb_output_path", ")", "\n", "", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "f", ".", "readlines", "(", ")", "[", ":", "]", "\n", "\n", "", "data", "=", "[", "json", ".", "loads", "(", "i", ")", "for", "i", "in", "data", "]", "\n", "image_names", "=", "[", "]", "\n", "image_paths", "=", "[", "]", "\n", "image_labels", "=", "[", "]", "\n", "portion", "=", "1", "\n", "w_list", "=", "[", "]", "\n", "h_list", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "data", ")", ":", "\n", "        ", "image_path", "=", "i", "[", "'im_path'", "]", "\n", "image_name", "=", "i", "[", "'im_name'", "]", "\n", "image_label", "=", "i", "[", "'label'", "]", "\n", "\n", "try", ":", "\n", "            ", "temp", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "image_path", ",", "image_name", ")", ")", "\n", "w", "=", "temp", ".", "size", "[", "0", "]", "\n", "h", "=", "temp", ".", "size", "[", "1", "]", "\n", "\n", "if", "h", ">=", "64", "and", "w", ">=", "256", ":", "\n", "                ", "image_labels", ".", "append", "(", "image_label", ")", "\n", "image_names", ".", "append", "(", "image_name", ")", "\n", "image_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "image_path", ",", "image_name", ")", ")", "\n", "\n", "", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "", "", "print", "(", "'there are all %d images'", "%", "len", "(", "image_paths", ")", ")", "\n", "\n", "createDataset", "(", "lmdb_output_path", ",", "image_paths", ",", "image_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.create_mat": [[273, 305], ["scipy.io.loadmat", "[].__len__", "tqdm.tqdm", "print", "create_lmdb.createDataset_detection", "os.path.exists", "os.mkdir", "os.path.join", "range", "os.path.join", "PIL.Image.open", "image_labels.append", "image_paths.append", "len"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.voc_data.load_voc.__len__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.createDataset_detection"], ["", "def", "create_mat", "(", ")", ":", "\n", "    ", "image_paths", "=", "[", "]", "\n", "image_labels", "=", "[", "]", "\n", "\n", "lmdb_output_path", "=", "'../../dataset/LMDB/iiit5k_train'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "lmdb_output_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "lmdb_output_path", ")", "\n", "", "root", "=", "'../../dataset/IIIT5K'", "\n", "train_gt", "=", "loadmat", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'traindata.mat'", ")", ")", "\n", "length", "=", "train_gt", "[", "'traindata'", "]", "[", "0", "]", ".", "__len__", "(", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "length", ")", ")", ":", "\n", "        ", "im_path", "=", "train_gt", "[", "'traindata'", "]", "[", "0", "]", "[", "i", "]", "[", "0", "]", "[", "0", "]", "\n", "im_gt", "=", "train_gt", "[", "'traindata'", "]", "[", "0", "]", "[", "i", "]", "[", "1", "]", "[", "0", "]", "\n", "# lexi_50 = train_gt['traindata'][0][i][2][0]  #len==50", "\n", "# lexi_1k = train_gt['traindata'][0][i][3][0]   #len==1k", "\n", "\n", "try", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "im_path", ")", "\n", "image_label", "=", "im_gt", "\n", "temp", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "# w = temp.size[0]", "\n", "# h = temp.size[1]", "\n", "# portion1 = w / float(h)", "\n", "# w_lsit.append(w)", "\n", "# h_list.append(h)", "\n", "image_labels", ".", "append", "(", "image_label", ")", "\n", "image_paths", ".", "append", "(", "image_path", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "# embed()", "\n", "", "", "print", "(", "'there are all %d images'", "%", "len", "(", "image_paths", ")", ")", "\n", "createDataset_detection", "(", "lmdb_output_path", ",", "image_paths", ",", "image_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.create_total_text": [[307, 368], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "tqdm.tqdm", "IPython.embed", "print", "create_lmdb.createDataset_detection", "os.path.exists", "os.mkdir", "os.path.join", "PIL.Image.open", "os.path.join", "os.path.join", "os.path.join", "scipy.io.loadmat", "len", "range", "box_x_list.append", "box_y_list.append", "region_mask_list.append", "pixel_mask_list.append", "image_labels.append", "image_paths.append", "len", "str().replace().replace().replace", "str().replace().replace().replace", "box_xs.append", "box_ys.append", "labels.append", "IPython.embed", "name.split", "name.split", "str().replace().replace", "str().replace().replace", "str().replace", "str().replace", "str", "str", "list", "list"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.createDataset_detection"], ["", "def", "create_total_text", "(", ")", ":", "\n", "    ", "image_paths", "=", "[", "]", "\n", "image_labels", "=", "[", "]", "\n", "box_x_list", "=", "[", "]", "\n", "box_y_list", "=", "[", "]", "\n", "region_mask_list", "=", "[", "]", "\n", "pixel_mask_list", "=", "[", "]", "\n", "type", "=", "'Test'", "\n", "lmdb_output_path", "=", "'../../dataset/LMDB/total_text_'", "+", "type", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "lmdb_output_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "lmdb_output_path", ")", "\n", "", "root", "=", "'../../dataset/total_text'", "\n", "gt_root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Groundtruth'", ",", "'Polygon'", ",", "type", ")", "\n", "region_mask_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Text_Region_Mask'", ",", "type", ")", "\n", "pixel_mask_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'groundtruth_pixel'", ",", "type", ")", "\n", "im_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Images'", ",", "type", ")", "\n", "im_names", "=", "os", ".", "listdir", "(", "im_dir", ")", "\n", "\n", "for", "name", "in", "tqdm", "(", "im_names", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "image_path", "=", "os", ".", "path", ".", "join", "(", "im_dir", ",", "name", ")", "\n", "temp", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "\n", "region_mask_name", "=", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.png'", "\n", "pixel_mask_name", "=", "name", "\n", "region_mask_path", "=", "os", ".", "path", ".", "join", "(", "region_mask_dir", ",", "region_mask_name", ")", "\n", "pixel_mask_path", "=", "os", ".", "path", ".", "join", "(", "pixel_mask_dir", ",", "pixel_mask_name", ")", "\n", "\n", "mat_name", "=", "(", "'poly_'", "if", "type", "==", "'Test'", "else", "''", ")", "+", "'gt_'", "+", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.mat'", "\n", "mat_path", "=", "os", ".", "path", ".", "join", "(", "gt_root", ",", "mat_name", ")", "\n", "gt", "=", "loadmat", "(", "mat_path", ")", "\n", "gt_mat", "=", "gt", "[", "(", "'poly'", "if", "type", "==", "'Test'", "else", "''", ")", "+", "'gt'", "]", "\n", "sub", "=", "len", "(", "gt_mat", ")", "\n", "box_xs", "=", "[", "]", "\n", "box_ys", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "sub", ")", ":", "\n", "                ", "box_x", "=", "str", "(", "list", "(", "gt_mat", "[", "i", "]", "[", "1", "]", "[", "0", "]", ")", ")", ".", "replace", "(", "'['", ",", "''", ")", ".", "replace", "(", "']'", ",", "''", ")", ".", "replace", "(", "' '", ",", "''", ")", "\n", "box_y", "=", "str", "(", "list", "(", "gt_mat", "[", "i", "]", "[", "3", "]", "[", "0", "]", ")", ")", ".", "replace", "(", "'['", ",", "''", ")", ".", "replace", "(", "']'", ",", "''", ")", ".", "replace", "(", "' '", ",", "''", ")", "\n", "label", "=", "gt_mat", "[", "i", "]", "[", "4", "]", "[", "0", "]", "\n", "box_xs", ".", "append", "(", "box_x", ")", "\n", "box_ys", ".", "append", "(", "box_y", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "box_x_str", "=", "' '", ".", "join", "(", "box_xs", ")", "\n", "box_y_str", "=", "' '", ".", "join", "(", "box_ys", ")", "\n", "label_str", "=", "' '", ".", "join", "(", "labels", ")", "\n", "\n", "box_x_list", ".", "append", "(", "box_x_str", ")", "\n", "box_y_list", ".", "append", "(", "box_y_str", ")", "\n", "region_mask_list", ".", "append", "(", "region_mask_path", ")", "\n", "pixel_mask_list", ".", "append", "(", "pixel_mask_path", ")", "\n", "image_labels", ".", "append", "(", "label_str", ")", "\n", "image_paths", ".", "append", "(", "image_path", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "embed", "(", ")", "\n", "", "", "embed", "(", ")", "\n", "print", "(", "'there are all %d images'", "%", "len", "(", "image_paths", ")", ")", "\n", "\n", "createDataset_detection", "(", "lmdb_output_path", ",", "image_paths", ",", "box_x_list", ",", "box_y_list", ",", "\n", "image_labels", ",", "region_mask_list", ",", "pixel_mask_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.create_90k": [[370, 406], ["os.listdir", "print", "tqdm.tqdm", "print", "create_lmdb.createDataset", "os.listdir", "os.listdir.remove", "len", "os.path.join", "os.listdir", "len", "os.path.join", "os.path.join", "PIL.Image.open", "w_lsit.append", "h_list.append", "image.split", "float", "image_labels.append", "image_paths.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.createDataset"], ["", "def", "create_90k", "(", ")", ":", "\n", "    ", "image_paths", "=", "[", "]", "\n", "image_labels", "=", "[", "]", "\n", "lmdb_output_path", "=", "'/home/wwj/0_LAB/dataset/LMDB/syn90k_hr'", "\n", "root", "=", "'/home/wwj/0_LAB/dataset/mjsynth/mnt/ramdisk/max/90kDICT32px'", "\n", "Dirs", "=", "os", ".", "listdir", "(", "root", ")", "\n", "w_lsit", "=", "[", "]", "\n", "h_list", "=", "[", "]", "\n", "for", "i", "in", "Dirs", ":", "\n", "        ", "if", "'.'", "in", "i", ":", "\n", "            ", "Dirs", ".", "remove", "(", "i", ")", "\n", "", "", "print", "(", "'there are all %d directories'", "%", "len", "(", "Dirs", ")", ")", "\n", "for", "i", "in", "tqdm", "(", "Dirs", ")", ":", "\n", "        ", "dirs", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "i", ")", ")", "\n", "for", "dir", "in", "dirs", ":", "\n", "            ", "images", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "i", ",", "dir", ")", ")", "\n", "for", "image", "in", "images", ":", "\n", "                ", "try", ":", "\n", "                    ", "image_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "i", ",", "dir", ",", "image", ")", "\n", "image_label", "=", "image", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "temp", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "w", "=", "temp", ".", "size", "[", "0", "]", "\n", "h", "=", "temp", ".", "size", "[", "1", "]", "\n", "portion1", "=", "w", "/", "float", "(", "h", ")", "\n", "w_lsit", ".", "append", "(", "w", ")", "\n", "h_list", ".", "append", "(", "h", ")", "\n", "# dump the foo fat or thin images", "\n", "if", "w", ">=", "100", "and", "h", ">=", "31", ":", "\n", "                        ", "image_labels", ".", "append", "(", "image_label", ")", "\n", "image_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "image_path", ")", ")", "\n", "\n", "", "", "except", "OSError", ":", "\n", "                    ", "pass", "\n", "# embed()", "\n", "", "", "", "", "print", "(", "'there are all %d images'", "%", "len", "(", "image_paths", ")", ")", "\n", "createDataset", "(", "lmdb_output_path", ",", "image_paths", ",", "image_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.create_ic": [[408, 460], ["create_lmdb.createDataset", "create_lmdb.createDataset", "create_lmdb.createDataset", "create_lmdb.createDataset", "open", "f.readlines", "json.loads", "os.path.join", "os.path.exists", "os.path.join.split", "PIL.Image.open", "os.path.join", "image_labels_13test.append", "image_paths_13test.append", "image_labels_13train.append", "image_paths_13train.append", "image_labels_15test.append", "image_paths_15test.append", "image_labels_13test.append", "image_paths_13test.append"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.createDataset", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.createDataset", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.createDataset", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.createDataset"], ["", "def", "create_ic", "(", ")", ":", "\n", "    ", "json_path", "=", "'/home/wwj/0_LAB/dataset/ic.odgt'", "\n", "lmdb_output_path_13train", "=", "'/home/wwj/0_LAB/dataset/LMDB/ic13_train'", "\n", "lmdb_output_path_13test", "=", "'/home/wwj/0_LAB/dataset/LMDB/ic13_test'", "\n", "lmdb_output_path_15train", "=", "'/home/wwj/0_LAB/dataset/LMDB/ic15_train'", "\n", "lmdb_output_path_15test", "=", "'/home/wwj/0_LAB/dataset/LMDB/ic15_test'", "\n", "\n", "image_paths_13train", "=", "[", "]", "\n", "image_labels_13train", "=", "[", "]", "\n", "image_paths_13test", "=", "[", "]", "\n", "image_labels_13test", "=", "[", "]", "\n", "image_paths_15train", "=", "[", "]", "\n", "image_labels_15train", "=", "[", "]", "\n", "image_paths_15test", "=", "[", "]", "\n", "image_labels_15test", "=", "[", "]", "\n", "\n", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "f", ".", "readlines", "(", ")", "\n", "", "data", "=", "[", "json", ".", "loads", "(", "i", ")", "for", "i", "in", "data", "]", "\n", "\n", "for", "i", "in", "data", ":", "\n", "        ", "image_name", "=", "i", "[", "'img_path'", "]", "\n", "image_name", "=", "os", ".", "path", ".", "join", "(", "'/home/wwj/0_LAB/SRGAN/ic13'", ",", "image_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "image_label", "=", "i", "[", "'img_gt'", "]", "\n", "data_set", "=", "i", "[", "'dataset'", "]", "\n", "data_type", "=", "i", "[", "'type'", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_name", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "temp", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "image_name", ")", ")", "\n", "w", "=", "temp", ".", "size", "[", "0", "]", "\n", "h", "=", "temp", ".", "size", "[", "1", "]", "\n", "portion1", "=", "w", "/", "h", "\n", "\n", "if", "data_set", "==", "'IC13'", "and", "data_type", "==", "'test'", ":", "\n", "                    ", "image_labels_13test", ".", "append", "(", "image_label", ")", "\n", "image_paths_13test", ".", "append", "(", "image_name", ")", "\n", "", "elif", "data_set", "==", "'IC13'", "and", "data_type", "==", "'train'", ":", "\n", "                    ", "image_labels_13train", ".", "append", "(", "image_label", ")", "\n", "image_paths_13train", ".", "append", "(", "image_name", ")", "\n", "", "elif", "data_set", "==", "'IC15'", "and", "data_type", "==", "'test'", ":", "\n", "                    ", "image_labels_15test", ".", "append", "(", "image_label", ")", "\n", "image_paths_15test", ".", "append", "(", "image_name", ")", "\n", "", "elif", "data_set", "==", "'IC13'", "and", "data_type", "==", "'test'", ":", "\n", "                    ", "image_labels_13test", ".", "append", "(", "image_label", ")", "\n", "image_paths_13test", ".", "append", "(", "image_name", ")", "\n", "", "", "except", "OSError", ":", "\n", "                ", "pass", "\n", "\n", "", "", "", "createDataset", "(", "lmdb_output_path_13train", ",", "image_paths_13train", ",", "image_labels_13train", ")", "\n", "createDataset", "(", "lmdb_output_path_13test", ",", "image_paths_13test", ",", "image_labels_13test", ")", "\n", "createDataset", "(", "lmdb_output_path_15train", ",", "image_paths_15train", ",", "image_labels_15train", ")", "\n", "createDataset", "(", "lmdb_output_path_13test", ",", "image_paths_13test", ",", "image_labels_13test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.create_txt": [[462, 477], ["create_lmdb.createDataset", "open", "f.readlines", "gt.split.split", "gt[].replace", "image_labels.append", "image_paths.append", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.createDataset"], ["", "def", "create_txt", "(", ")", ":", "\n", "    ", "root", "=", "'/home/wwj/0_LAB/dataset/STR/SVT-Perspective'", "\n", "image_labels", "=", "[", "]", "\n", "image_paths", "=", "[", "]", "\n", "lmdb_output_path", "=", "'/home/wwj/0_LAB/dataset/LMDB/svtp-645'", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'gt.txt'", ")", ")", "as", "f", ":", "\n", "        ", "gts", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "gt", "in", "gts", ":", "\n", "        ", "gt", "=", "gt", ".", "split", "(", "' '", ")", "\n", "im_name", "=", "gt", "[", "0", "]", "\n", "label", "=", "gt", "[", "1", "]", ".", "replace", "(", "'\\r\\n'", ",", "''", ")", "\n", "image_labels", ".", "append", "(", "label", ")", "\n", "image_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "im_name", ")", ")", "\n", "\n", "", "createDataset", "(", "lmdb_output_path", ",", "image_paths", ",", "image_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.create_from_lmdb": [[479, 507], ["lmdb.open", "lmdb.open", "lmdb.open.begin", "int", "range", "str().encode", "create_lmdb.writeCache", "print", "env.begin.get", "create_lmdb.buf2PIL", "create_lmdb.rand_crop", "env.begin.get", "create_lmdb.PIL2buf", "create_lmdb.PIL2buf", "create_lmdb.writeCache", "print", "str"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.utils.util.strLabelConverter.encode", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.writeCache", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.buf2PIL", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.rand_crop", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.PIL2buf", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.PIL2buf", "home.repos.pwc.inspect_result.fudanvi_fudanocr.dataset.create_lmdb.writeCache"], ["", "def", "create_from_lmdb", "(", ")", ":", "\n", "    ", "root", "=", "'/mnt/lustre/wangwenjia/wwj_space/dataset/lmdb/str/syn800k_HR2'", "\n", "out_path", "=", "'/mnt/lustre/wangwenjia/wwj_space/dataset/lmdb/str/syn800k_HR_crop'", "\n", "env", "=", "lmdb", ".", "open", "(", "root", ",", "map_size", "=", "1099511627776", ")", "\n", "env_out", "=", "lmdb", ".", "open", "(", "out_path", ",", "map_size", "=", "1099511627776", ")", "\n", "cache_out", "=", "{", "}", "\n", "txn", "=", "env", ".", "begin", "(", ")", "\n", "num_samples", "=", "int", "(", "txn", ".", "get", "(", "b'num-samples'", ")", ")", "\n", "for", "cnt", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "imageKey", "=", "b'image-%09d'", "%", "(", "cnt", "+", "1", ")", "\n", "image_HR_Key", "=", "'image_HR-%09d'", "%", "(", "cnt", "+", "1", ")", "\n", "image_lr_Key", "=", "'image_lr-%09d'", "%", "(", "cnt", "+", "1", ")", "\n", "image", "=", "buf2PIL", "(", "txn", ",", "imageKey", ")", "\n", "out_image", "=", "rand_crop", "(", "image", ")", "\n", "labelKey", "=", "b'label-%09d'", "%", "(", "cnt", "+", "1", ")", "\n", "label", "=", "txn", ".", "get", "(", "labelKey", ")", "\n", "# embed()", "\n", "cache_out", "[", "image_HR_Key", "]", "=", "PIL2buf", "(", "image", ")", "\n", "cache_out", "[", "image_lr_Key", "]", "=", "PIL2buf", "(", "out_image", ")", "\n", "cache_out", "[", "labelKey", "]", "=", "label", "\n", "if", "cnt", "%", "1000", "==", "0", ":", "\n", "            ", "writeCache", "(", "env_out", ",", "cache_out", ")", "\n", "cache_out", "=", "{", "}", "\n", "print", "(", "'Written %d / %d'", "%", "(", "cnt", ",", "num_samples", ")", ")", "\n", "\n", "", "", "cache_out", "[", "'num-samples'", "]", "=", "str", "(", "num_samples", ")", ".", "encode", "(", ")", "\n", "writeCache", "(", "env_out", ",", "cache_out", ")", "\n", "print", "(", "'Created dataset with %d samples'", "%", "num_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.crnn.crnn.BidirectionalLSTM.__init__": [[8, 13], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nHidden", ",", "nOut", ")", ":", "\n", "        ", "super", "(", "BidirectionalLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "rnn", "=", "nn", ".", "LSTM", "(", "nIn", ",", "nHidden", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Linear", "(", "nHidden", "*", "2", ",", "nOut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.crnn.crnn.BidirectionalLSTM.forward": [[14, 23], ["crnn.BidirectionalLSTM.rnn", "recurrent.size", "recurrent.view", "crnn.BidirectionalLSTM.embedding", "output.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "recurrent", ",", "_", "=", "self", ".", "rnn", "(", "input", ")", "\n", "T", ",", "b", ",", "h", "=", "recurrent", ".", "size", "(", ")", "\n", "t_rec", "=", "recurrent", ".", "view", "(", "T", "*", "b", ",", "h", ")", "\n", "\n", "output", "=", "self", ".", "embedding", "(", "t_rec", ")", "# [T * b, nOut]", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "b", ",", "-", "1", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.crnn.crnn.CRNN.__init__": [[27, 69], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "crnn.CRNN.__init__.convRelu"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imgH", ",", "nc", ",", "nclass", ",", "nh", ",", "n_rnn", "=", "2", ",", "leakyRelu", "=", "False", ")", ":", "\n", "        ", "super", "(", "CRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "imgH", "%", "16", "==", "0", ",", "'imgH has to be a multiple of 16'", "\n", "\n", "ks", "=", "[", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "2", "]", "\n", "ps", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", "]", "\n", "ss", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "nm", "=", "[", "64", ",", "128", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", "]", "\n", "\n", "cnn", "=", "nn", ".", "Sequential", "(", ")", "\n", "\n", "def", "convRelu", "(", "i", ",", "batchNormalization", "=", "False", ")", ":", "\n", "            ", "nIn", "=", "nc", "if", "i", "==", "0", "else", "nm", "[", "i", "-", "1", "]", "\n", "nOut", "=", "nm", "[", "i", "]", "\n", "cnn", ".", "add_module", "(", "'conv{0}'", ".", "format", "(", "i", ")", ",", "\n", "nn", ".", "Conv2d", "(", "nIn", ",", "nOut", ",", "ks", "[", "i", "]", ",", "ss", "[", "i", "]", ",", "ps", "[", "i", "]", ")", ")", "\n", "if", "batchNormalization", ":", "\n", "                ", "cnn", ".", "add_module", "(", "'batchnorm{0}'", ".", "format", "(", "i", ")", ",", "nn", ".", "BatchNorm2d", "(", "nOut", ")", ")", "\n", "", "if", "leakyRelu", ":", "\n", "                ", "cnn", ".", "add_module", "(", "'relu{0}'", ".", "format", "(", "i", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "cnn", ".", "add_module", "(", "'relu{0}'", ".", "format", "(", "i", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "", "", "convRelu", "(", "0", ")", "\n", "cnn", ".", "add_module", "(", "'pooling{0}'", ".", "format", "(", "0", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "# 64x16x64", "\n", "convRelu", "(", "1", ")", "\n", "cnn", ".", "add_module", "(", "'pooling{0}'", ".", "format", "(", "1", ")", ",", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", ")", "# 128x8x32", "\n", "convRelu", "(", "2", ",", "True", ")", "\n", "convRelu", "(", "3", ")", "\n", "cnn", ".", "add_module", "(", "'pooling{0}'", ".", "format", "(", "2", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ")", "# 256x4x16", "\n", "convRelu", "(", "4", ",", "True", ")", "\n", "convRelu", "(", "5", ")", "\n", "cnn", ".", "add_module", "(", "'pooling{0}'", ".", "format", "(", "3", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "1", ")", ",", "(", "0", ",", "1", ")", ")", ")", "# 512x2x16", "\n", "convRelu", "(", "6", ",", "True", ")", "# 512x1x16", "\n", "\n", "self", ".", "cnn", "=", "cnn", "\n", "self", ".", "rnn", "=", "nn", ".", "Sequential", "(", "\n", "BidirectionalLSTM", "(", "512", ",", "nh", ",", "nh", ")", ",", "\n", "BidirectionalLSTM", "(", "nh", ",", "nh", ",", "nclass", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.crnn.crnn.CRNN.forward": [[70, 81], ["crnn.CRNN.cnn", "conv.permute.permute.size", "conv.permute.permute.squeeze", "conv.permute.permute.permute", "crnn.CRNN.rnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv", "=", "self", ".", "cnn", "(", "input", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "conv", ".", "size", "(", ")", "\n", "assert", "h", "==", "1", ",", "\"the height of conv must be 1\"", "\n", "conv", "=", "conv", ".", "squeeze", "(", "2", ")", "\n", "conv", "=", "conv", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# [w, b, c]", "\n", "\n", "# rnn features", "\n", "output", "=", "self", ".", "rnn", "(", "conv", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.TextFocusLoss.__init__": [[41, 53], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "range", "text_focus_loss.TextFocusLoss.build_up_transformer", "len"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.stroke_focus_loss.StrokeFocusLoss.build_up_transformer"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "TextFocusLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "ce_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "l1_loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "english_alphabet", "=", "'-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'", "\n", "self", ".", "english_dict", "=", "{", "}", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "english_alphabet", ")", ")", ":", "\n", "            ", "self", ".", "english_dict", "[", "self", ".", "english_alphabet", "[", "index", "]", "]", "=", "index", "\n", "\n", "", "self", ".", "build_up_transformer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.TextFocusLoss.build_up_transformer": [[54, 61], ["loss.transformer.Transformer().cuda", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel.load_state_dict", "torch.DataParallel.eval", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "loss.transformer.Transformer"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval"], ["", "def", "build_up_transformer", "(", "self", ")", ":", "\n", "\n", "        ", "transformer", "=", "Transformer", "(", ")", ".", "cuda", "(", ")", "\n", "transformer", "=", "nn", ".", "DataParallel", "(", "transformer", ")", "\n", "transformer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./dataset/mydata/pretrain_transformer.pth'", ")", ")", "\n", "transformer", ".", "eval", "(", ")", "\n", "self", ".", "transformer", "=", "transformer", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.TextFocusLoss.label_encoder": [[62, 82], ["len", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "max", "numpy.zeros", "range", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "len", "range", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long().cuda.append", "torch.Tensor().long().cuda.append", "torch.Tensor().long().cuda.append", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "label_encoder", "(", "self", ",", "label", ")", ":", "\n", "        ", "batch", "=", "len", "(", "label", ")", "\n", "\n", "length", "=", "[", "len", "(", "i", ")", "for", "i", "in", "label", "]", "\n", "length_tensor", "=", "torch", ".", "Tensor", "(", "length", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "max_length", "=", "max", "(", "length", ")", "\n", "input_tensor", "=", "np", ".", "zeros", "(", "(", "batch", ",", "max_length", ")", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "length", "[", "i", "]", "-", "1", ")", ":", "\n", "                ", "input_tensor", "[", "i", "]", "[", "j", "+", "1", "]", "=", "self", ".", "english_dict", "[", "label", "[", "i", "]", "[", "j", "]", "]", "\n", "\n", "", "", "text_gt", "=", "[", "]", "\n", "for", "i", "in", "label", ":", "\n", "            ", "for", "j", "in", "i", ":", "\n", "                ", "text_gt", ".", "append", "(", "self", ".", "english_dict", "[", "j", "]", ")", "\n", "", "", "text_gt", "=", "torch", ".", "Tensor", "(", "text_gt", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "input_tensor", "=", "torch", ".", "from_numpy", "(", "input_tensor", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "return", "length_tensor", ",", "input_tensor", ",", "text_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.TextFocusLoss.forward": [[84, 105], ["text_focus_loss.TextFocusLoss.mse_loss", "text_focus_loss.TextFocusLoss.label_encoder", "text_focus_loss.TextFocusLoss.transformer", "text_focus_loss.TextFocusLoss.transformer", "text_focus_loss.TextFocusLoss.l1_loss", "loss.weight_ce_loss.weight_cross_entropy", "text_focus_loss.to_gray_tensor", "text_focus_loss.to_gray_tensor", "text_focus_loss.str_filt"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.TextFocusLoss.label_encoder", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.weight_ce_loss.weight_cross_entropy", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.stroke_focus_loss.to_gray_tensor", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.stroke_focus_loss.to_gray_tensor", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.str_filt"], ["", "def", "forward", "(", "self", ",", "sr_img", ",", "hr_img", ",", "label", ")", ":", "\n", "\n", "        ", "mse_loss", "=", "self", ".", "mse_loss", "(", "sr_img", ",", "hr_img", ")", "\n", "\n", "if", "self", ".", "args", ".", "text_focus", ":", "\n", "            ", "label", "=", "[", "str_filt", "(", "i", ",", "'lower'", ")", "+", "'-'", "for", "i", "in", "label", "]", "\n", "length_tensor", ",", "input_tensor", ",", "text_gt", "=", "self", ".", "label_encoder", "(", "label", ")", "\n", "hr_pred", ",", "word_attention_map_gt", ",", "hr_correct_list", "=", "self", ".", "transformer", "(", "to_gray_tensor", "(", "hr_img", ")", ",", "length_tensor", ",", "\n", "input_tensor", ",", "test", "=", "False", ")", "\n", "sr_pred", ",", "word_attention_map_pred", ",", "sr_correct_list", "=", "self", ".", "transformer", "(", "to_gray_tensor", "(", "sr_img", ")", ",", "length_tensor", ",", "\n", "input_tensor", ",", "test", "=", "False", ")", "\n", "attention_loss", "=", "self", ".", "l1_loss", "(", "word_attention_map_gt", ",", "word_attention_map_pred", ")", "\n", "# recognition_loss = self.l1_loss(hr_pred, sr_pred)", "\n", "recognition_loss", "=", "weight_cross_entropy", "(", "sr_pred", ",", "text_gt", ")", "\n", "loss", "=", "mse_loss", "+", "attention_loss", "*", "10", "+", "recognition_loss", "*", "0.0005", "\n", "return", "loss", ",", "mse_loss", ",", "attention_loss", ",", "recognition_loss", "\n", "", "else", ":", "\n", "            ", "attention_loss", "=", "-", "1", "\n", "recognition_loss", "=", "-", "1", "\n", "loss", "=", "mse_loss", "\n", "return", "loss", ",", "mse_loss", ",", "attention_loss", ",", "recognition_loss", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.to_gray_tensor": [[16, 22], ["None"], "function", ["None"], ["def", "to_gray_tensor", "(", "tensor", ")", ":", "\n", "    ", "R", "=", "tensor", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "G", "=", "tensor", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "B", "=", "tensor", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", "\n", "tensor", "=", "0.299", "*", "R", "+", "0.587", "*", "G", "+", "0.114", "*", "B", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.text_focus_loss.str_filt": [[24, 38], ["str_.replace.lower", "str_.replace.lower", "str_.replace.replace"], "function", ["None"], ["", "def", "str_filt", "(", "str_", ",", "voc_type", ")", ":", "\n", "    ", "alpha_dict", "=", "{", "\n", "'digit'", ":", "string", ".", "digits", ",", "\n", "'lower'", ":", "string", ".", "digits", "+", "string", ".", "ascii_lowercase", ",", "\n", "'upper'", ":", "string", ".", "digits", "+", "string", ".", "ascii_letters", ",", "\n", "'all'", ":", "string", ".", "digits", "+", "string", ".", "ascii_letters", "+", "string", ".", "punctuation", "\n", "}", "\n", "if", "voc_type", "==", "'lower'", ":", "\n", "        ", "str_", "=", "str_", ".", "lower", "(", ")", "\n", "", "for", "char", "in", "str_", ":", "\n", "        ", "if", "char", "not", "in", "alpha_dict", "[", "voc_type", "]", ":", "\n", "            ", "str_", "=", "str_", ".", "replace", "(", "char", ",", "''", ")", "\n", "", "", "str_", "=", "str_", ".", "lower", "(", ")", "\n", "return", "str_", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.gradient_loss.GradientPriorLoss.__init__": [[11, 14], ["torch.Module.__init__", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", "GradientPriorLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "func", "=", "nn", ".", "L1Loss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.gradient_loss.GradientPriorLoss.forward": [[15, 19], ["gradient_loss.GradientPriorLoss.gradient_map", "gradient_loss.GradientPriorLoss.gradient_map", "gradient_loss.GradientPriorLoss.func"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.gradient_loss.GradientPriorLoss.gradient_map", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.gradient_loss.GradientPriorLoss.gradient_map"], ["", "def", "forward", "(", "self", ",", "out_images", ",", "target_images", ")", ":", "\n", "        ", "map_out", "=", "self", ".", "gradient_map", "(", "out_images", ")", "\n", "map_target", "=", "self", ".", "gradient_map", "(", "target_images", ")", "\n", "return", "self", ".", "func", "(", "map_out", ",", "map_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.gradient_loss.GradientPriorLoss.gradient_map": [[20, 29], ["x.size", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "gradient_map", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", ",", "channel", ",", "h_x", ",", "w_x", "=", "x", ".", "size", "(", ")", "\n", "r", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "1", ",", "0", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "\n", "l", "=", "F", ".", "pad", "(", "x", ",", "(", "1", ",", "0", ",", "0", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", ",", ":", "w_x", "]", "\n", "t", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "1", ",", "0", ")", ")", "[", ":", ",", ":", ",", ":", "h_x", ",", ":", "]", "\n", "b", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "1", ")", ")", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "\n", "xgrad", "=", "torch", ".", "pow", "(", "torch", ".", "pow", "(", "(", "r", "-", "l", ")", "*", "0.5", ",", "2", ")", "+", "torch", ".", "pow", "(", "(", "t", "-", "b", ")", "*", "0.5", ",", "2", ")", ",", "0.5", ")", "\n", "return", "xgrad", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.percptual_loss.GeneratorLoss.__init__": [[8, 19], ["torch.nn.Module.__init__", "torchvision.models.vgg.vgg16", "torch.nn.Sequential().eval", "torch.nn.Sequential().eval.parameters", "torch.nn.MSELoss", "percptual_loss.TVLoss", "torch.nn.Sequential", "list"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GeneratorLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "vgg", "=", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "\n", "loss_network", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg", ".", "features", ")", "[", ":", "31", "]", ")", ".", "eval", "(", ")", "\n", "for", "param", "in", "loss_network", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "loss_network", "=", "loss_network", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "tv_loss", "=", "TVLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.percptual_loss.GeneratorLoss.forward": [[20, 28], ["percptual_loss.GeneratorLoss.mse_loss", "percptual_loss.GeneratorLoss.mse_loss", "percptual_loss.GeneratorLoss.tv_loss", "percptual_loss.GeneratorLoss.loss_network", "percptual_loss.GeneratorLoss.loss_network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "out_images", ",", "target_images", ")", ":", "\n", "# Perception Loss", "\n", "        ", "perception_loss", "=", "self", ".", "mse_loss", "(", "self", ".", "loss_network", "(", "out_images", ")", ",", "self", ".", "loss_network", "(", "target_images", ")", ")", "\n", "# Image Loss", "\n", "image_loss", "=", "self", ".", "mse_loss", "(", "out_images", ",", "target_images", ")", "\n", "# # TV Loss", "\n", "tv_loss", "=", "self", ".", "tv_loss", "(", "out_images", ")", "\n", "return", "image_loss", "+", "0.006", "*", "perception_loss", "+", "2e-8", "*", "tv_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.percptual_loss.TVLoss.__init__": [[31, 34], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tv_loss_weight", "=", "1", ")", ":", "\n", "        ", "super", "(", "TVLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tv_loss_weight", "=", "tv_loss_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.percptual_loss.TVLoss.forward": [[35, 44], ["percptual_loss.TVLoss.tensor_size", "percptual_loss.TVLoss.tensor_size", "torch.pow().sum", "torch.pow().sum", "x.size", "x.size", "x.size", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.percptual_loss.TVLoss.tensor_size", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.percptual_loss.TVLoss.tensor_size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "h_x", "=", "x", ".", "size", "(", ")", "[", "2", "]", "\n", "w_x", "=", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "count_h", "=", "self", ".", "tensor_size", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", ")", "\n", "count_w", "=", "self", ".", "tensor_size", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", ")", "\n", "h_tv", "=", "torch", ".", "pow", "(", "(", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", "h_x", "-", "1", ",", ":", "]", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "w_tv", "=", "torch", ".", "pow", "(", "(", "x", "[", ":", ",", ":", ",", ":", ",", "1", ":", "]", "-", "x", "[", ":", ",", ":", ",", ":", ",", ":", "w_x", "-", "1", "]", ")", ",", "2", ")", ".", "sum", "(", ")", "\n", "return", "self", ".", "tv_loss_weight", "*", "2", "*", "(", "h_tv", "/", "count_h", "+", "w_tv", "/", "count_w", ")", "/", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.percptual_loss.TVLoss.tensor_size": [[45, 48], ["t.size", "t.size", "t.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "tensor_size", "(", "t", ")", ":", "\n", "        ", "return", "t", ".", "size", "(", ")", "[", "1", "]", "*", "t", ".", "size", "(", ")", "[", "2", "]", "*", "t", ".", "size", "(", ")", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.weight_ce_loss.load_confuse_matrix": [[10, 34], ["open", "pickle.load", "open.close", "numpy.ones", "numpy.ones", "numpy.concatenate", "numpy.concatenate", "torch.Tensor().cuda", "range", "range", "torch.Tensor", "max"], "function", ["None"], ["", "def", "load_confuse_matrix", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "'./dataset/mydata/confuse.pkl'", ",", "'rb'", ")", "\n", "data", "=", "pkl", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "number", "=", "data", "[", ":", "10", "]", "\n", "upper", "=", "data", "[", "10", ":", "36", "]", "\n", "lower", "=", "data", "[", "36", ":", "]", "\n", "end", "=", "np", ".", "ones", "(", "(", "1", ",", "62", ")", ")", "\n", "pad", "=", "np", ".", "ones", "(", "(", "63", ",", "1", ")", ")", "\n", "rearrange_data", "=", "np", ".", "concatenate", "(", "(", "end", ",", "number", ",", "lower", ",", "upper", ")", ",", "axis", "=", "0", ")", "\n", "rearrange_data", "=", "np", ".", "concatenate", "(", "(", "pad", ",", "rearrange_data", ")", ",", "axis", "=", "1", ")", "\n", "rearrange_data", "=", "1", "/", "rearrange_data", "\n", "rearrange_data", "[", "rearrange_data", "==", "np", ".", "inf", "]", "=", "1", "\n", "rearrange_data", "=", "torch", ".", "Tensor", "(", "rearrange_data", ")", ".", "cuda", "(", ")", "\n", "\n", "lower_alpha", "=", "'abcdefghijklmnopqrstuvwxyz'", "\n", "# upper_alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'", "\n", "for", "i", "in", "range", "(", "63", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "63", ")", ":", "\n", "            ", "if", "i", "!=", "j", "and", "standard_alphebet", "[", "j", "]", "in", "lower_alpha", ":", "\n", "                ", "rearrange_data", "[", "i", "]", "[", "j", "]", "=", "max", "(", "rearrange_data", "[", "i", "]", "[", "j", "]", ",", "rearrange_data", "[", "i", "]", "[", "j", "+", "26", "]", ")", "\n", "", "", "", "rearrange_data", "=", "rearrange_data", "[", ":", "37", ",", ":", "37", "]", "\n", "\n", "return", "rearrange_data", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.weight_ce_loss.weight_cross_entropy": [[36, 46], ["torch.exp", "range", "len", "torch.log", "torch.sum"], "function", ["None"], ["def", "weight_cross_entropy", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "global", "weight_table", "\n", "batch", "=", "gt", ".", "shape", "[", "0", "]", "\n", "weight", "=", "weight_table", "[", "gt", "]", "\n", "pred_exp", "=", "torch", ".", "exp", "(", "pred", ")", "\n", "pred_exp_weight", "=", "weight", "*", "pred_exp", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "        ", "loss", "-=", "torch", ".", "log", "(", "pred_exp_weight", "[", "i", "]", "[", "gt", "[", "i", "]", "]", "/", "torch", ".", "sum", "(", "pred_exp_weight", ",", "1", ")", "[", "i", "]", ")", "\n", "", "return", "loss", "/", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.MultiHeadedAttention.__init__": [[50, 60], ["torch.Module.__init__", "transformer.clones", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.clones"], ["        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.MultiHeadedAttention.forward": [[61, 80], ["query.size", "transformer.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.attention"], ["out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "!=", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "num_in", ",", "block", ",", "layers", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.ResNet.__init__": [[83, 118], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "transformer.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "transformer.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "transformer.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "transformer.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer"], ["self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer1_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "256", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer1_conv", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer1_bn", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "layer1_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer2_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "256", ",", "layers", "[", "1", "]", ")", "\n", "self", ".", "layer2_conv", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer2_bn", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "layer2_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer3_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "512", ",", "layers", "[", "2", "]", ")", "\n", "self", ".", "layer3_conv", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer3_bn", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "layer3_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer4_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "512", ",", "layers", "[", "3", "]", ")", "\n", "self", ".", "layer4_conv2", "=", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer4_conv2_bn", "=", "nn", ".", "BatchNorm2d", "(", "1024", ")", "\n", "self", ".", "layer4_conv2_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ")", ":", "\n", "\n", "        ", "if", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.ResNet._make_layer": [[119, 133], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ",", ")", "\n", "", "else", ":", "\n", "            ", "downsample", "=", "None", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "downsample", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "planes", ",", "planes", ",", "downsample", "=", "None", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.ResNet.forward": [[134, 169], ["transformer.ResNet.conv1", "transformer.ResNet.bn1", "transformer.ResNet.relu1", "transformer.ResNet.pool", "transformer.ResNet.conv2", "transformer.ResNet.bn2", "transformer.ResNet.relu2", "transformer.ResNet.layer1_pool", "transformer.ResNet.layer1", "transformer.ResNet.layer1_conv", "transformer.ResNet.layer1_bn", "transformer.ResNet.layer1_relu", "transformer.ResNet.layer2", "transformer.ResNet.layer2_conv", "transformer.ResNet.layer2_bn", "transformer.ResNet.layer2_relu", "transformer.ResNet.layer3", "transformer.ResNet.layer3_conv", "transformer.ResNet.layer3_bn", "transformer.ResNet.layer3_relu", "transformer.ResNet.layer4", "transformer.ResNet.layer4_conv2", "transformer.ResNet.layer4_conv2_bn", "transformer.ResNet.layer4_conv2_relu"], "methods", ["None"], ["x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "\n", "# x = self.layer1_pool(x)", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1_bn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1_relu", "(", "x", ")", "\n", "\n", "# x = self.layer2_pool(x)", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2_bn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2_relu", "(", "x", ")", "\n", "\n", "# x = self.layer3_pool(x)", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3_bn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3_relu", "(", "x", ")", "\n", "\n", "# x = self.layer4_pool(x)", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4_conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4_conv2_bn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4_conv2_relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n", "\n", "", "", "def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.Bottleneck.__init__": [[173, 181], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.Bottleneck.forward": [[182, 197], ["transformer.Bottleneck.conv1", "transformer.Bottleneck.bn1", "transformer.Bottleneck.relu", "transformer.Bottleneck.conv2", "transformer.Bottleneck.bn2", "transformer.Bottleneck.relu"], "methods", ["None"], ["pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "Variable", "(", "self", ".", "pe", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", ",", "\n", "requires_grad", "=", "False", ")", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "\n", "", "", "class", "MultiHeadedAttention", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ",", "compress_attention", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.PositionalEncoding.__init__": [[202, 215], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze.unsqueeze.unsqueeze", "transformer.PositionalEncoding.register_buffer", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["\n", "", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "align", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "query", ",", "key", ",", "value", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "]", "\n", "\n", "x", ",", "attention_map", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "align", "=", "align", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.PositionalEncoding.forward": [[216, 220], ["transformer.PositionalEncoding.dropout", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.size"], "methods", ["None"], [".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", ",", "attention_map", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.LayerNorm.__init__": [[224, 230], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["return", "torch", ".", "from_numpy", "(", "subsequent_mask", ")", "==", "0", "\n", "\n", "\n", "", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ",", "align", "=", "None", ")", ":", "\n", "    ", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.LayerNorm.forward": [[231, 235], ["x.mean", "x.std"], "methods", ["None"], ["/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.PositionwiseFeedForward.__init__": [[239, 244], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n", "\n", "", "class", "LayerNorm", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.PositionwiseFeedForward.forward": [[245, 247], ["transformer.PositionwiseFeedForward.w_2", "transformer.PositionwiseFeedForward.dropout", "torch.relu", "torch.relu", "torch.relu", "transformer.PositionwiseFeedForward.w_1"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "a", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.Generator.__init__": [[252, 256], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "self", ".", "a", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "b", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.Generator.forward": [[257, 260], ["transformer.Generator.proj"], "methods", ["None"], ["", "", "class", "PositionwiseFeedForward", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_ff", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ff", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.Embeddings.__init__": [[263, 267], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "w_2", "(", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.Embeddings.forward": [[268, 274], ["transformer.Embeddings.lut", "math.sqrt"], "methods", ["None"], ["", "", "class", "Generator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "d_model", ",", "vocab", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "d_model", ",", "vocab", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.Decoder.__init__": [[278, 289], ["torch.Module.__init__", "transformer.MultiHeadedAttention", "transformer.LayerNorm", "transformer.MultiHeadedAttention", "transformer.LayerNorm", "transformer.PositionwiseFeedForward", "transformer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["", "", "class", "Embeddings", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "d_model", ",", "vocab", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lut", "=", "nn", ".", "Embedding", "(", "vocab", ",", "d_model", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "embed", "=", "self", ".", "lut", "(", "x", ")", "*", "math", ".", "sqrt", "(", "self", ".", "d_model", ")", "\n", "return", "embed", "\n", "\n", "\n", "", "", "class", "Decoder", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.Decoder.forward": [[290, 305], ["subsequent_mask().cuda", "transformer.Decoder.mul_layernorm1", "conv_feature.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "transformer.Decoder.multihead", "transformer.Decoder.mul_layernorm2", "transformer.Decoder.mul_layernorm3", "transformer.subsequent_mask", "conv_feature.view().permute().contiguous.view().permute().contiguous.view().permute", "transformer.Decoder.pff", "transformer.Decoder.mask_multihead", "conv_feature.view().permute().contiguous.view().permute().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.subsequent_mask"], ["\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mask_multihead", "=", "MultiHeadedAttention", "(", "h", "=", "4", ",", "d_model", "=", "1024", ",", "dropout", "=", "0.1", ")", "\n", "self", ".", "mul_layernorm1", "=", "LayerNorm", "(", "features", "=", "1024", ")", "\n", "\n", "self", ".", "multihead", "=", "MultiHeadedAttention", "(", "h", "=", "4", ",", "d_model", "=", "1024", ",", "dropout", "=", "0.1", ",", "compress_attention", "=", "True", ")", "\n", "self", ".", "mul_layernorm2", "=", "LayerNorm", "(", "features", "=", "1024", ")", "\n", "\n", "self", ".", "pff", "=", "PositionwiseFeedForward", "(", "1024", ",", "2048", ")", "\n", "self", ".", "mul_layernorm3", "=", "LayerNorm", "(", "features", "=", "1024", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "text", ",", "conv_feature", ")", ":", "\n", "        ", "text_max_length", "=", "text", ".", "shape", "[", "1", "]", "\n", "mask", "=", "subsequent_mask", "(", "text_max_length", ")", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.BasicBlock.__init__": [[308, 316], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["result", "=", "self", ".", "mul_layernorm1", "(", "result", "+", "self", ".", "mask_multihead", "(", "result", ",", "result", ",", "result", ",", "mask", "=", "mask", ")", "[", "0", "]", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "conv_feature", ".", "shape", "\n", "conv_feature", "=", "conv_feature", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "word_image_align", ",", "attention_map", "=", "self", ".", "multihead", "(", "result", ",", "conv_feature", ",", "conv_feature", ",", "mask", "=", "None", ")", "\n", "result", "=", "self", ".", "mul_layernorm2", "(", "result", "+", "word_image_align", ")", "\n", "\n", "result", "=", "self", ".", "mul_layernorm3", "(", "result", "+", "self", ".", "pff", "(", "result", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.BasicBlock.forward": [[317, 335], ["transformer.BasicBlock.conv1", "transformer.BasicBlock.bn1", "transformer.BasicBlock.relu", "transformer.BasicBlock.conv2", "transformer.BasicBlock.bn2", "transformer.BasicBlock.relu", "transformer.BasicBlock.downsample"], "methods", ["None"], ["return", "result", ",", "attention_map", "\n", "\n", "\n", "", "", "class", "Transformer", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "mode", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "word_n_class", "=", "len", "(", "alphabet", ")", "\n", "self", ".", "embedding_word", "=", "Embeddings", "(", "512", ",", "self", ".", "word_n_class", ")", "\n", "self", ".", "pe", "=", "PositionalEncoding", "(", "d_model", "=", "512", ",", "dropout", "=", "0.1", ",", "max_len", "=", "7000", ")", "\n", "\n", "self", ".", "encoder", "=", "ResNet", "(", "num_in", "=", "3", ",", "block", "=", "BasicBlock", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", ")", "\n", "self", ".", "generator_word", "=", "Generator", "(", "1024", ",", "self", ".", "word_n_class", ")", "\n", "self", ".", "attribute", "=", "None", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.Encoder.__init__": [[339, 342], ["torch.Module.__init__", "transformer.ResNet"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["", "", "", "def", "forward", "(", "self", ",", "image", ",", "text_length", ",", "text_input", ",", "conv_feature", "=", "None", ",", "test", "=", "False", ")", ":", "\n", "\n", "        ", "if", "conv_feature", "is", "None", ":", "\n", "            ", "conv_feature", "=", "self", ".", "encoder", "(", "image", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.Encoder.forward": [[343, 346], ["transformer.Encoder.cnn"], "methods", ["None"], ["\n", "", "if", "text_length", "is", "None", ":", "\n", "            ", "return", "{", "\n", "'conv'", ":", "conv_feature", ",", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.Transformer.__init__": [[350, 364], ["torch.Module.__init__", "transformer.get_alphabet_len", "transformer.Embeddings", "transformer.PositionalEncoding", "transformer.Encoder", "transformer.Decoder", "transformer.Generator", "transformer.Transformer.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.get_alphabet_len"], ["postion_embedding", "=", "self", ".", "pe", "(", "torch", ".", "zeros", "(", "text_embedding", ".", "shape", ")", ".", "cuda", "(", ")", ")", ".", "cuda", "(", ")", "\n", "text_input_with_pe", "=", "torch", ".", "cat", "(", "[", "text_embedding", ",", "postion_embedding", "]", ",", "2", ")", "\n", "batch", ",", "seq_len", ",", "_", "=", "text_input_with_pe", ".", "shape", "\n", "text_input_with_pe", ",", "attention_map", "=", "self", ".", "decoder", "(", "text_input_with_pe", ",", "conv_feature", ")", "\n", "word_decoder_result", "=", "self", ".", "generator_word", "(", "text_input_with_pe", ")", "\n", "\n", "if", "test", ":", "\n", "            ", "return", "{", "\n", "'pred'", ":", "word_decoder_result", ",", "\n", "'map'", ":", "attention_map", ",", "\n", "'conv'", ":", "conv_feature", ",", "\n", "}", "\n", "\n", "", "else", ":", "\n", "            ", "total_length", "=", "torch", ".", "sum", "(", "text_length", ")", ".", "data", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.Transformer.forward": [[365, 390], ["transformer.Transformer.encoder", "transformer.Transformer.embedding_word", "transformer.Transformer.pe().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transformer.Transformer.decoder", "transformer.Transformer.generator_word", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "enumerate", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "transformer.Transformer.pe", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "transformer.get_alphabet_len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.get_alphabet_len"], ["probs_res", "=", "torch", ".", "zeros", "(", "total_length", ",", "self", ".", "word_n_class", ")", ".", "type_as", "(", "word_decoder_result", ".", "data", ")", "\n", "\n", "start", "=", "0", "\n", "for", "index", ",", "length", "in", "enumerate", "(", "text_length", ")", ":", "\n", "                ", "length", "=", "length", ".", "data", "\n", "probs_res", "[", "start", ":", "start", "+", "length", ",", ":", "]", "=", "word_decoder_result", "[", "index", ",", "0", ":", "0", "+", "length", ",", ":", "]", "\n", "start", "=", "start", "+", "length", "\n", "\n", "", "return", "{", "\n", "'pred'", ":", "probs_res", ",", "\n", "'map'", ":", "attention_map", ",", "\n", "'conv'", ":", "conv_feature", ",", "\n", "}", "\n", "\n", "\n", "", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "net", "=", "ResNet", "(", "num_in", "=", "3", ",", "block", "=", "BasicBlock", ",", "layers", "=", "[", "1", ",", "2", ",", "5", ",", "3", "]", ")", ".", "cuda", "(", ")", "\n", "image", "=", "torch", ".", "Tensor", "(", "8", ",", "3", ",", "64", ",", "64", ")", ".", "cuda", "(", ")", "\n", "result", "=", "net", "(", "image", ")", "\n", "print", "(", "result", ".", "shape", ")", "\n", "pass", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.get_alphabet_len": [[10, 12], ["len"], "function", ["None"], ["from", "torch", ".", "autograd", "import", "Variable", "\n", "import", "torchvision", ".", "models", "as", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.subsequent_mask": [[14, 19], ["numpy.triu().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.triu", "numpy.ones"], "function", ["None"], ["from", "util", "import", "get_alphabet", "\n", "\n", "alphabet", "=", "get_alphabet", "(", "config", "[", "'mode'", "]", ")", "\n", "\n", "\n", "class", "Bottleneck", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.clones": [[21, 24], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "input_dim", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "input_dim", ")", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer.attention": [[26, 47], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "key.transpose", "float"], "function", ["None"], ["\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "input_dim", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "input_dim", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "# out = self.se(out)", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "BasicBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.stroke_focus_loss.StrokeFocusLoss.__init__": [[21, 41], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "range", "open().readlines", "stroke_focus_loss.StrokeFocusLoss.build_up_transformer", "len", "line.strip.strip.strip", "line.strip.strip.split", "open"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.stroke_focus_loss.StrokeFocusLoss.build_up_transformer"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "StrokeFocusLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "self", ".", "ce_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "l1_loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "english_stroke_alphabet", "=", "'0123456789'", "\n", "self", ".", "english_stroke_dict", "=", "{", "}", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "english_stroke_alphabet", ")", ")", ":", "\n", "            ", "self", ".", "english_stroke_dict", "[", "self", ".", "english_stroke_alphabet", "[", "index", "]", "]", "=", "index", "\n", "\n", "", "stroke_decompose_lines", "=", "open", "(", "'./dataset/mydata/english_decomposition.txt'", ",", "\n", "'r'", ")", ".", "readlines", "(", ")", "\n", "self", ".", "dic", "=", "{", "}", "\n", "for", "line", "in", "stroke_decompose_lines", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "character", ",", "sequence", "=", "line", ".", "split", "(", ")", "\n", "self", ".", "dic", "[", "character", "]", "=", "sequence", "\n", "\n", "", "self", ".", "build_up_transformer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.stroke_focus_loss.StrokeFocusLoss.build_up_transformer": [[42, 48], ["loss.transformer_english_decomposition.Transformer().cuda", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel.load_state_dict", "torch.DataParallel.eval", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "loss.transformer_english_decomposition.Transformer"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.eval"], ["", "def", "build_up_transformer", "(", "self", ")", ":", "\n", "        ", "transformer", "=", "Transformer", "(", ")", ".", "cuda", "(", ")", "\n", "transformer", "=", "nn", ".", "DataParallel", "(", "transformer", ")", "\n", "transformer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./dataset/mydata/pretrain_transformer_stroke_decomposition.pth'", ")", ")", "\n", "transformer", ".", "eval", "(", ")", "\n", "self", ".", "transformer", "=", "transformer", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.stroke_focus_loss.StrokeFocusLoss.label_stroke_encoder": [[49, 81], ["len", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "max", "numpy.zeros", "range", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.Tensor().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "new_label_list.append", "len", "range", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long().cuda.append", "torch.Tensor().long().cuda.append", "torch.Tensor().long().cuda.append", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "label_stroke_encoder", "(", "self", ",", "label", ")", ":", "\n", "        ", "new_label_list", "=", "[", "]", "\n", "for", "one_label", "in", "label", ":", "\n", "            ", "stroke_sequence", "=", "''", "\n", "for", "character", "in", "one_label", ":", "\n", "                ", "if", "character", "not", "in", "self", ".", "dic", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "stroke_sequence", "+=", "self", ".", "dic", "[", "character", "]", "\n", "", "", "stroke_sequence", "+=", "'0'", "\n", "new_label_list", ".", "append", "(", "stroke_sequence", ")", "\n", "", "label", "=", "new_label_list", "\n", "\n", "batch", "=", "len", "(", "label", ")", "\n", "\n", "length", "=", "[", "len", "(", "i", ")", "for", "i", "in", "label", "]", "\n", "length_tensor", "=", "torch", ".", "Tensor", "(", "length", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "max_length", "=", "max", "(", "length", ")", "\n", "input_tensor", "=", "np", ".", "zeros", "(", "(", "batch", ",", "max_length", ")", ")", "\n", "for", "i", "in", "range", "(", "batch", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "length", "[", "i", "]", "-", "1", ")", ":", "\n", "                ", "input_tensor", "[", "i", "]", "[", "j", "+", "1", "]", "=", "self", ".", "english_stroke_dict", "[", "label", "[", "i", "]", "[", "j", "]", "]", "\n", "\n", "", "", "text_gt", "=", "[", "]", "\n", "for", "i", "in", "label", ":", "\n", "            ", "for", "j", "in", "i", ":", "\n", "                ", "text_gt", ".", "append", "(", "self", ".", "english_stroke_dict", "[", "j", "]", ")", "\n", "", "", "text_gt", "=", "torch", ".", "Tensor", "(", "text_gt", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "input_tensor", "=", "torch", ".", "from_numpy", "(", "input_tensor", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "return", "length_tensor", ",", "input_tensor", ",", "text_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.stroke_focus_loss.StrokeFocusLoss.forward": [[83, 124], ["time.time", "stroke_focus_loss.StrokeFocusLoss.mse_loss", "time.time", "stroke_focus_loss.StrokeFocusLoss.label_stroke_encoder", "stroke_focus_loss.StrokeFocusLoss.transformer", "stroke_focus_loss.StrokeFocusLoss.transformer", "range", "time.time", "stroke_focus_loss.to_gray_tensor", "stroke_focus_loss.to_gray_tensor", "len", "stroke_focus_loss.StrokeFocusLoss.l1_loss", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.stroke_focus_loss.StrokeFocusLoss.label_stroke_encoder", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.stroke_focus_loss.to_gray_tensor", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.stroke_focus_loss.to_gray_tensor"], ["", "def", "forward", "(", "self", ",", "sr_img", ",", "hr_img", ",", "label", ")", ":", "\n", "        ", "time0", "=", "time", ".", "time", "(", ")", "\n", "mse_loss", "=", "self", ".", "mse_loss", "(", "sr_img", ",", "hr_img", ")", "\n", "\n", "if", "self", ".", "args", ".", "text_focus", ":", "\n", "            ", "time1", "=", "time", ".", "time", "(", ")", "\n", "# label = [str_filt(i, 'lower')+'-' for i in label]", "\n", "length_tensor", ",", "input_tensor", ",", "text_gt", "=", "self", ".", "label_stroke_encoder", "(", "label", ")", "\n", "hr_pred", ",", "word_attention_map_gt", ",", "hr_correct_list", "=", "self", ".", "transformer", "(", "to_gray_tensor", "(", "hr_img", ")", ",", "length_tensor", ",", "\n", "input_tensor", ",", "test", "=", "False", ")", "\n", "sr_pred", ",", "word_attention_map_pred", ",", "sr_correct_list", "=", "self", ".", "transformer", "(", "to_gray_tensor", "(", "sr_img", ")", ",", "length_tensor", ",", "\n", "input_tensor", ",", "test", "=", "False", ")", "\n", "\n", "# select correct", "\n", "correct_flag", "=", "False", "\n", "correct_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "hr_correct_list", ")", ")", ":", "\n", "                ", "if", "hr_correct_list", "[", "i", "]", "and", "sr_correct_list", "[", "i", "]", ":", "\n", "                    ", "correct_list", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "                    ", "correct_list", ".", "append", "(", "False", ")", "\n", "\n", "", "", "if", "len", "(", "correct_list", ")", "==", "0", "and", "correct_flag", ":", "\n", "                ", "attention_loss", "=", "0", "\n", "", "else", ":", "\n", "                ", "if", "correct_flag", ":", "\n", "                    ", "correct_list", "=", "torch", ".", "Tensor", "(", "correct_list", ")", "\n", "word_attention_map_gt", "=", "word_attention_map_gt", "[", "correct_list", "==", "True", "]", "\n", "word_attention_map_pred", "=", "word_attention_map_pred", "[", "correct_list", "==", "True", "]", "\n", "\n", "", "attention_loss", "=", "self", ".", "l1_loss", "(", "word_attention_map_gt", ",", "word_attention_map_pred", ")", "\n", "", "recognition_loss", "=", "-", "1", "\n", "time2", "=", "time", ".", "time", "(", ")", "\n", "# print('loss_time: ',time1-time0, time2-time1)", "\n", "loss", "=", "mse_loss", "+", "attention_loss", "*", "self", ".", "args", ".", "stroke_lambda", "\n", "return", "loss", ",", "mse_loss", ",", "attention_loss", ",", "recognition_loss", "\n", "", "else", ":", "\n", "            ", "attention_loss", "=", "-", "1", "\n", "recognition_loss", "=", "-", "1", "\n", "loss", "=", "mse_loss", "\n", "return", "loss", ",", "mse_loss", ",", "attention_loss", ",", "recognition_loss", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.stroke_focus_loss.to_gray_tensor": [[12, 18], ["None"], "function", ["None"], ["def", "to_gray_tensor", "(", "tensor", ")", ":", "\n", "    ", "R", "=", "tensor", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "G", "=", "tensor", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "B", "=", "tensor", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", "\n", "tensor", "=", "0.299", "*", "R", "+", "0.587", "*", "G", "+", "0.114", "*", "B", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.MultiHeadedAttention.__init__": [[42, 52], ["torch.Module.__init__", "transformer_english_decomposition.clones", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "dropout", "=", "0.1", ",", "compress_attention", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "compress_attention", "=", "compress_attention", "\n", "self", ".", "compress_attention_linear", "=", "nn", ".", "Linear", "(", "h", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.MultiHeadedAttention.forward": [[53, 69], ["query.size", "transformer_english_decomposition.attention", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.attention"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "attention_map", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "\n", "query", ",", "key", ",", "value", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "]", "\n", "\n", "x", ",", "attention_map", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "attention_map", "=", "attention_map", ")", "\n", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", ",", "attention_map", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet.__init__": [[73, 108], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "transformer_english_decomposition.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "transformer_english_decomposition.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "transformer_english_decomposition.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "transformer_english_decomposition.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_in", ",", "block", ",", "layers", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_in", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer1_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "256", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer1_conv", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer1_bn", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "layer1_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer2_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "256", ",", "layers", "[", "1", "]", ")", "\n", "self", ".", "layer2_conv", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer2_bn", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "layer2_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer3_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "512", ",", "layers", "[", "2", "]", ")", "\n", "self", ".", "layer3_conv", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer3_bn", "=", "nn", ".", "BatchNorm2d", "(", "512", ")", "\n", "self", ".", "layer3_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer4_pool", "=", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "512", ",", "layers", "[", "3", "]", ")", "\n", "self", ".", "layer4_conv2", "=", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "layer4_conv2_bn", "=", "nn", ".", "BatchNorm2d", "(", "1024", ")", "\n", "self", ".", "layer4_conv2_relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet._make_layer": [[109, 123], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "inplanes", ",", "planes", ",", "blocks", ")", ":", "\n", "\n", "        ", "if", "inplanes", "!=", "planes", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", ",", ")", "\n", "", "else", ":", "\n", "            ", "downsample", "=", "None", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "inplanes", ",", "planes", ",", "downsample", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "planes", ",", "planes", ",", "downsample", "=", "None", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.ResNet.forward": [[124, 159], ["transformer_english_decomposition.ResNet.conv1", "transformer_english_decomposition.ResNet.bn1", "transformer_english_decomposition.ResNet.relu1", "transformer_english_decomposition.ResNet.pool", "transformer_english_decomposition.ResNet.conv2", "transformer_english_decomposition.ResNet.bn2", "transformer_english_decomposition.ResNet.relu2", "transformer_english_decomposition.ResNet.layer1_pool", "transformer_english_decomposition.ResNet.layer1", "transformer_english_decomposition.ResNet.layer1_conv", "transformer_english_decomposition.ResNet.layer1_bn", "transformer_english_decomposition.ResNet.layer1_relu", "transformer_english_decomposition.ResNet.layer2", "transformer_english_decomposition.ResNet.layer2_conv", "transformer_english_decomposition.ResNet.layer2_bn", "transformer_english_decomposition.ResNet.layer2_relu", "transformer_english_decomposition.ResNet.layer3", "transformer_english_decomposition.ResNet.layer3_conv", "transformer_english_decomposition.ResNet.layer3_bn", "transformer_english_decomposition.ResNet.layer3_relu", "transformer_english_decomposition.ResNet.layer4", "transformer_english_decomposition.ResNet.layer4_conv2", "transformer_english_decomposition.ResNet.layer4_conv2_bn", "transformer_english_decomposition.ResNet.layer4_conv2_relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1_bn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1_relu", "(", "x", ")", "\n", "\n", "# x = self.layer2_pool(x)", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2_bn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2_relu", "(", "x", ")", "\n", "\n", "# x = self.layer3_pool(x)", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3_bn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3_relu", "(", "x", ")", "\n", "\n", "# x = self.layer4_pool(x)", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4_conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4_conv2_bn", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4_conv2_relu", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Bottleneck.__init__": [[163, 171], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "input_dim", ",", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "input_dim", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "input_dim", ",", "input_dim", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "input_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Bottleneck.forward": [[172, 187], ["transformer_english_decomposition.Bottleneck.conv1", "transformer_english_decomposition.Bottleneck.bn1", "transformer_english_decomposition.Bottleneck.relu", "transformer_english_decomposition.Bottleneck.conv2", "transformer_english_decomposition.Bottleneck.bn2", "transformer_english_decomposition.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "# out = self.se(out)", "\n", "\n", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.PositionalEncoding.__init__": [[192, 205], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.arange().unsqueeze().float", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "pe.unsqueeze.unsqueeze.unsqueeze", "transformer_english_decomposition.PositionalEncoding.register_buffer", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange().float", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "math.log"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "dropout", ",", "max_len", "=", "5000", ")", ":", "\n", "        ", "super", "(", "PositionalEncoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "# Compute the positional encodings once in log space.", "\n", "pe", "=", "torch", ".", "zeros", "(", "max_len", ",", "d_model", ")", "\n", "position", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0", ",", "d_model", ",", "2", ")", ".", "float", "(", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pe", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "sin", "(", "position", "*", "div_term", ")", "\n", "pe", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "cos", "(", "position", "*", "div_term", ")", "\n", "pe", "=", "pe", ".", "unsqueeze", "(", "0", ")", "\n", "self", ".", "register_buffer", "(", "'pe'", ",", "pe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.PositionalEncoding.forward": [[206, 210], ["transformer_english_decomposition.PositionalEncoding.dropout", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "+", "Variable", "(", "self", ".", "pe", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", ",", "\n", "requires_grad", "=", "False", ")", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.LayerNorm.__init__": [[215, 221], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# print(features)", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.LayerNorm.forward": [[222, 226], ["x.mean", "x.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "self", ".", "a_2", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "b_2", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.PositionwiseFeedForward.__init__": [[231, 236], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_ff", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ff", ")", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_ff", ",", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.PositionwiseFeedForward.forward": [[237, 239], ["transformer_english_decomposition.PositionwiseFeedForward.w_2", "transformer_english_decomposition.PositionwiseFeedForward.dropout", "torch.relu", "torch.relu", "torch.relu", "transformer_english_decomposition.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "w_2", "(", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Generator.__init__": [[244, 248], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "vocab", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "d_model", ",", "vocab", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Generator.forward": [[249, 252], ["transformer_english_decomposition.Generator.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# return F.softmax(self.proj(x))", "\n", "        ", "return", "self", ".", "proj", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Embeddings.__init__": [[255, 259], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "vocab", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lut", "=", "nn", ".", "Embedding", "(", "vocab", ",", "d_model", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Embeddings.forward": [[260, 266], ["transformer_english_decomposition.Embeddings.lut", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "embed", "=", "self", ".", "lut", "(", "x", ")", "*", "math", ".", "sqrt", "(", "self", ".", "d_model", ")", "\n", "# print(\"embed\",embed)", "\n", "# embed = self.lut(x)", "\n", "# print(embed.requires_grad)", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Decoder.__init__": [[270, 281], ["torch.Module.__init__", "transformer_english_decomposition.MultiHeadedAttention", "transformer_english_decomposition.LayerNorm", "transformer_english_decomposition.MultiHeadedAttention", "transformer_english_decomposition.LayerNorm", "transformer_english_decomposition.PositionwiseFeedForward", "transformer_english_decomposition.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "mask_multihead", "=", "MultiHeadedAttention", "(", "h", "=", "16", ",", "d_model", "=", "1024", ",", "dropout", "=", "0.1", ")", "\n", "self", ".", "mul_layernorm1", "=", "LayerNorm", "(", "features", "=", "1024", ")", "\n", "\n", "self", ".", "multihead", "=", "MultiHeadedAttention", "(", "h", "=", "16", ",", "d_model", "=", "1024", ",", "dropout", "=", "0.1", ")", "\n", "self", ".", "mul_layernorm2", "=", "LayerNorm", "(", "features", "=", "1024", ")", "\n", "\n", "self", ".", "pff", "=", "PositionwiseFeedForward", "(", "1024", ",", "2048", ")", "\n", "self", ".", "mul_layernorm3", "=", "LayerNorm", "(", "features", "=", "1024", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Decoder.forward": [[282, 298], ["subsequent_mask().cuda", "transformer_english_decomposition.Decoder.mul_layernorm1", "conv_feature.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "transformer_english_decomposition.Decoder.multihead", "transformer_english_decomposition.Decoder.mul_layernorm2", "transformer_english_decomposition.Decoder.mul_layernorm3", "transformer_english_decomposition.subsequent_mask", "conv_feature.view().permute().contiguous.view().permute().contiguous.view().permute", "transformer_english_decomposition.Decoder.pff", "transformer_english_decomposition.Decoder.mask_multihead", "conv_feature.view().permute().contiguous.view().permute().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.subsequent_mask"], ["", "def", "forward", "(", "self", ",", "text", ",", "conv_feature", ",", "attention_map", "=", "None", ")", ":", "\n", "        ", "text_max_length", "=", "text", ".", "shape", "[", "1", "]", "\n", "mask", "=", "subsequent_mask", "(", "text_max_length", ")", ".", "cuda", "(", ")", "\n", "\n", "result", "=", "text", "\n", "result", "=", "self", ".", "mul_layernorm1", "(", "result", "+", "self", ".", "mask_multihead", "(", "result", ",", "result", ",", "result", ",", "mask", "=", "mask", ")", "[", "0", "]", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "conv_feature", ".", "shape", "\n", "conv_feature", "=", "conv_feature", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "word_image_align", ",", "attention_map", "=", "self", ".", "multihead", "(", "result", ",", "conv_feature", ",", "conv_feature", ",", "mask", "=", "None", ",", "attention_map", "=", "attention_map", ")", "\n", "result", "=", "self", ".", "mul_layernorm2", "(", "result", "+", "word_image_align", ")", "\n", "\n", "result", "=", "self", ".", "mul_layernorm3", "(", "result", "+", "self", ".", "pff", "(", "result", ")", ")", "\n", "\n", "return", "result", ",", "attention_map", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.BasicBlock.__init__": [[302, 310], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "downsample", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "# self.se = SELayer(planes, 16)", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.BasicBlock.forward": [[312, 330], ["transformer_english_decomposition.BasicBlock.conv1", "transformer_english_decomposition.BasicBlock.bn1", "transformer_english_decomposition.BasicBlock.relu", "transformer_english_decomposition.BasicBlock.conv2", "transformer_english_decomposition.BasicBlock.bn2", "transformer_english_decomposition.BasicBlock.relu", "transformer_english_decomposition.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "# out = self.se(out)", "\n", "\n", "if", "self", ".", "downsample", "!=", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Encoder.__init__": [[334, 337], ["torch.Module.__init__", "transformer_english_decomposition.ResNet"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cnn", "=", "ResNet", "(", "num_in", "=", "1", ",", "block", "=", "BasicBlock", ",", "layers", "=", "[", "1", ",", "2", ",", "5", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Encoder.forward": [[338, 341], ["transformer_english_decomposition.Encoder.cnn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "conv_result", "=", "self", ".", "cnn", "(", "input", ")", "\n", "return", "conv_result", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__": [[345, 360], ["torch.Module.__init__", "transformer_english_decomposition.get_alphabet_len", "transformer_english_decomposition.Embeddings", "transformer_english_decomposition.PositionalEncoding", "transformer_english_decomposition.Encoder", "transformer_english_decomposition.Decoder", "transformer_english_decomposition.Generator", "transformer_english_decomposition.Transformer.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.__init__", "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.get_alphabet_len"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "word_n_class", "=", "get_alphabet_len", "(", ")", "\n", "self", ".", "embedding_word_with_upperword", "=", "Embeddings", "(", "512", ",", "word_n_class", ")", "\n", "self", ".", "pe", "=", "PositionalEncoding", "(", "d_model", "=", "512", ",", "dropout", "=", "0.1", ",", "max_len", "=", "5000", ")", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", ")", "\n", "self", ".", "generator_word_with_upperword", "=", "Generator", "(", "1024", ",", "word_n_class", ")", "\n", "\n", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.Transformer.forward": [[361, 399], ["transformer_english_decomposition.Transformer.encoder", "transformer_english_decomposition.Transformer.embedding_word_with_upperword", "transformer_english_decomposition.Transformer.pe().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transformer_english_decomposition.Transformer.decoder", "transformer_english_decomposition.Transformer.generator_word_with_upperword", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "enumerate", "transformer_english_decomposition.Transformer.pe", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "correct_list.append", "correct_list.append", "transformer_english_decomposition.get_alphabet_len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "probs_res[].max"], "methods", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.get_alphabet_len"], ["", "", "", "def", "forward", "(", "self", ",", "image", ",", "text_length", ",", "text_input", ",", "test", "=", "False", ",", "attention_map", "=", "None", ")", ":", "\n", "\n", "        ", "if", "image", ".", "shape", "[", "1", "]", "==", "4", ":", "\n", "            ", "R", "=", "image", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "G", "=", "image", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "\n", "B", "=", "image", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", "\n", "image", "=", "0.299", "*", "R", "+", "0.587", "*", "G", "+", "0.114", "*", "B", "\n", "\n", "", "conv_feature", "=", "self", ".", "encoder", "(", "image", ")", "# batch, 1024, 8, 32", "\n", "text_embedding", "=", "self", ".", "embedding_word_with_upperword", "(", "text_input", ")", "# batch, text_max_length, 512", "\n", "postion_embedding", "=", "self", ".", "pe", "(", "torch", ".", "zeros", "(", "text_embedding", ".", "shape", ")", ".", "cuda", "(", ")", ")", ".", "cuda", "(", ")", "# batch, text_max_length, 512", "\n", "text_input_with_pe", "=", "torch", ".", "cat", "(", "[", "text_embedding", ",", "postion_embedding", "]", ",", "2", ")", "# batch, text_max_length, 1024", "\n", "batch", ",", "seq_len", ",", "_", "=", "text_input_with_pe", ".", "shape", "\n", "\n", "text_input_with_pe", ",", "word_attention_map", "=", "self", ".", "decoder", "(", "text_input_with_pe", ",", "conv_feature", ")", "\n", "\n", "word_decoder_result", "=", "self", ".", "generator_word_with_upperword", "(", "text_input_with_pe", ")", "\n", "\n", "correct_list", "=", "[", "]", "\n", "\n", "if", "not", "test", ":", "\n", "\n", "            ", "total_length", "=", "torch", ".", "sum", "(", "text_length", ")", ".", "data", "\n", "probs_res", "=", "torch", ".", "zeros", "(", "total_length", ",", "get_alphabet_len", "(", ")", ")", ".", "type_as", "(", "word_decoder_result", ".", "data", ")", "\n", "start", "=", "0", "\n", "for", "index", ",", "length", "in", "enumerate", "(", "text_length", ")", ":", "\n", "                ", "length", "=", "length", ".", "data", "\n", "probs_res", "[", "start", ":", "start", "+", "length", ",", ":", "]", "=", "word_decoder_result", "[", "index", ",", "0", ":", "0", "+", "length", ",", ":", "]", "\n", "if", "(", "probs_res", "[", "start", ":", "start", "+", "length", ",", ":", "]", ".", "max", "(", "1", ")", "[", "1", "]", "[", ":", "-", "1", "]", "==", "text_input", "[", "index", "]", "[", "1", ":", "length", "]", ")", ".", "all", "(", ")", ":", "\n", "                    ", "correct_list", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "                    ", "correct_list", ".", "append", "(", "False", ")", "\n", "", "start", "=", "start", "+", "length", "\n", "\n", "# return probs_res, word_attention_map, correct_list", "\n", "", "return", "probs_res", ",", "word_attention_map", ",", "correct_list", "# there is a bug", "\n", "", "else", ":", "\n", "            ", "return", "word_decoder_result", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.get_alphabet_len": [[10, 12], ["len"], "function", ["None"], ["def", "get_alphabet_len", "(", ")", ":", "\n", "    ", "return", "len", "(", "alphabet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.subsequent_mask": [[14, 18], ["numpy.triu().astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.triu", "numpy.ones"], "function", ["None"], ["", "def", "subsequent_mask", "(", "size", ")", ":", "\n", "    ", "attn_shape", "=", "(", "1", ",", "size", ",", "size", ")", "\n", "subsequent_mask", "=", "np", ".", "triu", "(", "np", ".", "ones", "(", "attn_shape", ")", ",", "k", "=", "1", ")", ".", "astype", "(", "'uint8'", ")", "\n", "return", "torch", ".", "from_numpy", "(", "subsequent_mask", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.clones": [[20, 22], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["", "def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.loss.transformer_english_decomposition.attention": [[24, 39], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "dropout", "torch.matmul", "torch.matmul", "torch.matmul", "key.transpose", "float"], "function", ["None"], ["", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ",", "attention_map", "=", "None", ")", ":", "\n", "    ", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "dropout", "is", "not", "None", ":", "\n", "        ", "p_attn", "=", "dropout", "(", "p_attn", ")", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.fudanvi_fudanocr.text-gestalt.main.main": [[8, 16], ["interfaces.super_resolution.TextSR", "interfaces.super_resolution.TextSR.test", "interfaces.super_resolution.TextSR.demo", "interfaces.super_resolution.TextSR.train"], "function", ["home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.test", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.demo", "home.repos.pwc.inspect_result.fudanvi_fudanocr.interfaces.super_resolution.TextSR.train"], ["def", "main", "(", "config", ",", "args", ")", ":", "\n", "    ", "Mission", "=", "TextSR", "(", "config", ",", "args", ")", "\n", "if", "args", ".", "test", ":", "\n", "        ", "Mission", ".", "test", "(", ")", "\n", "", "elif", "args", ".", "demo", ":", "\n", "        ", "Mission", ".", "demo", "(", ")", "\n", "", "else", ":", "\n", "        ", "Mission", ".", "train", "(", ")", "\n", "\n"]]}