{"home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_sunrgbd.get_args": [[14, 38], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "get_args", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\"--batch_sz\"", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_path\"", ",", "type", "=", "str", ",", "default", "=", "\"./datasets/sunrgbd/\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--LOAD_SIZE\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--FINE_SIZE\"", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--gradient_accumulation_steps\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--hidden\"", ",", "nargs", "=", "\"*\"", ",", "type", "=", "int", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--hidden_sz\"", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_embed_pool_type\"", ",", "type", "=", "str", ",", "default", "=", "\"avg\"", ",", "choices", "=", "[", "\"max\"", ",", "\"avg\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_hidden_sz\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--include_bn\"", ",", "type", "=", "int", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_factor\"", ",", "type", "=", "float", ",", "default", "=", "0.3", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_patience\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_epochs\"", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_workers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "type", "=", "str", ",", "default", "=", "\"ReleasedVersion\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_image_embeds\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--patience\"", ",", "type", "=", "int", ",", "default", "=", "30", ")", "\n", "parser", ".", "add_argument", "(", "\"--savedir\"", ",", "type", "=", "str", ",", "default", "=", "\"./savepath/TMC/sunrgbd\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_classes\"", ",", "type", "=", "int", ",", "default", "=", "19", ")", "\n", "parser", ".", "add_argument", "(", "\"--annealing_epoch\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_sunrgbd.get_optimizer": [[40, 43], ["torch.Adam", "model.parameters"], "function", ["None"], ["", "def", "get_optimizer", "(", "model", ",", "args", ")", ":", "\n", "    ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-5", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_sunrgbd.get_scheduler": [[45, 48], ["torch.lr_scheduler.ReduceLROnPlateau"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "args", ")", ":", "\n", "    ", "return", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "\"max\"", ",", "patience", "=", "args", ".", "lr_patience", ",", "verbose", "=", "True", ",", "factor", "=", "args", ".", "lr_factor", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_sunrgbd.model_forward": [[51, 61], ["model", "rgb.cuda", "depth.cuda", "tgt.cuda", "models.TMC.ce_loss", "models.TMC.ce_loss", "models.TMC.ce_loss", "models.TMC.ce_loss"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss"], ["", "def", "model_forward", "(", "i_epoch", ",", "model", ",", "args", ",", "ce_loss", ",", "batch", ")", ":", "\n", "    ", "rgb", ",", "depth", ",", "tgt", "=", "batch", "[", "'A'", "]", ",", "batch", "[", "'B'", "]", ",", "batch", "[", "'label'", "]", "\n", "\n", "rgb", ",", "depth", ",", "tgt", "=", "rgb", ".", "cuda", "(", ")", ",", "depth", ".", "cuda", "(", ")", ",", "tgt", ".", "cuda", "(", ")", "\n", "depth_alpha", ",", "rgb_alpha", ",", "depth_rgb_alpha", "=", "model", "(", "rgb", ",", "depth", ")", "\n", "\n", "loss", "=", "ce_loss", "(", "tgt", ",", "depth_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "+", "ce_loss", "(", "tgt", ",", "rgb_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "+", "ce_loss", "(", "tgt", ",", "depth_rgb_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "\n", "return", "loss", ",", "depth_alpha", ",", "rgb_alpha", ",", "depth_rgb_alpha", ",", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_sunrgbd.model_eval": [[63, 91], ["model.eval", "sklearn.metrics.accuracy_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.accuracy_score", "torch.no_grad", "np.mean", "train_TMC_sunrgbd.model_forward", "losses.append", "depth_alpha.argmax().cpu().detach().numpy", "rgb_alpha.argmax().cpu().detach().numpy", "depth_rgb_alpha.argmax().cpu().detach().numpy", "depth_preds.append", "rgb_preds.append", "depthrgb_preds.append", "tgt.cpu().detach().numpy.cpu().detach().numpy", "tgts.append", "loss.item", "depth_alpha.argmax().cpu().detach", "rgb_alpha.argmax().cpu().detach", "depth_rgb_alpha.argmax().cpu().detach", "tgt.cpu().detach().numpy.cpu().detach", "depth_alpha.argmax().cpu", "rgb_alpha.argmax().cpu", "depth_rgb_alpha.argmax().cpu", "tgt.cpu().detach().numpy.cpu", "depth_alpha.argmax", "rgb_alpha.argmax", "depth_rgb_alpha.argmax", "models.TMC.ce_loss", "models.TMC.ce_loss"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_forward", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss"], ["", "def", "model_eval", "(", "i_epoch", ",", "data", ",", "model", ",", "args", ",", "criterion", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "losses", ",", "depth_preds", ",", "rgb_preds", ",", "depthrgb_preds", ",", "tgts", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", "in", "data", ":", "\n", "            ", "loss", ",", "depth_alpha", ",", "rgb_alpha", ",", "depth_rgb_alpha", ",", "tgt", "=", "model_forward", "(", "i_epoch", ",", "model", ",", "args", ",", "criterion", ",", "batch", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "depth_pred", "=", "depth_alpha", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "rgb_pred", "=", "rgb_alpha", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "depth_rgb_pred", "=", "depth_rgb_alpha", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "depth_preds", ".", "append", "(", "depth_pred", ")", "\n", "rgb_preds", ".", "append", "(", "rgb_pred", ")", "\n", "depthrgb_preds", ".", "append", "(", "depth_rgb_pred", ")", "\n", "tgt", "=", "tgt", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "tgts", ".", "append", "(", "tgt", ")", "\n", "\n", "", "", "metrics", "=", "{", "\"loss\"", ":", "np", ".", "mean", "(", "losses", ")", "}", "\n", "\n", "tgts", "=", "[", "l", "for", "sl", "in", "tgts", "for", "l", "in", "sl", "]", "\n", "depth_preds", "=", "[", "l", "for", "sl", "in", "depth_preds", "for", "l", "in", "sl", "]", "\n", "rgb_preds", "=", "[", "l", "for", "sl", "in", "rgb_preds", "for", "l", "in", "sl", "]", "\n", "depthrgb_preds", "=", "[", "l", "for", "sl", "in", "depthrgb_preds", "for", "l", "in", "sl", "]", "\n", "metrics", "[", "\"depth_acc\"", "]", "=", "accuracy_score", "(", "tgts", ",", "depth_preds", ")", "\n", "metrics", "[", "\"rgb_acc\"", "]", "=", "accuracy_score", "(", "tgts", ",", "rgb_preds", ")", "\n", "metrics", "[", "\"depthrgb_acc\"", "]", "=", "accuracy_score", "(", "tgts", ",", "depthrgb_preds", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_sunrgbd.train": [[93, 203], ["utils.utils.set_seed", "os.path.join", "os.makedirs", "list", "list.append", "list.append", "list.append", "list.append", "list.append", "list", "list.append", "list.append", "list.append", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.TMC.TMC", "train_TMC_sunrgbd.get_optimizer", "train_TMC_sunrgbd.get_scheduler", "utils.logger.create_logger", "models.TMC.TMC.cuda", "torch.save", "os.path.exists", "range", "utils.utils.load_checkpoint", "models.TMC.TMC.eval", "train_TMC_sunrgbd.model_eval", "utils.logger.create_logger.info", "utils.utils.log_metrics", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "data.aligned_conc_dataset.AlignedConcDataset", "data.aligned_conc_dataset.AlignedConcDataset", "os.path.join", "os.path.join", "torch.load", "models.TMC.TMC.load_state_dict", "get_optimizer.load_state_dict", "get_scheduler.load_state_dict", "models.TMC.TMC.train", "get_optimizer.zero_grad", "tqdm.tqdm", "models.TMC.TMC.eval", "train_TMC_sunrgbd.model_eval", "utils.logger.create_logger.info", "utils.utils.log_metrics", "utils.logger.create_logger.info", "get_scheduler.step", "utils.utils.save_checkpoint", "os.path.join", "os.path.join", "train_TMC_sunrgbd.model_forward", "train_losses.append", "loss.backward", "utils.logger.create_logger.info", "os.path.join", "torchvision.Compose", "os.path.join", "torchvision.Compose", "len", "loss.item", "get_optimizer.step", "get_optimizer.zero_grad", "np.mean", "models.TMC.TMC.state_dict", "get_optimizer.state_dict", "get_scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.set_seed", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_optimizer", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_scheduler", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.logger.create_logger", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.load_checkpoint", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_eval", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.log_metrics", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.train", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_eval", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.log_metrics", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.save_checkpoint", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_forward"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "set_seed", "(", "args", ".", "seed", ")", "\n", "args", ".", "savedir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "args", ".", "name", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "train_transforms", "=", "list", "(", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "args", ".", "LOAD_SIZE", ",", "args", ".", "LOAD_SIZE", ")", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "(", "args", ".", "FINE_SIZE", ",", "args", ".", "FINE_SIZE", ")", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.6983", ",", "0.3918", ",", "0.4474", "]", ",", "std", "=", "[", "0.1648", ",", "0.1359", ",", "0.1644", "]", ")", ")", "\n", "val_transforms", "=", "list", "(", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "args", ".", "FINE_SIZE", ",", "args", ".", "FINE_SIZE", ")", ")", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.6983", ",", "0.3918", ",", "0.4474", "]", ",", "std", "=", "[", "0.1648", ",", "0.1359", ",", "0.1644", "]", ")", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "AlignedConcDataset", "(", "args", ",", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'train'", ")", ",", "transform", "=", "transforms", ".", "Compose", "(", "train_transforms", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_sz", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "n_workers", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "AlignedConcDataset", "(", "args", ",", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'test'", ")", ",", "transform", "=", "transforms", ".", "Compose", "(", "val_transforms", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_sz", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "n_workers", ")", "\n", "model", "=", "TMC", "(", "args", ")", "\n", "optimizer", "=", "get_optimizer", "(", "model", ",", "args", ")", "\n", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "args", ")", "\n", "logger", "=", "create_logger", "(", "\"%s/logfile.log\"", "%", "args", ".", "savedir", ",", "args", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "torch", ".", "save", "(", "args", ",", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"args.pt\"", ")", ")", "\n", "start_epoch", ",", "global_step", ",", "n_no_improve", ",", "best_metric", "=", "0", ",", "0", ",", "0", ",", "-", "np", ".", "inf", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"checkpoint.pt\"", ")", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"checkpoint.pt\"", ")", ")", "\n", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "n_no_improve", "=", "checkpoint", "[", "\"n_no_improve\"", "]", "\n", "best_metric", "=", "checkpoint", "[", "\"best_metric\"", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "\"scheduler\"", "]", ")", "\n", "\n", "", "for", "i_epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "max_epochs", ")", ":", "\n", "        ", "train_losses", "=", "[", "]", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "batch", "in", "tqdm", "(", "train_loader", ",", "total", "=", "len", "(", "train_loader", ")", ")", ":", "\n", "            ", "loss", ",", "depth_out", ",", "rgb_out", ",", "depthrgb", ",", "tgt", "=", "model_forward", "(", "i_epoch", ",", "model", ",", "args", ",", "ce_loss", ",", "batch", ")", "\n", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                 ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "\n", "", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "global_step", "+=", "1", "\n", "if", "global_step", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "model_eval", "(", "\n", "np", ".", "inf", ",", "test_loader", ",", "model", ",", "args", ",", "ce_loss", "\n", ")", "\n", "logger", ".", "info", "(", "\"Train Loss: {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "train_losses", ")", ")", ")", "\n", "log_metrics", "(", "\"val\"", ",", "metrics", ",", "logger", ")", "\n", "logger", ".", "info", "(", "\n", "\"{}: Loss: {:.5f} | depth_acc: {:.5f}, rgb_acc: {:.5f}, depth rgb acc: {:.5f}\"", ".", "format", "(", "\n", "\"val\"", ",", "metrics", "[", "\"loss\"", "]", ",", "metrics", "[", "\"depth_acc\"", "]", ",", "metrics", "[", "\"rgb_acc\"", "]", ",", "metrics", "[", "\"depthrgb_acc\"", "]", "\n", ")", "\n", ")", "\n", "tuning_metric", "=", "metrics", "[", "\"depthrgb_acc\"", "]", "\n", "\n", "scheduler", ".", "step", "(", "tuning_metric", ")", "\n", "is_improvement", "=", "tuning_metric", ">", "best_metric", "\n", "if", "is_improvement", ":", "\n", "            ", "best_metric", "=", "tuning_metric", "\n", "n_no_improve", "=", "0", "\n", "", "else", ":", "\n", "            ", "n_no_improve", "+=", "1", "\n", "\n", "", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "i_epoch", "+", "1", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"scheduler\"", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "\"n_no_improve\"", ":", "n_no_improve", ",", "\n", "\"best_metric\"", ":", "best_metric", ",", "\n", "}", ",", "\n", "is_improvement", ",", "\n", "args", ".", "savedir", ",", "\n", ")", "\n", "\n", "if", "n_no_improve", ">=", "args", ".", "patience", ":", "\n", "            ", "logger", ".", "info", "(", "\"No improvement. Breaking out of loop.\"", ")", "\n", "break", "\n", "\n", "", "", "load_checkpoint", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"model_best.pt\"", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_metrics", "=", "model_eval", "(", "\n", "np", ".", "inf", ",", "test_loader", ",", "model", ",", "args", ",", "ce_loss", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"{}: Loss: {:.5f} | depth_acc: {:.5f}, rgb_acc: {:.5f}, depth rgb acc: {:.5f}\"", ".", "format", "(", "\n", "\"Test\"", ",", "test_metrics", "[", "\"loss\"", "]", ",", "test_metrics", "[", "\"depth_acc\"", "]", ",", "test_metrics", "[", "\"rgb_acc\"", "]", ",", "\n", "test_metrics", "[", "\"depthrgb_acc\"", "]", "\n", ")", "\n", ")", "\n", "log_metrics", "(", "f\"Test\"", ",", "test_metrics", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_sunrgbd.cli_main": [[205, 211], ["argparse.ArgumentParser", "train_TMC_sunrgbd.get_args", "argparse.ArgumentParser.parse_known_args", "train_TMC_sunrgbd.train"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_args", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.train"], ["", "def", "cli_main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train Models\"", ")", "\n", "get_args", "(", "parser", ")", "\n", "args", ",", "remaining_args", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "assert", "remaining_args", "==", "[", "]", ",", "remaining_args", "\n", "train", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_nyud2.get_args": [[14, 38], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "get_args", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\"--batch_sz\"", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_path\"", ",", "type", "=", "str", ",", "default", "=", "\"./datasets/nyud2/\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--LOAD_SIZE\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--FINE_SIZE\"", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--gradient_accumulation_steps\"", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "\"--hidden\"", ",", "nargs", "=", "\"*\"", ",", "type", "=", "int", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--hidden_sz\"", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_embed_pool_type\"", ",", "type", "=", "str", ",", "default", "=", "\"avg\"", ",", "choices", "=", "[", "\"max\"", ",", "\"avg\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_hidden_sz\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--include_bn\"", ",", "type", "=", "int", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_factor\"", ",", "type", "=", "float", ",", "default", "=", "0.3", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_patience\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_epochs\"", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_workers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "type", "=", "str", ",", "default", "=", "\"ReleasedVersion\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_image_embeds\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--patience\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "\"--savedir\"", ",", "type", "=", "str", ",", "default", "=", "\"./savepath/ETMC/nyud2/\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_classes\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--annealing_epoch\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_nyud2.get_optimizer": [[40, 43], ["torch.Adam", "model.parameters"], "function", ["None"], ["", "def", "get_optimizer", "(", "model", ",", "args", ")", ":", "\n", "    ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-5", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_nyud2.get_scheduler": [[45, 48], ["torch.lr_scheduler.ReduceLROnPlateau"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "args", ")", ":", "\n", "    ", "return", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "\"max\"", ",", "patience", "=", "args", ".", "lr_patience", ",", "verbose", "=", "True", ",", "factor", "=", "args", ".", "lr_factor", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_nyud2.model_forward": [[51, 62], ["model", "rgb.cuda", "depth.cuda", "tgt.cuda", "models.TMC.ce_loss", "models.TMC.ce_loss", "models.TMC.ce_loss", "models.TMC.ce_loss", "models.TMC.ce_loss"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss"], ["", "def", "model_forward", "(", "i_epoch", ",", "model", ",", "args", ",", "ce_loss", ",", "batch", ")", ":", "\n", "    ", "rgb", ",", "depth", ",", "tgt", "=", "batch", "[", "'A'", "]", ",", "batch", "[", "'B'", "]", ",", "batch", "[", "'label'", "]", "\n", "\n", "rgb", ",", "depth", ",", "tgt", "=", "rgb", ".", "cuda", "(", ")", ",", "depth", ".", "cuda", "(", ")", ",", "tgt", ".", "cuda", "(", ")", "\n", "depth_alpha", ",", "rgb_alpha", ",", "pseudo_alpha", ",", "depth_rgb_alpha", "=", "model", "(", "rgb", ",", "depth", ")", "\n", "\n", "loss", "=", "ce_loss", "(", "tgt", ",", "depth_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "+", "ce_loss", "(", "tgt", ",", "rgb_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "+", "ce_loss", "(", "tgt", ",", "pseudo_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "+", "ce_loss", "(", "tgt", ",", "depth_rgb_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "\n", "return", "loss", ",", "depth_alpha", ",", "rgb_alpha", ",", "depth_rgb_alpha", ",", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_nyud2.model_eval": [[64, 92], ["model.eval", "sklearn.metrics.accuracy_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.accuracy_score", "torch.no_grad", "np.mean", "train_ETMC_nyud2.model_forward", "losses.append", "depth_alpha.argmax().cpu().detach().numpy", "rgb_alpha.argmax().cpu().detach().numpy", "depth_rgb_alpha.argmax().cpu().detach().numpy", "depth_preds.append", "rgb_preds.append", "depthrgb_preds.append", "tgt.cpu().detach().numpy.cpu().detach().numpy", "tgts.append", "loss.item", "depth_alpha.argmax().cpu().detach", "rgb_alpha.argmax().cpu().detach", "depth_rgb_alpha.argmax().cpu().detach", "tgt.cpu().detach().numpy.cpu().detach", "depth_alpha.argmax().cpu", "rgb_alpha.argmax().cpu", "depth_rgb_alpha.argmax().cpu", "tgt.cpu().detach().numpy.cpu", "depth_alpha.argmax", "rgb_alpha.argmax", "depth_rgb_alpha.argmax", "models.TMC.ce_loss", "models.TMC.ce_loss"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_forward", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss"], ["", "def", "model_eval", "(", "i_epoch", ",", "data", ",", "model", ",", "args", ",", "criterion", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "losses", ",", "depth_preds", ",", "rgb_preds", ",", "depthrgb_preds", ",", "tgts", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", "in", "data", ":", "\n", "            ", "loss", ",", "depth_alpha", ",", "rgb_alpha", ",", "depth_rgb_alpha", ",", "tgt", "=", "model_forward", "(", "i_epoch", ",", "model", ",", "args", ",", "criterion", ",", "batch", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "depth_pred", "=", "depth_alpha", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "rgb_pred", "=", "rgb_alpha", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "depth_rgb_pred", "=", "depth_rgb_alpha", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "depth_preds", ".", "append", "(", "depth_pred", ")", "\n", "rgb_preds", ".", "append", "(", "rgb_pred", ")", "\n", "depthrgb_preds", ".", "append", "(", "depth_rgb_pred", ")", "\n", "tgt", "=", "tgt", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "tgts", ".", "append", "(", "tgt", ")", "\n", "\n", "", "", "metrics", "=", "{", "\"loss\"", ":", "np", ".", "mean", "(", "losses", ")", "}", "\n", "\n", "tgts", "=", "[", "l", "for", "sl", "in", "tgts", "for", "l", "in", "sl", "]", "\n", "depth_preds", "=", "[", "l", "for", "sl", "in", "depth_preds", "for", "l", "in", "sl", "]", "\n", "rgb_preds", "=", "[", "l", "for", "sl", "in", "rgb_preds", "for", "l", "in", "sl", "]", "\n", "depthrgb_preds", "=", "[", "l", "for", "sl", "in", "depthrgb_preds", "for", "l", "in", "sl", "]", "\n", "metrics", "[", "\"depth_acc\"", "]", "=", "accuracy_score", "(", "tgts", ",", "depth_preds", ")", "\n", "metrics", "[", "\"rgb_acc\"", "]", "=", "accuracy_score", "(", "tgts", ",", "rgb_preds", ")", "\n", "metrics", "[", "\"depthrgb_acc\"", "]", "=", "accuracy_score", "(", "tgts", ",", "depthrgb_preds", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_nyud2.train": [[94, 203], ["utils.utils.set_seed", "os.path.join", "os.makedirs", "list", "list.append", "list.append", "list.append", "list.append", "list.append", "list", "list.append", "list.append", "list.append", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.TMC.ETMC", "train_ETMC_nyud2.get_optimizer", "train_ETMC_nyud2.get_scheduler", "utils.logger.create_logger", "models.TMC.ETMC.cuda", "torch.save", "os.path.exists", "range", "utils.utils.load_checkpoint", "models.TMC.ETMC.eval", "train_ETMC_nyud2.model_eval", "utils.logger.create_logger.info", "utils.utils.log_metrics", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "data.aligned_conc_dataset.AlignedConcDataset", "data.aligned_conc_dataset.AlignedConcDataset", "os.path.join", "os.path.join", "torch.load", "models.TMC.ETMC.load_state_dict", "get_optimizer.load_state_dict", "get_scheduler.load_state_dict", "models.TMC.ETMC.train", "get_optimizer.zero_grad", "tqdm.tqdm", "models.TMC.ETMC.eval", "train_ETMC_nyud2.model_eval", "utils.logger.create_logger.info", "utils.utils.log_metrics", "utils.logger.create_logger.info", "get_scheduler.step", "utils.utils.save_checkpoint", "os.path.join", "os.path.join", "train_ETMC_nyud2.model_forward", "train_losses.append", "loss.backward", "utils.logger.create_logger.info", "os.path.join", "torchvision.Compose", "os.path.join", "torchvision.Compose", "len", "loss.item", "get_optimizer.step", "get_optimizer.zero_grad", "np.mean", "models.TMC.ETMC.state_dict", "get_optimizer.state_dict", "get_scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.set_seed", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_optimizer", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_scheduler", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.logger.create_logger", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.load_checkpoint", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_eval", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.log_metrics", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.train", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_eval", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.log_metrics", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.save_checkpoint", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_forward"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "set_seed", "(", "args", ".", "seed", ")", "\n", "args", ".", "savedir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "args", ".", "name", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "train_transforms", "=", "list", "(", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "args", ".", "LOAD_SIZE", ",", "args", ".", "LOAD_SIZE", ")", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "(", "args", ".", "FINE_SIZE", ",", "args", ".", "FINE_SIZE", ")", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.6983", ",", "0.3918", ",", "0.4474", "]", ",", "std", "=", "[", "0.1648", ",", "0.1359", ",", "0.1644", "]", ")", ")", "\n", "val_transforms", "=", "list", "(", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "args", ".", "FINE_SIZE", ",", "args", ".", "FINE_SIZE", ")", ")", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.6983", ",", "0.3918", ",", "0.4474", "]", ",", "std", "=", "[", "0.1648", ",", "0.1359", ",", "0.1644", "]", ")", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "AlignedConcDataset", "(", "args", ",", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'train'", ")", ",", "transform", "=", "transforms", ".", "Compose", "(", "train_transforms", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_sz", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "n_workers", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "AlignedConcDataset", "(", "args", ",", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'test'", ")", ",", "transform", "=", "transforms", ".", "Compose", "(", "val_transforms", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_sz", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "n_workers", ")", "\n", "model", "=", "ETMC", "(", "args", ")", "\n", "optimizer", "=", "get_optimizer", "(", "model", ",", "args", ")", "\n", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "args", ")", "\n", "logger", "=", "create_logger", "(", "\"%s/logfile.log\"", "%", "args", ".", "savedir", ",", "args", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "torch", ".", "save", "(", "args", ",", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"args.pt\"", ")", ")", "\n", "start_epoch", ",", "global_step", ",", "n_no_improve", ",", "best_metric", "=", "0", ",", "0", ",", "0", ",", "-", "np", ".", "inf", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"checkpoint.pt\"", ")", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"checkpoint.pt\"", ")", ")", "\n", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "n_no_improve", "=", "checkpoint", "[", "\"n_no_improve\"", "]", "\n", "best_metric", "=", "checkpoint", "[", "\"best_metric\"", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "\"scheduler\"", "]", ")", "\n", "\n", "", "for", "i_epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "max_epochs", ")", ":", "\n", "        ", "train_losses", "=", "[", "]", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "batch", "in", "tqdm", "(", "train_loader", ",", "total", "=", "len", "(", "train_loader", ")", ")", ":", "\n", "            ", "loss", ",", "depth_out", ",", "rgb_out", ",", "depthrgb", ",", "tgt", "=", "model_forward", "(", "i_epoch", ",", "model", ",", "args", ",", "ce_loss", ",", "batch", ")", "\n", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                 ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "\n", "", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "global_step", "+=", "1", "\n", "if", "global_step", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "model_eval", "(", "\n", "np", ".", "inf", ",", "test_loader", ",", "model", ",", "args", ",", "ce_loss", "\n", ")", "\n", "logger", ".", "info", "(", "\"Train Loss: {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "train_losses", ")", ")", ")", "\n", "log_metrics", "(", "\"val\"", ",", "metrics", ",", "logger", ")", "\n", "logger", ".", "info", "(", "\n", "\"{}: Loss: {:.5f} | depth_acc: {:.5f}, rgb_acc: {:.5f}, depth rgb acc: {:.5f}\"", ".", "format", "(", "\n", "\"val\"", ",", "metrics", "[", "\"loss\"", "]", ",", "metrics", "[", "\"depth_acc\"", "]", ",", "metrics", "[", "\"rgb_acc\"", "]", ",", "metrics", "[", "\"depthrgb_acc\"", "]", "\n", ")", "\n", ")", "\n", "tuning_metric", "=", "metrics", "[", "\"depthrgb_acc\"", "]", "\n", "\n", "scheduler", ".", "step", "(", "tuning_metric", ")", "\n", "is_improvement", "=", "tuning_metric", ">", "best_metric", "\n", "if", "is_improvement", ":", "\n", "            ", "best_metric", "=", "tuning_metric", "\n", "n_no_improve", "=", "0", "\n", "", "else", ":", "\n", "            ", "n_no_improve", "+=", "1", "\n", "\n", "", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "i_epoch", "+", "1", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"scheduler\"", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "\"n_no_improve\"", ":", "n_no_improve", ",", "\n", "\"best_metric\"", ":", "best_metric", ",", "\n", "}", ",", "\n", "is_improvement", ",", "\n", "args", ".", "savedir", ",", "\n", ")", "\n", "\n", "if", "n_no_improve", ">=", "args", ".", "patience", ":", "\n", "            ", "logger", ".", "info", "(", "\"No improvement. Breaking out of loop.\"", ")", "\n", "break", "\n", "\n", "", "", "load_checkpoint", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"model_best.pt\"", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_metrics", "=", "model_eval", "(", "\n", "np", ".", "inf", ",", "test_loader", ",", "model", ",", "args", ",", "ce_loss", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"{}: Loss: {:.5f} | depth_acc: {:.5f}, rgb_acc: {:.5f}, depth rgb acc: {:.5f}\"", ".", "format", "(", "\n", "\"Test\"", ",", "test_metrics", "[", "\"loss\"", "]", ",", "test_metrics", "[", "\"depth_acc\"", "]", ",", "test_metrics", "[", "\"rgb_acc\"", "]", ",", "\n", "test_metrics", "[", "\"depthrgb_acc\"", "]", "\n", ")", "\n", ")", "\n", "log_metrics", "(", "f\"Test\"", ",", "test_metrics", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_nyud2.cli_main": [[205, 211], ["argparse.ArgumentParser", "train_ETMC_nyud2.get_args", "argparse.ArgumentParser.parse_known_args", "train_ETMC_nyud2.train"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_args", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.train"], ["", "def", "cli_main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train Models\"", ")", "\n", "get_args", "(", "parser", ")", "\n", "args", ",", "remaining_args", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "assert", "remaining_args", "==", "[", "]", ",", "remaining_args", "\n", "train", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_sunrgbd.get_args": [[14, 38], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "get_args", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\"--batch_sz\"", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_path\"", ",", "type", "=", "str", ",", "default", "=", "\"./datasets/sunrgbd/\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--LOAD_SIZE\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--FINE_SIZE\"", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--gradient_accumulation_steps\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--hidden\"", ",", "nargs", "=", "\"*\"", ",", "type", "=", "int", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--hidden_sz\"", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_embed_pool_type\"", ",", "type", "=", "str", ",", "default", "=", "\"avg\"", ",", "choices", "=", "[", "\"max\"", ",", "\"avg\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_hidden_sz\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--include_bn\"", ",", "type", "=", "int", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "5e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_factor\"", ",", "type", "=", "float", ",", "default", "=", "0.3", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_patience\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_epochs\"", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_workers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "type", "=", "str", ",", "default", "=", "\"ReleasedVersion\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_image_embeds\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--patience\"", ",", "type", "=", "int", ",", "default", "=", "30", ")", "\n", "parser", ".", "add_argument", "(", "\"--savedir\"", ",", "type", "=", "str", ",", "default", "=", "\"./savepath/ETMC/sunrgbd/\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_classes\"", ",", "type", "=", "int", ",", "default", "=", "19", ")", "\n", "parser", ".", "add_argument", "(", "\"--annealing_epoch\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_sunrgbd.get_optimizer": [[40, 43], ["torch.Adam", "model.parameters"], "function", ["None"], ["", "def", "get_optimizer", "(", "model", ",", "args", ")", ":", "\n", "    ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-5", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_sunrgbd.get_scheduler": [[45, 48], ["torch.lr_scheduler.ReduceLROnPlateau"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "args", ")", ":", "\n", "    ", "return", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "\"max\"", ",", "patience", "=", "args", ".", "lr_patience", ",", "verbose", "=", "True", ",", "factor", "=", "args", ".", "lr_factor", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_sunrgbd.model_forward": [[51, 62], ["model", "rgb.cuda", "depth.cuda", "tgt.cuda", "models.TMC.ce_loss", "models.TMC.ce_loss", "models.TMC.ce_loss", "models.TMC.ce_loss", "models.TMC.ce_loss"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss"], ["", "def", "model_forward", "(", "i_epoch", ",", "model", ",", "args", ",", "ce_loss", ",", "batch", ")", ":", "\n", "    ", "rgb", ",", "depth", ",", "tgt", "=", "batch", "[", "'A'", "]", ",", "batch", "[", "'B'", "]", ",", "batch", "[", "'label'", "]", "\n", "\n", "rgb", ",", "depth", ",", "tgt", "=", "rgb", ".", "cuda", "(", ")", ",", "depth", ".", "cuda", "(", ")", ",", "tgt", ".", "cuda", "(", ")", "\n", "depth_alpha", ",", "rgb_alpha", ",", "pseudo_alpha", ",", "depth_rgb_alpha", "=", "model", "(", "rgb", ",", "depth", ")", "\n", "\n", "loss", "=", "ce_loss", "(", "tgt", ",", "depth_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "+", "ce_loss", "(", "tgt", ",", "rgb_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "+", "ce_loss", "(", "tgt", ",", "pseudo_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "+", "ce_loss", "(", "tgt", ",", "depth_rgb_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "\n", "return", "loss", ",", "depth_alpha", ",", "rgb_alpha", ",", "depth_rgb_alpha", ",", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_sunrgbd.model_eval": [[64, 92], ["model.eval", "sklearn.metrics.accuracy_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.accuracy_score", "torch.no_grad", "np.mean", "train_ETMC_sunrgbd.model_forward", "losses.append", "depth_alpha.argmax().cpu().detach().numpy", "rgb_alpha.argmax().cpu().detach().numpy", "depth_rgb_alpha.argmax().cpu().detach().numpy", "depth_preds.append", "rgb_preds.append", "depthrgb_preds.append", "tgt.cpu().detach().numpy.cpu().detach().numpy", "tgts.append", "loss.item", "depth_alpha.argmax().cpu().detach", "rgb_alpha.argmax().cpu().detach", "depth_rgb_alpha.argmax().cpu().detach", "tgt.cpu().detach().numpy.cpu().detach", "depth_alpha.argmax().cpu", "rgb_alpha.argmax().cpu", "depth_rgb_alpha.argmax().cpu", "tgt.cpu().detach().numpy.cpu", "depth_alpha.argmax", "rgb_alpha.argmax", "depth_rgb_alpha.argmax", "models.TMC.ce_loss", "models.TMC.ce_loss"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_forward", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss"], ["", "def", "model_eval", "(", "i_epoch", ",", "data", ",", "model", ",", "args", ",", "criterion", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "losses", ",", "depth_preds", ",", "rgb_preds", ",", "depthrgb_preds", ",", "tgts", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", "in", "data", ":", "\n", "            ", "loss", ",", "depth_alpha", ",", "rgb_alpha", ",", "depth_rgb_alpha", ",", "tgt", "=", "model_forward", "(", "i_epoch", ",", "model", ",", "args", ",", "criterion", ",", "batch", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "depth_pred", "=", "depth_alpha", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "rgb_pred", "=", "rgb_alpha", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "depth_rgb_pred", "=", "depth_rgb_alpha", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "depth_preds", ".", "append", "(", "depth_pred", ")", "\n", "rgb_preds", ".", "append", "(", "rgb_pred", ")", "\n", "depthrgb_preds", ".", "append", "(", "depth_rgb_pred", ")", "\n", "tgt", "=", "tgt", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "tgts", ".", "append", "(", "tgt", ")", "\n", "\n", "", "", "metrics", "=", "{", "\"loss\"", ":", "np", ".", "mean", "(", "losses", ")", "}", "\n", "\n", "tgts", "=", "[", "l", "for", "sl", "in", "tgts", "for", "l", "in", "sl", "]", "\n", "depth_preds", "=", "[", "l", "for", "sl", "in", "depth_preds", "for", "l", "in", "sl", "]", "\n", "rgb_preds", "=", "[", "l", "for", "sl", "in", "rgb_preds", "for", "l", "in", "sl", "]", "\n", "depthrgb_preds", "=", "[", "l", "for", "sl", "in", "depthrgb_preds", "for", "l", "in", "sl", "]", "\n", "metrics", "[", "\"depth_acc\"", "]", "=", "accuracy_score", "(", "tgts", ",", "depth_preds", ")", "\n", "metrics", "[", "\"rgb_acc\"", "]", "=", "accuracy_score", "(", "tgts", ",", "rgb_preds", ")", "\n", "metrics", "[", "\"depthrgb_acc\"", "]", "=", "accuracy_score", "(", "tgts", ",", "depthrgb_preds", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_sunrgbd.train": [[94, 204], ["utils.utils.set_seed", "os.path.join", "os.makedirs", "list", "list.append", "list.append", "list.append", "list.append", "list.append", "list", "list.append", "list.append", "list.append", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.TMC.ETMC", "train_ETMC_sunrgbd.get_optimizer", "train_ETMC_sunrgbd.get_scheduler", "utils.logger.create_logger", "models.TMC.ETMC.cuda", "torch.save", "os.path.exists", "range", "utils.utils.load_checkpoint", "models.TMC.ETMC.eval", "train_ETMC_sunrgbd.model_eval", "utils.logger.create_logger.info", "utils.utils.log_metrics", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "data.aligned_conc_dataset.AlignedConcDataset", "data.aligned_conc_dataset.AlignedConcDataset", "os.path.join", "os.path.join", "torch.load", "models.TMC.ETMC.load_state_dict", "get_optimizer.load_state_dict", "get_scheduler.load_state_dict", "models.TMC.ETMC.train", "get_optimizer.zero_grad", "tqdm.tqdm", "models.TMC.ETMC.eval", "train_ETMC_sunrgbd.model_eval", "utils.logger.create_logger.info", "utils.utils.log_metrics", "utils.logger.create_logger.info", "get_scheduler.step", "utils.utils.save_checkpoint", "os.path.join", "os.path.join", "train_ETMC_sunrgbd.model_forward", "train_losses.append", "loss.backward", "utils.logger.create_logger.info", "os.path.join", "torchvision.Compose", "os.path.join", "torchvision.Compose", "len", "loss.item", "get_optimizer.step", "get_optimizer.zero_grad", "np.mean", "models.TMC.ETMC.state_dict", "get_optimizer.state_dict", "get_scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.set_seed", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_optimizer", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_scheduler", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.logger.create_logger", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.load_checkpoint", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_eval", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.log_metrics", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.train", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_eval", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.log_metrics", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.save_checkpoint", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_forward"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "set_seed", "(", "args", ".", "seed", ")", "\n", "args", ".", "savedir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "args", ".", "name", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "train_transforms", "=", "list", "(", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "args", ".", "LOAD_SIZE", ",", "args", ".", "LOAD_SIZE", ")", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "(", "args", ".", "FINE_SIZE", ",", "args", ".", "FINE_SIZE", ")", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.6983", ",", "0.3918", ",", "0.4474", "]", ",", "std", "=", "[", "0.1648", ",", "0.1359", ",", "0.1644", "]", ")", ")", "\n", "val_transforms", "=", "list", "(", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "args", ".", "FINE_SIZE", ",", "args", ".", "FINE_SIZE", ")", ")", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.6983", ",", "0.3918", ",", "0.4474", "]", ",", "std", "=", "[", "0.1648", ",", "0.1359", ",", "0.1644", "]", ")", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "AlignedConcDataset", "(", "args", ",", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'train'", ")", ",", "transform", "=", "transforms", ".", "Compose", "(", "train_transforms", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_sz", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "n_workers", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "AlignedConcDataset", "(", "args", ",", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'test'", ")", ",", "transform", "=", "transforms", ".", "Compose", "(", "val_transforms", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_sz", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "n_workers", ")", "\n", "model", "=", "ETMC", "(", "args", ")", "\n", "optimizer", "=", "get_optimizer", "(", "model", ",", "args", ")", "\n", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "args", ")", "\n", "logger", "=", "create_logger", "(", "\"%s/logfile.log\"", "%", "args", ".", "savedir", ",", "args", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "torch", ".", "save", "(", "args", ",", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"args.pt\"", ")", ")", "\n", "start_epoch", ",", "global_step", ",", "n_no_improve", ",", "best_metric", "=", "0", ",", "0", ",", "0", ",", "-", "np", ".", "inf", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"checkpoint.pt\"", ")", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"checkpoint.pt\"", ")", ")", "\n", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "n_no_improve", "=", "checkpoint", "[", "\"n_no_improve\"", "]", "\n", "best_metric", "=", "checkpoint", "[", "\"best_metric\"", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "\"scheduler\"", "]", ")", "\n", "\n", "", "for", "i_epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "max_epochs", ")", ":", "\n", "        ", "train_losses", "=", "[", "]", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "batch", "in", "tqdm", "(", "train_loader", ",", "total", "=", "len", "(", "train_loader", ")", ")", ":", "\n", "            ", "loss", ",", "depth_out", ",", "rgb_out", ",", "depthrgb", ",", "tgt", "=", "model_forward", "(", "i_epoch", ",", "model", ",", "args", ",", "ce_loss", ",", "batch", ")", "\n", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                 ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "\n", "", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "global_step", "+=", "1", "\n", "if", "global_step", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "model_eval", "(", "\n", "np", ".", "inf", ",", "test_loader", ",", "model", ",", "args", ",", "ce_loss", "\n", ")", "\n", "logger", ".", "info", "(", "\"Train Loss: {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "train_losses", ")", ")", ")", "\n", "log_metrics", "(", "\"val\"", ",", "metrics", ",", "logger", ")", "\n", "logger", ".", "info", "(", "\n", "\"{}: Loss: {:.5f} | depth_acc: {:.5f}, rgb_acc: {:.5f}, depth rgb acc: {:.5f}\"", ".", "format", "(", "\n", "\"val\"", ",", "metrics", "[", "\"loss\"", "]", ",", "metrics", "[", "\"depth_acc\"", "]", ",", "metrics", "[", "\"rgb_acc\"", "]", ",", "metrics", "[", "\"depthrgb_acc\"", "]", "\n", ")", "\n", ")", "\n", "tuning_metric", "=", "metrics", "[", "\"depthrgb_acc\"", "]", "\n", "\n", "scheduler", ".", "step", "(", "tuning_metric", ")", "\n", "is_improvement", "=", "tuning_metric", ">", "best_metric", "\n", "if", "is_improvement", ":", "\n", "            ", "best_metric", "=", "tuning_metric", "\n", "n_no_improve", "=", "0", "\n", "", "else", ":", "\n", "            ", "n_no_improve", "+=", "1", "\n", "\n", "", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "i_epoch", "+", "1", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"scheduler\"", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "\"n_no_improve\"", ":", "n_no_improve", ",", "\n", "\"best_metric\"", ":", "best_metric", ",", "\n", "}", ",", "\n", "is_improvement", ",", "\n", "args", ".", "savedir", ",", "\n", ")", "\n", "\n", "if", "n_no_improve", ">=", "args", ".", "patience", ":", "\n", "            ", "logger", ".", "info", "(", "\"No improvement. Breaking out of loop.\"", ")", "\n", "break", "\n", "\n", "", "", "load_checkpoint", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"model_best.pt\"", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_metrics", "=", "model_eval", "(", "\n", "np", ".", "inf", ",", "test_loader", ",", "model", ",", "args", ",", "ce_loss", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"{}: Loss: {:.5f} | depth_acc: {:.5f}, rgb_acc: {:.5f}, depth rgb acc: {:.5f}\"", ".", "format", "(", "\n", "\"Test\"", ",", "test_metrics", "[", "\"loss\"", "]", ",", "test_metrics", "[", "\"depth_acc\"", "]", ",", "test_metrics", "[", "\"rgb_acc\"", "]", ",", "\n", "test_metrics", "[", "\"depthrgb_acc\"", "]", "\n", ")", "\n", ")", "\n", "log_metrics", "(", "f\"Test\"", ",", "test_metrics", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_ETMC_sunrgbd.cli_main": [[206, 212], ["argparse.ArgumentParser", "train_ETMC_sunrgbd.get_args", "argparse.ArgumentParser.parse_known_args", "train_ETMC_sunrgbd.train"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_args", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.train"], ["", "def", "cli_main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train Models\"", ")", "\n", "get_args", "(", "parser", ")", "\n", "args", ",", "remaining_args", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "assert", "remaining_args", "==", "[", "]", ",", "remaining_args", "\n", "train", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_args": [[14, 38], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "get_args", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\"--batch_sz\"", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_path\"", ",", "type", "=", "str", ",", "default", "=", "\"./datasets/nyud2/\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--LOAD_SIZE\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--FINE_SIZE\"", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "parser", ".", "add_argument", "(", "\"--dropout\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--gradient_accumulation_steps\"", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "\"--hidden\"", ",", "nargs", "=", "\"*\"", ",", "type", "=", "int", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--hidden_sz\"", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_embed_pool_type\"", ",", "type", "=", "str", ",", "default", "=", "\"avg\"", ",", "choices", "=", "[", "\"max\"", ",", "\"avg\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_hidden_sz\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--include_bn\"", ",", "type", "=", "int", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_factor\"", ",", "type", "=", "float", ",", "default", "=", "0.3", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_patience\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_epochs\"", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_workers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "type", "=", "str", ",", "default", "=", "\"ReleasedVersion\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_image_embeds\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--patience\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "\"--savedir\"", ",", "type", "=", "str", ",", "default", "=", "\"./savepath/TMC/nyud/\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_classes\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--annealing_epoch\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_optimizer": [[40, 43], ["torch.Adam", "model.parameters"], "function", ["None"], ["", "def", "get_optimizer", "(", "model", ",", "args", ")", ":", "\n", "    ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-5", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_scheduler": [[45, 48], ["torch.lr_scheduler.ReduceLROnPlateau"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "args", ")", ":", "\n", "    ", "return", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "\"max\"", ",", "patience", "=", "args", ".", "lr_patience", ",", "verbose", "=", "True", ",", "factor", "=", "args", ".", "lr_factor", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_forward": [[51, 61], ["model", "rgb.cuda", "depth.cuda", "tgt.cuda", "models.TMC.ce_loss", "models.TMC.ce_loss", "models.TMC.ce_loss", "models.TMC.ce_loss"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss"], ["", "def", "model_forward", "(", "i_epoch", ",", "model", ",", "args", ",", "ce_loss", ",", "batch", ")", ":", "\n", "    ", "rgb", ",", "depth", ",", "tgt", "=", "batch", "[", "'A'", "]", ",", "batch", "[", "'B'", "]", ",", "batch", "[", "'label'", "]", "\n", "\n", "rgb", ",", "depth", ",", "tgt", "=", "rgb", ".", "cuda", "(", ")", ",", "depth", ".", "cuda", "(", ")", ",", "tgt", ".", "cuda", "(", ")", "\n", "depth_alpha", ",", "rgb_alpha", ",", "depth_rgb_alpha", "=", "model", "(", "rgb", ",", "depth", ")", "\n", "\n", "loss", "=", "ce_loss", "(", "tgt", ",", "depth_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "+", "ce_loss", "(", "tgt", ",", "rgb_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "+", "ce_loss", "(", "tgt", ",", "depth_rgb_alpha", ",", "args", ".", "n_classes", ",", "i_epoch", ",", "args", ".", "annealing_epoch", ")", "\n", "return", "loss", ",", "depth_alpha", ",", "rgb_alpha", ",", "depth_rgb_alpha", ",", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_eval": [[63, 91], ["model.eval", "sklearn.metrics.accuracy_score", "sklearn.metrics.accuracy_score", "sklearn.metrics.accuracy_score", "torch.no_grad", "np.mean", "train_TMC_nyud2.model_forward", "losses.append", "depth_alpha.argmax().cpu().detach().numpy", "rgb_alpha.argmax().cpu().detach().numpy", "depth_rgb_alpha.argmax().cpu().detach().numpy", "depth_preds.append", "rgb_preds.append", "depthrgb_preds.append", "tgt.cpu().detach().numpy.cpu().detach().numpy", "tgts.append", "loss.item", "depth_alpha.argmax().cpu().detach", "rgb_alpha.argmax().cpu().detach", "depth_rgb_alpha.argmax().cpu().detach", "tgt.cpu().detach().numpy.cpu().detach", "depth_alpha.argmax().cpu", "rgb_alpha.argmax().cpu", "depth_rgb_alpha.argmax().cpu", "tgt.cpu().detach().numpy.cpu", "depth_alpha.argmax", "rgb_alpha.argmax", "depth_rgb_alpha.argmax", "models.TMC.ce_loss", "models.TMC.ce_loss"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_forward", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss"], ["", "def", "model_eval", "(", "i_epoch", ",", "data", ",", "model", ",", "args", ",", "criterion", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "losses", ",", "depth_preds", ",", "rgb_preds", ",", "depthrgb_preds", ",", "tgts", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", "in", "data", ":", "\n", "            ", "loss", ",", "depth_alpha", ",", "rgb_alpha", ",", "depth_rgb_alpha", ",", "tgt", "=", "model_forward", "(", "i_epoch", ",", "model", ",", "args", ",", "criterion", ",", "batch", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "depth_pred", "=", "depth_alpha", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "rgb_pred", "=", "rgb_alpha", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "depth_rgb_pred", "=", "depth_rgb_alpha", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "depth_preds", ".", "append", "(", "depth_pred", ")", "\n", "rgb_preds", ".", "append", "(", "rgb_pred", ")", "\n", "depthrgb_preds", ".", "append", "(", "depth_rgb_pred", ")", "\n", "tgt", "=", "tgt", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "tgts", ".", "append", "(", "tgt", ")", "\n", "\n", "", "", "metrics", "=", "{", "\"loss\"", ":", "np", ".", "mean", "(", "losses", ")", "}", "\n", "\n", "tgts", "=", "[", "l", "for", "sl", "in", "tgts", "for", "l", "in", "sl", "]", "\n", "depth_preds", "=", "[", "l", "for", "sl", "in", "depth_preds", "for", "l", "in", "sl", "]", "\n", "rgb_preds", "=", "[", "l", "for", "sl", "in", "rgb_preds", "for", "l", "in", "sl", "]", "\n", "depthrgb_preds", "=", "[", "l", "for", "sl", "in", "depthrgb_preds", "for", "l", "in", "sl", "]", "\n", "metrics", "[", "\"depth_acc\"", "]", "=", "accuracy_score", "(", "tgts", ",", "depth_preds", ")", "\n", "metrics", "[", "\"rgb_acc\"", "]", "=", "accuracy_score", "(", "tgts", ",", "rgb_preds", ")", "\n", "metrics", "[", "\"depthrgb_acc\"", "]", "=", "accuracy_score", "(", "tgts", ",", "depthrgb_preds", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.train": [[93, 205], ["utils.utils.set_seed", "os.path.join", "os.makedirs", "list", "list.append", "list.append", "list.append", "list.append", "list.append", "list", "list.append", "list.append", "list.append", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.TMC.TMC", "train_TMC_nyud2.get_optimizer", "train_TMC_nyud2.get_scheduler", "utils.logger.create_logger", "models.TMC.TMC.cuda", "torch.save", "os.path.exists", "range", "utils.utils.load_checkpoint", "models.TMC.TMC.eval", "train_TMC_nyud2.model_eval", "utils.logger.create_logger.info", "utils.utils.log_metrics", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "data.aligned_conc_dataset.AlignedConcDataset", "data.aligned_conc_dataset.AlignedConcDataset", "os.path.join", "os.path.join", "torch.load", "models.TMC.TMC.load_state_dict", "get_optimizer.load_state_dict", "get_scheduler.load_state_dict", "models.TMC.TMC.train", "get_optimizer.zero_grad", "tqdm.tqdm", "models.TMC.TMC.eval", "train_TMC_nyud2.model_eval", "utils.logger.create_logger.info", "utils.utils.log_metrics", "utils.logger.create_logger.info", "get_scheduler.step", "utils.utils.save_checkpoint", "os.path.join", "os.path.join", "train_TMC_nyud2.model_forward", "train_losses.append", "loss.backward", "utils.logger.create_logger.info", "os.path.join", "torchvision.Compose", "os.path.join", "torchvision.Compose", "len", "loss.item", "get_optimizer.step", "get_optimizer.zero_grad", "np.mean", "models.TMC.TMC.state_dict", "get_optimizer.state_dict", "get_scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.set_seed", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_optimizer", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_scheduler", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.logger.create_logger", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.load_checkpoint", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_eval", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.log_metrics", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.train", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_eval", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.log_metrics", "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.save_checkpoint", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.model_forward"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "set_seed", "(", "args", ".", "seed", ")", "\n", "args", ".", "savedir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "args", ".", "name", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "mean", "=", "[", "0.4951", ",", "0.3601", ",", "0.4587", "]", "\n", "std", "=", "[", "0.1474", ",", "0.1950", ",", "0.1646", "]", "\n", "train_transforms", "=", "list", "(", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "args", ".", "LOAD_SIZE", ",", "args", ".", "LOAD_SIZE", ")", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "(", "args", ".", "FINE_SIZE", ",", "args", ".", "FINE_SIZE", ")", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "train_transforms", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ")", "\n", "val_transforms", "=", "list", "(", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "Resize", "(", "(", "args", ".", "FINE_SIZE", ",", "args", ".", "FINE_SIZE", ")", ")", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "val_transforms", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "AlignedConcDataset", "(", "args", ",", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'train'", ")", ",", "transform", "=", "transforms", ".", "Compose", "(", "train_transforms", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_sz", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "n_workers", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "AlignedConcDataset", "(", "args", ",", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'test'", ")", ",", "transform", "=", "transforms", ".", "Compose", "(", "val_transforms", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_sz", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "n_workers", ")", "\n", "model", "=", "TMC", "(", "args", ")", "\n", "optimizer", "=", "get_optimizer", "(", "model", ",", "args", ")", "\n", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "args", ")", "\n", "logger", "=", "create_logger", "(", "\"%s/logfile.log\"", "%", "args", ".", "savedir", ",", "args", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "torch", ".", "save", "(", "args", ",", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"args.pt\"", ")", ")", "\n", "start_epoch", ",", "global_step", ",", "n_no_improve", ",", "best_metric", "=", "0", ",", "0", ",", "0", ",", "-", "np", ".", "inf", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"checkpoint.pt\"", ")", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"checkpoint.pt\"", ")", ")", "\n", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "n_no_improve", "=", "checkpoint", "[", "\"n_no_improve\"", "]", "\n", "best_metric", "=", "checkpoint", "[", "\"best_metric\"", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "\"scheduler\"", "]", ")", "\n", "\n", "", "for", "i_epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "max_epochs", ")", ":", "\n", "        ", "train_losses", "=", "[", "]", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "batch", "in", "tqdm", "(", "train_loader", ",", "total", "=", "len", "(", "train_loader", ")", ")", ":", "\n", "            ", "loss", ",", "depth_out", ",", "rgb_out", ",", "depthrgb", ",", "tgt", "=", "model_forward", "(", "i_epoch", ",", "model", ",", "args", ",", "ce_loss", ",", "batch", ")", "\n", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                 ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "\n", "", "train_losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "global_step", "+=", "1", "\n", "if", "global_step", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "model_eval", "(", "\n", "np", ".", "inf", ",", "test_loader", ",", "model", ",", "args", ",", "ce_loss", "\n", ")", "\n", "logger", ".", "info", "(", "\"Train Loss: {:.4f}\"", ".", "format", "(", "np", ".", "mean", "(", "train_losses", ")", ")", ")", "\n", "log_metrics", "(", "\"val\"", ",", "metrics", ",", "logger", ")", "\n", "logger", ".", "info", "(", "\n", "\"{}: Loss: {:.5f} | depth_acc: {:.5f}, rgb_acc: {:.5f}, depth rgb acc: {:.5f}\"", ".", "format", "(", "\n", "\"val\"", ",", "metrics", "[", "\"loss\"", "]", ",", "metrics", "[", "\"depth_acc\"", "]", ",", "metrics", "[", "\"rgb_acc\"", "]", ",", "metrics", "[", "\"depthrgb_acc\"", "]", "\n", ")", "\n", ")", "\n", "tuning_metric", "=", "metrics", "[", "\"depthrgb_acc\"", "]", "\n", "\n", "scheduler", ".", "step", "(", "tuning_metric", ")", "\n", "is_improvement", "=", "tuning_metric", ">", "best_metric", "\n", "if", "is_improvement", ":", "\n", "            ", "best_metric", "=", "tuning_metric", "\n", "n_no_improve", "=", "0", "\n", "", "else", ":", "\n", "            ", "n_no_improve", "+=", "1", "\n", "\n", "", "save_checkpoint", "(", "\n", "{", "\n", "\"epoch\"", ":", "i_epoch", "+", "1", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"scheduler\"", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "\"n_no_improve\"", ":", "n_no_improve", ",", "\n", "\"best_metric\"", ":", "best_metric", ",", "\n", "}", ",", "\n", "is_improvement", ",", "\n", "args", ".", "savedir", ",", "\n", ")", "\n", "\n", "if", "n_no_improve", ">=", "args", ".", "patience", ":", "\n", "            ", "logger", ".", "info", "(", "\"No improvement. Breaking out of loop.\"", ")", "\n", "break", "\n", "\n", "", "", "load_checkpoint", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "savedir", ",", "\"model_best.pt\"", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_metrics", "=", "model_eval", "(", "\n", "np", ".", "inf", ",", "test_loader", ",", "model", ",", "args", ",", "ce_loss", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"{}: Loss: {:.5f} | depth_acc: {:.5f}, rgb_acc: {:.5f}, depth rgb acc: {:.5f}\"", ".", "format", "(", "\n", "\"Test\"", ",", "test_metrics", "[", "\"loss\"", "]", ",", "test_metrics", "[", "\"depth_acc\"", "]", ",", "test_metrics", "[", "\"rgb_acc\"", "]", ",", "\n", "test_metrics", "[", "\"depthrgb_acc\"", "]", "\n", ")", "\n", ")", "\n", "log_metrics", "(", "f\"Test\"", ",", "test_metrics", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.cli_main": [[207, 213], ["argparse.ArgumentParser", "train_TMC_nyud2.get_args", "argparse.ArgumentParser.parse_known_args", "train_TMC_nyud2.train"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.get_args", "home.repos.pwc.inspect_result.hanmenghan_TMC.ETMC TPAMI.train_TMC_nyud2.train"], ["", "def", "cli_main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Train Models\"", ")", "\n", "get_args", "(", "parser", ")", "\n", "args", ",", "remaining_args", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "assert", "remaining_args", "==", "[", "]", ",", "remaining_args", "\n", "train", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.logger.LogFormatter.__init__": [[7, 9], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.logger.LogFormatter.format": [[10, 21], ["round", "record.getMessage", "message.replace.replace.replace", "time.strftime", "datetime.timedelta", "len"], "methods", ["None"], ["", "def", "format", "(", "self", ",", "record", ")", ":", "\n", "        ", "elapsed_seconds", "=", "round", "(", "record", ".", "created", "-", "self", ".", "start_time", ")", "\n", "\n", "prefix", "=", "\"%s - %s - %s\"", "%", "(", "\n", "record", ".", "levelname", ",", "\n", "time", ".", "strftime", "(", "\"%x %X\"", ")", ",", "\n", "timedelta", "(", "seconds", "=", "elapsed_seconds", ")", ",", "\n", ")", "\n", "message", "=", "record", ".", "getMessage", "(", ")", "\n", "message", "=", "message", ".", "replace", "(", "\"\\n\"", ",", "\"\\n\"", "+", "\" \"", "*", "(", "len", "(", "prefix", ")", "+", "3", ")", ")", "\n", "return", "\"%s - %s\"", "%", "(", "prefix", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.logger.create_logger": [[23, 59], ["logger.LogFormatter", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.info", "time.time", "sorted", "str", "dict().items", "dict", "vars"], "function", ["None"], ["", "", "def", "create_logger", "(", "filepath", ",", "args", ")", ":", "\n", "# create log formatter", "\n", "    ", "log_formatter", "=", "LogFormatter", "(", ")", "\n", "\n", "# create file handler and set level to debug", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "filepath", ",", "\"a\"", ")", "\n", "file_handler", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "file_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "\n", "# create console handler and set level to info", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console_handler", ".", "setFormatter", "(", "log_formatter", ")", "\n", "\n", "# create logger and set level to debug", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "handlers", "=", "[", "]", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "\n", "# reset logger elapsed time", "\n", "def", "reset_time", "(", ")", ":", "\n", "        ", "log_formatter", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "logger", ".", "reset_time", "=", "reset_time", "\n", "\n", "logger", ".", "info", "(", "\n", "\"\\n\"", ".", "join", "(", "\n", "\"%s: %s\"", "%", "(", "k", ",", "str", "(", "v", ")", ")", "\n", "for", "k", ",", "v", "in", "sorted", "(", "dict", "(", "vars", "(", "args", ")", ")", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", ")", "\n", ")", "\n", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.set_seed": [[10, 18], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.save_checkpoint": [[20, 25], ["os.path.join", "torch.save", "shutil.copyfile", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "checkpoint_path", ",", "filename", "=", "\"checkpoint.pt\"", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "os", ".", "path", ".", "join", "(", "checkpoint_path", ",", "\"model_best.pt\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.load_checkpoint": [[27, 30], ["torch.load", "model.load_state_dict"], "function", ["None"], ["", "", "def", "load_checkpoint", "(", "model", ",", "path", ")", ":", "\n", "    ", "best_checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "model", ".", "load_state_dict", "(", "best_checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.log_metrics": [[31, 35], ["logger.info"], "function", ["None"], ["", "def", "log_metrics", "(", "set_name", ",", "metrics", ",", "logger", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\n", "\"{}: Loss: {:.5f} | depth_acc: {:.5f}, rgb_acc: {:.5f}\"", ".", "format", "(", "\n", "set_name", ",", "metrics", "[", "\"loss\"", "]", ",", "metrics", "[", "\"depth_acc\"", "]", ",", "metrics", "[", "\"rgb_acc\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.utils.utils.numpy_seed": [[39, 54], ["numpy.random.get_state", "numpy.random.seed", "len", "int", "numpy.random.set_state", "hash"], "function", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "numpy_seed", "(", "seed", ",", "*", "addl_seeds", ")", ":", "\n", "    ", "\"\"\"Context manager which seeds the NumPy PRNG with the specified seed and\n    restores the state afterward\"\"\"", "\n", "if", "seed", "is", "None", ":", "\n", "        ", "yield", "\n", "return", "\n", "", "if", "len", "(", "addl_seeds", ")", ">", "0", ":", "\n", "        ", "seed", "=", "int", "(", "hash", "(", "(", "seed", ",", "*", "addl_seeds", ")", ")", "%", "1e6", ")", "\n", "", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "np", ".", "random", ".", "set_state", "(", "state", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hanmenghan_TMC.models.TMC.TMC.__init__": [[32, 54], ["torch.Module.__init__", "models.image.ImageEncoder", "models.image.ImageEncoder", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "TMC.TMC.clf_depth.append", "TMC.TMC.clf_rgb.append", "TMC.TMC.clf_depth.append", "TMC.TMC.clf_depth.append", "TMC.TMC.clf_depth.append", "torch.Linear", "torch.Linear", "torch.Linear", "TMC.TMC.clf_rgb.append", "TMC.TMC.clf_rgb.append", "TMC.TMC.clf_rgb.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "TMC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "rgbenc", "=", "ImageEncoder", "(", "args", ")", "\n", "self", ".", "depthenc", "=", "ImageEncoder", "(", "args", ")", "\n", "depth_last_size", "=", "args", ".", "img_hidden_sz", "*", "args", ".", "num_image_embeds", "\n", "rgb_last_size", "=", "args", ".", "img_hidden_sz", "*", "args", ".", "num_image_embeds", "\n", "self", ".", "clf_depth", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "clf_rgb", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "hidden", "in", "args", ".", "hidden", ":", "\n", "            ", "self", ".", "clf_depth", ".", "append", "(", "nn", ".", "Linear", "(", "depth_last_size", ",", "hidden", ")", ")", "\n", "self", ".", "clf_depth", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "clf_depth", ".", "append", "(", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", ")", "\n", "depth_last_size", "=", "hidden", "\n", "", "self", ".", "clf_depth", ".", "append", "(", "nn", ".", "Linear", "(", "depth_last_size", ",", "args", ".", "n_classes", ")", ")", "\n", "\n", "for", "hidden", "in", "args", ".", "hidden", ":", "\n", "            ", "self", ".", "clf_rgb", ".", "append", "(", "nn", ".", "Linear", "(", "rgb_last_size", ",", "hidden", ")", ")", "\n", "self", ".", "clf_rgb", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "clf_rgb", ".", "append", "(", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", ")", "\n", "rgb_last_size", "=", "hidden", "\n", "", "self", ".", "clf_rgb", ".", "append", "(", "nn", ".", "Linear", "(", "rgb_last_size", ",", "args", ".", "n_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.models.TMC.TMC.DS_Combin_two": [[55, 92], ["dict", "range", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "u[].expand", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "u[].expand", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "dict", "dict", "dict", "dict", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "b[].view", "b[].view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "S_a.expand", "S[].expand", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "def", "DS_Combin_two", "(", "self", ",", "alpha1", ",", "alpha2", ")", ":", "\n", "# Calculate the merger of two DS evidences", "\n", "        ", "alpha", "=", "dict", "(", ")", "\n", "alpha", "[", "0", "]", ",", "alpha", "[", "1", "]", "=", "alpha1", ",", "alpha2", "\n", "b", ",", "S", ",", "E", ",", "u", "=", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "v", "in", "range", "(", "2", ")", ":", "\n", "            ", "S", "[", "v", "]", "=", "torch", ".", "sum", "(", "alpha", "[", "v", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "E", "[", "v", "]", "=", "alpha", "[", "v", "]", "-", "1", "\n", "b", "[", "v", "]", "=", "E", "[", "v", "]", "/", "(", "S", "[", "v", "]", ".", "expand", "(", "E", "[", "v", "]", ".", "shape", ")", ")", "\n", "u", "[", "v", "]", "=", "self", ".", "args", ".", "n_classes", "/", "S", "[", "v", "]", "\n", "\n", "# b^0 @ b^(0+1)", "\n", "", "bb", "=", "torch", ".", "bmm", "(", "b", "[", "0", "]", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "n_classes", ",", "1", ")", ",", "b", "[", "1", "]", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "args", ".", "n_classes", ")", ")", "\n", "# b^0 * u^1", "\n", "uv1_expand", "=", "u", "[", "1", "]", ".", "expand", "(", "b", "[", "0", "]", ".", "shape", ")", "\n", "bu", "=", "torch", ".", "mul", "(", "b", "[", "0", "]", ",", "uv1_expand", ")", "\n", "# b^1 * u^0", "\n", "uv_expand", "=", "u", "[", "0", "]", ".", "expand", "(", "b", "[", "0", "]", ".", "shape", ")", "\n", "ub", "=", "torch", ".", "mul", "(", "b", "[", "1", "]", ",", "uv_expand", ")", "\n", "# calculate K", "\n", "bb_sum", "=", "torch", ".", "sum", "(", "bb", ",", "dim", "=", "(", "1", ",", "2", ")", ",", "out", "=", "None", ")", "\n", "bb_diag", "=", "torch", ".", "diagonal", "(", "bb", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "# bb_diag1 = torch.diag(torch.mm(b[v], torch.transpose(b[v+1], 0, 1)))", "\n", "K", "=", "bb_sum", "-", "bb_diag", "\n", "\n", "# calculate b^a", "\n", "b_a", "=", "(", "torch", ".", "mul", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ")", "+", "bu", "+", "ub", ")", "/", "(", "(", "1", "-", "K", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "b", "[", "0", "]", ".", "shape", ")", ")", "\n", "# calculate u^a", "\n", "u_a", "=", "torch", ".", "mul", "(", "u", "[", "0", "]", ",", "u", "[", "1", "]", ")", "/", "(", "(", "1", "-", "K", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "u", "[", "0", "]", ".", "shape", ")", ")", "\n", "# test = torch.sum(b_a, dim = 1, keepdim = True) + u_a #Verify programming errors", "\n", "\n", "# calculate new S", "\n", "S_a", "=", "self", ".", "args", ".", "n_classes", "/", "u_a", "\n", "# calculate new e_k", "\n", "e_a", "=", "torch", ".", "mul", "(", "b_a", ",", "S_a", ".", "expand", "(", "b_a", ".", "shape", ")", ")", "\n", "alpha_a", "=", "e_a", "+", "1", "\n", "return", "alpha_a", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.models.TMC.TMC.forward": [[93, 109], ["TMC.TMC.depthenc", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "TMC.TMC.rgbenc", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "TMC.TMC.DS_Combin_two", "layer", "layer", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.models.TMC.TMC.DS_Combin_two"], ["", "def", "forward", "(", "self", ",", "rgb", ",", "depth", ")", ":", "\n", "        ", "depth", "=", "self", ".", "depthenc", "(", "depth", ")", "\n", "depth", "=", "torch", ".", "flatten", "(", "depth", ",", "start_dim", "=", "1", ")", "\n", "rgb", "=", "self", ".", "rgbenc", "(", "rgb", ")", "\n", "rgb", "=", "torch", ".", "flatten", "(", "rgb", ",", "start_dim", "=", "1", ")", "\n", "depth_out", "=", "depth", "\n", "for", "layer", "in", "self", ".", "clf_depth", ":", "\n", "            ", "depth_out", "=", "layer", "(", "depth_out", ")", "\n", "", "rgb_out", "=", "rgb", "\n", "for", "layer", "in", "self", ".", "clf_rgb", ":", "\n", "            ", "rgb_out", "=", "layer", "(", "rgb_out", ")", "\n", "\n", "", "depth_evidence", ",", "rgb_evidence", "=", "F", ".", "softplus", "(", "depth_out", ")", ",", "F", ".", "softplus", "(", "rgb_out", ")", "\n", "depth_alpha", ",", "rgb_alpha", "=", "depth_evidence", "+", "1", ",", "rgb_evidence", "+", "1", "\n", "depth_rgb_alpha", "=", "self", ".", "DS_Combin_two", "(", "depth_alpha", ",", "rgb_alpha", ")", "\n", "return", "depth_alpha", ",", "rgb_alpha", ",", "depth_rgb_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.models.TMC.ETMC.__init__": [[112, 122], ["TMC.TMC.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "TMC.ETMC.clf.append", "TMC.ETMC.clf.append", "TMC.ETMC.clf.append", "TMC.ETMC.clf.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "ETMC", ",", "self", ")", ".", "__init__", "(", "args", ")", "\n", "last_size", "=", "args", ".", "img_hidden_sz", "*", "args", ".", "num_image_embeds", "+", "args", ".", "img_hidden_sz", "*", "args", ".", "num_image_embeds", "\n", "self", ".", "clf", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "hidden", "in", "args", ".", "hidden", ":", "\n", "            ", "self", ".", "clf", ".", "append", "(", "nn", ".", "Linear", "(", "last_size", ",", "hidden", ")", ")", "\n", "self", ".", "clf", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "clf", ".", "append", "(", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", ")", "\n", "last_size", "=", "hidden", "\n", "", "self", ".", "clf", ".", "append", "(", "nn", ".", "Linear", "(", "last_size", ",", "args", ".", "n_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.models.TMC.ETMC.forward": [[123, 143], ["TMC.ETMC.depthenc", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "TMC.ETMC.rgbenc", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TMC.ETMC.DS_Combin_two", "layer", "layer", "layer", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "torch.softplus", "TMC.ETMC.DS_Combin_two"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.models.TMC.TMC.DS_Combin_two", "home.repos.pwc.inspect_result.hanmenghan_TMC.models.TMC.TMC.DS_Combin_two"], ["", "def", "forward", "(", "self", ",", "rgb", ",", "depth", ")", ":", "\n", "        ", "depth", "=", "self", ".", "depthenc", "(", "depth", ")", "\n", "depth", "=", "torch", ".", "flatten", "(", "depth", ",", "start_dim", "=", "1", ")", "\n", "rgb", "=", "self", ".", "rgbenc", "(", "rgb", ")", "\n", "rgb", "=", "torch", ".", "flatten", "(", "rgb", ",", "start_dim", "=", "1", ")", "\n", "depth_out", "=", "depth", "\n", "for", "layer", "in", "self", ".", "clf_depth", ":", "\n", "            ", "depth_out", "=", "layer", "(", "depth_out", ")", "\n", "", "rgb_out", "=", "rgb", "\n", "for", "layer", "in", "self", ".", "clf_rgb", ":", "\n", "            ", "rgb_out", "=", "layer", "(", "rgb_out", ")", "\n", "\n", "", "pseudo_out", "=", "torch", ".", "cat", "(", "[", "rgb", ",", "depth", "]", ",", "-", "1", ")", "\n", "for", "layer", "in", "self", ".", "clf", ":", "\n", "            ", "pseudo_out", "=", "layer", "(", "pseudo_out", ")", "\n", "\n", "", "depth_evidence", ",", "rgb_evidence", ",", "pseudo_evidence", "=", "F", ".", "softplus", "(", "depth_out", ")", ",", "F", ".", "softplus", "(", "rgb_out", ")", ",", "F", ".", "softplus", "(", "pseudo_out", ")", "\n", "depth_alpha", ",", "rgb_alpha", ",", "pseudo_alpha", "=", "depth_evidence", "+", "1", ",", "rgb_evidence", "+", "1", ",", "pseudo_evidence", "+", "1", "\n", "depth_rgb_alpha", "=", "self", ".", "DS_Combin_two", "(", "self", ".", "DS_Combin_two", "(", "depth_alpha", ",", "rgb_alpha", ")", ",", "pseudo_alpha", ")", "\n", "return", "depth_alpha", ",", "rgb_alpha", ",", "pseudo_alpha", ",", "depth_rgb_alpha", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hanmenghan_TMC.models.TMC.KL": [[8, 18], ["torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.ones", "torch.ones", "torch.ones", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "KL", "(", "alpha", ",", "c", ")", ":", "\n", "    ", "beta", "=", "torch", ".", "ones", "(", "(", "1", ",", "c", ")", ")", ".", "cuda", "(", ")", "\n", "S_alpha", "=", "torch", ".", "sum", "(", "alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "S_beta", "=", "torch", ".", "sum", "(", "beta", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "lnB", "=", "torch", ".", "lgamma", "(", "S_alpha", ")", "-", "torch", ".", "sum", "(", "torch", ".", "lgamma", "(", "alpha", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "lnB_uni", "=", "torch", ".", "sum", "(", "torch", ".", "lgamma", "(", "beta", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "-", "torch", ".", "lgamma", "(", "S_beta", ")", "\n", "dg0", "=", "torch", ".", "digamma", "(", "S_alpha", ")", "\n", "dg1", "=", "torch", ".", "digamma", "(", "alpha", ")", "\n", "kl", "=", "torch", ".", "sum", "(", "(", "alpha", "-", "beta", ")", "*", "(", "dg1", "-", "dg0", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "lnB", "+", "lnB_uni", "\n", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.models.TMC.ce_loss": [[19, 29], ["torch.sum", "torch.sum", "torch.sum", "torch.one_hot", "torch.sum", "torch.sum", "torch.sum", "min", "torch.mean", "torch.mean", "torch.mean", "TMC.KL", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.KL"], ["", "def", "ce_loss", "(", "p", ",", "alpha", ",", "c", ",", "global_step", ",", "annealing_step", ")", ":", "\n", "    ", "S", "=", "torch", ".", "sum", "(", "alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "E", "=", "alpha", "-", "1", "\n", "label", "=", "F", ".", "one_hot", "(", "p", ",", "num_classes", "=", "c", ")", "\n", "A", "=", "torch", ".", "sum", "(", "label", "*", "(", "torch", ".", "digamma", "(", "S", ")", "-", "torch", ".", "digamma", "(", "alpha", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "annealing_coef", "=", "min", "(", "1", ",", "global_step", "/", "annealing_step", ")", "\n", "alp", "=", "E", "*", "(", "1", "-", "label", ")", "+", "1", "\n", "B", "=", "annealing_coef", "*", "KL", "(", "alp", ",", "c", ")", "\n", "return", "torch", ".", "mean", "(", "(", "A", "+", "B", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.models.image.ImageEncoder.__init__": [[7, 31], ["torch.Module.__init__", "torchvision.models.resnet18", "torch.Sequential", "torch.Sequential", "list", "pool_func", "torchvision.models.resnet18.children", "pool_func", "pool_func", "pool_func", "pool_func"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "ImageEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n", "model", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "modules", "=", "list", "(", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "pool_func", "=", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "\n", "if", "args", ".", "img_embed_pool_type", "==", "\"avg\"", "\n", "else", "nn", ".", "AdaptiveMaxPool2d", "\n", ")", "\n", "\n", "if", "args", ".", "num_image_embeds", "in", "[", "1", ",", "2", ",", "3", ",", "5", ",", "7", "]", ":", "\n", "            ", "self", ".", "pool", "=", "pool_func", "(", "(", "args", ".", "num_image_embeds", ",", "1", ")", ")", "\n", "", "elif", "args", ".", "num_image_embeds", "==", "4", ":", "\n", "            ", "self", ".", "pool", "=", "pool_func", "(", "(", "2", ",", "2", ")", ")", "\n", "", "elif", "args", ".", "num_image_embeds", "==", "6", ":", "\n", "            ", "self", ".", "pool", "=", "pool_func", "(", "(", "3", ",", "2", ")", ")", "\n", "", "elif", "args", ".", "num_image_embeds", "==", "8", ":", "\n", "            ", "self", ".", "pool", "=", "pool_func", "(", "(", "4", ",", "2", ")", ")", "\n", "", "elif", "args", ".", "num_image_embeds", "==", "9", ":", "\n", "            ", "self", ".", "pool", "=", "pool_func", "(", "(", "3", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.models.image.ImageEncoder.forward": [[32, 39], ["image.ImageEncoder.model", "image.ImageEncoder.pool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "out.transpose().contiguous.transpose().contiguous.transpose().contiguous", "out.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Bx3x224x224 -> Bx2048x7x7 -> Bx2048xN -> BxNx2048", "\n", "        ", "out", "=", "self", ".", "model", "(", "x", ")", "\n", "out", "=", "self", ".", "pool", "(", "out", ")", "\n", "out", "=", "torch", ".", "flatten", "(", "out", ",", "start_dim", "=", "2", ")", "\n", "out", "=", "out", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "out", "# BxNx2048", "", "", "", ""]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.aligned_conc_dataset.AlignedConcDataset.__init__": [[19, 28], ["aligned_conc_dataset.find_classes", "dict", "torchvision.datasets.folder.make_dataset", "zip", "range", "len"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.data.aligned_conc_dataset.find_classes"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "data_dir", "=", "None", ",", "transform", "=", "None", ",", "labeled", "=", "True", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "labeled", "=", "labeled", "\n", "\n", "self", ".", "classes", ",", "self", ".", "class_to_idx", "=", "find_classes", "(", "self", ".", "data_dir", ")", "\n", "self", ".", "int_to_class", "=", "dict", "(", "zip", "(", "range", "(", "len", "(", "self", ".", "classes", ")", ")", ",", "self", ".", "classes", ")", ")", "\n", "self", ".", "imgs", "=", "make_dataset", "(", "self", ".", "data_dir", ",", "self", ".", "class_to_idx", ",", "'png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.aligned_conc_dataset.AlignedConcDataset.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.aligned_conc_dataset.AlignedConcDataset.__getitem__": [[32, 61], ["os.path.basename", "PIL.Image.open().convert", "int", "PIL.Image.open().convert.crop().resize", "PIL.Image.open().convert.crop().resize", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "aligned_conc_dataset.AlignedConcDataset.transform", "aligned_conc_dataset.AlignedConcDataset.transform", "PIL.Image.open", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "labeled", ":", "\n", "            ", "img_path", ",", "label", "=", "self", ".", "imgs", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "img_path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "\n", "", "img_name", "=", "os", ".", "path", ".", "basename", "(", "img_path", ")", "\n", "AB_conc", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "# split RGB and Depth as A and B", "\n", "w", ",", "h", "=", "AB_conc", ".", "size", "\n", "w2", "=", "int", "(", "w", "/", "2", ")", "\n", "if", "w2", ">", "self", ".", "cfg", ".", "FINE_SIZE", ":", "\n", "            ", "A", "=", "AB_conc", ".", "crop", "(", "(", "0", ",", "0", ",", "w2", ",", "h", ")", ")", ".", "resize", "(", "(", "self", ".", "cfg", ".", "LOAD_SIZE", ",", "self", ".", "cfg", ".", "LOAD_SIZE", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "B", "=", "AB_conc", ".", "crop", "(", "(", "w2", ",", "0", ",", "w", ",", "h", ")", ")", ".", "resize", "(", "(", "self", ".", "cfg", ".", "LOAD_SIZE", ",", "self", ".", "cfg", ".", "LOAD_SIZE", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "", "else", ":", "\n", "            ", "A", "=", "AB_conc", ".", "crop", "(", "(", "0", ",", "0", ",", "w2", ",", "h", ")", ")", "\n", "B", "=", "AB_conc", ".", "crop", "(", "(", "w2", ",", "0", ",", "w", ",", "h", ")", ")", "\n", "\n", "", "if", "self", ".", "labeled", ":", "\n", "            ", "sample", "=", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "'img_name'", ":", "img_name", ",", "'label'", ":", "label", "}", "\n", "", "else", ":", "\n", "            ", "sample", "=", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "'img_name'", ":", "img_name", "}", "\n", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "sample", "[", "'A'", "]", "=", "self", ".", "transform", "(", "sample", "[", "'A'", "]", ")", "\n", "sample", "[", "'B'", "]", "=", "self", ".", "transform", "(", "sample", "[", "'B'", "]", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.aligned_conc_dataset.RandomCrop.__call__": [[65, 90], ["aligned_conc_dataset.RandomCrop.get_params", "torchvision.transforms.functional.crop", "torchvision.transforms.functional.crop", "torchvision.transforms.functional.pad", "torchvision.transforms.functional.pad", "torchvision.transforms.functional.pad", "torchvision.transforms.functional.pad", "torchvision.transforms.functional.pad", "torchvision.transforms.functional.pad", "int", "int", "int", "int"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "A", ",", "B", "=", "sample", "[", "'A'", "]", ",", "sample", "[", "'B'", "]", "\n", "\n", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "A", "=", "F", ".", "pad", "(", "A", ",", "self", ".", "padding", ")", "\n", "B", "=", "F", ".", "pad", "(", "B", ",", "self", ".", "padding", ")", "\n", "\n", "# pad the width if needed", "\n", "", "if", "self", ".", "pad_if_needed", "and", "A", ".", "size", "[", "0", "]", "<", "self", ".", "size", "[", "1", "]", ":", "\n", "            ", "A", "=", "F", ".", "pad", "(", "A", ",", "(", "int", "(", "(", "1", "+", "self", ".", "size", "[", "1", "]", "-", "A", ".", "size", "[", "0", "]", ")", "/", "2", ")", ",", "0", ")", ")", "\n", "B", "=", "F", ".", "pad", "(", "B", ",", "(", "int", "(", "(", "1", "+", "self", ".", "size", "[", "1", "]", "-", "B", ".", "size", "[", "0", "]", ")", "/", "2", ")", ",", "0", ")", ")", "\n", "# pad the height if needed", "\n", "", "if", "self", ".", "pad_if_needed", "and", "A", ".", "size", "[", "1", "]", "<", "self", ".", "size", "[", "0", "]", ":", "\n", "            ", "A", "=", "F", ".", "pad", "(", "A", ",", "(", "0", ",", "int", "(", "(", "1", "+", "self", ".", "size", "[", "0", "]", "-", "A", ".", "size", "[", "1", "]", ")", "/", "2", ")", ")", ")", "\n", "B", "=", "F", ".", "pad", "(", "B", ",", "(", "0", ",", "int", "(", "(", "1", "+", "self", ".", "size", "[", "0", "]", "-", "B", ".", "size", "[", "1", "]", ")", "/", "2", ")", ")", ")", "\n", "\n", "", "i", ",", "j", ",", "h", ",", "w", "=", "self", ".", "get_params", "(", "A", ",", "self", ".", "size", ")", "\n", "sample", "[", "'A'", "]", "=", "F", ".", "crop", "(", "A", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "sample", "[", "'B'", "]", "=", "F", ".", "crop", "(", "B", ",", "i", ",", "j", ",", "h", ",", "w", ")", "\n", "\n", "# _i, _j, _h, _w = self.get_params(A, self.size)", "\n", "# sample['A'] = F.crop(A, i, j, h, w)", "\n", "# sample['B'] = F.crop(B, _i, _j, _h, _w)", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.aligned_conc_dataset.CenterCrop.__call__": [[94, 99], ["torchvision.transforms.functional.center_crop", "torchvision.transforms.functional.center_crop"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "A", ",", "B", "=", "sample", "[", "'A'", "]", ",", "sample", "[", "'B'", "]", "\n", "sample", "[", "'A'", "]", "=", "F", ".", "center_crop", "(", "A", ",", "self", ".", "size", ")", "\n", "sample", "[", "'B'", "]", "=", "F", ".", "center_crop", "(", "B", ",", "self", ".", "size", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.aligned_conc_dataset.RandomHorizontalFlip.__call__": [[103, 113], ["random.random", "torchvision.transforms.functional.hflip", "torchvision.transforms.functional.hflip"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "A", ",", "B", "=", "sample", "[", "'A'", "]", ",", "sample", "[", "'B'", "]", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "A", "=", "F", ".", "hflip", "(", "A", ")", "\n", "B", "=", "F", ".", "hflip", "(", "B", ")", "\n", "\n", "", "sample", "[", "'A'", "]", "=", "A", "\n", "sample", "[", "'B'", "]", "=", "B", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.aligned_conc_dataset.Resize.__call__": [[140, 149], ["torchvision.transforms.functional.resize", "torchvision.transforms.functional.resize"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "A", ",", "B", "=", "sample", "[", "'A'", "]", ",", "sample", "[", "'B'", "]", "\n", "h", "=", "self", ".", "size", "[", "0", "]", "\n", "w", "=", "self", ".", "size", "[", "1", "]", "\n", "\n", "sample", "[", "'A'", "]", "=", "F", ".", "resize", "(", "A", ",", "(", "h", ",", "w", ")", ")", "\n", "sample", "[", "'B'", "]", "=", "F", ".", "resize", "(", "B", ",", "(", "h", ",", "w", ")", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.aligned_conc_dataset.ToTensor.__call__": [[152, 164], ["torchvision.transforms.functional.to_tensor", "torchvision.transforms.functional.to_tensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "A", ",", "B", "=", "sample", "[", "'A'", "]", ",", "sample", "[", "'B'", "]", "\n", "\n", "# if isinstance(sample, dict):", "\n", "#     for key, value in sample:", "\n", "#         _list = sample[key]", "\n", "#         sample[key] = [F.to_tensor(item) for item in _list]", "\n", "\n", "sample", "[", "'A'", "]", "=", "F", ".", "to_tensor", "(", "A", ")", "\n", "sample", "[", "'B'", "]", "=", "F", ".", "to_tensor", "(", "B", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.aligned_conc_dataset.Normalize.__call__": [[168, 174], ["torchvision.transforms.functional.normalize", "torchvision.transforms.functional.normalize"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.data.normalize", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.data.normalize"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "A", ",", "B", "=", "sample", "[", "'A'", "]", ",", "sample", "[", "'B'", "]", "\n", "sample", "[", "'A'", "]", "=", "F", ".", "normalize", "(", "A", ",", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "sample", "[", "'B'", "]", "=", "F", ".", "normalize", "(", "B", ",", "self", ".", "mean", ",", "self", ".", "std", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.aligned_conc_dataset.Lambda.__call__": [[178, 180], ["aligned_conc_dataset.Lambda.lambd"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "sample", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.aligned_conc_dataset.find_classes": [[115, 136], ["classes.sort", "range", "os.scandir", "d.is_dir", "os.listdir", "os.path.isdir", "len", "os.path.join"], "function", ["None"], ["", "", "def", "find_classes", "(", "dir", ")", ":", "\n", "    ", "\"\"\"\n    Finds the class folders in a dataset.\n\n    Args:\n        dir (string): Root directory path.\n\n    Returns:\n        tuple: (classes, class_to_idx) where classes are relative to (dir), and class_to_idx is a dictionary.\n\n    Ensures:\n        No class is a subdirectory of another.\n    \"\"\"", "\n", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "5", ")", ":", "\n", "# Faster and available in Python 3.5 and above", "\n", "        ", "classes", "=", "[", "d", ".", "name", "for", "d", "in", "os", ".", "scandir", "(", "dir", ")", "if", "d", ".", "is_dir", "(", ")", "]", "\n", "", "else", ":", "\n", "        ", "classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "d", ")", ")", "]", "\n", "", "classes", ".", "sort", "(", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.__init__.DataProvider.__init__": [[5, 16], ["super().__init__", "torch.utils.data.DataLoader", "int"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "dataset", ",", "batch_size", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "if", "batch_size", "is", "None", ":", "\n", "            ", "batch_size", "=", "cfg", ".", "BATCH_SIZE", "\n", "", "self", ".", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "int", "(", "cfg", ".", "WORKERS", ")", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.__init__.DataProvider.__len__": [[17, 19], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.data.__init__.DataProvider.__iter__": [[20, 23], ["enumerate"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "dataloader", ")", ":", "\n", "            ", "yield", "data", "", "", "", "", ""]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.train.AverageMeter.__init__": [[16, 18], ["train.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.train.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.train.AverageMeter.reset": [[19, 24], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.train.AverageMeter.update": [[25, 30], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.data.Multi_view_data.__init__": [[12, 39], ["torch.utils.data.Dataset.__init__", "scipy.loadmat", "int", "dict", "numpy.zeros", "numpy.reshape", "range", "range", "numpy.min", "numpy.shape", "data.normalize", "data.normalize", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.Classifier.__init__", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.data.normalize", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.data.normalize"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param root: data name and path\n        :param train: load training set or test set\n        \"\"\"", "\n", "super", "(", "Multi_view_data", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "train", "=", "train", "\n", "data_path", "=", "self", ".", "root", "+", "'.mat'", "\n", "\n", "dataset", "=", "sio", ".", "loadmat", "(", "data_path", ")", "\n", "view_number", "=", "int", "(", "(", "len", "(", "dataset", ")", "-", "5", ")", "/", "2", ")", "\n", "self", ".", "X", "=", "dict", "(", ")", "\n", "if", "train", ":", "\n", "            ", "for", "v_num", "in", "range", "(", "view_number", ")", ":", "\n", "                ", "self", ".", "X", "[", "v_num", "]", "=", "normalize", "(", "dataset", "[", "'x'", "+", "str", "(", "v_num", "+", "1", ")", "+", "'_train'", "]", ")", "\n", "", "y", "=", "dataset", "[", "'gt_train'", "]", "\n", "", "else", ":", "\n", "            ", "for", "v_num", "in", "range", "(", "view_number", ")", ":", "\n", "                ", "self", ".", "X", "[", "v_num", "]", "=", "normalize", "(", "dataset", "[", "'x'", "+", "str", "(", "v_num", "+", "1", ")", "+", "'_test'", "]", ")", "\n", "", "y", "=", "dataset", "[", "'gt_test'", "]", "\n", "\n", "", "if", "np", ".", "min", "(", "y", ")", "==", "1", ":", "\n", "            ", "y", "=", "y", "-", "1", "\n", "", "tmp", "=", "np", ".", "zeros", "(", "y", ".", "shape", "[", "0", "]", ")", "\n", "y", "=", "np", ".", "reshape", "(", "y", ",", "np", ".", "shape", "(", "tmp", ")", ")", "\n", "self", ".", "y", "=", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.data.Multi_view_data.__getitem__": [[40, 46], ["dict", "range", "len", "[].astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", "=", "dict", "(", ")", "\n", "for", "v_num", "in", "range", "(", "len", "(", "self", ".", "X", ")", ")", ":", "\n", "            ", "data", "[", "v_num", "]", "=", "(", "self", ".", "X", "[", "v_num", "]", "[", "index", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "target", "=", "self", ".", "y", "[", "index", "]", "\n", "return", "data", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.data.Multi_view_data.__len__": [[47, 49], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "X", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.data.normalize": [[51, 58], ["sklearn.preprocessing.MinMaxScaler.fit_transform", "sklearn.preprocessing.MinMaxScaler", "sklearn.preprocessing.MinMaxScaler"], "function", ["None"], ["", "", "def", "normalize", "(", "x", ",", "min", "=", "0", ")", ":", "\n", "    ", "if", "min", "==", "0", ":", "\n", "        ", "scaler", "=", "MinMaxScaler", "(", "[", "0", ",", "1", "]", ")", "\n", "", "else", ":", "# min=-1", "\n", "        ", "scaler", "=", "MinMaxScaler", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "", "norm_x", "=", "scaler", ".", "fit_transform", "(", "x", ")", "\n", "return", "norm_x", "\n", "", ""]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.TMC.__init__": [[47, 59], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.Classifier", "range"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classes", ",", "views", ",", "classifier_dims", ",", "lambda_epochs", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        :param classes: Number of classification categories\n        :param views: Number of views\n        :param classifier_dims: Dimension of the classifier\n        :param annealing_epoch: KL divergence annealing epoch during training\n        \"\"\"", "\n", "super", "(", "TMC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "views", "=", "views", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "lambda_epochs", "=", "lambda_epochs", "\n", "self", ".", "Classifiers", "=", "nn", ".", "ModuleList", "(", "[", "Classifier", "(", "classifier_dims", "[", "i", "]", ",", "self", ".", "classes", ")", "for", "i", "in", "range", "(", "self", ".", "views", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.TMC.DS_Combin": [[60, 111], ["range", "dict", "range", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "u[].expand", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "u[].expand", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.diagonal().sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "dict", "dict", "dict", "dict", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "b[].view", "b[].view", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "S_a.expand", "len", "model.TMC.DS_Combin.DS_Combin_two"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.models.TMC.TMC.DS_Combin_two"], ["", "def", "DS_Combin", "(", "self", ",", "alpha", ")", ":", "\n", "        ", "\"\"\"\n        :param alpha: All Dirichlet distribution parameters.\n        :return: Combined Dirichlet distribution parameters.\n        \"\"\"", "\n", "def", "DS_Combin_two", "(", "alpha1", ",", "alpha2", ")", ":", "\n", "            ", "\"\"\"\n            :param alpha1: Dirichlet distribution parameters of view 1\n            :param alpha2: Dirichlet distribution parameters of view 2\n            :return: Combined Dirichlet distribution parameters\n            \"\"\"", "\n", "alpha", "=", "dict", "(", ")", "\n", "alpha", "[", "0", "]", ",", "alpha", "[", "1", "]", "=", "alpha1", ",", "alpha2", "\n", "b", ",", "S", ",", "E", ",", "u", "=", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "v", "in", "range", "(", "2", ")", ":", "\n", "                ", "S", "[", "v", "]", "=", "torch", ".", "sum", "(", "alpha", "[", "v", "]", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "E", "[", "v", "]", "=", "alpha", "[", "v", "]", "-", "1", "\n", "b", "[", "v", "]", "=", "E", "[", "v", "]", "/", "(", "S", "[", "v", "]", ".", "expand", "(", "E", "[", "v", "]", ".", "shape", ")", ")", "\n", "u", "[", "v", "]", "=", "self", ".", "classes", "/", "S", "[", "v", "]", "\n", "\n", "# b^0 @ b^(0+1)", "\n", "", "bb", "=", "torch", ".", "bmm", "(", "b", "[", "0", "]", ".", "view", "(", "-", "1", ",", "self", ".", "classes", ",", "1", ")", ",", "b", "[", "1", "]", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "classes", ")", ")", "\n", "# b^0 * u^1", "\n", "uv1_expand", "=", "u", "[", "1", "]", ".", "expand", "(", "b", "[", "0", "]", ".", "shape", ")", "\n", "bu", "=", "torch", ".", "mul", "(", "b", "[", "0", "]", ",", "uv1_expand", ")", "\n", "# b^1 * u^0", "\n", "uv_expand", "=", "u", "[", "0", "]", ".", "expand", "(", "b", "[", "0", "]", ".", "shape", ")", "\n", "ub", "=", "torch", ".", "mul", "(", "b", "[", "1", "]", ",", "uv_expand", ")", "\n", "# calculate C", "\n", "bb_sum", "=", "torch", ".", "sum", "(", "bb", ",", "dim", "=", "(", "1", ",", "2", ")", ",", "out", "=", "None", ")", "\n", "bb_diag", "=", "torch", ".", "diagonal", "(", "bb", ",", "dim1", "=", "-", "2", ",", "dim2", "=", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "C", "=", "bb_sum", "-", "bb_diag", "\n", "\n", "# calculate b^a", "\n", "b_a", "=", "(", "torch", ".", "mul", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ")", "+", "bu", "+", "ub", ")", "/", "(", "(", "1", "-", "C", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "b", "[", "0", "]", ".", "shape", ")", ")", "\n", "# calculate u^a", "\n", "u_a", "=", "torch", ".", "mul", "(", "u", "[", "0", "]", ",", "u", "[", "1", "]", ")", "/", "(", "(", "1", "-", "C", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "u", "[", "0", "]", ".", "shape", ")", ")", "\n", "\n", "# calculate new S", "\n", "S_a", "=", "self", ".", "classes", "/", "u_a", "\n", "# calculate new e_k", "\n", "e_a", "=", "torch", ".", "mul", "(", "b_a", ",", "S_a", ".", "expand", "(", "b_a", ".", "shape", ")", ")", "\n", "alpha_a", "=", "e_a", "+", "1", "\n", "return", "alpha_a", "\n", "\n", "", "for", "v", "in", "range", "(", "len", "(", "alpha", ")", "-", "1", ")", ":", "\n", "            ", "if", "v", "==", "0", ":", "\n", "                ", "alpha_a", "=", "DS_Combin_two", "(", "alpha", "[", "0", "]", ",", "alpha", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "alpha_a", "=", "DS_Combin_two", "(", "alpha_a", ",", "alpha", "[", "v", "+", "1", "]", ")", "\n", "", "", "return", "alpha_a", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.TMC.forward": [[112, 124], ["model.TMC.infer", "dict", "range", "model.TMC.DS_Combin", "model.ce_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "model.ce_loss"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.TMC.infer", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.TMC.DS_Combin", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss", "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss"], ["", "def", "forward", "(", "self", ",", "X", ",", "y", ",", "global_step", ")", ":", "\n", "        ", "evidence", "=", "self", ".", "infer", "(", "X", ")", "\n", "loss", "=", "0", "\n", "alpha", "=", "dict", "(", ")", "\n", "for", "v_num", "in", "range", "(", "len", "(", "X", ")", ")", ":", "\n", "            ", "alpha", "[", "v_num", "]", "=", "evidence", "[", "v_num", "]", "+", "1", "\n", "loss", "+=", "ce_loss", "(", "y", ",", "alpha", "[", "v_num", "]", ",", "self", ".", "classes", ",", "global_step", ",", "self", ".", "lambda_epochs", ")", "\n", "", "alpha_a", "=", "self", ".", "DS_Combin", "(", "alpha", ")", "\n", "evidence_a", "=", "alpha_a", "-", "1", "\n", "loss", "+=", "ce_loss", "(", "y", ",", "alpha_a", ",", "self", ".", "classes", ",", "global_step", ",", "self", ".", "lambda_epochs", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "return", "evidence", ",", "evidence_a", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.TMC.infer": [[125, 134], ["dict", "range"], "methods", ["None"], ["", "def", "infer", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        :param input: Multi-view data\n        :return: evidence of every view\n        \"\"\"", "\n", "evidence", "=", "dict", "(", ")", "\n", "for", "v_num", "in", "range", "(", "self", ".", "views", ")", ":", "\n", "            ", "evidence", "[", "v_num", "]", "=", "self", ".", "Classifiers", "[", "v_num", "]", "(", "input", "[", "v_num", "]", ")", "\n", "", "return", "evidence", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.Classifier.__init__": [[137, 145], ["torch.Module.__init__", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model.Classifier.fc.append", "model.Classifier.fc.append", "model.Classifier.fc.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softplus", "torch.Softplus", "torch.Softplus", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.Classifier.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classifier_dims", ",", "classes", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "len", "(", "classifier_dims", ")", "\n", "self", ".", "fc", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "self", ".", "fc", ".", "append", "(", "nn", ".", "Linear", "(", "classifier_dims", "[", "i", "]", ",", "classifier_dims", "[", "i", "+", "1", "]", ")", ")", "\n", "", "self", ".", "fc", ".", "append", "(", "nn", ".", "Linear", "(", "classifier_dims", "[", "self", ".", "num_layers", "-", "1", "]", ",", "classes", ")", ")", "\n", "self", ".", "fc", ".", "append", "(", "nn", ".", "Softplus", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.Classifier.forward": [[146, 151], ["range", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "fc", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "fc", ")", ")", ":", "\n", "            ", "h", "=", "self", ".", "fc", "[", "i", "]", "(", "h", ")", "\n", "", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.KL": [[7, 17], ["torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.ones", "torch.ones", "torch.ones", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.lgamma", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "KL", "(", "alpha", ",", "c", ")", ":", "\n", "    ", "beta", "=", "torch", ".", "ones", "(", "(", "1", ",", "c", ")", ")", ".", "cuda", "(", ")", "\n", "S_alpha", "=", "torch", ".", "sum", "(", "alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "S_beta", "=", "torch", ".", "sum", "(", "beta", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "lnB", "=", "torch", ".", "lgamma", "(", "S_alpha", ")", "-", "torch", ".", "sum", "(", "torch", ".", "lgamma", "(", "alpha", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "lnB_uni", "=", "torch", ".", "sum", "(", "torch", ".", "lgamma", "(", "beta", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "-", "torch", ".", "lgamma", "(", "S_beta", ")", "\n", "dg0", "=", "torch", ".", "digamma", "(", "S_alpha", ")", "\n", "dg1", "=", "torch", ".", "digamma", "(", "alpha", ")", "\n", "kl", "=", "torch", ".", "sum", "(", "(", "alpha", "-", "beta", ")", "*", "(", "dg1", "-", "dg0", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "lnB", "+", "lnB_uni", "\n", "return", "kl", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.ce_loss": [[19, 31], ["torch.sum", "torch.sum", "torch.sum", "torch.one_hot", "torch.sum", "torch.sum", "torch.sum", "min", "model.KL", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.KL"], ["", "def", "ce_loss", "(", "p", ",", "alpha", ",", "c", ",", "global_step", ",", "annealing_step", ")", ":", "\n", "    ", "S", "=", "torch", ".", "sum", "(", "alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "E", "=", "alpha", "-", "1", "\n", "label", "=", "F", ".", "one_hot", "(", "p", ",", "num_classes", "=", "c", ")", "\n", "A", "=", "torch", ".", "sum", "(", "label", "*", "(", "torch", ".", "digamma", "(", "S", ")", "-", "torch", ".", "digamma", "(", "alpha", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "annealing_coef", "=", "min", "(", "1", ",", "global_step", "/", "annealing_step", ")", "\n", "\n", "alp", "=", "E", "*", "(", "1", "-", "label", ")", "+", "1", "\n", "B", "=", "annealing_coef", "*", "KL", "(", "alp", ",", "c", ")", "\n", "\n", "return", "(", "A", "+", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.mse_loss": [[32, 43], ["torch.sum", "torch.sum", "torch.sum", "torch.one_hot", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "min", "model.KL"], "function", ["home.repos.pwc.inspect_result.hanmenghan_TMC.TMC ICLR.model.KL"], ["", "def", "mse_loss", "(", "p", ",", "alpha", ",", "c", ",", "global_step", ",", "annealing_step", "=", "1", ")", ":", "\n", "    ", "S", "=", "torch", ".", "sum", "(", "alpha", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "E", "=", "alpha", "-", "1", "\n", "m", "=", "alpha", "/", "S", "\n", "label", "=", "F", ".", "one_hot", "(", "p", ",", "num_classes", "=", "c", ")", "\n", "A", "=", "torch", ".", "sum", "(", "(", "label", "-", "m", ")", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "B", "=", "torch", ".", "sum", "(", "alpha", "*", "(", "S", "-", "alpha", ")", "/", "(", "S", "*", "S", "*", "(", "S", "+", "1", ")", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "annealing_coef", "=", "min", "(", "1", ",", "global_step", "/", "annealing_step", ")", "\n", "alp", "=", "E", "*", "(", "1", "-", "label", ")", "+", "1", "\n", "C", "=", "annealing_coef", "*", "KL", "(", "alp", ",", "c", ")", "\n", "return", "(", "A", "+", "B", ")", "+", "C", "\n", "\n"]]}