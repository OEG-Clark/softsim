{"home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.None.test_ELCFS._save_image": [[48, 55], ["numpy.save", "numpy.save", "numpy.save"], "function", ["None"], ["", "def", "_save_image", "(", "img", ",", "gth", ",", "pred", ",", "out_folder", ",", "out_name", ")", ":", "\n", "\n", "    ", "np", ".", "save", "(", "out_folder", "+", "'/'", "+", "out_name", "+", "'_img.npy'", ",", "img", ")", "\n", "np", ".", "save", "(", "out_folder", "+", "'/'", "+", "out_name", "+", "'_pred.npy'", ",", "pred", ")", "\n", "np", ".", "save", "(", "out_folder", "+", "'/'", "+", "out_name", "+", "'_gth.npy'", ",", "gth", ")", "\n", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.None.test_ELCFS.test": [[56, 107], ["networks.unet2d.Unet2D", "test_net.cuda.cuda", "os.path.join", "test_net.cuda.load_state_dict", "test_net.cuda.train", "enumerate", "numpy.array", "numpy.array", "numpy.mean().tolist", "numpy.mean().tolist", "torch.load", "print", "numpy.load", "numpy.expand_dims", "numpy.expand_dims", "torch.from_numpy().float", "test_net.cuda.", "pred.cpu().detach().numpy", "utils.util._connectivity_region_analysis", "utils.util._connectivity_region_analysis", "numpy.concatenate", "utils.util._eval_dice", "utils.util._eval_haus", "np.array.append", "np.array.append", "test_ELCFS._save_image", "np.expand_dims.transpose", "image.transpose", "image.transpose", "numpy.mean", "numpy.mean", "str", "torch.from_numpy", "pred.cpu().detach", "os.path.basename", "pred.cpu", "str"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util._connectivity_region_analysis", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util._connectivity_region_analysis", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util._eval_dice", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util._eval_haus", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.None.test_ELCFS._save_image"], ["", "def", "test", "(", "site_index", ",", "test_net_idx", ")", ":", "\n", "\n", "    ", "test_net", "=", "Unet2D", "(", ")", "\n", "test_net", "=", "test_net", ".", "cuda", "(", ")", "\n", "\n", "save_mode_path", "=", "os", ".", "path", ".", "join", "(", "model_path", "+", "'/model'", ",", "'epoch_'", "+", "str", "(", "test_net_idx", ")", "+", "'.pth'", ")", "\n", "test_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "save_mode_path", ")", ")", "\n", "test_net", ".", "train", "(", ")", "\n", "\n", "test_data_list", "=", "client_data_list", "[", "site_index", "]", "\n", "\n", "dice_array", "=", "[", "]", "\n", "haus_array", "=", "[", "]", "\n", "\n", "for", "fid", ",", "filename", "in", "enumerate", "(", "test_data_list", ")", ":", "\n", "# if 'S-5-L' not in filename:", "\n", "#     continue", "\n", "        ", "print", "(", "filename", ")", "\n", "data", "=", "np", ".", "load", "(", "filename", ")", "\n", "image", "=", "data", "[", "...", ",", ":", "3", "]", "#np.expand_dims(data[..., :3].transpose(2, 0, 1), axis=0)", "\n", "mask", "=", "data", "[", "...", ",", "3", ":", "]", "#np.expand_dims(data[..., 3:].transpose(2, 0, 1), axis=0)", "\n", "mask", "=", "np", ".", "expand_dims", "(", "mask", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "axis", "=", "0", ")", "\n", "pred_y_list", "=", "[", "]", "\n", "\n", "image_test", "=", "np", ".", "expand_dims", "(", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "axis", "=", "0", ")", "\n", "\n", "image_test", "=", "torch", ".", "from_numpy", "(", "image_test", ")", ".", "float", "(", ")", "\n", "\n", "logit", ",", "pred", ",", "_", "=", "test_net", "(", "image_test", ")", "\n", "pred_y", "=", "pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "pred_y", "[", "pred_y", ">", "0.75", "]", "=", "1", "\n", "pred_y", "[", "pred_y", "<", "0.75", "]", "=", "0", "\n", "\n", "pred_y_0", "=", "pred_y", "[", ":", ",", "0", ":", "1", ",", "...", "]", "\n", "pred_y_1", "=", "pred_y", "[", ":", ",", "1", ":", ",", "...", "]", "\n", "processed_pred_y_0", "=", "_connectivity_region_analysis", "(", "pred_y_0", ")", "\n", "processed_pred_y_1", "=", "_connectivity_region_analysis", "(", "pred_y_1", ")", "\n", "processed_pred_y", "=", "np", ".", "concatenate", "(", "[", "processed_pred_y_0", ",", "processed_pred_y_1", "]", ",", "axis", "=", "1", ")", "\n", "dice_subject", "=", "_eval_dice", "(", "mask", ",", "processed_pred_y", ")", "\n", "haus_subject", "=", "_eval_haus", "(", "mask", ",", "processed_pred_y", ")", "\n", "dice_array", ".", "append", "(", "dice_subject", ")", "\n", "haus_array", ".", "append", "(", "haus_subject", ")", "\n", "\n", "_save_image", "(", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "mask", "[", "0", "]", ",", "pred_y", "[", "0", "]", ",", "result_dir", ",", "out_name", "=", "str", "(", "site_index", ")", "+", "'_'", "+", "os", ".", "path", ".", "basename", "(", "filename", ")", ")", "\n", "", "dice_array", "=", "np", ".", "array", "(", "dice_array", ")", "\n", "haus_array", "=", "np", ".", "array", "(", "haus_array", ")", "\n", "\n", "dice_avg", "=", "np", ".", "mean", "(", "dice_array", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "haus_avg", "=", "np", ".", "mean", "(", "haus_array", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "\n", "return", "dice_avg", ",", "dice_array", ",", "haus_avg", ",", "haus_array", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.None.freq_space_interpolation_demo.extract_amp_spectrum": [[15, 21], ["numpy.fft.fft2", "numpy.abs", "numpy.angle"], "function", ["None"], ["def", "extract_amp_spectrum", "(", "trg_img", ")", ":", "\n", "\n", "    ", "fft_trg_np", "=", "np", ".", "fft", ".", "fft2", "(", "trg_img", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "amp_target", ",", "pha_trg", "=", "np", ".", "abs", "(", "fft_trg_np", ")", ",", "np", ".", "angle", "(", "fft_trg_np", ")", "\n", "\n", "return", "amp_target", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.None.freq_space_interpolation_demo.amp_spectrum_swap": [[22, 40], ["numpy.fft.fftshift", "numpy.fft.fftshift", "numpy.floor().astype", "numpy.floor().astype", "numpy.floor().astype", "numpy.fft.ifftshift", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.amin"], "function", ["None"], ["", "def", "amp_spectrum_swap", "(", "amp_local", ",", "amp_target", ",", "L", "=", "0.1", ",", "ratio", "=", "0", ")", ":", "\n", "\n", "    ", "a_local", "=", "np", ".", "fft", ".", "fftshift", "(", "amp_local", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "a_trg", "=", "np", ".", "fft", ".", "fftshift", "(", "amp_target", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "_", ",", "h", ",", "w", "=", "a_local", ".", "shape", "\n", "b", "=", "(", "np", ".", "floor", "(", "np", ".", "amin", "(", "(", "h", ",", "w", ")", ")", "*", "L", ")", ")", ".", "astype", "(", "int", ")", "\n", "c_h", "=", "np", ".", "floor", "(", "h", "/", "2.0", ")", ".", "astype", "(", "int", ")", "\n", "c_w", "=", "np", ".", "floor", "(", "w", "/", "2.0", ")", ".", "astype", "(", "int", ")", "\n", "\n", "h1", "=", "c_h", "-", "b", "\n", "h2", "=", "c_h", "+", "b", "+", "1", "\n", "w1", "=", "c_w", "-", "b", "\n", "w2", "=", "c_w", "+", "b", "+", "1", "\n", "\n", "a_local", "[", ":", ",", "h1", ":", "h2", ",", "w1", ":", "w2", "]", "=", "a_local", "[", ":", ",", "h1", ":", "h2", ",", "w1", ":", "w2", "]", "*", "ratio", "+", "a_trg", "[", ":", ",", "h1", ":", "h2", ",", "w1", ":", "w2", "]", "*", "(", "1", "-", "ratio", ")", "\n", "a_local", "=", "np", ".", "fft", ".", "ifftshift", "(", "a_local", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "return", "a_local", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.None.freq_space_interpolation_demo.freq_space_interpolation": [[41, 60], ["numpy.fft.fft2", "freq_space_interpolation_demo.amp_spectrum_swap", "numpy.fft.ifft2", "numpy.real", "numpy.abs", "numpy.angle", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.None.freq_space_interpolation_demo.amp_spectrum_swap"], ["", "def", "freq_space_interpolation", "(", "local_img", ",", "amp_target", ",", "L", "=", "0", ",", "ratio", "=", "0", ")", ":", "\n", "\n", "    ", "local_img_np", "=", "local_img", "\n", "\n", "# get fft of local sample", "\n", "fft_local_np", "=", "np", ".", "fft", ".", "fft2", "(", "local_img_np", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "# extract amplitude and phase of local sample", "\n", "amp_local", ",", "pha_local", "=", "np", ".", "abs", "(", "fft_local_np", ")", ",", "np", ".", "angle", "(", "fft_local_np", ")", "\n", "\n", "# swap the amplitude part of local image with target amplitude spectrum", "\n", "amp_local_", "=", "amp_spectrum_swap", "(", "amp_local", ",", "amp_target", ",", "L", "=", "L", ",", "ratio", "=", "ratio", ")", "\n", "\n", "# get transformed image via inverse fft", "\n", "fft_local_", "=", "amp_local_", "*", "np", ".", "exp", "(", "1j", "*", "pha_local", ")", "\n", "local_in_trg", "=", "np", ".", "fft", ".", "ifft2", "(", "fft_local_", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "local_in_trg", "=", "np", ".", "real", "(", "local_in_trg", ")", "\n", "\n", "return", "local_in_trg", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.None.freq_space_interpolation_demo.draw_image": [[61, 69], ["matplotlib.imshow", "matplotlib.subplots_adjust", "matplotlib.xticks", "matplotlib.yticks"], "function", ["None"], ["", "def", "draw_image", "(", "image", ")", ":", "\n", "    ", "plt", ".", "imshow", "(", "image", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "subplots_adjust", "(", "top", "=", "1", ",", "bottom", "=", "0", ",", "left", "=", "0", ",", "right", "=", "1", ",", "hspace", "=", "0", ",", "wspace", "=", "0", ")", "\n", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.None.freq_space_interpolation_demo.load_image": [[70, 75], ["PIL.Image.open", "Image.open.load", "numpy.asarray"], "function", ["None"], ["", "def", "load_image", "(", "infilename", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "infilename", ")", "\n", "img", ".", "load", "(", ")", "\n", "data", "=", "np", ".", "asarray", "(", "img", ",", "dtype", "=", "\"int32\"", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.ramps.sigmoid_rampup": [[19, 27], ["numpy.clip", "float", "numpy.exp"], "function", ["None"], ["def", "sigmoid_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Exponential rampup from https://arxiv.org/abs/1610.02242\"\"\"", "\n", "if", "rampup_length", "==", "0", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "current", "=", "np", ".", "clip", "(", "current", ",", "0.0", ",", "rampup_length", ")", "\n", "phase", "=", "1.0", "-", "current", "/", "rampup_length", "\n", "return", "float", "(", "np", ".", "exp", "(", "-", "5.0", "*", "phase", "*", "phase", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.ramps.linear_rampup": [[29, 36], ["None"], "function", ["None"], ["", "", "def", "linear_rampup", "(", "current", ",", "rampup_length", ")", ":", "\n", "    ", "\"\"\"Linear rampup\"\"\"", "\n", "assert", "current", ">=", "0", "and", "rampup_length", ">=", "0", "\n", "if", "current", ">=", "rampup_length", ":", "\n", "        ", "return", "1.0", "\n", "", "else", ":", "\n", "        ", "return", "current", "/", "rampup_length", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.ramps.cosine_rampdown": [[38, 42], ["float", "numpy.cos"], "function", ["None"], ["", "", "def", "cosine_rampdown", "(", "current", ",", "rampdown_length", ")", ":", "\n", "    ", "\"\"\"Cosine rampdown from https://arxiv.org/abs/1608.03983\"\"\"", "\n", "assert", "0", "<=", "current", "<=", "rampdown_length", "\n", "return", "float", "(", ".5", "*", "(", "np", ".", "cos", "(", "np", ".", "pi", "*", "current", "/", "rampdown_length", ")", "+", "1", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.UnifLabelSampler.__init__": [[61, 65], ["util.UnifLabelSampler.generate_indexes_epoch"], "methods", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.UnifLabelSampler.generate_indexes_epoch"], ["def", "__init__", "(", "self", ",", "N", ",", "images_lists", ")", ":", "\n", "        ", "self", ".", "N", "=", "N", "\n", "self", ".", "images_lists", "=", "images_lists", "\n", "self", ".", "indexes", "=", "self", ".", "generate_indexes_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.UnifLabelSampler.generate_indexes_epoch": [[66, 80], ["numpy.zeros", "range", "numpy.random.shuffle", "res[].astype", "int", "len", "numpy.random.choice", "len", "len", "len"], "methods", ["None"], ["", "def", "generate_indexes_epoch", "(", "self", ")", ":", "\n", "        ", "size_per_pseudolabel", "=", "int", "(", "self", ".", "N", "/", "len", "(", "self", ".", "images_lists", ")", ")", "+", "1", "\n", "res", "=", "np", ".", "zeros", "(", "size_per_pseudolabel", "*", "len", "(", "self", ".", "images_lists", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "images_lists", ")", ")", ":", "\n", "            ", "indexes", "=", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "images_lists", "[", "i", "]", ",", "\n", "size_per_pseudolabel", ",", "\n", "replace", "=", "(", "len", "(", "self", ".", "images_lists", "[", "i", "]", ")", "<=", "size_per_pseudolabel", ")", "\n", ")", "\n", "res", "[", "i", "*", "size_per_pseudolabel", ":", "(", "i", "+", "1", ")", "*", "size_per_pseudolabel", "]", "=", "indexes", "\n", "\n", "", "np", ".", "random", ".", "shuffle", "(", "res", ")", "\n", "return", "res", "[", ":", "self", ".", "N", "]", ".", "astype", "(", "'int'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.UnifLabelSampler.__iter__": [[81, 83], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.UnifLabelSampler.__len__": [[84, 86], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.AverageMeter.__init__": [[90, 92], ["util.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.AverageMeter.reset": [[93, 98], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.AverageMeter.update": [[99, 104], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.Logger.__init__": [[118, 121], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "self", ".", "data", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.Logger.log": [[122, 126], ["util.Logger.data.append", "open", "pickle.dump", "os.path.join"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "train_point", ")", ":", "\n", "        ", "self", ".", "data", ".", "append", "(", "train_point", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "path", ")", ",", "'wb'", ")", "as", "fp", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "data", ",", "fp", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.load_model": [[22, 52], ["os.path.isfile", "print", "torch.load", "[].size", "model.load_state_dict", "print", "print", "checkpoint[].keys", "util.load_model.rename_key"], "function", ["None"], ["def", "load_model", "(", "path", ")", ":", "\n", "    ", "\"\"\"Loads model and return it without DataParallel table.\"\"\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "\n", "# size of the top layer", "\n", "N", "=", "checkpoint", "[", "'state_dict'", "]", "[", "'top_layer.bias'", "]", ".", "size", "(", ")", "\n", "\n", "# build skeleton of the model", "\n", "sob", "=", "'sobel.0.weight'", "in", "checkpoint", "[", "'state_dict'", "]", ".", "keys", "(", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "checkpoint", "[", "'arch'", "]", "]", "(", "sobel", "=", "sob", ",", "out", "=", "int", "(", "N", "[", "0", "]", ")", ")", "\n", "\n", "# deal with a dataparallel table", "\n", "def", "rename_key", "(", "key", ")", ":", "\n", "            ", "if", "not", "'module'", "in", "key", ":", "\n", "                ", "return", "key", "\n", "", "return", "''", ".", "join", "(", "key", ".", "split", "(", "'.module'", ")", ")", "\n", "\n", "", "checkpoint", "[", "'state_dict'", "]", "=", "{", "rename_key", "(", "key", ")", ":", "val", "\n", "for", "key", ",", "val", "\n", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", "}", "\n", "\n", "# load weights", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"Loaded\"", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "None", "\n", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "path", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.learning_rate_decay": [[106, 110], ["numpy.sqrt"], "function", ["None"], ["", "", "def", "learning_rate_decay", "(", "optimizer", ",", "t", ",", "lr_0", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "lr", "=", "lr_0", "/", "np", ".", "sqrt", "(", "1", "+", "lr_0", "*", "param_group", "[", "'weight_decay'", "]", "*", "t", ")", "\n", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util._eval_dice": [[128, 150], ["range", "dice.append", "logging.info", "numpy.sum", "numpy.sum", "numpy.sum", "str"], "function", ["None"], ["", "", "", "def", "_eval_dice", "(", "gt_y", ",", "pred_y", ",", "detail", "=", "False", ")", ":", "\n", "\n", "    ", "class_map", "=", "{", "# a map used for mapping label value to its name, used for output", "\n", "\"0\"", ":", "\"disk\"", ",", "\n", "\"1\"", ":", "\"cup\"", "\n", "}", "\n", "\n", "dice", "=", "[", "]", "\n", "\n", "for", "cls", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "\n", "        ", "gt", "=", "gt_y", "[", ":", ",", "cls", ",", "...", "]", "\n", "pred", "=", "pred_y", "[", ":", ",", "cls", ",", "...", "]", "\n", "\n", "\n", "dice_this", "=", "2", "*", "np", ".", "sum", "(", "gt", "*", "pred", ")", "/", "(", "np", ".", "sum", "(", "gt", ")", "+", "np", ".", "sum", "(", "pred", ")", ")", "\n", "dice", ".", "append", "(", "dice_this", ")", "\n", "\n", "if", "detail", "is", "True", ":", "\n", "#print (\"class {}, dice is {:2f}\".format(class_map[str(cls)], dice_this))", "\n", "            ", "logging", ".", "info", "(", "\"class {}, dice is {:2f}\"", ".", "format", "(", "class_map", "[", "str", "(", "cls", ")", "]", ",", "dice_this", ")", ")", "\n", "", "", "return", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util._connectivity_region_analysis": [[151, 164], ["scipy.ndimage.label", "scipy.ndimage.sum", "range", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "def", "_connectivity_region_analysis", "(", "mask", ")", ":", "\n", "    ", "s", "=", "[", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", "]", "\n", "label_im", ",", "nb_labels", "=", "ndimage", ".", "label", "(", "mask", ")", "#, structure=s)", "\n", "\n", "sizes", "=", "ndimage", ".", "sum", "(", "mask", ",", "label_im", ",", "range", "(", "nb_labels", "+", "1", ")", ")", "\n", "\n", "# plt.imshow(label_im)        ", "\n", "label_im", "[", "label_im", "!=", "np", ".", "argmax", "(", "sizes", ")", "]", "=", "0", "\n", "label_im", "[", "label_im", "==", "np", ".", "argmax", "(", "sizes", ")", "]", "=", "1", "\n", "\n", "return", "label_im", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util._eval_average_surface_distances": [[165, 171], ["medpy.metric.binary.asd"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.asd"], ["", "def", "_eval_average_surface_distances", "(", "reference", ",", "result", ",", "voxelspacing", "=", "None", ",", "connectivity", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    The distances between the surface voxel of binary objects in result and their\n    nearest partner surface voxel of a binary object in reference.\n    \"\"\"", "\n", "return", "metric", ".", "binary", ".", "asd", "(", "result", ",", "reference", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.__surface_distances": [[173, 206], ["numpy.atleast_1d", "numpy.atleast_1d", "scipy.ndimage.morphology.generate_binary_structure", "scipy.ndimage.morphology.distance_transform_edt", "np.atleast_1d.astype", "np.atleast_1d.astype", "scipy.ndimage._ni_support._normalize_sequence", "numpy.asarray", "numpy.count_nonzero", "RuntimeError", "numpy.count_nonzero", "RuntimeError", "scipy.ndimage.morphology.binary_erosion", "scipy.ndimage.morphology.binary_erosion", "voxelspacing.copy.copy"], "function", ["None"], ["", "def", "__surface_distances", "(", "result", ",", "reference", ",", "voxelspacing", "=", "None", ",", "connectivity", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    The distances between the surface voxel of binary objects in result and their\n    nearest partner surface voxel of a binary object in reference.\n    \"\"\"", "\n", "result", "=", "np", ".", "atleast_1d", "(", "result", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "reference", "=", "np", ".", "atleast_1d", "(", "reference", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "if", "voxelspacing", "is", "not", "None", ":", "\n", "        ", "voxelspacing", "=", "_ni_support", ".", "_normalize_sequence", "(", "voxelspacing", ",", "result", ".", "ndim", ")", "\n", "voxelspacing", "=", "np", ".", "asarray", "(", "voxelspacing", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "if", "not", "voxelspacing", ".", "flags", ".", "contiguous", ":", "\n", "            ", "voxelspacing", "=", "voxelspacing", ".", "copy", "(", ")", "\n", "\n", "# binary structure", "\n", "", "", "footprint", "=", "generate_binary_structure", "(", "result", ".", "ndim", ",", "connectivity", ")", "\n", "\n", "# test for emptiness", "\n", "if", "0", "==", "np", ".", "count_nonzero", "(", "result", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'The first supplied array does not contain any binary object.'", ")", "\n", "", "if", "0", "==", "np", ".", "count_nonzero", "(", "reference", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'The second supplied array does not contain any binary object.'", ")", "\n", "\n", "# extract only 1-pixel border line of objects", "\n", "", "result_border", "=", "result", "^", "binary_erosion", "(", "result", ",", "structure", "=", "footprint", ",", "iterations", "=", "1", ")", "\n", "reference_border", "=", "reference", "^", "binary_erosion", "(", "reference", ",", "structure", "=", "footprint", ",", "iterations", "=", "1", ")", "\n", "\n", "# compute average surface distance        ", "\n", "# Note: scipys distance transform is calculated only inside the borders of the", "\n", "#       foreground objects, therefore the input has to be reversed", "\n", "dt", "=", "distance_transform_edt", "(", "~", "reference_border", ",", "sampling", "=", "voxelspacing", ")", "\n", "sds", "=", "dt", "[", "result_border", "]", "\n", "\n", "return", "sds", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.asd": [[207, 212], ["util.__surface_distances", "__surface_distances.mean"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.__surface_distances"], ["", "def", "asd", "(", "result", ",", "reference", ",", "voxelspacing", "=", "None", ",", "connectivity", "=", "1", ")", ":", "\n", "\n", "    ", "sds", "=", "__surface_distances", "(", "result", ",", "reference", ",", "voxelspacing", ",", "connectivity", ")", "\n", "asd", "=", "sds", ".", "mean", "(", ")", "\n", "return", "asd", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.calculate_hausdorff": [[213, 215], ["scipy.spatial.distance.directed_hausdorff"], "function", ["None"], ["", "def", "calculate_hausdorff", "(", "lP", ",", "lT", ")", ":", "\n", "    ", "return", "scipy", ".", "spatial", ".", "distance", ".", "directed_hausdorff", "(", "lP", ",", "lT", ")", "\n", "# return asd(lP, lT, spacing)", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util._eval_haus": [[217, 248], ["range", "medpy.metric.binary.hd95", "haus.append", "logging.info", "str"], "function", ["None"], ["", "def", "_eval_haus", "(", "pred_y", ",", "gt_y", ",", "detail", "=", "False", ")", ":", "\n", "    ", "'''\n    :param pred: whole brain prediction\n    :param gt: whole\n    :param detail:\n    :return: a list, indicating Dice of each class for one case\n    '''", "\n", "haus", "=", "[", "]", "\n", "\n", "for", "cls", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "\n", "        ", "gt", "=", "gt_y", "[", "0", ",", "cls", ",", "...", "]", "\n", "pred", "=", "pred_y", "[", "0", ",", "cls", ",", "...", "]", "\n", "# def calculate_metric_percase(pred, gt):", "\n", "#     dice = metric.binary.dc(pred, gt)", "\n", "#     jc = metric.binary.jc(pred, gt)", "\n", "#     hd = metric.binary.hd95(pred, gt)", "\n", "#     asd = metric.binary.asd(pred, gt)", "\n", "\n", "# hausdorff_distance_filter = sitk.HausdorffDistanceImageFilter()", "\n", "# hausdorff_distance_filter.Execute(gt_i, pred_i)", "\n", "# print (gt.shape)", "\n", "haus_cls", "=", "metric", ".", "binary", ".", "hd95", "(", "gt", ",", "(", "pred", ")", ")", "\n", "\n", "haus", ".", "append", "(", "haus_cls", ")", "\n", "\n", "if", "detail", "is", "True", ":", "\n", "            ", "logging", ".", "info", "(", "\"class {}, haus is {:4f}\"", ".", "format", "(", "class_map", "[", "str", "(", "cls", ")", "]", ",", "haus_cls", ")", ")", "\n", "# logging.info(\"4 class average haus is {:4f}\".format(np.mean(haus)))", "\n", "\n", "", "", "return", "haus", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.parse_fn_haus": [[250, 270], ["data_path.split", "SimpleITK.ReadImage", "SimpleITK.ReadImage", "sitk.ReadImage.GetSpacing", "SimpleITK.GetArrayFromImage", "SimpleITK.GetArrayFromImage", "sitk.GetArrayFromImage.transpose", "sitk.GetArrayFromImage.transpose"], "function", ["None"], ["", "def", "parse_fn_haus", "(", "data_path", ")", ":", "\n", "    ", "'''\n    :param image_path: path to a folder of a patient\n    :return: normalized entire image with its corresponding label\n    In an image, the air region is 0, so we only calculate the mean and std within the brain area\n    For any image-level normalization, do it here\n    '''", "\n", "path", "=", "data_path", ".", "split", "(", "\",\"", ")", "\n", "image_path", "=", "path", "[", "0", "]", "\n", "label_path", "=", "path", "[", "1", "]", "\n", "itk_image", "=", "sitk", ".", "ReadImage", "(", "image_path", ")", "#os.path.join(image_path, 'T1_unbiased_brain_rigid_to_mni.nii.gz'))", "\n", "itk_mask", "=", "sitk", ".", "ReadImage", "(", "label_path", ")", "#os.path.join(image_path, 'T1_brain_seg_rigid_to_mni.nii.gz'))", "\n", "spacing", "=", "itk_mask", ".", "GetSpacing", "(", ")", "\n", "\n", "image", "=", "sitk", ".", "GetArrayFromImage", "(", "itk_image", ")", "\n", "mask", "=", "sitk", ".", "GetArrayFromImage", "(", "itk_mask", ")", "\n", "\n", "mask", "[", "mask", "==", "2", "]", "=", "1", "\n", "\n", "return", "image", ".", "transpose", "(", "[", "0", ",", "1", ",", "2", "]", ")", ",", "mask", ".", "transpose", "(", "[", "0", ",", "1", ",", "2", "]", ")", ",", "spacing", "\n", "", ""]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.losses.dice_loss": [[5, 18], ["target.float.float", "range", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "dice_loss", "(", "score", ",", "target", ")", ":", "\n", "    ", "target", "=", "target", ".", "float", "(", ")", "\n", "smooth", "=", "1e-5", "\n", "\n", "loss", "=", "0", "\n", "for", "i", "in", "range", "(", "target", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "intersect", "=", "torch", ".", "sum", "(", "score", "[", ":", ",", "i", ",", "...", "]", "*", "target", "[", ":", ",", "i", ",", "...", "]", ")", "\n", "z_sum", "=", "torch", ".", "sum", "(", "score", "[", ":", ",", "i", ",", "...", "]", ")", "\n", "y_sum", "=", "torch", ".", "sum", "(", "target", "[", ":", ",", "i", ",", "...", "]", ")", "\n", "loss", "+=", "(", "2", "*", "intersect", "+", "smooth", ")", "/", "(", "z_sum", "+", "y_sum", "+", "smooth", ")", "\n", "", "loss", "=", "1", "-", "loss", "*", "1.0", "/", "target", ".", "shape", "[", "1", "]", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.losses.dice_loss1": [[19, 28], ["target.float.float", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "dice_loss1", "(", "score", ",", "target", ")", ":", "\n", "    ", "target", "=", "target", ".", "float", "(", ")", "\n", "smooth", "=", "1e-5", "\n", "intersect", "=", "torch", ".", "sum", "(", "score", "*", "target", ")", "\n", "y_sum", "=", "torch", ".", "sum", "(", "target", ")", "\n", "z_sum", "=", "torch", ".", "sum", "(", "score", ")", "\n", "loss", "=", "(", "2", "*", "intersect", "+", "smooth", ")", "/", "(", "z_sum", "+", "y_sum", "+", "smooth", ")", "\n", "loss", "=", "1", "-", "loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.losses.entropy_loss": [[29, 35], ["torch.mean", "torch.tensor().cuda", "torch.sum", "torch.tensor", "torch.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.Logger.log", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.Logger.log"], ["", "def", "entropy_loss", "(", "p", ",", "C", "=", "2", ")", ":", "\n", "## p N*C*W*H*D", "\n", "    ", "y1", "=", "-", "1", "*", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", "+", "1e-6", ")", ",", "dim", "=", "1", ")", "/", "torch", ".", "tensor", "(", "np", ".", "log", "(", "C", ")", ")", ".", "cuda", "(", ")", "\n", "ent", "=", "torch", ".", "mean", "(", "y1", ")", "\n", "\n", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.losses.softmax_dice_loss": [[36, 54], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "range", "input_logits.size", "target_logits.size", "losses.dice_loss1"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.losses.dice_loss1"], ["", "def", "softmax_dice_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_softmax", "=", "F", ".", "softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "n", "=", "input_logits", ".", "shape", "[", "1", "]", "\n", "dice", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "dice", "+=", "dice_loss1", "(", "input_softmax", "[", ":", ",", "i", "]", ",", "target_softmax", "[", ":", ",", "i", "]", ")", "\n", "", "mean_dice", "=", "dice", "/", "n", "\n", "\n", "return", "mean_dice", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.losses.entropy_loss_map": [[56, 59], ["torch.tensor().cuda", "torch.sum", "torch.tensor", "torch.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.Logger.log", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.util.Logger.log"], ["", "def", "entropy_loss_map", "(", "p", ",", "C", "=", "2", ")", ":", "\n", "    ", "ent", "=", "-", "1", "*", "torch", ".", "sum", "(", "p", "*", "torch", ".", "log", "(", "p", "+", "1e-6", ")", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "/", "torch", ".", "tensor", "(", "np", ".", "log", "(", "C", ")", ")", ".", "cuda", "(", ")", "\n", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.losses.softmax_mse_loss": [[60, 74], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "input_logits.size", "target_logits.size"], "function", ["None"], ["", "def", "softmax_mse_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns MSE loss\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_softmax", "=", "F", ".", "softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "\n", "mse_loss", "=", "(", "input_softmax", "-", "target_softmax", ")", "**", "2", "\n", "return", "mse_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.losses.softmax_kl_loss": [[75, 91], ["torch.nn.functional.log_softmax", "torch.nn.functional.softmax", "torch.nn.functional.kl_div", "input_logits.size", "target_logits.size"], "function", ["None"], ["", "def", "softmax_kl_loss", "(", "input_logits", ",", "target_logits", ")", ":", "\n", "    ", "\"\"\"Takes softmax on both sides and returns KL divergence\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to inputs but not the targets.\n    \"\"\"", "\n", "assert", "input_logits", ".", "size", "(", ")", "==", "target_logits", ".", "size", "(", ")", "\n", "input_log_softmax", "=", "F", ".", "log_softmax", "(", "input_logits", ",", "dim", "=", "1", ")", "\n", "target_softmax", "=", "F", ".", "softmax", "(", "target_logits", ",", "dim", "=", "1", ")", "\n", "\n", "# return F.kl_div(input_log_softmax, target_softmax)", "\n", "kl_div", "=", "F", ".", "kl_div", "(", "input_log_softmax", ",", "target_softmax", ",", "reduction", "=", "'none'", ")", "\n", "# mean_kl_div = torch.mean(0.2*kl_div[:,0,...]+0.8*kl_div[:,1,...])", "\n", "return", "kl_div", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.utils.losses.symmetric_mse_loss": [[92, 102], ["torch.mean", "input1.size", "input2.size"], "function", ["None"], ["", "def", "symmetric_mse_loss", "(", "input1", ",", "input2", ")", ":", "\n", "    ", "\"\"\"Like F.mse_loss but sends gradients to both directions\n\n    Note:\n    - Returns the sum over all examples. Divide by the batch size afterwards\n      if you want the mean.\n    - Sends gradients to both input1 and input2.\n    \"\"\"", "\n", "assert", "input1", ".", "size", "(", ")", "==", "input2", ".", "size", "(", ")", "\n", "return", "torch", ".", "mean", "(", "(", "input1", "-", "input2", ")", "**", "2", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataset.prepare_dataset.extract_amp_spectrum": [[14, 21], ["numpy.fft.fft2", "numpy.abs", "numpy.angle"], "function", ["None"], ["def", "extract_amp_spectrum", "(", "img_np", ")", ":", "\n", "# trg_img is of dimention CxHxW (C = 3 for RGB image and 1 for slice)", "\n", "\n", "    ", "fft", "=", "np", ".", "fft", ".", "fft2", "(", "img_np", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "amp_np", ",", "pha_np", "=", "np", ".", "abs", "(", "fft", ")", ",", "np", ".", "angle", "(", "fft", ")", "\n", "\n", "return", "amp_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.MyUpsample2.forward": [[14, 16], ["x[].expand().reshape", "x.size", "x.size", "x[].expand", "x.size", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", ":", ",", ":", ",", "None", ",", ":", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "2", ",", "-", "1", ",", "2", ")", ".", "reshape", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", "*", "2", ",", "x", ".", "size", "(", "3", ")", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.ConvD.__init__": [[30, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "unet2d.normalization", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "unet2d.normalization", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "unet2d.normalization"], "methods", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.TwoStreamBatchSampler.__init__", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.normalization", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.normalization", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.normalization"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "norm", "=", "'gn'", ",", "first", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "first", "=", "first", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.ConvD.forward": [[43, 73], ["conv2d", "unet2d.ConvD.bn1", "conv2d", "unet2d.ConvD.bn2", "relu", "conv2d", "unet2d.ConvD.bn3", "relu", "maxpool2D"], "methods", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.conv2d", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.conv2d", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.relu", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.conv2d", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.relu", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.maxpool2D"], ["", "def", "forward", "(", "self", ",", "x", ",", "weights", "=", "None", ",", "layer_idx", "=", "None", ")", ":", "\n", "\n", "        ", "if", "weights", "==", "None", ":", "\n", "            ", "weight_1", ",", "bias_1", "=", "self", ".", "conv1", ".", "weight", ",", "self", ".", "conv1", ".", "bias", "\n", "weight_2", ",", "bias_2", "=", "self", ".", "conv2", ".", "weight", ",", "self", ".", "conv2", ".", "bias", "\n", "weight_3", ",", "bias_3", "=", "self", ".", "conv3", ".", "weight", ",", "self", ".", "conv3", ".", "bias", "\n", "\n", "", "else", ":", "\n", "            ", "weight_1", ",", "bias_1", "=", "weights", "[", "layer_idx", "+", "'.conv1.weight'", "]", ",", "weights", "[", "layer_idx", "+", "'.conv1.bias'", "]", "\n", "weight_2", ",", "bias_2", "=", "weights", "[", "layer_idx", "+", "'.conv2.weight'", "]", ",", "weights", "[", "layer_idx", "+", "'.conv2.bias'", "]", "\n", "weight_3", ",", "bias_3", "=", "weights", "[", "layer_idx", "+", "'.conv3.weight'", "]", ",", "weights", "[", "layer_idx", "+", "'.conv3.bias'", "]", "\n", "\n", "", "if", "not", "self", ".", "first", ":", "\n", "            ", "x", "=", "maxpool2D", "(", "x", ",", "kernel_size", "=", "2", ")", "\n", "\n", "#layer 1 conv, bn", "\n", "", "x", "=", "conv2d", "(", "x", ",", "weight_1", ",", "bias_1", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "#layer 2 conv, bn, relu", "\n", "y", "=", "conv2d", "(", "x", ",", "weight_2", ",", "bias_2", ")", "\n", "y", "=", "self", ".", "bn2", "(", "y", ")", "\n", "y", "=", "relu", "(", "y", ")", "\n", "\n", "#layer 3 conv, bn", "\n", "z", "=", "conv2d", "(", "y", ",", "weight_3", ",", "bias_3", ")", "\n", "z", "=", "self", ".", "bn3", "(", "z", ")", "\n", "z", "=", "relu", "(", "z", ")", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.ConvU.__init__": [[75, 91], ["torch.Module.__init__", "unet2d.MyUpsample2", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "unet2d.normalization", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "unet2d.normalization", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "unet2d.normalization"], "methods", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.TwoStreamBatchSampler.__init__", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.normalization", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.normalization", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.normalization"], ["    ", "def", "__init__", "(", "self", ",", "planes", ",", "norm", "=", "'gn'", ",", "first", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "first", "=", "first", "\n", "if", "not", "self", ".", "first", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "2", "*", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "", "self", ".", "pool", "=", "MyUpsample2", "(", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "2", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn2", "=", "normalization", "(", "planes", "//", "2", ",", "norm", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3", "=", "normalization", "(", "planes", ",", "norm", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.ConvU.forward": [[92, 127], ["unet2d.ConvU.pool", "conv2d", "unet2d.ConvU.bn2", "relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "conv2d", "unet2d.ConvU.bn3", "relu", "conv2d", "unet2d.ConvU.bn1", "relu"], "methods", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.conv2d", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.relu", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.conv2d", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.relu", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.conv2d", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.relu"], ["", "def", "forward", "(", "self", ",", "x", ",", "prev", ",", "weights", "=", "None", ",", "layer_idx", "=", "None", ")", ":", "\n", "\n", "        ", "if", "weights", "==", "None", ":", "\n", "            ", "if", "not", "self", ".", "first", ":", "\n", "                ", "weight_1", ",", "bias_1", "=", "self", ".", "conv1", ".", "weight", ",", "self", ".", "conv1", ".", "bias", "\n", "", "weight_2", ",", "bias_2", "=", "self", ".", "conv2", ".", "weight", ",", "self", ".", "conv2", ".", "bias", "\n", "weight_3", ",", "bias_3", "=", "self", ".", "conv3", ".", "weight", ",", "self", ".", "conv3", ".", "bias", "\n", "\n", "", "else", ":", "\n", "            ", "if", "not", "self", ".", "first", ":", "\n", "                ", "weight_1", ",", "bias_1", "=", "weights", "[", "layer_idx", "+", "'.conv1.weight'", "]", ",", "weights", "[", "layer_idx", "+", "'.conv1.bias'", "]", "\n", "", "weight_2", ",", "bias_2", "=", "weights", "[", "layer_idx", "+", "'.conv2.weight'", "]", ",", "weights", "[", "layer_idx", "+", "'.conv2.bias'", "]", "\n", "weight_3", ",", "bias_3", "=", "weights", "[", "layer_idx", "+", "'.conv3.weight'", "]", ",", "weights", "[", "layer_idx", "+", "'.conv3.bias'", "]", "\n", "\n", "#layer 1 conv, bn, relu", "\n", "", "if", "not", "self", ".", "first", ":", "\n", "            ", "x", "=", "conv2d", "(", "x", ",", "weight_1", ",", "bias_1", ",", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "relu", "(", "x", ")", "\n", "\n", "#upsample, layer 2 conv, bn, relu", "\n", "", "y", "=", "self", ".", "pool", "(", "x", ")", "\n", "y", "=", "conv2d", "(", "y", ",", "weight_2", ",", "bias_2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "y", "=", "self", ".", "bn2", "(", "y", ")", "\n", "y", "=", "relu", "(", "y", ")", "\n", "\n", "#concatenation of two layers", "\n", "y", "=", "torch", ".", "cat", "(", "[", "prev", ",", "y", "]", ",", "1", ")", "\n", "\n", "#layer 3 conv, bn", "\n", "y", "=", "conv2d", "(", "y", ",", "weight_3", ",", "bias_3", ")", "\n", "y", "=", "self", ".", "bn3", "(", "y", ")", "\n", "y", "=", "relu", "(", "y", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.Unet2D.__init__": [[130, 152], ["torch.Module.__init__", "unet2d.ConvD", "unet2d.ConvD", "unet2d.ConvD", "unet2d.ConvD", "unet2d.ConvD", "unet2d.ConvU", "unet2d.ConvU", "unet2d.ConvU", "unet2d.ConvU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "unet2d.Unet2D.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.TwoStreamBatchSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", "=", "3", ",", "n", "=", "16", ",", "norm", "=", "'in'", ",", "num_classes", "=", "2", ")", ":", "\n", "        ", "super", "(", "Unet2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "convd1", "=", "ConvD", "(", "c", ",", "n", ",", "norm", ",", "first", "=", "True", ")", "\n", "self", ".", "convd2", "=", "ConvD", "(", "n", ",", "2", "*", "n", ",", "norm", ")", "\n", "self", ".", "convd3", "=", "ConvD", "(", "2", "*", "n", ",", "4", "*", "n", ",", "norm", ")", "\n", "self", ".", "convd4", "=", "ConvD", "(", "4", "*", "n", ",", "8", "*", "n", ",", "norm", ")", "\n", "self", ".", "convd5", "=", "ConvD", "(", "8", "*", "n", ",", "16", "*", "n", ",", "norm", ")", "\n", "\n", "self", ".", "convu4", "=", "ConvU", "(", "16", "*", "n", ",", "norm", ",", "first", "=", "True", ")", "\n", "self", ".", "convu3", "=", "ConvU", "(", "8", "*", "n", ",", "norm", ")", "\n", "self", ".", "convu2", "=", "ConvU", "(", "4", "*", "n", ",", "norm", ")", "\n", "self", ".", "convu1", "=", "ConvU", "(", "2", "*", "n", ",", "norm", ")", "\n", "\n", "self", ".", "seg1", "=", "nn", ".", "Conv2d", "(", "2", "*", "n", ",", "num_classes", ",", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.Unet2D.forward": [[153, 186], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "unet2d.Unet2D.convd1", "unet2d.Unet2D.convd2", "unet2d.Unet2D.convd3", "unet2d.Unet2D.convd4", "unet2d.Unet2D.convd5", "unet2d.Unet2D.convu4", "unet2d.Unet2D.convu3", "unet2d.Unet2D.convu2", "unet2d.Unet2D.convu1", "conv2d", "unet2d.Unet2D.convd1", "unet2d.Unet2D.convd2", "unet2d.Unet2D.convd3", "unet2d.Unet2D.convd4", "unet2d.Unet2D.convd5", "unet2d.Unet2D.convu4", "unet2d.Unet2D.convu3", "unet2d.Unet2D.convu2", "unet2d.Unet2D.convu1", "conv2d"], "methods", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.conv2d", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.conv2d"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "weights", "=", "None", ")", ":", "\n", "# stop_gradient = Tru", "\n", "        ", "if", "weights", "==", "None", ":", "\n", "            ", "x1", "=", "self", ".", "convd1", "(", "x", ")", "\n", "x2", "=", "self", ".", "convd2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "convd3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "convd4", "(", "x3", ")", "\n", "x5", "=", "self", ".", "convd5", "(", "x4", ")", "\n", "\n", "y4", "=", "self", ".", "convu4", "(", "x5", ",", "x4", ")", "\n", "y3", "=", "self", ".", "convu3", "(", "y4", ",", "x3", ")", "\n", "y2", "=", "self", ".", "convu2", "(", "y3", ",", "x2", ")", "\n", "y1", "=", "self", ".", "convu1", "(", "y2", ",", "x1", ")", "\n", "\n", "y1_pred", "=", "conv2d", "(", "y1", ",", "self", ".", "seg1", ".", "weight", ",", "self", ".", "seg1", ".", "bias", ",", "kernel_size", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "#+ upsample(y2)", "\n", "# print (y1.shape)", "\n", "", "else", ":", "\n", "            ", "x1", "=", "self", ".", "convd1", "(", "x", ",", "weights", "=", "weights", ",", "layer_idx", "=", "'convd1'", ")", "\n", "x2", "=", "self", ".", "convd2", "(", "x1", ",", "weights", "=", "weights", ",", "layer_idx", "=", "'convd2'", ")", "\n", "x3", "=", "self", ".", "convd3", "(", "x2", ",", "weights", "=", "weights", ",", "layer_idx", "=", "'convd3'", ")", "\n", "x4", "=", "self", ".", "convd4", "(", "x3", ",", "weights", "=", "weights", ",", "layer_idx", "=", "'convd4'", ")", "\n", "x5", "=", "self", ".", "convd5", "(", "x4", ",", "weights", "=", "weights", ",", "layer_idx", "=", "'convd5'", ")", "\n", "\n", "y4", "=", "self", ".", "convu4", "(", "x5", ",", "x4", ",", "weights", "=", "weights", ",", "layer_idx", "=", "'convu4'", ")", "\n", "y3", "=", "self", ".", "convu3", "(", "y4", ",", "x3", ",", "weights", "=", "weights", ",", "layer_idx", "=", "'convu3'", ")", "\n", "y2", "=", "self", ".", "convu2", "(", "y3", ",", "x2", ",", "weights", "=", "weights", ",", "layer_idx", "=", "'convu2'", ")", "\n", "y1", "=", "self", ".", "convu1", "(", "y2", ",", "x1", ",", "weights", "=", "weights", ",", "layer_idx", "=", "'convu1'", ")", "\n", "\n", "y1_pred", "=", "conv2d", "(", "y1", ",", "weights", "[", "'seg1.weight'", "]", ",", "weights", "[", "'seg1.bias'", "]", ",", "kernel_size", "=", "None", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "#+ upsample(y2)", "\n", "", "predictions", "=", "F", ".", "sigmoid", "(", "input", "=", "y1_pred", ")", "\n", "# pred_compact = torch.argmax(predictions, dim=1) # shape [batch, w, h]", "\n", "\n", "return", "predictions", ",", "predictions", ",", "y1", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.unet2d.normalization": [[17, 27], ["torch.BatchNorm2d", "torch.GroupNorm", "torch.InstanceNorm2d", "ValueError"], "function", ["None"], ["", "", "def", "normalization", "(", "planes", ",", "norm", "=", "'gn'", ")", ":", "\n", "    ", "if", "norm", "==", "'bn'", ":", "\n", "        ", "m", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "", "elif", "norm", "==", "'gn'", ":", "\n", "        ", "m", "=", "nn", ".", "GroupNorm", "(", "1", ",", "planes", ")", "\n", "", "elif", "norm", "==", "'in'", ":", "\n", "        ", "m", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'normalization type {} is not supported'", ".", "format", "(", "norm", ")", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.linear": [[10, 40], ["inputs.cuda.cuda", "weight.cuda.cuda", "bias.cuda.cuda", "torch.linear", "torch.linear", "torch.autograd.Variable", "torch.grad", "torch.autograd.Variable", "torch.grad", "torch.grad", "torch.grad"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.linear", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.linear"], ["def", "linear", "(", "inputs", ",", "weight", ",", "bias", ",", "meta_step_size", "=", "0.001", ",", "meta_loss", "=", "None", ",", "stop_gradient", "=", "False", ")", ":", "\n", "    ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "weight", "=", "weight", ".", "cuda", "(", ")", "\n", "bias", "=", "bias", ".", "cuda", "(", ")", "\n", "\n", "if", "meta_loss", "is", "not", "None", ":", "\n", "\n", "        ", "if", "not", "stop_gradient", ":", "\n", "            ", "grad_weight", "=", "autograd", ".", "grad", "(", "meta_loss", ",", "weight", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "grad_bias", "=", "autograd", ".", "grad", "(", "meta_loss", ",", "bias", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "bias_adapt", "=", "bias", "-", "grad_bias", "*", "meta_step_size", "\n", "", "else", ":", "\n", "                ", "bias_adapt", "=", "bias", "\n", "\n", "", "", "else", ":", "\n", "            ", "grad_weight", "=", "Variable", "(", "autograd", ".", "grad", "(", "meta_loss", ",", "weight", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "data", ",", "requires_grad", "=", "False", ")", "\n", "\n", "if", "bias", "is", "not", "None", ":", "\n", "                ", "grad_bias", "=", "Variable", "(", "autograd", ".", "grad", "(", "meta_loss", ",", "bias", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "data", ",", "requires_grad", "=", "False", ")", "\n", "bias_adapt", "=", "bias", "-", "grad_bias", "*", "meta_step_size", "\n", "", "else", ":", "\n", "                ", "bias_adapt", "=", "bias", "\n", "\n", "", "", "return", "F", ".", "linear", "(", "inputs", ",", "\n", "weight", "-", "grad_weight", "*", "meta_step_size", ",", "\n", "bias_adapt", ")", "\n", "", "else", ":", "\n", "        ", "return", "F", ".", "linear", "(", "inputs", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.conv2d": [[41, 48], ["inputs.cuda.cuda", "weight.cuda.cuda", "bias.cuda.cuda", "torch.conv2d"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.conv2d"], ["", "", "def", "conv2d", "(", "inputs", ",", "weight", ",", "bias", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "kernel_size", "=", "3", ")", ":", "\n", "\n", "    ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "weight", "=", "weight", ".", "cuda", "(", ")", "\n", "bias", "=", "bias", ".", "cuda", "(", ")", "\n", "\n", "return", "F", ".", "conv2d", "(", "inputs", ",", "weight", ",", "bias", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.deconv2d": [[50, 57], ["inputs.cuda.cuda", "weight.cuda.cuda", "bias.cuda.cuda", "torch.conv_transpose2d"], "function", ["None"], ["", "def", "deconv2d", "(", "inputs", ",", "weight", ",", "bias", ",", "stride", "=", "2", ",", "padding", "=", "0", ",", "dilation", "=", "0", ",", "groups", "=", "1", ",", "kernel_size", "=", "None", ")", ":", "\n", "\n", "    ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "weight", "=", "weight", ".", "cuda", "(", ")", "\n", "bias", "=", "bias", ".", "cuda", "(", ")", "\n", "\n", "return", "F", ".", "conv_transpose2d", "(", "inputs", ",", "weight", ",", "bias", ",", "stride", ",", "padding", ",", "dilation", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.relu": [[58, 60], ["torch.relu"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.relu"], ["", "def", "relu", "(", "inputs", ")", ":", "\n", "    ", "return", "F", ".", "relu", "(", "inputs", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.maxpool": [[62, 64], ["torch.max_pool2d"], "function", ["None"], ["", "def", "maxpool", "(", "inputs", ",", "kernel_size", ",", "stride", "=", "None", ",", "padding", "=", "0", ")", ":", "\n", "    ", "return", "F", ".", "max_pool2d", "(", "inputs", ",", "kernel_size", ",", "stride", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.dropout": [[66, 68], ["torch.dropout"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.dropout"], ["", "def", "dropout", "(", "inputs", ")", ":", "\n", "    ", "return", "F", ".", "dropout", "(", "inputs", ",", "p", "=", "0.5", ",", "training", "=", "False", ",", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.batchnorm": [[69, 71], ["torch.batch_norm"], "function", ["None"], ["", "def", "batchnorm", "(", "inputs", ",", "running_mean", ",", "running_var", ")", ":", "\n", "    ", "return", "F", ".", "batch_norm", "(", "inputs", ",", "running_mean", ",", "running_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.instancenorm": [[79, 81], ["torch.instance_norm"], "function", ["None"], ["def", "instancenorm", "(", "input", ")", ":", "\n", "    ", "return", "F", ".", "instance_norm", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.groupnorm": [[82, 84], ["torch.group_norm"], "function", ["None"], ["", "def", "groupnorm", "(", "input", ")", ":", "\n", "    ", "return", "F", ".", "group_norm", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.dropout2D": [[85, 87], ["torch.dropout2d"], "function", ["None"], ["", "def", "dropout2D", "(", "inputs", ")", ":", "\n", "    ", "return", "F", ".", "dropout2d", "(", "inputs", ",", "p", "=", "0.5", ",", "training", "=", "False", ",", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.maxpool2D": [[88, 90], ["torch.max_pool2d"], "function", ["None"], ["", "def", "maxpool2D", "(", "inputs", ",", "kernel_size", ",", "stride", "=", "None", ",", "padding", "=", "0", ")", ":", "\n", "    ", "return", "F", ".", "max_pool2d", "(", "inputs", ",", "kernel_size", ",", "stride", ",", "padding", "=", "padding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.upsample": [[91, 93], ["torch.upsample"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.networks.layers.upsample"], ["", "def", "upsample", "(", "input", ")", ":", "\n", "    ", "return", "F", ".", "upsample", "(", "input", ",", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.Dataset.__init__": [[17, 33], ["print", "glob.glob.glob", "range", "len", "glob.glob.glob", "len", "random.sample", "fundus_dataloader.Dataset.freq_list_clients.append", "len", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "client_idx", "=", "None", ",", "freq_site_idx", "=", "None", ",", "split", "=", "'train'", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "self", ".", "client_name", "=", "[", "'client1'", ",", "'client2'", ",", "'client3'", ",", "'client4'", "]", "\n", "self", ".", "freq_list_clients", "=", "[", "]", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "image_list", "=", "glob", "(", "'xxx/dataset/{}/data_npy/*'", ".", "format", "(", "self", ".", "client_name", "[", "client_idx", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "client_name", ")", ")", ":", "\n", "                ", "freq_list", "=", "glob", "(", "'xxx/dataset/{}/freq_amp_npy/*'", ".", "format", "(", "self", ".", "client_name", "[", "i", "]", ")", ")", "\n", "length", "=", "len", "(", "freq_list", ")", "\n", "freq_list", "=", "random", ".", "sample", "(", "freq_list", ",", "int", "(", "length", "/", "8", ")", ")", "\n", "self", ".", "freq_list_clients", ".", "append", "(", "freq_list", ")", "\n", "\n", "", "", "self", ".", "freq_site_index", "=", "freq_site_idx", "\n", "\n", "print", "(", "\"total {} slices\"", ".", "format", "(", "len", "(", "self", ".", "image_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.Dataset.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.Dataset.__getitem__": [[37, 69], ["numpy.load", "image_patch.copy", "fundus_dataloader._get_coutour_sample", "numpy.random.choice", "numpy.concatenate.transpose", "mask_patch.transpose", "numpy.random.choice", "numpy.load", "fundus_dataloader.source_to_target_freq", "numpy.clip", "numpy.concatenate", "numpy.concatenate.astype", "mask_patch.transpose.astype"], "methods", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader._get_coutour_sample", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.source_to_target_freq"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raw_file", "=", "self", ".", "image_list", "[", "idx", "]", "\n", "\n", "mask_patches", "=", "[", "]", "\n", "\n", "raw_inp", "=", "np", ".", "load", "(", "raw_file", ")", "\n", "image_patch", "=", "raw_inp", "[", "...", ",", "0", ":", "3", "]", "\n", "mask_patch", "=", "raw_inp", "[", "...", ",", "3", ":", "]", "\n", "image_patches", "=", "image_patch", ".", "copy", "(", ")", "\n", "\n", "# image_patches = ", "\n", "# print (image_patch.dtype)", "\n", "# print (mask_patch.dtype)", "\n", "disc_contour", ",", "disc_bg", ",", "cup_contour", ",", "cup_bg", "=", "_get_coutour_sample", "(", "mask_patch", ")", "\n", "# print ('raw', np.min(image_patch), np.max(image_patch))", "\n", "for", "tar_freq_domain", "in", "np", ".", "random", ".", "choice", "(", "self", ".", "freq_site_index", ",", "2", ")", ":", "\n", "            ", "tar_freq", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "freq_list_clients", "[", "tar_freq_domain", "]", ")", "\n", "tar_freq", "=", "np", ".", "load", "(", "tar_freq", ")", "\n", "# L1 = random.randint(2,5)/1000.0", "\n", "image_patch_freq_1", "=", "source_to_target_freq", "(", "image_patch", ",", "tar_freq", "[", "...", "]", ",", "L", "=", "0", ")", "\n", "image_patch_freq_1", "=", "np", ".", "clip", "(", "image_patch_freq_1", ",", "0", ",", "255", ")", "\n", "# print (image_patch_freq_1.dtype)", "\n", "# print ('trans', np.min(image_patch_freq_1), np.max(image_patch_freq_1))", "\n", "image_patches", "=", "np", ".", "concatenate", "(", "[", "image_patches", ",", "image_patch_freq_1", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "image_patches", "=", "image_patches", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "mask_patches", "=", "mask_patch", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "# contour_bg_mask = np.concatenate(contour_bg_mask, axis=-1)", "\n", "\n", "sample", "=", "{", "\"image\"", ":", "image_patches", ".", "astype", "(", "np", ".", "float32", ")", ",", "\"label\"", ":", "mask_patches", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "\"disc_contour\"", ":", "disc_contour", ",", "\"disc_bg\"", ":", "disc_bg", ",", "\"cup_contour\"", ":", "cup_contour", ",", "\"cup_bg\"", ":", "cup_bg", "}", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.CenterCrop.__init__": [[87, 89], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.CenterCrop.__call__": [[90, 112], ["int", "int", "int", "max", "max", "max", "numpy.pad", "numpy.pad", "round", "round", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "\n", "# pad the sample if necessary", "\n", "if", "label", ".", "shape", "[", "0", "]", "<=", "self", ".", "output_size", "[", "0", "]", "or", "label", ".", "shape", "[", "1", "]", "<=", "self", ".", "output_size", "[", "1", "]", "or", "label", ".", "shape", "[", "2", "]", "<=", "self", ".", "output_size", "[", "2", "]", ":", "\n", "            ", "pw", "=", "max", "(", "(", "self", ".", "output_size", "[", "0", "]", "-", "label", ".", "shape", "[", "0", "]", ")", "//", "2", "+", "3", ",", "0", ")", "\n", "ph", "=", "max", "(", "(", "self", ".", "output_size", "[", "1", "]", "-", "label", ".", "shape", "[", "1", "]", ")", "//", "2", "+", "3", ",", "0", ")", "\n", "pd", "=", "max", "(", "(", "self", ".", "output_size", "[", "2", "]", "-", "label", ".", "shape", "[", "2", "]", ")", "//", "2", "+", "3", ",", "0", ")", "\n", "image", "=", "np", ".", "pad", "(", "image", ",", "[", "(", "pw", ",", "pw", ")", ",", "(", "ph", ",", "ph", ")", ",", "(", "pd", ",", "pd", ")", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "label", "=", "np", ".", "pad", "(", "label", ",", "[", "(", "pw", ",", "pw", ")", ",", "(", "ph", ",", "ph", ")", ",", "(", "pd", ",", "pd", ")", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n", "", "(", "w", ",", "h", ",", "d", ")", "=", "image", ".", "shape", "\n", "\n", "w1", "=", "int", "(", "round", "(", "(", "w", "-", "self", ".", "output_size", "[", "0", "]", ")", "/", "2.", ")", ")", "\n", "h1", "=", "int", "(", "round", "(", "(", "h", "-", "self", ".", "output_size", "[", "1", "]", ")", "/", "2.", ")", ")", "\n", "d1", "=", "int", "(", "round", "(", "(", "d", "-", "self", ".", "output_size", "[", "2", "]", ")", "/", "2.", ")", ")", "\n", "\n", "label", "=", "label", "[", "w1", ":", "w1", "+", "self", ".", "output_size", "[", "0", "]", ",", "h1", ":", "h1", "+", "self", ".", "output_size", "[", "1", "]", ",", "d1", ":", "d1", "+", "self", ".", "output_size", "[", "2", "]", "]", "\n", "image", "=", "image", "[", "w1", ":", "w1", "+", "self", ".", "output_size", "[", "0", "]", ",", "h1", ":", "h1", "+", "self", ".", "output_size", "[", "1", "]", ",", "d1", ":", "d1", "+", "self", ".", "output_size", "[", "2", "]", "]", "\n", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.RandomCrop.__init__": [[121, 123], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_size", ")", ":", "\n", "        ", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.RandomCrop.__call__": [[124, 148], ["numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "max", "max", "max", "numpy.pad", "numpy.pad"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "\n", "# pad the sample if necessary", "\n", "if", "label", ".", "shape", "[", "0", "]", "<=", "self", ".", "output_size", "[", "0", "]", "or", "label", ".", "shape", "[", "1", "]", "<=", "self", ".", "output_size", "[", "1", "]", "or", "label", ".", "shape", "[", "2", "]", "<=", "self", ".", "output_size", "[", "2", "]", ":", "\n", "            ", "pw", "=", "max", "(", "(", "self", ".", "output_size", "[", "0", "]", "-", "label", ".", "shape", "[", "0", "]", ")", "//", "2", "+", "3", ",", "0", ")", "\n", "ph", "=", "max", "(", "(", "self", ".", "output_size", "[", "1", "]", "-", "label", ".", "shape", "[", "1", "]", ")", "//", "2", "+", "3", ",", "0", ")", "\n", "pd", "=", "max", "(", "(", "self", ".", "output_size", "[", "2", "]", "-", "label", ".", "shape", "[", "2", "]", ")", "//", "2", "+", "3", ",", "0", ")", "\n", "image", "=", "np", ".", "pad", "(", "image", ",", "[", "(", "pw", ",", "pw", ")", ",", "(", "ph", ",", "ph", ")", ",", "(", "pd", ",", "pd", ")", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "label", "=", "np", ".", "pad", "(", "label", ",", "[", "(", "pw", ",", "pw", ")", ",", "(", "ph", ",", "ph", ")", ",", "(", "pd", ",", "pd", ")", "]", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n", "", "(", "w", ",", "h", ",", "d", ")", "=", "image", ".", "shape", "\n", "# if np.random.uniform() > 0.33:", "\n", "#     w1 = np.random.randint((w - self.output_size[0])//4, 3*(w - self.output_size[0])//4)", "\n", "#     h1 = np.random.randint((h - self.output_size[1])//4, 3*(h - self.output_size[1])//4)", "\n", "# else:", "\n", "w1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "w", "-", "self", ".", "output_size", "[", "0", "]", ")", "\n", "h1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "h", "-", "self", ".", "output_size", "[", "1", "]", ")", "\n", "d1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "d", "-", "self", ".", "output_size", "[", "2", "]", ")", "\n", "\n", "label", "=", "label", "[", "w1", ":", "w1", "+", "self", ".", "output_size", "[", "0", "]", ",", "h1", ":", "h1", "+", "self", ".", "output_size", "[", "1", "]", ",", "d1", ":", "d1", "+", "self", ".", "output_size", "[", "2", "]", "]", "\n", "image", "=", "image", "[", "w1", ":", "w1", "+", "self", ".", "output_size", "[", "0", "]", ",", "h1", ":", "h1", "+", "self", ".", "output_size", "[", "1", "]", ",", "d1", ":", "d1", "+", "self", ".", "output_size", "[", "2", "]", "]", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.RandomRotFlip.__call__": [[157, 167], ["numpy.random.randint", "numpy.rot90", "numpy.rot90", "numpy.random.randint", "numpy.flip().copy", "numpy.flip().copy", "numpy.flip", "numpy.flip"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "k", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ")", "\n", "image", "=", "np", ".", "rot90", "(", "image", ",", "k", ")", "\n", "label", "=", "np", ".", "rot90", "(", "label", ",", "k", ")", "\n", "axis", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "image", "=", "np", ".", "flip", "(", "image", ",", "axis", "=", "axis", ")", ".", "copy", "(", ")", "\n", "label", "=", "np", ".", "flip", "(", "label", ",", "axis", "=", "axis", ")", ".", "copy", "(", ")", "\n", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.RandomNoise.__init__": [[170, 173], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mu", "=", "0", ",", "sigma", "=", "0.1", ")", ":", "\n", "        ", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.RandomNoise.__call__": [[174, 180], ["numpy.clip", "numpy.random.randn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "noise", "=", "np", ".", "clip", "(", "self", ".", "sigma", "*", "np", ".", "random", ".", "randn", "(", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "2", "]", ")", ",", "-", "2", "*", "self", ".", "sigma", ",", "2", "*", "self", ".", "sigma", ")", "\n", "noise", "=", "noise", "+", "self", ".", "mu", "\n", "image", "=", "image", "+", "noise", "\n", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.CreateOnehotLabel.__init__": [[183, 185], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.CreateOnehotLabel.__call__": [[186, 192], ["numpy.zeros", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", ",", "label", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'label'", "]", "\n", "onehot_label", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_classes", ",", "label", ".", "shape", "[", "0", "]", ",", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "onehot_label", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "(", "label", "==", "i", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "{", "'image'", ":", "image", ",", "'label'", ":", "label", ",", "'onehot_label'", ":", "onehot_label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.ToTensor.__call__": [[197, 205], ["image.reshape().astype.reshape().astype.reshape().astype", "image.reshape().astype.reshape().astype.reshape", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", "=", "sample", "[", "'image'", "]", "\n", "image", "=", "image", ".", "reshape", "(", "1", ",", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "2", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "if", "'onehot_label'", "in", "sample", ":", "\n", "            ", "return", "{", "'image'", ":", "torch", ".", "from_numpy", "(", "image", ")", ",", "'label'", ":", "torch", ".", "from_numpy", "(", "sample", "[", "'label'", "]", ")", ".", "long", "(", ")", ",", "\n", "'onehot_label'", ":", "torch", ".", "from_numpy", "(", "sample", "[", "'onehot_label'", "]", ")", ".", "long", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "return", "{", "'image'", ":", "torch", ".", "from_numpy", "(", "image", ")", ",", "'label'", ":", "torch", ".", "from_numpy", "(", "sample", "[", "'label'", "]", ")", ".", "long", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.TwoStreamBatchSampler.__init__": [[214, 222], ["len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "primary_indices", ",", "secondary_indices", ",", "batch_size", ",", "secondary_batch_size", ")", ":", "\n", "        ", "self", ".", "primary_indices", "=", "primary_indices", "\n", "self", ".", "secondary_indices", "=", "secondary_indices", "\n", "self", ".", "secondary_batch_size", "=", "secondary_batch_size", "\n", "self", ".", "primary_batch_size", "=", "batch_size", "-", "secondary_batch_size", "\n", "\n", "assert", "len", "(", "self", ".", "primary_indices", ")", ">=", "self", ".", "primary_batch_size", ">", "0", "\n", "assert", "len", "(", "self", ".", "secondary_indices", ")", ">=", "self", ".", "secondary_batch_size", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.TwoStreamBatchSampler.__iter__": [[223, 231], ["fundus_dataloader.iterate_once", "fundus_dataloader.iterate_eternally", "zip", "fundus_dataloader.grouper", "fundus_dataloader.grouper"], "methods", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.iterate_once", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.iterate_eternally", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.grouper", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.grouper"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "primary_iter", "=", "iterate_once", "(", "self", ".", "primary_indices", ")", "\n", "secondary_iter", "=", "iterate_eternally", "(", "self", ".", "secondary_indices", ")", "\n", "return", "(", "\n", "primary_batch", "+", "secondary_batch", "\n", "for", "(", "primary_batch", ",", "secondary_batch", ")", "\n", "in", "zip", "(", "grouper", "(", "primary_iter", ",", "self", ".", "primary_batch_size", ")", ",", "\n", "grouper", "(", "secondary_iter", ",", "self", ".", "secondary_batch_size", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.TwoStreamBatchSampler.__len__": [[233, 235], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "primary_indices", ")", "//", "self", ".", "primary_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader._get_coutour_sample": [[70, 85], ["numpy.expand_dims", "scipy.ndimage.binary_erosion().astype", "scipy.ndimage.binary_dilation().astype", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "scipy.ndimage.binary_erosion().astype", "scipy.ndimage.binary_dilation().astype", "numpy.expand_dims", "numpy.expand_dims", "np.expand_dims.transpose", "np.expand_dims.transpose", "np.expand_dims.transpose", "np.expand_dims.transpose", "scipy.ndimage.binary_erosion", "scipy.ndimage.binary_dilation", "scipy.ndimage.binary_erosion", "scipy.ndimage.binary_dilation"], "function", ["None"], ["", "", "def", "_get_coutour_sample", "(", "y_true", ")", ":", "\n", "    ", "disc_mask", "=", "np", ".", "expand_dims", "(", "y_true", "[", "...", ",", "0", "]", ",", "axis", "=", "2", ")", "\n", "\n", "disc_erosion", "=", "ndimage", ".", "binary_erosion", "(", "disc_mask", "[", "...", ",", "0", "]", ",", "iterations", "=", "1", ")", ".", "astype", "(", "disc_mask", ".", "dtype", ")", "\n", "disc_dilation", "=", "ndimage", ".", "binary_dilation", "(", "disc_mask", "[", "...", ",", "0", "]", ",", "iterations", "=", "5", ")", ".", "astype", "(", "disc_mask", ".", "dtype", ")", "\n", "disc_contour", "=", "np", ".", "expand_dims", "(", "disc_mask", "[", "...", ",", "0", "]", "-", "disc_erosion", ",", "axis", "=", "2", ")", "\n", "disc_bg", "=", "np", ".", "expand_dims", "(", "disc_dilation", "-", "disc_mask", "[", "...", ",", "0", "]", ",", "axis", "=", "2", ")", "\n", "cup_mask", "=", "np", ".", "expand_dims", "(", "y_true", "[", "...", ",", "1", "]", ",", "axis", "=", "2", ")", "\n", "\n", "cup_erosion", "=", "ndimage", ".", "binary_erosion", "(", "cup_mask", "[", "...", ",", "0", "]", ",", "iterations", "=", "1", ")", ".", "astype", "(", "cup_mask", ".", "dtype", ")", "\n", "cup_dilation", "=", "ndimage", ".", "binary_dilation", "(", "cup_mask", "[", "...", ",", "0", "]", ",", "iterations", "=", "5", ")", ".", "astype", "(", "cup_mask", ".", "dtype", ")", "\n", "cup_contour", "=", "np", ".", "expand_dims", "(", "cup_mask", "[", "...", ",", "0", "]", "-", "cup_erosion", ",", "axis", "=", "2", ")", "\n", "cup_bg", "=", "np", ".", "expand_dims", "(", "cup_dilation", "-", "cup_mask", "[", "...", ",", "0", "]", ",", "axis", "=", "2", ")", "\n", "\n", "return", "[", "disc_contour", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "disc_bg", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "cup_contour", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ",", "cup_bg", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.iterate_once": [[236, 238], ["numpy.random.permutation"], "function", ["None"], ["", "", "def", "iterate_once", "(", "iterable", ")", ":", "\n", "    ", "return", "np", ".", "random", ".", "permutation", "(", "iterable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.iterate_eternally": [[240, 245], ["itertools.chain.from_iterable", "fundus_dataloader.iterate_eternally.infinite_shuffles"], "function", ["None"], ["", "def", "iterate_eternally", "(", "indices", ")", ":", "\n", "    ", "def", "infinite_shuffles", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "np", ".", "random", ".", "permutation", "(", "indices", ")", "\n", "", "", "return", "itertools", ".", "chain", ".", "from_iterable", "(", "infinite_shuffles", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.grouper": [[247, 252], ["zip", "iter"], "function", ["None"], ["", "def", "grouper", "(", "iterable", ",", "n", ")", ":", "\n", "    ", "\"Collect data into fixed-length chunks or blocks\"", "\n", "# grouper('ABCDEFG', 3) --> ABC DEF\"", "\n", "args", "=", "[", "iter", "(", "iterable", ")", "]", "*", "n", "\n", "return", "zip", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.low_freq_mutate_np": [[253, 276], ["numpy.fft.fftshift", "numpy.fft.fftshift", "numpy.floor().astype", "numpy.floor().astype", "numpy.floor().astype", "numpy.fft.ifftshift", "random.randint", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.amin"], "function", ["None"], ["", "def", "low_freq_mutate_np", "(", "amp_src", ",", "amp_trg", ",", "L", "=", "0.1", ")", ":", "\n", "    ", "a_src", "=", "np", ".", "fft", ".", "fftshift", "(", "amp_src", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "a_trg", "=", "np", ".", "fft", ".", "fftshift", "(", "amp_trg", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "_", ",", "h", ",", "w", "=", "a_src", ".", "shape", "\n", "b", "=", "(", "np", ".", "floor", "(", "np", ".", "amin", "(", "(", "h", ",", "w", ")", ")", "*", "L", ")", ")", ".", "astype", "(", "int", ")", "\n", "c_h", "=", "np", ".", "floor", "(", "h", "/", "2.0", ")", ".", "astype", "(", "int", ")", "\n", "c_w", "=", "np", ".", "floor", "(", "w", "/", "2.0", ")", ".", "astype", "(", "int", ")", "\n", "# print (b)", "\n", "h1", "=", "c_h", "-", "b", "\n", "h2", "=", "c_h", "+", "b", "+", "1", "\n", "w1", "=", "c_w", "-", "b", "\n", "w2", "=", "c_w", "+", "b", "+", "1", "\n", "\n", "ratio", "=", "random", ".", "randint", "(", "1", ",", "10", ")", "/", "10", "\n", "\n", "a_src", "[", ":", ",", "h1", ":", "h2", ",", "w1", ":", "w2", "]", "=", "a_trg", "[", ":", ",", "h1", ":", "h2", ",", "w1", ":", "w2", "]", "\n", "# a_src[:,h1:h2,w1:w2] = a_src[:,h1:h2,w1:w2] * ratio + a_trg[:,h1:h2,w1:w2] * (1- ratio)", "\n", "# a_src[:,h1:h2,w1:w2] = a_trg[:,h1:h2,w1:w2]", "\n", "a_src", "=", "np", ".", "fft", ".", "ifftshift", "(", "a_src", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "# a_trg[:,h1:h2,w1:w2] = a_src[:,h1:h2,w1:w2]", "\n", "# a_trg = np.fft.ifftshift( a_trg, axes=(-2, -1) )", "\n", "return", "a_src", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.source_to_target_freq": [[277, 298], ["src_img.transpose.transpose", "numpy.fft.fft2", "fundus_dataloader.low_freq_mutate_np", "numpy.fft.ifft2", "numpy.real", "np.real.transpose", "numpy.abs", "numpy.angle", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.fundus_dataloader.low_freq_mutate_np"], ["", "def", "source_to_target_freq", "(", "src_img", ",", "amp_trg", ",", "L", "=", "0.1", ")", ":", "\n", "# exchange magnitude", "\n", "# input: src_img, trg_img", "\n", "    ", "src_img", "=", "src_img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "src_img_np", "=", "src_img", "#.cpu().numpy()", "\n", "fft_src_np", "=", "np", ".", "fft", ".", "fft2", "(", "src_img_np", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "# extract amplitude and phase of both ffts", "\n", "amp_src", ",", "pha_src", "=", "np", ".", "abs", "(", "fft_src_np", ")", ",", "np", ".", "angle", "(", "fft_src_np", ")", "\n", "\n", "# mutate the amplitude part of source with target", "\n", "amp_src_", "=", "low_freq_mutate_np", "(", "amp_src", ",", "amp_trg", ",", "L", "=", "L", ")", "\n", "\n", "# mutated fft of source", "\n", "fft_src_", "=", "amp_src_", "*", "np", ".", "exp", "(", "1j", "*", "pha_src", ")", "\n", "\n", "# get the mutated image", "\n", "src_in_trg", "=", "np", ".", "fft", ".", "ifft2", "(", "fft_src_", ",", "axes", "=", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "src_in_trg", "=", "np", ".", "real", "(", "src_in_trg", ")", "\n", "\n", "return", "src_in_trg", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.recursive_glob": [[10, 18], ["os.path.join", "os.walk", "filename.endswith"], "function", ["None"], ["def", "recursive_glob", "(", "rootdir", "=", "'.'", ",", "suffix", "=", "''", ")", ":", "\n", "    ", "\"\"\"Performs recursive glob with given suffix and rootdir\n        :param rootdir is the root directory\n        :param suffix is the suffix to be searched\n    \"\"\"", "\n", "return", "[", "os", ".", "path", ".", "join", "(", "looproot", ",", "filename", ")", "\n", "for", "looproot", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "rootdir", ")", "\n", "for", "filename", "in", "filenames", "if", "filename", ".", "endswith", "(", "suffix", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.get_cityscapes_labels": [[19, 41], ["numpy.array"], "function", ["None"], ["", "def", "get_cityscapes_labels", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "\n", "# [  0,   0,   0],", "\n", "[", "128", ",", "64", ",", "128", "]", ",", "\n", "[", "244", ",", "35", ",", "232", "]", ",", "\n", "[", "70", ",", "70", ",", "70", "]", ",", "\n", "[", "102", ",", "102", ",", "156", "]", ",", "\n", "[", "190", ",", "153", ",", "153", "]", ",", "\n", "[", "153", ",", "153", ",", "153", "]", ",", "\n", "[", "250", ",", "170", ",", "30", "]", ",", "\n", "[", "220", ",", "220", ",", "0", "]", ",", "\n", "[", "107", ",", "142", ",", "35", "]", ",", "\n", "[", "152", ",", "251", ",", "152", "]", ",", "\n", "[", "0", ",", "130", ",", "180", "]", ",", "\n", "[", "220", ",", "20", ",", "60", "]", ",", "\n", "[", "255", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "142", "]", ",", "\n", "[", "0", ",", "0", ",", "70", "]", ",", "\n", "[", "0", ",", "60", ",", "100", "]", ",", "\n", "[", "0", ",", "80", ",", "100", "]", ",", "\n", "[", "0", ",", "0", ",", "230", "]", ",", "\n", "[", "119", ",", "11", ",", "32", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.get_pascal_labels": [[42, 53], ["numpy.asarray"], "function", ["None"], ["", "def", "get_pascal_labels", "(", ")", ":", "\n", "    ", "\"\"\"Load the mapping that associates pascal classes with label colors\n    Returns:\n        np.ndarray with dimensions (21, 3)\n    \"\"\"", "\n", "return", "np", ".", "asarray", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "128", ",", "0", ",", "0", "]", ",", "[", "0", ",", "128", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "128", "]", ",", "[", "128", ",", "0", ",", "128", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "128", ",", "128", ",", "128", "]", ",", "\n", "[", "64", ",", "0", ",", "0", "]", ",", "[", "192", ",", "0", ",", "0", "]", ",", "[", "64", ",", "128", ",", "0", "]", ",", "[", "192", ",", "128", ",", "0", "]", ",", "\n", "[", "64", ",", "0", ",", "128", "]", ",", "[", "192", ",", "0", ",", "128", "]", ",", "[", "64", ",", "128", ",", "128", "]", ",", "[", "192", ",", "128", ",", "128", "]", ",", "\n", "[", "0", ",", "64", ",", "0", "]", ",", "[", "128", ",", "64", ",", "0", "]", ",", "[", "0", ",", "192", ",", "0", "]", ",", "[", "128", ",", "192", ",", "0", "]", ",", "\n", "[", "0", ",", "64", ",", "128", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.encode_segmap": [[55, 70], ["mask.astype.astype", "numpy.zeros", "enumerate", "label_mask.astype.astype", "utils.get_pascal_labels", "numpy.where", "numpy.all"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.get_pascal_labels"], ["", "def", "encode_segmap", "(", "mask", ")", ":", "\n", "    ", "\"\"\"Encode segmentation label images as pascal classes\n    Args:\n        mask (np.ndarray): raw segmentation label image of dimension\n          (M, N, 3), in which the Pascal classes are encoded as colours.\n    Returns:\n        (np.ndarray): class map with dimensions (M,N), where the value at\n        a given location is the integer denoting the class index.\n    \"\"\"", "\n", "mask", "=", "mask", ".", "astype", "(", "int", ")", "\n", "label_mask", "=", "np", ".", "zeros", "(", "(", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "for", "ii", ",", "label", "in", "enumerate", "(", "get_pascal_labels", "(", ")", ")", ":", "\n", "        ", "label_mask", "[", "np", ".", "where", "(", "np", ".", "all", "(", "mask", "==", "label", ",", "axis", "=", "-", "1", ")", ")", "[", ":", "2", "]", "]", "=", "ii", "\n", "", "label_mask", "=", "label_mask", ".", "astype", "(", "int", ")", "\n", "return", "label_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.decode_seg_map_sequence": [[72, 79], ["torch.from_numpy", "torch.from_numpy", "utils.decode_segmap", "torch.from_numpy.append", "numpy.array().transpose", "numpy.array"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.decode_segmap"], ["", "def", "decode_seg_map_sequence", "(", "label_masks", ",", "dataset", "=", "'pascal'", ")", ":", "\n", "    ", "rgb_masks", "=", "[", "]", "\n", "for", "label_mask", "in", "label_masks", ":", "\n", "        ", "rgb_mask", "=", "decode_segmap", "(", "label_mask", ",", "dataset", ")", "\n", "rgb_masks", ".", "append", "(", "rgb_mask", ")", "\n", "", "rgb_masks", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "rgb_masks", ")", ".", "transpose", "(", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", ")", "\n", "return", "rgb_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.decode_segmap": [[80, 115], ["label_mask.copy", "label_mask.copy", "label_mask.copy", "range", "numpy.zeros", "utils.get_pascal_labels", "matplotlib.imshow", "matplotlib.show", "utils.get_cityscapes_labels"], "function", ["home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.get_pascal_labels", "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.get_cityscapes_labels"], ["", "def", "decode_segmap", "(", "label_mask", ",", "dataset", ",", "plot", "=", "False", ")", ":", "\n", "    ", "\"\"\"Decode segmentation class labels into a color image\n    Args:\n        label_mask (np.ndarray): an (M,N) array of integer values denoting\n          the class label at each spatial location.\n        plot (bool, optional): whether to show the resulting color image\n          in a figure.\n    Returns:\n        (np.ndarray, optional): the resulting decoded color image.\n    \"\"\"", "\n", "if", "dataset", "==", "'pascal'", ":", "\n", "        ", "n_classes", "=", "21", "\n", "label_colours", "=", "get_pascal_labels", "(", ")", "\n", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "n_classes", "=", "19", "\n", "label_colours", "=", "get_cityscapes_labels", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "r", "=", "label_mask", ".", "copy", "(", ")", "\n", "g", "=", "label_mask", ".", "copy", "(", ")", "\n", "b", "=", "label_mask", ".", "copy", "(", ")", "\n", "for", "ll", "in", "range", "(", "0", ",", "n_classes", ")", ":", "\n", "        ", "r", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "0", "]", "\n", "g", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "1", "]", "\n", "b", "[", "label_mask", "==", "ll", "]", "=", "label_colours", "[", "ll", ",", "2", "]", "\n", "", "rgb", "=", "np", ".", "zeros", "(", "(", "label_mask", ".", "shape", "[", "0", "]", ",", "label_mask", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "/", "255.0", "\n", "if", "plot", ":", "\n", "        ", "plt", ".", "imshow", "(", "rgb", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.generate_param_report": [[116, 122], ["open", "open.write", "open.close", "str"], "function", ["None"], ["", "", "def", "generate_param_report", "(", "logfile", ",", "param", ")", ":", "\n", "    ", "log_file", "=", "open", "(", "logfile", ",", "'w'", ")", "\n", "# for key, val in param.items():", "\n", "#     log_file.write(key + ':' + str(val) + '\\n')", "\n", "log_file", ".", "write", "(", "str", "(", "param", ")", ")", "\n", "log_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.cross_entropy2d": [[123, 140], ["logit.size", "target.squeeze.squeeze", "nn.CrossEntropyLoss.", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "target.squeeze.long", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "function", ["None"], ["", "def", "cross_entropy2d", "(", "logit", ",", "target", ",", "ignore_index", "=", "255", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "batch_average", "=", "True", ")", ":", "\n", "    ", "n", ",", "c", ",", "h", ",", "w", "=", "logit", ".", "size", "(", ")", "\n", "# logit = logit.permute(0, 2, 3, 1)", "\n", "target", "=", "target", ".", "squeeze", "(", "1", ")", "\n", "if", "weight", "is", "None", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "ignore_index", "=", "ignore_index", ",", "size_average", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "weight", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "ignore_index", "=", "ignore_index", ",", "size_average", "=", "False", ")", "\n", "", "loss", "=", "criterion", "(", "logit", ",", "target", ".", "long", "(", ")", ")", "\n", "\n", "if", "size_average", ":", "\n", "        ", "loss", "/=", "(", "h", "*", "w", ")", "\n", "\n", "", "if", "batch_average", ":", "\n", "        ", "loss", "/=", "n", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.lr_poly": [[141, 143], ["float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter_", ",", "max_iter", "=", "100", ",", "power", "=", "0.9", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter_", ")", "/", "max_iter", ")", "**", "power", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.get_iou": [[145, 172], ["range", "len", "range", "range", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "iou.append", "sum", "len", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "get_iou", "(", "pred", ",", "gt", ",", "n_classes", "=", "21", ")", ":", "\n", "    ", "total_iou", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "pred", ")", ")", ":", "\n", "        ", "pred_tmp", "=", "pred", "[", "i", "]", "\n", "gt_tmp", "=", "gt", "[", "i", "]", "\n", "\n", "intersect", "=", "[", "0", "]", "*", "n_classes", "\n", "union", "=", "[", "0", "]", "*", "n_classes", "\n", "for", "j", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "match", "=", "(", "pred_tmp", "==", "j", ")", "+", "(", "gt_tmp", "==", "j", ")", "\n", "\n", "it", "=", "torch", ".", "sum", "(", "match", "==", "2", ")", ".", "item", "(", ")", "\n", "un", "=", "torch", ".", "sum", "(", "match", ">", "0", ")", ".", "item", "(", ")", "\n", "\n", "intersect", "[", "j", "]", "+=", "it", "\n", "union", "[", "j", "]", "+=", "un", "\n", "\n", "", "iou", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "if", "union", "[", "k", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "iou", ".", "append", "(", "intersect", "[", "k", "]", "/", "union", "[", "k", "]", ")", "\n", "\n", "", "img_iou", "=", "(", "sum", "(", "iou", ")", "/", "len", "(", "iou", ")", ")", "\n", "total_iou", "+=", "img_iou", "\n", "\n", "", "return", "total_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.get_dice": [[173, 185], ["pred.long.long", "gt.long.long", "range", "len", "print", "torch.sum().item", "torch.sum().item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "get_dice", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "total_dice", "=", "0.0", "\n", "pred", "=", "pred", ".", "long", "(", ")", "\n", "gt", "=", "gt", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pred", ")", ")", ":", "\n", "        ", "pred_tmp", "=", "pred", "[", "i", "]", "\n", "gt_tmp", "=", "gt", "[", "i", "]", "\n", "dice", "=", "2.0", "*", "torch", ".", "sum", "(", "pred_tmp", "*", "gt_tmp", ")", ".", "item", "(", ")", "/", "(", "1.0", "+", "torch", ".", "sum", "(", "pred_tmp", "**", "2", ")", "+", "torch", ".", "sum", "(", "gt_tmp", "**", "2", ")", ")", ".", "item", "(", ")", "\n", "print", "(", "dice", ")", "\n", "total_dice", "+=", "dice", "\n", "\n", "", "return", "total_dice", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.get_mc_dice": [[186, 198], ["numpy.zeros", "pred.long.long", "gt.long.long", "range", "len", "range", "torch.sum().item", "torch.sum().item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "get_mc_dice", "(", "pred", ",", "gt", ",", "num", "=", "2", ")", ":", "\n", "# num is the total number of classes, include the background", "\n", "    ", "total_dice", "=", "np", ".", "zeros", "(", "num", "-", "1", ")", "\n", "pred", "=", "pred", ".", "long", "(", ")", "\n", "gt", "=", "gt", ".", "long", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pred", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "num", ")", ":", "\n", "            ", "pred_tmp", "=", "(", "pred", "[", "i", "]", "==", "j", ")", "\n", "gt_tmp", "=", "(", "gt", "[", "i", "]", "==", "j", ")", "\n", "dice", "=", "2.0", "*", "torch", ".", "sum", "(", "pred_tmp", "*", "gt_tmp", ")", ".", "item", "(", ")", "/", "(", "1.0", "+", "torch", ".", "sum", "(", "pred_tmp", "**", "2", ")", "+", "torch", ".", "sum", "(", "gt_tmp", "**", "2", ")", ")", ".", "item", "(", ")", "\n", "total_dice", "[", "j", "-", "1", "]", "+=", "dice", "\n", "", "", "return", "total_dice", "\n", "\n"]], "home.repos.pwc.inspect_result.liuquande_FedDG-ELCFS.dataloaders.utils.post_processing": [[199, 211], ["scipy.binary_fill_holes", "skimage.measure.label", "numpy.sum", "skimage.measure.regionprops", "range", "numpy.sum"], "function", ["None"], ["", "def", "post_processing", "(", "prediction", ")", ":", "\n", "    ", "prediction", "=", "nd", ".", "binary_fill_holes", "(", "prediction", ")", "\n", "label_cc", ",", "num_cc", "=", "measure", ".", "label", "(", "prediction", ",", "return_num", "=", "True", ")", "\n", "total_cc", "=", "np", ".", "sum", "(", "prediction", ")", "\n", "measure", ".", "regionprops", "(", "label_cc", ")", "\n", "for", "cc", "in", "range", "(", "1", ",", "num_cc", "+", "1", ")", ":", "\n", "        ", "single_cc", "=", "(", "label_cc", "==", "cc", ")", "\n", "single_vol", "=", "np", ".", "sum", "(", "single_cc", ")", "\n", "if", "single_vol", "/", "total_cc", "<", "0.2", ":", "\n", "            ", "prediction", "[", "single_cc", "]", "=", "0", "\n", "\n", "", "", "return", "prediction", "\n", "\n"]]}