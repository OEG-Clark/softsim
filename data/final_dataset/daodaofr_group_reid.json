{"home.repos.pwc.inspect_result.daodaofr_group_reid.None.transforms.Random2DTranslation.__init__": [[20, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "height", ",", "width", ",", "p", "=", "0.5", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.transforms.Random2DTranslation.__call__": [[26, 44], ["img.resize", "int", "int", "img.resize.crop", "random.random", "img.resize", "int", "int", "round", "round", "round", "round", "random.uniform", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be cropped.\n\n        Returns:\n            PIL Image: Cropped image.\n        \"\"\"", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p", ":", "\n", "            ", "return", "img", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "self", ".", "interpolation", ")", "\n", "", "new_width", ",", "new_height", "=", "int", "(", "round", "(", "self", ".", "width", "*", "1.125", ")", ")", ",", "int", "(", "round", "(", "self", ".", "height", "*", "1.125", ")", ")", "\n", "resized_img", "=", "img", ".", "resize", "(", "(", "new_width", ",", "new_height", ")", ",", "self", ".", "interpolation", ")", "\n", "x_maxrange", "=", "new_width", "-", "self", ".", "width", "\n", "y_maxrange", "=", "new_height", "-", "self", ".", "height", "\n", "x1", "=", "int", "(", "round", "(", "random", ".", "uniform", "(", "0", ",", "x_maxrange", ")", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "random", ".", "uniform", "(", "0", ",", "y_maxrange", ")", ")", ")", "\n", "croped_img", "=", "resized_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "width", ",", "y1", "+", "self", ".", "height", ")", ")", "\n", "return", "croped_img", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.transforms.RandomErasing.__init__": [[58, 64], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ",", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.transforms.RandomErasing.__call__": [[65, 91], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "size", "(", ")", "[", "2", "]", "and", "h", "<", "img", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "1", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "2", "]", "-", "w", ")", "\n", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "img", "[", "1", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "1", "]", "\n", "img", "[", "2", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.samplers.RandomIdentitySampler.__init__": [[19, 28], ["collections.defaultdict", "enumerate", "list", "len", "samplers.RandomIdentitySampler.index_dic[].append", "samplers.RandomIdentitySampler.index_dic.keys"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", "=", "4", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "gid", ",", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "#for index, (_, gid, _, _, _,_) in enumerate(data_source):", "\n", "            ", "self", ".", "index_dic", "[", "gid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_identities", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.samplers.RandomIdentitySampler.__iter__": [[29, 39], ["torch.randperm", "iter", "numpy.random.choice", "ret.extend", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_identities", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "pid", "=", "self", ".", "pids", "[", "i", "]", "\n", "t", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "replace", "=", "False", "if", "len", "(", "t", ")", ">=", "self", ".", "num_instances", "else", "True", "\n", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "replace", ")", "\n", "ret", ".", "extend", "(", "t", ")", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.samplers.RandomIdentitySampler.__len__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_identities", "*", "self", ".", "num_instances", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.evaluate": [[10, 63], ["numpy.argsort", "print", "print", "range", "numpy.asarray().astype", "numpy.mean", "print", "numpy.invert", "orig_cmc.cumsum", "np.asarray().astype.append", "orig_cmc.sum", "orig_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.any", "numpy.asarray", "orig_cmc.cumsum.sum", "numpy.asarray", "enumerate"], "function", ["None"], ["def", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "=", "50", ")", ":", "\n", "    ", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "print", "(", "indices", ".", "shape", ")", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "print", "(", "matches", ".", "shape", ")", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "orig_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "#with open('/home/yichaoyan/projects/person_search/data/dataset/Image/cmc.pkl', 'wb') as f:", "\n", "#    pickle.dump(all_cmc, f)", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "\n", "return", "all_cmc", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.evaluate_person": [[64, 123], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.mean", "print", "numpy.invert", "orig_cmc.cumsum", "np.asarray().astype.append", "orig_cmc.sum", "orig_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.any", "numpy.asarray", "orig_cmc.cumsum.sum", "numpy.asarray", "enumerate"], "function", ["None"], ["", "def", "evaluate_person", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "=", "50", ")", ":", "\n", "    ", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "#matches = matches[:,:,0]", "\n", "#print(g_pids.shape)", "\n", "#print(q_pids.shape)", "\n", "#print(matches.shape)", "\n", "#print(matches[0])", "\n", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "        ", "if", "q_pids", "[", "q_idx", "]", "==", "\"-1\"", ":", "\n", "            ", "continue", "\n", "# get query pid and camid", "\n", "", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "orig_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "#with open('/home/yichaoyan/projects/person_search/data/dataset/Image/cmc.pkl', 'wb') as f:", "\n", "#    pickle.dump(all_cmc, f)", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "\n", "return", "all_cmc", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.add_border": [[124, 145], ["numpy.copy", "isinstance", "value.flatten"], "function", ["None"], ["", "def", "add_border", "(", "im", ",", "border_width", ",", "value", ")", ":", "\n", "  ", "\"\"\"Add color border around an image. The resulting image size is not changed.\n  Args:\n    im: numpy array with shape [3, im_h, im_w]\n    border_width: scalar, measured in pixel\n    value: scalar, or numpy array with shape [3]; the color of the border\n  Returns:\n    im: numpy array with shape [3, im_h, im_w]\n  \"\"\"", "\n", "assert", "(", "im", ".", "ndim", "==", "3", ")", "and", "(", "im", ".", "shape", "[", "0", "]", "==", "3", ")", "\n", "im", "=", "np", ".", "copy", "(", "im", ")", "\n", "\n", "if", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "# reshape to [3, 1, 1]", "\n", "    ", "value", "=", "value", ".", "flatten", "(", ")", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "", "im", "[", ":", ",", ":", "border_width", ",", ":", "]", "=", "value", "\n", "im", "[", ":", ",", "-", "border_width", ":", ",", ":", "]", "=", "value", "\n", "im", "[", ":", ",", ":", ",", ":", "border_width", "]", "=", "value", "\n", "im", "[", ":", ",", ":", ",", "-", "border_width", ":", "]", "=", "value", "\n", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.make_im_grid": [[146, 175], ["isinstance", "enumerate", "len", "pad_val.flatten", "numpy.ones"], "function", ["None"], ["", "def", "make_im_grid", "(", "ims", ",", "n_rows", ",", "n_cols", ",", "space", ",", "pad_val", ")", ":", "\n", "  ", "\"\"\"Make a grid of images with space in between.\n  Args:\n    ims: a list of [3, im_h, im_w] images\n    n_rows: num of rows\n    n_cols: num of columns\n    space: the num of pixels between two images\n    pad_val: scalar, or numpy array with shape [3]; the color of the space\n  Returns:\n    ret_im: a numpy array with shape [3, H, W]\n  \"\"\"", "\n", "assert", "(", "ims", "[", "0", "]", ".", "ndim", "==", "3", ")", "and", "(", "ims", "[", "0", "]", ".", "shape", "[", "0", "]", "==", "3", ")", "\n", "assert", "len", "(", "ims", ")", "<=", "n_rows", "*", "n_cols", "\n", "h", ",", "w", "=", "ims", "[", "0", "]", ".", "shape", "[", "1", ":", "]", "\n", "H", "=", "h", "*", "n_rows", "+", "space", "*", "(", "n_rows", "-", "1", ")", "\n", "W", "=", "w", "*", "n_cols", "+", "space", "*", "(", "n_cols", "-", "1", ")", "\n", "if", "isinstance", "(", "pad_val", ",", "np", ".", "ndarray", ")", ":", "\n", "# reshape to [3, 1, 1]", "\n", "    ", "pad_val", "=", "pad_val", ".", "flatten", "(", ")", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "", "ret_im", "=", "(", "np", ".", "ones", "(", "[", "3", ",", "H", ",", "W", "]", ")", "*", "pad_val", ")", ".", "astype", "(", "ims", "[", "0", "]", ".", "dtype", ")", "\n", "for", "n", ",", "im", "in", "enumerate", "(", "ims", ")", ":", "\n", "    ", "r", "=", "n", "//", "n_cols", "\n", "c", "=", "n", "%", "n_cols", "\n", "h1", "=", "r", "*", "(", "h", "+", "space", ")", "\n", "h2", "=", "r", "*", "(", "h", "+", "space", ")", "+", "h", "\n", "w1", "=", "c", "*", "(", "w", "+", "space", ")", "\n", "w2", "=", "c", "*", "(", "w", "+", "space", ")", "+", "w", "\n", "ret_im", "[", ":", ",", "h1", ":", "h2", ",", "w1", ":", "w2", "]", "=", "im", "\n", "", "return", "ret_im", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.get_rank_list": [[177, 206], ["numpy.argsort", "zip", "same_id.append", "rank_list.append"], "function", ["None"], ["", "def", "get_rank_list", "(", "dist_vec", ",", "q_id", ",", "q_cam", ",", "g_ids", ",", "g_cams", ",", "rank_list_size", ")", ":", "\n", "  ", "\"\"\"Get the ranking list of a query image\n  Args:\n    dist_vec: a numpy array with shape [num_gallery_images], the distance\n      between the query image and all gallery images\n    q_id: a scalar, query id\n    q_cam: a scalar, query camera\n    g_ids: a numpy array with shape [num_gallery_images], gallery ids\n    g_cams: a numpy array with shape [num_gallery_images], gallery cameras\n    rank_list_size: a scalar, the number of images to show in a rank list\n  Returns:\n    rank_list: a list, the indices of gallery images to show\n    same_id: a list, len(same_id) = rank_list, whether each ranked image is\n      with same id as query\n  \"\"\"", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "dist_vec", ")", "\n", "rank_list", "=", "[", "]", "\n", "same_id", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "ind", ",", "g_id", ",", "g_cam", "in", "zip", "(", "sort_inds", ",", "g_ids", "[", "sort_inds", "]", ",", "g_cams", "[", "sort_inds", "]", ")", ":", "\n", "# Skip gallery images with same id and same camera as query", "\n", "    ", "if", "(", "q_id", "==", "g_id", ")", "and", "(", "q_cam", "==", "g_cam", ")", ":", "\n", "      ", "continue", "\n", "", "same_id", ".", "append", "(", "q_id", "==", "g_id", ")", "\n", "rank_list", ".", "append", "(", "ind", ")", "\n", "i", "+=", "1", "\n", "if", "i", ">=", "rank_list_size", ":", "\n", "      ", "break", "\n", "", "", "return", "rank_list", ",", "same_id", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.read_im": [[208, 221], ["PIL.Image.open", "im.transpose.resize", "numpy.asarray", "im.transpose.transpose"], "function", ["None"], ["", "def", "read_im", "(", "im_path", ")", ":", "\n", "# shape [H, W, 3]", "\n", "#im = np.asarray(Image.open(im_path))", "\n", "  ", "im", "=", "Image", ".", "open", "(", "im_path", ")", "\n", "# Resize to (im_h, im_w) = (128, 64)", "\n", "resize_h_w", "=", "(", "128", ",", "64", ")", "\n", "#if (im.shape[0], im.shape[1]) != resize_h_w:", "\n", "#  im = cv2.resize(im, resize_h_w[::-1], interpolation=cv2.INTER_LINEAR)", "\n", "im", "=", "im", ".", "resize", "(", "(", "64", ",", "128", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "im", "=", "np", ".", "asarray", "(", "im", ")", "\n", "# shape [3, H, W]", "\n", "im", "=", "im", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.may_make_dir": [[223, 237], ["os.path.exists", "os.path.makedirs"], "function", ["None"], ["", "def", "may_make_dir", "(", "path", ")", ":", "\n", "  ", "\"\"\"\n  Args:\n    path: a dir, or result of `osp.dirname(osp.abspath(file_path))`\n  Note:\n    `osp.exists('')` returns `False`, while `osp.exists('.')` returns `True`!\n  \"\"\"", "\n", "# This clause has mistakes:", "\n", "# if path is None or '':", "\n", "\n", "if", "path", "in", "[", "None", ",", "''", "]", ":", "\n", "    ", "return", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "    ", "os", ".", "path", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.save_im": [[238, 243], ["eval_metrics.may_make_dir", "im.transpose.transpose", "PIL.Image.fromarray().save", "os.path.dirname", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.may_make_dir"], ["", "", "def", "save_im", "(", "im", ",", "save_path", ")", ":", "\n", "  ", "\"\"\"im: shape [3, H, W]\"\"\"", "\n", "may_make_dir", "(", "ospdn", "(", "save_path", ")", ")", "\n", "im", "=", "im", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "Image", ".", "fromarray", "(", "im", ")", ".", "save", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.save_rank_list_to_im": [[245, 264], ["zip", "eval_metrics.make_im_grid", "eval_metrics.save_im", "eval_metrics.read_im", "eval_metrics.read_im", "eval_metrics.add_border", "ims.append", "numpy.array", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.make_im_grid", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.save_im", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.read_im", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.read_im", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.add_border"], ["", "def", "save_rank_list_to_im", "(", "rank_list", ",", "same_id", ",", "q_im_path", ",", "g_im_paths", ",", "save_path", ")", ":", "\n", "  ", "\"\"\"Save a query and its rank list as an image.\n  Args:\n    rank_list: a list, the indices of gallery images to show\n    same_id: a list, len(same_id) = rank_list, whether each ranked image is\n      with same id as query\n    q_im_path: query image path\n    g_im_paths: ALL gallery image paths\n    save_path: path to save the query and its rank list as an image\n  \"\"\"", "\n", "ims", "=", "[", "read_im", "(", "q_im_path", ")", "]", "\n", "for", "ind", ",", "sid", "in", "zip", "(", "rank_list", ",", "same_id", ")", ":", "\n", "    ", "im", "=", "read_im", "(", "g_im_paths", "[", "ind", "]", ")", "\n", "# Add green boundary to true positive, red to false positive", "\n", "color", "=", "np", ".", "array", "(", "[", "0", ",", "255", ",", "0", "]", ")", "if", "sid", "else", "np", ".", "array", "(", "[", "255", ",", "0", ",", "0", "]", ")", "\n", "im", "=", "add_border", "(", "im", ",", "3", ",", "color", ")", "\n", "ims", ".", "append", "(", "im", ")", "\n", "", "im", "=", "make_im_grid", "(", "ims", ",", "1", ",", "len", "(", "rank_list", ")", "+", "1", ",", "8", ",", "255", ")", "\n", "save_im", "(", "im", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.visualization_person": [[267, 280], ["range", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "eval_metrics.get_rank_list", "eval_metrics.save_rank_list_to_im", "range", "range"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.get_rank_list", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.save_rank_list_to_im"], ["", "def", "visualization_person", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ")", ":", "\n", "    ", "src_path", "=", "'/home/yy1/group_reid_graph_new/data/vis'", "\n", "dst_path", "=", "'/home/yy1/group_reid_graph_new/data/vis_part_result'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dst_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "dst_path", ")", "\n", "", "g_im_paths", "=", "[", "os", ".", "path", ".", "join", "(", "src_path", ",", "'{:04d}.jpg'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "q_pids", ".", "shape", "[", "0", "]", ")", "]", "\n", "save_paths", "=", "[", "os", ".", "path", ".", "join", "(", "dst_path", ",", "'{:04d}.jpg'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "q_pids", ".", "shape", "[", "0", "]", ")", "]", "\n", "for", "i", "in", "range", "(", "q_pids", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "q_pids", "[", "i", "]", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "rank_list", ",", "same_id", "=", "get_rank_list", "(", "\n", "distmat", "[", "i", "]", ",", "q_pids", "[", "i", "]", ",", "q_camids", "[", "i", "]", ",", "g_pids", ",", "g_camids", ",", "10", ")", "\n", "save_rank_list_to_im", "(", "rank_list", ",", "same_id", ",", "g_im_paths", "[", "i", "]", ",", "g_im_paths", ",", "save_paths", "[", "i", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_part_half_fulltest_sink.main": [[81, 251], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "transforms.Compose", "transforms.Compose", "transforms.Compose", "transforms.Compose", "dataset.CUHKGroup", "dataset.CUHKGroup", "dataset.CUHKGroup", "dataset.CUHKGroup", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "os.path.exists", "os.path.exists", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "losses.TripletLoss", "losses.ContrastiveLoss", "losses.TripletLossFilter", "losses.PermutationLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "time.time", "range", "round", "str", "print", "utils.Logger", "utils.Logger", "print", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.init_model", "models.init_model", "print", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.state_dict", "model.state_dict.update", "nn.DataParallel().cuda.load_state_dict", "filter", "torch.DataParallel().cuda", "print", "main_group_gcn_siamese_part_half_fulltest_sink.test_gcn_person_batch", "main_group_gcn_siamese_part_half_fulltest_sink.train_gcn", "datetime.timedelta", "os.join", "os.join", "transforms.Random2DTranslation", "transforms.RandomHorizontalFlip", "transforms.ToTensor", "transforms.Normalize", "transforms.Random2DTranslation", "transforms.RandomHorizontalFlip", "transforms.ToTensor", "transforms.Normalize", "transforms.Resize", "transforms.ToTensor", "transforms.Normalize", "transforms.Resize", "transforms.ToTensor", "transforms.Normalize", "nn.DataParallel().cuda.parameters", "utils.WarmupMultiStepLR", "torch.optim.lr_scheduler.StepLR", "lr_scheduler.StepLR.step", "print", "main_group_gcn_siamese_part_half_fulltest_sink.test_gcn_person_batch", "utils.save_checkpoint", "time.time", "samplers.RandomIdentitySampler", "pretrain_dict.items", "torch.DataParallel", "nn.DataParallel().cuda.module.state_dict", "nn.DataParallel().cuda.state_dict", "os.join", "str"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.__init__.init_model", "home.repos.pwc.inspect_result.daodaofr_group_reid.models.__init__.init_model", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_relative_part_1.test_gcn_person_batch", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_relative_part_1.train_gcn", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_relative_part_1.test_gcn_person_batch", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu_devices", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "args", ".", "use_cpu", ":", "use_gpu", "=", "False", "\n", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "        ", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'log_train.txt'", ")", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'log_test.txt'", ")", ")", "\n", "", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "print", "(", "\"Currently using GPU {}\"", ".", "format", "(", "args", ".", "gpu_devices", ")", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Currently using CPU (GPU is highly recommended)\"", ")", "\n", "\n", "#print(\"Initializing dataset {}\".format(args.dataset))", "\n", "# dataset = data_manager.init_dataset(name=args.dataset)", "\n", "\n", "", "transform_train", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Random2DTranslation", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "transform_train_p", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Random2DTranslation", "(", "256", ",", "128", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test_p", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "256", ",", "128", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "train_file", "=", "'data/cuhk_train.pkl'", "\n", "test_file", "=", "'data/cuhk_test.pkl'", "\n", "gallery_file", "=", "'data/cuhk_gallery.pkl'", "\n", "data_root", "=", "args", ".", "data_root", "\n", "dataset_train", "=", "CUHKGroup", "(", "train_file", ",", "data_root", ",", "True", ",", "transform_train", ",", "transform_train_p", ")", "\n", "dataset_test", "=", "CUHKGroup", "(", "test_file", ",", "data_root", ",", "False", ",", "transform_test", ",", "transform_test_p", ")", "\n", "dataset_query", "=", "CUHKGroup", "(", "test_file", ",", "data_root", ",", "False", ",", "transform_test", ",", "transform_test_p", ")", "\n", "dataset_gallery", "=", "CUHKGroup", "(", "gallery_file", ",", "data_root", ",", "False", ",", "transform_test", ",", "transform_test_p", ")", "\n", "\n", "\n", "pin_memory", "=", "True", "if", "use_gpu", "else", "False", "\n", "\n", "if", "args", ".", "xent_only", ":", "\n", "        ", "trainloader", "=", "DataLoader", "(", "\n", "dataset_train", ",", "\n", "batch_size", "=", "args", ".", "train_batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "trainloader", "=", "DataLoader", "(", "\n", "dataset_train", ",", "\n", "sampler", "=", "RandomIdentitySampler", "(", "dataset_train", ",", "num_instances", "=", "args", ".", "num_instances", ")", ",", "\n", "batch_size", "=", "args", ".", "train_batch", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "", "queryloader", "=", "DataLoader", "(", "\n", "dataset_test", ",", "\n", "batch_size", "=", "args", ".", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "querygalleryloader", "=", "DataLoader", "(", "\n", "dataset_query", ",", "\n", "batch_size", "=", "args", ".", "gallery_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "galleryloader", "=", "DataLoader", "(", "\n", "dataset_gallery", ",", "\n", "batch_size", "=", "args", ".", "gallery_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "print", "(", "\"Initializing model: {}\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "if", "args", ".", "xent_only", ":", "\n", "# model = models.init_model(name=args.arch, num_classes=dataset_train.num_train_gids, loss={'xent'})", "\n", "        ", "model", "=", "models", ".", "init_model", "(", "name", "=", "args", ".", "arch", ",", "num_classes", "=", "dataset_train", ".", "num_train_gids", ",", "loss", "=", "{", "'xent'", "}", ")", "\n", "", "else", ":", "\n", "# model = models.init_model(name=args.arch, num_classes=dataset_train.num_train_gids, loss={'xent', 'htri'})", "\n", "        ", "model", "=", "models", ".", "init_model", "(", "name", "=", "args", ".", "arch", ",", "num_classes", "=", "dataset_train", ".", "num_train_gids", ",", "\n", "num_person_classes", "=", "dataset_train", ".", "num_train_pids", ",", "loss", "=", "{", "'xent'", ",", "'htri'", "}", ")", "\n", "\n", "#criterion_xent = CrossEntropyLabelSmooth(num_classes=dataset_train.num_train_gids, use_gpu=use_gpu)", "\n", "#criterion_xent_person = CrossEntropyLabelSmooth(num_classes=dataset_train.num_train_pids, use_gpu=use_gpu)", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "pretrained_model", ")", ":", "\n", "        ", "print", "(", "\"Loading checkpoint from '{}'\"", ".", "format", "(", "args", ".", "pretrained_model", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained_model", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrain_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "pretrain_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrain_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "criterion_xent", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "criterion_xent_person", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "criterion_htri", "=", "TripletLoss", "(", "margin", "=", "args", ".", "margin", ")", "\n", "criterion_pair", "=", "ContrastiveLoss", "(", "margin", "=", "args", ".", "margin", ")", "\n", "criterion_htri_filter", "=", "TripletLossFilter", "(", "margin", "=", "args", ".", "margin", ")", "\n", "criterion_permutation", "=", "PermutationLoss", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "args", ".", "stepsize", ">", "0", ":", "\n", "        ", "if", "args", ".", "warmup", ":", "\n", "            ", "scheduler", "=", "WarmupMultiStepLR", "(", "optimizer", ",", "[", "200", ",", "400", ",", "600", "]", ")", "\n", "", "else", ":", "\n", "            ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "args", ".", "stepsize", ",", "gamma", "=", "args", ".", "gamma", ")", "\n", "", "", "start_epoch", "=", "args", ".", "start_epoch", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "print", "(", "\"Evaluate only\"", ")", "\n", "test_gcn_person_batch", "(", "model", ",", "queryloader", ",", "querygalleryloader", ",", "galleryloader", ",", "args", ".", "pool", ",", "use_gpu", ")", "\n", "#test_gcn_batch(model, queryloader, querygalleryloader, galleryloader, args.pool, use_gpu)", "\n", "#test_gcn(model, queryloader, galleryloader, args.pool, use_gpu)", "\n", "#test(model, queryloader, galleryloader, args.pool, use_gpu)", "\n", "return", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "best_rank1", "=", "-", "np", ".", "inf", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "max_epoch", ")", ":", "\n", "#print(\"==> Epoch {}/{}  lr:{}\".format(epoch + 1, args.max_epoch, scheduler.get_lr()[0]))", "\n", "\n", "        ", "train_gcn", "(", "model", ",", "criterion_xent", ",", "criterion_xent_person", ",", "criterion_pair", ",", "criterion_htri_filter", ",", "criterion_htri", ",", "criterion_permutation", ",", "optimizer", ",", "trainloader", ",", "use_gpu", ")", "\n", "#train(model, criterion_xent, criterion_htri, optimizer, trainloader, use_gpu)", "\n", "\n", "if", "args", ".", "stepsize", ">", "0", ":", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "args", ".", "eval_step", ">", "0", "and", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_step", "==", "0", "or", "(", "epoch", "+", "1", ")", "==", "args", ".", "max_epoch", ":", "\n", "            ", "print", "(", "\"==> Test\"", ")", "\n", "rank1", "=", "test_gcn_person_batch", "(", "model", ",", "queryloader", ",", "querygalleryloader", ",", "galleryloader", ",", "args", ".", "pool", ",", "use_gpu", ")", "\n", "#rank1 = test_gcn(model, queryloader, galleryloader, args.pool, use_gpu=False)", "\n", "#rank1 = test(model, queryloader, galleryloader, args.pool, use_gpu)", "\n", "is_best", "=", "rank1", ">", "best_rank1", "\n", "if", "is_best", ":", "best_rank1", "=", "rank1", "\n", "\n", "if", "use_gpu", ":", "\n", "                ", "state_dict", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "", "save_checkpoint", "(", "{", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'rank1'", ":", "rank1", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", ",", "is_best", ",", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'checkpoint_ep'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.pth.tar'", ")", ")", "\n", "\n", "", "", "elapsed", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "elapsed", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "elapsed", ")", ")", "\n", "print", "(", "\"Finished. Total elapsed time (h:m:s): {}\"", ".", "format", "(", "elapsed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_part_half_fulltest_sink.train_gcn": [[252, 335], ["model.train", "utils.AverageMeter", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pids.view().permute.view().permute", "utils.build_adj", "utils.build_pairs_correspondence", "pids1.reshape.reshape", "pids2.reshape.reshape", "pimgs1.view.size", "pimgs1.view.view", "pimgs2.view.view", "optimizer.zero_grad", "criterion_xent.backward", "optimizer.step", "utils.AverageMeter.update", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "adj_new.append", "siamese_target.cuda.cuda", "sinkhorn_target.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion_xent", "model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "criterion_htri", "criterion_htri", "criterion_xent", "criterion_xent", "criterion_pair", "criterion_permutation", "criterion_xent.data.item", "pids.view().permute.size", "print", "pids.view().permute.view", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "pimgs1.view.cuda", "pids1.reshape.cuda", "pimgs2.view.cuda", "pids2.reshape.cuda", "gids1.cuda", "gids2.cuda", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "criterion_xent_person", "criterion_xent_person", "criterion_htri_filter", "criterion_htri_filter"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.build_adj", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.build_pairs_correspondence", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.AverageMeter.update"], ["", "def", "train_gcn", "(", "model", ",", "criterion_xent", ",", "criterion_xent_person", ",", "criterion_pair", ",", "criterion_htri_filter", ",", "criterion_htri", ",", "criterion_permutation", ",", "optimizer", ",", "trainloader", ",", "use_gpu", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "num_nodes", "=", "5", "\n", "#adj = torch.ones((num_nodes, num_nodes))", "\n", "#if use_gpu:", "\n", "#    adj = adj.cuda()", "\n", "#adj = Variable(adj)", "\n", "#adj.requires_gradient = False", "\n", "\n", "for", "batch_idx", ",", "(", "imgs", ",", "gids", ",", "pimgs", ",", "pids", ",", "_", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "        ", "pids", "=", "torch", ".", "cat", "(", "pids", ",", "dim", "=", "0", ")", "\n", "pids", "=", "pids", ".", "view", "(", "num_nodes", ",", "-", "1", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "\n", "# build per image adj", "\n", "adj", "=", "build_adj", "(", "pids", ")", "\n", "#print(adj)", "\n", "adj_new", "=", "[", "]", "\n", "for", "adj0", "in", "adj", ":", "\n", "            ", "adj0", "=", "torch", ".", "from_numpy", "(", "adj0", ")", "\n", "if", "use_gpu", ":", "\n", "                ", "adj0", "=", "adj0", ".", "cuda", "(", ")", "\n", "adj0", "=", "Variable", "(", "adj0", ")", "\n", "adj0", ".", "requires_gradient", "=", "False", "\n", "#print(adj0)", "\n", "", "adj_new", ".", "append", "(", "adj0", ")", "\n", "#print(adj_new)", "\n", "\n", "#imgs1, imgs2, gids1, gids2, pimgs1, pimgs2, pids1, pids2, adj1, adj2, siamese_target = build_pairs(imgs, gids, pimgs, pids, adj_new)", "\n", "", "imgs1", ",", "imgs2", ",", "gids1", ",", "gids2", ",", "pimgs1", ",", "pimgs2", ",", "pids1", ",", "pids2", ",", "adj1", ",", "adj2", ",", "siamese_target", ",", "sinkhorn_target", "=", "build_pairs_correspondence", "(", "imgs", ",", "gids", ",", "pimgs", ",", "pids", ",", "adj_new", ")", "\n", "\n", "pids1", "=", "pids1", ".", "reshape", "(", "-", "1", ")", "\n", "pids2", "=", "pids2", ".", "reshape", "(", "-", "1", ")", "\n", "#print(pids)", "\n", "if", "use_gpu", ":", "\n", "            ", "pimgs1", ",", "pids1", ",", "pimgs2", ",", "pids2", "=", "pimgs1", ".", "cuda", "(", ")", ",", "pids1", ".", "cuda", "(", ")", ",", "pimgs2", ".", "cuda", "(", ")", ",", "pids2", ".", "cuda", "(", ")", "\n", "gids1", ",", "gids2", "=", "gids1", ".", "cuda", "(", ")", ",", "gids2", ".", "cuda", "(", ")", "\n", "siamese_target", "=", "siamese_target", ".", "cuda", "(", ")", "\n", "sinkhorn_target", "=", "sinkhorn_target", ".", "cuda", "(", ")", "\n", "", "pimgs1", ",", "pids1", "=", "Variable", "(", "pimgs1", ")", ",", "Variable", "(", "pids1", ")", "\n", "pimgs2", ",", "pids2", "=", "Variable", "(", "pimgs2", ")", ",", "Variable", "(", "pids2", ")", "\n", "b", ",", "s", ",", "c", ",", "h", ",", "w", "=", "pimgs1", ".", "size", "(", ")", "\n", "#pimgs = pimgs.permute(1, 0, 2, 3, 4).contiguous()", "\n", "pimgs1", "=", "pimgs1", ".", "view", "(", "b", "*", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "pimgs2", "=", "pimgs2", ".", "view", "(", "b", "*", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "#features = model(pimgs, adj)", "\n", "if", "args", ".", "xent_only", ":", "\n", "            ", "outputs", "=", "model", "(", "pimgs", ",", "adj_new", ")", "\n", "#loss = criterion_xent(outputs, pids)", "\n", "loss", "=", "criterion_xent", "(", "outputs", ",", "gids", ")", "\n", "", "else", ":", "\n", "# combine hard triplet loss with cross entropy loss", "\n", "            ", "features1", ",", "features2", ",", "features_p1", ",", "features_p2", ",", "outputs_p1", ",", "outputs_p2", ",", "outputs_g1", ",", "outputs_g2", ",", "sinkhorn_matrix", "=", "model", "(", "pimgs1", ",", "pimgs2", ",", "adj1", ",", "adj2", ")", "\n", "#print(outputs.size(), features.size())", "\n", "#xent_loss = criterion_xent(outputs, pids)", "\n", "#htri_loss = criterion_htri(features, pids)", "\n", "#xent_loss = criterion_xent(outputs, gids)", "\n", "#htri_loss = criterion_htri(features, gids)", "\n", "xent_loss_p1", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "[", "criterion_xent_person", "(", "o_p1", ",", "pids1", ")", "for", "o_p1", "in", "outputs_p1", "]", ")", ")", "\n", "xent_loss_p2", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "[", "criterion_xent_person", "(", "o_p2", ",", "pids2", ")", "for", "o_p2", "in", "outputs_p2", "]", ")", ")", "\n", "htri_loss_p1", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "[", "criterion_htri_filter", "(", "f_p1", ",", "pids1", ")", "for", "f_p1", "in", "features_p1", "]", ")", ")", "\n", "htri_loss_p2", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "[", "criterion_htri_filter", "(", "f_p2", ",", "pids2", ")", "for", "f_p2", "in", "features_p2", "]", ")", ")", "\n", "#xent_loss_p2 = criterion_xent_person(outputs_p2, pids2)", "\n", "htri_loss_g1", "=", "criterion_htri", "(", "features1", ",", "gids1", ")", "\n", "htri_loss_g2", "=", "criterion_htri", "(", "features2", ",", "gids2", ")", "\n", "xent_loss_g1", "=", "criterion_xent", "(", "outputs_g1", ",", "gids1", ")", "\n", "xent_loss_g2", "=", "criterion_xent", "(", "outputs_g2", ",", "gids2", ")", "\n", "pair_loss", "=", "criterion_pair", "(", "features1", ",", "features2", ",", "siamese_target", ")", "\n", "permutation_loss", "=", "criterion_permutation", "(", "sinkhorn_matrix", ",", "sinkhorn_target", ",", "adj1", ",", "adj2", ",", "siamese_target", ")", "\n", "#loss = xent_loss_p1 + xent_loss_p2 + pair_loss + xent_loss_g1 + xent_loss_g2", "\n", "#loss = xent_loss_p1 + xent_loss_p2 + pair_loss + xent_loss_g1 + xent_loss_g2 + htri_loss_g1 + htri_loss_g2 + 0.2*htri_loss_p1 + 0.2*htri_loss_p2", "\n", "loss", "=", "xent_loss_p1", "+", "xent_loss_p2", "+", "pair_loss", "+", "xent_loss_g1", "+", "xent_loss_g2", "+", "htri_loss_p1", "+", "htri_loss_p2", "+", "htri_loss_g1", "+", "htri_loss_g2", "+", "0.05", "*", "permutation_loss", "\n", "#loss = xent_loss_p1 + xent_loss_p2 + pair_loss", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "losses", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "\"Batch {}/{}\\t Loss {:.6f} ({:.6f})\"", ".", "format", "(", "batch_idx", "+", "1", ",", "len", "(", "trainloader", ")", ",", "losses", ".", "val", ",", "losses", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_part_half_fulltest_sink.test_gcn": [[336, 459], ["model.eval", "enumerate", "numpy.asarray", "numpy.asarray", "enumerate", "numpy.asarray", "numpy.asarray", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.concatenate", "numpy.concatenate", "distmat.numpy.numpy", "print", "eval_metrics.evaluate", "print", "print", "print", "print", "np.asarray.extend", "np.asarray.extend", "np.concatenate.extend", "np.concatenate.extend", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "torch.autograd.Variable", "pimgs.cuda.size", "pimgs.cuda.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable", "enumerate", "enumerate", "pimgs.cuda.cuda", "adj.cuda.cuda", "torch.autograd.Variable", "pimgs_q.cuda.size", "pimgs_q.cuda.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable", "model", "torch.pairwise_distance", "torch.autograd.Variable", "pimgs_g.cuda.size", "pimgs_g.cuda.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable", "model", "torch.pairwise_distance", "pimgs_q.cuda.cuda", "adj_q.cuda.cuda", "pimgs_g.cuda.cuda", "adj_g.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.evaluate"], ["", "", "", "def", "test_gcn", "(", "model", ",", "queryloader", ",", "galleryloader", ",", "pool", ",", "use_gpu", ",", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "q_pids", ",", "q_camids", "=", "[", "]", ",", "[", "]", "\n", "g_pids", ",", "g_camids", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "batch_idx", ",", "(", "_", ",", "gids", ",", "pimgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "        ", "q_pids", ".", "extend", "(", "gids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "max_qcam", "=", "camids", "+", "1", "\n", "\n", "for", "batch_idx", ",", "(", "_", ",", "gids", ",", "pimgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "        ", "g_pids", ".", "extend", "(", "gids", ")", "\n", "g_camids", ".", "extend", "(", "camids", "+", "max_qcam", ")", "\n", "", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "\n", "m", ",", "n", "=", "q_pids", ".", "shape", "[", "0", "]", ",", "g_pids", ".", "shape", "[", "0", "]", "\n", "distmat", "=", "torch", ".", "zeros", "(", "(", "m", ",", "m", "+", "n", ")", ")", "\n", "\n", "g_camids", "=", "np", ".", "concatenate", "(", "(", "q_camids", ",", "g_camids", ")", ",", "axis", "=", "0", ")", "\n", "g_pids", "=", "np", ".", "concatenate", "(", "(", "q_pids", ",", "g_pids", ")", ",", "axis", "=", "0", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "_", ",", "gids", ",", "pimgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "            ", "if", "use_gpu", ":", "\n", "                ", "pimgs", "=", "pimgs", ".", "cuda", "(", ")", "\n", "", "pimgs", "=", "Variable", "(", "pimgs", ")", "\n", "# b=1, n=number of clips, s=16", "\n", "b", ",", "s", ",", "c", ",", "h", ",", "w", "=", "pimgs", ".", "size", "(", ")", "\n", "#pimgs = pimgs.permute(1, 0, 2, 3, 4)", "\n", "assert", "(", "b", "==", "1", ")", "\n", "pimgs", "=", "pimgs", ".", "view", "(", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "num_nodes", "=", "s", "\n", "adj", "=", "torch", ".", "ones", "(", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "if", "use_gpu", ":", "\n", "                ", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "", "adj", "=", "Variable", "(", "adj", ")", "\n", "\n", "\n", "for", "batch_idx_q", ",", "(", "_", ",", "gids_q", ",", "pimgs_q", ",", "pids_q", ",", "camids_q", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "                ", "if", "use_gpu", ":", "\n", "                    ", "pimgs_q", "=", "pimgs_q", ".", "cuda", "(", ")", "\n", "", "pimgs_q", "=", "Variable", "(", "pimgs_q", ")", "\n", "# pimgs = pimgs.permute(1, 0, 2, 3, 4)", "\n", "b", ",", "s", ",", "c", ",", "h", ",", "w", "=", "pimgs_q", ".", "size", "(", ")", "\n", "pimgs_q", "=", "pimgs_q", ".", "view", "(", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "assert", "(", "b", "==", "1", ")", "\n", "num_nodes", "=", "s", "\n", "adj_q", "=", "torch", ".", "ones", "(", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "if", "use_gpu", ":", "\n", "                    ", "adj_q", "=", "adj_q", ".", "cuda", "(", ")", "\n", "", "adj_q", "=", "Variable", "(", "adj_q", ")", "\n", "features1", ",", "features2", "=", "model", "(", "pimgs", ",", "pimgs_q", ",", "[", "adj", "]", ",", "[", "adj_q", "]", ")", "\n", "#dist = torch.pow(features1, 2).sum(dim=1, keepdim=True) + \\", "\n", "#          torch.pow(features2, 2).sum(dim=1, keepdim=True).t()", "\n", "#dist.addmm_(1, -2, features1, features2.t())", "\n", "#print(dist)", "\n", "dist", "=", "F", ".", "pairwise_distance", "(", "features1", ",", "features2", ")", "\n", "#print(dist)", "\n", "distmat", "[", "batch_idx", ",", "batch_idx_q", "]", "=", "dist", "\n", "\n", "", "for", "batch_idx_g", ",", "(", "_", ",", "gids_g", ",", "pimgs_g", ",", "pids_g", ",", "camids_g", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "                ", "if", "use_gpu", ":", "\n", "                    ", "pimgs_g", "=", "pimgs_g", ".", "cuda", "(", ")", "\n", "", "pimgs_g", "=", "Variable", "(", "pimgs_g", ")", "\n", "# pimgs = pimgs.permute(1, 0, 2, 3, 4)", "\n", "b", ",", "s", ",", "c", ",", "h", ",", "w", "=", "pimgs_g", ".", "size", "(", ")", "\n", "pimgs_g", "=", "pimgs_g", ".", "view", "(", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "assert", "(", "b", "==", "1", ")", "\n", "num_nodes", "=", "s", "\n", "adj_g", "=", "torch", ".", "ones", "(", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "if", "use_gpu", ":", "\n", "                    ", "adj_g", "=", "adj_g", ".", "cuda", "(", ")", "\n", "", "adj_g", "=", "Variable", "(", "adj_g", ")", "\n", "features1", ",", "features2", "=", "model", "(", "pimgs", ",", "pimgs_g", ",", "[", "adj", "]", ",", "[", "adj_g", "]", ")", "\n", "#dist = torch.pow(features1, 2).sum(dim=1, keepdim=True) + \\", "\n", "#          torch.pow(features2, 2).sum(dim=1, keepdim=True).t()", "\n", "#dist.addmm_(1, -2, features1, features2.t())", "\n", "#print(dist)", "\n", "dist", "=", "F", ".", "pairwise_distance", "(", "features1", ",", "features2", ")", "\n", "#print(dist)", "\n", "distmat", "[", "batch_idx", ",", "batch_idx_g", "+", "m", "]", "=", "dist", "\n", "", "", "", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "#print(distmat)", "\n", "\n", "print", "(", "\"Computing CMC and mAP\"", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ")", "\n", "\n", "print", "(", "\"Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "'''\n    dist_qq = torch.pow(qf, 2).sum(dim=1, keepdim=True).expand(m, m) + \\\n              torch.pow(qf, 2).sum(dim=1, keepdim=True).expand(m, m).t()\n    dist_qq.addmm_(1, -2, qf, qf.t())\n    dist_qq = dist_qq.numpy()\n\n    dist_gg = torch.pow(gf, 2).sum(dim=1, keepdim=True).expand(n, n) + \\\n              torch.pow(gf, 2).sum(dim=1, keepdim=True).expand(n, n).t()\n    dist_gg.addmm_(1, -2, gf, gf.t())\n    dist_gg = dist_gg.numpy()\n\n    dist_re_rank = re_ranking(distmat, dist_qq, dist_gg)\n\n    print(\"Computing CMC and mAP\")\n    cmc, mAP = evaluate(dist_re_rank, q_pids, g_pids, q_camids, g_camids)\n\n    print(\"Results ----------\")\n    print(\"mAP: {:.1%}\".format(mAP))\n    print(\"CMC curve\")\n    for r in ranks:\n        print(\"Rank-{:<3}: {:.1%}\".format(r, cmc[r-1]))\n    print(\"------------------\")\n    '''", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_part_half_fulltest_sink.test_gcn_person_batch": [[461, 685], ["model.eval", "enumerate", "numpy.asarray", "numpy.asarray", "numpy.squeeze", "numpy.asarray", "numpy.asarray", "print", "enumerate", "enumerate", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "distmat.numpy.numpy", "distmat_p.numpy.numpy", "print", "print", "eval_metrics.evaluate", "print", "print", "print", "print", "print", "eval_metrics.evaluate_person", "print", "print", "print", "print", "np.asarray.extend", "np.squeeze.extend", "np.asarray.extend", "np.asarray.extend", "np.asarray.extend", "range", "range", "np.asarray.extend", "range", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "print", "tmp_pids.append", "range", "np.asarray.extend", "np.asarray.extend", "np.asarray.extend", "tmp_pids.append", "range", "np.asarray.extend", "np.asarray.extend", "np.asarray.extend", "time.time", "torch.autograd.Variable", "pimgs.cuda.size", "pimgs.cuda.repeat", "pimgs.cuda.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "enumerate", "enumerate", "time.time", "print", "len", "len", "tmp_pids[].append", "len", "tmp_pids[].append", "pimgs.cuda.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "adj.append", "torch.autograd.Variable", "pimgs_g.cuda.size", "pimgs_g.cuda.view", "range", "model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dist_p.addmm_", "range", "torch.pairwise_distance", "torch.autograd.Variable", "pimgs_g.cuda.size", "pimgs_g.cuda.view", "range", "model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dist_p.addmm_", "range", "torch.pairwise_distance", "len", "len", "pimgs_g.cuda.cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable", "adj_g.append", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().t", "torch.pow().sum().t", "torch.pow().sum().t", "torch.pow().sum().t", "torch.cat.t", "pimgs_g.cuda.cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable", "adj_g.append", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().t", "torch.pow().sum().t", "torch.pow().sum().t", "torch.pow().sum().t", "torch.cat.t", "adj1.cuda.cuda", "adj1.cuda.cuda", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.evaluate", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.evaluate_person"], ["", "def", "test_gcn_person_batch", "(", "model", ",", "queryloader", ",", "querygalleryloader", ",", "galleryloader", ",", "pool", ",", "use_gpu", ",", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "g_bs", "=", "16", "\n", "\n", "q_pids", ",", "q_pids_p", ",", "q_camids", ",", "q_camids_p", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "g_pids", ",", "g_pids_p", ",", "g_camids", ",", "g_camids_p", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "(", "_", ",", "gids", ",", "pimgs", ",", "pids", ",", "camids", ",", "_", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "        ", "q_pids", ".", "extend", "(", "gids", ")", "\n", "q_pids_p", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "q_camids_p", ".", "extend", "(", "[", "camids", "]", "*", "len", "(", "pids", ")", ")", "\n", "#print(camids)", "\n", "", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_pids_p", "=", "np", ".", "asarray", "(", "q_pids_p", ")", "\n", "q_pids_p", "=", "np", ".", "squeeze", "(", "q_pids_p", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "q_camids_p", "=", "np", ".", "asarray", "(", "q_camids_p", ")", "\n", "max_qcam", "=", "camids", "+", "1", "\n", "print", "(", "q_pids", ".", "shape", ",", "q_pids_p", ".", "shape", ",", "q_camids", ".", "shape", ",", "q_camids_p", ".", "shape", ")", "\n", "\n", "for", "batch_idx", ",", "(", "_", ",", "gids", ",", "pimgs", ",", "pids", ",", "camids", ",", "_", ")", "in", "enumerate", "(", "querygalleryloader", ")", ":", "\n", "        ", "g_pids", ".", "extend", "(", "gids", ")", "\n", "#print(gids, pids, camids)", "\n", "tmp_pids", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "g_bs", ")", ":", "\n", "            ", "tmp_pids", ".", "append", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "tmp_pids", "[", "j", "]", ".", "append", "(", "pids", "[", "i", "]", "[", "j", "]", ")", "\n", "# tmp_pids -> list g_bs * 5", "\n", "", "", "for", "i", "in", "range", "(", "g_bs", ")", ":", "\n", "            ", "g_pids_p", ".", "extend", "(", "tmp_pids", "[", "i", "]", ")", "\n", "#print(camids)", "\n", "#print(camids[i].item())", "\n", "g_camids", ".", "extend", "(", "[", "camids", "[", "i", "]", "]", ")", "\n", "g_camids_p", ".", "extend", "(", "[", "camids", "[", "i", "]", "]", "*", "len", "(", "tmp_pids", "[", "i", "]", ")", ")", "\n", "#g_camids_p.extend([camids]* len(pids))", "\n", "#g_pids = np.asarray(g_pids)", "\n", "#g_pids_p = np.asarray(g_pids_p)", "\n", "#g_camids = np.asarray(g_camids)", "\n", "#g_camids_p = np.asarray(g_camids_p)", "\n", "#print(g_pids.shape, g_pids_p.shape, g_camids.shape, g_camids_p.shape)", "\n", "\n", "", "", "for", "batch_idx", ",", "(", "_", ",", "gids", ",", "pimgs", ",", "pids", ",", "camids", ",", "_", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "        ", "g_pids", ".", "extend", "(", "gids", ")", "\n", "#print(gids, pids, camids)", "\n", "tmp_pids", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "g_bs", ")", ":", "\n", "            ", "tmp_pids", ".", "append", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "tmp_pids", "[", "j", "]", ".", "append", "(", "pids", "[", "i", "]", "[", "j", "]", ")", "\n", "# tmp_pids -> list g_bs * 5", "\n", "", "", "for", "i", "in", "range", "(", "g_bs", ")", ":", "\n", "            ", "g_pids_p", ".", "extend", "(", "tmp_pids", "[", "i", "]", ")", "\n", "#print(camids)", "\n", "#print(camids[i].item())", "\n", "g_camids", ".", "extend", "(", "[", "camids", "[", "i", "]", "]", ")", "\n", "g_camids_p", ".", "extend", "(", "[", "camids", "[", "i", "]", "+", "max_qcam", "]", "*", "len", "(", "tmp_pids", "[", "i", "]", ")", ")", "\n", "#g_camids_p.extend([camids]* len(pids))", "\n", "", "", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_pids_p", "=", "np", ".", "asarray", "(", "g_pids_p", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "g_camids_p", "=", "np", ".", "asarray", "(", "g_camids_p", ")", "\n", "print", "(", "g_pids", ".", "shape", ",", "g_pids_p", ".", "shape", ",", "g_camids", ".", "shape", ",", "g_camids_p", ".", "shape", ")", "\n", "\n", "m", ",", "n", "=", "q_pids", ".", "shape", "[", "0", "]", ",", "g_pids", ".", "shape", "[", "0", "]", "\n", "distmat", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "\n", "m", ",", "n", "=", "q_pids_p", ".", "shape", "[", "0", "]", ",", "g_pids_p", ".", "shape", "[", "0", "]", "\n", "distmat_p", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "p_start", "=", "0", "\n", "p_end", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "_", ",", "gids", ",", "pimgs", ",", "pids", ",", "camids", ",", "lenp", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "#if batch_idx < 1720:", "\n", "#    continue", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "use_gpu", ":", "\n", "                ", "pimgs", "=", "pimgs", ".", "cuda", "(", ")", "\n", "", "pimgs", "=", "Variable", "(", "pimgs", ")", "\n", "# b=1, n=number of clips, s=16", "\n", "b", ",", "s", ",", "c", ",", "h", ",", "w", "=", "pimgs", ".", "size", "(", ")", "\n", "#pimgs = pimgs.permute(1, 0, 2, 3, 4)", "\n", "assert", "(", "b", "==", "1", ")", "\n", "pimgs", "=", "pimgs", ".", "repeat", "(", "g_bs", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "pimgs", "=", "pimgs", ".", "view", "(", "g_bs", "*", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "#pimgs = pimgs.view(s, c, h, w)", "\n", "num_nodes", "=", "s", "\n", "adj", "=", "[", "]", "\n", "adj0", "=", "torch", ".", "ones", "(", "(", "lenp", ",", "lenp", ")", ")", "\n", "if", "use_gpu", ":", "\n", "                ", "adj0", "=", "adj0", ".", "cuda", "(", ")", "\n", "adj0", "=", "Variable", "(", "adj0", ")", "\n", "adj0", ".", "requires_gradient", "=", "False", "\n", "", "for", "aa", "in", "range", "(", "g_bs", ")", ":", "\n", "                ", "adj", ".", "append", "(", "adj0", ")", "\n", "", "p_start", "=", "batch_idx", "*", "s", "\n", "p_end", "=", "(", "batch_idx", "+", "1", ")", "*", "s", "\n", "#print(p_start, p_end)", "\n", "#print(batch_idx, g_bs, s)", "\n", "g_start", "=", "0", "\n", "g_end", "=", "0", "\n", "\n", "for", "batch_idx_g", ",", "(", "_", ",", "gids_g", ",", "pimgs_g", ",", "pids_g", ",", "camids_g", ",", "lenp_g", ")", "in", "enumerate", "(", "querygalleryloader", ")", ":", "\n", "                ", "if", "use_gpu", ":", "\n", "                    ", "pimgs_g", "=", "pimgs_g", ".", "cuda", "(", ")", "\n", "", "pimgs_g", "=", "Variable", "(", "pimgs_g", ")", "\n", "# pimgs = pimgs.permute(1, 0, 2, 3, 4)", "\n", "b", ",", "s", ",", "c", ",", "h", ",", "w", "=", "pimgs_g", ".", "size", "(", ")", "\n", "pimgs_g", "=", "pimgs_g", ".", "view", "(", "b", "*", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "#pimgs_g = pimgs_g.view(s, c, h, w)", "\n", "assert", "(", "b", "==", "g_bs", ")", "\n", "num_nodes", "=", "s", "\n", "adj_g", "=", "[", "]", "\n", "for", "aa", "in", "range", "(", "g_bs", ")", ":", "\n", "                    ", "adj1", "=", "torch", ".", "ones", "(", "(", "lenp_g", "[", "aa", "]", ",", "lenp_g", "[", "aa", "]", ")", ")", "\n", "if", "use_gpu", ":", "\n", "                       ", "adj1", "=", "adj1", ".", "cuda", "(", ")", "\n", "", "adj1", "=", "Variable", "(", "adj1", ")", "\n", "adj1", ".", "requires_gradient", "=", "False", "\n", "adj_g", ".", "append", "(", "adj1", ")", "\n", "", "features1", ",", "features2", ",", "features_p1", ",", "features_p2", "=", "model", "(", "pimgs", ",", "pimgs_g", ",", "adj", ",", "adj_g", ")", "\n", "#print(features_p1[0].shape, features_p2[0].shape)", "\n", "features_p1", "=", "torch", ".", "cat", "(", "features_p1", ",", "dim", "=", "1", ")", "\n", "features_p2", "=", "torch", ".", "cat", "(", "features_p2", ",", "dim", "=", "1", ")", "\n", "#print(features_p1.shape)", "\n", "dist_p", "=", "torch", ".", "pow", "(", "features_p1", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "torch", ".", "pow", "(", "features_p2", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "t", "(", ")", "\n", "dist_p", ".", "addmm_", "(", "1", ",", "-", "2", ",", "features_p1", ",", "features_p2", ".", "t", "(", ")", ")", "\n", "#p_end = p_start + dist_p.shape[0]", "\n", "#assert (p_end - p_start) == dist_p.shape[0]", "\n", "#print(p_end-p_start, dist_p.shape[0])", "\n", "g_end", "=", "g_start", "+", "dist_p", ".", "shape", "[", "1", "]", "\n", "#print(dist_p.shape)", "\n", "#print(features_p1.shape, features_p2.shape)", "\n", "#print(distmat_p[p_start:p_end, g_start:g_end].shape)", "\n", "#distmat_p[p_start:p_end, g_start:g_end] = dist_p", "\n", "for", "i", "in", "range", "(", "g_bs", ")", ":", "\n", "                    ", "distmat_p", "[", "p_start", ":", "p_end", ",", "g_start", "+", "i", "*", "s", ":", "g_start", "+", "(", "i", "+", "1", ")", "*", "s", "]", "=", "dist_p", "[", "i", "*", "s", ":", "(", "i", "+", "1", ")", "*", "s", ",", "i", "*", "s", ":", "(", "i", "+", "1", ")", "*", "s", "]", "\n", "#distmat_p[p_start:p_end, g_start:g_end] = dist_p", "\n", "", "assert", "(", "g_end", "==", "g_start", "+", "(", "i", "+", "1", ")", "*", "s", ")", "\n", "g_start", "=", "g_end", "\n", "#print(dist)", "\n", "dist", "=", "F", ".", "pairwise_distance", "(", "features1", ",", "features2", ")", "\n", "#print(dist.shape)", "\n", "distmat", "[", "batch_idx", ",", "batch_idx_g", "*", "g_bs", ":", "(", "batch_idx_g", "+", "1", ")", "*", "g_bs", "]", "=", "dist", "\n", "#distmat[batch_idx, batch_idx_g] = dist", "\n", "#print(g_end)", "\n", "", "max_batch_idx_g", "=", "batch_idx_g", "+", "1", "\n", "for", "batch_idx_g", ",", "(", "_", ",", "gids_g", ",", "pimgs_g", ",", "pids_g", ",", "camids_g", ",", "lenp_g", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "                ", "if", "use_gpu", ":", "\n", "                    ", "pimgs_g", "=", "pimgs_g", ".", "cuda", "(", ")", "\n", "", "pimgs_g", "=", "Variable", "(", "pimgs_g", ")", "\n", "# pimgs = pimgs.permute(1, 0, 2, 3, 4)", "\n", "b", ",", "s", ",", "c", ",", "h", ",", "w", "=", "pimgs_g", ".", "size", "(", ")", "\n", "pimgs_g", "=", "pimgs_g", ".", "view", "(", "b", "*", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "#pimgs_g = pimgs_g.view(s, c, h, w)", "\n", "assert", "(", "b", "==", "g_bs", ")", "\n", "num_nodes", "=", "s", "\n", "adj_g", "=", "[", "]", "\n", "for", "aa", "in", "range", "(", "g_bs", ")", ":", "\n", "                    ", "adj1", "=", "torch", ".", "ones", "(", "(", "lenp_g", "[", "aa", "]", ",", "lenp_g", "[", "aa", "]", ")", ")", "\n", "if", "use_gpu", ":", "\n", "                       ", "adj1", "=", "adj1", ".", "cuda", "(", ")", "\n", "", "adj1", "=", "Variable", "(", "adj1", ")", "\n", "adj1", ".", "requires_gradient", "=", "False", "\n", "adj_g", ".", "append", "(", "adj1", ")", "\n", "", "features1", ",", "features2", ",", "features_p1", ",", "features_p2", "=", "model", "(", "pimgs", ",", "pimgs_g", ",", "adj", ",", "adj_g", ")", "\n", "#print(features_p1[0].shape, features_p2[0].shape)", "\n", "features_p1", "=", "torch", ".", "cat", "(", "features_p1", ",", "dim", "=", "1", ")", "\n", "features_p2", "=", "torch", ".", "cat", "(", "features_p2", ",", "dim", "=", "1", ")", "\n", "#print(features_p1.shape)", "\n", "dist_p", "=", "torch", ".", "pow", "(", "features_p1", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "torch", ".", "pow", "(", "features_p2", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "t", "(", ")", "\n", "dist_p", ".", "addmm_", "(", "1", ",", "-", "2", ",", "features_p1", ",", "features_p2", ".", "t", "(", ")", ")", "\n", "#p_end = p_start + dist_p.shape[0]", "\n", "#assert (p_end - p_start) == dist_p.shape[0]", "\n", "#print(p_end-p_start, dist_p.shape[0])", "\n", "g_end", "=", "g_start", "+", "dist_p", ".", "shape", "[", "1", "]", "\n", "#print(dist_p.shape)", "\n", "#print(features_p1.shape, features_p2.shape)", "\n", "#print(distmat_p[p_start:p_end, g_start:g_end].shape)", "\n", "#distmat_p[p_start:p_end, g_start:g_end] = dist_p", "\n", "for", "i", "in", "range", "(", "g_bs", ")", ":", "\n", "                    ", "distmat_p", "[", "p_start", ":", "p_end", ",", "g_start", "+", "i", "*", "s", ":", "g_start", "+", "(", "i", "+", "1", ")", "*", "s", "]", "=", "dist_p", "[", "i", "*", "s", ":", "(", "i", "+", "1", ")", "*", "s", ",", "i", "*", "s", ":", "(", "i", "+", "1", ")", "*", "s", "]", "\n", "#distmat_p[p_start:p_end, g_start:g_end] = dist_p", "\n", "", "assert", "(", "g_end", "==", "g_start", "+", "(", "i", "+", "1", ")", "*", "s", ")", "\n", "g_start", "=", "g_end", "\n", "#print(dist)", "\n", "dist", "=", "F", ".", "pairwise_distance", "(", "features1", ",", "features2", ")", "\n", "#print(dist.shape)", "\n", "distmat", "[", "batch_idx", ",", "(", "max_batch_idx_g", "+", "batch_idx_g", ")", "*", "g_bs", ":", "(", "max_batch_idx_g", "+", "batch_idx_g", "+", "1", ")", "*", "g_bs", "]", "=", "dist", "\n", "#print(g_end)", "\n", "#p_start = p_end", "\n", "#print(batch_idx)", "\n", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"image {:04d}, time : {:f}\"", ".", "format", "(", "batch_idx", ",", "end_time", "-", "start_time", ")", ")", "\n", "", "", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "distmat_p", "=", "distmat_p", ".", "numpy", "(", ")", "\n", "#print(distmat)", "\n", "\n", "print", "(", "\"Computing CMC and mAP\"", ")", "\n", "print", "(", "distmat", ".", "shape", ",", "q_pids", ".", "shape", ",", "g_pids", ".", "shape", ",", "q_camids", ".", "shape", ",", "g_camids", ".", "shape", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ")", "\n", "#cmc_p, mAP_p = evaluate_person(distmat_p, q_pids_p, g_pids_p, q_camids_p, g_camids_p)", "\n", "\n", "print", "(", "\"Group Reid Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "print", "(", "distmat_p", ".", "shape", ",", "q_pids_p", ".", "shape", ",", "g_pids_p", ".", "shape", ",", "q_camids_p", ".", "shape", ",", "g_camids_p", ".", "shape", ")", "\n", "cmc_p", ",", "mAP_p", "=", "evaluate_person", "(", "distmat_p", ",", "q_pids_p", ",", "g_pids_p", ",", "q_camids_p", ",", "g_camids_p", ")", "\n", "print", "(", "\"Person Reid Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP_p", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc_p", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.dataset.CUHKGroup.__init__": [[54, 67], ["object.__init__", "open", "pickle.load", "dataset.relabel", "dataset.relabel_gid"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.dataset.relabel", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.dataset.relabel_gid"], ["    ", "def", "__init__", "(", "self", ",", "datafile", ",", "dataroot", ",", "rlb", "=", "False", ",", "transform", "=", "None", ",", "transform_p", "=", "None", ")", ":", "\n", "        ", "super", "(", "CUHKGroup", ",", "self", ")", ".", "__init__", "(", ")", "\n", "with", "open", "(", "datafile", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "all_im_name", ",", "self", ".", "all_group_id", ",", "self", ".", "all_group_pid", ",", "self", ".", "all_group_bbox", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "dataroot", "=", "dataroot", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "transform_p", "=", "transform_p", "\n", "self", ".", "relabel", "=", "rlb", "\n", "self", ".", "max_num", "=", "5", "\n", "\n", "if", "self", ".", "relabel", ":", "\n", "            ", "self", ".", "all_group_pid", ",", "self", ".", "num_train_pids", "=", "relabel", "(", "self", ".", "all_group_pid", ")", "\n", "self", ".", "all_group_id", ",", "self", ".", "num_train_gids", "=", "relabel_gid", "(", "self", ".", "all_group_id", ")", "\n", "#self.num_train_gids = len(set(self.all_group_id))", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.dataset.CUHKGroup.__len__": [[70, 72], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "all_im_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.dataset.CUHKGroup.__getitem__": [[73, 158], ["os.path.join", "dataset.read_image", "len", "enumerate", "list", "random.shuffle", "torch.cat", "dataset.CUHKGroup.crop", "enumerate", "torch.cat", "dataset.CUHKGroup.crop", "len", "len", "group_pid.append", "group_bbox.append", "len", "tmp_pid.append", "dataset.CUHKGroup.crop", "box_g[].append", "box_g[].append", "box_g[].append", "box_g[].append", "dataset.CUHKGroup.unsqueeze", "torch.cat.append", "tmp_pid.index", "range", "len", "range", "len", "range", "dataset.CUHKGroup.transform", "len", "group_pid.append", "group_bbox.append", "len", "tmp_pid.append", "dataset.CUHKGroup.crop", "box_g[].append", "box_g[].append", "box_g[].append", "box_g[].append", "dataset.CUHKGroup.unsqueeze", "torch.cat.append", "dataset.CUHKGroup.transform", "dataset.CUHKGroup.transform_p", "torch.cat.append", "tmp_pid_shuffle.append", "min", "min", "max", "max", "dataset.CUHKGroup.transform_p", "min", "min", "max", "max"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.dataset.read_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "im_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataroot", ",", "self", ".", "all_im_name", "[", "index", "]", ")", "\n", "group_id", "=", "self", ".", "all_group_id", "[", "index", "]", "\n", "group_pid", "=", "self", ".", "all_group_pid", "[", "index", "]", "\n", "group_bbox", "=", "self", ".", "all_group_bbox", "[", "index", "]", "\n", "tmp_pid", "=", "[", "]", "\n", "#tmp_pid_shuffle = []", "\n", "len_p", "=", "self", ".", "max_num", "if", "len", "(", "group_pid", ")", ">", "self", ".", "max_num", "else", "len", "(", "group_pid", ")", "\n", "\n", "img", "=", "read_image", "(", "im_name", ")", "\n", "box_g", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "\n", "if", "self", ".", "relabel", ":", "\n", "            ", "imgs_p", "=", "[", "]", "\n", "#imgs_p_shuffle = []", "\n", "while", "len", "(", "group_pid", ")", "<", "self", ".", "max_num", ":", "\n", "                ", "group_pid", ".", "append", "(", "-", "1", ")", "\n", "group_bbox", ".", "append", "(", "group_bbox", "[", "-", "1", "]", ")", "\n", "", "if", "len", "(", "group_pid", ")", ">", "self", ".", "max_num", ":", "\n", "                ", "group_pid", "=", "group_pid", "[", ":", "self", ".", "max_num", "]", "\n", "", "for", "i", ",", "pid", "in", "enumerate", "(", "group_pid", ")", ":", "\n", "                ", "tmp_pid", ".", "append", "(", "pid", ")", "\n", "tmp_bbox", "=", "group_bbox", "[", "i", "]", "\n", "tmp_pimg", "=", "img", ".", "crop", "(", "(", "tmp_bbox", "[", "0", "]", ",", "tmp_bbox", "[", "1", "]", ",", "tmp_bbox", "[", "0", "]", "+", "tmp_bbox", "[", "2", "]", ",", "tmp_bbox", "[", "1", "]", "+", "tmp_bbox", "[", "3", "]", ")", ")", "\n", "box_g", "[", "0", "]", ".", "append", "(", "tmp_bbox", "[", "0", "]", ")", "\n", "box_g", "[", "1", "]", ".", "append", "(", "tmp_bbox", "[", "1", "]", ")", "\n", "box_g", "[", "2", "]", ".", "append", "(", "tmp_bbox", "[", "0", "]", "+", "tmp_bbox", "[", "2", "]", ")", "\n", "box_g", "[", "3", "]", ".", "append", "(", "tmp_bbox", "[", "1", "]", "+", "tmp_bbox", "[", "3", "]", ")", "\n", "# tmp_pimg.show()", "\n", "if", "self", ".", "transform_p", "is", "not", "None", ":", "\n", "                    ", "tmp_pimg", "=", "self", ".", "transform_p", "(", "tmp_pimg", ")", "\n", "", "tmp_pimg", "=", "tmp_pimg", ".", "unsqueeze", "(", "0", ")", "\n", "imgs_p", ".", "append", "(", "tmp_pimg", ")", "\n", "", "if", "-", "1", "in", "tmp_pid", ":", "\n", "                ", "len_idx", "=", "tmp_pid", ".", "index", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "len_idx", "=", "self", ".", "max_num", "\n", "", "rand_idx", "=", "list", "(", "range", "(", "len_idx", ")", ")", "\n", "random", ".", "shuffle", "(", "rand_idx", ")", "\n", "imgs_p_shuffle", "=", "[", "imgs_p", "[", "i", "]", "for", "i", "in", "rand_idx", "]", "\n", "if", "len", "(", "imgs_p_shuffle", ")", "<", "self", ".", "max_num", ":", "\n", "                ", "for", "i", "in", "range", "(", "len_idx", ",", "self", ".", "max_num", ")", ":", "\n", "                    ", "imgs_p_shuffle", ".", "append", "(", "imgs_p", "[", "i", "]", ")", "\n", "", "", "tmp_pid_shuffle", "=", "[", "tmp_pid", "[", "i", "]", "for", "i", "in", "rand_idx", "]", "\n", "if", "len", "(", "tmp_pid_shuffle", ")", "<", "self", ".", "max_num", ":", "\n", "                ", "for", "i", "in", "range", "(", "len_idx", ",", "self", ".", "max_num", ")", ":", "\n", "                    ", "tmp_pid_shuffle", ".", "append", "(", "tmp_pid", "[", "i", "]", ")", "\n", "", "", "imgs_p_shuffle", "=", "torch", ".", "cat", "(", "imgs_p_shuffle", ",", "dim", "=", "0", ")", "\n", "#print(tmp_pid)", "\n", "#print(tmp_pid_shuffle)", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "min", "(", "box_g", "[", "0", "]", ")", ",", "min", "(", "box_g", "[", "1", "]", ")", ",", "max", "(", "box_g", "[", "2", "]", ")", ",", "max", "(", "box_g", "[", "3", "]", ")", ")", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "group_id", ",", "imgs_p_shuffle", ",", "tmp_pid_shuffle", ",", "index", "\n", "", "else", ":", "\n", "            ", "imgs_p", "=", "[", "]", "\n", "#tmp_pid = []", "\n", "while", "len", "(", "group_pid", ")", "<", "self", ".", "max_num", ":", "\n", "                ", "group_pid", ".", "append", "(", "\"-1\"", ")", "\n", "group_bbox", ".", "append", "(", "group_bbox", "[", "-", "1", "]", ")", "\n", "", "if", "len", "(", "group_pid", ")", ">", "self", ".", "max_num", ":", "\n", "                ", "group_pid", "=", "group_pid", "[", ":", "self", ".", "max_num", "]", "\n", "#print(group_pid)", "\n", "#print(group_bbox)", "\n", "", "for", "i", ",", "pid", "in", "enumerate", "(", "group_pid", ")", ":", "\n", "                ", "tmp_pid", ".", "append", "(", "pid", ")", "\n", "#print(i)", "\n", "#print(len(group_bbox))", "\n", "tmp_bbox", "=", "group_bbox", "[", "i", "]", "\n", "tmp_pimg", "=", "img", ".", "crop", "(", "(", "tmp_bbox", "[", "0", "]", ",", "tmp_bbox", "[", "1", "]", ",", "tmp_bbox", "[", "0", "]", "+", "tmp_bbox", "[", "2", "]", ",", "tmp_bbox", "[", "1", "]", "+", "tmp_bbox", "[", "3", "]", ")", ")", "\n", "box_g", "[", "0", "]", ".", "append", "(", "tmp_bbox", "[", "0", "]", ")", "\n", "box_g", "[", "1", "]", ".", "append", "(", "tmp_bbox", "[", "1", "]", ")", "\n", "box_g", "[", "2", "]", ".", "append", "(", "tmp_bbox", "[", "0", "]", "+", "tmp_bbox", "[", "2", "]", ")", "\n", "box_g", "[", "3", "]", ".", "append", "(", "tmp_bbox", "[", "1", "]", "+", "tmp_bbox", "[", "3", "]", ")", "\n", "if", "self", ".", "transform_p", "is", "not", "None", ":", "\n", "                    ", "tmp_pimg", "=", "self", ".", "transform_p", "(", "tmp_pimg", ")", "\n", "", "tmp_pimg", "=", "tmp_pimg", ".", "unsqueeze", "(", "0", ")", "\n", "imgs_p", ".", "append", "(", "tmp_pimg", ")", "\n", "", "imgs_p", "=", "torch", ".", "cat", "(", "imgs_p", ",", "dim", "=", "0", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "min", "(", "box_g", "[", "0", "]", ")", ",", "min", "(", "box_g", "[", "1", "]", ")", ",", "max", "(", "box_g", "[", "2", "]", ")", ",", "max", "(", "box_g", "[", "3", "]", ")", ")", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "group_id", ",", "imgs_p", ",", "tmp_pid", ",", "index", ",", "len_p", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.dataset.read_image": [[8, 20], ["PIL.Image.open().convert", "print", "PIL.Image.open"], "function", ["None"], ["def", "read_image", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"Keep reading image until succeed.\n    This can avoid IOError incurred by heavy IO process.\"\"\"", "\n", "got_img", "=", "False", "\n", "while", "not", "got_img", ":", "\n", "        ", "try", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "got_img", "=", "True", "\n", "", "except", "IOError", ":", "\n", "            ", "print", "(", "\"IOError incurred when reading '{}'. Will redo. Don't worry. Just chill.\"", ".", "format", "(", "img_path", ")", ")", "\n", "pass", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.dataset.relabel": [[21, 42], ["list", "set", "list.remove", "max", "new_label.append", "max", "t_new_label.append", "list.index", "t_new_label.append"], "function", ["None"], ["", "def", "relabel", "(", "labels", ")", ":", "\n", "    ", "labels_all", "=", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "labels_all", "+=", "label", "\n", "", "u_label", "=", "list", "(", "set", "(", "labels_all", ")", ")", "\n", "if", "\"-1\"", "in", "u_label", ":", "\n", "        ", "u_label", ".", "remove", "(", "\"-1\"", ")", "\n", "", "new_label", "=", "[", "]", "\n", "class_p", "=", "0", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "t_new_label", "=", "[", "]", "\n", "for", "ll", "in", "label", ":", "\n", "            ", "if", "ll", "==", "\"-1\"", ":", "\n", "                ", "t_new_label", ".", "append", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "idx", "=", "u_label", ".", "index", "(", "ll", ")", "\n", "t_new_label", ".", "append", "(", "idx", ")", "\n", "", "", "class_p", "=", "max", "(", "class_p", ",", "max", "(", "t_new_label", ")", ")", "\n", "new_label", ".", "append", "(", "t_new_label", ")", "\n", "\n", "", "return", "new_label", ",", "class_p", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.dataset.relabel_gid": [[43, 51], ["list", "len", "set", "new_label.append", "list.index"], "function", ["None"], ["", "def", "relabel_gid", "(", "labels", ")", ":", "\n", "    ", "labels_all", "=", "list", "(", "set", "(", "labels", ")", ")", "\n", "new_label", "=", "[", "]", "\n", "for", "label", "in", "labels", ":", "\n", "        ", "new_label", ".", "append", "(", "labels_all", ".", "index", "(", "label", ")", ")", "\n", "#class_g = len(new_label)", "\n", "", "class_g", "=", "len", "(", "labels_all", ")", "\n", "return", "new_label", ",", "class_g", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.AverageMeter.__init__": [[30, 32], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.AverageMeter.reset": [[33, 38], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.AverageMeter.update": [[39, 44], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.__init__": [[59, 65], ["utils.mkdir_if_missing", "open", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.mkdir_if_missing"], ["def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.__del__": [[66, 68], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.__enter__": [[69, 71], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.__exit__": [[72, 74], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.write": [[75, 79], ["utils.Logger.console.write", "utils.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.write", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.flush": [[80, 85], ["utils.Logger.console.flush", "utils.Logger.file.flush", "os.fsync", "os.fsync", "os.fsync", "os.fsync", "utils.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.flush", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.close": [[86, 90], ["utils.Logger.console.close", "utils.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.close", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.WarmupMultiStepLR.__init__": [[105, 132], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "0.01", ",", "\n", "warmup_iters", "=", "20.", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "# print(self.last_epoch)", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.WarmupMultiStepLR.get_lr": [[134, 150], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "# print(self.last_epoch)", "\n", "                ", "alpha", "=", "(", "self", ".", "last_epoch", "+", "1", ")", "/", "self", ".", "warmup_iters", "\n", "# print(alpha)", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "# print(warmup_factor)", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.mkdir_if_missing": [[15, 22], ["os.exists", "os.makedirs", "os.makedirs"], "function", ["None"], ["def", "mkdir_if_missing", "(", "directory", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.save_checkpoint": [[46, 51], ["utils.mkdir_if_missing", "torch.save", "os.dirname", "shutil.copy", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.mkdir_if_missing"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "fpath", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "'best_model.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.read_json": [[92, 96], ["open", "json.load"], "function", ["None"], ["", "", "", "def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.write_json": [[98, 102], ["utils.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.k_reciprocal_neigh": [[183, 188], ["numpy.where"], "function", ["None"], ["def", "k_reciprocal_neigh", "(", "initial_rank", ",", "i", ",", "k1", ")", ":", "\n", "    ", "forward_k_neigh_index", "=", "initial_rank", "[", "i", ",", ":", "k1", "+", "1", "]", "\n", "backward_k_neigh_index", "=", "initial_rank", "[", "forward_k_neigh_index", ",", ":", "k1", "+", "1", "]", "\n", "fi", "=", "np", ".", "where", "(", "backward_k_neigh_index", "==", "i", ")", "[", "0", "]", "\n", "return", "forward_k_neigh_index", "[", "fi", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.re_ranking": [[190, 252], ["numpy.concatenate", "numpy.transpose", "numpy.zeros_like().astype", "numpy.argpartition", "range", "range", "numpy.zeros_like", "range", "range", "utils.k_reciprocal_neigh", "range", "numpy.unique", "numpy.exp", "numpy.zeros_like", "range", "invIndex.append", "numpy.zeros", "range", "numpy.concatenate", "numpy.concatenate", "numpy.max", "numpy.zeros_like", "len", "utils.k_reciprocal_neigh", "numpy.sum", "numpy.mean", "numpy.where", "len", "int", "len", "numpy.append", "numpy.where", "numpy.minimum", "numpy.around", "numpy.intersect1d", "len"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.k_reciprocal_neigh", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.k_reciprocal_neigh"], ["", "def", "re_ranking", "(", "q_g_dist", ",", "q_q_dist", ",", "g_g_dist", ",", "k1", "=", "20", ",", "k2", "=", "6", ",", "lambda_value", "=", "0.3", ")", ":", "\n", "# The following naming, e.g. gallery_num, is different from outer scope.", "\n", "# Don't care about it.", "\n", "    ", "original_dist", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "concatenate", "(", "[", "q_q_dist", ",", "q_g_dist", "]", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "q_g_dist", ".", "T", ",", "g_g_dist", "]", ",", "axis", "=", "1", ")", "]", ",", "\n", "axis", "=", "0", ")", "\n", "#original_dist = 2. - 2 * original_dist  # np.power(original_dist, 2).astype(np.float32)", "\n", "original_dist", "=", "np", ".", "transpose", "(", "1.", "*", "original_dist", "/", "np", ".", "max", "(", "original_dist", ",", "axis", "=", "0", ")", ")", "\n", "V", "=", "np", ".", "zeros_like", "(", "original_dist", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# initial_rank = np.argsort(original_dist).astype(np.int32)", "\n", "# top K1+1", "\n", "initial_rank", "=", "np", ".", "argpartition", "(", "original_dist", ",", "range", "(", "1", ",", "k1", "+", "1", ")", ")", "\n", "\n", "query_num", "=", "q_g_dist", ".", "shape", "[", "0", "]", "\n", "all_num", "=", "original_dist", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "# k-reciprocal neighbors", "\n", "        ", "k_reciprocal_index", "=", "k_reciprocal_neigh", "(", "initial_rank", ",", "i", ",", "k1", ")", "\n", "k_reciprocal_expansion_index", "=", "k_reciprocal_index", "\n", "for", "j", "in", "range", "(", "len", "(", "k_reciprocal_index", ")", ")", ":", "\n", "            ", "candidate", "=", "k_reciprocal_index", "[", "j", "]", "\n", "candidate_k_reciprocal_index", "=", "k_reciprocal_neigh", "(", "initial_rank", ",", "candidate", ",", "int", "(", "np", ".", "around", "(", "k1", "/", "2", ")", ")", ")", "\n", "if", "len", "(", "np", ".", "intersect1d", "(", "candidate_k_reciprocal_index", ",", "k_reciprocal_index", ")", ")", ">", "2.", "/", "3", "*", "len", "(", "\n", "candidate_k_reciprocal_index", ")", ":", "\n", "                ", "k_reciprocal_expansion_index", "=", "np", ".", "append", "(", "k_reciprocal_expansion_index", ",", "candidate_k_reciprocal_index", ")", "\n", "\n", "", "", "k_reciprocal_expansion_index", "=", "np", ".", "unique", "(", "k_reciprocal_expansion_index", ")", "\n", "weight", "=", "np", ".", "exp", "(", "-", "original_dist", "[", "i", ",", "k_reciprocal_expansion_index", "]", ")", "\n", "V", "[", "i", ",", "k_reciprocal_expansion_index", "]", "=", "1.", "*", "weight", "/", "np", ".", "sum", "(", "weight", ")", "\n", "\n", "", "original_dist", "=", "original_dist", "[", ":", "query_num", ",", "]", "\n", "if", "k2", "!=", "1", ":", "\n", "        ", "V_qe", "=", "np", ".", "zeros_like", "(", "V", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "            ", "V_qe", "[", "i", ",", ":", "]", "=", "np", ".", "mean", "(", "V", "[", "initial_rank", "[", "i", ",", ":", "k2", "]", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "", "V", "=", "V_qe", "\n", "del", "V_qe", "\n", "", "del", "initial_rank", "\n", "invIndex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "all_num", ")", ":", "\n", "        ", "invIndex", ".", "append", "(", "np", ".", "where", "(", "V", "[", ":", ",", "i", "]", "!=", "0", ")", "[", "0", "]", ")", "\n", "\n", "", "jaccard_dist", "=", "np", ".", "zeros_like", "(", "original_dist", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "query_num", ")", ":", "\n", "        ", "temp_min", "=", "np", ".", "zeros", "(", "shape", "=", "[", "1", ",", "all_num", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "indNonZero", "=", "np", ".", "where", "(", "V", "[", "i", ",", ":", "]", "!=", "0", ")", "[", "0", "]", "\n", "indImages", "=", "[", "]", "\n", "indImages", "=", "[", "invIndex", "[", "ind", "]", "for", "ind", "in", "indNonZero", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "indNonZero", ")", ")", ":", "\n", "            ", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "=", "temp_min", "[", "0", ",", "indImages", "[", "j", "]", "]", "+", "np", ".", "minimum", "(", "V", "[", "i", ",", "indNonZero", "[", "j", "]", "]", ",", "\n", "V", "[", "indImages", "[", "j", "]", ",", "indNonZero", "[", "j", "]", "]", ")", "\n", "", "jaccard_dist", "[", "i", "]", "=", "1", "-", "temp_min", "/", "(", "2.", "-", "temp_min", ")", "\n", "\n", "", "final_dist", "=", "jaccard_dist", "*", "(", "1", "-", "lambda_value", ")", "+", "original_dist", "*", "lambda_value", "\n", "del", "original_dist", "\n", "del", "V", "\n", "del", "jaccard_dist", "\n", "final_dist", "=", "final_dist", "[", ":", "query_num", ",", "query_num", ":", "]", "\n", "return", "final_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.build_adj": [[253, 264], ["range", "numpy.argwhere", "len", "adj.append", "adj.append", "tmp_pid.numpy", "numpy.ones", "numpy.ones"], "function", ["None"], ["", "def", "build_adj", "(", "pids", ")", ":", "\n", "    ", "adj", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "pids", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "tmp_pid", "=", "pids", "[", "i", "]", "\n", "tmp_idx", "=", "np", ".", "argwhere", "(", "tmp_pid", ".", "numpy", "(", ")", "==", "-", "1", ")", "\n", "#print(tmp_idx)", "\n", "if", "len", "(", "tmp_idx", ")", ">", "0", ":", "\n", "            ", "adj", ".", "append", "(", "np", ".", "ones", "(", "(", "tmp_idx", "[", "0", "]", "[", "0", "]", ",", "tmp_idx", "[", "0", "]", "[", "0", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "adj", ".", "append", "(", "np", ".", "ones", "(", "(", "pids", ".", "shape", "[", "1", "]", ",", "pids", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "", "", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.build_pairs": [[265, 321], ["imgs.size", "numpy.zeros().astype", "range", "torch.cat", "torch.cat", "torch.from_numpy", "torch.zeros_like", "enumerate", "torch.zeros_like", "enumerate", "random.randint", "imgs[].unsqueeze", "pimgs[].unsqueeze", "numpy.zeros", "idx.append", "list", "list.remove", "list.remove", "random.shuffle", "idx.append", "list", "list.remove", "list.remove", "random.shuffle", "idx.append", "idx.append", "range", "range"], "function", ["None"], ["", "def", "build_pairs", "(", "imgs", ",", "gids", ",", "pimgs", ",", "pids", ",", "adj_new", ")", ":", "\n", "    ", "bs", "=", "imgs", ".", "size", "(", "0", ")", "\n", "ss", "=", "2", "\n", "imgs1", "=", "imgs", "\n", "gids1", "=", "gids", "\n", "pimgs1", "=", "pimgs", "\n", "pids1", "=", "pids", "\n", "adj1", "=", "adj_new", "\n", "\n", "idx", "=", "[", "]", "\n", "siamese_target", "=", "np", ".", "zeros", "(", "(", "bs", ")", ")", ".", "astype", "(", "float", ")", "\n", "#siamese_target = np.zeros((bs))", "\n", "for", "i", "in", "range", "(", "bs", "//", "2", ")", ":", "\n", "        ", "is_pair", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "is_pair", ":", "\n", "            ", "siamese_target", "[", "2", "*", "i", "]", "=", "1", "\n", "siamese_target", "[", "2", "*", "i", "+", "1", "]", "=", "0", "\n", "idx", ".", "append", "(", "2", "*", "i", "+", "1", ")", "\n", "tmp_idx", "=", "list", "(", "range", "(", "bs", ")", ")", "\n", "tmp_idx", ".", "remove", "(", "2", "*", "i", ")", "\n", "tmp_idx", ".", "remove", "(", "2", "*", "i", "+", "1", ")", "\n", "random", ".", "shuffle", "(", "tmp_idx", ")", "\n", "idx", ".", "append", "(", "tmp_idx", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "siamese_target", "[", "2", "*", "i", "]", "=", "0", "\n", "siamese_target", "[", "2", "*", "i", "+", "1", "]", "=", "1", "\n", "tmp_idx", "=", "list", "(", "range", "(", "bs", ")", ")", "\n", "tmp_idx", ".", "remove", "(", "2", "*", "i", ")", "\n", "tmp_idx", ".", "remove", "(", "2", "*", "i", "+", "1", ")", "\n", "random", ".", "shuffle", "(", "tmp_idx", ")", "\n", "idx", ".", "append", "(", "tmp_idx", "[", "0", "]", ")", "\n", "idx", ".", "append", "(", "2", "*", "i", ")", "\n", "\n", "", "", "imgs2", "=", "[", "imgs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "idx", "]", "\n", "imgs2", "=", "torch", ".", "cat", "(", "imgs2", ",", "0", ")", "\n", "\n", "pimgs2", "=", "[", "pimgs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "idx", "]", "\n", "pimgs2", "=", "torch", ".", "cat", "(", "pimgs2", ",", "0", ")", "\n", "\n", "#print(idx)", "\n", "adj2", "=", "[", "adj_new", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "\n", "siamese_target", "=", "torch", ".", "from_numpy", "(", "siamese_target", ")", "\n", "\n", "gids2", "=", "torch", ".", "zeros_like", "(", "gids", ")", "\n", "for", "i", ",", "ind", "in", "enumerate", "(", "idx", ")", ":", "\n", "        ", "gids2", "[", "i", "]", "=", "gids", "[", "ind", "]", "\n", "\n", "", "pids2", "=", "torch", ".", "zeros_like", "(", "pids", ")", "\n", "for", "i", ",", "ind", "in", "enumerate", "(", "idx", ")", ":", "\n", "        ", "pids2", "[", "i", "]", "=", "pids", "[", "ind", "]", "\n", "\n", "#print(imgs1.shape, imgs2.shape, gids1.shape, gids2.shape, pimgs1.shape, pimgs2.shape, pids1.shape, pids2.shape, siamese_target.shape)", "\n", "#print(idx, gids1, gids2, siamese_target)", "\n", "\n", "", "return", "imgs1", ",", "imgs2", ",", "gids1", ",", "gids2", ",", "pimgs1", ",", "pimgs2", ",", "pids1", ",", "pids2", ",", "adj1", ",", "adj2", ",", "siamese_target", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.build_pairs_correspondence": [[322, 393], ["imgs.size", "numpy.zeros().astype", "range", "torch.cat", "torch.cat", "torch.from_numpy", "torch.zeros_like", "enumerate", "torch.zeros_like", "enumerate", "numpy.zeros().astype", "range", "torch.from_numpy().float", "random.randint", "imgs[].unsqueeze", "pimgs[].unsqueeze", "numpy.zeros", "idx.append", "list", "list.remove", "list.remove", "random.shuffle", "idx.append", "list", "list.remove", "list.remove", "random.shuffle", "idx.append", "idx.append", "numpy.zeros", "range", "torch.from_numpy", "range", "range"], "function", ["None"], ["", "def", "build_pairs_correspondence", "(", "imgs", ",", "gids", ",", "pimgs", ",", "pids", ",", "adj_new", ")", ":", "\n", "    ", "bs", "=", "imgs", ".", "size", "(", "0", ")", "\n", "ss", "=", "2", "\n", "imgs1", "=", "imgs", "\n", "gids1", "=", "gids", "\n", "pimgs1", "=", "pimgs", "\n", "pids1", "=", "pids", "\n", "adj1", "=", "adj_new", "\n", "\n", "idx", "=", "[", "]", "\n", "siamese_target", "=", "np", ".", "zeros", "(", "(", "bs", ")", ")", ".", "astype", "(", "float", ")", "\n", "#siamese_target = np.zeros((bs))", "\n", "for", "i", "in", "range", "(", "bs", "//", "2", ")", ":", "\n", "        ", "is_pair", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "is_pair", ":", "\n", "            ", "siamese_target", "[", "2", "*", "i", "]", "=", "1", "\n", "siamese_target", "[", "2", "*", "i", "+", "1", "]", "=", "0", "\n", "idx", ".", "append", "(", "2", "*", "i", "+", "1", ")", "\n", "tmp_idx", "=", "list", "(", "range", "(", "bs", ")", ")", "\n", "tmp_idx", ".", "remove", "(", "2", "*", "i", ")", "\n", "tmp_idx", ".", "remove", "(", "2", "*", "i", "+", "1", ")", "\n", "random", ".", "shuffle", "(", "tmp_idx", ")", "\n", "idx", ".", "append", "(", "tmp_idx", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "siamese_target", "[", "2", "*", "i", "]", "=", "0", "\n", "siamese_target", "[", "2", "*", "i", "+", "1", "]", "=", "1", "\n", "tmp_idx", "=", "list", "(", "range", "(", "bs", ")", ")", "\n", "tmp_idx", ".", "remove", "(", "2", "*", "i", ")", "\n", "tmp_idx", ".", "remove", "(", "2", "*", "i", "+", "1", ")", "\n", "random", ".", "shuffle", "(", "tmp_idx", ")", "\n", "idx", ".", "append", "(", "tmp_idx", "[", "0", "]", ")", "\n", "idx", ".", "append", "(", "2", "*", "i", ")", "\n", "\n", "", "", "imgs2", "=", "[", "imgs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "idx", "]", "\n", "imgs2", "=", "torch", ".", "cat", "(", "imgs2", ",", "0", ")", "\n", "\n", "pimgs2", "=", "[", "pimgs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "idx", "]", "\n", "pimgs2", "=", "torch", ".", "cat", "(", "pimgs2", ",", "0", ")", "\n", "\n", "#print(idx)", "\n", "adj2", "=", "[", "adj_new", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "\n", "siamese_target", "=", "torch", ".", "from_numpy", "(", "siamese_target", ")", "\n", "\n", "gids2", "=", "torch", ".", "zeros_like", "(", "gids", ")", "\n", "for", "i", ",", "ind", "in", "enumerate", "(", "idx", ")", ":", "\n", "        ", "gids2", "[", "i", "]", "=", "gids", "[", "ind", "]", "\n", "\n", "", "pids2", "=", "torch", ".", "zeros_like", "(", "pids", ")", "\n", "for", "i", ",", "ind", "in", "enumerate", "(", "idx", ")", ":", "\n", "        ", "pids2", "[", "i", "]", "=", "pids", "[", "ind", "]", "\n", "\n", "#print(\"#############\")", "\n", "#print(pids1)", "\n", "#print(pids2)  ", "\n", "", "sinkhorn_target", "=", "np", ".", "zeros", "(", "(", "pids1", ".", "shape", "[", "0", "]", ",", "pids1", ".", "shape", "[", "1", "]", ",", "pids2", ".", "shape", "[", "1", "]", ")", ")", ".", "astype", "(", "float", ")", "\n", "for", "i", "in", "range", "(", "pids1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "siamese_target", "[", "i", "]", ">", "0", ":", "\n", "            ", "for", "j", "in", "range", "(", "pids1", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "pids1", "[", "i", "]", "[", "j", "]", ">", "-", "1", ":", "\n", "                    ", "idx", "=", "(", "pids2", "[", "i", "]", "==", "pids", "[", "i", "]", "[", "j", "]", ")", ".", "nonzero", "(", ")", "\n", "sinkhorn_target", "[", "i", ",", "j", ",", "idx", "]", "=", "1", "\n", "", "", "", "", "sinkhorn_target", "=", "torch", ".", "from_numpy", "(", "sinkhorn_target", ")", ".", "float", "(", ")", "\n", "#for i in range(sinkhorn_target.shape[0]):", "\n", "#    print(sinkhorn_target[i])", "\n", "\n", "\n", "#print(imgs1.shape, imgs2.shape, gids1.shape, gids2.shape, pimgs1.shape, pimgs2.shape, pids1.shape, pids2.shape, siamese_target.shape)", "\n", "#print(idx, gids1, gids2, siamese_target)", "\n", "\n", "return", "imgs1", ",", "imgs2", ",", "gids1", ",", "gids2", ",", "pimgs1", ",", "pimgs2", ",", "pids1", ",", "pids2", ",", "adj1", ",", "adj2", ",", "siamese_target", ",", "sinkhorn_target", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.build_triplets": [[394, 441], ["imgs.size", "numpy.zeros().astype", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "range", "imgs[].unsqueeze", "imgs[].unsqueeze", "pimgs[].unsqueeze", "pimgs[].unsqueeze", "torch.stack.append", "torch.stack.append", "torch.cat.append", "torch.cat.append", "numpy.zeros", "idx1.append", "idx2.append", "pids[].unsqueeze", "pids[].unsqueeze"], "function", ["None"], ["", "def", "build_triplets", "(", "imgs", ",", "gids", ",", "pimgs", ",", "pids", ",", "adj_new", ")", ":", "\n", "    ", "bs", "=", "imgs", ".", "size", "(", "0", ")", "\n", "idx1", "=", "[", "]", "\n", "idx2", "=", "[", "]", "\n", "siamese_target", "=", "np", ".", "zeros", "(", "(", "bs", ")", ")", ".", "astype", "(", "float", ")", "\n", "# siamese_target = np.zeros((bs))", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "bs", ")", ":", "\n", "            ", "idx1", ".", "append", "(", "i", ")", "\n", "idx2", ".", "append", "(", "j", ")", "\n", "\n", "", "", "imgs1", "=", "[", "imgs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "idx1", "]", "\n", "imgs1", "=", "torch", ".", "cat", "(", "imgs1", ",", "0", ")", "\n", "\n", "imgs2", "=", "[", "imgs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "idx2", "]", "\n", "imgs2", "=", "torch", ".", "cat", "(", "imgs2", ",", "0", ")", "\n", "\n", "pimgs1", "=", "[", "pimgs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "idx1", "]", "\n", "pimgs1", "=", "torch", ".", "cat", "(", "pimgs1", ",", "0", ")", "\n", "\n", "pimgs2", "=", "[", "pimgs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "idx2", "]", "\n", "pimgs2", "=", "torch", ".", "cat", "(", "pimgs2", ",", "0", ")", "\n", "\n", "adj1", "=", "[", "adj_new", "[", "i", "]", "for", "i", "in", "idx1", "]", "\n", "adj2", "=", "[", "adj_new", "[", "i", "]", "for", "i", "in", "idx2", "]", "\n", "\n", "gids1", "=", "[", "]", "\n", "for", "i", "in", "idx1", ":", "\n", "        ", "gids1", ".", "append", "(", "gids", "[", "i", "]", ")", "\n", "", "gids1", "=", "torch", ".", "stack", "(", "gids1", ")", "\n", "\n", "gids2", "=", "[", "]", "\n", "for", "i", "in", "idx2", ":", "\n", "        ", "gids2", ".", "append", "(", "gids", "[", "i", "]", ")", "\n", "", "gids2", "=", "torch", ".", "stack", "(", "gids2", ")", "\n", "\n", "pids1", "=", "[", "]", "\n", "for", "i", "in", "idx1", ":", "\n", "        ", "pids1", ".", "append", "(", "pids", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "pids1", "=", "torch", ".", "cat", "(", "pids1", ",", "0", ")", "\n", "\n", "pids2", "=", "[", "]", "\n", "for", "i", "in", "idx2", ":", "\n", "        ", "pids2", ".", "append", "(", "pids", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "pids2", "=", "torch", ".", "cat", "(", "pids2", ",", "0", ")", "\n", "\n", "return", "imgs1", ",", "imgs2", ",", "gids1", ",", "gids2", ",", "pimgs1", ",", "pimgs2", ",", "pids1", ",", "pids2", ",", "adj1", ",", "adj2", "\n", "", ""]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.CrossEntropyLabelSmooth.__init__": [[27, 33], ["torch.nn.Module.__init__", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", "=", "0.1", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.CrossEntropyLabelSmooth.forward": [[34, 49], ["losses.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.autograd.Variable", "torch.autograd.Variable", "targets.cuda.cuda.unsqueeze().data.cpu", "targets.cuda.cuda.cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "losses.CrossEntropyLabelSmooth.size", "targets.cuda.cuda.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: prediction matrix (before softmax) with shape (batch_size, num_classes)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "#print(log_probs.size(), targets.size())", "\n", "#print(targets)", "\n", "targets", "=", "torch", ".", "zeros", "(", "log_probs", ".", "size", "(", ")", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "1", ")", "\n", "if", "self", ".", "use_gpu", ":", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "targets", "=", "Variable", "(", "targets", ",", "requires_grad", "=", "False", ")", "\n", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.TripletLoss.__init__": [[61, 65], ["torch.nn.Module.__init__", "torch.nn.MarginRankingLoss", "torch.nn.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "TripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.TripletLoss.forward": [[66, 95], ["inputs.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt.clamp().sqrt", "targets.expand().eq", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.data.new", "torch.stack.data.new", "torch.autograd.Variable.resize_as_", "torch.autograd.Variable.resize_as_", "torch.autograd.Variable.fill_", "torch.autograd.Variable.fill_", "torch.autograd.Variable", "torch.autograd.Variable", "losses.TripletLoss.ranking_loss", "dist.clamp().sqrt.clamp().sqrt.t", "inputs.t", "targets.expand().t", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "dist.clamp().sqrt.clamp().sqrt.clamp", "targets.expand", "[].max", "[].min", "targets.expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: feature matrix with shape (batch_size, feat_dim)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "# Compute pairwise distance, replace by the official when merged", "\n", "dist", "=", "torch", ".", "pow", "(", "inputs", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "dist", "=", "dist", "+", "dist", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "# For each anchor, find the hardest positive and negative", "\n", "mask", "=", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ")", "\n", "dist_an", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ")", "\n", "#dist_ap = torch.cat(dist_ap)", "\n", "#dist_an = torch.cat(dist_an)", "\n", "", "dist_ap", "=", "torch", ".", "stack", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "stack", "(", "dist_an", ")", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "dist_an", ".", "data", ".", "new", "(", ")", "\n", "y", ".", "resize_as_", "(", "dist_an", ".", "data", ")", "\n", "y", ".", "fill_", "(", "1", ")", "\n", "y", "=", "Variable", "(", "y", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.TripletLossFilter.__init__": [[107, 111], ["torch.nn.Module.__init__", "torch.nn.MarginRankingLoss", "torch.nn.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "TripletLossFilter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.TripletLossFilter.forward": [[112, 155], ["range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.size", "torch.stack.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt.clamp().sqrt", "torch.stack.expand().eq", "torch.stack.expand().eq", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.data.new", "torch.stack.data.new", "torch.autograd.Variable.resize_as_", "torch.autograd.Variable.resize_as_", "torch.autograd.Variable.fill_", "torch.autograd.Variable.fill_", "torch.autograd.Variable", "torch.autograd.Variable", "losses.TripletLossFilter.ranking_loss", "len", "dist.clamp().sqrt.clamp().sqrt.t", "torch.stack.t", "torch.stack.t", "torch.stack.expand().t", "torch.stack.expand().t", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "dist.clamp().sqrt.clamp().sqrt.clamp", "torch.stack.expand", "torch.stack.expand", "[].max", "[].min", "torch.stack.expand", "torch.stack.expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Does not calculate noise inputs with label -1\n        Args:\n            inputs: feature matrix with shape (batch_size, feat_dim)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "#print(inputs.shape, targets.shape)", "\n", "inputs_new", "=", "[", "]", "\n", "targets_new", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "targets", ")", ")", ":", "\n", "            ", "if", "targets", "[", "i", "]", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "inputs_new", ".", "append", "(", "inputs", "[", "i", "]", ")", "\n", "targets_new", ".", "append", "(", "targets", "[", "i", "]", ")", "\n", "", "", "inputs_new", "=", "torch", ".", "stack", "(", "inputs_new", ")", "\n", "targets_new", "=", "torch", ".", "stack", "(", "targets_new", ")", "\n", "#print(inputs_new.shape, targets_new.shape)", "\n", "n", "=", "inputs_new", ".", "size", "(", "0", ")", "\n", "# Compute pairwise distance, replace by the official when merged", "\n", "dist", "=", "torch", ".", "pow", "(", "inputs_new", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "dist", "=", "dist", "+", "dist", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs_new", ",", "inputs_new", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "#print(\"Triplet \", dist)", "\n", "# For each anchor, find the hardest positive and negative", "\n", "mask", "=", "targets_new", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets_new", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ")", "\n", "dist_an", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ")", "\n", "#dist_ap = torch.cat(dist_ap)", "\n", "#dist_an = torch.cat(dist_an)", "\n", "", "dist_ap", "=", "torch", ".", "stack", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "stack", "(", "dist_an", ")", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "dist_an", ".", "data", ".", "new", "(", ")", "\n", "y", ".", "resize_as_", "(", "dist_an", ".", "data", ")", "\n", "y", ".", "fill_", "(", "1", ")", "\n", "y", "=", "Variable", "(", "y", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.TripletLossNew.__init__": [[167, 171], ["torch.nn.Module.__init__", "torch.nn.MarginRankingLoss", "torch.nn.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "TripletLossNew", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.TripletLossNew.forward": [[172, 197], ["targets.size", "torch.pairwise_distance", "torch.pairwise_distance", "dist.view.view.view", "targets.expand().eq", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.data.new", "torch.stack.data.new", "torch.autograd.Variable.resize_as_", "torch.autograd.Variable.resize_as_", "torch.autograd.Variable.fill_", "torch.autograd.Variable.fill_", "torch.autograd.Variable", "torch.autograd.Variable", "losses.TripletLossNew.ranking_loss", "targets.expand().t", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "targets.expand", "[].max", "[].min", "targets.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs1", ",", "inputs2", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dist: distance matrix with shape (batch_size, batch_size)\n            targets: ground truth labels with shape (num_classes)\n        \"\"\"", "\n", "n", "=", "targets", ".", "size", "(", "0", ")", "\n", "dist", "=", "F", ".", "pairwise_distance", "(", "inputs1", ",", "inputs2", ")", "\n", "dist", "=", "dist", ".", "view", "(", "n", ",", "n", ")", "\n", "mask", "=", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ")", "\n", "dist_an", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ")", "\n", "#dist_ap = torch.cat(dist_ap)", "\n", "#dist_an = torch.cat(dist_an)", "\n", "", "dist_ap", "=", "torch", ".", "stack", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "stack", "(", "dist_an", ")", "\n", "# Compute ranking hinge loss", "\n", "y", "=", "dist_an", ".", "data", ".", "new", "(", ")", "\n", "y", ".", "resize_as_", "(", "dist_an", ".", "data", ")", "\n", "y", ".", "fill_", "(", "1", ")", "\n", "y", "=", "Variable", "(", "y", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.ContrastiveLoss.__init__": [[204, 207], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["def", "__init__", "(", "self", ",", "margin", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "ContrastiveLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.ContrastiveLoss.check_type_forward": [[208, 218], ["len", "x0_type.size", "x0_type.dim", "x1_type.dim", "y_type.dim", "x1_type.size", "x1_type.size"], "methods", ["None"], ["", "def", "check_type_forward", "(", "self", ",", "in_types", ")", ":", "\n", "        ", "assert", "len", "(", "in_types", ")", "==", "3", "\n", "\n", "x0_type", ",", "x1_type", ",", "y_type", "=", "in_types", "\n", "assert", "x0_type", ".", "size", "(", ")", "==", "x1_type", ".", "shape", "\n", "assert", "x1_type", ".", "size", "(", ")", "[", "0", "]", "==", "y_type", ".", "shape", "[", "0", "]", "\n", "assert", "x1_type", ".", "size", "(", ")", "[", "0", "]", ">", "0", "\n", "assert", "x0_type", ".", "dim", "(", ")", "==", "2", "\n", "assert", "x1_type", ".", "dim", "(", ")", "==", "2", "\n", "assert", "y_type", ".", "dim", "(", ")", "==", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.ContrastiveLoss.forward": [[219, 236], ["losses.ContrastiveLoss.check_type_forward", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "dist_sq.type.type.type", "dist.type.type.type", "y.type.type.type", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x0.size"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.ContrastiveLoss.check_type_forward"], ["", "def", "forward", "(", "self", ",", "x0", ",", "x1", ",", "y", ")", ":", "\n", "        ", "self", ".", "check_type_forward", "(", "(", "x0", ",", "x1", ",", "y", ")", ")", "\n", "\n", "# euclidian distance", "\n", "diff", "=", "x0", "-", "x1", "\n", "#print(type(diff))", "\n", "dist_sq", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "diff", ",", "2", ")", ",", "1", ")", "\n", "dist", "=", "torch", ".", "sqrt", "(", "dist_sq", ")", "\n", "\n", "mdist", "=", "self", ".", "margin", "-", "dist", "\n", "dist", "=", "torch", ".", "clamp", "(", "mdist", ",", "min", "=", "0.0", ")", "\n", "dist_sq", "=", "dist_sq", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "dist", "=", "dist", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "y", "=", "y", ".", "type", "(", "torch", ".", "cuda", ".", "FloatTensor", ")", "\n", "loss", "=", "y", "*", "dist_sq", "+", "(", "1.", "-", "y", ")", "*", "torch", ".", "pow", "(", "dist", ",", "2", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "2.0", "/", "x0", ".", "size", "(", ")", "[", "0", "]", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.CenterLoss.__init__": [[247, 257], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "feat_dim", "=", "2", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "CenterLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "feat_dim", "=", "feat_dim", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "self", ".", "centers", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_classes", ",", "self", ".", "feat_dim", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "centers", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_classes", ",", "self", ".", "feat_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.CenterLoss.forward": [[258, 284], ["x.size", "distmat.addmm_", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.autograd.Variable", "torch.autograd.Variable", "labels.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "labels.unsqueeze().expand.unsqueeze().expand.eq", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean", "torch.cat.mean", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "losses.CenterLoss.centers.t", "classes.cuda.cuda.cuda", "classes.cuda.cuda.expand", "value.clamp.clamp.clamp", "torch.cat.append", "torch.cat.append", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "labels.unsqueeze().expand.unsqueeze().expand.unsqueeze", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: feature matrix with shape (batch_size, feat_dim).\n            labels: ground truth labels with shape (num_classes).\n        \"\"\"", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", "+", "torch", ".", "pow", "(", "self", ".", "centers", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "self", ".", "num_classes", ",", "batch_size", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "self", ".", "centers", ".", "t", "(", ")", ")", "\n", "\n", "classes", "=", "torch", ".", "arange", "(", "self", ".", "num_classes", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "use_gpu", ":", "classes", "=", "classes", ".", "cuda", "(", ")", "\n", "classes", "=", "Variable", "(", "classes", ")", "\n", "labels", "=", "labels", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", "\n", "mask", "=", "labels", ".", "eq", "(", "classes", ".", "expand", "(", "batch_size", ",", "self", ".", "num_classes", ")", ")", "\n", "\n", "dist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "value", "=", "distmat", "[", "i", "]", "[", "mask", "[", "i", "]", "]", "\n", "value", "=", "value", ".", "clamp", "(", "min", "=", "1e-12", ",", "max", "=", "1e+12", ")", "# for numerical stability", "\n", "dist", ".", "append", "(", "value", ")", "\n", "", "dist", "=", "torch", ".", "cat", "(", "dist", ")", "\n", "loss", "=", "dist", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.PermutationLoss.__init__": [[289, 291], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "PermutationLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.losses.PermutationLoss.forward": [[292, 313], ["pred_perm.to.to.to", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.all", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred_perm", ",", "gt_perm", ",", "adj1", ",", "adj2", ",", "siamese_target", ")", ":", "\n", "        ", "batch_num", "=", "pred_perm", ".", "shape", "[", "0", "]", "\n", "\n", "pred_perm", "=", "pred_perm", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "assert", "torch", ".", "all", "(", "(", "pred_perm", ">=", "0", ")", "*", "(", "pred_perm", "<=", "1", ")", ")", "\n", "assert", "torch", ".", "all", "(", "(", "gt_perm", ">=", "0", ")", "*", "(", "gt_perm", "<=", "1", ")", ")", "\n", "\n", "loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "pred_perm", ".", "device", ")", "\n", "n_sum", "=", "torch", ".", "zeros_like", "(", "loss", ")", "\n", "#print(pred_perm)", "\n", "#print(gt_perm)", "\n", "for", "b", "in", "range", "(", "batch_num", ")", ":", "\n", "            ", "if", "siamese_target", "[", "b", "]", ">", "0.5", ":", "\n", "                ", "loss", "+=", "F", ".", "binary_cross_entropy", "(", "\n", "pred_perm", "[", "b", ",", ":", "adj1", "[", "b", "]", ".", "shape", "[", "0", "]", ",", ":", "adj2", "[", "b", "]", ".", "shape", "[", "0", "]", "]", ",", "\n", "gt_perm", "[", "b", ",", ":", "adj1", "[", "b", "]", ".", "shape", "[", "0", "]", ",", ":", "adj2", "[", "b", "]", ".", "shape", "[", "0", "]", "]", ",", "\n", "reduction", "=", "'sum'", ")", "\n", "n_sum", "+=", "torch", ".", "tensor", "(", "adj1", "[", "b", "]", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "n_sum", ".", "dtype", ")", ".", "to", "(", "pred_perm", ".", "device", ")", "\n", "\n", "", "", "return", "loss", "/", "n_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_relative_part_1.main": [[81, 252], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "transforms.Compose", "transforms.Compose", "transforms.Compose", "transforms.Compose", "dataset.CUHKGroup", "dataset.CUHKGroup", "dataset.CUHKGroup", "dataset.CUHKGroup", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "os.path.exists", "os.path.exists", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "losses.TripletLoss", "losses.ContrastiveLoss", "losses.TripletLossFilter", "losses.PermutationLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "time.time", "range", "round", "str", "print", "utils.Logger", "utils.Logger", "print", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.init_model", "models.init_model", "print", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.state_dict", "model.state_dict.update", "nn.DataParallel().cuda.load_state_dict", "filter", "torch.DataParallel().cuda", "print", "main_group_gcn_siamese_relative_part_1.test_gcn_person_batch", "main_group_gcn_siamese_relative_part_1.train_gcn", "datetime.timedelta", "os.join", "os.join", "transforms.Random2DTranslation", "transforms.RandomHorizontalFlip", "transforms.ToTensor", "transforms.Normalize", "transforms.Random2DTranslation", "transforms.RandomHorizontalFlip", "transforms.ToTensor", "transforms.Normalize", "transforms.Resize", "transforms.ToTensor", "transforms.Normalize", "transforms.Resize", "transforms.ToTensor", "transforms.Normalize", "nn.DataParallel().cuda.parameters", "utils.WarmupMultiStepLR", "torch.optim.lr_scheduler.StepLR", "lr_scheduler.StepLR.step", "print", "main_group_gcn_siamese_relative_part_1.test_gcn_person_batch", "utils.save_checkpoint", "time.time", "samplers.RandomIdentitySampler", "pretrain_dict.items", "torch.DataParallel", "nn.DataParallel().cuda.module.state_dict", "nn.DataParallel().cuda.state_dict", "os.join", "str"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.__init__.init_model", "home.repos.pwc.inspect_result.daodaofr_group_reid.models.__init__.init_model", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_relative_part_1.test_gcn_person_batch", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_relative_part_1.train_gcn", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_relative_part_1.test_gcn_person_batch", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu_devices", "\n", "use_gpu", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "args", ".", "use_cpu", ":", "use_gpu", "=", "False", "\n", "\n", "if", "not", "args", ".", "evaluate", ":", "\n", "        ", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'log_train.txt'", ")", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'log_test.txt'", ")", ")", "\n", "", "print", "(", "\"==========\\nArgs:{}\\n==========\"", ".", "format", "(", "args", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "print", "(", "\"Currently using GPU {}\"", ".", "format", "(", "args", ".", "gpu_devices", ")", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Currently using CPU (GPU is highly recommended)\"", ")", "\n", "\n", "#print(\"Initializing dataset {}\".format(args.dataset))", "\n", "# dataset = data_manager.init_dataset(name=args.dataset)", "\n", "\n", "", "transform_train", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Random2DTranslation", "(", "args", ".", "height", ",", "args", ".", "width", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "transform_train_p", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Random2DTranslation", "(", "256", ",", "128", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "args", ".", "height", ",", "args", ".", "width", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test_p", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "256", ",", "128", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "train_file", "=", "'data/cuhk_train.pkl'", "\n", "test_file", "=", "'data/cuhk_test.pkl'", "\n", "gallery_file", "=", "'data/cuhk_gallery.pkl'", "\n", "data_root", "=", "args", ".", "data_root", "\n", "dataset_train", "=", "CUHKGroup", "(", "train_file", ",", "data_root", ",", "True", ",", "transform_train", ",", "transform_train_p", ")", "\n", "dataset_test", "=", "CUHKGroup", "(", "test_file", ",", "data_root", ",", "False", ",", "transform_test", ",", "transform_test_p", ")", "\n", "dataset_query", "=", "CUHKGroup", "(", "test_file", ",", "data_root", ",", "False", ",", "transform_test", ",", "transform_test_p", ")", "\n", "dataset_gallery", "=", "CUHKGroup", "(", "gallery_file", ",", "data_root", ",", "False", ",", "transform_test", ",", "transform_test_p", ")", "\n", "\n", "\n", "pin_memory", "=", "True", "if", "use_gpu", "else", "False", "\n", "\n", "if", "args", ".", "xent_only", ":", "\n", "        ", "trainloader", "=", "DataLoader", "(", "\n", "dataset_train", ",", "\n", "batch_size", "=", "args", ".", "train_batch", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "trainloader", "=", "DataLoader", "(", "\n", "dataset_train", ",", "\n", "sampler", "=", "RandomIdentitySampler", "(", "dataset_train", ",", "num_instances", "=", "args", ".", "num_instances", ")", ",", "\n", "batch_size", "=", "args", ".", "train_batch", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "", "queryloader", "=", "DataLoader", "(", "\n", "dataset_test", ",", "\n", "batch_size", "=", "args", ".", "test_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "querygalleryloader", "=", "DataLoader", "(", "\n", "dataset_query", ",", "\n", "batch_size", "=", "args", ".", "gallery_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "galleryloader", "=", "DataLoader", "(", "\n", "dataset_gallery", ",", "\n", "batch_size", "=", "args", ".", "gallery_batch", ",", "shuffle", "=", "False", ",", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "print", "(", "\"Initializing model: {}\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "if", "args", ".", "xent_only", ":", "\n", "# model = models.init_model(name=args.arch, num_classes=dataset_train.num_train_gids, loss={'xent'})", "\n", "        ", "model", "=", "models", ".", "init_model", "(", "name", "=", "args", ".", "arch", ",", "num_classes", "=", "dataset_train", ".", "num_train_gids", ",", "loss", "=", "{", "'xent'", "}", ")", "\n", "", "else", ":", "\n", "# model = models.init_model(name=args.arch, num_classes=dataset_train.num_train_gids, loss={'xent', 'htri'})", "\n", "        ", "model", "=", "models", ".", "init_model", "(", "name", "=", "args", ".", "arch", ",", "num_classes", "=", "dataset_train", ".", "num_train_gids", ",", "\n", "num_person_classes", "=", "dataset_train", ".", "num_train_pids", ",", "loss", "=", "{", "'xent'", ",", "'htri'", "}", ")", "\n", "\n", "#criterion_xent = CrossEntropyLabelSmooth(num_classes=dataset_train.num_train_gids, use_gpu=use_gpu)", "\n", "#criterion_xent_person = CrossEntropyLabelSmooth(num_classes=dataset_train.num_train_pids, use_gpu=use_gpu)", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "pretrained_model", ")", ":", "\n", "        ", "print", "(", "\"Loading checkpoint from '{}'\"", ".", "format", "(", "args", ".", "pretrained_model", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "pretrained_model", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrain_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "pretrain_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "pretrain_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "", "criterion_xent", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "criterion_xent_person", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "criterion_htri", "=", "TripletLoss", "(", "margin", "=", "args", ".", "margin", ")", "\n", "criterion_pair", "=", "ContrastiveLoss", "(", "margin", "=", "args", ".", "margin", ")", "\n", "criterion_htri_filter", "=", "TripletLossFilter", "(", "margin", "=", "args", ".", "margin", ")", "\n", "criterion_permutation", "=", "PermutationLoss", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "if", "args", ".", "stepsize", ">", "0", ":", "\n", "        ", "if", "args", ".", "warmup", ":", "\n", "            ", "scheduler", "=", "WarmupMultiStepLR", "(", "optimizer", ",", "[", "200", ",", "400", ",", "600", "]", ")", "\n", "", "else", ":", "\n", "            ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "args", ".", "stepsize", ",", "gamma", "=", "args", ".", "gamma", ")", "\n", "", "", "start_epoch", "=", "args", ".", "start_epoch", "\n", "\n", "if", "use_gpu", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "print", "(", "\"Evaluate only\"", ")", "\n", "test_gcn_person_batch", "(", "model", ",", "queryloader", ",", "querygalleryloader", ",", "galleryloader", ",", "args", ".", "pool", ",", "use_gpu", ")", "\n", "#test_gcn_batch(model, queryloader, querygalleryloader, galleryloader, args.pool, use_gpu)", "\n", "#test_gcn(model, queryloader, galleryloader, args.pool, use_gpu)", "\n", "#test(model, queryloader, galleryloader, args.pool, use_gpu)", "\n", "return", "\n", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "best_rank1", "=", "-", "np", ".", "inf", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "max_epoch", ")", ":", "\n", "#print(\"==> Epoch {}/{}  lr:{}\".format(epoch + 1, args.max_epoch, scheduler.get_lr()[0]))", "\n", "\n", "        ", "train_gcn", "(", "model", ",", "criterion_xent", ",", "criterion_xent_person", ",", "criterion_pair", ",", "criterion_htri_filter", ",", "criterion_permutation", ",", "optimizer", ",", "trainloader", ",", "use_gpu", ")", "\n", "#train_gcn(model, criterion_xent, criterion_xent_person, criterion_pair, criterion_htri_filter, optimizer, trainloader, use_gpu)", "\n", "#train(model, criterion_xent, criterion_htri, optimizer, trainloader, use_gpu)", "\n", "\n", "if", "args", ".", "stepsize", ">", "0", ":", "scheduler", ".", "step", "(", ")", "\n", "\n", "if", "args", ".", "eval_step", ">", "0", "and", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_step", "==", "0", "or", "(", "epoch", "+", "1", ")", "==", "args", ".", "max_epoch", ":", "\n", "            ", "print", "(", "\"==> Test\"", ")", "\n", "rank1", "=", "test_gcn_person_batch", "(", "model", ",", "queryloader", ",", "querygalleryloader", ",", "galleryloader", ",", "args", ".", "pool", ",", "use_gpu", ")", "\n", "#rank1 = test_gcn(model, queryloader, galleryloader, args.pool, use_gpu=False)", "\n", "#rank1 = test(model, queryloader, galleryloader, args.pool, use_gpu)", "\n", "is_best", "=", "rank1", ">", "best_rank1", "\n", "if", "is_best", ":", "best_rank1", "=", "rank1", "\n", "\n", "if", "use_gpu", ":", "\n", "                ", "state_dict", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "", "save_checkpoint", "(", "{", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'rank1'", ":", "rank1", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", ",", "is_best", ",", "osp", ".", "join", "(", "args", ".", "save_dir", ",", "'checkpoint_ep'", "+", "str", "(", "epoch", "+", "1", ")", "+", "'.pth.tar'", ")", ")", "\n", "\n", "\n", "", "", "elapsed", "=", "round", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "elapsed", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "elapsed", ")", ")", "\n", "print", "(", "\"Finished. Total elapsed time (h:m:s): {}\"", ".", "format", "(", "elapsed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_relative_part_1.train_gcn": [[253, 327], ["model.train", "utils.AverageMeter", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pids.view().permute.view().permute", "utils.build_adj", "utils.build_pairs_correspondence", "pids1.reshape.reshape", "pids2.reshape.reshape", "pimgs1.view.size", "pimgs1.view.view", "pimgs2.view.view", "optimizer.zero_grad", "criterion_xent.backward", "optimizer.step", "utils.AverageMeter.update", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "adj_new.append", "siamese_target.cuda.cuda", "sinkhorn_target.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model", "criterion_xent", "model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "criterion_xent", "criterion_xent", "criterion_pair", "criterion_permutation", "criterion_xent.data.item", "pids.view().permute.size", "print", "pids.view().permute.view", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "pimgs1.view.cuda", "pids1.reshape.cuda", "pimgs2.view.cuda", "pids2.reshape.cuda", "gids1.cuda", "gids2.cuda", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "criterion_xent_person", "criterion_xent_person", "criterion_htri_filter", "criterion_htri_filter"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.build_adj", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.build_pairs_correspondence", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.utils.AverageMeter.update"], ["", "def", "train_gcn", "(", "model", ",", "criterion_xent", ",", "criterion_xent_person", ",", "criterion_pair", ",", "criterion_htri_filter", ",", "criterion_permutation", ",", "optimizer", ",", "trainloader", ",", "use_gpu", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "num_nodes", "=", "5", "\n", "#adj = torch.ones((num_nodes, num_nodes))", "\n", "#if use_gpu:", "\n", "#    adj = adj.cuda()", "\n", "#adj = Variable(adj)", "\n", "#adj.requires_gradient = False", "\n", "\n", "for", "batch_idx", ",", "(", "imgs", ",", "gids", ",", "pimgs", ",", "pids", ",", "_", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "        ", "pids", "=", "torch", ".", "cat", "(", "pids", ",", "dim", "=", "0", ")", "\n", "pids", "=", "pids", ".", "view", "(", "num_nodes", ",", "-", "1", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "\n", "# build per image adj", "\n", "adj", "=", "build_adj", "(", "pids", ")", "\n", "#print(adj)", "\n", "adj_new", "=", "[", "]", "\n", "for", "adj0", "in", "adj", ":", "\n", "            ", "adj0", "=", "torch", ".", "from_numpy", "(", "adj0", ")", "\n", "if", "use_gpu", ":", "\n", "                ", "adj0", "=", "adj0", ".", "cuda", "(", ")", "\n", "adj0", "=", "Variable", "(", "adj0", ")", "\n", "adj0", ".", "requires_gradient", "=", "False", "\n", "#print(adj0)", "\n", "", "adj_new", ".", "append", "(", "adj0", ")", "\n", "#print(adj_new)", "\n", "\n", "#imgs1, imgs2, gids1, gids2, pimgs1, pimgs2, pids1, pids2, adj1, adj2, siamese_target = build_pairs(imgs, gids, pimgs, pids, adj_new)", "\n", "", "imgs1", ",", "imgs2", ",", "gids1", ",", "gids2", ",", "pimgs1", ",", "pimgs2", ",", "pids1", ",", "pids2", ",", "adj1", ",", "adj2", ",", "siamese_target", ",", "sinkhorn_target", "=", "build_pairs_correspondence", "(", "imgs", ",", "gids", ",", "pimgs", ",", "pids", ",", "adj_new", ")", "\n", "\n", "pids1", "=", "pids1", ".", "reshape", "(", "-", "1", ")", "\n", "pids2", "=", "pids2", ".", "reshape", "(", "-", "1", ")", "\n", "#print(pids)", "\n", "if", "use_gpu", ":", "\n", "            ", "pimgs1", ",", "pids1", ",", "pimgs2", ",", "pids2", "=", "pimgs1", ".", "cuda", "(", ")", ",", "pids1", ".", "cuda", "(", ")", ",", "pimgs2", ".", "cuda", "(", ")", ",", "pids2", ".", "cuda", "(", ")", "\n", "gids1", ",", "gids2", "=", "gids1", ".", "cuda", "(", ")", ",", "gids2", ".", "cuda", "(", ")", "\n", "siamese_target", "=", "siamese_target", ".", "cuda", "(", ")", "\n", "sinkhorn_target", "=", "sinkhorn_target", ".", "cuda", "(", ")", "\n", "", "pimgs1", ",", "pids1", "=", "Variable", "(", "pimgs1", ")", ",", "Variable", "(", "pids1", ")", "\n", "pimgs2", ",", "pids2", "=", "Variable", "(", "pimgs2", ")", ",", "Variable", "(", "pids2", ")", "\n", "b", ",", "s", ",", "c", ",", "h", ",", "w", "=", "pimgs1", ".", "size", "(", ")", "\n", "#pimgs = pimgs.permute(1, 0, 2, 3, 4).contiguous()", "\n", "pimgs1", "=", "pimgs1", ".", "view", "(", "b", "*", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "pimgs2", "=", "pimgs2", ".", "view", "(", "b", "*", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "#features = model(pimgs, adj)", "\n", "if", "args", ".", "xent_only", ":", "\n", "            ", "outputs", "=", "model", "(", "pimgs", ",", "adj_new", ")", "\n", "#loss = criterion_xent(outputs, pids)", "\n", "loss", "=", "criterion_xent", "(", "outputs", ",", "gids", ")", "\n", "", "else", ":", "\n", "# combine hard triplet loss with cross entropy loss", "\n", "            ", "features1", ",", "features2", ",", "features_p1", ",", "features_p2", ",", "outputs_p1", ",", "outputs_p2", ",", "outputs_g1", ",", "outputs_g2", ",", "sinkhorn_matrix", "=", "model", "(", "pimgs1", ",", "pimgs2", ",", "adj1", ",", "adj2", ")", "\n", "\n", "xent_loss_p1", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "[", "criterion_xent_person", "(", "o_p1", ",", "pids1", ")", "for", "o_p1", "in", "outputs_p1", "]", ")", ")", "\n", "xent_loss_p2", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "[", "criterion_xent_person", "(", "o_p2", ",", "pids2", ")", "for", "o_p2", "in", "outputs_p2", "]", ")", ")", "\n", "htri_loss_p1", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "[", "criterion_htri_filter", "(", "f_p1", ",", "pids1", ")", "for", "f_p1", "in", "features_p1", "]", ")", ")", "\n", "htri_loss_p2", "=", "torch", ".", "sum", "(", "torch", ".", "stack", "(", "[", "criterion_htri_filter", "(", "f_p2", ",", "pids2", ")", "for", "f_p2", "in", "features_p2", "]", ")", ")", "\n", "xent_loss_g1", "=", "criterion_xent", "(", "outputs_g1", ",", "gids1", ")", "\n", "xent_loss_g2", "=", "criterion_xent", "(", "outputs_g2", ",", "gids2", ")", "\n", "pair_loss", "=", "criterion_pair", "(", "features1", ",", "features2", ",", "siamese_target", ")", "\n", "permutation_loss", "=", "criterion_permutation", "(", "sinkhorn_matrix", ",", "sinkhorn_target", ",", "adj1", ",", "adj2", ",", "siamese_target", ")", "\n", "loss", "=", "xent_loss_p1", "+", "xent_loss_p2", "+", "pair_loss", "+", "xent_loss_g1", "+", "xent_loss_g2", "+", "htri_loss_p1", "+", "htri_loss_p2", "+", "0.1", "*", "permutation_loss", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "losses", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "\"Batch {}/{}\\t Loss {:.6f} ({:.6f})\"", ".", "format", "(", "batch_idx", "+", "1", ",", "len", "(", "trainloader", ")", ",", "losses", ".", "val", ",", "losses", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.None.main_group_gcn_siamese_relative_part_1.test_gcn_person_batch": [[329, 482], ["model.eval", "enumerate", "numpy.asarray", "numpy.asarray", "numpy.squeeze", "numpy.asarray", "numpy.asarray", "print", "enumerate", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "distmat.numpy.numpy", "distmat_p.numpy.numpy", "print", "eval_metrics.evaluate", "print", "print", "print", "print", "eval_metrics.evaluate_person", "print", "print", "print", "print", "np.asarray.extend", "np.squeeze.extend", "np.asarray.extend", "np.asarray.extend", "np.asarray.extend", "range", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "print", "tmp_pids.append", "range", "np.asarray.extend", "np.asarray.extend", "np.asarray.extend", "time.time", "torch.autograd.Variable", "pimgs.cuda.size", "pimgs.cuda.repeat", "pimgs.cuda.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "enumerate", "time.time", "print", "len", "len", "tmp_pids[].append", "pimgs.cuda.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable", "adj.append", "torch.autograd.Variable", "pimgs_g.cuda.size", "pimgs_g.cuda.view", "range", "model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dist_p.addmm_", "range", "torch.pairwise_distance", "len", "pimgs_g.cuda.cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable", "adj_g.append", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().t", "torch.pow().sum().t", "torch.pow().sum().t", "torch.pow().sum().t", "torch.cat.t", "adj1.cuda.cuda", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.evaluate", "home.repos.pwc.inspect_result.daodaofr_group_reid.None.eval_metrics.evaluate_person"], ["", "", "", "def", "test_gcn_person_batch", "(", "model", ",", "queryloader", ",", "querygalleryloader", ",", "galleryloader", ",", "pool", ",", "use_gpu", ",", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "g_bs", "=", "16", "\n", "\n", "q_pids", ",", "q_pids_p", ",", "q_camids", ",", "q_camids_p", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "g_pids", ",", "g_pids_p", ",", "g_camids", ",", "g_camids_p", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch_idx", ",", "(", "_", ",", "gids", ",", "pimgs", ",", "pids", ",", "camids", ",", "_", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "        ", "q_pids", ".", "extend", "(", "gids", ")", "\n", "q_pids_p", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "q_camids_p", ".", "extend", "(", "[", "camids", "]", "*", "len", "(", "pids", ")", ")", "\n", "#print(camids)", "\n", "", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_pids_p", "=", "np", ".", "asarray", "(", "q_pids_p", ")", "\n", "q_pids_p", "=", "np", ".", "squeeze", "(", "q_pids_p", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "q_camids_p", "=", "np", ".", "asarray", "(", "q_camids_p", ")", "\n", "print", "(", "q_pids", ".", "shape", ",", "q_pids_p", ".", "shape", ",", "q_camids", ".", "shape", ",", "q_camids_p", ".", "shape", ")", "\n", "\n", "for", "batch_idx", ",", "(", "_", ",", "gids", ",", "pimgs", ",", "pids", ",", "camids", ",", "_", ")", "in", "enumerate", "(", "querygalleryloader", ")", ":", "\n", "        ", "g_pids", ".", "extend", "(", "gids", ")", "\n", "#print(gids, pids, camids)", "\n", "tmp_pids", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "g_bs", ")", ":", "\n", "            ", "tmp_pids", ".", "append", "(", "[", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "tmp_pids", "[", "j", "]", ".", "append", "(", "pids", "[", "i", "]", "[", "j", "]", ")", "\n", "# tmp_pids -> list g_bs * 5", "\n", "", "", "for", "i", "in", "range", "(", "g_bs", ")", ":", "\n", "            ", "g_pids_p", ".", "extend", "(", "tmp_pids", "[", "i", "]", ")", "\n", "#print(camids)", "\n", "#print(camids[i].item())", "\n", "g_camids", ".", "extend", "(", "[", "camids", "[", "i", "]", "]", ")", "\n", "g_camids_p", ".", "extend", "(", "[", "camids", "[", "i", "]", "]", "*", "len", "(", "tmp_pids", "[", "i", "]", ")", ")", "\n", "#g_camids_p.extend([camids]* len(pids))", "\n", "", "", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_pids_p", "=", "np", ".", "asarray", "(", "g_pids_p", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "g_camids_p", "=", "np", ".", "asarray", "(", "g_camids_p", ")", "\n", "print", "(", "g_pids", ".", "shape", ",", "g_pids_p", ".", "shape", ",", "g_camids", ".", "shape", ",", "g_camids_p", ".", "shape", ")", "\n", "\n", "m", ",", "n", "=", "q_pids", ".", "shape", "[", "0", "]", ",", "g_pids", ".", "shape", "[", "0", "]", "\n", "distmat", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "\n", "m", ",", "n", "=", "q_pids_p", ".", "shape", "[", "0", "]", ",", "g_pids_p", ".", "shape", "[", "0", "]", "\n", "distmat_p", "=", "torch", ".", "zeros", "(", "(", "m", ",", "n", ")", ")", "\n", "p_start", "=", "0", "\n", "p_end", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "_", ",", "gids", ",", "pimgs", ",", "pids", ",", "camids", ",", "lenp", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "            ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "use_gpu", ":", "\n", "                ", "pimgs", "=", "pimgs", ".", "cuda", "(", ")", "\n", "", "pimgs", "=", "Variable", "(", "pimgs", ")", "\n", "# b=1, n=number of clips, s=16", "\n", "b", ",", "s", ",", "c", ",", "h", ",", "w", "=", "pimgs", ".", "size", "(", ")", "\n", "#pimgs = pimgs.permute(1, 0, 2, 3, 4)", "\n", "assert", "(", "b", "==", "1", ")", "\n", "pimgs", "=", "pimgs", ".", "repeat", "(", "g_bs", ",", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "pimgs", "=", "pimgs", ".", "view", "(", "g_bs", "*", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "#pimgs = pimgs.view(s, c, h, w)", "\n", "num_nodes", "=", "s", "\n", "adj", "=", "[", "]", "\n", "adj0", "=", "torch", ".", "ones", "(", "(", "lenp", ",", "lenp", ")", ")", "\n", "if", "use_gpu", ":", "\n", "                ", "adj0", "=", "adj0", ".", "cuda", "(", ")", "\n", "adj0", "=", "Variable", "(", "adj0", ")", "\n", "adj0", ".", "requires_gradient", "=", "False", "\n", "", "for", "aa", "in", "range", "(", "g_bs", ")", ":", "\n", "                ", "adj", ".", "append", "(", "adj0", ")", "\n", "", "p_start", "=", "batch_idx", "*", "s", "\n", "p_end", "=", "(", "batch_idx", "+", "1", ")", "*", "s", "\n", "#print(p_start, p_end)", "\n", "#print(batch_idx, g_bs, s)", "\n", "g_start", "=", "0", "\n", "g_end", "=", "0", "\n", "\n", "for", "batch_idx_g", ",", "(", "_", ",", "gids_g", ",", "pimgs_g", ",", "pids_g", ",", "camids_g", ",", "lenp_g", ")", "in", "enumerate", "(", "querygalleryloader", ")", ":", "\n", "                ", "if", "use_gpu", ":", "\n", "                    ", "pimgs_g", "=", "pimgs_g", ".", "cuda", "(", ")", "\n", "", "pimgs_g", "=", "Variable", "(", "pimgs_g", ")", "\n", "# pimgs = pimgs.permute(1, 0, 2, 3, 4)", "\n", "b", ",", "s", ",", "c", ",", "h", ",", "w", "=", "pimgs_g", ".", "size", "(", ")", "\n", "pimgs_g", "=", "pimgs_g", ".", "view", "(", "b", "*", "s", ",", "c", ",", "h", ",", "w", ")", "\n", "#pimgs_g = pimgs_g.view(s, c, h, w)", "\n", "assert", "(", "b", "==", "g_bs", ")", "\n", "num_nodes", "=", "s", "\n", "adj_g", "=", "[", "]", "\n", "for", "aa", "in", "range", "(", "g_bs", ")", ":", "\n", "                    ", "adj1", "=", "torch", ".", "ones", "(", "(", "lenp_g", "[", "aa", "]", ",", "lenp_g", "[", "aa", "]", ")", ")", "\n", "if", "use_gpu", ":", "\n", "                       ", "adj1", "=", "adj1", ".", "cuda", "(", ")", "\n", "", "adj1", "=", "Variable", "(", "adj1", ")", "\n", "adj1", ".", "requires_gradient", "=", "False", "\n", "adj_g", ".", "append", "(", "adj1", ")", "\n", "", "features1", ",", "features2", ",", "features_p1", ",", "features_p2", "=", "model", "(", "pimgs", ",", "pimgs_g", ",", "adj", ",", "adj_g", ")", "\n", "#print(features_p1[0].shape, features_p2[0].shape)", "\n", "features_p1", "=", "torch", ".", "cat", "(", "features_p1", ",", "dim", "=", "1", ")", "\n", "features_p2", "=", "torch", ".", "cat", "(", "features_p2", ",", "dim", "=", "1", ")", "\n", "#print(features_p1.shape)", "\n", "dist_p", "=", "torch", ".", "pow", "(", "features_p1", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "torch", ".", "pow", "(", "features_p2", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "t", "(", ")", "\n", "dist_p", ".", "addmm_", "(", "1", ",", "-", "2", ",", "features_p1", ",", "features_p2", ".", "t", "(", ")", ")", "\n", "#p_end = p_start + dist_p.shape[0]", "\n", "#assert (p_end - p_start) == dist_p.shape[0]", "\n", "#print(p_end-p_start, dist_p.shape[0])", "\n", "g_end", "=", "g_start", "+", "dist_p", ".", "shape", "[", "1", "]", "\n", "#print(dist_p.shape)", "\n", "#print(features_p1.shape, features_p2.shape)", "\n", "#print(distmat_p[p_start:p_end, g_start:g_end].shape)", "\n", "#distmat_p[p_start:p_end, g_start:g_end] = dist_p", "\n", "for", "i", "in", "range", "(", "g_bs", ")", ":", "\n", "                    ", "distmat_p", "[", "p_start", ":", "p_end", ",", "g_start", "+", "i", "*", "s", ":", "g_start", "+", "(", "i", "+", "1", ")", "*", "s", "]", "=", "dist_p", "[", "i", "*", "s", ":", "(", "i", "+", "1", ")", "*", "s", ",", "i", "*", "s", ":", "(", "i", "+", "1", ")", "*", "s", "]", "\n", "#distmat_p[p_start:p_end, g_start:g_end] = dist_p", "\n", "", "assert", "(", "g_end", "==", "g_start", "+", "(", "i", "+", "1", ")", "*", "s", ")", "\n", "g_start", "=", "g_end", "\n", "#print(dist)", "\n", "dist", "=", "F", ".", "pairwise_distance", "(", "features1", ",", "features2", ")", "\n", "#print(dist.shape)", "\n", "distmat", "[", "batch_idx", ",", "batch_idx_g", "*", "g_bs", ":", "(", "batch_idx_g", "+", "1", ")", "*", "g_bs", "]", "=", "dist", "\n", "#distmat[batch_idx, batch_idx_g] = dist", "\n", "#p_start = p_end", "\n", "#print(batch_idx)", "\n", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"image {:04d}, time : {:f}\"", ".", "format", "(", "batch_idx", ",", "end_time", "-", "start_time", ")", ")", "\n", "", "", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "distmat_p", "=", "distmat_p", ".", "numpy", "(", ")", "\n", "#print(distmat)", "\n", "\n", "print", "(", "\"Computing CMC and mAP\"", ")", "\n", "#print(distmat.shape, q_pids.shape, g_pids.shape, q_camids.shape, g_camids.shape)", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ")", "\n", "#cmc_p, mAP_p = evaluate_person(distmat_p, q_pids_p, g_pids_p, q_camids_p, g_camids_p)", "\n", "\n", "print", "(", "\"Group Reid Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "#print(distmat_p.shape, q_pids_p.shape, g_pids_p.shape, q_camids_p.shape, g_camids_p.shape)", "\n", "cmc_p", ",", "mAP_p", "=", "evaluate_person", "(", "distmat_p", ",", "q_pids_p", ",", "g_pids_p", ",", "q_camids_p", ",", "g_camids_p", ")", "\n", "print", "(", "\"Person Reid Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP_p", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc_p", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.Sinkhorn.__init__": [[23, 27], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["def", "__init__", "(", "self", ",", "max_iter", "=", "10", ",", "epsilon", "=", "1e-4", ")", ":", "\n", "        ", "super", "(", "Sinkhorn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.Sinkhorn.forward": [[28, 76], ["torch.zeros", "torch.zeros", "range", "range", "list", "torch.cat", "range", "slice", "slice", "len", "row_norm_ones.unsqueeze.unsqueeze.unsqueeze", "col_norm_ones.unsqueeze.unsqueeze.unsqueeze", "torch.zeros_like", "range", "torch.exp", "torch.sum", "torch.sum", "slice", "slice", "torch.full().to", "torch.mul", "torch.mul", "torch.exp.unsqueeze", "col_norm_ones.unsqueeze.unsqueeze.unsqueeze", "row_norm_ones.unsqueeze.unsqueeze.unsqueeze", "torch.exp.unsqueeze", "torch.full"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ",", "nrows", "=", "None", ",", "ncols", "=", "None", ",", "exp", "=", "False", ",", "exp_alpha", "=", "20", ",", "dummy_row", "=", "False", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "        ", "batch_size", "=", "s", ".", "shape", "[", "0", "]", "\n", "\n", "if", "dummy_row", ":", "\n", "            ", "dummy_shape", "=", "list", "(", "s", ".", "shape", ")", "\n", "dummy_shape", "[", "1", "]", "=", "s", ".", "shape", "[", "2", "]", "-", "s", ".", "shape", "[", "1", "]", "\n", "s", "=", "torch", ".", "cat", "(", "(", "s", ",", "torch", ".", "full", "(", "dummy_shape", ",", "0.", ")", ".", "to", "(", "s", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "new_nrows", "=", "ncols", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "s", "[", "b", ",", "nrows", "[", "b", "]", ":", "new_nrows", "[", "b", "]", ",", ":", "ncols", "[", "b", "]", "]", "=", "self", ".", "epsilon", "\n", "", "nrows", "=", "new_nrows", "\n", "\n", "", "row_norm_ones", "=", "torch", ".", "zeros", "(", "batch_size", ",", "s", ".", "shape", "[", "1", "]", ",", "s", ".", "shape", "[", "1", "]", ",", "device", "=", "s", ".", "device", ")", "# size: row x row", "\n", "col_norm_ones", "=", "torch", ".", "zeros", "(", "batch_size", ",", "s", ".", "shape", "[", "2", "]", ",", "s", ".", "shape", "[", "2", "]", ",", "device", "=", "s", ".", "device", ")", "# size: col x col", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "row_slice", "=", "slice", "(", "0", ",", "nrows", "[", "b", "]", "if", "nrows", "is", "not", "None", "else", "s", ".", "shape", "[", "2", "]", ")", "\n", "col_slice", "=", "slice", "(", "0", ",", "ncols", "[", "b", "]", "if", "ncols", "is", "not", "None", "else", "s", ".", "shape", "[", "1", "]", ")", "\n", "row_norm_ones", "[", "b", ",", "row_slice", ",", "row_slice", "]", "=", "1", "\n", "col_norm_ones", "[", "b", ",", "col_slice", ",", "col_slice", "]", "=", "1", "\n", "\n", "# for Sinkhorn stacked on last dimension", "\n", "", "if", "len", "(", "s", ".", "shape", ")", "==", "4", ":", "\n", "            ", "row_norm_ones", "=", "row_norm_ones", ".", "unsqueeze", "(", "-", "1", ")", "\n", "col_norm_ones", "=", "col_norm_ones", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "s", "+=", "self", ".", "epsilon", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_iter", ")", ":", "\n", "            ", "if", "exp", ":", "\n", "                ", "s", "=", "torch", ".", "exp", "(", "exp_alpha", "*", "s", ")", "\n", "", "if", "i", "%", "2", "==", "1", ":", "\n", "# column norm", "\n", "                ", "sum", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "s", ".", "unsqueeze", "(", "3", ")", ",", "col_norm_ones", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "# row norm", "\n", "                ", "sum", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "row_norm_ones", ".", "unsqueeze", "(", "3", ")", ",", "s", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "tmp", "=", "torch", ".", "zeros_like", "(", "s", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "row_slice", "=", "slice", "(", "0", ",", "nrows", "[", "b", "]", "if", "nrows", "is", "not", "None", "else", "s", ".", "shape", "[", "2", "]", ")", "\n", "col_slice", "=", "slice", "(", "0", ",", "ncols", "[", "b", "]", "if", "ncols", "is", "not", "None", "else", "s", ".", "shape", "[", "1", "]", ")", "\n", "tmp", "[", "b", ",", "row_slice", ",", "col_slice", "]", "=", "1", "/", "sum", "[", "b", ",", "row_slice", ",", "col_slice", "]", "\n", "", "s", "=", "s", "*", "tmp", "\n", "\n", "", "if", "dummy_row", "and", "dummy_shape", "[", "1", "]", ">", "0", ":", "\n", "            ", "s", "=", "s", "[", ":", ",", ":", "-", "dummy_shape", "[", "1", "]", "]", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.Voting.__init__": [[89, 94], ["torch.nn.Module.__init__", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["def", "__init__", "(", "self", ",", "alpha", "=", "200", ",", "pixel_thresh", "=", "None", ")", ":", "\n", "        ", "super", "(", "Voting", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "# Voting among columns", "\n", "self", ".", "pixel_thresh", "=", "pixel_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.Voting.forward": [[95, 107], ["torch.zeros_like", "enumerate", "ResNetGcn_siamese_part_half_sink.Voting.softmax", "ResNetGcn_siamese_part_half_sink.Voting.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ",", "nrow_gt", ",", "ncol_gt", "=", "None", ")", ":", "\n", "        ", "ret_s", "=", "torch", ".", "zeros_like", "(", "s", ")", "\n", "# filter dummy nodes", "\n", "for", "b", ",", "n", "in", "enumerate", "(", "nrow_gt", ")", ":", "\n", "            ", "if", "ncol_gt", "is", "None", ":", "\n", "                ", "ret_s", "[", "b", ",", "0", ":", "n", ",", ":", "]", "=", "self", ".", "softmax", "(", "self", ".", "alpha", "*", "s", "[", "b", ",", "0", ":", "n", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "ret_s", "[", "b", ",", "0", ":", "n", ",", "0", ":", "ncol_gt", "[", "b", "]", "]", "=", "self", ".", "softmax", "(", "self", ".", "alpha", "*", "s", "[", "b", ",", "0", ":", "n", ",", "0", ":", "ncol_gt", "[", "b", "]", "]", ")", "\n", "\n", "", "", "return", "ret_s", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.Affinity.__init__": [[116, 121], ["torch.nn.Module.__init__", "int", "torch.nn.parameter.Parameter", "ResNetGcn_siamese_part_half_sink.Affinity.reset_parameters", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__", "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.Affinity.reset_parameters"], ["def", "__init__", "(", "self", ",", "d", ")", ":", "\n", "        ", "super", "(", "Affinity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d", "=", "int", "(", "d", ")", "\n", "self", ".", "A", "=", "Parameter", "(", "Tensor", "(", "self", ".", "d", ",", "self", ".", "d", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.Affinity.reset_parameters": [[122, 126], ["ResNetGcn_siamese_part_half_sink.Affinity.A.data.uniform_", "torch.eye", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "d", ")", "\n", "self", ".", "A", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "A", ".", "data", "+=", "torch", ".", "eye", "(", "self", ".", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.Affinity.forward": [[127, 133], ["torch.matmul", "torch.matmul", "Y.transpose", "ResNetGcn_siamese_part_half_sink.Affinity.A.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "assert", "X", ".", "shape", "[", "2", "]", "==", "Y", ".", "shape", "[", "2", "]", "==", "self", ".", "d", "\n", "#M = torch.matmul(X, self.A)", "\n", "M", "=", "torch", ".", "matmul", "(", "X", ",", "(", "self", ".", "A", "+", "self", ".", "A", ".", "transpose", "(", "0", ",", "1", ")", ")", "/", "2", ")", "\n", "M", "=", "torch", ".", "matmul", "(", "M", ",", "Y", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.__init__": [[151, 169], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.BatchNorm1d", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "infeat", ",", "outfeat", ",", "use_bn", "=", "True", ",", "mean", "=", "False", ",", "add_self", "=", "False", ")", ":", "\n", "        ", "super", "(", "BatchedGraphSAGEMean1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_self", "=", "add_self", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "aggregator", "=", "True", "\n", "#print(infeat,outfeat)", "\n", "self", ".", "W_x", "=", "nn", ".", "Linear", "(", "infeat", ",", "outfeat", ",", "bias", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W_x", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "W_neib", "=", "nn", ".", "Linear", "(", "infeat", ",", "outfeat", ",", "bias", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W_neib", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "W_relative", "=", "nn", ".", "Linear", "(", "infeat", ",", "outfeat", ",", "bias", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W_relative", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "3", "*", "outfeat", ")", "\n", "#self.bn = nn.BatchNorm1d(16)", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.forward": [[171, 274], ["x1.size", "x1.size", "range", "torch.cat", "torch.cat", "torch.nn.functional.normalize", "torch.nn.functional.relu", "torch.nn.functional.normalize", "torch.nn.functional.relu", "h_k_f1.view.view.contiguous", "h_k_f2.view.view.contiguous", "adj1[].size", "ResNetGcn_siamese_part_half_sink.sampler_fn", "x1[].contiguous", "x_neib1.mean.mean.view", "x_neib1.mean.mean.mean", "adj2[].size", "ResNetGcn_siamese_part_half_sink.sampler_fn", "x2[].contiguous", "x_neib2.mean.mean.view", "x_neib2.mean.mean.mean", "x1_valid.view.view.contiguous", "x2_valid.view.view.contiguous", "x1_valid.view.view.view", "x2_valid.view.view.view", "x1_valid.view.view.unsqueeze().expand", "x2_valid.view.view.permute().contiguous", "x2_valid_s.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity.", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "mu1.view.view.view", "mu2.view.view.view", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat", "h_k_list1.append", "torch.cat", "h_k_list2.append", "h_k_f1.view.view.view", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.bn", "h_k_f1.view.view.permute", "h_k_f1.view.view.view", "h_k_f2.view.view.view", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.bn", "h_k_f2.view.view.permute", "h_k_f2.view.view.view", "x_neib1.mean.mean.size", "x_neib1.mean.mean.size", "x_neib2.mean.mean.size", "x_neib2.mean.mean.size", "x1_valid.view.view.size", "x1_valid.view.view.size", "nn.CosineSimilarity.transpose().contiguous", "torch.matmul", "torch.matmul", "h_k_f1.view.view.size", "h_k_f1.view.view.size", "h_k_f1.view.view.permute().contiguous", "h_k_f1.view.view.size", "h_k_f1.view.view.size", "h_k_f2.view.view.size", "h_k_f2.view.view.size", "h_k_f2.view.view.permute().contiguous", "h_k_f2.view.view.size", "h_k_f2.view.view.size", "x1_valid.view.view.unsqueeze", "x2_valid.view.view.permute", "x2_valid_s.unsqueeze().expand.unsqueeze().expand.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nn.CosineSimilarity.transpose", "h_k_f1.view.view.permute", "h_k_f2.view.view.permute", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.W_neib", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.W_relative", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.W_neib", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.W_relative", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1.W_x"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.sampler_fn", "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.sampler_fn"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "adj1", ",", "adj2", ")", ":", "\n", "#print(adj.shape)", "\n", "#print(x1.shape)", "\n", "#xshape = x1.shape", "\n", "#x1 = x1.view(x1.shape[0], x1.shape[1], -1)", "\n", "#x2 = x2.view(x2.shape[0], x2.shape[1], -1)", "\n", "#print(x1.shape)", "\n", "        ", "b", "=", "x1", ".", "size", "(", "0", ")", "\n", "parts", "=", "x1", ".", "size", "(", "2", ")", "\n", "#print(b)", "\n", "#print(len(adj))", "\n", "h_k_list1", "=", "[", "]", "\n", "h_k_list2", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "# first graph in the pair", "\n", "            ", "sample_size1", "=", "adj1", "[", "i", "]", ".", "size", "(", "0", ")", "\n", "idx_neib1", "=", "sampler_fn", "(", "adj1", "[", "i", "]", ")", "\n", "x_neib1", "=", "x1", "[", "i", ",", "idx_neib1", ",", "]", ".", "contiguous", "(", ")", "\n", "x_neib1", "=", "x_neib1", ".", "view", "(", "sample_size1", ",", "-", "1", ",", "x_neib1", ".", "size", "(", "1", ")", ",", "x_neib1", ".", "size", "(", "2", ")", ")", "\n", "x_neib1", "=", "x_neib1", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "# second graph in the pair", "\n", "sample_size2", "=", "adj2", "[", "i", "]", ".", "size", "(", "0", ")", "\n", "idx_neib2", "=", "sampler_fn", "(", "adj2", "[", "i", "]", ")", "\n", "x_neib2", "=", "x2", "[", "i", ",", "idx_neib2", ",", "]", ".", "contiguous", "(", ")", "\n", "x_neib2", "=", "x_neib2", ".", "view", "(", "sample_size2", ",", "-", "1", ",", "x_neib2", ".", "size", "(", "1", ")", ",", "x_neib2", ".", "size", "(", "2", ")", ")", "\n", "x_neib2", "=", "x_neib2", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "# calculate between graph message", "\n", "x1_valid", "=", "x1", "[", "i", ",", ":", "sample_size1", ",", ":", "]", "\n", "x2_valid", "=", "x2", "[", "i", ",", ":", "sample_size2", ",", ":", "]", "\n", "\n", "# concatenate part features", "\n", "x1_valid", "=", "x1_valid", ".", "contiguous", "(", ")", "\n", "x2_valid", "=", "x2_valid", ".", "contiguous", "(", ")", "\n", "x1_valid", "=", "x1_valid", ".", "view", "(", "x1_valid", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x2_valid", "=", "x2_valid", ".", "view", "(", "x2_valid", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# to verify that the cosine similarity is implemented correctly", "\n", "'''\n            cos = nn.CosineSimilarity()\n            for ii in range(sample_size1):\n                for jj in range(sample_size2):\n                    sim = cos(x1_valid[ii].unsqueeze(0), x2_valid[jj].unsqueeze(0))\n                    print(sim)\n            '''", "\n", "x1_valid_s", "=", "x1_valid", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "sample_size1", ",", "x1_valid", ".", "size", "(", "1", ")", ",", "sample_size2", ")", "\n", "x2_valid_s", "=", "x2_valid", ".", "permute", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "x2_valid_s", "=", "x2_valid_s", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "sample_size1", ",", "x1_valid", ".", "size", "(", "1", ")", ",", "sample_size2", ")", "\n", "cos", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-6", ")", "\n", "sim", "=", "cos", "(", "x1_valid_s", ",", "x2_valid_s", ")", "\n", "att1", "=", "F", ".", "softmax", "(", "sim", ",", "dim", "=", "1", ")", "\n", "att2", "=", "F", ".", "softmax", "(", "sim", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ",", "dim", "=", "1", ")", "\n", "mu1", "=", "x1_valid", "-", "torch", ".", "matmul", "(", "att1", ",", "x2_valid", ")", "\n", "mu2", "=", "x2_valid", "-", "torch", ".", "matmul", "(", "att2", ",", "x1_valid", ")", "\n", "#print(mu1.shape, mu2.shape)", "\n", "mu1", "=", "mu1", ".", "view", "(", "mu1", ".", "shape", "[", "0", "]", ",", "parts", ",", "-", "1", ")", "\n", "mu2", "=", "mu2", ".", "view", "(", "mu2", ".", "shape", "[", "0", "]", ",", "parts", ",", "-", "1", ")", "\n", "\n", "# calculate within graph and inter graph message", "\n", "h_k1", "=", "torch", ".", "cat", "(", "(", "self", ".", "W_x", "(", "x1", "[", "i", ",", ":", "sample_size1", ",", ":", "]", ")", ",", "self", ".", "W_neib", "(", "x_neib1", ")", ",", "self", ".", "W_relative", "(", "mu1", ")", ")", ",", "2", ")", ".", "unsqueeze", "(", "0", ")", "\n", "h_k_junk1", "=", "torch", ".", "cat", "(", "(", "self", ".", "W_x", "(", "x1", "[", "i", ",", "sample_size1", ":", ",", ":", "]", ")", ",", "self", ".", "W_x", "(", "x1", "[", "i", ",", "sample_size1", ":", ",", ":", "]", ")", ",", "self", ".", "W_x", "(", "x1", "[", "i", ",", "sample_size1", ":", ",", ":", "]", ")", ")", ",", "2", ")", ".", "unsqueeze", "(", "\n", "0", ")", "\n", "\n", "h_k2", "=", "torch", ".", "cat", "(", "(", "self", ".", "W_x", "(", "x2", "[", "i", ",", ":", "sample_size2", ",", ":", "]", ")", ",", "self", ".", "W_neib", "(", "x_neib2", ")", ",", "self", ".", "W_relative", "(", "mu2", ")", ")", ",", "2", ")", ".", "unsqueeze", "(", "0", ")", "\n", "h_k_junk2", "=", "torch", ".", "cat", "(", "(", "self", ".", "W_x", "(", "x2", "[", "i", ",", "sample_size2", ":", ",", ":", "]", ")", ",", "self", ".", "W_x", "(", "x2", "[", "i", ",", "sample_size2", ":", ",", ":", "]", ")", ",", "self", ".", "W_x", "(", "x2", "[", "i", ",", "sample_size2", ":", ",", ":", "]", ")", ")", ",", "2", ")", ".", "unsqueeze", "(", "\n", "0", ")", "\n", "\n", "h_k1", "=", "torch", ".", "cat", "(", "(", "h_k1", ",", "h_k_junk1", ")", ",", "1", ")", "\n", "h_k_list1", ".", "append", "(", "h_k1", ")", "\n", "\n", "h_k2", "=", "torch", ".", "cat", "(", "(", "h_k2", ",", "h_k_junk2", ")", ",", "1", ")", "\n", "h_k_list2", ".", "append", "(", "h_k2", ")", "\n", "\n", "", "h_k_f1", "=", "torch", ".", "cat", "(", "h_k_list1", ",", "dim", "=", "0", ")", "\n", "h_k_f2", "=", "torch", ".", "cat", "(", "h_k_list2", ",", "dim", "=", "0", ")", "\n", "#print(h_k_f.shape)", "\n", "\n", "h_k_f1", "=", "F", ".", "normalize", "(", "h_k_f1", ",", "dim", "=", "3", ",", "p", "=", "2", ")", "\n", "h_k_f1", "=", "F", ".", "relu", "(", "h_k_f1", ")", "\n", "h_k_f2", "=", "F", ".", "normalize", "(", "h_k_f2", ",", "dim", "=", "3", ",", "p", "=", "2", ")", "\n", "h_k_f2", "=", "F", ".", "relu", "(", "h_k_f2", ")", "\n", "#print(h_k_f1.shape)", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "h_k_f1", "=", "h_k_f1", ".", "view", "(", "-", "1", ",", "h_k_f1", ".", "size", "(", "2", ")", ",", "h_k_f1", ".", "size", "(", "3", ")", ")", "\n", "#self.bn = nn.BatchNorm1d(h_k.size(1))", "\n", "h_k_f1", "=", "self", ".", "bn", "(", "h_k_f1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "#print(h_k.shape)", "\n", "h_k_f1", "=", "h_k_f1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#print(h_k.shape)", "\n", "h_k_f1", "=", "h_k_f1", ".", "view", "(", "b", ",", "-", "1", ",", "h_k_f1", ".", "size", "(", "1", ")", ",", "h_k_f1", ".", "size", "(", "2", ")", ")", "\n", "\n", "h_k_f2", "=", "h_k_f2", ".", "view", "(", "-", "1", ",", "h_k_f2", ".", "size", "(", "2", ")", ",", "h_k_f2", ".", "size", "(", "3", ")", ")", "\n", "h_k_f2", "=", "self", ".", "bn", "(", "h_k_f2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "# print(h_k.shape)", "\n", "h_k_f2", "=", "h_k_f2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "h_k_f2", "=", "h_k_f2", ".", "view", "(", "b", ",", "-", "1", ",", "h_k_f2", ".", "size", "(", "1", ")", ",", "h_k_f2", ".", "size", "(", "2", ")", ")", "\n", "\n", "", "h_k_f1", "=", "h_k_f1", ".", "contiguous", "(", ")", "\n", "#print(h_k_f1.shape)", "\n", "h_k_f2", "=", "h_k_f2", ".", "contiguous", "(", ")", "\n", "#h_k_f1 = h_k_f1.view(xshape[0], xshape[1], xshape[2], -1)", "\n", "#h_k_f2 = h_k_f2.view(xshape[0], xshape[1], xshape[2], -1)", "\n", "return", "h_k_f1", ",", "h_k_f2", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.__init__": [[276, 299], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.ModuleList", "range", "torch.nn.LeakyReLU", "torch.nn.init.xavier_uniform_", "torch.nn.BatchNorm1d", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.Linear", "range", "torch.nn.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "infeat", ",", "outfeat", ",", "use_bn", "=", "True", ",", "mean", "=", "False", ",", "add_self", "=", "False", ")", ":", "\n", "        ", "super", "(", "BatchedGAT_cat2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_self", "=", "add_self", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "aggregator", "=", "True", "\n", "self", ".", "num_head", "=", "4", "\n", "\n", "self", ".", "W_x", "=", "nn", ".", "Linear", "(", "infeat", ",", "outfeat", ",", "bias", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W_x", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "W_neib", "=", "nn", ".", "Linear", "(", "infeat", ",", "outfeat", ",", "bias", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W_neib", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "W_a", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "2", "*", "infeat", ",", "1", ",", "bias", "=", "False", ")", "for", "i", "in", "range", "(", "self", ".", "num_head", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_head", ")", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W_a", "[", "i", "]", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "", "self", ".", "alpha", "=", "0.2", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", "self", ".", "alpha", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "2", "*", "(", "self", ".", "num_head", "+", "1", ")", "*", "outfeat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.forward": [[300, 422], ["x1.size", "range", "torch.cat", "torch.nn.functional.normalize", "torch.nn.functional.relu", "range", "torch.cat", "torch.nn.functional.normalize", "torch.nn.functional.relu", "adj1[].size", "ResNetGcn_siamese_part_half_sink.sampler_fn", "x1[].contiguous", "x_neib1.view.view.view", "torch.cat", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_x", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_x", "range", "torch.cat", "x_neib1.view.view.permute().contiguous", "x_neib1.view.view.view", "torch.cat", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_x", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_x", "range", "torch.cat", "h_k_list1.append", "h_k_f1.view.view.view", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.bn", "h_k_f1.view.view.permute", "h_k_f1.view.view.view", "adj2[].size", "ResNetGcn_siamese_part_half_sink.sampler_fn", "x2[].contiguous", "x_neib2.view.view.view", "torch.cat", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_x", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_x", "range", "torch.cat", "x_neib2.view.view.permute().contiguous", "x_neib2.view.view.view", "torch.cat", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_x", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_x", "range", "torch.cat", "h_k_list2.append", "h_k_f2.view.view.view", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.bn", "h_k_f2.view.view.permute", "h_k_f2.view.view.view", "x_neib1.view.view.size", "x_neib1.view.view.size", "x1[].unsqueeze", "x1[].unsqueeze", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.leakyrelu", "torch.nn.functional.softmax", "torch.matmul", "torch.cat", "torch.cat", "x_neib1.view.view.size", "x_neib1.view.view.size", "x1[].unsqueeze", "x1[].unsqueeze", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.leakyrelu", "torch.nn.functional.softmax", "torch.matmul", "h_prime.view.view.permute().contiguous", "h_prime.view.view.view", "torch.cat", "torch.cat", "torch.cat", "h_k_f1.view.view.size", "h_k_f1.view.view.size", "h_k_f1.view.view.permute().contiguous", "h_k_f1.view.view.size", "h_k_f1.view.view.size", "x_neib2.view.view.size", "x_neib2.view.view.size", "x2[].unsqueeze", "x2[].unsqueeze", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.leakyrelu", "torch.nn.functional.softmax", "torch.matmul", "torch.cat", "torch.cat", "x_neib2.view.view.size", "x_neib2.view.view.size", "x2[].unsqueeze", "x2[].unsqueeze", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.leakyrelu", "torch.nn.functional.softmax", "torch.matmul", "h_prime.view.view.permute().contiguous", "h_prime.view.view.view", "torch.cat", "torch.cat", "torch.cat", "h_k_f2.view.view.size", "h_k_f2.view.view.size", "h_k_f2.view.view.permute().contiguous", "h_k_f2.view.view.size", "h_k_f2.view.view.size", "x1[].unsqueeze().repeat", "torch.nn.functional.softmax.unsqueeze", "x_neib1.view.view.permute", "x_neib1.view.view.permute", "x_neib1.view.view.size", "x_neib1.view.view.size", "x1[].contiguous().view().unsqueeze().repeat", "torch.nn.functional.softmax.unsqueeze", "h_prime.view.view.size", "h_prime.view.view.size", "x2[].unsqueeze().repeat", "torch.nn.functional.softmax.unsqueeze", "x_neib2.view.view.permute", "x_neib2.view.view.permute", "x_neib2.view.view.size", "x_neib2.view.view.size", "x2[].contiguous().view().unsqueeze().repeat", "torch.nn.functional.softmax.unsqueeze", "h_prime.view.view.size", "h_prime.view.view.size", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_neib", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_neib", "h_prime.view.view.permute", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_neib", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_neib", "h_k_f1.view.view.permute", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_neib", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_neib", "h_prime.view.view.permute", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_neib", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2.W_neib", "h_k_f2.view.view.permute", "x1[].unsqueeze", "h_prime.view.view.permute", "x1[].unsqueeze", "x1[].contiguous().view().unsqueeze", "x1[].unsqueeze", "x2[].unsqueeze", "h_prime.view.view.permute", "x2[].unsqueeze", "x2[].contiguous().view().unsqueeze", "x2[].unsqueeze", "torch.cat.permute", "torch.cat.permute", "x1[].contiguous().view", "x2[].contiguous().view", "x1.size", "x2.size", "x1[].contiguous", "x2[].contiguous"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.sampler_fn", "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.sampler_fn"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "adj1", ",", "adj2", ")", ":", "\n", "        ", "b", "=", "x1", ".", "size", "(", "0", ")", "\n", "h_k_list1", "=", "[", "]", "\n", "h_k_list2", "=", "[", "]", "\n", "\n", "# first image in pair", "\n", "#x = self.W_x(x)", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "            ", "sample_size1", "=", "adj1", "[", "i", "]", ".", "size", "(", "0", ")", "\n", "idx_neib1", "=", "sampler_fn", "(", "adj1", "[", "i", "]", ")", "\n", "x_neib1", "=", "x1", "[", "i", ",", "idx_neib1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "x_neib1", "=", "x_neib1", ".", "view", "(", "sample_size1", ",", "-", "1", ",", "x_neib1", ".", "size", "(", "1", ")", ",", "x_neib1", ".", "size", "(", "2", ")", ")", "\n", "#print(x_neib.shape)", "\n", "\n", "# Inner part attention ", "\n", "a1_input1", "=", "torch", ".", "cat", "(", "(", "x1", "[", "i", ",", ":", "sample_size1", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "sample_size1", "-", "1", ",", "1", ",", "1", ")", ",", "x_neib1", ")", ",", "3", ")", "\n", "#print(a_input.shape)", "\n", "h1_k1", "=", "self", ".", "W_x", "(", "x1", "[", "i", ",", ":", "sample_size1", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "h1_k_junk1", "=", "self", ".", "W_x", "(", "x1", "[", "i", ",", "sample_size1", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "num_head", ")", ":", "\n", "                ", "e", "=", "self", ".", "leakyrelu", "(", "self", ".", "W_a", "[", "j", "]", "(", "a1_input1", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", ".", "squeeze", "(", "3", ")", ")", "\n", "#print(e.shape)", "\n", "attention", "=", "F", ".", "softmax", "(", "e", ",", "dim", "=", "2", ")", "\n", "#print(attention.shape)", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "attention", ".", "unsqueeze", "(", "2", ")", ",", "x_neib1", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "#print(h_k.shape)", "\n", "#print(h_prime.shape)", "\n", "h1_k1", "=", "torch", ".", "cat", "(", "(", "h1_k1", ",", "self", ".", "W_neib", "(", "h_prime", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ")", ")", ",", "3", ")", "\n", "h1_k_junk1", "=", "torch", ".", "cat", "(", "(", "h1_k_junk1", ",", "self", ".", "W_neib", "(", "x1", "[", "i", ",", "sample_size1", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", ",", "3", ")", "\n", "", "h1_k1", "=", "torch", ".", "cat", "(", "(", "h1_k1", ",", "h1_k_junk1", ")", ",", "1", ")", "\n", "#h_k_list.append(h_k)", "\n", "\n", "# Inner part + inter part attention", "\n", "x_neib1", "=", "x_neib1", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "# (s, s-1, p, d)", "\n", "x_neib1", "=", "x_neib1", ".", "view", "(", "x_neib1", ".", "size", "(", "0", ")", "*", "x_neib1", ".", "size", "(", "1", ")", ",", "x_neib1", ".", "size", "(", "2", ")", ",", "x_neib1", ".", "size", "(", "3", ")", ")", "# (sp, s-1, d)", "\n", "#print(x.shape)", "\n", "#print(x[i, :sample_size, :].shape)", "\n", "a1_input2", "=", "torch", ".", "cat", "(", "(", "x1", "[", "i", ",", ":", "sample_size1", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x1", ".", "size", "(", "3", ")", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "sample_size1", "-", "1", ",", "1", ")", ",", "x_neib1", ")", ",", "2", ")", "# (sp, s-1, 2d)", "\n", "h1_k2", "=", "self", ".", "W_x", "(", "x1", "[", "i", ",", ":", "sample_size1", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", "#(1, s, p, d_h)", "\n", "h1_k_junk2", "=", "self", ".", "W_x", "(", "x1", "[", "i", ",", "sample_size1", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", "# (1, s*, p, d_h)", "\n", "for", "j", "in", "range", "(", "self", ".", "num_head", ")", ":", "\n", "                ", "e", "=", "self", ".", "leakyrelu", "(", "self", ".", "W_a", "[", "j", "]", "(", "a1_input2", ")", ".", "squeeze", "(", "2", ")", ")", "#(sp, s-1)", "\n", "attention", "=", "F", ".", "softmax", "(", "e", ",", "dim", "=", "1", ")", "#(sp, s-1)", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "attention", ".", "unsqueeze", "(", "1", ")", ",", "x_neib1", ")", "#(sp, 1, d)", "\n", "h_prime", "=", "h_prime", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "#(1, sp, d)", "\n", "h_prime", "=", "h_prime", ".", "view", "(", "h_prime", ".", "size", "(", "0", ")", ",", "sample_size1", ",", "-", "1", ",", "h_prime", ".", "size", "(", "2", ")", ")", "#(1, s, p, d)", "\n", "h1_k2", "=", "torch", ".", "cat", "(", "(", "h1_k2", ",", "self", ".", "W_neib", "(", "h_prime", ")", ")", ",", "3", ")", "\n", "h1_k_junk2", "=", "torch", ".", "cat", "(", "(", "h1_k_junk2", ",", "self", ".", "W_neib", "(", "x1", "[", "i", ",", "sample_size1", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", ",", "3", ")", "\n", "", "h1_k2", "=", "torch", ".", "cat", "(", "(", "h1_k2", ",", "h1_k_junk2", ")", ",", "1", ")", "\n", "h_k_list1", ".", "append", "(", "torch", ".", "cat", "(", "(", "h1_k1", ",", "h1_k2", ")", ",", "3", ")", ")", "\n", "\n", "", "h_k_f1", "=", "torch", ".", "cat", "(", "h_k_list1", ",", "dim", "=", "0", ")", "\n", "\n", "h_k_f1", "=", "F", ".", "normalize", "(", "h_k_f1", ",", "dim", "=", "3", ",", "p", "=", "2", ")", "\n", "h_k_f1", "=", "F", ".", "relu", "(", "h_k_f1", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "h_k_f1", "=", "h_k_f1", ".", "view", "(", "-", "1", ",", "h_k_f1", ".", "size", "(", "2", ")", ",", "h_k_f1", ".", "size", "(", "3", ")", ")", "\n", "h_k_f1", "=", "self", ".", "bn", "(", "h_k_f1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "# print(h_k.shape)", "\n", "h_k_f1", "=", "h_k_f1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "h_k_f1", "=", "h_k_f1", ".", "view", "(", "b", ",", "-", "1", ",", "h_k_f1", ".", "size", "(", "1", ")", ",", "h_k_f1", ".", "size", "(", "2", ")", ")", "\n", "\n", "# second image in pair", "\n", "#x = self.W_x(x)", "\n", "", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "            ", "sample_size2", "=", "adj2", "[", "i", "]", ".", "size", "(", "0", ")", "\n", "idx_neib2", "=", "sampler_fn", "(", "adj2", "[", "i", "]", ")", "\n", "x_neib2", "=", "x2", "[", "i", ",", "idx_neib2", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "x_neib2", "=", "x_neib2", ".", "view", "(", "sample_size2", ",", "-", "1", ",", "x_neib2", ".", "size", "(", "1", ")", ",", "x_neib2", ".", "size", "(", "2", ")", ")", "\n", "#print(x_neib.shape)", "\n", "\n", "# Inner part attention ", "\n", "a2_input1", "=", "torch", ".", "cat", "(", "(", "x2", "[", "i", ",", ":", "sample_size2", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "sample_size2", "-", "1", ",", "1", ",", "1", ")", ",", "x_neib2", ")", ",", "3", ")", "\n", "#print(a_input.shape)", "\n", "h2_k1", "=", "self", ".", "W_x", "(", "x2", "[", "i", ",", ":", "sample_size2", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "h2_k_junk1", "=", "self", ".", "W_x", "(", "x2", "[", "i", ",", "sample_size2", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "num_head", ")", ":", "\n", "                ", "e", "=", "self", ".", "leakyrelu", "(", "self", ".", "W_a", "[", "j", "]", "(", "a2_input1", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", ".", "squeeze", "(", "3", ")", ")", "\n", "#print(e.shape)", "\n", "attention", "=", "F", ".", "softmax", "(", "e", ",", "dim", "=", "2", ")", "\n", "#print(attention.shape)", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "attention", ".", "unsqueeze", "(", "2", ")", ",", "x_neib2", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "#print(h_k.shape)", "\n", "#print(h_prime.shape)", "\n", "h2_k1", "=", "torch", ".", "cat", "(", "(", "h2_k1", ",", "self", ".", "W_neib", "(", "h_prime", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ")", ")", ",", "3", ")", "\n", "h2_k_junk1", "=", "torch", ".", "cat", "(", "(", "h2_k_junk1", ",", "self", ".", "W_neib", "(", "x2", "[", "i", ",", "sample_size2", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", ",", "3", ")", "\n", "", "h2_k1", "=", "torch", ".", "cat", "(", "(", "h2_k1", ",", "h2_k_junk1", ")", ",", "1", ")", "\n", "#h_k_list.append(h_k)", "\n", "\n", "# Inner part + inter part attention", "\n", "x_neib2", "=", "x_neib2", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "# (s, s-1, p, d)", "\n", "x_neib2", "=", "x_neib2", ".", "view", "(", "x_neib2", ".", "size", "(", "0", ")", "*", "x_neib2", ".", "size", "(", "1", ")", ",", "x_neib2", ".", "size", "(", "2", ")", ",", "x_neib2", ".", "size", "(", "3", ")", ")", "# (sp, s-1, d)", "\n", "#print(x.shape)", "\n", "#print(x[i, :sample_size, :].shape)", "\n", "a2_input2", "=", "torch", ".", "cat", "(", "(", "x2", "[", "i", ",", ":", "sample_size2", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "x2", ".", "size", "(", "3", ")", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "sample_size2", "-", "1", ",", "1", ")", ",", "x_neib2", ")", ",", "2", ")", "# (sp, s-1, 2d)", "\n", "h2_k2", "=", "self", ".", "W_x", "(", "x2", "[", "i", ",", ":", "sample_size2", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", "#(1, s, p, d_h)", "\n", "h2_k_junk2", "=", "self", ".", "W_x", "(", "x2", "[", "i", ",", "sample_size2", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", "# (1, s*, p, d_h)", "\n", "for", "j", "in", "range", "(", "self", ".", "num_head", ")", ":", "\n", "                ", "e", "=", "self", ".", "leakyrelu", "(", "self", ".", "W_a", "[", "j", "]", "(", "a2_input2", ")", ".", "squeeze", "(", "2", ")", ")", "#(sp, s-1)", "\n", "attention", "=", "F", ".", "softmax", "(", "e", ",", "dim", "=", "1", ")", "#(sp, s-1)", "\n", "h_prime", "=", "torch", ".", "matmul", "(", "attention", ".", "unsqueeze", "(", "1", ")", ",", "x_neib2", ")", "#(sp, 1, d)", "\n", "h_prime", "=", "h_prime", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "#(1, sp, d)", "\n", "h_prime", "=", "h_prime", ".", "view", "(", "h_prime", ".", "size", "(", "0", ")", ",", "sample_size2", ",", "-", "1", ",", "h_prime", ".", "size", "(", "2", ")", ")", "#(1, s, p, d)", "\n", "h2_k2", "=", "torch", ".", "cat", "(", "(", "h2_k2", ",", "self", ".", "W_neib", "(", "h_prime", ")", ")", ",", "3", ")", "\n", "h2_k_junk2", "=", "torch", ".", "cat", "(", "(", "h2_k_junk2", ",", "self", ".", "W_neib", "(", "x2", "[", "i", ",", "sample_size2", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", ",", "3", ")", "\n", "", "h2_k2", "=", "torch", ".", "cat", "(", "(", "h2_k2", ",", "h2_k_junk2", ")", ",", "1", ")", "\n", "h_k_list2", ".", "append", "(", "torch", ".", "cat", "(", "(", "h2_k1", ",", "h2_k2", ")", ",", "3", ")", ")", "\n", "\n", "", "h_k_f2", "=", "torch", ".", "cat", "(", "h_k_list2", ",", "dim", "=", "0", ")", "\n", "\n", "h_k_f2", "=", "F", ".", "normalize", "(", "h_k_f2", ",", "dim", "=", "3", ",", "p", "=", "2", ")", "\n", "h_k_f2", "=", "F", ".", "relu", "(", "h_k_f2", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "h_k_f2", "=", "h_k_f2", ".", "view", "(", "-", "1", ",", "h_k_f2", ".", "size", "(", "2", ")", ",", "h_k_f2", ".", "size", "(", "3", ")", ")", "\n", "h_k_f2", "=", "self", ".", "bn", "(", "h_k_f2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "# print(h_k.shape)", "\n", "h_k_f2", "=", "h_k_f2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "h_k_f2", "=", "h_k_f2", ".", "view", "(", "b", ",", "-", "1", ",", "h_k_f2", ".", "size", "(", "1", ")", ",", "h_k_f2", ".", "size", "(", "2", ")", ")", "\n", "\n", "", "return", "h_k_f1", ",", "h_k_f2", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.__init__": [[424, 463], ["torch.nn.Module.__init__", "torchvision.models.resnet50", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.ModuleList", "ResNetGcn_siamese_part_half_sink.Affinity", "ResNetGcn_siamese_part_half_sink.Voting", "ResNetGcn_siamese_part_half_sink.Sinkhorn", "ResNetGcn_siamese_part_half_sink.BatchedGraphSAGEMean1", "ResNetGcn_siamese_part_half_sink.BatchedGAT_cat2", "torch.nn.Linear", "list", "range", "torchvision.models.resnet50.children"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "num_person_classes", ",", "loss", "=", "{", "'xent'", "}", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNet50Gcn_siamese_part_half_sink", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "loss", "\n", "resnet50", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "base", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet50", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", ")", "\n", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "feat_dim", "=", "2048", "\n", "self", ".", "part", "=", "4", "\n", "\n", "# self.num_nodes = 3", "\n", "#self.hidden_dim = 1024", "\n", "self", ".", "hidden_dim", "=", "128", "\n", "# self.adj = torch.ones((self.num_nodes, self.num_nodes))", "\n", "# self.adj.requires_gradient = False", "\n", "'''\n        self.layers = nn.ModuleList([\n            BatchedGraphSAGEMean1(self.feat_dim, self.hidden_dim),\n            ])\n        self.classifier = nn.Linear(2*self.part*self.hidden_dim, num_classes)\n        self.classifier_person = nn.ModuleList([nn.Linear(2*self.hidden_dim, num_person_classes) for i in range(self.part)])\n        '''", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "\n", "# BatchedGAT_cat2(self.feat_dim, self.hidden_dim),", "\n", "BatchedGraphSAGEMean1", "(", "self", ".", "feat_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "BatchedGAT_cat2", "(", "3", "*", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "2", "*", "5", "*", "self", ".", "part", "*", "self", ".", "hidden_dim", ",", "num_classes", ")", "\n", "self", ".", "classifier_person", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "2", "*", "5", "*", "self", ".", "hidden_dim", ",", "num_person_classes", ")", "for", "i", "in", "range", "(", "self", ".", "part", ")", "]", ")", "\n", "'''\n        self.layers = nn.ModuleList([\n            BatchedGcnLayer(self.feat_dim, self.hidden_dim),\n        ])\n        self.classifier = nn.Linear(self.hidden_dim, num_classes)\n        self.classifier_person = nn.Linear(self.hidden_dim, num_person_classes)\n        '''", "\n", "self", ".", "affinity", "=", "Affinity", "(", "2", "*", "5", "*", "self", ".", "part", "*", "self", ".", "hidden_dim", ")", "\n", "self", ".", "voting_layer", "=", "Voting", "(", ")", "\n", "self", ".", "bi_stochastic", "=", "Sinkhorn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.forward": [[464, 561], ["ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.base", "ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.base", "len", "torch.nn.functional.avg_pool2d().squeeze", "torch.nn.functional.avg_pool2d().squeeze.permute().contiguous().view", "torch.nn.functional.avg_pool2d().squeeze", "torch.nn.functional.avg_pool2d().squeeze.permute().contiguous().view", "f1.view.view.contiguous", "emb1.view.view.view", "f2.view.view.contiguous", "emb2.view.view.view", "ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.affinity", "ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.voting_layer", "ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.bi_stochastic", "f1.view.view.contiguous", "f_p1.view.view.view", "f2.view.view.contiguous", "f_p2.view.view.view", "range", "torch.cat", "f1.view.view.view", "range", "torch.cat", "f2.view.view.view", "ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.classifier", "ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.classifier", "range", "range", "int", "int", "ns_src.append", "ns_tgt.append", "adj1[].size", "torch.mean", "f_tmp.view.view.view", "f1_list.append", "adj2[].size", "torch.mean", "f_tmp.view.view.view", "f2_list.append", "f_p1_list.append", "y_p1_list.append", "f_p2_list.append", "y_p2_list.append", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d().squeeze.permute().contiguous", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d().squeeze.permute().contiguous", "isinstance", "isinstance", "layer", "f_tmp.view.view.unsqueeze", "f_tmp.view.view.unsqueeze", "int", "ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.size", "torch.nn.functional.avg_pool2d().squeeze.permute", "int", "ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.size", "torch.nn.functional.avg_pool2d().squeeze.permute", "ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.size", "ResNetGcn_siamese_part_half_sink.ResNet50Gcn_siamese_part_half_sink.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "adj1", ",", "adj2", ")", ":", "\n", "        ", "feat1", "=", "self", ".", "base", "(", "x1", ")", "\n", "feat2", "=", "self", ".", "base", "(", "x2", ")", "\n", "#print(feat1.shape)", "\n", "\n", "#global_feat1 = self.gap(self.base(x1))", "\n", "#global_feat2 = self.gap(self.base(x2))", "\n", "'''\n        f_p1 = global_feat1\n        f_p1 = f_p1.view(f_p1.shape[0], -1)\n        f_p2 = global_feat2\n        f_p2 = f_p2.view(f_p2.shape[0] , -1)\n        '''", "\n", "bs", "=", "len", "(", "adj1", ")", "\n", "\n", "part_feat1", "=", "F", ".", "avg_pool2d", "(", "feat1", ",", "(", "int", "(", "feat1", ".", "size", "(", "-", "2", ")", "/", "self", ".", "part", ")", ",", "feat1", ".", "size", "(", "-", "1", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "f1", "=", "part_feat1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", ",", "int", "(", "part_feat1", ".", "shape", "[", "0", "]", "/", "bs", ")", ",", "self", ".", "part", ",", "-", "1", ")", "\n", "#print(part_feat1.shape, f1.shape)", "\n", "part_feat2", "=", "F", ".", "avg_pool2d", "(", "feat2", ",", "(", "int", "(", "feat2", ".", "size", "(", "-", "2", ")", "/", "self", ".", "part", ")", ",", "feat2", ".", "size", "(", "-", "1", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "f2", "=", "part_feat2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", ",", "int", "(", "part_feat2", ".", "shape", "[", "0", "]", "/", "bs", ")", ",", "self", ".", "part", ",", "-", "1", ")", "\n", "#f1 = global_feat1.view(bs, int(global_feat1.shape[0] / bs), -1)", "\n", "#f2 = global_feat2.view(bs, int(global_feat2.shape[0] / bs), -1)", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "BatchedGraphSAGEMean1", ")", "or", "isinstance", "(", "layer", ",", "BatchedGAT_cat2", ")", ":", "\n", "                ", "f1", ",", "f2", "=", "layer", "(", "f1", ",", "f2", ",", "adj1", ",", "adj2", ")", "\n", "#print(f1.shape, f2.shape)", "\n", "\n", "", "", "ns_src", "=", "[", "]", "\n", "ns_tgt", "=", "[", "]", "\n", "for", "adj", "in", "adj1", ":", "\n", "            ", "ns_src", ".", "append", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "", "for", "adj", "in", "adj2", ":", "\n", "            ", "ns_tgt", ".", "append", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "", "emb1", "=", "f1", ".", "contiguous", "(", ")", "\n", "emb1", "=", "emb1", ".", "view", "(", "emb1", ".", "shape", "[", "0", "]", ",", "emb1", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "emb2", "=", "f2", ".", "contiguous", "(", ")", "\n", "emb2", "=", "emb2", ".", "view", "(", "emb2", ".", "shape", "[", "0", "]", ",", "emb2", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "#print(\"emb1\", emb1.shape, \"emb2\", emb2.shape)", "\n", "s", "=", "self", ".", "affinity", "(", "emb1", ",", "emb2", ")", "\n", "#print('affinity', s.shape)", "\n", "s", "=", "self", ".", "voting_layer", "(", "s", ",", "ns_src", ",", "ns_tgt", ")", "\n", "#print('voting', s.shape)", "\n", "s", "=", "self", ".", "bi_stochastic", "(", "s", ",", "ns_src", ",", "ns_tgt", ")", "\n", "\n", "f_p1", "=", "f1", ".", "contiguous", "(", ")", "\n", "f_p1", "=", "f_p1", ".", "view", "(", "f_p1", ".", "shape", "[", "0", "]", "*", "f_p1", ".", "shape", "[", "1", "]", ",", "f_p1", ".", "shape", "[", "2", "]", ",", "-", "1", ")", "\n", "#print(f_p1.shape)", "\n", "f_p2", "=", "f2", ".", "contiguous", "(", ")", "\n", "f_p2", "=", "f_p2", ".", "view", "(", "f_p2", ".", "shape", "[", "0", "]", "*", "f_p2", ".", "shape", "[", "1", "]", ",", "f_p2", ".", "shape", "[", "2", "]", ",", "-", "1", ")", "\n", "\n", "# readout", "\n", "f1_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "f1", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "sample_size1", "=", "adj1", "[", "i", "]", ".", "size", "(", "0", ")", "\n", "f_tmp", "=", "torch", ".", "mean", "(", "f1", "[", "i", ",", ":", "sample_size1", "]", ",", "0", ")", "\n", "f_tmp", "=", "f_tmp", ".", "view", "(", "f_tmp", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "f1_list", ".", "append", "(", "f_tmp", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "f1", "=", "torch", ".", "cat", "(", "f1_list", ",", "0", ")", "\n", "f1", "=", "f1", ".", "view", "(", "f1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "f2_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "f2", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "sample_size2", "=", "adj2", "[", "i", "]", ".", "size", "(", "0", ")", "\n", "f_tmp", "=", "torch", ".", "mean", "(", "f2", "[", "i", ",", ":", "sample_size2", "]", ",", "0", ")", "\n", "f_tmp", "=", "f_tmp", ".", "view", "(", "f_tmp", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "f2_list", ".", "append", "(", "f_tmp", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "f2", "=", "torch", ".", "cat", "(", "f2_list", ",", "0", ")", "\n", "f2", "=", "f2", ".", "view", "(", "f2", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "y_g1", "=", "self", ".", "classifier", "(", "f1", ")", "\n", "y_g2", "=", "self", ".", "classifier", "(", "f2", ")", "\n", "#y = self.classifier(f)", "\n", "y_p1_list", "=", "[", "]", "\n", "f_p1_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "            ", "f_p1_list", ".", "append", "(", "f_p1", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "y_p1_list", ".", "append", "(", "self", ".", "classifier_person", "[", "i", "]", "(", "f_p1", "[", ":", ",", "i", ",", ":", "]", ")", ")", "\n", "\n", "", "y_p2_list", "=", "[", "]", "\n", "f_p2_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "            ", "f_p2_list", ".", "append", "(", "f_p2", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "y_p2_list", ".", "append", "(", "self", ".", "classifier_person", "[", "i", "]", "(", "f_p2", "[", ":", ",", "i", ",", ":", "]", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "f1", ",", "f2", ",", "f_p1_list", ",", "f_p2_list", "\n", "\n", "#y_p1 = self.classifier_person(f_p1)", "\n", "#y_p2 = self.classifier_person(f_p2)", "\n", "\n", "#y_g1 = self.classifier(f1)", "\n", "#y_g2 = self.classifier(f2)", "\n", "\n", "", "return", "f1", ",", "f2", ",", "f_p1_list", ",", "f_p2_list", ",", "y_p1_list", ",", "y_p2_list", ",", "y_g1", ",", "y_g2", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_part_half_sink.sampler_fn": [[134, 149], ["adj.size", "range", "adj.sum().max", "len", "random.shuffle", "adj.sum", "range", "len"], "function", ["None"], ["", "", "def", "sampler_fn", "(", "adj", ")", ":", "\n", "    ", "n", "=", "adj", ".", "size", "(", "0", ")", "\n", "#print(adj.data)", "\n", "adj", "=", "adj", ".", "data", ">", "0", "\n", "n_max", "=", "adj", ".", "sum", "(", "dim", "=", "0", ")", ".", "max", "(", ")", "-", "1", "\n", "nei", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "tmp", "=", "[", "j", "for", "j", "in", "range", "(", "n", ")", "if", "adj", "[", "i", ",", "j", "]", ">", "0", "and", "j", "!=", "i", "]", "\n", "if", "len", "(", "tmp", ")", "!=", "n_max", ":", "\n", "            ", "while", "(", "len", "(", "tmp", ")", "<", "n_max", ")", ":", "\n", "                ", "tmp", "+=", "tmp", "\n", "", "random", ".", "shuffle", "(", "tmp", ")", "\n", "tmp", "=", "tmp", "[", "0", ":", "n_max", "]", "\n", "", "nei", "+=", "tmp", "\n", "", "return", "nei", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.Sinkhorn.__init__": [[23, 27], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["def", "__init__", "(", "self", ",", "max_iter", "=", "10", ",", "epsilon", "=", "1e-4", ")", ":", "\n", "        ", "super", "(", "Sinkhorn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.Sinkhorn.forward": [[28, 76], ["torch.zeros", "torch.zeros", "range", "range", "list", "torch.cat", "range", "slice", "slice", "len", "row_norm_ones.unsqueeze.unsqueeze.unsqueeze", "col_norm_ones.unsqueeze.unsqueeze.unsqueeze", "torch.zeros_like", "range", "torch.exp", "torch.sum", "torch.sum", "slice", "slice", "torch.full().to", "torch.mul", "torch.mul", "torch.exp.unsqueeze", "col_norm_ones.unsqueeze.unsqueeze.unsqueeze", "row_norm_ones.unsqueeze.unsqueeze.unsqueeze", "torch.exp.unsqueeze", "torch.full"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ",", "nrows", "=", "None", ",", "ncols", "=", "None", ",", "exp", "=", "False", ",", "exp_alpha", "=", "20", ",", "dummy_row", "=", "False", ",", "dtype", "=", "torch", ".", "float32", ")", ":", "\n", "        ", "batch_size", "=", "s", ".", "shape", "[", "0", "]", "\n", "\n", "if", "dummy_row", ":", "\n", "            ", "dummy_shape", "=", "list", "(", "s", ".", "shape", ")", "\n", "dummy_shape", "[", "1", "]", "=", "s", ".", "shape", "[", "2", "]", "-", "s", ".", "shape", "[", "1", "]", "\n", "s", "=", "torch", ".", "cat", "(", "(", "s", ",", "torch", ".", "full", "(", "dummy_shape", ",", "0.", ")", ".", "to", "(", "s", ".", "device", ")", ")", ",", "dim", "=", "1", ")", "\n", "new_nrows", "=", "ncols", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "s", "[", "b", ",", "nrows", "[", "b", "]", ":", "new_nrows", "[", "b", "]", ",", ":", "ncols", "[", "b", "]", "]", "=", "self", ".", "epsilon", "\n", "", "nrows", "=", "new_nrows", "\n", "\n", "", "row_norm_ones", "=", "torch", ".", "zeros", "(", "batch_size", ",", "s", ".", "shape", "[", "1", "]", ",", "s", ".", "shape", "[", "1", "]", ",", "device", "=", "s", ".", "device", ")", "# size: row x row", "\n", "col_norm_ones", "=", "torch", ".", "zeros", "(", "batch_size", ",", "s", ".", "shape", "[", "2", "]", ",", "s", ".", "shape", "[", "2", "]", ",", "device", "=", "s", ".", "device", ")", "# size: col x col", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "row_slice", "=", "slice", "(", "0", ",", "nrows", "[", "b", "]", "if", "nrows", "is", "not", "None", "else", "s", ".", "shape", "[", "2", "]", ")", "\n", "col_slice", "=", "slice", "(", "0", ",", "ncols", "[", "b", "]", "if", "ncols", "is", "not", "None", "else", "s", ".", "shape", "[", "1", "]", ")", "\n", "row_norm_ones", "[", "b", ",", "row_slice", ",", "row_slice", "]", "=", "1", "\n", "col_norm_ones", "[", "b", ",", "col_slice", ",", "col_slice", "]", "=", "1", "\n", "\n", "# for Sinkhorn stacked on last dimension", "\n", "", "if", "len", "(", "s", ".", "shape", ")", "==", "4", ":", "\n", "            ", "row_norm_ones", "=", "row_norm_ones", ".", "unsqueeze", "(", "-", "1", ")", "\n", "col_norm_ones", "=", "col_norm_ones", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "s", "+=", "self", ".", "epsilon", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_iter", ")", ":", "\n", "            ", "if", "exp", ":", "\n", "                ", "s", "=", "torch", ".", "exp", "(", "exp_alpha", "*", "s", ")", "\n", "", "if", "i", "%", "2", "==", "1", ":", "\n", "# column norm", "\n", "                ", "sum", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "s", ".", "unsqueeze", "(", "3", ")", ",", "col_norm_ones", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "# row norm", "\n", "                ", "sum", "=", "torch", ".", "sum", "(", "torch", ".", "mul", "(", "row_norm_ones", ".", "unsqueeze", "(", "3", ")", ",", "s", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "tmp", "=", "torch", ".", "zeros_like", "(", "s", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "row_slice", "=", "slice", "(", "0", ",", "nrows", "[", "b", "]", "if", "nrows", "is", "not", "None", "else", "s", ".", "shape", "[", "2", "]", ")", "\n", "col_slice", "=", "slice", "(", "0", ",", "ncols", "[", "b", "]", "if", "ncols", "is", "not", "None", "else", "s", ".", "shape", "[", "1", "]", ")", "\n", "tmp", "[", "b", ",", "row_slice", ",", "col_slice", "]", "=", "1", "/", "sum", "[", "b", ",", "row_slice", ",", "col_slice", "]", "\n", "", "s", "=", "s", "*", "tmp", "\n", "\n", "", "if", "dummy_row", "and", "dummy_shape", "[", "1", "]", ">", "0", ":", "\n", "            ", "s", "=", "s", "[", ":", ",", ":", "-", "dummy_shape", "[", "1", "]", "]", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.Voting.__init__": [[89, 94], ["torch.nn.Module.__init__", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["def", "__init__", "(", "self", ",", "alpha", "=", "200", ",", "pixel_thresh", "=", "None", ")", ":", "\n", "        ", "super", "(", "Voting", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "# Voting among columns", "\n", "self", ".", "pixel_thresh", "=", "pixel_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.Voting.forward": [[95, 107], ["torch.zeros_like", "enumerate", "ResNetGcn_siamese_relative_part_1.Voting.softmax", "ResNetGcn_siamese_relative_part_1.Voting.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ",", "nrow_gt", ",", "ncol_gt", "=", "None", ")", ":", "\n", "        ", "ret_s", "=", "torch", ".", "zeros_like", "(", "s", ")", "\n", "# filter dummy nodes", "\n", "for", "b", ",", "n", "in", "enumerate", "(", "nrow_gt", ")", ":", "\n", "            ", "if", "ncol_gt", "is", "None", ":", "\n", "                ", "ret_s", "[", "b", ",", "0", ":", "n", ",", ":", "]", "=", "self", ".", "softmax", "(", "self", ".", "alpha", "*", "s", "[", "b", ",", "0", ":", "n", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "ret_s", "[", "b", ",", "0", ":", "n", ",", "0", ":", "ncol_gt", "[", "b", "]", "]", "=", "self", ".", "softmax", "(", "self", ".", "alpha", "*", "s", "[", "b", ",", "0", ":", "n", ",", "0", ":", "ncol_gt", "[", "b", "]", "]", ")", "\n", "\n", "", "", "return", "ret_s", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.Affinity.__init__": [[116, 121], ["torch.nn.Module.__init__", "int", "torch.nn.parameter.Parameter", "ResNetGcn_siamese_relative_part_1.Affinity.reset_parameters", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__", "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.Affinity.reset_parameters"], ["def", "__init__", "(", "self", ",", "d", ")", ":", "\n", "        ", "super", "(", "Affinity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d", "=", "int", "(", "d", ")", "\n", "self", ".", "A", "=", "Parameter", "(", "Tensor", "(", "self", ".", "d", ",", "self", ".", "d", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.Affinity.reset_parameters": [[122, 126], ["ResNetGcn_siamese_relative_part_1.Affinity.A.data.uniform_", "torch.eye", "math.sqrt"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "d", ")", "\n", "self", ".", "A", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "A", ".", "data", "+=", "torch", ".", "eye", "(", "self", ".", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.Affinity.forward": [[127, 133], ["torch.matmul", "torch.matmul", "Y.transpose", "ResNetGcn_siamese_relative_part_1.Affinity.A.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "assert", "X", ".", "shape", "[", "2", "]", "==", "Y", ".", "shape", "[", "2", "]", "==", "self", ".", "d", "\n", "#M = torch.matmul(X, self.A)", "\n", "M", "=", "torch", ".", "matmul", "(", "X", ",", "(", "self", ".", "A", "+", "self", ".", "A", ".", "transpose", "(", "0", ",", "1", ")", ")", "/", "2", ")", "\n", "M", "=", "torch", ".", "matmul", "(", "M", ",", "Y", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.__init__": [[151, 169], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.Linear", "torch.nn.init.xavier_uniform_", "torch.nn.BatchNorm1d", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "infeat", ",", "outfeat", ",", "use_bn", "=", "True", ",", "mean", "=", "False", ",", "add_self", "=", "False", ")", ":", "\n", "        ", "super", "(", "BatchedGraphSAGEMean1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_self", "=", "add_self", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "aggregator", "=", "True", "\n", "#print(infeat,outfeat)", "\n", "self", ".", "W_x", "=", "nn", ".", "Linear", "(", "infeat", ",", "outfeat", ",", "bias", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W_x", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "W_neib", "=", "nn", ".", "Linear", "(", "infeat", ",", "outfeat", ",", "bias", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W_neib", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "W_relative", "=", "nn", ".", "Linear", "(", "infeat", ",", "outfeat", ",", "bias", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W_relative", ".", "weight", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "3", "*", "outfeat", ")", "\n", "#self.bn = nn.BatchNorm1d(16)", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.forward": [[171, 272], ["x1.size", "x1.size", "range", "torch.cat", "torch.cat", "torch.nn.functional.normalize", "torch.nn.functional.relu", "torch.nn.functional.normalize", "torch.nn.functional.relu", "h_k_f1.view.view.contiguous", "h_k_f2.view.view.contiguous", "adj1[].size", "ResNetGcn_siamese_relative_part_1.sampler_fn", "x1[].contiguous", "x_neib1.mean.mean.view", "x_neib1.mean.mean.mean", "adj2[].size", "ResNetGcn_siamese_relative_part_1.sampler_fn", "x2[].contiguous", "x_neib2.mean.mean.view", "x_neib2.mean.mean.mean", "x1_valid.view.view.view", "x2_valid.view.view.view", "x1_valid.view.view.unsqueeze().expand", "x2_valid.view.view.permute().contiguous", "x2_valid_s.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity.", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "mu1.view.view.view", "mu2.view.view.view", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat", "h_k_list1.append", "torch.cat", "h_k_list2.append", "h_k_f1.view.view.view", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.bn", "h_k_f1.view.view.permute", "h_k_f1.view.view.view", "h_k_f2.view.view.view", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.bn", "h_k_f2.view.view.permute", "h_k_f2.view.view.view", "x_neib1.mean.mean.size", "x_neib1.mean.mean.size", "x_neib2.mean.mean.size", "x_neib2.mean.mean.size", "x1_valid.view.view.size", "x1_valid.view.view.size", "nn.CosineSimilarity.transpose().contiguous", "torch.matmul", "torch.matmul", "h_k_f1.view.view.size", "h_k_f1.view.view.size", "h_k_f1.view.view.permute().contiguous", "h_k_f1.view.view.size", "h_k_f1.view.view.size", "h_k_f2.view.view.size", "h_k_f2.view.view.size", "h_k_f2.view.view.permute().contiguous", "h_k_f2.view.view.size", "h_k_f2.view.view.size", "x1_valid.view.view.unsqueeze", "x2_valid.view.view.permute", "x2_valid_s.unsqueeze().expand.unsqueeze().expand.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nn.CosineSimilarity.transpose", "h_k_f1.view.view.permute", "h_k_f2.view.view.permute", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.W_neib", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.W_relative", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.W_neib", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.W_relative", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.W_x", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1.W_x"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.sampler_fn", "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.sampler_fn"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "adj1", ",", "adj2", ")", ":", "\n", "#print(adj.shape)", "\n", "#print(x1.shape)", "\n", "#xshape = x1.shape", "\n", "#x1 = x1.view(x1.shape[0], x1.shape[1], -1)", "\n", "#x2 = x2.view(x2.shape[0], x2.shape[1], -1)", "\n", "#print(x1.shape)", "\n", "        ", "b", "=", "x1", ".", "size", "(", "0", ")", "\n", "parts", "=", "x1", ".", "size", "(", "2", ")", "\n", "#print(b)", "\n", "#print(len(adj))", "\n", "h_k_list1", "=", "[", "]", "\n", "h_k_list2", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "b", ")", ":", "\n", "# first graph in the pair", "\n", "            ", "sample_size1", "=", "adj1", "[", "i", "]", ".", "size", "(", "0", ")", "\n", "idx_neib1", "=", "sampler_fn", "(", "adj1", "[", "i", "]", ")", "\n", "x_neib1", "=", "x1", "[", "i", ",", "idx_neib1", ",", "]", ".", "contiguous", "(", ")", "\n", "x_neib1", "=", "x_neib1", ".", "view", "(", "sample_size1", ",", "-", "1", ",", "x_neib1", ".", "size", "(", "1", ")", ",", "x_neib1", ".", "size", "(", "2", ")", ")", "\n", "x_neib1", "=", "x_neib1", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "# second graph in the pair", "\n", "sample_size2", "=", "adj2", "[", "i", "]", ".", "size", "(", "0", ")", "\n", "idx_neib2", "=", "sampler_fn", "(", "adj2", "[", "i", "]", ")", "\n", "x_neib2", "=", "x2", "[", "i", ",", "idx_neib2", ",", "]", ".", "contiguous", "(", ")", "\n", "x_neib2", "=", "x_neib2", ".", "view", "(", "sample_size2", ",", "-", "1", ",", "x_neib2", ".", "size", "(", "1", ")", ",", "x_neib2", ".", "size", "(", "2", ")", ")", "\n", "x_neib2", "=", "x_neib2", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "# calculate between graph message", "\n", "x1_valid", "=", "x1", "[", "i", ",", ":", "sample_size1", ",", ":", "]", "\n", "x2_valid", "=", "x2", "[", "i", ",", ":", "sample_size2", ",", ":", "]", "\n", "\n", "# concatenate part features", "\n", "x1_valid", "=", "x1_valid", ".", "view", "(", "x1_valid", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x2_valid", "=", "x2_valid", ".", "view", "(", "x2_valid", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "# to verify that the cosine similarity is implemented correctly", "\n", "'''\n            cos = nn.CosineSimilarity()\n            for ii in range(sample_size1):\n                for jj in range(sample_size2):\n                    sim = cos(x1_valid[ii].unsqueeze(0), x2_valid[jj].unsqueeze(0))\n                    print(sim)\n            '''", "\n", "x1_valid_s", "=", "x1_valid", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "sample_size1", ",", "x1_valid", ".", "size", "(", "1", ")", ",", "sample_size2", ")", "\n", "x2_valid_s", "=", "x2_valid", ".", "permute", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "x2_valid_s", "=", "x2_valid_s", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "sample_size1", ",", "x1_valid", ".", "size", "(", "1", ")", ",", "sample_size2", ")", "\n", "cos", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-6", ")", "\n", "sim", "=", "cos", "(", "x1_valid_s", ",", "x2_valid_s", ")", "\n", "att1", "=", "F", ".", "softmax", "(", "sim", ",", "dim", "=", "1", ")", "\n", "att2", "=", "F", ".", "softmax", "(", "sim", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ",", "dim", "=", "1", ")", "\n", "mu1", "=", "x1_valid", "-", "torch", ".", "matmul", "(", "att1", ",", "x2_valid", ")", "\n", "mu2", "=", "x2_valid", "-", "torch", ".", "matmul", "(", "att2", ",", "x1_valid", ")", "\n", "#print(mu1.shape, mu2.shape)", "\n", "mu1", "=", "mu1", ".", "view", "(", "mu1", ".", "shape", "[", "0", "]", ",", "parts", ",", "-", "1", ")", "\n", "mu2", "=", "mu2", ".", "view", "(", "mu2", ".", "shape", "[", "0", "]", ",", "parts", ",", "-", "1", ")", "\n", "\n", "# calculate within graph and inter graph message", "\n", "h_k1", "=", "torch", ".", "cat", "(", "(", "self", ".", "W_x", "(", "x1", "[", "i", ",", ":", "sample_size1", ",", ":", "]", ")", ",", "self", ".", "W_neib", "(", "x_neib1", ")", ",", "self", ".", "W_relative", "(", "mu1", ")", ")", ",", "2", ")", ".", "unsqueeze", "(", "0", ")", "\n", "h_k_junk1", "=", "torch", ".", "cat", "(", "(", "self", ".", "W_x", "(", "x1", "[", "i", ",", "sample_size1", ":", ",", ":", "]", ")", ",", "self", ".", "W_x", "(", "x1", "[", "i", ",", "sample_size1", ":", ",", ":", "]", ")", ",", "self", ".", "W_x", "(", "x1", "[", "i", ",", "sample_size1", ":", ",", ":", "]", ")", ")", ",", "2", ")", ".", "unsqueeze", "(", "\n", "0", ")", "\n", "\n", "h_k2", "=", "torch", ".", "cat", "(", "(", "self", ".", "W_x", "(", "x2", "[", "i", ",", ":", "sample_size2", ",", ":", "]", ")", ",", "self", ".", "W_neib", "(", "x_neib2", ")", ",", "self", ".", "W_relative", "(", "mu2", ")", ")", ",", "2", ")", ".", "unsqueeze", "(", "0", ")", "\n", "h_k_junk2", "=", "torch", ".", "cat", "(", "(", "self", ".", "W_x", "(", "x2", "[", "i", ",", "sample_size2", ":", ",", ":", "]", ")", ",", "self", ".", "W_x", "(", "x2", "[", "i", ",", "sample_size2", ":", ",", ":", "]", ")", ",", "self", ".", "W_x", "(", "x2", "[", "i", ",", "sample_size2", ":", ",", ":", "]", ")", ")", ",", "2", ")", ".", "unsqueeze", "(", "\n", "0", ")", "\n", "\n", "h_k1", "=", "torch", ".", "cat", "(", "(", "h_k1", ",", "h_k_junk1", ")", ",", "1", ")", "\n", "h_k_list1", ".", "append", "(", "h_k1", ")", "\n", "\n", "h_k2", "=", "torch", ".", "cat", "(", "(", "h_k2", ",", "h_k_junk2", ")", ",", "1", ")", "\n", "h_k_list2", ".", "append", "(", "h_k2", ")", "\n", "\n", "", "h_k_f1", "=", "torch", ".", "cat", "(", "h_k_list1", ",", "dim", "=", "0", ")", "\n", "h_k_f2", "=", "torch", ".", "cat", "(", "h_k_list2", ",", "dim", "=", "0", ")", "\n", "#print(h_k_f.shape)", "\n", "\n", "h_k_f1", "=", "F", ".", "normalize", "(", "h_k_f1", ",", "dim", "=", "3", ",", "p", "=", "2", ")", "\n", "h_k_f1", "=", "F", ".", "relu", "(", "h_k_f1", ")", "\n", "h_k_f2", "=", "F", ".", "normalize", "(", "h_k_f2", ",", "dim", "=", "3", ",", "p", "=", "2", ")", "\n", "h_k_f2", "=", "F", ".", "relu", "(", "h_k_f2", ")", "\n", "#print(h_k_f1.shape)", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "h_k_f1", "=", "h_k_f1", ".", "view", "(", "-", "1", ",", "h_k_f1", ".", "size", "(", "2", ")", ",", "h_k_f1", ".", "size", "(", "3", ")", ")", "\n", "#self.bn = nn.BatchNorm1d(h_k.size(1))", "\n", "h_k_f1", "=", "self", ".", "bn", "(", "h_k_f1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "#print(h_k.shape)", "\n", "h_k_f1", "=", "h_k_f1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "#print(h_k.shape)", "\n", "h_k_f1", "=", "h_k_f1", ".", "view", "(", "b", ",", "-", "1", ",", "h_k_f1", ".", "size", "(", "1", ")", ",", "h_k_f1", ".", "size", "(", "2", ")", ")", "\n", "\n", "h_k_f2", "=", "h_k_f2", ".", "view", "(", "-", "1", ",", "h_k_f2", ".", "size", "(", "2", ")", ",", "h_k_f2", ".", "size", "(", "3", ")", ")", "\n", "h_k_f2", "=", "self", ".", "bn", "(", "h_k_f2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "# print(h_k.shape)", "\n", "h_k_f2", "=", "h_k_f2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "h_k_f2", "=", "h_k_f2", ".", "view", "(", "b", ",", "-", "1", ",", "h_k_f2", ".", "size", "(", "1", ")", ",", "h_k_f2", ".", "size", "(", "2", ")", ")", "\n", "\n", "", "h_k_f1", "=", "h_k_f1", ".", "contiguous", "(", ")", "\n", "#print(h_k_f1.shape)", "\n", "h_k_f2", "=", "h_k_f2", ".", "contiguous", "(", ")", "\n", "#h_k_f1 = h_k_f1.view(xshape[0], xshape[1], xshape[2], -1)", "\n", "#h_k_f2 = h_k_f2.view(xshape[0], xshape[1], xshape[2], -1)", "\n", "return", "h_k_f1", ",", "h_k_f2", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__": [[275, 308], ["torch.nn.Module.__init__", "torchvision.models.resnet50", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.ModuleList", "ResNetGcn_siamese_relative_part_1.Affinity", "ResNetGcn_siamese_relative_part_1.Voting", "ResNetGcn_siamese_relative_part_1.Sinkhorn", "ResNetGcn_siamese_relative_part_1.BatchedGraphSAGEMean1", "torch.nn.Linear", "list", "range", "torchvision.models.resnet50.children"], "methods", ["home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "num_person_classes", ",", "loss", "=", "{", "'xent'", "}", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNet50Gcn_siamese_relative_part_1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "loss", "\n", "resnet50", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "base", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet50", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", ")", "\n", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "feat_dim", "=", "2048", "\n", "self", ".", "part", "=", "4", "\n", "\n", "# self.num_nodes = 3", "\n", "self", ".", "hidden_dim", "=", "1024", "\n", "# self.adj = torch.ones((self.num_nodes, self.num_nodes))", "\n", "# self.adj.requires_gradient = False", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "\n", "BatchedGraphSAGEMean1", "(", "self", ".", "feat_dim", ",", "self", ".", "hidden_dim", ")", ",", "\n", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "3", "*", "self", ".", "part", "*", "self", ".", "hidden_dim", ",", "num_classes", ")", "\n", "#self.classifier_person = nn.Linear(3*self.hidden_dim, num_person_classes)", "\n", "self", ".", "classifier_person", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "3", "*", "self", ".", "hidden_dim", ",", "num_person_classes", ")", "for", "i", "in", "range", "(", "self", ".", "part", ")", "]", ")", "\n", "\n", "self", ".", "affinity", "=", "Affinity", "(", "3", "*", "self", ".", "part", "*", "self", ".", "hidden_dim", ")", "\n", "self", ".", "voting_layer", "=", "Voting", "(", ")", "\n", "self", ".", "bi_stochastic", "=", "Sinkhorn", "(", ")", "\n", "\n", "'''\n        self.layers = nn.ModuleList([\n            BatchedGcnLayer(self.feat_dim, self.hidden_dim),\n        ])\n        self.classifier = nn.Linear(self.hidden_dim, num_classes)\n        self.classifier_person = nn.Linear(self.hidden_dim, num_person_classes)\n        '''", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.forward": [[309, 405], ["ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.base", "ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.base", "len", "torch.nn.functional.avg_pool2d().squeeze", "torch.nn.functional.avg_pool2d().squeeze.permute().contiguous().view", "torch.nn.functional.avg_pool2d().squeeze", "torch.nn.functional.avg_pool2d().squeeze.permute().contiguous().view", "f1.view.view.contiguous", "emb1.view.view.view", "f2.view.view.contiguous", "emb2.view.view.view", "ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.affinity", "ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.voting_layer", "ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.bi_stochastic", "f1.view.view.contiguous", "f_p1.view.view.view", "f2.view.view.contiguous", "f_p2.view.view.view", "range", "torch.cat", "f1.view.view.view", "range", "torch.cat", "f2.view.view.view", "ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.classifier", "ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.classifier", "range", "range", "int", "int", "isinstance", "ns_src.append", "ns_tgt.append", "adj1[].size", "torch.mean", "f_tmp.view.view.view", "f1_list.append", "adj2[].size", "torch.mean", "f_tmp.view.view.view", "f2_list.append", "f_p1_list.append", "y_p1_list.append", "f_p2_list.append", "y_p2_list.append", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d().squeeze.permute().contiguous", "torch.nn.functional.avg_pool2d", "torch.nn.functional.avg_pool2d().squeeze.permute().contiguous", "layer", "f_tmp.view.view.unsqueeze", "f_tmp.view.view.unsqueeze", "int", "ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.size", "torch.nn.functional.avg_pool2d().squeeze.permute", "int", "ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.size", "torch.nn.functional.avg_pool2d().squeeze.permute", "ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.size", "ResNetGcn_siamese_relative_part_1.ResNet50Gcn_siamese_relative_part_1.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "adj1", ",", "adj2", ")", ":", "\n", "        ", "feat1", "=", "self", ".", "base", "(", "x1", ")", "\n", "feat2", "=", "self", ".", "base", "(", "x2", ")", "\n", "#print(feat1.shape)", "\n", "\n", "#global_feat1 = self.gap(self.base(x1))", "\n", "#global_feat2 = self.gap(self.base(x2))", "\n", "'''\n        f_p1 = global_feat1\n        f_p1 = f_p1.view(f_p1.shape[0], -1)\n        f_p2 = global_feat2\n        f_p2 = f_p2.view(f_p2.shape[0] , -1)\n        '''", "\n", "bs", "=", "len", "(", "adj1", ")", "\n", "\n", "part_feat1", "=", "F", ".", "avg_pool2d", "(", "feat1", ",", "(", "int", "(", "feat1", ".", "size", "(", "-", "2", ")", "/", "self", ".", "part", ")", ",", "feat1", ".", "size", "(", "-", "1", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "f1", "=", "part_feat1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", ",", "int", "(", "part_feat1", ".", "shape", "[", "0", "]", "/", "bs", ")", ",", "self", ".", "part", ",", "-", "1", ")", "\n", "#print(part_feat1.shape, f1.shape)", "\n", "part_feat2", "=", "F", ".", "avg_pool2d", "(", "feat2", ",", "(", "int", "(", "feat2", ".", "size", "(", "-", "2", ")", "/", "self", ".", "part", ")", ",", "feat2", ".", "size", "(", "-", "1", ")", ")", ")", ".", "squeeze", "(", ")", "\n", "f2", "=", "part_feat2", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", ",", "int", "(", "part_feat2", ".", "shape", "[", "0", "]", "/", "bs", ")", ",", "self", ".", "part", ",", "-", "1", ")", "\n", "#f1 = global_feat1.view(bs, int(global_feat1.shape[0] / bs), -1)", "\n", "#f2 = global_feat2.view(bs, int(global_feat2.shape[0] / bs), -1)", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "BatchedGraphSAGEMean1", ")", ":", "\n", "                ", "f1", ",", "f2", "=", "layer", "(", "f1", ",", "f2", ",", "adj1", ",", "adj2", ")", "\n", "\n", "", "", "ns_src", "=", "[", "]", "\n", "ns_tgt", "=", "[", "]", "\n", "for", "adj", "in", "adj1", ":", "\n", "            ", "ns_src", ".", "append", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "", "for", "adj", "in", "adj2", ":", "\n", "            ", "ns_tgt", ".", "append", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "", "emb1", "=", "f1", ".", "contiguous", "(", ")", "\n", "emb1", "=", "emb1", ".", "view", "(", "emb1", ".", "shape", "[", "0", "]", ",", "emb1", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "emb2", "=", "f2", ".", "contiguous", "(", ")", "\n", "emb2", "=", "emb2", ".", "view", "(", "emb2", ".", "shape", "[", "0", "]", ",", "emb2", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "#print(\"emb1\", emb1.shape, \"emb2\", emb2.shape)", "\n", "s", "=", "self", ".", "affinity", "(", "emb1", ",", "emb2", ")", "\n", "#print('affinity', s.shape)", "\n", "s", "=", "self", ".", "voting_layer", "(", "s", ",", "ns_src", ",", "ns_tgt", ")", "\n", "#print('voting', s.shape)", "\n", "s", "=", "self", ".", "bi_stochastic", "(", "s", ",", "ns_src", ",", "ns_tgt", ")", "\n", "\n", "f_p1", "=", "f1", ".", "contiguous", "(", ")", "\n", "f_p1", "=", "f_p1", ".", "view", "(", "f_p1", ".", "shape", "[", "0", "]", "*", "f_p1", ".", "shape", "[", "1", "]", ",", "f_p1", ".", "shape", "[", "2", "]", ",", "-", "1", ")", "\n", "#print(f_p1.shape)", "\n", "f_p2", "=", "f2", ".", "contiguous", "(", ")", "\n", "f_p2", "=", "f_p2", ".", "view", "(", "f_p2", ".", "shape", "[", "0", "]", "*", "f_p2", ".", "shape", "[", "1", "]", ",", "f_p2", ".", "shape", "[", "2", "]", ",", "-", "1", ")", "\n", "\n", "# readout", "\n", "f1_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "f1", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "sample_size1", "=", "adj1", "[", "i", "]", ".", "size", "(", "0", ")", "\n", "f_tmp", "=", "torch", ".", "mean", "(", "f1", "[", "i", ",", ":", "sample_size1", "]", ",", "0", ")", "\n", "f_tmp", "=", "f_tmp", ".", "view", "(", "f_tmp", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "f1_list", ".", "append", "(", "f_tmp", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "f1", "=", "torch", ".", "cat", "(", "f1_list", ",", "0", ")", "\n", "f1", "=", "f1", ".", "view", "(", "f1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "f2_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "f2", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "sample_size2", "=", "adj2", "[", "i", "]", ".", "size", "(", "0", ")", "\n", "f_tmp", "=", "torch", ".", "mean", "(", "f2", "[", "i", ",", ":", "sample_size2", "]", ",", "0", ")", "\n", "f_tmp", "=", "f_tmp", ".", "view", "(", "f_tmp", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "f2_list", ".", "append", "(", "f_tmp", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "f2", "=", "torch", ".", "cat", "(", "f2_list", ",", "0", ")", "\n", "f2", "=", "f2", ".", "view", "(", "f2", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "y_g1", "=", "self", ".", "classifier", "(", "f1", ")", "\n", "y_g2", "=", "self", ".", "classifier", "(", "f2", ")", "\n", "#y = self.classifier(f)", "\n", "y_p1_list", "=", "[", "]", "\n", "f_p1_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "            ", "f_p1_list", ".", "append", "(", "f_p1", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "y_p1_list", ".", "append", "(", "self", ".", "classifier_person", "[", "i", "]", "(", "f_p1", "[", ":", ",", "i", ",", ":", "]", ")", ")", "\n", "\n", "", "y_p2_list", "=", "[", "]", "\n", "f_p2_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "part", ")", ":", "\n", "            ", "f_p2_list", ".", "append", "(", "f_p2", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "y_p2_list", ".", "append", "(", "self", ".", "classifier_person", "[", "i", "]", "(", "f_p2", "[", ":", ",", "i", ",", ":", "]", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "f1", ",", "f2", ",", "f_p1_list", ",", "f_p2_list", "\n", "\n", "#y_p1 = self.classifier_person(f_p1)", "\n", "#y_p2 = self.classifier_person(f_p2)", "\n", "\n", "#y_g1 = self.classifier(f1)", "\n", "#y_g2 = self.classifier(f2)", "\n", "\n", "", "return", "f1", ",", "f2", ",", "f_p1_list", ",", "f_p2_list", ",", "y_p1_list", ",", "y_p2_list", ",", "y_g1", ",", "y_g2", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.ResNetGcn_siamese_relative_part_1.sampler_fn": [[134, 149], ["adj.size", "range", "adj.sum().max", "len", "random.shuffle", "adj.sum", "range", "len"], "function", ["None"], ["", "", "def", "sampler_fn", "(", "adj", ")", ":", "\n", "    ", "n", "=", "adj", ".", "size", "(", "0", ")", "\n", "#print(adj.data)", "\n", "adj", "=", "adj", ".", "data", ">", "0", "\n", "n_max", "=", "adj", ".", "sum", "(", "dim", "=", "0", ")", ".", "max", "(", ")", "-", "1", "\n", "nei", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "tmp", "=", "[", "j", "for", "j", "in", "range", "(", "n", ")", "if", "adj", "[", "i", ",", "j", "]", ">", "0", "and", "j", "!=", "i", "]", "\n", "if", "len", "(", "tmp", ")", "!=", "n_max", ":", "\n", "            ", "while", "(", "len", "(", "tmp", ")", "<", "n_max", ")", ":", "\n", "                ", "tmp", "+=", "tmp", "\n", "", "random", ".", "shuffle", "(", "tmp", ")", "\n", "tmp", "=", "tmp", "[", "0", ":", "n_max", "]", "\n", "", "nei", "+=", "tmp", "\n", "", "return", "nei", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.__init__.get_names": [[12, 14], ["__factory.keys"], "function", ["None"], ["def", "get_names", "(", ")", ":", "\n", "    ", "return", "__factory", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daodaofr_group_reid.models.__init__.init_model": [[15, 19], ["__factory.keys", "KeyError"], "function", ["None"], ["", "def", "init_model", "(", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "name", "not", "in", "__factory", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "KeyError", "(", "\"Unknown model: {}\"", ".", "format", "(", "name", ")", ")", "\n", "", "return", "__factory", "[", "name", "]", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", ""]]}