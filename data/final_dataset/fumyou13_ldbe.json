{"home.repos.pwc.inspect_result.fumyou13_ldbe.None.so_run.main": [[22, 44], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "init_config.init_config", "model.model_builder.init_model", "trainer.source_only_trainer.Trainer", "trainer.source_only_trainer.Trainer.train"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.init_config", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.model_builder.init_model", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.train"], ["def", "main", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "1234", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1234", ")", "\n", "np", ".", "random", ".", "seed", "(", "1234", ")", "\n", "random", ".", "seed", "(", "1234", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "#    torch.backends.cudnn.deterministic = True", "\n", "\n", "config", ",", "writer", "=", "init_config", "(", "\"config/so_config.yml\"", ",", "sys", ".", "argv", ")", "\n", "\n", "if", "config", ".", "source", "==", "'synthia'", ":", "\n", "        ", "config", ".", "num_classes", "=", "16", "\n", "", "else", ":", "\n", "        ", "config", ".", "num_classes", "=", "19", "\n", "", "config", ".", "num_classes", "=", "19", "\n", "model", "=", "init_model", "(", "config", ")", "\n", "\n", "\n", "trainer", "=", "Trainer", "(", "model", ",", "config", ",", "writer", ")", "\n", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.None.eval.get_arguments": [[16, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "255", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"--frm\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--start\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "default", "=", "'cityscapes'", ")", "\n", "parser", ".", "add_argument", "(", "\"--single\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "default", "=", "'deeplab'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.None.eval.print_iou": [[32, 36], ["range", "print", "print", "iou[].item", "acc[].item"], "function", ["None"], ["", "def", "print_iou", "(", "iou", ",", "acc", ",", "miou", ",", "macc", ")", ":", "\n", "    ", "for", "ind_class", "in", "range", "(", "iou", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "print", "(", "'===> {0:2d} : {1:.2%} {2:.2%}'", ".", "format", "(", "ind_class", ",", "iou", "[", "ind_class", ",", "0", "]", ".", "item", "(", ")", ",", "acc", "[", "ind_class", ",", "0", "]", ".", "item", "(", ")", ")", ")", "\n", "", "print", "(", "'mIoU: {:.2%} mAcc : {:.2%} '", ".", "format", "(", "miou", ",", "macc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.None.eval.compute_iou": [[37, 81], ["model.eval.eval", "torch.Upsample", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "iou.mean().item", "acc.mean().item", "eval.print_iou", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "model.eval.", "label.view.cuda", "nn.Upsample.squeeze", "torch.linspace().view", "torch.linspace().view", "pred_e.repeat().cuda.repeat().cuda", "interp().squeeze.argmax().float", "torch.eq().byte", "torch.eq().byte", "torch.linspace().view", "torch.linspace().view", "label_e.repeat().cuda.repeat().cuda", "label.view.view", "torch.eq().byte", "torch.eq().byte", "torch.eq().byte.view().sum().float", "image.cuda", "label.view.squeeze", "iou.mean", "acc.mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "nn.Upsample.", "torch.linspace", "torch.linspace", "pred_e.repeat().cuda.repeat", "interp().squeeze.argmax", "torch.eq", "torch.eq", "torch.linspace", "torch.linspace", "label_e.repeat().cuda.repeat", "torch.eq", "torch.eq", "torch.eq().byte.view().sum", "label.view.float", "torch.eq().byte.view"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.None.eval.print_iou"], ["", "def", "compute_iou", "(", "model", ",", "testloader", ",", "args", ")", ":", "\n", "    ", "model", "=", "model", ".", "eval", "(", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "union", "=", "torch", ".", "zeros", "(", "args", ".", "num_classes", ",", "1", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "inter", "=", "torch", ".", "zeros", "(", "args", ".", "num_classes", ",", "1", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "preds", "=", "torch", ".", "zeros", "(", "args", ".", "num_classes", ",", "1", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "index", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "testloader", ")", ")", ":", "\n", "            ", "image", ",", "label", ",", "edge", ",", "_", ",", "name", "=", "batch", "\n", "#            edge = F.interpolate(edge.unsqueeze(0), (512, 1024)).view(1,512,1024)", "\n", "output", "=", "model", "(", "image", ".", "cuda", "(", ")", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "output", "=", "interp", "(", "output", ")", ".", "squeeze", "(", ")", "\n", "C", ",", "H", ",", "W", "=", "output", ".", "shape", "\n", "Mask", "=", "(", "label", ".", "squeeze", "(", ")", ")", "<", "C", "\n", "\n", "pred_e", "=", "torch", ".", "linspace", "(", "0", ",", "C", "-", "1", ",", "steps", "=", "C", ")", ".", "view", "(", "C", ",", "1", ",", "1", ")", "\n", "pred_e", "=", "pred_e", ".", "repeat", "(", "1", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "0", ")", ".", "float", "(", ")", "\n", "pred_mask", "=", "torch", ".", "eq", "(", "pred_e", ",", "pred", ")", ".", "byte", "(", ")", "\n", "pred_mask", "=", "pred_mask", "*", "Mask", "\n", "\n", "label_e", "=", "torch", ".", "linspace", "(", "0", ",", "C", "-", "1", ",", "steps", "=", "C", ")", ".", "view", "(", "C", ",", "1", ",", "1", ")", "\n", "label_e", "=", "label_e", ".", "repeat", "(", "1", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "view", "(", "1", ",", "H", ",", "W", ")", "\n", "label_mask", "=", "torch", ".", "eq", "(", "label_e", ",", "label", ".", "float", "(", ")", ")", ".", "byte", "(", ")", "\n", "label_mask", "=", "label_mask", "*", "Mask", "\n", "\n", "tmp_inter", "=", "label_mask", "+", "pred_mask", "\n", "cu_inter", "=", "(", "tmp_inter", "==", "2", ")", ".", "view", "(", "C", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "cu_union", "=", "(", "tmp_inter", ">", "0", ")", ".", "view", "(", "C", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "cu_preds", "=", "pred_mask", ".", "view", "(", "C", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "\n", "union", "+=", "cu_union", "\n", "inter", "+=", "cu_inter", "\n", "preds", "+=", "cu_preds", "\n", "\n", "", "iou", "=", "inter", "/", "union", "\n", "acc", "=", "inter", "/", "preds", "\n", "mIoU", "=", "iou", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "mAcc", "=", "acc", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "print_iou", "(", "iou", ",", "acc", ",", "mIoU", ",", "mAcc", ")", "\n", "return", "iou", ",", "mIoU", ",", "acc", ",", "mAcc", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.None.eval.main": [[82, 122], ["eval.get_arguments", "easydict.EasyDict", "utils.logger.Logger", "numpy.zeros", "range", "open", "yaml.load", "FCN8s().cuda.load_state_dict", "FCN8s().cuda.eval().cuda", "dataset.dataset.init_test_dataset", "eval.compute_iou", "os.join", "os.join", "model.DeeplabV2.Res_Deeplab", "FCN8s().cuda.load_state_dict", "FCN8s().cuda.eval().cuda", "dataset.dataset.init_test_dataset", "eval.compute_iou", "print", "model.DeeplabV2.Res_Deeplab", "FCN8s().cuda", "torch.load", "torch.load", "torch.load", "torch.load", "FCN8s().cuda.eval", "FCN8s().cuda.eval", "FCN8s"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.None.eval.get_arguments", "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.dataset.init_test_dataset", "home.repos.pwc.inspect_result.fumyou13_ldbe.None.eval.compute_iou", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.Res_Deeplab", "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.dataset.init_test_dataset", "home.repos.pwc.inspect_result.fumyou13_ldbe.None.eval.compute_iou", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.Res_Deeplab"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_arguments", "(", ")", "\n", "with", "open", "(", "'./config/config.yml'", ")", "as", "f", ":", "\n", "        ", "cfg", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "cfg", "=", "edict", "(", "cfg", ")", "\n", "cfg", ".", "num_classes", "=", "args", ".", "num_classes", "\n", "if", "args", ".", "single", ":", "\n", "#from model.fuse_deeplabv2 import Res_Deeplab", "\n", "        ", "if", "args", ".", "model", "==", "'deeplab'", ":", "\n", "            ", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "FCN8s", "(", "num_classes", "=", "args", ".", "num_classes", ")", ".", "cuda", "(", ")", "\n", "\n", "#model = nn.DataParallel(model)", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "frm", ",", "map_location", "=", "'cuda:0'", ")", ")", "\n", "model", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "testloader", "=", "init_test_dataset", "(", "cfg", ",", "args", ".", "dataset", ",", "set", "=", "'val'", ")", "\n", "iou", ",", "mIoU", ",", "acc", ",", "mAcc", "=", "compute_iou", "(", "model", ",", "testloader", ",", "args", ")", "\n", "return", "\n", "\n", "", "sys", ".", "stdout", "=", "Logger", "(", "osp", ".", "join", "(", "cfg", "[", "'result'", "]", ",", "args", ".", "frm", "+", "'.txt'", ")", ")", "\n", "\n", "best_miou", "=", "0.0", "\n", "best_iter", "=", "0", "\n", "best_iou", "=", "np", ".", "zeros", "(", "(", "args", ".", "num_classes", ",", "1", ")", ")", "\n", "\n", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "start", ",", "25", ")", ":", "\n", "        ", "model_path", "=", "osp", ".", "join", "(", "cfg", "[", "'snapshot'", "]", ",", "args", ".", "frm", ",", "'GTA5_{0:d}.pth'", ".", "format", "(", "i", "*", "2000", ")", ")", "# './snapshots/GTA2Cityscapes/source_only/GTA5_{0:d}.pth'.format(i*2000)", "\n", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "#model = nn.DataParallel(model)", "\n", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "model", ".", "eval", "(", ")", ".", "cuda", "(", ")", "\n", "testloader", "=", "init_test_dataset", "(", "cfg", ",", "args", ".", "dataset", ",", "set", "=", "'val'", ")", "\n", "\n", "iou", ",", "mIoU", ",", "acc", ",", "mAcc", "=", "compute_iou", "(", "model", ",", "testloader", ",", "args", ")", "\n", "\n", "print", "(", "'Iter {}  finished, mIoU is {:.2%}'", ".", "format", "(", "i", "*", "2000", ",", "mIoU", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.easy_dic": [[11, 17], ["easydict.EasyDict", "easydict.EasyDict.items", "isinstance", "easydict.EasyDict"], "function", ["None"], ["def", "easy_dic", "(", "dic", ")", ":", "\n", "    ", "dic", "=", "edict", "(", "dic", ")", "\n", "for", "key", ",", "value", "in", "dic", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "dic", "[", "key", "]", "=", "edict", "(", "value", ")", "\n", "", "", "return", "dic", "\n", "", "def", "show_config", "(", "config", ",", "sub", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.show_config": [[17, 26], ["config.items", "isinstance"], "function", ["None"], ["", "def", "show_config", "(", "config", ",", "sub", "=", "False", ")", ":", "\n", "    ", "msg", "=", "''", "\n", "for", "key", ",", "value", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "continue", "\n", "#            msg += show_config(value, sub=True)", "\n", "", "else", ":", "\n", "            ", "msg", "+=", "'{:>25} : {:<15}\\n'", ".", "format", "(", "key", ",", "value", ")", "\n", "", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.type_align": [[27, 38], ["isinstance", "int", "isinstance", "float", "isinstance", "isinstance", "bool", "print", "type"], "function", ["None"], ["", "def", "type_align", "(", "source", ",", "target", ")", ":", "\n", "    ", "if", "isinstance", "(", "source", ",", "int", ")", ":", "\n", "        ", "return", "int", "(", "target", ")", "\n", "", "elif", "isinstance", "(", "source", ",", "float", ")", ":", "\n", "        ", "return", "float", "(", "target", ")", "\n", "", "elif", "isinstance", "(", "source", ",", "str", ")", ":", "\n", "        ", "return", "target", "\n", "", "elif", "isinstance", "(", "source", ",", "bool", ")", ":", "\n", "        ", "return", "bool", "(", "source", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unsupported type: {}\"", ".", "format", "(", "type", "(", "source", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.config_parser": [[39, 49], ["print", "init_config.type_align", "arg.split"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.type_align"], ["", "", "def", "config_parser", "(", "config", ",", "args", ")", ":", "\n", "    ", "print", "(", "args", ")", "\n", "for", "arg", "in", "args", ":", "\n", "        ", "if", "'='", "not", "in", "arg", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "key", ",", "value", "=", "arg", ".", "split", "(", "'='", ")", "\n", "", "value", "=", "type_align", "(", "config", "[", "key", "]", ",", "value", ")", "\n", "config", "[", "key", "]", "=", "value", "\n", "", "return", "config", "\n", "", "def", "is_cluster", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.is_cluster": [[49, 52], ["platform.uname"], "function", ["None"], ["", "def", "is_cluster", "(", ")", ":", "\n", "    ", "machine", "=", "platform", ".", "uname", "(", ")", "[", "1", "]", "\n", "return", "machine", "!=", "'UTS2'", "\n", "", "def", "rep_path", "(", "d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.rep_path": [[52, 62], ["d.items", "isinstance", "isinstance", "v.replace", "v.replace", "init_config.rep_path"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.rep_path"], ["", "def", "rep_path", "(", "d", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "            ", "if", "'guangrui'", "in", "v", ":", "\n", "                ", "d", "[", "k", "]", "=", "v", ".", "replace", "(", "'guangrui/data'", ",", "'guangrli/Data'", ")", "\n", "", "else", ":", "\n", "                ", "d", "[", "k", "]", "=", "v", ".", "replace", "(", "'./snapshot'", ",", "'../Data/snapshot'", ")", "\n", "", "", "elif", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "d", "[", "k", "]", "=", "rep_path", "(", "d", "[", "k", "]", ")", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.init_config": [[63, 89], ["f.close", "init_config.easy_dic", "init_config.config_parser", "init_config.is_cluster", "osp.join", "utils.flatwhite.mkdir", "print", "init_config.show_config", "print", "open", "yaml.load", "init_config.rep_path", "osp.join", "utils.flatwhite.mkdir", "torch.utils.tensorboard.SummaryWriter", "torch.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.easy_dic", "home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.config_parser", "home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.is_cluster", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.flatwhite.mkdir", "home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.show_config", "home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.rep_path", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.flatwhite.mkdir"], ["", "def", "init_config", "(", "config_path", ",", "argvs", ")", ":", "\n", "    ", "with", "open", "(", "config_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "config", "=", "easy_dic", "(", "config", ")", "\n", "config", "=", "config_parser", "(", "config", ",", "argvs", ")", "\n", "if", "is_cluster", "(", ")", ":", "\n", "        ", "config", "=", "rep_path", "(", "config", ")", "\n", "", "config", ".", "snapshot", "=", "osp", ".", "join", "(", "config", ".", "snapshot", ",", "config", ".", "note", ")", "\n", "mkdir", "(", "config", ".", "snapshot", ")", "\n", "print", "(", "'Snapshot stored in: {}'", ".", "format", "(", "config", ".", "snapshot", ")", ")", "\n", "if", "config", ".", "tensorboard", ":", "\n", "        ", "config", ".", "tb", "=", "osp", ".", "join", "(", "config", ".", "log", ",", "config", ".", "note", ")", "\n", "mkdir", "(", "config", ".", "tb", ")", "\n", "writer", "=", "SummaryWriter", "(", "config", ".", "tb", ")", "\n", "", "else", ":", "\n", "        ", "writer", "=", "None", "\n", "", "if", "config", ".", "fix_seed", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "1234", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1234", ")", "\n", "np", ".", "random", ".", "seed", "(", "1234", ")", "\n", "random", ".", "seed", "(", "1234", ")", "\n", "", "message", "=", "show_config", "(", "config", ")", "\n", "print", "(", "message", ")", "\n", "return", "config", ",", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.None.run.main": [[18, 37], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "numpy.random.seed", "random.seed", "init_config.init_config", "model.model_builder.init_model", "print", "trainer.ldbe_trainer.Trainer", "trainer.ldbe_trainer.Trainer.train"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.None.init_config.init_config", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.model_builder.init_model", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.train"], ["def", "main", "(", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "1234", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1234", ")", "\n", "np", ".", "random", ".", "seed", "(", "1234", ")", "\n", "random", ".", "seed", "(", "1234", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "config", ",", "writer", "=", "init_config", "(", "\"config/ldbe_config.yml\"", ",", "sys", ".", "argv", ")", "\n", "\n", "\n", "\n", "model_stu", "=", "init_model", "(", "config", ")", "\n", "# model = nn.DataParallel(model)", "\n", "print", "(", "\"start\"", ")", "\n", "trainer", "=", "Trainer", "(", "model_stu", ",", "config", ",", "writer", ")", "\n", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.label_broadcast.label_broadcast": [[5, 28], ["label_map.clone", "torch.zeros().cuda", "torch.zeros().cuda", "new_label[].clone", "new_label[].clone", "new_label[].clone", "new_label[].clone", "torch.Softmax", "torch.zeros().cuda.squeeze().detach", "torch.zeros", "torch.zeros", "target.unsqueeze", "torch.zeros().cuda.squeeze"], "function", ["None"], ["def", "label_broadcast", "(", "label_map", ",", "target", ")", ":", "\n", "# label_map is the prediction output through softmax operation", "\n", "    ", "N", ",", "C", ",", "W", ",", "H", "=", "label_map", ".", "shape", "\n", "# label_map = label_map.softmax(dim=1)", "\n", "new_label", "=", "label_map", ".", "clone", "(", ")", "\n", "mask", "=", "(", "target", ".", "unsqueeze", "(", "1", ")", "!=", "255", ")", ".", "detach", "(", ")", "\n", "new_mask", "=", "torch", ".", "zeros", "(", "(", "N", ",", "1", ",", "W", ",", "H", ")", ")", ".", "cuda", "(", ")", "\n", "left", "=", "label_map", "[", ":", ",", ":", ",", "0", ":", "W", "-", "1", ",", ":", "]", "*", "mask", "[", ":", ",", ":", ",", "0", ":", "W", "-", "1", ",", ":", "]", "\n", "right", "=", "label_map", "[", ":", ",", ":", ",", "1", ":", "W", ",", ":", "]", "*", "mask", "[", ":", ",", ":", ",", "1", ":", "W", ",", ":", "]", "\n", "up", "=", "label_map", "[", ":", ",", ":", ",", ":", ",", "0", ":", "H", "-", "1", "]", "*", "mask", "[", ":", ",", ":", ",", ":", ",", "0", ":", "H", "-", "1", "]", "\n", "down", "=", "label_map", "[", ":", ",", ":", ",", ":", ",", "1", ":", "H", "]", "*", "mask", "[", ":", ",", ":", ",", ":", ",", "1", ":", "H", "]", "\n", "new_label", "[", ":", ",", ":", ",", "1", ":", "W", ",", ":", "]", "=", "new_label", "[", ":", ",", ":", ",", "1", ":", "W", ",", ":", "]", ".", "clone", "(", ")", "+", "left", "\n", "new_label", "[", ":", ",", ":", ",", "0", ":", "W", "-", "1", "]", "=", "new_label", "[", ":", ",", ":", ",", "0", ":", "W", "-", "1", "]", ".", "clone", "(", ")", "+", "right", "\n", "new_label", "[", ":", ",", ":", ",", ":", ",", "1", ":", "H", "]", "=", "new_label", "[", ":", ",", ":", ",", ":", ",", "1", ":", "H", "]", ".", "clone", "(", ")", "+", "down", "\n", "new_label", "[", ":", ",", ":", ",", ":", ",", "0", ":", "H", "-", "1", "]", "=", "new_label", "[", ":", ",", ":", ",", ":", ",", "0", ":", "H", "-", "1", "]", ".", "clone", "(", ")", "+", "up", "\n", "new_label", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "new_label", ")", "\n", "\n", "new_mask", "[", ":", ",", ":", ",", "1", ":", "W", ",", ":", "]", "+=", "mask", "[", ":", ",", ":", ",", "0", ":", "W", "-", "1", ",", ":", "]", "\n", "new_mask", "[", ":", ",", ":", ",", "0", ":", "W", "-", "1", "]", "+=", "mask", "[", ":", ",", ":", ",", "1", ":", "W", ",", ":", "]", "\n", "new_mask", "[", ":", ",", ":", ",", ":", ",", "1", ":", "H", "]", "+=", "mask", "[", ":", ",", ":", ",", ":", ",", "0", ":", "H", "-", "1", "]", "\n", "new_mask", "[", ":", ",", ":", ",", ":", ",", "0", ":", "H", "-", "1", "]", "+=", "mask", "[", ":", ",", ":", ",", ":", ",", "1", ":", "H", "]", "\n", "new_mask", "=", "new_mask", ">=", "1", "\n", "return", "new_label", ",", "new_mask", ".", "squeeze", "(", ")", ".", "detach", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.pool.Pool.__init__": [[9, 16], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_cls", "=", "19", ",", "alpha", "=", "0.1", ",", "T", "=", "2", ")", ":", "\n", "        ", "super", "(", "Pool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_cls", "=", "num_cls", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "pool", "=", "{", "}", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "cnts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.pool.Pool.update": [[17, 25], ["vecs.items", "float"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "vecs", ",", "cnts", ")", ":", "\n", "        ", "for", "key", ",", "vec", "in", "vecs", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "pool", ":", "\n", "                ", "self", ".", "pool", "[", "key", "]", "=", "vec", "\n", "self", ".", "cnts", "[", "key", "]", "=", "cnts", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "past_cnt", "=", "self", ".", "cnts", "[", "key", "]", "\n", "self", ".", "pool", "[", "key", "]", "=", "(", "self", ".", "pool", "[", "key", "]", "*", "past_cnt", "+", "vec", "*", "cnts", "[", "key", "]", ")", "/", "float", "(", "past_cnt", "+", "cnts", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.pool.Pool.get_mean": [[27, 50], ["torch.softmax", "torch.softmax", "torch.softmax", "range", "torch.softmax.dim", "torch.softmax.argmax().squeeze", "cls_mask.sum().float", "torch.softmax.permute", "tmp_p.sum", "torch.softmax.argmax", "cls_mask.sum"], "methods", ["None"], ["", "", "", "def", "get_mean", "(", "self", ",", "P", ",", "label", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "assert", "P", ".", "dim", "(", ")", "==", "4", "\n", "P", "=", "F", ".", "softmax", "(", "P", "/", "self", ".", "T", ",", "dim", "=", "1", ")", "\n", "if", "label", "is", "None", ":", "\n", "            ", "label", "=", "P", ".", "argmax", "(", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "_", ",", "C", ",", "H", ",", "W", "=", "P", ".", "shape", "\n", "\n", "mean_vec", "=", "{", "}", "\n", "mean_cnt", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_cls", ")", ":", "\n", "            ", "cls_mask", "=", "(", "label", "==", "i", ")", ".", "float", "(", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "cls_mask", "=", "(", "mask", "*", "cls_mask", ")", ".", "float", "(", ")", "\n", "\n", "", "num", "=", "cls_mask", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "if", "num", "==", "0", ":", "\n", "                ", "continue", "\n", "", "tmp_p", "=", "cls_mask", "*", "P", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "vec", "=", "tmp_p", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "/", "num", "\n", "mean_vec", "[", "i", "]", "=", "vec", "\n", "mean_cnt", "[", "i", "]", "=", "num", "\n", "", "return", "mean_vec", ",", "mean_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.pool.Pool.update_pool": [[52, 55], ["pool.Pool.get_mean", "pool.Pool.update"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.utils.pool.Pool.get_mean", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.EMA.update"], ["", "def", "update_pool", "(", "self", ",", "P", ",", "mask", "=", "None", ")", ":", "\n", "        ", "mean_vec", ",", "mean_cnt", "=", "self", ".", "get_mean", "(", "P", ",", "mask", "=", "mask", ")", "\n", "self", ".", "update", "(", "mean_vec", ",", "mean_cnt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.shot.obtain_label": [[6, 61], ["torch.sum", "torch.sum", "torch.sum", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "feas.float().cpu.float().cpu().numpy", "outputs.float().cpu.size", "outputs.float().cpu.float().cpu().numpy", "all_output.float().cpu().numpy.transpose().dot", "[].sum", "numpy.where", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist.argmin", "range", "dd.argmin.astype", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net.get_features", "torch.interpolate", "outputs.permute().contiguous().view.permute().contiguous().view", "feas.permute().contiguous().view.permute().contiguous().view", "feas.permute().contiguous().view.float().cpu", "outputs.permute().contiguous().view.float().cpu", "torch.Softmax", "all_output.float().cpu().numpy.transpose().dot", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist.argmin", "torch.log", "torch.log", "torch.log", "numpy.log", "torch.ones", "torch.ones", "torch.ones", "feas.float().cpu.float().cpu", "outputs.float().cpu.float().cpu", "all_output.float().cpu().numpy.transpose", "numpy.eye", "outputs.permute().contiguous().view.permute().contiguous", "feas.permute().contiguous().view.permute().contiguous", "feas.permute().contiguous().view.float", "outputs.permute().contiguous().view.float", "feas.float().cpu.size", "feas.float().cpu.t", "torch.norm", "torch.norm", "torch.norm", "all_output.float().cpu().numpy.sum", "numpy.eye", "all_output.float().cpu().numpy.transpose", "feas.float().cpu.float", "outputs.float().cpu.float", "all_output.float().cpu().numpy.sum", "outputs.permute().contiguous().view.permute", "feas.permute().contiguous().view.permute"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.get_features"], ["def", "obtain_label", "(", "outputs", ",", "net", ",", "class_num", ")", ":", "\n", "    ", "start_test", "=", "True", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# inputs = inputs.cuda()", "\n", "# N,C,H,W=outputs.shape()", "\n", "# outputs=net(inputs)", "\n", "        ", "feas", "=", "net", ".", "get_features", "(", ")", "\n", "feas", "=", "F", ".", "interpolate", "(", "feas", ",", "(", "600", ",", "600", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "outputs", "=", "outputs", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "class_num", ")", "\n", "feas", "=", "feas", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "class_num", ")", "\n", "all_fea", "=", "feas", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "all_output", "=", "outputs", ".", "float", "(", ")", ".", "cpu", "(", ")", "\n", "# all_label = labels.float()", "\n", "# start_test = False", "\n", "\n", "", "all_output", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "all_output", ")", "\n", "ent", "=", "torch", ".", "sum", "(", "-", "all_output", "*", "torch", ".", "log", "(", "all_output", "+", "1e-5", ")", ",", "dim", "=", "1", ")", "\n", "unknown_weight", "=", "1", "-", "ent", "/", "np", ".", "log", "(", "class_num", ")", "\n", "_", ",", "predict", "=", "torch", ".", "max", "(", "all_output", ",", "1", ")", "\n", "\n", "# accuracy = torch.sum(torch.squeeze(predict).float() == all_label).item() / float(all_label.size()[0])", "\n", "# if args.distance == 'cosine':", "\n", "all_fea", "=", "torch", ".", "cat", "(", "(", "all_fea", ",", "torch", ".", "ones", "(", "all_fea", ".", "size", "(", "0", ")", ",", "1", ")", ")", ",", "1", ")", "\n", "all_fea", "=", "(", "all_fea", ".", "t", "(", ")", "/", "torch", ".", "norm", "(", "all_fea", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ")", ".", "t", "(", ")", "\n", "\n", "all_fea", "=", "all_fea", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "K", "=", "all_output", ".", "size", "(", "1", ")", "\n", "aff", "=", "all_output", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "initc", "=", "aff", ".", "transpose", "(", ")", ".", "dot", "(", "all_fea", ")", "\n", "initc", "=", "initc", "/", "(", "1e-8", "+", "aff", ".", "sum", "(", "axis", "=", "0", ")", "[", ":", ",", "None", "]", ")", "\n", "cls_count", "=", "np", ".", "eye", "(", "K", ")", "[", "predict", "]", ".", "sum", "(", "axis", "=", "0", ")", "\n", "labelset", "=", "np", ".", "where", "(", "cls_count", ">", "0", ")", "\n", "labelset", "=", "labelset", "[", "0", "]", "\n", "# print(labelset)", "\n", "\n", "dd", "=", "cdist", "(", "all_fea", ",", "initc", "[", "labelset", "]", ",", "'cosine'", ")", "\n", "pred_label", "=", "dd", ".", "argmin", "(", "axis", "=", "1", ")", "\n", "pred_label", "=", "labelset", "[", "pred_label", "]", "\n", "\n", "for", "round", "in", "range", "(", "1", ")", ":", "\n", "        ", "aff", "=", "np", ".", "eye", "(", "K", ")", "[", "pred_label", "]", "\n", "initc", "=", "aff", ".", "transpose", "(", ")", ".", "dot", "(", "all_fea", ")", "\n", "initc", "=", "initc", "/", "(", "1e-8", "+", "aff", ".", "sum", "(", "axis", "=", "0", ")", "[", ":", ",", "None", "]", ")", "\n", "dd", "=", "cdist", "(", "all_fea", ",", "initc", "[", "labelset", "]", ",", "'cosine'", ")", "\n", "pred_label", "=", "dd", ".", "argmin", "(", "axis", "=", "1", ")", "\n", "pred_label", "=", "labelset", "[", "pred_label", "]", "\n", "\n", "# acc = np.sum(pred_label == all_label.float().numpy()) / len(all_fea)", "\n", "# log_str = 'Accuracy = {:.2f}% -> {:.2f}%'.format(accuracy * 100, acc * 100)", "\n", "\n", "# args.out_file.write(log_str + '\\n')", "\n", "# args.out_file.flush()", "\n", "# print(log_str + '\\n')", "\n", "\n", "", "return", "pred_label", ".", "astype", "(", "'int'", ")", "", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.meters.AverageMeter.__init__": [[7, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.meters.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.meters.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", "class", "GroupAverageMeter", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.meters.GroupAverageMeter.__init__": [[27, 32], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "{", "}", "\n", "self", ".", "avg", "=", "{", "}", "\n", "self", ".", "sum", "=", "{", "}", "\n", "self", ".", "count", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.meters.GroupAverageMeter.reset": [[33, 38], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "{", "}", "\n", "self", ".", "avg", "=", "{", "}", "\n", "self", ".", "sum", "=", "{", "}", "\n", "self", ".", "count", "=", "{", "}", "\n", "", "def", "add_key", "(", "self", ",", "key", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.meters.GroupAverageMeter.add_key": [[38, 43], ["None"], "methods", ["None"], ["", "def", "add_key", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "val", "[", "key", "]", "=", "0", "\n", "self", ".", "avg", "[", "key", "]", "=", "0", "\n", "self", ".", "sum", "[", "key", "]", "=", "0", "\n", "self", ".", "count", "[", "key", "]", "=", "0", "\n", "", "def", "update", "(", "self", ",", "dic", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.meters.GroupAverageMeter.update": [[43, 51], ["dic.items", "meters.GroupAverageMeter.add_key"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.utils.meters.GroupAverageMeter.add_key"], ["", "def", "update", "(", "self", ",", "dic", ")", ":", "\n", "        ", "for", "key", ",", "v", "in", "dic", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "self", ".", "val", ":", "\n", "                ", "self", ".", "add_key", "(", "key", ")", "\n", "", "value", ",", "count", "=", "v", "\n", "self", ".", "sum", "[", "key", "]", "+=", "value", "*", "count", "\n", "self", ".", "count", "[", "key", "]", "+=", "count", "\n", "self", ".", "avg", "[", "key", "]", "=", "self", ".", "sum", "[", "key", "]", "/", "self", ".", "count", "[", "key", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.func.Acc": [[5, 32], ["torch.masked_select.view().squeeze().cuda().float", "torch.masked_select.view().squeeze().cuda().float", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "range", "correct.sum().float", "mask.sum().float", "cls_mask.sum().float().item", "torch.masked_select.view().squeeze().cuda", "torch.masked_select.view().squeeze().cuda", "correct.sum", "mask.sum", "cls_mask.sum().float", "torch.masked_select.view().squeeze", "torch.masked_select.view().squeeze", "cls_mask.sum", "torch.masked_select.view", "torch.masked_select.view"], "function", ["None"], ["def", "Acc", "(", "plabel", ",", "label", ",", "num_cls", "=", "19", ")", ":", "\n", "\n", "    ", "plabel", "=", "plabel", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "label", "=", "label", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "total", "=", "label", ".", "shape", "[", "0", "]", "\n", "mask", "=", "(", "plabel", "!=", "255", ")", "*", "(", "label", "!=", "255", ")", "\n", "\n", "label", "=", "torch", ".", "masked_select", "(", "label", ",", "mask", ")", "\n", "plabel", "=", "torch", ".", "masked_select", "(", "plabel", ",", "mask", ")", "\n", "correct", "=", "label", "==", "plabel", "\n", "acc_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_cls", ")", ":", "\n", "        ", "cls_mask", "=", "plabel", "==", "i", "\n", "cls_total", "=", "cls_mask", ".", "sum", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", "\n", "if", "cls_total", "==", "0", ":", "\n", "            ", "continue", "\n", "", "cls_correct", "=", "(", "cls_mask", "*", "correct", ")", ".", "sum", "(", ")", ".", "float", "(", ")", ".", "item", "(", ")", "\n", "cls_acc", "=", "cls_correct", "/", "cls_total", "\n", "acc_dict", "[", "i", "]", "=", "(", "cls_acc", ",", "cls_total", ")", "\n", "", "correct_cnt", "=", "correct", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "selected", "=", "mask", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "if", "selected", "==", "0", ":", "\n", "        ", "acc", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "acc", "=", "correct_cnt", "/", "selected", "\n", "", "prop", "=", "selected", "/", "total", "\n", "return", "acc", ",", "prop", ",", "acc_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.func.thres_cb_plabel": [[33, 55], ["torch.softmax", "torch.stack().cuda", "torch.stack().cuda", "vec.expand_as.view", "vec.expand_as.expand_as", "torch.gt", "torch.gt", "mask.squeeze.sum().byte", "torch.where", "torch.where", "mask.squeeze.squeeze", "plabel.squeeze.squeeze", "F.softmax.argmax().squeeze", "torch.Tensor", "torch.Tensor", "torch.ones_like", "torch.ones_like", "range", "torch.stack", "torch.stack", "mask.squeeze.sum", "F.softmax.argmax"], "function", ["None"], ["", "def", "thres_cb_plabel", "(", "P", ",", "thres_dic", ",", "num_cls", "=", "19", ",", "label", "=", "None", ")", ":", "\n", "\n", "    ", "n", ",", "c", ",", "h", ",", "w", "=", "P", ".", "shape", "\n", "P", "=", "F", ".", "softmax", "(", "P", ",", "dim", "=", "1", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "P", ".", "shape", "\n", "if", "label", "is", "not", "None", ":", "\n", "        ", "pred_label", "=", "label", "\n", "", "else", ":", "\n", "        ", "pred_label", "=", "P", ".", "argmax", "(", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "", "vec", "=", "[", "torch", ".", "Tensor", "(", "[", "thres_dic", "[", "k", "]", "]", ")", "for", "k", "in", "range", "(", "num_cls", ")", "]", "\n", "vec", "=", "torch", ".", "stack", "(", "vec", ")", ".", "cuda", "(", ")", "\n", "vec", "=", "vec", ".", "view", "(", "1", ",", "c", ",", "1", ",", "1", ")", "\n", "vec", "=", "vec", ".", "expand_as", "(", "P", ")", "\n", "mask", "=", "torch", ".", "gt", "(", "P", ",", "vec", ")", "\n", "mask", "=", "mask", ".", "sum", "(", "dim", "=", "1", ")", ".", "byte", "(", ")", "\n", "ignore", "=", "255", "*", "torch", ".", "ones_like", "(", "pred_label", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "plabel", "=", "torch", ".", "where", "(", "mask", ",", "pred_label", ",", "ignore", ")", "\n", "mask", "=", "mask", ".", "squeeze", "(", ")", "\n", "plabel", "=", "plabel", ".", "squeeze", "(", ")", "\n", "\n", "return", "mask", ",", "plabel", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.func.gene_plabel_prop": [[57, 73], ["float", "torch.softmax", "F.softmax.argmax().squeeze", "[].squeeze", "torch.ones_like", "torch.ones_like", "torch.sort", "torch.sort", "torch.where", "torch.where", "F.softmax.dim", "int", "[].squeeze.view", "F.softmax.argmax", "F.softmax.max"], "function", ["None"], ["", "def", "gene_plabel_prop", "(", "P", ",", "prop", ")", ":", "\n", "    ", "assert", "P", ".", "dim", "(", ")", "==", "4", "\n", "_", ",", "C", ",", "H", ",", "W", "=", "P", ".", "shape", "\n", "total_cnt", "=", "float", "(", "H", "*", "W", ")", "\n", "\n", "P", "=", "F", ".", "softmax", "(", "P", ",", "dim", "=", "1", ")", "\n", "pred_label", "=", "P", ".", "argmax", "(", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "pred_prob", "=", "(", "P", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ")", ".", "squeeze", "(", ")", "\n", "plabel", "=", "torch", ".", "ones_like", "(", "pred_label", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "plabel", "=", "plabel", "*", "255", "\n", "thres_index", "=", "int", "(", "prop", "*", "total_cnt", ")", "-", "1", "\n", "value", ",", "_", "=", "torch", ".", "sort", "(", "pred_prob", ".", "view", "(", "1", ",", "-", "1", ")", ",", "descending", "=", "True", ")", "\n", "thres", "=", "value", "[", "0", ",", "thres_index", "]", "\n", "select_mask", "=", "(", "pred_prob", ">", "thres", ")", ".", "cuda", "(", ")", "\n", "plabel", "=", "torch", ".", "where", "(", "select_mask", ",", "pred_label", ",", "plabel", ")", "\n", "return", "select_mask", ",", "plabel", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.func.mask_fusion": [[75, 89], ["torch.ones_like", "torch.ones_like", "torch.where", "torch.where", "torch.softmax", "F.softmax.argmax().squeeze", "label.squeeze", "F.softmax.argmax"], "function", ["None"], ["", "def", "mask_fusion", "(", "P", ",", "mask1", ",", "mask2", ",", "label", "=", "None", ")", ":", "\n", "    ", "assert", "mask1", ".", "shape", "==", "mask2", ".", "shape", "\n", "mask", "=", "mask1", "+", "mask2", "\n", "_", ",", "C", ",", "H", ",", "W", "=", "P", ".", "shape", "\n", "if", "label", "is", "None", ":", "\n", "        ", "P", "=", "F", ".", "softmax", "(", "P", ",", "dim", "=", "1", ")", "\n", "pred_label", "=", "P", ".", "argmax", "(", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "", "else", ":", "\n", "        ", "pred_label", "=", "label", ".", "squeeze", "(", ")", "\n", "\n", "", "plabel", "=", "torch", ".", "ones_like", "(", "pred_label", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "plabel", "=", "plabel", "*", "255", "\n", "plabel", "=", "torch", ".", "where", "(", "mask", ">", "0", ",", "pred_label", ",", "plabel", ")", "\n", "return", "mask", ",", "plabel", "\n", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.focal_loss.FocalLoss.__init__": [[12, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "2", ",", "alpha", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "# if isinstance(alpha,(float,int,long)): self.alpha = torch.Tensor([alpha,1-alpha])", "\n", "# if isinstance(alpha,list): self.alpha = torch.Tensor(alpha)", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.focal_loss.FocalLoss.forward": [[20, 44], ["target.view.view.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "logpt.view.view.gather", "logpt.view.view.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.transpose", "input.contiguous().view.contiguous().view.contiguous().view", "logpt.view.view.data.exp", "focal_loss.FocalLoss.alpha.gather", "loss.sum", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "focal_loss.FocalLoss.alpha.type", "input.contiguous().view.contiguous().view.data.type", "focal_loss.FocalLoss.alpha.type_as", "target.view.view.data.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# N,C,H,W => N,C,H*W", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "# N,C,H*W => N,H*W,C", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "# N,H*W,C => N*H*W,C", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "mask", "=", "(", "target", "!=", "255", ")", ".", "squeeze", "(", ")", "\n", "input", "=", "input", "[", "mask", "]", "\n", "target", "=", "target", "[", "mask", "]", "\n", "\n", "logpt", "=", "F", ".", "log_softmax", "(", "input", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "target", ")", "\n", "logpt", "=", "logpt", ".", "view", "(", "-", "1", ")", "\n", "pt", "=", "Variable", "(", "logpt", ".", "data", ".", "exp", "(", ")", ")", "\n", "\n", "if", "self", ".", "alpha", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "alpha", ".", "type", "(", ")", "!=", "input", ".", "data", ".", "type", "(", ")", ":", "\n", "                ", "self", ".", "alpha", "=", "self", ".", "alpha", ".", "type_as", "(", "input", ".", "data", ")", "\n", "", "at", "=", "self", ".", "alpha", ".", "gather", "(", "0", ",", "target", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "logpt", "=", "logpt", "*", "Variable", "(", "at", ")", "\n", "\n", "", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "if", "self", ".", "size_average", ":", "return", "loss", "#return loss.mean()", "\n", "else", ":", "return", "loss", ".", "sum", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.kmeans.random_init": [[12, 28], ["dataset.size", "dataset.size", "torch.zeros", "torch.zeros", "range", "indices.to.to", "torch.gather", "indices.to.view().expand", "random.randint", "indices.to.view"], "function", ["None"], ["def", "random_init", "(", "dataset", ",", "num_centers", ")", ":", "\n", "    ", "num_points", "=", "dataset", ".", "size", "(", "0", ")", "\n", "dimension", "=", "dataset", ".", "size", "(", "1", ")", "\n", "used", "=", "torch", ".", "zeros", "(", "num_points", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "indices", "=", "torch", ".", "zeros", "(", "num_centers", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "for", "i", "in", "range", "(", "num_centers", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "cur_id", "=", "random", ".", "randint", "(", "0", ",", "num_points", "-", "1", ")", "\n", "if", "used", "[", "cur_id", "]", ">", "0", ":", "\n", "                ", "continue", "\n", "", "used", "[", "cur_id", "]", "=", "1", "\n", "indices", "[", "i", "]", "=", "cur_id", "\n", "break", "\n", "", "", "indices", "=", "indices", ".", "to", "(", "device_gpu", ")", "\n", "centers", "=", "torch", ".", "gather", "(", "dataset", ",", "0", ",", "indices", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "dimension", ")", ")", "\n", "return", "centers", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.kmeans.compute_codes": [[30, 52], ["dataset.size", "dataset.size", "centers.size", "int", "torch.zeros", "torch.transpose", "torch.sum().view", "range", "min", "torch.sum().view", "torch.mm", "torch.min", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "compute_codes", "(", "dataset", ",", "centers", ")", ":", "\n", "    ", "num_points", "=", "dataset", ".", "size", "(", "0", ")", "\n", "dimension", "=", "dataset", ".", "size", "(", "1", ")", "\n", "num_centers", "=", "centers", ".", "size", "(", "0", ")", "\n", "# 5e8 should vary depending on the free memory on the GPU", "\n", "# Ideally, automatically ;)", "\n", "chunk_size", "=", "int", "(", "5e8", "/", "num_centers", ")", "\n", "codes", "=", "torch", ".", "zeros", "(", "num_points", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device_gpu", ")", "\n", "centers_t", "=", "torch", ".", "transpose", "(", "centers", ",", "0", ",", "1", ")", "\n", "centers_norms", "=", "torch", ".", "sum", "(", "centers", "**", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "num_points", ",", "chunk_size", ")", ":", "\n", "        ", "begin", "=", "i", "\n", "end", "=", "min", "(", "begin", "+", "chunk_size", ",", "num_points", ")", "\n", "dataset_piece", "=", "dataset", "[", "begin", ":", "end", ",", ":", "]", "\n", "dataset_norms", "=", "torch", ".", "sum", "(", "dataset_piece", "**", "2", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "distances", "=", "torch", ".", "mm", "(", "dataset_piece", ",", "centers_t", ")", "\n", "distances", "*=", "-", "2.0", "\n", "distances", "+=", "dataset_norms", "\n", "distances", "+=", "centers_norms", "\n", "_", ",", "min_ind", "=", "torch", ".", "min", "(", "distances", ",", "dim", "=", "1", ")", "\n", "codes", "[", "begin", ":", "end", "]", "=", "min_ind", "\n", "", "return", "codes", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.kmeans.update_centers": [[54, 66], ["dataset.size", "dataset.size", "torch.zeros", "torch.zeros", "torch.zeros.scatter_add_", "torch.where.scatter_add_", "torch.where", "torch.where.view", "codes.view().expand", "torch.ones", "torch.ones", "codes.view"], "function", ["None"], ["", "def", "update_centers", "(", "dataset", ",", "codes", ",", "num_centers", ")", ":", "\n", "    ", "num_points", "=", "dataset", ".", "size", "(", "0", ")", "\n", "dimension", "=", "dataset", ".", "size", "(", "1", ")", "\n", "centers", "=", "torch", ".", "zeros", "(", "num_centers", ",", "dimension", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device_gpu", ")", "\n", "cnt", "=", "torch", ".", "zeros", "(", "num_centers", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device_gpu", ")", "\n", "centers", ".", "scatter_add_", "(", "0", ",", "codes", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "dimension", ")", ",", "dataset", ")", "\n", "cnt", ".", "scatter_add_", "(", "0", ",", "codes", ",", "torch", ".", "ones", "(", "num_points", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device_gpu", ")", ")", "\n", "# Avoiding division by zero", "\n", "# Not necessary if there are no duplicates among the data points", "\n", "cnt", "=", "torch", ".", "where", "(", "cnt", ">", "0.5", ",", "cnt", ",", "torch", ".", "ones", "(", "num_centers", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device_gpu", ")", ")", "\n", "centers", "/=", "cnt", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "centers", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.kmeans.kmeans_cluster": [[67, 94], ["kmeans.random_init", "kmeans.compute_codes", "kmeans.update_centers", "kmeans.compute_codes", "torch.equal", "print"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.utils.kmeans.random_init", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.kmeans.compute_codes", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.kmeans.update_centers", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.kmeans.compute_codes"], ["", "def", "kmeans_cluster", "(", "dataset", ",", "num_centers", ")", ":", "\n", "    ", "centers", "=", "random_init", "(", "dataset", ",", "num_centers", ")", "\n", "codes", "=", "compute_codes", "(", "dataset", ",", "centers", ")", "\n", "num_iterations", "=", "0", "\n", "while", "True", ":", "\n", "#        sys.stdout.write('.')", "\n", "#        sys.stdout.flush()", "\n", "        ", "num_iterations", "+=", "1", "\n", "centers", "=", "update_centers", "(", "dataset", ",", "codes", ",", "num_centers", ")", "\n", "new_codes", "=", "compute_codes", "(", "dataset", ",", "centers", ")", "\n", "# Waiting until the clustering stops updating altogether", "\n", "# This is too strict in practice", "\n", "#print(centers.shape, new_codes.shape)        ", "\n", "if", "torch", ".", "equal", "(", "codes", ",", "new_codes", ")", ":", "\n", "#            sys.stdout.write('\\n')", "\n", "#   print('Converged in %d iterations' % num_iterations)", "\n", "#  print('finished', centers.shape, new_codes.shape)", "\n", "            ", "break", "\n", "", "if", "num_iterations", ">", "100", "and", "centers", ".", "shape", "[", "0", "]", "<", "15", ":", "\n", "            ", "centers", "=", "centers", "[", ":", "num_centers", ",", ":", "]", "\n", "print", "(", "'fail'", ",", "centers", ".", "shape", ",", "new_codes", ".", "shape", ",", "num_iterations", ")", "\n", "break", "\n", "#          return centers[:10, :]", "\n", "#         break", "\n", "", "codes", "=", "new_codes", "\n", "\n", "", "return", "centers", ",", "codes", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.optimize.lr_poly": [[4, 6], ["float"], "function", ["None"], ["def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.optimize.adjust_learning_rate": [[7, 13], ["optimize.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.utils.optimize.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ",", "args", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.flatwhite.print_loss": [[6, 16], ["loss_dict.keys", "isinstance", "result.append", "value.item.item"], "function", ["None"], ["def", "print_loss", "(", "loss_dic", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "for", "key", "in", "loss_dict", ".", "keys", "(", ")", ":", "\n", "        ", "value", "=", "loss_dict", "[", "key", "]", "\n", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "value", "=", "value", ".", "item", "(", ")", "\n", "", "tmp", "=", "\"{} : {:.4f}\"", ".", "format", "(", "key", ",", "value", ")", "\n", "result", ".", "append", "(", "tmp", ")", "\n", "", "result", "=", "'  '", ".", "join", "(", "result", ")", "\n", "return", "result", "\n", "", "def", "mkdir", "(", "p", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.flatwhite.mkdir": [[16, 21], ["os.exists", "os.makedirs", "os.makedirs", "print"], "function", ["None"], ["", "def", "mkdir", "(", "p", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "p", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "p", ")", "\n", "print", "(", "'DIR {} created'", ".", "format", "(", "p", ")", ")", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.flatwhite.pickle_save": [[22, 28], ["open", "pickle.dump", "open.close"], "function", ["None"], ["", "def", "pickle_save", "(", "dic", ",", "path", ")", ":", "\n", "    ", "if", "path", "[", "-", "4", ":", "]", "!=", "'.pkl'", ":", "\n", "        ", "path", "=", "path", "+", "'.pkl'", "\n", "", "files", "=", "open", "(", "path", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "dic", ",", "files", ")", "\n", "files", ".", "close", "(", ")", "\n", "", "def", "pickle_load", "(", "path", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.flatwhite.pickle_load": [[28, 31], ["open", "pickle.load"], "function", ["None"], ["", "def", "pickle_load", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.flatwhite.get_list": [[32, 39], ["open", "f.readlines", "result.append", "item.strip().split", "item.strip"], "function", ["None"], ["", "", "def", "get_list", "(", "path", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "for", "item", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "image", "=", "item", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "result", ".", "append", "(", "image", ")", "\n", "", "", "return", "result", "\n", "", "def", "save_list", "(", "path", ",", "ls", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.flatwhite.save_list": [[39, 47], ["open", "isinstance", "isinstance", "filehandle.write", "ls.items", "filehandle.write", "str", "str", "str"], "function", ["None"], ["", "def", "save_list", "(", "path", ",", "ls", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ")", "as", "filehandle", ":", "\n", "        ", "if", "isinstance", "(", "ls", ",", "list", ")", ":", "\n", "            ", "for", "i", "in", "ls", ":", "\n", "                ", "filehandle", ".", "write", "(", "str", "(", "i", ")", "+", "'\\n'", ")", "\n", "", "", "elif", "isinstance", "(", "ls", ",", "dict", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "ls", ".", "items", "(", ")", ":", "\n", "                ", "filehandle", ".", "write", "(", "str", "(", "k", ")", "+", "' '", "+", "str", "(", "v", ")", "+", "'\\n'", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.Resize.__init__": [[53, 55], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "#(size, size)", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.Resize.__call__": [[56, 63], ["isinstance", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "isinstance", "(", "img", ",", "tuple", ")", ":", "\n", "            ", "img", "=", "img", "[", "0", "]", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "==", "self", ".", "size", "[", "0", "]", "and", "h", "==", "self", ".", "size", "[", "1", "]", ")", ":", "\n", "            ", "return", "img", "\n", "", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.ResizeLabel.__init__": [[69, 71], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "#(size, size)", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.ResizeLabel.__call__": [[72, 79], ["isinstance", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "isinstance", "(", "img", ",", "tuple", ")", ":", "\n", "            ", "img", "=", "img", "[", "0", "]", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "==", "self", ".", "size", "[", "0", "]", "and", "h", "==", "self", ".", "size", "[", "1", "]", ")", ":", "\n", "            ", "return", "img", "\n", "", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.RandomVerticalFlip.__call__": [[81, 85], ["random.random", "img.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.DeNormalize.__init__": [[88, 91], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.DeNormalize.__call__": [[92, 96], ["zip", "t.mul_().add_", "t.mul_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "mul_", "(", "s", ")", ".", "add_", "(", "m", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.MaskToTensor.__call__": [[99, 105], ["isinstance", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "isinstance", "(", "img", ",", "tuple", ")", ":", "\n", "            ", "img", ",", "wei", "=", "img", "\n", "return", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "int32", ")", ")", ".", "long", "(", ")", ",", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "wei", ",", "dtype", "=", "np", ".", "float32", ")", ")", ".", "float", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "int32", ")", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.ResizeHeight.__init__": [[108, 111], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "target_h", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.ResizeHeight.__call__": [[112, 116], ["int", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "target_w", "=", "int", "(", "w", "/", "h", "*", "self", ".", "target_h", ")", "\n", "return", "img", ".", "resize", "(", "(", "target_w", ",", "self", ".", "target_h", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.FreeScale.__init__": [[119, 122], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.FreeScale.__call__": [[123, 125], ["img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.FlipChannels.__call__": [[131, 134], ["PIL.Image.fromarray", "numpy.array", "img.astype"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "img", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "return", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.ToTensor.__call__": [[136, 139], ["torch.from_numpy"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "return", "img", "\n", "", "", "class", "SubMean", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.SubMean.__init__": [[143, 145], ["numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", "=", "np", ".", "array", "(", "(", "104.00698793", ",", "116.66876762", ",", "122.67891434", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.SubMean.__call__": [[145, 151], ["numpy.asarray", "img.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "float32", ")", "\n", "img", "-=", "self", ".", "mean", "\n", "img", "=", "img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "img", "\n", "", "", "class", "CRST_trans", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.CRST_trans.__init__": [[152, 155], ["numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", "=", "np", ".", "array", "(", "(", "0.406", ",", "0.456", ",", "0.485", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "std", "=", "np", ".", "array", "(", "(", "0.225", ",", "0.224", ",", "0.229", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.CRST_trans.__call__": [[155, 163], ["numpy.asarray", "img.transpose.transpose.transpose", "torch.from_numpy", "img.transpose.transpose.copy"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "np", ".", "asarray", "(", "img", ",", "np", ".", "float32", ")", "\n", "img", "=", "img", "/", "255.0", "\n", "img", "-=", "self", ".", "mean", "\n", "img", "=", "img", "/", "self", ".", "std", "\n", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "img", "=", "img", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "torch", ".", "from_numpy", "(", "img", ".", "copy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.RandomGaussianBlur.__call__": [[168, 173], ["skimage.filters.gaussian", "PIL.Image.fromarray", "numpy.array", "skimage.filters.gaussian.astype", "random.random"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "sigma", "=", "0.15", "+", "random", ".", "random", "(", ")", "*", "1.15", "\n", "blurred_img", "=", "gaussian", "(", "np", ".", "array", "(", "img", ")", ",", "sigma", "=", "sigma", ",", "multichannel", "=", "True", ")", "\n", "blurred_img", "*=", "255", "\n", "return", "Image", ".", "fromarray", "(", "blurred_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.RandomBilateralBlur.__call__": [[179, 184], ["random.uniform", "skimage.restoration.denoise_bilateral", "PIL.Image.fromarray", "numpy.array", "skimage.restoration.denoise_bilateral.astype"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "0.05", ",", "0.75", ")", "\n", "blurred_img", "=", "denoise_bilateral", "(", "np", ".", "array", "(", "img", ")", ",", "sigma_spatial", "=", "sigma", ",", "multichannel", "=", "True", ")", "\n", "blurred_img", "*=", "255", "\n", "return", "Image", ".", "fromarray", "(", "blurred_img", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.ColorJitter.__init__": [[298, 303], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "brightness", "=", "0", ",", "contrast", "=", "0", ",", "saturation", "=", "0", ",", "hue", "=", "0", ")", ":", "\n", "        ", "self", ".", "brightness", "=", "brightness", "\n", "self", ".", "contrast", "=", "contrast", "\n", "self", ".", "saturation", "=", "saturation", "\n", "self", ".", "hue", "=", "hue", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.ColorJitter.get_params": [[304, 337], ["numpy.random.shuffle", "torchvision.Compose", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "numpy.random.uniform", "transforms.append", "max", "torchvision.Lambda", "max", "torchvision.Lambda", "max", "torchvision.Lambda", "torchvision.Lambda", "transforms.adjust_brightness", "transforms.adjust_contrast", "transforms.adjust_saturation", "transforms.adjust_hue"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.adjust_brightness", "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.adjust_contrast", "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.adjust_saturation", "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.adjust_hue"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "        ", "\"\"\"Get a randomized transform to be applied on image.\n        Arguments are same as that of __init__.\n        Returns:\n            Transform which randomly adjusts brightness, contrast and\n            saturation in a random order.\n        \"\"\"", "\n", "transforms", "=", "[", "]", "\n", "if", "brightness", ">", "0", ":", "\n", "            ", "brightness_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "brightness", ")", ",", "1", "+", "brightness", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ")", ")", "\n", "\n", "", "if", "contrast", ">", "0", ":", "\n", "            ", "contrast_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "contrast", ")", ",", "1", "+", "contrast", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ")", ")", "\n", "\n", "", "if", "saturation", ">", "0", ":", "\n", "            ", "saturation_factor", "=", "np", ".", "random", ".", "uniform", "(", "max", "(", "0", ",", "1", "-", "saturation", ")", ",", "1", "+", "saturation", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ")", ")", "\n", "\n", "", "if", "hue", ">", "0", ":", "\n", "            ", "hue_factor", "=", "np", ".", "random", ".", "uniform", "(", "-", "hue", ",", "hue", ")", "\n", "transforms", ".", "append", "(", "\n", "torch_tr", ".", "Lambda", "(", "lambda", "img", ":", "adjust_hue", "(", "img", ",", "hue_factor", ")", ")", ")", "\n", "\n", "", "np", ".", "random", ".", "shuffle", "(", "transforms", ")", "\n", "transform", "=", "torch_tr", ".", "Compose", "(", "transforms", ")", "\n", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.ColorJitter.__call__": [[338, 348], ["transforms.ColorJitter.get_params", "transforms.ColorJitter."], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.ColorJitter.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Input image.\n        Returns:\n            PIL Image: Color jittered image.\n        \"\"\"", "\n", "transform", "=", "self", ".", "get_params", "(", "self", ".", "brightness", ",", "self", ".", "contrast", ",", "\n", "self", ".", "saturation", ",", "self", ".", "hue", ")", "\n", "return", "transform", "(", "img", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms._is_pil_image": [[185, 190], ["isinstance", "isinstance"], "function", ["None"], ["", "", "def", "_is_pil_image", "(", "img", ")", ":", "\n", "    ", "if", "accimage", "is", "not", "None", ":", "\n", "        ", "return", "isinstance", "(", "img", ",", "(", "Image", ".", "Image", ",", "accimage", ".", "Image", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.adjust_brightness": [[192, 208], ["PIL.ImageEnhance.Brightness", "ImageEnhance.Brightness.enhance", "transforms._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms._is_pil_image"], ["", "", "def", "adjust_brightness", "(", "img", ",", "brightness_factor", ")", ":", "\n", "    ", "\"\"\"Adjust brightness of an Image.\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        brightness_factor (float):  How much to adjust the brightness. Can be\n            any non negative number. 0 gives a black image, 1 gives the\n            original image while 2 increases the brightness by a factor of 2.\n    Returns:\n        PIL Image: Brightness adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Brightness", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "brightness_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.adjust_contrast": [[210, 226], ["PIL.ImageEnhance.Contrast", "ImageEnhance.Contrast.enhance", "transforms._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms._is_pil_image"], ["", "def", "adjust_contrast", "(", "img", ",", "contrast_factor", ")", ":", "\n", "    ", "\"\"\"Adjust contrast of an Image.\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        contrast_factor (float): How much to adjust the contrast. Can be any\n            non negative number. 0 gives a solid gray image, 1 gives the\n            original image while 2 increases the contrast by a factor of 2.\n    Returns:\n        PIL Image: Contrast adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Contrast", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "contrast_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.adjust_saturation": [[228, 244], ["PIL.ImageEnhance.Color", "ImageEnhance.Color.enhance", "transforms._is_pil_image", "TypeError", "type"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms._is_pil_image"], ["", "def", "adjust_saturation", "(", "img", ",", "saturation_factor", ")", ":", "\n", "    ", "\"\"\"Adjust color saturation of an image.\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        saturation_factor (float):  How much to adjust the saturation. 0 will\n            give a black and white image, 1 will give the original image while\n            2 will enhance the saturation by a factor of 2.\n    Returns:\n        PIL Image: Saturation adjusted image.\n    \"\"\"", "\n", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "enhancer", "=", "ImageEnhance", ".", "Color", "(", "img", ")", "\n", "img", "=", "enhancer", ".", "enhance", "(", "saturation_factor", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms.adjust_hue": [[246, 284], ["Image.merge().convert.convert().split", "numpy.array", "PIL.Image.fromarray", "PIL.Image.merge().convert", "ValueError", "transforms._is_pil_image", "TypeError", "numpy.errstate", "numpy.uint8", "Image.merge().convert.convert", "PIL.Image.merge", "type"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.transforms._is_pil_image"], ["", "def", "adjust_hue", "(", "img", ",", "hue_factor", ")", ":", "\n", "    ", "\"\"\"Adjust hue of an image.\n    The image hue is adjusted by converting the image to HSV and\n    cyclically shifting the intensities in the hue channel (H).\n    The image is then converted back to original image mode.\n    `hue_factor` is the amount of shift in H channel and must be in the\n    interval `[-0.5, 0.5]`.\n    See https://en.wikipedia.org/wiki/Hue for more details on Hue.\n    Args:\n        img (PIL Image): PIL Image to be adjusted.\n        hue_factor (float):  How much to shift the hue channel. Should be in\n            [-0.5, 0.5]. 0.5 and -0.5 give complete reversal of hue channel in\n            HSV space in positive and negative direction respectively.\n            0 means no shift. Therefore, both -0.5 and 0.5 will give an image\n            with complementary colors while 0 gives the original image.\n    Returns:\n        PIL Image: Hue adjusted image.\n    \"\"\"", "\n", "if", "not", "(", "-", "0.5", "<=", "hue_factor", "<=", "0.5", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'hue_factor is not in [-0.5, 0.5].'", ".", "format", "(", "hue_factor", ")", ")", "\n", "\n", "", "if", "not", "_is_pil_image", "(", "img", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'img should be PIL Image. Got {}'", ".", "format", "(", "type", "(", "img", ")", ")", ")", "\n", "\n", "", "input_mode", "=", "img", ".", "mode", "\n", "if", "input_mode", "in", "{", "'L'", ",", "'1'", ",", "'I'", ",", "'F'", "}", ":", "\n", "        ", "return", "img", "\n", "\n", "", "h", ",", "s", ",", "v", "=", "img", ".", "convert", "(", "'HSV'", ")", ".", "split", "(", ")", "\n", "\n", "np_h", "=", "np", ".", "array", "(", "h", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "# uint8 addition take cares of rotation across boundaries", "\n", "with", "np", ".", "errstate", "(", "over", "=", "'ignore'", ")", ":", "\n", "        ", "np_h", "+=", "np", ".", "uint8", "(", "hue_factor", "*", "255", ")", "\n", "", "h", "=", "Image", ".", "fromarray", "(", "np_h", ",", "'L'", ")", "\n", "\n", "img", "=", "Image", ".", "merge", "(", "'HSV'", ",", "(", "h", ",", "s", ",", "v", ")", ")", ".", "convert", "(", "input_mode", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.Compose.__init__": [[37, 39], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.Compose.__call__": [[40, 49], ["t", "t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "centroid", ")", ":", "\n", "#print(img.size, mask.size)", "\n", "#        assert img.size == mask.size", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "if", "t", ".", "__class__", ".", "__name__", "==", "'RandomSizeAndCrop'", ":", "\n", "                ", "img", ",", "mask", "=", "t", "(", "img", ",", "mask", ",", "centroid", ")", "\n", "", "else", ":", "\n", "                ", "img", ",", "mask", "=", "t", "(", "img", ",", "mask", ")", "\n", "", "", "return", "img", ",", "mask", "\n", "", "", "class", "RandomCropRec", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.RandomCropRec.__init__": [[50, 52], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.RandomCropRec.__call__": [[53, 69], ["img.resize.resize.crop", "mask.resize.resize.crop", "img.resize.resize.resize", "mask.resize.resize.resize", "int", "int", "int", "int", "random.random", "random.random", "int", "int", "float", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "W", ",", "H", "=", "self", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "W", ",", "H", ")", "==", "(", "w", ",", "h", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", "<", "W", "or", "h", "<", "H", ":", "\n", "            ", "scale", "=", "float", "(", "W", ")", "/", "w", "if", "w", "<", "h", "else", "float", "(", "H", ")", "/", "h", "\n", "w", ",", "h", "=", "int", "(", "scale", "*", "w", "+", "1", ")", ",", "int", "(", "scale", "*", "h", "+", "1", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "sw", ",", "sh", "=", "random", ".", "random", "(", ")", "*", "(", "w", "-", "W", ")", ",", "random", ".", "random", "(", ")", "*", "(", "h", "-", "H", ")", "\n", "crop", "=", "int", "(", "sw", ")", ",", "int", "(", "sh", ")", ",", "int", "(", "sw", ")", "+", "W", ",", "int", "(", "sh", ")", "+", "H", "\n", "img", "=", "img", ".", "crop", "(", "crop", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "crop", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.RandomCrop.__init__": [[81, 89], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "ignore_index", "=", "255", ",", "nopad", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "nopad", "=", "nopad", "\n", "self", ".", "pad_color", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.RandomCrop.__call__": [[90, 153], ["isinstance", "random.randint", "min", "random.randint", "min", "min", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "max", "max", "random.randint", "random.randint", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "weight.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "centroid", "=", "None", ")", ":", "\n", "#  assert img.size == mask.size", "\n", "\n", "        ", "if", "isinstance", "(", "mask", ",", "tuple", ")", ":", "\n", "            ", "mask", ",", "weight", "=", "mask", "\n", "", "else", ":", "\n", "            ", "weight", "=", "None", "\n", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "# ASSUME H, W", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "if", "weight", "is", "None", ":", "\n", "                ", "return", "img", ",", "mask", "\n", "", "else", ":", "\n", "                ", "return", "img", ",", "(", "mask", ",", "weight", ")", "\n", "\n", "", "", "if", "self", ".", "nopad", ":", "\n", "            ", "if", "th", ">", "h", "or", "tw", ">", "w", ":", "\n", "# Instead of padding, adjust crop size to the shorter edge of image.", "\n", "                ", "shorter_side", "=", "min", "(", "w", ",", "h", ")", "\n", "th", ",", "tw", "=", "shorter_side", ",", "shorter_side", "\n", "", "", "else", ":", "\n", "# Check if we need to pad img to fit for crop_size.", "\n", "            ", "if", "th", ">", "h", ":", "\n", "                ", "pad_h", "=", "(", "th", "-", "h", ")", "//", "2", "+", "1", "\n", "", "else", ":", "\n", "                ", "pad_h", "=", "0", "\n", "", "if", "tw", ">", "w", ":", "\n", "                ", "pad_w", "=", "(", "tw", "-", "w", ")", "//", "2", "+", "1", "\n", "", "else", ":", "\n", "                ", "pad_w", "=", "0", "\n", "", "border", "=", "(", "pad_w", ",", "pad_h", ",", "pad_w", ",", "pad_h", ")", "\n", "if", "pad_h", "or", "pad_w", ":", "\n", "                ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "border", ",", "fill", "=", "self", ".", "pad_color", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "border", ",", "fill", "=", "self", ".", "ignore_index", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "", "", "if", "centroid", "is", "not", "None", ":", "\n", "# Need to insure that centroid is covered by crop and that crop", "\n", "# sits fully within the image", "\n", "            ", "c_x", ",", "c_y", "=", "centroid", "\n", "max_x", "=", "w", "-", "tw", "\n", "max_y", "=", "h", "-", "th", "\n", "x1", "=", "random", ".", "randint", "(", "c_x", "-", "tw", ",", "c_x", ")", "\n", "x1", "=", "min", "(", "max_x", ",", "max", "(", "0", ",", "x1", ")", ")", "\n", "y1", "=", "random", ".", "randint", "(", "c_y", "-", "th", ",", "c_y", ")", "\n", "y1", "=", "min", "(", "max_y", ",", "max", "(", "0", ",", "y1", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "w", "==", "tw", ":", "\n", "                ", "x1", "=", "0", "\n", "", "else", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "", "if", "h", "==", "th", ":", "\n", "                ", "y1", "=", "0", "\n", "", "else", ":", "\n", "                ", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "", "", "if", "weight", "is", "not", "None", ":", "\n", "            ", "img", ",", "mask", ",", "weight", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "weight", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "return", "img", ",", "(", "mask", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.ResizeHeight.__init__": [[156, 159], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ":", "\n", "        ", "self", ".", "target_h", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.ResizeHeight.__call__": [[160, 171], ["isinstance", "int", "int", "img.resize", "img.resize", "mask.resize", "mask.resize", "weight.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "isinstance", "(", "mask", ",", "tuple", ")", ":", "\n", "            ", "mask", ",", "weight", "=", "mask", "\n", "target_w", "=", "int", "(", "w", "/", "h", "*", "self", ".", "target_h", ")", "\n", "return", "(", "img", ".", "resize", "(", "(", "target_w", ",", "self", ".", "target_h", ")", ",", "self", ".", "interpolation", ")", ",", "\n", "(", "mask", ".", "resize", "(", "(", "target_w", ",", "self", ".", "target_h", ")", ",", "Image", ".", "NEAREST", ")", ",", "weight", ".", "resize", "(", "(", "target_w", ",", "self", ".", "target_h", ")", ",", "Image", ".", "NEAREST", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "target_w", "=", "int", "(", "w", "/", "h", "*", "self", ".", "target_h", ")", "\n", "return", "(", "img", ".", "resize", "(", "(", "target_w", ",", "self", ".", "target_h", ")", ",", "self", ".", "interpolation", ")", ",", "\n", "mask", ".", "resize", "(", "(", "target_w", ",", "self", ".", "target_h", ")", ",", "Image", ".", "NEAREST", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.CenterCrop.__init__": [[173, 178], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.CenterCrop.__call__": [[179, 186], ["int", "int", "round", "round", "img.crop", "mask.crop"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.CenterCropPad.__init__": [[189, 195], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "ignore_index", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.CenterCropPad.__call__": [[196, 224], ["isinstance", "int", "int", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "round", "round", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "tuple", ")", ":", "\n", "                ", "tw", ",", "th", "=", "self", ".", "size", "[", "0", "]", ",", "self", ".", "size", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "th", ",", "tw", "=", "self", ".", "size", ",", "self", ".", "size", "\n", "\n", "\n", "", "if", "w", "<", "tw", ":", "\n", "            ", "pad_x", "=", "tw", "-", "w", "\n", "", "else", ":", "\n", "            ", "pad_x", "=", "0", "\n", "", "if", "h", "<", "th", ":", "\n", "            ", "pad_y", "=", "th", "-", "h", "\n", "", "else", ":", "\n", "            ", "pad_y", "=", "0", "\n", "\n", "", "if", "pad_x", "or", "pad_y", ":", "\n", "# left, top, right, bottom", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "pad_x", ",", "pad_y", ",", "pad_x", ",", "pad_y", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "pad_x", ",", "pad_y", ",", "pad_x", ",", "pad_y", ")", ",", "\n", "fill", "=", "self", ".", "ignore_index", ")", "\n", "\n", "", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.PadImage.__init__": [[228, 231], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "ignore_index", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.PadImage.__call__": [[233, 251], ["PIL.ImageOps.expand", "PIL.ImageOps.expand", "int", "float", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "float", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", ",", "self", ".", "size", "\n", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "if", "w", ">", "tw", "or", "h", ">", "th", ":", "\n", "            ", "wpercent", "=", "(", "tw", "/", "float", "(", "w", ")", ")", "\n", "target_h", "=", "int", "(", "(", "float", "(", "img", ".", "size", "[", "1", "]", ")", "*", "float", "(", "wpercent", ")", ")", ")", "\n", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "tw", ",", "target_h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "tw", ",", "target_h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "##Pad", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "(", "0", ",", "0", ",", "tw", "-", "w", ",", "th", "-", "h", ")", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "(", "0", ",", "0", ",", "tw", "-", "w", ",", "th", "-", "h", ")", ",", "fill", "=", "self", ".", "ignore_index", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.RandomHorizontallyFlip.__call__": [[253, 268], ["isinstance", "random.random", "random.random", "img.transpose", "mask.transpose", "img.transpose", "mask.transpose", "weight.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "isinstance", "(", "mask", ",", "tuple", ")", ":", "\n", "            ", "mask", ",", "weight", "=", "mask", "\n", "", "else", ":", "\n", "            ", "weight", "=", "None", "\n", "\n", "", "if", "weight", "is", "None", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "mask", ".", "transpose", "(", "\n", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", ",", "mask", "\n", "", "else", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "(", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "weight", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ")", "\n", "", "return", "img", ",", "(", "mask", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.FreeScale.__init__": [[272, 274], ["tuple", "reversed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "reversed", "(", "size", ")", ")", "# size: (h, w)", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.FreeScale.__call__": [[275, 278], ["img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.Scale.__init__": [[285, 287], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.Scale.__call__": [[288, 303], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", ">=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", ">=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", ">", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "\n", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "\n", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.ScaleMin.__init__": [[310, 312], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.ScaleMin.__call__": [[313, 328], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "\n", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "\n", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.Resize.__init__": [[335, 340], ["isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "int", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "size", ",", "size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.Resize.__call__": [[340, 357], ["isinstance", "img.resize", "mask.resize", "img.resize", "mask.resize", "weight.resize"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "#  assert img.size == mask.size", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "weight", "=", "None", "\n", "if", "isinstance", "(", "mask", ",", "tuple", ")", ":", "\n", "            ", "mask", ",", "weight", "=", "mask", "\n", "\n", "", "if", "(", "w", "==", "h", "and", "w", "==", "self", ".", "size", ")", ":", "\n", "            ", "if", "weight", "is", "None", ":", "\n", "                 ", "return", "img", ",", "mask", "\n", "", "else", ":", "\n", "                ", "return", "img", ",", "(", "mask", ",", "weight", ")", "\n", "", "", "if", "weight", "is", "None", ":", "\n", "            ", "return", "(", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", ",", "\n", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BICUBIC", ")", ",", "(", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", ",", "weight", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.RandomSizedCrop.__init__": [[360, 362], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.RandomSizedCrop.__call__": [[363, 391], ["range", "joint_transforms.Scale", "joint_transforms.CenterCrop", "CenterCrop.", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.random", "random.randint", "random.randint", "img.crop.crop.crop", "mask.crop.crop.crop", "Scale.", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "img.crop.crop.resize", "mask.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "attempt", "in", "range", "(", "10", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "[", "0", "]", "*", "img", ".", "size", "[", "1", "]", "\n", "target_area", "=", "random", ".", "uniform", "(", "0.45", ",", "1.0", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "\n", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "w", ",", "h", "=", "h", ",", "w", "\n", "\n", "", "if", "w", "<=", "img", ".", "size", "[", "0", "]", "and", "h", "<=", "img", ".", "size", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "0", "]", "-", "w", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "[", "1", "]", "-", "h", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "mask", "=", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", ")", ")", "\n", "assert", "(", "img", ".", "size", "==", "(", "w", ",", "h", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# Fallback", "\n", "", "", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "crop", "=", "CenterCrop", "(", "self", ".", "size", ")", "\n", "return", "crop", "(", "*", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.RandomRotate.__init__": [[394, 396], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.RandomRotate.__call__": [[397, 401], ["img.rotate", "mask.rotate", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "rotate_degree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "img", ".", "rotate", "(", "rotate_degree", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "rotate", "(", "\n", "rotate_degree", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.RandomSizeAndCrop.__init__": [[404, 415], ["joint_transforms.RandomCropRec", "joint_transforms.RandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_nopad", ",", "\n", "scale_min", "=", "0.5", ",", "scale_max", "=", "2.0", ",", "ignore_index", "=", "0", ",", "pre_size", "=", "None", ",", "rec", "=", "False", ",", "centroid", "=", "None", ")", ":", "\n", "        ", "self", ".", "rec", "=", "rec", "\n", "self", ".", "size", "=", "size", "\n", "if", "rec", ":", "\n", "            ", "self", ".", "crop", "=", "RandomCropRec", "(", "(", "self", ".", "size", "*", "2", ",", "self", ".", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ",", "ignore_index", "=", "ignore_index", ",", "nopad", "=", "crop_nopad", ")", "\n", "", "self", ".", "scale_min", "=", "scale_min", "\n", "self", ".", "scale_max", "=", "scale_max", "\n", "self", ".", "pre_size", "=", "pre_size", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.RandomSizeAndCrop.__call__": [[416, 457], ["isinstance", "random.choice", "int", "int", "img.resize.resize.resize", "joint_transforms.RandomSizeAndCrop.crop", "joint_transforms.RandomSizeAndCrop.crop", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "math.floor", "math.floor", "math.floor", "math.floor", "int", "img.resize.resize.resize", "mask.resize", "mask.resize", "weight.resize", "float", "float", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ",", "centroid_tuple", "=", "None", ")", ":", "\n", "#if img.size != mask.size:", "\n", "#   print(img.size, mask.size)", "\n", "#        assert img.size == mask.size", "\n", "\n", "        ", "if", "isinstance", "(", "mask", ",", "tuple", ")", ":", "\n", "            ", "mask", ",", "weight", "=", "mask", "\n", "", "else", ":", "\n", "            ", "weight", "=", "None", "\n", "# first, resize such that shorter edge is pre_size", "\n", "", "if", "self", ".", "pre_size", "is", "None", ":", "\n", "            ", "scale_amt", "=", "1.", "\n", "", "elif", "img", ".", "size", "[", "1", "]", "<", "img", ".", "size", "[", "0", "]", ":", "\n", "            ", "scale_amt", "=", "self", ".", "pre_size", "/", "img", ".", "size", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "scale_amt", "=", "self", ".", "pre_size", "/", "img", ".", "size", "[", "0", "]", "\n", "#        scale_amt *= random.uniform(self.scale_min, self.scale_max)", "\n", "", "scale_amt", "*=", "random", ".", "choice", "(", "[", "0.5", ",", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", "]", ")", "\n", "w", ",", "h", "=", "[", "int", "(", "i", "*", "scale_amt", ")", "for", "i", "in", "img", ".", "size", "]", "\n", "\n", "if", "centroid_tuple", "is", "not", "None", ":", "\n", "            ", "centroid_num", ",", "grid", "=", "centroid_tuple", "\n", "num_grid", "=", "int", "(", "math", ".", "sqrt", "(", "grid", ")", ")", "\n", "row", "=", "math", ".", "floor", "(", "centroid_num", "/", "float", "(", "num_grid", ")", ")", "+", "1", "\n", "col", "=", "centroid_num", "%", "(", "num_grid", ")", "+", "1", "\n", "grid_w", ",", "grid_h", "=", "w", "/", "float", "(", "num_grid", ")", ",", "h", "/", "float", "(", "num_grid", ")", "\n", "centroid", "=", "grid_w", "*", "(", "col", "-", "0.5", ")", ",", "grid_h", "*", "(", "row", "-", "0.5", ")", "\n", "centroid", "=", "[", "int", "(", "c", "*", "scale_amt", ")", "for", "c", "in", "centroid", "]", "\n", "", "else", ":", "\n", "            ", "centroid", "=", "None", "\n", "\n", "", "if", "weight", "is", "None", ":", "\n", "            ", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "mask", "=", "(", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ",", "weight", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ")", "\n", "\n", "", "if", "self", ".", "rec", ":", "\n", "            ", "return", "self", ".", "crop", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "crop", "(", "img", ",", "mask", ",", "centroid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.SlidingCropOld.__init__": [[460, 464], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "stride_rate", ",", "ignore_label", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "stride_rate", "=", "stride_rate", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.SlidingCropOld._pad": [[465, 473], ["max", "max", "numpy.pad", "numpy.pad"], "methods", ["None"], ["", "def", "_pad", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_size", "-", "h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_size", "-", "w", ",", "0", ")", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ")", "\n", "mask", "=", "np", ".", "pad", "(", "mask", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "self", ".", "ignore_label", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.SlidingCropOld.__call__": [[474, 509], ["max", "numpy.array", "numpy.array", "int", "range", "joint_transforms.SlidingCropOld._pad", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "int", "int", "range", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "joint_transforms.SlidingCropOld._pad", "img_sublist.append", "mask_sublist.append", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.astype", "PIL.Image.fromarray().convert.astype", "float", "float", "PIL.Image.fromarray", "PIL.Image.fromarray", "img_sub.astype", "mask_sub.astype"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.SlidingCrop._pad", "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.SlidingCrop._pad"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "long_size", "=", "max", "(", "h", ",", "w", ")", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "\n", "if", "long_size", ">", "self", ".", "crop_size", ":", "\n", "            ", "stride", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "crop_size", "*", "self", ".", "stride_rate", ")", ")", "\n", "h_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "h", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "w_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "w", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "img_sublist", ",", "mask_sublist", "=", "[", "]", ",", "[", "]", "\n", "for", "yy", "in", "range", "(", "h_step_num", ")", ":", "\n", "                ", "for", "xx", "in", "range", "(", "w_step_num", ")", ":", "\n", "                    ", "sy", ",", "sx", "=", "yy", "*", "stride", ",", "xx", "*", "stride", "\n", "ey", ",", "ex", "=", "sy", "+", "self", ".", "crop_size", ",", "sx", "+", "self", ".", "crop_size", "\n", "img_sub", "=", "img", "[", "sy", ":", "ey", ",", "sx", ":", "ex", ",", ":", "]", "\n", "mask_sub", "=", "mask", "[", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "\n", "img_sub", ",", "mask_sub", "=", "self", ".", "_pad", "(", "img_sub", ",", "mask_sub", ")", "\n", "img_sublist", ".", "append", "(", "\n", "Image", ".", "fromarray", "(", "\n", "img_sub", ".", "astype", "(", "\n", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "mask_sublist", ".", "append", "(", "\n", "Image", ".", "fromarray", "(", "\n", "mask_sub", ".", "astype", "(", "\n", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", ")", "\n", "", "", "return", "img_sublist", ",", "mask_sublist", "\n", "", "else", ":", "\n", "            ", "img", ",", "mask", "=", "self", ".", "_pad", "(", "img", ",", "mask", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.SlidingCrop.__init__": [[512, 516], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "crop_size", ",", "stride_rate", ",", "ignore_label", ")", ":", "\n", "        ", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "stride_rate", "=", "stride_rate", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.SlidingCrop._pad": [[517, 525], ["max", "max", "numpy.pad", "numpy.pad"], "methods", ["None"], ["", "def", "_pad", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "pad_h", "=", "max", "(", "self", ".", "crop_size", "-", "h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_size", "-", "w", ",", "0", ")", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ")", "\n", "mask", "=", "np", ".", "pad", "(", "mask", ",", "(", "(", "0", ",", "pad_h", ")", ",", "(", "0", ",", "pad_w", ")", ")", ",", "'constant'", ",", "\n", "constant_values", "=", "self", ".", "ignore_label", ")", "\n", "return", "img", ",", "mask", ",", "h", ",", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.SlidingCrop.__call__": [[526, 562], ["max", "numpy.array", "numpy.array", "int", "range", "joint_transforms.SlidingCrop._pad", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "int", "int", "range", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "math.ceil", "joint_transforms.SlidingCrop._pad", "img_slices.append", "mask_slices.append", "slices_info.append", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.astype", "PIL.Image.fromarray().convert.astype", "float", "float", "PIL.Image.fromarray", "PIL.Image.fromarray", "img_sub.astype", "mask_sub.astype"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.SlidingCrop._pad", "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.SlidingCrop._pad"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "long_size", "=", "max", "(", "h", ",", "w", ")", "\n", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "mask", "=", "np", ".", "array", "(", "mask", ")", "\n", "\n", "if", "long_size", ">", "self", ".", "crop_size", ":", "\n", "            ", "stride", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "crop_size", "*", "self", ".", "stride_rate", ")", ")", "\n", "h_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "h", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "w_step_num", "=", "int", "(", "math", ".", "ceil", "(", "(", "w", "-", "self", ".", "crop_size", ")", "/", "float", "(", "stride", ")", ")", ")", "+", "1", "\n", "img_slices", ",", "mask_slices", ",", "slices_info", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "yy", "in", "range", "(", "h_step_num", ")", ":", "\n", "                ", "for", "xx", "in", "range", "(", "w_step_num", ")", ":", "\n", "                    ", "sy", ",", "sx", "=", "yy", "*", "stride", ",", "xx", "*", "stride", "\n", "ey", ",", "ex", "=", "sy", "+", "self", ".", "crop_size", ",", "sx", "+", "self", ".", "crop_size", "\n", "img_sub", "=", "img", "[", "sy", ":", "ey", ",", "sx", ":", "ex", ",", ":", "]", "\n", "mask_sub", "=", "mask", "[", "sy", ":", "ey", ",", "sx", ":", "ex", "]", "\n", "img_sub", ",", "mask_sub", ",", "sub_h", ",", "sub_w", "=", "self", ".", "_pad", "(", "img_sub", ",", "mask_sub", ")", "\n", "img_slices", ".", "append", "(", "\n", "Image", ".", "fromarray", "(", "\n", "img_sub", ".", "astype", "(", "\n", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "mask_slices", ".", "append", "(", "\n", "Image", ".", "fromarray", "(", "\n", "mask_sub", ".", "astype", "(", "\n", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", ")", "\n", "slices_info", ".", "append", "(", "[", "sy", ",", "ey", ",", "sx", ",", "ex", ",", "sub_h", ",", "sub_w", "]", ")", "\n", "", "", "return", "img_slices", ",", "mask_slices", ",", "slices_info", "\n", "", "else", ":", "\n", "            ", "img", ",", "mask", ",", "sub_h", ",", "sub_w", "=", "self", ".", "_pad", "(", "img", ",", "mask", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "return", "[", "img", "]", ",", "[", "mask", "]", ",", "[", "[", "0", ",", "sub_h", ",", "0", ",", "sub_w", ",", "sub_h", ",", "sub_w", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.ClassUniform.__init__": [[565, 583], ["joint_transforms.RandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_nopad", ",", "scale_min", "=", "0.5", ",", "scale_max", "=", "2.0", ",", "ignore_index", "=", "0", ",", "\n", "class_list", "=", "[", "16", "]", ")", ":", "\n", "        ", "\"\"\"\n        This is the initialization for class uniform sampling\n        :param size: crop size (int)\n        :param crop_nopad: Padding or no padding (bool)\n        :param scale_min: Minimum Scale (float)\n        :param scale_max: Maximum Scale (float)\n        :param ignore_index: The index value to ignore in the GT images (unsigned int)\n        :param class_list: A list of class to sample around, by default Truck, train, bus\n        \"\"\"", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ",", "ignore_index", "=", "ignore_index", ",", "nopad", "=", "crop_nopad", ")", "\n", "\n", "self", ".", "class_list", "=", "class_list", "#.replace(\" \", \"\").split(\",\")", "\n", "\n", "self", ".", "scale_min", "=", "scale_min", "\n", "self", ".", "scale_max", "=", "scale_max", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.ClassUniform.detect_peaks": [[584, 618], ["generate_binary_structure", "binary_erosion", "maximum_filter"], "methods", ["None"], ["", "def", "detect_peaks", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        Takes an image and detect the peaks using the local maximum filter.\n        Returns a boolean mask of the peaks (i.e. 1 when\n        the pixel's value is the neighborhood maximum, 0 otherwise)\n        :param image: An 2d input images\n        :return: Binary output images of the same size as input with pixel value equal\n        to 1 indicating that there is peak at that point\n        \"\"\"", "\n", "\n", "# define an 8-connected neighborhood", "\n", "neighborhood", "=", "generate_binary_structure", "(", "2", ",", "2", ")", "\n", "\n", "# apply the local maximum filter; all pixel of maximal value", "\n", "# in their neighborhood are set to 1", "\n", "local_max", "=", "maximum_filter", "(", "image", ",", "footprint", "=", "neighborhood", ")", "==", "image", "\n", "# local_max is a mask that contains the peaks we are", "\n", "# looking for, but also the background.", "\n", "# In order to isolate the peaks we must remove the background from the mask.", "\n", "\n", "# we create the mask of the background", "\n", "background", "=", "(", "image", "==", "0", ")", "\n", "\n", "# a little technicality: we must erode the background in order to", "\n", "# successfully subtract it form local_max, otherwise a line will", "\n", "# appear along the background border (artifact of the local maximum filter)", "\n", "eroded_background", "=", "binary_erosion", "(", "background", ",", "structure", "=", "neighborhood", ",", "\n", "border_value", "=", "1", ")", "\n", "\n", "# we obtain the final mask, containing only peaks,", "\n", "# by removing the background from the local_max mask (xor operation)", "\n", "detected_peaks", "=", "local_max", "^", "eroded_background", "\n", "\n", "return", "detected_peaks", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.joint_transforms.ClassUniform.__call__": [[619, 717], ["isinstance", "random.choice", "int", "int", "isinstance", "numpy.zeros", "numpy.ones", "joint_transforms.ClassUniform.crop", "joint_transforms.ClassUniform.crop", "isinstance", "isinstance", "numpy.array", "numpy.array", "numpy.where", "numpy.zeros.sum", "joint_transforms.ClassUniform.crop", "skimage.measure.block_reduce", "range", "min", "numpy.random.randint", "random.uniform", "random.uniform", "img_new.crop", "img.resize", "img.resize", "mask.resize", "img.resize", "mask.resize", "img.resize", "range", "len", "joint_transforms.ClassUniform.crop", "len", "numpy.argsort", "int", "int", "max", "max", "max", "max", "isinstance", "mask_new.crop", "mask[].resize", "mask[].resize", "mask[].resize", "mask[].resize", "map[].sum", "float", "float", "mask_new[].crop", "mask_new[].crop", "sums.append", "locs.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        :param img: PIL Input Image\n        :param mask: PIL Input Mask\n        :return: PIL output PIL (mask, crop) of self.crop_size\n        \"\"\"", "\n", "if", "isinstance", "(", "mask", ",", "tuple", ")", ":", "\n", "            ", "mask_size", "=", "mask", "[", "0", "]", ".", "size", "\n", "", "else", ":", "\n", "            ", "mask_size", "=", "mask", ".", "size", "\n", "", "assert", "img", ".", "size", "==", "mask_size", "\n", "scale_amt", "=", "random", ".", "choice", "(", "[", "0.5", ",", "0.75", ",", "1.0", ",", "1.25", ",", "1.5", "]", ")", "\n", "#        scale_amt = random.uniform(self.scale_min, self.scale_max)", "\n", "w", "=", "int", "(", "scale_amt", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "scale_amt", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "\n", "if", "scale_amt", "<", "1.0", ":", "\n", "            ", "if", "isinstance", "(", "mask", ",", "tuple", ")", ":", "\n", "                ", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "(", "mask", "[", "0", "]", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ",", "mask", "[", "1", "]", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ")", "\n", "return", "self", ".", "crop", "(", "img", ",", "mask", ")", "\n", "", "else", ":", "\n", "                ", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "return", "self", ".", "crop", "(", "img", ",", "mask", ")", "\n", "", "", "else", ":", "\n", "# Smart Crop ( Class Uniform's ABN)", "\n", "            ", "if", "not", "isinstance", "(", "mask", ",", "tuple", ")", ":", "\n", "                ", "origw", ",", "origh", "=", "mask", ".", "size", "\n", "img_new", ",", "mask_new", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "                ", "origw", ",", "origh", "=", "mask", "[", "0", "]", ".", "size", "\n", "img_new", ",", "mask_new", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", ",", "(", "mask", "[", "0", "]", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ",", "mask", "[", "1", "]", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", ")", "\n", "\n", "", "interested_class", "=", "self", ".", "class_list", "# [16, 15, 14]  # Train, Truck, Bus", "\n", "\n", "if", "not", "isinstance", "(", "mask", ",", "tuple", ")", ":", "\n", "                ", "data", "=", "np", ".", "array", "(", "mask", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "np", ".", "array", "(", "mask", "[", "0", "]", ")", "\n", "\n", "", "map", "=", "np", ".", "zeros", "(", "(", "origh", ",", "origw", ")", ")", "\n", "ones", "=", "np", ".", "ones", "(", "(", "origh", ",", "origw", ")", ")", "#((1024, 2048))", "\n", "for", "class_of_interest", "in", "interested_class", ":", "\n", "# hist = np.histogram(data==class_of_interest)", "\n", "                ", "map", "+=", "np", ".", "where", "(", "data", "==", "class_of_interest", ",", "ones", ",", "0", ")", "\n", "", "if", "map", ".", "sum", "(", ")", "==", "0", ":", "\n", "# Check if there are any peaks in the images to crop from if not do standard", "\n", "# cropping behaviour", "\n", "                ", "return", "self", ".", "crop", "(", "img_new", ",", "mask_new", ")", "\n", "", "else", ":", "\n", "\n", "                ", "window_size", "=", "250", "\n", "measure", ".", "block_reduce", "(", "map", ",", "(", "window_size", ",", "window_size", ")", ",", "np", ".", "sum", ")", "\n", "# Given a list of classes of interest find the points on the image that are", "\n", "# of interest to crop from", "\n", "locs", "=", "[", "]", "\n", "sums", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "0", ",", "map", ".", "shape", "[", "0", "]", "-", "window_size", ",", "window_size", ")", ":", "\n", "                    ", "for", "y", "in", "range", "(", "0", ",", "map", ".", "shape", "[", "1", "]", "-", "window_size", ",", "window_size", ")", ":", "\n", "                        ", "current_sum", "=", "map", "[", "x", ":", "x", "+", "window_size", ",", "y", ":", "y", "+", "window_size", "]", ".", "sum", "(", ")", "\n", "if", "current_sum", ">", "0", ":", "\n", "                            ", "sums", ".", "append", "(", "current_sum", ")", "\n", "locs", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "\n", "# Scaling Ratios in X and Y for non-uniform images", "\n", "#                print(len(sums))", "\n", "#               print(sums, locs)", "\n", "", "", "", "if", "len", "(", "sums", ")", "==", "0", ":", "\n", "                    ", "return", "self", ".", "crop", "(", "img_new", ",", "mask_new", ")", "\n", "", "ratio", "=", "(", "float", "(", "origw", ")", "/", "w", ",", "float", "(", "origh", ")", "/", "h", ")", "\n", "to_select", "=", "min", "(", "len", "(", "sums", ")", ",", "10", ")", "\n", "indices", "=", "np", ".", "argsort", "(", "sums", ")", "[", "-", "to_select", ":", "]", "\n", "\n", "# If peaks are detected, random peak selection followed by peak", "\n", "# coordinate scaling to new scaled image and then random", "\n", "# cropping around the peak point in the scaled image", "\n", "randompick", "=", "np", ".", "random", ".", "randint", "(", "to_select", ")", "\n", "\n", "y", ",", "x", "=", "locs", "[", "indices", "[", "randompick", "]", "]", "\n", "y", ",", "x", "=", "int", "(", "y", "*", "ratio", "[", "0", "]", ")", ",", "int", "(", "x", "*", "ratio", "[", "1", "]", ")", "\n", "window_size", "=", "window_size", "*", "ratio", "[", "0", "]", "\n", "cropx", "=", "random", ".", "uniform", "(", "\n", "max", "(", "0", ",", "(", "x", "-", "window_size", "/", "2", ")", "-", "(", "self", ".", "size", "-", "window_size", ")", ")", ",", "\n", "max", "(", "(", "x", "-", "window_size", "/", "2", ")", ",", "(", "x", "-", "window_size", "/", "2", ")", "-", "(", "\n", "(", "w", "-", "window_size", ")", "-", "x", "+", "window_size", "/", "2", ")", ")", ")", "\n", "\n", "cropy", "=", "random", ".", "uniform", "(", "\n", "max", "(", "0", ",", "(", "y", "-", "window_size", "/", "2", ")", "-", "(", "self", ".", "size", "-", "window_size", ")", ")", ",", "\n", "max", "(", "(", "y", "-", "window_size", "/", "2", ")", ",", "(", "y", "-", "window_size", "/", "2", ")", "-", "(", "\n", "(", "h", "-", "window_size", ")", "-", "y", "+", "window_size", "/", "2", ")", ")", ")", "\n", "\n", "return_img", "=", "img_new", ".", "crop", "(", "\n", "(", "cropx", ",", "cropy", ",", "cropx", "+", "self", ".", "size", ",", "cropy", "+", "self", ".", "size", ")", ")", "\n", "if", "not", "isinstance", "(", "mask", ",", "tuple", ")", ":", "\n", "                    ", "return_mask", "=", "mask_new", ".", "crop", "(", "\n", "(", "cropx", ",", "cropy", ",", "cropx", "+", "self", ".", "size", ",", "cropy", "+", "self", ".", "size", ")", ")", "\n", "", "else", ":", "\n", "                    ", "return_mask", "=", "mask_new", "[", "0", "]", ".", "crop", "(", "(", "cropx", ",", "cropy", ",", "cropx", "+", "self", ".", "size", ",", "cropy", "+", "self", ".", "size", ")", ")", ",", "mask_new", "[", "1", "]", ".", "crop", "(", "(", "cropx", ",", "cropy", ",", "cropx", "+", "self", ".", "size", ",", "cropy", "+", "self", ".", "size", ")", ")", "\n", "", "return", "(", "return_img", ",", "return_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.dataset.init_concat_dataset": [[12, 88], ["joint_transforms.Compose", "joint_transforms.Compose", "torchvision.Compose", "transforms.MaskToTensor", "base_dataset.BaseDataSet", "base_dataset.BaseDataSet", "torch.utils.data.ConcatDataset", "torch.utils.data.DataLoader", "joint_transforms.RandomSizeAndCrop", "joint_transforms.Resize", "joint_transforms.RandomSizeAndCrop", "joint_transforms.Resize", "source_joint_list.append", "target_joint_list.append", "transforms.FlipChannels", "transforms.SubMean", "transforms.ToTensor", "joint_transforms.RandomHorizontallyFlip", "joint_transforms.RandomHorizontallyFlip"], "function", ["None"], ["def", "init_concat_dataset", "(", "cfg", ",", "plabel_path", "=", "None", ",", "source_plabel_path", "=", "None", ",", "selected", "=", "None", ",", "centroid", "=", "None", ",", "wei_path", "=", "None", ",", "fuse", "=", "False", ",", "target_selected", "=", "None", ",", "source_list", "=", "'none'", ",", "target_list", "=", "'none'", ")", ":", "\n", "    ", "source_env", "=", "cfg", "[", "cfg", ".", "source", "]", "\n", "target_env", "=", "cfg", "[", "cfg", ".", "target", "]", "\n", "cfg", ".", "num_classes", "=", "cfg", ".", "num_classes", "\n", "cfg", ".", "source_size", "=", "source_env", ".", "input_size", "\n", "cfg", ".", "target_size", "=", "target_env", ".", "input_size", "\n", "cfg", ".", "source_data_dir", "=", "source_env", ".", "data_dir", "\n", "cfg", ".", "source_data_list", "=", "source_env", ".", "data_list", "\n", "cfg", ".", "target_data_dir", "=", "target_env", ".", "data_dir", "\n", "cfg", ".", "target_data_list", "=", "target_env", ".", "data_list", "\n", "\n", "source_joint_list", "=", "[", "\n", "joint_transforms", ".", "RandomSizeAndCrop", "(", "cfg", ".", "crop_src", ",", "\n", "True", ",", "\n", "scale_min", "=", "cfg", ".", "scale_min", ",", "\n", "scale_max", "=", "cfg", ".", "scale_max", ",", "\n", "pre_size", "=", "cfg", ".", "input_src", ",", "\n", "rec", "=", "cfg", ".", "rec", "\n", ")", ",", "\n", "joint_transforms", ".", "Resize", "(", "cfg", ".", "crop_src", ")", "\n", "]", "\n", "\n", "target_joint_list", "=", "[", "\n", "joint_transforms", ".", "RandomSizeAndCrop", "(", "cfg", ".", "crop_tgt", ",", "\n", "True", ",", "\n", "scale_min", "=", "cfg", ".", "scale_min", ",", "\n", "scale_max", "=", "cfg", ".", "scale_max", ",", "\n", "pre_size", "=", "cfg", ".", "input_tgt", ",", "\n", "rec", "=", "cfg", ".", "rec", "\n", ")", ",", "\n", "joint_transforms", ".", "Resize", "(", "cfg", ".", "crop_tgt", ")", "\n", "]", "\n", "\n", "if", "cfg", ".", "mirror", ":", "\n", "        ", "source_joint_list", ".", "append", "(", "joint_transforms", ".", "RandomHorizontallyFlip", "(", ")", ")", "\n", "target_joint_list", ".", "append", "(", "joint_transforms", ".", "RandomHorizontallyFlip", "(", ")", ")", "\n", "\n", "\n", "", "target_joint_transform", "=", "joint_transforms", ".", "Compose", "(", "target_joint_list", ")", "\n", "source_joint_transform", "=", "joint_transforms", ".", "Compose", "(", "source_joint_list", ")", "\n", "\n", "train_transform_list", "=", "[", "\n", "transforms", ".", "FlipChannels", "(", ")", ",", "\n", "transforms", ".", "SubMean", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", "\n", "\n", "train_transform", "=", "standard_transforms", ".", "Compose", "(", "train_transform_list", ")", "\n", "label_transform", "=", "transforms", ".", "MaskToTensor", "(", ")", "\n", "if", "selected", "is", "None", ":", "\n", "        ", "src_prop", "=", "cfg", ".", "src_prop", "\n", "", "else", ":", "\n", "        ", "src_prop", "=", "None", "\n", "\n", "", "source_dataset", "=", "BaseDataSet", "(", "source_env", ".", "data_dir", ",", "source_env", ".", "data_list", ",", "\n", "cfg", ".", "source", ",", "cfg", ".", "num_classes", ",", "\n", "max_prop", "=", "src_prop", ",", "\n", "joint_transform", "=", "source_joint_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "label_transform", "=", "label_transform", ",", "\n", "selected", "=", "selected", ",", "\n", "centroid", "=", "centroid", ",", "\n", "wei_path", "=", "wei_path", ",", "\n", "set", "=", "'train'", ",", "plabel_path", "=", "source_plabel_path", ",", "cfg", "=", "cfg", ")", "\n", "target_dataset", "=", "BaseDataSet", "(", "target_env", ".", "data_dir", ",", "target_env", ".", "data_list", ",", "\n", "cfg", ".", "target", ",", "cfg", ".", "num_classes", ",", "\n", "joint_transform", "=", "target_joint_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "selected", "=", "target_selected", ",", "\n", "label_transform", "=", "label_transform", ",", "\n", "set", "=", "'train'", ",", "plabel_path", "=", "plabel_path", ",", "cfg", "=", "cfg", ")", "\n", "mixtrainset", "=", "data", ".", "ConcatDataset", "(", "[", "source_dataset", ",", "target_dataset", "]", ")", "\n", "mix_trainloader", "=", "data", ".", "DataLoader", "(", "mixtrainset", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "cfg", ".", "worker", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "return", "mix_trainloader", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.dataset.init_source_dataset": [[90, 141], ["joint_transforms.Compose", "torchvision.Compose", "transforms.MaskToTensor", "torch.utils.data.DataLoader", "joint_transforms.RandomSizeAndCrop", "joint_transforms.Resize", "source_joint_list.append", "transforms.FlipChannels", "transforms.SubMean", "transforms.ToTensor", "base_dataset.BaseDataSet", "joint_transforms.RandomHorizontallyFlip"], "function", ["None"], ["", "def", "init_source_dataset", "(", "cfg", ",", "plabel_path", "=", "None", ",", "selected", "=", "None", ",", "fuse", "=", "False", ",", "source_list", "=", "None", ")", ":", "\n", "    ", "source_env", "=", "cfg", "[", "cfg", ".", "source", "]", "\n", "target_env", "=", "cfg", "[", "cfg", ".", "target", "]", "\n", "if", "cfg", ".", "source", "==", "'synthia'", ":", "\n", "        ", "cfg", ".", "num_classes", "=", "16", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "num_classes", "=", "19", "\n", "", "cfg", ".", "source_size", "=", "source_env", ".", "input_size", "\n", "cfg", ".", "target_size", "=", "target_env", ".", "input_size", "\n", "cfg", ".", "source_data_dir", "=", "source_env", ".", "data_dir", "\n", "cfg", ".", "source_data_list", "=", "source_env", ".", "data_list", "\n", "cfg", ".", "target_data_dir", "=", "target_env", ".", "data_dir", "\n", "cfg", ".", "target_data_list", "=", "target_env", ".", "data_list", "\n", "source_joint_list", "=", "[", "\n", "joint_transforms", ".", "RandomSizeAndCrop", "(", "cfg", ".", "crop_src", ",", "\n", "True", ",", "\n", "scale_min", "=", "cfg", ".", "scale_min", ",", "\n", "scale_max", "=", "cfg", ".", "scale_max", ",", "\n", "pre_size", "=", "cfg", ".", "input_src", "\n", ")", ",", "\n", "joint_transforms", ".", "Resize", "(", "cfg", ".", "crop_src", ")", "\n", "]", "\n", "\n", "\n", "if", "cfg", ".", "mirror", ":", "\n", "        ", "source_joint_list", ".", "append", "(", "joint_transforms", ".", "RandomHorizontallyFlip", "(", ")", ")", "\n", "\n", "\n", "", "source_joint_transform", "=", "joint_transforms", ".", "Compose", "(", "source_joint_list", ")", "\n", "\n", "train_transform_list", "=", "[", "\n", "transforms", ".", "FlipChannels", "(", ")", ",", "\n", "transforms", ".", "SubMean", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", "\n", "\n", "train_transform", "=", "standard_transforms", ".", "Compose", "(", "train_transform_list", ")", "\n", "label_transform", "=", "transforms", ".", "MaskToTensor", "(", ")", "\n", "\n", "if", "source_list", "is", "None", ":", "\n", "        ", "source_list", "=", "source_env", ".", "data_list", "\n", "", "trainloader", "=", "data", ".", "DataLoader", "(", "\n", "BaseDataSet", "(", "source_env", ".", "data_dir", ",", "source_list", ",", "cfg", ".", "source", ",", "cfg", ".", "num_classes", ",", "\n", "max_iters", "=", "cfg", ".", "num_steps", "*", "cfg", ".", "batch_size", ",", "\n", "joint_transform", "=", "source_joint_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "label_transform", "=", "label_transform", ",", "\n", "set", "=", "'train'", ")", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "cfg", ".", "worker", ",", "pin_memory", "=", "True", ")", "\n", "\n", "return", "trainloader", ",", "cfg", "\n", "", "def", "init_target_dataset", "(", "cfg", ",", "plabel_path", "=", "None", ",", "target_selected", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.dataset.init_target_dataset": [[141, 192], ["joint_transforms.Compose", "torchvision.Compose", "transforms.MaskToTensor", "base_dataset.BaseDataSet", "torch.utils.data.DataLoader", "joint_transforms.RandomSizeAndCrop", "joint_transforms.Resize", "target_joint_list.append", "transforms.FlipChannels", "transforms.SubMean", "transforms.ToTensor", "transforms.FlipChannels", "transforms.SubMean", "transforms.ToTensor", "joint_transforms.RandomHorizontallyFlip"], "function", ["None"], ["", "def", "init_target_dataset", "(", "cfg", ",", "plabel_path", "=", "None", ",", "target_selected", "=", "None", ")", ":", "\n", "    ", "target_env", "=", "cfg", "[", "cfg", ".", "target", "]", "\n", "cfg", ".", "num_classes", "=", "cfg", ".", "num_classes", "\n", "cfg", ".", "target_size", "=", "target_env", ".", "input_size", "\n", "cfg", ".", "target_data_dir", "=", "target_env", ".", "data_dir", "\n", "cfg", ".", "target_data_list", "=", "target_env", ".", "data_list", "\n", "target_joint_list", "=", "[", "\n", "joint_transforms", ".", "RandomSizeAndCrop", "(", "cfg", ".", "crop_tgt", ",", "\n", "True", ",", "\n", "scale_min", "=", "cfg", ".", "scale_min", ",", "\n", "scale_max", "=", "cfg", ".", "scale_max", ",", "\n", "pre_size", "=", "cfg", ".", "input_tgt", ",", "\n", "rec", "=", "cfg", ".", "rec", "\n", ")", ",", "\n", "joint_transforms", ".", "Resize", "(", "cfg", ".", "crop_tgt", ")", "\n", "]", "\n", "if", "cfg", ".", "mirror", ":", "\n", "        ", "target_joint_list", ".", "append", "(", "joint_transforms", ".", "RandomHorizontallyFlip", "(", ")", ")", "\n", "# target_joint_list.append(transforms.MaskToTensor())", "\n", "", "target_joint_transform", "=", "joint_transforms", ".", "Compose", "(", "target_joint_list", ")", "\n", "# target_joint_transform = transform_coord.Compose([", "\n", "#     transform_coord.RandomResizedCropCoord(cfg.crop_tgt, scale=(cfg.scale_min, cfg.scale_max)),", "\n", "#     transform_coord.RandomHorizontalFlipCoord(),", "\n", "# ])", "\n", "train_transform_list", "=", "[", "\n", "transforms", ".", "FlipChannels", "(", ")", ",", "\n", "transforms", ".", "SubMean", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", "\n", "\n", "train_strongaug_transform_list", "=", "[", "\n", "transforms", ".", "FlipChannels", "(", ")", ",", "\n", "transforms", ".", "SubMean", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", "\n", "\n", "train_transform", "=", "standard_transforms", ".", "Compose", "(", "train_transform_list", ")", "\n", "label_transform", "=", "transforms", ".", "MaskToTensor", "(", ")", "\n", "\n", "target_dataset", "=", "BaseDataSet", "(", "target_env", ".", "data_dir", ",", "target_env", ".", "data_list", ",", "\n", "cfg", ".", "target", ",", "cfg", ".", "num_classes", ",", "\n", "joint_transform", "=", "target_joint_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "selected", "=", "target_selected", ",", "\n", "label_transform", "=", "label_transform", ",", "\n", "set", "=", "'train'", ",", "plabel_path", "=", "plabel_path", ",", "cfg", "=", "cfg", ")", "\n", "\n", "target_trainloader", "=", "data", ".", "DataLoader", "(", "target_dataset", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "cfg", ".", "worker", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "return", "target_trainloader", ",", "cfg", "\n", "", "def", "init_test_dataset", "(", "config", ",", "dataset_name", ",", "set", ",", "selected", "=", "None", ",", "prop", "=", "None", ",", "label_ori", "=", "None", ",", "fuse", "=", "False", ",", "batchsize", "=", "1", ",", "list_path", "=", "'none'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.dataset.init_test_dataset": [[192, 256], ["torchvision.Compose", "torch.utils.data.DataLoader", "joint_transforms.Compose", "torchvision.Compose", "base_dataset.BaseDataSet", "joint_transforms.Resize", "transforms.FlipChannels", "transforms.SubMean", "transforms.ToTensor", "transforms.Resize", "transforms.FlipChannels", "transforms.SubMean", "transforms.ToTensor", "transforms.ResizeLabel", "transforms.MaskToTensor", "torchvision.Compose", "transforms.MaskToTensor", "transforms.ResizeLabel", "transforms.MaskToTensor"], "function", ["None"], ["", "def", "init_test_dataset", "(", "config", ",", "dataset_name", ",", "set", ",", "selected", "=", "None", ",", "prop", "=", "None", ",", "label_ori", "=", "None", ",", "fuse", "=", "False", ",", "batchsize", "=", "1", ",", "list_path", "=", "'none'", ")", ":", "\n", "    ", "env", "=", "config", "[", "dataset_name", "]", "\n", "max_prop", "=", "None", "\n", "if", "dataset_name", "==", "'gta5'", "and", "set", "==", "'train'", ":", "\n", "        ", "max_prop", "=", "config", ".", "pool_prop", "\n", "", "if", "dataset_name", "==", "'synthia'", "and", "set", "==", "'train'", ":", "\n", "        ", "max_prop", "=", "config", ".", "pool_prop", "\n", "\n", "", "if", "list_path", "!=", "'none'", ":", "\n", "        ", "data_list", "=", "list_path", "\n", "max_prop", "=", "None", "\n", "", "else", ":", "\n", "        ", "data_list", "=", "env", ".", "data_list", "\n", "\n", "", "if", "prop", "is", "not", "None", ":", "\n", "        ", "max_prop", "=", "prop", "\n", "", "if", "selected", "is", "not", "None", ":", "\n", "        ", "max_prop", "=", "None", "\n", "\n", "", "if", "label_ori", "is", "None", ":", "\n", "        ", "if", "dataset_name", "==", "'gta5'", "or", "dataset_name", "==", "'synthia'", ":", "\n", "            ", "label_ori", "=", "False", "\n", "", "else", ":", "\n", "            ", "label_ori", "=", "True", "\n", "\n", "", "", "if", "not", "label_ori", ":", "\n", "        ", "joint_transform", "=", "[", "joint_transforms", ".", "Resize", "(", "(", "1024", ",", "512", ")", ")", "]", "\n", "joint_transform", "=", "joint_transforms", ".", "Compose", "(", "joint_transform", ")", "\n", "transform_list", "=", "[", "\n", "transforms", ".", "FlipChannels", "(", ")", ",", "\n", "transforms", ".", "SubMean", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", "\n", "", "else", ":", "\n", "        ", "joint_transform", "=", "None", "\n", "transform_list", "=", "[", "\n", "transforms", ".", "Resize", "(", "(", "1024", ",", "512", ")", ")", ",", "\n", "transforms", ".", "FlipChannels", "(", ")", ",", "\n", "transforms", ".", "SubMean", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", "\n", "\n", "", "train_transform", "=", "standard_transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n", "if", "label_ori", "and", "dataset_name", "==", "'gta5'", ":", "\n", "        ", "label_transform", "=", "[", "transforms", ".", "ResizeLabel", "(", "(", "1914", ",", "1052", ")", ")", ",", "\n", "transforms", ".", "MaskToTensor", "(", ")", "]", "\n", "label_transform", "=", "standard_transforms", ".", "Compose", "(", "label_transform", ")", "\n", "", "elif", "label_ori", "and", "dataset_name", "==", "'synthia'", ":", "\n", "        ", "label_transform", "=", "[", "transforms", ".", "ResizeLabel", "(", "(", "1280", ",", "760", ")", ")", ",", "\n", "transforms", ".", "MaskToTensor", "(", ")", "]", "\n", "label_transform", "=", "standard_transforms", ".", "Compose", "(", "label_transform", ")", "\n", "", "else", ":", "\n", "        ", "label_transform", "=", "transforms", ".", "MaskToTensor", "(", ")", "\n", "", "targetloader", "=", "data", ".", "DataLoader", "(", "\n", "BaseDataSet", "(", "env", ".", "data_dir", ",", "data_list", ",", "dataset_name", ",", "config", ".", "num_classes", ",", "\n", "joint_transform", "=", "joint_transform", ",", "\n", "transform", "=", "train_transform", ",", "\n", "label_transform", "=", "label_transform", ",", "\n", "max_prop", "=", "max_prop", ",", "\n", "selected", "=", "selected", ",", "\n", "set", "=", "set", ",", "cfg", "=", "config", ")", ",", "\n", "batch_size", "=", "batchsize", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "return", "targetloader", "\n", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.base_dataset.BaseDataSet.__init__": [[14, 114], ["base_dataset.BaseDataSet.list_path.replace", "imageio.plugins.freeimage.download", "open", "f.readlines", "int", "len", "int", "list", "os.join", "os.join", "os.join", "base_dataset.BaseDataSet.files.append", "os.join", "os.join", "os.join", "base_dataset.BaseDataSet.files.append", "base_dataset.BaseDataSet.img_ids.append", "numpy.ceil", "numpy.floor", "numpy.random.choice", "os.join", "os.join", "name.replace", "os.join", "base_dataset.BaseDataSet.files.append", "item.strip().split", "fields.split", "float", "len", "item.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "dataset", ",", "num_class", ",", "joint_transform", "=", "None", ",", "transform", "=", "None", ",", "label_transform", "=", "None", ",", "\n", "max_iters", "=", "None", ",", "ignore_label", "=", "255", ",", "set", "=", "'val'", ",", "plabel_path", "=", "None", ",", "max_prop", "=", "None", ",", "selected", "=", "None", ",", "\n", "centroid", "=", "None", ",", "wei_path", "=", "None", ",", "cfg", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "set", "=", "set", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "joint_transform", "=", "joint_transform", "\n", "self", ".", "label_transform", "=", "label_transform", "\n", "self", ".", "plabel_path", "=", "plabel_path", "\n", "self", ".", "centroid", "=", "centroid", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n", "if", "self", ".", "set", "!=", "'train'", ":", "\n", "            ", "self", ".", "list_path", "=", "(", "self", ".", "list_path", ")", ".", "replace", "(", "'train'", ",", "self", ".", "set", ")", "\n", "\n", "", "self", ".", "img_ids", "=", "[", "]", "\n", "if", "selected", "is", "not", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "selected", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "list_path", ")", "as", "f", ":", "\n", "                ", "for", "item", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                    ", "fields", "=", "item", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "[", "0", "]", "\n", "if", "' '", "in", "fields", ":", "\n", "                        ", "fields", "=", "fields", ".", "split", "(", "' '", ")", "[", "0", "]", "\n", "", "self", ".", "img_ids", ".", "append", "(", "fields", ")", "\n", "\n", "", "", "", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "elif", "max_prop", "is", "not", "None", ":", "\n", "            ", "total", "=", "len", "(", "self", ".", "img_ids", ")", "\n", "to_sel", "=", "int", "(", "np", ".", "floor", "(", "total", "*", "max_prop", ")", ")", "\n", "index", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "total", ",", "to_sel", ",", "replace", "=", "False", ")", ")", "\n", "self", ".", "img_ids", "=", "[", "self", ".", "img_ids", "[", "i", "]", "for", "i", "in", "index", "]", "\n", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "if", "self", ".", "dataset", "==", "'synthia'", ":", "\n", "            ", "self", ".", "id2train", "=", "{", "3", ":", "0", ",", "4", ":", "1", ",", "2", ":", "2", ",", "21", ":", "3", ",", "5", ":", "4", ",", "7", ":", "5", ",", "\n", "15", ":", "6", ",", "9", ":", "7", ",", "6", ":", "8", ",", "16", ":", "9", ",", "1", ":", "10", ",", "10", ":", "11", ",", "17", ":", "12", ",", "\n", "8", ":", "13", ",", "18", ":", "14", ",", "19", ":", "15", ",", "20", ":", "16", ",", "12", ":", "17", ",", "11", ":", "18", "}", "\n", "# self.id2train = {3: 0, 4: 1, 2: 2, 21: 3, 5: 4, 7: 5,", "\n", "#                  15: 6, 6: 7, 16: 8, 1: 9, 10: 10, 17: 11,", "\n", "#                  8: 12, 19: 13, 12: 14, 11: 15}", "\n", "\n", "", "else", ":", "\n", "# if self.cfg.source == 'synthia':", "\n", "#     self.id2train = {7: 0, 8: 1, 11: 2, 12: 3, 13: 4, 17: 5,", "\n", "#                      19: 6, 20: 7, 21: 8, 23: 9, 24: 10, 25: 11,", "\n", "#                      26: 12, 28: 13, 32: 14, 33: 15}", "\n", "# else:", "\n", "            ", "self", ".", "id2train", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "", "if", "self", ".", "dataset", "==", "'synthia'", ":", "\n", "            ", "imageio", ".", "plugins", ".", "freeimage", ".", "download", "(", ")", "\n", "if", "self", ".", "plabel_path", "is", "None", ":", "\n", "                ", "label_root", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'GT/LABELS'", ")", "\n", "", "else", ":", "\n", "                ", "label_root", "=", "self", ".", "plabel_path", "\n", "\n", "", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "                ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"RGB/%s\"", "%", "name", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "label_root", ",", "\"%s\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n", "", "", "if", "dataset", "==", "'gta5'", ":", "\n", "            ", "if", "self", ".", "plabel_path", "is", "None", ":", "\n", "                ", "label_root", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'labels'", ")", "\n", "", "else", ":", "\n", "                ", "label_root", "=", "self", ".", "plabel_path", "\n", "\n", "", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "                ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"images/%s\"", "%", "name", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "label_root", ",", "\"%s\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n", "\n", "", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "            ", "if", "self", ".", "plabel_path", "is", "None", ":", "\n", "                ", "label_root", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "'gtFine'", ",", "self", ".", "set", ")", "\n", "", "else", ":", "\n", "                ", "label_root", "=", "self", ".", "plabel_path", "\n", "", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "                ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"leftImg8bit/%s/%s\"", "%", "(", "self", ".", "set", ",", "name", ")", ")", "\n", "label_name", "=", "name", ".", "replace", "(", "'leftImg8bit'", ",", "'gtFine_labelIds'", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "label_root", ",", "'%s'", "%", "(", "label_name", ")", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.base_dataset.BaseDataSet.__len__": [[116, 118], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.base_dataset.BaseDataSet.__getitem__": [[119, 150], ["PIL.Image.open().convert", "numpy.asarray", "PIL.Image.fromarray", "PIL.Image.open", "numpy.ones", "base_dataset.BaseDataSet.id2train.items", "label_copy.astype", "base_dataset.BaseDataSet.joint_transform", "base_dataset.BaseDataSet.transform", "base_dataset.BaseDataSet.label_transform", "print", "base_dataset.BaseDataSet.__getitem__", "PIL.Image.open", "numpy.asarray", "imageio.imread"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.base_dataset.BaseDataSet.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "try", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "dataset", "==", "'synthia'", ":", "\n", "                ", "label", "=", "np", ".", "asarray", "(", "imageio", ".", "imread", "(", "datafiles", "[", "\"label\"", "]", ",", "format", "=", "'PNG-FI'", ")", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "                ", "label", "=", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "\n", "", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "uint8", ")", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "self", ".", "plabel_path", "is", "None", ":", "\n", "                ", "for", "k", ",", "v", "in", "self", ".", "id2train", ".", "items", "(", ")", ":", "\n", "                    ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "                ", "label_copy", "=", "label", "\n", "", "label", "=", "Image", ".", "fromarray", "(", "label_copy", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "if", "self", ".", "joint_transform", "is", "not", "None", ":", "\n", "                ", "image", ",", "label", "=", "self", ".", "joint_transform", "(", "image", ",", "label", ",", "None", ")", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "self", ".", "label_transform", "is", "not", "None", ":", "\n", "                ", "label", "=", "self", ".", "label_transform", "(", "label", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "index", ")", "\n", "index", "=", "index", "-", "1", "if", "index", ">", "0", "else", "index", "+", "1", "\n", "return", "self", ".", "__getitem__", "(", "index", ")", "\n", "", "return", "image", ",", "label", ",", "0", ",", "0", ",", "name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.model_builder.freeze_bn": [[7, 12], ["net.modules", "isinstance", "module.parameters"], "function", ["None"], ["def", "freeze_bn", "(", "net", ")", ":", "\n", "    ", "for", "module", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "BatchNorm2d", ")", ":", "\n", "            ", "for", "i", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "i", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.model_builder.release_bn": [[14, 19], ["net.modules", "isinstance", "module.parameters"], "function", ["None"], ["", "", "", "", "def", "release_bn", "(", "net", ")", ":", "\n", "    ", "for", "module", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "BatchNorm2d", ")", ":", "\n", "            ", "for", "i", "in", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "i", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.model_builder.init_model": [[21, 90], ["DeeplabV2.Deeplab", "model_tar.train().cuda", "model_tar.train"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.Deeplab", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.train"], ["", "", "", "", "def", "init_model", "(", "cfg", ")", ":", "\n", "    ", "_", ",", "_", ",", "model_tar", "=", "Deeplab", "(", "num_classes", "=", "cfg", ".", "num_classes", ",", "init_stu", "=", "cfg", ".", "init_weight", ")", "\n", "# model_stu = convert_model(model_stu)", "\n", "# model_stu = nn.DataParallel(model_stu, device_ids=[0, 1])", "\n", "# model_tea_src = convert_model(model_tea_src)", "\n", "# model_tea_src = nn.DataParallel(model_tea_src, device_ids=[0, 1])", "\n", "# # model_tea_tar = convert_model(model_tea_tar)", "\n", "# model_tea_tar = nn.DataParallel(model_tea_tar, device_ids=[0,1])", "\n", "\n", "# model = nn.DataParallel(model,device_ids=[0])", "\n", "\n", "# if cfg.fixbn:", "\n", "#     freeze_bn(model)", "\n", "# else:", "\n", "#     release_bn(model)", "\n", "\n", "# checkpoint = torch.load(cfg.init_weight)", "\n", "#", "\n", "# if 'state_dict' in checkpoint:", "\n", "#     model.load_state_dict(checkpoint['state_dict'])", "\n", "# else:", "\n", "#     model.module.load_state_dict(checkpoint)", "\n", "\n", "# self.logger.info(\"Checkpoint loaded successfully from \" + filename)", "\n", "#     if cfg.model=='deeplab' and cfg.init_weight != 'None':", "\n", "#         params = torch.load(cfg.init_weight)", "\n", "#         print('Model restored with weights from : {}'.format(cfg.init_weight))", "\n", "#         if 'init-' in cfg.init_weight and cfg.model=='deeplab':", "\n", "#             new_params = model.state_dict().copy()", "\n", "#             for i in params:", "\n", "#                 i_parts = i.split('.')", "\n", "#                 if not i_parts[1] == 'layer5':", "\n", "#                     new_params['.'.join(i_parts[1:])] = params[i]", "\n", "#             model.load_state_dict(new_params, strict=True)", "\n", "#", "\n", "#         else:", "\n", "#             new_params = model.state_dict().copy()", "\n", "#             for i in params:", "\n", "#                 if 'module' in i:", "\n", "#                     i_ = i.replace('module.', '')", "\n", "#                     new_params[i_] = params[i]", "\n", "#                 elif i in ['epoch','iteration','state_dict','optimizer','best_MIou']:", "\n", "#                     pass", "\n", "#                 else:", "\n", "#                     new_params[i] = params[i]", "\n", "# #                i_parts = i.split('.')[0]", "\n", "#             model.load_state_dict(new_params, strict=True)", "\n", "# #            model.load_state_dict(params, strict=True)", "\n", "#", "\n", "#     if cfg.restore_from != 'None':", "\n", "#         params = torch.load(cfg.restore_from)", "\n", "#         model.load_state_dict(params)", "\n", "#         print('Model initialize with weights from : {}'.format(cfg.restore_from))", "\n", "\n", "# if cfg.multigpu:", "\n", "#     model = convert_model(model)", "\n", "#     model = nn.DataParallel(model,device_ids=[0,1])", "\n", "# if cfg.train:", "\n", "#     model.train().cuda()", "\n", "#     print('Mode --> Train')", "\n", "# else:", "\n", "#     model.eval().cuda()", "\n", "#     print('Mode --> Eval')", "\n", "model_tar", ".", "train", "(", ")", ".", "cuda", "(", ")", "\n", "# discriminator.train().cuda()", "\n", "# model_tea_tar.eval().cuda()", "\n", "# model_tea_src.eval().cuda()", "\n", "# print(\"zzzzzzzzzzzzzzzzzz\")", "\n", "return", "model_tar", "#,model_tea_src,model_tea_tar", "\n", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.BasicBlock.__init__": [[24, 33], ["torch.Module.__init__", "DeeplabV2.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "DeeplabV2.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.conv3x3", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.BasicBlock.forward": [[34, 51], ["DeeplabV2.BasicBlock.conv1", "DeeplabV2.BasicBlock.bn1", "DeeplabV2.BasicBlock.relu", "DeeplabV2.BasicBlock.conv2", "DeeplabV2.BasicBlock.bn2", "DeeplabV2.BasicBlock.relu", "DeeplabV2.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.Bottleneck.__init__": [[56, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "DeeplabV2.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "DeeplabV2.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "DeeplabV2.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.Bottleneck.forward": [[77, 98], ["DeeplabV2.Bottleneck.conv1", "DeeplabV2.Bottleneck.bn1", "DeeplabV2.Bottleneck.relu", "DeeplabV2.Bottleneck.conv2", "DeeplabV2.Bottleneck.bn2", "DeeplabV2.Bottleneck.relu", "DeeplabV2.Bottleneck.conv3", "DeeplabV2.Bottleneck.bn3", "DeeplabV2.Bottleneck.relu", "DeeplabV2.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.Classifier_Module2.__init__": [[101, 159], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "DeeplabV2.Classifier_Module2.conv2d_list.append", "zip", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "DeeplabV2.Classifier_Module2.conv2d_list.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "isinstance", "isinstance", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "isinstance", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "DeeplabV2.SEBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "isinstance", "isinstance", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ",", "droprate", "=", "0.1", ",", "use_se", "=", "True", ")", ":", "\n", "        ", "super", "(", "Classifier_Module2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "# self.conv2d_list.append(", "\n", "#    nn.BatchNorm2d(inplanes))", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "*", "[", "\n", "# nn.ReflectionPad2d(padding),", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "", "if", "use_se", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "[", "SEBlock", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Conv2d", "(", "256", "*", "(", "len", "(", "dilation_series", ")", "+", "1", ")", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "num_groups", "=", "32", ",", "num_channels", "=", "256", ",", "affine", "=", "True", ")", "]", ")", "\n", "\n", "", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "*", "[", "nn", ".", "Dropout2d", "(", "droprate", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "False", ")", "]", ")", "\n", "\n", "##########init#######", "\n", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "GroupNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "bottleneck", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "InstanceNorm2d", ")", "or", "isinstance", "(", "m", ",", "\n", "nn", ".", "GroupNorm", ")", "or", "isinstance", "(", "\n", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "head", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.Classifier_Module2.forward": [[160, 175], ["range", "DeeplabV2.Classifier_Module2.bottleneck", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DeeplabV2.Classifier_Module2.head", "len"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "get_feat", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", ")", ",", "1", ")", "\n", "", "out", "=", "self", ".", "bottleneck", "(", "out", ")", "\n", "if", "get_feat", ":", "\n", "            ", "out_dict", "=", "{", "}", "\n", "out", "=", "self", ".", "head", "[", "0", "]", "(", "out", ")", "\n", "out_dict", "[", "'feat'", "]", "=", "out", "\n", "out", "=", "self", ".", "head", "[", "1", "]", "(", "out", ")", "\n", "out_dict", "[", "'out'", "]", "=", "out", "\n", "return", "out_dict", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "head", "(", "out", ")", "\n", "return", "out", "\n", "", "", "", "class", "SEBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.SEBlock.__init__": [[176, 184], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "r", "=", "16", ")", ":", "\n", "        ", "super", "(", "SEBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "global_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "se", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "inplanes", ",", "inplanes", "//", "r", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "inplanes", "//", "r", ",", "inplanes", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.SEBlock.forward": [[185, 190], ["DeeplabV2.SEBlock.global_pool", "xx.view.view.view", "DeeplabV2.SEBlock.se().unsqueeze().unsqueeze", "x.mul", "xx.view.view.size", "xx.view.view.size", "DeeplabV2.SEBlock.se().unsqueeze", "DeeplabV2.SEBlock.se"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "xx", "=", "self", ".", "global_pool", "(", "x", ")", "\n", "xx", "=", "xx", ".", "view", "(", "xx", ".", "size", "(", "0", ")", ",", "xx", ".", "size", "(", "1", ")", ")", "\n", "se_weight", "=", "self", ".", "se", "(", "xx", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "x", ".", "mul", "(", "se_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.Classifier_Module.__init__": [[192, 201], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "DeeplabV2.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.Classifier_Module.forward": [[202, 207], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.__init__": [[211, 247], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "DeeplabV2.ResNet.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "DeeplabV2.ResNet._make_layer", "DeeplabV2.ResNet._make_layer", "DeeplabV2.ResNet._make_layer", "DeeplabV2.ResNet._make_layer", "DeeplabV2.ResNet.modules", "DeeplabV2.ResNet._make_pred_layer", "DeeplabV2.ResNet._make_pred_layer", "DeeplabV2.ResNet._make_pred_layer", "DeeplabV2.ResNet._make_pred_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "m.weight.data.normal_"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet._make_layer", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet._make_layer", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet._make_layer", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet._make_layer", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet._make_pred_layer", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet._make_pred_layer", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet._make_pred_layer", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "is_teacher", "=", "False", ",", "multiscale", "=", "False", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "multiscale", "=", "multiscale", "\n", "self", ".", "is_teacher", "=", "is_teacher", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "# self.proj = ProjectionHead(2048)", "\n", "self", ".", "is_train", "=", "True", "\n", "if", "is_teacher", ":", "\n", "            ", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module2", ",", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module2", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "bn_pretrain", "=", "nn", ".", "BatchNorm2d", "(", "2048", ",", "affine", "=", "affine_par", ")", "\n", "# if self.multiscale:", "\n", "#     self.layer5 = self._make_pred_layer(Classifier_Module2, 1024, [6, 12, 18, 24], [6, 12, 18, 24], num_classes)", "\n", "# else:", "\n", "#     self.layer5 = self._make_pred_layer(Classifier_Module2, 2048, [6, 12, 18, 24], [6, 12, 18, 24], num_classes)", "\n", "# self.layer6 = self._make_pred_layer(Classifier_Module2, 2048, [6, 12, 18, 24], [6, 12, 18, 24], num_classes)", "\n", "# self.features = None", "\n", "", "self", ".", "out", "=", "None", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet._make_layer": [[247, 263], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "# for i in downsample._modules['1'].parameters():", "\n", "#     i.requires_grad = False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "#return SublinearSequential(*list(layers.children()))", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet._make_pred_layer": [[264, 266], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.forward": [[266, 290], ["DeeplabV2.ResNet.conv1", "DeeplabV2.ResNet.bn1", "DeeplabV2.ResNet.relu", "DeeplabV2.ResNet.maxpool", "DeeplabV2.ResNet.layer1", "DeeplabV2.ResNet.layer2", "DeeplabV2.ResNet.layer3", "DeeplabV2.ResNet.layer4", "DeeplabV2.ResNet.layer5", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DeeplabV2.ResNet.layer6", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "self", ".", "is_teacher", ":", "\n", "            ", "x1", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x1", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "x1", ",", "x", "\n", "\n", "", "else", ":", "\n", "# x1=self.bn_pretrain(x)", "\n", "# x_adv = self.get_r_adv(x)", "\n", "            ", "x1", "=", "self", ".", "layer6", "(", "x", ",", "get_feat", "=", "True", ")", "\n", "\n", "self", ".", "features", "=", "x1", "[", "'feat'", "]", "\n", "self", ".", "out", "=", "x1", "[", "'out'", "]", "\n", "x_out", "=", "F", ".", "interpolate", "(", "x1", "[", "'out'", "]", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "x_out", ",", "x", "\n", "", "", "def", "forward_adv", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.forward_adv": [[290, 317], ["DeeplabV2.ResNet.conv1", "DeeplabV2.ResNet.bn1", "DeeplabV2.ResNet.relu", "DeeplabV2.ResNet.maxpool", "DeeplabV2.ResNet.layer1", "DeeplabV2.ResNet.layer2", "DeeplabV2.ResNet.layer3", "DeeplabV2.ResNet.layer4", "DeeplabV2.ResNet.get_r_adv", "DeeplabV2.ResNet.layer5", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DeeplabV2.ResNet.layer5", "torch.interpolate", "torch.interpolate", "torch.interpolate", "DeeplabV2.ResNet.get_r_adv", "DeeplabV2.ResNet.layer6", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.get_r_adv", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.get_r_adv"], ["", "", "def", "forward_adv", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "self", ".", "is_teacher", ":", "\n", "            ", "x_adv", "=", "self", ".", "get_r_adv", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x1", "=", "F", ".", "interpolate", "(", "x1", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "x1_adv", "=", "self", ".", "layer5", "(", "x_adv", ")", "\n", "x1_adv", "=", "F", ".", "interpolate", "(", "x1_adv", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "x1", ",", "x", ",", "x1_adv", ",", "x_adv", "\n", "", "else", ":", "\n", "# x1=self.bn_pretrain(x)", "\n", "            ", "x_adv", "=", "self", ".", "get_r_adv", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer6", "(", "x", ",", "get_feat", "=", "True", ")", "\n", "\n", "self", ".", "features", "=", "x1", "[", "'feat'", "]", "\n", "self", ".", "out", "=", "x1", "[", "'out'", "]", "\n", "x1", "=", "F", ".", "interpolate", "(", "x1", "[", "'out'", "]", ",", "(", "H", ",", "W", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "return", "x1", ",", "x", ",", "x_adv", "\n", "", "", "def", "disable_train", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.disable_train": [[317, 319], ["None"], "methods", ["None"], ["", "", "def", "disable_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_train", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.enable_train": [[320, 322], ["None"], "methods", ["None"], ["", "def", "enable_train", "(", "self", ")", ":", "\n", "        ", "self", ".", "is_train", "=", "True", "\n", "", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.get_1x_lr_params_NOscale": [[322, 345], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.get_10x_lr_params": [[346, 360], ["b.append", "b.append", "range", "DeeplabV2.ResNet.layer5.parameters", "DeeplabV2.ResNet.layer6.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "# b.append(self.proj.parameters())", "\n", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "#b.append(self.layer7.parameters())", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.optim_parameters": [[361, 368], ["isinstance", "DeeplabV2.ResNet.get_1x_lr_params_NOscale", "DeeplabV2.ResNet.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "if", "isinstance", "(", "args", ",", "float", ")", ":", "\n", "            ", "lr", "=", "args", "\n", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "learning_rate", "\n", "", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "lr", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "lr", "}", "]", "\n", "", "def", "get_features", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.get_features": [[368, 370], ["None"], "methods", ["None"], ["", "def", "get_features", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "features", "\n", "", "def", "get_outputs", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.get_outputs": [[370, 372], ["None"], "methods", ["None"], ["", "def", "get_outputs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.get_r_adv": [[373, 401], ["x.detach", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "torch.rand().sub().to", "DeeplabV2._l2_normalize", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax", "torch.softmax", "torch.softmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "_l2_normalize.requires_grad_", "torch.softmax", "torch.softmax", "torch.softmax", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div.backward", "DeeplabV2._l2_normalize", "decoder", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "torch.rand().sub", "decoder", "x.size", "x.size", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2._l2_normalize", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.backward", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2._l2_normalize"], ["", "def", "get_r_adv", "(", "self", ",", "x", ",", "it", "=", "1", ",", "xi", "=", "1e-1", ",", "eps", "=", "10.0", ")", ":", "\n", "        ", "\"\"\"\n        Virtual Adversarial Training\n        https://arxiv.org/abs/1704.03976\n        \"\"\"", "\n", "if", "self", ".", "is_teacher", ":", "\n", "            ", "decoder", "=", "self", ".", "layer5", "\n", "", "else", ":", "\n", "            ", "decoder", "=", "self", ".", "layer6", "\n", "", "x_detached", "=", "x", ".", "detach", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pred", "=", "F", ".", "softmax", "(", "decoder", "(", "x_detached", ")", ",", "dim", "=", "1", ")", "\n", "pred", "=", "F", ".", "interpolate", "(", "pred", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "d", "=", "torch", ".", "rand", "(", "x", ".", "shape", ")", ".", "sub", "(", "0.5", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "d", "=", "_l2_normalize", "(", "d", ")", "\n", "\n", "for", "_", "in", "range", "(", "it", ")", ":", "\n", "            ", "d", ".", "requires_grad_", "(", ")", "\n", "pred_hat", "=", "F", ".", "softmax", "(", "decoder", "(", "x_detached", "+", "xi", "*", "d", ")", ",", "dim", "=", "1", ")", "\n", "pred_hat", "=", "F", ".", "interpolate", "(", "pred_hat", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "logp_hat", "=", "F", ".", "log_softmax", "(", "pred_hat", ",", "dim", "=", "1", ")", "\n", "adv_distance", "=", "F", ".", "kl_div", "(", "logp_hat", ",", "pred", ",", "reduction", "=", "'batchmean'", ")", "\n", "adv_distance", ".", "backward", "(", ")", "\n", "d", "=", "_l2_normalize", "(", "d", ".", "grad", ")", "\n", "# decoder.zero_grad()", "\n", "\n", "", "r_adv", "=", "d", "*", "eps", "\n", "return", "r_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.FCDiscriminator.__init__": [[450, 460], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "ndf", "=", "64", ")", ":", "\n", "        ", "super", "(", "FCDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_classes", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "#self.up_sample = nn.Upsample(scale_factor=32, mode='bilinear')", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.FCDiscriminator.forward": [[464, 480], ["DeeplabV2.FCDiscriminator.register_hook", "DeeplabV2.FCDiscriminator.conv1", "DeeplabV2.FCDiscriminator.leaky_relu", "DeeplabV2.FCDiscriminator.conv2", "DeeplabV2.FCDiscriminator.leaky_relu", "DeeplabV2.FCDiscriminator.conv3", "DeeplabV2.FCDiscriminator.leaky_relu", "DeeplabV2.FCDiscriminator.conv4", "DeeplabV2.FCDiscriminator.leaky_relu", "DeeplabV2.FCDiscriminator.classifier", "DeeplabV2.grl_hook"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.grl_hook"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", "*", "1.0", "\n", "x", ".", "register_hook", "(", "grl_hook", "(", "1.0", ")", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "#x = self.up_sample(x)", "\n", "#x = self.sigmoid(x)", "\n", "\n", "return", "x", "\n", "", "", "def", "grl_hook", "(", "coeff", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ProjectionHead.__init__": [[486, 499], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "proj_dim", "=", "256", ",", "proj", "=", "'convmlp'", ",", "bn_type", "=", "'inplace_abn'", ")", ":", "\n", "        ", "super", "(", "ProjectionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Log.info('proj_dim: {}'.format(proj_dim))", "\n", "\n", "if", "proj", "==", "'linear'", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "proj_dim", ",", "kernel_size", "=", "1", ")", "\n", "", "elif", "proj", "==", "'convmlp'", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_in", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim_in", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "proj_dim", ",", "kernel_size", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ProjectionHead.forward": [[501, 503], ["torch.normalize", "torch.normalize", "torch.normalize", "DeeplabV2.ProjectionHead.proj"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "normalize", "(", "self", ".", "proj", "(", "x", ")", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.outS": [[7, 13], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.conv3x3": [[15, 19], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.Res_Deeplab": [[403, 406], ["DeeplabV2.ResNet"], "function", ["None"], ["", "", "def", "Res_Deeplab", "(", "num_classes", "=", "21", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.Deeplab": [[408, 448], ["DeeplabV2.ResNet", "torch.load", "torch.load", "torch.load", "ResNet.load_state_dict", "print"], "function", ["None"], ["", "def", "Deeplab", "(", "num_classes", "=", "21", ",", "init_stu", "=", "None", ")", ":", "\n", "# stu_model = ResNet(Bottleneck, [3, 4, 23, 3], num_classes,is_teacher=False)", "\n", "# tea_model_src  = ResNet(Bottleneck, [3, 4, 23, 3], num_classes,is_teacher=True)", "\n", "    ", "tea_model_tar", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ",", "is_teacher", "=", "True", ")", "\n", "# pretrain_dict = torch.load(init_stu)['state_dict']", "\n", "# model_dict = {}", "\n", "# state_dict = stu_model.state_dict()", "\n", "# for k, v in pretrain_dict.items():", "\n", "#     if k in state_dict:", "\n", "#         model_dict[k] = v", "\n", "# state_dict.update(model_dict)", "\n", "# stu_model.load_state_dict(state_dict)", "\n", "# print(\"successfully initial the parameters of stu model!\")", "\n", "#", "\n", "# params = torch.load(init_stu)", "\n", "# new_params = tea_model_src.state_dict().copy()", "\n", "# for i in params:", "\n", "#     if 'module' in i:", "\n", "#         i_ = i.replace('module.', '')", "\n", "#         new_params[i_] = params[i]", "\n", "#     else:", "\n", "#         new_params[i] = params[i]", "\n", "# tea_model_src.load_state_dict(params, strict=True)", "\n", "# pretrain_dict = torch.load(init_tea_src)", "\n", "# model_dict = {}", "\n", "# state_dict = tea_model_src.state_dict()", "\n", "# for k, v in pretrain_dict.items():", "\n", "#     if k in state_dict:", "\n", "#         model_dict[k] = v", "\n", "# state_dict.update(model_dict)", "\n", "# tea_model_src.load_state_dict(state_dict)", "\n", "# print(\"successfully initial the parameters of tea src model!\")", "\n", "\n", "params", "=", "torch", ".", "load", "(", "init_stu", ")", "\n", "\n", "tea_model_tar", ".", "load_state_dict", "(", "params", ",", "strict", "=", "True", ")", "\n", "print", "(", "\"successfully initial the parameters of tea tar model!\"", ")", "\n", "\n", "\n", "return", "tea_model_tar", "\n", "", "class", "FCDiscriminator", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.grl_hook": [[480, 485], ["grad.clone"], "function", ["None"], ["", "", "def", "grl_hook", "(", "coeff", ")", ":", "\n", "    ", "def", "fun1", "(", "grad", ")", ":", "\n", "        ", "return", "-", "coeff", "*", "grad", ".", "clone", "(", ")", "\n", "\n", "", "return", "fun1", "\n", "", "class", "ProjectionHead", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2._l2_normalize": [[504, 509], ["d.view", "torch.norm", "torch.norm", "torch.norm", "range", "d.dim"], "function", ["None"], ["", "", "def", "_l2_normalize", "(", "d", ")", ":", "\n", "# Normalizing per batch axis", "\n", "    ", "d_reshaped", "=", "d", ".", "view", "(", "d", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "*", "(", "1", "for", "_", "in", "range", "(", "d", ".", "dim", "(", ")", "-", "2", ")", ")", ")", "\n", "d", "/=", "torch", ".", "norm", "(", "d_reshaped", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-8", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[64, 68], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 48], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.replicate.patch_replication_callback": [[70, 95], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.SyncMaster.__init__": [[67, 77], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.SyncMaster.__getstate__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.SyncMaster.__setstate__": [[81, 83], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.SyncMaster.register_slave": [[84, 101], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.SyncMaster.run_master": [[102, 134], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.SyncMaster.nr_slaves": [[135, 138], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[16, 29], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "'NaN'", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "\n", "'Tensor close check failed\\n'", "\n", "'adiff={}\\n'", "\n", "'rdiff={}\\n'", "\n", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ")", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[52, 67], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ",", "track_running_stats", "=", "True", ")", ":", "\n", "        ", "assert", "ReduceAddCoalesced", "is", "not", "None", ",", "'Can not use Synchronized Batch Normalization without CUDA support.'", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ",", "\n", "track_running_stats", "=", "track_running_stats", ")", "\n", "\n", "if", "not", "self", ".", "track_running_stats", ":", "\n", "            ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "'track_running_stats=False is not supported by the SynchronizedBatchNorm.'", ")", "\n", "\n", "", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[68, 99], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[100, 109], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[110, 132], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[133, 151], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "'no_grad'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[209, 213], ["ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[271, 275], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[334, 338], ["input.dim", "ValueError", "input.dim"], "methods", ["None"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._sum_ft": [[37, 40], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm._unsqueeze_ft": [[42, 45], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[340, 353], ["None"], "function", ["None"], ["", "", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm.convert_model": [[355, 397], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ",", "device_ids", "=", "module", ".", "device_ids", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "[", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", "]", ",", "\n", "[", "SynchronizedBatchNorm1d", ",", "\n", "SynchronizedBatchNorm2d", ",", "\n", "SynchronizedBatchNorm3d", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[27, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__", "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[39, 42], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[43, 47], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[48, 74], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "\n", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "\n", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "\n", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "\n", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.EMA.__init__": [[41, 45], ["copy.deepcopy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "alpha", ")", ":", "\n", "        ", "self", ".", "step", "=", "0", "\n", "self", ".", "model", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.EMA.update": [[46, 51], ["min", "zip", "ldbe_trainer.EMA.model.parameters", "model.parameters"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "model", ")", ":", "\n", "        ", "decay", "=", "min", "(", "1", "-", "1", "/", "(", "self", ".", "step", "+", "1", ")", ",", "self", ".", "alpha", ")", "\n", "for", "ema_param", ",", "param", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "ema_param", ".", "data", "=", "decay", "*", "ema_param", ".", "data", "+", "(", "1", "-", "decay", ")", "*", "param", ".", "data", "\n", "", "self", ".", "step", "+=", "1", "\n", "", "", "def", "generate_class_mask", "(", "pseudo_labels", ",", "pseudo_labels2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.__init__": [[85, 92], ["ldbe_trainer.Trainer.model.train", "ldbe_trainer.EMA"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.train"], ["    ", "def", "__init__", "(", "self", ",", "model_stu", ",", "config", ",", "writer", ")", ":", "\n", "        ", "self", ".", "model", "=", "model_stu", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "ema", "=", "EMA", "(", "self", ".", "model", ",", "0.99", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "writer", "=", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.entropy_loss": [[93, 98], ["torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "entropy_loss", "(", "self", ",", "p", ")", ":", "\n", "        ", "p", "=", "F", ".", "softmax", "(", "p", ",", "dim", "=", "1", ")", "\n", "log_p", "=", "F", ".", "log_softmax", "(", "p", ",", "dim", "=", "1", ")", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "p", "*", "log_p", ",", "dim", "=", "1", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.dis_iter": [[99, 117], ["img_s.cuda.cuda.cuda", "label_s.long().cuda.long().cuda.long().cuda", "ldbe_trainer.Trainer.model", "ldbe_trainer.compute_unsupervised_loss", "loss.backward", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ldbe_trainer.Trainer.ema.model", "torch.max", "torch.max", "torch.max", "torch.max", "ldbe_trainer.generate_unsup_data", "label_s.long().cuda.long().cuda.long", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.compute_unsupervised_loss", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.backward", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.generate_unsup_data"], ["", "def", "dis_iter", "(", "self", ",", "batch", ")", ":", "\n", "        ", "img_s", ",", "label_s", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "img_s", ".", "shape", "\n", "img_s", "=", "img_s", ".", "cuda", "(", ")", "\n", "label_s", "=", "label_s", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pred_u", ",", "_", "=", "self", ".", "ema", ".", "model", "(", "img_s", ")", "\n", "pseudo_logits", ",", "pseudo_labels", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "pred_u", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "\n", "pseudo_labels", "[", "label_s", "!=", "255", "]", "=", "label_s", "[", "label_s", "!=", "255", "]", "# use selected class-balanced label", "\n", "pseudo_logits", "[", "label_s", "!=", "255", "]", "=", "1.0", "\n", "train_u_aug_data", ",", "train_u_aug_label", ",", "train_u_aug_logits", "=", "generate_unsup_data", "(", "img_s", ",", "pseudo_labels", ",", "pseudo_logits", ")", "\n", "", "pred_stu", ",", "feat_stu", "=", "self", ".", "model", "(", "train_u_aug_data", ")", "\n", "loss_s", "=", "compute_unsupervised_loss", "(", "pred_stu", ",", "train_u_aug_label", ",", "train_u_aug_logits", ",", "0.97", ")", "\n", "loss", "=", "loss_s", "\n", "self", ".", "losses", ".", "loss_s", "=", "loss_s", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.iter": [[118, 141], ["label_s.view.view.long().cuda", "ldbe_trainer.Trainer.model.forward", "pred_s.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "torch.softmax", "torch.softmax", "label_s.view.view.view", "torch.cross_entropy", "torch.cross_entropy", "ldbe_trainer.Trainer.entropy_loss", "loss_e.mean.mean.mean", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.log", "torch.log", "torch.log", "torch.log", "labels_neg[].squeeze().detach", "criterion_nll", "loss.backward", "img_s.cuda", "label_s.view.view.long", "random.randint", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "pred_s.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "labels_neg[].squeeze", "pred_s.permute().contiguous().view.permute().contiguous().view.permute"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.forward", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.entropy_loss", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.backward"], ["", "def", "iter", "(", "self", ",", "batch", ",", "r", ")", ":", "\n", "        ", "img_s", ",", "label_s", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "img_s", ".", "shape", "\n", "pred_s", "=", "self", ".", "model", ".", "forward", "(", "img_s", ".", "cuda", "(", ")", ")", "[", "0", "]", "\n", "label_s", "=", "label_s", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "config", ".", "method", "==", "'ld'", ":", "\n", "            ", "pred_s", "=", "pred_s", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "pred_s_softmax", "=", "F", ".", "softmax", "(", "pred_s", ",", "-", "1", ")", "\n", "label_s", "=", "label_s", ".", "view", "(", "-", "1", ")", "\n", "loss_s", "=", "F", ".", "cross_entropy", "(", "pred_s", ",", "label_s", ",", "ignore_index", "=", "255", ")", "\n", "loss_e", "=", "self", ".", "entropy_loss", "(", "pred_s", ")", "\n", "loss_e", "=", "loss_e", ".", "mean", "(", ")", "\n", "self", ".", "losses", ".", "loss_source", "=", "loss_s", "\n", "self", ".", "losses", ".", "loss_entropy", "=", "loss_e", "\n", "width", "=", "3", "\n", "k", "=", "self", ".", "config", ".", "num_classes", "//", "2", "+", "random", ".", "randint", "(", "-", "width", ",", "width", ")", "\n", "_", ",", "labels_neg", "=", "torch", ".", "topk", "(", "pred_s_softmax", ",", "k", ",", "dim", "=", "1", ",", "sorted", "=", "True", ")", "\n", "s_neg", "=", "torch", ".", "log", "(", "torch", ".", "clamp", "(", "1.", "-", "pred_s_softmax", ",", "min", "=", "1e-5", ",", "max", "=", "1.", ")", ")", "\n", "labels_neg", "=", "labels_neg", "[", ":", ",", "-", "1", "]", ".", "squeeze", "(", ")", ".", "detach", "(", ")", "\n", "loss_neg", "=", "criterion_nll", "(", "s_neg", ",", "labels_neg", ")", "\n", "self", ".", "losses", ".", "loss_neg", "=", "loss_neg", "\n", "loss", "=", "loss_s", "+", "1", "*", "loss_e", "+", "1", "*", "loss_neg", "\n", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.train": [[142, 224], ["range", "neptune.init", "neptune.create_experiment", "ldbe_trainer.Trainer.resume", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "np.random.seed", "random.seed", "ldbe_trainer.Trainer.model.train", "get_list", "get_list", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "dataset.dataset.dataset.init_target_dataset", "ldbe_trainer.Trainer.validate", "range", "neptune.stop", "time.clock", "print", "ldbe_trainer.Trainer.gene_thres", "print", "ldbe_trainer.Trainer.save_pred", "os.join", "time.clock", "print", "ldbe_trainer.Trainer.model.optim_parameters", "tqdm", "ldbe_trainer.Trainer.validate", "math.sqrt", "str", "enumerate", "ldbe_trainer.Trainer.model.train", "easydict.EasyDict", "ldbe_trainer.Trainer.optim.zero_grad", "utils.optimize.adjust_learning_rate", "ldbe_trainer.Trainer.optim.step", "ldbe_trainer.Trainer.ema.update", "ldbe_trainer.Trainer.iter", "ldbe_trainer.Trainer.print_loss", "ldbe_trainer.Trainer.validate", "ldbe_trainer.Trainer.save_model", "len", "ldbe_trainer.Trainer.dis_iter"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.source_only_trainer.Trainer.resume", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.flatwhite.get_list", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.flatwhite.get_list", "home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.dataset.init_target_dataset", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.validate", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.gene_thres", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.save_pred", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.optim_parameters", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.validate", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.optimize.adjust_learning_rate", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.EMA.update", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.iter", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.print_loss", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.validate", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.save_model", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.dis_iter"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "neptune", ":", "\n", "            ", "neptune", ".", "init", "(", "project_qualified_name", "=", "\"solacex/segmentation-DA\"", ")", "\n", "neptune", ".", "create_experiment", "(", "params", "=", "self", ".", "config", ",", "name", "=", "self", ".", "config", "[", "\"note\"", "]", ")", "\n", "", "if", "self", ".", "config", ".", "resume", ":", "\n", "            ", "self", ".", "resume", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "round_start", "=", "0", "\n", "\n", "", "for", "r", "in", "range", "(", "self", ".", "round_start", ",", "self", ".", "config", ".", "round", ")", ":", "\n", "            ", "torch", ".", "manual_seed", "(", "1234", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "1234", ")", "\n", "np", ".", "random", ".", "seed", "(", "1234", ")", "\n", "random", ".", "seed", "(", "1234", ")", "\n", "self", ".", "class_num", "=", "19", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "self", ".", "source_all", "=", "get_list", "(", "self", ".", "config", ".", "gta5", ".", "data_list", ")", "\n", "self", ".", "target_all", "=", "get_list", "(", "self", ".", "config", ".", "cityscapes", ".", "data_list", ")", "\n", "\n", "if", "self", ".", "config", ".", "method", "==", "'ld'", "or", "self", ".", "config", ".", "method", "==", "\"be\"", ":", "\n", "                ", "start", "=", "time", ".", "clock", "(", ")", "\n", "print", "(", "\"cb_prop:{}\"", ".", "format", "(", "self", ".", "config", ".", "cb_prop", ")", ")", "\n", "self", ".", "cb_thres", "=", "self", ".", "gene_thres", "(", "self", ".", "config", ".", "cb_prop", ")", "\n", "for", "i", "in", "self", ".", "cb_thres", ":", "\n", "                    ", "if", "self", ".", "cb_thres", "[", "i", "]", ">", "0.999999999", ":", "\n", "                        ", "self", ".", "cb_thres", "[", "i", "]", "=", "0.999999999", "\n", "", "", "print", "(", "self", ".", "cb_thres", ")", "\n", "self", ".", "save_pred", "(", "r", ")", "\n", "self", ".", "plabel_path", "=", "osp", ".", "join", "(", "self", ".", "config", ".", "plabel", ",", "self", ".", "config", ".", "note", ",", "str", "(", "r", ")", ")", "\n", "# self.plabel_path = osp.join(self.config.plabel, self.config.note, str(r))", "\n", "end", "=", "time", ".", "clock", "(", ")", "\n", "print", "(", "'Running time: %s Seconds'", "%", "(", "end", "-", "start", ")", ")", "\n", "self", ".", "config", ".", "cb_prop", "+=", "0.05", "\n", "", "else", ":", "\n", "                ", "self", ".", "plabel_path", "=", "None", "\n", "\n", "\n", "", "self", ".", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "model", ".", "optim_parameters", "(", "self", ".", "config", ".", "learning_rate", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "learning_rate", ",", "\n", "momentum", "=", "self", ".", "config", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "self", ".", "loader", ",", "_", "=", "dataset", ".", "init_target_dataset", "(", "self", ".", "config", ",", "plabel_path", "=", "self", ".", "plabel_path", ",", "\n", "target_selected", "=", "self", ".", "target_all", ")", "\n", "self", ".", "config", ".", "num_steps", "=", "5000", "\n", "cu_iter", "=", "0", "\n", "self", ".", "gamma", "=", "1.0", "*", "(", "r", "+", "1", ")", "\n", "miou", "=", "self", ".", "validate", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", ".", "epochs", ")", ":", "\n", "                ", "for", "i_iter", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "self", ".", "loader", ")", ")", ":", "\n", "# self.save_model('STNTHIA_source_only',0,0)", "\n", "# print('done')", "\n", "# self.model.module.disable_train()", "\n", "# miou = self.validate()", "\n", "                    ", "cu_step", "=", "epoch", "*", "len", "(", "self", ".", "loader", ")", "+", "i_iter", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "train", "(", ")", "\n", "# self.model.module.enable_train()", "\n", "self", ".", "losses", "=", "edict", "(", "{", "}", ")", "\n", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate", "(", "self", ".", "optim", ",", "cu_step", ",", "self", ".", "config", ")", "\n", "if", "self", ".", "config", ".", "method", "==", "'ld'", ":", "\n", "                        ", "self", ".", "iter", "(", "batch", ",", "r", ")", "\n", "", "elif", "self", ".", "config", ".", "method", "==", "'be'", ":", "\n", "                        ", "self", ".", "dis_iter", "(", "batch", ")", "\n", "\n", "", "self", ".", "optim", ".", "step", "(", ")", "\n", "self", ".", "ema", ".", "update", "(", "self", ".", "model", ")", "\n", "if", "i_iter", "%", "self", ".", "config", ".", "print_freq", "==", "0", ":", "\n", "                        ", "self", ".", "print_loss", "(", "i_iter", ")", "\n", "\n", "", "if", "i_iter", "%", "self", ".", "config", ".", "val_freq", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "# self.model.module.disable_train()", "\n", "                        ", "miou", "=", "self", ".", "validate", "(", ")", "\n", "", "if", "i_iter", "%", "self", ".", "config", ".", "save_freq", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "                        ", "self", ".", "save_model", "(", "self", ".", "config", ".", "source", ",", "cu_step", ",", "miou", ")", "\n", "", "", "miou", "=", "self", ".", "validate", "(", ")", "\n", "", "self", ".", "config", ".", "learning_rate", "=", "self", ".", "config", ".", "learning_rate", "/", "(", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "", "if", "self", ".", "config", ".", "neptune", ":", "\n", "            ", "neptune", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.resume": [[225, 233], ["int", "int", "print", "math.ceil", "math.sqrt"], "methods", ["None"], ["", "", "def", "resume", "(", "self", ")", ":", "\n", "        ", "iter_num", "=", "self", ".", "config", ".", "init_weight", "[", "-", "5", "]", "# .split(\".\")[0].split(\"_\")[1]", "\n", "iter_num", "=", "int", "(", "iter_num", ")", "\n", "self", ".", "round_start", "=", "int", "(", "math", ".", "ceil", "(", "(", "iter_num", "+", "1", ")", "/", "self", ".", "config", ".", "epochs", ")", ")", "\n", "print", "(", "\"Resume from Round {}\"", ".", "format", "(", "self", ".", "round_start", ")", ")", "\n", "if", "self", ".", "config", ".", "lr_decay", "==", "\"sqrt\"", ":", "\n", "            ", "self", ".", "config", ".", "learning_rate", "=", "self", ".", "config", ".", "learning_rate", "/", "(", "\n", "(", "math", ".", "sqrt", "(", "2", ")", ")", "**", "self", ".", "round_start", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.gene_thres": [[235, 276], ["print", "dataset.dataset.dataset.init_test_dataset", "tqdm", "probs.keys", "print", "enumerate", "pred_probs.squeeze.squeeze.squeeze", "torch.argmax().squeeze", "torch.argmax().squeeze", "torch.argmax().squeeze", "torch.argmax().squeeze", "range", "len", "np.array", "np.sort", "int", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax", "torch.softmax", "torch.softmax.max", "cls_mask.sum", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "cls_probs.detach().cpu().numpy().tolist.detach().cpu().numpy().tolist.detach().cpu().numpy().tolist", "cls_probs.detach().cpu().numpy().tolist.detach().cpu().numpy().tolist.sort", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "probs[].extend", "ldbe_trainer.Trainer.model.forward", "cls_probs.detach().cpu().numpy().tolist.detach().cpu().numpy().tolist.detach().cpu().numpy", "img.cuda", "cls_probs.detach().cpu().numpy().tolist.detach().cpu().numpy().tolist.detach().cpu", "cls_probs.detach().cpu().numpy().tolist.detach().cpu().numpy().tolist.detach"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.dataset.init_test_dataset", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.forward"], ["", "", "def", "gene_thres", "(", "self", ",", "prop", ",", "num_cls", "=", "19", ")", ":", "\n", "        ", "print", "(", "'[Calculate Threshold using config.cb_prop]'", ")", "# r in section 3.3", "\n", "\n", "probs", "=", "{", "}", "\n", "freq", "=", "{", "}", "\n", "loader", "=", "dataset", ".", "init_test_dataset", "(", "self", ".", "config", ",", "self", ".", "config", ".", "target", ",", "set", "=", "\"train\"", ",", "selected", "=", "self", ".", "target_all", ",", "\n", "batchsize", "=", "1", ")", "\n", "for", "index", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "loader", ")", ")", ":", "\n", "            ", "img", ",", "label", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "F", ".", "softmax", "(", "self", ".", "model", ".", "forward", "(", "img", ".", "cuda", "(", ")", ")", "[", "0", "]", ",", "dim", "=", "1", ")", "\n", "", "pred_probs", "=", "pred", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "pred_probs", "=", "pred_probs", ".", "squeeze", "(", ")", "\n", "pred_label", "=", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "for", "i", "in", "range", "(", "num_cls", ")", ":", "\n", "                ", "cls_mask", "=", "pred_label", "==", "i", "\n", "cnt", "=", "cls_mask", ".", "sum", "(", ")", "\n", "if", "cnt", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "cls_probs", "=", "torch", ".", "masked_select", "(", "pred_probs", ",", "cls_mask", ")", "\n", "cls_probs", "=", "cls_probs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "cls_probs", ".", "sort", "(", ")", "\n", "if", "i", "not", "in", "probs", ":", "\n", "                    ", "probs", "[", "i", "]", "=", "cls_probs", "[", ":", ":", "5", "]", "# reduce the consumption of memory", "\n", "", "else", ":", "\n", "                    ", "probs", "[", "i", "]", ".", "extend", "(", "cls_probs", "[", ":", ":", "5", "]", ")", "\n", "\n", "", "", "", "growth", "=", "{", "}", "\n", "thres", "=", "{", "}", "\n", "for", "k", "in", "probs", ".", "keys", "(", ")", ":", "\n", "            ", "cls_prob", "=", "probs", "[", "k", "]", "\n", "cls_total", "=", "len", "(", "cls_prob", ")", "\n", "freq", "[", "k", "]", "=", "cls_total", "\n", "cls_prob", "=", "np", ".", "array", "(", "cls_prob", ")", "\n", "cls_prob", "=", "np", ".", "sort", "(", "cls_prob", ")", "\n", "index", "=", "int", "(", "cls_total", "*", "prop", ")", "\n", "cls_thres", "=", "cls_prob", "[", "-", "index", "]", "\n", "cls_thres2", "=", "cls_prob", "[", "index", "]", "\n", "thres", "[", "k", "]", "=", "cls_thres", "\n", "", "print", "(", "thres", ")", "\n", "return", "thres", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.save_pred": [[277, 329], ["print", "dataset.dataset.dataset.init_test_dataset", "nn.Upsample", "os.join", "mkdir", "utils.pool.Pool", "utils.meters.AverageMeter", "utils.meters.AverageMeter", "utils.meters.GroupAverageMeter", "print", "str", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm", "neptune.send_metric", "neptune.send_metric", "range", "enumerate", "label.cuda.cuda.cuda", "img_name.replace.replace.replace", "os.join", "nn.Upsample.", "utils.func.thres_cb_plabel", "ldbe_trainer.Trainer.pool.update_pool", "utils.func.Acc", "utils.meters.AverageMeter.update", "utils.meters.AverageMeter.update", "utils.meters.GroupAverageMeter.update", "np.asarray.view", "np.asarray.cpu().numpy", "np.asarray", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "utils.meters.AverageMeter.avg.item", "utils.meters.AverageMeter.avg.item", "name[].split", "name[].split", "os.path.exists", "os.mkdir", "ldbe_trainer.Trainer.model.forward", "utils.func.gene_plabel_prop", "utils.func.mask_fusion", "image.cuda", "mask.float", "np.asarray.cpu", "img_name.replace.replace.split"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.dataset.init_test_dataset", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.flatwhite.mkdir", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.func.thres_cb_plabel", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.pool.Pool.update_pool", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.func.Acc", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.EMA.update", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.EMA.update", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.EMA.update", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.flatwhite.mkdir", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.forward", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.func.gene_plabel_prop", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.func.mask_fusion"], ["", "def", "save_pred", "(", "self", ",", "round", ")", ":", "\n", "# Using the threshold to generate pseudo labels and save  ", "\n", "        ", "print", "(", "\"[Generate pseudo labels]\"", ")", "\n", "loader", "=", "dataset", ".", "init_test_dataset", "(", "self", ".", "config", ",", "self", ".", "config", ".", "target", ",", "set", "=", "\"train\"", ",", "selected", "=", "self", ".", "target_all", ")", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "\n", "self", ".", "plabel_path", "=", "osp", ".", "join", "(", "self", ".", "config", ".", "plabel", ",", "self", ".", "config", ".", "note", ",", "str", "(", "round", ")", ")", "\n", "\n", "mkdir", "(", "self", ".", "plabel_path", ")", "\n", "self", ".", "config", ".", "target_data_dir", "=", "self", ".", "plabel_path", "\n", "self", ".", "pool", "=", "Pool", "(", ")", "# save the probability of pseudo labels for the pixel-wise similarity matchinng, which is detailed around Eq. (9)", "\n", "accs", "=", "AverageMeter", "(", ")", "# Counter", "\n", "props", "=", "AverageMeter", "(", ")", "# Counter", "\n", "cls_acc", "=", "GroupAverageMeter", "(", ")", "# Class-wise Acc/Prop of Pseudo labels", "\n", "\n", "self", ".", "mean_memo", "=", "{", "i", ":", "[", "]", "for", "i", "in", "range", "(", "self", ".", "config", ".", "num_classes", ")", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "index", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "loader", ")", ")", ":", "\n", "                ", "image", ",", "label", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "img_name", "=", "name", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "dir_name", "=", "name", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "img_name", "=", "img_name", ".", "replace", "(", "\"leftImg8bit\"", ",", "\"gtFine_labelIds\"", ")", "\n", "temp_dir", "=", "osp", ".", "join", "(", "self", ".", "plabel_path", ",", "dir_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "temp_dir", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "temp_dir", ")", "\n", "\n", "", "output", "=", "self", ".", "model", ".", "forward", "(", "image", ".", "cuda", "(", ")", ")", "[", "0", "]", "\n", "output", "=", "interp", "(", "output", ")", "\n", "# pseudo labels selected by glocal threshold", "\n", "mask", ",", "plabel", "=", "thres_cb_plabel", "(", "output", ",", "self", ".", "cb_thres", ",", "num_cls", "=", "self", ".", "config", ".", "num_classes", ")", "\n", "# pseudo labels selected by local threshold", "\n", "if", "round", ">=", "0", ":", "\n", "                    ", "local_prop", "=", "self", ".", "config", ".", "cb_prop", "\n", "mask2", ",", "plabel2", "=", "gene_plabel_prop", "(", "output", ",", "local_prop", ")", "\n", "mask", ",", "plabel", "=", "mask_fusion", "(", "output", ",", "mask", ",", "mask2", ")", "\n", "", "self", ".", "pool", ".", "update_pool", "(", "output", ",", "mask", "=", "mask", ".", "float", "(", ")", ")", "\n", "acc", ",", "prop", ",", "cls_dict", "=", "Acc", "(", "plabel", ",", "label", ",", "num_cls", "=", "self", ".", "config", ".", "num_classes", ")", "\n", "cnt", "=", "(", "plabel", "!=", "255", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "accs", ".", "update", "(", "acc", ",", "cnt", ")", "\n", "props", ".", "update", "(", "prop", ",", "1", ")", "\n", "cls_acc", ".", "update", "(", "cls_dict", ")", "\n", "plabel", "=", "plabel", ".", "view", "(", "1024", ",", "2048", ")", "\n", "plabel", "=", "plabel", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "plabel", "=", "np", ".", "asarray", "(", "plabel", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "plabelz", "=", "Image", ".", "fromarray", "(", "plabel", ")", "\n", "plabelz", ".", "save", "(", "\"%s/%s.png\"", "%", "(", "temp_dir", ",", "img_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", ")", "\n", "", "", "print", "(", "'The Accuracy :{:.2%} and proportion :{:.2%} of Pseudo Labels'", ".", "format", "(", "accs", ".", "avg", ".", "item", "(", ")", ",", "props", ".", "avg", ".", "item", "(", ")", ")", ")", "\n", "if", "self", ".", "config", ".", "neptune", ":", "\n", "            ", "neptune", ".", "send_metric", "(", "\"Acc\"", ",", "accs", ".", "avg", ")", "\n", "neptune", ".", "send_metric", "(", "\"Prop\"", ",", "props", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Trainer.save_model": [[332, 336], ["torch.save", "torch.save", "torch.save", "torch.save", "str", "ldbe_trainer.Trainer.model.state_dict", "os.join", "str", "str"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "source", ",", "iter", ",", "miou", ")", ":", "\n", "        ", "name", "=", "str", "(", "iter", ")", "+", "\"_miou\"", "+", "str", "(", "miou", ")", "\n", "tmp_name", "=", "\"_EntMin_\"", ".", "join", "(", "(", "source", ",", "str", "(", "name", ")", ")", ")", "+", "\".pth\"", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "self", ".", "config", "[", "\"snapshot\"", "]", ",", "tmp_name", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.Entropy": [[33, 39], ["input_.size", "torch.sum", "torch.sum", "torch.log", "torch.log"], "function", ["None"], ["def", "Entropy", "(", "input_", ")", ":", "\n", "    ", "bs", "=", "input_", ".", "size", "(", "0", ")", "\n", "epsilon", "=", "1e-7", "\n", "entropy", "=", "-", "input_", "*", "torch", ".", "log", "(", "input_", "+", "epsilon", ")", "\n", "entropy", "=", "torch", ".", "sum", "(", "entropy", ",", "dim", "=", "1", ")", "\n", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.generate_class_mask": [[51, 57], ["torch.unique", "torch.unique", "mask.float", "torch.randperm", "torch.randperm", "len", "pseudo_labels.unsqueeze", "len"], "function", ["None"], ["", "", "def", "generate_class_mask", "(", "pseudo_labels", ",", "pseudo_labels2", ")", ":", "\n", "    ", "labels", "=", "torch", ".", "unique", "(", "pseudo_labels", ")", "# all unique labels", "\n", "labels_select", "=", "labels", "[", "torch", ".", "randperm", "(", "len", "(", "labels", ")", ")", "]", "[", ":", "len", "(", "labels", ")", "//", "2", "]", "# randomly select half of labels", "\n", "\n", "mask", "=", "(", "pseudo_labels", ".", "unsqueeze", "(", "-", "1", ")", "==", "labels_select", ")", ".", "any", "(", "-", "1", ")", "\n", "return", "mask", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.generate_unsup_data": [[59, 75], ["range", "generate_class_mask().to", "new_data.append", "new_target.append", "new_logits.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_target.long", "ldbe_trainer.generate_class_mask"], "function", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.generate_class_mask"], ["", "def", "generate_unsup_data", "(", "data", ",", "target", ",", "logits", "=", "None", ")", ":", "\n", "    ", "batch_size", ",", "_", ",", "im_h", ",", "im_w", "=", "data", ".", "shape", "\n", "device", "=", "data", ".", "device", "\n", "\n", "new_data", "=", "[", "]", "\n", "new_target", "=", "[", "]", "\n", "new_logits", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "mix_mask", "=", "generate_class_mask", "(", "target", "[", "i", "]", ",", "target", "[", "(", "i", "+", "1", ")", "%", "batch_size", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "new_data", ".", "append", "(", "(", "data", "[", "i", "]", "*", "mix_mask", "+", "data", "[", "(", "i", "+", "1", ")", "%", "batch_size", "]", "*", "(", "1", "-", "mix_mask", ")", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "new_target", ".", "append", "(", "(", "target", "[", "i", "]", "*", "mix_mask", "+", "target", "[", "(", "i", "+", "1", ")", "%", "batch_size", "]", "*", "(", "1", "-", "mix_mask", ")", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "new_logits", ".", "append", "(", "(", "logits", "[", "i", "]", "*", "mix_mask", "+", "logits", "[", "(", "i", "+", "1", ")", "%", "batch_size", "]", "*", "(", "1", "-", "mix_mask", ")", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "new_data", ",", "new_target", ",", "new_logits", "=", "torch", ".", "cat", "(", "new_data", ")", ",", "torch", ".", "cat", "(", "new_target", ")", ",", "torch", ".", "cat", "(", "new_logits", ")", "\n", "return", "new_data", ",", "new_target", ".", "long", "(", ")", ",", "new_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.ldbe_trainer.compute_unsupervised_loss": [[76, 84], ["torch.cross_entropy", "torch.mean", "torch.mean", "logits.view().ge().sum", "valid_mask.view().sum", "torch.masked_select", "torch.masked_select", "logits.view().ge", "valid_mask.view", "logits.view"], "function", ["None"], ["", "def", "compute_unsupervised_loss", "(", "predict", ",", "target", ",", "logits", ",", "strong_threshold", ")", ":", "\n", "    ", "batch_size", "=", "predict", ".", "shape", "[", "0", "]", "\n", "valid_mask", "=", "(", "target", ">=", "0", ")", ".", "float", "(", ")", "# only count valid pixels", "\n", "\n", "weighting", "=", "logits", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "ge", "(", "strong_threshold", ")", ".", "sum", "(", "-", "1", ")", "/", "valid_mask", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "reduction", "=", "'none'", ",", "ignore_index", "=", "-", "1", ")", "\n", "weighted_loss", "=", "torch", ".", "mean", "(", "torch", ".", "masked_select", "(", "weighting", "[", ":", ",", "None", ",", "None", "]", "*", "loss", ",", "loss", ">", "0", ")", ")", "\n", "return", "weighted_loss", "\n", "", "class", "Trainer", "(", "BaseTrainer", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.source_only_trainer.Trainer.__init__": [[18, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "config", ",", "writer", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "writer", "=", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.source_only_trainer.Trainer.iter": [[24, 40], ["seg_label.long().cuda.long().cuda.long().cuda", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "loss.backward", "source_only_trainer.Trainer.model", "seg_label.long().cuda.long().cuda.long", "img.cuda"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.backward"], ["", "def", "iter", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "img", ",", "seg_label", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "\n", "seg_label", "=", "seg_label", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "# print(seg_label.unique())", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "\n", "seg_pred1", "=", "self", ".", "model", "(", "img", ".", "cuda", "(", ")", ")", "[", "'out'", "]", "\n", "seg_pred1", "=", "F", ".", "interpolate", "(", "seg_pred1", ",", "(", "h", ",", "w", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "seg_loss", "=", "F", ".", "cross_entropy", "(", "seg_pred1", ",", "seg_label", ",", "ignore_index", "=", "255", ")", "\n", "# print(torch.max(seg_label[seg_label!=255]))", "\n", "# seg_loss += F.cross_entropy(seg_pred2, seg_label, ignore_index=255)", "\n", "self", ".", "losses", ".", "seg_loss", "=", "seg_loss", "\n", "loss", "=", "seg_loss", "\n", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.source_only_trainer.Trainer.train": [[41, 77], ["dataset.dataset.dataset.init_source_dataset", "enumerate", "neptune.init", "neptune.create_experiment", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "adjust_learning_rate", "source_only_trainer.Trainer.optim.zero_grad", "easydict.EasyDict", "source_only_trainer.Trainer.iter", "source_only_trainer.Trainer.optim.step", "neptune.stop", "source_only_trainer.Trainer.model.module.optim_parameters", "source_only_trainer.Trainer.model.optim_parameters", "source_only_trainer.Trainer.print_loss", "source_only_trainer.Trainer.validate", "source_only_trainer.Trainer.model.train", "source_only_trainer.Trainer.save_model"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.dataset.init_source_dataset", "home.repos.pwc.inspect_result.fumyou13_ldbe.utils.optimize.adjust_learning_rate", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.iter", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.optim_parameters", "home.repos.pwc.inspect_result.fumyou13_ldbe.model.DeeplabV2.ResNet.optim_parameters", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.print_loss", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.validate", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.save_model"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "neptune", ":", "\n", "            ", "neptune", ".", "init", "(", "project_qualified_name", "=", "'solacex/segmentation-DA'", ")", "\n", "neptune", ".", "create_experiment", "(", "params", "=", "self", ".", "config", ",", "name", "=", "self", ".", "config", "[", "'note'", "]", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "multigpu", ":", "\n", "            ", "self", ".", "optim", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "module", ".", "optim_parameters", "(", "self", ".", "config", ".", "learning_rate", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "learning_rate", ",", "momentum", "=", "self", ".", "config", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optim", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "optim_parameters", "(", "self", ".", "config", ".", "learning_rate", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "learning_rate", ",", "momentum", "=", "self", ".", "config", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", ")", "\n", "\n", "", "self", ".", "loader", ",", "_", "=", "dataset", ".", "init_source_dataset", "(", "self", ".", "config", ")", "# , source_list=self.config.src_list)", "\n", "\n", "cu_iter", "=", "0", "\n", "for", "i_iter", ",", "batch", "in", "enumerate", "(", "self", ".", "loader", ")", ":", "\n", "# miou = self.validate()", "\n", "            ", "cu_iter", "+=", "1", "\n", "adjust_learning_rate", "(", "self", ".", "optim", ",", "cu_iter", ",", "self", ".", "config", ")", "\n", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "self", ".", "losses", "=", "edict", "(", "{", "}", ")", "\n", "losses", "=", "self", ".", "iter", "(", "batch", ")", "\n", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "if", "cu_iter", "%", "self", ".", "config", ".", "print_freq", "==", "0", ":", "\n", "                ", "self", ".", "print_loss", "(", "cu_iter", ")", "\n", "", "if", "self", ".", "config", ".", "val", "and", "cu_iter", "%", "self", ".", "config", ".", "val_freq", "==", "0", "and", "cu_iter", "!=", "0", ":", "\n", "                ", "miou", "=", "self", ".", "validate", "(", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "train", "(", ")", "\n", "", "if", "cu_iter", "%", "self", ".", "config", ".", "save_freq", "==", "0", "and", "cu_iter", "!=", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "i_iter", ")", "\n", "\n", "", "", "if", "self", ".", "config", ".", "neptune", ":", "\n", "            ", "neptune", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.source_only_trainer.Trainer.resume": [[78, 84], ["copy.deepcopy", "print", "math.sqrt"], "methods", ["None"], ["", "", "def", "resume", "(", "self", ")", ":", "\n", "        ", "self", ".", "tea", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "self", ".", "round_start", "=", "self", ".", "config", ".", "round_start", "# int(math.ceil(iter_num/self.config.num_steps) -1 )", "\n", "print", "(", "'Resume from Round {}'", ".", "format", "(", "self", ".", "round_start", ")", ")", "\n", "if", "self", ".", "config", ".", "lr_decay", "==", "'sqrt'", ":", "\n", "            ", "self", ".", "config", ".", "learning_rate", "=", "self", ".", "config", ".", "learning_rate", "/", "(", "(", "math", ".", "sqrt", "(", "2", ")", ")", "**", "self", ".", "round_start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.source_only_trainer.Trainer.save_best": [[85, 90], ["str", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "source_only_trainer.Trainer.model.state_dict", "os.join"], "methods", ["None"], ["", "", "def", "save_best", "(", "self", ",", "name", ")", ":", "\n", "        ", "name", "=", "str", "(", "name", ")", "\n", "if", "'pth'", "not", "in", "name", ":", "\n", "            ", "name", "=", "name", "+", "'.pth'", "\n", "", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "self", ".", "config", "[", "\"snapshot\"", "]", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.source_only_trainer.Trainer.save_model": [[91, 94], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "source_only_trainer.Trainer.model.state_dict", "os.join", "str"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "iter", ",", "rep_teacher", "=", "False", ")", ":", "\n", "        ", "tmp_name", "=", "'_'", ".", "join", "(", "(", "self", ".", "config", ".", "source", ",", "str", "(", "iter", ")", ")", ")", "+", "'.pth'", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "self", ".", "config", "[", "'snapshot'", "]", ",", "tmp_name", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.__init__": [[15, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "models", ",", "optimizers", ",", "loaders", ",", "up_s", ",", "up_t", ",", "config", ",", "writer", ")", ":", "\n", "        ", "self", ".", "model", "=", "models", "\n", "self", ".", "optim", "=", "optimizers", "\n", "self", ".", "loader", "=", "loaders", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "output", "=", "{", "}", "\n", "self", ".", "up_src", "=", "up_s", "\n", "self", ".", "up_tgt", "=", "up_t", "\n", "self", ".", "writer", "=", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.forward": [[25, 27], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "backward", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.backward": [[27, 29], ["None"], "methods", ["None"], ["", "def", "backward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.iter": [[30, 32], ["None"], "methods", ["None"], ["", "def", "iter", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.train": [[34, 47], ["range", "neptune.stop", "neptune.stop", "neptune.stop", "neptune.stop", "base_trainer.BaseTrainer.iter", "neptune.init", "neptune.init", "neptune.init", "neptune.init", "neptune.create_experiment", "neptune.create_experiment", "neptune.create_experiment", "neptune.create_experiment", "base_trainer.BaseTrainer.print_loss", "base_trainer.BaseTrainer.save_model", "base_trainer.BaseTrainer.validate"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.iter", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.print_loss", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.save_model", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.validate"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "for", "i_iter", "in", "range", "(", "self", ".", "config", ".", "num_steps", ")", ":", "\n", "            ", "losses", "=", "self", ".", "iter", "(", "i_iter", ")", "\n", "if", "i_iter", "==", "0", "and", "self", ".", "config", ".", "neptune", ":", "\n", "                ", "neptune", ".", "init", "(", "project_qualified_name", "=", "'solacex/segmentation-DA'", ")", "\n", "neptune", ".", "create_experiment", "(", "params", "=", "self", ".", "config", ",", "name", "=", "self", ".", "config", "[", "'note'", "]", ")", "\n", "", "if", "i_iter", "%", "self", ".", "config", ".", "print_freq", "==", "0", ":", "\n", "                ", "self", ".", "print_loss", "(", "i_iter", ")", "\n", "", "if", "i_iter", "%", "self", ".", "config", ".", "save_freq", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "i_iter", ")", "\n", "", "if", "self", ".", "config", ".", "val", "and", "i_iter", "%", "self", ".", "config", ".", "val_freq", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "                ", "self", ".", "validate", "(", ")", "\n", "", "", "neptune", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.save_model": [[48, 51], ["torch.save", "torch.save", "torch.save", "torch.save", "base_trainer.BaseTrainer.model.state_dict", "os.join", "str"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "iter", ")", ":", "\n", "        ", "tmp_name", "=", "'_'", ".", "join", "(", "(", "self", ".", "config", ".", "source", ",", "str", "(", "iter", ")", ")", ")", "+", "'.pth'", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "self", ".", "config", "[", "'snapshot'", "]", ",", "tmp_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.print_loss": [[52, 64], ["print", "base_trainer.BaseTrainer.losses.keys", "base_trainer.BaseTrainer.losses.keys", "base_trainer.BaseTrainer.losses[].item", "base_trainer.BaseTrainer.losses.keys", "neptune.send_metric", "neptune.send_metric", "neptune.send_metric", "neptune.send_metric", "base_trainer.BaseTrainer.writer.add_scalar", "base_trainer.BaseTrainer.losses[].item"], "methods", ["None"], ["", "def", "print_loss", "(", "self", ",", "iter", ")", ":", "\n", "        ", "iter_infor", "=", "(", "'iter = {:6d}/{:6d}, exp = {}'", ".", "format", "(", "iter", ",", "self", ".", "config", ".", "num_steps", ",", "self", ".", "config", ".", "note", ")", ")", "\n", "to_print", "=", "[", "'{}:{:.4f}'", ".", "format", "(", "key", ",", "self", ".", "losses", "[", "key", "]", ".", "item", "(", ")", ")", "for", "key", "in", "self", ".", "losses", ".", "keys", "(", ")", "]", "\n", "loss_infor", "=", "'  '", ".", "join", "(", "to_print", ")", "\n", "if", "self", ".", "config", ".", "screen", ":", "\n", "            ", "print", "(", "iter_infor", "+", "'  '", "+", "loss_infor", ")", "\n", "", "if", "self", ".", "config", ".", "neptune", ":", "\n", "            ", "for", "key", "in", "self", ".", "losses", ".", "keys", "(", ")", ":", "\n", "                ", "neptune", ".", "send_metric", "(", "key", ",", "self", ".", "losses", "[", "key", "]", ".", "item", "(", ")", ")", "\n", "", "", "if", "self", ".", "config", ".", "tensorboard", "and", "self", ".", "writer", "is", "not", "None", ":", "\n", "            ", "for", "key", "in", "self", ".", "losses", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "'train/'", "+", "key", ",", "self", ".", "losses", "[", "key", "]", ",", "iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.validate": [[65, 138], ["base_trainer.BaseTrainer.model.eval", "dataset.dataset.dataset.init_test_dataset", "torch.Upsample", "torch.Upsample", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.zeros().cuda().float", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "iou.squeeze.squeeze.mean().item", "acc.mean().item", "iou.squeeze.squeeze.cpu().numpy", "print", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "enumerate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "label.view.view.cuda", "torch.Upsample.squeeze", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "pred_e.repeat().cuda.repeat().cuda.repeat().cuda", "nn.Upsample.squeeze.argmax().float", "torch.eq().byte", "torch.eq().byte", "torch.eq().byte", "torch.eq().byte", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "label_e.repeat().cuda.repeat().cuda.repeat().cuda", "label.view.view.view", "torch.eq().byte", "torch.eq().byte", "torch.eq().byte", "torch.eq().byte", "torch.eq().byte.view().sum().float", "torch.eq().byte.view().sum().float", "iou.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean().item", "torch.cat.mean().item", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.mean().item", "torch.cat.mean().item", "L_miou.append", "L_macc.append", "L_miou_major.append", "L_miou_minor.append", "print", "print", "print", "print", "neptune.send_metric", "neptune.send_metric", "neptune.send_metric", "neptune.send_metric", "neptune.send_metric", "neptune.send_metric", "neptune.send_metric", "neptune.send_metric", "base_trainer.BaseTrainer.model.forward", "label.view.view.squeeze", "Mask.byte", "Mask.byte", "torch.eq().byte.byte", "torch.eq().byte.byte", "iou.squeeze.squeeze.mean", "acc.mean", "iou.squeeze.squeeze.cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "image.cuda", "image.size", "torch.Upsample.", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "pred_e.repeat().cuda.repeat().cuda.repeat", "nn.Upsample.squeeze.argmax", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "label_e.repeat().cuda.repeat().cuda.repeat", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq().byte.view().sum", "torch.eq().byte.view().sum", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "torch.cat.mean", "label.view.view.float", "torch.eq().byte.view", "torch.eq().byte.view"], "methods", ["home.repos.pwc.inspect_result.fumyou13_ldbe.dataset.dataset.init_test_dataset", "home.repos.pwc.inspect_result.fumyou13_ldbe.trainer.base_trainer.BaseTrainer.forward"], ["", "", "", "def", "validate", "(", "self", ")", ":", "\n", "\n", "        ", "global", "L_miou_major", "\n", "global", "L_miou_minor", "\n", "global", "L_miou", "\n", "global", "L_mAcc", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "testloader", "=", "dataset", ".", "init_test_dataset", "(", "self", ".", "config", ",", "self", ".", "config", ".", "target", ",", "set", "=", "'val'", ")", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "union", "=", "torch", ".", "zeros", "(", "self", ".", "config", ".", "num_classes", ",", "1", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "inter", "=", "torch", ".", "zeros", "(", "self", ".", "config", ".", "num_classes", ",", "1", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "preds", "=", "torch", ".", "zeros", "(", "self", ".", "config", ".", "num_classes", ",", "1", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", ")", ".", "float", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "index", ",", "batch", "in", "tqdm", "(", "enumerate", "(", "testloader", ")", ")", ":", "\n", "                ", "image", ",", "label", ",", "_", ",", "_", ",", "name", "=", "batch", "\n", "output", "=", "self", ".", "model", ".", "forward", "(", "image", ".", "cuda", "(", ")", ")", "[", "0", "]", "\n", "output", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "output", ",", "image", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "output", "=", "interp", "(", "output", ")", ".", "squeeze", "(", ")", "\n", "C", ",", "H", ",", "W", "=", "output", ".", "shape", "\n", "Mask", "=", "(", "label", ".", "squeeze", "(", ")", ")", "<", "C", "\n", "\n", "pred_e", "=", "torch", ".", "linspace", "(", "0", ",", "C", "-", "1", ",", "steps", "=", "C", ")", ".", "view", "(", "C", ",", "1", ",", "1", ")", "\n", "pred_e", "=", "pred_e", ".", "repeat", "(", "1", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "0", ")", ".", "float", "(", ")", "\n", "pred_mask", "=", "torch", ".", "eq", "(", "pred_e", ",", "pred", ")", ".", "byte", "(", ")", "\n", "pred_mask", "=", "pred_mask", "*", "Mask", ".", "byte", "(", ")", "\n", "\n", "label_e", "=", "torch", ".", "linspace", "(", "0", ",", "C", "-", "1", ",", "steps", "=", "C", ")", ".", "view", "(", "C", ",", "1", ",", "1", ")", "\n", "label_e", "=", "label_e", ".", "repeat", "(", "1", ",", "H", ",", "W", ")", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "view", "(", "1", ",", "H", ",", "W", ")", "\n", "label_mask", "=", "torch", ".", "eq", "(", "label_e", ",", "label", ".", "float", "(", ")", ")", ".", "byte", "(", ")", "\n", "label_mask", "=", "label_mask", "*", "Mask", ".", "byte", "(", ")", "\n", "\n", "tmp_inter", "=", "label_mask", "+", "pred_mask", ".", "byte", "(", ")", "\n", "cu_inter", "=", "(", "tmp_inter", "==", "2", ")", ".", "view", "(", "C", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "cu_union", "=", "(", "tmp_inter", ">", "0", ")", ".", "view", "(", "C", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "cu_preds", "=", "pred_mask", ".", "view", "(", "C", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "\n", "union", "+=", "cu_union", "\n", "inter", "+=", "cu_inter", "\n", "preds", "+=", "cu_preds", "\n", "\n", "", "iou", "=", "inter", "/", "union", "\n", "acc", "=", "inter", "/", "preds", "\n", "if", "C", "==", "16", ":", "\n", "                ", "iou", "=", "iou", ".", "squeeze", "(", ")", "\n", "class13_iou", "=", "torch", ".", "cat", "(", "(", "iou", "[", ":", "3", "]", ",", "iou", "[", "6", ":", "]", ")", ")", "\n", "class13_miou", "=", "class13_iou", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "print", "(", "'13-Class mIoU:{:.2%}'", ".", "format", "(", "class13_miou", ")", ")", "\n", "", "mIoU", "=", "iou", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "mAcc", "=", "acc", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "plot", "=", "True", "\n", "if", "plot", ":", "\n", "                ", "majority", "=", "torch", ".", "cat", "(", "(", "iou", "[", "0", "]", ",", "iou", "[", "2", "]", ",", "iou", "[", "8", "]", ",", "iou", "[", "10", "]", ",", "iou", "[", "13", "]", ")", ")", "\n", "miou_major", "=", "majority", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "miou_minor", "=", "(", "mIoU", "*", "19", "-", "miou_major", "*", "5", ")", "/", "14", "\n", "L_miou", ".", "append", "(", "mIoU", ")", "\n", "L_macc", ".", "append", "(", "mAcc", ")", "\n", "L_miou_major", ".", "append", "(", "miou_major", ")", "\n", "L_miou_minor", ".", "append", "(", "miou_minor", ")", "\n", "print", "(", "L_miou", ")", "\n", "print", "(", "L_macc", ")", "\n", "print", "(", "L_miou_major", ")", "\n", "print", "(", "L_miou_minor", ")", "\n", "", "iou", "=", "iou", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "print", "(", "'mIoU: {:.2%} mAcc : {:.2%} '", ".", "format", "(", "mIoU", ",", "mAcc", ")", ")", "\n", "# print(iou)", "\n", "if", "self", ".", "config", ".", "neptune", ":", "\n", "                ", "neptune", ".", "send_metric", "(", "'mIoU'", ",", "mIoU", ")", "\n", "neptune", ".", "send_metric", "(", "'mAcc'", ",", "mAcc", ")", "\n", "", "", "return", "mIoU", "\n", "\n"]]}