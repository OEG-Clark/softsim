{"home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor.__init__": [[18, 21], ["allennlp.predictors.predictor.Predictor.__init__"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "Model", ",", "dataset_reader", ":", "DatasetReader", ")", "->", "None", ":", "\n", "        ", "super", "(", "TransformerQAPredictor", ",", "self", ")", ".", "__init__", "(", "model", ",", "dataset_reader", ")", "\n", "self", ".", "_next_qid", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor.predict": [[22, 41], ["transformer_qa.TransformerQAPredictor.predict_json"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor.predict_json"], ["", "def", "predict", "(", "self", ",", "question", ":", "str", ",", "passage", ":", "str", ")", "->", "JsonDict", ":", "\n", "        ", "\"\"\"\n        Make a machine comprehension prediction on the supplied input.\n        See https://rajpurkar.github.io/SQuAD-explorer/ for more information about the machine comprehension task.\n\n        Parameters\n        ----------\n        question : ``str``\n            A question about the content in the supplied paragraph.  The question must be answerable by a\n            span in the paragraph.\n        passage : ``str``\n            A paragraph of information relevant to the question.\n\n        Returns\n        -------\n        A dictionary that represents the prediction made by the system.  The answer string will be under the\n        \"best_span_str\" key.\n        \"\"\"", "\n", "return", "self", ".", "predict_json", "(", "{", "\"context\"", ":", "passage", ",", "\"question\"", ":", "question", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor.predict_json": [[42, 46], ["transformer_qa.TransformerQAPredictor.predict_batch_json", "len"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor.predict_batch_json"], ["", "def", "predict_json", "(", "self", ",", "inputs", ":", "JsonDict", ")", "->", "JsonDict", ":", "\n", "        ", "results", "=", "self", ".", "predict_batch_json", "(", "[", "inputs", "]", ")", "\n", "assert", "len", "(", "results", ")", "==", "1", "\n", "return", "results", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor._json_to_instance": [[47, 51], ["NotImplementedError"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "_json_to_instance", "(", "self", ",", "json_dict", ":", "JsonDict", ")", "->", "Instance", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"This predictor maps a question to multiple instances. \"", "\n", "\"Please use _json_to_instances instead.\"", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor._json_to_instances": [[54, 71], ["list", "transformer_qa.TransformerQAPredictor._dataset_reader.make_instances", "str"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.squad_reader.SquadV1Reader.make_instances"], ["", "def", "_json_to_instances", "(", "self", ",", "json_dict", ":", "JsonDict", ")", "->", "List", "[", "Instance", "]", ":", "\n", "# We allow the passage / context to be specified with either key.", "\n", "# But we do it this way so that a 'KeyError: context' exception will be raised", "\n", "# when neither key is specified, since the 'context' key is the default and", "\n", "# the 'passage' key was only added to be compatible with the input for other", "\n", "# RC models.", "\n", "        ", "context", "=", "json_dict", "[", "\"passage\"", "]", "if", "\"passage\"", "in", "json_dict", "else", "json_dict", "[", "\"context\"", "]", "\n", "result", "=", "list", "(", "\n", "self", ".", "_dataset_reader", ".", "make_instances", "(", "\n", "qid", "=", "str", "(", "self", ".", "_next_qid", ")", ",", "\n", "question", "=", "json_dict", "[", "\"question\"", "]", ",", "\n", "answers", "=", "[", "]", ",", "\n", "context", "=", "context", ",", "\n", ")", "\n", ")", "\n", "self", ".", "_next_qid", "+=", "1", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor._batch_json_to_instances": [[72, 78], ["instances.extend", "transformer_qa.TransformerQAPredictor._json_to_instances"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor._json_to_instances"], ["", "@", "overrides", "\n", "def", "_batch_json_to_instances", "(", "self", ",", "json_dicts", ":", "List", "[", "JsonDict", "]", ")", "->", "List", "[", "Instance", "]", ":", "\n", "        ", "instances", "=", "[", "]", "\n", "for", "json_dict", "in", "json_dicts", ":", "\n", "            ", "instances", ".", "extend", "(", "self", ".", "_json_to_instances", "(", "json_dict", ")", ")", "\n", "", "return", "instances", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor.predict_batch_json": [[79, 85], ["transformer_qa.TransformerQAPredictor._batch_json_to_instances", "transformer_qa.TransformerQAPredictor.predict_batch_instance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor._batch_json_to_instances", "home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor.predict_batch_instance"], ["", "@", "overrides", "\n", "def", "predict_batch_json", "(", "self", ",", "inputs", ":", "List", "[", "JsonDict", "]", ")", "->", "List", "[", "JsonDict", "]", ":", "\n", "        ", "instances", "=", "self", ".", "_batch_json_to_instances", "(", "inputs", ")", "\n", "result", "=", "self", ".", "predict_batch_instance", "(", "instances", ")", "\n", "assert", "len", "(", "result", ")", "==", "len", "(", "inputs", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor.predict_batch_instance": [[86, 143], ["transformer_qa.TransformerQAPredictor._model.forward_on_instances", "zip", "qid_to_score_null.items", "allennlp.common.util.sanitize", "qid_to_output.values", "str"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "predict_batch_instance", "(", "\n", "self", ",", "\n", "instances", ":", "List", "[", "Instance", "]", ",", "\n", "group_same_id", "=", "True", ",", "\n", "allow_null", "=", "True", ",", "\n", "force_yes_no", "=", "False", ",", "\n", ")", "->", "List", "[", "JsonDict", "]", ":", "\n", "        ", "self", ".", "_model", ".", "force_yes_no", "=", "force_yes_no", "# Ugly hack", "\n", "outputs", "=", "self", ".", "_model", ".", "forward_on_instances", "(", "instances", ")", "\n", "\n", "# group outputs with the same question id", "\n", "qid_to_output", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", "=", "{", "}", "\n", "qid_to_score_null", "=", "{", "}", "\n", "qid_to_null_output", "=", "{", "}", "\n", "for", "instance", ",", "output", "in", "zip", "(", "instances", ",", "outputs", ")", ":", "\n", "            ", "qid", "=", "instance", "[", "\"metadata\"", "]", "[", "\"id\"", "]", "\n", "\n", "output", "[", "\"answers\"", "]", "=", "instance", "[", "\"metadata\"", "]", "[", "\"answers\"", "]", "\n", "output", "[", "\"token_answer_span\"", "]", "=", "instance", "[", "\"metadata\"", "]", "[", "\"token_answer_span\"", "]", "\n", "\n", "if", "group_same_id", ":", "\n", "                ", "output", "[", "\"id\"", "]", "=", "qid", "\n", "if", "qid", "in", "qid_to_output", ":", "\n", "                    ", "old_output", "=", "qid_to_output", "[", "qid", "]", "\n", "\n", "if", "\"no_answer_scores\"", "in", "old_output", ":", "\n", "                        ", "if", "output", "[", "\"no_answer_scores\"", "]", "<", "qid_to_score_null", "[", "qid", "]", ":", "\n", "                            ", "qid_to_score_null", "[", "qid", "]", "=", "output", "[", "\"no_answer_scores\"", "]", "\n", "qid_to_null_output", "[", "qid", "]", "=", "output", "\n", "\n", "", "", "if", "old_output", "[", "\"best_span_scores\"", "]", "<", "output", "[", "\"best_span_scores\"", "]", ":", "\n", "                        ", "qid_to_output", "[", "qid", "]", "=", "output", "\n", "", "", "else", ":", "\n", "                    ", "qid_to_output", "[", "qid", "]", "=", "output", "\n", "if", "\"no_answer_scores\"", "in", "output", ":", "\n", "                        ", "qid_to_score_null", "[", "qid", "]", "=", "output", "[", "\"no_answer_scores\"", "]", "\n", "qid_to_null_output", "[", "qid", "]", "=", "output", "\n", "", "", "", "else", ":", "\n", "                ", "window_index", "=", "instance", "[", "\"metadata\"", "]", "[", "\"window_index\"", "]", "\n", "full_id", "=", "f\"{qid}_{str(window_index)}\"", "if", "window_index", "is", "not", "None", "else", "qid", "\n", "output", "[", "\"id\"", "]", "=", "full_id", "\n", "qid_to_output", "[", "full_id", "]", "=", "output", "\n", "if", "\"no_answer_scores\"", "in", "output", ":", "\n", "                    ", "qid_to_score_null", "[", "qid", "]", "=", "output", "[", "\"no_answer_scores\"", "]", "\n", "qid_to_null_output", "[", "qid", "]", "=", "output", "\n", "\n", "", "", "", "for", "qid", ",", "score_null", "in", "qid_to_score_null", ".", "items", "(", ")", ":", "\n", "            ", "qid_to_output", "[", "qid", "]", "[", "\"no_answer_scores\"", "]", "=", "score_null", "\n", "if", "allow_null", ":", "\n", "                ", "if", "score_null", ">", "qid_to_output", "[", "qid", "]", "[", "\"best_span_scores\"", "]", ":", "\n", "                    ", "qid_to_output", "[", "qid", "]", "=", "qid_to_null_output", "[", "qid", "]", "\n", "qid_to_output", "[", "qid", "]", "[", "\"best_span_str\"", "]", "=", "\"\"", "\n", "qid_to_output", "[", "qid", "]", "[", "\"best_span\"", "]", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "qid_to_output", "[", "qid", "]", "[", "\"best_span_scores\"", "]", "=", "score_null", "\n", "\n", "", "", "", "return", "[", "sanitize", "(", "o", ")", "for", "o", "in", "qid_to_output", ".", "values", "(", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.models.hf_classifier.HFClassifier.__init__": [[27, 86], ["allennlp.nn.InitializerApplicator", "allennlp.models.Model.__init__", "os.environ.get", "allennlp.training.metrics.CategoricalAccuracy", "transformers.AutoModelForSequenceClassification.from_pretrained", "hf_classifier.HFClassifier._classifier.resize_token_embeddings", "initializer", "hf_classifier.HFClassifier._tokenizer_wrapper.load", "hf_classifier.HFClassifier._tokenizer_wrapper.save", "hf_classifier.HFClassifier._classifier.resize_token_embeddings", "tokenizer_wrapper.load", "vocab.get_vocab_size", "len", "len", "tempfile.TemporaryDirectory", "torch.load", "hf_classifier.HFClassifier.named_parameters", "tarfile.open", "logger.info", "input_tar.extractall", "os.path.join", "parameter.data.copy_", "allennlp.nn.util.device_mapping", "target_name.startswith", "len"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__init__", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.save", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "vocab", ":", "Vocabulary", ",", "\n", "serialization_dir", ":", "str", ",", "\n", "pretrained_model", ":", "str", ",", "\n", "tokenizer_wrapper", ":", "HFTokenizerWrapper", ",", "\n", "num_labels", ":", "int", ",", "\n", "label_namespace", ":", "str", "=", "\"labels\"", ",", "\n", "transformer_weights_path", ":", "str", "=", "None", ",", "\n", "initializer", ":", "InitializerApplicator", "=", "InitializerApplicator", "(", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "vocab", ",", "**", "kwargs", ")", "\n", "self", ".", "_tokenizer_wrapper", "=", "tokenizer_wrapper", "\n", "self", ".", "_label_namespace", "=", "label_namespace", "\n", "\n", "pre_serialization_dir", "=", "os", ".", "environ", ".", "get", "(", "\"pre_serialization_dir\"", ",", "None", ")", "\n", "if", "pre_serialization_dir", "is", "not", "None", ":", "\n", "            ", "tokenizer_wrapper", ".", "tokenizer", "=", "tokenizer_wrapper", ".", "load", "(", "pre_serialization_dir", ")", "\n", "\n", "", "if", "num_labels", ":", "\n", "            ", "self", ".", "_num_labels", "=", "num_labels", "\n", "", "else", ":", "\n", "            ", "self", ".", "_num_labels", "=", "vocab", ".", "get_vocab_size", "(", "namespace", "=", "self", ".", "_label_namespace", ")", "\n", "\n", "", "self", ".", "_accuracy", "=", "CategoricalAccuracy", "(", ")", "\n", "\n", "self", ".", "_classifier", "=", "AutoModelForSequenceClassification", ".", "from_pretrained", "(", "\n", "pretrained_model", ",", "num_labels", "=", "self", ".", "_num_labels", ",", "return_dict", "=", "True", "\n", ")", "\n", "self", ".", "_classifier", ".", "resize_token_embeddings", "(", "len", "(", "tokenizer_wrapper", ".", "tokenizer", ")", ")", "\n", "\n", "if", "transformer_weights_path", "is", "not", "None", ":", "\n", "            ", "with", "TemporaryDirectory", "(", ")", "as", "tmpdirname", ":", "\n", "                ", "with", "tarfile", ".", "open", "(", "transformer_weights_path", ",", "mode", "=", "\"r:gz\"", ")", "as", "input_tar", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Extracting model...\"", ")", "\n", "input_tar", ".", "extractall", "(", "tmpdirname", ")", "\n", "\n", "", "model_state", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "tmpdirname", ",", "\"weights.th\"", ")", ",", "\n", "map_location", "=", "util", ".", "device_mapping", "(", "-", "1", ")", ",", "\n", ")", "\n", "\n", "source_prefix", "=", "\"_transformers_model.\"", "\n", "target_prefix", "=", "\"_classifier.\"", "+", "self", ".", "_classifier", ".", "base_model_prefix", "+", "\".\"", "\n", "for", "target_name", ",", "parameter", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "not", "target_name", ".", "startswith", "(", "target_prefix", ")", ":", "\n", "                        ", "continue", "\n", "", "source_name", "=", "source_prefix", "+", "target_name", "[", "len", "(", "target_prefix", ")", ":", "]", "\n", "source_weights", "=", "model_state", "[", "source_name", "]", "\n", "parameter", ".", "data", ".", "copy_", "(", "source_weights", ".", "data", ")", "\n", "\n", "", "", "", "initializer", "(", "self", ")", "\n", "self", ".", "_tokenizer_wrapper", ".", "tokenizer", "=", "self", ".", "_tokenizer_wrapper", ".", "load", "(", "\n", "serialization_dir", ",", "pending", "=", "True", "\n", ")", "\n", "self", ".", "_tokenizer_wrapper", ".", "save", "(", "serialization_dir", ")", "\n", "self", ".", "_classifier", ".", "resize_token_embeddings", "(", "len", "(", "tokenizer_wrapper", ".", "tokenizer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.models.hf_classifier.HFClassifier.forward": [[87, 100], ["hf_classifier.HFClassifier._classifier", "torch.nn.functional.softmax", "hf_classifier.HFClassifier._accuracy", "next", "iter"], "methods", ["None"], ["", "def", "forward", "(", "# type: ignore", "\n", "self", ",", "tokens", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "label", ":", "torch", ".", "IntTensor", "=", "None", ",", "**", "kwargs", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "output_dict", "=", "self", ".", "_classifier", "(", "**", "tokens", ",", "labels", "=", "label", ")", "\n", "\n", "if", "label", "is", "not", "None", ":", "\n", "            ", "self", ".", "_accuracy", "(", "output_dict", "[", "\"logits\"", "]", ",", "label", ")", "\n", "\n", "", "output_dict", "[", "\"probs\"", "]", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "output_dict", "[", "\"logits\"", "]", ",", "dim", "=", "-", "1", ")", "\n", "if", "\"qid\"", "in", "next", "(", "iter", "(", "kwargs", "[", "\"metadata\"", "]", ")", ",", "{", "}", ")", ":", "\n", "            ", "output_dict", "[", "\"qid\"", "]", "=", "[", "metadata_entry", "[", "\"qid\"", "]", "for", "metadata_entry", "in", "kwargs", "[", "\"metadata\"", "]", "]", "\n", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.models.hf_classifier.HFClassifier.make_output_human_readable": [[101, 125], ["predictions.dim", "prediction.argmax().item", "hf_classifier.HFClassifier.vocab.get_index_to_token_vocabulary", "classes.append", "hf_classifier.HFClassifier.get", "range", "prediction.argmax"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "make_output_human_readable", "(", "\n", "self", ",", "output_dict", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Does a simple argmax over the probabilities, converts index to string label, and\n        add `\"label\"` key to the dictionary with the result.\n        \"\"\"", "\n", "predictions", "=", "output_dict", "[", "\"probs\"", "]", "\n", "if", "predictions", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "predictions_list", "=", "[", "predictions", "[", "i", "]", "for", "i", "in", "range", "(", "predictions", ".", "shape", "[", "0", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "predictions_list", "=", "[", "predictions", "]", "\n", "", "classes", "=", "[", "]", "\n", "for", "prediction", "in", "predictions_list", ":", "\n", "            ", "label_idx", "=", "prediction", ".", "argmax", "(", "dim", "=", "-", "1", ")", ".", "item", "(", ")", "\n", "index_to_token_vocab", "=", "self", ".", "vocab", ".", "get_index_to_token_vocabulary", "(", "self", ".", "_label_namespace", ")", "\n", "if", "label_idx", "in", "index_to_token_vocab", ":", "\n", "                ", "label_str", "=", "index_to_token_vocab", ".", "get", "(", "label_idx", ")", "\n", "", "else", ":", "\n", "                ", "label_str", "=", "label_idx", "==", "1", "\n", "", "classes", ".", "append", "(", "label_str", ")", "\n", "", "output_dict", "[", "\"label\"", "]", "=", "classes", "\n", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.models.hf_classifier.HFClassifier.get_metrics": [[126, 129], ["hf_classifier.HFClassifier._accuracy.get_metric"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.get_metric"], ["", "def", "get_metrics", "(", "self", ",", "reset", ":", "bool", "=", "False", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "metrics", "=", "{", "\"accuracy\"", ":", "self", ".", "_accuracy", ".", "get_metric", "(", "reset", ")", "}", "\n", "return", "metrics", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.models.gen_model.GenModel.__init__": [[23, 67], ["allennlp.nn.InitializerApplicator", "allennlp.models.model.Model.__init__", "os.environ.get", "src.data.tokenizers.tokens_interpreter.TokensInterpreter", "initializer", "gen_model.GenModel._tokenizer_wrapper.load", "tokenizer_wrapper.load", "transformers.AutoModelForSeq2SeqLM.from_pretrained", "gen_model.GenModel._seq2seq.resize_token_embeddings", "gen_model.GenModel._tokenizer_wrapper.save", "gen_model.GenModel._seq2seq.resize_token_embeddings", "len", "len"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__init__", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.save"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "vocab", ":", "Vocabulary", ",", "\n", "serialization_dir", ":", "str", ",", "\n", "pretrained_model", ":", "str", ",", "\n", "tokenizer_wrapper", ":", "HFTokenizerWrapper", ",", "\n", "generate_while_training", ":", "bool", "=", "False", ",", "\n", "repetition_penalty", ":", "Optional", "[", "float", "]", "=", "2.5", ",", "\n", "metrics", ":", "Dict", "[", "str", ",", "Metric", "]", "=", "{", "}", ",", "\n", "is_dummy", ":", "bool", "=", "False", ",", "\n", "initializer", ":", "InitializerApplicator", "=", "InitializerApplicator", "(", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "vocab", ",", "**", "kwargs", ",", "serialization_dir", "=", "serialization_dir", ")", "\n", "\n", "self", ".", "_tokenizer_wrapper", "=", "tokenizer_wrapper", "\n", "self", ".", "_generate_while_training", "=", "generate_while_training", "\n", "self", ".", "_repetition_penalty", "=", "repetition_penalty", "\n", "\n", "pre_serialization_dir", "=", "os", ".", "environ", ".", "get", "(", "\"pre_serialization_dir\"", ",", "None", ")", "\n", "if", "pre_serialization_dir", "is", "not", "None", ":", "\n", "            ", "tokenizer_wrapper", ".", "tokenizer", "=", "tokenizer_wrapper", ".", "load", "(", "pre_serialization_dir", ")", "\n", "\n", "", "self", ".", "_tokens_interpreter", "=", "TokensInterpreter", "(", "\n", "tokenizer_wrapper", ",", "\n", "multi_span_sep_token", "=", "tokenizer_wrapper", ".", "tokenizer", ".", "bos_token", ",", "\n", ")", "\n", "\n", "self", ".", "_seq2seq", "=", "None", "\n", "if", "not", "is_dummy", ":", "\n", "            ", "model_kwargs", "=", "{", "\"return_dict\"", ":", "True", "}", "\n", "self", ".", "_seq2seq", "=", "AutoModelForSeq2SeqLM", ".", "from_pretrained", "(", "pretrained_model", ",", "**", "model_kwargs", ")", "\n", "self", ".", "_seq2seq", ".", "resize_token_embeddings", "(", "len", "(", "tokenizer_wrapper", ".", "tokenizer", ")", ")", "\n", "\n", "", "self", ".", "_metrics", "=", "metrics", "\n", "\n", "initializer", "(", "self", ")", "\n", "self", ".", "_tokenizer_wrapper", ".", "tokenizer", "=", "self", ".", "_tokenizer_wrapper", ".", "load", "(", "\n", "serialization_dir", ",", "pending", "=", "True", "\n", ")", "\n", "if", "not", "is_dummy", ":", "\n", "            ", "self", ".", "_tokenizer_wrapper", ".", "save", "(", "serialization_dir", ")", "\n", "self", ".", "_seq2seq", ".", "resize_token_embeddings", "(", "len", "(", "tokenizer_wrapper", ".", "tokenizer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.models.gen_model.GenModel.forward": [[68, 134], ["kwargs.copy.copy.copy", "kwargs.copy.copy.get", "kwargs.copy.copy.get", "kwargs.copy.copy.get", "keys_mapping.get", "keys_mapping.get", "keys_mapping.get", "gen_model.GenModel.loss", "output_dict.update", "torch.no_grad", "gen_model.GenModel._seq2seq.generate", "batch_generated_ids.view.view.view", "scores.clone().detach().view().tolist.clone().detach().view().tolist.clone().detach().view().tolist", "output_dict[].append", "gen_model.GenModel._task_specific_output_and_evaluation", "gen_model.GenModel._tokenizer_wrapper.convert_ids_to_tokens", "[].append", "scores.clone().detach().view().tolist.clone().detach().view().tolist.clone().detach().view", "scores.clone().detach().view().tolist.clone().detach().view().tolist.clone().detach", "scores.clone().detach().view().tolist.clone().detach().view().tolist.clone"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.models.gen_model.GenModel.loss", "home.repos.pwc.inspect_result.eladsegal_strategyqa.models.gen_model.GenModel._task_specific_output_and_evaluation", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.convert_ids_to_tokens"], ["", "", "def", "forward", "(", "# type: ignore", "\n", "self", ",", "\n", "source", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "torch", ".", "LongTensor", "]", "]", "=", "None", ",", "\n", "target_ids", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "decoder_start_token_id", ":", "Optional", "[", "torch", ".", "LongTensor", "]", "=", "None", ",", "\n", "metadata", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "None", ",", "\n", "keys_mapping", ":", "Dict", "[", "str", ",", "str", "]", "=", "{", "}", ",", "\n", "**", "kwargs", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "# Handle kwargs by key_mappings, assume there are no identity mappings", "\n", "        ", "kwargs", "=", "kwargs", ".", "copy", "(", ")", "\n", "source", "=", "kwargs", ".", "get", "(", "keys_mapping", ".", "get", "(", "\"source\"", ",", "None", ")", ",", "source", ")", "\n", "target_ids", "=", "kwargs", ".", "get", "(", "keys_mapping", ".", "get", "(", "\"target_ids\"", ",", "None", ")", ",", "target_ids", ")", "\n", "metadata", "=", "kwargs", ".", "get", "(", "keys_mapping", ".", "get", "(", "\"metadata\"", ",", "None", ")", ",", "metadata", ")", "\n", "if", "\"source\"", "not", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "\"source\"", "]", "=", "source", "\n", "", "if", "\"target_ids\"", "not", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "\"target_ids\"", "]", "=", "target_ids", "\n", "", "if", "\"metadata\"", "not", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "\"metadata\"", "]", "=", "metadata", "\n", "\n", "", "output_dict", "=", "{", "}", "\n", "\n", "has_target", "=", "target_ids", "is", "not", "None", "and", "target_ids", ".", "shape", "[", "-", "1", "]", ">", "0", "\n", "if", "has_target", ":", "\n", "            ", "output_dict", "[", "\"loss\"", "]", "=", "self", ".", "loss", "(", "source", ",", "target_ids", ")", "\n", "\n", "", "if", "(", "not", "self", ".", "training", ")", "or", "self", ".", "_generate_while_training", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "batch_generated_ids", ",", "scores", ",", "probs", "=", "self", ".", "_seq2seq", ".", "generate", "(", "\n", "**", "source", ",", "\n", "max_length", "=", "100", ",", "\n", "num_beams", "=", "2", ",", "\n", "repetition_penalty", "=", "self", ".", "_repetition_penalty", ",", "\n", "use_cache", "=", "True", ",", "\n", "return_probs", "=", "True", ",", "\n", "decoder_start_token_id", "=", "decoder_start_token_id", ",", "\n", ")", "\n", "\n", "generated_count", "=", "batch_generated_ids", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "source", "[", "\"input_ids\"", "]", ".", "shape", "[", "0", "]", "\n", "num_return_sequences", "=", "generated_count", "//", "batch_size", "\n", "batch_generated_ids", "=", "batch_generated_ids", ".", "view", "(", "batch_size", ",", "num_return_sequences", ",", "-", "1", ")", "\n", "\n", "scores", "=", "scores", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "view", "(", "batch_size", ",", "num_return_sequences", ")", ".", "tolist", "(", ")", "\n", "\n", "", "output_dict", "[", "\"generated_ids\"", "]", "=", "batch_generated_ids", "\n", "\n", "output_dict", "[", "\"generated_tokens\"", "]", "=", "[", "]", "\n", "for", "generated_ids_seqs", "in", "batch_generated_ids", ":", "\n", "                ", "output_dict", "[", "\"generated_tokens\"", "]", ".", "append", "(", "[", "]", ")", "\n", "for", "generated_ids", "in", "generated_ids_seqs", ":", "\n", "                    ", "tokens", "=", "self", ".", "_tokenizer_wrapper", ".", "convert_ids_to_tokens", "(", "generated_ids", ")", "\n", "output_dict", "[", "\"generated_tokens\"", "]", "[", "-", "1", "]", ".", "append", "(", "tokens", ")", "\n", "\n", "", "", "output_dict", "[", "\n", "\"best_gen_scores\"", "\n", "]", "=", "scores", "# unreliable until an official huggingface feature", "\n", "\n", "output_dict", ".", "update", "(", "\n", "self", ".", "_task_specific_output_and_evaluation", "(", "\n", "original_output_dict", "=", "output_dict", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", ")", "\n", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.models.gen_model.GenModel.loss": [[135, 162], ["target_ids[].contiguous", "target_ids[].clone", "gen_model.GenModel._seq2seq", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "target_ids.dim", "lm_logits.view", "target_ids[].clone.view"], "methods", ["None"], ["", "def", "loss", "(", "\n", "self", ",", "\n", "source", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "target_ids", ":", "torch", ".", "Tensor", ",", "\n", ")", ":", "\n", "        ", "if", "target_ids", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "target_ids", "=", "target_ids", "[", ":", ",", "0", ",", ":", "]", "\n", "", "pad_token_id", "=", "self", ".", "_tokenizer_wrapper", ".", "tokenizer", ".", "pad_token_id", "\n", "\n", "# Copied from huggingface", "\n", "decoder_input_ids", "=", "target_ids", "[", ":", ",", ":", "-", "1", "]", ".", "contiguous", "(", ")", "# Why this line?", "\n", "lm_labels", "=", "target_ids", "[", ":", ",", "1", ":", "]", ".", "clone", "(", ")", "# why clone?", "\n", "\n", "outputs", "=", "self", ".", "_seq2seq", "(", "\n", "**", "source", ",", "\n", "decoder_input_ids", "=", "decoder_input_ids", ",", "\n", "use_cache", "=", "False", ",", "\n", ")", "\n", "\n", "lm_logits", "=", "outputs", "[", "\"logits\"", "]", "\n", "\n", "# Same behavior as modeling_bart.py", "\n", "loss_fct", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "pad_token_id", ")", "\n", "assert", "lm_logits", ".", "shape", "[", "-", "1", "]", "==", "self", ".", "_seq2seq", ".", "config", ".", "vocab_size", "\n", "loss", "=", "loss_fct", "(", "lm_logits", ".", "view", "(", "-", "1", ",", "lm_logits", ".", "shape", "[", "-", "1", "]", ")", ",", "lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.models.gen_model.GenModel.get_metrics": [[163, 179], ["gen_model.GenModel._metrics.items", "metric.get_metric", "isinstance", "hasattr", "metrics.update", "metrics.update", "metric.get_metric.items"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.get_metric"], ["", "@", "overrides", "\n", "def", "get_metrics", "(", "self", ",", "reset", ":", "bool", "=", "False", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "        ", "metrics", "=", "{", "}", "\n", "if", "not", "self", ".", "training", "or", "self", ".", "_generate_while_training", ":", "\n", "            ", "for", "key", ",", "metric", "in", "self", ".", "_metrics", ".", "items", "(", ")", ":", "\n", "                ", "metric_value", "=", "metric", ".", "get_metric", "(", "reset", ")", "\n", "if", "isinstance", "(", "metric_value", ",", "dict", ")", ":", "\n", "                    ", "if", "hasattr", "(", "metric", ",", "\"is_main\"", ")", "and", "metric", ".", "is_main", ":", "\n", "                        ", "metrics", ".", "update", "(", "metric_value", ")", "\n", "", "else", ":", "\n", "                        ", "metrics", ".", "update", "(", "\n", "{", "f\"{key}_{sub_key}\"", ":", "value", "for", "sub_key", ",", "value", "in", "metric_value", ".", "items", "(", ")", "}", "\n", ")", "\n", "", "", "else", ":", "\n", "                    ", "metrics", "[", "key", "]", "=", "metric_value", "\n", "", "", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.models.gen_model.GenModel._task_specific_output_and_evaluation": [[180, 217], ["next", "gen_model.GenModel._metrics.items", "range", "gen_model.GenModel._tokens_interpreter", "range", "iter", "len", "len", "metric", "metric", "q.replace().split", "q.replace"], "methods", ["None"], ["", "def", "_task_specific_output_and_evaluation", "(", "\n", "self", ",", "target_ids", ",", "original_output_dict", ",", "metadata", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "output_dict", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "}", "\n", "\n", "generated_tokens", "=", "[", "\n", "original_output_dict", "[", "\"generated_tokens\"", "]", "[", "i", "]", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "original_output_dict", "[", "\"generated_tokens\"", "]", ")", ")", "\n", "]", "\n", "decomposition", ":", "List", "[", "str", "]", "=", "[", "\n", "self", ".", "_tokens_interpreter", "(", "\n", "tokens", "=", "generated_tokens", "[", "i", "]", ",", "explicit_translation_request", "=", "True", "\n", ")", ".", "translation", "\n", "for", "i", "in", "range", "(", "len", "(", "generated_tokens", ")", ")", "\n", "]", "\n", "output_dict", "[", "\"decomposition\"", "]", "=", "decomposition", "\n", "output_dict", "[", "\"qid\"", "]", "=", "[", "metadata_entry", "[", "\"qid\"", "]", "for", "metadata_entry", "in", "metadata", "]", "\n", "output_dict", "[", "\"question\"", "]", "=", "[", "metadata_entry", "[", "\"question\"", "]", "for", "metadata_entry", "in", "metadata", "]", "\n", "if", "\"gold_decomposition\"", "in", "next", "(", "iter", "(", "metadata", ")", ",", "{", "}", ")", ":", "\n", "            ", "output_dict", "[", "\"gold_decomposition\"", "]", "=", "[", "\n", "metadata_entry", "[", "\"gold_decomposition\"", "]", "for", "metadata_entry", "in", "metadata", "\n", "]", "\n", "\n", "", "has_target", "=", "target_ids", "is", "not", "None", "and", "target_ids", ".", "shape", "[", "-", "1", "]", ">", "0", "\n", "if", "has_target", ":", "\n", "            ", "generated_ids", "=", "original_output_dict", "[", "\"generated_ids\"", "]", "[", ":", ",", "0", ",", ":", "]", "\n", "for", "metric_key", ",", "metric", "in", "self", ".", "_metrics", ".", "items", "(", ")", ":", "\n", "                ", "if", "metric", ".", "__class__", ".", "__name__", "==", "\"SARI\"", ":", "\n", "# Specific to BART and the way the StrategyQA readers work", "\n", "                    ", "sources", "=", "[", "q", ".", "replace", "(", "\"?\"", ",", "\" ?\"", ")", ".", "split", "(", ")", "for", "q", "in", "output_dict", "[", "\"question\"", "]", "]", "\n", "predictions", "=", "[", "\" \"", ".", "join", "(", "d", ")", ".", "replace", "(", "\"?\"", ",", "\" ?\"", ")", ".", "split", "(", ")", "for", "d", "in", "output_dict", "[", "\"decomposition\"", "]", "]", "\n", "targets", "=", "[", "[", "\" \"", ".", "join", "(", "g", ")", ".", "replace", "(", "\"?\"", ",", "\" ?\"", ")", ".", "split", "(", ")", "]", "for", "g", "in", "output_dict", "[", "\"gold_decomposition\"", "]", "]", "\n", "metric", "(", "sources", ",", "predictions", ",", "targets", ")", "\n", "", "else", ":", "\n", "                    ", "metric", "(", "generated_ids", ",", "target_ids", ")", "\n", "\n", "", "", "", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.models.gen_model.GenModel.make_output_human_readable": [[218, 227], ["output_dict.items"], "methods", ["None"], ["", "def", "make_output_human_readable", "(", "\n", "self", ",", "output_dict", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "output_dict", "=", "{", "\n", "k", ":", "v", "\n", "for", "k", ",", "v", "in", "output_dict", ".", "items", "(", ")", "\n", "if", "k", "in", "[", "\"qid\"", ",", "\"loss\"", ",", "\"decomposition\"", ",", "\"gold_decomposition\"", ",", "\"question\"", "]", "\n", "}", "\n", "return", "output_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.run_model.main": [[24, 148], ["allennlp.common.util.import_module_and_submodules", "overrides_dict.update", "allennlp.models.archival.load_archive", "allennlp.predictors.Predictor.from_archive", "src.data.dataset_readers.strategy_qa_reader.StrategyQAReader", "allennlp.training.metrics.BooleanAccuracy", "time.monotonic", "logger.info", "logger.info", "tqdm.tqdm", "json.loads", "open", "json.load", "src.data.dataset_readers.strategy_qa_reader.StrategyQAReader.json_to_item", "torch.tensor().view", "copy.deepcopy", "copy.deepcopy", "output_dataset.append", "allennlp.training.metrics.BooleanAccuracy.get_metric", "print", "json.dumps", "src.models.iterative.reference_utils.get_reachability", "src.data.dataset_readers.strategy_qa_reader.StrategyQAReader.get_paragraphs", "enumerate", "step_answers[].lower", "torch.tensor().view", "allennlp.training.metrics.BooleanAccuracy.", "allennlp.training.metrics.BooleanAccuracy.", "logger.info", "time.monotonic", "open", "json.dump", "json.dumps", "open", "json.dump", "torch.tensor", "range", "sum", "enumerate", "indices_of_interest.append", "run_model.get_answer", "src.models.iterative.reference_utils.fill_in_references", "time.monotonic", "allennlp.training.metrics.BooleanAccuracy.get_metric", "json.dumps", "len", "torch.tensor", "indices_of_interest.append", "len", "sum", "indices_of_interest.index", "len"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader.json_to_item", "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.get_metric", "home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.reference_utils.get_reachability", "home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.get_paragraphs_by_config.get_paragraphs", "home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.run_model.get_answer", "home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.reference_utils.fill_in_references", "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.get_metric", "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.index"], ["def", "main", "(", "\n", "gpu", ":", "int", ",", "\n", "qa_model_path", ":", "str", ",", "\n", "paragraphs_source", ":", "str", ",", "\n", "generated_decompositions_paths", ":", "Optional", "[", "str", "]", ",", "\n", "data", ":", "str", ",", "\n", "output_predictions_file", ":", "str", ",", "\n", "output_metrics_file", ":", "str", ",", "\n", "overrides", "=", "\"{}\"", ",", "\n", ")", ":", "\n", "    ", "import_module_and_submodules", "(", "\"src\"", ")", "\n", "\n", "overrides_dict", "=", "{", "}", "\n", "overrides_dict", ".", "update", "(", "json", ".", "loads", "(", "overrides", ")", ")", "\n", "archive", "=", "load_archive", "(", "qa_model_path", ",", "cuda_device", "=", "gpu", ",", "overrides", "=", "json", ".", "dumps", "(", "overrides_dict", ")", ")", "\n", "predictor", "=", "Predictor", ".", "from_archive", "(", "archive", ")", "\n", "\n", "dataset_reader", "=", "StrategyQAReader", "(", "\n", "paragraphs_source", "=", "paragraphs_source", ",", "\n", "generated_decompositions_paths", "=", "generated_decompositions_paths", ",", "\n", ")", "\n", "\n", "accuracy", "=", "BooleanAccuracy", "(", ")", "\n", "last_logged_scores_time", "=", "time", ".", "monotonic", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"Reading the dataset:\"", ")", "\n", "logger", ".", "info", "(", "\"Reading file at %s\"", ",", "data", ")", "\n", "dataset", "=", "None", "\n", "with", "open", "(", "data", ",", "mode", "=", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "dataset_file", ":", "\n", "        ", "dataset", "=", "json", ".", "load", "(", "dataset_file", ")", "\n", "\n", "", "output_dataset", "=", "[", "]", "\n", "for", "json_obj", "in", "tqdm", "(", "dataset", ")", ":", "\n", "        ", "item", "=", "dataset_reader", ".", "json_to_item", "(", "json_obj", ")", "\n", "decomposition", "=", "item", "[", "\"decomposition\"", "]", "\n", "generated_decomposition", "=", "item", "[", "\"generated_decomposition\"", "]", "\n", "gold_answer", "=", "torch", ".", "tensor", "(", "item", "[", "\"answer\"", "]", ")", ".", "view", "(", "(", "1", ",", ")", ")", "\n", "\n", "used_decomposition", "=", "deepcopy", "(", "\n", "generated_decomposition", "\n", "if", "\"generated_decomposition\"", "in", "paragraphs_source", "\n", "else", "decomposition", "\n", ")", "\n", "\n", "# Per instance:", "\n", "# Until the final step has an answer, find in each iteration", "\n", "# all of the steps that are required to answer the last step (including by proxy)", "\n", "# and don't have references in them.", "\n", "# If it is not possible, return a score of zero for the instance.", "\n", "# If it is possible, retrieve paragraphs for these steps,", "\n", "# and then pass the step and the paragraphs for it to be answered by the model.", "\n", "# Replace the answer in all of the steps that has a reference for it.", "\n", "\n", "step_answers", "=", "[", "None", "for", "i", "in", "range", "(", "len", "(", "used_decomposition", ")", ")", "]", "\n", "while", "True", ":", "\n", "            ", "reachability", "=", "get_reachability", "(", "[", "step", "[", "\"question\"", "]", "for", "step", "in", "used_decomposition", "]", ")", "\n", "if", "reachability", "is", "None", ":", "\n", "                ", "break", "\n", "\n", "", "if", "step_answers", "[", "-", "1", "]", "is", "not", "None", ":", "\n", "                ", "break", "\n", "\n", "", "indices_of_interest", "=", "[", "]", "\n", "if", "(", "sum", "(", "reachability", "[", "-", "1", "]", ")", ")", "!=", "0", ":", "\n", "                ", "for", "i", ",", "reachable", "in", "enumerate", "(", "reachability", "[", "-", "1", "]", ")", ":", "\n", "                    ", "if", "reachable", ">", "0", "and", "sum", "(", "reachability", "[", "i", "]", ")", "==", "0", ":", "\n", "                        ", "indices_of_interest", ".", "append", "(", "i", ")", "\n", "", "", "", "else", ":", "\n", "                ", "indices_of_interest", ".", "append", "(", "len", "(", "step_answers", ")", "-", "1", ")", "\n", "\n", "", "paragraphs", "=", "dataset_reader", ".", "get_paragraphs", "(", "\n", "decomposition", "=", "[", "used_decomposition", "[", "i", "]", "for", "i", "in", "indices_of_interest", "]", ",", "\n", ")", "\n", "if", "paragraphs", "is", "not", "None", ":", "\n", "                ", "paragraphs_per_step_of_interest", "=", "paragraphs", "[", "\"per_step\"", "]", "\n", "", "else", ":", "\n", "                ", "paragraphs_per_step_of_interest", "=", "[", "[", "{", "\"content\"", ":", "\" \"", "}", "]", "for", "i", "in", "indices_of_interest", "]", "\n", "\n", "", "for", "i", "in", "indices_of_interest", ":", "\n", "                ", "step_answers", "[", "i", "]", "=", "get_answer", "(", "\n", "predictor", "=", "predictor", ",", "\n", "question", "=", "used_decomposition", "[", "i", "]", "[", "\"question\"", "]", ",", "\n", "paragraphs", "=", "paragraphs_per_step_of_interest", "[", "indices_of_interest", ".", "index", "(", "i", ")", "]", ",", "\n", "force_yes_no", "=", "i", "==", "len", "(", "step_answers", ")", "-", "1", ",", "\n", ")", "# Return the best non-empty answer", "\n", "\n", "", "for", "i", ",", "step", "in", "enumerate", "(", "used_decomposition", ")", ":", "\n", "                ", "used_decomposition", "[", "i", "]", "[", "\"question\"", "]", "=", "fill_in_references", "(", "\n", "step", "[", "\"question\"", "]", ",", "step_answers", "\n", ")", "\n", "\n", "", "", "predicted_answer_str", "=", "step_answers", "[", "-", "1", "]", ".", "lower", "(", ")", "if", "step_answers", "[", "-", "1", "]", "is", "not", "None", "else", "None", "\n", "if", "predicted_answer_str", "==", "\"yes\"", "or", "predicted_answer_str", "==", "\"no\"", ":", "\n", "# Valid answer, the metric should be updated accordingly", "\n", "            ", "predicted_answer", "=", "torch", ".", "tensor", "(", "predicted_answer_str", "==", "\"yes\"", ")", ".", "view", "(", "(", "1", ",", ")", ")", "\n", "accuracy", "(", "predicted_answer", ",", "gold_answer", ")", "\n", "", "else", ":", "\n", "# Invalid answer, the metric should be updated with a mistake", "\n", "            ", "accuracy", "(", "not", "gold_answer", ",", "gold_answer", ")", "\n", "\n", "", "if", "time", ".", "monotonic", "(", ")", "-", "last_logged_scores_time", ">", "3", ":", "\n", "            ", "metrics_dict", "=", "{", "\"accuracy\"", ":", "accuracy", ".", "get_metric", "(", ")", "}", "\n", "logger", ".", "info", "(", "json", ".", "dumps", "(", "metrics_dict", ")", ")", "\n", "last_logged_scores_time", "=", "time", ".", "monotonic", "(", ")", "\n", "\n", "", "output_json_obj", "=", "deepcopy", "(", "json_obj", ")", "\n", "output_json_obj", "[", "\"decomposition\"", "]", "=", "[", "step", "[", "\"question\"", "]", "for", "step", "in", "used_decomposition", "]", "\n", "output_json_obj", "[", "\"step_answers\"", "]", "=", "step_answers", "\n", "output_dataset", ".", "append", "(", "output_json_obj", ")", "\n", "\n", "", "if", "output_predictions_file", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "output_predictions_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "output_dataset", ",", "f", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "\n", "", "", "metrics_dict", "=", "{", "\"accuracy\"", ":", "accuracy", ".", "get_metric", "(", "reset", "=", "True", ")", "}", "\n", "if", "output_metrics_file", "is", "None", ":", "\n", "        ", "print", "(", "json", ".", "dumps", "(", "metrics_dict", ")", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "output_metrics_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "\n", "metrics_dict", ",", "\n", "f", ",", "\n", "ensure_ascii", "=", "False", ",", "\n", "indent", "=", "4", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.run_model.get_answer": [[151, 171], ["float", "predictor._batch_json_to_instances", "predictor.predict_batch_instance"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor._batch_json_to_instances", "home.repos.pwc.inspect_result.eladsegal_strategyqa.predictors.transformer_qa.TransformerQAPredictor.predict_batch_instance"], ["", "", "", "def", "get_answer", "(", "predictor", ",", "question", ",", "paragraphs", ",", "force_yes_no", ")", ":", "\n", "    ", "max_score", "=", "float", "(", "\"-inf\"", ")", "\n", "answer", "=", "None", "\n", "for", "paragraph", "in", "paragraphs", ":", "\n", "        ", "content", "=", "paragraph", "[", "\"content\"", "]", "\n", "instances", "=", "predictor", ".", "_batch_json_to_instances", "(", "\n", "[", "\n", "{", "\n", "\"context\"", ":", "content", ",", "\n", "\"question\"", ":", "question", ",", "\n", "}", "\n", "]", "\n", ")", "\n", "result", "=", "predictor", ".", "predict_batch_instance", "(", "\n", "instances", ",", "allow_null", "=", "False", ",", "force_yes_no", "=", "force_yes_no", "\n", ")", "[", "0", "]", "\n", "if", "max_score", "<", "result", "[", "\"best_span_scores\"", "]", ":", "\n", "            ", "max_score", "=", "result", "[", "\"best_span_scores\"", "]", "\n", "answer", "=", "result", "[", "\"best_span_str\"", "]", "\n", "", "", "return", "answer", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.reference_utils._index_to_reference": [[6, 8], ["None"], "function", ["None"], ["def", "_index_to_reference", "(", "i", ")", ":", "\n", "    ", "return", "f\"#{i + 1}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.reference_utils.fill_in_references": [[10, 16], ["range", "reference_utils._index_to_reference", "decomposition_step.replace.replace", "len"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.reference_utils._index_to_reference"], ["", "def", "fill_in_references", "(", "decomposition_step", ",", "step_answers", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "MAX_STEPS", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "ref", "=", "_index_to_reference", "(", "i", ")", "\n", "if", "i", "<", "len", "(", "step_answers", ")", "and", "step_answers", "[", "i", "]", "is", "not", "None", ":", "\n", "            ", "decomposition_step", "=", "decomposition_step", ".", "replace", "(", "ref", ",", "step_answers", "[", "i", "]", ")", "\n", "", "", "return", "decomposition_step", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.reference_utils.has_reference": [[18, 24], ["range", "reference_utils._index_to_reference"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.reference_utils._index_to_reference"], ["", "def", "has_reference", "(", "decomposition_step", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "MAX_STEPS", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "ref", "=", "_index_to_reference", "(", "i", ")", "\n", "if", "ref", "in", "decomposition_step", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.reference_utils.get_references": [[26, 33], ["range", "reference_utils._index_to_reference", "refs.append"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.reference_utils._index_to_reference"], ["", "def", "get_references", "(", "decomposition_step", ")", ":", "\n", "    ", "refs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "MAX_STEPS", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "ref", "=", "_index_to_reference", "(", "i", ")", "\n", "if", "ref", "in", "decomposition_step", ":", "\n", "            ", "refs", ".", "append", "(", "i", ")", "\n", "", "", "return", "refs", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.reference_utils.get_reachability": [[35, 54], ["numpy.zeros", "enumerate", "reference_utils.get_references", "numpy.linalg.matrix_power", "len", "len", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.iterative.reference_utils.get_references"], ["", "def", "get_reachability", "(", "decomposition", ")", ":", "\n", "    ", "ref_graph", "=", "np", ".", "zeros", "(", "(", "len", "(", "decomposition", ")", ",", "len", "(", "decomposition", ")", ")", ")", "\n", "for", "i", ",", "step", "in", "enumerate", "(", "decomposition", ")", ":", "\n", "        ", "refs", "=", "get_references", "(", "step", ")", "\n", "if", "i", "in", "refs", ":", "\n", "            ", "return", "None", "\n", "", "ref_graph", "[", "i", "]", "[", "refs", "]", "=", "1", "\n", "\n", "", "length", "=", "1", "\n", "reachability", "=", "ref_graph", "\n", "while", "True", ":", "\n", "        ", "length", "+=", "1", "\n", "step_reachability", "=", "np", ".", "linalg", ".", "matrix_power", "(", "reachability", ",", "length", ")", "\n", "if", "np", ".", "sum", "(", "step_reachability", ")", "==", "0", ":", "\n", "            ", "break", "\n", "", "if", "length", "==", "MAX_STEPS", ":", "\n", "            ", "return", "None", "\n", "", "reachability", "+=", "step_reachability", "\n", "", "return", "reachability", "\n", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.qa.transformer_qa.TransformerQA.__init__": [[28, 60], ["allennlp.models.model.Model.__init__", "transformers.AutoModelForQuestionAnswering.from_pretrained", "transformer_qa.TransformerQA._qa_model.resize_token_embeddings", "allennlp.training.metrics.CategoricalAccuracy", "allennlp.training.metrics.CategoricalAccuracy", "allennlp.training.metrics.BooleanAccuracy", "src.metrics.squad2_em_and_f1.Squad2EmAndF1", "src.metrics.squad2_em_and_f1.Squad2EmAndF1", "transformer_qa.TransformerQA._tokenizer_wrapper.load", "transformer_qa.TransformerQA._tokenizer_wrapper.save", "transformer_qa.TransformerQA._qa_model.resize_token_embeddings", "len", "len"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__init__", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.save"], ["\n", "return", "self", ".", "predict_json", "(", "{", "\"context\"", ":", "passage", ",", "\"question\"", ":", "question", "}", ")", "\n", "\n", "", "def", "predict_json", "(", "self", ",", "inputs", ":", "JsonDict", ")", "->", "JsonDict", ":", "\n", "        ", "results", "=", "self", ".", "predict_batch_json", "(", "[", "inputs", "]", ")", "\n", "assert", "len", "(", "results", ")", "==", "1", "\n", "return", "results", "[", "0", "]", "\n", "\n", "", "@", "overrides", "\n", "def", "_json_to_instance", "(", "self", ",", "json_dict", ":", "JsonDict", ")", "->", "Instance", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"This predictor maps a question to multiple instances. \"", "\n", "\"Please use _json_to_instances instead.\"", "\n", ")", "\n", "\n", "", "def", "_json_to_instances", "(", "self", ",", "json_dict", ":", "JsonDict", ")", "->", "List", "[", "Instance", "]", ":", "\n", "# We allow the passage / context to be specified with either key.", "\n", "# But we do it this way so that a 'KeyError: context' exception will be raised", "\n", "# when neither key is specified, since the 'context' key is the default and", "\n", "# the 'passage' key was only added to be compatible with the input for other", "\n", "# RC models.", "\n", "        ", "context", "=", "json_dict", "[", "\"passage\"", "]", "if", "\"passage\"", "in", "json_dict", "else", "json_dict", "[", "\"context\"", "]", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.qa.transformer_qa.TransformerQA.forward": [[61, 234], ["transformer_qa.TransformerQA._qa_model", "torch.no_grad", "torch.zeros_like", "range", "allennlp_models.rc.models.utils.replace_masked_values_with_big_negative_number", "allennlp_models.rc.models.utils.replace_masked_values_with_big_negative_number", "allennlp_models.rc.models.utils.get_best_span", "best_span_scores.squeeze.squeeze.squeeze", "transformer_qa.TransformerQA._span_accuracy", "transformer_qa.TransformerQA._span_start_accuracy", "transformer_qa.TransformerQA._span_end_accuracy", "allennlp_models.rc.models.utils.replace_masked_values_with_big_negative_number", "allennlp_models.rc.models.utils.replace_masked_values_with_big_negative_number", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "best_spans.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "enumerate", "enumerate", "enumerate", "len", "any", "torch.gather", "torch.gather", "output_dict.update", "span_mask.unsqueeze().expand_as", "zip", "src.data.tokenizers.tokens_interpreter.TokensInterpreter.extract_span_string_from_origin_texts", "output_dict[].append", "metadata_entry.get", "best_spans[].unsqueeze", "best_spans[].unsqueeze", "best_spans.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "src.data.types.Span", "span_mask.unsqueeze", "[].item", "[].item", "len", "transformer_qa.TransformerQA._boolq_accuracy", "transformer_qa.TransformerQA._per_instance_metrics", "best_spans.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.tokens_interpreter.TokensInterpreter.extract_span_string_from_origin_texts"], ["result", "=", "list", "(", "\n", "self", ".", "_dataset_reader", ".", "make_instances", "(", "\n", "qid", "=", "str", "(", "self", ".", "_next_qid", ")", ",", "\n", "question", "=", "json_dict", "[", "\"question\"", "]", ",", "\n", "answers", "=", "[", "]", ",", "\n", "context", "=", "context", ",", "\n", ")", "\n", ")", "\n", "self", ".", "_next_qid", "+=", "1", "\n", "return", "result", "\n", "\n", "", "@", "overrides", "\n", "def", "_batch_json_to_instances", "(", "self", ",", "json_dicts", ":", "List", "[", "JsonDict", "]", ")", "->", "List", "[", "Instance", "]", ":", "\n", "        ", "instances", "=", "[", "]", "\n", "for", "json_dict", "in", "json_dicts", ":", "\n", "            ", "instances", ".", "extend", "(", "self", ".", "_json_to_instances", "(", "json_dict", ")", ")", "\n", "", "return", "instances", "\n", "\n", "", "@", "overrides", "\n", "def", "predict_batch_json", "(", "self", ",", "inputs", ":", "List", "[", "JsonDict", "]", ")", "->", "List", "[", "JsonDict", "]", ":", "\n", "        ", "instances", "=", "self", ".", "_batch_json_to_instances", "(", "inputs", ")", "\n", "result", "=", "self", ".", "predict_batch_instance", "(", "instances", ")", "\n", "assert", "len", "(", "result", ")", "==", "len", "(", "inputs", ")", "\n", "return", "result", "\n", "\n", "", "@", "overrides", "\n", "def", "predict_batch_instance", "(", "\n", "self", ",", "\n", "instances", ":", "List", "[", "Instance", "]", ",", "\n", "group_same_id", "=", "True", ",", "\n", "allow_null", "=", "True", ",", "\n", "force_yes_no", "=", "False", ",", "\n", ")", "->", "List", "[", "JsonDict", "]", ":", "\n", "        ", "self", ".", "_model", ".", "force_yes_no", "=", "force_yes_no", "# Ugly hack", "\n", "outputs", "=", "self", ".", "_model", ".", "forward_on_instances", "(", "instances", ")", "\n", "\n", "# group outputs with the same question id", "\n", "qid_to_output", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Any", "]", "]", "=", "{", "}", "\n", "qid_to_score_null", "=", "{", "}", "\n", "qid_to_null_output", "=", "{", "}", "\n", "for", "instance", ",", "output", "in", "zip", "(", "instances", ",", "outputs", ")", ":", "\n", "            ", "qid", "=", "instance", "[", "\"metadata\"", "]", "[", "\"id\"", "]", "\n", "\n", "output", "[", "\"answers\"", "]", "=", "instance", "[", "\"metadata\"", "]", "[", "\"answers\"", "]", "\n", "output", "[", "\"token_answer_span\"", "]", "=", "instance", "[", "\"metadata\"", "]", "[", "\"token_answer_span\"", "]", "\n", "\n", "if", "group_same_id", ":", "\n", "                ", "output", "[", "\"id\"", "]", "=", "qid", "\n", "if", "qid", "in", "qid_to_output", ":", "\n", "                    ", "old_output", "=", "qid_to_output", "[", "qid", "]", "\n", "\n", "if", "\"no_answer_scores\"", "in", "old_output", ":", "\n", "                        ", "if", "output", "[", "\"no_answer_scores\"", "]", "<", "qid_to_score_null", "[", "qid", "]", ":", "\n", "                            ", "qid_to_score_null", "[", "qid", "]", "=", "output", "[", "\"no_answer_scores\"", "]", "\n", "qid_to_null_output", "[", "qid", "]", "=", "output", "\n", "\n", "", "", "if", "old_output", "[", "\"best_span_scores\"", "]", "<", "output", "[", "\"best_span_scores\"", "]", ":", "\n", "                        ", "qid_to_output", "[", "qid", "]", "=", "output", "\n", "", "", "else", ":", "\n", "                    ", "qid_to_output", "[", "qid", "]", "=", "output", "\n", "if", "\"no_answer_scores\"", "in", "output", ":", "\n", "                        ", "qid_to_score_null", "[", "qid", "]", "=", "output", "[", "\"no_answer_scores\"", "]", "\n", "qid_to_null_output", "[", "qid", "]", "=", "output", "\n", "", "", "", "else", ":", "\n", "                ", "window_index", "=", "instance", "[", "\"metadata\"", "]", "[", "\"window_index\"", "]", "\n", "full_id", "=", "f\"{qid}_{str(window_index)}\"", "if", "window_index", "is", "not", "None", "else", "qid", "\n", "output", "[", "\"id\"", "]", "=", "full_id", "\n", "qid_to_output", "[", "full_id", "]", "=", "output", "\n", "if", "\"no_answer_scores\"", "in", "output", ":", "\n", "                    ", "qid_to_score_null", "[", "qid", "]", "=", "output", "[", "\"no_answer_scores\"", "]", "\n", "qid_to_null_output", "[", "qid", "]", "=", "output", "\n", "\n", "", "", "", "for", "qid", ",", "score_null", "in", "qid_to_score_null", ".", "items", "(", ")", ":", "\n", "            ", "qid_to_output", "[", "qid", "]", "[", "\"no_answer_scores\"", "]", "=", "score_null", "\n", "if", "allow_null", ":", "\n", "                ", "if", "score_null", ">", "qid_to_output", "[", "qid", "]", "[", "\"best_span_scores\"", "]", ":", "\n", "                    ", "qid_to_output", "[", "qid", "]", "=", "qid_to_null_output", "[", "qid", "]", "\n", "qid_to_output", "[", "qid", "]", "[", "\"best_span_str\"", "]", "=", "\"\"", "\n", "qid_to_output", "[", "qid", "]", "[", "\"best_span\"", "]", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "qid_to_output", "[", "qid", "]", "[", "\"best_span_scores\"", "]", "=", "score_null", "\n", "\n", "", "", "", "return", "[", "sanitize", "(", "o", ")", "for", "o", "in", "qid_to_output", ".", "values", "(", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.qa.transformer_qa.TransformerQA.get_metrics": [[235, 244], ["metrics.update", "transformer_qa.TransformerQA._span_start_accuracy.get_metric", "transformer_qa.TransformerQA._span_end_accuracy.get_metric", "transformer_qa.TransformerQA._span_accuracy.get_metric", "transformer_qa.TransformerQA._per_instance_metrics.get_metric", "transformer_qa.TransformerQA._boolq_accuracy.get_metric"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.get_metric", "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.get_metric", "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.get_metric", "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.get_metric", "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.get_metric"], []], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.squad2_em_and_f1.Squad2EmAndF1.__init__": [[23, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "is_main", "=", "False", ")", "->", "None", ":", "\n", "        ", "self", ".", "is_main", "=", "is_main", "\n", "\n", "self", ".", "_total_em", "=", "0.0", "\n", "self", ".", "_total_f1", "=", "0.0", "\n", "self", ".", "_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.squad2_em_and_f1.Squad2EmAndF1.__call__": [[30, 44], ["float", "float", "max", "max", "allennlp_models.rc.tools.squad.compute_exact", "allennlp_models.rc.tools.squad.compute_f1"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "__call__", "(", "self", ",", "best_span_string", ",", "gold_answers", ")", ":", "\n", "        ", "exact_match", "=", "float", "(", "\n", "max", "(", "squad", ".", "compute_exact", "(", "gold_answer", ",", "best_span_string", ")", "for", "gold_answer", "in", "gold_answers", ")", "\n", ")", "\n", "f1_score", "=", "float", "(", "\n", "max", "(", "squad", ".", "compute_f1", "(", "gold_answer", ",", "best_span_string", ")", "for", "gold_answer", "in", "gold_answers", ")", "\n", ")", "\n", "\n", "self", ".", "_total_em", "+=", "exact_match", "\n", "self", ".", "_total_f1", "+=", "f1_score", "\n", "self", ".", "_count", "+=", "1", "\n", "\n", "return", "exact_match", ",", "f1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.squad2_em_and_f1.Squad2EmAndF1.get_metric": [[45, 74], ["allennlp.common.util.is_distributed", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "allennlp.common.util.is_distributed", "torch.tensor.item", "torch.tensor.item", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "squad2_em_and_f1.Squad2EmAndF1.reset", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.get_backend", "torch.get_backend"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.reset"], ["", "@", "overrides", "\n", "def", "get_metric", "(", "self", ",", "reset", ":", "bool", "=", "False", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "        ", "\"\"\"\n        Returns\n        -------\n        Average exact match and F1 score (in that order) as computed by the official SQuAD script\n        over all inputs.\n        \"\"\"", "\n", "if", "is_distributed", "(", ")", ":", "\n", "            ", "device", "=", "\"cuda\"", "if", "dist", ".", "get_backend", "(", ")", "==", "\"nccl\"", "else", "\"cpu\"", "\n", "", "else", ":", "\n", "            ", "device", "=", "\"cpu\"", "\n", "\n", "", "_total_em", "=", "torch", ".", "tensor", "(", "self", ".", "_total_em", ",", "device", "=", "device", ")", "\n", "_total_f1", "=", "torch", ".", "tensor", "(", "self", ".", "_total_f1", ",", "device", "=", "device", ")", "\n", "_count", "=", "torch", ".", "tensor", "(", "self", ".", "_count", ",", "device", "=", "device", ")", "\n", "if", "is_distributed", "(", ")", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "_total_em", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "dist", ".", "all_reduce", "(", "_total_f1", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "dist", ".", "all_reduce", "(", "_count", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "\n", "", "if", "reset", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "\n", "", "exact_match", "=", "_total_em", ".", "item", "(", ")", "/", "_count", ".", "item", "(", ")", "if", "_count", ">", "0", "else", "0", "\n", "f1_score", "=", "_total_f1", ".", "item", "(", ")", "/", "_count", ".", "item", "(", ")", "if", "_count", ">", "0", "else", "0", "\n", "count", "=", "_count", ".", "item", "(", ")", "\n", "\n", "return", "{", "\"em\"", ":", "exact_match", ",", "\"f1\"", ":", "f1_score", ",", "\"count\"", ":", "count", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.squad2_em_and_f1.Squad2EmAndF1.reset": [[75, 80], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_total_em", "=", "0.0", "\n", "self", ".", "_total_f1", "=", "0.0", "\n", "self", ".", "_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.squad2_em_and_f1.Squad2EmAndF1.__str__": [[81, 83], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f\"Squad2EmAndF1(em={self._total_em}, f1={self._total_f1}, count={self._count})\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.__init__": [[60, 65], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "is_main", "=", "False", ")", "->", "None", ":", "\n", "        ", "self", ".", "is_main", "=", "is_main", "\n", "\n", "self", ".", "_total_sari", "=", "0.0", "\n", "self", ".", "_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.__call__": [[66, 74], ["sum", "len", "sari.get_sari", "len", "len"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.get_sari"], ["", "@", "overrides", "\n", "def", "__call__", "(", "self", ",", "source_ids", ",", "prediction_ids", ",", "target_ids", ")", ":", "\n", "        ", "sari_per_example", "=", "get_sari", "(", "source_ids", ",", "prediction_ids", ",", "target_ids", ")", "[", "0", "]", "\n", "assert", "len", "(", "source_ids", ")", "==", "len", "(", "sari_per_example", ")", "\n", "self", ".", "_total_sari", "+=", "sum", "(", "sari_per_example", ")", "\n", "self", ".", "_count", "+=", "len", "(", "sari_per_example", ")", "\n", "\n", "return", "sari_per_example", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.get_metric": [[75, 101], ["allennlp.common.util.is_distributed", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "allennlp.common.util.is_distributed", "torch.tensor.item", "torch.tensor.item", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "sari.SARI.reset", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.tensor.item", "torch.get_backend", "torch.get_backend"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.reset"], ["", "@", "overrides", "\n", "def", "get_metric", "(", "self", ",", "reset", ":", "bool", "=", "False", ")", "->", "Tuple", "[", "float", ",", "float", "]", ":", "\n", "        ", "\"\"\"\n        Returns\n        -------\n        Average exact match and F1 score (in that order) as computed by the official SQuAD script\n        over all inputs.\n        \"\"\"", "\n", "if", "is_distributed", "(", ")", ":", "\n", "            ", "device", "=", "\"cuda\"", "if", "dist", ".", "get_backend", "(", ")", "==", "\"nccl\"", "else", "\"cpu\"", "\n", "", "else", ":", "\n", "            ", "device", "=", "\"cpu\"", "\n", "\n", "", "_total_sari", "=", "torch", ".", "tensor", "(", "self", ".", "_total_sari", ",", "device", "=", "device", ")", "\n", "_count", "=", "torch", ".", "tensor", "(", "self", ".", "_count", ",", "device", "=", "device", ")", "\n", "if", "is_distributed", "(", ")", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "_total_sari", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "dist", ".", "all_reduce", "(", "_count", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "\n", "", "if", "reset", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "\n", "", "sari", "=", "_total_sari", ".", "item", "(", ")", "/", "_count", ".", "item", "(", ")", "if", "_count", ">", "0", "else", "0", "\n", "count", "=", "_count", ".", "item", "(", ")", "\n", "\n", "return", "{", "\"SARI\"", ":", "sari", ",", "\"count\"", ":", "count", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.reset": [[102, 106], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_total_sari", "=", "0.0", "\n", "self", ".", "_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.SARI.__str__": [[107, 109], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f\"SARI(sari={self._total_sari}, count={self._count})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari._get_ngram_counter": [[111, 127], ["set", "collections.Counter", "tuple", "range", "len"], "function", ["None"], ["", "", "def", "_get_ngram_counter", "(", "ids", ",", "n", ")", ":", "\n", "    ", "\"\"\"Get a Counter with the ngrams of the given ID list.\n    Args:\n      ids: np.array or a list corresponding to a single sentence\n      n: n-gram size\n    Returns:\n      collections.Counter with ID tuples as keys and 1s as values.\n    \"\"\"", "\n", "# Remove zero IDs used to pad the sequence.", "\n", "ids", "=", "[", "token_id", "for", "token_id", "in", "ids", "if", "token_id", "!=", "0", "]", "\n", "ngram_list", "=", "[", "tuple", "(", "ids", "[", "i", ":", "i", "+", "n", "]", ")", "for", "i", "in", "range", "(", "len", "(", "ids", ")", "+", "1", "-", "n", ")", "]", "\n", "ngrams", "=", "set", "(", "ngram_list", ")", "\n", "counts", "=", "collections", ".", "Counter", "(", ")", "\n", "for", "ngram", "in", "ngrams", ":", "\n", "        ", "counts", "[", "ngram", "]", "=", "1", "\n", "", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari._get_fbeta_score": [[129, 152], ["None"], "function", ["None"], ["", "def", "_get_fbeta_score", "(", "true_positives", ",", "selected", ",", "relevant", ",", "beta", "=", "1", ")", ":", "\n", "    ", "\"\"\"Compute Fbeta score.\n    Args:\n      true_positives: Number of true positive ngrams.\n      selected: Number of selected ngrams.\n      relevant: Number of relevant ngrams.\n      beta: 0 gives precision only, 1 gives F1 score, and Inf gives recall only.\n    Returns:\n      Fbeta score.\n    \"\"\"", "\n", "precision", "=", "1", "\n", "if", "selected", ">", "0", ":", "\n", "        ", "precision", "=", "true_positives", "/", "selected", "\n", "", "if", "beta", "==", "0", ":", "\n", "        ", "return", "precision", "\n", "", "recall", "=", "1", "\n", "if", "relevant", ">", "0", ":", "\n", "        ", "recall", "=", "true_positives", "/", "relevant", "\n", "", "if", "precision", ">", "0", "and", "recall", ">", "0", ":", "\n", "        ", "beta2", "=", "beta", "*", "beta", "\n", "return", "(", "1", "+", "beta2", ")", "*", "precision", "*", "recall", "/", "(", "beta2", "*", "precision", "+", "recall", ")", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.get_addition_score": [[154, 165], ["sum", "sum", "sum", "sari._get_fbeta_score", "added_to_prediction_counts.values"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari._get_fbeta_score"], ["", "", "def", "get_addition_score", "(", "source_counts", ",", "prediction_counts", ",", "target_counts", ")", ":", "\n", "    ", "\"\"\"Compute the addition score (Equation 4 in the paper).\"\"\"", "\n", "added_to_prediction_counts", "=", "prediction_counts", "-", "source_counts", "\n", "true_positives", "=", "sum", "(", "(", "added_to_prediction_counts", "&", "target_counts", ")", ".", "values", "(", ")", ")", "\n", "selected", "=", "sum", "(", "added_to_prediction_counts", ".", "values", "(", ")", ")", "\n", "# Note that in the paper the summation is done over all the ngrams in the", "\n", "# output rather than the ngrams in the following set difference. Since the", "\n", "# former does not make as much sense we compute the latter, which is also done", "\n", "# in the GitHub implementation.", "\n", "relevant", "=", "sum", "(", "(", "target_counts", "-", "source_counts", ")", ".", "values", "(", ")", ")", "\n", "return", "_get_fbeta_score", "(", "true_positives", ",", "selected", ",", "relevant", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.get_keep_score": [[167, 175], ["sum", "sum", "sum", "sari._get_fbeta_score", "source_and_prediction_counts.values", "source_and_target_counts.values"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari._get_fbeta_score"], ["", "def", "get_keep_score", "(", "source_counts", ",", "prediction_counts", ",", "target_counts", ")", ":", "\n", "    ", "\"\"\"Compute the keep score (Equation 5 in the paper).\"\"\"", "\n", "source_and_prediction_counts", "=", "source_counts", "&", "prediction_counts", "\n", "source_and_target_counts", "=", "source_counts", "&", "target_counts", "\n", "true_positives", "=", "sum", "(", "(", "source_and_prediction_counts", "&", "source_and_target_counts", ")", ".", "values", "(", ")", ")", "\n", "selected", "=", "sum", "(", "source_and_prediction_counts", ".", "values", "(", ")", ")", "\n", "relevant", "=", "sum", "(", "source_and_target_counts", ".", "values", "(", ")", ")", "\n", "return", "_get_fbeta_score", "(", "true_positives", ",", "selected", ",", "relevant", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.get_deletion_score": [[177, 185], ["sum", "sum", "sum", "sari._get_fbeta_score", "source_not_prediction_counts.values", "source_not_target_counts.values"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari._get_fbeta_score"], ["", "def", "get_deletion_score", "(", "source_counts", ",", "prediction_counts", ",", "target_counts", ",", "beta", "=", "0", ")", ":", "\n", "    ", "\"\"\"Compute the deletion score (Equation 6 in the paper).\"\"\"", "\n", "source_not_prediction_counts", "=", "source_counts", "-", "prediction_counts", "\n", "source_not_target_counts", "=", "source_counts", "-", "target_counts", "\n", "true_positives", "=", "sum", "(", "(", "source_not_prediction_counts", "&", "source_not_target_counts", ")", ".", "values", "(", ")", ")", "\n", "selected", "=", "sum", "(", "source_not_prediction_counts", ".", "values", "(", ")", ")", "\n", "relevant", "=", "sum", "(", "source_not_target_counts", ".", "values", "(", ")", ")", "\n", "return", "_get_fbeta_score", "(", "true_positives", ",", "selected", ",", "relevant", ",", "beta", "=", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.get_sari_score": [[187, 237], ["range", "sari._get_ngram_counter", "sari._get_ngram_counter", "collections.Counter", "collections.Counter", "collections.Counter.keys", "keep_scores.append", "deletion_scores.append", "addition_scores.append", "sum", "sum", "sum", "sari._get_ngram_counter", "sari.get_keep_score", "sari.get_deletion_score", "sari.get_addition_score"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari._get_ngram_counter", "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari._get_ngram_counter", "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari._get_ngram_counter", "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.get_keep_score", "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.get_deletion_score", "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.get_addition_score"], ["", "def", "get_sari_score", "(", "\n", "source_ids", ",", "prediction_ids", ",", "list_of_targets", ",", "max_gram_size", "=", "4", ",", "beta_for_deletion", "=", "0", "\n", ")", ":", "\n", "    ", "\"\"\"Compute the SARI score for a single prediction and one or more targets.\n    Args:\n      source_ids: a list / np.array of SentencePiece IDs\n      prediction_ids: a list / np.array of SentencePiece IDs\n      list_of_targets: a list of target ID lists / np.arrays\n      max_gram_size: int. largest n-gram size we care about (e.g. 3 for unigrams,\n          bigrams, and trigrams)\n      beta_for_deletion: beta for deletion F score.\n    Returns:\n      the SARI score and its three components: add, keep, and deletion scores\n    \"\"\"", "\n", "addition_scores", "=", "[", "]", "\n", "keep_scores", "=", "[", "]", "\n", "deletion_scores", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "1", ",", "max_gram_size", "+", "1", ")", ":", "\n", "        ", "source_counts", "=", "_get_ngram_counter", "(", "source_ids", ",", "n", ")", "\n", "prediction_counts", "=", "_get_ngram_counter", "(", "prediction_ids", ",", "n", ")", "\n", "# All ngrams in the targets with count 1.", "\n", "target_counts", "=", "collections", ".", "Counter", "(", ")", "\n", "# All ngrams in the targets with count r/num_targets, where r is the number", "\n", "# of targets where the ngram occurs.", "\n", "weighted_target_counts", "=", "collections", ".", "Counter", "(", ")", "\n", "num_nonempty_targets", "=", "0", "\n", "for", "target_ids_i", "in", "list_of_targets", ":", "\n", "            ", "target_counts_i", "=", "_get_ngram_counter", "(", "target_ids_i", ",", "n", ")", "\n", "if", "target_counts_i", ":", "\n", "                ", "weighted_target_counts", "+=", "target_counts_i", "\n", "num_nonempty_targets", "+=", "1", "\n", "", "", "for", "gram", "in", "weighted_target_counts", ".", "keys", "(", ")", ":", "\n", "            ", "weighted_target_counts", "[", "gram", "]", "/=", "num_nonempty_targets", "\n", "target_counts", "[", "gram", "]", "=", "1", "\n", "", "keep_scores", ".", "append", "(", "get_keep_score", "(", "source_counts", ",", "prediction_counts", ",", "weighted_target_counts", ")", ")", "\n", "deletion_scores", ".", "append", "(", "\n", "get_deletion_score", "(", "\n", "source_counts", ",", "\n", "prediction_counts", ",", "\n", "weighted_target_counts", ",", "\n", "beta_for_deletion", ",", "\n", ")", "\n", ")", "\n", "addition_scores", ".", "append", "(", "get_addition_score", "(", "source_counts", ",", "prediction_counts", ",", "target_counts", ")", ")", "\n", "\n", "", "avg_keep_score", "=", "sum", "(", "keep_scores", ")", "/", "max_gram_size", "\n", "avg_addition_score", "=", "sum", "(", "addition_scores", ")", "/", "max_gram_size", "\n", "avg_deletion_score", "=", "sum", "(", "deletion_scores", ")", "/", "max_gram_size", "\n", "sari", "=", "(", "avg_keep_score", "+", "avg_addition_score", "+", "avg_deletion_score", ")", "/", "3.0", "\n", "return", "sari", ",", "avg_keep_score", ",", "avg_addition_score", ",", "avg_deletion_score", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.get_sari": [[239, 277], ["zip", "sari.get_sari_score", "sari_scores.append", "keep_scores.append", "add_scores.append", "deletion_scores.append", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.metrics.sari.get_sari_score"], ["", "def", "get_sari", "(", "source_ids", ",", "prediction_ids", ",", "target_ids", ",", "max_gram_size", "=", "4", ")", ":", "\n", "    ", "\"\"\"Computes the SARI scores from the given source, prediction and targets.\n    Args:\n      source_ids: A 2D tf.Tensor of size (batch_size , sequence_length)\n      prediction_ids: A 2D tf.Tensor of size (batch_size, sequence_length)\n      target_ids: A 3D tf.Tensor of size (batch_size, number_of_targets,\n          sequence_length)\n      max_gram_size: int. largest n-gram size we care about (e.g. 3 for unigrams,\n          bigrams, and trigrams)\n    Returns:\n      A 4-tuple of 1D float Tensors of size (batch_size) for the SARI score and\n          the keep, addition and deletion scores.\n    \"\"\"", "\n", "\n", "# def get_sari_numpy(source_ids, prediction_ids, target_ids):", "\n", "\"\"\"Iterate over elements in the batch and call the SARI function.\"\"\"", "\n", "sari_scores", "=", "[", "]", "\n", "keep_scores", "=", "[", "]", "\n", "add_scores", "=", "[", "]", "\n", "deletion_scores", "=", "[", "]", "\n", "# Iterate over elements in the batch.", "\n", "for", "source_ids_i", ",", "prediction_ids_i", ",", "target_ids_i", "in", "zip", "(", "source_ids", ",", "prediction_ids", ",", "target_ids", ")", ":", "\n", "        ", "sari", ",", "keep", ",", "add", ",", "deletion", "=", "get_sari_score", "(", "\n", "source_ids_i", ",", "\n", "prediction_ids_i", ",", "\n", "target_ids_i", ",", "\n", "max_gram_size", ",", "\n", "BETA_FOR_SARI_DELETION_F_MEASURE", ",", "\n", ")", "\n", "sari_scores", ".", "append", "(", "sari", ")", "\n", "keep_scores", ".", "append", "(", "keep", ")", "\n", "add_scores", ".", "append", "(", "add", ")", "\n", "deletion_scores", ".", "append", "(", "deletion", ")", "\n", "", "return", "(", "\n", "np", ".", "asarray", "(", "sari_scores", ")", ",", "\n", "np", ".", "asarray", "(", "keep_scores", ")", ",", "\n", "np", ".", "asarray", "(", "add_scores", ")", ",", "\n", "np", ".", "asarray", "(", "deletion_scores", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.data.types.Span.is_subspan_of": [[8, 12], ["None"], "methods", ["None"], ["def", "is_subspan_of", "(", "self", ",", "other_span", ")", ":", "\n", "        ", "return", "(", "\n", "other_span", ".", "start", "<=", "self", ".", "start", "<=", "other_span", ".", "end", "\n", "and", "other_span", ".", "start", "<=", "self", ".", "end", "<=", "other_span", ".", "end", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.tokens_interpreter.Interpretation.__init__": [[15, 20], ["collections.OrderedDict.__init__"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output", ":", "List", "[", "str", "]", "=", "kwargs", "[", "\"output\"", "]", "\n", "self", ".", "stats", ":", "Dict", "[", "str", ",", "Any", "]", "=", "kwargs", "[", "\"stats\"", "]", "\n", "self", ".", "translation", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "kwargs", "[", "\"translation\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.tokens_interpreter.TokensInterpreter.__init__": [[25, 36], ["allennlp.common.registrable.Registrable.__init__"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "tokenizer_wrapper", ":", "HFTokenizerWrapper", ",", "\n", "multi_span_sep_token", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "position_only", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_tokenizer_wrapper", "=", "tokenizer_wrapper", "\n", "self", ".", "_multi_span_sep_token", "=", "multi_span_sep_token", "\n", "self", ".", "_position_only", "=", "position_only", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.tokens_interpreter.TokensInterpreter.__call__": [[37, 42], ["tokens_interpreter.TokensInterpreter.interpret"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.tokens_interpreter.TokensInterpreter.interpret"], ["", "def", "__call__", "(", "\n", "self", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "return", "self", ".", "interpret", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.tokens_interpreter.TokensInterpreter.interpret": [[43, 72], ["tokens_interpreter.Interpretation", "len", "output.append", "tokens_interpreter.TokensInterpreter.translate"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.tokens_interpreter.TokensInterpreter.translate"], ["", "def", "interpret", "(", "\n", "self", ",", "\n", "tokens", ":", "List", "[", "str", "]", ",", "\n", "origin_texts", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", "offset_mapping", ":", "Optional", "[", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", "]", "=", "None", ",", "\n", "special_tokens_mask", ":", "Optional", "[", "List", "[", "int", "]", "]", "=", "None", ",", "\n", "explicit_translation_request", "=", "False", ",", "\n", ")", "->", "Interpretation", ":", "\n", "        ", "\"\"\"\n        Given a sequence of tokens and position tokens,\n        return a sequence composed of tokens and span tuples\n        which can naturally be translated into text.\n        \"\"\"", "\n", "output", "=", "[", "]", "\n", "stats", "=", "{", "}", "\n", "translation", "=", "[", "\"\"", "]", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "tokens", ")", ":", "\n", "            ", "token", "=", "tokens", "[", "i", "]", "\n", "output", ".", "append", "(", "token", ")", "\n", "i", "+=", "1", "\n", "\n", "", "if", "(", "\n", "origin_texts", "is", "not", "None", "and", "offset_mapping", "is", "not", "None", "\n", ")", "or", "explicit_translation_request", ":", "\n", "            ", "translation", "=", "self", ".", "translate", "(", "output", ")", "\n", "\n", "", "return", "Interpretation", "(", "output", "=", "output", ",", "stats", "=", "stats", ",", "translation", "=", "translation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.tokens_interpreter.TokensInterpreter.translate": [[73, 105], ["raw_tokens.append", "len", "output.append", "len", "tokens_interpreter.TokensInterpreter._ids_to_clean_text", "tokenizer_wrapper.convert_tokens_to_ids", "len", "output.append"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.tokens_interpreter.TokensInterpreter._ids_to_clean_text", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.convert_tokens_to_ids"], ["", "def", "translate", "(", "\n", "self", ",", "\n", "interpretation_output", ":", "List", "[", "str", "]", ",", "\n", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "tokenizer_wrapper", "=", "self", ".", "_tokenizer_wrapper", "\n", "multi_span_sep_token", "=", "self", ".", "_multi_span_sep_token", "\n", "\n", "output", "=", "[", "]", "\n", "\n", "raw_tokens", "=", "[", "]", "\n", "for", "item", "in", "interpretation_output", "+", "[", "None", "]", ":", "\n", "            ", "is_none", "=", "item", "is", "None", "\n", "is_multi_span_sep", "=", "(", "not", "is_none", ")", "and", "item", "==", "multi_span_sep_token", "\n", "\n", "if", "is_none", "or", "is_multi_span_sep", ":", "\n", "                ", "if", "len", "(", "raw_tokens", ")", ">", "0", ":", "\n", "                    ", "partial_output", "=", "self", ".", "_ids_to_clean_text", "(", "\n", "tokenizer_wrapper", ".", "convert_tokens_to_ids", "(", "raw_tokens", ")", "\n", ")", "\n", "raw_tokens", "=", "[", "]", "\n", "if", "len", "(", "partial_output", ")", ">", "0", ":", "\n", "                        ", "output", ".", "append", "(", "partial_output", ")", "\n", "\n", "", "", "if", "is_none", "or", "is_multi_span_sep", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "raw_tokens", ".", "append", "(", "item", ")", "\n", "\n", "", "if", "len", "(", "output", ")", "==", "0", ":", "\n", "            ", "output", ".", "append", "(", "\"\"", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.tokens_interpreter.TokensInterpreter.extract_span_string_from_origin_texts": [[106, 159], ["src.data.tokenizers.offset_mapping_utils.get_sequence_boundaries", "range", "range", "len", "len", "src.data.types.Span", "len", "range", "range", "span_string_parts.append", "len", "len", "len", "max", "min"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.get_sequence_boundaries"], ["", "@", "staticmethod", "\n", "def", "extract_span_string_from_origin_texts", "(", "\n", "span", ":", "Span", ",", "\n", "origin_texts", ":", "List", "[", "str", "]", ",", "\n", "offset_mapping", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "special_tokens_mask", ":", "List", "[", "int", "]", ",", "\n", ")", ":", "\n", "        ", "if", "span", ".", "start", "==", "-", "1", "or", "span", ".", "end", "==", "-", "1", ":", "\n", "            ", "return", "\"\"", "\n", "", "if", "span", ".", "start", ">=", "len", "(", "offset_mapping", ")", ":", "\n", "            ", "return", "\"\"", "\n", "", "if", "span", ".", "end", ">=", "len", "(", "offset_mapping", ")", ":", "\n", "            ", "span", "=", "Span", "(", "span", ".", "start", ",", "len", "(", "offset_mapping", ")", "-", "1", ")", "\n", "\n", "", "sequence_ranges", "=", "get_sequence_boundaries", "(", "special_tokens_mask", ")", "\n", "start_span_origin_index", "=", "None", "\n", "end_span_origin_index", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "origin_texts", ")", ")", ":", "\n", "            ", "sequence_range", "=", "sequence_ranges", "[", "i", "]", "\n", "\n", "if", "sequence_range", ".", "start", "<=", "span", ".", "start", "<=", "sequence_range", ".", "end", ":", "\n", "                ", "start_span_origin_index", "=", "i", "\n", "if", "end_span_origin_index", "is", "not", "None", ":", "\n", "                    ", "break", "\n", "", "", "if", "sequence_range", ".", "start", "<=", "span", ".", "end", "<=", "sequence_range", ".", "end", ":", "\n", "                ", "end_span_origin_index", "=", "i", "\n", "if", "start_span_origin_index", "is", "not", "None", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "if", "start_span_origin_index", "is", "None", ":", "\n", "            ", "if", "span", ".", "start", ">", "sequence_ranges", "[", "-", "1", "]", ".", "end", ":", "\n", "                ", "return", "\"\"", "\n", "", "for", "i", "in", "range", "(", "len", "(", "sequence_ranges", ")", ")", ":", "\n", "                ", "if", "span", ".", "start", "<", "sequence_ranges", "[", "i", "]", ".", "start", ":", "\n", "                    ", "start_span_origin_index", "=", "i", "\n", "break", "\n", "\n", "", "", "", "if", "end_span_origin_index", "is", "None", ":", "\n", "            ", "if", "span", ".", "end", "<", "sequence_ranges", "[", "0", "]", ".", "start", ":", "\n", "                ", "return", "\"\"", "\n", "", "for", "i", "in", "range", "(", "len", "(", "sequence_ranges", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "if", "span", ".", "end", ">", "sequence_ranges", "[", "i", "]", ".", "end", ":", "\n", "                    ", "end_span_origin_index", "=", "i", "\n", "break", "\n", "\n", "", "", "", "span_string_parts", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "start_span_origin_index", ",", "end_span_origin_index", "+", "1", ")", ":", "\n", "            ", "character_start", "=", "offset_mapping", "[", "max", "(", "sequence_ranges", "[", "i", "]", "[", "0", "]", ",", "span", ".", "start", ")", "]", "[", "0", "]", "\n", "character_end", "=", "offset_mapping", "[", "min", "(", "sequence_ranges", "[", "i", "]", "[", "1", "]", ",", "span", ".", "end", ")", "]", "[", "1", "]", "\n", "span_string_parts", ".", "append", "(", "origin_texts", "[", "i", "]", "[", "character_start", ":", "character_end", "]", ")", "\n", "", "span_string", "=", "\" \"", ".", "join", "(", "span_string_parts", ")", "\n", "\n", "return", "span_string", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.tokens_interpreter.TokensInterpreter._ids_to_clean_text": [[160, 165], ["tokens_interpreter.TokensInterpreter._tokenizer_wrapper.tokenizer.decode", "tokens_interpreter.TokensInterpreter.strip"], "methods", ["None"], ["", "def", "_ids_to_clean_text", "(", "self", ",", "generated_ids", ":", "List", "[", "int", "]", ")", ":", "\n", "        ", "gen_text", "=", "self", ".", "_tokenizer_wrapper", ".", "tokenizer", ".", "decode", "(", "\n", "generated_ids", ",", "skip_special_tokens", "=", "True", ",", "clean_up_tokenization_spaces", "=", "True", "\n", ")", "\n", "return", "gen_text", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.get_sequence_boundaries": [[9, 29], ["enumerate", "boundaries.append", "src.data.types.Span", "boundaries.append", "len", "src.data.types.Span"], "function", ["None"], ["def", "get_sequence_boundaries", "(", "special_tokens_mask", ":", "List", "[", "int", "]", ")", ":", "\n", "    ", "\"\"\"\n    Returns the token index boundaries of a sequence that was encoded together with other sequences,\n    by using special_tokens_mask.\n    \"\"\"", "\n", "boundaries", "=", "[", "]", "\n", "start_index", "=", "None", "\n", "special_sequence", "=", "True", "\n", "for", "i", ",", "value", "in", "enumerate", "(", "special_tokens_mask", ")", ":", "\n", "        ", "if", "value", "==", "0", ":", "\n", "            ", "if", "special_sequence", "is", "True", ":", "\n", "                ", "start_index", "=", "i", "\n", "special_sequence", "=", "False", "\n", "", "", "elif", "value", "==", "1", ":", "\n", "            ", "if", "special_sequence", "is", "False", ":", "\n", "                ", "boundaries", ".", "append", "(", "Span", "(", "start_index", ",", "(", "i", "-", "1", ")", ")", ")", "\n", "special_sequence", "=", "True", "\n", "", "", "", "if", "special_sequence", "is", "False", ":", "\n", "        ", "boundaries", ".", "append", "(", "Span", "(", "start_index", ",", "len", "(", "special_tokens_mask", ")", "-", "1", ")", ")", "\n", "", "return", "boundaries", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.get_token_answer_span": [[31, 61], ["enumerate", "src.data.types.Span", "len", "offset_mapping_utils.get_sequence_boundaries", "answer_token_indices.append"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.get_sequence_boundaries"], ["", "def", "get_token_answer_span", "(", "\n", "offset_mapping", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "special_tokens_mask", ":", "List", "[", "int", "]", ",", "\n", "answer", ":", "str", ",", "\n", "answer_start_offset", ":", "int", ",", "\n", "sequence_index", ":", "int", ",", "\n", ")", ":", "\n", "    ", "answer_end_offset", "=", "answer_start_offset", "+", "len", "(", "answer", ")", "\n", "\n", "sequence_range", "=", "get_sequence_boundaries", "(", "special_tokens_mask", ")", "[", "sequence_index", "]", "\n", "\n", "if", "(", "\n", "answer_start_offset", "<", "offset_mapping", "[", "sequence_range", ".", "start", "]", "[", "0", "]", "\n", "or", "offset_mapping", "[", "sequence_range", ".", "end", "]", "[", "1", "]", "<", "answer_end_offset", "\n", ")", ":", "\n", "        ", "return", "None", "\n", "\n", "", "answer_token_indices", "=", "[", "]", "\n", "for", "i", ",", "offset", "in", "enumerate", "(", "offset_mapping", ")", ":", "\n", "        ", "if", "i", "<", "sequence_range", ".", "start", "or", "i", ">", "sequence_range", ".", "end", ":", "\n", "            ", "continue", "\n", "", "is_start", "=", "offset", "[", "0", "]", "<=", "answer_start_offset", "and", "answer_start_offset", "<", "offset", "[", "1", "]", "\n", "is_mid", "=", "answer_start_offset", "<=", "offset", "[", "0", "]", "and", "offset", "[", "1", "]", "<=", "answer_end_offset", "\n", "is_end", "=", "offset", "[", "0", "]", "<", "answer_end_offset", "and", "answer_end_offset", "<=", "offset", "[", "1", "]", "\n", "\n", "if", "is_start", "or", "is_mid", "or", "is_end", ":", "\n", "            ", "answer_token_indices", ".", "append", "(", "i", ")", "\n", "\n", "", "", "token_answer_span", "=", "Span", "(", "answer_token_indices", "[", "0", "]", ",", "answer_token_indices", "[", "-", "1", "]", ")", "\n", "return", "token_answer_span", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.find_all": [[63, 73], ["text.find", "matches.append"], "function", ["None"], ["", "def", "find_all", "(", "substr", ",", "text", ")", ":", "\n", "    ", "matches", "=", "[", "]", "\n", "start", "=", "0", "\n", "while", "True", ":", "\n", "        ", "start", "=", "text", ".", "find", "(", "substr", ",", "start", ")", "\n", "if", "start", "==", "-", "1", ":", "\n", "            ", "break", "\n", "", "matches", ".", "append", "(", "start", ")", "\n", "start", "+=", "1", "\n", "", "return", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.run_strip_accents": [[75, 88], ["unicodedata.normalize", "unicodedata.category", "output.append"], "function", ["None"], ["", "def", "run_strip_accents", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    From tokenization_bert.py by huggingface/transformers.\n    Strips accents from a piece of text.\n    \"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "        ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "            ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.group_tokens_by_whole_words": [[95, 170], ["offset_mapping_utils.get_sequence_boundaries", "enumerate", "enumerate", "any", "offset_mapping_utils.TokensGroup", "range", "len", "tokens_group_indices.append", "len", "offset_mapping_utils.TokensGroup", "offset_mapping_utils.TokensGroup", "offset_mapping_utils.TokensGroup", "tokens_group_indices.append", "str", "range"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.get_sequence_boundaries"], ["", "def", "group_tokens_by_whole_words", "(", "\n", "origin_texts", ":", "List", "[", "str", "]", ",", "\n", "offset_mapping", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "special_tokens_mask", ":", "List", "[", "int", "]", ",", "\n", "is_drop_directed", "=", "False", ",", "\n", ")", "->", "List", "[", "TokensGroup", "]", ":", "\n", "# This is a very rough heuristic - Assume that other than space, words are separated by STRIPPED_CHARACTERS,", "\n", "# Construct the string offset-by-offset from the original text,", "\n", "# and stop each time a separation indicator is encountered to construct a whole word.", "\n", "    ", "whole_word_separators", "=", "\"\"", ".", "join", "(", "[", "STRIPPED_CHARACTERS", ",", "\"\\u2013\"", ",", "\"\\u2014\"", ",", "\"\\n\"", ",", "\"\\t\"", "]", ")", "\n", "\n", "sequence_ranges", "=", "get_sequence_boundaries", "(", "special_tokens_mask", ")", "\n", "\n", "tokens_groups", ":", "List", "[", "TokensGroup", "]", "=", "[", "None", "for", "i", "in", "range", "(", "len", "(", "offset_mapping", ")", ")", "]", "\n", "tokens_group_indices", "=", "[", "]", "\n", "for", "i", ",", "(", "start_offset", ",", "end_offset", ")", "in", "enumerate", "(", "offset_mapping", ")", ":", "\n", "        ", "sequence_index", "=", "None", "\n", "for", "j", ",", "sequence_range", "in", "enumerate", "(", "sequence_ranges", ")", ":", "\n", "            ", "if", "i", ">=", "sequence_range", ".", "start", "and", "i", "<=", "sequence_range", ".", "end", ":", "\n", "                ", "sequence_index", "=", "j", "\n", "break", "\n", "", "", "if", "sequence_index", "is", "None", ":", "\n", "            ", "for", "index", "in", "tokens_group_indices", ":", "\n", "                ", "tokens_groups", "[", "index", "]", "=", "TokensGroup", "(", "tokens_group_indices", ",", "False", ")", "\n", "", "tokens_group_indices", "=", "[", "]", "\n", "continue", "\n", "\n", "", "origin_text", "=", "origin_texts", "[", "sequence_index", "]", "\n", "\n", "token_text", "=", "origin_text", "[", "start_offset", ":", "end_offset", "]", "\n", "\n", "is_first_in_sequence", "=", "i", "==", "sequence_ranges", "[", "sequence_index", "]", ".", "start", "\n", "\n", "is_after_space", "=", "False", "\n", "if", "i", ">", "0", ":", "\n", "            ", "is_after_space", "=", "offset_mapping", "[", "i", "-", "1", "]", "[", "1", "]", "!=", "start_offset", "\n", "\n", "", "is_group_separator", "=", "any", "(", "[", "char", "in", "whole_word_separators", "for", "char", "in", "token_text", "]", ")", "\n", "\n", "is_ordinal_numeral", "=", "False", "\n", "if", "len", "(", "tokens_group_indices", ")", ">", "0", ":", "\n", "            ", "last_ingested_char", "=", "origin_text", "[", "offset_mapping", "[", "tokens_group_indices", "[", "-", "1", "]", "]", "[", "1", "]", "-", "1", "]", "\n", "is_ordinal_numeral", "=", "(", "\n", "token_text", "\n", "in", "[", "\n", "\"st\"", ",", "\n", "\"nd\"", ",", "\n", "\"rd\"", ",", "\n", "\"th\"", ",", "\n", "]", "\n", "and", "last_ingested_char", "in", "[", "str", "(", "n", ")", "for", "n", "in", "range", "(", "0", ",", "9", ")", "]", "\n", ")", "\n", "\n", "", "if", "(", "\n", "is_first_in_sequence", "\n", "or", "is_after_space", "\n", "or", "is_group_separator", "\n", "or", "(", "is_ordinal_numeral", "and", "is_drop_directed", ")", "\n", ")", ":", "\n", "            ", "for", "index", "in", "tokens_group_indices", ":", "\n", "                ", "tokens_groups", "[", "index", "]", "=", "TokensGroup", "(", "tokens_group_indices", ",", "False", ")", "\n", "", "tokens_group_indices", "=", "[", "]", "\n", "\n", "if", "is_group_separator", ":", "\n", "                ", "tokens_groups", "[", "i", "]", "=", "TokensGroup", "(", "[", "i", "]", ",", "True", ")", "\n", "", "else", ":", "\n", "                ", "tokens_group_indices", ".", "append", "(", "i", ")", "\n", "", "", "else", ":", "\n", "            ", "tokens_group_indices", ".", "append", "(", "i", ")", "\n", "\n", "", "", "for", "index", "in", "tokens_group_indices", ":", "\n", "        ", "tokens_groups", "[", "index", "]", "=", "TokensGroup", "(", "tokens_group_indices", ",", "False", ")", "\n", "", "tokens_group_indices", "=", "[", "]", "\n", "\n", "return", "tokens_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.find_valid_spans": [[172, 282], ["text.lower", "answer_text.lower", "answer_texts.append", "answer_text.lower.strip", "offset_mapping_utils.run_strip_accents", "offset_mapping_utils.run_strip_accents", "answer_texts.append", "get_token_answer_span_partial", "offset_mapping_utils.find_all", "answer_texts.append", "answer_texts.append", "answer_texts.append", "sorted", "get_token_answer_span_partial", "valid_spans.append", "valid_spans.append", "answer_text_option.strip", "text[].lower().strip", "valid_spans.append", "len", "abs", "text[].lower", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.run_strip_accents", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.run_strip_accents", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.find_all"], ["", "def", "find_valid_spans", "(", "\n", "text", ":", "str", ",", "\n", "answer_text", ":", "str", ",", "\n", "offset_mapping", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "special_tokens_mask", ",", "\n", "get_token_answer_span_partial", ":", "Callable", ",", "\n", "tokens_groups", ":", "List", "[", "TokensGroup", "]", ",", "\n", "answer_start_offset", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "str", ",", "List", "[", "Span", "]", "]", ":", "\n", "    ", "text", "=", "(", "\n", "text", ".", "lower", "(", ")", "if", "answer_start_offset", "is", "None", "else", "text", "\n", ")", "# .lower() can change the length of the text", "\n", "\n", "answer_texts", "=", "[", "]", "\n", "if", "answer_start_offset", "is", "None", ":", "\n", "        ", "option1", "=", "answer_text", ".", "lower", "(", ")", "\n", "answer_texts", ".", "append", "(", "option1", ")", "\n", "option2", "=", "option1", ".", "strip", "(", "STRIPPED_CHARACTERS", ")", "\n", "if", "option2", "not", "in", "answer_texts", ":", "\n", "            ", "answer_texts", ".", "append", "(", "option2", ")", "\n", "", "option3", "=", "run_strip_accents", "(", "option1", ")", "\n", "if", "option3", "not", "in", "answer_texts", ":", "\n", "            ", "answer_texts", ".", "append", "(", "option3", ")", "\n", "", "option4", "=", "run_strip_accents", "(", "option2", ")", "\n", "if", "option4", "not", "in", "answer_texts", ":", "\n", "            ", "answer_texts", ".", "append", "(", "option4", ")", "\n", "", "", "else", ":", "\n", "        ", "answer_texts", ".", "append", "(", "answer_text", ")", "\n", "\n", "", "valid_spans", "=", "[", "]", "\n", "\n", "known_token_answer_span", "=", "None", "\n", "if", "answer_start_offset", "is", "not", "None", ":", "\n", "        ", "known_token_answer_span", "=", "get_token_answer_span_partial", "(", "\n", "answer", "=", "answer_text", ",", "\n", "answer_start_offset", "=", "answer_start_offset", ",", "\n", "offset_mapping", "=", "offset_mapping", ",", "\n", "special_tokens_mask", "=", "special_tokens_mask", ",", "\n", ")", "\n", "if", "known_token_answer_span", "is", "None", ":", "\n", "            ", "return", "valid_spans", "\n", "", "else", ":", "\n", "            ", "known_answer", "=", "text", "[", "\n", "offset_mapping", "[", "known_token_answer_span", ".", "start", "]", "[", "0", "]", ":", "offset_mapping", "[", "\n", "known_token_answer_span", ".", "end", "\n", "]", "[", "1", "]", "\n", "]", "\n", "if", "known_answer", "in", "answer_texts", ":", "\n", "                ", "valid_spans", ".", "append", "(", "known_token_answer_span", ")", "\n", "return", "valid_spans", "\n", "\n", "", "", "", "for", "answer_text_option", "in", "answer_texts", ":", "\n", "        ", "start_offsets", "=", "find_all", "(", "answer_text_option", ",", "text", ")", "\n", "\n", "if", "answer_start_offset", "is", "not", "None", ":", "\n", "            ", "start_offsets", "=", "sorted", "(", "\n", "start_offsets", ",", "\n", "key", "=", "lambda", "start_offset", ":", "abs", "(", "answer_start_offset", "-", "start_offset", ")", ",", "\n", ")", "\n", "\n", "", "for", "start_offset", "in", "start_offsets", ":", "\n", "            ", "token_answer_span", "=", "get_token_answer_span_partial", "(", "\n", "answer", "=", "answer_text_option", ",", "\n", "answer_start_offset", "=", "start_offset", ",", "\n", "offset_mapping", "=", "offset_mapping", ",", "\n", "special_tokens_mask", "=", "special_tokens_mask", ",", "\n", ")", "\n", "if", "token_answer_span", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "known_token_answer_span", "is", "not", "None", ":", "\n", "                ", "if", "token_answer_span", "!=", "known_token_answer_span", ":", "\n", "                    ", "diff_threshold", "=", "10", "\n", "if", "(", "\n", "abs", "(", "token_answer_span", ".", "start", "-", "known_token_answer_span", ".", "start", ")", "\n", ">=", "diff_threshold", "\n", "or", "abs", "(", "token_answer_span", ".", "end", "-", "known_token_answer_span", ".", "end", ")", "\n", ">=", "diff_threshold", "\n", ")", ":", "\n", "                        ", "continue", "\n", "", "", "valid_spans", ".", "append", "(", "token_answer_span", ")", "\n", "break", "\n", "", "else", ":", "\n", "# Whole-word matching", "\n", "                ", "text_first_token_index", "=", "tokens_groups", "[", "token_answer_span", ".", "start", "]", ".", "token_indices", "[", "0", "]", "\n", "text_last_token_index", "=", "tokens_groups", "[", "token_answer_span", ".", "end", "]", ".", "token_indices", "[", "-", "1", "]", "\n", "if", "(", "\n", "text_first_token_index", "!=", "token_answer_span", ".", "start", "\n", "or", "text_last_token_index", "!=", "token_answer_span", ".", "end", "\n", ")", ":", "\n", "                    ", "continue", "\n", "\n", "# Text matching", "\n", "", "stripped_answer_text", "=", "answer_text_option", ".", "strip", "(", "STRIPPED_CHARACTERS", ")", "\n", "token_start_offset", ",", "token_end_offset", "=", "(", "\n", "offset_mapping", "[", "token_answer_span", ".", "start", "]", "[", "0", "]", ",", "\n", "offset_mapping", "[", "token_answer_span", ".", "end", "]", "[", "1", "]", ",", "\n", ")", "\n", "stripped_text_part", "=", "(", "\n", "text", "[", "token_start_offset", ":", "token_end_offset", "]", ".", "lower", "(", ")", ".", "strip", "(", "STRIPPED_CHARACTERS", ")", "\n", ")", "\n", "if", "stripped_answer_text", "!=", "stripped_text_part", ":", "\n", "                    ", "continue", "\n", "\n", "", "valid_spans", ".", "append", "(", "token_answer_span", ")", "\n", "\n", "", "", "if", "len", "(", "valid_spans", ")", ">", "0", "and", "known_token_answer_span", "is", "not", "None", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "valid_spans", "\n", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.__init__": [[15, 36], ["hf_tokenizer_wrapper.HFTokenizerWrapper._init_kwargs.update", "hf_tokenizer_wrapper.HFTokenizerWrapper._call_kwargs.update", "hf_tokenizer_wrapper.HFTokenizerWrapper.load", "transformers.AutoTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pretrained_model", ":", "Optional", "[", "str", "]", ",", "\n", "serialization_dir", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "init_kwargs", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "}", ",", "\n", "call_kwargs", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "}", ",", "\n", ")", ":", "\n", "        ", "self", ".", "pretrained_model", "=", "pretrained_model", "\n", "\n", "self", ".", "_init_kwargs", "=", "{", "\n", "\"use_fast\"", ":", "True", "\n", "}", "# This affects stuff, e.g. when return_overflowing_tokens=True", "\n", "self", ".", "_init_kwargs", ".", "update", "(", "init_kwargs", ")", "\n", "\n", "self", ".", "_call_kwargs", "=", "{", "}", "\n", "self", ".", "_call_kwargs", ".", "update", "(", "call_kwargs", ")", "\n", "\n", "self", ".", "tokenizer", "=", "self", ".", "load", "(", "serialization_dir", ")", "\n", "\n", "if", "self", ".", "tokenizer", "is", "None", ":", "\n", "            ", "self", ".", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "pretrained_model", ",", "**", "self", ".", "_init_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.encode": [[37, 41], ["hf_tokenizer_wrapper.HFTokenizerWrapper._call_kwargs.copy", "hf_tokenizer_wrapper.HFTokenizerWrapper.update", "hf_tokenizer_wrapper.HFTokenizerWrapper.tokenizer"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ",", "text", ":", "str", ",", "text_pair", ":", "str", "=", "None", ",", "**", "kwargs", ")", "->", "List", "[", "int", "]", ":", "\n", "        ", "call_kwargs", "=", "self", ".", "_call_kwargs", ".", "copy", "(", ")", "\n", "call_kwargs", ".", "update", "(", "kwargs", ")", "\n", "return", "self", ".", "tokenizer", "(", "text", ",", "text_pair", ",", "**", "call_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.tokenize": [[42, 44], ["hf_tokenizer_wrapper.HFTokenizerWrapper.convert_ids_to_tokens", "hf_tokenizer_wrapper.HFTokenizerWrapper.encode"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.convert_ids_to_tokens", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.encode"], ["", "def", "tokenize", "(", "self", ",", "text", ":", "str", ",", "text_pair", ":", "str", "=", "None", ",", "**", "kwargs", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "self", ".", "convert_ids_to_tokens", "(", "self", ".", "encode", "(", "text", ",", "text_pair", ")", "[", "\"input_ids\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.convert_ids_to_tokens": [[45, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "convert_ids_to_tokens", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tokenizer", ".", "convert_ids_to_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.convert_tokens_to_ids": [[49, 52], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "convert_tokens_to_ids", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.__get_dir_name": [[53, 55], ["None"], "methods", ["None"], ["", "def", "__get_dir_name", "(", "self", ",", "pending", ")", ":", "\n", "        ", "return", "\"pending_tokenizer\"", "if", "pending", "else", "\"tokenizer\"", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load": [[56, 64], ["hf_tokenizer_wrapper.HFTokenizerWrapper.__get_dir_name", "os.path.join", "os.path.isdir", "transformers.AutoTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.__get_dir_name"], ["", "def", "load", "(", "self", ",", "serialization_dir", ":", "Optional", "[", "str", "]", ",", "pending", "=", "False", ")", ":", "\n", "        ", "dir_name", "=", "self", ".", "__get_dir_name", "(", "pending", ")", "\n", "tokenizer", "=", "None", "\n", "if", "serialization_dir", "is", "not", "None", ":", "\n", "            ", "tokenizer_path", "=", "os", ".", "path", ".", "join", "(", "serialization_dir", ",", "dir_name", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "tokenizer_path", ")", ":", "\n", "                ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "tokenizer_path", ",", "**", "self", ".", "_init_kwargs", ")", "\n", "", "", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.save": [[65, 72], ["hf_tokenizer_wrapper.HFTokenizerWrapper.__get_dir_name", "os.path.join", "os.path.isdir", "transformers.AutoConfig.from_pretrained", "transformers.AutoConfig.from_pretrained.save_pretrained", "hf_tokenizer_wrapper.HFTokenizerWrapper.tokenizer.save_pretrained"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.__get_dir_name"], ["", "def", "save", "(", "self", ",", "serialization_dir", ":", "str", ",", "pending", "=", "False", ")", ":", "\n", "        ", "dir_name", "=", "self", ".", "__get_dir_name", "(", "pending", ")", "\n", "tokenizer_path", "=", "os", ".", "path", ".", "join", "(", "serialization_dir", ",", "dir_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "tokenizer_path", ")", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "self", ".", "pretrained_model", ")", "\n", "config", ".", "save_pretrained", "(", "tokenizer_path", ")", "\n", "self", ".", "tokenizer", ".", "save_pretrained", "(", "tokenizer_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_decomposition_reader.StrategyQADecompositionReader.__init__": [[21, 23], ["src.data.dataset_readers.base.base_dataset_reader.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_decomposition_reader.StrategyQADecompositionReader._direct_read": [[24, 37], ["allennlp.common.file_utils.cached_path", "logger.info", "logger.info", "allennlp.common.file_utils.open_compressed", "json.load", "strategy_decomposition_reader.StrategyQADecompositionReader._item_to_instance"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader._item_to_instance"], ["", "@", "overrides", "\n", "def", "_direct_read", "(", "self", ",", "file_path", ":", "str", ")", ":", "\n", "# if `file_path` is a URL, redirect to the cache", "\n", "        ", "file_path", "=", "cached_path", "(", "file_path", ")", "\n", "\n", "logger", ".", "info", "(", "\"Reading the dataset:\"", ")", "\n", "logger", ".", "info", "(", "\"Reading file at %s\"", ",", "file_path", ")", "\n", "with", "open_compressed", "(", "file_path", ")", "as", "dataset_file", ":", "\n", "            ", "dataset", "=", "json", ".", "load", "(", "dataset_file", ")", "\n", "for", "item", "in", "dataset", ":", "\n", "                ", "instance", "=", "self", ".", "_item_to_instance", "(", "item", ")", "\n", "if", "instance", "is", "not", "None", ":", "\n", "                    ", "yield", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_decomposition_reader.StrategyQADecompositionReader._item_to_instance": [[38, 48], ["strategy_decomposition_reader.StrategyQADecompositionReader.text_to_instance"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.boolean_qa_reader.BooleanQAReader.text_to_instance"], ["", "", "", "", "def", "_item_to_instance", "(", "self", ",", "item", ")", ":", "\n", "        ", "question", ":", "str", "=", "item", "[", "\"question\"", "]", "\n", "decomposition", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "item", "[", "\"decomposition\"", "]", "if", "\"decomposition\"", "in", "item", "else", "None", "\n", "\n", "if", "not", "self", ".", "_is_training", "or", "decomposition", "is", "not", "None", ":", "\n", "            ", "instance", "=", "self", ".", "text_to_instance", "(", "question", ",", "decomposition", ")", "\n", "if", "instance", "is", "not", "None", ":", "\n", "                ", "instance", "[", "\"metadata\"", "]", ".", "metadata", "[", "\"qid\"", "]", "=", "item", "[", "\"qid\"", "]", "\n", "", "return", "instance", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_decomposition_reader.StrategyQADecompositionReader.text_to_instance": [[49, 96], ["tokenizer_wrapper.encode", "src.data.fields.dictionary_field.DictionaryField", "allennlp.data.fields.LabelField", "allennlp.data.fields.MetadataField", "allennlp.data.instance.Instance", "tokenizer_wrapper.encode", "src.data.fields.labels_field.LabelsField", "src.data.fields.labels_field.LabelsField", "metadata.update", "src.data.fields.labels_field.LabelsField", "src.data.fields.labels_field.LabelsField", "tokenizer_wrapper.encode.items"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.encode", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.encode"], ["", "@", "overrides", "\n", "def", "text_to_instance", "(", "\n", "self", ",", "# type: ignore", "\n", "question", ":", "str", ",", "\n", "decomposition", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", ")", "->", "Instance", ":", "\n", "        ", "tokenizer_wrapper", "=", "self", ".", "_tokenizer_wrapper", "\n", "fields", "=", "{", "}", "\n", "pad_token_id", "=", "tokenizer_wrapper", ".", "tokenizer", ".", "pad_token_id", "\n", "\n", "encoded_input", "=", "tokenizer_wrapper", ".", "encode", "(", "question", ")", "\n", "fields", "[", "\"source\"", "]", "=", "DictionaryField", "(", "\n", "{", "\n", "key", ":", "LabelsField", "(", "value", ",", "padding_value", "=", "pad_token_id", ")", "\n", "if", "key", "==", "\"input_ids\"", "\n", "else", "LabelsField", "(", "value", ")", "\n", "for", "key", ",", "value", "in", "encoded_input", ".", "items", "(", ")", "\n", "}", "\n", ")", "\n", "\n", "if", "decomposition", "is", "not", "None", ":", "\n", "            ", "decomposition_str", "=", "f\" {tokenizer_wrapper.tokenizer.bos_token} \"", ".", "join", "(", "decomposition", ")", "\n", "encoded_target", "=", "tokenizer_wrapper", ".", "encode", "(", "decomposition_str", ")", "\n", "fields", "[", "\"target_ids\"", "]", "=", "LabelsField", "(", "\n", "encoded_target", "[", "\"input_ids\"", "]", ",", "padding_value", "=", "pad_token_id", "\n", ")", "\n", "", "else", ":", "\n", "            ", "fields", "[", "\"target_ids\"", "]", "=", "LabelsField", "(", "\n", "[", "]", ",", "\n", "padding_value", "=", "pad_token_id", ",", "\n", ")", "\n", "\n", "", "fields", "[", "\"decoder_start_token_id\"", "]", "=", "LabelField", "(", "\n", "tokenizer_wrapper", ".", "tokenizer", ".", "bos_token_id", ",", "skip_indexing", "=", "True", "\n", ")", "\n", "\n", "# make the metadata", "\n", "metadata", "=", "{", "\n", "\"question\"", ":", "question", ",", "\n", "}", "\n", "if", "decomposition", "is", "not", "None", ":", "\n", "            ", "metadata", ".", "update", "(", "{", "\n", "\"gold_decomposition\"", ":", "decomposition", "\n", "}", ")", "\n", "", "fields", "[", "\"metadata\"", "]", "=", "MetadataField", "(", "metadata", ")", "\n", "\n", "return", "Instance", "(", "fields", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.squad_reader.SquadV1Reader.__init__": [[32, 37], ["src.data.dataset_readers.base.base_dataset_reader.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__init__"], ["    ", "def", "__init__", "(", "self", ",", "length_limit", ":", "int", "=", "512", ",", "stride", ":", "int", "=", "0", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_length_limit", "=", "length_limit", "\n", "self", ".", "_stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.squad_reader.SquadV1Reader._reader_specific_init": [[38, 41], ["squad_reader.SquadV1Reader.additional_special_tokens.add"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "_reader_specific_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "additional_special_tokens", ".", "add", "(", "\"@@YES_NO_SEP@@\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.squad_reader.SquadV1Reader._direct_read": [[42, 98], ["allennlp.common.file_utils.cached_path", "logger.info", "logger.info", "allennlp.common.file_utils.open_compressed", "json.load", "logger.info", "src.data.dataset_readers.utils.standardization_utils.standardize_text_simple", "question_answer.get", "squad_reader.SquadV1Reader.make_instances", "src.data.dataset_readers.utils.standardization_utils.standardize_text_simple", "len", "int", "src.data.dataset_readers.utils.standardization_utils.standardize_text_simple", "question_answer.get", "question_answer.get", "answers.append"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.standardization_utils.standardize_text_simple", "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.squad_reader.SquadV1Reader.make_instances", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.standardization_utils.standardize_text_simple", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.standardization_utils.standardize_text_simple"], ["", "@", "overrides", "\n", "def", "_direct_read", "(", "self", ",", "file_path", ":", "str", ")", ":", "\n", "# if `file_path` is a URL, redirect to the cache", "\n", "        ", "file_path", "=", "cached_path", "(", "file_path", ")", "\n", "\n", "logger", ".", "info", "(", "\"Reading file at %s\"", ",", "file_path", ")", "\n", "with", "open_compressed", "(", "file_path", ")", "as", "dataset_file", ":", "\n", "            ", "dataset_json", "=", "json", ".", "load", "(", "dataset_file", ")", "\n", "dataset", "=", "dataset_json", "[", "\"data\"", "]", "\n", "", "logger", ".", "info", "(", "\"Reading the dataset\"", ")", "\n", "yielded_question_count", "=", "0", "\n", "questions_with_more_than_one_instance", "=", "0", "\n", "for", "article", "in", "dataset", ":", "\n", "            ", "for", "paragraph_json", "in", "article", "[", "\"paragraphs\"", "]", ":", "\n", "                ", "context", ",", "context_offset", "=", "standardize_text_simple", "(", "\n", "paragraph_json", "[", "\"context\"", "]", ",", "output_offset", "=", "True", "\n", ")", "\n", "for", "question_answer", "in", "paragraph_json", "[", "\"qas\"", "]", ":", "\n", "                    ", "answers", "=", "[", "\n", "standardize_text_simple", "(", "answer_json", "[", "\"text\"", "]", ")", "\n", "for", "answer_json", "in", "question_answer", "[", "\"answers\"", "]", "\n", "]", "\n", "\n", "# Just like huggingface, we only use the first answer for training.", "\n", "is_impossible", "=", "question_answer", ".", "get", "(", "\"is_impossible\"", ",", "None", ")", "\n", "if", "len", "(", "answers", ")", ">", "0", ":", "\n", "                        ", "first_answer_start_offset", "=", "int", "(", "\n", "question_answer", "[", "\"answers\"", "]", "[", "0", "]", "[", "\"answer_start\"", "]", "+", "context_offset", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "if", "is_impossible", ":", "\n", "                            ", "answers", ".", "append", "(", "\"\"", ")", "\n", "", "first_answer_start_offset", "=", "None", "\n", "\n", "", "instances", "=", "self", ".", "make_instances", "(", "\n", "standardize_text_simple", "(", "question_answer", "[", "\"question\"", "]", ")", ",", "\n", "context", ",", "\n", "answers", ",", "\n", "first_answer_start_offset", ",", "\n", "question_answer", ".", "get", "(", "\"is_impossible\"", ",", "None", ")", ",", "\n", "question_answer", ".", "get", "(", "\"id\"", ",", "None", ")", ",", "\n", "\"is_boolq\"", "in", "question_answer", ",", "\n", ")", "\n", "instances_yielded", "=", "0", "\n", "for", "instance", "in", "instances", ":", "\n", "                        ", "yield", "instance", "\n", "instances_yielded", "+=", "1", "\n", "", "if", "instances_yielded", ">", "1", ":", "\n", "                        ", "questions_with_more_than_one_instance", "+=", "1", "\n", "", "yielded_question_count", "+=", "1", "\n", "\n", "", "", "", "if", "questions_with_more_than_one_instance", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"%d (%.2f%%) questions have more than one instance\"", ",", "\n", "questions_with_more_than_one_instance", ",", "\n", "100", "*", "questions_with_more_than_one_instance", "/", "yielded_question_count", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.squad_reader.SquadV1Reader.make_instances": [[100, 148], ["squad_reader.SquadV1Reader._tokenizer_wrapper.encode", "len", "range", "modified_question.index", "squad_reader.SquadV1Reader.text_to_instance", "squad_reader.SquadV1Reader.items", "len"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.encode", "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.index", "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.boolean_qa_reader.BooleanQAReader.text_to_instance"], ["", "", "def", "make_instances", "(", "\n", "self", ",", "\n", "question", ":", "str", ",", "\n", "context", ":", "str", ",", "\n", "answers", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", "first_answer_start_offset", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "is_impossible", ":", "Optional", "[", "bool", "]", "=", "None", ",", "\n", "qid", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "is_boolq", ":", "bool", "=", "False", ",", "\n", ")", "->", "Iterable", "[", "Instance", "]", ":", "\n", "\n", "        ", "modified_question", "=", "\"yes no@@YES_NO_SEP@@\"", "+", "question", "+", "(", "\"?\"", "if", "is_boolq", "else", "\"\"", ")", "\n", "\n", "encoded_input", "=", "self", ".", "_tokenizer_wrapper", ".", "encode", "(", "\n", "modified_question", ",", "\n", "context", ",", "\n", "truncation", "=", "\"only_second\"", ",", "\n", "return_offsets_mapping", "=", "True", ",", "\n", "return_special_tokens_mask", "=", "True", ",", "\n", "return_overflowing_tokens", "=", "True", ",", "\n", "max_length", "=", "self", ".", "_length_limit", ",", "\n", "stride", "=", "self", ".", "_stride", ",", "\n", ")", "\n", "\n", "if", "is_boolq", ":", "\n", "            ", "first_answer_start_offset", "=", "modified_question", ".", "index", "(", "answers", "[", "0", "]", ")", "\n", "\n", "", "num_of_windows", "=", "len", "(", "encoded_input", "[", "\"overflow_to_sample_mapping\"", "]", ")", "\n", "for", "i", "in", "range", "(", "num_of_windows", ")", ":", "\n", "            ", "instance", "=", "self", ".", "text_to_instance", "(", "\n", "question", ",", "\n", "modified_question", ",", "\n", "context", ",", "\n", "{", "\n", "key", ":", "value", "[", "i", "]", "\n", "for", "key", ",", "value", "in", "encoded_input", ".", "items", "(", ")", "\n", "if", "len", "(", "value", ")", "==", "num_of_windows", "\n", "}", ",", "\n", "answers", ",", "\n", "first_answer_start_offset", ",", "\n", "is_impossible", ",", "\n", "qid", ",", "\n", "i", ",", "\n", "is_boolq", ",", "\n", ")", "\n", "if", "instance", "is", "not", "None", ":", "\n", "                ", "yield", "instance", "\n", "", "break", "# Don't use windows, just the first", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.squad_reader.SquadV1Reader.text_to_instance": [[149, 270], ["src.data.tokenizers.offset_mapping_utils.get_sequence_boundaries", "src.data.fields.dictionary_field.DictionaryField", "allennlp.data.fields.SpanField", "allennlp.data.fields.SpanField", "allennlp.data.fields.MetadataField", "allennlp.data.instance.Instance", "src.data.tokenizers.offset_mapping_utils.group_tokens_by_whole_words", "src.data.tokenizers.offset_mapping_utils.find_valid_spans", "all", "allennlp.data.fields.SpanField", "src.data.types.Span", "functools.partial", "len", "src.data.fields.labels_field.LabelsField", "src.data.fields.labels_field.LabelsField", "encoded_input.items", "len", "allennlp.data.fields.SpanField", "allennlp.data.fields.SpanField", "len"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.get_sequence_boundaries", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.group_tokens_by_whole_words", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.offset_mapping_utils.find_valid_spans"], ["", "", "@", "overrides", "\n", "def", "text_to_instance", "(", "\n", "self", ",", "# type: ignore", "\n", "question", ":", "str", ",", "\n", "modified_question", ":", "str", ",", "\n", "context", ":", "str", ",", "\n", "encoded_input", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "answers", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "first_answer_start_offset", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "is_impossible", ":", "Optional", "[", "bool", "]", "=", "None", ",", "\n", "qid", ":", "str", "=", "None", ",", "\n", "window_index", ":", "int", "=", "None", ",", "\n", "is_boolq", ":", "bool", "=", "False", ",", "\n", ")", "->", "Instance", ":", "\n", "        ", "tokenizer_wrapper", "=", "self", ".", "_tokenizer_wrapper", "\n", "offset_mapping", "=", "encoded_input", "[", "\"offset_mapping\"", "]", "\n", "special_tokens_mask", "=", "encoded_input", "[", "\"special_tokens_mask\"", "]", "\n", "\n", "token_answer_span", "=", "None", "\n", "if", "first_answer_start_offset", "is", "not", "None", "and", "answers", ":", "\n", "            ", "answer", "=", "answers", "[", "0", "]", "\n", "relevant_sequence_index", "=", "0", "if", "is_boolq", "else", "1", "\n", "tokens_groups", "=", "group_tokens_by_whole_words", "(", "\n", "[", "modified_question", ",", "context", "]", ",", "offset_mapping", ",", "special_tokens_mask", "\n", ")", "\n", "valid_spans", "=", "find_valid_spans", "(", "\n", "modified_question", "if", "is_boolq", "else", "context", ",", "\n", "answer", ",", "\n", "offset_mapping", ",", "\n", "special_tokens_mask", ",", "\n", "functools", ".", "partial", "(", "\n", "get_token_answer_span", ",", "\n", "sequence_index", "=", "relevant_sequence_index", ",", "\n", ")", ",", "\n", "tokens_groups", ",", "\n", "first_answer_start_offset", ",", "\n", ")", "\n", "token_answer_span", "=", "valid_spans", "[", "0", "]", "if", "len", "(", "valid_spans", ")", ">", "0", "else", "None", "\n", "\n", "", "if", "self", ".", "_is_training", "and", "(", "\n", "token_answer_span", "is", "None", "and", "(", "is_impossible", "is", "None", "or", "is_impossible", "is", "False", ")", "\n", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "", "seq_boundaries", "=", "get_sequence_boundaries", "(", "special_tokens_mask", ")", "\n", "(", "first_context_token_index", ",", "last_context_token_index", ",", ")", "=", "(", "\n", "seq_boundaries", "[", "1", "]", "if", "len", "(", "seq_boundaries", ")", ">", "1", "else", "(", "-", "1", ",", "-", "1", ")", "\n", ")", "\n", "\n", "fields", "=", "{", "}", "\n", "pad_token_id", "=", "tokenizer_wrapper", ".", "tokenizer", ".", "pad_token_id", "\n", "\n", "excluded_keys", "=", "[", "\n", "\"offset_mapping\"", ",", "\n", "\"special_tokens_mask\"", ",", "\n", "\"overflow_to_sample_mapping\"", ",", "\n", "]", "\n", "\n", "encoded_input_fields", "=", "{", "\n", "key", ":", "LabelsField", "(", "value", ",", "padding_value", "=", "pad_token_id", ")", "\n", "if", "key", "==", "\"input_ids\"", "\n", "else", "LabelsField", "(", "value", ")", "\n", "for", "key", ",", "value", "in", "encoded_input", ".", "items", "(", ")", "\n", "if", "key", "not", "in", "excluded_keys", "\n", "}", "\n", "fields", "[", "\"question_with_context\"", "]", "=", "DictionaryField", "(", "\n", "encoded_input_fields", ",", "length", "=", "len", "(", "encoded_input", "[", "\"input_ids\"", "]", ")", "\n", ")", "\n", "\n", "# make the answer span", "\n", "seq_field", "=", "encoded_input_fields", "[", "\"input_ids\"", "]", "\n", "if", "token_answer_span", "is", "not", "None", ":", "\n", "            ", "assert", "all", "(", "i", ">=", "0", "for", "i", "in", "token_answer_span", ")", "\n", "assert", "token_answer_span", ".", "start", "<=", "token_answer_span", ".", "end", "\n", "\n", "fields", "[", "\"answer_span\"", "]", "=", "SpanField", "(", "\n", "token_answer_span", ".", "start", ",", "\n", "token_answer_span", ".", "end", ",", "\n", "seq_field", ",", "\n", ")", "\n", "", "else", ":", "\n", "# We have to put in something even when we don't have an answer, so that this instance can be batched", "\n", "# together with other instances that have answers.", "\n", "            ", "if", "is_impossible", "is", "True", ":", "\n", "                ", "fields", "[", "\"answer_span\"", "]", "=", "SpanField", "(", "0", ",", "0", ",", "seq_field", ")", "\n", "", "else", ":", "\n", "                ", "fields", "[", "\"answer_span\"", "]", "=", "SpanField", "(", "-", "1", ",", "-", "1", ",", "seq_field", ")", "\n", "\n", "# make the context span, i.e., the span of text from which possible answers should be drawn", "\n", "", "", "fields", "[", "\"context_span\"", "]", "=", "SpanField", "(", "\n", "first_context_token_index", ",", "\n", "last_context_token_index", ",", "\n", "seq_field", ",", "\n", ")", "\n", "fields", "[", "\"yes_no_span\"", "]", "=", "SpanField", "(", "\n", "seq_boundaries", "[", "0", "]", "[", "0", "]", ",", "\n", "seq_boundaries", "[", "0", "]", "[", "0", "]", "+", "1", ",", "\n", "seq_field", ",", "\n", ")", "\n", "\n", "if", "token_answer_span", "is", "None", ":", "\n", "            ", "token_answer_span", "=", "Span", "(", "-", "1", ",", "-", "1", ")", "\n", "\n", "# make the metadata", "\n", "", "metadata", "=", "{", "\n", "\"question\"", ":", "question", ",", "\n", "\"modified_question\"", ":", "modified_question", ",", "\n", "\"context\"", ":", "context", ",", "\n", "\"offset_mapping\"", ":", "offset_mapping", ",", "\n", "\"special_tokens_mask\"", ":", "special_tokens_mask", ",", "\n", "\"answers\"", ":", "answers", ",", "\n", "\"first_answer_start_offset\"", ":", "first_answer_start_offset", ",", "\n", "\"id\"", ":", "qid", ",", "\n", "\"window_index\"", ":", "window_index", ",", "\n", "\"token_answer_span\"", ":", "token_answer_span", ",", "\n", "\"is_impossible\"", ":", "is_impossible", ",", "\n", "\"is_boolq\"", ":", "is_boolq", ",", "\n", "}", "\n", "fields", "[", "\"metadata\"", "]", "=", "MetadataField", "(", "metadata", ")", "\n", "\n", "return", "Instance", "(", "fields", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader.__init__": [[34, 85], ["src.data.dataset_readers.base.base_dataset_reader.BaseDatasetReader.__init__", "filelock.FileLock", "os.path.exists", "os.path.exists", "os.path.exists", "open", "open", "strategy_qa_reader.StrategyQAReader._paragraphs_cache.update", "open", "strategy_qa_reader.StrategyQAReader._paragraphs_cache.update", "open", "json.load", "json.loads", "json.load", "json.load"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__init__", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "paragraphs_source", ":", "str", ",", "\n", "answer_last_decomposition_step", ":", "bool", "=", "False", ",", "\n", "skip_if_context_missing", ":", "bool", "=", "True", ",", "# Has an effect only in training", "\n", "paragraphs_limit", ":", "int", "=", "10", ",", "\n", "generated_decompositions_paths", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", "save_elasticsearch_cache", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_paragraphs_source", "=", "paragraphs_source", "\n", "self", ".", "_paragraphs_limit", "=", "paragraphs_limit", "\n", "self", ".", "_generated_decompositions_paths", "=", "generated_decompositions_paths", "\n", "self", ".", "_answer_last_decomposition_step", "=", "answer_last_decomposition_step", "\n", "self", ".", "_skip_if_context_missing", "=", "skip_if_context_missing", "\n", "\n", "self", ".", "_generated_decompositions", "=", "None", "\n", "if", "self", ".", "_generated_decompositions_paths", "is", "not", "None", ":", "\n", "            ", "self", ".", "_generated_decompositions", "=", "{", "}", "\n", "for", "generated_decompositions_path", "in", "self", ".", "_generated_decompositions_paths", ":", "\n", "                ", "with", "open", "(", "\n", "generated_decompositions_path", ",", "mode", "=", "\"r\"", ",", "encoding", "=", "\"utf-8\"", "\n", ")", "as", "generated_Decompositions_file", ":", "\n", "                    ", "for", "line", "in", "generated_Decompositions_file", ":", "\n", "                        ", "item", "=", "json", ".", "loads", "(", "line", ")", "\n", "self", ".", "_generated_decompositions", "[", "item", "[", "\"qid\"", "]", "]", "=", "[", "\n", "{", "\"question\"", ":", "question", "}", "for", "question", "in", "item", "[", "\"decomposition\"", "]", "\n", "]", "\n", "\n", "", "", "", "", "self", ".", "_save_elasticsearch_cache", "=", "save_elasticsearch_cache", "\n", "with", "FileLock", "(", "\"cache.lock\"", ")", ":", "\n", "            ", "self", ".", "_paragraphs_cache", "=", "{", "}", "\n", "if", "os", ".", "path", ".", "exists", "(", "\"data/strategyqa/strategyqa_train_paragraphs.json\"", ")", ":", "\n", "                ", "with", "open", "(", "\n", "\"data/strategyqa/strategyqa_train_paragraphs.json\"", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", "\n", ")", "as", "f", ":", "\n", "                    ", "self", ".", "_paragraphs_cache", ".", "update", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "if", "os", ".", "path", ".", "exists", "(", "\"data/strategyqa/strategyqa_test_paragraphs.json\"", ")", ":", "\n", "                ", "with", "open", "(", "\n", "\"data/strategyqa/strategyqa_test_paragraphs.json\"", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", "\n", ")", "as", "f", ":", "\n", "                    ", "self", ".", "_paragraphs_cache", ".", "update", "(", "json", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "if", "os", ".", "path", ".", "exists", "(", "QUERIES_CACHE_PATH", ")", ":", "\n", "                ", "with", "open", "(", "QUERIES_CACHE_PATH", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "                    ", "self", ".", "_queries_cache", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "_queries_cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader._direct_read": [[86, 113], ["allennlp.common.file_utils.cached_path", "logger.info", "logger.info", "allennlp.common.file_utils.open_compressed", "json.load", "strategy_qa_reader.StrategyQAReader._item_to_instance", "strategy_qa_reader.StrategyQAReader.json_to_item", "filelock.FileLock", "open", "json.load", "strategy_qa_reader.StrategyQAReader._queries_cache.update", "open", "json.dump", "f.flush"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader._item_to_instance", "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader.json_to_item", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load"], ["", "", "", "@", "overrides", "\n", "def", "_direct_read", "(", "self", ",", "file_path", ":", "str", ")", ":", "\n", "# if `file_path` is a URL, redirect to the cache", "\n", "        ", "file_path", "=", "cached_path", "(", "file_path", ")", "\n", "\n", "logger", ".", "info", "(", "\"Reading the dataset:\"", ")", "\n", "logger", ".", "info", "(", "\"Reading file at %s\"", ",", "file_path", ")", "\n", "with", "open_compressed", "(", "file_path", ")", "as", "dataset_file", ":", "\n", "            ", "dataset", "=", "json", ".", "load", "(", "dataset_file", ")", "\n", "\n", "", "for", "json_obj", "in", "dataset", ":", "\n", "            ", "instance", "=", "self", ".", "_item_to_instance", "(", "self", ".", "json_to_item", "(", "json_obj", ")", ")", "\n", "if", "instance", "is", "not", "None", ":", "\n", "                ", "yield", "instance", "\n", "\n", "", "", "if", "self", ".", "_save_elasticsearch_cache", ":", "\n", "            ", "with", "FileLock", "(", "\"cache.lock\"", ")", ":", "\n", "                ", "update_required", "=", "False", "\n", "with", "open", "(", "QUERIES_CACHE_PATH", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "                    ", "recent_queries_cache", "=", "json", ".", "load", "(", "f", ")", "\n", "if", "self", ".", "_queries_cache", "!=", "recent_queries_cache", ":", "\n", "                        ", "update_required", "=", "True", "\n", "self", ".", "_queries_cache", ".", "update", "(", "recent_queries_cache", ")", "\n", "", "", "if", "update_required", ":", "\n", "                    ", "with", "open", "(", "QUERIES_CACHE_PATH", ",", "\"w\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "                        ", "json", ".", "dump", "(", "self", ".", "_queries_cache", ",", "f", ")", "\n", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader.json_to_item": [[114, 171], ["copy.deepcopy", "copy.deepcopy.update", "enumerate", "list", "any", "any", "dict.fromkeys", "isinstance"], "methods", ["None"], ["", "", "", "", "", "def", "json_to_item", "(", "self", ",", "json_obj", ")", ":", "\n", "        ", "question", ":", "str", "=", "json_obj", "[", "\"question\"", "]", "\n", "answer", ":", "Optional", "[", "bool", "]", "=", "json_obj", "[", "\"answer\"", "]", "if", "\"answer\"", "in", "json_obj", "else", "None", "\n", "facts", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "json_obj", "[", "\"facts\"", "]", "if", "\"facts\"", "in", "json_obj", "else", "None", "\n", "\n", "if", "\"decomposition\"", "in", "json_obj", ":", "\n", "            ", "decomposition_full", "=", "[", "\n", "{", "\n", "\"question\"", ":", "sub_question", ",", "\n", "\"evidence_per_annotator\"", ":", "[", "\n", "list", "(", "\n", "dict", ".", "fromkeys", "(", "\n", "[", "\n", "evidence_id", "\n", "for", "evidence_ids", "in", "annotator", "[", "i", "]", "\n", "if", "isinstance", "(", "evidence_ids", ",", "list", ")", "\n", "for", "evidence_id", "in", "evidence_ids", "\n", "]", "\n", ")", "\n", ")", "\n", "for", "annotator", "in", "json_obj", "[", "\"evidence\"", "]", "\n", "]", ",", "\n", "\"is_operation_per_annotator\"", ":", "[", "\n", "any", "(", "\n", "evidence_ids", "for", "evidence_ids", "in", "annotator", "[", "i", "]", "if", "evidence_ids", "==", "\"operation\"", "\n", ")", "\n", "for", "annotator", "in", "json_obj", "[", "\"evidence\"", "]", "\n", "]", ",", "\n", "\"no_evidence_per_annotator\"", ":", "[", "\n", "any", "(", "\n", "evidence_ids", "\n", "for", "evidence_ids", "in", "annotator", "[", "i", "]", "\n", "if", "evidence_ids", "==", "\"no_evidence\"", "\n", ")", "\n", "for", "annotator", "in", "json_obj", "[", "\"evidence\"", "]", "\n", "]", ",", "\n", "}", "\n", "for", "i", ",", "sub_question", "in", "enumerate", "(", "json_obj", "[", "\"decomposition\"", "]", ")", "\n", "]", "\n", "", "else", ":", "\n", "            ", "decomposition_full", "=", "None", "\n", "\n", "", "generated_decomposition", "=", "None", "\n", "if", "self", ".", "_generated_decompositions", "is", "not", "None", ":", "\n", "            ", "generated_decomposition", "=", "self", ".", "_generated_decompositions", "[", "json_obj", "[", "\"qid\"", "]", "]", "\n", "\n", "", "item", "=", "deepcopy", "(", "json_obj", ")", "\n", "item", ".", "update", "(", "\n", "{", "\n", "\"question\"", ":", "question", ",", "\n", "\"answer\"", ":", "answer", ",", "\n", "\"decomposition\"", ":", "decomposition_full", ",", "\n", "\"generated_decomposition\"", ":", "generated_decomposition", ",", "\n", "\"facts\"", ":", "facts", ",", "\n", "}", "\n", ")", "\n", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader._item_to_instance": [[172, 193], ["strategy_qa_reader.StrategyQAReader.text_to_instance"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.boolean_qa_reader.BooleanQAReader.text_to_instance"], ["", "def", "_item_to_instance", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "item", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "question", "=", "item", "[", "\"question\"", "]", "\n", "answer", "=", "item", "[", "\"answer\"", "]", "\n", "decomposition", "=", "item", "[", "\"decomposition\"", "]", "\n", "generated_decomposition", "=", "item", "[", "\"generated_decomposition\"", "]", "\n", "facts", "=", "item", "[", "\"facts\"", "]", "\n", "\n", "if", "self", ".", "_answer_last_decomposition_step", ":", "\n", "            ", "question", "=", "decomposition", "[", "-", "1", "]", "[", "\"question\"", "]", "\n", "\n", "", "if", "not", "self", ".", "_is_training", "or", "answer", "is", "not", "None", ":", "\n", "            ", "instance", "=", "self", ".", "text_to_instance", "(", "\n", "question", ",", "answer", ",", "decomposition", ",", "generated_decomposition", ",", "facts", "\n", ")", "\n", "if", "instance", "is", "not", "None", ":", "\n", "                ", "instance", "[", "\"metadata\"", "]", ".", "metadata", "[", "\"qid\"", "]", "=", "item", "[", "\"qid\"", "]", "\n", "", "return", "instance", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader.text_to_instance": [[194, 251], ["strategy_qa_reader.StrategyQAReader.generate_context_from_paragraphs", "src.data.fields.dictionary_field.DictionaryField", "allennlp.data.fields.MetadataField", "allennlp.data.instance.Instance", "tokenizer_wrapper.encode", "tokenizer_wrapper.encode", "allennlp.data.fields.LabelField", "src.data.fields.labels_field.LabelsField", "src.data.fields.labels_field.LabelsField", "tokenizer_wrapper.encode.items", "len", "int"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader.generate_context_from_paragraphs", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.encode", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.encode"], ["", "@", "overrides", "\n", "def", "text_to_instance", "(", "\n", "self", ",", "# type: ignore", "\n", "question", ":", "str", ",", "\n", "answer", ":", "Optional", "[", "bool", "]", "=", "None", ",", "\n", "decomposition", ":", "Optional", "[", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "]", "=", "None", ",", "\n", "generated_decomposition", ":", "Optional", "[", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "]", "=", "None", ",", "\n", "facts", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "\n", ")", "->", "Instance", ":", "\n", "        ", "tokenizer_wrapper", "=", "self", ".", "_tokenizer_wrapper", "\n", "fields", "=", "{", "}", "\n", "pad_token_id", "=", "tokenizer_wrapper", ".", "tokenizer", ".", "pad_token_id", "\n", "\n", "(", "context", ",", "paragraphs", ")", "=", "self", ".", "generate_context_from_paragraphs", "(", "\n", "question", "=", "question", ",", "\n", "decomposition", "=", "decomposition", ",", "\n", "generated_decomposition", "=", "generated_decomposition", ",", "\n", "facts", "=", "facts", ",", "\n", ")", "\n", "\n", "if", "self", ".", "_paragraphs_source", "is", "not", "None", ":", "\n", "            ", "if", "context", "is", "None", ":", "\n", "                ", "if", "self", ".", "_is_training", "and", "self", ".", "_skip_if_context_missing", ":", "\n", "                    ", "return", "None", "\n", "", "context", "=", "\" \"", "\n", "", "encoded_input", "=", "tokenizer_wrapper", ".", "encode", "(", "context", ",", "question", ")", "\n", "", "else", ":", "\n", "            ", "encoded_input", "=", "tokenizer_wrapper", ".", "encode", "(", "question", ")", "\n", "\n", "", "excluded_keys", "=", "[", "\"offset_mapping\"", ",", "\"special_tokens_mask\"", "]", "\n", "encoded_input_fields", "=", "{", "\n", "key", ":", "LabelsField", "(", "value", ",", "padding_value", "=", "pad_token_id", ")", "\n", "if", "key", "==", "\"input_ids\"", "\n", "else", "LabelsField", "(", "value", ")", "\n", "for", "key", ",", "value", "in", "encoded_input", ".", "items", "(", ")", "\n", "if", "key", "not", "in", "excluded_keys", "\n", "}", "\n", "fields", "[", "\"tokens\"", "]", "=", "DictionaryField", "(", "\n", "encoded_input_fields", ",", "length", "=", "len", "(", "encoded_input", "[", "\"input_ids\"", "]", ")", "\n", ")", "\n", "\n", "if", "answer", "is", "not", "None", ":", "\n", "            ", "fields", "[", "\"label\"", "]", "=", "LabelField", "(", "int", "(", "answer", ")", ",", "skip_indexing", "=", "True", ")", "\n", "\n", "# make the metadata", "\n", "\n", "", "metadata", "=", "{", "\n", "\"question\"", ":", "question", ",", "\n", "\"answer\"", ":", "answer", ",", "\n", "\"decomposition\"", ":", "decomposition", ",", "\n", "\"generated_decomposition\"", ":", "generated_decomposition", ",", "\n", "\"paragraphs\"", ":", "paragraphs", "[", "\"unified\"", "]", ",", "\n", "\"queries\"", ":", "paragraphs", "[", "\"queries\"", "]", "if", "\"queries\"", "in", "paragraphs", "else", "[", "]", ",", "\n", "}", "\n", "fields", "[", "\"metadata\"", "]", "=", "MetadataField", "(", "metadata", ")", "\n", "\n", "return", "Instance", "(", "fields", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader.get_paragraphs": [[252, 271], ["None"], "methods", ["None"], ["", "def", "get_paragraphs", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Returns a list of dictionaries with the following keys:\n        \"title\": str\n        \"section\": str\n        \"content\": str\n        \"headers\": List[str]\n        \"para_index\": int\n        \"\"\"", "\n", "\n", "paragraphs", "=", "{", "\n", "None", ":", "lambda", "**", "kwargs", ":", "None", ",", "\n", "\"IR-Q\"", ":", "self", ".", "_ir_q", ",", "\n", "\"ORA-P\"", ":", "self", ".", "_ora_p", ",", "\n", "\"IR-ORA-D\"", ":", "self", ".", "_ir_ora_d", ",", "\n", "\"IR-D\"", ":", "self", ".", "_ir_d", ",", "\n", "}", "[", "self", ".", "_paragraphs_source", "]", "(", "**", "kwargs", ")", "\n", "\n", "return", "paragraphs", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader.generate_context_from_paragraphs": [[272, 288], ["strategy_qa_reader.StrategyQAReader.get_paragraphs", "src.data.dataset_readers.utils.elasticsearch_utils.concatenate_paragraphs", "strategy_qa_reader.StrategyQAReader.update"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.get_paragraphs_by_config.get_paragraphs", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.elasticsearch_utils.concatenate_paragraphs"], ["", "@", "property", "\n", "def", "generate_context_from_paragraphs", "(", "self", ")", ":", "\n", "        ", "def", "f", "(", "**", "kwargs", ")", ":", "\n", "            ", "paragraphs", "=", "self", ".", "get_paragraphs", "(", "**", "kwargs", ")", "\n", "\n", "if", "\"unified\"", "not", "in", "paragraphs", ":", "\n", "                ", "paragraphs", ".", "update", "(", "{", "\"unified\"", ":", "None", "}", ")", "\n", "return", "None", ",", "paragraphs", "\n", "\n", "", "if", "self", ".", "_paragraphs_limit", "is", "not", "None", ":", "\n", "                ", "paragraphs", "[", "\"unified\"", "]", "=", "paragraphs", "[", "\"unified\"", "]", "[", ":", "self", ".", "_paragraphs_limit", "]", "\n", "\n", "", "context", "=", "concatenate_paragraphs", "(", "paragraphs", "[", "\"unified\"", "]", ")", "\n", "return", "context", ",", "paragraphs", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader._ir_q": [[289, 298], ["src.data.dataset_readers.utils.elasticsearch_utils.clean_query", "src.data.dataset_readers.utils.elasticsearch_utils.get_elasticsearch_results"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.elasticsearch_utils.clean_query", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.elasticsearch_utils.get_elasticsearch_results"], ["", "def", "_ir_q", "(", "self", ",", "question", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Get paragraphs from Elasticsearch based on the question and concatenate them\n        \"\"\"", "\n", "query", "=", "clean_query", "(", "question", ")", "\n", "results", "=", "get_elasticsearch_results", "(", "self", ".", "_queries_cache", ",", "query", ")", "\n", "if", "results", "is", "None", ":", "\n", "            ", "return", "{", "\"queries\"", ":", "[", "query", "]", "}", "\n", "", "return", "{", "\"unified\"", ":", "results", ",", "\"queries\"", ":", "[", "query", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader._ora_p": [[299, 353], ["len", "range", "enumerate", "len", "src.data.dataset_readers.utils.elasticsearch_utils.get_elasticsearch_paragraph", "results.append", "len", "len", "range", "range", "results_per_step[].extend", "range", "src.data.dataset_readers.utils.elasticsearch_utils.get_elasticsearch_paragraph", "results_per_step[].append", "len", "len", "len", "evidence_ids_per_step[].append", "evidence_ids.append", "range", "len"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.elasticsearch_utils.get_elasticsearch_paragraph", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.elasticsearch_utils.get_elasticsearch_paragraph"], ["", "def", "_ora_p", "(", "self", ",", "decomposition", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "decomposition", "is", "None", "or", "len", "(", "decomposition", ")", "==", "0", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "num_of_matchings", "=", "len", "(", "decomposition", "[", "0", "]", "[", "\"evidence_per_annotator\"", "]", ")", "\n", "if", "num_of_matchings", "==", "0", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "all_evidence_ids", "=", "[", "\n", "[", "step", "[", "\"evidence_per_annotator\"", "]", "[", "i", "]", "for", "step", "in", "decomposition", "]", "\n", "for", "i", "in", "range", "(", "num_of_matchings", ")", "\n", "]", "\n", "\n", "evidence_ids", "=", "[", "]", "\n", "evidence_ids_per_step", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "decomposition", ")", ")", "]", "\n", "\n", "# keep it ordered by decomposition steps", "\n", "for", "i", "in", "range", "(", "len", "(", "decomposition", ")", ")", ":", "\n", "            ", "if", "self", ".", "_answer_last_decomposition_step", ":", "\n", "# We don't take evidence from the other steps in this setting,", "\n", "# as it shouldn't be necessary (in practice, it might be).", "\n", "                ", "if", "i", "<", "len", "(", "decomposition", ")", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "", "for", "matching_evidence_ids", "in", "all_evidence_ids", ":", "\n", "                ", "for", "evidence_id", "in", "matching_evidence_ids", "[", "i", "]", ":", "\n", "                    ", "if", "evidence_id", "not", "in", "evidence_ids_per_step", "[", "i", "]", ":", "\n", "                        ", "evidence_ids_per_step", "[", "i", "]", ".", "append", "(", "evidence_id", ")", "\n", "", "if", "evidence_id", "not", "in", "evidence_ids", ":", "\n", "                        ", "evidence_ids", ".", "append", "(", "evidence_id", ")", "\n", "\n", "", "", "", "", "results", "=", "[", "]", "\n", "for", "evidence_id", "in", "evidence_ids", ":", "\n", "            ", "es_results", "=", "get_elasticsearch_paragraph", "(", "self", ".", "_paragraphs_cache", ",", "evidence_id", ")", "\n", "if", "es_results", "is", "None", ":", "\n", "                ", "return", "{", "}", "\n", "", "results", ".", "append", "(", "es_results", ")", "\n", "", "if", "len", "(", "results", ")", "==", "0", ":", "\n", "            ", "if", "self", ".", "_answer_last_decomposition_step", ":", "\n", "                ", "results", "=", "[", "{", "\"content\"", ":", "\" \"", "}", "]", "\n", "results_per_step", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "decomposition", ")", ")", "]", "\n", "results_per_step", "[", "-", "1", "]", ".", "extend", "(", "results", ")", "\n", "return", "{", "\"unified\"", ":", "results", ",", "\"per_step\"", ":", "results_per_step", "}", "\n", "", "else", ":", "\n", "                ", "return", "{", "}", "\n", "\n", "", "", "results_per_step", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "decomposition", ")", ")", "]", "\n", "for", "i", ",", "step_evidence_ids", "in", "enumerate", "(", "evidence_ids_per_step", ")", ":", "\n", "            ", "for", "evidence_id", "in", "step_evidence_ids", ":", "\n", "                ", "es_results", "=", "get_elasticsearch_paragraph", "(", "self", ".", "_paragraphs_cache", ",", "evidence_id", ")", "\n", "if", "es_results", "is", "None", ":", "\n", "                    ", "return", "{", "}", "\n", "", "results_per_step", "[", "i", "]", ".", "append", "(", "es_results", ")", "\n", "\n", "", "", "return", "{", "\"unified\"", ":", "results", ",", "\"per_step\"", ":", "results_per_step", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader._ir_ora_d": [[354, 388], ["sorted", "set", "src.data.dataset_readers.utils.elasticsearch_utils.clean_query", "queries.append", "src.data.dataset_readers.utils.elasticsearch_utils.get_elasticsearch_results", "results_per_step.append", "set.add", "sorted.append", "len", "enumerate"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.elasticsearch_utils.clean_query", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.elasticsearch_utils.get_elasticsearch_results"], ["", "def", "_ir_ora_d", "(", "self", ",", "decomposition", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "decomposition", "is", "None", "or", "len", "(", "decomposition", ")", "==", "0", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "all_questions", "=", "[", "step", "[", "\"question\"", "]", "for", "i", ",", "step", "in", "enumerate", "(", "decomposition", ")", "]", "\n", "\n", "results_per_step", "=", "[", "]", "\n", "queries", "=", "[", "]", "\n", "for", "q", "in", "all_questions", ":", "\n", "            ", "query", "=", "clean_query", "(", "q", ")", "\n", "queries", ".", "append", "(", "query", ")", "\n", "result", "=", "get_elasticsearch_results", "(", "self", ".", "_queries_cache", ",", "query", ")", "\n", "if", "result", "is", "None", ":", "\n", "                ", "return", "{", "\"queries\"", ":", "queries", "}", "\n", "", "results_per_step", ".", "append", "(", "result", ")", "\n", "\n", "", "results", "=", "sorted", "(", "\n", "[", "result", "for", "step_results", "in", "results_per_step", "for", "result", "in", "step_results", "]", ",", "\n", "key", "=", "lambda", "item", ":", "item", "[", "\"score\"", "]", ",", "\n", "reverse", "=", "True", ",", "\n", ")", "\n", "\n", "# Remove duplicates:", "\n", "original_results", "=", "results", "\n", "results", "=", "[", "]", "\n", "seen_ids", "=", "set", "(", ")", "\n", "for", "result", "in", "original_results", ":", "\n", "            ", "pid", "=", "result", "[", "\"evidence_id\"", "]", "\n", "if", "pid", "in", "seen_ids", ":", "\n", "                ", "continue", "\n", "", "seen_ids", ".", "add", "(", "pid", ")", "\n", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "return", "{", "\"unified\"", ":", "results", ",", "\"per_step\"", ":", "results_per_step", ",", "\"queries\"", ":", "queries", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader._ir_d": [[389, 393], ["strategy_qa_reader.StrategyQAReader._ir_ora_d"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.strategy_qa_reader.StrategyQAReader._ir_ora_d"], ["", "def", "_ir_d", "(", "self", ",", "generated_decomposition", ",", "question", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "\"decomposition\"", "in", "kwargs", ":", "\n", "            ", "del", "kwargs", "[", "\"decomposition\"", "]", "\n", "", "return", "self", ".", "_ir_ora_d", "(", "question", "=", "question", ",", "decomposition", "=", "generated_decomposition", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.boolean_qa_reader.BooleanQAReader.__init__": [[21, 34], ["src.data.dataset_readers.base.base_dataset_reader.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "with_context", ":", "bool", "=", "True", ",", "\n", "context_key", ":", "str", "=", "\"context\"", ",", "\n", "answer_key", ":", "str", "=", "\"answer\"", ",", "\n", "is_twenty_questions", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_with_context", "=", "with_context", "\n", "self", ".", "_context_key", "=", "context_key", "\n", "self", ".", "_answer_key", "=", "answer_key", "\n", "self", ".", "_is_twenty_questions", "=", "is_twenty_questions", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.boolean_qa_reader.BooleanQAReader._read": [[35, 74], ["allennlp.common.file_utils.cached_path", "logger.info", "logger.info", "allennlp.common.file_utils.open_compressed", "json.loads", "question.replace.replace.replace", "question.replace.replace.replace", "question.replace.replace.endswith", "question.replace.replace.startswith", "question.replace.replace.replace", "question.replace.replace.replace", "question.replace.replace.endswith", "boolean_qa_reader.BooleanQAReader.text_to_instance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.boolean_qa_reader.BooleanQAReader.text_to_instance"], ["", "@", "overrides", "\n", "def", "_read", "(", "self", ",", "file_path", ":", "str", ")", ":", "\n", "# if `file_path` is a URL, redirect to the cache", "\n", "        ", "file_path", "=", "cached_path", "(", "file_path", ")", "\n", "\n", "logger", ".", "info", "(", "\"Reading the dataset:\"", ")", "\n", "logger", ".", "info", "(", "\"Reading file at %s\"", ",", "file_path", ")", "\n", "with", "open_compressed", "(", "file_path", ")", "as", "dataset_file", ":", "\n", "            ", "for", "line", "in", "dataset_file", ":", "\n", "                ", "item", "=", "json", ".", "loads", "(", "line", ")", "\n", "question", "=", "item", "[", "\"question\"", "]", "\n", "\n", "if", "self", ".", "_is_twenty_questions", ":", "\n", "                    ", "subject", "=", "item", "[", "\"subject\"", "]", "\n", "original_question", "=", "question", "\n", "question", "=", "question", ".", "replace", "(", "\" it \"", ",", "\" \"", "+", "subject", "+", "\" \"", ")", "\n", "question", "=", "question", ".", "replace", "(", "\" it?\"", ",", "\" \"", "+", "subject", ")", "\n", "if", "question", ".", "endswith", "(", "\" it\"", ")", ":", "\n", "                        ", "question", "=", "question", "[", ":", "-", "len", "(", "\"it\"", ")", "]", "+", "subject", "\n", "", "if", "question", ".", "startswith", "(", "\"it \"", ")", ":", "\n", "                        ", "question", "=", "subject", "+", "question", "[", "len", "(", "\"it\"", ")", "]", "\n", "", "if", "original_question", "==", "question", ":", "\n", "                        ", "continue", "\n", "", "question", "=", "question", ".", "replace", "(", "\"?\"", ",", "\"\"", ")", "\n", "question", "=", "question", ".", "replace", "(", "\"\\t\"", ",", "\"\"", ")", "\n", "\n", "", "question", ":", "str", "=", "question", "if", "question", ".", "endswith", "(", "\"?\"", ")", "else", "question", "+", "\"?\"", "\n", "context", ":", "str", "=", "item", "[", "self", ".", "_context_key", "]", "if", "self", ".", "_context_key", "in", "item", "else", "None", "\n", "answer", ":", "Optional", "[", "bool", "]", "=", "(", "\n", "item", "[", "self", ".", "_answer_key", "]", "if", "self", ".", "_answer_key", "in", "item", "else", "None", "\n", ")", "\n", "\n", "if", "not", "self", ".", "_is_training", "or", "answer", "is", "not", "None", ":", "\n", "                    ", "instance", "=", "self", ".", "text_to_instance", "(", "\n", "question", ",", "\n", "context", ",", "\n", "answer", ",", "\n", ")", "\n", "yield", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.dataset_readers.boolean_qa_reader.BooleanQAReader.text_to_instance": [[75, 119], ["src.data.fields.dictionary_field.DictionaryField", "allennlp.data.fields.MetadataField", "allennlp.data.instance.Instance", "tokenizer_wrapper.encode", "tokenizer_wrapper.encode", "allennlp.data.fields.LabelField", "tokenizer_wrapper.convert_ids_to_tokens", "src.data.fields.labels_field.LabelsField", "src.data.fields.labels_field.LabelsField", "tokenizer_wrapper.encode.items", "len", "int"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.encode", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.encode", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.convert_ids_to_tokens"], ["", "", "", "", "@", "overrides", "\n", "def", "text_to_instance", "(", "\n", "self", ",", "# type: ignore", "\n", "question", ":", "str", ",", "\n", "context", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "answer", ":", "Optional", "[", "bool", "]", "=", "None", ",", "\n", ")", "->", "Instance", ":", "\n", "        ", "tokenizer_wrapper", "=", "self", ".", "_tokenizer_wrapper", "\n", "fields", "=", "{", "}", "\n", "pad_token_id", "=", "tokenizer_wrapper", ".", "tokenizer", ".", "pad_token_id", "\n", "\n", "if", "\"?\"", "not", "in", "question", ":", "\n", "            ", "question", "+=", "\"?\"", "\n", "\n", "", "if", "self", ".", "_with_context", ":", "\n", "            ", "if", "context", "is", "None", ":", "\n", "                ", "context", "=", "\"\"", "\n", "", "encoded_input", "=", "tokenizer_wrapper", ".", "encode", "(", "context", ",", "question", ")", "\n", "", "else", ":", "\n", "            ", "encoded_input", "=", "tokenizer_wrapper", ".", "encode", "(", "question", ")", "\n", "\n", "", "encoded_input_fields", "=", "{", "\n", "key", ":", "LabelsField", "(", "value", ",", "padding_value", "=", "pad_token_id", ")", "\n", "if", "key", "==", "\"input_ids\"", "\n", "else", "LabelsField", "(", "value", ")", "\n", "for", "key", ",", "value", "in", "encoded_input", ".", "items", "(", ")", "\n", "}", "\n", "fields", "[", "\"tokens\"", "]", "=", "DictionaryField", "(", "\n", "encoded_input_fields", ",", "length", "=", "len", "(", "encoded_input", "[", "\"input_ids\"", "]", ")", "\n", ")", "\n", "\n", "if", "answer", "is", "not", "None", ":", "\n", "            ", "fields", "[", "\"label\"", "]", "=", "LabelField", "(", "int", "(", "answer", ")", ",", "skip_indexing", "=", "True", ")", "\n", "\n", "# make the metadata", "\n", "", "metadata", "=", "{", "\n", "\"question\"", ":", "question", ",", "\n", "\"context\"", ":", "context", ",", "\n", "\"answer\"", ":", "answer", ",", "\n", "\"tokenized_input\"", ":", "tokenizer_wrapper", ".", "convert_ids_to_tokens", "(", "encoded_input", "[", "\"input_ids\"", "]", ")", ",", "\n", "}", "\n", "fields", "[", "\"metadata\"", "]", "=", "MetadataField", "(", "metadata", ")", "\n", "\n", "return", "Instance", "(", "fields", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.elasticsearch_utils.get_elasticsearch_paragraph": [[19, 49], ["evidence_id.rindex", "requests.get", "json.loads", "logger.info", "logger.info", "len"], "function", ["None"], ["def", "get_elasticsearch_paragraph", "(", "paragraphs_cache", ",", "evidence_id", ")", ":", "\n", "    ", "if", "evidence_id", "not", "in", "paragraphs_cache", ":", "\n", "        ", "sep_index", "=", "evidence_id", ".", "rindex", "(", "\"-\"", ")", "\n", "title", "=", "evidence_id", "[", ":", "sep_index", "]", "\n", "para_id", "=", "evidence_id", "[", "sep_index", "+", "1", ":", "]", "\n", "response", "=", "requests", ".", "get", "(", "\n", "ELASTICSEARCH_SELECTION_URL", ",", "\n", "params", "=", "{", "\"title\"", ":", "title", ",", "\"para_id\"", ":", "para_id", ",", "\"num\"", ":", "0", "}", ",", "\n", ")", "\n", "if", "response", ".", "status_code", "!=", "200", ":", "\n", "            ", "logger", ".", "info", "(", "f\"Failed to get results from Elasticsearch for: {evidence_id}\"", ")", "\n", "return", "None", "\n", "\n", "", "paragraphs_cache", "[", "evidence_id", "]", "=", "json", ".", "loads", "(", "response", ".", "text", ")", "\n", "\n", "", "if", "\"paras\"", "in", "paragraphs_cache", "[", "evidence_id", "]", ":", "\n", "        ", "paras", "=", "paragraphs_cache", "[", "evidence_id", "]", "[", "\"paras\"", "]", "\n", "if", "len", "(", "paras", ")", ">", "0", ":", "\n", "            ", "return", "{", "\n", "\"evidence_id\"", ":", "evidence_id", ",", "\n", "\"title\"", ":", "paras", "[", "0", "]", "[", "\"title\"", "]", ",", "\n", "\"content\"", ":", "paras", "[", "0", "]", "[", "\"sentence\"", "]", ",", "\n", "}", "\n", "", "logger", ".", "info", "(", "f\"Empty results from Elasticsearch for: {evidence_id}\"", ")", "\n", "", "else", ":", "\n", "        ", "para", "=", "paragraphs_cache", "[", "evidence_id", "]", "\n", "return", "{", "\n", "\"evidence_id\"", ":", "evidence_id", ",", "\n", "\"title\"", ":", "para", "[", "\"title\"", "]", ",", "\n", "\"content\"", ":", "para", "[", "\"content\"", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.elasticsearch_utils.clean_query": [[52, 61], ["query.split", "new_query_split.append", "word.lower"], "function", ["None"], ["", "", "def", "clean_query", "(", "query", ",", "remove_stopwords", "=", "True", ")", ":", "\n", "    ", "if", "remove_stopwords", ":", "\n", "        ", "query_split", "=", "query", ".", "split", "(", ")", "\n", "new_query_split", "=", "[", "]", "\n", "for", "word", "in", "query_split", ":", "\n", "            ", "if", "word", ".", "lower", "(", ")", "+", "\" \"", "not", "in", "STOPWORDS", ":", "\n", "                ", "new_query_split", ".", "append", "(", "word", ")", "\n", "", "", "query", "=", "\" \"", ".", "join", "(", "new_query_split", ")", "\n", "", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.elasticsearch_utils.get_elasticsearch_results": [[63, 87], ["logger.info", "print", "requests.get", "json.loads", "len", "logger.info", "str"], "function", ["None"], ["", "def", "get_elasticsearch_results", "(", "queries_cache", ",", "query", ")", ":", "\n", "    ", "if", "query", "not", "in", "queries_cache", ":", "\n", "        ", "print", "(", "f\"Missing from elasticsearch cache: {query}\"", ")", "\n", "response", "=", "requests", ".", "get", "(", "ELASTICSEARCH_RETRIEVAL_URL", ",", "params", "=", "{", "\"concept\"", ":", "query", "}", ")", "\n", "if", "response", ".", "status_code", "!=", "200", ":", "\n", "            ", "logger", ".", "info", "(", "f\"Failed to get results from Elasticsearch for: {query}\"", ")", "\n", "return", "None", "\n", "\n", "", "queries_cache", "[", "query", "]", "=", "json", ".", "loads", "(", "response", ".", "text", ")", "\n", "\n", "", "paras", "=", "queries_cache", "[", "query", "]", "[", "\"paras\"", "]", "\n", "if", "len", "(", "paras", ")", ">", "0", ":", "\n", "        ", "return", "[", "\n", "{", "\n", "\"evidence_id\"", ":", "p", "[", "\"title\"", "]", "+", "\"-\"", "+", "str", "(", "p", "[", "\"para_id\"", "]", ")", ",", "\n", "\"title\"", ":", "p", "[", "\"title\"", "]", ",", "\n", "\"score\"", ":", "p", "[", "\"score\"", "]", ",", "\n", "\"section\"", ":", "p", "[", "\"section\"", "]", ",", "\n", "\"content\"", ":", "p", "[", "\"sentence\"", "]", ",", "\n", "}", "\n", "for", "p", "in", "paras", "\n", "]", "\n", "", "logger", ".", "info", "(", "f\"Empty results from Elasticsearch for: {query}\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.elasticsearch_utils.concatenate_paragraphs": [[89, 93], ["special_sep_token.join"], "function", ["None"], ["", "def", "concatenate_paragraphs", "(", "paragraph_objs", ")", ":", "\n", "    ", "special_sep_token", "=", "\" \"", "\n", "result", "=", "special_sep_token", ".", "join", "(", "[", "paragraph_obj", "[", "\"content\"", "]", "for", "paragraph_obj", "in", "paragraph_objs", "]", ")", "\n", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.pickle_utils.save_pkl": [[5, 10], ["pickle_utils.is_pickle_dict_valid", "os.makedirs", "open", "pickle.dump", "pickle_utils.get_pkl_path"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.pickle_utils.is_pickle_dict_valid", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.pickle_utils.get_pkl_path"], ["def", "save_pkl", "(", "instances", ",", "pickle_dict", ",", "is_training", ")", ":", "\n", "    ", "if", "is_pickle_dict_valid", "(", "pickle_dict", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "pickle_dict", "[", "\"path\"", "]", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "get_pkl_path", "(", "pickle_dict", ",", "is_training", ")", ",", "\"wb\"", ")", "as", "dataset_file", ":", "\n", "            ", "pickle", ".", "dump", "(", "instances", ",", "dataset_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.pickle_utils.load_pkl": [[12, 18], ["open", "pickle.load", "pickle_utils.get_pkl_path"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.pickle_utils.get_pkl_path"], ["", "", "", "def", "load_pkl", "(", "pickle_dict", ",", "is_training", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "get_pkl_path", "(", "pickle_dict", ",", "is_training", ")", ",", "\"rb\"", ")", "as", "dataset_pkl", ":", "\n", "            ", "return", "pickle", ".", "load", "(", "dataset_pkl", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.pickle_utils.get_pkl_path": [[20, 24], ["os.path.join"], "function", ["None"], ["", "", "def", "get_pkl_path", "(", "pickle_dict", ",", "is_training", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "\n", "pickle_dict", "[", "\"path\"", "]", ",", "\n", "f\"{pickle_dict['file_name']}_{'train' if is_training else 'dev'}.pkl\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.pickle_utils.is_pickle_dict_valid": [[27, 33], ["pickle_dict.get", "pickle_dict.get"], "function", ["None"], ["", "def", "is_pickle_dict_valid", "(", "pickle_dict", ")", ":", "\n", "    ", "if", "pickle_dict", "is", "None", ":", "\n", "        ", "return", "False", "\n", "", "file_name", "=", "pickle_dict", ".", "get", "(", "\"file_name\"", ",", "None", ")", "\n", "path", "=", "pickle_dict", ".", "get", "(", "\"path\"", ",", "None", ")", "\n", "return", "file_name", "is", "not", "None", "and", "path", "is", "not", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.standardization_utils.standardize_text_simple": [[9, 21], ["text.replace.strip", "text.replace.replace", "text.replace.replace", "len", "len", "text.replace.rstrip"], "function", ["None"], ["def", "standardize_text_simple", "(", "text", ",", "output_offset", "=", "False", ")", ":", "\n", "    ", "for", "whitespace", "in", "whitespaces", ":", "\n", "        ", "if", "whitespace", "==", "\"\\n\"", "or", "whitespace", "==", "\"\\t\"", ":", "\n", "            ", "continue", "\n", "", "text", "=", "text", ".", "replace", "(", "whitespace", ",", "\" \"", ")", "\n", "\n", "", "for", "empty_char", "in", "empty_chars", ":", "\n", "        ", "text", "=", "text", ".", "replace", "(", "empty_char", ",", "\" \"", ")", "\n", "\n", "", "stripped_text", "=", "text", ".", "strip", "(", ")", "\n", "offset", "=", "len", "(", "stripped_text", ")", "-", "len", "(", "text", ".", "rstrip", "(", ")", ")", "\n", "return", "(", "stripped_text", ",", "offset", ")", "if", "output_offset", "else", "stripped_text", "\n", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.base.base_dataset_reader.BaseDatasetReader.__init__": [[20, 57], ["allennlp.data.dataset_readers.dataset_reader.DatasetReader.__init__", "set", "base_dataset_reader.BaseDatasetReader._reader_specific_init", "os.environ.get", "src.data.dataset_readers.utils.pickle_utils.is_pickle_dict_valid", "tokenizer_wrapper.load", "len", "tokenizer_wrapper.tokenizer.add_special_tokens", "tokenizer_wrapper.save", "sorted"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__init__", "home.repos.pwc.inspect_result.eladsegal_strategyqa.base.base_dataset_reader.BaseDatasetReader._reader_specific_init", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.pickle_utils.is_pickle_dict_valid", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.save"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "tokenizer_wrapper", ":", "HFTokenizerWrapper", "=", "None", ",", "\n", "save_tokenizer", ":", "bool", "=", "False", ",", "\n", "is_training", ":", "bool", "=", "False", ",", "\n", "serialization_dir", ":", "str", "=", "None", ",", "\n", "pickle", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "\"action\"", ":", "None", "}", ",", "\n", "**", "kwargs", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "_tokenizer_wrapper", "=", "tokenizer_wrapper", "\n", "self", ".", "_is_training", "=", "is_training", "\n", "self", ".", "_serialization_dir", "=", "serialization_dir", "\n", "\n", "additional_special_tokens", "=", "self", ".", "additional_special_tokens", "=", "set", "(", ")", "\n", "\n", "if", "tokenizer_wrapper", "is", "not", "None", ":", "\n", "            ", "pre_serialization_dir", "=", "os", ".", "environ", ".", "get", "(", "\"pre_serialization_dir\"", ",", "None", ")", "\n", "if", "pre_serialization_dir", "is", "not", "None", ":", "\n", "                ", "tokenizer_wrapper", ".", "tokenizer", "=", "tokenizer_wrapper", ".", "load", "(", "pre_serialization_dir", ")", "\n", "\n", "", "", "self", ".", "_reader_specific_init", "(", ")", "\n", "\n", "if", "tokenizer_wrapper", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "additional_special_tokens", ")", ">", "0", ":", "\n", "                ", "tokenizer_wrapper", ".", "tokenizer", ".", "add_special_tokens", "(", "\n", "{", "\"additional_special_tokens\"", ":", "sorted", "(", "additional_special_tokens", ")", "}", "\n", ")", "\n", "\n", "# Save tokenizer", "\n", "", "if", "save_tokenizer", "and", "serialization_dir", "is", "not", "None", ":", "\n", "                ", "tokenizer_wrapper", ".", "save", "(", "serialization_dir", ",", "pending", "=", "True", ")", "\n", "\n", "", "", "self", ".", "_pickle", "=", "pickle", "\n", "if", "not", "is_pickle_dict_valid", "(", "self", ".", "_pickle", ")", ":", "\n", "            ", "self", ".", "_pickle", "=", "{", "\"action\"", ":", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.base.base_dataset_reader.BaseDatasetReader._reader_specific_init": [[58, 60], ["None"], "methods", ["None"], ["", "", "def", "_reader_specific_init", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.base.base_dataset_reader.BaseDatasetReader._read": [[61, 92], ["logger.info", "base_dataset_reader.BaseDatasetReader._direct_read", "logger.info", "src.data.dataset_readers.utils.pickle_utils.load_pkl", "src.data.dataset_readers.utils.pickle_utils.save_pkl", "logger.info", "instances_list.append", "len", "src.data.dataset_readers.utils.pickle_utils.save_pkl"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.base.base_dataset_reader.BaseDatasetReader._direct_read", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.pickle_utils.load_pkl", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.pickle_utils.save_pkl", "home.repos.pwc.inspect_result.eladsegal_strategyqa.utils.pickle_utils.save_pkl"], ["", "@", "overrides", "\n", "def", "_read", "(", "self", ",", "file_path", ":", "str", ")", ":", "\n", "        ", "if", "not", "self", ".", "lazy", "and", "self", ".", "_pickle", "[", "\"action\"", "]", "==", "\"load\"", ":", "\n", "# Try to load the data, if it fails then read it from scratch and save it", "\n", "            ", "logger", ".", "info", "(", "\"Trying to read the dataset from pickle\"", ")", "\n", "loaded_pkl", "=", "load_pkl", "(", "self", ".", "_pickle", ",", "self", ".", "_is_training", ")", "\n", "if", "loaded_pkl", "is", "not", "None", ":", "\n", "                ", "for", "instance", "in", "loaded_pkl", ":", "\n", "                    ", "yield", "instance", "\n", "", "return", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"Pickle file does not exist\"", ")", "\n", "self", ".", "_pickle", "[", "\"action\"", "]", "=", "\"save\"", "\n", "\n", "", "", "logger", ".", "info", "(", "\"Reading the dataset from scratch\"", ")", "\n", "instances_list", "=", "[", "]", "\n", "for", "instance", "in", "self", ".", "_direct_read", "(", "file_path", ")", ":", "\n", "            ", "if", "not", "self", ".", "lazy", ":", "\n", "                ", "instances_list", ".", "append", "(", "instance", ")", "\n", "\n", "if", "len", "(", "instances_list", ")", "==", "self", ".", "max_instances", ":", "\n", "                    ", "if", "(", "\n", "self", ".", "_pickle", "[", "\"action\"", "]", "==", "\"save\"", "\n", "and", "self", ".", "_pickle", "[", "\"save_even_when_max_instances\"", "]", "\n", ")", ":", "\n", "                        ", "save_pkl", "(", "instances_list", ",", "self", ".", "_pickle", ",", "self", ".", "_is_training", ")", "\n", "self", ".", "_pickle", "[", "\"action\"", "]", "=", "None", "\n", "", "", "", "yield", "instance", "\n", "\n", "", "if", "not", "self", ".", "lazy", "and", "self", ".", "_pickle", "[", "\"action\"", "]", "==", "\"save\"", ":", "\n", "            ", "save_pkl", "(", "instances_list", ",", "self", ".", "_pickle", ",", "self", ".", "_is_training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.base.base_dataset_reader.BaseDatasetReader._direct_read": [[93, 95], ["None"], "methods", ["None"], ["", "", "def", "_direct_read", "(", "self", ",", "file_path", ":", "str", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField.__init__": [[49, 72], ["labels_field.LabelsField._maybe_warn_for_namespace", "all", "isinstance", "all", "allennlp.common.checks.ConfigurationError", "isinstance", "type"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField._maybe_warn_for_namespace"], ["def", "__init__", "(", "\n", "self", ",", "\n", "labels", ":", "Union", "[", "List", "[", "str", "]", ",", "List", "[", "int", "]", "]", ",", "\n", "label_namespace", ":", "str", "=", "\"labels\"", ",", "\n", "padding_value", ":", "int", "=", "0", ",", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "labels", "=", "labels", "\n", "self", ".", "_label_namespace", "=", "label_namespace", "\n", "self", ".", "_padding_value", "=", "padding_value", "\n", "\n", "self", ".", "_indexed_labels", "=", "None", "\n", "self", ".", "_maybe_warn_for_namespace", "(", "label_namespace", ")", "\n", "\n", "self", ".", "_skip_indexing", "=", "False", "\n", "if", "all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "labels", ")", ":", "\n", "            ", "self", ".", "_indexed_labels", "=", "labels", "\n", "self", ".", "_skip_indexing", "=", "True", "\n", "\n", "", "elif", "not", "all", "(", "isinstance", "(", "x", ",", "str", ")", "for", "x", "in", "labels", ")", ":", "\n", "            ", "raise", "ConfigurationError", "(", "\n", "\"LabelsFields must be passed either all \"", "\n", "\"strings or all ints. Found labels {} with \"", "\n", "\"types: {}.\"", ".", "format", "(", "labels", ",", "[", "type", "(", "x", ")", "for", "x", "in", "labels", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField._maybe_warn_for_namespace": [[74, 85], ["labels_field.LabelsField._label_namespace.endswith", "labels_field.LabelsField._label_namespace.endswith", "logger.warning", "labels_field.LabelsField._already_warned_namespaces.add"], "methods", ["None"], ["", "", "def", "_maybe_warn_for_namespace", "(", "self", ",", "label_namespace", ":", "str", ")", "->", "None", ":", "\n", "        ", "if", "not", "(", "self", ".", "_label_namespace", ".", "endswith", "(", "\"labels\"", ")", "or", "self", ".", "_label_namespace", ".", "endswith", "(", "\"tags\"", ")", ")", ":", "\n", "            ", "if", "label_namespace", "not", "in", "self", ".", "_already_warned_namespaces", ":", "\n", "                ", "logger", ".", "warning", "(", "\n", "\"Your label namespace was '%s'. We recommend you use a namespace \"", "\n", "\"ending with 'labels' or 'tags', so we don't add UNK and PAD tokens by \"", "\n", "\"default to your vocabulary.  See documentation for \"", "\n", "\"`non_padded_namespaces` parameter in Vocabulary.\"", ",", "\n", "self", ".", "_label_namespace", ",", "\n", ")", "\n", "self", ".", "_already_warned_namespaces", ".", "add", "(", "label_namespace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField.__iter__": [[87, 89], ["iter"], "methods", ["None"], ["", "", "", "def", "__iter__", "(", "self", ")", "->", "Iterator", "[", "Union", "[", "str", ",", "int", "]", "]", ":", "\n", "        ", "return", "iter", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField.__getitem__": [[90, 92], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ":", "int", ")", "->", "Union", "[", "str", ",", "int", "]", ":", "\n", "        ", "return", "self", ".", "labels", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField.__len__": [[93, 95], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField.count_vocab_items": [[96, 101], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "count_vocab_items", "(", "self", ",", "counter", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "int", "]", "]", ")", ":", "\n", "        ", "if", "self", ".", "_indexed_labels", "is", "None", ":", "\n", "            ", "for", "label", "in", "self", ".", "labels", ":", "\n", "                ", "counter", "[", "self", ".", "_label_namespace", "]", "[", "label", "]", "+=", "1", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField.index": [[102, 108], ["vocab.get_token_index"], "methods", ["None"], ["", "", "", "@", "overrides", "\n", "def", "index", "(", "self", ",", "vocab", ":", "Vocabulary", ")", ":", "\n", "        ", "if", "not", "self", ".", "_skip_indexing", ":", "\n", "            ", "self", ".", "_indexed_labels", "=", "[", "\n", "vocab", ".", "get_token_index", "(", "label", ",", "self", ".", "_label_namespace", ")", "# type: ignore", "\n", "for", "label", "in", "self", ".", "labels", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField.get_padding_lengths": [[110, 113], ["len"], "methods", ["None"], ["", "", "@", "overrides", "\n", "def", "get_padding_lengths", "(", "self", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "        ", "return", "{", "\"num_tokens\"", ":", "len", "(", "self", ".", "labels", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField.as_tensor": [[114, 124], ["allennlp.common.util.pad_sequence_to_length", "torch.LongTensor"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "as_tensor", "(", "self", ",", "padding_lengths", ":", "Dict", "[", "str", ",", "int", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "desired_num_tokens", "=", "padding_lengths", "[", "\"num_tokens\"", "]", "\n", "padded_tags", "=", "pad_sequence_to_length", "(", "\n", "self", ".", "_indexed_labels", ",", "\n", "desired_num_tokens", ",", "\n", "default_value", "=", "lambda", ":", "self", ".", "_padding_value", ",", "\n", ")", "\n", "tensor", "=", "torch", ".", "LongTensor", "(", "padded_tags", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField.sequence_length": [[125, 127], ["len"], "methods", ["None"], ["", "def", "sequence_length", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField.empty_field": [[128, 135], ["LabelsField.LabelsField"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "empty_field", "(", "self", ")", "->", "\"LabelsField\"", ":", "\n", "# The empty_list here is needed for mypy", "\n", "        ", "empty_list", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "labels_field", "=", "LabelsField", "(", "empty_list", ")", "\n", "labels_field", ".", "_indexed_labels", "=", "empty_list", "\n", "return", "labels_field", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.labels_field.LabelsField.__str__": [[136, 143], ["len", "textwrap.wrap", "repr"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "length", "=", "len", "(", "self", ".", "labels", ")", "\n", "formatted_labels", "=", "\"\"", ".", "join", "(", "\n", "\"\\t\\t\"", "+", "labels", "+", "\"\\n\"", "for", "labels", "in", "textwrap", ".", "wrap", "(", "repr", "(", "self", ".", "labels", ")", ",", "100", ")", "\n", ")", "\n", "return", "(", "\n", "f\"LabelsField of length {length} with \"", "\n", "f\"labels:\\n {formatted_labels} \\t\\tin namespace: '{self._label_namespace}'.\"", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__init__": [[22, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "field_dict", ":", "Dict", "[", "str", ",", "Field", "]", ",", "length", ":", "Optional", "[", "int", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "field_dict", "=", "field_dict", "\n", "self", ".", "_length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.count_vocab_items": [[26, 30], ["dictionary_field.DictionaryField.field_dict.values", "field.count_vocab_items"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.count_vocab_items"], ["", "@", "overrides", "\n", "def", "count_vocab_items", "(", "self", ",", "counter", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "int", "]", "]", ")", ":", "\n", "        ", "for", "field", "in", "self", ".", "field_dict", ".", "values", "(", ")", ":", "\n", "            ", "field", ".", "count_vocab_items", "(", "counter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.index": [[31, 35], ["dictionary_field.DictionaryField.field_dict.values", "field.index"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.index"], ["", "", "@", "overrides", "\n", "def", "index", "(", "self", ",", "vocab", ":", "Vocabulary", ")", ":", "\n", "        ", "for", "field", "in", "self", ".", "field_dict", ".", "values", "(", ")", ":", "\n", "            ", "field", ".", "index", "(", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.get_padding_lengths": [[36, 46], ["field_lengths.items", "field.get_padding_lengths", "field_lengths.items", "dictionary_field.DictionaryField.field_dict.items"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.get_padding_lengths"], ["", "", "@", "overrides", "\n", "def", "get_padding_lengths", "(", "self", ")", "->", "Dict", "[", "str", ",", "int", "]", ":", "\n", "        ", "field_lengths", "=", "{", "key", ":", "field", ".", "get_padding_lengths", "(", ")", "for", "key", ",", "field", "in", "self", ".", "field_dict", ".", "items", "(", ")", "}", "\n", "padding_lengths", "=", "{", "}", "\n", "\n", "for", "field_key", ",", "field_lengths", "in", "field_lengths", ".", "items", "(", ")", ":", "\n", "            ", "for", "key", ",", "field_length", "in", "field_lengths", ".", "items", "(", ")", ":", "\n", "                ", "padding_lengths", "[", "f\"dict_{field_key}_{key}\"", "]", "=", "field_length", "\n", "\n", "", "", "return", "padding_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.as_tensor": [[47, 63], ["dictionary_field.DictionaryField.field_dict.items", "key.replace", "field.as_tensor", "padding_lengths.items", "key.startswith", "padding_length_key.replace", "child_padding_lengths.items", "padding_length_key.startswith"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.as_tensor"], ["", "@", "overrides", "\n", "def", "as_tensor", "(", "self", ",", "padding_lengths", ":", "Dict", "[", "str", ",", "int", "]", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "tensors", "=", "{", "}", "\n", "child_padding_lengths", "=", "{", "\n", "key", ".", "replace", "(", "\"dict_\"", ",", "\"\"", ",", "1", ")", ":", "value", "\n", "for", "key", ",", "value", "in", "padding_lengths", ".", "items", "(", ")", "\n", "if", "key", ".", "startswith", "(", "\"dict_\"", ")", "\n", "}", "\n", "for", "key", ",", "field", "in", "self", ".", "field_dict", ".", "items", "(", ")", ":", "\n", "            ", "subchild_padding_lengths", "=", "{", "\n", "padding_length_key", ".", "replace", "(", "f\"{key}_\"", ",", "\"\"", ",", "1", ")", ":", "value", "\n", "for", "padding_length_key", ",", "value", "in", "child_padding_lengths", ".", "items", "(", ")", "\n", "if", "padding_length_key", ".", "startswith", "(", "f\"{key}_\"", ")", "\n", "}", "\n", "tensors", "[", "key", "]", "=", "field", ".", "as_tensor", "(", "subchild_padding_lengths", ")", "\n", "", "return", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.empty_field": [[64, 70], ["dictionary_field.DictionaryField", "field.empty_field", "dictionary_field.DictionaryField.field_dict.items"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.empty_field"], ["", "@", "overrides", "\n", "def", "empty_field", "(", "self", ")", ":", "\n", "        ", "dict_field", "=", "DictionaryField", "(", "\n", "{", "key", ":", "field", ".", "empty_field", "(", ")", "for", "key", ",", "field", "in", "self", ".", "field_dict", ".", "items", "(", ")", "}", "\n", ")", "\n", "return", "dict_field", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.batch_tensors": [[71, 74], ["dictionary_field.DictionaryField.batch_dicts"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.batch_dicts"], ["", "@", "overrides", "\n", "def", "batch_tensors", "(", "self", ",", "tensor_list", ":", "List", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "return", "self", ".", "batch_dicts", "(", "tensor_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.batch_dicts": [[75, 86], ["representative_dict.keys", "isinstance", "dictionary_field.DictionaryField.batch_dicts", "super().batch_tensors"], "methods", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.batch_dicts", "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.batch_tensors"], ["", "def", "batch_dicts", "(", "self", ",", "dict_list", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ")", ":", "\n", "# Assuming each dict in the list have the same keys as the first one", "\n", "        ", "representative_dict", "=", "dict_list", "[", "0", "]", "\n", "keys", "=", "representative_dict", ".", "keys", "(", ")", "\n", "batched_dicts", "=", "{", "}", "\n", "for", "key", "in", "keys", ":", "\n", "            ", "if", "isinstance", "(", "representative_dict", "[", "key", "]", ",", "dict", ")", ":", "\n", "                ", "batched_dicts", "[", "key", "]", "=", "self", ".", "batch_dicts", "(", "[", "d", "[", "key", "]", "for", "d", "in", "dict_list", "]", ")", "\n", "", "else", ":", "\n", "                ", "batched_dicts", "[", "key", "]", "=", "super", "(", ")", ".", "batch_tensors", "(", "[", "d", "[", "key", "]", "for", "d", "in", "dict_list", "]", ")", "\n", "", "", "return", "batched_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__str__": [[87, 91], ["len", "dictionary_field.DictionaryField.field_dict.items"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", "->", "str", ":", "\n", "        ", "base_string", "=", "f\"DictionaryField of {len(self.field_dict)} keys : \\n\"", "\n", "return", "\" \"", ".", "join", "(", "\n", "[", "base_string", "]", "+", "[", "f\"\\t{key}: {field} \\n\"", "for", "key", ",", "field", "in", "self", ".", "field_dict", ".", "items", "(", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__getitem__": [[93, 95], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ":", "str", ")", "->", "Field", ":", "\n", "        ", "return", "self", ".", "field_dict", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.__len__": [[96, 98], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_length", "if", "self", ".", "_length", "is", "not", "None", "else", "len", "(", "self", ".", "field_dict", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.elasticsearch_index.index_wikipedia.get_esclient": [[13, 29], ["boto3.Session().get_credentials", "requests_aws4auth.AWS4Auth", "elasticsearch.Elasticsearch", "elasticsearch.Elasticsearch", "boto3.Session"], "function", ["None"], ["def", "get_esclient", "(", "host", ",", "port", ",", "region", "=", "None", ")", ":", "\n", "    ", "if", "region", "is", "not", "None", ":", "\n", "        ", "service", "=", "'es'", "\n", "credentials", "=", "boto3", ".", "Session", "(", ")", ".", "get_credentials", "(", ")", "\n", "awsauth", "=", "AWS4Auth", "(", "credentials", ".", "access_key", ",", "credentials", ".", "secret_key", ",", "region", ",", "service", ")", "\n", "return", "Elasticsearch", "(", "\n", "hosts", "=", "[", "{", "'host'", ":", "host", ",", "'port'", ":", "443", "}", "]", ",", "\n", "http_auth", "=", "awsauth", ",", "\n", "use_ssl", "=", "True", ",", "\n", "verify_certs", "=", "True", ",", "\n", "connection_class", "=", "RequestsHttpConnection", ",", "\n", "retries", "=", "3", ",", "\n", "timeout", "=", "60", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "Elasticsearch", "(", "hosts", "=", "[", "{", "\"host\"", ":", "args", ".", "host", ",", "\"port\"", ":", "args", ".", "port", "}", "]", ",", "retries", "=", "3", ",", "timeout", "=", "60", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tools.clean_queries_cache.get_paragraphs": [[12, 56], ["allennlp.common.util.import_module_and_submodules", "os.path.exists", "len", "print", "print", "open", "json.dump", "open", "json.load", "allennlp.common.params.Params.from_file", "allennlp.data.DatasetReader.from_params", "DatasetReader.from_params.read", "json.dumps", "Params.from_file.get", "len"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load"], ["def", "get_paragraphs", "(", "args", ")", ":", "\n", "    ", "import_module_and_submodules", "(", "\"src\"", ")", "\n", "os", ".", "environ", "[", "\"weights\"", "]", "=", "\"\"", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "QUERIES_CACHE_PATH", ")", ":", "\n", "        ", "with", "open", "(", "QUERIES_CACHE_PATH", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "            ", "queries_cache", "=", "json", ".", "load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "queries_cache", "=", "{", "}", "\n", "", "size_before", "=", "len", "(", "queries_cache", ")", "\n", "\n", "cleaned_queries_cache", "=", "{", "}", "\n", "\n", "combinations", "=", "{", "\n", "\"configs/strategy_qa/3_STAR_IR-Q.jsonnet\"", ":", "[", "\n", "\"data/strategyqa/train.json\"", ",", "\n", "\"data/strategyqa/dev.json\"", ",", "\n", "]", ",", "\n", "\"configs/strategy_qa/4_STAR_IR-D.jsonnet\"", ":", "[", "\"data/strategyqa/dev.json\"", "]", ",", "\n", "\"configs/strategy_qa/5_STAR_IR-ORA-D.jsonnet\"", ":", "[", "\n", "\"data/strategyqa/train.json\"", ",", "\n", "\"data/strategyqa/dev.json\"", ",", "\n", "]", ",", "\n", "}", "\n", "\n", "for", "config_file", "in", "combinations", ":", "\n", "        ", "for", "data_path", "in", "combinations", "[", "config_file", "]", ":", "\n", "            ", "overrides_dict", "=", "{", "}", "\n", "ext_vars", "=", "{", "}", "\n", "params", "=", "Params", ".", "from_file", "(", "config_file", ",", "json", ".", "dumps", "(", "overrides_dict", ")", ",", "ext_vars", ")", "\n", "dataset_reader", "=", "DatasetReader", ".", "from_params", "(", "\n", "params", ".", "get", "(", "\"validation_dataset_reader\"", ",", "\"dataset_reader\"", ")", "\n", ")", "\n", "\n", "for", "instance", "in", "dataset_reader", ".", "read", "(", "data_path", ")", ":", "\n", "                ", "queries", "=", "instance", "[", "\"metadata\"", "]", "[", "\"queries\"", "]", "\n", "for", "query", "in", "queries", ":", "\n", "                    ", "if", "query", "in", "dataset_reader", ".", "_queries_cache", ":", "\n", "                        ", "cleaned_queries_cache", "[", "query", "]", "=", "dataset_reader", ".", "_queries_cache", "[", "query", "]", "\n", "\n", "", "", "", "", "", "print", "(", "f\"Size before: {size_before}\"", ")", "\n", "print", "(", "f\"Size after: {len(cleaned_queries_cache)}\"", ")", "\n", "with", "open", "(", "args", ".", "output_file", ",", "\"w\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "cleaned_queries_cache", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tools.clean_queries_cache.main": [[58, 63], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "clean_queries_cache.get_paragraphs"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.get_paragraphs_by_config.get_paragraphs"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parse", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parse", ".", "add_argument", "(", "\"--output-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "args", "=", "parse", ".", "parse_args", "(", ")", "\n", "return", "get_paragraphs", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tools.tar_to_tar.main": [[10, 25], ["tempfile.TemporaryDirectory", "allennlp.common.params.Params.from_file().to_file", "os.makedirs", "tarfile.open", "print", "input_tar.extractall", "os.path.join", "tarfile.open", "print", "output_tar.add", "allennlp.common.params.Params.from_file", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "with", "TemporaryDirectory", "(", ")", "as", "tmpdirname", ":", "\n", "        ", "with", "tarfile", ".", "open", "(", "args", ".", "src_model", ",", "mode", "=", "\"r:gz\"", ")", "as", "input_tar", ":", "\n", "            ", "print", "(", "\"Extracting model...\"", ")", "\n", "input_tar", ".", "extractall", "(", "tmpdirname", ")", "\n", "\n", "", "Params", ".", "from_file", "(", "args", ".", "config", ")", ".", "to_file", "(", "os", ".", "path", ".", "join", "(", "tmpdirname", ",", "\"config.json\"", ")", ")", "\n", "\n", "os", ".", "makedirs", "(", "\n", "os", ".", "path", ".", "dirname", "(", "args", ".", "dest_model", ")", "if", "os", ".", "path", ".", "dirname", "(", "args", ".", "dest_model", ")", "!=", "\"\"", "else", "\".\"", ",", "\n", "exist_ok", "=", "True", ",", "\n", ")", "\n", "with", "tarfile", ".", "open", "(", "args", ".", "dest_model", ",", "\"w:gz\"", ")", "as", "output_tar", ":", "\n", "            ", "print", "(", "\"Archiving model...\"", ")", "\n", "output_tar", ".", "add", "(", "tmpdirname", ",", "arcname", "=", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tools.archive.main": [[6, 15], ["os.makedirs", "allennlp.models.archival.archive_model", "allennlp.models.archival.archive_model", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "\n", "os", ".", "path", ".", "dirname", "(", "args", ".", "output_file", ")", "if", "os", ".", "path", ".", "dirname", "(", "args", ".", "output_file", ")", "!=", "\"\"", "else", "\".\"", ",", "\n", "exist_ok", "=", "True", ",", "\n", ")", "\n", "if", "args", ".", "weights_file", "is", "None", ":", "\n", "        ", "archive_model", "(", "args", ".", "model_dir", ",", "archive_path", "=", "args", ".", "output_file", ")", "\n", "", "else", ":", "\n", "        ", "archive_model", "(", "args", ".", "model_dir", ",", "weights", "=", "args", ".", "weights_file", ",", "archive_path", "=", "args", ".", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.tools.squadify_boolq.main": [[6, 46], ["open", "append_to[].extend", "open", "json.dump", "json.loads", "squadified_dataset[].append", "open", "json.load", "hashlib.md5().hexdigest", "hashlib.md5"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "squadified_dataset", "=", "{", "\"data\"", ":", "[", "]", "}", "\n", "with", "open", "(", "args", ".", "boolq_src", ",", "mode", "=", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "input_file", ":", "\n", "        ", "for", "line", "in", "input_file", ":", "\n", "            ", "item", "=", "json", ".", "loads", "(", "line", ")", "\n", "squadified_dataset", "[", "\"data\"", "]", ".", "append", "(", "\n", "{", "\n", "\"title\"", ":", "item", "[", "\"title\"", "]", ",", "\n", "\"paragraphs\"", ":", "[", "\n", "{", "\n", "\"qas\"", ":", "[", "\n", "{", "\n", "\"question\"", ":", "item", "[", "\"question\"", "]", ",", "\n", "\"id\"", ":", "hashlib", ".", "md5", "(", "\n", "(", "item", "[", "\"title\"", "]", "+", "item", "[", "\"question\"", "]", ")", ".", "encode", "(", "\"utf-8\"", ")", "\n", ")", ".", "hexdigest", "(", ")", ",", "# pseudo-id", "\n", "\"answers\"", ":", "[", "\n", "{", "\n", "\"text\"", ":", "\"yes\"", "if", "item", "[", "\"answer\"", "]", "else", "\"no\"", ",", "\n", "\"answer_start\"", ":", "-", "1", ",", "\n", "}", "\n", "]", ",", "\n", "\"is_impossible\"", ":", "False", ",", "\n", "\"is_boolq\"", ":", "True", ",", "\n", "}", "\n", "]", ",", "\n", "\"context\"", ":", "item", "[", "\"passage\"", "]", ",", "\n", "}", "\n", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "", "", "if", "args", ".", "append_to", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "append_to", ",", "mode", "=", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "input_file", ":", "\n", "            ", "append_to", "=", "json", ".", "load", "(", "input_file", ")", "\n", "", "append_to", "[", "\"data\"", "]", ".", "extend", "(", "squadified_dataset", "[", "\"data\"", "]", ")", "\n", "squadified_dataset", "=", "append_to", "\n", "\n", "", "with", "open", "(", "args", ".", "squadified_boolq_dest", ",", "mode", "=", "\"w\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "output_file", ":", "\n", "        ", "json", ".", "dump", "(", "squadified_dataset", ",", "output_file", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.predict.run": [[14, 67], ["overrides_dict.update", "json.dumps", "print", "print", "run.main", "overrides_dict.update", "json.loads", "os.path.dirname", "os.path.join", "tempfile.TemporaryDirectory", "allennlp.common.params.Params.from_file", "Params.from_file.get", "os.path.splitext", "tarfile.open", "archive.extract", "os.path.join", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.recall@10.main"], ["def", "run", "(", "args", ")", ":", "\n", "    ", "overrides_dict", "=", "{", "}", "\n", "if", "args", ".", "debug", ":", "\n", "        ", "overrides_dict", ".", "update", "(", "\n", "{", "\n", "\"validation_dataset_reader\"", ":", "{", "\"max_instances\"", ":", "50", ",", "\"pickle\"", ":", "None", "}", ",", "\n", "}", "\n", ")", "\n", "\n", "", "overrides_dict", ".", "update", "(", "json", ".", "loads", "(", "args", ".", "overrides", ")", ")", "\n", "overrides", "=", "json", ".", "dumps", "(", "overrides_dict", ")", "\n", "\n", "data", "=", "None", "\n", "if", "args", ".", "data", "is", "None", ":", "\n", "        ", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "temp_dir", ":", "\n", "            ", "with", "tarfile", ".", "open", "(", "args", ".", "model", ",", "\"r:gz\"", ")", "as", "archive", ":", "\n", "                ", "archive", ".", "extract", "(", "CONFIG_NAME", ",", "temp_dir", ")", "\n", "", "config", "=", "Params", ".", "from_file", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "CONFIG_NAME", ")", ")", "\n", "data", "=", "config", ".", "get", "(", "\"validation_data_path\"", ",", "None", ")", "\n", "", "", "else", ":", "\n", "        ", "data", "=", "args", ".", "data", "\n", "", "assert", "data", "is", "not", "None", ",", "\"--data is required\"", "\n", "\n", "output_file", "=", "args", ".", "output_file", "\n", "if", "output_file", "is", "None", ":", "\n", "        ", "base_dirname", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "model", ")", "\n", "data_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "data", ")", ")", "[", "0", "]", "\n", "output_name", "=", "args", ".", "output_name", "\n", "if", "output_name", "is", "None", ":", "\n", "            ", "output_name", "=", "f\"preds_{data_name}.jsonl\"", "\n", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "base_dirname", ",", "output_name", ")", "\n", "\n", "", "sys", ".", "argv", "=", "(", "\n", "[", "\"run.py\"", "]", "\n", "+", "(", "[", "\"--debug\"", "]", "if", "args", ".", "debug", "else", "[", "]", ")", "\n", "+", "[", "\"allennlp\"", "]", "\n", "+", "[", "\"predict\"", "]", "\n", "+", "(", "[", "\"--extend-vocab\"", "]", "if", "args", ".", "extend_vocab", "else", "[", "]", ")", "\n", "+", "[", "\"--include-package\"", ",", "\"src\"", "]", "\n", "+", "[", "\"--cuda-device\"", ",", "args", ".", "gpu", "]", "\n", "+", "[", "\"--output-file\"", ",", "output_file", "]", "\n", "+", "(", "[", "\"--batch-size\"", ",", "args", ".", "batch_size", "]", "if", "args", ".", "batch_size", "else", "[", "]", ")", "\n", "+", "(", "[", "\"--weights-file\"", ",", "args", ".", "weights_file", "]", "if", "args", ".", "weights_file", "else", "[", "]", ")", "\n", "+", "[", "\"--use-dataset-reader\"", "]", "\n", "+", "[", "args", ".", "model", "]", "\n", "+", "[", "data", "]", "\n", "+", "[", "\"-o\"", ",", "overrides", "]", "\n", "+", "(", "[", "\"--silent\"", "]", "if", "args", ".", "silent", "else", "[", "]", ")", "\n", ")", "\n", "\n", "print", "(", "sys", ".", "argv", ")", "\n", "print", "(", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "run_main", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.predict.main": [[69, 84], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "predict.run"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.run.run"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parse", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parse", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parse", ".", "add_argument", "(", "\"-g\"", ",", "\"--gpu\"", ",", "type", "=", "str", ",", "default", "=", "\"-1\"", ",", "help", "=", "\"CUDA device\"", ")", "\n", "parse", ".", "add_argument", "(", "\"--output-file\"", ",", "type", "=", "str", ")", "\n", "parse", ".", "add_argument", "(", "\"--output-name\"", ",", "type", "=", "str", ")", "\n", "parse", ".", "add_argument", "(", "\"--extend-vocab\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parse", ".", "add_argument", "(", "\"--silent\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parse", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "str", ",", "help", "=", "\"weights file path\"", ")", "\n", "parse", ".", "add_argument", "(", "\"--weights-file\"", ",", "type", "=", "str", ",", "help", "=", "\"weights file path\"", ")", "\n", "parse", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "help", "=", "\"model.tar.gz\"", ",", "required", "=", "True", ")", "\n", "parse", ".", "add_argument", "(", "\"--data\"", ",", "type", "=", "str", ",", "help", "=", "\"data path\"", ")", "\n", "parse", ".", "add_argument", "(", "\"-o\"", ",", "\"--overrides\"", ",", "type", "=", "str", ",", "default", "=", "\"{}\"", ",", "help", "=", "\"Overrides\"", ")", "\n", "args", "=", "parse", ".", "parse_args", "(", ")", "\n", "return", "run", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.evaluate.run": [[14, 82], ["overrides_dict.update", "json.dumps", "print", "print", "run.main", "overrides_dict.update", "json.loads", "os.path.isfile", "os.path.dirname", "os.path.join", "tempfile.TemporaryDirectory", "allennlp.common.params.Params.from_file", "Params.from_file.get", "os.path.splitext", "os.path.join", "tarfile.open", "archive.extract", "os.path.join", "os.path.basename", "os.path.splitext", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.recall@10.main"], ["def", "run", "(", "args", ")", ":", "\n", "    ", "overrides_dict", "=", "{", "}", "\n", "\n", "if", "args", ".", "debug", ":", "\n", "        ", "overrides_dict", ".", "update", "(", "\n", "{", "\n", "\"validation_dataset_reader\"", ":", "{", "\"max_instances\"", ":", "50", ",", "\"pickle\"", ":", "None", "}", ",", "\n", "}", "\n", ")", "\n", "\n", "", "overrides_dict", ".", "update", "(", "json", ".", "loads", "(", "args", ".", "overrides", ")", ")", "\n", "overrides", "=", "json", ".", "dumps", "(", "overrides_dict", ")", "\n", "\n", "data", "=", "None", "\n", "if", "args", ".", "data", "is", "None", ":", "\n", "        ", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "temp_dir", ":", "\n", "            ", "with", "tarfile", ".", "open", "(", "args", ".", "model", ",", "\"r:gz\"", ")", "as", "archive", ":", "\n", "                ", "archive", ".", "extract", "(", "CONFIG_NAME", ",", "temp_dir", ")", "\n", "", "config", "=", "Params", ".", "from_file", "(", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "CONFIG_NAME", ")", ")", "\n", "data", "=", "config", ".", "get", "(", "\"validation_data_path\"", ",", "None", ")", "\n", "", "", "else", ":", "\n", "        ", "data", "=", "args", ".", "data", "\n", "", "assert", "data", "is", "not", "None", ",", "\"--data is required\"", "\n", "\n", "base_dirname", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "model", ")", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "model", ")", "else", "args", ".", "model", "\n", "\n", "output_file", "=", "args", ".", "output_file", "\n", "if", "output_file", "is", "None", ":", "\n", "        ", "data_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "data", ")", ")", "[", "0", "]", "\n", "output_name", "=", "args", ".", "output_name", "\n", "if", "output_name", "is", "None", ":", "\n", "            ", "output_name", "=", "f\"eval_{data_name}.json\"", "\n", "", "output_file", "=", "os", ".", "path", ".", "join", "(", "base_dirname", ",", "output_name", ")", "\n", "\n", "", "preds_output_file", "=", "None", "\n", "if", "args", ".", "preds", "or", "args", ".", "preds_output_file", "is", "not", "None", "or", "args", ".", "preds_output_name", "is", "not", "None", ":", "\n", "        ", "preds_output_file", "=", "args", ".", "preds_output_file", "\n", "if", "preds_output_file", "is", "None", ":", "\n", "            ", "data_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "data", ")", ")", "[", "0", "]", "\n", "preds_output_name", "=", "args", ".", "preds_output_name", "\n", "if", "preds_output_name", "is", "None", ":", "\n", "                ", "preds_output_name", "=", "f\"preds_{data_name}.jsonl\"", "\n", "", "preds_output_file", "=", "os", ".", "path", ".", "join", "(", "base_dirname", ",", "preds_output_name", ")", "\n", "\n", "", "", "sys", ".", "argv", "=", "(", "\n", "[", "\"run.py\"", "]", "\n", "+", "(", "[", "\"--debug\"", "]", "if", "args", ".", "debug", "else", "[", "]", ")", "\n", "+", "[", "\"allennlp\"", "]", "\n", "+", "[", "\"evaluate\"", "]", "\n", "+", "(", "[", "\"--extend-vocab\"", "]", "if", "args", ".", "extend_vocab", "else", "[", "]", ")", "\n", "+", "[", "\"--include-package\"", ",", "\"src\"", "]", "\n", "+", "[", "\"--cuda-device\"", ",", "args", ".", "gpu", "]", "\n", "+", "[", "\"--output-file\"", ",", "output_file", "]", "\n", "+", "(", "[", "\"--batch-size\"", ",", "args", ".", "batch_size", "]", "if", "args", ".", "batch_size", "else", "[", "]", ")", "\n", "+", "(", "[", "\"--weights-file\"", ",", "args", ".", "weights_file", "]", "if", "args", ".", "weights_file", "else", "[", "]", ")", "\n", "+", "(", "\n", "[", "\"--predictions-output-file\"", ",", "preds_output_file", "]", "\n", "if", "preds_output_file", "is", "not", "None", "\n", "else", "[", "]", "\n", ")", "\n", "+", "[", "args", ".", "model", "]", "\n", "+", "[", "data", "]", "\n", "+", "[", "\"-o\"", ",", "overrides", "]", "\n", ")", "\n", "\n", "print", "(", "sys", ".", "argv", ")", "\n", "print", "(", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "run_main", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.evaluate.main": [[84, 101], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "evaluate.run"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.run.run"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parse", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parse", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parse", ".", "add_argument", "(", "\"-g\"", ",", "\"--gpu\"", ",", "type", "=", "str", ",", "default", "=", "\"-1\"", ",", "help", "=", "\"CUDA device\"", ")", "\n", "parse", ".", "add_argument", "(", "\"--output-file\"", ",", "type", "=", "str", ")", "\n", "parse", ".", "add_argument", "(", "\"--output-name\"", ",", "type", "=", "str", ")", "\n", "parse", ".", "add_argument", "(", "\"--extend-vocab\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parse", ".", "add_argument", "(", "\"--preds\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parse", ".", "add_argument", "(", "\"--preds-output-file\"", ",", "type", "=", "str", ")", "\n", "parse", ".", "add_argument", "(", "\"--preds-output-name\"", ",", "type", "=", "str", ")", "\n", "parse", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "str", ",", "help", "=", "\"weights file path\"", ")", "\n", "parse", ".", "add_argument", "(", "\"--weights-file\"", ",", "type", "=", "str", ",", "help", "=", "\"weights file path\"", ")", "\n", "parse", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "help", "=", "\"model.tar.gz\"", ",", "required", "=", "True", ")", "\n", "parse", ".", "add_argument", "(", "\"--data\"", ",", "type", "=", "str", ",", "help", "=", "\"data path\"", ")", "\n", "parse", ".", "add_argument", "(", "\"-o\"", ",", "\"--overrides\"", ",", "type", "=", "str", ",", "default", "=", "\"{}\"", ",", "help", "=", "\"Overrides\"", ")", "\n", "args", "=", "parse", ".", "parse_args", "(", ")", "\n", "return", "run", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.train_RoBERTa_STAR.run": [[8, 39], ["os.makedirs", "os.path.isfile", "wget.download", "print", "train.main", "print", "train.main", "os.remove", "os.path.join"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.recall@10.main", "home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.recall@10.main"], ["def", "run", "(", "args", ")", ":", "\n", "# Download DROP_TASE_IO_SSE.tar.gz (trained from eladsegal/tag-based-multi-span-extraction)", "\n", "    ", "os", ".", "makedirs", "(", "\"downloaded\"", ",", "exist_ok", "=", "True", ")", "\n", "drop_weights_path", "=", "\"downloaded/DROP_TASE_IO_SSE.tar.gz\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "drop_weights_path", ")", ":", "\n", "        ", "os", ".", "remove", "(", "drop_weights_path", ")", "\n", "", "wget", ".", "download", "(", "\n", "\"https://storage.googleapis.com/ai2i/strategyqa/models/DROP_TASE_IO_SSE.tar.gz\"", ",", "\n", "drop_weights_path", ",", "\n", ")", "\n", "\n", "# Train a QA model on twentyquestions", "\n", "os", ".", "environ", "[", "\"DROP_WEIGHTS\"", "]", "=", "drop_weights_path", "\n", "sys", ".", "argv", "=", "(", "\n", "[", "\"train.py\"", "]", "\n", "+", "(", "[", "\"-g\"", ",", "args", ".", "gpu", "]", "if", "args", ".", "gpu", "else", "[", "]", ")", "\n", "+", "[", "\"-c\"", ",", "\"configs/for_STAR/1_twentyquestions.jsonnet\"", "]", "\n", ")", "\n", "print", "(", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "twentyquestions_serialization_dir", "=", "train_main", "(", ")", "\n", "\n", "# Continue to train the model on BoolQ", "\n", "sys", ".", "argv", "=", "(", "\n", "[", "\"train.py\"", "]", "\n", "+", "(", "[", "\"-g\"", ",", "args", ".", "gpu", "]", "if", "args", ".", "gpu", "else", "[", "]", ")", "\n", "+", "[", "\"-c\"", ",", "\"configs/for_STAR/2_boolq.jsonnet\"", "]", "\n", "+", "[", "\"-s\"", ",", "args", ".", "serialization_dir", "]", "\n", "+", "[", "\"-w\"", ",", "os", ".", "path", ".", "join", "(", "twentyquestions_serialization_dir", ",", "\"model.tar.gz\"", ")", "]", "\n", ")", "\n", "print", "(", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "return", "train_main", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.train_RoBERTa_STAR.main": [[41, 53], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "train_RoBERTa_STAR.run"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.run.run"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parse", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parse", ".", "add_argument", "(", "\"-g\"", ",", "\"--gpu\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"CUDA device\"", ")", "\n", "parse", ".", "add_argument", "(", "\n", "\"-s\"", ",", "\n", "\"--serialization-dir\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"Serialization dir. If empty, gets default name based on the config\"", ",", "\n", ")", "\n", "args", "=", "parse", ".", "parse_args", "(", ")", "\n", "return", "run", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.train.run": [[9, 72], ["overrides_dict.update", "json.dumps", "print", "print", "run.main", "overrides_dict.update", "eval", "isinstance", "os.path.basename", "json.loads", "isinstance", "os.path.splitext", "os.path.dirname", "os.path.exists", "ValueError", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.recall@10.main"], ["def", "run", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "weights", "is", "not", "None", ":", "\n", "        ", "os", ".", "environ", "[", "\"weights\"", "]", "=", "args", ".", "weights", "\n", "\n", "", "overrides_dict", "=", "{", "}", "\n", "\n", "if", "args", ".", "debug", ":", "\n", "        ", "overrides_dict", ".", "update", "(", "\n", "{", "\n", "\"dataset_reader\"", ":", "{", "\"max_instances\"", ":", "50", ",", "\"pickle\"", ":", "None", "}", ",", "\n", "\"validation_dataset_reader\"", ":", "{", "\"max_instances\"", ":", "50", ",", "\"pickle\"", ":", "None", "}", ",", "\n", "}", "\n", ")", "\n", "\n", "", "cuda_device", "=", "args", ".", "gpu", "\n", "if", "cuda_device", "!=", "\"\"", ":", "\n", "        ", "cuda_device", "=", "eval", "(", "cuda_device", ")", "\n", "if", "isinstance", "(", "cuda_device", ",", "int", ")", ":", "\n", "            ", "overrides_dict", "[", "\"trainer\"", "]", "=", "{", "\"cuda_device\"", ":", "cuda_device", "}", "\n", "\n", "", "elif", "isinstance", "(", "cuda_device", ",", "list", ")", ":", "\n", "            ", "overrides_dict", "[", "\"distributed\"", "]", "=", "{", "\"cuda_devices\"", ":", "cuda_device", "}", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"cuda_devices must be a list of a int\"", ")", "\n", "\n", "", "", "if", "args", ".", "serialization_dir", "is", "None", ":", "\n", "        ", "index", "=", "0", "\n", "basename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "args", ".", "config_file", ")", ")", "[", "0", "]", "\n", "base_dirname", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "args", ".", "config_file", ")", ")", "\n", "base_serialization_dir", "=", "f\"experiments/{base_dirname}_{basename}\"", "\n", "while", "True", ":", "\n", "            ", "serialization_dir", "=", "f\"{base_serialization_dir}_{index}\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "serialization_dir", ")", ":", "\n", "                ", "index", "+=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "if", "args", ".", "force", "and", "index", ">", "0", ":", "\n", "            ", "index", "-=", "1", "\n", "serialization_dir", "=", "f\"{base_serialization_dir}_{index}\"", "\n", "", "", "else", ":", "\n", "        ", "serialization_dir", "=", "args", ".", "serialization_dir", "\n", "\n", "", "overrides_dict", ".", "update", "(", "json", ".", "loads", "(", "args", ".", "overrides", ")", ")", "\n", "overrides", "=", "json", ".", "dumps", "(", "overrides_dict", ")", "\n", "\n", "sys", ".", "argv", "=", "(", "\n", "[", "\"run.py\"", "]", "\n", "+", "(", "[", "\"--debug\"", "]", "if", "args", ".", "debug", "else", "[", "]", ")", "\n", "+", "[", "\"allennlp\"", "]", "\n", "+", "[", "\"train\"", "]", "\n", "+", "[", "args", ".", "config_file", "]", "\n", "+", "[", "\"-s\"", ",", "serialization_dir", "]", "\n", "+", "[", "\"--include-package\"", ",", "\"src\"", "]", "\n", "+", "[", "\"-o\"", ",", "overrides", "]", "\n", "+", "(", "[", "\"--force\"", "]", "if", "args", ".", "force", "else", "[", "]", ")", "\n", "+", "(", "[", "\"--recover\"", "]", "if", "args", ".", "recover", "else", "[", "]", ")", "\n", ")", "\n", "\n", "print", "(", "sys", ".", "argv", ")", "\n", "print", "(", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "run_main", "(", ")", "\n", "\n", "return", "serialization_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.train.main": [[74, 97], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "train.run"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.run.run"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parse", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parse", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parse", ".", "add_argument", "(", "\"--force\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parse", ".", "add_argument", "(", "\"--recover\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parse", ".", "add_argument", "(", "\"-g\"", ",", "\"--gpu\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"CUDA device\"", ")", "\n", "parse", ".", "add_argument", "(", "\n", "\"-c\"", ",", "\n", "\"--config-file\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Config file, must for train\"", ",", "\n", "required", "=", "True", ",", "\n", ")", "\n", "parse", ".", "add_argument", "(", "\n", "\"-s\"", ",", "\n", "\"--serialization-dir\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Serialization dir. If empty, gets default name based on the config\"", ",", "\n", ")", "\n", "parse", ".", "add_argument", "(", "\"-o\"", ",", "\"--overrides\"", ",", "type", "=", "str", ",", "default", "=", "\"{}\"", ",", "help", "=", "\"Overrides\"", ")", "\n", "parse", ".", "add_argument", "(", "\"-w\"", ",", "\"--weights\"", ",", "type", "=", "str", ",", "help", "=", "\"Weights to initialize from\"", ")", "\n", "args", "=", "parse", ".", "parse_args", "(", ")", "\n", "return", "run", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.run.run": [[11, 46], ["print", "print", "allennlp.commands.main", "logging.basicConfig", "logging.basicConfig", "sys.argv.index", "sys.argv.index", "json.loads", "json.loads.update", "json.dumps", "json.dumps", "json.dumps", "allennlp.common.params.with_fallback", "sys.argv.index", "json.loads"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.recall@10.main", "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.index", "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.index", "home.repos.pwc.inspect_result.eladsegal_strategyqa.fields.dictionary_field.DictionaryField.index"], ["def", "run", "(", "args", ")", ":", "\n", "    ", "overrides_dict", "=", "{", "}", "\n", "\n", "if", "args", ".", "debug", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "\n", "", "sys", ".", "argv", "=", "sys", ".", "argv", "[", "sys", ".", "argv", ".", "index", "(", "\"allennlp\"", ")", ":", "]", "\n", "\n", "overrides_index", "=", "-", "1", "\n", "try", ":", "\n", "        ", "overrides_index", "=", "sys", ".", "argv", ".", "index", "(", "\"-o\"", ")", "+", "1", "\n", "", "except", ":", "# noqa: E722", "\n", "        ", "try", ":", "\n", "            ", "overrides_index", "=", "sys", ".", "argv", ".", "index", "(", "\"--overrides\"", ")", "+", "1", "\n", "", "except", ":", "# noqa: E722", "\n", "            ", "pass", "\n", "\n", "", "", "if", "overrides_index", "!=", "-", "1", ":", "\n", "        ", "overrides", "=", "sys", ".", "argv", "[", "overrides_index", "]", "\n", "if", "args", ".", "hard_overrides", ":", "\n", "            ", "new_overrides_dict", "=", "json", ".", "loads", "(", "overrides", ")", "\n", "new_overrides_dict", ".", "update", "(", "overrides_dict", ")", "\n", "sys", ".", "argv", "[", "overrides_index", "]", "=", "json", ".", "dumps", "(", "new_overrides_dict", ")", "\n", "", "else", ":", "\n", "            ", "sys", ".", "argv", "[", "overrides_index", "]", "=", "json", ".", "dumps", "(", "\n", "with_fallback", "(", "preferred", "=", "overrides_dict", ",", "fallback", "=", "json", ".", "loads", "(", "overrides", ")", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "sys", ".", "argv", "+=", "[", "\"-o\"", ",", "json", ".", "dumps", "(", "overrides_dict", ")", "]", "\n", "\n", "", "print", "(", "sys", ".", "argv", ")", "\n", "print", "(", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "allennlp_main", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.run.main": [[48, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "run.run"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.run_scripts.run.run"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parse", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parse", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "default", "=", "False", ")", "\n", "parse", ".", "add_argument", "(", "\"--hard-overrides\"", ",", "action", "=", "\"store_false\"", ",", "default", "=", "True", ")", "\n", "args", ",", "_", "=", "parse", ".", "parse_known_args", "(", ")", "\n", "run", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.get_paragraphs_by_config.get_paragraphs": [[10, 38], ["allennlp.common.util.import_module_and_submodules", "allennlp.common.params.Params.from_file", "allennlp.data.DatasetReader.from_params", "DatasetReader.from_params.read", "json.dumps", "Params.from_file.get", "Params.from_file.get", "open", "json.dump"], "function", ["None"], ["def", "get_paragraphs", "(", "args", ")", ":", "\n", "    ", "import_module_and_submodules", "(", "\"src\"", ")", "\n", "os", ".", "environ", "[", "\"weights\"", "]", "=", "\"\"", "\n", "\n", "overrides_dict", "=", "{", "}", "\n", "ext_vars", "=", "{", "}", "\n", "params", "=", "Params", ".", "from_file", "(", "args", ".", "config_file", ",", "json", ".", "dumps", "(", "overrides_dict", ")", ",", "ext_vars", ")", "\n", "dataset_reader", "=", "DatasetReader", ".", "from_params", "(", "\n", "params", ".", "get", "(", "\"validation_dataset_reader\"", ",", "\"dataset_reader\"", ")", "\n", ")", "\n", "\n", "data_path", "=", "args", ".", "data", "\n", "if", "data_path", "is", "None", ":", "\n", "        ", "data_path", "=", "params", ".", "get", "(", "\"validation_data_path\"", ",", "None", ")", "\n", "", "assert", "data_path", "is", "not", "None", ",", "\"--data is required\"", "\n", "\n", "retrieved_paragraphs", "=", "{", "}", "\n", "for", "instance", "in", "dataset_reader", ".", "read", "(", "data_path", ")", ":", "\n", "        ", "paragraphs_objs", "=", "instance", "[", "\"metadata\"", "]", "[", "\"paragraphs\"", "]", "\n", "if", "paragraphs_objs", "is", "not", "None", ":", "\n", "            ", "retrieved_paragraphs", "[", "instance", "[", "\"metadata\"", "]", "[", "\"qid\"", "]", "]", "=", "[", "\n", "p", "[", "\"evidence_id\"", "]", "for", "p", "in", "paragraphs_objs", "\n", "]", "\n", "", "else", ":", "\n", "            ", "retrieved_paragraphs", "[", "instance", "[", "\"metadata\"", "]", "[", "\"qid\"", "]", "]", "=", "[", "]", "\n", "\n", "", "", "with", "open", "(", "args", ".", "output_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "retrieved_paragraphs", ",", "f", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.get_paragraphs_by_config.main": [[40, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "get_paragraphs_by_config.get_paragraphs"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.get_paragraphs_by_config.get_paragraphs"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parse", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parse", ".", "add_argument", "(", "\"-c\"", ",", "\"--config-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parse", ".", "add_argument", "(", "\"--output-file\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parse", ".", "add_argument", "(", "\"--data\"", ",", "type", "=", "str", ")", "\n", "args", "=", "parse", ".", "parse_args", "(", ")", "\n", "return", "get_paragraphs", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.recall@10.recall": [[5, 10], ["len", "len", "set().intersection", "set"], "function", ["None"], ["def", "recall", "(", "relevant_paragraphs", ",", "retrieved_paragraphs", ")", ":", "\n", "    ", "result", "=", "len", "(", "set", "(", "relevant_paragraphs", ")", ".", "intersection", "(", "retrieved_paragraphs", ")", ")", "/", "len", "(", "\n", "relevant_paragraphs", "\n", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.recall@10.calculate_score": [[12, 56], ["output.items", "open", "json.load", "open", "json.load", "max", "instance_scores.append", "len", "len", "print", "evidence_per_annotator.append", "score_per_annotator.append", "sum", "len", "open", "json.dump", "set", "recall@10.recall", "len", "isinstance"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.tokenizers.hf_tokenizer_wrapper.HFTokenizerWrapper.load", "home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.recall@10.recall"], ["", "def", "calculate_score", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "args", ".", "data", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "dataset", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "args", ".", "retrieved_paragraphs", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "f", ":", "\n", "        ", "all_retrieved_paragraphs", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "instance_scores", "=", "[", "]", "\n", "for", "json_obj", "in", "dataset", ":", "\n", "        ", "evidence_per_annotator", "=", "[", "]", "\n", "for", "annotator", "in", "json_obj", "[", "\"evidence\"", "]", ":", "\n", "            ", "evidence_per_annotator", ".", "append", "(", "\n", "set", "(", "\n", "evidence_id", "\n", "for", "step", "in", "annotator", "\n", "for", "x", "in", "step", "\n", "if", "isinstance", "(", "x", ",", "list", ")", "\n", "for", "evidence_id", "in", "x", "\n", ")", "\n", ")", "\n", "", "retrieved_paragraphs", "=", "all_retrieved_paragraphs", "[", "json_obj", "[", "\"qid\"", "]", "]", "[", ":", "args", ".", "retrieval_limit", "]", "\n", "\n", "score_per_annotator", "=", "[", "]", "\n", "for", "evidence", "in", "evidence_per_annotator", ":", "\n", "            ", "score", "=", "recall", "(", "evidence", ",", "retrieved_paragraphs", ")", "if", "len", "(", "evidence", ")", ">", "0", "else", "0", "\n", "score_per_annotator", ".", "append", "(", "score", ")", "\n", "\n", "", "annotator_maximum", "=", "max", "(", "score_per_annotator", ")", "\n", "instance_scores", ".", "append", "(", "annotator_maximum", ")", "\n", "\n", "", "if", "len", "(", "instance_scores", ")", ">", "0", ":", "\n", "        ", "score", "=", "sum", "(", "instance_scores", ")", "/", "len", "(", "instance_scores", ")", "\n", "", "else", ":", "\n", "        ", "score", "=", "None", "\n", "\n", "", "output", "=", "{", "\"#instances\"", ":", "len", "(", "instance_scores", ")", ",", "f\"Recall@{args.retrieval_limit}\"", ":", "score", "}", "\n", "for", "k", ",", "v", "in", "output", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "f\"{k}: {v}\"", ")", "\n", "", "if", "args", ".", "output_file", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "output_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "\n", "output", ",", "\n", "f", ",", "\n", "ensure_ascii", "=", "False", ",", "\n", "indent", "=", "4", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.recall@10.main": [[59, 67], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "recall@10.calculate_score"], "function", ["home.repos.pwc.inspect_result.eladsegal_strategyqa.ir_evaluation.recall@10.calculate_score"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parse", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parse", ".", "add_argument", "(", "\"--data\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parse", ".", "add_argument", "(", "\"-r\"", ",", "\"--retrieved-paragraphs\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parse", ".", "add_argument", "(", "\"--output-file\"", ",", "type", "=", "str", ")", "\n", "parse", ".", "add_argument", "(", "\"--retrieval-limit\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "args", "=", "parse", ".", "parse_args", "(", ")", "\n", "return", "calculate_score", "(", "args", ")", "\n", "\n"]]}