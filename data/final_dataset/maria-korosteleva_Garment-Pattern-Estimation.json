{"home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.BaseModule.__init__": [[13, 20], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "{", "\n", "'loss'", ":", "'MSELoss'", ",", "\n", "'model'", ":", "self", ".", "__class__", ".", "__name__", "\n", "}", "\n", "self", ".", "regression_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.BaseModule.loss": [[21, 28], ["ground_truth.to.to.to", "nets.BaseModule.regression_loss"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "preds", ",", "ground_truth", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Default loss for my neural networks. Takes pne batch of data. \n            Children can use additional arguments as needed\n        \"\"\"", "\n", "ground_truth", "=", "ground_truth", ".", "to", "(", "preds", ".", "device", ")", "# make sure device is correct", "\n", "loss", "=", "self", ".", "regression_loss", "(", "preds", ",", "ground_truth", ")", "\n", "return", "loss", ",", "{", "'regression loss'", ":", "loss", "}", ",", "False", "# second term is for compound losses, third -- to indicate dynamic update of loss structure", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.BaseModule.train": [[29, 33], ["super().train", "isinstance", "nets.BaseModule.loss.train"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.train", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "object", ")", ":", "\n", "            ", "self", ".", "loss", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.BaseModule.eval": [[34, 38], ["super().eval", "isinstance", "nets.BaseModule.loss.eval"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.eval", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.eval"], ["", "", "def", "eval", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "eval", "(", ")", "\n", "if", "isinstance", "(", "self", ".", "loss", ",", "object", ")", ":", "\n", "            ", "self", ".", "loss", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentFullPattern3D.__init__": [[49, 131], ["nets.BaseModule.__init__", "nets.GarmentFullPattern3D.config.update", "nets.GarmentFullPattern3D.config.update", "nets.GarmentFullPattern3D.config[].update", "metrics.composed_loss.ComposedPatternLoss", "getattr", "getattr.", "hasattr", "getattr", "getattr.", "getattr", "getattr.", "torch.Linear", "torch.Linear", "nets.GarmentFullPattern3D.config.update"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__"], ["def", "__init__", "(", "self", ",", "data_config", ",", "config", "=", "{", "}", ",", "in_loss_config", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# output props", "\n", "self", ".", "panel_elem_len", "=", "data_config", "[", "'element_size'", "]", "\n", "self", ".", "max_panel_len", "=", "data_config", "[", "'max_panel_len'", "]", "\n", "self", ".", "max_pattern_size", "=", "data_config", "[", "'max_pattern_len'", "]", "\n", "self", ".", "rotation_size", "=", "data_config", "[", "'rotation_size'", "]", "\n", "self", ".", "translation_size", "=", "data_config", "[", "'translation_size'", "]", "\n", "\n", "# ---- Net configuration ----", "\n", "self", ".", "config", ".", "update", "(", "{", "\n", "'panel_encoding_size'", ":", "250", ",", "\n", "'panel_hidden_size'", ":", "250", ",", "\n", "'panel_n_layers'", ":", "3", ",", "\n", "'pattern_encoding_size'", ":", "250", ",", "\n", "'pattern_hidden_size'", ":", "250", ",", "\n", "'pattern_n_layers'", ":", "2", ",", "\n", "'dropout'", ":", "0", ",", "\n", "'lstm_init'", ":", "'kaiming_normal_'", ",", "\n", "'feature_extractor'", ":", "'EdgeConvFeatures'", ",", "\n", "'panel_decoder'", ":", "'LSTMDecoderModule'", ",", "\n", "'pattern_decoder'", ":", "'LSTMDecoderModule'", ",", "\n", "'stitch_tag_dim'", ":", "3", "\n", "}", ")", "\n", "# Adjust input settings for backwards compatibility (older runs had these parameters together)", "\n", "if", "'panel_hidden_size'", "not", "in", "config", ":", "\n", "            ", "config", "[", "'panel_hidden_size'", "]", "=", "config", "[", "'panel_encoding_size'", "]", "\n", "", "if", "'pattern_hidden_size'", "not", "in", "config", ":", "\n", "            ", "config", "[", "'pattern_hidden_size'", "]", "=", "config", "[", "'pattern_encoding_size'", "]", "\n", "# update with input settings", "\n", "", "self", ".", "config", ".", "update", "(", "config", ")", "\n", "\n", "# ---- losses configuration ----", "\n", "self", ".", "config", "[", "'loss'", "]", "=", "{", "\n", "'loss_components'", ":", "[", "'shape'", ",", "'loop'", ",", "'rotation'", ",", "'translation'", "]", ",", "# , 'stitch', 'free_class'],", "\n", "'quality_components'", ":", "[", "'shape'", ",", "'discrete'", ",", "'rotation'", ",", "'translation'", "]", ",", "#, 'stitch', 'free_class'],", "\n", "'panel_origin_invariant_loss'", ":", "False", ",", "\n", "'loop_loss_weight'", ":", "1.", ",", "\n", "'stitch_tags_margin'", ":", "0.3", ",", "\n", "'epoch_with_stitches'", ":", "40", ",", "\n", "'stitch_supervised_weight'", ":", "0.1", ",", "# only used when explicit stitch loss is used", "\n", "'stitch_hardnet_version'", ":", "False", ",", "\n", "'panel_origin_invariant_loss'", ":", "True", "\n", "}", "\n", "self", ".", "config", "[", "'loss'", "]", ".", "update", "(", "in_loss_config", ")", "\n", "# loss object", "\n", "self", ".", "loss", "=", "ComposedPatternLoss", "(", "data_config", ",", "self", ".", "config", "[", "'loss'", "]", ")", "\n", "self", ".", "config", "[", "'loss'", "]", "=", "self", ".", "loss", ".", "config", "# sync just in case", "\n", "\n", "# ---- Feature extractor definition -------", "\n", "feature_extractor_module", "=", "getattr", "(", "blocks", ",", "self", ".", "config", "[", "'feature_extractor'", "]", ")", "\n", "self", ".", "feature_extractor", "=", "feature_extractor_module", "(", "self", ".", "config", "[", "'pattern_encoding_size'", "]", ",", "self", ".", "config", ")", "\n", "if", "hasattr", "(", "self", ".", "feature_extractor", ",", "'config'", ")", ":", "\n", "            ", "self", ".", "config", ".", "update", "(", "self", ".", "feature_extractor", ".", "config", ")", "# save extractor's additional configuration", "\n", "\n", "# ----- Decode into pattern definition -------", "\n", "", "panel_decoder_module", "=", "getattr", "(", "blocks", ",", "self", ".", "config", "[", "'panel_decoder'", "]", ")", "\n", "self", ".", "panel_decoder", "=", "panel_decoder_module", "(", "\n", "encoding_size", "=", "self", ".", "config", "[", "'panel_encoding_size'", "]", ",", "\n", "hidden_size", "=", "self", ".", "config", "[", "'panel_hidden_size'", "]", ",", "\n", "out_elem_size", "=", "self", ".", "panel_elem_len", "+", "self", ".", "config", "[", "'stitch_tag_dim'", "]", "+", "1", ",", "# last element is free tag indicator ", "\n", "n_layers", "=", "self", ".", "config", "[", "'panel_n_layers'", "]", ",", "\n", "out_len", "=", "self", ".", "max_panel_len", ",", "\n", "dropout", "=", "self", ".", "config", "[", "'dropout'", "]", ",", "\n", "custom_init", "=", "self", ".", "config", "[", "'lstm_init'", "]", "\n", ")", "\n", "pattern_decoder_module", "=", "getattr", "(", "blocks", ",", "self", ".", "config", "[", "'pattern_decoder'", "]", ")", "\n", "self", ".", "pattern_decoder", "=", "pattern_decoder_module", "(", "\n", "encoding_size", "=", "self", ".", "config", "[", "'pattern_encoding_size'", "]", ",", "\n", "hidden_size", "=", "self", ".", "config", "[", "'pattern_hidden_size'", "]", ",", "\n", "out_elem_size", "=", "self", ".", "config", "[", "'panel_encoding_size'", "]", ",", "\n", "n_layers", "=", "self", ".", "config", "[", "'pattern_n_layers'", "]", ",", "\n", "out_len", "=", "self", ".", "max_pattern_size", ",", "\n", "dropout", "=", "self", ".", "config", "[", "'dropout'", "]", ",", "\n", "custom_init", "=", "self", ".", "config", "[", "'lstm_init'", "]", "\n", ")", "\n", "\n", "# decoding the panel placement", "\n", "self", ".", "placement_decoder", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "config", "[", "'panel_encoding_size'", "]", ",", "\n", "self", ".", "rotation_size", "+", "self", ".", "translation_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentFullPattern3D.forward_encode": [[132, 137], ["nets.GarmentFullPattern3D.feature_extractor"], "methods", ["None"], ["", "def", "forward_encode", "(", "self", ",", "positions_batch", ")", ":", "\n", "        ", "\"\"\"\n            Predict garment encodings for input point coulds batch\n        \"\"\"", "\n", "return", "self", ".", "feature_extractor", "(", "positions_batch", ")", "[", "0", "]", "# YAAAAY Pattern hidden representation!!", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentFullPattern3D.forward_pattern_decode": [[138, 147], ["nets.GarmentFullPattern3D.pattern_decoder", "nets.GarmentFullPattern3D.contiguous().view", "nets.GarmentFullPattern3D.contiguous"], "methods", ["None"], ["", "def", "forward_pattern_decode", "(", "self", ",", "garment_encodings", ")", ":", "\n", "        ", "\"\"\"\n            Unfold provided garment encodings into per-panel encodings\n            Useful for obtaining the latent space for Panels\n        \"\"\"", "\n", "panel_encodings", "=", "self", ".", "pattern_decoder", "(", "garment_encodings", ",", "self", ".", "max_pattern_size", ")", "\n", "flat_panel_encodings", "=", "panel_encodings", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "panel_encodings", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "return", "flat_panel_encodings", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentFullPattern3D.forward_panel_decode": [[148, 170], ["nets.GarmentFullPattern3D.panel_decoder", "nets.GarmentFullPattern3D.placement_decoder", "nets.GarmentFullPattern3D.contiguous().view", "flat_rotations.contiguous().view", "flat_translations.contiguous().view", "nets.GarmentFullPattern3D.contiguous", "flat_rotations.contiguous", "flat_translations.contiguous"], "methods", ["None"], ["", "def", "forward_panel_decode", "(", "self", ",", "flat_panel_encodings", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\" Panel encodings to outlines & stitch info \"\"\"", "\n", "flat_panels", "=", "self", ".", "panel_decoder", "(", "flat_panel_encodings", ",", "self", ".", "max_panel_len", ")", "\n", "\n", "# Placement", "\n", "flat_placement", "=", "self", ".", "placement_decoder", "(", "flat_panel_encodings", ")", "\n", "flat_rotations", "=", "flat_placement", "[", ":", ",", ":", "self", ".", "rotation_size", "]", "\n", "flat_translations", "=", "flat_placement", "[", ":", ",", "self", ".", "rotation_size", ":", "]", "\n", "\n", "# reshape back to per-pattern predictions", "\n", "panel_predictions", "=", "flat_panels", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "self", ".", "max_pattern_size", ",", "self", ".", "max_panel_len", ",", "-", "1", ")", "\n", "stitch_tags", "=", "panel_predictions", "[", ":", ",", ":", ",", ":", ",", "self", ".", "panel_elem_len", ":", "-", "1", "]", "\n", "free_edge_class", "=", "panel_predictions", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", "\n", "outlines", "=", "panel_predictions", "[", ":", ",", ":", ",", ":", ",", ":", "self", ".", "panel_elem_len", "]", "\n", "\n", "rotations", "=", "flat_rotations", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "self", ".", "max_pattern_size", ",", "-", "1", ")", "\n", "translations", "=", "flat_translations", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "self", ".", "max_pattern_size", ",", "-", "1", ")", "\n", "\n", "return", "{", "\n", "'outlines'", ":", "outlines", ",", "\n", "'rotations'", ":", "rotations", ",", "'translations'", ":", "translations", ",", "\n", "'stitch_tags'", ":", "stitch_tags", ",", "'free_edges_mask'", ":", "free_edge_class", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentFullPattern3D.forward_decode": [[171, 178], ["nets.GarmentFullPattern3D.forward_pattern_decode", "nets.GarmentFullPattern3D.forward_panel_decode", "garment_encodings.size"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentFullPattern3D.forward_pattern_decode", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentFullPattern3D.forward_panel_decode"], ["", "def", "forward_decode", "(", "self", ",", "garment_encodings", ")", ":", "\n", "        ", "\"\"\"\n            Unfold provided garment encodings into the sewing pattens\n        \"\"\"", "\n", "flat_panel_encodings", "=", "self", ".", "forward_pattern_decode", "(", "garment_encodings", ")", "\n", "\n", "return", "self", ".", "forward_panel_decode", "(", "flat_panel_encodings", ",", "garment_encodings", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentFullPattern3D.forward": [[179, 185], ["nets.GarmentFullPattern3D.forward_encode", "nets.GarmentFullPattern3D.forward_decode"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentFullPattern3D.forward_encode", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentFullPattern3D.forward_decode"], ["", "def", "forward", "(", "self", ",", "positions_batch", ",", "**", "kwargs", ")", ":", "\n", "# Extract info from geometry ", "\n", "        ", "pattern_encodings", "=", "self", ".", "forward_encode", "(", "positions_batch", ")", "\n", "\n", "# Decode ", "\n", "return", "self", ".", "forward_decode", "(", "pattern_encodings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentSegmentPattern3D.__init__": [[192, 237], ["nets.GarmentFullPattern3D.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "in_loss_config.update", "net_blocks.MLP", "sparsemax.Sparsemax"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLP"], ["def", "__init__", "(", "self", ",", "data_config", ",", "config", "=", "{", "}", ",", "in_loss_config", "=", "{", "}", ")", ":", "\n", "\n", "        ", "if", "'loss_components'", "not", "in", "in_loss_config", ":", "\n", "# 'stitch', 'free_class' for enabling stitch prediction", "\n", "            ", "in_loss_config", ".", "update", "(", "\n", "loss_components", "=", "[", "'shape'", ",", "'loop'", ",", "'rotation'", ",", "'translation'", "]", ",", "\n", "quality_components", "=", "[", "'shape'", ",", "'discrete'", ",", "'rotation'", ",", "'translation'", "]", "\n", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "data_config", ",", "config", ",", "in_loss_config", ")", "\n", "\n", "# set to true to get attention weights with prediction -- for visualization or loss evaluation", "\n", "# Keep false in all unnecessary cases to save memory!", "\n", "self", ".", "save_att_weights", "=", "'segmentation'", "in", "self", ".", "loss", ".", "config", "[", "'loss_components'", "]", "\n", "\n", "# defaults", "\n", "if", "'local_attention'", "not", "in", "self", ".", "config", ":", "\n", "# Has to be false for the old runs that don't have this setting and rely on global attention", "\n", "            ", "self", ".", "config", "[", "'local_attention'", "]", "=", "False", "\n", "\n", "# ---- per-point attention module ---- ", "\n", "# that performs sort of segmentation", "\n", "# taking in per-point features and global encoding, outputting point weight per (potential) panel", "\n", "# Segmentaition aims to ensure that each point belongs to min number of panels", "\n", "# Global context gives understanding of the cutting pattern ", "\n", "", "attention_input_size", "=", "self", ".", "feature_extractor", ".", "config", "[", "'EConv_feature'", "]", "\n", "if", "not", "self", ".", "config", "[", "'local_attention'", "]", ":", "# adding global  feature", "\n", "            ", "attention_input_size", "+=", "self", ".", "config", "[", "'pattern_encoding_size'", "]", "\n", "", "if", "self", ".", "config", "[", "'skip_connections'", "]", ":", "\n", "            ", "attention_input_size", "+=", "3", "# initial coordinates", "\n", "\n", "", "self", ".", "point_segment_mlp", "=", "nn", ".", "Sequential", "(", "\n", "blocks", ".", "MLP", "(", "[", "attention_input_size", ",", "attention_input_size", ",", "attention_input_size", ",", "self", ".", "max_pattern_size", "]", ")", ",", "\n", "Sparsemax", "(", "dim", "=", "1", ")", "# in the feature dimention", "\n", ")", "\n", "\n", "# additional panel encoding post-procedding", "\n", "panel_att_out_size", "=", "self", ".", "feature_extractor", ".", "config", "[", "'EConv_feature'", "]", "\n", "if", "self", ".", "config", "[", "'skip_connections'", "]", ":", "\n", "            ", "panel_att_out_size", "+=", "3", "\n", "", "self", ".", "panel_dec_lin", "=", "nn", ".", "Linear", "(", "\n", "panel_att_out_size", ",", "self", ".", "feature_extractor", ".", "config", "[", "'panel_encoding_size'", "]", ")", "\n", "\n", "# pattern decoder is not needed in this acrchitecture", "\n", "del", "self", ".", "pattern_decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentSegmentPattern3D.forward_panel_enc_from_3d": [[238, 284], ["nets.GarmentSegmentPattern3D.feature_extractor", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "panel_encodings.view.view.view", "nets.GarmentSegmentPattern3D.point_segment_mlp", "init_pattern_encodings.unsqueeze().repeat().view", "nets.GarmentSegmentPattern3D.point_segment_mlp", "points_weights[].unsqueeze", "nets.GarmentSegmentPattern3D.feature_extractor.global_pool", "nets.GarmentSegmentPattern3D.panel_dec_lin", "panel_feature.view.view.view", "all_panel_features.append", "nets.GarmentSegmentPattern3D.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "init_pattern_encodings.unsqueeze().repeat", "init_pattern_encodings.unsqueeze"], "methods", ["None"], ["", "def", "forward_panel_enc_from_3d", "(", "self", ",", "positions_batch", ")", ":", "\n", "        ", "\"\"\"\n            Get per-panel encodings from 3D data directly\n            \n        \"\"\"", "\n", "# ------ Point cloud features -------", "\n", "batch_size", "=", "positions_batch", ".", "shape", "[", "0", "]", "\n", "# per-point and total encodings", "\n", "init_pattern_encodings", ",", "point_features_flat", ",", "batch", "=", "self", ".", "feature_extractor", "(", "\n", "positions_batch", ",", "\n", "not", "self", ".", "config", "[", "'local_attention'", "]", "# don't need global pool in this case", "\n", ")", "\n", "num_points", "=", "point_features_flat", ".", "shape", "[", "0", "]", "//", "batch_size", "\n", "\n", "# ----- Predict per-point panel scores (as attention weights) -----", "\n", "# propagate the per-pattern global encoding for each point", "\n", "if", "self", ".", "config", "[", "'local_attention'", "]", ":", "\n", "            ", "points_weights", "=", "self", ".", "point_segment_mlp", "(", "point_features_flat", ")", "\n", "", "else", ":", "\n", "            ", "global_enc_propagated", "=", "init_pattern_encodings", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "num_points", ",", "1", ")", ".", "view", "(", "\n", "[", "-", "1", ",", "init_pattern_encodings", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "\n", "points_weights", "=", "self", ".", "point_segment_mlp", "(", "torch", ".", "cat", "(", "[", "global_enc_propagated", ",", "point_features_flat", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "# ----- Getting per-panel features after attention application ------", "\n", "", "all_panel_features", "=", "[", "]", "\n", "for", "panel_id", "in", "range", "(", "points_weights", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "# get weights for particular panel", "\n", "            ", "panel_att_weights", "=", "points_weights", "[", ":", ",", "panel_id", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "# weight and pool to get panel encoding", "\n", "weighted_features", "=", "panel_att_weights", "*", "point_features_flat", "\n", "\n", "# same pool as in intial extractor", "\n", "panel_feature", "=", "self", ".", "feature_extractor", ".", "global_pool", "(", "weighted_features", ",", "batch", ",", "batch_size", ")", "\n", "panel_feature", "=", "self", ".", "panel_dec_lin", "(", "panel_feature", ")", "# reshape as needed", "\n", "panel_feature", "=", "panel_feature", ".", "view", "(", "batch_size", ",", "-", "1", ",", "panel_feature", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "all_panel_features", ".", "append", "(", "panel_feature", ")", "\n", "\n", "", "panel_encodings", "=", "torch", ".", "cat", "(", "all_panel_features", ",", "dim", "=", "1", ")", "# concat in pattern dimention", "\n", "panel_encodings", "=", "panel_encodings", ".", "view", "(", "batch_size", ",", "-", "1", ",", "panel_encodings", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "points_weights", "=", "points_weights", ".", "view", "(", "batch_size", ",", "-", "1", ",", "points_weights", ".", "shape", "[", "-", "1", "]", ")", "if", "self", ".", "save_att_weights", "else", "[", "]", "\n", "\n", "return", "panel_encodings", ",", "points_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentSegmentPattern3D.forward": [[285, 300], ["nets.GarmentSegmentPattern3D.forward_panel_enc_from_3d", "nets.GarmentSegmentPattern3D.forward_panel_decode", "panel_encodings.view", "len", "nets.GarmentSegmentPattern3D.update"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentSegmentPattern3D.forward_panel_enc_from_3d", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.GarmentFullPattern3D.forward_panel_decode"], ["", "def", "forward", "(", "self", ",", "positions_batch", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"3D to pattern with attention on per-point features\"\"\"", "\n", "\n", "batch_size", "=", "positions_batch", ".", "shape", "[", "0", "]", "\n", "\n", "# attention-based panel encodings", "\n", "panel_encodings", ",", "att_weights", "=", "self", ".", "forward_panel_enc_from_3d", "(", "positions_batch", ")", "\n", "\n", "# ---- decode panels from encodings ----", "\n", "panels", "=", "self", ".", "forward_panel_decode", "(", "panel_encodings", ".", "view", "(", "-", "1", ",", "panel_encodings", ".", "shape", "[", "-", "1", "]", ")", ",", "batch_size", ")", "\n", "\n", "if", "len", "(", "att_weights", ")", ">", "0", ":", "\n", "            ", "panels", ".", "update", "(", "att_weights", "=", "att_weights", ")", "# save attention weights if non-empty", "\n", "\n", "", "return", "panels", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.StitchOnEdge3DPairs.__init__": [[311, 341], ["nets.BaseModule.__init__", "nets.StitchOnEdge3DPairs.config.update", "nets.StitchOnEdge3DPairs.config.update", "nets.StitchOnEdge3DPairs.config[].update", "metrics.composed_loss.ComposedLoss", "net_blocks.MLP"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLP"], ["def", "__init__", "(", "self", ",", "data_config", ",", "config", "=", "{", "}", ",", "in_loss_config", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# data props", "\n", "self", ".", "pair_feature_len", "=", "data_config", "[", "'element_size'", "]", "\n", "\n", "# ---- Net configuration ----", "\n", "self", ".", "config", ".", "update", "(", "{", "\n", "'stitch_hidden_size'", ":", "200", ",", "\n", "'stitch_mlp_n_layers'", ":", "3", "\n", "}", ")", "\n", "# update with input settings", "\n", "self", ".", "config", ".", "update", "(", "config", ")", "\n", "\n", "# --- Losses ---", "\n", "self", ".", "config", "[", "'loss'", "]", "=", "{", "\n", "'loss_components'", ":", "[", "'edge_pair_class'", "]", ",", "\n", "'quality_components'", ":", "[", "'edge_pair_class'", ",", "'edge_pair_stitch_recall'", "]", ",", "\n", "'panel_origin_invariant_loss'", ":", "False", ",", "# don't even try to evaluate", "\n", "'panel_order_inariant_loss'", ":", "False", "\n", "}", "\n", "self", ".", "config", "[", "'loss'", "]", ".", "update", "(", "in_loss_config", ")", "# apply input settings ", "\n", "\n", "# create loss!", "\n", "self", ".", "loss", "=", "ComposedLoss", "(", "data_config", ",", "self", ".", "config", "[", "'loss'", "]", ")", "\n", "self", ".", "config", "[", "'loss'", "]", "=", "self", ".", "loss", ".", "config", "# sync", "\n", "\n", "# ------ Modules ----", "\n", "mid_layers", "=", "[", "self", ".", "config", "[", "'stitch_hidden_size'", "]", "]", "*", "self", ".", "config", "[", "'stitch_mlp_n_layers'", "]", "\n", "self", ".", "mlp", "=", "blocks", ".", "MLP", "(", "[", "self", ".", "pair_feature_len", "]", "+", "mid_layers", "+", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.StitchOnEdge3DPairs.forward": [[343, 354], ["pairs_batch.size", "list", "list.pop", "nets.StitchOnEdge3DPairs.mlp", "nets.StitchOnEdge3DPairs.view", "pairs_batch.contiguous().view", "pairs_batch.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pairs_batch", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "device", "=", "pairs_batch", ".", "device", "\n", "self", ".", "batch_size", "=", "pairs_batch", ".", "size", "(", "0", ")", "\n", "return_shape", "=", "list", "(", "pairs_batch", ".", "shape", ")", "\n", "return_shape", ".", "pop", "(", "-", "1", ")", "\n", "\n", "# reduce extra dimentions if needed", "\n", "out", "=", "self", ".", "mlp", "(", "pairs_batch", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "pairs_batch", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "\n", "# follow the same dimentions structure", "\n", "return", "out", ".", "view", "(", "return_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer.__init__": [[14, 30], ["trainer.Trainer.use_dataset"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer.use_dataset"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "setup", ",", "experiment_tracker", ",", "dataset", "=", "None", ",", "data_split", "=", "{", "}", ",", "\n", "with_norm", "=", "True", ",", "with_visualization", "=", "False", ")", ":", "\n", "        ", "\"\"\"Initialize training and dataset split (if given)\n            * with_visualization toggles image prediction logging to wandb board. Only works on custom garment datasets (with prediction -> image) conversion\"\"\"", "\n", "self", ".", "experiment", "=", "experiment_tracker", "\n", "self", ".", "datawraper", "=", "None", "\n", "self", ".", "standardize_data", "=", "with_norm", "\n", "self", ".", "log_with_visualization", "=", "with_visualization", "\n", "\n", "# training setup", "\n", "self", ".", "setup", "=", "setup", "\n", "\n", "if", "dataset", "is", "not", "None", ":", "\n", "            ", "self", ".", "use_dataset", "(", "dataset", ",", "data_split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer.init_randomizer": [[31, 45], ["torch.manual_seed", "torch.cuda.is_available", "int", "time.time"], "methods", ["None"], ["", "", "def", "init_randomizer", "(", "self", ",", "random_seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"Init randomizatoin for torch globally for reproducibility. \n            Using this function ensures that random seed will be recorded in config\n        \"\"\"", "\n", "# see https://pytorch.org/docs/stable/notes/randomness.html", "\n", "if", "random_seed", ":", "\n", "            ", "self", ".", "setup", "[", "'random_seed'", "]", "=", "random_seed", "\n", "", "elif", "not", "self", ".", "setup", "[", "'random_seed'", "]", ":", "\n", "            ", "self", ".", "setup", "[", "'random_seed'", "]", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "\n", "", "torch", ".", "manual_seed", "(", "self", ".", "setup", "[", "'random_seed'", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer.use_dataset": [[46, 56], ["data.DatasetWrapper", "trainer.Trainer.datawraper.load_split", "trainer.Trainer.datawraper.new_loaders", "trainer.Trainer.datawraper.standardize_data"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.load_split", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.new_loaders", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.standardize_data"], ["", "", "def", "use_dataset", "(", "self", ",", "dataset", ",", "split_info", ")", ":", "\n", "        ", "\"\"\"Use specified dataset for training with given split settings\"\"\"", "\n", "self", ".", "datawraper", "=", "data", ".", "DatasetWrapper", "(", "dataset", ")", "\n", "self", ".", "datawraper", ".", "load_split", "(", "split_info", ")", "\n", "self", ".", "datawraper", ".", "new_loaders", "(", "self", ".", "setup", "[", "'batch_size'", "]", ",", "shuffle_train", "=", "True", ")", "\n", "\n", "if", "self", ".", "standardize_data", ":", "\n", "            ", "self", ".", "datawraper", ".", "standardize_data", "(", ")", "\n", "\n", "", "return", "self", ".", "datawraper", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer.fit": [[57, 80], ["trainer.Trainer._add_optimizer", "trainer.Trainer._add_scheduler", "trainer.Trainer._start_experiment", "print", "trainer.Trainer._fit_loop", "print", "RuntimeError", "hasattr", "len", "trainer.Trainer.folder_for_preds.mkdir", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._add_optimizer", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._add_scheduler", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._start_experiment", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._fit_loop"], ["", "def", "fit", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"Fit provided model to reviosly configured dataset\"\"\"", "\n", "if", "not", "self", ".", "datawraper", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Trainer::Error::fit before dataset was provided. run use_dataset() first'", ")", "\n", "\n", "", "self", ".", "device", "=", "model", ".", "device_ids", "[", "0", "]", "if", "hasattr", "(", "model", ",", "'device_ids'", ")", "else", "self", ".", "setup", "[", "'devices'", "]", "[", "0", "]", "\n", "\n", "self", ".", "_add_optimizer", "(", "model", ")", "\n", "self", ".", "_add_scheduler", "(", "len", "(", "self", ".", "datawraper", ".", "loaders", ".", "train", ")", ")", "\n", "self", ".", "es_tracking", "=", "[", "]", "# early stopping init", "\n", "\n", "start_epoch", "=", "self", ".", "_start_experiment", "(", "model", ")", "\n", "print", "(", "'Trainer::NN training Using device: {}'", ".", "format", "(", "self", ".", "device", ")", ")", "\n", "\n", "if", "self", ".", "log_with_visualization", ":", "\n", "# to run parent dir -- wandb will automatically keep track of intermediate values", "\n", "# Othervise it might only display the last value (if saving with the same name every time)", "\n", "            ", "self", ".", "folder_for_preds", "=", "Path", "(", "'./wandb'", ")", "/", "'intermediate_preds'", "\n", "self", ".", "folder_for_preds", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "", "self", ".", "_fit_loop", "(", "model", ",", "self", ".", "datawraper", ".", "loaders", ".", "train", ",", "self", ".", "datawraper", ".", "loaders", ".", "validation", ",", "start_epoch", "=", "start_epoch", ")", "\n", "\n", "print", "(", "\"Trainer::Finished training\"", ")", "\n", "# self.experiment.stop() -- not stopping the run for convenice for further processing outside of the training routines", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._fit_loop": [[83, 139], ["model.to", "trainer.Trainer.experiment.last_best_validation_loss", "range", "torch.tensor", "model.train", "enumerate", "model.eval", "print", "wandb.log", "trainer.Trainer._early_stopping", "model.module.loss", "loss.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.optimizer.zero_grad", "hasattr", "loss_dict.update", "wandb.log", "hasattr", "print", "torch.no_grad", "trainer.Trainer._save_checkpoint", "trainer.Trainer._save_checkpoint", "trainer.Trainer._log_an_image", "print", "batch[].to", "model", "trainer.Trainer.scheduler.step", "model.module.step", "sum", "len", "len", "model.module.loss", "model", "batch[].to"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.last_best_validation_loss", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.train", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.eval", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._early_stopping", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.BaseModule.loss", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._save_checkpoint", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._save_checkpoint", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._log_an_image", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.BaseModule.loss"], ["", "def", "_fit_loop", "(", "self", ",", "model", ",", "train_loader", ",", "valid_loader", ",", "start_epoch", "=", "0", ")", ":", "\n", "        ", "\"\"\"Fit loop with the setup already performed. Assumes wandb experiment was initialized\"\"\"", "\n", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "log_step", "=", "wb", ".", "run", ".", "step", "-", "1", "\n", "best_valid_loss", "=", "self", ".", "experiment", ".", "last_best_validation_loss", "(", ")", "\n", "best_valid_loss", "=", "torch", ".", "tensor", "(", "best_valid_loss", ")", "if", "best_valid_loss", "is", "not", "None", "else", "None", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "wb", ".", "config", ".", "trainer", "[", "'epochs'", "]", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "features", ",", "gt", "=", "batch", "[", "'features'", "]", ".", "to", "(", "self", ".", "device", ")", ",", "batch", "[", "'ground_truth'", "]", "# .to(self.device)", "\n", "\n", "# with torch.autograd.detect_anomaly():", "\n", "loss", ",", "loss_dict", ",", "loss_structure_update", "=", "model", ".", "module", ".", "loss", "(", "model", "(", "features", ",", "log_step", "=", "log_step", ",", "epoch", "=", "epoch", ")", ",", "gt", ",", "epoch", "=", "epoch", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "                    ", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "", "if", "hasattr", "(", "model", ".", "module", ",", "'step'", ")", ":", "# custom model hyperparams scheduling", "\n", "                    ", "model", ".", "module", ".", "step", "(", "i", ",", "len", "(", "train_loader", ")", ")", "\n", "\n", "# logging", "\n", "", "log_step", "+=", "1", "\n", "loss_dict", ".", "update", "(", "{", "'epoch'", ":", "epoch", ",", "'batch'", ":", "i", ",", "'loss'", ":", "loss", ",", "'learning_rate'", ":", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "}", ")", "\n", "wb", ".", "log", "(", "loss_dict", ",", "step", "=", "log_step", ")", "\n", "\n", "# Check the cluster assignment history", "\n", "", "if", "hasattr", "(", "model", ".", "module", ".", "loss", ",", "'cluster_resolution_mapping'", ")", "and", "model", ".", "module", ".", "loss", ".", "debug_prints", ":", "\n", "                ", "print", "(", "model", ".", "module", ".", "loss", ".", "cluster_resolution_mapping", ")", "\n", "\n", "# scheduler step: after optimizer step, see https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "losses", "=", "[", "model", ".", "module", ".", "loss", "(", "model", "(", "batch", "[", "'features'", "]", ".", "to", "(", "self", ".", "device", ")", ")", ",", "batch", "[", "'ground_truth'", "]", ",", "epoch", "=", "epoch", ")", "[", "0", "]", "for", "batch", "in", "valid_loader", "]", "\n", "valid_loss", "=", "sum", "(", "losses", ")", "/", "len", "(", "losses", ")", "# Each loss element is already a mean for its batch", "\n", "\n", "# Checkpoints: & compare with previous best", "\n", "", "if", "loss_structure_update", "or", "best_valid_loss", "is", "None", "or", "valid_loss", "<", "best_valid_loss", ":", "# taking advantage of lazy evaluation", "\n", "                ", "best_valid_loss", "=", "valid_loss", "\n", "self", ".", "_save_checkpoint", "(", "model", ",", "epoch", ",", "best", "=", "True", ")", "# saving only the good models", "\n", "", "else", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "model", ",", "epoch", ")", "\n", "\n", "# Base logging", "\n", "", "print", "(", "'Epoch: {}, Validation Loss: {}'", ".", "format", "(", "epoch", ",", "valid_loss", ")", ")", "\n", "wb", ".", "log", "(", "{", "'epoch'", ":", "epoch", ",", "'valid_loss'", ":", "valid_loss", ",", "'best_valid_loss'", ":", "best_valid_loss", "}", ",", "step", "=", "log_step", ")", "\n", "\n", "# prediction for visual reference", "\n", "if", "self", ".", "log_with_visualization", ":", "\n", "                ", "self", ".", "_log_an_image", "(", "model", ",", "valid_loader", ",", "epoch", ",", "log_step", ")", "\n", "\n", "# check for early stoping", "\n", "", "if", "self", ".", "_early_stopping", "(", "loss", ",", "best_valid_loss", ",", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ":", "\n", "                ", "print", "(", "'Trainer::Stopped training early'", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._start_experiment": [[140, 161], ["trainer.Trainer.experiment.init_run", "wandb.watch", "trainer.Trainer._restore_run", "print", "trainer.Trainer.datawraper.save_to_wandb", "hasattr", "print", "trainer.Trainer.experiment.add_config", "trainer.Trainer.experiment.cloud_path"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.init_run", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._restore_run", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset.save_to_wandb", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.add_config", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.cloud_path"], ["", "", "", "def", "_start_experiment", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "experiment", ".", "init_run", "(", "{", "'trainer'", ":", "self", ".", "setup", "}", ")", "\n", "\n", "if", "wb", ".", "run", ".", "resumed", ":", "\n", "            ", "start_epoch", "=", "self", ".", "_restore_run", "(", "model", ")", "\n", "self", ".", "experiment", ".", "checkpoint_counter", "=", "start_epoch", "\n", "print", "(", "'Trainer::Resumed run {} from epoch {}'", ".", "format", "(", "self", ".", "experiment", ".", "cloud_path", "(", ")", ",", "start_epoch", ")", ")", "\n", "\n", "if", "self", ".", "device", "!=", "wb", ".", "config", ".", "trainer", "[", "'devices'", "]", "[", "0", "]", ":", "\n", "# device doesn't matter much, so we just inform but do not crash", "\n", "                ", "print", "(", "'Trainer::Warning::Resuming run on different device. Was {}, now using {}'", ".", "format", "(", "\n", "wb", ".", "config", ".", "trainer", "[", "'devices'", "]", "[", "0", "]", ",", "self", ".", "device", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "start_epoch", "=", "0", "\n", "# record configurations of data and model", "\n", "self", ".", "datawraper", ".", "save_to_wandb", "(", "self", ".", "experiment", ")", "\n", "if", "hasattr", "(", "model", ".", "module", ",", "'config'", ")", ":", "\n", "                ", "self", ".", "experiment", ".", "add_config", "(", "'NN'", ",", "model", ".", "module", ".", "config", ")", "# save NN configuration", "\n", "\n", "", "", "wb", ".", "watch", "(", "model", ",", "log", "=", "'all'", ")", "\n", "return", "start_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._add_optimizer": [[162, 173], ["print", "torch.optim.SGD", "model.parameters", "print", "model.to", "torch.optim.Adam", "model.parameters"], "methods", ["None"], ["", "def", "_add_optimizer", "(", "self", ",", "model", ")", ":", "\n", "\n", "        ", "if", "self", ".", "setup", "[", "'optimizer'", "]", "==", "'SGD'", ":", "\n", "# future 'else'", "\n", "            ", "print", "(", "'Trainer::Using default SGD optimizer'", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "setup", "[", "'learning_rate'", "]", ",", "weight_decay", "=", "self", ".", "setup", "[", "'weight_decay'", "]", ")", "\n", "", "elif", "self", ".", "setup", "[", "'optimizer'", "]", "==", "'Adam'", ":", "\n", "# future 'else'", "\n", "            ", "print", "(", "'Trainer::Using Adam optimizer'", ")", "\n", "model", ".", "to", "(", "self", ".", "device", ")", "# see https://discuss.pytorch.org/t/effect-of-calling-model-cuda-after-constructing-an-optimizer/15165/8", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "setup", "[", "'learning_rate'", "]", ",", "weight_decay", "=", "self", ".", "setup", "[", "'weight_decay'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._add_scheduler": [[174, 186], ["torch.optim.lr_scheduler.OneCycleLR", "print"], "methods", ["None"], ["", "", "def", "_add_scheduler", "(", "self", ",", "steps_per_epoch", ")", ":", "\n", "        ", "if", "'lr_scheduling'", "in", "self", ".", "setup", ":", "\n", "            ", "self", ".", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "OneCycleLR", "(", "\n", "self", ".", "optimizer", ",", "\n", "max_lr", "=", "self", ".", "setup", "[", "'learning_rate'", "]", ",", "\n", "epochs", "=", "self", ".", "setup", "[", "'epochs'", "]", ",", "\n", "steps_per_epoch", "=", "steps_per_epoch", ",", "\n", "cycle_momentum", "=", "False", "# to work with Adam", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scheduler", "=", "None", "\n", "print", "(", "'Trainer::Warning::no learning scheduling set'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._restore_run": [[187, 214], ["trainer.Trainer.experiment.data_info", "trainer.Trainer.datawraper.dataset.update_config", "trainer.Trainer.datawraper.load_split", "print", "trainer.Trainer.experiment.get_checkpoint_file", "model.load_state_dict", "trainer.Trainer.optimizer.load_state_dict", "trainer.Trainer.scheduler.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.data_info", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.update_config", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.load_split", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.get_checkpoint_file"], ["", "", "def", "_restore_run", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"Restore the training process from the point it stopped at. \n            Assuming \n                * Current wb.config state is the same as it was when run was initially created\n                * All the necessary training objects are already created and only need update\n                * All related object types are the same as in the resuming run (model, optimizer, etc.)\n                * Self.run_id is properly set\n            Returns id of the next epoch to resume from. \"\"\"", "\n", "\n", "# data split", "\n", "split", ",", "batch_size", ",", "data_config", "=", "self", ".", "experiment", ".", "data_info", "(", ")", "\n", "\n", "self", ".", "datawraper", ".", "dataset", ".", "update_config", "(", "data_config", ")", "\n", "self", ".", "datawraper", ".", "load_split", "(", "split", ",", "batch_size", ")", "# NOTE : random number generator reset", "\n", "\n", "# get latest checkoint info", "\n", "print", "(", "'Trainer::Loading checkpoint to resume run..'", ")", "\n", "checkpoint", "=", "self", ".", "experiment", ".", "get_checkpoint_file", "(", ")", "# latest", "\n", "\n", "# checkpoint loaded correctly", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler_state_dict'", "]", ")", "# https://discuss.pytorch.org/t/how-to-save-and-load-lr-scheduler-stats-in-pytorch/20208", "\n", "\n", "# new epoch id", "\n", "", "return", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._early_stopping": [[215, 242], ["torch.isnan", "trainer.Trainer.es_tracking.append", "trainer.Trainer.experiment.add_statistic", "last_tracking_loss.item", "len", "trainer.Trainer.es_tracking.pop", "trainer.Trainer.experiment.add_statistic", "abs", "trainer.Trainer.experiment.add_statistic", "max", "min"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.add_statistic", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.add_statistic", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.add_statistic"], ["", "def", "_early_stopping", "(", "self", ",", "last_loss", ",", "last_tracking_loss", ",", "last_lr", ")", ":", "\n", "        ", "\"\"\"Check if conditions are met to stop training. Returns a message with a reason if met\n            Early stopping allows to save compute time\"\"\"", "\n", "\n", "# loss goes into nans", "\n", "if", "torch", ".", "isnan", "(", "last_loss", ")", ":", "\n", "            ", "self", ".", "experiment", ".", "add_statistic", "(", "'stopped early'", ",", "'Nan in losses'", ",", "log", "=", "'Trainer::EarlyStopping'", ")", "\n", "return", "True", "\n", "\n", "# Target metric is not improving for some time", "\n", "", "self", ".", "es_tracking", ".", "append", "(", "last_tracking_loss", ".", "item", "(", ")", ")", "\n", "if", "len", "(", "self", ".", "es_tracking", ")", ">", "(", "wb", ".", "config", ".", "trainer", "[", "'early_stopping'", "]", "[", "'patience'", "]", "+", "1", ")", ":", "# number of last calls to consider plus current -> at least two", "\n", "            ", "self", ".", "es_tracking", ".", "pop", "(", "0", ")", "\n", "# if all values fit into a window, they don't change much", "\n", "if", "abs", "(", "max", "(", "self", ".", "es_tracking", ")", "-", "min", "(", "self", ".", "es_tracking", ")", ")", "<", "wb", ".", "config", ".", "trainer", "[", "'early_stopping'", "]", "[", "'window'", "]", ":", "\n", "                ", "self", ".", "experiment", ".", "add_statistic", "(", "\n", "'stopped early'", ",", "'Metric have not changed for {} epochs'", ".", "format", "(", "wb", ".", "config", ".", "trainer", "[", "'early_stopping'", "]", "[", "'patience'", "]", ")", ",", "\n", "log", "=", "'Trainer::EarlyStopping'", ")", "\n", "return", "True", "\n", "# do not check untill wb.config.trainer['early_stopping'].patience # of calls are gathered", "\n", "\n", "# Learning rate vanished", "\n", "", "", "if", "last_lr", "<", "1e-6", ":", "\n", "            ", "self", ".", "experiment", ".", "add_statistic", "(", "'stopped early'", ",", "'Learning Rate vanished'", ",", "log", "=", "'Trainer::EarlyStopping'", ")", "\n", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._log_an_image": [[243, 274], ["torch.no_grad", "print", "range", "trainer.Trainer.datawraper.dataset.save_prediction_batch", "print", "traceback.print_exc", "print", "len", "print", "model", "wandb.log", "batch[].to", "print", "wandb.Image", "str"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.save_prediction_batch"], ["", "def", "_log_an_image", "(", "self", ",", "model", ",", "loader", ",", "epoch", ",", "log_step", ")", ":", "\n", "        ", "\"\"\"Log image of one example prediction to wandb.\n            If the loader does not shuffle batches, logged image is the same on every step\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# using one-sample-from-each-of-the-base-folders loader", "\n", "            ", "single_sample_loader", "=", "self", ".", "datawraper", ".", "loaders", ".", "valid_single_per_data", "\n", "if", "single_sample_loader", "is", "None", ":", "\n", "                ", "print", "(", "'Trainer::Error::Suitable loader is not available. Nothing logged'", ")", "\n", "\n", "", "try", ":", "\n", "                ", "img_files", "=", "[", "]", "\n", "for", "batch", "in", "single_sample_loader", ":", "\n", "\n", "                    ", "batch_img_files", "=", "self", ".", "datawraper", ".", "dataset", ".", "save_prediction_batch", "(", "\n", "model", "(", "batch", "[", "'features'", "]", ".", "to", "(", "self", ".", "device", ")", ")", ",", "\n", "batch", "[", "'name'", "]", ",", "batch", "[", "'data_folder'", "]", ",", "\n", "save_to", "=", "self", ".", "folder_for_preds", ")", "\n", "\n", "img_files", "+=", "batch_img_files", "\n", "", "", "except", "BaseException", "as", "e", ":", "\n", "                ", "print", "(", "e", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "print", "(", "'Trainer::Error::On saving pattern prediction for image logging. Nothing logged'", ")", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "img_files", ")", ")", ":", "\n", "                    ", "print", "(", "'Trainer::Logged pattern prediction for {}'", ".", "format", "(", "img_files", "[", "i", "]", ".", "name", ")", ")", "\n", "try", ":", "\n", "                        ", "wb", ".", "log", "(", "{", "img_files", "[", "i", "]", ".", "name", ":", "[", "wb", ".", "Image", "(", "str", "(", "img_files", "[", "i", "]", ")", ")", "]", ",", "'epoch'", ":", "epoch", "}", ",", "step", "=", "log_step", ")", "# will raise errors if given file is not an image", "\n", "", "except", "BaseException", "as", "e", ":", "\n", "                        ", "print", "(", "e", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.trainer.Trainer._save_checkpoint": [[275, 291], ["trainer.Trainer.experiment.save_checkpoint", "model.state_dict", "trainer.Trainer.optimizer.state_dict", "trainer.Trainer.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.save_checkpoint"], ["", "", "", "", "", "def", "_save_checkpoint", "(", "self", ",", "model", ",", "epoch", ",", "best", "=", "False", ")", ":", "\n", "        ", "\"\"\"Save checkpoint that can be used to resume training\"\"\"", "\n", "\n", "# https://pytorch.org/tutorials/beginner/saving_loading_models.html#saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training", "\n", "checkpoint_dict", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "            ", "checkpoint_dict", "[", "'scheduler_state_dict'", "]", "=", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "\n", "", "self", ".", "experiment", ".", "save_checkpoint", "(", "\n", "checkpoint_dict", ",", "\n", "aliases", "=", "[", "'best'", "]", "if", "best", "else", "[", "]", ",", "\n", "wait_for_upload", "=", "best", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.train.get_values_from_args": [[20, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "open", "yaml.safe_load"], "function", ["None"], ["def", "get_values_from_args", "(", ")", ":", "\n", "    ", "\"\"\"command line arguments to control the run for running wandb Sweeps!\"\"\"", "\n", "# https://stackoverflow.com/questions/40001892/reading-named-command-arguments", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "'-c'", ",", "help", "=", "'YAML configuration file'", ",", "type", "=", "str", ",", "default", "=", "'./models/att/att.yaml'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "with", "open", "(", "args", ".", "config", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.train.get_old_data_config": [[34, 63], ["experiment.ExperimentWrappper", "experiment.ExperimentWrappper.data_info", "in_config.update", "print"], "function", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.data_info"], ["", "def", "get_old_data_config", "(", "in_config", ")", ":", "\n", "    ", "\"\"\"Shortcut to control data configuration\n        Note that the old experiment is HARDCODED!!!!!\"\"\"", "\n", "# get data stats from older runs to save runtime", "\n", "old_experiment", "=", "ExperimentWrappper", "(", "{", "'experiment'", ":", "in_config", "[", "'old_experiment'", "]", "}", ",", "system_info", "[", "'wandb_username'", "]", ")", "\n", "# NOTE data stats are ONLY correct for a specific data split, so these two need to go together", "\n", "split", ",", "_", ",", "data_config", "=", "old_experiment", ".", "data_info", "(", ")", "\n", "\n", "# Use only minimal set of settings", "\n", "# NOTE: you can remove elements for which the in_config should be a priority", "\n", "#       from the list below", "\n", "data_config", "=", "{", "\n", "'standardize'", ":", "data_config", "[", "'standardize'", "]", ",", "\n", "'max_pattern_len'", ":", "data_config", "[", "'max_pattern_len'", "]", ",", "\n", "'max_panel_len'", ":", "data_config", "[", "'max_panel_len'", "]", ",", "\n", "'max_num_stitches'", ":", "data_config", "[", "'max_num_stitches'", "]", ",", "# the rest of the info is not needed here", "\n", "'max_datapoints_per_type'", ":", "data_config", "[", "'max_datapoints_per_type'", "]", "if", "'max_datapoints_per_type'", "in", "data_config", "else", "None", ",", "# keep the numbers too", "\n", "'panel_classification'", ":", "data_config", "[", "'panel_classification'", "]", ",", "\n", "'filter_by_params'", ":", "data_config", "[", "'filter_by_params'", "]", ",", "\n", "'mesh_samples'", ":", "data_config", "[", "'mesh_samples'", "]", ",", "\n", "'obj_filetag'", ":", "data_config", "[", "'obj_filetag'", "]", ",", "\n", "'point_noise_w'", ":", "data_config", "[", "'point_noise_w'", "]", "if", "'point_noise_w'", "in", "data_config", "else", "0", "\n", "}", "\n", "# update with freshly configured values", "\n", "in_config", ".", "update", "(", "data_config", ")", "\n", "\n", "print", "(", "split", ")", "\n", "\n", "return", "split", ",", "in_config", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.train.merge_repos": [[65, 76], ["pathlib.Path", "merge_target.mkdir", "distutils.dir_util.copy_tree", "str", "str"], "function", ["None"], ["", "def", "merge_repos", "(", "root", ",", "repos", ")", ":", "\n", "    ", "\"\"\" Create repository that merges the top ones\"\"\"", "\n", "\n", "root", "=", "Path", "(", "root", ")", "\n", "merge_target", "=", "root", "/", "'merged'", "\n", "merge_target", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "\n", "for", "repo", "in", "repos", ":", "\n", "        ", "dir_util", ".", "copy_tree", "(", "str", "(", "root", "/", "repo", ")", ",", "str", "(", "merge_target", ")", ")", "\n", "\n", "", "return", "merge_target", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.__init__": [[26, 45], ["config[].get", "config[].get", "config[].get"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ",", "wandb_username", "=", "''", ",", "no_sync", "=", "False", ")", ":", "\n", "        ", "\"\"\"Init experiment tracking with wandb\n            With no_sync==True, run won't sync with wandb cloud. \n            Note that resuming won't work for off-cloud runs as it requiers fetching files from the cloud\"\"\"", "\n", "\n", "self", ".", "checkpoint_filetag", "=", "'checkpoint'", "\n", "self", ".", "final_filetag", "=", "'fin_model_state'", "\n", "self", ".", "wandb_username", "=", "wandb_username", "\n", "\n", "self", ".", "project", "=", "config", "[", "'experiment'", "]", ".", "get", "(", "'project_name'", ",", "None", ")", "\n", "self", ".", "run_name", "=", "config", "[", "'experiment'", "]", ".", "get", "(", "'run_name'", ",", "None", ")", "\n", "self", ".", "run_id", "=", "config", "[", "'experiment'", "]", ".", "get", "(", "'run_id'", ",", "None", ")", "\n", "self", ".", "no_sync", "=", "no_sync", "\n", "\n", "self", ".", "in_config", "=", "config", "\n", "\n", "# cannot use wb.config, wb.run, etc. until run initialized & logging started & local path", "\n", "self", ".", "initialized", "=", "False", "\n", "self", ".", "artifact", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.init_run": [[47, 67], ["wandb.init", "print", "print"], "methods", ["None"], ["", "def", "init_run", "(", "self", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"Start wandb logging. \n            If run_id is known, run is automatically resumed.\n            \"\"\"", "\n", "if", "self", ".", "no_sync", ":", "\n", "            ", "os", ".", "environ", "[", "'WANDB_MODE'", "]", "=", "'dryrun'", "\n", "print", "(", "'Experiment:Warning: run is not synced with wandb cloud'", ")", "\n", "\n", "", "wb", ".", "init", "(", "\n", "name", "=", "self", ".", "run_name", ",", "project", "=", "self", ".", "project", ",", "config", "=", "config", ",", "\n", "resume", "=", "'allow'", ",", "id", "=", "self", ".", "run_id", ",", "# Resuming functionality", "\n", "anonymous", "=", "'allow'", ")", "\n", "self", ".", "run_id", "=", "wb", ".", "run", ".", "id", "\n", "\n", "if", "not", "self", ".", "wandb_username", ":", "\n", "            ", "self", ".", "wandb_username", "=", "wb", ".", "run", ".", "entity", "\n", "print", "(", "f'{self.__class__.__name__}::WARNING::Running wandb in Anonymous Mode. Your temporary account is: {self.wandb_username}'", ")", "\n", "\n", "", "self", ".", "initialized", "=", "True", "\n", "self", ".", "checkpoint_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.stop": [[68, 73], ["wandb.finish"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "\"\"\"Stop wandb for current run. All logging finishes & files get uploaded\"\"\"", "\n", "if", "self", ".", "initialized", ":", "\n", "            ", "wb", ".", "finish", "(", ")", "\n", "", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.full_name": [[75, 84], ["None"], "methods", ["None"], ["", "def", "full_name", "(", "self", ")", ":", "\n", "        ", "name", "=", "self", ".", "project", "if", "self", ".", "project", "else", "''", "\n", "name", "+=", "(", "'-'", "+", "self", ".", "run_name", ")", "if", "self", ".", "run_name", "else", "''", "\n", "if", "self", ".", "run_id", ":", "\n", "            ", "name", "+=", "(", "'-'", "+", "self", ".", "run_id", ")", "\n", "", "else", ":", "\n", "            ", "name", "+=", "self", ".", "in_config", "[", "'NN'", "]", "[", "'pre-trained'", "]", "if", "'pre-trained'", "in", "self", ".", "in_config", "[", "'NN'", "]", "else", "''", "\n", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.last_epoch": [[85, 91], ["experiment.ExperimentWrappper._run_object"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._run_object"], ["", "def", "last_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Id of the last epoch processed\n            NOTE: part of resuming functionality, only for wandb runs\n        \"\"\"", "\n", "run", "=", "self", ".", "_run_object", "(", ")", "\n", "return", "run", ".", "summary", "[", "'epoch'", "]", "if", "'epoch'", "in", "run", ".", "summary", "else", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.data_info": [[92, 125], ["experiment.ExperimentWrappper._run_config", "experiment.ExperimentWrappper.get_file", "experiment.ExperimentWrappper.get_file", "experiment.ExperimentWrappper.get_file", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._run_config", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.get_file", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.get_file", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.get_file"], ["", "def", "data_info", "(", "self", ")", ":", "\n", "        ", "\"\"\"Info on the data setup from the run config:\n            Split & batch size info \"\"\"", "\n", "config", "=", "self", ".", "_run_config", "(", ")", "\n", "split_config", "=", "config", "[", "'data_split'", "]", "\n", "data_config", "=", "config", "[", "'dataset'", "]", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "get_file", "(", "'data_split.json'", ",", "'./wandb'", ")", "\n", "split_config", "[", "'filename'", "]", "=", "'./wandb/data_split.json'", "\n", "# NOTE!!!! this is a sub-optimal workaround fix since the proper fix would require updates in class archtecture", "\n", "data_config", "[", "'max_datapoints_per_type'", "]", "=", "None", "# avoid slicing for correct loading of split on any machine", "\n", "", "except", "(", "ValueError", ",", "RuntimeError", ")", "as", "e", ":", "# if file not found, training will just proceed with generated split", "\n", "\n", "            ", "print", "(", "f'{self.__class__.__name__}::Warning::Skipping loading split file from cloud..'", ")", "\n", "\n", "", "try", ":", "\n", "            ", "self", ".", "get_file", "(", "'panel_classes.json'", ",", "'./wandb'", ")", "\n", "data_config", "[", "'panel_classification'", "]", "=", "'./wandb/panel_classes.json'", "\n", "", "except", "(", "ValueError", ",", "RuntimeError", ")", "as", "e", ":", "# if file not found, training will just proceed with generated split", "\n", "            ", "print", "(", "f'{self.__class__.__name__}::Warning::Skipping loading panel classes file from cloud..'", ")", "\n", "\n", "", "try", ":", "\n", "            ", "self", ".", "get_file", "(", "'param_filter.json'", ",", "'./wandb'", ")", "\n", "data_config", "[", "'filter_by_params'", "]", "=", "'./wandb/param_filter.json'", "\n", "", "except", "(", "ValueError", ",", "RuntimeError", ")", "as", "e", ":", "# if file not found, training will just proceed with given setup", "\n", "            ", "print", "(", "f'{self.__class__.__name__}::Warning::Skipping loading parameter filter file from cloud..'", ")", "\n", "\n", "# This part might be missing from the configs loaded from W&B runs", "\n", "", "if", "'unseen_data_folders'", "not", "in", "data_config", "and", "'dataset'", "in", "self", ".", "in_config", "and", "'unseen_data_folders'", "in", "self", ".", "in_config", "[", "'dataset'", "]", ":", "\n", "            ", "data_config", "[", "'unseen_data_folders'", "]", "=", "self", ".", "in_config", "[", "'dataset'", "]", "[", "'unseen_data_folders'", "]", "\n", "\n", "", "return", "split_config", ",", "config", "[", "'trainer'", "]", "[", "'batch_size'", "]", "if", "'trainer'", "in", "config", "else", "config", "[", "'batch_size'", "]", ",", "data_config", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.last_best_validation_loss": [[126, 132], ["experiment.ExperimentWrappper._run_object"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._run_object"], ["", "def", "last_best_validation_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"Id of the last epoch processed\n            NOTE: only for experiments running\\loaded from wandb\n        \"\"\"", "\n", "run", "=", "self", ".", "_run_object", "(", ")", "\n", "return", "run", ".", "summary", "[", "'best_valid_loss'", "]", "if", "'best_valid_loss'", "in", "run", ".", "summary", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.NN_config": [[133, 137], ["experiment.ExperimentWrappper._run_config"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._run_config"], ["", "def", "NN_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"Run configuration params of NeuralNetwork model\"\"\"", "\n", "config", "=", "self", ".", "_run_config", "(", ")", "\n", "return", "config", "[", "'NN'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.add_statistic": [[138, 162], ["print", "print", "print", "isinstance", "experiment.ExperimentWrappper._run_object", "experiment.ExperimentWrappper.summary.update", "isinstance", "json.dumps", "experiment.ExperimentWrappper.add_statistic"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._run_object", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.add_statistic"], ["", "def", "add_statistic", "(", "self", ",", "tag", ",", "info", ",", "log", "=", "''", ")", ":", "\n", "        ", "\"\"\"Add info the run summary (e.g. stats on test set)\"\"\"", "\n", "\n", "# Log", "\n", "if", "log", ":", "\n", "            ", "print", "(", "f'{self.__class__.__name__}::Saving statistic <{log}>:'", ")", "\n", "print", "(", "json", ".", "dumps", "(", "info", ",", "sort_keys", "=", "True", ",", "indent", "=", "2", ")", "if", "isinstance", "(", "info", ",", "dict", ")", "else", "info", ")", "\n", "\n", "", "if", "not", "self", ".", "run_id", ":", "\n", "            ", "print", "(", "f'{self.__class__.__name__}::Warning::Experiment not connected to the cloud. Statistic {tag} not synced'", ")", "\n", "return", "\n", "\n", "# different methods for on-going & finished runs", "\n", "", "if", "self", ".", "initialized", ":", "\n", "            ", "wb", ".", "run", ".", "summary", "[", "tag", "]", "=", "info", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "info", ",", "dict", ")", ":", "\n", "# NOTE Related wandb issue: https://github.com/wandb/client/issues/1934", "\n", "                ", "for", "key", "in", "info", ":", "\n", "                    ", "self", ".", "add_statistic", "(", "tag", "+", "'.'", "+", "key", ",", "info", "[", "key", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "run", "=", "self", ".", "_run_object", "(", ")", "\n", "run", ".", "summary", "[", "tag", "]", "=", "info", "\n", "run", ".", "summary", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.add_config": [[163, 169], ["RuntimeError"], "methods", ["None"], ["", "", "", "def", "add_config", "(", "self", ",", "tag", ",", "info", ")", ":", "\n", "        ", "\"\"\"Add new value to run config. Only for ongoing runs!\"\"\"", "\n", "if", "self", ".", "initialized", ":", "\n", "            ", "wb", ".", "config", "[", "tag", "]", "=", "info", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'ExperimentWrappper:Error:Cannot add config to finished run'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.add_artifact": [[170, 194], ["pathlib.Path", "wandb.Artifact", "pathlib.Path.is_file", "wandb.run.log_artifact", "print", "print", "wandb.init", "wandb.Artifact.add_file", "wandb.Artifact.add_dir", "wandb.finish", "str", "str"], "methods", ["None"], ["", "", "def", "add_artifact", "(", "self", ",", "path", ",", "name", ",", "type", ")", ":", "\n", "        ", "\"\"\"Create a new wandb artifact and upload all the contents there\"\"\"", "\n", "if", "not", "self", ".", "run_id", ":", "\n", "            ", "print", "(", "f'{self.__class__.__name__}::Warning::Experiment not connected to the cloud. Artifact {name} not synced'", ")", "\n", "return", "\n", "\n", "", "path", "=", "Path", "(", "path", ")", "\n", "\n", "if", "not", "self", ".", "initialized", ":", "\n", "# can add artifacts only to existing runs!", "\n", "# https://github.com/wandb/client/issues/1491#issuecomment-726852201", "\n", "            ", "print", "(", "'Experiment::Reactivating wandb run to upload an artifact {}!'", ".", "format", "(", "name", ")", ")", "\n", "wb", ".", "init", "(", "id", "=", "self", ".", "run_id", ",", "project", "=", "self", ".", "project", ",", "resume", "=", "'allow'", ")", "\n", "\n", "", "artifact", "=", "wb", ".", "Artifact", "(", "name", ",", "type", "=", "type", ")", "\n", "if", "path", ".", "is_file", "(", ")", ":", "\n", "            ", "artifact", ".", "add_file", "(", "str", "(", "path", ")", ")", "\n", "", "else", ":", "\n", "            ", "artifact", ".", "add_dir", "(", "str", "(", "path", ")", ")", "\n", "\n", "", "wb", ".", "run", ".", "log_artifact", "(", "artifact", ")", "\n", "\n", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "wb", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.is_finished": [[195, 201], ["experiment.ExperimentWrappper._run_object", "print"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._run_object"], ["", "", "def", "is_finished", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "run_id", ":", "\n", "            ", "print", "(", "f'{self.__class__.__name__}::Warning::Requested status of run not connected to wandb'", ")", "\n", "return", "True", "\n", "", "run", "=", "self", ".", "_run_object", "(", ")", "\n", "return", "run", ".", "state", "==", "'finished'", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.load_dataset": [[203, 226], ["experiment.ExperimentWrappper.data_info", "data_config.update", "getattr", "getattr.", "data.DatasetWrapper", "data_config.update"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.data_info"], ["", "def", "load_dataset", "(", "self", ",", "data_root", ",", "eval_config", "=", "{", "}", ",", "unseen", "=", "False", ",", "batch_size", "=", "5", ",", "load_all", "=", "False", ")", ":", "\n", "        ", "\"\"\"Shortcut to load dataset\n        \n            NOTE: small default batch size for evaluation even on lightweights machines\n        \"\"\"", "\n", "\n", "# data_config also contains the names of datasets to use", "\n", "split", ",", "_", ",", "data_config", "=", "self", ".", "data_info", "(", ")", "# note that run is not initialized -- we use info from finished run", "\n", "if", "unseen", ":", "\n", "            ", "load_all", "=", "True", "# load data as a whole without splitting", "\n", "data_config", ".", "update", "(", "data_folders", "=", "data_config", "[", "'unseen_data_folders'", "]", ")", "# use the unseen folders list", "\n", "", "split", "=", "split", "if", "not", "load_all", "else", "None", "\n", "\n", "# Extra evaluation configuration", "\n", "data_config", ".", "update", "(", "eval_config", ")", "\n", "\n", "# Dataset", "\n", "data_class", "=", "getattr", "(", "data", ",", "data_config", "[", "'class'", "]", ")", "\n", "dataset", "=", "data_class", "(", "data_root", ",", "data_config", ",", "gt_caching", "=", "True", ",", "feature_caching", "=", "True", ")", "\n", "\n", "datawrapper", "=", "data", ".", "DatasetWrapper", "(", "dataset", ",", "known_split", "=", "split", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "return", "dataset", ",", "datawrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.load_model": [[227, 242], ["getattr", "getattr.", "torch.nn.DataParallel", "torch.nn.DataParallel.load_state_dict", "experiment.ExperimentWrappper.NN_config", "experiment.ExperimentWrappper.get_best_model", "experiment.ExperimentWrappper.data_info", "experiment.ExperimentWrappper.NN_config", "experiment.ExperimentWrappper.NN_config"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.NN_config", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.get_best_model", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.data_info", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.NN_config", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.NN_config"], ["", "def", "load_model", "(", "self", ",", "data_config", "=", "None", ")", ":", "\n", "\n", "        ", "if", "not", "data_config", ":", "\n", "            ", "data_config", "=", "self", ".", "data_info", "(", ")", "[", "-", "1", "]", "\n", "\n", "", "model_class", "=", "getattr", "(", "nets", ",", "self", ".", "NN_config", "(", ")", "[", "'model'", "]", ")", "\n", "model", "=", "model_class", "(", "data_config", ",", "self", ".", "NN_config", "(", ")", ",", "self", ".", "NN_config", "(", ")", "[", "'loss'", "]", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "[", "'cuda:0'", "]", ")", "# Assuming all models trained as DataParallel", "\n", "\n", "# Load model weights", "\n", "state_dict", "=", "self", ".", "get_best_model", "(", "device", "=", "'cuda:0'", ")", "[", "'model_state_dict'", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "model", ".", "module", ".", "loss", ".", "debug_prints", "=", "True", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.prediction": [[243, 256], ["datawrapper.predict", "experiment.ExperimentWrappper.add_statistic", "experiment.ExperimentWrappper.add_artifact", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.predict", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.add_statistic", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.add_artifact"], ["", "def", "prediction", "(", "self", ",", "save_to", ",", "model", ",", "datawrapper", ",", "nick", "=", "'test'", ",", "sections", "=", "[", "'test'", "]", ",", "art_name", "=", "'multi-data'", ")", ":", "\n", "        ", "\"\"\"Perform inference and save predictions for a given model on a given dataset\"\"\"", "\n", "\n", "prediction_path", "=", "datawrapper", ".", "predict", "(", "model", ",", "save_to", "=", "save_to", ",", "sections", "=", "sections", ",", "orig_folder_names", "=", "True", ")", "\n", "\n", "if", "nick", ":", "\n", "            ", "self", ".", "add_statistic", "(", "nick", "+", "'_folder'", ",", "prediction_path", ".", "name", ",", "log", "=", "'Prediction save path'", ")", "\n", "\n", "", "if", "art_name", ":", "\n", "            ", "art_name", "=", "art_name", "if", "len", "(", "datawrapper", ".", "dataset", ".", "data_folders", ")", ">", "1", "else", "datawrapper", ".", "dataset", ".", "data_folders", "[", "0", "]", "\n", "self", ".", "add_artifact", "(", "prediction_path", ",", "art_name", ",", "'result'", ")", "\n", "\n", "", "return", "prediction_path", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.checkpoint_filename": [[258, 262], ["None"], "methods", ["None"], ["", "def", "checkpoint_filename", "(", "self", ",", "check_id", "=", "None", ")", ":", "\n", "        ", "\"\"\"Produce filename for the checkpoint of given epoch\"\"\"", "\n", "check_id_str", "=", "'_{}'", ".", "format", "(", "check_id", ")", "if", "check_id", "is", "not", "None", "else", "''", "\n", "return", "'{}{}.pth'", ".", "format", "(", "self", ".", "checkpoint_filetag", ",", "check_id_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.artifactname": [[263, 272], ["str"], "methods", ["None"], ["", "def", "artifactname", "(", "self", ",", "tag", ",", "with_version", "=", "True", ",", "version", "=", "None", ",", "custom_alias", "=", "None", ")", ":", "\n", "        ", "\"\"\"Produce name for wandb artifact for current run with fiven tag\"\"\"", "\n", "basename", "=", "self", ".", "run_name", "+", "'_'", "+", "self", ".", "run_id", "+", "'_'", "+", "tag", "\n", "if", "custom_alias", "is", "not", "None", ":", "\n", "            ", "return", "basename", "+", "':'", "+", "custom_alias", "\n", "\n", "# else -- return a name with versioning", "\n", "", "version_tag", "=", "':v'", "+", "str", "(", "version", ")", "if", "version", "is", "not", "None", "else", "':latest'", "\n", "return", "basename", "+", "version_tag", "if", "with_version", "else", "basename", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.final_filename": [[273, 276], ["None"], "methods", ["None"], ["", "def", "final_filename", "(", "self", ")", ":", "\n", "        ", "\"\"\"Produce filename for the final model file (assuming PyTorch)\"\"\"", "\n", "return", "self", ".", "final_filetag", "+", "'.pth'", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.cloud_path": [[277, 284], ["RuntimeError"], "methods", ["None"], ["", "def", "cloud_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return virtual path to the current run on wandb could\n            Implemented as a function to allow dynamic update of components with less bugs =)\n        \"\"\"", "\n", "if", "not", "self", ".", "run_id", ":", "\n", "            ", "raise", "RuntimeError", "(", "'ExperimentWrappper:Error:Need to know run id to get path in wandb could'", ")", "\n", "", "return", "self", ".", "wandb_username", "+", "'/'", "+", "self", ".", "project", "+", "'/'", "+", "self", ".", "run_id", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.local_wandb_path": [[285, 288], ["pathlib.Path"], "methods", ["None"], ["", "def", "local_wandb_path", "(", "self", ")", ":", "\n", "# if self.initialized:", "\n", "        ", "return", "Path", "(", "wb", ".", "run", ".", "dir", ")", "\n", "# raise RuntimeError('ExperimentWrappper:Error:No local path exists: run is not initialized')", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.local_artifact_path": [[290, 296], ["path.exists", "path.mkdir", "pathlib.Path"], "methods", ["None"], ["", "def", "local_artifact_path", "(", "self", ")", ":", "\n", "        ", "\"\"\"create & maintain path to save files to-be-commited-as-artifacts\"\"\"", "\n", "path", "=", "Path", "(", "'./wandb'", ")", "/", "'artifacts'", "/", "self", ".", "run_id", "\n", "if", "not", "path", ".", "exists", "(", ")", ":", "\n", "            ", "path", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.get_checkpoint_file": [[298, 310], ["RuntimeError", "experiment.ExperimentWrappper._load_artifact", "experiment.ExperimentWrappper.iterdir", "experiment.ExperimentWrappper.artifactname", "experiment.ExperimentWrappper._load_model_from_file", "print"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._load_artifact", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.artifactname", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._load_model_from_file"], ["", "def", "get_checkpoint_file", "(", "self", ",", "to_path", "=", "None", ",", "version", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load checkpoint file for given epoch from the cloud\"\"\"", "\n", "if", "not", "self", ".", "run_id", ":", "\n", "            ", "raise", "RuntimeError", "(", "'ExperimentWrappper:Error:Need to know run id to restore specific checkpoint from the could'", ")", "\n", "", "try", ":", "\n", "            ", "art_path", "=", "self", ".", "_load_artifact", "(", "self", ".", "artifactname", "(", "'checkpoint'", ",", "version", "=", "version", ")", ",", "to_path", "=", "to_path", ")", "\n", "for", "file", "in", "art_path", ".", "iterdir", "(", ")", ":", "# only one file per checkpoint anyway", "\n", "                ", "return", "self", ".", "_load_model_from_file", "(", "file", ",", "device", ")", "\n", "\n", "", "", "except", "(", "RuntimeError", ",", "requests", ".", "exceptions", ".", "HTTPError", ",", "wb", ".", "apis", ".", "CommError", ")", "as", "e", ":", "# raised when file is corrupted or not found", "\n", "            ", "print", "(", "'ExperimentWrappper::Error::checkpoint from version \\'{}\\'is corrupted or lost: {}'", ".", "format", "(", "version", "if", "version", "else", "'latest'", ",", "e", ")", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.get_best_model": [[311, 336], ["experiment.ExperimentWrappper._load_artifact", "experiment.ExperimentWrappper.iterdir", "print", "experiment.ExperimentWrappper._load_model_from_file", "RuntimeError", "experiment.ExperimentWrappper.artifactname", "print", "RuntimeError", "torch.load", "torch.load", "experiment.ExperimentWrappper.cloud_path"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._load_artifact", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._load_model_from_file", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.artifactname", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.cloud_path"], ["", "", "def", "get_best_model", "(", "self", ",", "to_path", "=", "None", ",", "device", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load model parameters (model with best performance) file from the cloud or from locally saved model file if it exists\n\n            NOTE: cloud has a priority as it might contain up-to-date information\n        \"\"\"", "\n", "if", "not", "self", ".", "run_id", ":", "\n", "            ", "if", "'pre-trained'", "in", "self", ".", "in_config", "[", "'NN'", "]", ":", "\n", "# local model available", "\n", "                ", "print", "(", "f'{self.__class__.__name__}::Info::Loading locally saved model'", ")", "\n", "return", "self", ".", "_load_model_from_file", "(", "self", ".", "in_config", "[", "'NN'", "]", "[", "'pre-trained'", "]", ",", "device", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'ExperimentWrappper:Error:Need to know run_id to restore best model from the could OR path to the locally saved model '", ")", "\n", "", "", "try", ":", "\n", "# best checkpoints have 'best' alias", "\n", "            ", "art_path", "=", "self", ".", "_load_artifact", "(", "self", ".", "artifactname", "(", "'checkpoint'", ",", "custom_alias", "=", "'best'", ")", ",", "to_path", "=", "to_path", ")", "\n", "for", "file", "in", "art_path", ".", "iterdir", "(", ")", ":", "\n", "                ", "print", "(", "file", ")", "\n", "if", "device", "is", "not", "None", ":", "\n", "                    ", "return", "torch", ".", "load", "(", "file", ",", "map_location", "=", "device", ")", "\n", "", "else", ":", "\n", "                    ", "return", "torch", ".", "load", "(", "file", ")", "# to the same device it was saved from", "\n", "# only one file per checkpoint anyway", "\n", "\n", "", "", "", "except", "(", "requests", ".", "exceptions", ".", "HTTPError", ")", ":", "# file not found", "\n", "            ", "raise", "RuntimeError", "(", "'ExperimentWrappper:Error:No file with best weights found in run {}'", ".", "format", "(", "self", ".", "cloud_path", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.save_checkpoint": [[337, 361], ["print", "experiment.ExperimentWrappper.checkpoint_filename", "wandb.Artifact", "torch.save", "wandb.Artifact.add_file", "wandb.run.log_artifact", "RuntimeError", "experiment.ExperimentWrappper.artifactname", "str", "experiment.ExperimentWrappper._wait_for_upload", "experiment.ExperimentWrappper.local_artifact_path", "experiment.ExperimentWrappper.artifactname", "experiment.ExperimentWrappper.local_artifact_path"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.checkpoint_filename", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.artifactname", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._wait_for_upload", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.local_artifact_path", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.artifactname", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.local_artifact_path"], ["", "", "def", "save_checkpoint", "(", "self", ",", "state", ",", "aliases", "=", "[", "]", ",", "wait_for_upload", "=", "False", ")", ":", "\n", "        ", "\"\"\"Save given state dict as torch checkpoint to local run dir\n            aliases assign labels to checkpoints for easy retrieval\n\n            NOTE: only for active wandb runs\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "initialized", ":", "\n", "# prevent training updated to finished runs", "\n", "            ", "raise", "RuntimeError", "(", "'Experiment::cannot save checkpoint files to non-active wandb runs'", ")", "\n", "\n", "", "print", "(", "'Experiment::Saving model state -- checkpoint artifact'", ")", "\n", "\n", "# Using artifacts to store important files for this run", "\n", "filename", "=", "self", ".", "checkpoint_filename", "(", "self", ".", "checkpoint_counter", ")", "\n", "artifact", "=", "wb", ".", "Artifact", "(", "self", ".", "artifactname", "(", "'checkpoint'", ",", "with_version", "=", "False", ")", ",", "type", "=", "'checkpoint'", ")", "\n", "self", ".", "checkpoint_counter", "+=", "1", "# ensure all checkpoints have unique names ", "\n", "\n", "torch", ".", "save", "(", "state", ",", "self", ".", "local_artifact_path", "(", ")", "/", "filename", ")", "\n", "artifact", ".", "add_file", "(", "str", "(", "self", ".", "local_artifact_path", "(", ")", "/", "filename", ")", ")", "\n", "wb", ".", "run", ".", "log_artifact", "(", "artifact", ",", "aliases", "=", "[", "'latest'", "]", "+", "aliases", ")", "\n", "\n", "if", "wait_for_upload", ":", "\n", "            ", "self", ".", "_wait_for_upload", "(", "self", ".", "artifactname", "(", "'checkpoint'", ",", "version", "=", "self", ".", "checkpoint_counter", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.get_file": [[362, 367], ["wandb.restore", "RuntimeError"], "methods", ["None"], ["", "", "def", "get_file", "(", "self", ",", "filename", ",", "to_path", "=", "'.'", ")", ":", "\n", "        ", "\"\"\"Download a file from the wandb experiment to given path or to currect directory\"\"\"", "\n", "if", "not", "self", ".", "run_id", ":", "\n", "            ", "raise", "RuntimeError", "(", "'ExperimentWrappper:Error:Need to know run id to restore a file from the could'", ")", "\n", "", "wb", ".", "restore", "(", "filename", ",", "run_path", "=", "self", ".", "project", "+", "'/'", "+", "self", ".", "run_id", ",", "replace", "=", "True", ",", "root", "=", "to_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._load_artifact": [[369, 379], ["print", "wandb.Api", "wandb.Api.artifact", "wb.Api.artifact.download", "print", "pathlib.Path", "str"], "methods", ["None"], ["", "def", "_load_artifact", "(", "self", ",", "artifact_name", ",", "to_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"Download a requested artifact withing current project. Return loaded path\"\"\"", "\n", "print", "(", "'Experiment::Requesting artifacts: {}'", ".", "format", "(", "artifact_name", ")", ")", "\n", "\n", "api", "=", "wb", ".", "Api", "(", "{", "'project'", ":", "self", ".", "project", "}", ")", "\n", "artifact", "=", "api", ".", "artifact", "(", "name", "=", "artifact_name", ")", "\n", "filepath", "=", "artifact", ".", "download", "(", "str", "(", "to_path", ")", "if", "to_path", "else", "None", ")", "\n", "print", "(", "'Experiment::Artifact saved to: {}'", ".", "format", "(", "filepath", ")", ")", "\n", "\n", "return", "Path", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._run_object": [[380, 384], ["wandb.Api().run", "experiment.ExperimentWrappper.cloud_path", "wandb.Api"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.cloud_path"], ["", "def", "_run_object", "(", "self", ")", ":", "\n", "        ", "\"\"\" Shortcut for getting reference to wandb api run object. \n            To uniformly access both ongoing & finished runs\"\"\"", "\n", "return", "wb", ".", "Api", "(", ")", ".", "run", "(", "self", ".", "cloud_path", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._run_config": [[385, 392], ["wandb.Api().run", "experiment.ExperimentWrappper.cloud_path", "wandb.Api"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.cloud_path"], ["", "def", "_run_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"Shortcut for getting run configuration information\"\"\"", "\n", "if", "self", ".", "run_id", ":", "\n", "            ", "run", "=", "wb", ".", "Api", "(", ")", ".", "run", "(", "self", ".", "cloud_path", "(", ")", ")", "\n", "return", "run", ".", "config", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "in_config", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._wait_for_upload": [[393, 409], ["print", "print", "time.sleep", "experiment.ExperimentWrappper._load_artifact", "print", "print"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._load_artifact"], ["", "", "def", "_wait_for_upload", "(", "self", ",", "artifact_name", ",", "max_attempts", "=", "10", ")", ":", "\n", "        ", "\"\"\"Wait for an upload of the given version of an artifact\"\"\"", "\n", "# follows the suggestion of https://github.com/wandb/client/issues/1486#issuecomment-726229978", "\n", "print", "(", "'Experiment::Waiting for artifact {} upload'", ".", "format", "(", "artifact_name", ")", ")", "\n", "attempt", "=", "1", "\n", "while", "attempt", "<=", "max_attempts", ":", "\n", "            ", "try", ":", "\n", "                ", "time", ".", "sleep", "(", "5", ")", "\n", "self", ".", "_load_artifact", "(", "artifact_name", ")", "\n", "print", "(", "'Requested version is successfully syncronized'", ")", "\n", "break", "\n", "", "except", "(", "ValueError", ",", "wb", ".", "CommError", ")", ":", "\n", "                ", "attempt", "+=", "1", "\n", "print", "(", "'Trying again'", ")", "\n", "", "", "if", "attempt", ">", "max_attempts", ":", "\n", "            ", "print", "(", "'Experiment::Warning::artifact {} is still not syncronized'", ".", "format", "(", "artifact_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper._load_model_from_file": [[410, 416], ["print", "torch.load", "torch.load"], "methods", ["None"], ["", "", "def", "_load_model_from_file", "(", "self", ",", "file", ",", "device", "=", "None", ")", ":", "\n", "        ", "print", "(", "file", ")", "\n", "if", "device", "is", "not", "None", ":", "\n", "            ", "return", "torch", ".", "load", "(", "file", ",", "map_location", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "load", "(", "file", ")", "# to the same device it was saved from", "", "", "", "", ""]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._SetAbstractionModule.__init__": [[12, 17], ["torch.Module.__init__", "torch_geometric.PointConv"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__"], ["def", "__init__", "(", "self", ",", "ratio", ",", "conv_radius", ",", "per_point_nn", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ratio", "=", "ratio", "# for controlling number of centroids", "\n", "self", ".", "radius", "=", "conv_radius", "\n", "self", ".", "conv", "=", "geometric", ".", "PointConv", "(", "per_point_nn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._SetAbstractionModule.forward": [[18, 26], ["torch_geometric.fps", "torch_geometric.radius", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "net_blocks._SetAbstractionModule.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "pos", ",", "batch", ")", ":", "\n", "        ", "idx", "=", "geometric", ".", "fps", "(", "pos", ",", "batch", ",", "ratio", "=", "self", ".", "ratio", ")", "\n", "row", ",", "col", "=", "geometric", ".", "radius", "(", "pos", ",", "pos", "[", "idx", "]", ",", "self", ".", "radius", ",", "batch", ",", "batch", "[", "idx", "]", ",", "\n", "max_num_neighbors", "=", "25", ")", "\n", "edge_index", "=", "torch", ".", "stack", "(", "[", "col", ",", "row", "]", ",", "dim", "=", "0", ")", "\n", "features", "=", "self", ".", "conv", "(", "features", ",", "(", "pos", ",", "pos", "[", "idx", "]", ")", ",", "edge_index", ")", "\n", "pos", ",", "batch", "=", "pos", "[", "idx", "]", ",", "batch", "[", "idx", "]", "\n", "return", "features", ",", "pos", ",", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._GlobalSetAbstractionModule.__init__": [[30, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__"], ["def", "__init__", "(", "self", ",", "per_point_net", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nn", "=", "per_point_net", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._GlobalSetAbstractionModule.forward": [[34, 41], ["net_blocks._GlobalSetAbstractionModule.nn", "torch_geometric.global_max_pool", "pos.new_zeros.new_zeros.new_zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_geometric.global_max_pool.size", "torch_geometric.global_max_pool.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "pos", ",", "batch", ")", ":", "\n", "        ", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "pos", "]", ",", "dim", "=", "1", ")", "if", "features", "is", "not", "None", "else", "pos", "\n", "features", "=", "self", ".", "nn", "(", "features", ")", "\n", "features", "=", "geometric", ".", "global_max_pool", "(", "features", ",", "batch", ")", "# returns classical PyTorch batch format #Batch_size x (out_shape)", "\n", "pos", "=", "pos", ".", "new_zeros", "(", "(", "features", ".", "size", "(", "0", ")", ",", "3", ")", ")", "\n", "batch", "=", "torch", ".", "arange", "(", "features", ".", "size", "(", "0", ")", ",", "device", "=", "batch", ".", "device", ")", "\n", "return", "features", ",", "pos", ",", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.PointNetPlusPlus.__init__": [[56, 70], ["torch.Module.__init__", "net_blocks.PointNetPlusPlus.config.update", "net_blocks._SetAbstractionModule", "net_blocks._GlobalSetAbstractionModule", "torch.Linear", "torch.Linear", "net_blocks.MLP", "net_blocks.MLP"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLP", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLP"], ["def", "__init__", "(", "self", ",", "out_size", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "{", "'r1'", ":", "0.3", ",", "'r2'", ":", "0.4", ",", "'r3'", ":", "5", ",", "'r4'", ":", "7", "}", "# defaults for this net", "\n", "self", ".", "config", ".", "update", "(", "config", ")", "# from input", "\n", "\n", "self", ".", "sa1_module", "=", "_SetAbstractionModule", "(", "0.2", ",", "self", ".", "config", "[", "'r1'", "]", ",", "MLP", "(", "[", "3", ",", "self", ".", "config", "[", "'EConv_hidden'", "]", ",", "self", ".", "config", "[", "'EConv_hidden'", "]", ",", "self", ".", "config", "[", "'EConv_feature'", "]", "]", ")", ")", "\n", "# self.sa2_module = _SetAbstractionModule(0.25, self.config['r2'], MLP([112 + 3, 200, 200, 112]))", "\n", "# self.sa3_module = _SetAbstractionModule(0.25, self.config['r3'], MLP([128 + 3, 128, 128, 128]))", "\n", "# self.sa4_module = _SetAbstractionModule(0.25, self.config['r4'], MLP([128 + 3, 128, 128, 256]))", "\n", "self", ".", "sa_last_module", "=", "_GlobalSetAbstractionModule", "(", "MLP", "(", "[", "3", "+", "self", ".", "config", "[", "'EConv_feature'", "]", ",", "self", ".", "config", "[", "'EConv_hidden'", "]", ",", "self", ".", "config", "[", "'EConv_hidden'", "]", ",", "self", ".", "config", "[", "'EConv_feature'", "]", "]", ")", ")", "\n", "# self.sa_last_module = _GlobalSetAbstractionModule(MLP([3, 256, 512, 1024]))", "\n", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "self", ".", "config", "[", "'EConv_feature'", "]", ",", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.PointNetPlusPlus.forward": [[71, 89], ["positions.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_blocks.PointNetPlusPlus.sa1_module", "net_blocks.PointNetPlusPlus.sa_last_module", "net_blocks.PointNetPlusPlus.lin", "positions.size", "torch.full", "torch.full", "torch.full", "torch.full", "enumerate", "elem.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "positions", ")", ":", "\n", "\n", "# flatten the batch for torch-geometric batch format", "\n", "        ", "pos_flat", "=", "positions", ".", "view", "(", "-", "1", ",", "positions", ".", "size", "(", "-", "1", ")", ")", "\n", "batch", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "full", "(", "(", "elem", ".", "size", "(", "0", ")", ",", ")", ",", "fill_value", "=", "i", ",", "device", "=", "positions", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "for", "i", ",", "elem", "in", "enumerate", "(", "positions", ")", "\n", "]", ")", "\n", "\n", "# forward pass", "\n", "sa_out", "=", "(", "None", ",", "pos_flat", ",", "batch", ")", "\n", "sa_out", "=", "self", ".", "sa1_module", "(", "*", "sa_out", ")", "\n", "# sa_out = self.sa2_module(*sa_out)", "\n", "# sa3_out = self.sa3_module(*sa2_out)", "\n", "# sa4_out = self.sa4_module(*sa3_out)", "\n", "sa_last_out", "=", "self", ".", "sa_last_module", "(", "*", "sa_out", ")", "\n", "out", ",", "_", ",", "_", "=", "sa_last_out", "\n", "out", "=", "self", ".", "lin", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.EdgeConvFeatures.__init__": [[95, 159], ["torch.Module.__init__", "net_blocks.EdgeConvFeatures.config.update", "torch.ModuleList", "torch.ModuleList", "net_blocks.EdgeConvFeatures.conv_layers.append", "range", "torch.Linear", "torch.Linear", "torch_geometric.DynamicEdgeConv", "net_blocks.EdgeConvFeatures.conv_layers.append", "torch.ModuleList", "torch.ModuleList", "range", "int", "int", "net_blocks.MLP", "torch_geometric.DynamicEdgeConv", "net_blocks.EdgeConvFeatures.gpool_layers.append", "range", "range", "range", "range", "net_blocks.MLP", "net_blocks.DynamicASAPool", "ValueError", "range", "range"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLP", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLP"], ["def", "__init__", "(", "self", ",", "out_size", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "{", "\n", "'conv_depth'", ":", "2", ",", "\n", "'k_neighbors'", ":", "5", ",", "\n", "'EConv_hidden'", ":", "200", ",", "\n", "'EConv_hidden_depth'", ":", "2", ",", "\n", "'EConv_feature'", ":", "112", ",", "\n", "'EConv_aggr'", ":", "'max'", ",", "\n", "'global_pool'", ":", "'mean'", ",", "\n", "'skip_connections'", ":", "False", ",", "\n", "'graph_pooling'", ":", "False", ",", "\n", "'pool_ratio'", ":", "0.1", "# only used when the graph pooling is enabled", "\n", "}", "# defaults for this net", "\n", "self", ".", "config", ".", "update", "(", "config", ")", "# from input", "\n", "\n", "# Node feature sizes scheme & MLP hidden layers scheme", "\n", "if", "self", ".", "config", "[", "'graph_pooling'", "]", ":", "\n", "# use size variation when using graph pooling to enable larger layers under the same memory constraint", "\n", "            ", "features_by_layer", "=", "[", "int", "(", "self", ".", "config", "[", "'EConv_feature'", "]", "/", "conv_id", ")", "for", "conv_id", "in", "range", "(", "self", ".", "config", "[", "'conv_depth'", "]", ",", "0", ",", "-", "1", ")", "]", "\n", "hidden_by_layer", "=", "[", "int", "(", "self", ".", "config", "[", "'EConv_hidden'", "]", "/", "conv_id", ")", "for", "conv_id", "in", "range", "(", "self", ".", "config", "[", "'conv_depth'", "]", ",", "0", ",", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "features_by_layer", "=", "[", "self", ".", "config", "[", "'EConv_feature'", "]", "for", "_", "in", "range", "(", "self", ".", "config", "[", "'conv_depth'", "]", ")", "]", "\n", "hidden_by_layer", "=", "[", "self", ".", "config", "[", "'EConv_hidden'", "]", "for", "_", "in", "range", "(", "self", ".", "config", "[", "'conv_depth'", "]", ")", "]", "\n", "", "mlp_depth", "=", "self", ".", "config", "[", "'EConv_hidden_depth'", "]", "\n", "\n", "# Contruct the net", "\n", "# Conv layers", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# first is always there", "\n", "self", ".", "conv_layers", ".", "append", "(", "\n", "geometric", ".", "DynamicEdgeConv", "(", "\n", "MLP", "(", "[", "2", "*", "3", "]", "+", "[", "hidden_by_layer", "[", "0", "]", "for", "_", "in", "range", "(", "mlp_depth", ")", "]", "+", "[", "features_by_layer", "[", "0", "]", "]", ")", ",", "\n", "k", "=", "self", ".", "config", "[", "'k_neighbors'", "]", ",", "aggr", "=", "self", ".", "config", "[", "'EConv_aggr'", "]", ")", ")", "\n", "\n", "for", "conv_id", "in", "range", "(", "1", ",", "self", ".", "config", "[", "'conv_depth'", "]", ")", ":", "\n", "            ", "self", ".", "conv_layers", ".", "append", "(", "\n", "geometric", ".", "DynamicEdgeConv", "(", "\n", "MLP", "(", "[", "2", "*", "features_by_layer", "[", "conv_id", "-", "1", "]", "]", "+", "[", "hidden_by_layer", "[", "conv_id", "]", "for", "_", "in", "range", "(", "mlp_depth", ")", "]", "+", "[", "features_by_layer", "[", "conv_id", "]", "]", ")", ",", "\n", "k", "=", "self", ".", "config", "[", "'k_neighbors'", "]", ",", "aggr", "=", "self", ".", "config", "[", "'EConv_aggr'", "]", ")", ")", "\n", "\n", "# pooling layers", "\n", "", "if", "self", ".", "config", "[", "'graph_pooling'", "]", ":", "\n", "            ", "self", ".", "gpool_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "conv_id", "in", "range", "(", "0", ",", "self", ".", "config", "[", "'conv_depth'", "]", ")", ":", "\n", "                ", "self", ".", "gpool_layers", ".", "append", "(", "\n", "DynamicASAPool", "(", "features_by_layer", "[", "conv_id", "]", ",", "k", "=", "self", ".", "config", "[", "'k_neighbors'", "]", ",", "pool_ratio", "=", "self", ".", "config", "[", "'pool_ratio'", "]", ")", ")", "\n", "\n", "# global pooling layer based on config", "\n", "", "", "if", "self", ".", "config", "[", "'global_pool'", "]", "==", "'max'", ":", "\n", "            ", "self", ".", "global_pool", "=", "geometric", ".", "global_max_pool", "\n", "", "elif", "self", ".", "config", "[", "'global_pool'", "]", "==", "'mean'", ":", "\n", "            ", "self", ".", "global_pool", "=", "geometric", ".", "global_mean_pool", "\n", "", "elif", "self", ".", "config", "[", "'global_pool'", "]", "==", "'add'", ":", "\n", "            ", "self", ".", "global_pool", "=", "geometric", ".", "global_add_pool", "\n", "", "else", ":", "# max", "\n", "            ", "raise", "ValueError", "(", "'{} pooling is not supported'", ".", "format", "(", "self", ".", "config", "[", "'global_pool'", "]", ")", ")", "\n", "\n", "# Output linear layer", "\n", "# NOTE Skip connection is only for initial position", "\n", "", "out_features", "=", "self", ".", "config", "[", "'EConv_feature'", "]", "+", "3", "if", "self", ".", "config", "[", "'skip_connections'", "]", "else", "self", ".", "config", "[", "'EConv_feature'", "]", "\n", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "out_features", ",", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.EdgeConvFeatures.forward": [[160, 192], ["positions.size", "positions.size", "positions.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "positions.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_blocks.EdgeConvFeatures.global_pool", "net_blocks.EdgeConvFeatures.lin", "torch.full", "torch.full", "torch.full", "torch.full", "enumerate", "elem.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "positions", ",", "global_pool", "=", "True", ")", ":", "\n", "        ", "batch_size", "=", "positions", ".", "size", "(", "0", ")", "\n", "n_vertices", "=", "positions", ".", "size", "(", "1", ")", "\n", "# flatten the batch for torch-geometric batch format", "\n", "pos_flat", "=", "positions", ".", "view", "(", "-", "1", ",", "positions", ".", "size", "(", "-", "1", ")", ")", "\n", "batch", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "full", "(", "(", "elem", ".", "size", "(", "0", ")", ",", ")", ",", "fill_value", "=", "i", ",", "device", "=", "positions", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "for", "i", ",", "elem", "in", "enumerate", "(", "positions", ")", "\n", "]", ")", "\n", "\n", "# Vertex features + track global features from each layer (if skip connections are used)", "\n", "# In EdgeConv features from different layers are concatenated per node and then aggregated ", "\n", "# but since the pooling is element-wise on feature vectors, we can swap the operations to save memory", "\n", "out", "=", "pos_flat", "\n", "for", "conv_id", "in", "range", "(", "0", ",", "self", ".", "config", "[", "'conv_depth'", "]", ")", ":", "\n", "            ", "out", "=", "self", ".", "conv_layers", "[", "conv_id", "]", "(", "out", ",", "batch", ")", "\n", "if", "self", ".", "config", "[", "'graph_pooling'", "]", ":", "\n", "                ", "out", ",", "batch", "=", "self", ".", "gpool_layers", "[", "conv_id", "]", "(", "out", ",", "batch", ")", "\n", "\n", "", "", "if", "self", ".", "config", "[", "'skip_connections'", "]", ":", "\n", "# concat positions and final features", "\n", "            ", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "pos_flat", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "global_pool", ":", "\n", "# 'out' now holds per-point features", "\n", "            ", "pooled_feature", "=", "self", ".", "global_pool", "(", "out", ",", "batch", ",", "batch_size", ")", "\n", "\n", "# post-processing", "\n", "encoding", "=", "self", ".", "lin", "(", "pooled_feature", ")", "\n", "\n", "return", "encoding", ",", "out", ",", "batch", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "out", ",", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.DynamicASAPool.__init__": [[201, 206], ["torch.Module.__init__", "torch_geometric.ASAPooling"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__"], ["def", "__init__", "(", "self", ",", "feature_size", ",", "k", "=", "10", ",", "pool_ratio", "=", "0.5", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "k", "=", "10", "\n", "self", ".", "edge_pool", "=", "geometric", ".", "ASAPooling", "(", "feature_size", ",", "ratio", "=", "pool_ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.DynamicASAPool.forward": [[207, 219], ["isinstance", "torch_geometric.knn", "net_blocks.DynamicASAPool.edge_pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "node_features", ",", "batch", ")", ":", "\n", "\n", "# graph construction ", "\n", "# follows the idea from here https://pytorch-geometric.readthedocs.io/en/latest/_modules/torch_geometric/nn/conv/edge_conv.html#DynamicEdgeConv", "\n", "        ", "if", "isinstance", "(", "batch", ",", "torch", ".", "Tensor", ")", ":", "# or, ot could be a tuple already", "\n", "            ", "b", "=", "(", "batch", ",", "batch", ")", "\n", "\n", "", "edge_index", "=", "geometric", ".", "knn", "(", "node_features", ",", "node_features", ",", "self", ".", "k", ",", "b", "[", "0", "]", ",", "b", "[", "1", "]", ")", "\n", "\n", "out", ",", "edge_index", ",", "_", ",", "new_batch", ",", "_", "=", "self", ".", "edge_pool", "(", "node_features", ",", "edge_index", ",", "batch", "=", "batch", ")", "\n", "\n", "return", "out", ",", "new_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.EdgeConvPoolingFeatures.__init__": [[224, 245], ["torch.Module.__init__", "net_blocks.EdgeConvPoolingFeatures.config.update", "net_blocks.EdgeConvPoolingFeatures.config.update", "torch_geometric.DynamicEdgeConv", "net_blocks.DynamicASAPool", "torch_geometric.DynamicEdgeConv", "net_blocks.DynamicASAPool", "torch_geometric.DynamicEdgeConv", "torch.Linear", "torch.Linear", "net_blocks.MLP", "net_blocks.MLP", "net_blocks.MLP"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLP", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLP", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLP"], ["def", "__init__", "(", "self", ",", "out_size", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "{", "'conv_depth'", ":", "3", "}", "# defaults for this net", "\n", "self", ".", "config", ".", "update", "(", "n_features1", "=", "32", ",", "n_features2", "=", "128", ",", "n_features3", "=", "256", ",", "k", "=", "10", ")", "\n", "self", ".", "config", ".", "update", "(", "config", ")", "# from input", "\n", "\n", "self", ".", "conv1", "=", "geometric", ".", "DynamicEdgeConv", "(", "\n", "MLP", "(", "[", "2", "*", "3", ",", "64", ",", "64", ",", "self", ".", "config", "[", "'n_features1'", "]", "]", ")", ",", "\n", "k", "=", "self", ".", "config", "[", "'k'", "]", ",", "aggr", "=", "'max'", ")", "\n", "self", ".", "pool1", "=", "DynamicASAPool", "(", "self", ".", "config", "[", "'n_features1'", "]", ",", "k", "=", "self", ".", "config", "[", "'k'", "]", ")", "\n", "self", ".", "conv2", "=", "geometric", ".", "DynamicEdgeConv", "(", "\n", "MLP", "(", "[", "2", "*", "self", ".", "config", "[", "'n_features1'", "]", ",", "self", ".", "config", "[", "'n_features2'", "]", ",", "self", ".", "config", "[", "'n_features2'", "]", ",", "self", ".", "config", "[", "'n_features2'", "]", "]", ")", ",", "\n", "k", "=", "self", ".", "config", "[", "'k'", "]", ",", "aggr", "=", "'max'", "\n", ")", "\n", "self", ".", "pool2", "=", "DynamicASAPool", "(", "self", ".", "config", "[", "'n_features2'", "]", ",", "k", "=", "self", ".", "config", "[", "'k'", "]", ")", "\n", "self", ".", "conv3", "=", "geometric", ".", "DynamicEdgeConv", "(", "\n", "MLP", "(", "[", "2", "*", "self", ".", "config", "[", "'n_features2'", "]", ",", "self", ".", "config", "[", "'n_features3'", "]", ",", "self", ".", "config", "[", "'n_features3'", "]", ",", "self", ".", "config", "[", "'n_features3'", "]", "]", ")", ",", "\n", "k", "=", "self", ".", "config", "[", "'k'", "]", ",", "aggr", "=", "'max'", ")", "\n", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "self", ".", "config", "[", "'n_features3'", "]", ",", "out_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.EdgeConvPoolingFeatures.forward": [[246, 269], ["positions.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_blocks.EdgeConvPoolingFeatures.conv1", "net_blocks.EdgeConvPoolingFeatures.pool1", "net_blocks.EdgeConvPoolingFeatures.conv2", "net_blocks.EdgeConvPoolingFeatures.pool2", "net_blocks.EdgeConvPoolingFeatures.conv3", "torch_geometric.global_max_pool", "net_blocks.EdgeConvPoolingFeatures.lin", "positions.size", "torch.full", "torch.full", "torch.full", "torch.full", "enumerate", "elem.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "positions", ")", ":", "\n", "# flatten the batch for torch-geometric batch format", "\n", "        ", "pos_flat", "=", "positions", ".", "view", "(", "-", "1", ",", "positions", ".", "size", "(", "-", "1", ")", ")", "\n", "batch", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "full", "(", "(", "elem", ".", "size", "(", "0", ")", ",", ")", ",", "fill_value", "=", "i", ",", "device", "=", "positions", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "for", "i", ",", "elem", "in", "enumerate", "(", "positions", ")", "\n", "]", ")", "\n", "\n", "# Vertex features", "\n", "out", "=", "self", ".", "conv1", "(", "pos_flat", ",", "batch", ")", "\n", "out", ",", "batch", "=", "self", ".", "pool1", "(", "out", ",", "batch", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ",", "batch", ")", "\n", "out", ",", "batch", "=", "self", ".", "pool2", "(", "out", ",", "batch", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ",", "batch", ")", "\n", "\n", "# aggregate features from final nodes", "\n", "out", "=", "geometric", ".", "global_max_pool", "(", "out", ",", "batch", ")", "\n", "\n", "# post-processing", "\n", "out", "=", "self", ".", "lin", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLPDecoder.__init__": [[277, 288], ["torch.Module.__init__", "net_blocks.MLP", "net_blocks._init_weights", "range"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLP", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_weights"], ["def", "__init__", "(", "\n", "self", ",", "\n", "encoding_size", ",", "hidden_size", ",", "out_elem_size", ",", "n_layers", ",", "out_len", "=", "1", ",", "\n", "dropout", "=", "0", ",", "custom_init", "=", "'kaiming_normal'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_len", "=", "out_len", "\n", "\n", "self", ".", "mlp", "=", "MLP", "(", "[", "encoding_size", "]", "+", "[", "hidden_size", "*", "out_len", "for", "_", "in", "range", "(", "n_layers", ")", "]", "+", "[", "out_elem_size", "*", "out_len", "]", ")", "\n", "\n", "# initialize", "\n", "_init_weights", "(", "self", ".", "mlp", ",", "init_type", "=", "custom_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLPDecoder.forward": [[289, 299], ["batch_enc.size", "net_blocks.MLPDecoder.mlp", "out.contiguous().view.contiguous().view.contiguous().view", "out.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "batch_enc", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"out_len specifies the length of the output sequence to produce\"\"\"", "\n", "batch_size", "=", "batch_enc", ".", "size", "(", "0", ")", "\n", "\n", "out", "=", "self", ".", "mlp", "(", "batch_enc", ")", "\n", "\n", "# convert to sequence", "\n", "out", "=", "out", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "self", ".", "out_len", ",", "-", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.LSTMEncoderModule.__init__": [[338, 349], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "net_blocks._init_weights"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_weights"], ["def", "__init__", "(", "self", ",", "elem_len", ",", "encoding_size", ",", "n_layers", ",", "dropout", "=", "0", ",", "custom_init", "=", "'kaiming_normal'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "custom_init", "=", "custom_init", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "encoding_size", "=", "encoding_size", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "\n", "elem_len", ",", "encoding_size", ",", "n_layers", ",", "\n", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "\n", "_init_weights", "(", "self", ".", "lstm", ",", "init_type", "=", "custom_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.LSTMEncoderModule.forward": [[350, 361], ["batch_sequence.size", "net_blocks._init_tenzor", "net_blocks._init_tenzor", "net_blocks.LSTMEncoderModule.lstm"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_tenzor", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_tenzor"], ["", "def", "forward", "(", "self", ",", "batch_sequence", ")", ":", "\n", "        ", "device", "=", "batch_sequence", ".", "device", "\n", "batch_size", "=", "batch_sequence", ".", "size", "(", "0", ")", "\n", "\n", "# --- encode --- ", "\n", "hidden_init", "=", "_init_tenzor", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "encoding_size", ",", "device", "=", "device", ",", "init_type", "=", "self", ".", "custom_init", ")", "\n", "cell_init", "=", "_init_tenzor", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "encoding_size", ",", "device", "=", "device", ",", "init_type", "=", "self", ".", "custom_init", ")", "\n", "_", ",", "(", "hidden", ",", "_", ")", "=", "self", ".", "lstm", "(", "batch_sequence", ",", "(", "hidden_init", ",", "cell_init", ")", ")", "\n", "\n", "# final encoding is the last output == hidden of last layer ", "\n", "return", "hidden", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.LSTMDecoderModule.__init__": [[365, 381], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "net_blocks._init_weights"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_weights"], ["def", "__init__", "(", "self", ",", "encoding_size", ",", "hidden_size", ",", "out_elem_size", ",", "n_layers", ",", "dropout", "=", "0", ",", "custom_init", "=", "'kaiming_normal'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "custom_init", "=", "custom_init", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "encoding_size", "=", "encoding_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "out_elem_size", "=", "out_elem_size", "\n", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "encoding_size", ",", "hidden_size", ",", "n_layers", ",", "\n", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "\n", "# post-process to match the desired outut shape", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "out_elem_size", ")", "\n", "\n", "# initialize", "\n", "_init_weights", "(", "self", ".", "lstm", ",", "init_type", "=", "custom_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.LSTMDecoderModule.forward": [[382, 403], ["batch_enc.size", "batch_enc.unsqueeze().repeat", "net_blocks._init_tenzor", "net_blocks._init_tenzor", "net_blocks.LSTMDecoderModule.lstm", "out.contiguous().view.contiguous().view.contiguous().view", "net_blocks.LSTMDecoderModule.lin", "out.contiguous().view.contiguous().view.contiguous().view", "batch_enc.unsqueeze", "out.contiguous().view.contiguous().view.contiguous", "out.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_tenzor", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_tenzor"], ["", "def", "forward", "(", "self", ",", "batch_enc", ",", "out_len", ")", ":", "\n", "        ", "\"\"\"out_len specifies the length of the output sequence to produce\"\"\"", "\n", "device", "=", "batch_enc", ".", "device", "\n", "batch_size", "=", "batch_enc", ".", "size", "(", "0", ")", "\n", "\n", "# propagate encoding for needed seq_len", "\n", "dec_input", "=", "batch_enc", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "out_len", ",", "1", ")", "# along sequence dimention", "\n", "\n", "# decode", "\n", "hidden_init", "=", "_init_tenzor", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "hidden_size", ",", "device", "=", "device", ",", "init_type", "=", "self", ".", "custom_init", ")", "\n", "cell_init", "=", "_init_tenzor", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "hidden_size", ",", "device", "=", "device", ",", "init_type", "=", "self", ".", "custom_init", ")", "\n", "out", ",", "_", "=", "self", ".", "lstm", "(", "dec_input", ",", "(", "hidden_init", ",", "cell_init", ")", ")", "\n", "\n", "# back to requested format", "\n", "# reshaping the outputs such that it can be fit into the fully connected layer", "\n", "out", "=", "out", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_size", ")", "\n", "out", "=", "self", ".", "lin", "(", "out", ")", "\n", "# back to sequence", "\n", "out", "=", "out", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "out_len", ",", "-", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.LSTMDoubleReverseDecoderModule.__init__": [[408, 428], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "net_blocks._init_weights", "net_blocks._init_weights"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_weights", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_weights"], ["def", "__init__", "(", "self", ",", "encoding_size", ",", "hidden_size", ",", "out_elem_size", ",", "n_layers", ",", "dropout", "=", "0", ",", "custom_init", "=", "'kaiming_normal'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "custom_init", "=", "custom_init", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "encoding_size", "=", "encoding_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "out_elem_size", "=", "out_elem_size", "\n", "\n", "# revrese & forward models share the architecture but not the weights", "\n", "self", ".", "lstm_reverse", "=", "nn", ".", "LSTM", "(", "encoding_size", ",", "hidden_size", ",", "n_layers", ",", "\n", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "lstm_forward", "=", "nn", ".", "LSTM", "(", "hidden_size", "+", "encoding_size", ",", "hidden_size", ",", "n_layers", ",", "\n", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "\n", "# post-process to match the desired outut shape", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "out_elem_size", ")", "\n", "\n", "# initialize", "\n", "_init_weights", "(", "self", ".", "lstm_reverse", ",", "init_type", "=", "custom_init", ")", "\n", "_init_weights", "(", "self", ".", "lstm_forward", ",", "init_type", "=", "custom_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.LSTMDoubleReverseDecoderModule.forward": [[429, 455], ["batch_enc.size", "batch_enc.unsqueeze().repeat", "net_blocks._init_tenzor", "net_blocks._init_tenzor", "net_blocks.LSTMDoubleReverseDecoderModule.lstm_reverse", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "net_blocks.LSTMDoubleReverseDecoderModule.lstm_forward", "out.contiguous().view.contiguous().view.contiguous().view", "net_blocks.LSTMDoubleReverseDecoderModule.lin", "out.contiguous().view.contiguous().view.contiguous().view", "batch_enc.unsqueeze", "out.contiguous().view.contiguous().view.contiguous", "out.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_tenzor", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_tenzor"], ["", "def", "forward", "(", "self", ",", "batch_enc", ",", "out_len", ")", ":", "\n", "        ", "\"\"\"out_len specifies the length of the output sequence to produce\"\"\"", "\n", "device", "=", "batch_enc", ".", "device", "\n", "batch_size", "=", "batch_enc", ".", "size", "(", "0", ")", "\n", "\n", "# propagate encoding for needed seq_len", "\n", "dec_input", "=", "batch_enc", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "out_len", ",", "1", ")", "# along sequence dimention", "\n", "\n", "# decode reversed sequence", "\n", "hidden_init", "=", "_init_tenzor", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "hidden_size", ",", "device", "=", "device", ",", "init_type", "=", "self", ".", "custom_init", ")", "\n", "cell_init", "=", "_init_tenzor", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "hidden_size", ",", "device", "=", "device", ",", "init_type", "=", "self", ".", "custom_init", ")", "\n", "out", ",", "state", "=", "self", ".", "lstm_reverse", "(", "dec_input", ",", "(", "hidden_init", ",", "cell_init", ")", ")", "\n", "\n", "# decode forward sequence", "\n", "out", "=", "torch", ".", "flip", "(", "out", ",", "[", "1", "]", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "dec_input", "]", ",", "-", "1", ")", "# skip connection with original input", "\n", "out", ",", "_", "=", "self", ".", "lstm_forward", "(", "out", ",", "state", ")", "# pass the state from previous module for additional info", "\n", "\n", "# back to requested format", "\n", "# reshaping the outputs such that it can be fit into the fully connected layer", "\n", "out", "=", "out", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_size", ")", "\n", "out", "=", "self", ".", "lin", "(", "out", ")", "\n", "# back to sequence", "\n", "out", "=", "out", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "out_len", ",", "-", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.GRUDecoderModule.__init__": [[459, 476], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "net_blocks._init_weights"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_weights"], ["def", "__init__", "(", "self", ",", "encoding_size", ",", "hidden_size", ",", "out_elem_size", ",", "n_layers", ",", "dropout", "=", "0", ",", "custom_init", "=", "'kaiming_normal'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "custom_init", "=", "custom_init", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "encoding_size", "=", "encoding_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "out_elem_size", "=", "out_elem_size", "\n", "\n", "self", ".", "recurrent_cell", "=", "nn", ".", "GRU", "(", "\n", "encoding_size", ",", "hidden_size", ",", "n_layers", ",", "\n", "dropout", "=", "dropout", ",", "batch_first", "=", "True", ")", "\n", "\n", "# post-process to match the desired outut shape", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "out_elem_size", ")", "\n", "\n", "# initialize", "\n", "_init_weights", "(", "self", ".", "recurrent_cell", ",", "init_type", "=", "custom_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.GRUDecoderModule.forward": [[477, 498], ["batch_enc.size", "batch_enc.unsqueeze().repeat", "net_blocks._init_tenzor", "net_blocks.GRUDecoderModule.recurrent_cell", "out.contiguous().view.contiguous().view.contiguous().view", "net_blocks.GRUDecoderModule.lin", "out.contiguous().view.contiguous().view.contiguous().view", "batch_enc.unsqueeze", "out.contiguous().view.contiguous().view.contiguous", "out.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_tenzor"], ["", "def", "forward", "(", "self", ",", "batch_enc", ",", "out_len", ")", ":", "\n", "        ", "\"\"\"out_len specifies the length of the output sequence to produce\"\"\"", "\n", "device", "=", "batch_enc", ".", "device", "\n", "batch_size", "=", "batch_enc", ".", "size", "(", "0", ")", "\n", "\n", "# propagate encoding for needed seq_len", "\n", "dec_input", "=", "batch_enc", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "out_len", ",", "1", ")", "# along sequence dimention", "\n", "\n", "# decode", "\n", "# https://discuss.pytorch.org/t/gru-cant-deal-with-self-hidden-attributeerror-tuple-object-has-no-attribute-size/17283/2", "\n", "hidden_init", "=", "_init_tenzor", "(", "self", ".", "n_layers", ",", "batch_size", ",", "self", ".", "hidden_size", ",", "device", "=", "device", ",", "init_type", "=", "self", ".", "custom_init", ")", "\n", "out", ",", "_", "=", "self", ".", "recurrent_cell", "(", "dec_input", ",", "hidden_init", ")", "\n", "\n", "# back to requested format", "\n", "# reshaping the outputs such that it can be fit into the fully connected layer", "\n", "out", "=", "out", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_size", ")", "\n", "out", "=", "self", ".", "lin", "(", "out", ")", "\n", "# back to sequence", "\n", "out", "=", "out", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "out_len", ",", "-", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks.MLP": [[43, 47], ["torch.Sequential", "torch.Sequential", "torch.Linear", "torch.ReLU", "torch.BatchNorm1d", "range", "len"], "function", ["None"], ["", "", "def", "MLP", "(", "channels", ",", "batch_norm", "=", "True", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "*", "[", "\n", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "channels", "[", "i", "-", "1", "]", ",", "channels", "[", "i", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "BatchNorm1d", "(", "channels", "[", "i", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "channels", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_tenzor": [[302, 316], ["torch.empty.to", "torch.zeros", "torch.zeros", "len", "torch.empty", "torch.empty", "torch.init.kaiming_normal_", "NotImplementedError"], "function", ["None"], ["", "", "def", "_init_tenzor", "(", "*", "shape", ",", "device", "=", "'cpu'", ",", "init_type", "=", "''", ")", ":", "\n", "    ", "\"\"\"shortcut to create & initialize tenzors on a given device.  \"\"\"", "\n", "# TODO suport other init types ", "\n", "if", "not", "init_type", "or", "len", "(", "shape", ")", "==", "1", ":", "\n", "# zeros by default", "\n", "# and in case of 1D tensor (which kaiming_normal does not support)", "\n", "        ", "new_tenzor", "=", "torch", ".", "zeros", "(", "shape", ")", "\n", "", "elif", "'kaiming_normal'", "in", "init_type", ":", "\n", "        ", "new_tenzor", "=", "torch", ".", "empty", "(", "shape", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "new_tenzor", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'{} tenzor initialization is not implemented'", ".", "format", "(", "init_type", ")", ")", "\n", "\n", "", "return", "new_tenzor", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.net_blocks._init_weights": [[318, 333], ["module.named_parameters", "NotImplementedError", "len", "torch.zeros", "torch.zeros", "torch.init.kaiming_normal_"], "function", ["None"], ["", "def", "_init_weights", "(", "module", ",", "init_type", "=", "''", ")", ":", "\n", "    ", "\"\"\"Initialize weights of provided module with requested init type\"\"\"", "\n", "if", "not", "init_type", ":", "\n", "# do not re-initialize, leave default pytorch init", "\n", "        ", "return", "\n", "", "for", "name", ",", "param", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'weight'", "in", "name", ":", "\n", "\n", "            ", "if", "'kaiming_normal'", "in", "init_type", ":", "\n", "                ", "if", "len", "(", "param", ".", "shape", ")", "==", "1", ":", "# case not supported by kaiming_normal", "\n", "                    ", "param", "=", "torch", ".", "zeros", "(", "param", ".", "shape", ",", "device", "=", "param", ".", "device", ")", "\n", "", "else", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "param", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'{} weight initialization is not implemented'", ".", "format", "(", "init_type", ")", ")", "\n", "# leave defaults for bias", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.evaluation_scripts.on_test_set.get_values_from_args": [[23, 53], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "open", "yaml.safe_load", "open", "yaml.safe_load"], "function", ["None"], ["def", "get_values_from_args", "(", ")", ":", "\n", "# https://stackoverflow.com/questions/40001892/reading-named-command-arguments", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-sh'", ",", "'--shape_config'", ",", "help", "=", "'YAML configuration file'", ",", "type", "=", "str", ",", "default", "=", "'./models/att/att.yaml'", ")", "\n", "parser", ".", "add_argument", "(", "'-p'", ",", "'--predict'", ",", "help", "=", "'if set, saves sewing pattern predictions to output folder and uploads them to the run'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "# Test set subset", "\n", "parser", ".", "add_argument", "(", "'-u'", ",", "'--unseen'", ",", "help", "=", "'if set, evaluates performance on unseen garment types, otherwise uses seen subset'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "# stitches", "\n", "parser", ".", "add_argument", "(", "'-st'", ",", "'--stitch_config'", ",", "help", "=", "'YAML configuration file'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "# evaluates only the shape model by default", "\n", "parser", ".", "add_argument", "(", "\n", "'--pred_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Path to the sewing pattern prediction that can be used for stitch evaluations. Set to skip loading, eval & prediction on Pattern Shape module'", ")", "\n", "parser", ".", "add_argument", "(", "'-corr'", ",", "'--correct_panels'", ",", "help", "=", "'if set, additionally evaluate stitch information only on the patterns with correctly predicted # of panels'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "with", "open", "(", "args", ".", "shape_config", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "shape_config", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "\n", "", "if", "args", ".", "stitch_config", ":", "\n", "        ", "with", "open", "(", "args", ".", "stitch_config", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "stitch_config", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "stitch_config", "=", "None", "\n", "\n", "", "print", "(", "f'Command line args: {args}'", ")", "\n", "\n", "return", "shape_config", ",", "stitch_config", ",", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.evaluation_scripts.noise_levels.get_values_from_args": [[22, 37], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "open", "yaml.safe_load"], "function", ["None"], ["def", "get_values_from_args", "(", ")", ":", "\n", "# https://stackoverflow.com/questions/40001892/reading-named-command-arguments", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-sh'", ",", "'--shape_config'", ",", "help", "=", "'YAML configuration file'", ",", "type", "=", "str", ",", "default", "=", "'./models/att/att.yaml'", ")", "\n", "# Test set subset", "\n", "parser", ".", "add_argument", "(", "'-u'", ",", "'--unseen'", ",", "help", "=", "'if set, evaluates performance on unseen garment types, otherwise uses seen subset'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "with", "open", "(", "args", ".", "shape_config", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "shape_config", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "\n", "", "print", "(", "f'Command line args: {args}'", ")", "\n", "\n", "return", "shape_config", ",", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.evaluation_scripts.predict_per_point_sample.get_values_from_args": [[30, 81], ["customconfig.Properties", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "argparse.ArgumentParser.parse_args", "saving_path.mkdir", "open", "yaml.safe_load", "ValueError", "pathlib.Path", "open", "yaml.safe_load", "paths_list.append", "pathlib.Path", "pathlib.Path.glob", "datetime.datetime.now().strftime", "pathlib.Path", "elem.is_file", "paths_list.append", "datetime.datetime.now", "str"], "function", ["None"], ["def", "get_values_from_args", "(", ")", ":", "\n", "    ", "\"\"\"command line arguments to get a path to geometry file with a garment or a folder with OBJ files\"\"\"", "\n", "# https://stackoverflow.com/questions/40001892/reading-named-command-arguments", "\n", "system_info", "=", "customconfig", ".", "Properties", "(", "'./system.json'", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-sh'", ",", "'--shape_config'", ",", "help", "=", "'YAML configuration file'", ",", "type", "=", "str", ",", "default", "=", "'./models/att/att.yaml'", ")", "\n", "parser", ".", "add_argument", "(", "'-st'", ",", "'--stitch_config'", ",", "help", "=", "'YAML configuration file'", ",", "type", "=", "str", ",", "default", "=", "'./models/att/stitch_model.yaml'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--file'", ",", "'-f'", ",", "help", "=", "'Path to a garment point cloud file (.txt)'", ",", "type", "=", "str", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--directory'", ",", "'-dir'", ",", "help", "=", "'Path to a directory with point cloud files (.txt) to evaluate on'", ",", "type", "=", "str", ",", "\n", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--save_tag'", ",", "'-s'", ",", "help", "=", "'Tag the output directory name with this str'", ",", "type", "=", "str", ",", "\n", "default", "=", "'per_sample'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "# load expriment configs", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "with", "open", "(", "args", ".", "shape_config", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "shape_config", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "\n", "", "if", "args", ".", "stitch_config", ":", "\n", "        ", "with", "open", "(", "args", ".", "stitch_config", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "stitch_config", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "stitch_config", "=", "None", "\n", "\n", "# turn arguments into the list of obj files", "\n", "", "paths_list", "=", "[", "]", "\n", "if", "args", ".", "file", "is", "None", "and", "args", ".", "directory", "is", "None", ":", "\n", "# default value if no arguments provided", "\n", "        ", "raise", "ValueError", "(", "'No inputs point cloud samples are provided'", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "file", "is", "not", "None", ":", "\n", "            ", "paths_list", ".", "append", "(", "Path", "(", "args", ".", "file", ")", ")", "\n", "", "if", "args", ".", "directory", "is", "not", "None", ":", "\n", "            ", "directory", "=", "Path", "(", "args", ".", "directory", ")", "\n", "for", "elem", "in", "directory", ".", "glob", "(", "'*'", ")", ":", "\n", "                ", "if", "elem", ".", "is_file", "(", ")", "and", "'.txt'", "in", "str", "(", "elem", ")", ":", "\n", "                    ", "paths_list", ".", "append", "(", "elem", ")", "\n", "\n", "", "", "", "", "saving_path", "=", "Path", "(", "system_info", "[", "'output'", "]", ")", "/", "(", "args", ".", "save_tag", "+", "'_'", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H-%M-%S'", ")", ")", "\n", "saving_path", ".", "mkdir", "(", "parents", "=", "True", ")", "\n", "\n", "return", "shape_config", ",", "stitch_config", ",", "paths_list", ",", "saving_path", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.utility_scripts.param_filter_test.isAllowed": [[10, 16], ["None"], "function", ["None"], ["def", "isAllowed", "(", "pattern", ",", "param_filter", ")", ":", "\n", "    ", "for", "param", "in", "param_filter", ":", "\n", "        ", "value", "=", "pattern", ".", "parameters", "[", "param", "]", "[", "'value'", "]", "\n", "if", "value", "<", "param_filter", "[", "param", "]", "[", "0", "]", "or", "value", ">", "param_filter", "[", "param", "]", "[", "1", "]", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.metrics.PatternStitchPrecisionRecall.__init__": [[18, 23], ["torch.Tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_stats", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_stats", "=", "data_stats", "\n", "if", "data_stats", "is", "not", "None", ":", "\n", "            ", "for", "key", "in", "self", ".", "data_stats", ":", "\n", "                ", "self", ".", "data_stats", "[", "key", "]", "=", "torch", ".", "Tensor", "(", "self", ".", "data_stats", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.metrics.PatternStitchPrecisionRecall.__call__": [[24, 79], ["range", "data.Garment3DPatternFullDataset.tags_to_stitches().to", "data.Garment3DPatternFullDataset.tags_to_stitches().to.transpose", "metrics.PatternStitchPrecisionRecall.data_stats[].to", "[].transpose", "corr_precision.append", "corr_recall.append", "len", "len", "metrics.PatternStitchPrecisionRecall.data_stats[].to", "data.Garment3DPatternFullDataset.tags_to_stitches", "data.Garment3DPatternFullDataset.tags_to_stitches().to.numel", "print", "sum", "len", "sum", "len", "all", "all", "actual.flip"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset.tags_to_stitches"], ["", "", "", "def", "__call__", "(", "\n", "self", ",", "\n", "stitch_tags", ",", "free_edge_class", ",", "\n", "gt_stitches", ",", "gt_stitches_nums", ",", "\n", "pattern_names", "=", "None", ",", "correct_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n         Evaluate on the batch of stitch tags\n        \"\"\"", "\n", "# undo stats application if provided", "\n", "if", "self", ".", "data_stats", "is", "not", "None", ":", "\n", "            ", "device", "=", "stitch_tags", ".", "device", "\n", "stitch_tags", "=", "stitch_tags", "*", "self", ".", "data_stats", "[", "'scale'", "]", ".", "to", "(", "device", ")", "+", "self", ".", "data_stats", "[", "'shift'", "]", ".", "to", "(", "device", ")", "\n", "\n", "", "tot_precision", "=", "0.", "\n", "tot_recall", "=", "0.", "\n", "corr_precision", "=", "[", "]", "\n", "corr_recall", "=", "[", "]", "\n", "for", "pattern_idx", "in", "range", "(", "stitch_tags", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "stitch_list", "=", "PatternDataset", ".", "tags_to_stitches", "(", "stitch_tags", "[", "pattern_idx", "]", ",", "free_edge_class", "[", "pattern_idx", "]", ")", ".", "to", "(", "gt_stitches", ".", "device", ")", "\n", "\n", "num_detected_stitches", "=", "stitch_list", ".", "shape", "[", "1", "]", "if", "stitch_list", ".", "numel", "(", ")", ">", "0", "else", "0", "\n", "if", "not", "num_detected_stitches", ":", "# no stitches detected -- zero recall & precision", "\n", "                ", "continue", "\n", "", "num_actual_stitches", "=", "gt_stitches_nums", "[", "pattern_idx", "]", "\n", "\n", "# compare stitches", "\n", "correct_stitches", "=", "0.", "\n", "for", "detected", "in", "stitch_list", ".", "transpose", "(", "0", ",", "1", ")", ":", "\n", "                ", "for", "actual", "in", "gt_stitches", "[", "pattern_idx", "]", "[", ":", ",", ":", "gt_stitches_nums", "[", "pattern_idx", "]", "]", ".", "transpose", "(", "0", ",", "1", ")", ":", "\n", "# order-invariant comparison of stitch sides", "\n", "                    ", "correct", "=", "(", "all", "(", "detected", "==", "actual", ")", "or", "all", "(", "detected", "==", "actual", ".", "flip", "(", "[", "0", "]", ")", ")", ")", "\n", "correct_stitches", "+=", "correct", "\n", "if", "correct", ":", "# no need to check subsequent stitches", "\n", "                        ", "break", "\n", "\n", "", "", "if", "pattern_names", "is", "not", "None", "and", "not", "correct", ":", "# never detected a match with actual stitches", "\n", "                    ", "print", "(", "'StitchPrecisionRecall::{}::Stitch {} detected wrongly'", ".", "format", "(", "pattern_names", "[", "pattern_idx", "]", ",", "detected", ")", ")", "\n", "\n", "# precision -- how many of the detected stitches are actually there", "\n", "", "", "precision", "=", "correct_stitches", "/", "num_detected_stitches", "if", "num_detected_stitches", "else", "0.", "\n", "# recall -- how many of the actual stitches were detected", "\n", "recall", "=", "correct_stitches", "/", "num_actual_stitches", "if", "num_actual_stitches", "else", "0.", "\n", "\n", "tot_precision", "+=", "precision", "\n", "tot_recall", "+=", "recall", "\n", "if", "correct_mask", "is", "not", "None", "and", "correct_mask", "[", "pattern_idx", "]", ":", "\n", "                ", "corr_precision", ".", "append", "(", "precision", ")", "\n", "corr_recall", ".", "append", "(", "recall", ")", "\n", "\n", "# average by batch", "\n", "", "", "return", "(", "\n", "tot_precision", "/", "stitch_tags", ".", "shape", "[", "0", "]", ",", "\n", "tot_recall", "/", "stitch_tags", ".", "shape", "[", "0", "]", ",", "\n", "sum", "(", "corr_precision", ")", "/", "len", "(", "corr_precision", ")", "if", "len", "(", "corr_precision", ")", "else", "None", ",", "\n", "sum", "(", "corr_recall", ")", "/", "len", "(", "corr_recall", ")", "if", "len", "(", "corr_recall", ")", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.metrics.PatternStitchPrecisionRecall.on_loader": [[81, 93], ["torch.no_grad", "model", "metrics.PatternStitchPrecisionRecall.", "len", "len"], "methods", ["None"], ["", "def", "on_loader", "(", "self", ",", "data_loader", ",", "model", ")", ":", "\n", "        ", "\"\"\"Evaluate recall&precision of stitch detection on the full data loader\"\"\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "tot_precision", "=", "tot_recall", "=", "0", "\n", "for", "batch", "in", "data_loader", ":", "\n", "                ", "predictions", "=", "model", "(", "batch", "[", "'features'", "]", ")", "\n", "batch_precision", ",", "batch_recall", "=", "self", "(", "predictions", "[", "'stitch_tags'", "]", ",", "batch", "[", "'ground_truth'", "]", "[", "'stitches'", "]", ",", "batch", "[", "'name'", "]", ")", "\n", "tot_precision", "+=", "batch_precision", "\n", "tot_recall", "+=", "batch_recall", "\n", "\n", "", "", "return", "tot_precision", "/", "len", "(", "data_loader", ")", ",", "tot_recall", "/", "len", "(", "data_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.metrics.NumbersInPanelsAccuracies.__init__": [[99, 109], ["eval_pad_vector", "metrics.NumbersInPanelsAccuracies.pad_vector.repeat", "torch.tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.eval_utils.eval_pad_vector"], ["def", "__init__", "(", "self", ",", "max_edges_in_panel", ",", "data_stats", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Requesting data stats to recognize padding correctly\n            Should be a dictionary with {'shift': <>, 'scale': <>} keys containing stats for panel outlines\n        \"\"\"", "\n", "self", ".", "data_stats", "=", "data_stats", "\n", "self", ".", "max_panel_len", "=", "max_edges_in_panel", "\n", "self", ".", "pad_vector", "=", "eval_pad_vector", "(", "data_stats", ")", "\n", "self", ".", "empty_panel_template", "=", "self", ".", "pad_vector", ".", "repeat", "(", "self", ".", "max_panel_len", ",", "1", ")", "\n", "self", ".", "panel_loop_threshold", "=", "torch", ".", "tensor", "(", "[", "3", ",", "3", "]", ")", "/", "torch", ".", "Tensor", "(", "data_stats", "[", "'scale'", "]", ")", "[", ":", "2", "]", "# 3 cm per coordinate is a tolerable error", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.metrics.NumbersInPanelsAccuracies.__call__": [[110, 182], ["torch.zeros", "range", "metrics.NumbersInPanelsAccuracies.empty_panel_template.to", "metrics.NumbersInPanelsAccuracies.panel_loop_threshold.to", "range", "torch.isclose", "edge_coords.sum", "print", "torch.zeros.sum", "print", "torch.all", "torch.abs"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "predicted_outlines", ",", "gt_num_edges", ",", "gt_panel_nums", ",", "pattern_names", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n         Evaluate on the batch of panel outlines predictoins \n        \"\"\"", "\n", "batch_size", "=", "predicted_outlines", ".", "shape", "[", "0", "]", "\n", "max_num_panels", "=", "predicted_outlines", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "empty_panel_template", ".", "device", "!=", "predicted_outlines", ".", "device", ":", "\n", "            ", "self", ".", "empty_panel_template", "=", "self", ".", "empty_panel_template", ".", "to", "(", "predicted_outlines", ".", "device", ")", "\n", "self", ".", "panel_loop_threshold", "=", "self", ".", "panel_loop_threshold", ".", "to", "(", "predicted_outlines", ".", "device", ")", "\n", "\n", "", "correct_num_panels", "=", "0.", "\n", "num_edges_accuracies", "=", "0.", "\n", "\n", "correct_pattern_mask", "=", "torch", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "num_edges_in_correct", "=", "0.", "\n", "\n", "for", "pattern_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "# assuming all empty panels are at the end of the pattern, if any", "\n", "            ", "predicted_num_panels", "=", "0", "\n", "correct_num_edges", "=", "0.", "\n", "for", "panel_id", "in", "range", "(", "max_num_panels", ")", ":", "\n", "                ", "predicted_bool_matrix", "=", "torch", ".", "isclose", "(", "\n", "predicted_outlines", "[", "pattern_idx", "]", "[", "panel_id", "]", ",", "\n", "self", ".", "empty_panel_template", ",", "atol", "=", "0.07", ")", "# this value is adjusted to have similar effect to what is used in core.py", "\n", "\n", "# check is the num of edges matches", "\n", "predicted_num_edges", "=", "(", "~", "torch", ".", "all", "(", "predicted_bool_matrix", ",", "axis", "=", "1", ")", ")", ".", "sum", "(", ")", "# only non-padded rows", "\n", "\n", "# check if edge loop closes", "\n", "edge_coords", "=", "predicted_outlines", "[", "pattern_idx", "]", "[", "panel_id", "]", "[", ":", ",", ":", "2", "]", "\n", "loop_distance", "=", "edge_coords", ".", "sum", "(", "dim", "=", "0", ")", "# empty edges are about zero anyway", "\n", "if", "(", "torch", ".", "abs", "(", "loop_distance", ")", ">", "self", ".", "panel_loop_threshold", ")", ".", "any", "(", ")", ":", "\n", "# if the edge loop doesn't return to origin, ", "\n", "# it basically means the need to create extra edge to force the closing", "\n", "\n", "                    ", "predicted_num_edges", "+=", "1", "\n", "\n", "", "if", "predicted_num_edges", "<", "3", ":", "\n", "# 0, 1, 2 edges are not enough to form a panel", "\n", "#  -> assuming this is an empty panel & moving on", "\n", "                    ", "continue", "\n", "# othervise, we have a real panel", "\n", "", "predicted_num_panels", "+=", "1", "\n", "\n", "panel_correct", "=", "(", "predicted_num_edges", "==", "gt_num_edges", "[", "pattern_idx", "*", "max_num_panels", "+", "panel_id", "]", ")", "\n", "correct_num_edges", "+=", "panel_correct", "\n", "\n", "if", "pattern_names", "is", "not", "None", "and", "not", "panel_correct", ":", "# pattern len predicted wrongly", "\n", "                    ", "print", "(", "'NumbersInPanelsAccuracies::{}::panel {}:: {} edges instead of {}'", ".", "format", "(", "\n", "pattern_names", "[", "pattern_idx", "]", ",", "panel_id", ",", "\n", "predicted_num_edges", ",", "gt_num_edges", "[", "pattern_idx", "*", "max_num_panels", "+", "panel_id", "]", ")", ")", "\n", "\n", "# update num panels stats", "\n", "", "", "correct_len", "=", "(", "predicted_num_panels", "==", "gt_panel_nums", "[", "pattern_idx", "]", ")", "\n", "correct_pattern_mask", "[", "pattern_idx", "]", "=", "correct_len", "\n", "correct_num_panels", "+=", "correct_len", "\n", "\n", "if", "pattern_names", "is", "not", "None", "and", "not", "correct_len", ":", "# pattern len predicted wrongly", "\n", "                ", "print", "(", "'NumbersInPanelsAccuracies::{}::{} panels instead of {}'", ".", "format", "(", "\n", "pattern_names", "[", "pattern_idx", "]", ",", "predicted_num_panels", ",", "gt_panel_nums", "[", "pattern_idx", "]", ")", ")", "\n", "\n", "# update num edges stats (averaged per panel)", "\n", "", "num_edges_accuracies", "+=", "correct_num_edges", "/", "gt_panel_nums", "[", "pattern_idx", "]", "\n", "if", "correct_len", ":", "\n", "                ", "num_edges_in_correct", "+=", "correct_num_edges", "/", "gt_panel_nums", "[", "pattern_idx", "]", "\n", "\n", "# average by batch", "\n", "", "", "return", "(", "\n", "correct_num_panels", "/", "batch_size", ",", "\n", "num_edges_accuracies", "/", "batch_size", ",", "\n", "correct_pattern_mask", ",", "# which patterns in a batch have correct number of panels? ", "\n", "num_edges_in_correct", "/", "correct_pattern_mask", ".", "sum", "(", ")", "# edges for correct patterns", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.metrics.PanelVertsL2.__init__": [[191, 202], ["torch.zeros", "torch.tensor", "torch.tensor", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_edges_in_panel", ",", "data_stats", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"Info for evaluating padding vector if data statistical info is applied to it.\n            * if standardization/normalization transform is applied to padding, 'data_stats' should be provided\n                'data_stats' format: {'shift': <torch.tenzor>, 'scale': <torch.tensor>} \n        \"\"\"", "\n", "self", ".", "data_stats", "=", "{", "\n", "'shift'", ":", "torch", ".", "tensor", "(", "data_stats", "[", "'shift'", "]", ")", ",", "\n", "'scale'", ":", "torch", ".", "tensor", "(", "data_stats", "[", "'scale'", "]", ")", ",", "\n", "}", "\n", "self", ".", "max_panel_len", "=", "max_edges_in_panel", "\n", "self", ".", "empty_panel_template", "=", "torch", ".", "zeros", "(", "(", "max_edges_in_panel", ",", "len", "(", "self", ".", "data_stats", "[", "'shift'", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.metrics.PanelVertsL2.__call__": [[203, 258], ["predicted_outlines.view.view.view", "gt_outlines.view.view.view", "range", "metrics.PanelVertsL2.empty_panel_template.to", "torch.repeat_interleave", "len", "panel_errors.append", "len", "metrics.PanelVertsL2.data_stats[].to", "torch.mean", "correct_panel_errors.append", "torch.sqrt", "sum", "len", "sum", "len", "sum", "len", "metrics.PanelVertsL2._to_verts", "metrics.PanelVertsL2._to_verts"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.metrics.PanelVertsL2._to_verts", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.metrics.PanelVertsL2._to_verts"], ["", "def", "__call__", "(", "self", ",", "predicted_outlines", ",", "gt_outlines", ",", "gt_num_edges", ",", "correct_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Evaluate on the batch of panel outlines predictoins \n            * per_panel_leading_edges -- specifies where is the start of the edge loop for GT outlines \n                that is well-matched to the predicted outlines. If not given, the default GT orientation is used\n        \"\"\"", "\n", "num_panels", "=", "predicted_outlines", ".", "shape", "[", "1", "]", "\n", "\n", "# flatten input into list of panels", "\n", "predicted_outlines", "=", "predicted_outlines", ".", "view", "(", "-", "1", ",", "predicted_outlines", ".", "shape", "[", "-", "2", "]", ",", "predicted_outlines", ".", "shape", "[", "-", "1", "]", ")", "\n", "gt_outlines", "=", "gt_outlines", ".", "view", "(", "-", "1", ",", "gt_outlines", ".", "shape", "[", "-", "2", "]", ",", "gt_outlines", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# devices", "\n", "if", "self", ".", "empty_panel_template", ".", "device", "!=", "predicted_outlines", ".", "device", ":", "\n", "            ", "self", ".", "empty_panel_template", "=", "self", ".", "empty_panel_template", ".", "to", "(", "predicted_outlines", ".", "device", ")", "\n", "", "for", "key", "in", "self", ".", "data_stats", ":", "\n", "            ", "if", "self", ".", "data_stats", "[", "key", "]", ".", "device", "!=", "predicted_outlines", ".", "device", ":", "\n", "                ", "self", ".", "data_stats", "[", "key", "]", "=", "self", ".", "data_stats", "[", "key", "]", ".", "to", "(", "predicted_outlines", ".", "device", ")", "\n", "\n", "# un-std", "\n", "", "", "predicted_outlines", "=", "predicted_outlines", "*", "self", ".", "data_stats", "[", "'scale'", "]", "+", "self", ".", "data_stats", "[", "'shift'", "]", "\n", "gt_outlines", "=", "gt_outlines", "*", "self", ".", "data_stats", "[", "'scale'", "]", "+", "self", ".", "data_stats", "[", "'shift'", "]", "\n", "\n", "# per-panel evaluation", "\n", "panel_errors", "=", "[", "]", "\n", "correct_panel_errors", "=", "[", "]", "\n", "# panel_mask = correct_mask.t().repeat(num_panels) if correct_mask is not None else None", "\n", "panel_mask", "=", "torch", ".", "repeat_interleave", "(", "correct_mask", ",", "num_panels", ")", "if", "correct_mask", "is", "not", "None", "else", "None", "\n", "\n", "# panel_mask = panel_mask.view(-1) if correct_mask is not None else None", "\n", "\n", "for", "panel_idx", "in", "range", "(", "len", "(", "predicted_outlines", ")", ")", ":", "\n", "            ", "prediced_panel", "=", "predicted_outlines", "[", "panel_idx", "]", "\n", "gt_panel", "=", "gt_outlines", "[", "panel_idx", "]", "\n", "\n", "# unpad both panels using correct gt info -- for simplicity of comparison", "\n", "num_edges", "=", "gt_num_edges", "[", "panel_idx", "]", "\n", "if", "num_edges", "<", "3", ":", "# empty panel -- skip comparison", "\n", "                ", "continue", "\n", "", "prediced_panel", "=", "prediced_panel", "[", ":", "num_edges", ",", ":", "]", "\n", "gt_panel", "=", "gt_panel", "[", ":", "num_edges", ",", ":", "]", "\n", "\n", "# average squred error per vertex (not per coordinate!!) hence internal sum", "\n", "panel_errors", ".", "append", "(", "\n", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "(", "(", "self", ".", "_to_verts", "(", "gt_panel", ")", "-", "self", ".", "_to_verts", "(", "prediced_panel", ")", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", ")", "\n", ")", "\n", "\n", "if", "panel_mask", "is", "not", "None", "and", "panel_mask", "[", "panel_idx", "]", ":", "\n", "                ", "correct_panel_errors", ".", "append", "(", "panel_errors", "[", "-", "1", "]", ")", "\n", "\n", "# mean of errors per panel", "\n", "", "", "if", "panel_mask", "is", "not", "None", "and", "len", "(", "correct_panel_errors", ")", ":", "\n", "            ", "return", "sum", "(", "panel_errors", ")", "/", "len", "(", "panel_errors", ")", ",", "sum", "(", "correct_panel_errors", ")", "/", "len", "(", "correct_panel_errors", ")", "\n", "", "else", ":", "\n", "            ", "return", "sum", "(", "panel_errors", ")", "/", "len", "(", "panel_errors", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.metrics.PanelVertsL2._to_verts": [[259, 282], ["torch.stack", "torch.tensor().to", "torch.tensor().to", "vert_list.append", "vert_list.append", "torch.mean", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "", "def", "_to_verts", "(", "self", ",", "panel_edges", ")", ":", "\n", "        ", "\"\"\"Convert normalized panel edges into the vertex representation\"\"\"", "\n", "\n", "vert_list", "=", "[", "torch", ".", "tensor", "(", "[", "0", ",", "0", "]", ")", ".", "to", "(", "panel_edges", ".", "device", ")", "]", "# always starts at zero", "\n", "# edge: first two elements are the 2D vector coordinates, next two elements are curvature coordinates", "\n", "for", "edge", "in", "panel_edges", ":", "\n", "            ", "next_vertex", "=", "vert_list", "[", "-", "1", "]", "+", "edge", "[", ":", "2", "]", "\n", "edge_perp", "=", "torch", ".", "tensor", "(", "[", "-", "edge", "[", "1", "]", ",", "edge", "[", "0", "]", "]", ")", ".", "to", "(", "panel_edges", ".", "device", ")", "\n", "\n", "# NOTE: on non-curvy edges, the curvature vertex in panel space will be on the previous vertex", "\n", "#       it might result in some error amplification, but we could not find optimal yet simple solution", "\n", "next_curvature", "=", "vert_list", "[", "-", "1", "]", "+", "edge", "[", "2", "]", "*", "edge", "[", ":", "2", "]", "# X curvature coordinate", "\n", "next_curvature", "=", "next_curvature", "+", "edge", "[", "3", "]", "*", "edge_perp", "# Y curvature coordinate", "\n", "\n", "vert_list", ".", "append", "(", "next_curvature", ")", "\n", "vert_list", ".", "append", "(", "next_vertex", ")", "\n", "\n", "", "vertices", "=", "torch", ".", "stack", "(", "vert_list", ")", "\n", "\n", "# align with the center", "\n", "vertices", "=", "vertices", "-", "torch", ".", "mean", "(", "vertices", ",", "axis", "=", "0", ")", "# shift to average coordinate", "\n", "\n", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.metrics.UniversalL2.__init__": [[288, 294], ["torch.tensor", "torch.tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_stats", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"Info for un-doing the shift&scale of the data \n        \"\"\"", "\n", "self", ".", "data_stats", "=", "{", "\n", "'shift'", ":", "torch", ".", "tensor", "(", "data_stats", "[", "'shift'", "]", ")", ",", "\n", "'scale'", ":", "torch", ".", "tensor", "(", "data_stats", "[", "'scale'", "]", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.metrics.UniversalL2.__call__": [[296, 326], ["predicted.view.view.view", "gt.view.view.view", "torch.sqrt", "torch.repeat_interleave", "len", "torch.mean", "torch.mean", "metrics.UniversalL2.data_stats[].to", "torch.sqrt"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "predicted", ",", "gt", ",", "correct_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n         Evaluate on the batch of predictions \n         Used for rotation/translation evaluations which have input shape\n         (#batch, #panels, #feature)\n        \"\"\"", "\n", "num_panels", "=", "predicted", ".", "shape", "[", "1", "]", "\n", "correct_mask", "=", "torch", ".", "repeat_interleave", "(", "correct_mask", ",", "num_panels", ")", "if", "correct_mask", "is", "not", "None", "else", "None", "\n", "\n", "# flatten input ", "\n", "predicted", "=", "predicted", ".", "view", "(", "-", "1", ",", "predicted", ".", "shape", "[", "-", "1", "]", ")", "\n", "gt", "=", "gt", ".", "view", "(", "-", "1", ",", "gt", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# devices", "\n", "for", "key", "in", "self", ".", "data_stats", ":", "\n", "            ", "if", "self", ".", "data_stats", "[", "key", "]", ".", "device", "!=", "predicted", ".", "device", ":", "\n", "                ", "self", ".", "data_stats", "[", "key", "]", "=", "self", ".", "data_stats", "[", "key", "]", ".", "to", "(", "predicted", ".", "device", ")", "\n", "\n", "# un-std", "\n", "", "", "predicted", "=", "predicted", "*", "self", ".", "data_stats", "[", "'scale'", "]", "+", "self", ".", "data_stats", "[", "'shift'", "]", "\n", "gt", "=", "gt", "*", "self", ".", "data_stats", "[", "'scale'", "]", "+", "self", ".", "data_stats", "[", "'shift'", "]", "\n", "\n", "L2_norms", "=", "torch", ".", "sqrt", "(", "(", "(", "gt", "-", "predicted", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "\n", "if", "correct_mask", "is", "not", "None", "and", "len", "(", "gt", "[", "correct_mask", "]", ")", ":", "\n", "            ", "correct_L2_norms", "=", "torch", ".", "mean", "(", "torch", ".", "sqrt", "(", "(", "(", "gt", "[", "correct_mask", "]", "-", "predicted", "[", "correct_mask", "]", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "correct_L2_norms", "=", "None", "\n", "\n", "", "return", "torch", ".", "mean", "(", "L2_norms", ")", ",", "correct_L2_norms", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedLoss.__init__": [[14, 37], ["composed_loss.ComposedLoss.config.update", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_config", ",", "in_config", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"\n            Initialize loss components\n            Accepts (in in_config):\n            * Requested list of components\n            * Additional configurations for losses (e.g. edge-origin agnostic evaluation)\n            * data_stats -- for correct definition of losses\n        \"\"\"", "\n", "self", ".", "config", "=", "{", "# defults", "\n", "'loss_components'", ":", "[", "]", ",", "\n", "'quality_components'", ":", "[", "]", ",", "\n", "}", "\n", "self", ".", "config", ".", "update", "(", "in_config", ")", "# override with requested settings", "\n", "\n", "self", ".", "with_quality_eval", "=", "True", "# quality evaluation switch -- may allow to speed up the loss evaluation if False", "\n", "self", ".", "training", "=", "False", "# training\\evaluation state", "\n", "\n", "# Convenience properties", "\n", "self", ".", "l_components", "=", "self", ".", "config", "[", "'loss_components'", "]", "\n", "self", ".", "q_components", "=", "self", ".", "config", "[", "'quality_components'", "]", "\n", "\n", "if", "'edge_pair_class'", "in", "self", ".", "l_components", ":", "\n", "            ", "self", ".", "bce_logits_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "# binary classification loss", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedLoss.__call__": [[39, 67], ["ground_truth.to.to.to", "composed_loss.ComposedLoss._main_losses", "loss_dict.update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "composed_loss.ComposedLoss._main_quality_metrics", "loss_dict.update"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._main_losses", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._main_quality_metrics"], ["", "", "def", "__call__", "(", "self", ",", "preds", ",", "ground_truth", ",", "names", "=", "None", ",", "epoch", "=", "1000", ")", ":", "\n", "        ", "\"\"\"Evalute loss when predicting patterns.\n            * Predictions are expected to follow the default GT structure, \n                but don't have to have all components -- as long as provided prediction is sufficient for\n                evaluation of requested losses\n            * default epoch is some large value to trigger stitch evaluation\n            * Function returns True in third parameter at the moment of the loss stucture update\n        \"\"\"", "\n", "self", ".", "device", "=", "preds", ".", "device", "\n", "loss_dict", "=", "{", "}", "\n", "full_loss", "=", "0.", "\n", "\n", "# match devices with prediction", "\n", "ground_truth", "=", "ground_truth", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# ---- Losses ------", "\n", "main_losses", ",", "main_dict", "=", "self", ".", "_main_losses", "(", "preds", ",", "ground_truth", ",", "None", ",", "epoch", ")", "\n", "full_loss", "+=", "main_losses", "\n", "loss_dict", ".", "update", "(", "main_dict", ")", "\n", "\n", "# ---- Quality metrics  ----", "\n", "if", "self", ".", "with_quality_eval", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "quality_breakdown", "=", "self", ".", "_main_quality_metrics", "(", "preds", ",", "ground_truth", ",", "None", ",", "names", ")", "\n", "loss_dict", ".", "update", "(", "quality_breakdown", ")", "\n", "\n", "# final loss; breakdown for analysis; indication if the loss structure has changed on this evaluation", "\n", "", "", "return", "full_loss", ",", "loss_dict", ",", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedLoss.eval": [[69, 72], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\" Loss to evaluation mode \"\"\"", "\n", "self", ".", "training", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedLoss.train": [[73, 75], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "self", ".", "training", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedLoss._main_losses": [[76, 91], ["composed_loss.ComposedLoss.bce_logits_loss", "loss_dict.update", "preds.view", "ground_truth.view().type().to", "ground_truth.view().type", "ground_truth.view"], "methods", ["None"], ["", "def", "_main_losses", "(", "self", ",", "preds", ",", "ground_truth", ",", "gt_num_edges", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n            Main loss components. Evaluated in the same way regardless of the training stage\n        \"\"\"", "\n", "full_loss", "=", "0.", "\n", "loss_dict", "=", "{", "}", "\n", "\n", "if", "'edge_pair_class'", "in", "self", ".", "l_components", ":", "\n", "# flatten for correct computation", "\n", "            ", "pair_loss", "=", "self", ".", "bce_logits_loss", "(", "\n", "preds", ".", "view", "(", "-", "1", ")", ",", "ground_truth", ".", "view", "(", "-", "1", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "loss_dict", ".", "update", "(", "edge_pair_class_loss", "=", "pair_loss", ")", "\n", "full_loss", "+=", "pair_loss", "\n", "\n", "", "return", "full_loss", ",", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedLoss._main_quality_metrics": [[92, 111], ["torch.round", "torch.round", "torch.round", "torch.round", "ground_truth.to", "loss_dict.update", "composed_loss.ComposedLoss._prec_recall", "loss_dict.update", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ground_truth.to.numel"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedLoss._prec_recall"], ["", "def", "_main_quality_metrics", "(", "self", ",", "preds", ",", "ground_truth", ",", "gt_num_edges", ",", "names", ")", ":", "\n", "        ", "\"\"\"\n            Evaluate quality components -- these are evaluated in the same way regardless of the training stage\n        \"\"\"", "\n", "loss_dict", "=", "{", "}", "\n", "\n", "if", "'edge_pair_class'", "in", "self", ".", "q_components", "or", "'edge_pair_stitch_recall'", "in", "self", ".", "q_components", ":", "\n", "            ", "edge_pair_class", "=", "torch", ".", "round", "(", "torch", ".", "sigmoid", "(", "preds", ")", ")", "\n", "gt_mask", "=", "ground_truth", ".", "to", "(", "preds", ".", "device", ")", "\n", "\n", "", "if", "'edge_pair_class'", "in", "self", ".", "q_components", ":", "\n", "            ", "acc", "=", "(", "edge_pair_class", "==", "gt_mask", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "gt_mask", ".", "numel", "(", ")", "\n", "loss_dict", ".", "update", "(", "edge_pair_class_acc", "=", "acc", ")", "\n", "\n", "", "if", "'edge_pair_stitch_recall'", "in", "self", ".", "q_components", ":", "\n", "            ", "prec", ",", "rec", "=", "self", ".", "_prec_recall", "(", "edge_pair_class", ",", "gt_mask", ",", "target_label", "=", "1", ")", "\n", "loss_dict", ".", "update", "(", "stitch_precision", "=", "prec", ",", "stitch_recall", "=", "rec", ")", "\n", "\n", "", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedLoss._prec_recall": [[112, 127], ["torch.count_nonzero().float", "torch.count_nonzero().float", "torch.count_nonzero().float", "torch.count_nonzero().float", "torch.count_nonzero().float", "torch.count_nonzero().float", "torch.count_nonzero().float", "torch.count_nonzero().float", "len", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "torch.count_nonzero", "len"], "methods", ["None"], ["", "def", "_prec_recall", "(", "self", ",", "preds", ",", "ground_truth", ",", "target_label", ")", ":", "\n", "        ", "\"\"\" Evaluate precision/recall for given label in predictions \"\"\"", "\n", "\n", "# correctly labeled as target label", "\n", "target_label_ids", "=", "(", "ground_truth", "==", "target_label", ")", ".", "nonzero", "(", "as_tuple", "=", "True", ")", "\n", "correct_count", "=", "torch", ".", "count_nonzero", "(", "preds", "[", "target_label_ids", "]", "==", "target_label", ")", ".", "float", "(", ")", "\n", "\n", "# total number of labeled as target label", "\n", "pred_as_target_count", "=", "torch", ".", "count_nonzero", "(", "preds", "==", "target_label", ")", ".", "float", "(", ")", "\n", "\n", "# careful with division by zero", "\n", "precision", "=", "correct_count", "/", "pred_as_target_count", "if", "pred_as_target_count", "else", "0", "\n", "recall", "=", "correct_count", "/", "len", "(", "target_label_ids", "[", "0", "]", ")", "if", "len", "(", "target_label_ids", "[", "0", "]", ")", "else", "0", "\n", "\n", "return", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.__init__": [[134, 220], ["composed_loss.ComposedPatternLoss.config.update", "torch.MSELoss", "torch.MSELoss", "PanelLoopLoss", "PatternStitchLoss", "torch.MSELoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "entmax.SparsemaxLoss", "PanelVertsL2", "NumbersInPanelsAccuracies", "UniversalL2", "UniversalL2", "PatternStitchPrecisionRecall"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_config", ",", "in_config", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"\n            Initialize loss components\n            Accepts (in in_config):\n            * Requested list of components\n            * Additional configurations for losses (e.g. edge-origin agnostic evaluation)\n            * data_stats -- for correct definition of losses\n        \"\"\"", "\n", "self", ".", "config", "=", "{", "# defults", "\n", "'loss_components'", ":", "[", "'shape'", "]", ",", "# 'loop',  ", "\n", "'quality_components'", ":", "[", "]", ",", "# 'loop',  ", "\n", "'loop_loss_weight'", ":", "1.", ",", "\n", "'segm_loss_weight'", ":", "0.05", ",", "\n", "'stitch_tags_margin'", ":", "0.3", ",", "\n", "'epoch_with_stitches'", ":", "40", ",", "\n", "'stitch_supervised_weight'", ":", "0.1", ",", "# only used when explicit stitches are enabled", "\n", "'stitch_hardnet_version'", ":", "False", ",", "\n", "\n", "'panel_origin_invariant_loss'", ":", "True", ",", "\n", "'panel_order_inariant_loss'", ":", "True", ",", "\n", "'order_by'", ":", "'placement'", ",", "\n", "'epoch_with_order_matching'", ":", "0", ",", "\n", "}", "\n", "self", ".", "config", ".", "update", "(", "in_config", ")", "# override with requested settings", "\n", "\n", "self", ".", "with_quality_eval", "=", "True", "# quality evaluation switch -- may allow to speed up the loss evaluation if False", "\n", "self", ".", "training", "=", "False", "# training\\evaluation state", "\n", "self", ".", "debug_prints", "=", "False", "\n", "\n", "# Convenience properties", "\n", "self", ".", "l_components", "=", "self", ".", "config", "[", "'loss_components'", "]", "\n", "self", ".", "q_components", "=", "self", ".", "config", "[", "'quality_components'", "]", "\n", "\n", "self", ".", "max_panel_len", "=", "data_config", "[", "'max_panel_len'", "]", "\n", "self", ".", "max_pattern_size", "=", "data_config", "[", "'max_pattern_len'", "]", "\n", "\n", "data_stats", "=", "data_config", "[", "'standardize'", "]", "\n", "self", ".", "gt_outline_stats", "=", "{", "\n", "'shift'", ":", "data_stats", "[", "'gt_shift'", "]", "[", "'outlines'", "]", ",", "\n", "'scale'", ":", "data_stats", "[", "'gt_scale'", "]", "[", "'outlines'", "]", "\n", "}", "\n", "\n", "# store moving-around-clusters info", "\n", "self", ".", "cluster_resolution_mapping", "=", "{", "}", "\n", "\n", "#  ----- Defining loss objects --------", "\n", "# NOTE I have to make a lot of 'ifs' as all losses have different function signatures", "\n", "# So, I couldn't come up with more consize defitions", "\n", "\n", "if", "'shape'", "in", "self", ".", "l_components", "or", "'rotation'", "in", "self", ".", "l_components", "or", "'translation'", "in", "self", ".", "l_components", ":", "\n", "            ", "self", ".", "regression_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "if", "'loop'", "in", "self", ".", "l_components", ":", "\n", "            ", "self", ".", "loop_loss", "=", "PanelLoopLoss", "(", "self", ".", "max_panel_len", ",", "data_stats", "=", "self", ".", "gt_outline_stats", ")", "\n", "", "if", "'stitch'", "in", "self", ".", "l_components", ":", "\n", "            ", "self", ".", "stitch_loss", "=", "PatternStitchLoss", "(", "\n", "self", ".", "config", "[", "'stitch_tags_margin'", "]", ",", "use_hardnet", "=", "self", ".", "config", "[", "'stitch_hardnet_version'", "]", ")", "\n", "", "if", "'stitch_supervised'", "in", "self", ".", "l_components", ":", "\n", "            ", "self", ".", "stitch_loss_supervised", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "if", "'free_class'", "in", "self", ".", "l_components", ":", "\n", "            ", "self", ".", "bce_logits_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "# binary classification loss", "\n", "", "if", "'segmentation'", "in", "self", ".", "l_components", ":", "\n", "# Segmenation output is Sparsemax scores (not SoftMax), hence using the appropriate loss", "\n", "            ", "self", ".", "segmentation", "=", "SparsemaxLoss", "(", ")", "\n", "\n", "# -------- quality metrics ------", "\n", "", "if", "'shape'", "in", "self", ".", "q_components", ":", "\n", "            ", "self", ".", "pattern_shape_quality", "=", "PanelVertsL2", "(", "self", ".", "max_panel_len", ",", "data_stats", "=", "self", ".", "gt_outline_stats", ")", "\n", "", "if", "'discrete'", "in", "self", ".", "q_components", ":", "\n", "            ", "self", ".", "pattern_nums_quality", "=", "NumbersInPanelsAccuracies", "(", "\n", "self", ".", "max_panel_len", ",", "data_stats", "=", "self", ".", "gt_outline_stats", ")", "\n", "", "if", "'rotation'", "in", "self", ".", "q_components", ":", "\n", "            ", "self", ".", "rotation_quality", "=", "UniversalL2", "(", "data_stats", "=", "{", "\n", "'shift'", ":", "data_stats", "[", "'gt_shift'", "]", "[", "'rotations'", "]", ",", "\n", "'scale'", ":", "data_stats", "[", "'gt_scale'", "]", "[", "'rotations'", "]", "}", "\n", ")", "\n", "", "if", "'translation'", "in", "self", ".", "q_components", ":", "\n", "            ", "self", ".", "translation_quality", "=", "UniversalL2", "(", "data_stats", "=", "{", "\n", "'shift'", ":", "data_stats", "[", "'gt_shift'", "]", "[", "'translations'", "]", ",", "\n", "'scale'", ":", "data_stats", "[", "'gt_scale'", "]", "[", "'translations'", "]", "}", "\n", ")", "\n", "", "if", "'stitch'", "in", "self", ".", "q_components", ":", "\n", "            ", "self", ".", "stitch_quality", "=", "PatternStitchPrecisionRecall", "(", "\n", "data_stats", "=", "{", "\n", "'shift'", ":", "data_stats", "[", "'gt_shift'", "]", "[", "'stitch_tags'", "]", ",", "\n", "'scale'", ":", "data_stats", "[", "'gt_scale'", "]", "[", "'stitch_tags'", "]", "\n", "}", "if", "data_config", "[", "'explicit_stitch_tags'", "]", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.__call__": [[222, 285], ["gt_rotated[].int().view", "composed_loss.ComposedPatternLoss._main_losses", "loss_dict.update", "ground_truth[].to", "composed_loss.ComposedPatternLoss._gt_order_match", "composed_loss.ComposedPatternLoss._rotate_gt", "composed_loss.ComposedPatternLoss._stitch_losses", "loss_dict.update", "NotImplementedError", "gt_rotated[].int", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "composed_loss.ComposedPatternLoss._main_quality_metrics", "loss_dict.update", "any", "composed_loss.ComposedPatternLoss._stitch_quality_metrics", "loss_dict.update"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._main_losses", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._gt_order_match", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._rotate_gt", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._stitch_losses", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._main_quality_metrics", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._stitch_quality_metrics"], ["", "", "def", "__call__", "(", "self", ",", "preds", ",", "ground_truth", ",", "names", "=", "None", ",", "epoch", "=", "1000", ")", ":", "\n", "        ", "\"\"\"Evalute loss when predicting patterns.\n            * Predictions are expected to follow the default GT structure, \n                but don't have to have all components -- as long as provided prediction is sufficient for\n                evaluation of requested losses\n            * default epoch is some large value to trigger stitch evaluation\n            * Function returns True in third parameter at the moment of the loss stucture update\n        \"\"\"", "\n", "self", ".", "device", "=", "preds", "[", "'outlines'", "]", ".", "device", "\n", "self", ".", "epoch", "=", "epoch", "\n", "loss_dict", "=", "{", "}", "\n", "full_loss", "=", "0.", "\n", "\n", "# match devices with prediction", "\n", "for", "key", "in", "ground_truth", ":", "\n", "            ", "ground_truth", "[", "key", "]", "=", "ground_truth", "[", "key", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# ------ GT pre-processing --------", "\n", "", "if", "self", ".", "config", "[", "'panel_order_inariant_loss'", "]", ":", "# match panel order", "\n", "# NOTE: Not supported for ", "\n", "            ", "if", "'segmentation'", "in", "self", ".", "l_components", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'Order matching not supported for training with segmentation losses'", ")", "\n", "", "gt_rotated", "=", "self", ".", "_gt_order_match", "(", "preds", ",", "ground_truth", ")", "\n", "", "else", ":", "# keep original", "\n", "            ", "gt_rotated", "=", "ground_truth", "\n", "\n", "", "gt_num_edges", "=", "gt_rotated", "[", "'num_edges'", "]", ".", "int", "(", ")", ".", "view", "(", "-", "1", ")", "# flatten", "\n", "\n", "if", "self", ".", "config", "[", "'panel_origin_invariant_loss'", "]", ":", "# for origin-agnistic loss evaluation", "\n", "            ", "gt_rotated", "=", "self", ".", "_rotate_gt", "(", "preds", ",", "gt_rotated", ",", "gt_num_edges", ",", "epoch", ")", "\n", "\n", "# ---- Losses ------", "\n", "", "main_losses", ",", "main_dict", "=", "self", ".", "_main_losses", "(", "preds", ",", "gt_rotated", ",", "gt_num_edges", ")", "\n", "full_loss", "+=", "main_losses", "\n", "loss_dict", ".", "update", "(", "main_dict", ")", "\n", "\n", "# stitch losses -- conditioned on the current process in training", "\n", "if", "epoch", ">=", "self", ".", "config", "[", "'epoch_with_stitches'", "]", "and", "(", "\n", "'stitch'", "in", "self", ".", "l_components", "\n", "or", "'stitch_supervised'", "in", "self", ".", "l_components", "\n", "or", "'free_class'", "in", "self", ".", "l_components", ")", ":", "\n", "            ", "losses", ",", "stitch_loss_dict", "=", "self", ".", "_stitch_losses", "(", "preds", ",", "gt_rotated", ",", "gt_num_edges", ")", "\n", "full_loss", "+=", "losses", "\n", "loss_dict", ".", "update", "(", "stitch_loss_dict", ")", "\n", "\n", "# ---- Quality metrics  ----", "\n", "", "if", "self", ".", "with_quality_eval", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "quality_breakdown", ",", "corr_mask", "=", "self", ".", "_main_quality_metrics", "(", "preds", ",", "gt_rotated", ",", "gt_num_edges", ",", "names", ")", "\n", "loss_dict", ".", "update", "(", "quality_breakdown", ")", "\n", "\n", "# stitches quality", "\n", "if", "epoch", ">=", "self", ".", "config", "[", "'epoch_with_stitches'", "]", ":", "\n", "                    ", "quality_breakdown", "=", "self", ".", "_stitch_quality_metrics", "(", "\n", "preds", ",", "gt_rotated", ",", "gt_num_edges", ",", "names", ",", "corr_mask", ")", "\n", "loss_dict", ".", "update", "(", "quality_breakdown", ")", "\n", "\n", "", "", "", "loss_update_ind", "=", "(", "\n", "epoch", "==", "self", ".", "config", "[", "'epoch_with_stitches'", "]", "and", "any", "(", "(", "el", "in", "self", ".", "l_components", "for", "el", "in", "[", "'stitch'", ",", "'stitch_supervised'", ",", "'free_class'", "]", ")", ")", "\n", "or", "epoch", "==", "self", ".", "config", "[", "'epoch_with_order_matching'", "]", "and", "self", ".", "config", "[", "'panel_order_inariant_loss'", "]", ")", "\n", "\n", "# final loss; breakdown for analysis; indication if the loss structure has changed on this evaluation", "\n", "return", "full_loss", ",", "loss_dict", ",", "loss_update_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.eval": [[286, 289], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\" Loss to evaluation mode \"\"\"", "\n", "self", ".", "training", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.train": [[290, 292], ["None"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "self", ".", "training", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._main_losses": [[294, 335], ["composed_loss.ComposedPatternLoss.regression_loss", "loss_dict.update", "composed_loss.ComposedPatternLoss.loop_loss", "loss_dict.update", "composed_loss.ComposedPatternLoss.regression_loss", "loss_dict.update", "composed_loss.ComposedPatternLoss.regression_loss", "loss_dict.update", "preds[].view", "ground_truth[].view", "composed_loss.ComposedPatternLoss.segmentation", "loss_dict.update"], "methods", ["None"], ["", "def", "_main_losses", "(", "self", ",", "preds", ",", "ground_truth", ",", "gt_num_edges", ")", ":", "\n", "        ", "\"\"\"\n            Main loss components. Evaluated in the same way regardless of the training stage\n        \"\"\"", "\n", "full_loss", "=", "0.", "\n", "loss_dict", "=", "{", "}", "\n", "\n", "if", "'shape'", "in", "self", ".", "l_components", ":", "\n", "            ", "pattern_loss", "=", "self", ".", "regression_loss", "(", "preds", "[", "'outlines'", "]", ",", "ground_truth", "[", "'outlines'", "]", ")", "\n", "full_loss", "+=", "pattern_loss", "\n", "loss_dict", ".", "update", "(", "pattern_loss", "=", "pattern_loss", ")", "\n", "\n", "", "if", "'loop'", "in", "self", ".", "l_components", ":", "\n", "            ", "loop_loss", "=", "self", ".", "loop_loss", "(", "preds", "[", "'outlines'", "]", ",", "gt_num_edges", ")", "\n", "full_loss", "+=", "self", ".", "config", "[", "'loop_loss_weight'", "]", "*", "loop_loss", "\n", "loss_dict", ".", "update", "(", "loop_loss", "=", "loop_loss", ")", "\n", "\n", "", "if", "'rotation'", "in", "self", ".", "l_components", ":", "\n", "# independent from panel loop origin by design", "\n", "            ", "rot_loss", "=", "self", ".", "regression_loss", "(", "preds", "[", "'rotations'", "]", ",", "ground_truth", "[", "'rotations'", "]", ")", "\n", "full_loss", "+=", "rot_loss", "\n", "loss_dict", ".", "update", "(", "rotation_loss", "=", "rot_loss", ")", "\n", "\n", "", "if", "'translation'", "in", "self", ".", "l_components", ":", "\n", "# independent from panel loop origin by design", "\n", "            ", "translation_loss", "=", "self", ".", "regression_loss", "(", "preds", "[", "'translations'", "]", ",", "ground_truth", "[", "'translations'", "]", ")", "\n", "full_loss", "+=", "translation_loss", "\n", "loss_dict", ".", "update", "(", "translation_loss", "=", "translation_loss", ")", "\n", "\n", "", "if", "'segmentation'", "in", "self", ".", "l_components", ":", "\n", "\n", "            ", "pred_flat", "=", "preds", "[", "'att_weights'", "]", ".", "view", "(", "-", "1", ",", "preds", "[", "'att_weights'", "]", ".", "shape", "[", "-", "1", "]", ")", "\n", "gt_flat", "=", "ground_truth", "[", "'segmentation'", "]", ".", "view", "(", "-", "1", ")", "\n", "\n", "# NOTE!!! SparseMax produces exact zeros", "\n", "segm_loss", "=", "self", ".", "segmentation", "(", "pred_flat", ",", "gt_flat", ")", "\n", "\n", "full_loss", "+=", "self", ".", "config", "[", "'segm_loss_weight'", "]", "*", "segm_loss", "\n", "loss_dict", ".", "update", "(", "segm_loss", "=", "segm_loss", ")", "\n", "\n", "", "return", "full_loss", ",", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._stitch_losses": [[336, 364], ["composed_loss.ComposedPatternLoss.stitch_loss", "loss_dict.update", "composed_loss.ComposedPatternLoss.stitch_loss_supervised", "loss_dict.update", "composed_loss.ComposedPatternLoss.bce_logits_loss", "loss_dict.update", "ground_truth[].type().to", "ground_truth[].type"], "methods", ["None"], ["", "def", "_stitch_losses", "(", "self", ",", "preds", ",", "ground_truth", ",", "gt_num_edges", ")", ":", "\n", "        ", "\"\"\"\n            Evaluate losses related to stitch info. Maybe calles or not depending on the training stage\n        \"\"\"", "\n", "full_loss", "=", "0.", "\n", "loss_dict", "=", "{", "}", "\n", "\n", "if", "'stitch'", "in", "self", ".", "l_components", ":", "\n", "# Pushing stitch tags of the stitched edges together, and apart from all the other stitch tags", "\n", "            ", "stitch_loss", ",", "stitch_loss_breakdown", "=", "self", ".", "stitch_loss", "(", "\n", "preds", "[", "'stitch_tags'", "]", ",", "ground_truth", "[", "'stitches'", "]", ",", "ground_truth", "[", "'num_stitches'", "]", ")", "\n", "loss_dict", ".", "update", "(", "stitch_loss_breakdown", ")", "\n", "full_loss", "+=", "stitch_loss", "\n", "\n", "", "if", "'stitch_supervised'", "in", "self", ".", "l_components", ":", "\n", "            ", "stitch_sup_loss", "=", "self", ".", "stitch_loss_supervised", "(", "\n", "preds", "[", "'stitch_tags'", "]", ",", "ground_truth", "[", "'stitch_tags'", "]", ")", "\n", "loss_dict", ".", "update", "(", "stitch_supervised_loss", "=", "stitch_sup_loss", ")", "\n", "full_loss", "+=", "self", ".", "config", "[", "'stitch_supervised_weight'", "]", "*", "stitch_sup_loss", "\n", "\n", "", "if", "'free_class'", "in", "self", ".", "l_components", ":", "\n", "# free\\stitches edges classification", "\n", "            ", "free_edges_loss", "=", "self", ".", "bce_logits_loss", "(", "\n", "preds", "[", "'free_edges_mask'", "]", ",", "ground_truth", "[", "'free_edges_mask'", "]", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "loss_dict", ".", "update", "(", "free_edges_loss", "=", "free_edges_loss", ")", "\n", "full_loss", "+=", "free_edges_loss", "\n", "\n", "", "return", "full_loss", ",", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._main_quality_metrics": [[365, 399], ["composed_loss.ComposedPatternLoss.pattern_nums_quality", "loss_dict.update", "composed_loss.ComposedPatternLoss.pattern_shape_quality", "loss_dict.update", "composed_loss.ComposedPatternLoss.rotation_quality", "loss_dict.update", "composed_loss.ComposedPatternLoss.translation_quality", "loss_dict.update"], "methods", ["None"], ["", "def", "_main_quality_metrics", "(", "self", ",", "preds", ",", "ground_truth", ",", "gt_num_edges", ",", "names", ")", ":", "\n", "        ", "\"\"\"\n            Evaluate quality components -- these are evaluated in the same way regardless of the training stage\n        \"\"\"", "\n", "loss_dict", "=", "{", "}", "\n", "\n", "correct_mask", "=", "None", "\n", "if", "'discrete'", "in", "self", ".", "q_components", ":", "\n", "            ", "num_panels_acc", ",", "num_edges_acc", ",", "correct_mask", ",", "num_edges_correct_acc", "=", "self", ".", "pattern_nums_quality", "(", "\n", "preds", "[", "'outlines'", "]", ",", "gt_num_edges", ",", "ground_truth", "[", "'num_panels'", "]", ",", "pattern_names", "=", "names", ")", "\n", "loss_dict", ".", "update", "(", "\n", "num_panels_accuracy", "=", "num_panels_acc", ",", "\n", "num_edges_accuracy", "=", "num_edges_acc", ",", "\n", "corr_num_edges_accuracy", "=", "num_edges_correct_acc", ")", "\n", "\n", "", "if", "'shape'", "in", "self", ".", "q_components", ":", "\n", "            ", "shape_l2", ",", "correct_shape_l2", "=", "self", ".", "pattern_shape_quality", "(", "\n", "preds", "[", "'outlines'", "]", ",", "ground_truth", "[", "'outlines'", "]", ",", "gt_num_edges", ",", "correct_mask", ")", "\n", "loss_dict", ".", "update", "(", "\n", "panel_shape_l2", "=", "shape_l2", ",", "\n", "corr_panel_shape_l2", "=", "correct_shape_l2", ",", "\n", ")", "\n", "\n", "", "if", "'rotation'", "in", "self", ".", "q_components", ":", "\n", "            ", "rotation_l2", ",", "correct_rotation_l2", "=", "self", ".", "rotation_quality", "(", "\n", "preds", "[", "'rotations'", "]", ",", "ground_truth", "[", "'rotations'", "]", ",", "correct_mask", ")", "\n", "loss_dict", ".", "update", "(", "rotation_l2", "=", "rotation_l2", ",", "corr_rotation_l2", "=", "correct_rotation_l2", ")", "\n", "\n", "", "if", "'translation'", "in", "self", ".", "q_components", ":", "\n", "            ", "translation_l2", ",", "correct_translation_l2", "=", "self", ".", "translation_quality", "(", "\n", "preds", "[", "'translations'", "]", ",", "ground_truth", "[", "'translations'", "]", ",", "correct_mask", ")", "\n", "loss_dict", ".", "update", "(", "translation_l2", "=", "translation_l2", ",", "corr_translation_l2", "=", "correct_translation_l2", ")", "\n", "\n", "", "return", "loss_dict", ",", "correct_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._stitch_quality_metrics": [[400, 427], ["composed_loss.ComposedPatternLoss.stitch_quality", "loss_dict.update", "torch.round", "torch.round", "torch.round", "torch.round", "ground_truth[].to", "loss_dict.update", "ground_truth[].type().to", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ground_truth[].to.numel", "ground_truth[].type"], "methods", ["None"], ["", "def", "_stitch_quality_metrics", "(", "self", ",", "preds", ",", "ground_truth", ",", "gt_num_edges", ",", "names", ",", "correct_mask", ")", ":", "\n", "        ", "\"\"\"\n            Quality components related to stitches prediction. May be called separately from main components \n            arrording to the training stage\n        \"\"\"", "\n", "loss_dict", "=", "{", "}", "\n", "if", "'stitch'", "in", "self", ".", "q_components", ":", "\n", "            ", "stitch_prec", ",", "stitch_recall", ",", "corr_prec", ",", "corr_rec", "=", "self", ".", "stitch_quality", "(", "\n", "preds", "[", "'stitch_tags'", "]", ",", "preds", "[", "'free_edges_mask'", "]", ",", "\n", "ground_truth", "[", "'stitches'", "]", ".", "type", "(", "torch", ".", "IntTensor", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "ground_truth", "[", "'num_stitches'", "]", ",", "\n", "pattern_names", "=", "names", ",", "\n", "correct_mask", "=", "correct_mask", ")", "\n", "loss_dict", ".", "update", "(", "\n", "stitch_precision", "=", "stitch_prec", ",", "\n", "stitch_recall", "=", "stitch_recall", ",", "\n", "corr_stitch_precision", "=", "corr_prec", ",", "\n", "corr_stitch_recall", "=", "corr_rec", ")", "\n", "\n", "", "if", "'free_class'", "in", "self", ".", "q_components", ":", "\n", "            ", "free_class", "=", "torch", ".", "round", "(", "torch", ".", "sigmoid", "(", "preds", "[", "'free_edges_mask'", "]", ")", ")", "\n", "gt_mask", "=", "ground_truth", "[", "'free_edges_mask'", "]", ".", "to", "(", "preds", "[", "'free_edges_mask'", "]", ".", "device", ")", "\n", "acc", "=", "(", "free_class", "==", "gt_mask", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "gt_mask", ".", "numel", "(", ")", "\n", "\n", "loss_dict", ".", "update", "(", "free_edge_acc", "=", "acc", ")", "\n", "\n", "", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._gt_order_match": [[429, 529], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "composed_loss.ComposedPatternLoss._panel_order_match", "composed_loss.ComposedPatternLoss._feature_permute", "composed_loss.ComposedPatternLoss._feature_permute", "composed_loss.ComposedPatternLoss._feature_permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "composed_loss.ComposedPatternLoss._feature_permute", "composed_loss.ComposedPatternLoss._feature_permute", "composed_loss.ComposedPatternLoss._stitch_after_permute", "composed_loss.ComposedPatternLoss._feature_permute", "ValueError", "composed_loss.ComposedPatternLoss._feature_permute", "ValueError", "preds[].contiguous().view", "ground_truth[].contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ValueError", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NotImplemented", "preds[].contiguous", "ground_truth[].contiguous", "ValueError", "torch.round().view", "torch.round().view", "torch.round().view", "torch.round().view", "ground_truth[].view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "torch.round", "torch.round", "torch.round", "torch.round", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._panel_order_match", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._feature_permute", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._feature_permute", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._feature_permute", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._feature_permute", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._feature_permute", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._stitch_after_permute", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._feature_permute", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._feature_permute"], ["", "def", "_gt_order_match", "(", "self", ",", "preds", ",", "ground_truth", ")", ":", "\n", "        ", "\"\"\"\n            Find the permutation of panel in GT that is best matched with the prediction (by geometry)\n            and return the GT object with all properties updated according to this permutation \n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "gt_updated", "=", "{", "}", "\n", "\n", "# Match the order", "\n", "if", "self", ".", "config", "[", "'order_by'", "]", "==", "'placement'", ":", "\n", "                ", "if", "(", "'translations'", "not", "in", "preds", "\n", "or", "'rotations'", "not", "in", "preds", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "'ComposedPatternLoss::Error::Ordering by placement requested but placement is not predicted'", ")", "\n", "\n", "", "pred_feature", "=", "torch", ".", "cat", "(", "[", "preds", "[", "'translations'", "]", ",", "preds", "[", "'rotations'", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "gt_feature", "=", "torch", ".", "cat", "(", "[", "ground_truth", "[", "'translations'", "]", ",", "ground_truth", "[", "'rotations'", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "elif", "self", ".", "config", "[", "'order_by'", "]", "==", "'translation'", ":", "\n", "                ", "if", "'translations'", "not", "in", "preds", ":", "\n", "                    ", "raise", "ValueError", "(", "'ComposedPatternLoss::Error::Ordering by translation requested but translation is not predicted'", ")", "\n", "\n", "", "pred_feature", "=", "preds", "[", "'translations'", "]", "\n", "gt_feature", "=", "ground_truth", "[", "'translations'", "]", "\n", "\n", "", "elif", "self", ".", "config", "[", "'order_by'", "]", "==", "'shape_translation'", ":", "\n", "                ", "if", "'translations'", "not", "in", "preds", ":", "\n", "                    ", "raise", "ValueError", "(", "'ComposedPatternLoss::Error::Ordering by translation requested but translation is not predicted'", ")", "\n", "\n", "", "pred_outlines_flat", "=", "preds", "[", "'outlines'", "]", ".", "contiguous", "(", ")", ".", "view", "(", "preds", "[", "'outlines'", "]", ".", "shape", "[", "0", "]", ",", "preds", "[", "'outlines'", "]", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "gt_outlines_flat", "=", "ground_truth", "[", "'outlines'", "]", ".", "contiguous", "(", ")", ".", "view", "(", "preds", "[", "'outlines'", "]", ".", "shape", "[", "0", "]", ",", "preds", "[", "'outlines'", "]", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "\n", "pred_feature", "=", "torch", ".", "cat", "(", "[", "preds", "[", "'translations'", "]", ",", "pred_outlines_flat", "]", ",", "dim", "=", "-", "1", ")", "\n", "gt_feature", "=", "torch", ".", "cat", "(", "[", "ground_truth", "[", "'translations'", "]", ",", "gt_outlines_flat", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "elif", "self", ".", "config", "[", "'order_by'", "]", "==", "'stitches'", ":", "\n", "                ", "if", "(", "'free_edges_mask'", "not", "in", "preds", "\n", "or", "'translations'", "not", "in", "preds", "\n", "or", "'rotations'", "not", "in", "preds", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "'ComposedPatternLoss::Error::Ordering by stitches requested but free edges mask or placement are not predicted'", ")", "\n", "\n", "", "pred_feature", "=", "torch", ".", "cat", "(", "[", "preds", "[", "'translations'", "]", ",", "preds", "[", "'rotations'", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "gt_feature", "=", "torch", ".", "cat", "(", "[", "ground_truth", "[", "'translations'", "]", ",", "ground_truth", "[", "'rotations'", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "epoch", ">=", "self", ".", "config", "[", "'epoch_with_stitches'", "]", ":", "\n", "# add free mask as feature", "\n", "# flatten per-edge info into single vector", "\n", "# push preficted mask score to 0-to-1 range", "\n", "                    ", "pred_mask", "=", "torch", ".", "round", "(", "torch", ".", "sigmoid", "(", "preds", "[", "'free_edges_mask'", "]", ")", ")", ".", "view", "(", "\n", "preds", "[", "'free_edges_mask'", "]", ".", "shape", "[", "0", "]", ",", "preds", "[", "'free_edges_mask'", "]", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "\n", "gt_mask", "=", "ground_truth", "[", "'free_edges_mask'", "]", ".", "view", "(", "\n", "ground_truth", "[", "'free_edges_mask'", "]", ".", "shape", "[", "0", "]", ",", "ground_truth", "[", "'free_edges_mask'", "]", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "\n", "pred_feature", "=", "torch", ".", "cat", "(", "[", "pred_feature", ",", "pred_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "gt_feature", "=", "torch", ".", "cat", "(", "[", "gt_feature", ",", "gt_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'ComposedPatternLoss::Warning::skipped order match by stitch tags as stitch loss is not enabled'", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplemented", "(", "'ComposedPatternLoss::Error::Ordering by requested feature <{}> is not implemented'", ".", "format", "(", "\n", "self", ".", "config", "[", "'order_by'", "]", "\n", ")", ")", "\n", "\n", "# run the optimal permutation eval", "\n", "", "gt_permutation", "=", "self", ".", "_panel_order_match", "(", "pred_feature", ",", "gt_feature", ")", "\n", "\n", "# Update gt info according to the permutation", "\n", "gt_updated", "[", "'outlines'", "]", "=", "self", ".", "_feature_permute", "(", "ground_truth", "[", "'outlines'", "]", ",", "gt_permutation", ")", "\n", "gt_updated", "[", "'num_edges'", "]", "=", "self", ".", "_feature_permute", "(", "ground_truth", "[", "'num_edges'", "]", ",", "gt_permutation", ")", "\n", "gt_updated", "[", "'empty_panels_mask'", "]", "=", "self", ".", "_feature_permute", "(", "ground_truth", "[", "'empty_panels_mask'", "]", ",", "gt_permutation", ")", "\n", "\n", "# Not supported", "\n", "# gt_updated['segmentation'] = self._feature_permute(ground_truth['segmentation'], gt_permutation)", "\n", "\n", "if", "'rotation'", "in", "self", ".", "l_components", ":", "\n", "                ", "gt_updated", "[", "'rotations'", "]", "=", "self", ".", "_feature_permute", "(", "ground_truth", "[", "'rotations'", "]", ",", "gt_permutation", ")", "\n", "", "if", "'translation'", "in", "self", ".", "l_components", ":", "\n", "                ", "gt_updated", "[", "'translations'", "]", "=", "self", ".", "_feature_permute", "(", "ground_truth", "[", "'translations'", "]", ",", "gt_permutation", ")", "\n", "\n", "", "if", "self", ".", "epoch", ">=", "self", ".", "config", "[", "'epoch_with_stitches'", "]", "and", "(", "\n", "'stitch'", "in", "self", ".", "l_components", "\n", "or", "'stitch_supervised'", "in", "self", ".", "l_components", "\n", "or", "'free_class'", "in", "self", ".", "l_components", ")", ":", "# if there is any stitch-related evaluation", "\n", "\n", "                ", "gt_updated", "[", "'stitches'", "]", "=", "self", ".", "_stitch_after_permute", "(", "\n", "ground_truth", "[", "'stitches'", "]", ",", "ground_truth", "[", "'num_stitches'", "]", ",", "\n", "gt_permutation", ",", "self", ".", "max_panel_len", "\n", ")", "\n", "gt_updated", "[", "'free_edges_mask'", "]", "=", "self", ".", "_feature_permute", "(", "ground_truth", "[", "'free_edges_mask'", "]", ",", "gt_permutation", ")", "\n", "\n", "if", "'stitch_supervised'", "in", "self", ".", "l_components", ":", "\n", "                    ", "gt_updated", "[", "'stitch_tags'", "]", "=", "self", ".", "_feature_permute", "(", "ground_truth", "[", "'stitch_tags'", "]", ",", "gt_permutation", ")", "\n", "\n", "# keep the references to the rest of the gt data as is", "\n", "", "", "for", "key", "in", "ground_truth", ":", "\n", "                ", "if", "key", "not", "in", "gt_updated", ":", "\n", "                    ", "gt_updated", "[", "key", "]", "=", "ground_truth", "[", "key", "]", "\n", "\n", "", "", "", "return", "gt_updated", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._panel_order_match": [[530, 571], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist.view", "torch.cdist.view", "torch.full", "torch.full", "torch.full", "torch.full", "range", "torch.isfinite().any", "torch.isfinite().any", "torch.isfinite().any", "torch.isfinite().any", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "pred_features.view", "gt_features.view", "torch.cdist.view.argmin", "range", "ValueError", "float", "float", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "range"], "methods", ["None"], ["", "def", "_panel_order_match", "(", "self", ",", "pred_features", ",", "gt_features", ")", ":", "\n", "        ", "\"\"\"\n            Find the best-matching permutation of gt panels to the predicted panels (in panel order)\n            based on the provided panel features\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch_size", "=", "pred_features", ".", "shape", "[", "0", "]", "\n", "pat_len", "=", "gt_features", ".", "shape", "[", "1", "]", "\n", "\n", "if", "self", ".", "epoch", "<", "self", ".", "config", "[", "'epoch_with_order_matching'", "]", ":", "\n", "# assign ordering randomly -- all the panel in the NN output have some non-zero signals at some point", "\n", "                ", "per_pattern_permutation", "=", "torch", ".", "stack", "(", "\n", "[", "torch", ".", "randperm", "(", "pat_len", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "pred_features", ".", "device", ")", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", ")", "\n", "return", "per_pattern_permutation", "\n", "\n", "# evaluate best order match", "\n", "# distances between panels (vectorized)", "\n", "", "total_dist_matrix", "=", "torch", ".", "cdist", "(", "\n", "pred_features", ".", "view", "(", "batch_size", ",", "pat_len", ",", "-", "1", ")", ",", "# flatten feature", "\n", "gt_features", ".", "view", "(", "batch_size", ",", "pat_len", ",", "-", "1", ")", ")", "\n", "total_dist_flat_view", "=", "total_dist_matrix", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "# Assingment (vectorized in batch dimention)", "\n", "per_pattern_permutation", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "pat_len", ")", ",", "fill_value", "=", "-", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "pred_features", ".", "device", ")", "\n", "for", "_", "in", "range", "(", "pat_len", ")", ":", "# this many pair to arrange", "\n", "                ", "to_match_ids", "=", "total_dist_flat_view", ".", "argmin", "(", "dim", "=", "1", ")", "# current global min is also a best match for the pair it's calculated for!", "\n", "\n", "rows", "=", "to_match_ids", "//", "total_dist_matrix", ".", "shape", "[", "1", "]", "\n", "cols", "=", "to_match_ids", "%", "total_dist_matrix", ".", "shape", "[", "1", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "# only the easy operation is left unvectorized", "\n", "                    ", "per_pattern_permutation", "[", "i", ",", "rows", "[", "i", "]", "]", "=", "cols", "[", "i", "]", "\n", "# exlude distances with matches", "\n", "total_dist_matrix", "[", "i", ",", "rows", "[", "i", "]", ",", ":", "]", "=", "float", "(", "'inf'", ")", "\n", "total_dist_matrix", "[", "i", ",", ":", ",", "cols", "[", "i", "]", "]", "=", "float", "(", "'inf'", ")", "\n", "\n", "", "", "if", "torch", ".", "isfinite", "(", "total_dist_matrix", ")", ".", "any", "(", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'ComposedPatternLoss::Error::Failed to match panel order'", ")", "\n", "\n", "", "", "return", "per_pattern_permutation", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._feature_permute": [[572, 590], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "len", "len", "range", "extended_permutation.unsqueeze.unsqueeze.expand", "extended_permutation.unsqueeze.unsqueeze.unsqueeze", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_feature_permute", "(", "pattern_features", ",", "permutation", ")", ":", "\n", "        ", "\"\"\"\n            Permute all given features (in the batch) according to given panel order permutation\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "extended_permutation", "=", "permutation", "\n", "# match indexing with feature size", "\n", "if", "len", "(", "permutation", ".", "shape", ")", "<", "len", "(", "pattern_features", ".", "shape", ")", ":", "\n", "                ", "for", "_", "in", "range", "(", "len", "(", "pattern_features", ".", "shape", ")", "-", "len", "(", "permutation", ".", "shape", ")", ")", ":", "\n", "                    ", "extended_permutation", "=", "extended_permutation", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# expand just creates a new view without extra copies", "\n", "", "extended_permutation", "=", "extended_permutation", ".", "expand", "(", "pattern_features", ".", "shape", ")", "\n", "\n", "# collect features with correct permutation in pattern dimention", "\n", "", "indexed_features", "=", "torch", ".", "gather", "(", "pattern_features", ",", "dim", "=", "1", ",", "index", "=", "extended_permutation", ")", "\n", "\n", "", "return", "indexed_features", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._stitch_after_permute": [[591, 619], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "range", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_stitch_after_permute", "(", "stitches", ",", "stitches_num", ",", "permutation", ",", "max_panel_len", ")", ":", "\n", "        ", "\"\"\"\n            Update edges ids in stitch info after panel order permutation\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# GT updates don't require gradient compute", "\n", "# add pattern dimention", "\n", "            ", "for", "pattern_id", "in", "range", "(", "len", "(", "stitches", ")", ")", ":", "\n", "\n", "# inverse permutation for this pattern for faster access", "\n", "                ", "new_panel_ids_list", "=", "[", "-", "1", "]", "*", "permutation", ".", "shape", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "permutation", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "new_panel_ids_list", "[", "permutation", "[", "pattern_id", "]", "[", "i", "]", "]", "=", "i", "\n", "\n", "# re-assign GT edge ids according to shift", "\n", "", "for", "side", "in", "(", "0", ",", "1", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "stitches_num", "[", "pattern_id", "]", ")", ":", "\n", "                        ", "edge_id", "=", "stitches", "[", "pattern_id", "]", "[", "side", "]", "[", "i", "]", "\n", "panel_id", "=", "edge_id", "//", "max_panel_len", "\n", "in_panel_edge_id", "=", "edge_id", "-", "(", "panel_id", "*", "max_panel_len", ")", "\n", "\n", "# where is this panel placed", "\n", "new_panel_id", "=", "new_panel_ids_list", "[", "panel_id", "]", "\n", "\n", "# update with pattern-level edge id", "\n", "stitches", "[", "pattern_id", "]", "[", "side", "]", "[", "i", "]", "=", "new_panel_id", "*", "max_panel_len", "+", "in_panel_edge_id", "\n", "\n", "", "", "", "", "return", "stitches", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._rotate_gt": [[621, 654], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "composed_loss.ComposedPatternLoss._batch_edge_order_match", "composed_loss.ComposedPatternLoss._gt_stitches_shift", "composed_loss.ComposedPatternLoss._per_panel_shift", "composed_loss.ComposedPatternLoss._per_panel_shift"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._batch_edge_order_match", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._gt_stitches_shift", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._per_panel_shift", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._per_panel_shift"], ["", "def", "_rotate_gt", "(", "self", ",", "preds", ",", "ground_truth", ",", "gt_num_edges", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n            Create a new GT object where panels are rotated to best match the predicted panels\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "gt_updated", "=", "{", "}", "\n", "# for origin-agnistic loss evaluation", "\n", "gt_updated", "[", "'outlines'", "]", ",", "panel_leading_edges", "=", "self", ".", "_batch_edge_order_match", "(", "\n", "preds", "[", "'outlines'", "]", ",", "ground_truth", "[", "'outlines'", "]", ",", "gt_num_edges", ")", "\n", "\n", "if", "epoch", ">=", "self", ".", "config", "[", "'epoch_with_stitches'", "]", "and", "(", "\n", "'stitch'", "in", "self", ".", "l_components", "\n", "or", "'stitch_supervised'", "in", "self", ".", "l_components", "\n", "or", "'free_class'", "in", "self", ".", "l_components", ")", ":", "# if there is any stitch-related evaluation", "\n", "                ", "gt_updated", "[", "'stitches'", "]", "=", "self", ".", "_gt_stitches_shift", "(", "\n", "ground_truth", "[", "'stitches'", "]", ",", "ground_truth", "[", "'num_stitches'", "]", ",", "\n", "panel_leading_edges", ",", "gt_num_edges", ",", "\n", "self", ".", "max_pattern_size", ",", "self", ".", "max_panel_len", "\n", ")", "\n", "gt_updated", "[", "'free_edges_mask'", "]", "=", "self", ".", "_per_panel_shift", "(", "\n", "ground_truth", "[", "'free_edges_mask'", "]", ",", "\n", "panel_leading_edges", ",", "gt_num_edges", ")", "\n", "\n", "if", "'stitch_supervised'", "in", "self", ".", "l_components", ":", "\n", "                    ", "gt_updated", "[", "'stitch_tags'", "]", "=", "self", ".", "_per_panel_shift", "(", "\n", "ground_truth", "[", "'stitch_tags'", "]", ",", "panel_leading_edges", ",", "gt_num_edges", ")", "\n", "\n", "# keep the references to the rest of the gt data as is", "\n", "", "", "for", "key", "in", "ground_truth", ":", "\n", "                ", "if", "key", "not", "in", "gt_updated", ":", "\n", "                    ", "gt_updated", "[", "key", "]", "=", "ground_truth", "[", "key", "]", "\n", "\n", "", "", "", "return", "gt_updated", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._batch_edge_order_match": [[655, 685], ["torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "len", "predicted_panels.view.view.view", "gt_panels.view.view.view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.stack().to.view", "torch.stack().to.view", "len", "composed_loss.ComposedPatternLoss._panel_egde_match", "torch.stack().to.append", "torch.stack().to.append", "leading_edges.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._panel_egde_match"], ["", "@", "staticmethod", "\n", "def", "_batch_edge_order_match", "(", "predicted_panels", ",", "gt_panels", ",", "gt_num_edges", ")", ":", "\n", "        ", "\"\"\"\n            Try different first edges of GT panels to find the one best matching with prediction\n        \"\"\"", "\n", "batch_size", "=", "predicted_panels", ".", "shape", "[", "0", "]", "\n", "if", "len", "(", "predicted_panels", ".", "shape", ")", ">", "3", ":", "\n", "            ", "predicted_panels", "=", "predicted_panels", ".", "view", "(", "-", "1", ",", "predicted_panels", ".", "shape", "[", "-", "2", "]", ",", "predicted_panels", ".", "shape", "[", "-", "1", "]", ")", "\n", "", "if", "gt_panels", "is", "not", "None", "and", "len", "(", "gt_panels", ".", "shape", ")", ">", "3", ":", "\n", "            ", "gt_panels", "=", "gt_panels", ".", "view", "(", "-", "1", ",", "gt_panels", ".", "shape", "[", "-", "2", "]", ",", "gt_panels", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "", "chosen_panels", "=", "[", "]", "\n", "leading_edges", "=", "[", "]", "\n", "# choose the closest version of original panel for each predicted panel", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "el_id", "in", "range", "(", "predicted_panels", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "num_edges", "=", "gt_num_edges", "[", "el_id", "]", "\n", "\n", "# Find loop origin with min distance to predicted panel", "\n", "chosen_panel", ",", "leading_edge", ",", "_", "=", "ComposedPatternLoss", ".", "_panel_egde_match", "(", "\n", "predicted_panels", "[", "el_id", "]", ",", "gt_panels", "[", "el_id", "]", ",", "num_edges", ")", "\n", "\n", "# update choice", "\n", "chosen_panels", ".", "append", "(", "chosen_panel", ")", "\n", "leading_edges", ".", "append", "(", "leading_edge", ")", "\n", "\n", "", "", "chosen_panels", "=", "torch", ".", "stack", "(", "chosen_panels", ")", ".", "to", "(", "predicted_panels", ".", "device", ")", "\n", "\n", "# reshape into pattern batch", "\n", "return", "chosen_panels", ".", "view", "(", "batch_size", ",", "-", "1", ",", "gt_panels", ".", "shape", "[", "-", "2", "]", ",", "gt_panels", ".", "shape", "[", "-", "1", "]", ")", ",", "leading_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._panel_egde_match": [[686, 704], ["range", "composed_loss.ComposedPatternLoss._rotate_edges"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._rotate_edges"], ["", "@", "staticmethod", "\n", "def", "_panel_egde_match", "(", "pred_panel", ",", "gt_panel", ",", "num_edges", ")", ":", "\n", "        ", "\"\"\"\n            Find the optimal origin for gt panel that matches with the pred_panel best\n        \"\"\"", "\n", "shifted_gt_panel", "=", "gt_panel", "\n", "min_dist", "=", "(", "(", "pred_panel", "-", "shifted_gt_panel", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "chosen_panel", "=", "shifted_gt_panel", "\n", "leading_edge", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "num_edges", ")", ":", "# will skip comparison if num_edges is 0 -- empty panels", "\n", "            ", "shifted_gt_panel", "=", "ComposedPatternLoss", ".", "_rotate_edges", "(", "shifted_gt_panel", ",", "num_edges", ")", "\n", "dist", "=", "(", "(", "pred_panel", "-", "shifted_gt_panel", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                ", "min_dist", "=", "dist", "\n", "chosen_panel", "=", "shifted_gt_panel", "\n", "leading_edge", "=", "i", "\n", "\n", "", "", "return", "chosen_panel", ",", "leading_edge", ",", "min_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._per_panel_shift": [[705, 725], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_per_panel_shift", "(", "panel_features", ",", "per_panel_leading_edges", ",", "panel_num_edges", ")", ":", "\n", "        ", "\"\"\"\n            Shift given panel features accorging to the new edge loop orientations given\n        \"\"\"", "\n", "pattern_size", "=", "panel_features", ".", "shape", "[", "1", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "pattern_idx", "in", "range", "(", "len", "(", "panel_features", ")", ")", ":", "\n", "                ", "for", "panel_idx", "in", "range", "(", "pattern_size", ")", ":", "\n", "                    ", "edge_id", "=", "per_panel_leading_edges", "[", "pattern_idx", "*", "pattern_size", "+", "panel_idx", "]", "\n", "num_edges", "=", "panel_num_edges", "[", "pattern_idx", "*", "pattern_size", "+", "panel_idx", "]", "\n", "if", "num_edges", "<", "3", ":", "# just skip empty panels", "\n", "                        ", "continue", "\n", "", "if", "edge_id", ":", "# not zero -- shift needed. For empty panels its always zero", "\n", "                        ", "current_panel", "=", "panel_features", "[", "pattern_idx", "]", "[", "panel_idx", "]", "\n", "# requested edge goes into the first place", "\n", "# padded area is left in place", "\n", "panel_features", "[", "pattern_idx", "]", "[", "panel_idx", "]", "=", "torch", ".", "cat", "(", "\n", "(", "current_panel", "[", "edge_id", ":", "num_edges", "]", ",", "current_panel", "[", ":", "edge_id", "]", ",", "current_panel", "[", "num_edges", ":", "]", ")", ")", "\n", "", "", "", "", "return", "panel_features", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._gt_stitches_shift": [[726, 756], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_gt_stitches_shift", "(", "\n", "gt_stitches", ",", "gt_stitches_nums", ",", "\n", "per_panel_leading_edges", ",", "\n", "gt_num_edges", ",", "\n", "max_num_panels", ",", "max_panel_len", ")", ":", "\n", "        ", "\"\"\"\n            Re-number the edges in ground truth according to the perdiction-gt edges mapping indicated in per_panel_leading_edges\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# GT updates don't require gradient compute", "\n", "# add pattern dimention", "\n", "            ", "for", "pattern_id", "in", "range", "(", "len", "(", "gt_stitches", ")", ")", ":", "\n", "# re-assign GT edge ids according to shift", "\n", "                ", "for", "side", "in", "(", "0", ",", "1", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "gt_stitches_nums", "[", "pattern_id", "]", ")", ":", "\n", "                        ", "edge_id", "=", "gt_stitches", "[", "pattern_id", "]", "[", "side", "]", "[", "i", "]", "\n", "panel_id", "=", "edge_id", "//", "max_panel_len", "\n", "global_panel_id", "=", "pattern_id", "*", "max_num_panels", "+", "panel_id", "# panel id in the batch", "\n", "new_ledge", "=", "per_panel_leading_edges", "[", "global_panel_id", "]", "\n", "panel_num_edges", "=", "gt_num_edges", "[", "global_panel_id", "]", "# never references to empty (padding) panel->always positive number", "\n", "\n", "inner_panel_id", "=", "edge_id", "-", "(", "panel_id", "*", "max_panel_len", ")", "# edge id within panel", "\n", "\n", "# shift edge within panel", "\n", "new_in_panel_id", "=", "inner_panel_id", "-", "new_ledge", "if", "inner_panel_id", ">=", "new_ledge", "else", "(", "\n", "panel_num_edges", "-", "(", "new_ledge", "-", "inner_panel_id", ")", ")", "\n", "# update with pattern-level edge id", "\n", "gt_stitches", "[", "pattern_id", "]", "[", "side", "]", "[", "i", "]", "=", "panel_id", "*", "max_panel_len", "+", "new_in_panel_id", "\n", "\n", "", "", "", "", "return", "gt_stitches", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss._rotate_edges": [[757, 765], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_rotate_edges", "(", "panel", ",", "num_edges", ")", ":", "\n", "        ", "\"\"\"\n            Rotate the start of the loop to the next edge\n        \"\"\"", "\n", "panel", "=", "torch", ".", "cat", "(", "(", "panel", "[", "1", ":", "num_edges", "]", ",", "panel", "[", "0", ":", "1", ",", ":", "]", ",", "panel", "[", "num_edges", ":", "]", ")", ")", "\n", "\n", "return", "panel", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.eval_utils.eval_metrics": [[12, 33], ["model.to", "model.eval", "hasattr", "hasattr", "torch.device", "hasattr", "torch.no_grad", "data_wrapper.get_loader", "isinstance", "data_wrapper.get_loader.items", "eval_utils._eval_metrics_per_loader", "torch.cuda.is_available", "eval_utils._eval_metrics_per_loader"], "function", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.eval", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.get_loader", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.eval_utils._eval_metrics_per_loader", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.eval_utils._eval_metrics_per_loader"], ["def", "eval_metrics", "(", "model", ",", "data_wrapper", ",", "section", "=", "'test'", ")", ":", "\n", "    ", "\"\"\"Evalutes current model on the given dataset section\"\"\"", "\n", "device", "=", "model", ".", "device_ids", "[", "0", "]", "if", "hasattr", "(", "model", ",", "'device_ids'", ")", "else", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "loss", "=", "model", ".", "module", ".", "loss", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", ".", "loss", "# distinguish case of multi-gpu training", "\n", "\n", "if", "hasattr", "(", "loss", ",", "'with_quality_eval'", ")", ":", "\n", "        ", "loss", ".", "with_quality_eval", "=", "True", "# force quality evaluation for losses that support it", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "loader", "=", "data_wrapper", ".", "get_loader", "(", "section", ")", "\n", "if", "isinstance", "(", "loader", ",", "dict", ")", ":", "\n", "            ", "metrics_dict", "=", "{", "}", "\n", "for", "data_folder", ",", "loader", "in", "loader", ".", "items", "(", ")", ":", "\n", "                ", "metrics_dict", "[", "data_folder", "]", "=", "_eval_metrics_per_loader", "(", "model", ",", "loss", ",", "loader", ",", "device", ")", "\n", "", "return", "metrics_dict", "\n", "", "else", ":", "\n", "            ", "return", "_eval_metrics_per_loader", "(", "model", ",", "loss", ",", "loader", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.eval_utils._eval_metrics_per_loader": [[35, 77], ["dict.fromkeys", "iter", "loss", "current_metrics[].append", "loss_dict.items", "len", "next", "batch[].to", "model", "full_loss.cpu().numpy", "print", "hasattr", "current_metrics[].append", "sum", "len", "gt.nelement", "full_loss.cpu", "isinstance", "value.cpu().numpy", "value.cpu"], "function", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.nets.BaseModule.loss"], ["", "", "", "def", "_eval_metrics_per_loader", "(", "model", ",", "loss", ",", "loader", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate model on given loader. \n    \n    Secondary function -- it assumes that context is set up: torch.no_grad(), model device & mode, etc.\"\"\"", "\n", "\n", "current_metrics", "=", "dict", ".", "fromkeys", "(", "[", "'full_loss'", "]", ",", "[", "]", ")", "\n", "counter", "=", "0", "\n", "loader_iter", "=", "iter", "(", "loader", ")", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "batch", "=", "next", "(", "loader_iter", ")", "\n", "", "except", "StopIteration", ":", "# End of loop", "\n", "            ", "break", "\n", "", "except", "InvalidPatternDefError", "as", "e", ":", "# skip batches with invalid sewing patterns", "\n", "            ", "print", "(", "e", ")", "\n", "continue", "\n", "\n", "", "features", ",", "gt", "=", "batch", "[", "'features'", "]", ".", "to", "(", "device", ")", ",", "batch", "[", "'ground_truth'", "]", "\n", "if", "gt", "is", "None", "or", "(", "hasattr", "(", "gt", ",", "'nelement'", ")", "and", "gt", ".", "nelement", "(", ")", "==", "0", ")", ":", "# assume reconstruction task", "\n", "            ", "gt", "=", "features", "\n", "\n", "# loss evaluation", "\n", "", "full_loss", ",", "loss_dict", ",", "_", "=", "loss", "(", "model", "(", "features", ")", ",", "gt", ",", "names", "=", "batch", "[", "'name'", "]", ")", "# use names for cleaner errors when needed", "\n", "\n", "# gathering up", "\n", "current_metrics", "[", "'full_loss'", "]", ".", "append", "(", "full_loss", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "for", "key", ",", "value", "in", "loss_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "current_metrics", ":", "\n", "                ", "current_metrics", "[", "key", "]", "=", "[", "]", "# init new metric", "\n", "", "if", "value", "is", "not", "None", ":", "# otherwise skip this one from accounting for!", "\n", "                ", "value", "=", "value", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", "else", "value", "\n", "current_metrics", "[", "key", "]", ".", "append", "(", "value", ")", "\n", "\n", "# sum & normalize ", "\n", "", "", "", "for", "metric", "in", "current_metrics", ":", "\n", "        ", "if", "len", "(", "current_metrics", "[", "metric", "]", ")", ":", "\n", "            ", "current_metrics", "[", "metric", "]", "=", "sum", "(", "current_metrics", "[", "metric", "]", ")", "/", "len", "(", "current_metrics", "[", "metric", "]", ")", "\n", "", "else", ":", "\n", "            ", "current_metrics", "[", "metric", "]", "=", "None", "\n", "\n", "", "", "return", "current_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.eval_utils.eval_pad_vector": [[80, 88], ["torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "def", "eval_pad_vector", "(", "data_stats", "=", "{", "}", ")", ":", "\n", "# prepare padding vector used for panel padding ", "\n", "    ", "if", "data_stats", ":", "\n", "        ", "shift", "=", "torch", ".", "Tensor", "(", "data_stats", "[", "'shift'", "]", ")", "\n", "scale", "=", "torch", ".", "Tensor", "(", "data_stats", "[", "'scale'", "]", ")", "\n", "return", "(", "-", "shift", "/", "scale", ")", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.losses.PanelLoopLoss.__init__": [[11, 18], ["metrics.eval_utils.eval_pad_vector"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.eval_utils.eval_pad_vector"], ["def", "__init__", "(", "self", ",", "max_edges_in_panel", ",", "data_stats", "=", "{", "}", ")", ":", "\n", "        ", "\"\"\"Info for evaluating padding vector if data statistical info is applied to it.\n            * if standardization/normalization transform is applied to padding, 'data_stats' should be provided\n                'data_stats' format: {'shift': <torch.tenzor>, 'scale': <torch.tensor>} \n        \"\"\"", "\n", "self", ".", "data_stats", "=", "data_stats", "\n", "self", ".", "pad_vector", "=", "eval_pad_vector", "(", "data_stats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.losses.PanelLoopLoss.__call__": [[19, 52], ["losses.PanelLoopLoss.pad_vector.to", "torch.zeros", "panel_coords_sum.to.to.to", "range", "len", "predicted_panels.view.view.view", "panel_square_sums.sum"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "predicted_panels", ",", "gt_panel_num_edges", "=", "None", ")", ":", "\n", "        ", "\"\"\"Evaluate loop loss on provided predicted_panels batch.\n            * 'original_panels' are used to evaluate the correct number of edges of each panel in case padding is applied.\n                If 'original_panels' is not given, it is assumed that there is no padding\n                If data stats are not provided at init or in this call, zero vector padding is assumed\n            * data_stats can be used to update padding vector on the fly\n        \"\"\"", "\n", "# flatten input into list of panels", "\n", "if", "len", "(", "predicted_panels", ".", "shape", ")", ">", "3", ":", "\n", "            ", "predicted_panels", "=", "predicted_panels", ".", "view", "(", "-", "1", ",", "predicted_panels", ".", "shape", "[", "-", "2", "]", ",", "predicted_panels", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "# correct devices", "\n", "", "self", ".", "pad_vector", "=", "self", ".", "pad_vector", ".", "to", "(", "predicted_panels", ".", "device", ")", "\n", "\n", "# evaluate loss", "\n", "panel_coords_sum", "=", "torch", ".", "zeros", "(", "(", "predicted_panels", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "panel_coords_sum", "=", "panel_coords_sum", ".", "to", "(", "device", "=", "predicted_panels", ".", "device", ")", "\n", "for", "el_id", "in", "range", "(", "predicted_panels", ".", "shape", "[", "0", "]", ")", ":", "\n", "# if unpadded len is not given, assume no padding", "\n", "            ", "seq_len", "=", "gt_panel_num_edges", "[", "el_id", "]", "if", "gt_panel_num_edges", "is", "not", "None", "else", "predicted_panels", ".", "shape", "[", "-", "2", "]", "\n", "if", "seq_len", "<", "3", ":", "\n", "# empty panel -- no need to force loop property", "\n", "                ", "continue", "\n", "\n", "# get per-coordinate sum of edges endpoints of each panel", "\n", "# should be close to sum of the equvalent number of pading values (since all of coords are shifted due to normalization\\standardization)", "\n", "# (in case of panels, padding for edge coords should be zero, but I'm using a more generic solution here JIC)", "\n", "", "panel_coords_sum", "[", "el_id", "]", "=", "(", "predicted_panels", "[", "el_id", "]", "[", ":", "seq_len", ",", ":", "2", "]", "-", "self", ".", "pad_vector", "[", ":", "2", "]", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "", "panel_square_sums", "=", "panel_coords_sum", "**", "2", "# per sum square", "\n", "\n", "# batch mean of squared norms of per-panel final points:", "\n", "return", "panel_square_sums", ".", "sum", "(", ")", "/", "(", "panel_square_sums", ".", "shape", "[", "0", "]", "*", "panel_square_sums", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.losses.PatternStitchLoss.__init__": [[60, 64], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "triplet_margin", "=", "0.1", ",", "use_hardnet", "=", "True", ")", ":", "\n", "        ", "self", ".", "triplet_margin", "=", "triplet_margin", "\n", "\n", "self", ".", "neg_loss", "=", "self", ".", "HardNet_neg_loss", "if", "use_hardnet", "else", "self", ".", "extended_triplet_neg_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.losses.PatternStitchLoss.__call__": [[65, 113], ["gt_stitches.long.long.long", "gt_stitches_nums.sum", "stitch_tags.view", "torch.cat", "range", "losses.PatternStitchLoss.neg_loss", "dict", "[].sum", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "stitch_tags", ",", "gt_stitches", ",", "gt_stitches_nums", ")", ":", "\n", "        ", "\"\"\"\n        * stitch_tags contain tags for every panel in every pattern in the batch\n        * gt_stitches contains the list of edge pairs that are stitches together.\n            * with every edge indicated as (pattern_edge_id) assuming panels order is known, and panels are padded to the same size\n        * per_panel_leading_edges -- specifies where is the start of the edge loop for GT outlines \n                that is well-matched to the predicted outlines. \n                If not given, current edge order (in stitch tags) is assumed to match the one used in ground truth panels\n        \"\"\"", "\n", "gt_stitches", "=", "gt_stitches", ".", "long", "(", ")", "\n", "batch_size", "=", "stitch_tags", ".", "shape", "[", "0", "]", "\n", "max_num_panels", "=", "stitch_tags", ".", "shape", "[", "1", "]", "\n", "max_panel_len", "=", "stitch_tags", ".", "shape", "[", "-", "2", "]", "\n", "num_stitches", "=", "gt_stitches_nums", ".", "sum", "(", ")", "# Ground truth number of stitches!", "\n", "\n", "flat_stitch_tags", "=", "stitch_tags", ".", "view", "(", "batch_size", ",", "-", "1", ",", "stitch_tags", ".", "shape", "[", "-", "1", "]", ")", "# remove panel dimention", "\n", "\n", "# https://stackoverflow.com/questions/55628014/indexing-a-3d-tensor-using-a-2d-tensor", "\n", "# these will have dull values due to padding in gt_stitches", "\n", "left_sides", "=", "flat_stitch_tags", "[", "torch", ".", "arange", "(", "batch_size", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "gt_stitches", "[", ":", ",", "0", ",", ":", "]", "]", "\n", "right_sides", "=", "flat_stitch_tags", "[", "torch", ".", "arange", "(", "batch_size", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "gt_stitches", "[", ":", ",", "1", ",", ":", "]", "]", "\n", "total_tags", "=", "torch", ".", "cat", "(", "[", "left_sides", ",", "right_sides", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# tags on both sides of the stitch -- together", "\n", "similarity_loss_mat", "=", "(", "left_sides", "-", "right_sides", ")", "**", "2", "\n", "\n", "# Gather the loss", "\n", "similarity_loss", "=", "0.", "\n", "for", "pattern_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "# ingore values calculated for padded part of gt_stitches ", "\n", "# average by number of stitches in pattern", "\n", "            ", "similarity_loss", "+=", "(", "\n", "similarity_loss_mat", "[", "pattern_idx", "]", "[", ":", "gt_stitches_nums", "[", "pattern_idx", "]", ",", ":", "]", ".", "sum", "(", ")", "\n", "/", "gt_stitches_nums", "[", "pattern_idx", "]", ")", "\n", "\n", "", "similarity_loss", "/=", "batch_size", "# average similarity by stitch", "\n", "\n", "# Push tags away from each other", "\n", "total_neg_loss", "=", "self", ".", "neg_loss", "(", "total_tags", ",", "gt_stitches_nums", ")", "\n", "\n", "# final sum", "\n", "fin_stitch_losses", "=", "similarity_loss", "+", "total_neg_loss", "\n", "stitch_loss_dict", "=", "dict", "(", "\n", "stitch_similarity_loss", "=", "similarity_loss", ",", "\n", "stitch_neg_loss", "=", "total_neg_loss", "\n", ")", "\n", "\n", "return", "fin_stitch_losses", ",", "stitch_loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.losses.PatternStitchLoss.extended_triplet_neg_loss": [[114, 149], ["enumerate", "torch.cat", "enumerate", "sum", "len", "len", "torch.max", "total_neg_loss.append", "torch.max.sum", "torch.zeros_like", "torch.max.sum", "len"], "methods", ["None"], ["", "def", "extended_triplet_neg_loss", "(", "self", ",", "total_tags", ",", "gt_stitches_nums", ")", ":", "\n", "        ", "\"\"\"Pushes stitch tags for different stitches away from each other\n            * Is based on Triplet loss formula to make the distance between tags larger than margin\n            * Evaluated the loss for every tag agaist every other tag (exept for the edges that are part of the same stitch thus have to have same tags)\n        \"\"\"", "\n", "total_neg_loss", "=", "[", "]", "\n", "for", "idx", ",", "pattern_tags", "in", "enumerate", "(", "total_tags", ")", ":", "# per pattern in batch", "\n", "# slice pattern tags to remove consideration for stitch padding", "\n", "            ", "half_size", "=", "len", "(", "pattern_tags", ")", "//", "2", "\n", "num_stitches", "=", "gt_stitches_nums", "[", "idx", "]", "\n", "\n", "pattern_tags", "=", "torch", ".", "cat", "(", "[", "\n", "pattern_tags", "[", ":", "num_stitches", ",", ":", "]", ",", "\n", "pattern_tags", "[", "half_size", ":", "half_size", "+", "num_stitches", ",", ":", "]", "]", ")", "\n", "\n", "# eval loss", "\n", "for", "tag_id", ",", "tag", "in", "enumerate", "(", "pattern_tags", ")", ":", "\n", "# Evaluate distance to other tags", "\n", "                ", "neg_loss", "=", "(", "tag", "-", "pattern_tags", ")", "**", "2", "\n", "\n", "# compare with margin", "\n", "neg_loss", "=", "self", ".", "triplet_margin", "-", "neg_loss", ".", "sum", "(", "dim", "=", "-", "1", ")", "# single value per other tag", "\n", "\n", "# zero out losses for entries that should be equal to current tag", "\n", "neg_loss", "[", "tag_id", "]", "=", "0", "# torch.zeros_like(neg_loss[tag_id]).to(neg_loss.device)", "\n", "brother_id", "=", "tag_id", "+", "num_stitches", "if", "tag_id", "<", "num_stitches", "else", "tag_id", "-", "num_stitches", "\n", "neg_loss", "[", "brother_id", "]", "=", "0", "# torch.zeros_like(neg_loss[tag_id]).to(neg_loss.device)", "\n", "\n", "# ignore elements far enough from current tag", "\n", "neg_loss", "=", "torch", ".", "max", "(", "neg_loss", ",", "torch", ".", "zeros_like", "(", "neg_loss", ")", ")", "\n", "\n", "# fin total", "\n", "total_neg_loss", ".", "append", "(", "neg_loss", ".", "sum", "(", ")", "/", "len", "(", "neg_loss", ")", ")", "\n", "# average neg loss per tag", "\n", "", "", "return", "sum", "(", "total_neg_loss", ")", "/", "len", "(", "total_neg_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.losses.PatternStitchLoss.HardNet_neg_loss": [[150, 181], ["enumerate", "torch.cat", "enumerate", "sum", "len", "len", "float", "float", "total_neg_loss.append", "tags_distance.min", "max"], "methods", ["None"], ["", "def", "HardNet_neg_loss", "(", "self", ",", "total_tags", ",", "gt_stitches_nums", ")", ":", "\n", "        ", "\"\"\"Pushes stitch tags for different stitches away from each other\n            * Is based on Triplet loss formula to make the distance between tags larger than margin\n            * Uses trick from HardNet: only evaluate the loss on the closest negative example!\n        \"\"\"", "\n", "total_neg_loss", "=", "[", "]", "\n", "for", "idx", ",", "pattern_tags", "in", "enumerate", "(", "total_tags", ")", ":", "# per pattern in batch", "\n", "# slice pattern tags to remove consideration for stitch padding", "\n", "            ", "half_size", "=", "len", "(", "pattern_tags", ")", "//", "2", "\n", "num_stitches", "=", "gt_stitches_nums", "[", "idx", "]", "\n", "\n", "pattern_tags", "=", "torch", ".", "cat", "(", "[", "\n", "pattern_tags", "[", ":", "num_stitches", ",", ":", "]", ",", "\n", "pattern_tags", "[", "half_size", ":", "half_size", "+", "num_stitches", ",", ":", "]", "]", ")", "\n", "\n", "for", "tag_id", ",", "tag", "in", "enumerate", "(", "pattern_tags", ")", ":", "\n", "# Evaluate distance to other tags", "\n", "                ", "tags_distance", "=", "(", "(", "tag", "-", "pattern_tags", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# mask values corresponding to current tag for min() evaluation", "\n", "tags_distance", "[", "tag_id", "]", "=", "float", "(", "'inf'", ")", "\n", "brother_id", "=", "tag_id", "+", "num_stitches", "if", "tag_id", "<", "num_stitches", "else", "tag_id", "-", "num_stitches", "\n", "tags_distance", "[", "brother_id", "]", "=", "float", "(", "'inf'", ")", "\n", "\n", "# compare with margin", "\n", "neg_loss", "=", "self", ".", "triplet_margin", "-", "tags_distance", ".", "min", "(", ")", "# single value per other tag", "\n", "\n", "# ignore if all tags are far enough from current tag", "\n", "total_neg_loss", ".", "append", "(", "max", "(", "neg_loss", ",", "0", ")", ")", "\n", "# average neg loss per tag", "\n", "", "", "return", "sum", "(", "total_neg_loss", ")", "/", "len", "(", "total_neg_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.transforms.SampleToTensor.__call__": [[31, 33], ["transforms._dict_to_tensors"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.transforms._dict_to_tensors"], ["def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "_dict_to_tensors", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.transforms.FeatureStandartization.__init__": [[37, 40], ["torch.Tensor", "torch.Tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "shift", ",", "scale", ")", ":", "\n", "        ", "self", ".", "shift", "=", "torch", ".", "Tensor", "(", "shift", ")", "\n", "self", ".", "scale", "=", "torch", ".", "Tensor", "(", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.transforms.FeatureStandartization.__call__": [[41, 50], ["sample.items"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "updated_sample", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "sample", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "==", "'features'", ":", "\n", "                ", "updated_sample", "[", "key", "]", "=", "(", "sample", "[", "key", "]", "-", "self", ".", "shift", ")", "/", "self", ".", "scale", "\n", "", "else", ":", "\n", "                ", "updated_sample", "[", "key", "]", "=", "sample", "[", "key", "]", "\n", "\n", "", "", "return", "updated_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.transforms.GTtandartization.__init__": [[57, 62], ["isinstance", "transforms._dict_to_tensors", "torch.Tensor", "isinstance", "transforms._dict_to_tensors", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.transforms._dict_to_tensors", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.transforms._dict_to_tensors"], ["def", "__init__", "(", "self", ",", "shift", ",", "scale", ")", ":", "\n", "        ", "\"\"\"If ground truth is a dictionary in itself, the provided values should also be dictionaries\"\"\"", "\n", "\n", "self", ".", "shift", "=", "_dict_to_tensors", "(", "shift", ")", "if", "isinstance", "(", "shift", ",", "dict", ")", "else", "torch", ".", "Tensor", "(", "shift", ")", "\n", "self", ".", "scale", "=", "_dict_to_tensors", "(", "scale", ")", "if", "isinstance", "(", "scale", ",", "dict", ")", "else", "torch", ".", "Tensor", "(", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.transforms.GTtandartization.__call__": [[63, 83], ["isinstance", "sample.items", "dict.fromkeys", "gt.items", "gt.keys"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "gt", "=", "sample", "[", "'ground_truth'", "]", "\n", "if", "isinstance", "(", "gt", ",", "dict", ")", ":", "\n", "            ", "new_gt", "=", "dict", ".", "fromkeys", "(", "gt", ".", "keys", "(", ")", ")", "\n", "for", "key", ",", "value", "in", "gt", ".", "items", "(", ")", ":", "\n", "                ", "new_gt", "[", "key", "]", "=", "value", "\n", "if", "key", "in", "self", ".", "shift", ":", "\n", "                    ", "new_gt", "[", "key", "]", "=", "new_gt", "[", "key", "]", "-", "self", ".", "shift", "[", "key", "]", "\n", "", "if", "key", "in", "self", ".", "scale", ":", "\n", "                    ", "new_gt", "[", "key", "]", "=", "new_gt", "[", "key", "]", "/", "self", ".", "scale", "[", "key", "]", "\n", "# if shift and scale are not set, the value is kept as it is", "\n", "", "", "", "else", ":", "\n", "            ", "new_gt", "=", "(", "gt", "-", "self", ".", "shift", ")", "/", "self", ".", "scale", "\n", "\n", "# gather sample", "\n", "", "updated_sample", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "sample", ".", "items", "(", ")", ":", "\n", "            ", "updated_sample", "[", "key", "]", "=", "new_gt", "if", "key", "==", "'ground_truth'", "else", "sample", "[", "key", "]", "\n", "\n", "", "return", "updated_sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.transforms._dict_to_tensors": [[6, 25], ["dict.fromkeys", "dict_obj.items", "dict_obj.keys", "torch.Tensor", "isinstance", "transforms._dict_to_tensors", "isinstance", "isinstance", "torch.from_numpy", "torch.tensor", "new_dict[].float"], "function", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.transforms._dict_to_tensors"], ["def", "_dict_to_tensors", "(", "dict_obj", ")", ":", "# helper", "\n", "    ", "\"\"\"convert a dictionary with numeric values into a new dictionary with torch tensors\"\"\"", "\n", "new_dict", "=", "dict", ".", "fromkeys", "(", "dict_obj", ".", "keys", "(", ")", ")", "\n", "for", "key", ",", "value", "in", "dict_obj", ".", "items", "(", ")", ":", "\n", "        ", "if", "value", "is", "None", ":", "\n", "            ", "new_dict", "[", "key", "]", "=", "torch", ".", "Tensor", "(", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "new_dict", "[", "key", "]", "=", "_dict_to_tensors", "(", "value", ")", "\n", "", "elif", "isinstance", "(", "value", ",", "str", ")", ":", "# no changes for strings", "\n", "            ", "new_dict", "[", "key", "]", "=", "value", "\n", "", "elif", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "new_dict", "[", "key", "]", "=", "torch", ".", "from_numpy", "(", "value", ")", "\n", "\n", "# TODO more stable way of converting the types (or detecting ints)", "\n", "if", "value", ".", "dtype", "not", "in", "[", "np", ".", "int", ",", "np", ".", "int64", ",", "np", ".", "bool", "]", ":", "\n", "                ", "new_dict", "[", "key", "]", "=", "new_dict", "[", "key", "]", ".", "float", "(", ")", "# cast all doubles and ofther stuff to floats", "\n", "", "", "else", ":", "\n", "            ", "new_dict", "[", "key", "]", "=", "torch", ".", "tensor", "(", "value", ")", "# just try directly, if nothing else works", "\n", "", "", "return", "new_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.__init__": [[20, 54], ["argparse.Namespace", "wrapper.DatasetWrapper.load_split", "wrapper.DatasetWrapper.new_loaders"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.load_split", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.new_loaders"], ["def", "__init__", "(", "self", ",", "in_dataset", ",", "known_split", "=", "None", ",", "batch_size", "=", "None", ",", "shuffle_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"Initialize wrapping around provided dataset. If splits/batch_size is known \"\"\"", "\n", "\n", "self", ".", "dataset", "=", "in_dataset", "\n", "self", ".", "data_section_list", "=", "[", "'full'", ",", "'train'", ",", "'validation'", ",", "'test'", "]", "\n", "\n", "self", ".", "training", "=", "in_dataset", "\n", "self", ".", "validation", "=", "None", "\n", "self", ".", "test", "=", "None", "\n", "self", ".", "full_per_datafolder", "=", "None", "\n", "\n", "self", ".", "batch_size", "=", "None", "\n", "\n", "self", ".", "loaders", "=", "Namespace", "(", "\n", "full", "=", "None", ",", "\n", "full_per_data_folder", "=", "None", ",", "\n", "train", "=", "None", ",", "\n", "test", "=", "None", ",", "\n", "test_per_data_folder", "=", "None", ",", "\n", "validation", "=", "None", ",", "\n", "valid_per_data_folder", "=", "None", "\n", ")", "\n", "\n", "self", ".", "split_info", "=", "{", "\n", "'random_seed'", ":", "None", ",", "\n", "'valid_per_type'", ":", "None", ",", "\n", "'test_per_type'", ":", "None", "\n", "}", "\n", "\n", "if", "known_split", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_split", "(", "known_split", ")", "\n", "", "if", "batch_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "new_loaders", "(", "batch_size", ",", "shuffle_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.get_loader": [[55, 61], ["getattr", "ValueError"], "methods", ["None"], ["", "", "def", "get_loader", "(", "self", ",", "data_section", "=", "'full'", ")", ":", "\n", "        ", "\"\"\"Return loader that corresponds to given data section. None if requested loader does not exist\"\"\"", "\n", "try", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "loaders", ",", "data_section", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "raise", "ValueError", "(", "'DataWrapper::requested loader on unknown data section {}'", ".", "format", "(", "data_section", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.new_loaders": [[63, 104], ["torch.utils.data.DataLoader", "wrapper.DatasetWrapper._loaders_dict", "RuntimeError", "wrapper.DatasetWrapper.dataset.subsets_per_datafolder", "torch.utils.data.DataLoader", "wrapper.DatasetWrapper._loaders_dict", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "wrapper.DatasetWrapper._loaders_dict", "wrapper.DatasetWrapper.dataset.indices_by_data_folder", "data.utils.BalancedBatchSampler", "torch.utils.data.DataLoader", "torch.utils.data.Subset", "print", "torch.utils.data.DataLoader", "wrapper.DatasetWrapper.validation_per_datafolder.values"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper._loaders_dict", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.subsets_per_datafolder", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper._loaders_dict", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper._loaders_dict", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.indices_by_data_folder"], ["", "", "def", "new_loaders", "(", "self", ",", "batch_size", "=", "None", ",", "shuffle_train", "=", "True", ")", ":", "\n", "        ", "\"\"\"Create loaders for current data split. Note that result depends on the random number generator!\n        \n            if the data split was not specified, only the 'full' loaders are created\n        \"\"\"", "\n", "if", "batch_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "batch_size", "=", "batch_size", "\n", "", "if", "self", ".", "batch_size", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'DataWrapper:Error:cannot create loaders: batch_size is not set'", ")", "\n", "\n", "", "self", ".", "loaders", ".", "full", "=", "DataLoader", "(", "self", ".", "dataset", ",", "self", ".", "batch_size", ")", "\n", "if", "self", ".", "full_per_datafolder", "is", "None", ":", "\n", "            ", "self", ".", "full_per_datafolder", "=", "self", ".", "dataset", ".", "subsets_per_datafolder", "(", ")", "\n", "", "self", ".", "loaders", ".", "full_per_data_folder", "=", "self", ".", "_loaders_dict", "(", "self", ".", "full_per_datafolder", ",", "self", ".", "batch_size", ")", "\n", "\n", "if", "self", ".", "validation", "is", "not", "None", "and", "self", ".", "test", "is", "not", "None", ":", "\n", "# we have a loaded split!", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "dataset", ".", "config", "[", "'balanced_batch_sampling'", "]", "=", "True", "\n", "# indices IN the training set breakdown per type", "\n", "_", ",", "train_indices_per_type", "=", "self", ".", "dataset", ".", "indices_by_data_folder", "(", "self", ".", "training", ".", "indices", ")", "\n", "batch_sampler", "=", "BalancedBatchSampler", "(", "train_indices_per_type", ",", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "self", ".", "loaders", ".", "train", "=", "DataLoader", "(", "self", ".", "training", ",", "batch_sampler", "=", "batch_sampler", ")", "\n", "", "except", "(", "AttributeError", ",", "NotImplementedError", ")", "as", "e", ":", "# cannot create balanced batches", "\n", "                ", "print", "(", "'{}::Warning::Failed to create balanced batches for training. Using default sampling'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "self", ".", "dataset", ".", "config", "[", "'balanced_batch_sampling'", "]", "=", "False", "\n", "self", ".", "loaders", ".", "train", "=", "DataLoader", "(", "self", ".", "training", ",", "self", ".", "batch_size", ",", "shuffle", "=", "shuffle_train", ")", "\n", "# no need for breakdown per datafolder for training -- for now", "\n", "\n", "", "self", ".", "loaders", ".", "validation", "=", "DataLoader", "(", "self", ".", "validation", ",", "self", ".", "batch_size", ")", "\n", "self", ".", "loaders", ".", "valid_per_data_folder", "=", "self", ".", "_loaders_dict", "(", "self", ".", "validation_per_datafolder", ",", "self", ".", "batch_size", ")", "\n", "\n", "# loader with one example per garment type -- for visualization of the training process", "\n", "single_sample_ids", "=", "[", "folder_ids", ".", "indices", "[", "0", "]", "for", "folder_ids", "in", "self", ".", "validation_per_datafolder", ".", "values", "(", ")", "]", "\n", "self", ".", "loaders", ".", "valid_single_per_data", "=", "DataLoader", "(", "\n", "Subset", "(", "self", ".", "dataset", ",", "single_sample_ids", ")", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "self", ".", "loaders", ".", "test", "=", "DataLoader", "(", "self", ".", "test", ",", "self", ".", "batch_size", ")", "\n", "self", ".", "loaders", ".", "test_per_data_folder", "=", "self", ".", "_loaders_dict", "(", "self", ".", "test_per_datafolder", ",", "self", ".", "batch_size", ")", "\n", "\n", "", "return", "self", ".", "loaders", ".", "train", ",", "self", ".", "loaders", ".", "validation", ",", "self", ".", "loaders", ".", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper._loaders_dict": [[105, 111], ["subsets_dict.items", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "_loaders_dict", "(", "self", ",", "subsets_dict", ",", "batch_size", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "\"\"\"Create loaders for all subsets in dict\"\"\"", "\n", "loaders_dict", "=", "{", "}", "\n", "for", "name", ",", "subset", "in", "subsets_dict", ".", "items", "(", ")", ":", "\n", "            ", "loaders_dict", "[", "name", "]", "=", "DataLoader", "(", "subset", ",", "batch_size", ",", "shuffle", "=", "shuffle", ")", "\n", "", "return", "loaders_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.new_split": [[113, 121], ["wrapper.DatasetWrapper.split_info.update", "wrapper.DatasetWrapper.load_split", "int", "time.time"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.load_split"], ["", "def", "new_split", "(", "self", ",", "valid", ",", "test", "=", "None", ",", "random_seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"Creates train/validation or train/validation/test splits\n            depending on provided parameters\n            \"\"\"", "\n", "self", ".", "split_info", "[", "'random_seed'", "]", "=", "random_seed", "if", "random_seed", "else", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "self", ".", "split_info", ".", "update", "(", "valid_per_type", "=", "valid", ",", "test_per_type", "=", "test", ",", "type", "=", "'count'", ")", "\n", "\n", "return", "self", ".", "load_split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.load_split": [[122, 174], ["torch.manual_seed", "random.seed", "numpy.random.seed", "print", "wrapper.DatasetWrapper.print_subset_stats", "wrapper.DatasetWrapper.print_subset_stats", "wrapper.DatasetWrapper.print_subset_stats", "int", "print", "wrapper.DatasetWrapper.dataset.split_from_dict", "any", "print", "wrapper.DatasetWrapper.dataset.random_split_by_dataset", "wrapper.DatasetWrapper.new_loaders", "len", "len", "len", "len", "len", "len", "time.time", "open", "json.load", "ValueError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.print_subset_stats", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.print_subset_stats", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.print_subset_stats", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.split_from_dict", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.random_split_by_dataset", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.new_loaders"], ["", "def", "load_split", "(", "self", ",", "split_info", "=", "None", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "\"\"\"Get the split by provided parameters. Can be used to reproduce splits on the same dataset.\n            NOTE this function re-initializes torch random number generator!\n        \"\"\"", "\n", "if", "split_info", ":", "\n", "            ", "self", ".", "split_info", "=", "split_info", "\n", "\n", "", "if", "'random_seed'", "not", "in", "self", ".", "split_info", "or", "self", ".", "split_info", "[", "'random_seed'", "]", "is", "None", ":", "\n", "            ", "self", ".", "split_info", "[", "'random_seed'", "]", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "# init for all libs =)", "\n", "", "torch", ".", "manual_seed", "(", "self", ".", "split_info", "[", "'random_seed'", "]", ")", "\n", "random", ".", "seed", "(", "self", ".", "split_info", "[", "'random_seed'", "]", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "split_info", "[", "'random_seed'", "]", ")", "\n", "\n", "# if file is provided", "\n", "if", "'filename'", "in", "self", ".", "split_info", "and", "self", ".", "split_info", "[", "'filename'", "]", "is", "not", "None", ":", "\n", "            ", "print", "(", "'DataWrapper::Loading data split from {}'", ".", "format", "(", "self", ".", "split_info", "[", "'filename'", "]", ")", ")", "\n", "with", "open", "(", "self", ".", "split_info", "[", "'filename'", "]", ",", "'r'", ")", "as", "f_json", ":", "\n", "                ", "split_dict", "=", "json", ".", "load", "(", "f_json", ")", "\n", "", "self", ".", "training", ",", "self", ".", "validation", ",", "self", ".", "test", ",", "self", ".", "training_per_datafolder", ",", "self", ".", "validation_per_datafolder", ",", "self", ".", "test_per_datafolder", "=", "self", ".", "dataset", ".", "split_from_dict", "(", "\n", "split_dict", ",", "\n", "with_breakdown", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "keys_required", "=", "[", "'test_per_type'", ",", "'valid_per_type'", ",", "'type'", "]", "\n", "if", "any", "(", "[", "key", "not", "in", "self", ".", "split_info", "for", "key", "in", "keys_required", "]", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Specified split information is not full: {}. It needs to contain: {}'", ".", "format", "(", "split_info", ",", "keys_required", ")", ")", "\n", "", "print", "(", "'DataWrapper::Loading data split from split config: {}: valid per type {} / test per type {}'", ".", "format", "(", "\n", "self", ".", "split_info", "[", "'type'", "]", ",", "self", ".", "split_info", "[", "'valid_per_type'", "]", ",", "self", ".", "split_info", "[", "'test_per_type'", "]", ")", ")", "\n", "self", ".", "training", ",", "self", ".", "validation", ",", "self", ".", "test", ",", "self", ".", "training_per_datafolder", ",", "self", ".", "validation_per_datafolder", ",", "self", ".", "test_per_datafolder", "=", "self", ".", "dataset", ".", "random_split_by_dataset", "(", "\n", "self", ".", "split_info", "[", "'valid_per_type'", "]", ",", "\n", "self", ".", "split_info", "[", "'test_per_type'", "]", ",", "\n", "self", ".", "split_info", "[", "'type'", "]", ",", "\n", "with_breakdown", "=", "True", ")", "\n", "\n", "", "if", "batch_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "batch_size", "=", "batch_size", "\n", "", "if", "self", ".", "batch_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "new_loaders", "(", ")", "# s.t. loaders could be used right away", "\n", "\n", "", "print", "(", "'DatasetWrapper::Dataset split: {} / {} / {}'", ".", "format", "(", "\n", "len", "(", "self", ".", "training", ")", "if", "self", ".", "training", "else", "None", ",", "\n", "len", "(", "self", ".", "validation", ")", "if", "self", ".", "validation", "else", "None", ",", "\n", "len", "(", "self", ".", "test", ")", "if", "self", ".", "test", "else", "None", ")", ")", "\n", "self", ".", "split_info", "[", "'size_train'", "]", "=", "len", "(", "self", ".", "training", ")", "if", "self", ".", "training", "else", "0", "\n", "self", ".", "split_info", "[", "'size_valid'", "]", "=", "len", "(", "self", ".", "validation", ")", "if", "self", ".", "validation", "else", "0", "\n", "self", ".", "split_info", "[", "'size_test'", "]", "=", "len", "(", "self", ".", "test", ")", "if", "self", ".", "test", "else", "0", "\n", "\n", "self", ".", "print_subset_stats", "(", "self", ".", "training_per_datafolder", ",", "len", "(", "self", ".", "training", ")", ",", "'Training'", ")", "\n", "self", ".", "print_subset_stats", "(", "self", ".", "validation_per_datafolder", ",", "len", "(", "self", ".", "validation", ")", ",", "'Validation'", ")", "\n", "self", ".", "print_subset_stats", "(", "self", ".", "test_per_datafolder", ",", "len", "(", "self", ".", "test", ")", ",", "'Test'", ")", "\n", "\n", "return", "self", ".", "training", ",", "self", ".", "validation", ",", "self", ".", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.print_subset_stats": [[175, 189], ["subset_breakdown_dict.items", "print", "print", "len", "len"], "methods", ["None"], ["", "def", "print_subset_stats", "(", "self", ",", "subset_breakdown_dict", ",", "total_len", ",", "subset_name", "=", "''", ",", "log_to_config", "=", "True", ")", ":", "\n", "        ", "\"\"\"Print stats on the elements of each datafolder contained in given subset\"\"\"", "\n", "# gouped by data_folders", "\n", "if", "not", "total_len", ":", "\n", "            ", "print", "(", "'{}::Warning::Subset {} is empty, no stats printed'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "subset_name", ")", ")", "\n", "return", "\n", "", "self", ".", "split_info", "[", "subset_name", "]", "=", "{", "}", "\n", "message", "=", "''", "\n", "for", "data_folder", ",", "subset", "in", "subset_breakdown_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "log_to_config", ":", "\n", "                ", "self", ".", "split_info", "[", "subset_name", "]", "[", "data_folder", "]", "=", "len", "(", "subset", ")", "\n", "", "message", "+=", "'{} : {:.1f}%;\\n'", ".", "format", "(", "data_folder", ",", "100", "*", "len", "(", "subset", ")", "/", "total_len", ")", "\n", "\n", "", "print", "(", "'DatasetWrapper::{} subset breakdown::\\n{}'", ".", "format", "(", "subset_name", ",", "message", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.save_to_wandb": [[190, 204], ["experiment.add_config", "wrapper.DatasetWrapper.dataset.save_to_wandb", "open", "json.dump", "experiment.local_wandb_path"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.add_config", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset.save_to_wandb", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.local_wandb_path"], ["", "def", "save_to_wandb", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"Save current data info to the wandb experiment\"\"\"", "\n", "# Split", "\n", "experiment", ".", "add_config", "(", "'data_split'", ",", "self", ".", "split_info", ")", "\n", "# save serialized split s.t. it's loaded to wandb", "\n", "split_datanames", "=", "{", "}", "\n", "split_datanames", "[", "'training'", "]", "=", "[", "self", ".", "dataset", ".", "datapoints_names", "[", "idx", "]", "for", "idx", "in", "self", ".", "training", ".", "indices", "]", "\n", "split_datanames", "[", "'validation'", "]", "=", "[", "self", ".", "dataset", ".", "datapoints_names", "[", "idx", "]", "for", "idx", "in", "self", ".", "validation", ".", "indices", "]", "\n", "split_datanames", "[", "'test'", "]", "=", "[", "self", ".", "dataset", ".", "datapoints_names", "[", "idx", "]", "for", "idx", "in", "self", ".", "test", ".", "indices", "]", "\n", "with", "open", "(", "experiment", ".", "local_wandb_path", "(", ")", "/", "'data_split.json'", ",", "'w'", ")", "as", "f_json", ":", "\n", "            ", "json", ".", "dump", "(", "split_datanames", ",", "f_json", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "\n", "\n", "# data info", "\n", "", "self", ".", "dataset", ".", "save_to_wandb", "(", "experiment", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.standardize_data": [[206, 209], ["wrapper.DatasetWrapper.dataset.standardize"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.standardize"], ["", "def", "standardize_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"Apply data normalization based on stats from training set\"\"\"", "\n", "self", ".", "dataset", ".", "standardize", "(", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.predict": [[211, 245], ["prediction_path.mkdir", "model.to", "model.eval", "hasattr", "torch.device", "section_dir.mkdir", "datetime.datetime.datetime.now().strftime", "torch.no_grad", "wrapper.DatasetWrapper.get_loader", "torch.cuda.is_available", "datetime.datetime.datetime.now", "batch[].to", "model", "wrapper.DatasetWrapper.dataset.save_prediction_batch", "batch[].numpy"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.eval", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.wrapper.DatasetWrapper.get_loader", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.save_prediction_batch"], ["", "def", "predict", "(", "self", ",", "model", ",", "save_to", ",", "sections", "=", "[", "'test'", "]", ",", "single_batch", "=", "False", ",", "orig_folder_names", "=", "False", ")", ":", "\n", "        ", "\"\"\"Save model predictions on the given dataset section\"\"\"", "\n", "# Main path", "\n", "prediction_path", "=", "save_to", "/", "(", "'nn_pred_'", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%y%m%d-%H-%M-%S'", ")", ")", "\n", "prediction_path", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "device", "=", "model", ".", "device_ids", "[", "0", "]", "if", "hasattr", "(", "model", ",", "'device_ids'", ")", "else", "torch", ".", "device", "(", "'cuda:0'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# turn on att weights saving during prediction!", "\n", "model", ".", "module", ".", "save_att_weights", "=", "True", "# model that don't have this poperty will just ignore it", "\n", "\n", "for", "section", "in", "sections", ":", "\n", "# Section path", "\n", "            ", "section_dir", "=", "prediction_path", "/", "section", "\n", "section_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "loader", "=", "self", ".", "get_loader", "(", "section", ")", "\n", "if", "loader", ":", "\n", "                    ", "for", "batch", "in", "loader", ":", "\n", "                        ", "features_device", "=", "batch", "[", "'features'", "]", ".", "to", "(", "device", ")", "\n", "preds", "=", "model", "(", "features_device", ")", "\n", "self", ".", "dataset", ".", "save_prediction_batch", "(", "\n", "preds", ",", "batch", "[", "'name'", "]", ",", "batch", "[", "'data_folder'", "]", ",", "section_dir", ",", "features", "=", "batch", "[", "'features'", "]", ".", "numpy", "(", ")", ",", "\n", "model", "=", "model", ",", "orig_folder_names", "=", "orig_folder_names", ")", "\n", "\n", "if", "single_batch", ":", "# stop after first iteration", "\n", "                            ", "break", "\n", "\n", "# Turn of to avoid wasting time\\memory diring other operations", "\n", "", "", "", "", "", "model", ".", "module", ".", "save_att_weights", "=", "False", "\n", "\n", "return", "prediction_path", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.InvalidPatternDefError.__init__": [[27, 32], ["Exception.__init__"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__"], ["def", "__init__", "(", "self", ",", "pattern_name", "=", "''", ",", "message", "=", "''", ")", ":", "\n", "        ", "self", ".", "message", "=", "'Pattern {} is invalid'", ".", "format", "(", "pattern_name", ")", "\n", "if", "message", ":", "\n", "            ", "self", ".", "message", "+=", "': '", "+", "message", "\n", "", "super", "(", ")", ".", "__init__", "(", "self", ".", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.__init__": [[39, 47], ["pattern.wrappers.VisPattern.__init__"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__"], ["def", "__init__", "(", "self", ",", "pattern_file", "=", "None", ",", "view_ids", "=", "False", ",", "panel_classifier", "=", "None", ",", "template_name", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            `template_name` is need to use `panel_classifier` for panel ordering\n        \"\"\"", "\n", "self", ".", "panel_classifier", "=", "panel_classifier", "\n", "self", ".", "template_name", "=", "template_name", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "pattern_file", "=", "pattern_file", ",", "view_ids", "=", "view_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.pattern_as_tensors": [[48, 117], ["pattern_converter.NNSewingPattern.panel_order", "numpy.zeros", "enumerate", "result.append", "RuntimeError", "max", "panel_seqs.append", "panel_translations.append", "panel_rotations.append", "len", "len", "ValueError", "pattern_converter.NNSewingPattern.stitches_as_tags", "numpy.zeros", "enumerate", "numpy.stack", "numpy.array", "len", "result.append", "result.append", "result.append", "result.append", "result.append", "tuple", "len", "pattern_converter.NNSewingPattern.panel_as_numeric", "pattern_converter.NNSewingPattern._empty_panel", "pattern_converter.NNSewingPattern.index", "numpy.stack", "numpy.stack", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.panel_order", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.stitches_as_tags", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.panel_as_numeric", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._empty_panel"], ["", "def", "pattern_as_tensors", "(", "\n", "self", ",", "\n", "pad_panels_to_len", "=", "None", ",", "pad_panels_num", "=", "None", ",", "pad_stitches_num", "=", "None", ",", "\n", "with_placement", "=", "False", ",", "with_stitches", "=", "False", ",", "with_stitch_tags", "=", "False", ")", ":", "\n", "        ", "\"\"\"Return pattern in format suitable for NN inputs/outputs\n            * 3D tensor of panel edges\n            * 3D tensor of panel's 3D translations\n            * 3D tensor of panel's 3D rotations\n        Parameters to control padding: \n            * pad_panels_to_len -- pad the list edges of every panel to this number of edges\n            * pad_panels_num -- pad the list of panels of the pattern to this number of panels\n        \"\"\"", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "            ", "raise", "RuntimeError", "(", "'BasicPattern::Error::pattern_as_tensors() is only supported for Python 3.6+ and Scipy 1.2+'", ")", "\n", "\n", "# get panel ordering", "\n", "", "panel_order", "=", "self", ".", "panel_order", "(", "pad_to_len", "=", "pad_panels_num", ")", "\n", "\n", "# Calculate max edge count among panels -- if not provided", "\n", "panel_lens", "=", "[", "len", "(", "self", ".", "pattern", "[", "'panels'", "]", "[", "name", "]", "[", "'edges'", "]", ")", "if", "name", "is", "not", "None", "else", "0", "for", "name", "in", "panel_order", "]", "\n", "max_len", "=", "pad_panels_to_len", "if", "pad_panels_to_len", "is", "not", "None", "else", "max", "(", "panel_lens", ")", "\n", "\n", "# Main info per panel", "\n", "panel_seqs", ",", "panel_translations", ",", "panel_rotations", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "panel_name", "in", "panel_order", ":", "\n", "            ", "if", "panel_name", "is", "not", "None", ":", "\n", "                ", "edges", ",", "rot", ",", "transl", "=", "self", ".", "panel_as_numeric", "(", "panel_name", ",", "pad_to_len", "=", "max_len", ")", "\n", "", "else", ":", "# empty panel", "\n", "                ", "edges", ",", "rot", ",", "transl", "=", "self", ".", "_empty_panel", "(", "max_len", ")", "\n", "", "panel_seqs", ".", "append", "(", "edges", ")", "\n", "panel_translations", ".", "append", "(", "transl", ")", "\n", "panel_rotations", ".", "append", "(", "rot", ")", "\n", "\n", "# Stitches info. Order of stitches doesn't matter", "\n", "", "stitches_num", "=", "len", "(", "self", ".", "pattern", "[", "'stitches'", "]", ")", "if", "pad_stitches_num", "is", "None", "else", "pad_stitches_num", "\n", "if", "stitches_num", "<", "len", "(", "self", ".", "pattern", "[", "'stitches'", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'BasicPattern::Error::requested number of stitches {} is less the number of stitches {} in pattern {}'", ".", "format", "(", "\n", "stitches_num", ",", "len", "(", "self", ".", "pattern", "[", "'stitches'", "]", ")", ",", "self", ".", "name", "\n", ")", ")", "\n", "\n", "# Padded value is zero allows to treat the whole thing as index array", "\n", "# But need care when using -- as indexing will not crush when padded values are not filtered", "\n", "", "stitches_indicies", "=", "np", ".", "zeros", "(", "(", "2", ",", "stitches_num", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "if", "with_stitch_tags", ":", "\n", "# padding happens automatically, if panels are padded =)", "\n", "            ", "stitch_tags", "=", "self", ".", "stitches_as_tags", "(", ")", "\n", "tags_per_edge", "=", "np", ".", "zeros", "(", "(", "len", "(", "panel_seqs", ")", ",", "len", "(", "panel_seqs", "[", "0", "]", ")", ",", "stitch_tags", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "", "for", "idx", ",", "stitch", "in", "enumerate", "(", "self", ".", "pattern", "[", "'stitches'", "]", ")", ":", "\n", "            ", "for", "id_side", ",", "side", "in", "enumerate", "(", "stitch", ")", ":", "\n", "                ", "panel_id", "=", "panel_order", ".", "index", "(", "side", "[", "'panel'", "]", ")", "\n", "edge_id", "=", "side", "[", "'edge'", "]", "\n", "stitches_indicies", "[", "id_side", "]", "[", "idx", "]", "=", "panel_id", "*", "max_len", "+", "edge_id", "# pattern-level edge id", "\n", "if", "with_stitch_tags", ":", "\n", "                    ", "tags_per_edge", "[", "panel_id", "]", "[", "edge_id", "]", "=", "stitch_tags", "[", "idx", "]", "\n", "\n", "# format result as requested", "\n", "", "", "", "result", "=", "[", "np", ".", "stack", "(", "panel_seqs", ")", ",", "np", ".", "array", "(", "panel_lens", ")", "]", "\n", "result", ".", "append", "(", "len", "(", "self", ".", "pattern", "[", "'panels'", "]", ")", ")", "# actual number of panels ", "\n", "if", "with_placement", ":", "\n", "            ", "result", ".", "append", "(", "np", ".", "stack", "(", "panel_rotations", ")", ")", "\n", "result", ".", "append", "(", "np", ".", "stack", "(", "panel_translations", ")", ")", "\n", "", "if", "with_stitches", ":", "\n", "            ", "result", ".", "append", "(", "stitches_indicies", ")", "\n", "result", ".", "append", "(", "len", "(", "self", ".", "pattern", "[", "'stitches'", "]", ")", ")", "# actual number of stitches", "\n", "", "if", "with_stitch_tags", ":", "\n", "            ", "result", ".", "append", "(", "tags_per_edge", ")", "\n", "\n", "", "return", "tuple", "(", "result", ")", "if", "len", "(", "result", ")", ">", "1", "else", "result", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.pattern_from_tensors": [[118, 188], ["pattern_converter.NNSewingPattern._invalidate_all_values", "pattern_converter.NNSewingPattern.properties.update", "range", "RuntimeError", "len", "len", "range", "print", "pattern_converter.NNSewingPattern.panel_classifier.class_name", "pattern_converter.NNSewingPattern.panel_from_numeric", "in_panel_order.append", "len", "NotImplementedError", "range", "pattern_converter.NNSewingPattern.pattern[].append", "str", "len", "int", "stitch_object.append", "pattern_converter.InvalidPatternDefError", "int", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.panel_classes.PanelClasses.class_name", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.panel_from_numeric"], ["", "def", "pattern_from_tensors", "(", "\n", "self", ",", "pattern_representation", ",", "\n", "panel_rotations", "=", "None", ",", "panel_translations", "=", "None", ",", "stitches", "=", "None", ",", "\n", "padded", "=", "False", ")", ":", "\n", "        ", "\"\"\"Create panels from given panel representation. \n            Assuming that representation uses cm as units\"\"\"", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "            ", "raise", "RuntimeError", "(", "'BasicPattern::Error::pattern_from_tensors() is only supported for Python 3.6+ and Scipy 1.2+'", ")", "\n", "\n", "# Invalidate parameter & constraints values", "\n", "", "self", ".", "_invalidate_all_values", "(", ")", "\n", "\n", "# Assuming the input (from NN) follows the norm -- no updates will be made on further loads", "\n", "self", ".", "properties", ".", "update", "(", "\n", "curvature_coords", "=", "'relative'", ",", "\n", "normalize_panel_translation", "=", "False", ",", "\n", "normalized_edge_loops", "=", "True", ",", "\n", "units_in_meter", "=", "100", "# cm", "\n", ")", "\n", "\n", "# remove existing panels -- start anew", "\n", "self", ".", "pattern", "[", "'panels'", "]", "=", "{", "}", "\n", "in_panel_order", "=", "[", "]", "\n", "new_panel_ids", "=", "[", "None", "]", "*", "len", "(", "pattern_representation", ")", "# for correct stitches assignment in case of empty panels in-between", "\n", "for", "idx", "in", "range", "(", "len", "(", "pattern_representation", ")", ")", ":", "\n", "            ", "panel_name", "=", "'panel_'", "+", "str", "(", "idx", ")", "if", "self", ".", "panel_classifier", "is", "None", "else", "self", ".", "panel_classifier", ".", "class_name", "(", "idx", ")", "\n", "\n", "try", ":", "\n", "                ", "self", ".", "panel_from_numeric", "(", "\n", "panel_name", ",", "\n", "pattern_representation", "[", "idx", "]", ",", "\n", "rotation", "=", "panel_rotations", "[", "idx", "]", "if", "panel_rotations", "is", "not", "None", "else", "None", ",", "\n", "translation", "=", "panel_translations", "[", "idx", "]", "if", "panel_translations", "is", "not", "None", "else", "None", ",", "\n", "padded", "=", "padded", ")", "\n", "in_panel_order", ".", "append", "(", "panel_name", ")", "\n", "new_panel_ids", "[", "idx", "]", "=", "len", "(", "in_panel_order", ")", "-", "1", "\n", "", "except", "EmptyPanelError", "as", "e", ":", "\n", "# Found an empty panel in the input -- moving on to the next one", "\n", "                ", "pass", "\n", "\n", "", "", "self", ".", "pattern", "[", "'panel_order'", "]", "=", "in_panel_order", "# save the incoming panel order", "\n", "\n", "# remove existing stitches -- start anew", "\n", "self", ".", "pattern", "[", "'stitches'", "]", "=", "[", "]", "\n", "if", "stitches", "is", "not", "None", "and", "len", "(", "stitches", ")", ">", "0", ":", "\n", "            ", "if", "not", "padded", ":", "\n", "# TODO implement mapping of pattern-level edge ids -> (panel_id, edge_id) for panels with different number of edges", "\n", "                ", "raise", "NotImplementedError", "(", "'BasicPattern::Recovering stitches for unpadded pattern is not supported'", ")", "\n", "\n", "", "edges_per_panel", "=", "pattern_representation", ".", "shape", "[", "1", "]", "\n", "for", "stitch_id", "in", "range", "(", "stitches", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "stitch_object", "=", "[", "]", "\n", "if", "stitches", "[", "0", "]", "[", "stitch_id", "]", "==", "0", "and", "stitches", "[", "1", "]", "[", "stitch_id", "]", "==", "0", ":", "\n", "# This is padding -- skip", "\n", "                    ", "continue", "\n", "", "for", "side_id", "in", "range", "(", "stitches", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "pattern_edge_id", "=", "stitches", "[", "side_id", "]", "[", "stitch_id", "]", "\n", "in_panel_id", "=", "int", "(", "pattern_edge_id", "//", "edges_per_panel", ")", "\n", "\n", "if", "in_panel_id", ">", "(", "len", "(", "pattern_representation", ")", "-", "1", ")", "or", "new_panel_ids", "[", "in_panel_id", "]", "is", "None", ":", "# validity of stitch definition", "\n", "                        ", "raise", "InvalidPatternDefError", "(", "self", ".", "name", ",", "'stitch {} referes to non-existing panel {}'", ".", "format", "(", "stitch_id", ",", "in_panel_id", ")", ")", "\n", "", "stitch_object", ".", "append", "(", "\n", "{", "\n", "\"panel\"", ":", "in_panel_order", "[", "new_panel_ids", "[", "in_panel_id", "]", "]", ",", "# map to names of filteres non-empty panels", "\n", "\"edge\"", ":", "int", "(", "pattern_edge_id", "%", "edges_per_panel", ")", ",", "\n", "}", "\n", ")", "\n", "", "self", ".", "pattern", "[", "'stitches'", "]", ".", "append", "(", "stitch_object", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'BasicPattern::Warning::{}::Panels were updated but new stitches info was not provided. Stitches are removed.'", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.panel_as_numeric": [[189, 227], ["numpy.array", "pattern_converter.NNSewingPattern._panel_universal_transtation", "scipy_rot.from_euler", "numpy.array", "RuntimeError", "pattern_converter.NNSewingPattern._edge_as_vector", "range", "scipy_rot.from_euler.as_quat", "numpy.stack", "len", "ValueError", "len", "edge_sequence.append", "numpy.zeros_like", "len"], "methods", ["None"], ["", "", "def", "panel_as_numeric", "(", "self", ",", "panel_name", ",", "pad_to_len", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Represent panel as sequence of edges with each edge as vector of fixed length plus the info on panel placement.\n            * Edges are returned in additive manner: \n                each edge as a vector that needs to be added to previous edges to get a 2D coordinate of end vertex\n            * Panel translation is represented with \"universal\" heuristic -- as translation of midpoint of the top-most bounding box edge\n            * Panel rotation is returned as is but in quaternions\n\n            NOTE: \n                The conversion uses the panels edges order as is, and \n                DOES NOT take resposibility to ensure the same traversal order of panel edges is used across datapoints of similar garment type.\n                (the latter is done on sampling or on load)\n        \"\"\"", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "            ", "raise", "RuntimeError", "(", "'BasicPattern::Error::panel_as_numeric() is only supported for Python 3.6+ and Scipy 1.2+'", ")", "\n", "\n", "", "panel", "=", "self", ".", "pattern", "[", "'panels'", "]", "[", "panel_name", "]", "\n", "vertices", "=", "np", ".", "array", "(", "panel", "[", "'vertices'", "]", ")", "\n", "\n", "# -- Construct the edge sequence in the recovered order --", "\n", "edge_sequence", "=", "[", "self", ".", "_edge_as_vector", "(", "vertices", ",", "edge", ")", "for", "edge", "in", "panel", "[", "'edges'", "]", "]", "\n", "\n", "# padding if requested", "\n", "if", "pad_to_len", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "edge_sequence", ")", ">", "pad_to_len", ":", "\n", "                ", "raise", "ValueError", "(", "'BasicPattern::{}::panel {} cannot fit into requested length: {} edges to fit into {}'", ".", "format", "(", "\n", "self", ".", "name", ",", "panel_name", ",", "len", "(", "edge_sequence", ")", ",", "pad_to_len", ")", ")", "\n", "", "for", "_", "in", "range", "(", "len", "(", "edge_sequence", ")", ",", "pad_to_len", ")", ":", "\n", "                ", "edge_sequence", ".", "append", "(", "np", ".", "zeros_like", "(", "edge_sequence", "[", "0", "]", ")", ")", "\n", "\n", "# ----- 3D placement convertion  ------", "\n", "# Global Translation (more-or-less stable across designs)", "\n", "", "", "translation", ",", "_", "=", "self", ".", "_panel_universal_transtation", "(", "panel_name", ")", "\n", "\n", "panel_rotation", "=", "scipy_rot", ".", "from_euler", "(", "'xyz'", ",", "panel", "[", "'rotation'", "]", ",", "degrees", "=", "True", ")", "# pattern rotation follows the Maya convention: intrinsic xyz Euler Angles", "\n", "rotation_representation", "=", "np", ".", "array", "(", "panel_rotation", ".", "as_quat", "(", ")", ")", "\n", "\n", "return", "np", ".", "stack", "(", "edge_sequence", ",", "axis", "=", "0", ")", ",", "rotation_representation", ",", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.panel_from_numeric": [[228, 289], ["numpy.array", "range", "all", "numpy.vstack.tolist", "RuntimeError", "copy.deepcopy", "numpy.vstack", "edges.append", "len", "numpy.isclose", "edges.append", "print", "numpy.vstack", "edges.append", "scipy_rot.from_quat", "scipy_rot.from_quat.as_euler().tolist", "pattern_converter.NNSewingPattern._panel_universal_transtation", "numpy.append", "scipy_rot.from_euler", "translation.tolist", "numpy.all", "len", "pattern_converter.EmptyPanelError", "len", "pattern_converter.NNSewingPattern._edge_dict", "pattern_converter.NNSewingPattern._edge_dict", "pattern_converter.NNSewingPattern._edge_dict", "scipy_rot.from_euler.as_matrix().dot", "numpy.isclose", "scipy_rot.from_quat.as_euler", "scipy_rot.from_euler.as_matrix"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._edge_dict", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._edge_dict", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._edge_dict"], ["", "def", "panel_from_numeric", "(", "self", ",", "panel_name", ",", "edge_sequence", ",", "rotation", "=", "None", ",", "translation", "=", "None", ",", "padded", "=", "False", ")", ":", "\n", "        ", "\"\"\" Updates or creates panel from NN-compatible numeric representation\n            * Set panel vertex (local) positions & edge dictionaries from given edge sequence\n            * Set panel 3D translation and orientation if given. Accepts 6-element rotation representation -- first two colomns of rotation matrix\"\"\"", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "            ", "raise", "RuntimeError", "(", "'BasicPattern::Error::panel_from_numeric() is only supported for Python 3.6+ and Scipy 1.2+'", ")", "\n", "\n", "", "if", "padded", ":", "\n", "# edge sequence might be ending with pad values or the whole panel might be a mock object", "\n", "            ", "selection", "=", "~", "np", ".", "all", "(", "np", ".", "isclose", "(", "edge_sequence", ",", "0", ",", "atol", "=", "1.5", ")", ",", "axis", "=", "1", ")", "# only non-zero rows", "\n", "edge_sequence", "=", "edge_sequence", "[", "selection", "]", "\n", "if", "len", "(", "edge_sequence", ")", "<", "3", ":", "\n", "# 0, 1, 2 edges are not enough to form a panel -> assuming this is a mock panel", "\n", "                ", "raise", "EmptyPanelError", "(", "'{}::EmptyPanelError::Supplied <{}> is empty'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "panel_name", ")", ")", "\n", "\n", "", "", "if", "panel_name", "not", "in", "self", ".", "pattern", "[", "'panels'", "]", ":", "\n", "# add new panel! =)", "\n", "            ", "self", ".", "pattern", "[", "'panels'", "]", "[", "panel_name", "]", "=", "copy", ".", "deepcopy", "(", "panel_spec_template", ")", "\n", "\n", "# ---- Convert edge representation ----", "\n", "", "vertices", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", "]", ")", "# first vertex is always at origin", "\n", "edges", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "edge_sequence", ")", "-", "1", ")", ":", "\n", "            ", "edge_info", "=", "edge_sequence", "[", "idx", "]", "\n", "next_vert", "=", "vertices", "[", "idx", "]", "+", "edge_info", "[", ":", "2", "]", "\n", "vertices", "=", "np", ".", "vstack", "(", "[", "vertices", ",", "next_vert", "]", ")", "\n", "edges", ".", "append", "(", "self", ".", "_edge_dict", "(", "idx", ",", "idx", "+", "1", ",", "edge_info", "[", "2", ":", "4", "]", ")", ")", "\n", "\n", "# last edge is a special case", "\n", "", "idx", "=", "len", "(", "vertices", ")", "-", "1", "\n", "edge_info", "=", "edge_sequence", "[", "-", "1", "]", "\n", "fin_vert", "=", "vertices", "[", "-", "1", "]", "+", "edge_info", "[", ":", "2", "]", "\n", "if", "all", "(", "np", ".", "isclose", "(", "fin_vert", ",", "0", ",", "atol", "=", "3", ")", ")", ":", "# 3 cm per coordinate is a tolerable error", "\n", "            ", "edges", ".", "append", "(", "self", ".", "_edge_dict", "(", "idx", ",", "0", ",", "edge_info", "[", "2", ":", "4", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'BasicPattern::Warning::{} with panel {}::Edge sequence do not return to origin. '", "\n", "'Creating extra vertex'", ".", "format", "(", "self", ".", "name", ",", "panel_name", ")", ")", "\n", "vertices", "=", "np", ".", "vstack", "(", "[", "vertices", ",", "fin_vert", "]", ")", "\n", "edges", ".", "append", "(", "self", ".", "_edge_dict", "(", "idx", ",", "idx", "+", "1", ",", "edge_info", "[", "2", ":", "4", "]", ")", ")", "\n", "\n", "# update panel itself", "\n", "", "panel", "=", "self", ".", "pattern", "[", "'panels'", "]", "[", "panel_name", "]", "\n", "panel", "[", "'vertices'", "]", "=", "vertices", ".", "tolist", "(", ")", "\n", "panel", "[", "'edges'", "]", "=", "edges", "\n", "\n", "# ----- 3D placement setup --------", "\n", "if", "rotation", "is", "not", "None", ":", "\n", "            ", "rotation_obj", "=", "scipy_rot", ".", "from_quat", "(", "rotation", ")", "\n", "panel", "[", "'rotation'", "]", "=", "rotation_obj", ".", "as_euler", "(", "'xyz'", ",", "degrees", "=", "True", ")", ".", "tolist", "(", ")", "\n", "\n", "", "if", "translation", "is", "not", "None", ":", "\n", "# we are getting translation of 3D top-midpoint (aka 'universal translation')", "\n", "# convert it to the translation from the origin ", "\n", "            ", "_", ",", "transl_origin", "=", "self", ".", "_panel_universal_transtation", "(", "panel_name", ")", "\n", "\n", "shift", "=", "np", ".", "append", "(", "transl_origin", ",", "0", ")", "# to 3D", "\n", "panel_rotation", "=", "scipy_rot", ".", "from_euler", "(", "'xyz'", ",", "panel", "[", "'rotation'", "]", ",", "degrees", "=", "True", ")", "\n", "comenpensating_shift", "=", "-", "panel_rotation", ".", "as_matrix", "(", ")", ".", "dot", "(", "shift", ")", "\n", "translation", "=", "translation", "+", "comenpensating_shift", "\n", "\n", "panel", "[", "'translation'", "]", "=", "translation", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.stitches_as_tags": [[290, 320], ["numpy.array", "numpy.empty", "enumerate", "stitch_tags.append", "numpy.array", "numpy.array.mean", "pattern_converter.NNSewingPattern._point_in_3D", "numpy.empty.mean"], "methods", ["None"], ["", "", "def", "stitches_as_tags", "(", "self", ",", "panel_order", "=", "None", ",", "pad_to_len", "=", "None", ")", ":", "\n", "        ", "\"\"\"For every stitch, assign an approximate identifier (tag) of the stitch to the edges that are part of that stitch\n            * tags are calculated as ~3D locations of the stitch when the garment is draped on the body in T-pose\n            * It's calculated as average of the participating edges' endpoint -- Although very approximate, this should be enough\n            to separate stitches from each other and from free edges\n        Return\n            * List of stitch tags for every stitch in the panel\n        \"\"\"", "\n", "# NOTE stitch tags values are independent from the choice of origin & edge order within a panel", "\n", "# iterate over stitches", "\n", "stitch_tags", "=", "[", "]", "\n", "for", "stitch", "in", "self", ".", "pattern", "[", "'stitches'", "]", ":", "\n", "            ", "edge_tags", "=", "np", ".", "empty", "(", "(", "2", ",", "3", ")", ")", "# two 3D tags per edge", "\n", "for", "side_idx", ",", "side", "in", "enumerate", "(", "stitch", ")", ":", "\n", "                ", "panel", "=", "self", ".", "pattern", "[", "'panels'", "]", "[", "side", "[", "'panel'", "]", "]", "\n", "edge_endpoints", "=", "panel", "[", "'edges'", "]", "[", "side", "[", "'edge'", "]", "]", "[", "'endpoints'", "]", "\n", "# get 2D locations of participating vertices -- per panel", "\n", "edge_endpoints", "=", "np", ".", "array", "(", "[", "\n", "panel", "[", "'vertices'", "]", "[", "edge_endpoints", "[", "side", "]", "]", "for", "side", "in", "[", "0", ",", "1", "]", "\n", "]", ")", "\n", "# Get edges midpoints (2D)", "\n", "edge_mean", "=", "edge_endpoints", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "# calculate their 3D locations", "\n", "edge_tags", "[", "side_idx", "]", "=", "self", ".", "_point_in_3D", "(", "edge_mean", ",", "panel", "[", "'rotation'", "]", ",", "panel", "[", "'translation'", "]", ")", "\n", "\n", "# take average", "\n", "", "stitch_tags", ".", "append", "(", "edge_tags", ".", "mean", "(", "axis", "=", "0", ")", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "stitch_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.stitches_as_3D_pairs": [[321, 410], ["numpy.random.default_rng", "pattern_converter.NNSewingPattern._3D_edges_per_panel", "set", "ValueError", "pairs.append", "mask.append", "set.add", "range", "pattern_converter.NNSewingPattern.panel_order", "range", "numpy.random.default_rng.permutation", "len", "numpy.random.default_rng.integers", "numpy.concatenate", "len", "len", "pairs.append", "mask.append", "len", "len", "numpy.stack", "numpy.array", "len", "pair.append", "print", "len", "pairs.append", "mask.append", "numpy.stack", "numpy.array", "pair_names.append", "pair_edges.append", "numpy.concatenate", "numpy.random.default_rng.integers", "numpy.random.default_rng.integers", "len", "len", "numpy.random.default_rng.integers", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._3D_edges_per_panel", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.panel_order"], ["", "def", "stitches_as_3D_pairs", "(", "self", ",", "stitch_pairs_num", "=", "None", ",", "non_stitch_pairs_num", "=", "None", ",", "randomize_edges", "=", "False", ",", "randomize_list_order", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            Return a collection of edge pairs with each pair marked as stitched or not, with \n            edges represented as 3D vertex positions and (relative) curvature values.\n            All stitched pairs that exist in the pattern are guaranteed to be included. \n            It's not guaranteed that the pairs would be unique (hence any number of pairs could be requested,\n            regardless of the total number of unique pairs)\n\n            * stitch_pairs -- number of edge pairs that are part of a stitch to return. Should be larger then the number of stitches.\n            * non_stitch_pairs -- total number of non-connected edge pairs to return.\n            * randomize_edges -- to randomize direction of edges and the order within each pair.\n            * randomize_list_order -- to randomize the list of \n        \"\"\"", "\n", "\n", "if", "stitch_pairs_num", "is", "not", "None", "and", "stitch_pairs_num", "<", "len", "(", "self", ".", "pattern", "[", "'stitches'", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'{}::{}::Error::Requested less edge pairs ({}) that there are stitches ({})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "name", ",", "stitch_pairs_num", ",", "len", "(", "self", ".", "pattern", "[", "'stitches'", "]", ")", ")", ")", "\n", "\n", "", "rng", "=", "default_rng", "(", ")", "# new Numpy random number generator API", "\n", "\n", "# collect edges representations per panels", "\n", "edges_3d", "=", "self", ".", "_3D_edges_per_panel", "(", "randomize_edges", ")", "\n", "\n", "# construct edge pairs (stitched & some random selection of non-stitched)", "\n", "pairs", "=", "[", "]", "\n", "mask", "=", "[", "]", "\n", "\n", "# ---- Stitched ----", "\n", "stitched_pairs_ids", "=", "set", "(", ")", "\n", "# stitches", "\n", "for", "stitch", "in", "self", ".", "pattern", "[", "'stitches'", "]", ":", "\n", "            ", "pair", "=", "[", "]", "\n", "try", ":", "\n", "                ", "for", "side", "in", "[", "0", ",", "1", "]", ":", "\n", "                    ", "pair", ".", "append", "(", "edges_3d", "[", "stitch", "[", "side", "]", "[", "'panel'", "]", "]", "[", "stitch", "[", "side", "]", "[", "'edge'", "]", "]", ")", "\n", "", "", "except", "IndexError", ":", "\n", "# this might happen on incorrectly predicted panels", "\n", "                ", "print", "(", "f'Warning::{self.name}::Missing edge while constructing stitch pairs'", ")", "\n", "continue", "\n", "\n", "", "if", "randomize_edges", "and", "rng", ".", "integers", "(", "2", ")", ":", "# randomly change the order in pair", "\n", "# flip the edge", "\n", "                ", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", "=", "pair", "[", "1", "]", ",", "pair", "[", "0", "]", "\n", "\n", "", "pairs", ".", "append", "(", "np", ".", "concatenate", "(", "pair", ")", ")", "\n", "mask", ".", "append", "(", "True", ")", "\n", "stitched_pairs_ids", ".", "add", "(", "(", "\n", "(", "stitch", "[", "0", "]", "[", "'panel'", "]", ",", "stitch", "[", "0", "]", "[", "'edge'", "]", ")", ",", "\n", "(", "stitch", "[", "1", "]", "[", "'panel'", "]", ",", "stitch", "[", "1", "]", "[", "'edge'", "]", ")", "\n", ")", ")", "\n", "", "if", "stitch_pairs_num", "is", "not", "None", "and", "stitch_pairs_num", ">", "len", "(", "stitched_pairs_ids", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "len", "(", "stitched_pairs_ids", ")", ",", "stitch_pairs_num", ")", ":", "\n", "# choose of the existing pairs to duplicate", "\n", "                ", "pairs", ".", "append", "(", "pairs", "[", "rng", ".", "integers", "(", "len", "(", "stitched_pairs_ids", ")", ")", "]", ")", "\n", "mask", ".", "append", "(", "True", ")", "\n", "\n", "", "", "if", "non_stitch_pairs_num", "is", "not", "None", ":", "\n", "            ", "panel_order", "=", "self", ".", "panel_order", "(", ")", "\n", "if", "len", "(", "pairs", ")", "<", "stitch_pairs_num", ":", "\n", "# e.g., no stitches constructed at all", "\n", "                ", "non_stitch_pairs_num", "+=", "stitch_pairs_num", "-", "len", "(", "pairs", ")", "\n", "", "for", "_", "in", "range", "(", "non_stitch_pairs_num", ")", ":", "\n", "                ", "while", "True", ":", "\n", "# random pairs", "\n", "                    ", "pair_names", ",", "pair_edges", "=", "[", "]", ",", "[", "]", "\n", "for", "_", "in", "[", "0", ",", "1", "]", ":", "\n", "                        ", "pair_names", ".", "append", "(", "panel_order", "[", "rng", ".", "integers", "(", "len", "(", "panel_order", ")", ")", "]", ")", "\n", "pair_edges", ".", "append", "(", "rng", ".", "integers", "(", "len", "(", "self", ".", "pattern", "[", "'panels'", "]", "[", "pair_names", "[", "-", "1", "]", "]", "[", "'edges'", "]", ")", ")", ")", "\n", "\n", "", "if", "pair_names", "[", "0", "]", "==", "pair_names", "[", "1", "]", "and", "pair_edges", "[", "0", "]", "==", "pair_edges", "[", "1", "]", ":", "\n", "                        ", "continue", "# try again", "\n", "\n", "# check if pair is already used", "\n", "", "pair_id", "=", "(", "(", "pair_names", "[", "0", "]", ",", "pair_edges", "[", "0", "]", ")", ",", "(", "pair_names", "[", "1", "]", ",", "pair_edges", "[", "1", "]", ")", ")", "\n", "if", "pair_id", "in", "stitched_pairs_ids", "or", "(", "pair_id", "[", "1", "]", ",", "pair_id", "[", "0", "]", ")", "in", "stitched_pairs_ids", ":", "\n", "                        ", "continue", "# try again -- accudentially came up with a stitch", "\n", "\n", "# success! Use it", "\n", "", "pairs", ".", "append", "(", "np", ".", "concatenate", "(", "[", "edges_3d", "[", "pair_names", "[", "0", "]", "]", "[", "pair_edges", "[", "0", "]", "]", ",", "edges_3d", "[", "pair_names", "[", "1", "]", "]", "[", "pair_edges", "[", "1", "]", "]", "]", ")", ")", "\n", "mask", ".", "append", "(", "False", ")", "# at this point, all pairs are non-stitched!", "\n", "\n", "break", "\n", "\n", "", "", "", "if", "randomize_list_order", ":", "\n", "            ", "permutation", "=", "rng", ".", "permutation", "(", "len", "(", "pairs", ")", ")", "\n", "return", "np", ".", "stack", "(", "pairs", ")", "[", "permutation", "]", ",", "np", ".", "array", "(", "mask", ",", "dtype", "=", "bool", ")", "[", "permutation", "]", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "stack", "(", "pairs", ")", ",", "np", ".", "array", "(", "mask", ",", "dtype", "=", "bool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.stitches_from_pair_classifier": [[411, 457], ["model.eval", "pattern_converter.NNSewingPattern.all_edge_pairs", "torch.tensor", "torch.tensor", "model", "torch.sigmoid", "torch.round", "torch.round.nonzero().squeeze().cpu().tolist", "set", "range", "len", "len", "range", "len", "torch.round.nonzero().squeeze().cpu", "len", "pattern_converter.NNSewingPattern.pattern[].append", "range", "pattern_converter.NNSewingPattern._stitch_entry", "len", "enumerate", "torch.round.nonzero().squeeze", "set.add", "preds[].cpu().tolist", "torch.round.nonzero", "preds[].cpu"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.metrics.composed_loss.ComposedPatternLoss.eval", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.all_edge_pairs", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._stitch_entry"], ["", "", "def", "stitches_from_pair_classifier", "(", "self", ",", "model", ",", "data_stats", ")", ":", "\n", "        ", "\"\"\" Update stitches in the pattern by predictions of edge pairs classification model\"\"\"", "\n", "\n", "self", ".", "pattern", "[", "'stitches'", "]", "=", "[", "]", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "edge_pairs_list", ",", "pairs_mapping", ",", "_", "=", "self", ".", "all_edge_pairs", "(", "device", "=", "model", ".", "device_ids", "[", "0", "]", ")", "\n", "\n", "# apply appropriate scaling", "\n", "shift", "=", "torch", ".", "tensor", "(", "data_stats", "[", "'f_shift'", "]", ",", "device", "=", "model", ".", "device_ids", "[", "0", "]", ")", "\n", "scale", "=", "torch", ".", "tensor", "(", "data_stats", "[", "'f_scale'", "]", ",", "device", "=", "model", ".", "device_ids", "[", "0", "]", ")", "\n", "edge_pairs_list", "=", "(", "edge_pairs_list", "-", "shift", ")", "/", "scale", "\n", "\n", "preds", "=", "model", "(", "edge_pairs_list", ")", "\n", "preds_probability", "=", "torch", ".", "sigmoid", "(", "preds", ")", "\n", "preds_class", "=", "torch", ".", "round", "(", "preds_probability", ")", "\n", "\n", "# record stitches", "\n", "stitched_ids", "=", "preds_class", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "if", "len", "(", "stitched_ids", ")", ">", "0", ":", "# some stitches found!", "\n", "            ", "for", "stitch_idx", "in", "range", "(", "len", "(", "stitched_ids", ")", ")", ":", "\n", "                ", "edge_pair", "=", "pairs_mapping", "[", "stitch_idx", "]", "\n", "\n", "self", ".", "pattern", "[", "'stitches'", "]", ".", "append", "(", "self", ".", "_stitch_entry", "(", "\n", "edge_pair", "[", "0", "]", "[", "0", "]", ",", "edge_pair", "[", "0", "]", "[", "1", "]", ",", "\n", "edge_pair", "[", "1", "]", "[", "0", "]", ",", "edge_pair", "[", "1", "]", "[", "1", "]", ",", "\n", "score", "=", "preds", "[", "stitched_ids", "[", "stitch_idx", "]", "]", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", ")", ")", "\n", "\n", "# Post-analysis: check if any of the edges parttake in multiple stitches & only leave the stronger ones", "\n", "", "", "to_remove", "=", "set", "(", ")", "\n", "for", "base_stitch_id", "in", "range", "(", "len", "(", "self", ".", "pattern", "[", "'stitches'", "]", ")", ")", ":", "\n", "            ", "base_stitch", "=", "self", ".", "pattern", "[", "'stitches'", "]", "[", "base_stitch_id", "]", "\n", "for", "side", "in", "[", "0", ",", "1", "]", ":", "\n", "                ", "base_edge", "=", "base_stitch", "[", "side", "]", "\n", "for", "other_stitch_id", "in", "range", "(", "base_stitch_id", "+", "1", ",", "len", "(", "self", ".", "pattern", "[", "'stitches'", "]", ")", ")", ":", "\n", "                    ", "curr_stitch", "=", "self", ".", "pattern", "[", "'stitches'", "]", "[", "other_stitch_id", "]", "\n", "if", "(", "base_edge", "[", "'panel'", "]", "==", "curr_stitch", "[", "0", "]", "[", "'panel'", "]", "and", "base_edge", "[", "'edge'", "]", "==", "curr_stitch", "[", "0", "]", "[", "'edge'", "]", "\n", "or", "base_edge", "[", "'panel'", "]", "==", "curr_stitch", "[", "1", "]", "[", "'panel'", "]", "and", "base_edge", "[", "'edge'", "]", "==", "curr_stitch", "[", "1", "]", "[", "'edge'", "]", ")", ":", "\n", "# same edge, multiple stitches!", "\n", "# score is the same for both sides, so it doesn't matter which one to take", "\n", "                        ", "to_remove", ".", "add", "(", "\n", "base_stitch_id", "if", "base_stitch", "[", "0", "]", "[", "'score'", "]", "<", "curr_stitch", "[", "0", "]", "[", "'score'", "]", "else", "other_stitch_id", ")", "\n", "\n", "", "", "", "", "if", "len", "(", "to_remove", ")", ":", "\n", "            ", "self", ".", "pattern", "[", "'stitches'", "]", "=", "[", "value", "for", "i", ",", "value", "in", "enumerate", "(", "self", ".", "pattern", "[", "'stitches'", "]", ")", "if", "i", "not", "in", "to_remove", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.all_edge_pairs": [[458, 500], ["pattern_converter.NNSewingPattern._3D_edges_per_panel", "len", "pattern_converter.NNSewingPattern._stitches_as_set", "range", "torch.cat", "pattern_converter.NNSewingPattern.panel_order", "numpy.array", "range", "len", "pattern_converter.InvalidPatternDefError", "pattern_converter.NNSewingPattern.panel_order", "numpy.array", "numpy.indices", "numpy.concatenate", "torch.from_numpy().float().to", "edge_pairs.view.view.view", "torch.cat.append", "range", "pattern_converter.NNSewingPattern.panel_order", "len", "range", "len", "len", "torch.from_numpy().float", "len", "pairs_mapping.append", "mask.append", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._3D_edges_per_panel", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._stitches_as_set", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.panel_order", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.panel_order", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.panel_order"], ["", "", "def", "all_edge_pairs", "(", "self", ",", "device", "=", "'cpu'", ")", ":", "\n", "        ", "\"\"\"\n            Construct all possible edge pairs for given sewing pattern \n            with GT stitching labels if available and requested in `with_labels`\n        \"\"\"", "\n", "edges_3D", "=", "self", ".", "_3D_edges_per_panel", "(", ")", "\n", "num_panels", "=", "len", "(", "self", ".", "panel_order", "(", ")", ")", "\n", "\n", "stitch_set", "=", "self", ".", "_stitches_as_set", "(", ")", "\n", "mask", "=", "[", "]", "\n", "\n", "edge_pairs_list", "=", "[", "]", "\n", "pairs_mapping", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_panels", ")", ":", "\n", "            ", "panel_i", "=", "self", ".", "panel_order", "(", ")", "[", "i", "]", "\n", "edges_i", "=", "np", ".", "array", "(", "edges_3D", "[", "panel_i", "]", ")", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "num_panels", ")", ":", "# assuming panels are not connected to themselves", "\n", "                ", "panel_j", "=", "self", ".", "panel_order", "(", ")", "[", "j", "]", "\n", "edges_j", "=", "np", ".", "array", "(", "edges_3D", "[", "panel_j", "]", ")", "\n", "\n", "rows", ",", "cols", "=", "np", ".", "indices", "(", "(", "len", "(", "edges_i", ")", ",", "len", "(", "edges_j", ")", ")", ")", "\n", "edge_pairs", "=", "np", ".", "concatenate", "(", "[", "edges_i", "[", "rows", "]", ",", "edges_j", "[", "cols", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# record the pair", "\n", "edge_pairs", "=", "torch", ".", "from_numpy", "(", "edge_pairs", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "edge_pairs", "=", "edge_pairs", ".", "view", "(", "-", "1", ",", "edge_pairs", ".", "shape", "[", "-", "1", "]", ")", "# flatten to the list of pairs", "\n", "edge_pairs_list", ".", "append", "(", "edge_pairs", ")", "\n", "\n", "# record backward mapping & labels", "\n", "for", "row_idx", "in", "range", "(", "len", "(", "edges_i", ")", ")", ":", "\n", "                    ", "for", "col_idx", "in", "range", "(", "len", "(", "edges_j", ")", ")", ":", "\n", "                        ", "pair_id", "=", "(", "(", "panel_i", ",", "row_idx", ")", ",", "(", "panel_j", ",", "col_idx", ")", ")", "\n", "pairs_mapping", ".", "append", "(", "pair_id", ")", "\n", "\n", "mask", ".", "append", "(", "pair_id", "in", "stitch_set", "or", "(", "pair_id", "[", "1", "]", ",", "pair_id", "[", "0", "]", ")", "in", "stitch_set", ")", "\n", "\n", "", "", "", "", "if", "len", "(", "edge_pairs_list", ")", "==", "0", ":", "\n", "            ", "raise", "InvalidPatternDefError", "(", "self", ".", "name", ",", "'No edges to construct'", ")", "\n", "\n", "", "edge_pairs_list", "=", "torch", ".", "cat", "(", "edge_pairs_list", ")", "\n", "\n", "return", "edge_pairs_list", ",", "pairs_mapping", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._stitches_as_set": [[501, 509], ["set", "set.add"], "methods", ["None"], ["", "def", "_stitches_as_set", "(", "self", ")", ":", "\n", "        ", "stitches_set", "=", "set", "(", ")", "\n", "for", "stitch", "in", "self", ".", "pattern", "[", "'stitches'", "]", ":", "\n", "            ", "stitches_set", ".", "add", "(", "(", "\n", "(", "stitch", "[", "0", "]", "[", "'panel'", "]", ",", "stitch", "[", "0", "]", "[", "'edge'", "]", ")", ",", "\n", "(", "stitch", "[", "1", "]", "[", "'panel'", "]", ",", "stitch", "[", "1", "]", "[", "'edge'", "]", ")", "\n", ")", ")", "\n", "", "return", "stitches_set", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._edge_dict": [[510, 516], ["all", "curvature.tolist", "numpy.isclose"], "methods", ["None"], ["", "def", "_edge_dict", "(", "self", ",", "vstart", ",", "vend", ",", "curvature", ")", ":", "\n", "        ", "\"\"\"Convert given info into the proper edge dictionary representation\"\"\"", "\n", "edge_dict", "=", "{", "'endpoints'", ":", "[", "vstart", ",", "vend", "]", "}", "\n", "if", "not", "all", "(", "np", ".", "isclose", "(", "curvature", ",", "0", ",", "atol", "=", "0.01", ")", ")", ":", "# 0.01 is tolerable error for local curvature coords", "\n", "            ", "edge_dict", "[", "'curvature'", "]", "=", "curvature", ".", "tolist", "(", ")", "\n", "", "return", "edge_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._3D_edges_per_panel": [[517, 553], ["pattern_converter.NNSewingPattern.panel_order", "numpy.random.default_rng", "numpy.array", "pattern.rotation.euler_xyz_to_R", "numpy.stack", "edges_3d[].append", "pattern_converter.NNSewingPattern._point_in_3D", "numpy.array", "numpy.random.default_rng.integers", "numpy.concatenate", "range", "len", "edge_verts.ravel"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.panel_order"], ["", "def", "_3D_edges_per_panel", "(", "self", ",", "randomize_direction", "=", "False", ")", ":", "\n", "        ", "\"\"\" \n            Return all edges in the pattern (grouped by panels)\n            represented as 3D vertex positions and (relative) curvature values.\n\n            * 'randomize_direction' -- request to randomly flip the direction of some edges\n        \"\"\"", "\n", "if", "randomize_direction", ":", "\n", "            ", "rng", "=", "default_rng", "(", ")", "# new Numpy random number generator API", "\n", "\n", "# collect edges representations per panels", "\n", "", "edges_3d", "=", "{", "}", "\n", "for", "panel_name", "in", "self", ".", "panel_order", "(", ")", ":", "\n", "            ", "edges_3d", "[", "panel_name", "]", "=", "[", "]", "\n", "panel", "=", "self", ".", "pattern", "[", "'panels'", "]", "[", "panel_name", "]", "\n", "vertices", "=", "np", ".", "array", "(", "panel", "[", "'vertices'", "]", ")", "\n", "\n", "# To 3D", "\n", "rot_matrix", "=", "rotation_tools", ".", "euler_xyz_to_R", "(", "panel", "[", "'rotation'", "]", ")", "\n", "vertices_3d", "=", "np", ".", "stack", "(", "[", "self", ".", "_point_in_3D", "(", "vertices", "[", "i", "]", ",", "rot_matrix", ",", "panel", "[", "'translation'", "]", ")", "for", "i", "in", "range", "(", "len", "(", "vertices", ")", ")", "]", ")", "\n", "\n", "# edge feature", "\n", "for", "edge_dict", "in", "panel", "[", "'edges'", "]", ":", "\n", "                ", "edge_verts", "=", "vertices_3d", "[", "edge_dict", "[", "'endpoints'", "]", "]", "# ravel does not copy elements", "\n", "curvature", "=", "np", ".", "array", "(", "edge_dict", "[", "'curvature'", "]", ")", "if", "'curvature'", "in", "edge_dict", "else", "[", "0", ",", "0", "]", "\n", "\n", "if", "randomize_direction", "and", "rng", ".", "integers", "(", "2", ")", ":", "\n", "# flip the edge", "\n", "                    ", "edge_verts", "[", "[", "0", ",", "1", "]", ",", ":", "]", "=", "edge_verts", "[", "[", "1", ",", "0", "]", ",", ":", "]", "\n", "\n", "curvature", "[", "0", "]", "=", "1", "-", "curvature", "[", "0", "]", "if", "curvature", "[", "0", "]", "else", "0", "\n", "curvature", "[", "1", "]", "=", "-", "curvature", "[", "1", "]", "\n", "\n", "", "edges_3d", "[", "panel_name", "]", ".", "append", "(", "np", ".", "concatenate", "(", "[", "edge_verts", ".", "ravel", "(", ")", ",", "curvature", "]", ")", ")", "\n", "\n", "", "", "return", "edges_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._stitch_entry": [[554, 566], ["None"], "methods", ["None"], ["", "def", "_stitch_entry", "(", "self", ",", "panel_1", ",", "edge_1", ",", "panel_2", ",", "edge_2", ",", "score", "=", "None", ")", ":", "\n", "        ", "\"\"\" element of a stitch list with given parameters (all need to be json-serializible)\"\"\"", "\n", "return", "[", "\n", "{", "\n", "'panel'", ":", "panel_1", ",", "\n", "'edge'", ":", "edge_1", ",", "\n", "'score'", ":", "score", "\n", "}", ",", "\n", "{", "\n", "'panel'", ":", "panel_2", ",", "\n", "'edge'", ":", "edge_2", ",", "\n", "'score'", ":", "score", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern._empty_panel": [[569, 573], ["numpy.zeros", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "_empty_panel", "(", "self", ",", "max_edge_num", ")", ":", "\n", "        ", "\"\"\" Shape, rotation, and translation for empty panels\"\"\"", "\n", "# edge is 4-elem vector, 4 rotation element for quaternion, 3 element for world translation", "\n", "return", "np", ".", "zeros", "(", "(", "max_edge_num", ",", "4", ")", ")", ",", "np", ".", "zeros", "(", "4", ")", ",", "np", ".", "zeros", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.panel_order": [[575, 612], ["super().panel_order", "len", "pattern_converter.NNSewingPattern.panel_classifier.class_idx", "len", "ValueError", "len", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.panel_order", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.panel_classes.PanelClasses.class_idx"], ["", "def", "panel_order", "(", "self", ",", "force_update", "=", "False", ",", "pad_to_len", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Return order of panels either \n                * according to the one provided in the pattern spec\n                * According to external panels classification if self.panel_classifier is set!\n            Note: 'None' represent empty panels at that place of ordered elements\n\n            Reloading 'panel_order' instead of 'define_panel_order' to preserve order from file \n                if self.panel_classifier is not defined and 'force_update' is false\n        \"\"\"", "\n", "if", "self", ".", "panel_classifier", "is", "None", "or", "self", ".", "template_name", "is", "None", ":", "\n", "# preserves the order is given in pattern spec!", "\n", "            ", "order", "=", "super", "(", ")", ".", "panel_order", "(", "force_update", "=", "force_update", ")", "\n", "\n", "", "else", ":", "\n", "# NOTE: re-evaluate even if `force_update` flag is false", "\n", "# as we need update even if the pattern spec already contains some order", "\n", "\n", "# construct the order according to class indices", "\n", "# -None- represents empty panels-placeholders", "\n", "            ", "order", "=", "[", "None", "]", "*", "len", "(", "self", ".", "panel_classifier", ")", "\n", "for", "panel_name", "in", "self", ".", "pattern", "[", "'panels'", "]", ":", "\n", "                ", "class_idx", "=", "self", ".", "panel_classifier", ".", "class_idx", "(", "self", ".", "template_name", ",", "panel_name", ")", "\n", "order", "[", "class_idx", "]", "=", "panel_name", "\n", "\n", "# Additionally pad to requested value if given", "\n", "", "", "if", "pad_to_len", "is", "not", "None", ":", "\n", "            ", "if", "pad_to_len", "<", "len", "(", "order", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f'{self.__class__.__name__}::{self.name}::Error::Requested max num of panels {pad_to_len} '", "\n", "f'is smaller then evaluated number of panels {len(order)}'", ")", "\n", "", "order", "+=", "[", "None", "]", "*", "(", "pad_to_len", "-", "len", "(", "order", ")", ")", "\n", "\n", "# Remember the order for future reference", "\n", "", "self", ".", "pattern", "[", "'panel_order'", "]", "=", "order", "\n", "\n", "return", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.utils.BalancedBatchSampler.__init__": [[19, 52], ["print", "dict.fromkeys", "list", "sum", "dict.fromkeys", "len", "NotImplementedError", "ids_by_type[].tolist", "utils.BalancedBatchSampler.data_ids_by_type.keys", "int", "sum", "len", "utils.BalancedBatchSampler.batch_len_per_type.values", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ids_by_type", ",", "batch_size", "=", "10", ",", "drop_last", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n            * ids_by_type provided as dictionary of torch.Subset() objects\n            * drop_last is True by default to better guarantee that all batches are well-balanced\n        \"\"\"", "\n", "if", "len", "(", "ids_by_type", ")", ">", "batch_size", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'{}::Error::Creating batches that are smaller then total number of data classes is not implemented!'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "\n", "", "print", "(", "'{}::Using custom balanced batch data sampler'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "# represent as lists of ids for simplicity", "\n", "self", ".", "data_ids_by_type", "=", "dict", ".", "fromkeys", "(", "ids_by_type", ")", "\n", "for", "data_class", "in", "self", ".", "data_ids_by_type", ":", "\n", "            ", "self", ".", "data_ids_by_type", "[", "data_class", "]", "=", "ids_by_type", "[", "data_class", "]", ".", "tolist", "(", ")", "\n", "\n", "", "self", ".", "class_names", "=", "list", "(", "self", ".", "data_ids_by_type", ".", "keys", "(", ")", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data_size", "=", "sum", "(", "len", "(", "self", ".", "data_ids_by_type", "[", "i", "]", ")", "for", "i", "in", "ids_by_type", ")", "\n", "self", ".", "num_full_batches", "=", "self", ".", "data_size", "//", "batch_size", "# int division", "\n", "\n", "# extra batch left?", "\n", "last_batch_len", "=", "self", ".", "data_size", "-", "self", ".", "batch_size", "*", "self", ".", "num_full_batches", "\n", "self", ".", "drop_last", "=", "drop_last", "or", "last_batch_len", "==", "0", "# by request or because there is no batch with leftovers ", "\n", "\n", "# num of elements per type in each batch", "\n", "self", ".", "batch_len_per_type", "=", "dict", ".", "fromkeys", "(", "ids_by_type", ")", "\n", "for", "data_class", "in", "self", ".", "class_names", ":", "\n", "            ", "self", ".", "batch_len_per_type", "[", "data_class", "]", "=", "int", "(", "(", "len", "(", "ids_by_type", "[", "data_class", "]", ")", "/", "self", ".", "data_size", ")", "*", "batch_size", ")", "# always rounds down", "\n", "\n", "", "if", "sum", "(", "self", ".", "batch_len_per_type", ".", "values", "(", ")", ")", ">", "self", ".", "batch_size", ":", "\n", "            ", "raise", "(", "'BalancedBatchSampler::Error:: Failed to evaluate per-type length correctly'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.utils.BalancedBatchSampler.__iter__": [[54, 90], ["copy.deepcopy", "range", "iter", "random.shuffle", "range", "random.shuffle", "batches.append", "copy.deepcopy.values", "random.shuffle", "batches.append", "range", "len", "batch.append", "batch.append", "ids_by_type[].pop", "len", "ids_by_type[].pop", "len", "random.choice"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "ids_by_type", "=", "copy", ".", "deepcopy", "(", "self", ".", "data_ids_by_type", ")", "\n", "\n", "# shuffle", "\n", "for", "data_class", "in", "ids_by_type", ":", "\n", "            ", "random", ".", "shuffle", "(", "ids_by_type", "[", "data_class", "]", ")", "\n", "\n", "", "batches", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "num_full_batches", ")", ":", "\n", "            ", "batch", "=", "[", "]", "\n", "for", "data_class", "in", "self", ".", "class_names", ":", "\n", "\n", "                ", "for", "_", "in", "range", "(", "self", ".", "batch_len_per_type", "[", "data_class", "]", ")", ":", "\n", "                    ", "if", "not", "len", "(", "ids_by_type", "[", "data_class", "]", ")", ":", "# exausted", "\n", "                        ", "break", "\n", "", "batch", ".", "append", "(", "ids_by_type", "[", "data_class", "]", ".", "pop", "(", ")", ")", "\n", "\n", "# Fill the rest of the batch randomly if needed", "\n", "", "", "diff", "=", "self", ".", "batch_size", "-", "len", "(", "batch", ")", "\n", "for", "_", "in", "range", "(", "diff", ")", ":", "\n", "                ", "non_empty_class_names", "=", "[", "name", "for", "name", "in", "self", ".", "class_names", "if", "len", "(", "ids_by_type", "[", "name", "]", ")", "]", "\n", "batch", ".", "append", "(", "ids_by_type", "[", "random", ".", "choice", "(", "non_empty_class_names", ")", "]", ".", "pop", "(", ")", ")", "\n", "\n", "", "random", ".", "shuffle", "(", "batch", ")", "# to avoid grouping by type in case it matters", "\n", "batches", ".", "append", "(", "batch", ")", "\n", "\n", "", "if", "not", "self", ".", "drop_last", ":", "\n", "# put the rest of elements in the last batch", "\n", "            ", "batch", "=", "[", "]", "\n", "for", "ids_list", "in", "ids_by_type", ".", "values", "(", ")", ":", "\n", "                ", "batch", "+=", "ids_list", "\n", "\n", "", "random", ".", "shuffle", "(", "batch", ")", "# to avoid grouping by type in case it matters", "\n", "batches", ".", "append", "(", "batch", ")", "\n", "\n", "", "return", "iter", "(", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.utils.BalancedBatchSampler.__len__": [[91, 93], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_full_batches", "+", "(", "not", "self", ".", "drop_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.utils.sample_points_from_meshes": [[96, 108], ["igl.read_triangle_mesh", "data.datasets.Garment3DPatternFullDataset.sample_mesh_points", "points_list.append", "str", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset.sample_mesh_points"], ["", "", "def", "sample_points_from_meshes", "(", "mesh_paths", ",", "data_config", ")", ":", "\n", "    ", "\"\"\"\n        Sample points from the given list of triangle meshes (as .obj files -- or other file formats supported by libigl)\n    \"\"\"", "\n", "points_list", "=", "[", "]", "\n", "for", "mesh", "in", "mesh_paths", ":", "\n", "        ", "verts", ",", "faces", "=", "igl", ".", "read_triangle_mesh", "(", "str", "(", "mesh", ")", ")", "\n", "points", "=", "Garment3DPatternFullDataset", ".", "sample_mesh_points", "(", "data_config", "[", "'mesh_samples'", "]", ",", "verts", ",", "faces", ")", "\n", "if", "'standardize'", "in", "data_config", ":", "\n", "            ", "points", "=", "(", "points", "-", "data_config", "[", "'standardize'", "]", "[", "'f_shift'", "]", ")", "/", "data_config", "[", "'standardize'", "]", "[", "'f_scale'", "]", "\n", "", "points_list", ".", "append", "(", "torch", ".", "Tensor", "(", "points", ")", ")", "\n", "", "return", "points_list", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.utils.save_garments_prediction": [[110, 161], ["pathlib.Path", "enumerate", "data.pattern_converter.NNSewingPattern", "data.datasets.Garment3DPatternFullDataset.tags_to_stitches", "data.pattern_converter.NNSewingPattern.pattern_from_tensors", "data.pattern_converter.NNSewingPattern.serialize", "range", "print", "print", "isinstance", "torch.from_numpy", "prediction[].cpu().numpy", "prediction[].cpu"], "function", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset.tags_to_stitches", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.pattern_from_tensors"], ["", "def", "save_garments_prediction", "(", "predictions", ",", "save_to", ",", "data_config", "=", "None", ",", "datanames", "=", "None", ",", "stitches_from_stitch_tags", "=", "False", ")", ":", "\n", "    ", "\"\"\" \n        Saving arbitrary sewing pattern predictions that\n        \n        * They do NOT have to be coming from garmet dataset samples.\n    \"\"\"", "\n", "\n", "save_to", "=", "Path", "(", "save_to", ")", "\n", "batch_size", "=", "predictions", "[", "'outlines'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "if", "datanames", "is", "None", ":", "\n", "        ", "datanames", "=", "[", "'pred_{}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "", "for", "idx", ",", "name", "in", "enumerate", "(", "datanames", ")", ":", "\n", "# \"unbatch\" dictionary", "\n", "        ", "prediction", "=", "{", "}", "\n", "for", "key", "in", "predictions", ":", "\n", "            ", "prediction", "[", "key", "]", "=", "predictions", "[", "key", "]", "[", "idx", "]", "\n", "\n", "", "if", "data_config", "is", "not", "None", "and", "'standardize'", "in", "data_config", ":", "\n", "# undo standardization  (outside of generinc conversion function due to custom std structure)", "\n", "            ", "gt_shifts", "=", "data_config", "[", "'standardize'", "]", "[", "'gt_shift'", "]", "\n", "gt_scales", "=", "data_config", "[", "'standardize'", "]", "[", "'gt_scale'", "]", "\n", "for", "key", "in", "gt_shifts", ":", "\n", "                ", "if", "key", "==", "'stitch_tags'", "and", "not", "data_config", "[", "'explicit_stitch_tags'", "]", ":", "\n", "# ignore stitch tags update if explicit tags were not used", "\n", "                    ", "continue", "\n", "", "prediction", "[", "key", "]", "=", "prediction", "[", "key", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "gt_scales", "[", "key", "]", "+", "gt_shifts", "[", "key", "]", "\n", "\n", "# stitch tags to stitch list", "\n", "", "", "if", "stitches_from_stitch_tags", ":", "\n", "            ", "stitches", "=", "Garment3DPatternFullDataset", ".", "tags_to_stitches", "(", "\n", "torch", ".", "from_numpy", "(", "prediction", "[", "'stitch_tags'", "]", ")", "if", "isinstance", "(", "prediction", "[", "'stitch_tags'", "]", ",", "np", ".", "ndarray", ")", "else", "prediction", "[", "'stitch_tags'", "]", ",", "\n", "prediction", "[", "'free_edges_mask'", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "stitches", "=", "None", "\n", "\n", "", "pattern", "=", "NNSewingPattern", "(", "view_ids", "=", "False", ")", "\n", "pattern", ".", "name", "=", "name", "\n", "try", ":", "\n", "            ", "pattern", ".", "pattern_from_tensors", "(", "\n", "prediction", "[", "'outlines'", "]", ",", "prediction", "[", "'rotations'", "]", ",", "prediction", "[", "'translations'", "]", ",", "\n", "stitches", "=", "stitches", ",", "\n", "padded", "=", "True", ")", "\n", "# save", "\n", "pattern", ".", "serialize", "(", "save_to", ",", "to_subfolder", "=", "True", ")", "\n", "", "except", "(", "RuntimeError", ",", "InvalidPatternDefError", ",", "TypeError", ")", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "print", "(", "'Saving predictions::Skipping pattern {}'", ".", "format", "(", "name", ")", ")", "\n", "pass", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.panel_classes.PanelClasses.__init__": [[10, 25], ["list", "enumerate", "open", "json.load", "panel_classes.PanelClasses.classes.keys", "tuple"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "classes_file", ")", ":", "\n", "\n", "        ", "self", ".", "filename", "=", "classes_file", "\n", "\n", "with", "open", "(", "classes_file", ",", "'r'", ")", "as", "f", ":", "\n", "# preserve the order of classes names", "\n", "            ", "self", ".", "classes", "=", "json", ".", "load", "(", "f", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "\n", "", "self", ".", "names", "=", "list", "(", "self", ".", "classes", ".", "keys", "(", ")", ")", "\n", "\n", "self", ".", "panel_to_idx", "=", "{", "}", "\n", "for", "idx", ",", "class_name", "in", "enumerate", "(", "self", ".", "classes", ")", ":", "\n", "            ", "panels_list", "=", "self", ".", "classes", "[", "class_name", "]", "\n", "for", "panel", "in", "panels_list", ":", "\n", "                ", "self", ".", "panel_to_idx", "[", "tuple", "(", "panel", ")", "]", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.panel_classes.PanelClasses.__len__": [[26, 28], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.panel_classes.PanelClasses.class_idx": [[29, 35], ["None"], "methods", ["None"], ["", "def", "class_idx", "(", "self", ",", "template", ",", "panel", ")", ":", "\n", "        ", "\"\"\"\n            Return idx of class for given panel (name) from given template(name)\n        \"\"\"", "\n", "# TODO process cases when given pair does not exist in the classes", "\n", "return", "self", ".", "panel_to_idx", "[", "(", "template", ",", "panel", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.panel_classes.PanelClasses.class_name": [[36, 38], ["None"], "methods", ["None"], ["", "def", "class_name", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "names", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.panel_classes.PanelClasses.map": [[39, 51], ["numpy.empty", "enumerate", "len", "print"], "methods", ["None"], ["", "def", "map", "(", "self", ",", "template_name", ",", "panel_list", ")", ":", "\n", "        ", "\"\"\"Map the list of panels for given template to the given list\"\"\"", "\n", "\n", "out_list", "=", "np", ".", "empty", "(", "len", "(", "panel_list", ")", ")", "\n", "for", "idx", ",", "panel", "in", "enumerate", "(", "panel_list", ")", ":", "\n", "            ", "if", "panel", "==", "'stitch'", ":", "\n", "                ", "out_list", "[", "idx", "]", "=", "-", "1", "\n", "print", "(", "f'{self.__class__.__name__}::Warning::Mapping stitch label'", ")", "\n", "", "else", ":", "\n", "                ", "out_list", "[", "idx", "]", "=", "self", ".", "panel_to_idx", "[", "(", "template_name", ",", "panel", ")", "]", "\n", "\n", "", "", "return", "out_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.__init__": [[26, 83], ["pathlib.Path", "datasets.BaseDataset.update_config", "dict", "datasets.BaseDataset.dataset_start_ids.append", "len", "datasets.BaseDataset._estimate_data_shape", "zip", "next", "datasets.BaseDataset.dataset_start_ids.append", "datasets.BaseDataset._clean_datapoint_list", "print", "print", "datasets.BaseDataset.standardize", "os.walk", "len", "data.SampleToTensor", "len", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.update_config", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset._estimate_data_shape", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset._clean_datapoint_list", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.standardize"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "start_config", "=", "{", "'data_folders'", ":", "[", "]", "}", ",", "gt_caching", "=", "False", ",", "feature_caching", "=", "False", ",", "in_transforms", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"Kind of Universal init for my datasets\n            * Expects that all incoming datasets are located in the same root directory\n            * The names of dataset_folders to use should be provided in start_config\n                (defining it in dict allows to load data list as property from previous experiments)\n            * if cashing is enabled, datapoints will stay stored in memory on first call to them: might speed up data processing by reducing file reads\"\"\"", "\n", "self", ".", "root_path", "=", "Path", "(", "root_dir", ")", "\n", "self", ".", "config", "=", "{", "}", "\n", "self", ".", "update_config", "(", "start_config", ")", "\n", "self", ".", "config", "[", "'class'", "]", "=", "self", ".", "__class__", ".", "__name__", "\n", "\n", "self", ".", "data_folders", "=", "start_config", "[", "'data_folders'", "]", "\n", "self", ".", "data_folders_nicknames", "=", "dict", "(", "zip", "(", "self", ".", "data_folders", ",", "self", ".", "data_folders", ")", ")", "\n", "\n", "# list of items = subfolders", "\n", "self", ".", "datapoints_names", "=", "[", "]", "\n", "self", ".", "dataset_start_ids", "=", "[", "]", "# (folder, start_id) tuples -- ordered by start id", "\n", "for", "data_folder", "in", "self", ".", "data_folders", ":", "\n", "            ", "_", ",", "dirs", ",", "_", "=", "next", "(", "os", ".", "walk", "(", "self", ".", "root_path", "/", "data_folder", ")", ")", "\n", "# dataset name as part of datapoint name", "\n", "datapoints_names", "=", "[", "data_folder", "+", "'/'", "+", "name", "for", "name", "in", "dirs", "]", "\n", "self", ".", "dataset_start_ids", ".", "append", "(", "(", "data_folder", ",", "len", "(", "self", ".", "datapoints_names", ")", ")", ")", "\n", "clean_list", "=", "self", ".", "_clean_datapoint_list", "(", "datapoints_names", ",", "data_folder", ")", "\n", "if", "(", "'max_datapoints_per_type'", "in", "self", ".", "config", "\n", "and", "self", ".", "config", "[", "'max_datapoints_per_type'", "]", "is", "not", "None", "\n", "and", "len", "(", "clean_list", ")", ">", "self", ".", "config", "[", "'max_datapoints_per_type'", "]", ")", ":", "\n", "# There is no need to do random sampling of requested number of datapoints", "\n", "# The sample sewing patterns are randomly generated in the first place without particulat order", "\n", "# hence, simple slicing of elements would be equivalent to sampling them randomly from the list", "\n", "                ", "clean_list", "=", "clean_list", "[", ":", "self", ".", "config", "[", "'max_datapoints_per_type'", "]", "]", "\n", "\n", "", "self", ".", "datapoints_names", "+=", "clean_list", "\n", "", "self", ".", "dataset_start_ids", ".", "append", "(", "(", "None", ",", "len", "(", "self", ".", "datapoints_names", ")", ")", ")", "# add the total len as item for easy slicing", "\n", "self", ".", "config", "[", "'size'", "]", "=", "len", "(", "self", ")", "\n", "\n", "# cashing setup", "\n", "self", ".", "gt_cached", "=", "{", "}", "\n", "self", ".", "gt_caching", "=", "gt_caching", "\n", "if", "gt_caching", ":", "\n", "            ", "print", "(", "'BaseDataset::Info::Storing datapoints ground_truth info in memory'", ")", "\n", "", "self", ".", "feature_cached", "=", "{", "}", "\n", "self", ".", "feature_caching", "=", "feature_caching", "\n", "if", "feature_caching", ":", "\n", "            ", "print", "(", "'BaseDataset::Info::Storing datapoints feature info in memory'", ")", "\n", "\n", "# Use default tensor transform + the ones from input", "\n", "", "self", ".", "transforms", "=", "[", "transforms", ".", "SampleToTensor", "(", ")", "]", "+", "in_transforms", "\n", "\n", "# statistics already there --> need to apply it", "\n", "if", "'standardize'", "in", "self", ".", "config", ":", "\n", "            ", "self", ".", "standardize", "(", ")", "\n", "\n", "# FORDEBUG -- access all the datapoints to pre-populate the cache of the data", "\n", "# self._renew_cache()", "\n", "\n", "# in\\out sizes", "\n", "", "self", ".", "_estimate_data_shape", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.save_to_wandb": [[84, 88], ["experiment.add_config"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.add_config"], ["", "def", "save_to_wandb", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"Save data cofiguration to current expetiment run\"\"\"", "\n", "# config", "\n", "experiment", ".", "add_config", "(", "'dataset'", ",", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.update_transform": [[90, 93], ["NotImplementedError"], "methods", ["None"], ["", "def", "update_transform", "(", "self", ",", "transform", ")", ":", "\n", "        ", "\"\"\"apply new transform when loading the data\"\"\"", "\n", "raise", "NotImplementedError", "(", "'BaseDataset:Error:current transform support is poor'", ")", "\n", "# self.transform = transform", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.__len__": [[95, 98], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of entries in the dataset\"\"\"", "\n", "return", "len", "(", "self", ".", "datapoints_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.__getitem__": [[99, 119], ["torch.is_tensor", "datasets.BaseDataset._get_sample_info", "tuple", "idx.tolist.tolist.tolist", "datapoint_name.split", "transform"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset._get_sample_info"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Called when indexing: read the corresponding data. \n        Does not support list indexing\"\"\"", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "idx", ")", ":", "# allow indexing by tensors", "\n", "            ", "idx", "=", "idx", ".", "tolist", "(", ")", "\n", "\n", "", "folder_elements", "=", "None", "\n", "datapoint_name", "=", "self", ".", "datapoints_names", "[", "idx", "]", "\n", "\n", "features", ",", "ground_truth", "=", "self", ".", "_get_sample_info", "(", "datapoint_name", ")", "\n", "\n", "folder", ",", "name", "=", "tuple", "(", "datapoint_name", ".", "split", "(", "'/'", ")", ")", "\n", "sample", "=", "{", "'features'", ":", "features", ",", "'ground_truth'", ":", "ground_truth", ",", "'name'", ":", "name", ",", "'data_folder'", ":", "folder", "}", "\n", "\n", "# apply transfomations (equally to samples from files or from cache)", "\n", "for", "transform", "in", "self", ".", "transforms", ":", "\n", "            ", "sample", "=", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.update_config": [[120, 133], ["datasets.BaseDataset.config.update", "datasets.BaseDataset._update_on_config_change", "RuntimeError", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset._update_on_config_change"], ["", "def", "update_config", "(", "self", ",", "in_config", ")", ":", "\n", "        ", "\"\"\"Define dataset configuration:\n            * to be part of experimental setup on wandb\n            * Control obtainign values for datapoints\"\"\"", "\n", "self", ".", "config", ".", "update", "(", "in_config", ")", "\n", "\n", "# check the correctness of provided list of datasets", "\n", "if", "(", "'data_folders'", "not", "in", "self", ".", "config", "\n", "or", "not", "isinstance", "(", "self", ".", "config", "[", "'data_folders'", "]", ",", "list", ")", "\n", "or", "len", "(", "self", ".", "config", "[", "'data_folders'", "]", ")", "==", "0", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'BaseDataset::Error::information on datasets (folders) to use is missing in the incoming config'", ")", "\n", "\n", "", "self", ".", "_update_on_config_change", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset._drop_cache": [[134, 138], ["None"], "methods", ["None"], ["", "def", "_drop_cache", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clean caches of datapoints info\"\"\"", "\n", "self", ".", "gt_cached", "=", "{", "}", "\n", "self", ".", "feature_cached", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset._renew_cache": [[139, 147], ["range", "print", "len"], "methods", ["None"], ["", "def", "_renew_cache", "(", "self", ")", ":", "\n", "        ", "\"\"\"Flush the cache and re-fill it with updated information if any kind of caching is enabled\"\"\"", "\n", "self", ".", "gt_cached", "=", "{", "}", "\n", "self", ".", "feature_cached", "=", "{", "}", "\n", "if", "self", ".", "feature_caching", "or", "self", ".", "gt_caching", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "                ", "self", "[", "i", "]", "\n", "", "print", "(", "'Data cached!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.indices_by_data_folder": [[148, 166], ["dict.fromkeys", "dict.fromkeys", "numpy.array", "sorted", "range", "numpy.flatnonzero", "len"], "methods", ["None"], ["", "", "def", "indices_by_data_folder", "(", "self", ",", "index_list", ")", ":", "\n", "        ", "\"\"\"\n            Separate provided indices according to dataset folders used in current dataset\n        \"\"\"", "\n", "ids_dict", "=", "dict", ".", "fromkeys", "(", "self", ".", "data_folders", ")", "# consists of elemens of index_list", "\n", "ids_mapping_dict", "=", "dict", ".", "fromkeys", "(", "self", ".", "data_folders", ")", "# reference to the elements in index_list", "\n", "index_list", "=", "np", ".", "array", "(", "index_list", ")", "\n", "\n", "# assign by comparing with data_folders start & end ids", "\n", "# enforce sort Just in case", "\n", "self", ".", "dataset_start_ids", "=", "sorted", "(", "self", ".", "dataset_start_ids", ",", "key", "=", "lambda", "idx", ":", "idx", "[", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "self", ".", "dataset_start_ids", ")", "-", "1", ")", ":", "\n", "            ", "ids_filter", "=", "(", "index_list", ">=", "self", ".", "dataset_start_ids", "[", "i", "]", "[", "1", "]", ")", "&", "(", "index_list", "<", "self", ".", "dataset_start_ids", "[", "i", "+", "1", "]", "[", "1", "]", ")", "\n", "ids_dict", "[", "self", ".", "dataset_start_ids", "[", "i", "]", "[", "0", "]", "]", "=", "index_list", "[", "ids_filter", "]", "\n", "ids_mapping_dict", "[", "self", ".", "dataset_start_ids", "[", "i", "]", "[", "0", "]", "]", "=", "np", ".", "flatnonzero", "(", "ids_filter", ")", "\n", "\n", "", "return", "ids_dict", ",", "ids_mapping_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.subsets_per_datafolder": [[167, 179], ["datasets.BaseDataset.indices_by_data_folder", "per_data.items", "range", "torch.utils.data.Subset", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.indices_by_data_folder"], ["", "def", "subsets_per_datafolder", "(", "self", ",", "index_list", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Group given indices by datafolder and Return dictionary with Subset objects for each group.\n            if None, a breakdown for the full dataset is given\n        \"\"\"", "\n", "if", "index_list", "is", "None", ":", "\n", "            ", "index_list", "=", "range", "(", "len", "(", "self", ")", ")", "\n", "", "per_data", ",", "_", "=", "self", ".", "indices_by_data_folder", "(", "index_list", ")", "\n", "breakdown", "=", "{", "}", "\n", "for", "folder", ",", "ids_list", "in", "per_data", ".", "items", "(", ")", ":", "\n", "            ", "breakdown", "[", "self", ".", "data_folders_nicknames", "[", "folder", "]", "]", "=", "Subset", "(", "self", ",", "ids_list", ")", "\n", "", "return", "breakdown", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.random_split_by_dataset": [[180, 244], ["range", "NotImplementedError", "len", "torch.utils.data.Subset", "torch.utils.data.Subset", "int", "int", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.randperm"], "methods", ["None"], ["", "def", "random_split_by_dataset", "(", "self", ",", "valid_per_type", ",", "test_per_type", "=", "0", ",", "split_type", "=", "'count'", ",", "with_breakdown", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            Produce subset wrappers for training set, validations set, and test set (if requested)\n            Supported split_types: \n                * split_type='percent' takes a given percentage of the data for evaluation subsets. It also ensures the equal \n                proportions of elements from each datafolder in each subset -- according to overall proportions of \n                datafolders in the whole dataset\n                * split_type='count' takes this exact number of elements for the elevaluation subselts from each datafolder. \n                    Maximizes the use of training elements, and promotes fair evaluation on uneven datafolder distribution. \n\n        Note: \n            * it's recommended to shuffle the training set on batching as random permute is not \n              guaranteed in this function\n        \"\"\"", "\n", "\n", "if", "split_type", "!=", "'count'", "and", "split_type", "!=", "'percent'", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'{}::Error::Unsupported split type <{}> requested'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "split_type", ")", ")", "\n", "\n", "", "train_ids", ",", "valid_ids", ",", "test_ids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "train_breakdown", ",", "valid_breakdown", ",", "test_breakdown", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "for", "dataset_id", "in", "range", "(", "len", "(", "self", ".", "data_folders", ")", ")", ":", "\n", "            ", "folder_nickname", "=", "self", ".", "data_folders_nicknames", "[", "self", ".", "data_folders", "[", "dataset_id", "]", "]", "\n", "\n", "start_id", "=", "self", ".", "dataset_start_ids", "[", "dataset_id", "]", "[", "1", "]", "\n", "end_id", "=", "self", ".", "dataset_start_ids", "[", "dataset_id", "+", "1", "]", "[", "1", "]", "# marker of the dataset end included", "\n", "data_len", "=", "end_id", "-", "start_id", "\n", "\n", "permute", "=", "(", "torch", ".", "randperm", "(", "data_len", ")", "+", "start_id", ")", ".", "tolist", "(", ")", "\n", "\n", "# size defined according to requested type", "\n", "valid_size", "=", "int", "(", "data_len", "*", "valid_per_type", "/", "100", ")", "if", "split_type", "==", "'percent'", "else", "valid_per_type", "\n", "test_size", "=", "int", "(", "data_len", "*", "test_per_type", "/", "100", ")", "if", "split_type", "==", "'percent'", "else", "test_per_type", "\n", "\n", "train_size", "=", "data_len", "-", "valid_size", "-", "test_size", "\n", "\n", "train_sub", ",", "valid_sub", "=", "permute", "[", ":", "train_size", "]", ",", "permute", "[", "train_size", ":", "train_size", "+", "valid_size", "]", "\n", "\n", "train_ids", "+=", "train_sub", "\n", "valid_ids", "+=", "valid_sub", "\n", "\n", "if", "test_size", ":", "\n", "                ", "test_sub", "=", "permute", "[", "train_size", "+", "valid_size", ":", "train_size", "+", "valid_size", "+", "test_size", "]", "\n", "test_ids", "+=", "test_sub", "\n", "\n", "", "if", "with_breakdown", ":", "\n", "                ", "train_breakdown", "[", "folder_nickname", "]", "=", "Subset", "(", "self", ",", "train_sub", ")", "\n", "valid_breakdown", "[", "folder_nickname", "]", "=", "Subset", "(", "self", ",", "valid_sub", ")", "\n", "test_breakdown", "[", "folder_nickname", "]", "=", "Subset", "(", "self", ",", "test_sub", ")", "if", "test_size", "else", "None", "\n", "\n", "", "", "if", "with_breakdown", ":", "\n", "            ", "return", "(", "\n", "Subset", "(", "self", ",", "train_ids", ")", ",", "\n", "Subset", "(", "self", ",", "valid_ids", ")", ",", "\n", "Subset", "(", "self", ",", "test_ids", ")", "if", "test_per_type", "else", "None", ",", "\n", "train_breakdown", ",", "valid_breakdown", ",", "test_breakdown", "\n", ")", "\n", "\n", "", "return", "(", "\n", "Subset", "(", "self", ",", "train_ids", ")", ",", "\n", "Subset", "(", "self", ",", "valid_ids", ")", ",", "\n", "Subset", "(", "self", ",", "test_ids", ")", "if", "test_size", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.split_from_dict": [[246, 283], ["set", "set", "set", "range", "len", "datasets.BaseDataset.subsets_per_datafolder", "datasets.BaseDataset.subsets_per_datafolder", "datasets.BaseDataset.subsets_per_datafolder", "torch.utils.data.Subset", "torch.utils.data.Subset", "train_ids.append", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "test_ids.append", "torch.utils.data.Subset", "len", "len", "valid_ids.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.subsets_per_datafolder", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.subsets_per_datafolder", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.subsets_per_datafolder"], ["", "def", "split_from_dict", "(", "self", ",", "split_dict", ",", "with_breakdown", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            Reproduce the data split in the provided dictionary: \n            the elements of the currect dataset should play the same role as in provided dict\n        \"\"\"", "\n", "train_ids", ",", "valid_ids", ",", "test_ids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "train_breakdown", ",", "valid_breakdown", ",", "test_breakdown", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "training_datanames", "=", "set", "(", "split_dict", "[", "'training'", "]", ")", "\n", "valid_datanames", "=", "set", "(", "split_dict", "[", "'validation'", "]", ")", "\n", "test_datanames", "=", "set", "(", "split_dict", "[", "'test'", "]", ")", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "datapoints_names", ")", ")", ":", "\n", "            ", "if", "self", ".", "datapoints_names", "[", "idx", "]", "in", "training_datanames", ":", "# usually the largest, so check first", "\n", "                ", "train_ids", ".", "append", "(", "idx", ")", "\n", "", "elif", "len", "(", "test_datanames", ")", ">", "0", "and", "self", ".", "datapoints_names", "[", "idx", "]", "in", "test_datanames", ":", "\n", "                ", "test_ids", ".", "append", "(", "idx", ")", "\n", "", "elif", "len", "(", "valid_datanames", ")", ">", "0", "and", "self", ".", "datapoints_names", "[", "idx", "]", "in", "valid_datanames", ":", "\n", "                ", "valid_ids", ".", "append", "(", "idx", ")", "\n", "# othervise, just skip", "\n", "\n", "", "", "if", "with_breakdown", ":", "\n", "            ", "train_breakdown", "=", "self", ".", "subsets_per_datafolder", "(", "train_ids", ")", "\n", "valid_breakdown", "=", "self", ".", "subsets_per_datafolder", "(", "valid_ids", ")", "\n", "test_breakdown", "=", "self", ".", "subsets_per_datafolder", "(", "test_ids", ")", "\n", "\n", "return", "(", "\n", "Subset", "(", "self", ",", "train_ids", ")", ",", "\n", "Subset", "(", "self", ",", "valid_ids", ")", ",", "\n", "Subset", "(", "self", ",", "test_ids", ")", "if", "len", "(", "test_ids", ")", ">", "0", "else", "None", ",", "\n", "train_breakdown", ",", "valid_breakdown", ",", "test_breakdown", "\n", ")", "\n", "\n", "", "return", "(", "\n", "Subset", "(", "self", ",", "train_ids", ")", ",", "\n", "Subset", "(", "self", ",", "valid_ids", ")", ",", "\n", "Subset", "(", "self", ",", "test_ids", ")", "if", "len", "(", "test_ids", ")", ">", "0", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.save_prediction_batch": [[286, 289], ["print"], "methods", ["None"], ["", "def", "save_prediction_batch", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Saves predicted params of the datapoint to the original data folder\"\"\"", "\n", "print", "(", "'{}::Warning::No prediction saving is implemented'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset.standardize": [[290, 300], ["print"], "methods", ["None"], ["", "def", "standardize", "(", "self", ",", "training", "=", "None", ")", ":", "\n", "        ", "\"\"\"Use element normalization/standardization based on stats from the training subset.\n            Dataset is the object most aware of the datapoint structure hence it's the place to calculate & use the normalization.\n            Uses either of two: \n            * training subset to calculate the data statistics -- the stats are only based on training subsection of the data\n            * if stats info is already defined in config, it's used instead of calculating new statistics (usually when calling to restore dataset from existing experiment)\n            configuration has a priority: if it's given, the statistics are NOT recalculated even if training set is provided:\n                this allows to save some time\n        \"\"\"", "\n", "print", "(", "'{}::Warning::No standardization is implemented'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset._clean_datapoint_list": [[301, 305], ["None"], "methods", ["None"], ["", "def", "_clean_datapoint_list", "(", "self", ",", "datapoints_names", ",", "dataset_folder", ")", ":", "\n", "        ", "\"\"\"Remove non-datapoints subfolders, failing cases, etc. Children are to override this function when needed\"\"\"", "\n", "# See https://stackoverflow.com/questions/57042695/calling-super-init-gives-the-wrong-method-when-it-is-overridden", "\n", "return", "datapoints_names", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset._get_sample_info": [[306, 327], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_get_sample_info", "(", "self", ",", "datapoint_name", ")", ":", "\n", "        ", "\"\"\"\n            Get features and Ground truth prediction for requested data example\n        \"\"\"", "\n", "if", "datapoint_name", "in", "self", ".", "gt_cached", ":", "# might not be compatible with list indexing", "\n", "            ", "ground_truth", "=", "self", ".", "gt_cached", "[", "datapoint_name", "]", "\n", "", "else", ":", "\n", "            ", "ground_truth", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "gt_caching", ":", "\n", "                ", "self", ".", "gt_cached", "[", "datapoint_name", "]", "=", "ground_truth", "\n", "\n", "", "", "if", "datapoint_name", "in", "self", ".", "feature_cached", ":", "\n", "            ", "features", "=", "self", ".", "feature_cached", "[", "datapoint_name", "]", "\n", "", "else", ":", "\n", "            ", "features", "=", "np", ".", "array", "(", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "feature_caching", ":", "# save read values ", "\n", "                ", "self", ".", "feature_cached", "[", "datapoint_name", "]", "=", "features", "\n", "\n", "", "", "return", "features", ",", "ground_truth", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset._estimate_data_shape": [[328, 335], ["hasattr"], "methods", ["None"], ["", "def", "_estimate_data_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get sizes/shapes of a datapoint for external references\"\"\"", "\n", "elem", "=", "self", "[", "0", "]", "\n", "feature_size", "=", "elem", "[", "'features'", "]", ".", "shape", "[", "0", "]", "\n", "gt_size", "=", "elem", "[", "'ground_truth'", "]", ".", "shape", "[", "0", "]", "if", "hasattr", "(", "elem", "[", "'ground_truth'", "]", ",", "'shape'", ")", "else", "None", "\n", "\n", "self", ".", "config", "[", "'feature_size'", "]", ",", "self", ".", "config", "[", "'ground_truth_size'", "]", "=", "feature_size", ",", "gt_size", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset._update_on_config_change": [[336, 339], ["None"], "methods", ["None"], ["", "def", "_update_on_config_change", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update object inner state after config values have changed\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset.__init__": [[344, 406], ["datasets.BaseDataset.__init__", "datasets.GarmentBaseDataset.data_folders_nicknames.values", "datasets.GarmentBaseDataset._drop_cache", "start_config.update", "len", "len", "print", "dict", "data.panel_classes.PanelClasses", "datasets.GarmentBaseDataset.config.update", "datasets.GarmentBaseDataset.config.update", "set", "zip", "datasets.GarmentBaseDataset._read_pattern", "num_panels.append", "num_edges_in_panel.append", "num_stitches.append", "len", "max", "max", "max"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.BaseDataset._drop_cache", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._read_pattern"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "start_config", "=", "{", "'data_folders'", ":", "[", "]", "}", ",", "gt_caching", "=", "False", ",", "feature_caching", "=", "False", ",", "in_transforms", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n            Initialize dataset of garments with patterns\n            * the list of dataset folders to use should be supplied in start_config!!!\n            * the initial value is only given for reference\n        \"\"\"", "\n", "# initialize keys for correct dataset initialization", "\n", "if", "(", "'max_pattern_len'", "not", "in", "start_config", "\n", "or", "'max_panel_len'", "not", "in", "start_config", "\n", "or", "'max_num_stitches'", "not", "in", "start_config", ")", ":", "\n", "            ", "start_config", ".", "update", "(", "max_pattern_len", "=", "None", ",", "max_panel_len", "=", "None", ",", "max_num_stitches", "=", "None", ")", "\n", "pattern_size_initialized", "=", "False", "\n", "", "else", ":", "\n", "            ", "pattern_size_initialized", "=", "True", "\n", "\n", "", "if", "'obj_filetag'", "not", "in", "start_config", ":", "\n", "            ", "start_config", "[", "'obj_filetag'", "]", "=", "'sim'", "# look for objects with this tag in filename when loading 3D models", "\n", "\n", "", "if", "'panel_classification'", "not", "in", "start_config", ":", "\n", "            ", "start_config", "[", "'panel_classification'", "]", "=", "None", "\n", "", "self", ".", "panel_classifier", "=", "None", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "start_config", ",", "gt_caching", "=", "gt_caching", ",", "feature_caching", "=", "feature_caching", ",", "in_transforms", "=", "in_transforms", ")", "\n", "\n", "# To make sure the datafolder names are unique after updates", "\n", "all_nicks", "=", "self", ".", "data_folders_nicknames", ".", "values", "(", ")", "\n", "if", "len", "(", "all_nicks", ")", ">", "len", "(", "set", "(", "all_nicks", ")", ")", ":", "\n", "            ", "print", "(", "'{}::Warning::Some data folder nicknames are not unique: {}. Reverting to the use of original folder names'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "data_folders_nicknames", "\n", ")", ")", "\n", "self", ".", "data_folders_nicknames", "=", "dict", "(", "zip", "(", "self", ".", "data_folders", ",", "self", ".", "data_folders", ")", ")", "\n", "\n", "# Load panel classifier", "\n", "", "if", "self", ".", "config", "[", "'panel_classification'", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "panel_classifier", "=", "PanelClasses", "(", "self", ".", "config", "[", "'panel_classification'", "]", ")", "\n", "self", ".", "config", ".", "update", "(", "max_pattern_len", "=", "len", "(", "self", ".", "panel_classifier", ")", ")", "\n", "\n", "# evaluate base max values for number of panels, number of edges in panels among pattern in all the datasets", "\n", "# NOTE: max_pattern_len is influcened by presence or abcense of self.panel_classifier", "\n", "", "if", "not", "pattern_size_initialized", ":", "\n", "            ", "num_panels", "=", "[", "]", "\n", "num_edges_in_panel", "=", "[", "]", "\n", "num_stitches", "=", "[", "]", "\n", "for", "data_folder", ",", "start_id", "in", "self", ".", "dataset_start_ids", ":", "\n", "                ", "if", "data_folder", "is", "None", ":", "\n", "                    ", "break", "\n", "\n", "", "datapoint", "=", "self", ".", "datapoints_names", "[", "start_id", "]", "\n", "folder_elements", "=", "[", "file", ".", "name", "for", "file", "in", "(", "self", ".", "root_path", "/", "datapoint", ")", ".", "glob", "(", "'*'", ")", "]", "\n", "pattern_flat", ",", "_", ",", "_", ",", "stitches", ",", "_", "=", "self", ".", "_read_pattern", "(", "datapoint", ",", "folder_elements", ",", "with_stitches", "=", "True", ")", "# just the edge info needed", "\n", "num_panels", ".", "append", "(", "pattern_flat", ".", "shape", "[", "0", "]", ")", "\n", "num_edges_in_panel", ".", "append", "(", "pattern_flat", ".", "shape", "[", "1", "]", ")", "# after padding", "\n", "num_stitches", ".", "append", "(", "stitches", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "self", ".", "config", ".", "update", "(", "\n", "max_pattern_len", "=", "max", "(", "num_panels", ")", ",", "\n", "max_panel_len", "=", "max", "(", "num_edges_in_panel", ")", ",", "\n", "max_num_stitches", "=", "max", "(", "num_stitches", ")", "\n", ")", "\n", "\n", "# to make sure that all the new datapoints adhere to evaluated structure!", "\n", "", "self", ".", "_drop_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset.save_to_wandb": [[407, 431], ["datasets.BaseDataset.save_to_wandb", "shutil.copy", "shutil.copy", "shutil.copy", "experiment.local_wandb_path", "experiment.local_wandb_path", "experiment.local_wandb_path"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset.save_to_wandb", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.local_wandb_path", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.local_wandb_path", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.nn.experiment.ExperimentWrappper.local_wandb_path"], ["", "def", "save_to_wandb", "(", "self", ",", "experiment", ")", ":", "\n", "        ", "\"\"\"Save data cofiguration to current expetiment run\"\"\"", "\n", "super", "(", ")", ".", "save_to_wandb", "(", "experiment", ")", "\n", "\n", "# dataset props files", "\n", "for", "dataset_folder", "in", "self", ".", "data_folders", ":", "\n", "            ", "try", ":", "\n", "                ", "shutil", ".", "copy", "(", "\n", "self", ".", "root_path", "/", "dataset_folder", "/", "'dataset_properties.json'", ",", "\n", "experiment", ".", "local_wandb_path", "(", ")", "/", "(", "dataset_folder", "+", "'_properties.json'", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                ", "pass", "\n", "\n", "# panel classes", "\n", "", "", "if", "self", ".", "panel_classifier", "is", "not", "None", ":", "\n", "            ", "shutil", ".", "copy", "(", "\n", "self", ".", "panel_classifier", ".", "filename", ",", "\n", "experiment", ".", "local_wandb_path", "(", ")", "/", "(", "'panel_classes.json'", ")", ")", "\n", "\n", "# param filter file", "\n", "", "if", "'filter_by_params'", "in", "self", ".", "config", "and", "self", ".", "config", "[", "'filter_by_params'", "]", ":", "\n", "            ", "shutil", ".", "copy", "(", "\n", "self", ".", "config", "[", "'filter_by_params'", "]", ",", "\n", "experiment", ".", "local_wandb_path", "(", ")", "/", "(", "'param_filter.json'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._clean_datapoint_list": [[433, 473], ["datasets.GarmentBaseDataset.remove", "customconfig.Properties", "NotImplementedError", "[].split", "datasets.GarmentBaseDataset.filter_by_params", "print", "datasets.GarmentBaseDataset.remove", "dataset_props[].split"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset.filter_by_params"], ["", "", "def", "_clean_datapoint_list", "(", "self", ",", "datapoints_names", ",", "dataset_folder", ")", ":", "\n", "        ", "\"\"\"\n            Remove all elements marked as failure from the provided list\n            Updates the currect dataset nickname as a small sideeffect\n        \"\"\"", "\n", "\n", "try", ":", "\n", "            ", "datapoints_names", ".", "remove", "(", "dataset_folder", "+", "'/renders'", ")", "# TODO read ignore list from props", "\n", "", "except", "ValueError", ":", "# it's ok if there is no subfolder for renders", "\n", "            ", "pass", "\n", "\n", "", "try", ":", "\n", "            ", "dataset_props", "=", "Properties", "(", "self", ".", "root_path", "/", "dataset_folder", "/", "'dataset_properties.json'", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "# missing dataset props file -- skip failure processing", "\n", "            ", "print", "(", "f'{self.__class__.__name__}::Warning::No `dataset_properties.json` found. Using all datapoints without filtering.'", ")", "\n", "self", ".", "data_folders_nicknames", "[", "dataset_folder", "]", "=", "dataset_folder", "\n", "return", "datapoints_names", "\n", "\n", "", "if", "not", "dataset_props", "[", "'to_subfolders'", "]", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'Only working with datasets organized with subfolders'", ")", "\n", "\n", "# NOTE A little side-effect here, since we are loading the dataset_properties anyway", "\n", "", "self", ".", "data_folders_nicknames", "[", "dataset_folder", "]", "=", "dataset_props", "[", "'templates'", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "fails_dict", "=", "dataset_props", "[", "'sim'", "]", "[", "'stats'", "]", "[", "'fails'", "]", "\n", "# TODO allow not to ignore some of the subsections", "\n", "for", "subsection", "in", "fails_dict", ":", "\n", "            ", "for", "fail", "in", "fails_dict", "[", "subsection", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "datapoints_names", ".", "remove", "(", "dataset_folder", "+", "'/'", "+", "fail", ")", "\n", "", "except", "ValueError", ":", "# if fail was already removed based on previous failure subsection", "\n", "                    ", "pass", "\n", "\n", "# filter by parameters", "\n", "", "", "", "if", "'filter_by_params'", "in", "self", ".", "config", "and", "self", ".", "config", "[", "'filter_by_params'", "]", ":", "\n", "            ", "datapoints_names", "=", "self", ".", "filter_by_params", "(", "\n", "self", ".", "config", "[", "'filter_by_params'", "]", ",", "dataset_folder", ",", "datapoints_names", ")", "\n", "\n", "", "return", "datapoints_names", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset.filter_by_params": [[474, 500], ["print", "open", "json.load", "data.pattern_converter.NNSewingPattern", "datasets.GarmentBaseDataset.template_name", "final_list.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset.template_name"], ["", "def", "filter_by_params", "(", "self", ",", "filter_file", ",", "dataset_folder", ",", "datapoint_names", ")", ":", "\n", "        ", "\"\"\" Remove from considerstion datapoint that don't pass the parameter filter\n\n            * filter_file -- path to .json file with allowed parameter ranges\n            * dataset_folder -- data folder to filter\n            * datapoint_names -- list of samples to apply filter to\n        \"\"\"", "\n", "with", "open", "(", "filter_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "param_filters", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "final_list", "=", "[", "]", "\n", "for", "datapoint_name", "in", "datapoint_names", ":", "\n", "            ", "pattern", "=", "NNSewingPattern", "(", "self", ".", "root_path", "/", "datapoint_name", "/", "'specification.json'", ")", "\n", "template_name", "=", "self", ".", "template_name", "(", "datapoint_name", ")", "\n", "to_add", "=", "True", "\n", "for", "param", "in", "param_filters", "[", "template_name", "]", ":", "\n", "                ", "value", "=", "pattern", ".", "parameters", "[", "param", "]", "[", "'value'", "]", "\n", "if", "value", "<", "param_filters", "[", "template_name", "]", "[", "param", "]", "[", "0", "]", "or", "value", ">", "param_filters", "[", "template_name", "]", "[", "param", "]", "[", "1", "]", ":", "\n", "                    ", "to_add", "=", "False", "\n", "break", "\n", "", "", "if", "to_add", ":", "\n", "                ", "final_list", ".", "append", "(", "datapoint_name", ")", "\n", "\n", "", "", "print", "(", "f'{self.__class__.__name__}::Filtering::{dataset_folder}::{len(final_list)} of {len(datapoint_names)}'", ")", "\n", "\n", "return", "final_list", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset.template_name": [[502, 505], ["datapoint_name.split"], "methods", ["None"], ["", "def", "template_name", "(", "self", ",", "datapoint_name", ")", ":", "\n", "        ", "\"\"\"Get name of the garment template from the path to the datapoint\"\"\"", "\n", "return", "self", ".", "data_folders_nicknames", "[", "datapoint_name", ".", "split", "(", "'/'", ")", "[", "0", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._read_pattern": [[506, 522], ["data.pattern_converter.NNSewingPattern", "data.pattern_converter.NNSewingPattern.pattern_as_tensors", "RuntimeError", "datasets.GarmentBaseDataset.template_name"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.pattern_as_tensors", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset.template_name"], ["", "def", "_read_pattern", "(", "self", ",", "datapoint_name", ",", "folder_elements", ",", "\n", "pad_panels_to_len", "=", "None", ",", "pad_panel_num", "=", "None", ",", "pad_stitches_num", "=", "None", ",", "\n", "with_placement", "=", "False", ",", "with_stitches", "=", "False", ",", "with_stitch_tags", "=", "False", ")", ":", "\n", "        ", "\"\"\"Read given pattern in tensor representation from file\"\"\"", "\n", "spec_list", "=", "[", "file", "for", "file", "in", "folder_elements", "if", "'specification.json'", "in", "file", "]", "\n", "if", "not", "spec_list", ":", "\n", "            ", "raise", "RuntimeError", "(", "'GarmentBaseDataset::Error::*specification.json not found for {}'", ".", "format", "(", "datapoint_name", ")", ")", "\n", "\n", "", "pattern", "=", "NNSewingPattern", "(", "\n", "self", ".", "root_path", "/", "datapoint_name", "/", "spec_list", "[", "0", "]", ",", "\n", "panel_classifier", "=", "self", ".", "panel_classifier", ",", "\n", "template_name", "=", "self", ".", "template_name", "(", "datapoint_name", ")", ")", "\n", "return", "pattern", ".", "pattern_as_tensors", "(", "\n", "pad_panels_to_len", ",", "pad_panels_num", "=", "pad_panel_num", ",", "pad_stitches_num", "=", "pad_stitches_num", ",", "\n", "with_placement", "=", "with_placement", ",", "with_stitches", "=", "with_stitches", ",", "\n", "with_stitch_tags", "=", "with_stitch_tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._unpad": [[524, 533], ["torch.is_tensor", "torch.isclose", "torch.zeros_like", "torch.all", "numpy.all", "numpy.isclose"], "methods", ["None"], ["", "def", "_unpad", "(", "self", ",", "element", ",", "tolerance", "=", "1.e-5", ")", ":", "\n", "        ", "\"\"\"Return copy of input element without padding from given element. Used to unpad edge sequences in pattern-oriented datasets\"\"\"", "\n", "# NOTE: might be some false removal of zero edges in the middle of the list.", "\n", "if", "torch", ".", "is_tensor", "(", "element", ")", ":", "\n", "            ", "bool_matrix", "=", "torch", ".", "isclose", "(", "element", ",", "torch", ".", "zeros_like", "(", "element", ")", ",", "atol", "=", "tolerance", ")", "# per-element comparison with zero", "\n", "selection", "=", "~", "torch", ".", "all", "(", "bool_matrix", ",", "axis", "=", "1", ")", "# only non-zero rows", "\n", "", "else", ":", "# numpy", "\n", "            ", "selection", "=", "~", "np", ".", "all", "(", "np", ".", "isclose", "(", "element", ",", "0", ",", "atol", "=", "tolerance", ")", ",", "axis", "=", "1", ")", "# only non-zero rows", "\n", "", "return", "element", "[", "selection", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._get_distribution_stats": [[534, 548], ["datasets.GarmentBaseDataset.view", "datasets.GarmentBaseDataset.mean", "torch.sqrt", "datasets.GarmentBaseDataset._unpad"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._unpad"], ["", "def", "_get_distribution_stats", "(", "self", ",", "input_batch", ",", "padded", "=", "False", ")", ":", "\n", "        ", "\"\"\"Calculates mean & std values for the input tenzor along the last dimention\"\"\"", "\n", "\n", "input_batch", "=", "input_batch", ".", "view", "(", "-", "1", ",", "input_batch", ".", "shape", "[", "-", "1", "]", ")", "\n", "if", "padded", ":", "\n", "            ", "input_batch", "=", "self", ".", "_unpad", "(", "input_batch", ")", "# remove rows with zeros", "\n", "\n", "# per dimention means", "\n", "", "mean", "=", "input_batch", ".", "mean", "(", "axis", "=", "0", ")", "\n", "# per dimention stds", "\n", "stds", "=", "(", "(", "input_batch", "-", "mean", ")", "**", "2", ")", ".", "sum", "(", "0", ")", "\n", "stds", "=", "torch", ".", "sqrt", "(", "stds", "/", "input_batch", ".", "shape", "[", "0", "]", ")", "\n", "\n", "return", "mean", ",", "stds", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._get_norm_stats": [[549, 569], ["datasets.GarmentBaseDataset.view", "torch.min", "torch.max", "torch.empty_like", "enumerate", "datasets.GarmentBaseDataset._unpad", "zip", "torch.isclose", "torch.isclose", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._unpad"], ["", "def", "_get_norm_stats", "(", "self", ",", "input_batch", ",", "padded", "=", "False", ")", ":", "\n", "        ", "\"\"\"Calculate shift & scaling values needed to normalize input tenzor \n            along the last dimention to [0, 1] range\"\"\"", "\n", "input_batch", "=", "input_batch", ".", "view", "(", "-", "1", ",", "input_batch", ".", "shape", "[", "-", "1", "]", ")", "\n", "if", "padded", ":", "\n", "            ", "input_batch", "=", "self", ".", "_unpad", "(", "input_batch", ")", "# remove rows with zeros", "\n", "\n", "# per dimention info", "\n", "", "min_vector", ",", "_", "=", "torch", ".", "min", "(", "input_batch", ",", "dim", "=", "0", ")", "\n", "max_vector", ",", "_", "=", "torch", ".", "max", "(", "input_batch", ",", "dim", "=", "0", ")", "\n", "scale", "=", "torch", ".", "empty_like", "(", "min_vector", ")", "\n", "\n", "# avoid division by zero", "\n", "for", "idx", ",", "(", "tmin", ",", "tmax", ")", "in", "enumerate", "(", "zip", "(", "min_vector", ",", "max_vector", ")", ")", ":", "\n", "            ", "if", "torch", ".", "isclose", "(", "tmin", ",", "tmax", ")", ":", "\n", "                ", "scale", "[", "idx", "]", "=", "tmin", "if", "not", "torch", ".", "isclose", "(", "tmin", ",", "torch", ".", "zeros", "(", "1", ")", ")", "else", "1.", "\n", "", "else", ":", "\n", "                ", "scale", "[", "idx", "]", "=", "tmax", "-", "tmin", "\n", "\n", "", "", "return", "min_vector", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset.__init__": [[576, 594], ["datasets.GarmentBaseDataset.__init__", "datasets.Garment3DPatternFullDataset.config.update"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "start_config", "=", "{", "'data_folders'", ":", "[", "]", "}", ",", "gt_caching", "=", "False", ",", "feature_caching", "=", "False", ",", "in_transforms", "=", "[", "]", ")", ":", "\n", "        ", "if", "'mesh_samples'", "not", "in", "start_config", ":", "\n", "            ", "start_config", "[", "'mesh_samples'", "]", "=", "2000", "# default value if not given -- a bettern gurantee than a default value in func params", "\n", "", "if", "'point_noise_w'", "not", "in", "start_config", ":", "\n", "            ", "start_config", "[", "'point_noise_w'", "]", "=", "0", "# default value if not given -- a bettern gurantee than a default value in func params", "\n", "\n", "# to cache segmentation mask if enabled", "\n", "", "self", ".", "segm_cached", "=", "{", "}", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "start_config", ",", "\n", "gt_caching", "=", "gt_caching", ",", "feature_caching", "=", "feature_caching", ",", "in_transforms", "=", "in_transforms", ")", "\n", "\n", "self", ".", "config", ".", "update", "(", "\n", "element_size", "=", "self", "[", "0", "]", "[", "'ground_truth'", "]", "[", "'outlines'", "]", ".", "shape", "[", "2", "]", ",", "\n", "rotation_size", "=", "self", "[", "0", "]", "[", "'ground_truth'", "]", "[", "'rotations'", "]", ".", "shape", "[", "1", "]", ",", "\n", "translation_size", "=", "self", "[", "0", "]", "[", "'ground_truth'", "]", "[", "'translations'", "]", ".", "shape", "[", "1", "]", ",", "\n", "stitch_tag_size", "=", "self", "[", "0", "]", "[", "'ground_truth'", "]", "[", "'stitch_tags'", "]", ".", "shape", "[", "-", "1", "]", ",", "\n", "explicit_stitch_tags", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset.standardize": [[596, 655], ["print", "datasets.Garment3DPatternFullDataset.transforms.append", "datasets.Garment3DPatternFullDataset.transforms.append", "print", "data.GTtandartization", "data.FeatureStandartization", "torch.utils.data.DataLoader", "ValueError", "datasets.Garment3DPatternFullDataset._get_distribution_stats", "datasets.Garment3DPatternFullDataset._get_distribution_stats", "datasets.Garment3DPatternFullDataset._get_norm_stats", "datasets.Garment3DPatternFullDataset._get_norm_stats", "datasets.Garment3DPatternFullDataset._get_norm_stats", "feature_shift.cpu().numpy", "feature_scale.cpu().numpy", "len", "panel_shift.cpu().numpy", "rot_min.cpu().numpy", "transl_min.cpu().numpy", "st_tags_min.cpu().numpy", "panel_scale.cpu().numpy", "rot_scale.cpu().numpy", "transl_scale.cpu().numpy", "st_tags_scale.cpu().numpy", "isinstance", "isinstance", "feature_shift.cpu", "feature_scale.cpu", "panel_shift.cpu", "rot_min.cpu", "transl_min.cpu", "st_tags_min.cpu", "panel_scale.cpu", "rot_scale.cpu", "transl_scale.cpu", "st_tags_scale.cpu"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._get_distribution_stats", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._get_distribution_stats", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._get_norm_stats", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._get_norm_stats", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._get_norm_stats"], ["", "def", "standardize", "(", "self", ",", "training", "=", "None", ")", ":", "\n", "        ", "\"\"\"Use shifting and scaling for fitting data to interval comfortable for NN training.\n            Accepts either of two inputs: \n            * training subset to calculate the data statistics -- the stats are only based on training subsection of the data\n            * if stats info is already defined in config, it's used instead of calculating new statistics (usually when calling to restore dataset from existing experiment)\n            configuration has a priority: if it's given, the statistics are NOT recalculated even if training set is provided\n                => speed-up by providing stats or speeding up multiple calls to this function\n        \"\"\"", "\n", "print", "(", "'Garment3DPatternFullDataset::Using data normalization for features & ground truth'", ")", "\n", "\n", "if", "'standardize'", "in", "self", ".", "config", ":", "\n", "            ", "print", "(", "'{}::Using stats from config'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "stats", "=", "self", ".", "config", "[", "'standardize'", "]", "\n", "", "elif", "training", "is", "not", "None", ":", "\n", "            ", "loader", "=", "DataLoader", "(", "training", ",", "batch_size", "=", "len", "(", "training", ")", ",", "shuffle", "=", "False", ")", "\n", "for", "batch", "in", "loader", ":", "\n", "                ", "feature_shift", ",", "feature_scale", "=", "self", ".", "_get_distribution_stats", "(", "batch", "[", "'features'", "]", ",", "padded", "=", "False", ")", "\n", "\n", "gt", "=", "batch", "[", "'ground_truth'", "]", "\n", "panel_shift", ",", "panel_scale", "=", "self", ".", "_get_distribution_stats", "(", "gt", "[", "'outlines'", "]", ",", "padded", "=", "True", ")", "\n", "# NOTE mean values for panels are zero due to loop property ", "\n", "# panel components SHOULD NOT be shifted to keep the loop property intact ", "\n", "panel_shift", "[", "0", "]", "=", "panel_shift", "[", "1", "]", "=", "0", "\n", "\n", "# Use min\\scale (normalization) instead of Gaussian stats for translation", "\n", "# No padding as zero translation is a valid value", "\n", "transl_min", ",", "transl_scale", "=", "self", ".", "_get_norm_stats", "(", "gt", "[", "'translations'", "]", ")", "\n", "rot_min", ",", "rot_scale", "=", "self", ".", "_get_norm_stats", "(", "gt", "[", "'rotations'", "]", ")", "\n", "\n", "# stitch tags if given", "\n", "st_tags_min", ",", "st_tags_scale", "=", "self", ".", "_get_norm_stats", "(", "gt", "[", "'stitch_tags'", "]", ")", "\n", "\n", "break", "# only one batch out there anyway", "\n", "\n", "", "self", ".", "config", "[", "'standardize'", "]", "=", "{", "\n", "'f_shift'", ":", "feature_shift", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'f_scale'", ":", "feature_scale", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'gt_shift'", ":", "{", "\n", "'outlines'", ":", "panel_shift", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'rotations'", ":", "rot_min", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'translations'", ":", "transl_min", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'stitch_tags'", ":", "st_tags_min", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "}", ",", "\n", "'gt_scale'", ":", "{", "\n", "'outlines'", ":", "panel_scale", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'rotations'", ":", "rot_scale", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'translations'", ":", "transl_scale", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'stitch_tags'", ":", "st_tags_scale", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "}", "\n", "}", "\n", "stats", "=", "self", ".", "config", "[", "'standardize'", "]", "\n", "", "else", ":", "# nothing is provided", "\n", "            ", "raise", "ValueError", "(", "'Garment3DPatternFullDataset::Error::Standardization cannot be applied: supply either stats in config or training set to use standardization'", ")", "\n", "\n", "# clean-up tranform list to avoid duplicates", "\n", "", "self", ".", "transforms", "=", "[", "t", "for", "t", "in", "self", ".", "transforms", "if", "not", "isinstance", "(", "t", ",", "transforms", ".", "GTtandartization", ")", "and", "not", "isinstance", "(", "t", ",", "transforms", ".", "FeatureStandartization", ")", "]", "\n", "\n", "self", ".", "transforms", ".", "append", "(", "transforms", ".", "GTtandartization", "(", "stats", "[", "'gt_shift'", "]", ",", "stats", "[", "'gt_scale'", "]", ")", ")", "\n", "self", ".", "transforms", ".", "append", "(", "transforms", ".", "FeatureStandartization", "(", "stats", "[", "'f_shift'", "]", ",", "stats", "[", "'f_scale'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset.save_prediction_batch": [[657, 730], ["pathlib.Path", "enumerate", "zip", "datasets.Garment3DPatternFullDataset._pred_to_pattern", "prediction_imgs.append", "print", "datasets.Garment3DPatternFullDataset.serialize", "numpy.savetxt", "numpy.savetxt", "print", "pathlib.Path", "shutil.copy2", "prediction[].cpu().numpy", "str", "str", "prediction[].cpu"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset._pred_to_pattern"], ["", "def", "save_prediction_batch", "(", "\n", "self", ",", "predictions", ",", "datanames", ",", "data_folders", ",", "\n", "save_to", ",", "features", "=", "None", ",", "weights", "=", "None", ",", "orig_folder_names", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" \n            Saving predictions on batched from the current dataset\n            Saves predicted params of the datapoint to the requested data folder.\n            Returns list of paths to files with prediction visualizations\n            Assumes that the number of predictions matches the number of provided data names\"\"\"", "\n", "\n", "save_to", "=", "Path", "(", "save_to", ")", "\n", "prediction_imgs", "=", "[", "]", "\n", "for", "idx", ",", "(", "name", ",", "folder", ")", "in", "enumerate", "(", "zip", "(", "datanames", ",", "data_folders", ")", ")", ":", "\n", "\n", "# \"unbatch\" dictionary", "\n", "            ", "prediction", "=", "{", "}", "\n", "for", "key", "in", "predictions", ":", "\n", "                ", "prediction", "[", "key", "]", "=", "predictions", "[", "key", "]", "[", "idx", "]", "\n", "\n", "# add values from GT if not present in prediction", "\n", "", "if", "(", "(", "'order_matching'", "in", "self", ".", "config", "and", "self", ".", "config", "[", "'order_matching'", "]", ")", "\n", "or", "'origin_matching'", "in", "self", ".", "config", "and", "self", ".", "config", "[", "'origin_matching'", "]", "\n", "or", "not", "self", ".", "gt_caching", ")", ":", "\n", "                ", "print", "(", "f'{self.__class__.__name__}::Warning::Propagating '", "\n", "'information from GT on prediction is not implemented in given context'", ")", "\n", "", "else", ":", "\n", "                ", "gt", "=", "self", ".", "gt_cached", "[", "folder", "+", "'/'", "+", "name", "]", "\n", "for", "key", "in", "gt", ":", "\n", "                    ", "if", "key", "not", "in", "prediction", ":", "\n", "                        ", "prediction", "[", "key", "]", "=", "gt", "[", "key", "]", "\n", "\n", "# Transform to pattern object", "\n", "", "", "", "pattern", "=", "self", ".", "_pred_to_pattern", "(", "prediction", ",", "name", ")", "\n", "\n", "# log gt number of panels", "\n", "if", "self", ".", "gt_caching", ":", "\n", "                ", "gt", "=", "self", ".", "gt_cached", "[", "folder", "+", "'/'", "+", "name", "]", "\n", "pattern", ".", "spec", "[", "'properties'", "]", "[", "'correct_num_panels'", "]", "=", "gt", "[", "'num_panels'", "]", "\n", "\n", "# save prediction", "\n", "", "folder_nick", "=", "self", ".", "data_folders_nicknames", "[", "folder", "]", "if", "not", "orig_folder_names", "else", "folder", "\n", "\n", "try", ":", "\n", "                ", "final_dir", "=", "pattern", ".", "serialize", "(", "save_to", "/", "folder_nick", ",", "to_subfolder", "=", "True", ",", "tag", "=", "'_predicted_'", ")", "\n", "", "except", "(", "RuntimeError", ",", "InvalidPatternDefError", ",", "TypeError", ")", "as", "e", ":", "\n", "                ", "print", "(", "'Garment3DPatternDataset::Error::{} serializing skipped: {}'", ".", "format", "(", "name", ",", "e", ")", ")", "\n", "continue", "\n", "\n", "", "final_file", "=", "pattern", ".", "name", "+", "'_predicted__pattern.png'", "\n", "prediction_imgs", ".", "append", "(", "Path", "(", "final_dir", ")", "/", "final_file", ")", "\n", "\n", "# copy originals for comparison", "\n", "for", "file", "in", "(", "self", ".", "root_path", "/", "folder", "/", "name", ")", ".", "glob", "(", "'*'", ")", ":", "\n", "                ", "if", "(", "'.png'", "in", "file", ".", "suffix", ")", "or", "(", "'.json'", "in", "file", ".", "suffix", ")", ":", "\n", "                    ", "shutil", ".", "copy2", "(", "str", "(", "file", ")", ",", "str", "(", "final_dir", ")", ")", "\n", "\n", "# save point samples if given ", "\n", "", "", "if", "features", "is", "not", "None", ":", "\n", "                ", "shift", "=", "self", ".", "config", "[", "'standardize'", "]", "[", "'f_shift'", "]", "\n", "scale", "=", "self", ".", "config", "[", "'standardize'", "]", "[", "'f_scale'", "]", "\n", "point_cloud", "=", "features", "[", "idx", "]", "*", "scale", "+", "shift", "\n", "\n", "np", ".", "savetxt", "(", "\n", "save_to", "/", "folder_nick", "/", "name", "/", "(", "name", "+", "'_point_cloud.txt'", ")", ",", "\n", "point_cloud", "\n", ")", "\n", "# save per-point weights if given", "\n", "", "if", "'att_weights'", "in", "prediction", ":", "\n", "                ", "np", ".", "savetxt", "(", "\n", "save_to", "/", "folder_nick", "/", "name", "/", "(", "name", "+", "'_att_weights.txt'", ")", ",", "\n", "prediction", "[", "'att_weights'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "\n", "", "", "return", "prediction_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset._pred_to_pattern": [[731, 768], ["data.pattern_converter.NNSewingPattern", "datasets.Garment3DPatternFullDataset.tags_to_stitches", "data.pattern_converter.NNSewingPattern.pattern_from_tensors", "print", "prediction[].cpu().numpy", "isinstance", "torch.from_numpy", "prediction[].cpu"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset.tags_to_stitches", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.pattern_from_tensors"], ["", "def", "_pred_to_pattern", "(", "self", ",", "prediction", ",", "dataname", ")", ":", "\n", "        ", "\"\"\"Convert given predicted value to pattern object\n        \"\"\"", "\n", "\n", "# undo standardization  (outside of generinc conversion function due to custom std structure)", "\n", "gt_shifts", "=", "self", ".", "config", "[", "'standardize'", "]", "[", "'gt_shift'", "]", "\n", "gt_scales", "=", "self", ".", "config", "[", "'standardize'", "]", "[", "'gt_scale'", "]", "\n", "for", "key", "in", "gt_shifts", ":", "\n", "            ", "if", "key", "==", "'stitch_tags'", "and", "not", "self", ".", "config", "[", "'explicit_stitch_tags'", "]", ":", "\n", "# ignore stitch tags update if explicit tags were not used", "\n", "                ", "continue", "\n", "", "prediction", "[", "key", "]", "=", "prediction", "[", "key", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "gt_scales", "[", "key", "]", "+", "gt_shifts", "[", "key", "]", "\n", "\n", "# recover stitches", "\n", "", "if", "'stitches'", "in", "prediction", ":", "# if somehow prediction already has an answer", "\n", "            ", "stitches", "=", "prediction", "[", "'stitches'", "]", "\n", "", "else", ":", "# stitch tags to stitch list", "\n", "            ", "stitches", "=", "self", ".", "tags_to_stitches", "(", "\n", "torch", ".", "from_numpy", "(", "prediction", "[", "'stitch_tags'", "]", ")", "if", "isinstance", "(", "prediction", "[", "'stitch_tags'", "]", ",", "np", ".", "ndarray", ")", "else", "prediction", "[", "'stitch_tags'", "]", ",", "\n", "prediction", "[", "'free_edges_mask'", "]", "\n", ")", "\n", "\n", "# Construct the pattern from the data", "\n", "", "pattern", "=", "NNSewingPattern", "(", "view_ids", "=", "False", ",", "panel_classifier", "=", "self", ".", "panel_classifier", ")", "\n", "pattern", ".", "name", "=", "dataname", "\n", "try", ":", "\n", "            ", "pattern", ".", "pattern_from_tensors", "(", "\n", "prediction", "[", "'outlines'", "]", ",", "\n", "panel_rotations", "=", "prediction", "[", "'rotations'", "]", ",", "\n", "panel_translations", "=", "prediction", "[", "'translations'", "]", ",", "\n", "stitches", "=", "stitches", ",", "\n", "padded", "=", "True", ")", "\n", "", "except", "(", "RuntimeError", ",", "InvalidPatternDefError", ")", "as", "e", ":", "\n", "            ", "print", "(", "'Garment3DPatternDataset::Warning::{}: {}'", ".", "format", "(", "dataname", ",", "e", ")", ")", "\n", "pass", "\n", "\n", "", "return", "pattern", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset._get_sample_info": [[770, 802], ["datasets.Garment3DPatternFullDataset._sample_points", "datasets.Garment3DPatternFullDataset._point_classes_from_mesh", "datasets.Garment3DPatternFullDataset._get_pattern_ground_truth"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset._sample_points", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset._point_classes_from_mesh", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset._get_pattern_ground_truth"], ["", "def", "_get_sample_info", "(", "self", ",", "datapoint_name", ")", ":", "\n", "        ", "\"\"\"\n            Get features and Ground truth prediction for requested data example\n        \"\"\"", "\n", "folder_elements", "=", "[", "file", ".", "name", "for", "file", "in", "(", "self", ".", "root_path", "/", "datapoint_name", ")", ".", "glob", "(", "'*'", ")", "]", "# all files in this directory", "\n", "\n", "# features -- points", "\n", "if", "datapoint_name", "in", "self", ".", "feature_cached", ":", "\n", "            ", "points", "=", "self", ".", "feature_cached", "[", "datapoint_name", "]", "\n", "segm", "=", "self", ".", "segm_cached", "[", "datapoint_name", "]", "\n", "", "else", ":", "\n", "            ", "points", ",", "verts", "=", "self", ".", "_sample_points", "(", "datapoint_name", ",", "folder_elements", ")", "\n", "\n", "# Segmentation", "\n", "segm", "=", "self", ".", "_point_classes_from_mesh", "(", "\n", "points", ",", "verts", ",", "datapoint_name", ",", "folder_elements", ")", "\n", "\n", "if", "self", ".", "feature_caching", ":", "# save read values ", "\n", "                ", "self", ".", "feature_cached", "[", "datapoint_name", "]", "=", "points", "\n", "self", ".", "segm_cached", "[", "datapoint_name", "]", "=", "segm", "\n", "\n", "# GT -- pattern and segmentation", "\n", "", "", "if", "datapoint_name", "in", "self", ".", "gt_cached", ":", "# might not be compatible with list indexing", "\n", "            ", "ground_truth", "=", "self", ".", "gt_cached", "[", "datapoint_name", "]", "\n", "", "else", ":", "\n", "            ", "ground_truth", "=", "self", ".", "_get_pattern_ground_truth", "(", "datapoint_name", ",", "folder_elements", ")", "\n", "ground_truth", "[", "'segmentation'", "]", "=", "segm", "\n", "\n", "if", "self", ".", "gt_caching", ":", "\n", "                ", "self", ".", "gt_cached", "[", "datapoint_name", "]", "=", "ground_truth", "\n", "\n", "", "", "return", "points", ",", "ground_truth", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset._get_pattern_ground_truth": [[803, 820], ["datasets.Garment3DPatternFullDataset._read_pattern", "datasets.Garment3DPatternFullDataset.free_edges_mask", "datasets.Garment3DPatternFullDataset._empty_panels_mask"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._read_pattern", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset.free_edges_mask", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset._empty_panels_mask"], ["", "def", "_get_pattern_ground_truth", "(", "self", ",", "datapoint_name", ",", "folder_elements", ")", ":", "\n", "        ", "\"\"\"Get the pattern representation with 3D placement\"\"\"", "\n", "pattern", ",", "num_edges", ",", "num_panels", ",", "rots", ",", "tranls", ",", "stitches", ",", "num_stitches", ",", "stitch_tags", "=", "self", ".", "_read_pattern", "(", "\n", "datapoint_name", ",", "folder_elements", ",", "\n", "pad_panels_to_len", "=", "self", ".", "config", "[", "'max_panel_len'", "]", ",", "\n", "pad_panel_num", "=", "self", ".", "config", "[", "'max_pattern_len'", "]", ",", "\n", "pad_stitches_num", "=", "self", ".", "config", "[", "'max_num_stitches'", "]", ",", "\n", "with_placement", "=", "True", ",", "with_stitches", "=", "True", ",", "with_stitch_tags", "=", "True", ")", "\n", "free_edges_mask", "=", "self", ".", "free_edges_mask", "(", "pattern", ",", "stitches", ",", "num_stitches", ")", "\n", "empty_panels_mask", "=", "self", ".", "_empty_panels_mask", "(", "num_edges", ")", "# useful for evaluation", "\n", "\n", "\n", "return", "{", "\n", "'outlines'", ":", "pattern", ",", "'num_edges'", ":", "num_edges", ",", "\n", "'rotations'", ":", "rots", ",", "'translations'", ":", "tranls", ",", "\n", "'num_panels'", ":", "num_panels", ",", "'empty_panels_mask'", ":", "empty_panels_mask", ",", "'num_stitches'", ":", "num_stitches", ",", "\n", "'stitches'", ":", "stitches", ",", "'free_edges_mask'", ":", "free_edges_mask", ",", "'stitch_tags'", ":", "stitch_tags", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset._sample_points": [[822, 844], ["igl.read_triangle_mesh", "datasets.Garment3DPatternFullDataset.sample_mesh_points", "RuntimeError", "str", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset.sample_mesh_points"], ["", "def", "_sample_points", "(", "self", ",", "datapoint_name", ",", "folder_elements", ")", ":", "\n", "        ", "\"\"\"Make a sample from the 3d surface from a given datapoint files\n\n            Returns: sampled points and vertices of original mesh\n        \n        \"\"\"", "\n", "obj_list", "=", "[", "file", "for", "file", "in", "folder_elements", "if", "self", ".", "config", "[", "'obj_filetag'", "]", "in", "file", "and", "'.obj'", "in", "file", "]", "\n", "if", "not", "obj_list", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset:Error: geometry file *{}*.obj not found for {}'", ".", "format", "(", "self", ".", "config", "[", "'obj_filetag'", "]", ",", "datapoint_name", ")", ")", "\n", "\n", "", "verts", ",", "faces", "=", "igl", ".", "read_triangle_mesh", "(", "str", "(", "self", ".", "root_path", "/", "datapoint_name", "/", "obj_list", "[", "0", "]", ")", ")", "\n", "points", "=", "self", ".", "sample_mesh_points", "(", "self", ".", "config", "[", "'mesh_samples'", "]", ",", "verts", ",", "faces", ")", "\n", "\n", "# add gaussian noise", "\n", "if", "self", ".", "config", "[", "'point_noise_w'", "]", ":", "\n", "            ", "points", "+=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "self", ".", "config", "[", "'point_noise_w'", "]", ",", "size", "=", "points", ".", "shape", ")", "\n", "\n", "# Debug", "\n", "# if 'skirt_4_panels_00HUVRGNCG' in datapoint_name:", "\n", "#     meshplot.offline()", "\n", "#     meshplot.plot(points, c=points[:, 0], shading={\"point_size\": 3.0})", "\n", "", "return", "points", ",", "verts", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset.sample_mesh_points": [[845, 862], ["igl.random_points_on_mesh", "numpy.empty", "range", "len", "len", "numpy.dot", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sample_mesh_points", "(", "num_points", ",", "verts", ",", "faces", ")", ":", "\n", "        ", "\"\"\"A routine to sample requested number of points from a given mesh\n            Returns points in world coordinates\"\"\"", "\n", "\n", "barycentric_samples", ",", "face_ids", "=", "igl", ".", "random_points_on_mesh", "(", "num_points", ",", "verts", ",", "faces", ")", "\n", "face_ids", "[", "face_ids", ">=", "len", "(", "faces", ")", "]", "=", "len", "(", "faces", ")", "-", "1", "# workaround for https://github.com/libigl/libigl/issues/1531", "\n", "\n", "# convert to world coordinates", "\n", "points", "=", "np", ".", "empty", "(", "barycentric_samples", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "face_ids", ")", ")", ":", "\n", "            ", "face", "=", "faces", "[", "face_ids", "[", "i", "]", "]", "\n", "barycentric_coords", "=", "barycentric_samples", "[", "i", "]", "\n", "face_verts", "=", "verts", "[", "face", "]", "\n", "points", "[", "i", "]", "=", "np", ".", "dot", "(", "barycentric_coords", ",", "face_verts", ")", "\n", "\n", "", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset._point_classes_from_mesh": [[863, 906], ["igl.snap_points", "numpy.logical_or", "numpy.logical_and", "igl.snap_points", "numpy.flatnonzero", "numpy.empty.astype", "open", "numpy.array", "len", "len", "numpy.zeros", "print", "numpy.empty.astype", "datasets.Garment3DPatternFullDataset.panel_classifier.map", "numpy.unique", "numpy.empty", "enumerate", "str", "len", "datasets.Garment3DPatternFullDataset.template_name", "len", "line.rstrip", "enumerate", "len", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.panel_classes.PanelClasses.map", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset.template_name"], ["", "def", "_point_classes_from_mesh", "(", "self", ",", "points", ",", "verts", ",", "datapoint_name", ",", "folder_elements", ")", ":", "\n", "        ", "\"\"\"Map segmentation from original mesh to sampled points\"\"\"", "\n", "\n", "# load segmentation", "\n", "seg_path_list", "=", "[", "file", "for", "file", "in", "folder_elements", "if", "self", ".", "config", "[", "'obj_filetag'", "]", "in", "file", "and", "'segmentation.txt'", "in", "file", "]", "\n", "\n", "with", "open", "(", "str", "(", "self", ".", "root_path", "/", "datapoint_name", "/", "seg_path_list", "[", "0", "]", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "vert_labels", "=", "np", ".", "array", "(", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "f", "]", ")", "# remove \\n", "\n", "", "map_list", ",", "_", ",", "_", "=", "igl", ".", "snap_points", "(", "points", ",", "verts", ")", "\n", "\n", "if", "len", "(", "verts", ")", ">", "len", "(", "vert_labels", ")", ":", "\n", "            ", "point_segmentation", "=", "np", ".", "zeros", "(", "len", "(", "map_list", ")", ")", "\n", "print", "(", "f'{self.__class__.__name__}::{datapoint_name}::WARNING::Not enough segmentation labels -- {len(vert_labels)} for {len(verts)} vertices. Setting segmenations to zero'", ")", "\n", "\n", "return", "point_segmentation", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "", "point_segmentation_names", "=", "vert_labels", "[", "map_list", "]", "\n", "\n", "# find those that map to stitches and assign them the closest panel label", "\n", "# Also doing this for occasional 'None's ", "\n", "stitch_points_ids", "=", "np", ".", "logical_or", "(", "\n", "point_segmentation_names", "==", "'stitch'", ",", "point_segmentation_names", "==", "'None'", ")", "\n", "non_stitch_points_ids", "=", "np", ".", "logical_and", "(", "\n", "point_segmentation_names", "!=", "'stitch'", ",", "point_segmentation_names", "!=", "'None'", ")", "\n", "\n", "map_stitches", ",", "_", ",", "_", "=", "igl", ".", "snap_points", "(", "points", "[", "stitch_points_ids", "]", ",", "points", "[", "non_stitch_points_ids", "]", ")", "\n", "\n", "non_stitch_points_ids", "=", "np", ".", "flatnonzero", "(", "non_stitch_points_ids", ")", "\n", "point_segmentation_names", "[", "stitch_points_ids", "]", "=", "point_segmentation_names", "[", "non_stitch_points_ids", "[", "map_stitches", "]", "]", "\n", "\n", "# Map class names to int ids of loaded classes!", "\n", "if", "self", ".", "panel_classifier", "is", "not", "None", ":", "\n", "            ", "point_segmentation", "=", "self", ".", "panel_classifier", ".", "map", "(", "\n", "self", ".", "template_name", "(", "datapoint_name", ")", ",", "point_segmentation_names", ")", "\n", "", "else", ":", "\n", "# assign unique ids within given list", "\n", "            ", "unique_names", "=", "np", ".", "unique", "(", "point_segmentation_names", ")", "\n", "unique_dict", "=", "{", "name", ":", "idx", "for", "idx", ",", "name", "in", "enumerate", "(", "unique_names", ")", "}", "\n", "point_segmentation", "=", "np", ".", "empty", "(", "len", "(", "point_segmentation_names", ")", ")", "\n", "for", "idx", ",", "name", "in", "enumerate", "(", "point_segmentation_names", ")", ":", "\n", "                ", "point_segmentation", "[", "idx", "]", "=", "unique_dict", "[", "name", "]", "\n", "\n", "", "", "return", "point_segmentation", ".", "astype", "(", "np", ".", "int64", ")", "# type conversion for PyTorch NLLoss", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset._empty_panels_mask": [[907, 914], ["numpy.zeros", "len"], "methods", ["None"], ["", "def", "_empty_panels_mask", "(", "self", ",", "num_edges", ")", ":", "\n", "        ", "\"\"\"Empty panels as boolean mask\"\"\"", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "len", "(", "num_edges", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "mask", "[", "num_edges", "==", "0", "]", "=", "True", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset.tags_to_stitches": [[916, 969], ["stitch_tags.view", "free_edges_score.view", "torch.round().type", "torch.nonzero().squeeze", "len", "torch.cdist", "torch.tril_indices", "float", "range", "torch.isfinite().any", "print", "torch.tensor", "len", "flat_edges_score[].argmax", "torch.nonzero().squeeze", "torch.cdist.argmin", "stitches.append", "float", "float", "float", "float", "ValueError", "torch.tensor().transpose().to", "torch.tensor", "torch.round", "torch.nonzero", "any", "torch.isfinite", "len", "torch.sigmoid", "torch.nonzero", "torch.tensor().transpose", "torch.tensor"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "tags_to_stitches", "(", "stitch_tags", ",", "free_edges_score", ")", ":", "\n", "        ", "\"\"\"\n        Convert per-edge per panel stitch tags into the list of connected edge pairs\n        NOTE: expects inputs to be torch tensors, numpy is not supported\n        \"\"\"", "\n", "flat_tags", "=", "stitch_tags", ".", "view", "(", "-", "1", ",", "stitch_tags", ".", "shape", "[", "-", "1", "]", ")", "# with pattern-level edge ids", "\n", "\n", "# to edge classes from logits", "\n", "flat_edges_score", "=", "free_edges_score", ".", "view", "(", "-", "1", ")", "\n", "flat_edges_mask", "=", "torch", ".", "round", "(", "torch", ".", "sigmoid", "(", "flat_edges_score", ")", ")", ".", "type", "(", "torch", ".", "BoolTensor", ")", "\n", "\n", "# filter free edges", "\n", "non_free_mask", "=", "~", "flat_edges_mask", "\n", "non_free_edges", "=", "torch", ".", "nonzero", "(", "non_free_mask", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", "-", "1", ")", "# mapping of non-free-edges ids to full edges list id", "\n", "if", "not", "any", "(", "non_free_mask", ")", "or", "non_free_edges", ".", "shape", "[", "0", "]", "<", "2", ":", "# -> no stitches", "\n", "            ", "print", "(", "'Garment3DPatternFullDataset::Warning::no non-zero stitch tags detected'", ")", "\n", "return", "torch", ".", "tensor", "(", "[", "]", ")", "\n", "\n", "# Check for even number of tags", "\n", "", "if", "len", "(", "non_free_edges", ")", "%", "2", ":", "# odd => at least one of tags is erroneously non-free", "\n", "# -> remove the edge that is closest to free edges class from comparison", "\n", "            ", "to_remove", "=", "flat_edges_score", "[", "non_free_mask", "]", ".", "argmax", "(", ")", "# the higer the score, the closer the edge is to free edges", "\n", "non_free_mask", "[", "non_free_edges", "[", "to_remove", "]", "]", "=", "False", "\n", "non_free_edges", "=", "torch", ".", "nonzero", "(", "non_free_mask", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "# Now we have even number of tags to match", "\n", "", "num_non_free", "=", "len", "(", "non_free_edges", ")", "\n", "dist_matrix", "=", "torch", ".", "cdist", "(", "flat_tags", "[", "non_free_mask", "]", ",", "flat_tags", "[", "non_free_mask", "]", ")", "\n", "\n", "# remove self-distance on diagonal & lower triangle elements (duplicates)", "\n", "tril_ids", "=", "torch", ".", "tril_indices", "(", "num_non_free", ",", "num_non_free", ")", "\n", "dist_matrix", "[", "tril_ids", "[", "0", "]", ",", "tril_ids", "[", "1", "]", "]", "=", "float", "(", "'inf'", ")", "\n", "\n", "# pair egdes by min distance to each other starting by the closest pair", "\n", "stitches", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_non_free", "//", "2", ")", ":", "# this many pair to arrange", "\n", "            ", "to_match_idx", "=", "dist_matrix", ".", "argmin", "(", ")", "# current global min is also a best match for the pair it's calculated for!", "\n", "row", "=", "to_match_idx", "//", "dist_matrix", ".", "shape", "[", "0", "]", "\n", "col", "=", "to_match_idx", "%", "dist_matrix", ".", "shape", "[", "0", "]", "\n", "stitches", ".", "append", "(", "[", "non_free_edges", "[", "row", "]", ",", "non_free_edges", "[", "col", "]", "]", ")", "\n", "\n", "# exlude distances with matched edges from further consideration", "\n", "dist_matrix", "[", "row", ",", ":", "]", "=", "float", "(", "'inf'", ")", "\n", "dist_matrix", "[", ":", ",", "row", "]", "=", "float", "(", "'inf'", ")", "\n", "dist_matrix", "[", ":", ",", "col", "]", "=", "float", "(", "'inf'", ")", "\n", "dist_matrix", "[", "col", ",", ":", "]", "=", "float", "(", "'inf'", ")", "\n", "\n", "", "if", "torch", ".", "isfinite", "(", "dist_matrix", ")", ".", "any", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Garment3DPatternFullDataset::Error::Tags-to-stitches::Number of stitches {} & dist_matrix shape {} mismatch'", ".", "format", "(", "\n", "num_non_free", "/", "2", ",", "dist_matrix", ".", "shape", ")", ")", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "stitches", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "to", "(", "stitch_tags", ".", "device", ")", "if", "len", "(", "stitches", ")", ">", "0", "else", "torch", ".", "tensor", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.Garment3DPatternFullDataset.free_edges_mask": [[970, 983], ["numpy.ones"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "free_edges_mask", "(", "pattern", ",", "stitches", ",", "num_stitches", ")", ":", "\n", "        ", "\"\"\"\n        Construct the mask to identify edges that are not connected to any other\n        \"\"\"", "\n", "mask", "=", "np", ".", "ones", "(", "(", "pattern", ".", "shape", "[", "0", "]", ",", "pattern", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "max_edge", "=", "pattern", ".", "shape", "[", "1", "]", "\n", "\n", "for", "side", "in", "stitches", "[", ":", ",", ":", "num_stitches", "]", ":", "# ignore the padded part", "\n", "            ", "for", "edge_id", "in", "side", ":", "\n", "                ", "mask", "[", "edge_id", "//", "max_edge", "]", "[", "edge_id", "%", "max_edge", "]", "=", "False", "\n", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__": [[989, 1017], ["init_config.update", "datasets.GarmentBaseDataset.__init__", "datasets.GarmentStitchPairsDataset.config.update"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root_dir", ",", "start_config", "=", "{", "'data_folders'", ":", "[", "]", "}", ",", "\n", "gt_caching", "=", "False", ",", "feature_caching", "=", "False", ",", "in_transforms", "=", "[", "]", ",", "\n", "filter_correct_n_panels", "=", "False", ")", ":", "\n", "        ", "if", "gt_caching", "or", "feature_caching", ":", "\n", "            ", "gt_caching", "=", "feature_caching", "=", "True", "# ensure that both are simulataneously True or False", "\n", "\n", "", "self", ".", "filter_correct_n_panels", "=", "filter_correct_n_panels", "\n", "# data-specific defaults", "\n", "init_config", "=", "{", "\n", "'data_folders'", ":", "[", "]", ",", "\n", "'random_pairs_mode'", ":", "True", ",", "# False to use all possible pairs", "\n", "'stitched_edge_pairs_num'", ":", "200", ",", "\n", "'non_stitched_edge_pairs_num'", ":", "200", ",", "\n", "'shuffle_pairs'", ":", "True", ",", "\n", "'shuffle_pairs_order'", ":", "True", "\n", "}", "\n", "init_config", ".", "update", "(", "start_config", ")", "# values from input", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "root_dir", ",", "init_config", ",", "\n", "gt_caching", "=", "gt_caching", ",", "feature_caching", "=", "feature_caching", ",", "in_transforms", "=", "in_transforms", ")", "\n", "\n", "self", ".", "config", ".", "update", "(", "\n", "element_size", "=", "self", "[", "0", "]", "[", "'features'", "]", ".", "shape", "[", "-", "1", "]", ",", "\n", ")", "\n", "\n", "self", ".", "correctness_mask", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.standardize": [[1018, 1049], ["print", "datasets.GarmentStitchPairsDataset.transforms.append", "print", "data.FeatureStandartization", "torch.utils.data.DataLoader", "ValueError", "datasets.GarmentStitchPairsDataset._get_norm_stats", "feature_shift.cpu().numpy", "feature_scale.cpu().numpy", "len", "isinstance", "isinstance", "feature_shift.cpu", "feature_scale.cpu"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentBaseDataset._get_norm_stats"], ["", "def", "standardize", "(", "self", ",", "training", "=", "None", ")", ":", "\n", "        ", "\"\"\"Use shifting and scaling for fitting data to interval comfortable for NN training.\n            Accepts either of two inputs: \n            * training subset to calculate the data statistics -- the stats are only based on training subsection of the data\n            * if stats info is already defined in config, it's used instead of calculating new statistics (usually when calling to restore dataset from existing experiment)\n            configuration has a priority: if it's given, the statistics are NOT recalculated even if training set is provided\n                => speed-up by providing stats or speeding up multiple calls to this function\n        \"\"\"", "\n", "print", "(", "'{}::Using data normalization for features & ground truth'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "if", "'standardize'", "in", "self", ".", "config", ":", "\n", "            ", "print", "(", "'{}::Using stats from config'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "stats", "=", "self", ".", "config", "[", "'standardize'", "]", "\n", "", "elif", "training", "is", "not", "None", ":", "\n", "            ", "loader", "=", "DataLoader", "(", "training", ",", "batch_size", "=", "len", "(", "training", ")", ",", "shuffle", "=", "False", ")", "\n", "for", "batch", "in", "loader", ":", "\n", "                ", "feature_shift", ",", "feature_scale", "=", "self", ".", "_get_norm_stats", "(", "batch", "[", "'features'", "]", ",", "padded", "=", "False", ")", "\n", "break", "# only one batch out there anyway", "\n", "\n", "", "self", ".", "config", "[", "'standardize'", "]", "=", "{", "\n", "'f_shift'", ":", "feature_shift", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "'f_scale'", ":", "feature_scale", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", "\n", "stats", "=", "self", ".", "config", "[", "'standardize'", "]", "\n", "", "else", ":", "# nothing is provided", "\n", "            ", "raise", "ValueError", "(", "'Garment3DPatternFullDataset::Error::Standardization cannot be applied: supply either stats in config or training set to use standardization'", ")", "\n", "\n", "# clean-up tranform list to avoid duplicates", "\n", "", "self", ".", "transforms", "=", "[", "t", "for", "t", "in", "self", ".", "transforms", "if", "not", "isinstance", "(", "t", ",", "transforms", ".", "GTtandartization", ")", "and", "not", "isinstance", "(", "t", ",", "transforms", ".", "FeatureStandartization", ")", "]", "\n", "\n", "self", ".", "transforms", ".", "append", "(", "transforms", ".", "FeatureStandartization", "(", "stats", "[", "'f_shift'", "]", ",", "stats", "[", "'f_scale'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset.save_prediction_batch": [[1051, 1095], ["pathlib.Path", "enumerate", "zip", "data.pattern_converter.NNSewingPattern", "data.pattern_converter.NNSewingPattern.stitches_from_pair_classifier", "prediction_imgs.append", "print", "data.pattern_converter.NNSewingPattern.serialize", "print", "pathlib.Path", "shutil.copy2", "str", "str"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.stitches_from_pair_classifier"], ["", "def", "save_prediction_batch", "(", "\n", "self", ",", "predictions", ",", "datanames", ",", "data_folders", ",", "save_to", ",", "\n", "model", "=", "None", ",", "orig_folder_names", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" \n            Saving predictions on batch from the current dataset based on given model\n            Saves predicted params of the datapoint to the requested data folder.\n            Returns list of paths to files with prediction visualizations\n        \"\"\"", "\n", "\n", "save_to", "=", "Path", "(", "save_to", ")", "\n", "prediction_imgs", "=", "[", "]", "\n", "for", "idx", ",", "(", "name", ",", "folder", ")", "in", "enumerate", "(", "zip", "(", "datanames", ",", "data_folders", ")", ")", ":", "\n", "\n", "# Load corresponding pattern", "\n", "            ", "folder_elements", "=", "[", "file", ".", "name", "for", "file", "in", "(", "self", ".", "root_path", "/", "folder", "/", "name", ")", ".", "glob", "(", "'*'", ")", "]", "# all files in this directory", "\n", "spec_list", "=", "[", "file", "for", "file", "in", "folder_elements", "if", "'specification.json'", "in", "file", "]", "\n", "if", "not", "spec_list", ":", "\n", "                ", "print", "(", "'{}::Error::{} serializing skipped: *specification.json not found'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "name", ")", ")", "\n", "continue", "\n", "\n", "", "pattern", "=", "NNSewingPattern", "(", "self", ".", "root_path", "/", "folder", "/", "name", "/", "spec_list", "[", "0", "]", ")", "\n", "\n", "# find stitches", "\n", "pattern", ".", "stitches_from_pair_classifier", "(", "model", ",", "self", ".", "config", "[", "'standardize'", "]", ")", "\n", "\n", "# save prediction", "\n", "folder_nick", "=", "self", ".", "data_folders_nicknames", "[", "folder", "]", "if", "not", "orig_folder_names", "else", "folder", "\n", "\n", "try", ":", "\n", "                ", "final_dir", "=", "pattern", ".", "serialize", "(", "save_to", "/", "folder_nick", ",", "to_subfolder", "=", "True", ",", "tag", "=", "'_predicted_'", ")", "\n", "", "except", "(", "RuntimeError", ",", "InvalidPatternDefError", ",", "TypeError", ")", "as", "e", ":", "\n", "                ", "print", "(", "'{}::Error::{} serializing skipped: {}'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "name", ",", "e", ")", ")", "\n", "continue", "\n", "\n", "", "final_file", "=", "pattern", ".", "name", "+", "'_predicted__pattern.png'", "\n", "prediction_imgs", ".", "append", "(", "Path", "(", "final_dir", ")", "/", "final_file", ")", "\n", "\n", "# copy originals for comparison", "\n", "for", "file", "in", "(", "self", ".", "root_path", "/", "folder", "/", "name", ")", ".", "glob", "(", "'*'", ")", ":", "\n", "                ", "if", "(", "'.png'", "in", "file", ".", "suffix", ")", "or", "(", "'.json'", "in", "file", ".", "suffix", ")", ":", "\n", "                    ", "shutil", ".", "copy2", "(", "str", "(", "file", ")", ",", "str", "(", "final_dir", ")", ")", "\n", "\n", "", "", "", "return", "prediction_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset._get_sample_info": [[1097, 1133], ["data.pattern_converter.NNSewingPattern", "RuntimeError", "data.pattern_converter.NNSewingPattern.stitches_as_3D_pairs", "data.pattern_converter.NNSewingPattern.all_edge_pairs", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.stitches_as_3D_pairs", "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.pattern_converter.NNSewingPattern.all_edge_pairs"], ["", "def", "_get_sample_info", "(", "self", ",", "datapoint_name", ")", ":", "\n", "        ", "\"\"\"\n            Get features and Ground truth prediction for requested data example\n        \"\"\"", "\n", "if", "datapoint_name", "in", "self", ".", "gt_cached", ":", "# autpmatically means that features are cashed too", "\n", "            ", "ground_truth", "=", "self", ".", "gt_cached", "[", "datapoint_name", "]", "\n", "features", "=", "self", ".", "feature_cached", "[", "datapoint_name", "]", "\n", "\n", "return", "features", ",", "ground_truth", "\n", "\n", "# Get stitch pairs & mask from spec", "\n", "", "folder_elements", "=", "[", "file", ".", "name", "for", "file", "in", "(", "self", ".", "root_path", "/", "datapoint_name", ")", ".", "glob", "(", "'*'", ")", "]", "# all files in this directory", "\n", "spec_list", "=", "[", "file", "for", "file", "in", "folder_elements", "if", "'specification.json'", "in", "file", "]", "\n", "if", "not", "spec_list", ":", "\n", "            ", "raise", "RuntimeError", "(", "'GarmentBaseDataset::Error::*specification.json not found for {}'", ".", "format", "(", "datapoint_name", ")", ")", "\n", "\n", "# Load from prediction if exists", "\n", "", "predicted_list", "=", "[", "file", "for", "file", "in", "spec_list", "if", "'predicte'", "in", "file", "]", "\n", "spec", "=", "predicted_list", "[", "0", "]", "if", "len", "(", "predicted_list", ")", ">", "0", "else", "spec_list", "[", "0", "]", "\n", "\n", "pattern", "=", "NNSewingPattern", "(", "self", ".", "root_path", "/", "datapoint_name", "/", "spec", ")", "\n", "\n", "if", "self", ".", "config", "[", "'random_pairs_mode'", "]", ":", "\n", "            ", "features", ",", "ground_truth", "=", "pattern", ".", "stitches_as_3D_pairs", "(", "\n", "self", ".", "config", "[", "'stitched_edge_pairs_num'", "]", ",", "self", ".", "config", "[", "'non_stitched_edge_pairs_num'", "]", ",", "\n", "self", ".", "config", "[", "'shuffle_pairs'", "]", ",", "self", ".", "config", "[", "'shuffle_pairs_order'", "]", ")", "\n", "", "else", ":", "\n", "            ", "features", ",", "_", ",", "ground_truth", "=", "pattern", ".", "all_edge_pairs", "(", ")", "\n", "\n", "# save elements", "\n", "", "if", "self", ".", "gt_caching", "and", "self", ".", "feature_caching", ":", "\n", "            ", "self", ".", "gt_cached", "[", "datapoint_name", "]", "=", "ground_truth", "\n", "self", ".", "feature_cached", "[", "datapoint_name", "]", "=", "features", "\n", "\n", "\n", "", "return", "features", ",", "ground_truth", "\n", "\n"]], "home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset._clean_datapoint_list": [[1134, 1160], ["datasets.GarmentBaseDataset._clean_datapoint_list", "data.pattern_converter.NNSewingPattern", "final_list.append", "RuntimeError", "len", "print", "len", "len"], "methods", ["home.repos.pwc.inspect_result.maria-korosteleva_Garment-Pattern-Estimation.data.datasets.GarmentStitchPairsDataset._clean_datapoint_list"], ["", "def", "_clean_datapoint_list", "(", "self", ",", "datapoints_names", ",", "dataset_folder", ")", ":", "\n", "        ", "super", "(", ")", ".", "_clean_datapoint_list", "(", "datapoints_names", ",", "dataset_folder", ")", "\n", "\n", "final_list", "=", "[", "]", "\n", "for", "datapoint_name", "in", "datapoints_names", ":", "\n", "            ", "folder_elements", "=", "[", "file", ".", "name", "for", "file", "in", "(", "self", ".", "root_path", "/", "datapoint_name", ")", ".", "glob", "(", "'*'", ")", "]", "# all files in this directory", "\n", "spec_list", "=", "[", "file", "for", "file", "in", "folder_elements", "if", "'specification.json'", "in", "file", "]", "\n", "if", "not", "spec_list", ":", "\n", "                ", "raise", "RuntimeError", "(", "'GarmentBaseDataset::Error::*specification.json not found for {}'", ".", "format", "(", "datapoint_name", ")", ")", "\n", "\n", "# Load from prediction if exists", "\n", "", "predicted_list", "=", "[", "file", "for", "file", "in", "spec_list", "if", "'predicte'", "in", "file", "]", "\n", "spec", "=", "predicted_list", "[", "0", "]", "if", "len", "(", "predicted_list", ")", ">", "0", "else", "spec_list", "[", "0", "]", "\n", "pattern", "=", "NNSewingPattern", "(", "self", ".", "root_path", "/", "datapoint_name", "/", "spec", ")", "\n", "\n", "if", "not", "len", "(", "pattern", ".", "pattern", "[", "'stitches'", "]", ")", ":", "\n", "                ", "print", "(", "f'{self.__class__.__name__}::ERROR::{datapoint_name}::has no stitches'", ")", "\n", "continue", "\n", "", "if", "self", ".", "filter_correct_n_panels", ":", "\n", "                ", "correct_num_panels", "=", "pattern", ".", "spec", "[", "'properties'", "]", "[", "'correct_num_panels'", "]", "\n", "actual_num_panels", "=", "len", "(", "pattern", ".", "pattern", "[", "'panels'", "]", ")", "\n", "if", "correct_num_panels", "!=", "actual_num_panels", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "final_list", ".", "append", "(", "datapoint_name", ")", "\n", "", "return", "final_list", "\n", "\n"]]}