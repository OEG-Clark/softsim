{"home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.radon.Radon.__init__": [[9, 19], ["torch.nn.Module.__init__", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "radon.Radon._create_grids"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram.__init__", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram._create_grids"], ["    ", "def", "__init__", "(", "self", ",", "in_size", "=", "None", ",", "theta", "=", "None", ",", "circle", "=", "True", ",", "dtype", "=", "torch", ".", "float", ")", ":", "\n", "        ", "super", "(", "Radon", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "circle", "=", "circle", "\n", "self", ".", "theta", "=", "theta", "\n", "if", "theta", "is", "None", ":", "\n", "            ", "self", ".", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "all_grids", "=", "None", "\n", "if", "in_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "all_grids", "=", "self", ".", "_create_grids", "(", "self", ".", "theta", ",", "in_size", ",", "circle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.radon.Radon.forward": [[20, 44], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "radon.Radon._create_grids", "int", "torch.pad", "torch.pad", "len", "len", "utils.grid_sample", "utils.grid_sample.sum", "radon.Radon.all_grids[].repeat().to", "radon.Radon.all_grids[].repeat"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram._create_grids"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "W", ",", "H", "=", "x", ".", "shape", "\n", "assert", "W", "==", "H", "\n", "\n", "if", "self", ".", "all_grids", "is", "None", ":", "\n", "            ", "self", ".", "all_grids", "=", "self", ".", "_create_grids", "(", "self", ".", "theta", ",", "W", ",", "self", ".", "circle", ")", "\n", "\n", "", "if", "not", "self", ".", "circle", ":", "\n", "            ", "diagonal", "=", "SQRT2", "*", "W", "\n", "pad", "=", "int", "(", "(", "diagonal", "-", "W", ")", ".", "ceil", "(", ")", ")", "\n", "new_center", "=", "(", "W", "+", "pad", ")", "//", "2", "\n", "old_center", "=", "W", "//", "2", "\n", "pad_before", "=", "new_center", "-", "old_center", "\n", "pad_width", "=", "(", "pad_before", ",", "pad", "-", "pad_before", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "pad_width", "[", "0", "]", ",", "pad_width", "[", "1", "]", ",", "pad_width", "[", "0", "]", ",", "pad_width", "[", "1", "]", ")", ")", "\n", "\n", "", "N", ",", "C", ",", "W", ",", "_", "=", "x", ".", "shape", "\n", "out", "=", "torch", ".", "zeros", "(", "N", ",", "C", ",", "W", ",", "len", "(", "self", ".", "theta", ")", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "theta", ")", ")", ":", "\n", "            ", "rotated", "=", "grid_sample", "(", "x", ",", "self", ".", "all_grids", "[", "i", "]", ".", "repeat", "(", "N", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "x", ".", "device", ")", ")", "\n", "out", "[", "...", ",", "i", "]", "=", "rotated", ".", "sum", "(", "2", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.radon.Radon._create_grids": [[45, 58], ["int", "utils.deg2rad", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "all_grids.append", "utils.affine_grid", "utils.deg2rad.cos", "utils.deg2rad.sin", "utils.deg2rad.cos", "utils.deg2rad.sin"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.deg2rad"], ["", "def", "_create_grids", "(", "self", ",", "angles", ",", "grid_size", ",", "circle", ")", ":", "\n", "        ", "if", "not", "circle", ":", "\n", "            ", "grid_size", "=", "int", "(", "(", "SQRT2", "*", "grid_size", ")", ".", "ceil", "(", ")", ")", "\n", "", "grid_shape", "=", "[", "1", ",", "1", ",", "grid_size", ",", "grid_size", "]", "\n", "all_grids", "=", "[", "]", "\n", "for", "theta", "in", "angles", ":", "\n", "            ", "theta", "=", "deg2rad", "(", "theta", ",", "self", ".", "dtype", ")", "\n", "R", "=", "torch", ".", "tensor", "(", "[", "[", "\n", "[", "theta", ".", "cos", "(", ")", ",", "theta", ".", "sin", "(", ")", ",", "0", "]", ",", "\n", "[", "-", "theta", ".", "sin", "(", ")", ",", "theta", ".", "cos", "(", ")", ",", "0", "]", ",", "\n", "]", "]", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "all_grids", ".", "append", "(", "affine_grid", "(", "R", ",", "grid_shape", ")", ")", "\n", "", "return", "all_grids", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.radon.IRadon.__init__": [[60, 74], ["filters.RampFilter", "torch.nn.Module.__init__", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "utils.deg2rad", "radon.IRadon._create_yxgrid", "radon.IRadon._create_grids"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram.__init__", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.deg2rad", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.radon.IRadon._create_yxgrid", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram._create_grids"], ["    ", "def", "__init__", "(", "self", ",", "in_size", "=", "None", ",", "theta", "=", "None", ",", "circle", "=", "True", ",", "\n", "use_filter", "=", "RampFilter", "(", ")", ",", "out_size", "=", "None", ",", "dtype", "=", "torch", ".", "float", ")", ":", "\n", "        ", "super", "(", "IRadon", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "circle", "=", "circle", "\n", "self", ".", "theta", "=", "theta", "if", "theta", "is", "not", "None", "else", "torch", ".", "arange", "(", "180", ")", "\n", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "in_size", "=", "in_size", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "deg2rad", "=", "lambda", "x", ":", "deg2rad", "(", "x", ",", "dtype", ")", "\n", "self", ".", "ygrid", ",", "self", ".", "xgrid", ",", "self", ".", "all_grids", "=", "None", ",", "None", ",", "None", "\n", "if", "in_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "ygrid", ",", "self", ".", "xgrid", "=", "self", ".", "_create_yxgrid", "(", "in_size", ",", "circle", ")", "\n", "self", ".", "all_grids", "=", "self", ".", "_create_grids", "(", "self", ".", "theta", ",", "in_size", ",", "circle", ")", "\n", "", "self", ".", "filter", "=", "use_filter", "if", "use_filter", "is", "not", "None", "else", "lambda", "x", ":", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.radon.IRadon.forward": [[75, 113], ["radon.IRadon.filter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "radon.IRadon._create_yxgrid", "radon.IRadon._create_grids", "len", "utils.grid_sample", "int", "torch.pad", "torch.pad", "reconstruction_circle.repeat.repeat.repeat", "utils.PI.to", "torch.pad", "torch.pad", "int", "radon.IRadon.all_grids[].repeat().to", "torch.tensor().ceil", "torch.tensor().ceil", "torch.tensor().ceil", "torch.tensor().ceil", "len", "radon.IRadon.all_grids[].repeat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.radon.IRadon._create_yxgrid", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram._create_grids"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "it_size", "=", "x", ".", "shape", "[", "2", "]", "\n", "ch_size", "=", "x", ".", "shape", "[", "1", "]", "\n", "\n", "if", "self", ".", "in_size", "is", "None", ":", "\n", "            ", "self", ".", "in_size", "=", "int", "(", "(", "it_size", "/", "SQRT2", ")", ".", "floor", "(", ")", ")", "if", "not", "self", ".", "circle", "else", "it_size", "\n", "", "if", "None", "in", "[", "self", ".", "ygrid", ",", "self", ".", "xgrid", ",", "self", ".", "all_grids", "]", ":", "\n", "            ", "self", ".", "ygrid", ",", "self", ".", "xgrid", "=", "self", ".", "_create_yxgrid", "(", "self", ".", "in_size", ",", "self", ".", "circle", ")", "\n", "self", ".", "all_grids", "=", "self", ".", "_create_grids", "(", "self", ".", "theta", ",", "self", ".", "in_size", ",", "self", ".", "circle", ")", "\n", "\n", "", "x", "=", "self", ".", "filter", "(", "x", ")", "\n", "\n", "reco", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "ch_size", ",", "it_size", ",", "it_size", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "for", "i_theta", "in", "range", "(", "len", "(", "self", ".", "theta", ")", ")", ":", "\n", "            ", "reco", "+=", "grid_sample", "(", "x", ",", "self", ".", "all_grids", "[", "i_theta", "]", ".", "repeat", "(", "reco", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "x", ".", "device", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "circle", ":", "\n", "            ", "W", "=", "self", ".", "in_size", "\n", "diagonal", "=", "it_size", "\n", "pad", "=", "int", "(", "torch", ".", "tensor", "(", "diagonal", "-", "W", ",", "dtype", "=", "torch", ".", "float", ")", ".", "ceil", "(", ")", ")", "\n", "new_center", "=", "(", "W", "+", "pad", ")", "//", "2", "\n", "old_center", "=", "W", "//", "2", "\n", "pad_before", "=", "new_center", "-", "old_center", "\n", "pad_width", "=", "(", "pad_before", ",", "pad", "-", "pad_before", ")", "\n", "reco", "=", "F", ".", "pad", "(", "reco", ",", "(", "-", "pad_width", "[", "0", "]", ",", "-", "pad_width", "[", "1", "]", ",", "-", "pad_width", "[", "0", "]", ",", "-", "pad_width", "[", "1", "]", ")", ")", "\n", "\n", "", "if", "self", ".", "circle", ":", "\n", "            ", "reconstruction_circle", "=", "(", "self", ".", "xgrid", "**", "2", "+", "self", ".", "ygrid", "**", "2", ")", "<=", "1", "\n", "reconstruction_circle", "=", "reconstruction_circle", ".", "repeat", "(", "x", ".", "shape", "[", "0", "]", ",", "ch_size", ",", "1", ",", "1", ")", "\n", "reco", "[", "~", "reconstruction_circle", "]", "=", "0.", "\n", "\n", "", "reco", "*=", "PI", ".", "to", "(", "reco", ".", "device", ")", "/", "(", "2", "*", "len", "(", "self", ".", "theta", ")", ")", "\n", "\n", "if", "self", ".", "out_size", "is", "not", "None", ":", "\n", "            ", "pad", "=", "(", "self", ".", "out_size", "-", "self", ".", "in_size", ")", "//", "2", "\n", "reco", "=", "F", ".", "pad", "(", "reco", ",", "(", "pad", ",", "pad", ",", "pad", ",", "pad", ")", ")", "\n", "\n", "", "return", "reco", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.radon.IRadon._create_yxgrid": [[114, 119], ["torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "int"], "methods", ["None"], ["", "def", "_create_yxgrid", "(", "self", ",", "in_size", ",", "circle", ")", ":", "\n", "        ", "if", "not", "circle", ":", "\n", "            ", "in_size", "=", "int", "(", "(", "SQRT2", "*", "in_size", ")", ".", "ceil", "(", ")", ")", "\n", "", "unitrange", "=", "torch", ".", "linspace", "(", "-", "1", ",", "1", ",", "in_size", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "return", "torch", ".", "meshgrid", "(", "unitrange", ",", "unitrange", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.radon.IRadon._xy_to_t": [[120, 122], ["radon.IRadon.deg2rad().cos", "radon.IRadon.deg2rad().sin", "radon.IRadon.deg2rad", "radon.IRadon.deg2rad"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.deg2rad", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.deg2rad"], ["", "def", "_xy_to_t", "(", "self", ",", "theta", ")", ":", "\n", "        ", "return", "self", ".", "xgrid", "*", "self", ".", "deg2rad", "(", "theta", ")", ".", "cos", "(", ")", "-", "self", ".", "ygrid", "*", "self", ".", "deg2rad", "(", "theta", ")", ".", "sin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.radon.IRadon._create_grids": [[123, 132], ["enumerate", "int", "radon.IRadon._xy_to_t", "all_grids.append", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "torch.stack().unsqueeze", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.radon.IRadon._xy_to_t"], ["", "def", "_create_grids", "(", "self", ",", "angles", ",", "grid_size", ",", "circle", ")", ":", "\n", "        ", "if", "not", "circle", ":", "\n", "            ", "grid_size", "=", "int", "(", "(", "SQRT2", "*", "grid_size", ")", ".", "ceil", "(", ")", ")", "\n", "", "all_grids", "=", "[", "]", "\n", "for", "i_theta", ",", "theta", "in", "enumerate", "(", "angles", ")", ":", "\n", "            ", "X", "=", "torch", ".", "ones", "(", "[", "grid_size", "]", "*", "2", ",", "dtype", "=", "self", ".", "dtype", ")", "*", "i_theta", "*", "2.", "/", "(", "len", "(", "angles", ")", "-", "1", ")", "-", "1.", "\n", "Y", "=", "self", ".", "_xy_to_t", "(", "theta", ")", "\n", "all_grids", ".", "append", "(", "torch", ".", "stack", "(", "(", "X", ",", "Y", ")", ",", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "return", "all_grids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.filters.AbstractFilter.forward": [[23, 34], ["max", "torch.pad", "torch.pad", "ramp_filter().to", "filters.AbstractFilter.create_filter", "fourier_filter.unsqueeze.unsqueeze.unsqueeze", "[].to", "int", "utils.rfft", "filters.ramp_filter", "utils.irfft", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.filters.LearnableFilter.create_filter", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.rfft", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.filters.ramp_filter", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.irfft"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input_size", "=", "x", ".", "shape", "[", "2", "]", "\n", "projection_size_padded", "=", "max", "(", "64", ",", "int", "(", "2", "**", "(", "2", "*", "torch", ".", "tensor", "(", "input_size", ")", ")", ".", "float", "(", ")", ".", "log2", "(", ")", ".", "ceil", "(", ")", ")", ")", "\n", "pad_width", "=", "projection_size_padded", "-", "input_size", "\n", "padded_tensor", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "pad_width", ")", ")", "\n", "fourier_filter", "=", "ramp_filter", "(", "padded_tensor", ".", "shape", "[", "2", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "fourier_filter", "=", "self", ".", "create_filter", "(", "fourier_filter", ")", "\n", "fourier_filter", "=", "fourier_filter", ".", "unsqueeze", "(", "-", "2", ")", "\n", "projection", "=", "rfft", "(", "padded_tensor", ",", "axis", "=", "2", ")", "*", "fourier_filter", "\n", "return", "irfft", "(", "projection", ",", "axis", "=", "2", ")", "[", ":", ",", ":", ",", ":", "input_size", ",", ":", "]", ".", "to", "(", "x", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.filters.AbstractFilter.create_filter": [[35, 37], ["None"], "methods", ["None"], ["", "def", "create_filter", "(", "self", ",", "fourier_ramp", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.filters.RampFilter.create_filter": [[39, 41], ["None"], "methods", ["None"], ["    ", "def", "create_filter", "(", "self", ",", "fourier_ramp", ")", ":", "\n", "        ", "return", "fourier_ramp", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.filters.HannFilter.create_filter": [[43, 47], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "hann.roll().unsqueeze", "hann.roll"], "methods", ["None"], ["    ", "def", "create_filter", "(", "self", ",", "fourier_ramp", ")", ":", "\n", "        ", "n", "=", "torch", ".", "arange", "(", "0", ",", "fourier_ramp", ".", "shape", "[", "0", "]", ")", "\n", "hann", "=", "(", "0.5", "-", "0.5", "*", "(", "2.0", "*", "PI", "*", "n", "/", "(", "fourier_ramp", ".", "shape", "[", "0", "]", "-", "1", ")", ")", ".", "cos", "(", ")", ")", ".", "to", "(", "fourier_ramp", ".", "device", ")", "\n", "return", "fourier_ramp", "*", "hann", ".", "roll", "(", "hann", ".", "shape", "[", "0", "]", "//", "2", ",", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.filters.LearnableFilter.__init__": [[49, 52], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "[].view", "filters.ramp_filter"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram.__init__", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.filters.ramp_filter"], ["    ", "def", "__init__", "(", "self", ",", "filter_size", ")", ":", "\n", "        ", "super", "(", "LearnableFilter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filter", "=", "nn", ".", "Parameter", "(", "ramp_filter", "(", "filter_size", ")", "[", "...", ",", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.filters.LearnableFilter.forward": [[53, 57], ["filters.LearnableFilter.filter.unsqueeze().repeat().to", "utils.irfft().to", "utils.rfft", "filters.LearnableFilter.filter.unsqueeze().repeat", "utils.irfft", "filters.LearnableFilter.filter.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.rfft", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.irfft"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fourier_filter", "=", "self", ".", "filter", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "projection", "=", "rfft", "(", "x", ",", "axis", "=", "2", ")", "*", "fourier_filter", "\n", "return", "irfft", "(", "projection", ",", "axis", "=", "2", ")", ".", "to", "(", "x", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.filters.LearnableFilter.create_filter": [[58, 60], ["None"], "methods", ["None"], ["", "def", "create_filter", "(", "self", ",", "fourier_ramp", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.filters.ramp_filter": [[7, 21], ["torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.rfft", "torch.rfft", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.rfft", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.rfft"], ["def", "ramp_filter", "(", "size", ")", ":", "\n", "    ", "image_n", "=", "torch", ".", "cat", "(", "[", "\n", "torch", ".", "arange", "(", "1", ",", "size", "/", "2", "+", "1", ",", "2", ",", "dtype", "=", "torch", ".", "int", ")", ",", "\n", "torch", ".", "arange", "(", "size", "/", "2", "-", "1", ",", "0", ",", "-", "2", ",", "dtype", "=", "torch", ".", "int", ")", ",", "\n", "]", ")", "\n", "\n", "image_filter", "=", "torch", ".", "zeros", "(", "size", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "image_filter", "[", "0", "]", "=", "0.25", "\n", "image_filter", "[", "1", ":", ":", "2", "]", "=", "-", "1", "/", "(", "PI", "*", "image_n", ")", "**", "2", "\n", "\n", "fourier_filter", "=", "torch", ".", "rfft", "(", "image_filter", ",", "1", ",", "onesided", "=", "False", ")", "\n", "fourier_filter", "[", ":", ",", "1", "]", "=", "fourier_filter", "[", ":", ",", "0", "]", "\n", "\n", "return", "2", "*", "fourier_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.Stackgram.__init__": [[7, 18], ["torch.nn.Module.__init__", "stackgram.Stackgram._create_grids", "torch.arange", "int"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram.__init__", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram._create_grids"], ["    ", "def", "__init__", "(", "self", ",", "out_size", ",", "theta", "=", "None", ",", "circle", "=", "True", ",", "mode", "=", "'nearest'", ",", "dtype", "=", "torch", ".", "float", ")", ":", "\n", "        ", "super", "(", "Stackgram", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "circle", "=", "circle", "\n", "self", ".", "theta", "=", "theta", "\n", "if", "theta", "is", "None", ":", "\n", "            ", "self", ".", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "in_size", "=", "in_size", "=", "out_size", "if", "circle", "else", "int", "(", "(", "SQRT2", "*", "out_size", ")", ".", "ceil", "(", ")", ")", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "all_grids", "=", "self", ".", "_create_grids", "(", "self", ".", "theta", ",", "in_size", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.Stackgram.forward": [[19, 29], ["torch.zeros", "range", "len", "len", "repline.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "utils.grid_sample", "torch.zeros.Stackgram.all_grids[].repeat().to", "repline.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "torch.zeros.Stackgram.all_grids[].repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "stackgram", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "len", "(", "self", ".", "theta", ")", ",", "self", ".", "in_size", ",", "self", ".", "in_size", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "\n", "for", "i_theta", "in", "range", "(", "len", "(", "self", ".", "theta", ")", ")", ":", "\n", "            ", "repline", "=", "x", "[", "...", ",", "i_theta", "]", "\n", "repline", "=", "repline", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "repline", ".", "shape", "[", "2", "]", ")", "\n", "linogram", "=", "grid_sample", "(", "repline", ",", "self", ".", "all_grids", "[", "i_theta", "]", ".", "repeat", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "x", ".", "device", ")", ",", "mode", "=", "self", ".", "mode", ")", "\n", "stackgram", "[", ":", ",", "i_theta", "]", "=", "linogram", "\n", "\n", "", "return", "stackgram", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.Stackgram._create_grids": [[30, 41], ["utils.deg2rad", "torch.tensor().unsqueeze", "all_grids.append", "utils.affine_grid", "torch.tensor", "utils.deg2rad.sin", "utils.deg2rad.cos", "utils.deg2rad.cos", "utils.deg2rad.sin"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.deg2rad"], ["", "def", "_create_grids", "(", "self", ",", "angles", ",", "grid_size", ")", ":", "\n", "        ", "grid_shape", "=", "[", "1", ",", "1", ",", "grid_size", ",", "grid_size", "]", "\n", "all_grids", "=", "[", "]", "\n", "for", "theta", "in", "angles", ":", "\n", "            ", "t", "=", "deg2rad", "(", "theta", ")", "\n", "R", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "t", ".", "sin", "(", ")", ",", "t", ".", "cos", "(", ")", ",", "0.", "]", ",", "\n", "[", "t", ".", "cos", "(", ")", ",", "-", "t", ".", "sin", "(", ")", ",", "0.", "]", ",", "\n", "]", ",", "dtype", "=", "self", ".", "dtype", ")", ".", "unsqueeze", "(", "0", ")", "\n", "all_grids", ".", "append", "(", "affine_grid", "(", "R", ",", "grid_shape", ")", ")", "\n", "", "return", "all_grids", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram.__init__": [[43, 54], ["torch.nn.Module.__init__", "stackgram.IStackgram._create_grids", "torch.arange", "int"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram.__init__", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram._create_grids"], ["    ", "def", "__init__", "(", "self", ",", "out_size", ",", "theta", "=", "None", ",", "circle", "=", "True", ",", "mode", "=", "'bilinear'", ",", "dtype", "=", "torch", ".", "float", ")", ":", "\n", "        ", "super", "(", "IStackgram", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "circle", "=", "circle", "\n", "self", ".", "theta", "=", "theta", "\n", "if", "theta", "is", "None", ":", "\n", "            ", "self", ".", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "", "self", ".", "out_size", "=", "out_size", "\n", "self", ".", "in_size", "=", "in_size", "=", "out_size", "if", "circle", "else", "int", "(", "(", "SQRT2", "*", "out_size", ")", ".", "ceil", "(", ")", ")", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "all_grids", "=", "self", ".", "_create_grids", "(", "self", ".", "theta", ",", "in_size", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram.forward": [[55, 65], ["torch.zeros", "range", "len", "len", "x[].unsqueeze", "utils.grid_sample", "stackgram.IStackgram.all_grids[].repeat().to", "stackgram.IStackgram.all_grids[].repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "sinogram", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "self", ".", "in_size", ",", "len", "(", "self", ".", "theta", ")", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "\n", "for", "i_theta", "in", "range", "(", "len", "(", "self", ".", "theta", ")", ")", ":", "\n", "            ", "linogram", "=", "x", "[", ":", ",", "i_theta", "]", ".", "unsqueeze", "(", "1", ")", "\n", "repline", "=", "grid_sample", "(", "linogram", ",", "self", ".", "all_grids", "[", "i_theta", "]", ".", "repeat", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ".", "to", "(", "x", ".", "device", ")", ",", "mode", "=", "self", ".", "mode", ")", "\n", "repline", "=", "repline", "[", "...", ",", "repline", ".", "shape", "[", "-", "1", "]", "//", "2", "]", "\n", "sinogram", "[", "...", ",", "i_theta", "]", "=", "repline", "\n", "\n", "", "return", "sinogram", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.stackgram.IStackgram._create_grids": [[66, 77], ["utils.deg2rad", "torch.tensor().unsqueeze", "all_grids.append", "utils.affine_grid", "torch.tensor", "utils.deg2rad.sin", "utils.deg2rad.cos", "utils.deg2rad.cos", "utils.deg2rad.sin"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.deg2rad"], ["", "def", "_create_grids", "(", "self", ",", "angles", ",", "grid_size", ")", ":", "\n", "        ", "grid_shape", "=", "[", "1", ",", "1", ",", "grid_size", ",", "grid_size", "]", "\n", "all_grids", "=", "[", "]", "\n", "for", "theta", "in", "angles", ":", "\n", "            ", "t", "=", "deg2rad", "(", "theta", ")", "\n", "R", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "t", ".", "sin", "(", ")", ",", "t", ".", "cos", "(", ")", ",", "0.", "]", ",", "\n", "[", "t", ".", "cos", "(", ")", ",", "-", "t", ".", "sin", "(", ")", ",", "0.", "]", ",", "\n", "]", ",", "dtype", "=", "self", ".", "dtype", ")", ".", "unsqueeze", "(", "0", ")", "\n", "all_grids", ".", "append", "(", "affine_grid", "(", "R", ",", "grid_shape", ")", ")", "\n", "", "return", "all_grids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.deg2rad": [[15, 17], ["None"], "function", ["None"], ["def", "deg2rad", "(", "x", ",", "dtype", "=", "torch", ".", "float", ")", ":", "\n", "    ", "return", "(", "x", "*", "PI", "/", "180", ")", ".", "to", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.rfft": [[18, 30], ["tensor.transpose.transpose", "torch.rfft", "torch.rfft", "torch.rfft.transpose"], "function", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.rfft", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.rfft"], ["", "def", "rfft", "(", "tensor", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "ndim", "=", "tensor", ".", "ndim", "\n", "if", "axis", "<", "0", ":", "\n", "        ", "axis", "%=", "ndim", "\n", "", "tensor", "=", "tensor", ".", "transpose", "(", "axis", ",", "ndim", "-", "1", ")", "\n", "fft_tensor", "=", "torch", ".", "rfft", "(", "\n", "tensor", ",", "\n", "1", ",", "\n", "normalized", "=", "False", ",", "\n", "onesided", "=", "False", ",", "\n", ")", "\n", "return", "fft_tensor", ".", "transpose", "(", "axis", ",", "ndim", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.irfft": [[31, 40], ["tensor.transpose.transpose", "ifft_tensor.transpose", "torch.ifft", "torch.ifft"], "function", ["None"], ["", "def", "irfft", "(", "tensor", ",", "axis", ")", ":", "\n", "    ", "assert", "0", "<=", "axis", "<", "tensor", ".", "ndim", "\n", "tensor", "=", "tensor", ".", "transpose", "(", "axis", ",", "tensor", ".", "ndim", "-", "2", ")", "\n", "ifft_tensor", "=", "torch", ".", "ifft", "(", "\n", "tensor", ",", "\n", "1", ",", "\n", "normalized", "=", "False", ",", "\n", ")", "[", "...", ",", "0", "]", "\n", "return", "ifft_tensor", ".", "transpose", "(", "axis", ",", "tensor", ".", "ndim", "-", "2", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_filters.TestFilters.test_ramp_filter": [[11, 20], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.IRadon.", "test_filters.TestFilters.assertAlmostEqual", "pytorch_radon.Radon.", "pytorch_radon.filters.RampFilter", "torch.nn.MSELoss"], "methods", ["None"], ["    ", "def", "test_ramp_filter", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "True", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "use_filter", "=", "RampFilter", "(", ")", ")", "\n", "reco", "=", "ir", "(", "r", "(", "img", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_filters.TestFilters.test_hann_filter": [[21, 30], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.IRadon.", "test_filters.TestFilters.assertAlmostEqual", "pytorch_radon.Radon.", "pytorch_radon.filters.HannFilter", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_hann_filter", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "True", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "use_filter", "=", "HannFilter", "(", ")", ")", "\n", "reco", "=", "ir", "(", "r", "(", "img", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_filters.TestFilters.test_learnable_filter": [[31, 40], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.IRadon.", "test_filters.TestFilters.assertAlmostEqual", "pytorch_radon.Radon.", "pytorch_radon.filters.LearnableFilter", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_learnable_filter", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "True", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "use_filter", "=", "LearnableFilter", "(", "img", ".", "shape", "[", "2", "]", ")", ")", "\n", "reco", "=", "ir", "(", "r", "(", "img", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_filters.TestFilters.test_hann_radon_iradon_double_scikit": [[41, 56], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Radon.", "pytorch_radon.IRadon.", "skimage.transform.radon", "skimage.transform.iradon", "test_filters.TestFilters.assertAlmostEqual", "test_filters.TestFilters.assertAlmostEqual", "torch.zeros.numpy().squeeze", "numpy.mean", "numpy.mean", "pytorch_radon.filters.HannFilter", "torch.arange.numpy", "torch.arange.numpy", "numpy.abs", "numpy.abs", "torch.zeros.numpy", "pytorch_radon.Radon.numpy().squeeze", "pytorch_radon.IRadon.numpy().squeeze", "pytorch_radon.Radon.numpy", "pytorch_radon.IRadon.numpy"], "methods", ["None"], ["", "def", "test_hann_radon_iradon_double_scikit", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "False", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ",", "use_filter", "=", "HannFilter", "(", ")", ")", "\n", "sino", "=", "r", "(", "img", ")", "\n", "reco", "=", "ir", "(", "sino", ")", "\n", "\n", "sino_sk", "=", "sk_radon", "(", "img", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ",", "theta", "=", "theta", ".", "numpy", "(", ")", ",", "circle", "=", "circle", ")", "\n", "reco_sk", "=", "sk_iradon", "(", "sino_sk", ",", "theta", "=", "theta", ".", "numpy", "(", ")", ",", "circle", "=", "circle", ",", "filter_name", "=", "\"hann\"", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "sino_sk", "-", "sino", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ")", ")", ",", "0", ",", "places", "=", "14", ")", "\n", "self", ".", "assertAlmostEqual", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "reco_sk", "-", "reco", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ")", ")", ",", "0", ",", "places", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_utils.TestUtils.test_pi": [[9, 11], ["test_utils.TestUtils.assertAlmostEqual", "pytorch_radon.utils.PI.item"], "methods", ["None"], ["    ", "def", "test_pi", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertAlmostEqual", "(", "PI", ".", "item", "(", ")", ",", "np", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_utils.TestUtils.test_sqrt2": [[12, 14], ["test_utils.TestUtils.assertAlmostEqual", "pytorch_radon.utils.SQRT2.item", "numpy.sqrt"], "methods", ["None"], ["", "def", "test_sqrt2", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertAlmostEqual", "(", "SQRT2", ".", "item", "(", ")", ",", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_utils.TestUtils.test_deg2rad": [[15, 17], ["test_utils.TestUtils.assertAlmostEqual", "pytorch_radon.utils.deg2rad().item", "numpy.deg2rad", "pytorch_radon.utils.deg2rad"], "methods", ["home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.deg2rad", "home.repos.pwc.inspect_result.phernst_pytorch_radon.pytorch_radon.utils.deg2rad"], ["", "def", "test_deg2rad", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertAlmostEqual", "(", "deg2rad", "(", "45", ",", "dtype", "=", "torch", ".", "double", ")", ".", "item", "(", ")", ",", "np", ".", "deg2rad", "(", "45", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_stackgram.TestStackgram.test_stackgram_istackgram_circle": [[7, 18], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Stackgram", "pytorch_radon.IStackgram", "pytorch_radon.IRadon.", "test_stackgram.TestStackgram.assertAlmostEqual", "pytorch_radon.IStackgram.", "pytorch_radon.Stackgram.", "pytorch_radon.Radon.", "torch.nn.MSELoss"], "methods", ["None"], ["    ", "def", "test_stackgram_istackgram_circle", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "True", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "sg", "=", "Stackgram", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "isg", "=", "IStackgram", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "reco", "=", "ir", "(", "isg", "(", "sg", "(", "r", "(", "img", ")", ")", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_stackgram.TestStackgram.test_stackgram_istackgram_circle_double": [[19, 30], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Stackgram", "pytorch_radon.IStackgram", "pytorch_radon.IRadon.", "test_stackgram.TestStackgram.assertAlmostEqual", "pytorch_radon.IStackgram.", "pytorch_radon.Stackgram.", "pytorch_radon.Radon.", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_stackgram_istackgram_circle_double", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "True", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "sg", "=", "Stackgram", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "isg", "=", "IStackgram", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "reco", "=", "ir", "(", "isg", "(", "sg", "(", "r", "(", "img", ")", ")", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_stackgram.TestStackgram.test_stackgram_istackgram_not_circle": [[31, 42], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Stackgram", "pytorch_radon.IStackgram", "pytorch_radon.IRadon.", "test_stackgram.TestStackgram.assertAlmostEqual", "pytorch_radon.IStackgram.", "pytorch_radon.Stackgram.", "pytorch_radon.Radon.", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_stackgram_istackgram_not_circle", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "False", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "sg", "=", "Stackgram", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "isg", "=", "IStackgram", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "reco", "=", "ir", "(", "isg", "(", "sg", "(", "r", "(", "img", ")", ")", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_stackgram.TestStackgram.test_stackgram_istackgram_not_circle_double": [[43, 54], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Stackgram", "pytorch_radon.IStackgram", "pytorch_radon.IRadon.", "test_stackgram.TestStackgram.assertAlmostEqual", "pytorch_radon.IStackgram.", "pytorch_radon.Stackgram.", "pytorch_radon.Radon.", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_stackgram_istackgram_not_circle_double", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "False", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "sg", "=", "Stackgram", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "isg", "=", "IStackgram", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "reco", "=", "ir", "(", "isg", "(", "sg", "(", "r", "(", "img", ")", ")", ")", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_radon.TestRadon.test_radon_iradon_circle": [[10, 20], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Radon.", "pytorch_radon.IRadon.", "test_radon.TestRadon.assertAlmostEqual", "torch.nn.MSELoss"], "methods", ["None"], ["    ", "def", "test_radon_iradon_circle", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "True", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "sino", "=", "r", "(", "img", ")", "\n", "reco", "=", "ir", "(", "sino", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_radon.TestRadon.test_radon_iradon_circle_cut_output": [[21, 31], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Radon.", "pytorch_radon.IRadon.", "test_radon.TestRadon.assertAlmostEqual", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_radon_iradon_circle_cut_output", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "True", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "out_size", "=", "128", ")", "\n", "sino", "=", "r", "(", "img", ")", "\n", "reco", "=", "ir", "(", "sino", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", "[", ":", ",", ":", ",", "64", ":", "192", ",", "64", ":", "192", "]", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_radon.TestRadon.test_radon_iradon_circle_lazy": [[32, 42], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Radon.", "pytorch_radon.IRadon.", "test_radon.TestRadon.assertAlmostEqual", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_radon_iradon_circle_lazy", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "True", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "theta", "=", "theta", ",", "circle", "=", "circle", ")", "\n", "ir", "=", "IRadon", "(", "theta", "=", "theta", ",", "circle", "=", "circle", ")", "\n", "sino", "=", "r", "(", "img", ")", "\n", "reco", "=", "ir", "(", "sino", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_radon.TestRadon.test_radon_iradon_circle_lazy_cut_output": [[43, 53], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Radon.", "pytorch_radon.IRadon.", "test_radon.TestRadon.assertAlmostEqual", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_radon_iradon_circle_lazy_cut_output", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "True", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "theta", "=", "theta", ",", "circle", "=", "circle", ")", "\n", "ir", "=", "IRadon", "(", "theta", "=", "theta", ",", "circle", "=", "circle", ",", "out_size", "=", "128", ")", "\n", "sino", "=", "r", "(", "img", ")", "\n", "reco", "=", "ir", "(", "sino", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", "[", ":", ",", ":", ",", "64", ":", "192", ",", "64", ":", "192", "]", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_radon.TestRadon.test_radon_iradon_not_circle": [[54, 64], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Radon.", "pytorch_radon.IRadon.", "test_radon.TestRadon.assertAlmostEqual", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_radon_iradon_not_circle", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "False", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "sino", "=", "r", "(", "img", ")", "\n", "reco", "=", "ir", "(", "sino", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_radon.TestRadon.test_radon_iradon_not_circle_cut_output": [[65, 75], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Radon.", "pytorch_radon.IRadon.", "test_radon.TestRadon.assertAlmostEqual", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_radon_iradon_not_circle_cut_output", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "False", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "out_size", "=", "128", ")", "\n", "sino", "=", "r", "(", "img", ")", "\n", "reco", "=", "ir", "(", "sino", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", "[", ":", ",", ":", ",", "64", ":", "192", ",", "64", ":", "192", "]", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_radon.TestRadon.test_radon_iradon_not_circle_lazy": [[76, 86], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Radon.", "pytorch_radon.IRadon.", "test_radon.TestRadon.assertAlmostEqual", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_radon_iradon_not_circle_lazy", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "False", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "theta", "=", "theta", ",", "circle", "=", "circle", ")", "\n", "ir", "=", "IRadon", "(", "theta", "=", "theta", ",", "circle", "=", "circle", ")", "\n", "sino", "=", "r", "(", "img", ")", "\n", "reco", "=", "ir", "(", "sino", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_radon.TestRadon.test_radon_iradon_not_circle_lazy_cut_output": [[87, 97], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Radon.", "pytorch_radon.IRadon.", "test_radon.TestRadon.assertAlmostEqual", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_radon_iradon_not_circle_lazy_cut_output", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "False", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "theta", "=", "theta", ",", "circle", "=", "circle", ")", "\n", "ir", "=", "IRadon", "(", "theta", "=", "theta", ",", "circle", "=", "circle", ",", "out_size", "=", "128", ")", "\n", "sino", "=", "r", "(", "img", ")", "\n", "reco", "=", "ir", "(", "sino", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", "[", ":", ",", ":", ",", "64", ":", "192", ",", "64", ":", "192", "]", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_radon.TestRadon.test_radon_iradon_circle_double": [[98, 109], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Radon.", "pytorch_radon.IRadon.", "test_radon.TestRadon.assertAlmostEqual", "test_radon.TestRadon.assertTrue", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_radon_iradon_circle_double", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "True", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "sino", "=", "r", "(", "img", ")", "\n", "reco", "=", "ir", "(", "sino", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "4", ")", "\n", "self", ".", "assertTrue", "(", "reco", ".", "dtype", "==", "torch", ".", "double", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_radon.TestRadon.test_radon_iradon_not_circle_double": [[110, 121], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Radon.", "pytorch_radon.IRadon.", "test_radon.TestRadon.assertAlmostEqual", "test_radon.TestRadon.assertTrue", "torch.nn.MSELoss"], "methods", ["None"], ["", "def", "test_radon_iradon_not_circle_double", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "False", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "sino", "=", "r", "(", "img", ")", "\n", "reco", "=", "ir", "(", "sino", ")", "\n", "self", ".", "assertAlmostEqual", "(", "torch", ".", "nn", ".", "MSELoss", "(", ")", "(", "img", ",", "reco", ")", ".", "item", "(", ")", ",", "0", ",", "places", "=", "4", ")", "\n", "self", ".", "assertTrue", "(", "reco", ".", "dtype", "==", "torch", ".", "double", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.phernst_pytorch_radon.tests.test_radon.TestRadon.test_radon_iradon_not_circle_double_scikit": [[122, 137], ["torch.zeros", "torch.arange", "pytorch_radon.Radon", "pytorch_radon.IRadon", "pytorch_radon.Radon.", "pytorch_radon.IRadon.", "skimage.transform.radon", "skimage.transform.iradon", "test_radon.TestRadon.assertAlmostEqual", "test_radon.TestRadon.assertAlmostEqual", "torch.zeros.numpy().squeeze", "numpy.mean", "numpy.mean", "torch.arange.numpy", "torch.arange.numpy", "torch.zeros.numpy", "pytorch_radon.Radon.numpy().squeeze", "pytorch_radon.IRadon.numpy().squeeze", "pytorch_radon.Radon.numpy", "pytorch_radon.IRadon.numpy"], "methods", ["None"], ["", "def", "test_radon_iradon_not_circle_double_scikit", "(", "self", ")", ":", "\n", "        ", "img", "=", "torch", ".", "zeros", "(", "1", ",", "1", ",", "256", ",", "256", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "img", "[", ":", ",", ":", ",", "120", ":", "130", ",", "120", ":", "130", "]", "=", "1", "\n", "circle", "=", "False", "\n", "theta", "=", "torch", ".", "arange", "(", "180", ")", "\n", "r", "=", "Radon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "ir", "=", "IRadon", "(", "img", ".", "shape", "[", "2", "]", ",", "theta", ",", "circle", ",", "dtype", "=", "torch", ".", "double", ",", "use_filter", "=", "None", ")", "\n", "sino", "=", "r", "(", "img", ")", "\n", "reco", "=", "ir", "(", "sino", ")", "\n", "\n", "sino_sk", "=", "sk_radon", "(", "img", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ",", "theta", "=", "theta", ".", "numpy", "(", ")", ",", "circle", "=", "circle", ")", "\n", "reco_sk", "=", "sk_iradon", "(", "sino_sk", ",", "theta", "=", "theta", ".", "numpy", "(", ")", ",", "circle", "=", "circle", ",", "filter_name", "=", "None", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "np", ".", "mean", "(", "(", "sino_sk", "-", "sino", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ")", "**", "2", ")", ",", "0", ",", "places", "=", "27", ")", "\n", "self", ".", "assertAlmostEqual", "(", "np", ".", "mean", "(", "(", "reco_sk", "-", "reco", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", ")", "**", "2", ")", ",", "0", ",", "places", "=", "28", ")", "\n", "\n"]]}