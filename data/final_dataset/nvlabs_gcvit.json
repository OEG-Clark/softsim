{"home.repos.pwc.inspect_result.nvlabs_gcvit.None.validate.validate": [[116, 281], ["timm.models.create_model", "sum", "_logger.info", "timm.data.resolve_data_config", "torch.nn.DataParallel.cuda", "torch.CrossEntropyLoss().cuda", "timm.data.create_dataset", "timm.data.create_loader", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "torch.nn.DataParallel.eval", "collections.OrderedDict", "_logger.info", "_logger.info", "set_jit_fuser", "hasattr", "timm.models.load_checkpoint", "vars", "timm.models.apply_test_time_pool", "torch.jit.optimized_execution", "torch.jit.optimized_execution", "torch.jit.optimized_execution", "torch.jit.script", "torch.jit.script", "torch.jit.script", "amp.initialize", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "timm.data.RealLabelsImagenet", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "time.time", "enumerate", "_logger.info", "_logger.info", "m.numel", "torch.CrossEntropyLoss", "open", "timm.data.create_dataset.filenames", "input.contiguous.contiguous", "amp_autocast", "torch.nn.DataParallel.", "nn.CrossEntropyLoss().cuda.", "timm.utils.accuracy", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "time.time", "timm.data.RealLabelsImagenet.get_accuracy", "timm.data.RealLabelsImagenet.get_accuracy", "round", "round", "round", "round", "round", "_logger.warning", "torch.nn.DataParallel.parameters", "list", "int", "torch.randn", "torch.randn", "torch.randn", "target.cuda.cuda", "input.contiguous.cuda", "input.contiguous.contiguous", "amp_autocast", "torch.nn.DataParallel.", "timm.data.RealLabelsImagenet.add_result", "model.detach", "criterion.item", "input.contiguous.size", "acc1.item", "input.contiguous.size", "acc5.item", "input.contiguous.size", "_logger.info", "range", "line.rstrip", "range", "time.time", "tuple", "len", "input.contiguous.size"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update"], ["def", "validate", "(", "args", ")", ":", "\n", "# might as well try to validate something", "\n", "    ", "args", ".", "pretrained", "=", "args", ".", "pretrained", "or", "not", "args", ".", "checkpoint", "\n", "args", ".", "prefetcher", "=", "not", "args", ".", "no_prefetcher", "\n", "amp_autocast", "=", "suppress", "# do nothing", "\n", "if", "args", ".", "amp", ":", "\n", "        ", "if", "has_native_amp", ":", "\n", "            ", "args", ".", "native_amp", "=", "True", "\n", "", "elif", "has_apex", ":", "\n", "            ", "args", ".", "apex_amp", "=", "True", "\n", "", "else", ":", "\n", "            ", "_logger", ".", "warning", "(", "\"Neither APEX or Native Torch AMP is available.\"", ")", "\n", "", "", "assert", "not", "args", ".", "apex_amp", "or", "not", "args", ".", "native_amp", ",", "\"Only one AMP mode should be set.\"", "\n", "if", "args", ".", "native_amp", ":", "\n", "        ", "amp_autocast", "=", "torch", ".", "cuda", ".", "amp", ".", "autocast", "\n", "_logger", ".", "info", "(", "'Validating in mixed precision with native PyTorch AMP.'", ")", "\n", "", "elif", "args", ".", "apex_amp", ":", "\n", "        ", "_logger", ".", "info", "(", "'Validating in mixed precision with NVIDIA APEX AMP.'", ")", "\n", "", "else", ":", "\n", "        ", "_logger", ".", "info", "(", "'Validating in float32. AMP not enabled.'", ")", "\n", "\n", "", "if", "args", ".", "fuser", ":", "\n", "        ", "set_jit_fuser", "(", "args", ".", "fuser", ")", "\n", "\n", "# create model", "\n", "", "model", "=", "create_model", "(", "\n", "args", ".", "model", ",", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "\n", "in_chans", "=", "3", ",", "\n", "global_pool", "=", "args", ".", "gp", ",", "\n", "scriptable", "=", "args", ".", "torchscript", ")", "\n", "if", "args", ".", "num_classes", "is", "None", ":", "\n", "        ", "assert", "hasattr", "(", "model", ",", "'num_classes'", ")", ",", "'Model must have `num_classes` attr if not set on cmd line/config.'", "\n", "args", ".", "num_classes", "=", "model", ".", "num_classes", "\n", "\n", "", "if", "args", ".", "checkpoint", ":", "\n", "        ", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "args", ".", "use_ema", ")", "\n", "\n", "", "param_count", "=", "sum", "(", "[", "m", ".", "numel", "(", ")", "for", "m", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "_logger", ".", "info", "(", "'Model %s created, param count: %d'", "%", "(", "args", ".", "model", ",", "param_count", ")", ")", "\n", "\n", "data_config", "=", "resolve_data_config", "(", "vars", "(", "args", ")", ",", "model", "=", "model", ",", "use_test_size", "=", "True", ",", "verbose", "=", "True", ")", "\n", "test_time_pool", "=", "False", "\n", "if", "args", ".", "test_pool", ":", "\n", "        ", "model", ",", "test_time_pool", "=", "apply_test_time_pool", "(", "model", ",", "data_config", ",", "use_test_size", "=", "True", ")", "\n", "\n", "", "if", "args", ".", "torchscript", ":", "\n", "        ", "torch", ".", "jit", ".", "optimized_execution", "(", "True", ")", "\n", "model", "=", "torch", ".", "jit", ".", "script", "(", "model", ")", "\n", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "if", "args", ".", "apex_amp", ":", "\n", "        ", "model", "=", "amp", ".", "initialize", "(", "model", ",", "opt_level", "=", "'O1'", ")", "\n", "\n", "", "if", "args", ".", "channels_last", ":", "\n", "        ", "model", "=", "model", ".", "to", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "", "if", "args", ".", "num_gpu", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "list", "(", "range", "(", "args", ".", "num_gpu", ")", ")", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "dataset", "=", "create_dataset", "(", "\n", "root", "=", "args", ".", "data_dir", ",", "name", "=", "args", ".", "dataset", ",", "split", "=", "args", ".", "split", ",", "\n", "download", "=", "args", ".", "dataset_download", ",", "load_bytes", "=", "args", ".", "tf_preprocessing", ",", "class_map", "=", "args", ".", "class_map", ")", "\n", "\n", "if", "args", ".", "valid_labels", ":", "\n", "        ", "with", "open", "(", "args", ".", "valid_labels", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "valid_labels", "=", "{", "int", "(", "line", ".", "rstrip", "(", ")", ")", "for", "line", "in", "f", "}", "\n", "valid_labels", "=", "[", "i", "in", "valid_labels", "for", "i", "in", "range", "(", "args", ".", "num_classes", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "valid_labels", "=", "None", "\n", "\n", "", "if", "args", ".", "real_labels", ":", "\n", "        ", "real_labels", "=", "RealLabelsImagenet", "(", "dataset", ".", "filenames", "(", "basename", "=", "True", ")", ",", "real_json", "=", "args", ".", "real_labels", ")", "\n", "", "else", ":", "\n", "        ", "real_labels", "=", "None", "\n", "\n", "", "crop_pct", "=", "1.0", "if", "test_time_pool", "else", "data_config", "[", "'crop_pct'", "]", "\n", "loader", "=", "create_loader", "(", "\n", "dataset", ",", "\n", "input_size", "=", "data_config", "[", "'input_size'", "]", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "use_prefetcher", "=", "args", ".", "prefetcher", ",", "\n", "interpolation", "=", "data_config", "[", "'interpolation'", "]", ",", "\n", "mean", "=", "data_config", "[", "'mean'", "]", ",", "\n", "std", "=", "data_config", "[", "'std'", "]", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "crop_pct", "=", "crop_pct", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "\n", "tf_preprocessing", "=", "args", ".", "tf_preprocessing", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# warmup, reduce variability of first batch time, especially for comparing torchscript vs non", "\n", "        ", "input", "=", "torch", ".", "randn", "(", "(", "args", ".", "batch_size", ",", ")", "+", "tuple", "(", "data_config", "[", "'input_size'", "]", ")", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "channels_last", ":", "\n", "            ", "input", "=", "input", ".", "contiguous", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "", "with", "amp_autocast", "(", ")", ":", "\n", "            ", "model", "(", "input", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_idx", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "if", "args", ".", "no_prefetcher", ":", "\n", "                ", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "", "if", "args", ".", "channels_last", ":", "\n", "                ", "input", "=", "input", ".", "contiguous", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "# compute output", "\n", "", "with", "amp_autocast", "(", ")", ":", "\n", "                ", "output", "=", "model", "(", "input", ")", "\n", "\n", "", "if", "valid_labels", "is", "not", "None", ":", "\n", "                ", "output", "=", "output", "[", ":", ",", "valid_labels", "]", "\n", "", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "if", "real_labels", "is", "not", "None", ":", "\n", "                ", "real_labels", ".", "add_result", "(", "output", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ".", "detach", "(", ")", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_freq", "==", "0", ":", "\n", "                ", "_logger", ".", "info", "(", "\n", "'Test: [{0:>4d}/{1}]  '", "\n", "'Time: {batch_time.val:.3f}s ({batch_time.avg:.3f}s, {rate_avg:>7.2f}/s)  '", "\n", "'Loss: {loss.val:>7.4f} ({loss.avg:>6.4f})  '", "\n", "'Acc@1: {top1.val:>7.3f} ({top1.avg:>7.3f})  '", "\n", "'Acc@5: {top5.val:>7.3f} ({top5.avg:>7.3f})'", ".", "format", "(", "\n", "batch_idx", ",", "len", "(", "loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "rate_avg", "=", "input", ".", "size", "(", "0", ")", "/", "batch_time", ".", "avg", ",", "\n", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "", "if", "real_labels", "is", "not", "None", ":", "\n", "# real labels mode replaces topk values at the end", "\n", "        ", "top1a", ",", "top5a", "=", "real_labels", ".", "get_accuracy", "(", "k", "=", "1", ")", ",", "real_labels", ".", "get_accuracy", "(", "k", "=", "5", ")", "\n", "", "else", ":", "\n", "        ", "top1a", ",", "top5a", "=", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", "results", "=", "OrderedDict", "(", "\n", "model", "=", "args", ".", "model", ",", "\n", "top1", "=", "round", "(", "top1a", ",", "4", ")", ",", "top1_err", "=", "round", "(", "100", "-", "top1a", ",", "4", ")", ",", "\n", "top5", "=", "round", "(", "top5a", ",", "4", ")", ",", "top5_err", "=", "round", "(", "100", "-", "top5a", ",", "4", ")", ",", "\n", "param_count", "=", "round", "(", "param_count", "/", "1e6", ",", "2", ")", ",", "\n", "img_size", "=", "data_config", "[", "'input_size'", "]", "[", "-", "1", "]", ",", "\n", "crop_pct", "=", "crop_pct", ",", "\n", "interpolation", "=", "data_config", "[", "'interpolation'", "]", ")", "\n", "\n", "_logger", ".", "info", "(", "' * Acc@1 {:.3f} ({:.3f}) Acc@5 {:.3f} ({:.3f})'", ".", "format", "(", "\n", "results", "[", "'top1'", "]", ",", "results", "[", "'top1_err'", "]", ",", "results", "[", "'top5'", "]", ",", "results", "[", "'top5_err'", "]", ")", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.None.validate._try_run": [[283, 302], ["collections.OrderedDict", "_logger.error", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "validate.validate", "str", "_logger.warning"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.None.train.validate"], ["", "def", "_try_run", "(", "args", ",", "initial_batch_size", ")", ":", "\n", "    ", "batch_size", "=", "initial_batch_size", "\n", "results", "=", "OrderedDict", "(", ")", "\n", "error_str", "=", "'Unknown'", "\n", "while", "batch_size", ">=", "1", ":", "\n", "        ", "args", ".", "batch_size", "=", "batch_size", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "try", ":", "\n", "            ", "results", "=", "validate", "(", "args", ")", "\n", "return", "results", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "error_str", "=", "str", "(", "e", ")", "\n", "if", "'channels_last'", "in", "error_str", ":", "\n", "                ", "break", "\n", "", "_logger", ".", "warning", "(", "f'\"{error_str}\" while running validation. Reducing batch size to {batch_size} for retry.'", ")", "\n", "", "batch_size", "=", "batch_size", "//", "2", "\n", "", "results", "[", "'error'", "]", "=", "error_str", "\n", "_logger", ".", "error", "(", "f'{args.model} failed to validate ({error_str}).'", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.None.validate.main": [[304, 355], ["timm.utils.setup_default_logging", "parser.parse_args", "os.path.isdir", "len", "print", "glob.glob", "glob.glob", "timm.models.list_models", "_logger.info", "sorted", "len", "validate.validate", "timm.models.list_models", "os.path.isfile", "validate.write_results", "sorted", "timm.models.is_model", "timm.models.list_models", "open", "validate._try_run", "validate.append", "json.dumps", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.None.train.validate", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.validate.write_results", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.validate._try_run"], ["", "def", "main", "(", ")", ":", "\n", "    ", "setup_default_logging", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "model_cfgs", "=", "[", "]", "\n", "model_names", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "checkpoint", ")", ":", "\n", "# validate all checkpoints in a path with same model", "\n", "        ", "checkpoints", "=", "glob", ".", "glob", "(", "args", ".", "checkpoint", "+", "'/*.pth.tar'", ")", "\n", "checkpoints", "+=", "glob", ".", "glob", "(", "args", ".", "checkpoint", "+", "'/*.pth'", ")", "\n", "model_names", "=", "list_models", "(", "args", ".", "model", ")", "\n", "model_cfgs", "=", "[", "(", "args", ".", "model", ",", "c", ")", "for", "c", "in", "sorted", "(", "checkpoints", ",", "key", "=", "natural_key", ")", "]", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "model", "==", "'all'", ":", "\n", "# validate all models in a list of names with pretrained checkpoints", "\n", "            ", "args", ".", "pretrained", "=", "True", "\n", "model_names", "=", "list_models", "(", "pretrained", "=", "True", ",", "exclude_filters", "=", "[", "'*_in21k'", ",", "'*_in22k'", ",", "'*_dino'", "]", ")", "\n", "model_cfgs", "=", "[", "(", "n", ",", "''", ")", "for", "n", "in", "model_names", "]", "\n", "", "elif", "not", "is_model", "(", "args", ".", "model", ")", ":", "\n", "# model name doesn't exist, try as wildcard filter", "\n", "            ", "model_names", "=", "list_models", "(", "args", ".", "model", ")", "\n", "model_cfgs", "=", "[", "(", "n", ",", "''", ")", "for", "n", "in", "model_names", "]", "\n", "\n", "", "if", "not", "model_cfgs", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "model", ")", ":", "\n", "            ", "with", "open", "(", "args", ".", "model", ")", "as", "f", ":", "\n", "                ", "model_names", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "f", "]", "\n", "", "model_cfgs", "=", "[", "(", "n", ",", "None", ")", "for", "n", "in", "model_names", "if", "n", "]", "\n", "\n", "", "", "if", "len", "(", "model_cfgs", ")", ":", "\n", "        ", "results_file", "=", "args", ".", "results_file", "or", "'./results-all.csv'", "\n", "_logger", ".", "info", "(", "'Running bulk validation on these pretrained models: {}'", ".", "format", "(", "', '", ".", "join", "(", "model_names", ")", ")", ")", "\n", "results", "=", "[", "]", "\n", "try", ":", "\n", "            ", "initial_batch_size", "=", "args", ".", "batch_size", "\n", "for", "m", ",", "c", "in", "model_cfgs", ":", "\n", "                ", "args", ".", "model", "=", "m", "\n", "args", ".", "checkpoint", "=", "c", "\n", "r", "=", "_try_run", "(", "args", ",", "initial_batch_size", ")", "\n", "if", "'error'", "in", "r", ":", "\n", "                    ", "continue", "\n", "", "if", "args", ".", "checkpoint", ":", "\n", "                    ", "r", "[", "'checkpoint'", "]", "=", "args", ".", "checkpoint", "\n", "", "results", ".", "append", "(", "r", ")", "\n", "", "", "except", "KeyboardInterrupt", "as", "e", ":", "\n", "            ", "pass", "\n", "", "results", "=", "sorted", "(", "results", ",", "key", "=", "lambda", "x", ":", "x", "[", "'top1'", "]", ",", "reverse", "=", "True", ")", "\n", "if", "len", "(", "results", ")", ":", "\n", "            ", "write_results", "(", "results_file", ",", "results", ")", "\n", "", "", "else", ":", "\n", "        ", "results", "=", "validate", "(", "args", ")", "\n", "# output results in JSON to stdout w/ delimiter for runner script", "\n", "", "print", "(", "f'--result\\n{json.dumps(results, indent=4)}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.None.validate.write_results": [[357, 364], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "cf.flush", "csv.DictWriter.writerow", "results[].keys"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.flush"], ["", "def", "write_results", "(", "results_file", ",", "results", ")", ":", "\n", "    ", "with", "open", "(", "results_file", ",", "mode", "=", "'w'", ")", "as", "cf", ":", "\n", "        ", "dw", "=", "csv", ".", "DictWriter", "(", "cf", ",", "fieldnames", "=", "results", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "dw", ".", "writeheader", "(", ")", "\n", "for", "r", "in", "results", ":", "\n", "            ", "dw", ".", "writerow", "(", "r", ")", "\n", "", "cf", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.__init__": [[5, 8], ["tensorboardX.SummaryWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "self", ".", "writer", "=", "SummaryWriter", "(", "logdir", "=", "log_dir", ")", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.set_step": [[9, 14], ["None"], "methods", ["None"], ["", "def", "set_step", "(", "self", ",", "step", "=", "None", ")", ":", "\n", "        ", "if", "step", "is", "not", "None", ":", "\n", "            ", "self", ".", "step", "=", "step", "\n", "", "else", ":", "\n", "            ", "self", ".", "step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update": [[15, 23], ["kwargs.items", "isinstance", "isinstance", "tensorboard.TensorboardLogger.writer.add_scalar", "v.item.item.item"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "head", "=", "'scalar'", ",", "step", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "head", "+", "\"/\"", "+", "k", ",", "v", ",", "self", ".", "step", "if", "step", "is", "None", "else", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.flush": [[24, 26], ["tensorboard.TensorboardLogger.writer.flush"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", ".", "flush", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_gcvit.None.train._parse_args": [[335, 350], ["config_parser.parse_known_args", "parser.parse_args", "yaml.safe_dump", "open", "yaml.safe_load", "parser.set_defaults"], "function", ["None"], ["def", "_parse_args", "(", ")", ":", "\n", "# Do we have a config file to parse?", "\n", "    ", "args_config", ",", "remaining", "=", "config_parser", ".", "parse_known_args", "(", ")", "\n", "if", "args_config", ".", "config", ":", "\n", "        ", "with", "open", "(", "args_config", ".", "config", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "cfg", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "parser", ".", "set_defaults", "(", "**", "cfg", ")", "\n", "\n", "# The main arg parser parses the rest of the args, the usual", "\n", "# defaults will have been overridden if config file specified.", "\n", "", "", "args", "=", "parser", ".", "parse_args", "(", "remaining", ")", "\n", "\n", "# Cache the args as a text string to save them in the output dir later", "\n", "args_text", "=", "yaml", ".", "safe_dump", "(", "args", ".", "__dict__", ",", "default_flow_style", "=", "False", ")", "\n", "return", "args", ",", "args_text", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.None.train.main": [[351, 687], ["timm.utils.setup_default_logging", "train._parse_args", "timm.utils.random_seed", "timm.models.create_model", "timm.data.resolve_data_config", "torch.nn.parallel.DistributedDataParallel.cuda", "timm.optim.create_optimizer_v2", "scheduler.scheduler_factory.create_scheduler", "timm.data.create_dataset", "timm.data.create_dataset", "timm.data.create_loader", "timm.data.create_loader", "timm.loss.LabelSmoothingCrossEntropy.cuda", "torch.CrossEntropyLoss().cuda", "torch.cuda.set_device", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_rank", "torch.distributed.get_rank", "_logger.info", "_logger.info", "hasattr", "vars", "timm.models.convert_splitbn_model", "torch.nn.parallel.DistributedDataParallel.to", "torch.jit.script", "torch.jit.script", "amp.initialize", "timm.utils.ApexScaler", "timm.models.resume_checkpoint", "timm.utils.ModelEmaV2", "lr_scheduler.step", "_logger.info", "dict", "timm.data.AugMixDataset", "timm.loss.JsdCrossEntropy", "os.makedirs", "tensorboard.TensorboardLogger", "timm.utils.get_outdir", "timm.utils.CheckpointSaver", "range", "_logger.info", "wandb.init", "_logger.warning", "int", "max", "convert_syncbn_model", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "_logger.info", "timm.optim.optimizer_kwargs", "_logger.info", "timm.utils.NativeScaler", "timm.models.load_checkpoint", "ApexDDP", "torch.nn.parallel.DistributedDataParallel", "timm.data.FastCollateMixup", "timm.data.Mixup", "torch.CrossEntropyLoss", "open", "f.write", "train.train_one_epoch", "train.validate", "_logger.warning", "_logger.info", "_logger.info", "_logger.info", "_logger.info", "timm.loss.BinaryCrossEntropy", "timm.loss.SoftTargetCrossEntropy", "torch.CrossEntropyLoss", "os.path.join", "hasattr", "timm.data.create_loader.sampler.set_epoch", "timm.utils.distribute_bn", "tensorboard.TensorboardLogger.update", "train.validate", "lr_scheduler.step", "timm.utils.update_summary", "utils.CheckpointSaver.save_checkpoint", "timm.loss.BinaryCrossEntropy", "timm.loss.LabelSmoothingCrossEntropy", "datetime.datetime.now().strftime", "timm.models.safe_model_name", "str", "_logger.info", "timm.utils.distribute_bn", "os.path.join", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.None.train._parse_args", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler_factory.create_scheduler", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.step", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.train.train_one_epoch", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.train.validate", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.train.validate", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.step"], ["", "def", "main", "(", ")", ":", "\n", "    ", "utils", ".", "setup_default_logging", "(", ")", "\n", "args", ",", "args_text", "=", "_parse_args", "(", ")", "\n", "\n", "if", "args", ".", "log_wandb", ":", "\n", "        ", "if", "has_wandb", ":", "\n", "            ", "wandb", ".", "init", "(", "project", "=", "args", ".", "experiment", ",", "config", "=", "args", ")", "\n", "", "else", ":", "\n", "            ", "_logger", ".", "warning", "(", "\"You've requested to log metrics to wandb but package not found. \"", "\n", "\"Metrics not being logged to wandb, try `pip install wandb`\"", ")", "\n", "\n", "", "", "args", ".", "prefetcher", "=", "not", "args", ".", "no_prefetcher", "\n", "args", ".", "distributed", "=", "False", "\n", "if", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "distributed", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", ">", "1", "\n", "", "args", ".", "device", "=", "'cuda:0'", "\n", "args", ".", "world_size", "=", "1", "\n", "args", ".", "rank", "=", "0", "# global rank", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "args", ".", "device", "=", "'cuda:%d'", "%", "args", ".", "local_rank", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "args", ".", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "args", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "_logger", ".", "info", "(", "'Training in distributed mode with multiple processes, 1 GPU per process. Process %d, total %d.'", "\n", "%", "(", "args", ".", "rank", ",", "args", ".", "world_size", ")", ")", "\n", "", "else", ":", "\n", "        ", "_logger", ".", "info", "(", "'Training with a single process on 1 GPUs.'", ")", "\n", "", "assert", "args", ".", "rank", ">=", "0", "\n", "\n", "# resolve AMP arguments based on PyTorch / Apex availability", "\n", "use_amp", "=", "None", "\n", "if", "args", ".", "amp", ":", "\n", "# `--amp` chooses native amp before apex (APEX ver not actively maintained)", "\n", "        ", "if", "has_native_amp", ":", "\n", "            ", "args", ".", "native_amp", "=", "True", "\n", "", "elif", "has_apex", ":", "\n", "            ", "args", ".", "apex_amp", "=", "True", "\n", "", "", "if", "args", ".", "apex_amp", "and", "has_apex", ":", "\n", "        ", "use_amp", "=", "'apex'", "\n", "", "elif", "args", ".", "native_amp", "and", "has_native_amp", ":", "\n", "        ", "use_amp", "=", "'native'", "\n", "", "elif", "args", ".", "apex_amp", "or", "args", ".", "native_amp", ":", "\n", "        ", "_logger", ".", "warning", "(", "\"Neither APEX or native Torch AMP is available, using float32. \"", "\n", "\"Install NVIDA apex or upgrade to PyTorch 1.6\"", ")", "\n", "\n", "", "utils", ".", "random_seed", "(", "args", ".", "seed", ",", "args", ".", "rank", ")", "\n", "model", "=", "create_model", "(", "\n", "args", ".", "model", ",", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "\n", "global_pool", "=", "args", ".", "gp", ",", "\n", "bn_momentum", "=", "args", ".", "bn_momentum", ",", "\n", "bn_eps", "=", "args", ".", "bn_eps", ",", "\n", "scriptable", "=", "args", ".", "torchscript", ",", "\n", "checkpoint_path", "=", "args", ".", "initial_checkpoint", ")", "\n", "if", "args", ".", "num_classes", "is", "None", ":", "\n", "        ", "assert", "hasattr", "(", "model", ",", "'num_classes'", ")", ",", "'Model must have `num_classes` attr if not set on cmd line/config.'", "\n", "args", ".", "num_classes", "=", "model", ".", "num_classes", "# FIXME handle model default vs config num_classes more elegantly", "\n", "\n", "", "data_config", "=", "resolve_data_config", "(", "vars", "(", "args", ")", ",", "model", "=", "model", ",", "verbose", "=", "args", ".", "local_rank", "==", "0", ")", "\n", "# setup augmentation batch splits for contrastive loss or split bn", "\n", "num_aug_splits", "=", "0", "\n", "if", "args", ".", "aug_splits", ">", "0", ":", "\n", "        ", "assert", "args", ".", "aug_splits", ">", "1", ",", "'A split of 1 makes no sense'", "\n", "num_aug_splits", "=", "args", ".", "aug_splits", "\n", "\n", "# enable split bn (separate bn stats per batch-portion)", "\n", "", "if", "args", ".", "split_bn", ":", "\n", "        ", "assert", "num_aug_splits", ">", "1", "or", "args", ".", "resplit", "\n", "model", "=", "convert_splitbn_model", "(", "model", ",", "max", "(", "num_aug_splits", ",", "2", ")", ")", "\n", "\n", "# move model to GPU, enable channels last layout if set", "\n", "", "model", ".", "cuda", "(", ")", "\n", "if", "args", ".", "channels_last", ":", "\n", "        ", "model", "=", "model", ".", "to", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "# setup synchronized BatchNorm for distributed training", "\n", "", "if", "args", ".", "distributed", "and", "args", ".", "sync_bn", ":", "\n", "        ", "assert", "not", "args", ".", "split_bn", "\n", "if", "has_apex", "and", "use_amp", "==", "'apex'", ":", "\n", "# Apex SyncBN preferred unless native amp is activated", "\n", "            ", "model", "=", "convert_syncbn_model", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "_logger", ".", "info", "(", "\n", "'Converted model to use Synchronized BatchNorm. WARNING: You may have issues if using '", "\n", "'zero initialized BN layers (enabled by default for ResNets) while sync-bn enabled.'", ")", "\n", "\n", "", "", "if", "args", ".", "torchscript", ":", "\n", "        ", "assert", "not", "use_amp", "==", "'apex'", ",", "'Cannot use APEX AMP with torchscripted model'", "\n", "assert", "not", "args", ".", "sync_bn", ",", "'Cannot use SyncBatchNorm with torchscripted model'", "\n", "model", "=", "torch", ".", "jit", ".", "script", "(", "model", ")", "\n", "\n", "", "optimizer", "=", "create_optimizer_v2", "(", "model", ",", "**", "optimizer_kwargs", "(", "cfg", "=", "args", ")", ")", "\n", "\n", "# setup automatic mixed-precision (AMP) loss scaling and op casting", "\n", "amp_autocast", "=", "suppress", "# do nothing", "\n", "loss_scaler", "=", "None", "\n", "if", "use_amp", "==", "'apex'", ":", "\n", "        ", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "'O1'", ")", "\n", "loss_scaler", "=", "ApexScaler", "(", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "_logger", ".", "info", "(", "'Using NVIDIA APEX AMP. Training in mixed precision.'", ")", "\n", "", "", "elif", "use_amp", "==", "'native'", ":", "\n", "        ", "amp_autocast", "=", "torch", ".", "cuda", ".", "amp", ".", "autocast", "\n", "loss_scaler", "=", "NativeScaler", "(", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "_logger", ".", "info", "(", "'Using native Torch AMP. Training in mixed precision.'", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "_logger", ".", "info", "(", "'AMP not enabled. Training in float32.'", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "", "resume_epoch", "=", "None", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "resume_epoch", "=", "resume_checkpoint", "(", "\n", "model", ",", "args", ".", "resume", ",", "\n", "optimizer", "=", "None", "if", "args", ".", "no_resume_opt", "else", "optimizer", ",", "\n", "loss_scaler", "=", "None", "if", "args", ".", "no_resume_opt", "else", "loss_scaler", ",", "\n", "log_info", "=", "args", ".", "local_rank", "==", "0", ")", "\n", "\n", "# setup exponential moving average of model weights, SWA could be used here too", "\n", "", "model_ema", "=", "None", "\n", "if", "args", ".", "model_ema", ":", "\n", "# Important to create EMA model after cuda(), DP wrapper, and AMP but before SyncBN and DDP wrapper", "\n", "        ", "model_ema", "=", "utils", ".", "ModelEmaV2", "(", "\n", "model", ",", "decay", "=", "args", ".", "model_ema_decay", ",", "device", "=", "'cpu'", "if", "args", ".", "model_ema_force_cpu", "else", "None", ")", "\n", "if", "args", ".", "resume", ":", "\n", "            ", "load_checkpoint", "(", "model_ema", ".", "module", ",", "args", ".", "resume", ",", "use_ema", "=", "True", ")", "\n", "\n", "# setup distributed training", "\n", "", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "has_apex", "and", "use_amp", "==", "'apex'", ":", "\n", "# Apex DDP preferred unless native amp is activated", "\n", "            ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "_logger", ".", "info", "(", "\"Using NVIDIA APEX DistributedDataParallel.\"", ")", "\n", "", "model", "=", "ApexDDP", "(", "model", ",", "delay_allreduce", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "_logger", ".", "info", "(", "\"Using native Torch DistributedDataParallel.\"", ")", "\n", "", "model", "=", "NativeDDP", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "broadcast_buffers", "=", "not", "args", ".", "no_ddp_bb", ")", "\n", "# NOTE: EMA model does not need to be wrapped by DDP", "\n", "\n", "# setup learning rate schedule and starting epoch", "\n", "", "", "lr_scheduler", ",", "num_epochs", "=", "create_scheduler", "(", "args", ",", "optimizer", ")", "\n", "start_epoch", "=", "0", "\n", "if", "args", ".", "start_epoch", "is", "not", "None", ":", "\n", "# a specified start_epoch will always override the resume epoch", "\n", "        ", "start_epoch", "=", "args", ".", "start_epoch", "\n", "", "elif", "resume_epoch", "is", "not", "None", ":", "\n", "        ", "start_epoch", "=", "resume_epoch", "\n", "", "if", "lr_scheduler", "is", "not", "None", "and", "start_epoch", ">", "0", ":", "\n", "        ", "lr_scheduler", ".", "step", "(", "start_epoch", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "_logger", ".", "info", "(", "'Scheduled epochs: {}'", ".", "format", "(", "num_epochs", ")", ")", "\n", "\n", "# create the train and eval datasets", "\n", "", "dataset_train", "=", "create_dataset", "(", "\n", "args", ".", "dataset", ",", "root", "=", "args", ".", "data_dir", ",", "split", "=", "args", ".", "train_split", ",", "is_training", "=", "True", ",", "\n", "class_map", "=", "args", ".", "class_map", ",", "\n", "download", "=", "args", ".", "dataset_download", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "repeats", "=", "args", ".", "epoch_repeats", ")", "\n", "\n", "dataset_eval", "=", "create_dataset", "(", "\n", "args", ".", "dataset", ",", "root", "=", "args", ".", "data_dir", ",", "split", "=", "args", ".", "val_split", ",", "is_training", "=", "False", ",", "\n", "class_map", "=", "args", ".", "class_map", ",", "\n", "download", "=", "args", ".", "dataset_download", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "\n", "# setup mixup / cutmix", "\n", "collate_fn", "=", "None", "\n", "mixup_fn", "=", "None", "\n", "mixup_active", "=", "args", ".", "mixup", ">", "0", "or", "args", ".", "cutmix", ">", "0.", "or", "args", ".", "cutmix_minmax", "is", "not", "None", "\n", "if", "mixup_active", ":", "\n", "        ", "mixup_args", "=", "dict", "(", "\n", "mixup_alpha", "=", "args", ".", "mixup", ",", "cutmix_alpha", "=", "args", ".", "cutmix", ",", "cutmix_minmax", "=", "args", ".", "cutmix_minmax", ",", "\n", "prob", "=", "args", ".", "mixup_prob", ",", "switch_prob", "=", "args", ".", "mixup_switch_prob", ",", "mode", "=", "args", ".", "mixup_mode", ",", "\n", "label_smoothing", "=", "args", ".", "smoothing", ",", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "prefetcher", ":", "\n", "            ", "assert", "not", "num_aug_splits", "# collate conflict (need to support deinterleaving in collate mixup)", "\n", "collate_fn", "=", "FastCollateMixup", "(", "**", "mixup_args", ")", "\n", "", "else", ":", "\n", "            ", "mixup_fn", "=", "Mixup", "(", "**", "mixup_args", ")", "\n", "\n", "# wrap dataset in AugMix helper", "\n", "", "", "if", "num_aug_splits", ">", "1", ":", "\n", "        ", "dataset_train", "=", "AugMixDataset", "(", "dataset_train", ",", "num_splits", "=", "num_aug_splits", ")", "\n", "\n", "# create data loaders w/ augmentation pipeiine", "\n", "", "train_interpolation", "=", "args", ".", "train_interpolation", "\n", "if", "args", ".", "no_aug", "or", "not", "train_interpolation", ":", "\n", "        ", "train_interpolation", "=", "data_config", "[", "'interpolation'", "]", "\n", "", "loader_train", "=", "create_loader", "(", "\n", "dataset_train", ",", "\n", "input_size", "=", "data_config", "[", "'input_size'", "]", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "is_training", "=", "True", ",", "\n", "use_prefetcher", "=", "args", ".", "prefetcher", ",", "\n", "no_aug", "=", "args", ".", "no_aug", ",", "\n", "re_prob", "=", "args", ".", "reprob", ",", "\n", "re_mode", "=", "args", ".", "remode", ",", "\n", "re_count", "=", "args", ".", "recount", ",", "\n", "re_split", "=", "args", ".", "resplit", ",", "\n", "scale", "=", "args", ".", "scale", ",", "\n", "ratio", "=", "args", ".", "ratio", ",", "\n", "hflip", "=", "args", ".", "hflip", ",", "\n", "vflip", "=", "args", ".", "vflip", ",", "\n", "color_jitter", "=", "args", ".", "color_jitter", ",", "\n", "auto_augment", "=", "args", ".", "aa", ",", "\n", "num_aug_repeats", "=", "args", ".", "aug_repeats", ",", "\n", "num_aug_splits", "=", "num_aug_splits", ",", "\n", "interpolation", "=", "train_interpolation", ",", "\n", "mean", "=", "data_config", "[", "'mean'", "]", ",", "\n", "std", "=", "data_config", "[", "'std'", "]", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "distributed", "=", "args", ".", "distributed", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "\n", "use_multi_epochs_loader", "=", "args", ".", "use_multi_epochs_loader", ",", "\n", "worker_seeding", "=", "args", ".", "worker_seeding", ",", "\n", ")", "\n", "loader_eval", "=", "create_loader", "(", "\n", "dataset_eval", ",", "\n", "input_size", "=", "data_config", "[", "'input_size'", "]", ",", "\n", "batch_size", "=", "args", ".", "validation_batch_size", "or", "args", ".", "batch_size", ",", "\n", "is_training", "=", "False", ",", "\n", "use_prefetcher", "=", "args", ".", "prefetcher", ",", "\n", "interpolation", "=", "data_config", "[", "'interpolation'", "]", ",", "\n", "mean", "=", "data_config", "[", "'mean'", "]", ",", "\n", "std", "=", "data_config", "[", "'std'", "]", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "distributed", "=", "args", ".", "distributed", ",", "\n", "crop_pct", "=", "data_config", "[", "'crop_pct'", "]", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "\n", ")", "\n", "\n", "# setup loss function", "\n", "if", "args", ".", "jsd_loss", ":", "\n", "        ", "assert", "num_aug_splits", ">", "1", "# JSD only valid with aug splits set", "\n", "train_loss_fn", "=", "JsdCrossEntropy", "(", "num_splits", "=", "num_aug_splits", ",", "smoothing", "=", "args", ".", "smoothing", ")", "\n", "", "elif", "mixup_active", ":", "\n", "# smoothing is handled with mixup target transform which outputs sparse, soft targets", "\n", "        ", "if", "args", ".", "bce_loss", ":", "\n", "            ", "train_loss_fn", "=", "BinaryCrossEntropy", "(", "target_threshold", "=", "args", ".", "bce_target_thresh", ")", "\n", "", "else", ":", "\n", "            ", "train_loss_fn", "=", "SoftTargetCrossEntropy", "(", ")", "\n", "", "", "elif", "args", ".", "smoothing", ":", "\n", "        ", "if", "args", ".", "bce_loss", ":", "\n", "            ", "train_loss_fn", "=", "BinaryCrossEntropy", "(", "smoothing", "=", "args", ".", "smoothing", ",", "target_threshold", "=", "args", ".", "bce_target_thresh", ")", "\n", "", "else", ":", "\n", "            ", "train_loss_fn", "=", "LabelSmoothingCrossEntropy", "(", "smoothing", "=", "args", ".", "smoothing", ")", "\n", "", "", "else", ":", "\n", "        ", "train_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "train_loss_fn", "=", "train_loss_fn", ".", "cuda", "(", ")", "\n", "validate_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# setup checkpoint saver and eval metric tracking", "\n", "eval_metric", "=", "args", ".", "eval_metric", "\n", "best_metric", "=", "None", "\n", "best_epoch", "=", "None", "\n", "saver", "=", "None", "\n", "output_dir", "=", "None", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "log_dir", "=", "'./log_dir/'", "+", "'_'", "+", "args", ".", "tag", "\n", "os", ".", "makedirs", "(", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "log_writer", "=", "TensorboardLogger", "(", "log_dir", "=", "log_dir", ")", "\n", "", "else", ":", "\n", "        ", "log_writer", "=", "None", "\n", "\n", "", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "if", "args", ".", "experiment", ":", "\n", "            ", "exp_name", "=", "args", ".", "experiment", "\n", "", "else", ":", "\n", "            ", "exp_name", "=", "'-'", ".", "join", "(", "[", "\n", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", ",", "\n", "safe_model_name", "(", "args", ".", "model", ")", ",", "\n", "str", "(", "data_config", "[", "'input_size'", "]", "[", "-", "1", "]", ")", "\n", "]", ")", "\n", "args", ".", "experiment", "=", "exp_name", "\n", "\n", "", "output_dir", "=", "utils", ".", "get_outdir", "(", "args", ".", "output", "if", "args", ".", "output", "else", "'./output/train'", ",", "exp_name", ")", "\n", "decreasing", "=", "True", "if", "eval_metric", "==", "'loss'", "else", "False", "\n", "saver", "=", "utils", ".", "CheckpointSaver", "(", "\n", "model", "=", "model", ",", "optimizer", "=", "optimizer", ",", "args", "=", "args", ",", "model_ema", "=", "model_ema", ",", "amp_scaler", "=", "loss_scaler", ",", "\n", "checkpoint_dir", "=", "output_dir", ",", "recovery_dir", "=", "output_dir", ",", "decreasing", "=", "decreasing", ",", "max_history", "=", "args", ".", "checkpoint_hist", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'args.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "args_text", ")", "\n", "\n", "", "", "try", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "start_epoch", ",", "num_epochs", ")", ":", "\n", "            ", "if", "args", ".", "distributed", "and", "hasattr", "(", "loader_train", ".", "sampler", ",", "'set_epoch'", ")", ":", "\n", "                ", "loader_train", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "train_metrics", "=", "train_one_epoch", "(", "\n", "epoch", ",", "model", ",", "loader_train", ",", "optimizer", ",", "train_loss_fn", ",", "args", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ",", "saver", "=", "saver", ",", "output_dir", "=", "output_dir", ",", "\n", "amp_autocast", "=", "amp_autocast", ",", "loss_scaler", "=", "loss_scaler", ",", "model_ema", "=", "model_ema", ",", "mixup_fn", "=", "mixup_fn", ")", "\n", "\n", "if", "args", ".", "distributed", "and", "args", ".", "dist_bn", "in", "(", "'broadcast'", ",", "'reduce'", ")", ":", "\n", "                ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                    ", "_logger", ".", "info", "(", "\"Distributing BatchNorm running means and vars\"", ")", "\n", "", "utils", ".", "distribute_bn", "(", "model", ",", "args", ".", "world_size", ",", "args", ".", "dist_bn", "==", "'reduce'", ")", "\n", "\n", "", "eval_metrics", "=", "validate", "(", "model", ",", "loader_eval", ",", "validate_loss_fn", ",", "args", ",", "amp_autocast", "=", "amp_autocast", ")", "\n", "if", "log_writer", "is", "not", "None", ":", "\n", "                ", "log_writer", ".", "update", "(", "test_acc1", "=", "eval_metrics", "[", "'top1'", "]", ",", "head", "=", "\"perf\"", ",", "step", "=", "epoch", ")", "\n", "\n", "", "if", "model_ema", "is", "not", "None", "and", "not", "args", ".", "model_ema_force_cpu", ":", "\n", "                ", "if", "args", ".", "distributed", "and", "args", ".", "dist_bn", "in", "(", "'broadcast'", ",", "'reduce'", ")", ":", "\n", "                    ", "utils", ".", "distribute_bn", "(", "model_ema", ",", "args", ".", "world_size", ",", "args", ".", "dist_bn", "==", "'reduce'", ")", "\n", "", "ema_eval_metrics", "=", "validate", "(", "\n", "model_ema", ".", "module", ",", "loader_eval", ",", "validate_loss_fn", ",", "args", ",", "amp_autocast", "=", "amp_autocast", ",", "log_suffix", "=", "' (EMA)'", ")", "\n", "eval_metrics", "=", "ema_eval_metrics", "\n", "\n", "", "if", "lr_scheduler", "is", "not", "None", "and", "args", ".", "lr_ep", ":", "\n", "# step LR for next epoch", "\n", "                ", "lr_scheduler", ".", "step", "(", "epoch", "+", "1", ",", "None", "if", "eval_metrics", "is", "None", "else", "eval_metrics", "[", "eval_metric", "]", ")", "\n", "\n", "", "if", "output_dir", "is", "not", "None", ":", "\n", "                ", "utils", ".", "update_summary", "(", "\n", "epoch", ",", "train_metrics", ",", "eval_metrics", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'summary.csv'", ")", ",", "\n", "write_header", "=", "best_metric", "is", "None", ",", "log_wandb", "=", "args", ".", "log_wandb", "and", "has_wandb", ")", "\n", "\n", "", "if", "saver", "is", "not", "None", ":", "\n", "# save proper checkpoint with eval metric", "\n", "                ", "save_metric", "=", "None", "if", "eval_metrics", "is", "None", "else", "eval_metrics", "[", "eval_metric", "]", "\n", "best_metric", ",", "best_epoch", "=", "saver", ".", "save_checkpoint", "(", "epoch", ",", "metric", "=", "save_metric", ")", "\n", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "pass", "\n", "", "if", "best_metric", "is", "not", "None", ":", "\n", "        ", "_logger", ".", "info", "(", "'*** Best metric: {0} (epoch {1})'", ".", "format", "(", "best_metric", ",", "best_epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.None.train.train_one_epoch": [[689, 802], ["timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "model.train", "time.time", "len", "enumerate", "hasattr", "collections.OrderedDict", "hasattr", "len", "len", "utils.AverageMeter.update", "optimizer.zero_grad", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.AverageMeter.update", "time.time", "optimizer.sync_lookahead", "input.contiguous.contiguous", "amp_autocast", "model", "loss_fn", "utils.AverageMeter.update", "loss_scaler", "loss_fn.backward", "model.named_parameters", "optimizer.step", "model_ema.update", "lr_scheduler.step_update", "saver.save_recovery", "lr_scheduler.step_update", "time.time", "input.contiguous.cuda", "target.cuda", "mixup_fn", "loss_fn.item", "input.contiguous.size", "timm.utils.dispatch_clip_grad", "time.time", "sum", "len", "timm.utils.reduce_tensor", "utils.AverageMeter.update", "_logger.info", "timm.models.model_parameters", "timm.models.model_parameters", "print", "utils.reduce_tensor.item", "input.contiguous.size", "torchvision.utils.save_image", "len", "os.path.join", "input.contiguous.size", "input.contiguous.size"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.step", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.step_update", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.step_update", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update"], ["", "", "def", "train_one_epoch", "(", "\n", "epoch", ",", "model", ",", "loader", ",", "optimizer", ",", "loss_fn", ",", "args", ",", "\n", "lr_scheduler", "=", "None", ",", "saver", "=", "None", ",", "output_dir", "=", "None", ",", "amp_autocast", "=", "suppress", ",", "\n", "loss_scaler", "=", "None", ",", "model_ema", "=", "None", ",", "mixup_fn", "=", "None", ")", ":", "\n", "\n", "    ", "if", "args", ".", "mixup_off_epoch", "and", "epoch", ">=", "args", ".", "mixup_off_epoch", ":", "\n", "        ", "if", "args", ".", "prefetcher", "and", "loader", ".", "mixup_enabled", ":", "\n", "            ", "loader", ".", "mixup_enabled", "=", "False", "\n", "", "elif", "mixup_fn", "is", "not", "None", ":", "\n", "            ", "mixup_fn", ".", "mixup_enabled", "=", "False", "\n", "\n", "", "", "second_order", "=", "hasattr", "(", "optimizer", ",", "'is_second_order'", ")", "and", "optimizer", ".", "is_second_order", "\n", "batch_time_m", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "data_time_m", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "losses_m", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "last_idx", "=", "len", "(", "loader", ")", "-", "1", "\n", "num_updates", "=", "epoch", "*", "len", "(", "loader", ")", "\n", "num_iters", "=", "len", "(", "loader", ")", "\n", "for", "batch_idx", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "last_batch", "=", "batch_idx", "==", "last_idx", "\n", "data_time_m", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "not", "args", ".", "prefetcher", ":", "\n", "            ", "input", ",", "target", "=", "input", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "if", "mixup_fn", "is", "not", "None", ":", "\n", "                ", "input", ",", "target", "=", "mixup_fn", "(", "input", ",", "target", ")", "\n", "", "", "if", "args", ".", "channels_last", ":", "\n", "            ", "input", "=", "input", ".", "contiguous", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "", "with", "amp_autocast", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "loss_fn", "(", "output", ",", "target", ")", "\n", "\n", "", "if", "not", "args", ".", "distributed", ":", "\n", "            ", "losses_m", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "loss_scaler", "is", "not", "None", ":", "\n", "            ", "loss_scaler", "(", "\n", "loss", ",", "optimizer", ",", "\n", "clip_grad", "=", "args", ".", "clip_grad", ",", "clip_mode", "=", "args", ".", "clip_mode", ",", "\n", "parameters", "=", "model_parameters", "(", "model", ",", "exclude_head", "=", "'agc'", "in", "args", ".", "clip_mode", ")", ",", "\n", "create_graph", "=", "second_order", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", "create_graph", "=", "second_order", ")", "\n", "if", "args", ".", "clip_grad", "is", "not", "None", ":", "\n", "                ", "utils", ".", "dispatch_clip_grad", "(", "\n", "model_parameters", "(", "model", ",", "exclude_head", "=", "'agc'", "in", "args", ".", "clip_mode", ")", ",", "\n", "value", "=", "args", ".", "clip_grad", ",", "mode", "=", "args", ".", "clip_mode", ")", "\n", "", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "param", ".", "grad", "is", "None", ":", "\n", "                    ", "print", "(", "name", ")", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "model_ema", "is", "not", "None", ":", "\n", "            ", "model_ema", ".", "update", "(", "model", ")", "\n", "\n", "", "if", "lr_scheduler", "is", "not", "None", "and", "not", "args", ".", "lr_ep", ":", "\n", "            ", "lr_scheduler", ".", "step_update", "(", "num_updates", "=", "(", "epoch", "*", "num_iters", ")", "+", "batch_idx", "+", "1", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "num_updates", "+=", "1", "\n", "batch_time_m", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "last_batch", "or", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "lrl", "=", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", "\n", "lr", "=", "sum", "(", "lrl", ")", "/", "len", "(", "lrl", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "                ", "reduced_loss", "=", "utils", ".", "reduce_tensor", "(", "loss", ".", "data", ",", "args", ".", "world_size", ")", "\n", "losses_m", ".", "update", "(", "reduced_loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "_logger", ".", "info", "(", "\n", "'Train: {} [{:>4d}/{} ({:>3.0f}%)]  '", "\n", "'Loss: {loss.val:#.4g} ({loss.avg:#.3g})  '", "\n", "'Time: {batch_time.val:.3f}s, {rate:>7.2f}/s  '", "\n", "'({batch_time.avg:.3f}s, {rate_avg:>7.2f}/s)  '", "\n", "'LR: {lr:.3e}  '", "\n", "'Data: {data_time.val:.3f} ({data_time.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "\n", "batch_idx", ",", "len", "(", "loader", ")", ",", "\n", "100.", "*", "batch_idx", "/", "last_idx", ",", "\n", "loss", "=", "losses_m", ",", "\n", "batch_time", "=", "batch_time_m", ",", "\n", "rate", "=", "input", ".", "size", "(", "0", ")", "*", "args", ".", "world_size", "/", "batch_time_m", ".", "val", ",", "\n", "rate_avg", "=", "input", ".", "size", "(", "0", ")", "*", "args", ".", "world_size", "/", "batch_time_m", ".", "avg", ",", "\n", "lr", "=", "lr", ",", "\n", "data_time", "=", "data_time_m", ")", ")", "\n", "\n", "if", "args", ".", "save_images", "and", "output_dir", ":", "\n", "                    ", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "input", ",", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'train-batch-%d.jpg'", "%", "batch_idx", ")", ",", "\n", "padding", "=", "0", ",", "\n", "normalize", "=", "True", ")", "\n", "\n", "", "", "", "if", "saver", "is", "not", "None", "and", "args", ".", "recovery_interval", "and", "(", "\n", "last_batch", "or", "(", "batch_idx", "+", "1", ")", "%", "args", ".", "recovery_interval", "==", "0", ")", ":", "\n", "            ", "saver", ".", "save_recovery", "(", "epoch", ",", "batch_idx", "=", "batch_idx", ")", "\n", "\n", "", "if", "lr_scheduler", "is", "not", "None", "and", "args", ".", "lr_ep", ":", "\n", "            ", "lr_scheduler", ".", "step_update", "(", "num_updates", "=", "num_updates", ",", "metric", "=", "losses_m", ".", "avg", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "# end for", "\n", "\n", "", "if", "hasattr", "(", "optimizer", ",", "'sync_lookahead'", ")", ":", "\n", "        ", "optimizer", ".", "sync_lookahead", "(", ")", "\n", "\n", "", "return", "OrderedDict", "(", "[", "(", "'loss'", ",", "losses_m", ".", "avg", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.None.train.validate": [[804, 865], ["timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "model.eval", "time.time", "collections.OrderedDict", "len", "torch.no_grad", "torch.no_grad", "enumerate", "isinstance", "loss_fn", "timm.utils.accuracy", "torch.cuda.synchronize", "torch.cuda.synchronize", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "utils.AverageMeter.update", "time.time", "input.contiguous.cuda", "target.cuda.cuda", "input.contiguous.contiguous", "amp_autocast", "model", "output.unfold().mean.unfold().mean", "timm.utils.reduce_tensor", "timm.utils.reduce_tensor", "timm.utils.reduce_tensor", "utils.reduce_tensor.item", "input.contiguous.size", "utils.reduce_tensor.item", "output.unfold().mean.size", "utils.reduce_tensor.item", "output.unfold().mean.size", "_logger.info", "time.time", "output.unfold().mean.unfold", "target.cuda.size"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update", "home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update"], ["", "def", "validate", "(", "model", ",", "loader", ",", "loss_fn", ",", "args", ",", "amp_autocast", "=", "suppress", ",", "log_suffix", "=", "''", ")", ":", "\n", "    ", "batch_time_m", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "losses_m", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top1_m", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "top5_m", "=", "utils", ".", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "last_idx", "=", "len", "(", "loader", ")", "-", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "last_batch", "=", "batch_idx", "==", "last_idx", "\n", "if", "not", "args", ".", "prefetcher", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "", "if", "args", ".", "channels_last", ":", "\n", "                ", "input", "=", "input", ".", "contiguous", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "", "with", "amp_autocast", "(", ")", ":", "\n", "                ", "output", "=", "model", "(", "input", ")", "\n", "", "if", "isinstance", "(", "output", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "output", "=", "output", "[", "0", "]", "\n", "\n", "# augmentation reduction", "\n", "", "reduce_factor", "=", "args", ".", "tta", "\n", "if", "reduce_factor", ">", "1", ":", "\n", "                ", "output", "=", "output", ".", "unfold", "(", "0", ",", "reduce_factor", ",", "reduce_factor", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "target", "=", "target", "[", "0", ":", "target", ".", "size", "(", "0", ")", ":", "reduce_factor", "]", "\n", "\n", "", "loss", "=", "loss_fn", "(", "output", ",", "target", ")", "\n", "acc1", ",", "acc5", "=", "utils", ".", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "                ", "reduced_loss", "=", "utils", ".", "reduce_tensor", "(", "loss", ".", "data", ",", "args", ".", "world_size", ")", "\n", "acc1", "=", "utils", ".", "reduce_tensor", "(", "acc1", ",", "args", ".", "world_size", ")", "\n", "acc5", "=", "utils", ".", "reduce_tensor", "(", "acc5", ",", "args", ".", "world_size", ")", "\n", "", "else", ":", "\n", "                ", "reduced_loss", "=", "loss", ".", "data", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "losses_m", ".", "update", "(", "reduced_loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1_m", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "output", ".", "size", "(", "0", ")", ")", "\n", "top5_m", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "output", ".", "size", "(", "0", ")", ")", "\n", "\n", "batch_time_m", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "local_rank", "==", "0", "and", "(", "last_batch", "or", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ")", ":", "\n", "                ", "log_name", "=", "'Test'", "+", "log_suffix", "\n", "_logger", ".", "info", "(", "\n", "'{0}: [{1:>4d}/{2}]  '", "\n", "'Time: {batch_time.val:.3f} ({batch_time.avg:.3f})  '", "\n", "'Loss: {loss.val:>7.4f} ({loss.avg:>6.4f})  '", "\n", "'Acc@1: {top1.val:>7.4f} ({top1.avg:>7.4f})  '", "\n", "'Acc@5: {top5.val:>7.4f} ({top5.avg:>7.4f})'", ".", "format", "(", "\n", "log_name", ",", "batch_idx", ",", "last_idx", ",", "batch_time", "=", "batch_time_m", ",", "\n", "loss", "=", "losses_m", ",", "top1", "=", "top1_m", ",", "top5", "=", "top5_m", ")", ")", "\n", "\n", "", "", "", "metrics", "=", "OrderedDict", "(", "[", "(", "'loss'", ",", "losses_m", ".", "avg", ")", ",", "(", "'top1'", ",", "top1_m", ".", "avg", ")", ",", "(", "'top5'", ",", "top5_m", ".", "avg", ")", "]", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.poly_lr.PolyLRScheduler.__init__": [[24, 68], ["scheduler.Scheduler.__init__", "_logger.warning", "super().update_groups"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "t_initial", ":", "int", ",", "\n", "power", ":", "float", "=", "0.5", ",", "\n", "lr_min", ":", "float", "=", "0.", ",", "\n", "cycle_mul", ":", "float", "=", "1.", ",", "\n", "cycle_decay", ":", "float", "=", "1.", ",", "\n", "cycle_limit", ":", "int", "=", "1", ",", "\n", "warmup_t", "=", "0", ",", "\n", "warmup_lr_init", "=", "0", ",", "\n", "warmup_prefix", "=", "False", ",", "\n", "t_in_epochs", "=", "True", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "42", ",", "\n", "k_decay", "=", "1.0", ",", "\n", "initialize", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "optimizer", ",", "param_group_field", "=", "\"lr\"", ",", "\n", "noise_range_t", "=", "noise_range_t", ",", "noise_pct", "=", "noise_pct", ",", "noise_std", "=", "noise_std", ",", "noise_seed", "=", "noise_seed", ",", "\n", "initialize", "=", "initialize", ")", "\n", "\n", "assert", "t_initial", ">", "0", "\n", "assert", "lr_min", ">=", "0", "\n", "if", "t_initial", "==", "1", "and", "cycle_mul", "==", "1", "and", "cycle_decay", "==", "1", ":", "\n", "            ", "_logger", ".", "warning", "(", "\"Cosine annealing scheduler will have no effect on the learning \"", "\n", "\"rate since t_initial = t_mul = eta_mul = 1.\"", ")", "\n", "", "self", ".", "t_initial", "=", "t_initial", "\n", "self", ".", "power", "=", "power", "\n", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "cycle_mul", "=", "cycle_mul", "\n", "self", ".", "cycle_decay", "=", "cycle_decay", "\n", "self", ".", "cycle_limit", "=", "cycle_limit", "\n", "self", ".", "warmup_t", "=", "warmup_t", "\n", "self", ".", "warmup_lr_init", "=", "warmup_lr_init", "\n", "self", ".", "warmup_prefix", "=", "warmup_prefix", "\n", "self", ".", "t_in_epochs", "=", "t_in_epochs", "\n", "self", ".", "k_decay", "=", "k_decay", "\n", "if", "self", ".", "warmup_t", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "(", "v", "-", "warmup_lr_init", ")", "/", "self", ".", "warmup_t", "for", "v", "in", "self", ".", "base_values", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "self", ".", "warmup_lr_init", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "1", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.poly_lr.PolyLRScheduler._get_lr": [[69, 98], ["math.floor", "math.log"], "methods", ["None"], ["", "", "def", "_get_lr", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "<", "self", ".", "warmup_t", ":", "\n", "            ", "lrs", "=", "[", "self", ".", "warmup_lr_init", "+", "t", "*", "s", "for", "s", "in", "self", ".", "warmup_steps", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "warmup_prefix", ":", "\n", "                ", "t", "=", "t", "-", "self", ".", "warmup_t", "\n", "\n", "", "if", "self", ".", "cycle_mul", "!=", "1", ":", "\n", "                ", "i", "=", "math", ".", "floor", "(", "math", ".", "log", "(", "1", "-", "t", "/", "self", ".", "t_initial", "*", "(", "1", "-", "self", ".", "cycle_mul", ")", ",", "self", ".", "cycle_mul", ")", ")", "\n", "t_i", "=", "self", ".", "cycle_mul", "**", "i", "*", "self", ".", "t_initial", "\n", "t_curr", "=", "t", "-", "(", "1", "-", "self", ".", "cycle_mul", "**", "i", ")", "/", "(", "1", "-", "self", ".", "cycle_mul", ")", "*", "self", ".", "t_initial", "\n", "", "else", ":", "\n", "                ", "i", "=", "t", "//", "self", ".", "t_initial", "\n", "t_i", "=", "self", ".", "t_initial", "\n", "t_curr", "=", "t", "-", "(", "self", ".", "t_initial", "*", "i", ")", "\n", "\n", "", "gamma", "=", "self", ".", "cycle_decay", "**", "i", "\n", "lr_max_values", "=", "[", "v", "*", "gamma", "for", "v", "in", "self", ".", "base_values", "]", "\n", "k", "=", "self", ".", "k_decay", "\n", "\n", "if", "i", "<", "self", ".", "cycle_limit", ":", "\n", "                ", "lrs", "=", "[", "\n", "self", ".", "lr_min", "+", "(", "lr_max", "-", "self", ".", "lr_min", ")", "*", "(", "1", "-", "t_curr", "**", "k", "/", "t_i", "**", "k", ")", "**", "self", ".", "power", "\n", "for", "lr_max", "in", "lr_max_values", "\n", "]", "\n", "", "else", ":", "\n", "                ", "lrs", "=", "[", "self", ".", "lr_min", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n", "", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.poly_lr.PolyLRScheduler.get_epoch_values": [[99, 104], ["poly_lr.PolyLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler._get_lr"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.poly_lr.PolyLRScheduler.get_update_values": [[105, 110], ["poly_lr.PolyLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler._get_lr"], ["", "", "def", "get_update_values", "(", "self", ",", "num_updates", ":", "int", ")", ":", "\n", "        ", "if", "not", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "num_updates", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.poly_lr.PolyLRScheduler.get_cycle_length": [[111, 117], ["max", "int", "math.floor"], "methods", ["None"], ["", "", "def", "get_cycle_length", "(", "self", ",", "cycles", "=", "0", ")", ":", "\n", "        ", "cycles", "=", "max", "(", "1", ",", "cycles", "or", "self", ".", "cycle_limit", ")", "\n", "if", "self", ".", "cycle_mul", "==", "1.0", ":", "\n", "            ", "return", "self", ".", "t_initial", "*", "cycles", "\n", "", "else", ":", "\n", "            ", "return", "int", "(", "math", ".", "floor", "(", "-", "self", ".", "t_initial", "*", "(", "self", ".", "cycle_mul", "**", "cycles", "-", "1", ")", "/", "(", "1", "-", "self", ".", "cycle_mul", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.plateau_lr.PlateauLRScheduler.__init__": [[15, 63], ["scheduler.Scheduler.__init__", "torch.optim.lr_scheduler.ReduceLROnPlateau", "super().update_groups"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ",", "\n", "decay_rate", "=", "0.1", ",", "\n", "patience_t", "=", "10", ",", "\n", "verbose", "=", "True", ",", "\n", "threshold", "=", "1e-4", ",", "\n", "cooldown_t", "=", "0", ",", "\n", "warmup_t", "=", "0", ",", "\n", "warmup_lr_init", "=", "0", ",", "\n", "lr_min", "=", "0", ",", "\n", "mode", "=", "'max'", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_type", "=", "'normal'", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "None", ",", "\n", "initialize", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "optimizer", ",", "\n", "'lr'", ",", "\n", "noise_range_t", "=", "noise_range_t", ",", "\n", "noise_type", "=", "noise_type", ",", "\n", "noise_pct", "=", "noise_pct", ",", "\n", "noise_std", "=", "noise_std", ",", "\n", "noise_seed", "=", "noise_seed", ",", "\n", "initialize", "=", "initialize", ",", "\n", ")", "\n", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "self", ".", "optimizer", ",", "\n", "patience", "=", "patience_t", ",", "\n", "factor", "=", "decay_rate", ",", "\n", "verbose", "=", "verbose", ",", "\n", "threshold", "=", "threshold", ",", "\n", "cooldown", "=", "cooldown_t", ",", "\n", "mode", "=", "mode", ",", "\n", "min_lr", "=", "lr_min", "\n", ")", "\n", "\n", "self", ".", "warmup_t", "=", "warmup_t", "\n", "self", ".", "warmup_lr_init", "=", "warmup_lr_init", "\n", "if", "self", ".", "warmup_t", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "(", "v", "-", "warmup_lr_init", ")", "/", "self", ".", "warmup_t", "for", "v", "in", "self", ".", "base_values", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "self", ".", "warmup_lr_init", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "1", "for", "_", "in", "self", ".", "base_values", "]", "\n", "", "self", ".", "restore_lr", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.plateau_lr.PlateauLRScheduler.state_dict": [[64, 68], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'best'", ":", "self", ".", "lr_scheduler", ".", "best", ",", "\n", "'last_epoch'", ":", "self", ".", "lr_scheduler", ".", "last_epoch", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.plateau_lr.PlateauLRScheduler.load_state_dict": [[70, 74], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "lr_scheduler", ".", "best", "=", "state_dict", "[", "'best'", "]", "\n", "if", "'last_epoch'", "in", "state_dict", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "last_epoch", "=", "state_dict", "[", "'last_epoch'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.plateau_lr.PlateauLRScheduler.step": [[76, 91], ["super().update_groups", "plateau_lr.PlateauLRScheduler.lr_scheduler.step", "plateau_lr.PlateauLRScheduler._is_apply_noise", "enumerate", "plateau_lr.PlateauLRScheduler._apply_noise"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.update_groups", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.step", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler._is_apply_noise", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.plateau_lr.PlateauLRScheduler._apply_noise"], ["", "", "def", "step", "(", "self", ",", "epoch", ",", "metric", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "<=", "self", ".", "warmup_t", ":", "\n", "            ", "lrs", "=", "[", "self", ".", "warmup_lr_init", "+", "epoch", "*", "s", "for", "s", "in", "self", ".", "warmup_steps", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "lrs", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "restore_lr", "is", "not", "None", ":", "\n", "# restore actual LR from before our last noise perturbation before stepping base", "\n", "                ", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "                    ", "param_group", "[", "'lr'", "]", "=", "self", ".", "restore_lr", "[", "i", "]", "\n", "", "self", ".", "restore_lr", "=", "None", "\n", "\n", "", "self", ".", "lr_scheduler", ".", "step", "(", "metric", ",", "epoch", ")", "# step the base scheduler", "\n", "\n", "if", "self", ".", "_is_apply_noise", "(", "epoch", ")", ":", "\n", "                ", "self", ".", "_apply_noise", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.plateau_lr.PlateauLRScheduler._apply_noise": [[92, 104], ["plateau_lr.PlateauLRScheduler._calculate_noise", "enumerate", "float", "restore_lr.append"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler._calculate_noise"], ["", "", "", "def", "_apply_noise", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "noise", "=", "self", ".", "_calculate_noise", "(", "epoch", ")", "\n", "\n", "# apply the noise on top of previous LR, cache the old value so we can restore for normal", "\n", "# stepping of base scheduler", "\n", "restore_lr", "=", "[", "]", "\n", "for", "i", ",", "param_group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "old_lr", "=", "float", "(", "param_group", "[", "'lr'", "]", ")", "\n", "restore_lr", ".", "append", "(", "old_lr", ")", "\n", "new_lr", "=", "old_lr", "+", "old_lr", "*", "noise", "\n", "param_group", "[", "'lr'", "]", "=", "new_lr", "\n", "", "self", ".", "restore_lr", "=", "restore_lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler_factory.create_scheduler": [[12, 112], ["dict", "dict", "getattr", "getattr", "isinstance", "cosine_lr.CosineLRScheduler", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "poly_lr.PolyLRScheduler.get_cycle_length", "tanh_lr.TanhLRScheduler", "len", "getattr", "poly_lr.PolyLRScheduler.get_cycle_length", "step_lr.StepLRScheduler", "multistep_lr.MultiStepLRScheduler", "plateau_lr.PlateauLRScheduler", "poly_lr.PolyLRScheduler", "getattr", "poly_lr.PolyLRScheduler.get_cycle_length", "getattr"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler.get_cycle_length", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler.get_cycle_length", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler.get_cycle_length"], ["def", "create_scheduler", "(", "args", ",", "optimizer", ")", ":", "\n", "    ", "num_epochs", "=", "args", ".", "epochs", "\n", "n_iter", "=", "args", ".", "data_len", "//", "(", "args", ".", "batch_size", "*", "args", ".", "world_size", ")", "\n", "tot_iter", "=", "num_epochs", "*", "n_iter", "\n", "warmup_iters", "=", "args", ".", "warmup_epochs", "*", "n_iter", "\n", "if", "getattr", "(", "args", ",", "'lr_noise'", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "lr_noise", "=", "getattr", "(", "args", ",", "'lr_noise'", ")", "\n", "if", "isinstance", "(", "lr_noise", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "noise_range", "=", "[", "n", "*", "num_epochs", "for", "n", "in", "lr_noise", "]", "\n", "if", "len", "(", "noise_range", ")", "==", "1", ":", "\n", "                ", "noise_range", "=", "noise_range", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "noise_range", "=", "lr_noise", "*", "num_epochs", "\n", "", "", "else", ":", "\n", "        ", "noise_range", "=", "None", "\n", "", "noise_args", "=", "dict", "(", "\n", "noise_range_t", "=", "noise_range", ",", "\n", "noise_pct", "=", "getattr", "(", "args", ",", "'lr_noise_pct'", ",", "0.67", ")", ",", "\n", "noise_std", "=", "getattr", "(", "args", ",", "'lr_noise_std'", ",", "1.", ")", ",", "\n", "noise_seed", "=", "getattr", "(", "args", ",", "'seed'", ",", "42", ")", ",", "\n", ")", "\n", "cycle_args", "=", "dict", "(", "\n", "cycle_mul", "=", "getattr", "(", "args", ",", "'lr_cycle_mul'", ",", "1.", ")", ",", "\n", "cycle_decay", "=", "getattr", "(", "args", ",", "'lr_cycle_decay'", ",", "0.1", ")", ",", "\n", "cycle_limit", "=", "getattr", "(", "args", ",", "'lr_cycle_limit'", ",", "1", ")", ",", "\n", ")", "\n", "\n", "lr_scheduler", "=", "None", "\n", "if", "args", ".", "sched", "==", "'cosine'", ":", "\n", "        ", "lr_scheduler", "=", "CosineLRScheduler", "(", "\n", "optimizer", ",", "\n", "t_initial", "=", "tot_iter", ",", "\n", "lr_min", "=", "args", ".", "min_lr", ",", "\n", "warmup_lr_init", "=", "args", ".", "warmup_lr", ",", "\n", "warmup_t", "=", "warmup_iters", ",", "\n", "k_decay", "=", "getattr", "(", "args", ",", "'lr_k_decay'", ",", "1.0", ")", ",", "\n", "t_in_epochs", "=", "args", ".", "lr_ep", ",", "\n", "**", "cycle_args", ",", "\n", "**", "noise_args", ",", "\n", ")", "\n", "cycle_length", "=", "lr_scheduler", ".", "get_cycle_length", "(", ")", "//", "n_iter", "\n", "num_epochs", "=", "cycle_length", "+", "args", ".", "cooldown_epochs", "\n", "", "elif", "args", ".", "sched", "==", "'tanh'", ":", "\n", "        ", "lr_scheduler", "=", "TanhLRScheduler", "(", "\n", "optimizer", ",", "\n", "t_initial", "=", "num_epochs", ",", "\n", "lr_min", "=", "args", ".", "min_lr", ",", "\n", "warmup_lr_init", "=", "args", ".", "warmup_lr", ",", "\n", "warmup_t", "=", "args", ".", "warmup_epochs", ",", "\n", "t_in_epochs", "=", "True", ",", "\n", "**", "cycle_args", ",", "\n", "**", "noise_args", ",", "\n", ")", "\n", "num_epochs", "=", "lr_scheduler", ".", "get_cycle_length", "(", ")", "+", "args", ".", "cooldown_epochs", "\n", "", "elif", "args", ".", "sched", "==", "'step'", ":", "\n", "        ", "lr_scheduler", "=", "StepLRScheduler", "(", "\n", "optimizer", ",", "\n", "decay_t", "=", "args", ".", "decay_epochs", ",", "\n", "decay_rate", "=", "args", ".", "decay_rate", ",", "\n", "warmup_lr_init", "=", "args", ".", "warmup_lr", ",", "\n", "warmup_t", "=", "args", ".", "warmup_epochs", ",", "\n", "**", "noise_args", ",", "\n", ")", "\n", "", "elif", "args", ".", "sched", "==", "'multistep'", ":", "\n", "        ", "lr_scheduler", "=", "MultiStepLRScheduler", "(", "\n", "optimizer", ",", "\n", "decay_t", "=", "args", ".", "decay_milestones", ",", "\n", "decay_rate", "=", "args", ".", "decay_rate", ",", "\n", "warmup_lr_init", "=", "args", ".", "warmup_lr", ",", "\n", "warmup_t", "=", "args", ".", "warmup_epochs", ",", "\n", "**", "noise_args", ",", "\n", ")", "\n", "", "elif", "args", ".", "sched", "==", "'plateau'", ":", "\n", "        ", "mode", "=", "'min'", "if", "'loss'", "in", "getattr", "(", "args", ",", "'eval_metric'", ",", "''", ")", "else", "'max'", "\n", "lr_scheduler", "=", "PlateauLRScheduler", "(", "\n", "optimizer", ",", "\n", "decay_rate", "=", "args", ".", "decay_rate", ",", "\n", "patience_t", "=", "args", ".", "patience_epochs", ",", "\n", "lr_min", "=", "args", ".", "min_lr", ",", "\n", "mode", "=", "mode", ",", "\n", "warmup_lr_init", "=", "args", ".", "warmup_lr", ",", "\n", "warmup_t", "=", "args", ".", "warmup_epochs", ",", "\n", "cooldown_t", "=", "0", ",", "\n", "**", "noise_args", ",", "\n", ")", "\n", "", "elif", "args", ".", "sched", "==", "'poly'", ":", "\n", "        ", "lr_scheduler", "=", "PolyLRScheduler", "(", "\n", "optimizer", ",", "\n", "power", "=", "args", ".", "decay_rate", ",", "# overloading 'decay_rate' as polynomial power", "\n", "t_initial", "=", "num_epochs", ",", "\n", "lr_min", "=", "args", ".", "min_lr", ",", "\n", "warmup_lr_init", "=", "args", ".", "warmup_lr", ",", "\n", "warmup_t", "=", "args", ".", "warmup_epochs", ",", "\n", "k_decay", "=", "getattr", "(", "args", ",", "'lr_k_decay'", ",", "1.0", ")", ",", "\n", "**", "cycle_args", ",", "\n", "**", "noise_args", ",", "\n", ")", "\n", "num_epochs", "=", "lr_scheduler", ".", "get_cycle_length", "(", ")", "+", "args", ".", "cooldown_epochs", "\n", "\n", "", "return", "lr_scheduler", ",", "num_epochs", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.cosine_lr.CosineLRScheduler.__init__": [[29, 71], ["scheduler.Scheduler.__init__", "_logger.warning", "super().update_groups"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "t_initial", ":", "int", ",", "\n", "lr_min", ":", "float", "=", "0.", ",", "\n", "cycle_mul", ":", "float", "=", "1.", ",", "\n", "cycle_decay", ":", "float", "=", "1.", ",", "\n", "cycle_limit", ":", "int", "=", "1", ",", "\n", "warmup_t", "=", "0", ",", "\n", "warmup_lr_init", "=", "0", ",", "\n", "warmup_prefix", "=", "False", ",", "\n", "t_in_epochs", "=", "True", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "42", ",", "\n", "k_decay", "=", "1.0", ",", "\n", "initialize", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "optimizer", ",", "param_group_field", "=", "\"lr\"", ",", "\n", "noise_range_t", "=", "noise_range_t", ",", "noise_pct", "=", "noise_pct", ",", "noise_std", "=", "noise_std", ",", "noise_seed", "=", "noise_seed", ",", "\n", "initialize", "=", "initialize", ")", "\n", "\n", "assert", "t_initial", ">", "0", "\n", "assert", "lr_min", ">=", "0", "\n", "if", "t_initial", "==", "1", "and", "cycle_mul", "==", "1", "and", "cycle_decay", "==", "1", ":", "\n", "            ", "_logger", ".", "warning", "(", "\"Cosine annealing scheduler will have no effect on the learning \"", "\n", "\"rate since t_initial = t_mul = eta_mul = 1.\"", ")", "\n", "", "self", ".", "t_initial", "=", "t_initial", "\n", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "cycle_mul", "=", "cycle_mul", "\n", "self", ".", "cycle_decay", "=", "cycle_decay", "\n", "self", ".", "cycle_limit", "=", "cycle_limit", "\n", "self", ".", "warmup_t", "=", "warmup_t", "\n", "self", ".", "warmup_lr_init", "=", "warmup_lr_init", "\n", "self", ".", "warmup_prefix", "=", "warmup_prefix", "\n", "self", ".", "t_in_epochs", "=", "t_in_epochs", "\n", "self", ".", "k_decay", "=", "k_decay", "\n", "if", "self", ".", "warmup_t", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "(", "v", "-", "warmup_lr_init", ")", "/", "self", ".", "warmup_t", "for", "v", "in", "self", ".", "base_values", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "self", ".", "warmup_lr_init", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "1", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.cosine_lr.CosineLRScheduler._get_lr": [[72, 101], ["math.floor", "math.log", "math.cos"], "methods", ["None"], ["", "", "def", "_get_lr", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "<", "self", ".", "warmup_t", ":", "\n", "            ", "lrs", "=", "[", "self", ".", "warmup_lr_init", "+", "t", "*", "s", "for", "s", "in", "self", ".", "warmup_steps", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "warmup_prefix", ":", "\n", "                ", "t", "=", "t", "-", "self", ".", "warmup_t", "\n", "\n", "", "if", "self", ".", "cycle_mul", "!=", "1", ":", "\n", "                ", "i", "=", "math", ".", "floor", "(", "math", ".", "log", "(", "1", "-", "t", "/", "self", ".", "t_initial", "*", "(", "1", "-", "self", ".", "cycle_mul", ")", ",", "self", ".", "cycle_mul", ")", ")", "\n", "t_i", "=", "self", ".", "cycle_mul", "**", "i", "*", "self", ".", "t_initial", "\n", "t_curr", "=", "t", "-", "(", "1", "-", "self", ".", "cycle_mul", "**", "i", ")", "/", "(", "1", "-", "self", ".", "cycle_mul", ")", "*", "self", ".", "t_initial", "\n", "", "else", ":", "\n", "                ", "i", "=", "t", "//", "self", ".", "t_initial", "\n", "t_i", "=", "self", ".", "t_initial", "\n", "t_curr", "=", "t", "-", "(", "self", ".", "t_initial", "*", "i", ")", "\n", "\n", "", "gamma", "=", "self", ".", "cycle_decay", "**", "i", "\n", "lr_max_values", "=", "[", "v", "*", "gamma", "for", "v", "in", "self", ".", "base_values", "]", "\n", "k", "=", "self", ".", "k_decay", "\n", "\n", "if", "i", "<", "self", ".", "cycle_limit", ":", "\n", "                ", "lrs", "=", "[", "\n", "self", ".", "lr_min", "+", "0.5", "*", "(", "lr_max", "-", "self", ".", "lr_min", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "t_curr", "**", "k", "/", "t_i", "**", "k", ")", ")", "\n", "for", "lr_max", "in", "lr_max_values", "\n", "]", "\n", "", "else", ":", "\n", "                ", "lrs", "=", "[", "self", ".", "lr_min", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n", "", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.cosine_lr.CosineLRScheduler.get_epoch_values": [[102, 107], ["cosine_lr.CosineLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler._get_lr"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.cosine_lr.CosineLRScheduler.get_update_values": [[108, 113], ["cosine_lr.CosineLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler._get_lr"], ["", "", "def", "get_update_values", "(", "self", ",", "num_updates", ":", "int", ")", ":", "\n", "        ", "if", "not", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "num_updates", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.cosine_lr.CosineLRScheduler.get_cycle_length": [[114, 120], ["max", "int", "math.floor"], "methods", ["None"], ["", "", "def", "get_cycle_length", "(", "self", ",", "cycles", "=", "0", ")", ":", "\n", "        ", "cycles", "=", "max", "(", "1", ",", "cycles", "or", "self", ".", "cycle_limit", ")", "\n", "if", "self", ".", "cycle_mul", "==", "1.0", ":", "\n", "            ", "return", "self", ".", "t_initial", "*", "cycles", "\n", "", "else", ":", "\n", "            ", "return", "int", "(", "math", ".", "floor", "(", "-", "self", ".", "t_initial", "*", "(", "self", ".", "cycle_mul", "**", "cycles", "-", "1", ")", "/", "(", "1", "-", "self", ".", "cycle_mul", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.step_lr.StepLRScheduler.__init__": [[17, 45], ["scheduler.Scheduler.__init__", "super().update_groups"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "decay_t", ":", "float", ",", "\n", "decay_rate", ":", "float", "=", "1.", ",", "\n", "warmup_t", "=", "0", ",", "\n", "warmup_lr_init", "=", "0", ",", "\n", "t_in_epochs", "=", "True", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "42", ",", "\n", "initialize", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "optimizer", ",", "param_group_field", "=", "\"lr\"", ",", "\n", "noise_range_t", "=", "noise_range_t", ",", "noise_pct", "=", "noise_pct", ",", "noise_std", "=", "noise_std", ",", "noise_seed", "=", "noise_seed", ",", "\n", "initialize", "=", "initialize", ")", "\n", "\n", "self", ".", "decay_t", "=", "decay_t", "\n", "self", ".", "decay_rate", "=", "decay_rate", "\n", "self", ".", "warmup_t", "=", "warmup_t", "\n", "self", ".", "warmup_lr_init", "=", "warmup_lr_init", "\n", "self", ".", "t_in_epochs", "=", "t_in_epochs", "\n", "if", "self", ".", "warmup_t", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "(", "v", "-", "warmup_lr_init", ")", "/", "self", ".", "warmup_t", "for", "v", "in", "self", ".", "base_values", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "self", ".", "warmup_lr_init", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "1", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.step_lr.StepLRScheduler._get_lr": [[46, 52], ["None"], "methods", ["None"], ["", "", "def", "_get_lr", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "<", "self", ".", "warmup_t", ":", "\n", "            ", "lrs", "=", "[", "self", ".", "warmup_lr_init", "+", "t", "*", "s", "for", "s", "in", "self", ".", "warmup_steps", "]", "\n", "", "else", ":", "\n", "            ", "lrs", "=", "[", "v", "*", "(", "self", ".", "decay_rate", "**", "(", "t", "//", "self", ".", "decay_t", ")", ")", "for", "v", "in", "self", ".", "base_values", "]", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.step_lr.StepLRScheduler.get_epoch_values": [[53, 58], ["step_lr.StepLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler._get_lr"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.step_lr.StepLRScheduler.get_update_values": [[59, 64], ["step_lr.StepLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler._get_lr"], ["", "", "def", "get_update_values", "(", "self", ",", "num_updates", ":", "int", ")", ":", "\n", "        ", "if", "not", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "num_updates", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.__init__": [[25, 54], ["scheduler.Scheduler.update_groups", "enumerate", "enumerate", "group.setdefault", "KeyError", "KeyError"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "param_group_field", ":", "str", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_type", "=", "'normal'", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "None", ",", "\n", "initialize", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "param_group_field", "=", "param_group_field", "\n", "self", ".", "_initial_param_group_field", "=", "f\"initial_{param_group_field}\"", "\n", "if", "initialize", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "param_group_field", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "f\"{param_group_field} missing from param_groups[{i}]\"", ")", "\n", "", "group", ".", "setdefault", "(", "self", ".", "_initial_param_group_field", ",", "group", "[", "param_group_field", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "self", ".", "_initial_param_group_field", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "f\"{self._initial_param_group_field} missing from param_groups[{i}]\"", ")", "\n", "", "", "", "self", ".", "base_values", "=", "[", "group", "[", "self", ".", "_initial_param_group_field", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "self", ".", "metric", "=", "None", "# any point to having this for all?", "\n", "self", ".", "noise_range_t", "=", "noise_range_t", "\n", "self", ".", "noise_pct", "=", "noise_pct", "\n", "self", ".", "noise_type", "=", "noise_type", "\n", "self", ".", "noise_std", "=", "noise_std", "\n", "self", ".", "noise_seed", "=", "noise_seed", "if", "noise_seed", "is", "not", "None", "else", "42", "\n", "self", ".", "update_groups", "(", "self", ".", "base_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.state_dict": [[55, 57], ["scheduler.Scheduler.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.load_state_dict": [[58, 60], ["scheduler.Scheduler.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.None.tensorboard.TensorboardLogger.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ":", "Dict", "[", "str", ",", "Any", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.get_epoch_values": [[61, 63], ["None"], "methods", ["None"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.get_update_values": [[64, 66], ["None"], "methods", ["None"], ["", "def", "get_update_values", "(", "self", ",", "num_updates", ":", "int", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.step": [[67, 73], ["scheduler.Scheduler.get_epoch_values", "scheduler.Scheduler._add_noise", "scheduler.Scheduler.update_groups"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler.get_epoch_values", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler._add_noise", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.update_groups"], ["", "def", "step", "(", "self", ",", "epoch", ":", "int", ",", "metric", ":", "float", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "values", "=", "self", ".", "get_epoch_values", "(", "epoch", ")", "\n", "if", "values", "is", "not", "None", ":", "\n", "            ", "values", "=", "self", ".", "_add_noise", "(", "values", ",", "epoch", ")", "\n", "self", ".", "update_groups", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.step_update": [[74, 80], ["scheduler.Scheduler.get_update_values", "scheduler.Scheduler._add_noise", "scheduler.Scheduler.update_groups"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler.get_update_values", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler._add_noise", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.update_groups"], ["", "", "def", "step_update", "(", "self", ",", "num_updates", ":", "int", ",", "metric", ":", "float", "=", "None", ")", ":", "\n", "        ", "self", ".", "metric", "=", "metric", "\n", "values", "=", "self", ".", "get_update_values", "(", "num_updates", ")", "\n", "if", "values", "is", "not", "None", ":", "\n", "            ", "values", "=", "self", ".", "_add_noise", "(", "values", ",", "num_updates", ")", "\n", "self", ".", "update_groups", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.update_groups": [[81, 89], ["zip", "isinstance", "len"], "methods", ["None"], ["", "", "def", "update_groups", "(", "self", ",", "values", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "values", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "values", "=", "[", "values", "]", "*", "len", "(", "self", ".", "optimizer", ".", "param_groups", ")", "\n", "", "for", "param_group", ",", "value", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "values", ")", ":", "\n", "            ", "if", "'lr_scale'", "in", "param_group", ":", "\n", "                ", "param_group", "[", "self", ".", "param_group_field", "]", "=", "value", "*", "param_group", "[", "'lr_scale'", "]", "\n", "", "else", ":", "\n", "                ", "param_group", "[", "self", ".", "param_group_field", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler._add_noise": [[90, 95], ["scheduler.Scheduler._is_apply_noise", "scheduler.Scheduler._calculate_noise"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler._is_apply_noise", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler._calculate_noise"], ["", "", "", "def", "_add_noise", "(", "self", ",", "lrs", ",", "t", ")", ":", "\n", "        ", "if", "self", ".", "_is_apply_noise", "(", "t", ")", ":", "\n", "            ", "noise", "=", "self", ".", "_calculate_noise", "(", "t", ")", "\n", "lrs", "=", "[", "v", "+", "v", "*", "noise", "for", "v", "in", "lrs", "]", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler._is_apply_noise": [[96, 105], ["isinstance"], "methods", ["None"], ["", "def", "_is_apply_noise", "(", "self", ",", "t", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Return True if scheduler in noise range.\"\"\"", "\n", "apply_noise", "=", "False", "\n", "if", "self", ".", "noise_range_t", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "noise_range_t", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "apply_noise", "=", "self", ".", "noise_range_t", "[", "0", "]", "<=", "t", "<", "self", ".", "noise_range_t", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "apply_noise", "=", "t", ">=", "self", ".", "noise_range_t", "\n", "", "", "return", "apply_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler._calculate_noise": [[106, 118], ["torch.Generator", "torch.Generator.manual_seed", "torch.randn().item", "abs", "torch.randn", "torch.rand().item", "torch.rand"], "methods", ["None"], ["", "def", "_calculate_noise", "(", "self", ",", "t", ")", "->", "float", ":", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "noise_seed", "+", "t", ")", "\n", "if", "self", ".", "noise_type", "==", "'normal'", ":", "\n", "            ", "while", "True", ":", "\n", "# resample if noise out of percent limit, brute force but shouldn't spin much", "\n", "                ", "noise", "=", "torch", ".", "randn", "(", "1", ",", "generator", "=", "g", ")", ".", "item", "(", ")", "\n", "if", "abs", "(", "noise", ")", "<", "self", ".", "noise_pct", ":", "\n", "                    ", "return", "noise", "\n", "", "", "", "else", ":", "\n", "            ", "noise", "=", "2", "*", "(", "torch", ".", "rand", "(", "1", ",", "generator", "=", "g", ")", ".", "item", "(", ")", "-", "0.5", ")", "*", "self", ".", "noise_pct", "\n", "", "return", "noise", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.multistep_lr.MultiStepLRScheduler.__init__": [[14, 42], ["timm.scheduler.scheduler.Scheduler.__init__", "super().update_groups"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.update_groups"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "decay_t", ":", "List", "[", "int", "]", ",", "\n", "decay_rate", ":", "float", "=", "1.", ",", "\n", "warmup_t", "=", "0", ",", "\n", "warmup_lr_init", "=", "0", ",", "\n", "t_in_epochs", "=", "True", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "42", ",", "\n", "initialize", "=", "True", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "optimizer", ",", "param_group_field", "=", "\"lr\"", ",", "\n", "noise_range_t", "=", "noise_range_t", ",", "noise_pct", "=", "noise_pct", ",", "noise_std", "=", "noise_std", ",", "noise_seed", "=", "noise_seed", ",", "\n", "initialize", "=", "initialize", ")", "\n", "\n", "self", ".", "decay_t", "=", "decay_t", "\n", "self", ".", "decay_rate", "=", "decay_rate", "\n", "self", ".", "warmup_t", "=", "warmup_t", "\n", "self", ".", "warmup_lr_init", "=", "warmup_lr_init", "\n", "self", ".", "t_in_epochs", "=", "t_in_epochs", "\n", "if", "self", ".", "warmup_t", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "(", "v", "-", "warmup_lr_init", ")", "/", "self", ".", "warmup_t", "for", "v", "in", "self", ".", "base_values", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "self", ".", "warmup_lr_init", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "1", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.multistep_lr.MultiStepLRScheduler.get_curr_decay_steps": [[43, 47], ["bisect.bisect_right"], "methods", ["None"], ["", "", "def", "get_curr_decay_steps", "(", "self", ",", "t", ")", ":", "\n", "# find where in the array t goes,", "\n", "# assumes self.decay_t is sorted", "\n", "        ", "return", "bisect", ".", "bisect_right", "(", "self", ".", "decay_t", ",", "t", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.multistep_lr.MultiStepLRScheduler._get_lr": [[48, 54], ["multistep_lr.MultiStepLRScheduler.get_curr_decay_steps"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.multistep_lr.MultiStepLRScheduler.get_curr_decay_steps"], ["", "def", "_get_lr", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "<", "self", ".", "warmup_t", ":", "\n", "            ", "lrs", "=", "[", "self", ".", "warmup_lr_init", "+", "t", "*", "s", "for", "s", "in", "self", ".", "warmup_steps", "]", "\n", "", "else", ":", "\n", "            ", "lrs", "=", "[", "v", "*", "(", "self", ".", "decay_rate", "**", "self", ".", "get_curr_decay_steps", "(", "t", ")", ")", "for", "v", "in", "self", ".", "base_values", "]", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.multistep_lr.MultiStepLRScheduler.get_epoch_values": [[55, 60], ["multistep_lr.MultiStepLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler._get_lr"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.multistep_lr.MultiStepLRScheduler.get_update_values": [[61, 66], ["multistep_lr.MultiStepLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler._get_lr"], ["", "", "def", "get_update_values", "(", "self", ",", "num_updates", ":", "int", ")", ":", "\n", "        ", "if", "not", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "num_updates", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler.__init__": [[24, 70], ["scheduler.Scheduler.__init__", "super().update_groups", "tanh_lr.TanhLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.update_groups", "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler._get_lr"], ["def", "__init__", "(", "self", ",", "\n", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "t_initial", ":", "int", ",", "\n", "lb", ":", "float", "=", "-", "7.", ",", "\n", "ub", ":", "float", "=", "3.", ",", "\n", "lr_min", ":", "float", "=", "0.", ",", "\n", "cycle_mul", ":", "float", "=", "1.", ",", "\n", "cycle_decay", ":", "float", "=", "1.", ",", "\n", "cycle_limit", ":", "int", "=", "1", ",", "\n", "warmup_t", "=", "0", ",", "\n", "warmup_lr_init", "=", "0", ",", "\n", "warmup_prefix", "=", "False", ",", "\n", "t_in_epochs", "=", "True", ",", "\n", "noise_range_t", "=", "None", ",", "\n", "noise_pct", "=", "0.67", ",", "\n", "noise_std", "=", "1.0", ",", "\n", "noise_seed", "=", "42", ",", "\n", "initialize", "=", "True", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "optimizer", ",", "param_group_field", "=", "\"lr\"", ",", "\n", "noise_range_t", "=", "noise_range_t", ",", "noise_pct", "=", "noise_pct", ",", "noise_std", "=", "noise_std", ",", "noise_seed", "=", "noise_seed", ",", "\n", "initialize", "=", "initialize", ")", "\n", "\n", "assert", "t_initial", ">", "0", "\n", "assert", "lr_min", ">=", "0", "\n", "assert", "lb", "<", "ub", "\n", "assert", "cycle_limit", ">=", "0", "\n", "assert", "warmup_t", ">=", "0", "\n", "assert", "warmup_lr_init", ">=", "0", "\n", "self", ".", "lb", "=", "lb", "\n", "self", ".", "ub", "=", "ub", "\n", "self", ".", "t_initial", "=", "t_initial", "\n", "self", ".", "lr_min", "=", "lr_min", "\n", "self", ".", "cycle_mul", "=", "cycle_mul", "\n", "self", ".", "cycle_decay", "=", "cycle_decay", "\n", "self", ".", "cycle_limit", "=", "cycle_limit", "\n", "self", ".", "warmup_t", "=", "warmup_t", "\n", "self", ".", "warmup_lr_init", "=", "warmup_lr_init", "\n", "self", ".", "warmup_prefix", "=", "warmup_prefix", "\n", "self", ".", "t_in_epochs", "=", "t_in_epochs", "\n", "if", "self", ".", "warmup_t", ":", "\n", "            ", "t_v", "=", "self", ".", "base_values", "if", "self", ".", "warmup_prefix", "else", "self", ".", "_get_lr", "(", "self", ".", "warmup_t", ")", "\n", "self", ".", "warmup_steps", "=", "[", "(", "v", "-", "warmup_lr_init", ")", "/", "self", ".", "warmup_t", "for", "v", "in", "t_v", "]", "\n", "super", "(", ")", ".", "update_groups", "(", "self", ".", "warmup_lr_init", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_steps", "=", "[", "1", "for", "_", "in", "self", ".", "base_values", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler._get_lr": [[71, 99], ["math.floor", "math.log", "math.tanh"], "methods", ["None"], ["", "", "def", "_get_lr", "(", "self", ",", "t", ")", ":", "\n", "        ", "if", "t", "<", "self", ".", "warmup_t", ":", "\n", "            ", "lrs", "=", "[", "self", ".", "warmup_lr_init", "+", "t", "*", "s", "for", "s", "in", "self", ".", "warmup_steps", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "warmup_prefix", ":", "\n", "                ", "t", "=", "t", "-", "self", ".", "warmup_t", "\n", "\n", "", "if", "self", ".", "cycle_mul", "!=", "1", ":", "\n", "                ", "i", "=", "math", ".", "floor", "(", "math", ".", "log", "(", "1", "-", "t", "/", "self", ".", "t_initial", "*", "(", "1", "-", "self", ".", "cycle_mul", ")", ",", "self", ".", "cycle_mul", ")", ")", "\n", "t_i", "=", "self", ".", "cycle_mul", "**", "i", "*", "self", ".", "t_initial", "\n", "t_curr", "=", "t", "-", "(", "1", "-", "self", ".", "cycle_mul", "**", "i", ")", "/", "(", "1", "-", "self", ".", "cycle_mul", ")", "*", "self", ".", "t_initial", "\n", "", "else", ":", "\n", "                ", "i", "=", "t", "//", "self", ".", "t_initial", "\n", "t_i", "=", "self", ".", "t_initial", "\n", "t_curr", "=", "t", "-", "(", "self", ".", "t_initial", "*", "i", ")", "\n", "\n", "", "if", "i", "<", "self", ".", "cycle_limit", ":", "\n", "                ", "gamma", "=", "self", ".", "cycle_decay", "**", "i", "\n", "lr_max_values", "=", "[", "v", "*", "gamma", "for", "v", "in", "self", ".", "base_values", "]", "\n", "\n", "tr", "=", "t_curr", "/", "t_i", "\n", "lrs", "=", "[", "\n", "self", ".", "lr_min", "+", "0.5", "*", "(", "lr_max", "-", "self", ".", "lr_min", ")", "*", "(", "1", "-", "math", ".", "tanh", "(", "self", ".", "lb", "*", "(", "1.", "-", "tr", ")", "+", "self", ".", "ub", "*", "tr", ")", ")", "\n", "for", "lr_max", "in", "lr_max_values", "\n", "]", "\n", "", "else", ":", "\n", "                ", "lrs", "=", "[", "self", ".", "lr_min", "for", "_", "in", "self", ".", "base_values", "]", "\n", "", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler.get_epoch_values": [[100, 105], ["tanh_lr.TanhLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler._get_lr"], ["", "def", "get_epoch_values", "(", "self", ",", "epoch", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler.get_update_values": [[106, 111], ["tanh_lr.TanhLRScheduler._get_lr"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler._get_lr"], ["", "", "def", "get_update_values", "(", "self", ",", "num_updates", ":", "int", ")", ":", "\n", "        ", "if", "not", "self", ".", "t_in_epochs", ":", "\n", "            ", "return", "self", ".", "_get_lr", "(", "num_updates", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.tanh_lr.TanhLRScheduler.get_cycle_length": [[112, 118], ["max", "int", "math.floor"], "methods", ["None"], ["", "", "def", "get_cycle_length", "(", "self", ",", "cycles", "=", "0", ")", ":", "\n", "        ", "cycles", "=", "max", "(", "1", ",", "cycles", "or", "self", ".", "cycle_limit", ")", "\n", "if", "self", ".", "cycle_mul", "==", "1.0", ":", "\n", "            ", "return", "self", ".", "t_initial", "*", "cycles", "\n", "", "else", ":", "\n", "            ", "return", "int", "(", "math", ".", "floor", "(", "-", "self", ".", "t_initial", "*", "(", "self", ".", "cycle_mul", "**", "cycles", "-", "1", ")", "/", "(", "1", "-", "self", ".", "cycle_mul", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.Mlp.__init__": [[19, 27], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.Mlp.forward": [[28, 35], ["gc_vit.Mlp.fc1", "gc_vit.Mlp.act", "gc_vit.Mlp.drop", "gc_vit.Mlp.fc2", "gc_vit.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.SE.__init__": [[38, 46], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "int", "int"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "expansion", "=", "0.25", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "oup", ",", "int", "(", "inp", "*", "expansion", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "int", "(", "inp", "*", "expansion", ")", ",", "oup", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.SE.forward": [[48, 53], ["x.size", "gc_vit.SE.avg_pool().view", "gc_vit.SE.fc().view", "gc_vit.SE.avg_pool", "gc_vit.SE.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.ReduceSize.__init__": [[56, 74], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "norm_layer", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.GELU", "torch.GELU", "gc_vit.SE", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "keep_dim", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "\n", "groups", "=", "dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "SE", "(", "dim", ",", "dim", ")", ",", "\n", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "if", "keep_dim", ":", "\n", "            ", "dim_out", "=", "dim", "\n", "", "else", ":", "\n", "            ", "dim_out", "=", "2", "*", "dim", "\n", "", "self", ".", "reduction", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim_out", ",", "3", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim_out", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.ReduceSize.forward": [[75, 83], ["gc_vit.ReduceSize.contiguous", "gc_vit.ReduceSize.norm1", "gc_vit.ReduceSize.permute", "gc_vit.ReduceSize.reduction().permute", "gc_vit.ReduceSize.norm2", "gc_vit.ReduceSize.conv", "gc_vit.ReduceSize.reduction"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "x", "=", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "reduction", "(", "x", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.PatchEmbed.__init__": [[86, 90], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "gc_vit.ReduceSize"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_chans", "=", "3", ",", "dim", "=", "96", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "dim", ",", "3", ",", "2", ",", "1", ")", "\n", "self", ".", "conv_down", "=", "ReduceSize", "(", "dim", "=", "dim", ",", "keep_dim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.PatchEmbed.forward": [[91, 95], ["gc_vit.PatchEmbed.proj().permute", "gc_vit.PatchEmbed.conv_down", "gc_vit.PatchEmbed.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_down", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.FeatExtract.__init__": [[98, 110], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.GELU", "torch.GELU", "gc_vit.SE", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "keep_dim", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "3", ",", "1", ",", "1", ",", "\n", "groups", "=", "dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "SE", "(", "dim", ",", "dim", ")", ",", "\n", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "if", "not", "keep_dim", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "self", ".", "keep_dim", "=", "keep_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.FeatExtract.forward": [[111, 117], ["gc_vit.FeatExtract.contiguous", "gc_vit.FeatExtract.conv", "gc_vit.FeatExtract.pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "x", "=", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "if", "not", "self", ".", "keep_dim", ":", "\n", "            ", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.WindowAttention.__init__": [[121, 157], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "gc_vit.WindowAttention.register_buffer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "timm.models.layers.trunc_normal_", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dim", ",", "\n", "num_heads", ",", "\n", "window_size", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "attn_drop", "=", "0.", ",", "\n", "proj_drop", "=", "0.", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "window_size", "=", "(", "window_size", ",", "window_size", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", ",", "num_heads", ")", ")", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "1", "]", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "window_size", "[", "0", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.WindowAttention.forward": [[158, 176], ["gc_vit.WindowAttention.qkv().reshape().permute", "gc_vit.WindowAttention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "gc_vit.WindowAttention.softmax", "gc_vit.WindowAttention.attn_drop", "gc_vit.WindowAttention.proj", "gc_vit.WindowAttention.proj_drop", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "gc_vit.WindowAttention.qkv().reshape", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "gc_vit.WindowAttention.qkv", "gc_vit.WindowAttention.relative_position_index.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "q_global", ")", ":", "\n", "\n", "        ", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "-", "1", ")", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.WindowAttentionGlobal.__init__": [[180, 215], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "gc_vit.WindowAttentionGlobal.register_buffer", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "timm.models.layers.trunc_normal_", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "\n", "num_heads", ",", "\n", "window_size", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "attn_drop", "=", "0.", ",", "\n", "proj_drop", "=", "0.", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "window_size", "=", "(", "window_size", ",", "window_size", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", ",", "num_heads", ")", ")", "\n", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "1", "]", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "window_size", "[", "0", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "2", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.WindowAttentionGlobal.forward": [[216, 238], ["gc_vit.WindowAttentionGlobal.qkv().reshape().permute", "q_global.repeat.repeat.repeat", "q_global.repeat.repeat.reshape", "gc_vit.WindowAttentionGlobal.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "gc_vit.WindowAttentionGlobal.softmax", "gc_vit.WindowAttentionGlobal.attn_drop", "gc_vit.WindowAttentionGlobal.proj", "gc_vit.WindowAttentionGlobal.proj_drop", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "gc_vit.WindowAttentionGlobal.qkv().reshape", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "gc_vit.WindowAttentionGlobal.qkv", "gc_vit.WindowAttentionGlobal.relative_position_index.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "q_global", ")", ":", "\n", "\n", "        ", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "B", "=", "q_global", ".", "shape", "[", "0", "]", "\n", "\n", "kv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "k", ",", "v", "=", "kv", "[", "0", "]", ",", "kv", "[", "1", "]", "\n", "q_global", "=", "q_global", ".", "repeat", "(", "B_", "//", "B", ",", "1", ",", "1", ",", "1", ")", "\n", "q", "=", "q_global", ".", "reshape", "(", "B_", ",", "self", ".", "num_heads", ",", "N", ",", "C", "//", "self", ".", "num_heads", ")", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "-", "1", ")", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViTBlock.__init__": [[257, 299], ["torch.Module.__init__", "norm_layer", "attention", "norm_layer", "gc_vit.Mlp", "int", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "int", "type", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dim", ",", "\n", "input_resolution", ",", "\n", "num_heads", ",", "\n", "window_size", "=", "7", ",", "\n", "mlp_ratio", "=", "4.", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop", "=", "0.", ",", "\n", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "\n", "attention", "=", "WindowAttentionGlobal", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "layer_scale", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "\n", "self", ".", "attn", "=", "attention", "(", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "window_size", "=", "window_size", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "proj_drop", "=", "drop", ",", "\n", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "int", "(", "dim", "*", "mlp_ratio", ")", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "layer_scale", "=", "False", "\n", "if", "layer_scale", "is", "not", "None", "and", "type", "(", "layer_scale", ")", "in", "[", "int", ",", "float", "]", ":", "\n", "            ", "self", ".", "layer_scale", "=", "True", "\n", "self", ".", "gamma1", "=", "nn", ".", "Parameter", "(", "layer_scale", "*", "torch", ".", "ones", "(", "dim", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "gamma2", "=", "nn", ".", "Parameter", "(", "layer_scale", "*", "torch", ".", "ones", "(", "dim", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gamma1", "=", "1.0", "\n", "self", ".", "gamma2", "=", "1.0", "\n", "\n", "", "self", ".", "num_windows", "=", "int", "(", "(", "input_resolution", "//", "window_size", ")", "*", "(", "input_resolution", "//", "window_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViTBlock.forward": [[300, 311], ["gc_vit.GCViTBlock.norm1", "gc_vit.window_partition", "x_windows.view.view.view", "gc_vit.GCViTBlock.attn", "gc_vit.window_reverse", "gc_vit.GCViTBlock.drop_path", "gc_vit.GCViTBlock.drop_path", "gc_vit.GCViTBlock.mlp", "gc_vit.GCViTBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.window_partition", "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.window_reverse"], ["", "def", "forward", "(", "self", ",", "x", ",", "q_global", ")", ":", "\n", "            ", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x_windows", "=", "window_partition", "(", "x", ",", "self", ".", "window_size", ")", "\n", "x_windows", "=", "x_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "\n", "attn_windows", "=", "self", ".", "attn", "(", "x_windows", ",", "q_global", ")", "\n", "x", "=", "window_reverse", "(", "attn_windows", ",", "self", ".", "window_size", ",", "H", ",", "W", ")", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "self", ".", "gamma1", "*", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "gamma2", "*", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViTLayer.__init__": [[314, 380], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "gc_vit.ReduceSize", "torch.Sequential", "torch.Sequential", "gc_vit.GCViTBlock", "gc_vit.FeatExtract", "gc_vit.FeatExtract", "gc_vit.FeatExtract", "torch.Sequential", "torch.Sequential", "range", "gc_vit.FeatExtract", "gc_vit.FeatExtract", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "gc_vit.FeatExtract", "torch.Sequential", "torch.Sequential", "gc_vit.FeatExtract", "gc_vit.FeatExtract"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dim", ",", "\n", "depth", ",", "\n", "input_resolution", ",", "\n", "num_heads", ",", "\n", "window_size", ",", "\n", "downsample", "=", "True", ",", "\n", "mlp_ratio", "=", "4.", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop", "=", "0.", ",", "\n", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "layer_scale", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "GCViTBlock", "(", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "window_size", "=", "window_size", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "attention", "=", "WindowAttention", "if", "(", "i", "%", "2", "==", "0", ")", "else", "WindowAttentionGlobal", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", "[", "i", "]", "if", "isinstance", "(", "drop_path", ",", "list", ")", "else", "drop_path", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "layer_scale", "=", "layer_scale", ",", "\n", "input_resolution", "=", "input_resolution", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "downsample", "=", "None", "if", "not", "downsample", "else", "ReduceSize", "(", "dim", "=", "dim", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "if", "input_resolution", "==", "56", ":", "\n", "            ", "self", ".", "to_q_global", "=", "nn", ".", "Sequential", "(", "\n", "FeatExtract", "(", "dim", ",", "keep_dim", "=", "False", ")", ",", "\n", "FeatExtract", "(", "dim", ",", "keep_dim", "=", "False", ")", ",", "\n", "FeatExtract", "(", "dim", ",", "keep_dim", "=", "False", ")", ",", "\n", ")", "\n", "\n", "", "elif", "input_resolution", "==", "28", ":", "\n", "            ", "self", ".", "to_q_global", "=", "nn", ".", "Sequential", "(", "\n", "FeatExtract", "(", "dim", ",", "keep_dim", "=", "False", ")", ",", "\n", "FeatExtract", "(", "dim", ",", "keep_dim", "=", "False", ")", ",", "\n", ")", "\n", "\n", "", "elif", "input_resolution", "==", "14", ":", "\n", "\n", "            ", "if", "window_size", "==", "14", ":", "\n", "                ", "self", ".", "to_q_global", "=", "nn", ".", "Sequential", "(", "\n", "FeatExtract", "(", "dim", ",", "keep_dim", "=", "True", ")", "\n", ")", "\n", "\n", "", "elif", "window_size", "==", "7", ":", "\n", "                ", "self", ".", "to_q_global", "=", "nn", ".", "Sequential", "(", "\n", "FeatExtract", "(", "dim", ",", "keep_dim", "=", "False", ")", "\n", ")", "\n", "\n", "", "", "elif", "input_resolution", "==", "7", ":", "\n", "            ", "self", ".", "to_q_global", "=", "nn", ".", "Sequential", "(", "\n", "FeatExtract", "(", "dim", ",", "keep_dim", "=", "True", ")", "\n", ")", "\n", "\n", "", "self", ".", "dim", "=", "dim", "\n", "self", ".", "resolution", "=", "input_resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViTLayer.forward": [[381, 391], ["gc_vit.GCViTLayer.to_q_global", "gc_vit.GCViTLayer.downsample", "blk.view", "blk"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "q_global", "=", "self", ".", "to_q_global", "(", "x", ".", "view", "(", "-", "1", ",", "\n", "self", ".", "dim", ",", "\n", "self", ".", "resolution", ",", "\n", "self", ".", "resolution", ")", ")", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "q_global", ")", "\n", "", "if", "self", ".", "downsample", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "return", "self", ".", "downsample", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__": [[394, 438], ["torch.Module.__init__", "int", "gc_vit.PatchEmbed", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "range", "norm_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "gc_vit.GCViT.apply", "x.item", "len", "gc_vit.GCViTLayer", "gc_vit.GCViT.levels.append", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum", "int", "int", "len", "sum", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dim", ",", "\n", "depths", ",", "\n", "window_size", ",", "\n", "mlp_ratio", ",", "\n", "num_heads", ",", "\n", "resolution", "=", "224", ",", "\n", "drop_path_rate", "=", "0.2", ",", "\n", "in_chans", "=", "3", ",", "\n", "num_classes", "=", "1000", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "\n", "attn_drop_rate", "=", "0.", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "layer_scale", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "num_features", "=", "int", "(", "dim", "*", "2", "**", "(", "len", "(", "depths", ")", "-", "1", ")", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "in_chans", "=", "in_chans", ",", "dim", "=", "dim", ")", "\n", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "\n", "self", ".", "levels", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "depths", ")", ")", ":", "\n", "            ", "level", "=", "GCViTLayer", "(", "dim", "=", "int", "(", "dim", "*", "2", "**", "i", ")", ",", "\n", "depth", "=", "depths", "[", "i", "]", ",", "\n", "num_heads", "=", "num_heads", "[", "i", "]", ",", "\n", "window_size", "=", "window_size", "[", "i", "]", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "sum", "(", "depths", "[", ":", "i", "]", ")", ":", "sum", "(", "depths", "[", ":", "i", "+", "1", "]", ")", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "downsample", "=", "(", "i", "<", "len", "(", "depths", ")", "-", "1", ")", ",", "\n", "layer_scale", "=", "layer_scale", ",", "\n", "input_resolution", "=", "int", "(", "2", "**", "(", "-", "2", "-", "i", ")", "*", "resolution", ")", ")", "\n", "self", ".", "levels", ".", "append", "(", "level", ")", "\n", "", "self", ".", "norm", "=", "norm_layer", "(", "num_features", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT._init_weights": [[439, 447], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.no_weight_decay_keywords": [[448, 451], ["None"], "methods", ["None"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay_keywords", "(", "self", ")", ":", "\n", "        ", "return", "{", "'rpb'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.forward_features": [[452, 464], ["gc_vit.GCViT.patch_embed", "gc_vit.GCViT.pos_drop", "gc_vit.GCViT.norm", "level.permute", "gc_vit.GCViT.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "level"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "level", "in", "self", ".", "levels", ":", "\n", "            ", "x", "=", "level", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.forward": [[465, 469], ["gc_vit.GCViT.forward_features", "gc_vit.GCViT.head"], "methods", ["home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.GCViT.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.window_partition": [[240, 246], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "\n", "    ", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.window_reverse": [[248, 254], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "\n", "    ", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.gc_vit_xxtiny": [[471, 483], ["gc_vit.GCViT", "GCViT.load_state_dict", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.load_state_dict"], ["", "", "@", "register_model", "\n", "def", "gc_vit_xxtiny", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "GCViT", "(", "depths", "=", "[", "2", ",", "2", ",", "6", ",", "2", "]", ",", "\n", "num_heads", "=", "[", "2", ",", "4", ",", "8", ",", "16", "]", ",", "\n", "window_size", "=", "[", "7", ",", "7", ",", "14", ",", "7", "]", ",", "\n", "dim", "=", "64", ",", "\n", "mlp_ratio", "=", "3", ",", "\n", "drop_path_rate", "=", "0.2", ",", "\n", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrained", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.gc_vit_xtiny": [[485, 497], ["gc_vit.GCViT", "GCViT.load_state_dict", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.load_state_dict"], ["", "@", "register_model", "\n", "def", "gc_vit_xtiny", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "GCViT", "(", "depths", "=", "[", "3", ",", "4", ",", "6", ",", "5", "]", ",", "\n", "num_heads", "=", "[", "2", ",", "4", ",", "8", ",", "16", "]", ",", "\n", "window_size", "=", "[", "7", ",", "7", ",", "14", ",", "7", "]", ",", "\n", "dim", "=", "64", ",", "\n", "mlp_ratio", "=", "3", ",", "\n", "drop_path_rate", "=", "0.2", ",", "\n", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrained", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.gc_vit_tiny": [[499, 511], ["gc_vit.GCViT", "GCViT.load_state_dict", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.load_state_dict"], ["", "@", "register_model", "\n", "def", "gc_vit_tiny", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "GCViT", "(", "depths", "=", "[", "3", ",", "4", ",", "19", ",", "5", "]", ",", "\n", "num_heads", "=", "[", "2", ",", "4", ",", "8", ",", "16", "]", ",", "\n", "window_size", "=", "[", "7", ",", "7", ",", "14", ",", "7", "]", ",", "\n", "dim", "=", "64", ",", "\n", "mlp_ratio", "=", "3", ",", "\n", "drop_path_rate", "=", "0.2", ",", "\n", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrained", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.gc_vit_small": [[513, 526], ["gc_vit.GCViT", "GCViT.load_state_dict", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.load_state_dict"], ["", "@", "register_model", "\n", "def", "gc_vit_small", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "GCViT", "(", "depths", "=", "[", "3", ",", "4", ",", "19", ",", "5", "]", ",", "\n", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "window_size", "=", "[", "7", ",", "7", ",", "14", ",", "7", "]", ",", "\n", "dim", "=", "96", ",", "\n", "mlp_ratio", "=", "2", ",", "\n", "drop_path_rate", "=", "0.3", ",", "\n", "layer_scale", "=", "1e-5", ",", "\n", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrained", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_gcvit.models.gc_vit.gc_vit_base": [[528, 541], ["gc_vit.GCViT", "GCViT.load_state_dict", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.nvlabs_gcvit.scheduler.scheduler.Scheduler.load_state_dict"], ["", "@", "register_model", "\n", "def", "gc_vit_base", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "GCViT", "(", "depths", "=", "[", "3", ",", "4", ",", "19", ",", "5", "]", ",", "\n", "num_heads", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ",", "\n", "window_size", "=", "[", "7", ",", "7", ",", "14", ",", "7", "]", ",", "\n", "dim", "=", "128", ",", "\n", "mlp_ratio", "=", "2", ",", "\n", "drop_path_rate", "=", "0.5", ",", "\n", "layer_scale", "=", "1e-5", ",", "\n", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrained", ")", ")", "\n", "", "return", "model", "\n", "", ""]]}