{"home.repos.pwc.inspect_result.FedML-AI_FedIoT.centralized.ae_cen_glb_test.add_args": [[20, 57], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args"], "function", ["None"], ["def", "add_args", "(", "parser", ")", ":", "\n", "    ", "\"\"\"\n    parser : argparse.ArgumentParser\n    return a parser added with args required by fit\n    \"\"\"", "\n", "# dataset related", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'UCI_MLR'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'dataset used for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "default", "=", "'./../../data/UCI-MLR'", ",", "\n", "help", "=", "'data directory'", ")", "\n", "\n", "# CPU/GPU device related", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cpu'", ",", "\n", "help", "=", "'cpu; gpu'", ")", "\n", "\n", "# model related", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'vae'", ",", "\n", "help", "=", "'model (default: vae): ae, vae'", ")", "\n", "\n", "# optimizer related", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--client_optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ",", "\n", "help", "=", "'SGD with momentum; adam'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.001)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "help", "=", "'weight decay parameter;'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'EP'", ",", "\n", "help", "=", "'how many epochs will be trained'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.centralized.ae_cen_glb_test.load_data": [[59, 128], ["numpy.loadtxt", "numpy.loadtxt", "list", "list", "list", "list", "enumerate", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "pandas.read_csv", "numpy.array", "pandas.concat", "numpy.array", "list.append", "list.append", "list.append", "list.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "os.path.join", "os.path.join", "numpy.isnan", "numpy.isnan", "numpy.isnan", "os.listdir", "os.path.join", "numpy.isnan", "os.path.join", "os.listdir", "pandas.read_csv", "os.path.join"], "function", ["None"], ["", "def", "load_data", "(", "args", ")", ":", "\n", "    ", "device_list", "=", "[", "'Danmini_Doorbell'", ",", "'Ecobee_Thermostat'", ",", "'Ennio_Doorbell'", ",", "'Philips_B120N10_Baby_Monitor'", ",", "\n", "'Provision_PT_737E_Security_Camera'", ",", "'Provision_PT_838_Security_Camera'", ",", "'Samsung_SNH_1011_N_Webcam'", ",", "\n", "'SimpleHome_XCS7_1002_WHT_Security_Camera'", ",", "'SimpleHome_XCS7_1003_WHT_Security_Camera'", "]", "\n", "\n", "min", "=", "np", ".", "loadtxt", "(", "'min.txt'", ")", "\n", "max", "=", "np", ".", "loadtxt", "(", "'max.txt'", ")", "\n", "\n", "benign_train_list", "=", "list", "(", ")", "\n", "benign_test_list", "=", "list", "(", ")", "\n", "benign_th_list", "=", "list", "(", ")", "\n", "attack_test_list", "=", "list", "(", ")", "\n", "\n", "for", "i", ",", "device", "in", "enumerate", "(", "device_list", ")", ":", "\n", "        ", "benign_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "device", ",", "'benign_traffic.csv'", ")", ")", "\n", "benign_data", "=", "np", ".", "array", "(", "benign_data", ")", "\n", "\n", "benign_train", "=", "benign_data", "[", ":", "5000", "]", "\n", "benign_train", "[", "np", ".", "isnan", "(", "benign_train", ")", "]", "=", "0", "\n", "benign_train", "=", "(", "benign_train", "-", "min", ")", "/", "(", "max", "-", "min", ")", "\n", "\n", "benign_th", "=", "benign_data", "[", "5000", ":", "8000", "]", "\n", "benign_th", "[", "np", ".", "isnan", "(", "benign_th", ")", "]", "=", "0", "\n", "benign_th", "=", "(", "benign_th", "-", "min", ")", "/", "(", "max", "-", "min", ")", "\n", "\n", "benign_test", "=", "benign_data", "[", "-", "5000", ":", "]", "\n", "benign_test", "[", "np", ".", "isnan", "(", "benign_test", ")", "]", "=", "0", "\n", "benign_test", "=", "(", "benign_test", "-", "min", ")", "/", "(", "max", "-", "min", ")", "\n", "\n", "g_attack_data_list", "=", "[", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "device", ",", "'gafgyt_attacks'", ",", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "device", ",", "'gafgyt_attacks'", ")", ")", "]", "\n", "if", "device", "==", "'Ennio_Doorbell'", "or", "device", "==", "'Samsung_SNH_1011_N_Webcam'", ":", "\n", "            ", "attack_data_list", "=", "g_attack_data_list", "\n", "benign_test", "=", "benign_test", "[", "-", "2500", ":", "]", "\n", "", "else", ":", "\n", "            ", "m_attack_data_list", "=", "[", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "device", ",", "'mirai_attacks'", ",", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "device", ",", "'mirai_attacks'", ")", ")", "]", "\n", "attack_data_list", "=", "g_attack_data_list", "+", "m_attack_data_list", "\n", "\n", "", "attack_test", "=", "pd", ".", "concat", "(", "[", "pd", ".", "read_csv", "(", "f", ")", "[", "-", "500", ":", "]", "for", "f", "in", "attack_data_list", "]", ")", "\n", "attack_test", "=", "np", ".", "array", "(", "attack_test", ")", "\n", "attack_test", "[", "np", ".", "isnan", "(", "attack_test", ")", "]", "=", "0", "\n", "attack_test", "=", "(", "attack_test", "-", "min", ")", "/", "(", "max", "-", "min", ")", "\n", "\n", "benign_train_list", ".", "append", "(", "benign_train", ")", "\n", "benign_th_list", ".", "append", "(", "benign_th", ")", "\n", "benign_test_list", ".", "append", "(", "benign_test", ")", "\n", "attack_test_list", ".", "append", "(", "attack_test", ")", "\n", "\n", "\n", "# output = open('benign_train.pkl', 'wb')", "\n", "# pickle.dump(np.concatenate(benign_train_list), output)", "\n", "# output.close()", "\n", "# output = open('benign_test.pkl', 'wb')", "\n", "# pickle.dump(np.concatenate(benign_test_list), output)", "\n", "# output.close()", "\n", "# output = open('benign_th.pkl', 'wb')", "\n", "# pickle.dump(np.concatenate(benign_th_list), output)", "\n", "# output.close()", "\n", "# output = open('attack_test.pkl', 'wb')", "\n", "# pickle.dump(np.concatenate(attack_test_list), output)", "\n", "# output.close()", "\n", "\n", "", "benign_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "np", ".", "concatenate", "(", "benign_train_list", ")", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "benign_test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "np", ".", "concatenate", "(", "benign_test_list", ")", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "benign_th_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "np", ".", "concatenate", "(", "benign_th_list", ")", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "attack_test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "np", ".", "concatenate", "(", "attack_test_list", ")", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "\n", "return", "benign_train_loader", ",", "benign_test_loader", ",", "benign_th_loader", ",", "attack_test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.centralized.ae_cen_glb_test.load_from_pkl": [[130, 149], ["open", "pickle.load", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open.close", "open", "pickle.load", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open.close", "open", "pickle.load", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open.close", "open", "pickle.load", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open.close"], "function", ["None"], ["", "def", "load_from_pkl", "(", "args", ")", ":", "\n", "    ", "pkl_file", "=", "open", "(", "'benign_train.pkl'", ",", "'rb'", ")", "\n", "benign_train", "=", "pickle", ".", "load", "(", "pkl_file", ")", "\n", "benign_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "benign_train", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "pkl_file", ".", "close", "(", ")", "\n", "pkl_file", "=", "open", "(", "'benign_test.pkl'", ",", "'rb'", ")", "\n", "benign_test", "=", "pickle", ".", "load", "(", "pkl_file", ")", "\n", "benign_test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "benign_test", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "pkl_file", ".", "close", "(", ")", "\n", "pkl_file", "=", "open", "(", "'benign_th.pkl'", ",", "'rb'", ")", "\n", "benign_th", "=", "pickle", ".", "load", "(", "pkl_file", ")", "\n", "benign_th_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "benign_th", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "pkl_file", ".", "close", "(", ")", "\n", "pkl_file", "=", "open", "(", "'attack_test.pkl'", ",", "'rb'", ")", "\n", "attack_test", "=", "pickle", ".", "load", "(", "pkl_file", ")", "\n", "attack_test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "attack_test", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "pkl_file", ".", "close", "(", ")", "\n", "\n", "return", "benign_train_loader", ",", "benign_test_loader", ",", "benign_th_loader", ",", "attack_test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.centralized.ae_cen_glb_test.create_model": [[150, 154], ["model.ae.AutoEncoder", "logging.info"], "function", ["None"], ["", "def", "create_model", "(", "args", ")", ":", "\n", "    ", "model", "=", "AutoEncoder", "(", ")", "\n", "logging", ".", "info", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.centralized.ae_cen_glb_test.train": [[156, 187], ["model.train", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.MSELoss", "range", "list", "model.eval", "torch.MSELoss", "enumerate", "torch.cat().mean", "torch.cat().mean", "model.parameters", "enumerate", "torch.optim.lr_scheduler.StepLR.step", "logging.info", "nn.MSELoss.", "list.append", "torch.optim.Adam.zero_grad", "inp.to.to", "model", "nn.MSELoss.", "loss_func.backward", "torch.optim.Adam.step", "model", "torch.cat", "torch.cat", "loss_func.item"], "function", ["home.repos.pwc.inspect_result.FedML-AI_FedIoT.training.ae_trainer.AETrainer.train"], ["", "def", "train", "(", "args", ",", "model", ",", "device", ",", "trainloader", ",", "optloader", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "10", ",", "gamma", "=", "0.001", ")", "\n", "loss_func", "=", "nn", ".", "MSELoss", "(", ")", "\n", "#model training", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "# mini- batch loop", "\n", "        ", "epoch_loss", "=", "0.0", "\n", "for", "idx", ",", "inp", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "inp", "=", "inp", ".", "to", "(", "device", ")", "\n", "decode", "=", "model", "(", "inp", ")", "\n", "loss", "=", "loss_func", "(", "decode", ",", "inp", ")", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "/", "args", ".", "batch_size", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "logging", ".", "info", "(", "\"epoch = %d, epoch_loss = %f\"", "%", "(", "epoch", ",", "epoch_loss", ")", ")", "\n", "\n", "#threshold selecting", "\n", "", "mse", "=", "list", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "thres_func", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "\n", "for", "idx", ",", "inp", "in", "enumerate", "(", "optloader", ")", ":", "\n", "        ", "mse_tr", "=", "thres_func", "(", "model", "(", "inp", ")", ",", "inp", ")", "\n", "mse", ".", "append", "(", "mse_tr", ")", "\n", "\n", "", "threshold", "=", "torch", ".", "cat", "(", "mse", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "# logging.info(\"threshold = %d\" % threshold)", "\n", "return", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.centralized.ae_cen_glb_test.test": [[189, 230], ["model.eval", "torch.MSELoss", "enumerate", "enumerate", "print", "print", "print", "print", "print", "print", "print", "print", "print", "inp.to.to", "nn.MSELoss.", "thres_func.mean", "inp.to.to", "nn.MSELoss.", "thres_func.mean", "model", "model"], "function", ["None"], ["", "def", "test", "(", "args", ",", "model", ",", "device", ",", "benignloader", ",", "anloader", ",", "threshold", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "true_negative", "=", "0", "\n", "false_positive", "=", "0", "\n", "true_positive", "=", "0", "\n", "false_negative", "=", "0", "\n", "\n", "thres_func", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "\n", "for", "idx", ",", "inp", "in", "enumerate", "(", "benignloader", ")", ":", "\n", "        ", "inp", "=", "inp", ".", "to", "(", "device", ")", "\n", "diff", "=", "thres_func", "(", "model", "(", "inp", ")", ",", "inp", ")", "\n", "mse", "=", "diff", ".", "mean", "(", "dim", "=", "1", ")", "\n", "false_positive", "+=", "(", "mse", ">", "threshold", ")", ".", "sum", "(", ")", "\n", "true_negative", "+=", "(", "mse", "<=", "threshold", ")", ".", "sum", "(", ")", "\n", "\n", "", "for", "idx", ",", "inp", "in", "enumerate", "(", "anloader", ")", ":", "\n", "        ", "inp", "=", "inp", ".", "to", "(", "device", ")", "\n", "diff", "=", "thres_func", "(", "model", "(", "inp", ")", ",", "inp", ")", "\n", "mse", "=", "diff", ".", "mean", "(", "dim", "=", "1", ")", "\n", "true_positive", "+=", "(", "mse", ">", "threshold", ")", ".", "sum", "(", ")", "\n", "false_negative", "+=", "(", "mse", "<=", "threshold", ")", ".", "sum", "(", ")", "\n", "\n", "", "accuracy", "=", "(", "(", "true_positive", ")", "+", "(", "true_negative", ")", ")", "/", "(", "(", "true_positive", ")", "+", "(", "true_negative", ")", "+", "(", "false_positive", ")", "+", "(", "false_negative", ")", ")", "\n", "precision", "=", "(", "true_positive", ")", "/", "(", "(", "true_positive", ")", "+", "(", "false_positive", ")", ")", "\n", "false_positive_rate", "=", "(", "false_positive", ")", "/", "(", "(", "false_positive", ")", "+", "(", "true_negative", ")", ")", "\n", "tpr", "=", "(", "true_positive", ")", "/", "(", "(", "true_positive", ")", "+", "(", "false_negative", ")", ")", "\n", "tnr", "=", "(", "true_negative", ")", "/", "(", "(", "true_negative", ")", "+", "(", "false_positive", ")", ")", "\n", "\n", "print", "(", "'The True negative number is '", ",", "(", "true_negative", ")", ")", "\n", "print", "(", "'The False positive number is '", ",", "(", "false_positive", ")", ")", "\n", "print", "(", "'The True positive number is '", ",", "(", "true_positive", ")", ")", "\n", "print", "(", "'The False negative number is '", ",", "(", "false_negative", ")", ")", "\n", "\n", "print", "(", "'The accuracy is '", ",", "accuracy", ")", "\n", "print", "(", "'The precision is '", ",", "precision", ")", "\n", "print", "(", "'The false positive rate is '", ",", "false_positive_rate", ")", "\n", "print", "(", "'tpr is '", ",", "tpr", ")", "\n", "print", "(", "'tnr is '", ",", "tnr", ")", "\n", "\n", "return", "accuracy", ",", "precision", ",", "false_positive_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.distributed.fl_test.add_args": [[18, 55], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args"], "function", ["None"], ["def", "add_args", "(", "parser", ")", ":", "\n", "    ", "\"\"\"\n    parser : argparse.ArgumentParser\n    return a parser added with args required by fit\n    \"\"\"", "\n", "# dataset related", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'UCI_MLR'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'dataset used for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "default", "=", "'./../../data/UCI-MLR'", ",", "\n", "help", "=", "'data directory'", ")", "\n", "\n", "# CPU/GPU device related", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "type", "=", "str", ",", "default", "=", "'cpu'", ",", "\n", "help", "=", "'cpu; gpu'", ")", "\n", "\n", "# model related", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'vae'", ",", "\n", "help", "=", "'model (default: vae): ae, vae'", ")", "\n", "\n", "# optimizer related", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--client_optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ",", "\n", "help", "=", "'SGD with momentum; adam'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.001)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "help", "=", "'weight decay parameter;'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "metavar", "=", "'EP'", ",", "\n", "help", "=", "'how many epochs will be trained'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.distributed.fl_test.load_data": [[57, 97], ["dict", "dict", "dict", "numpy.loadtxt", "numpy.loadtxt", "enumerate", "pandas.read_csv", "numpy.array", "pandas.concat", "numpy.array", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.join", "os.path.join", "numpy.isnan", "numpy.isnan", "os.listdir", "os.path.join", "numpy.isnan", "os.path.join", "os.listdir", "pandas.read_csv", "os.path.join"], "function", ["None"], ["", "def", "load_data", "(", "args", ")", ":", "\n", "    ", "device_list", "=", "[", "'Danmini_Doorbell'", ",", "'Ecobee_Thermostat'", ",", "'Ennio_Doorbell'", ",", "'Philips_B120N10_Baby_Monitor'", ",", "\n", "'Provision_PT_737E_Security_Camera'", ",", "'Provision_PT_838_Security_Camera'", ",", "'Samsung_SNH_1011_N_Webcam'", ",", "\n", "'SimpleHome_XCS7_1002_WHT_Security_Camera'", ",", "'SimpleHome_XCS7_1003_WHT_Security_Camera'", "]", "\n", "train_data_local_dict", "=", "dict", "(", ")", "\n", "test_data_local_dict", "=", "dict", "(", ")", "\n", "th_local_dict", "=", "dict", "(", ")", "\n", "min", "=", "np", ".", "loadtxt", "(", "'min.txt'", ")", "\n", "max", "=", "np", ".", "loadtxt", "(", "'max.txt'", ")", "\n", "for", "i", ",", "device", "in", "enumerate", "(", "device_list", ")", ":", "\n", "        ", "benign_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "device", ",", "'benign_traffic.csv'", ")", ")", "\n", "benign_data", "=", "np", ".", "array", "(", "benign_data", ")", "\n", "benign_test", "=", "benign_data", "[", "-", "5000", ":", "]", "\n", "benign_test", "[", "np", ".", "isnan", "(", "benign_test", ")", "]", "=", "0", "\n", "benign_test", "=", "(", "benign_test", "-", "min", ")", "/", "(", "max", "-", "min", ")", "\n", "\n", "benign_th", "=", "benign_data", "[", "5000", ":", "8000", "]", "\n", "benign_th", "[", "np", ".", "isnan", "(", "benign_th", ")", "]", "=", "0", "\n", "benign_th", "=", "(", "benign_th", "-", "min", ")", "/", "(", "max", "-", "min", ")", "\n", "\n", "g_attack_data_list", "=", "[", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "device", ",", "'gafgyt_attacks'", ",", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "device", ",", "'gafgyt_attacks'", ")", ")", "]", "\n", "if", "device", "==", "'Ennio_Doorbell'", "or", "device", "==", "'Samsung_SNH_1011_N_Webcam'", ":", "\n", "            ", "attack_data_list", "=", "g_attack_data_list", "\n", "benign_test", "=", "benign_test", "[", "-", "2500", ":", "]", "\n", "", "else", ":", "\n", "            ", "m_attack_data_list", "=", "[", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "device", ",", "'mirai_attacks'", ",", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "device", ",", "'mirai_attacks'", ")", ")", "]", "\n", "attack_data_list", "=", "g_attack_data_list", "+", "m_attack_data_list", "\n", "\n", "", "attack_data", "=", "pd", ".", "concat", "(", "[", "pd", ".", "read_csv", "(", "f", ")", "[", "-", "500", ":", "]", "for", "f", "in", "attack_data_list", "]", ")", "\n", "attack_data", "=", "np", ".", "array", "(", "attack_data", ")", "\n", "attack_data", "[", "np", ".", "isnan", "(", "attack_data", ")", "]", "=", "0", "\n", "attack_data", "=", "(", "attack_data", "-", "min", ")", "/", "(", "max", "-", "min", ")", "\n", "\n", "train_data_local_dict", "[", "i", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "benign_test", ",", "batch_size", "=", "128", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "test_data_local_dict", "[", "i", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "attack_data", ",", "batch_size", "=", "128", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "th_local_dict", "[", "i", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "benign_th", ",", "batch_size", "=", "128", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "\n", "", "return", "train_data_local_dict", ",", "test_data_local_dict", ",", "th_local_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.distributed.fl_test.create_model": [[99, 105], ["model.ae.AutoEncoder", "os.path.join", "model.ae.AutoEncoder.load_state_dict", "torch.load", "torch.load"], "function", ["None"], ["", "def", "create_model", "(", "args", ")", ":", "\n", "    ", "model", "=", "AutoEncoder", "(", ")", "\n", "model_save_dir", "=", "\"../../training\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "model_save_dir", ",", "'model.ckpt'", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "path", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.distributed.fl_test.draw": [[106, 134], ["model.eval", "list", "list", "torch.MSELoss", "train_data_local_dict.keys", "test_data_local_dict.keys", "matplotlib.pyplot.subplots", "ax.bar", "ax.bar", "matplotlib.pyplot.savefig", "enumerate", "enumerate", "range", "range", "inp.to.to", "nn.MSELoss.", "thres_func.item", "list.append", "inp.to.to", "nn.MSELoss.", "thres_func.item", "list.append", "len", "len", "model", "model"], "function", ["None"], ["", "def", "draw", "(", "args", ",", "model", ",", "device", ",", "train_data_local_dict", ",", "test_data_local_dict", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "mse_benign", "=", "list", "(", ")", "\n", "mse_attack", "=", "list", "(", ")", "\n", "thres_func", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "for", "client_index", "in", "train_data_local_dict", ".", "keys", "(", ")", ":", "\n", "        ", "train_data", "=", "train_data_local_dict", "[", "client_index", "]", "\n", "for", "idx", ",", "inp", "in", "enumerate", "(", "train_data", ")", ":", "\n", "# if idx >= round(len(train_data) * 2 / 3):", "\n", "            ", "inp", "=", "inp", ".", "to", "(", "device", ")", "\n", "diff", "=", "thres_func", "(", "model", "(", "inp", ")", ",", "inp", ")", "\n", "mse", "=", "diff", ".", "item", "(", ")", "\n", "mse_benign", ".", "append", "(", "mse", ")", "\n", "\n", "", "", "for", "client_index", "in", "test_data_local_dict", ".", "keys", "(", ")", ":", "\n", "        ", "test_data", "=", "test_data_local_dict", "[", "client_index", "]", "\n", "for", "idx", ",", "inp", "in", "enumerate", "(", "test_data", ")", ":", "\n", "            ", "inp", "=", "inp", ".", "to", "(", "device", ")", "\n", "diff", "=", "thres_func", "(", "model", "(", "inp", ")", ",", "inp", ")", "\n", "mse", "=", "diff", ".", "item", "(", ")", "\n", "mse_attack", ".", "append", "(", "mse", ")", "\n", "\n", "", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "bar", "(", "range", "(", "len", "(", "mse_benign", ")", ")", ",", "mse_benign", ")", "\n", "ax", ".", "bar", "(", "range", "(", "len", "(", "mse_attack", ")", ")", ",", "mse_attack", ")", "\n", "plt", ".", "savefig", "(", "\"out.png\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.distributed.fl_test.test": [[136, 184], ["model.eval", "torch.MSELoss", "train_data_local_dict.keys", "test_data_local_dict.keys", "print", "print", "print", "print", "print", "print", "print", "print", "print", "enumerate", "enumerate", "inp.to.to", "nn.MSELoss.", "thres_func.mean", "inp.to.to", "nn.MSELoss.", "thres_func.mean", "model", "model"], "function", ["None"], ["", "def", "test", "(", "args", ",", "model", ",", "device", ",", "train_data_local_dict", ",", "test_data_local_dict", ",", "threshold", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "true_negative", "=", "0", "\n", "false_positive", "=", "0", "\n", "true_positive", "=", "0", "\n", "false_negative", "=", "0", "\n", "\n", "thres_func", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "for", "client_index", "in", "train_data_local_dict", ".", "keys", "(", ")", ":", "\n", "        ", "train_data", "=", "train_data_local_dict", "[", "client_index", "]", "\n", "for", "idx", ",", "inp", "in", "enumerate", "(", "train_data", ")", ":", "\n", "# if idx >= round(len(train_data) * 2 / 3):", "\n", "                ", "inp", "=", "inp", ".", "to", "(", "device", ")", "\n", "diff", "=", "thres_func", "(", "model", "(", "inp", ")", ",", "inp", ")", "\n", "mse", "=", "diff", ".", "mean", "(", "dim", "=", "1", ")", "\n", "false_positive", "+=", "(", "mse", ">", "threshold", ")", ".", "sum", "(", ")", "\n", "true_negative", "+=", "(", "mse", "<=", "threshold", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "for", "client_index", "in", "test_data_local_dict", ".", "keys", "(", ")", ":", "\n", "        ", "test_data", "=", "test_data_local_dict", "[", "client_index", "]", "\n", "for", "idx", ",", "inp", "in", "enumerate", "(", "test_data", ")", ":", "\n", "            ", "inp", "=", "inp", ".", "to", "(", "device", ")", "\n", "diff", "=", "thres_func", "(", "model", "(", "inp", ")", ",", "inp", ")", "\n", "mse", "=", "diff", ".", "mean", "(", "dim", "=", "1", ")", "\n", "true_positive", "+=", "(", "mse", ">", "threshold", ")", ".", "sum", "(", ")", "\n", "false_negative", "+=", "(", "mse", "<=", "threshold", ")", ".", "sum", "(", ")", "\n", "\n", "\n", "", "", "accuracy", "=", "(", "(", "true_positive", ")", "+", "(", "true_negative", ")", ")", "/", "(", "(", "true_positive", ")", "+", "(", "true_negative", ")", "+", "(", "false_positive", ")", "+", "(", "false_negative", ")", ")", "\n", "precision", "=", "(", "true_positive", ")", "/", "(", "(", "true_positive", ")", "+", "(", "false_positive", ")", ")", "\n", "false_positive_rate", "=", "(", "false_positive", ")", "/", "(", "(", "false_positive", ")", "+", "(", "true_negative", ")", ")", "\n", "tpr", "=", "(", "true_positive", ")", "/", "(", "(", "true_positive", ")", "+", "(", "false_negative", ")", ")", "\n", "tnr", "=", "(", "true_negative", ")", "/", "(", "(", "true_negative", ")", "+", "(", "false_positive", ")", ")", "\n", "\n", "print", "(", "'The True negative number is '", ",", "(", "true_negative", ")", ")", "\n", "print", "(", "'The False positive number is '", ",", "(", "false_positive", ")", ")", "\n", "print", "(", "'The True positive number is '", ",", "(", "true_positive", ")", ")", "\n", "print", "(", "'The False negative number is '", ",", "(", "false_negative", ")", ")", "\n", "\n", "print", "(", "'The accuracy is '", ",", "accuracy", ")", "\n", "print", "(", "'The precision is '", ",", "precision", ")", "\n", "print", "(", "'The false positive rate is '", ",", "false_positive_rate", ")", "\n", "print", "(", "'tpr is '", ",", "tpr", ")", "\n", "print", "(", "'tnr is '", ",", "tnr", ")", "\n", "\n", "return", "accuracy", ",", "precision", ",", "false_positive_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.distributed.main_uci_vae.add_args": [[27, 100], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args"], "function", ["None"], ["def", "add_args", "(", "parser", ")", ":", "\n", "    ", "\"\"\"\n    parser : argparse.ArgumentParser\n    return a parser added with args required by fit\n    \"\"\"", "\n", "# Training settings", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'vae'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'neural network used in training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'UCI-MIR'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'dataset used for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "default", "=", "'./../../data/UCI-MLR'", ",", "\n", "help", "=", "'data directory'", ")", "\n", "\n", "# parser.add_argument('--partition_method', type=str, default='hetero', metavar='N',", "\n", "#                     help='how to partition the dataset on local workers')", "\n", "#", "\n", "# parser.add_argument('--partition_alpha', type=float, default=0.5, metavar='PA',", "\n", "#                     help='partition alpha (default: 0.5)')", "\n", "\n", "parser", ".", "add_argument", "(", "'--client_num_in_total'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "metavar", "=", "'NN'", ",", "\n", "help", "=", "'number of workers in a distributed cluster'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--client_num_per_round'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "metavar", "=", "'NN'", ",", "\n", "help", "=", "'number of workers'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--client_optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ",", "\n", "help", "=", "'SGD with momentum; adam'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--backend'", ",", "type", "=", "str", ",", "default", "=", "\"MPI\"", ",", "\n", "help", "=", "'Backend for Server and Client'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.0001)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "help", "=", "'weight decay parameter;'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "120", ",", "metavar", "=", "'EP'", ",", "\n", "help", "=", "'how many epochs will be trained locally'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--comm_round'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "\n", "help", "=", "'how many round of communications we shoud use'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--is_mobile'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'whether the program is running on the FedML-Mobile server side'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--frequency_of_the_test'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'the frequency of the algorithms'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_server_num'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'gpu_server_num'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_num_per_server'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'gpu_num_per_server'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_mapping_file'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'the gpu utilization file for servers and clients. If there is no \\\n                        gpu_util_file, gpu will not be used.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_mapping_key'", ",", "type", "=", "str", ",", "default", "=", "\"mapping_default\"", ",", "\n", "help", "=", "'the key in gpu utilization file'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--grpc_ipconfig_path'", ",", "type", "=", "str", ",", "default", "=", "\"grpc_ipconfig.csv\"", ",", "\n", "help", "=", "'config table containing ipv4 address of grpc server'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--ci'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'CI'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.distributed.main_uci_vae.load_data": [[102, 110], ["data_preprocessing.fl_dataloader.local_dataloader"], "function", ["home.repos.pwc.inspect_result.FedML-AI_FedIoT.data_preprocessing.fl_dataloader.local_dataloader"], ["", "def", "load_data", "(", "args", ")", ":", "\n", "    ", "train_data_num", ",", "test_data_num", ",", "train_data_global", ",", "test_data_global", ",", "train_data_local_num_dict", ",", "train_data_local_dict", ",", "test_data_local_dict", "=", "local_dataloader", "(", "args", ")", "\n", "dataset", "=", "[", "train_data_num", ",", "test_data_num", ",", "train_data_global", ",", "test_data_global", ",", "\n", "train_data_local_num_dict", ",", "train_data_local_dict", ",", "test_data_local_dict", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.distributed.main_uci_vae.create_model": [[112, 116], ["model.ae.AutoEncoder", "logging.info"], "function", ["None"], ["", "def", "create_model", "(", "device", ")", ":", "\n", "    ", "model", "=", "AutoEncoder", "(", ")", "\n", "logging", ".", "info", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.Resberry_Pi.main_uci_rp.add_args": [[34, 114], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args"], "function", ["None"], ["def", "add_args", "(", "parser", ")", ":", "\n", "    ", "\"\"\"\n    parser : argparse.ArgumentParser\n    return a parser added with args required by fit\n    \"\"\"", "\n", "# Training settings", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'vae'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'neural network used in training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'UCI-MIR'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'dataset used for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "default", "=", "'./../../data/UCI-MLR'", ",", "\n", "help", "=", "'data directory'", ")", "\n", "\n", "# parser.add_argument('--partition_method', type=str, default='hetero', metavar='N',", "\n", "#                     help='how to partition the dataset on local workers')", "\n", "#", "\n", "# parser.add_argument('--partition_alpha', type=float, default=0.5, metavar='PA',", "\n", "#                     help='partition alpha (default: 0.5)')", "\n", "\n", "parser", ".", "add_argument", "(", "'--client_num_in_total'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "metavar", "=", "'NN'", ",", "\n", "help", "=", "'number of workers in a distributed cluster'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--client_num_per_round'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'NN'", ",", "\n", "help", "=", "'number of workers'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--client_optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ",", "\n", "help", "=", "'SGD with momentum; adam'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--backend'", ",", "type", "=", "str", ",", "default", "=", "\"MPI\"", ",", "\n", "help", "=", "'Backend for Server and Client'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.0001)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "help", "=", "'weight decay parameter;'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'EP'", ",", "\n", "help", "=", "'how many epochs will be trained locally'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--comm_round'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'how many round of communications we shoud use'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--is_mobile'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'whether the program is running on the FedML-Mobile server side'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--frequency_of_the_test'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'the frequency of the algorithms'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_server_num'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'gpu_server_num'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_num_per_server'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'gpu_num_per_server'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_mapping_file'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'the gpu utilization file for servers and clients. If there is no \\\n                        gpu_util_file, gpu will not be used.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_mapping_key'", ",", "type", "=", "str", ",", "default", "=", "\"mapping_default\"", ",", "\n", "help", "=", "'the key in gpu utilization file'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--grpc_ipconfig_path'", ",", "type", "=", "str", ",", "default", "=", "\"grpc_ipconfig.csv\"", ",", "\n", "help", "=", "'config table containing ipv4 address of grpc server'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--ci'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'CI'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--server_ip'", ",", "type", "=", "str", ",", "default", "=", "\"http://192.168.3.86:5000\"", ",", "\n", "help", "=", "'IP address of the FedML server'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--client_uuid'", ",", "type", "=", "str", ",", "default", "=", "\"0\"", ",", "\n", "help", "=", "'number of workers in a distributed cluster'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.Resberry_Pi.main_uci_rp.register": [[115, 148], ["requests.post", "requests.post.json", "Args"], "function", ["None"], ["", "def", "register", "(", "args", ",", "uuid", ")", ":", "\n", "    ", "str_device_UUID", "=", "uuid", "\n", "URL", "=", "args", ".", "server_ip", "+", "\"/api/register\"", "\n", "\n", "# defining a params dict for the parameters to be sent to the API", "\n", "PARAMS", "=", "{", "'device_id'", ":", "str_device_UUID", "}", "\n", "\n", "# sending get request and saving the response as response object", "\n", "r", "=", "requests", ".", "post", "(", "url", "=", "URL", ",", "params", "=", "PARAMS", ")", "\n", "result", "=", "r", ".", "json", "(", ")", "\n", "client_ID", "=", "result", "[", "'client_id'", "]", "\n", "# executorId = result['executorId']", "\n", "# executorTopic = result['executorTopic']", "\n", "training_task_args", "=", "result", "[", "'training_task_args'", "]", "\n", "\n", "class", "Args", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "dataset", "=", "training_task_args", "[", "'dataset'", "]", "\n", "self", ".", "data_dir", "=", "training_task_args", "[", "'data_dir'", "]", "\n", "self", ".", "partition_method", "=", "training_task_args", "[", "'partition_method'", "]", "\n", "self", ".", "partition_alpha", "=", "training_task_args", "[", "'partition_alpha'", "]", "\n", "self", ".", "model", "=", "training_task_args", "[", "'model'", "]", "\n", "self", ".", "client_num_per_round", "=", "training_task_args", "[", "'client_num_per_round'", "]", "\n", "self", ".", "comm_round", "=", "training_task_args", "[", "'comm_round'", "]", "\n", "self", ".", "epochs", "=", "training_task_args", "[", "'epochs'", "]", "\n", "self", ".", "lr", "=", "training_task_args", "[", "'lr'", "]", "\n", "self", ".", "wd", "=", "training_task_args", "[", "'wd'", "]", "\n", "self", ".", "batch_size", "=", "training_task_args", "[", "'batch_size'", "]", "\n", "self", ".", "frequency_of_the_test", "=", "training_task_args", "[", "'frequency_of_the_test'", "]", "\n", "self", ".", "is_mobile", "=", "training_task_args", "[", "'is_mobile'", "]", "\n", "\n", "", "", "args", "=", "Args", "(", ")", "\n", "return", "client_ID", ",", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.Resberry_Pi.main_uci_rp.init_training_device": [[149, 163], ["dict", "range", "logging.info", "torch.device", "logging.info", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "str"], "function", ["None"], ["", "def", "init_training_device", "(", "process_ID", ",", "fl_worker_num", ",", "gpu_num_per_machine", ")", ":", "\n", "# initialize the mapping from process ID to GPU ID: <process ID, GPU ID>", "\n", "    ", "if", "process_ID", "==", "0", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "return", "device", "\n", "", "process_gpu_dict", "=", "dict", "(", ")", "\n", "for", "client_index", "in", "range", "(", "fl_worker_num", ")", ":", "\n", "        ", "gpu_index", "=", "client_index", "%", "gpu_num_per_machine", "\n", "process_gpu_dict", "[", "client_index", "]", "=", "gpu_index", "\n", "\n", "", "logging", ".", "info", "(", "process_gpu_dict", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "str", "(", "process_gpu_dict", "[", "process_ID", "-", "1", "]", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "logging", ".", "info", "(", "device", ")", "\n", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.Resberry_Pi.main_uci_rp.load_data": [[164, 175], ["logging.info", "logging.info", "data_preprocessing.fl_dataloader.local_dataloader"], "function", ["home.repos.pwc.inspect_result.FedML-AI_FedIoT.data_preprocessing.fl_dataloader.local_dataloader"], ["", "def", "load_data", "(", "args", ",", "train_file_name", ",", "test_file_name", ")", ":", "\n", "\n", "    ", "logging", ".", "info", "(", "\"load_train_data. dataset_name = %s\"", "%", "train_file_name", ")", "\n", "logging", ".", "info", "(", "\"load_test_data. dataset_name = %s\"", "%", "test_file_name", ")", "\n", "train_data_num", ",", "test_data_num", ",", "train_data_global", ",", "test_data_global", ",", "train_data_local_num_dict", ",", "train_data_local_dict", ",", "test_data_local_dict", "=", "local_dataloader", "(", "args", ",", "train_file_name", ",", "test_file_name", ",", "1", ")", "\n", "dataset", "=", "[", "train_data_num", ",", "test_data_num", ",", "train_data_global", ",", "test_data_global", ",", "\n", "train_data_local_num_dict", ",", "train_data_local_dict", ",", "test_data_local_dict", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.Resberry_Pi.main_uci_rp.create_model": [[177, 181], ["model.ae.AutoEncoder", "logging.info"], "function", ["None"], ["", "def", "create_model", "(", "device", ")", ":", "\n", "    ", "model", "=", "AutoEncoder", "(", ")", "\n", "logging", ".", "info", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.Resberry_Pi.app.add_args": [[31, 97], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args"], "function", ["None"], ["def", "add_args", "(", "parser", ")", ":", "\n", "    ", "\"\"\"\n    parser : argparse.ArgumentParser\n    return a parser added with args required by fit\n    \"\"\"", "\n", "# Training settings", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'lr'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'neural network used in training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'mnist'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'dataset used for training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "default", "=", "'./../../data/UCI-MLR'", ",", "\n", "help", "=", "'data directory'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--partition_method'", ",", "type", "=", "str", ",", "default", "=", "'hetero'", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how to partition the dataset on local workers'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--partition_alpha'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'PA'", ",", "\n", "help", "=", "'partition alpha (default: 0.5)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--client_num_in_total'", ",", "type", "=", "int", ",", "default", "=", "9", ",", "metavar", "=", "'NN'", ",", "\n", "help", "=", "'number of workers in a distributed cluster'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--client_num_per_round'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'NN'", ",", "\n", "help", "=", "'number of workers'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--client_optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ",", "\n", "help", "=", "'SGD with momentum; adam'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.001)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "help", "=", "'weight decay parameter;'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'EP'", ",", "\n", "help", "=", "'how many epochs will be trained locally'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--comm_round'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'how many round of communications we shoud use'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--is_mobile'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'whether the program is running on the FedML-Mobile server side'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--frequency_of_the_test'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'the frequency of the algorithms'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_server_num'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'gpu_server_num'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpu_num_per_server'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'gpu_num_per_server'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--ci'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'continuous integration'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--is_preprocessed'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'True if data has been preprocessed'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--grpc_ipconfig_path'", ",", "type", "=", "str", ",", "default", "=", "\"../executor/grpc_ipconfig.csv\"", ",", "\n", "help", "=", "'config table containing ipv4 address of grpc server'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.Resberry_Pi.app.index": [[110, 113], ["app.route"], "function", ["None"], ["@", "app", ".", "route", "(", "'/'", ",", "methods", "=", "[", "'GET'", "]", ")", "\n", "def", "index", "(", ")", ":", "\n", "    ", "return", "'backend service for Fed_mobile'", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.Resberry_Pi.app.get_preprocessed_data": [[115, 126], ["app.route", "flask.send_from_directory", "args.dataset.upper", "flask.abort"], "function", ["None"], ["", "@", "app", ".", "route", "(", "'/get-preprocessed-data/<dataset_name>'", ",", "methods", "=", "[", "'GET'", "]", ")", "\n", "def", "get_preprocessed_data", "(", "dataset_name", ")", ":", "\n", "    ", "directory", "=", "app", ".", "config", "[", "'MOBILE_PREPROCESSED_DATASETS'", "]", "+", "args", ".", "dataset", ".", "upper", "(", ")", "+", "'_mobile_zip/'", "\n", "try", ":", "\n", "        ", "return", "send_from_directory", "(", "\n", "directory", ",", "\n", "filename", "=", "dataset_name", "+", "'.zip'", ",", "\n", "as_attachment", "=", "True", ")", "\n", "\n", "", "except", "FileNotFoundError", ":", "\n", "        ", "abort", "(", "404", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.Resberry_Pi.app.register_device": [[128, 165], ["app.route", "len", "flask.jsonify"], "function", ["None"], ["", "", "@", "app", ".", "route", "(", "'/api/register'", ",", "methods", "=", "[", "'POST'", "]", ")", "\n", "def", "register_device", "(", ")", ":", "\n", "    ", "global", "device_id_to_client_id_dict", "\n", "# __log.info(\"register_device()\")", "\n", "device_id", "=", "request", ".", "args", "[", "'device_id'", "]", "\n", "registered_client_num", "=", "len", "(", "device_id_to_client_id_dict", ")", "\n", "if", "device_id", "in", "device_id_to_client_id_dict", ":", "\n", "        ", "client_id", "=", "device_id_to_client_id_dict", "[", "device_id", "]", "\n", "", "else", ":", "\n", "        ", "client_id", "=", "registered_client_num", "+", "1", "\n", "device_id_to_client_id_dict", "[", "device_id", "]", "=", "client_id", "\n", "\n", "", "training_task_args", "=", "{", "\"dataset\"", ":", "args", ".", "dataset", ",", "\n", "\"data_dir\"", ":", "args", ".", "data_dir", ",", "\n", "\"partition_method\"", ":", "args", ".", "partition_method", ",", "\n", "\"partition_alpha\"", ":", "args", ".", "partition_alpha", ",", "\n", "\"model\"", ":", "args", ".", "model", ",", "\n", "\"client_num_per_round\"", ":", "args", ".", "client_num_per_round", ",", "\n", "\"comm_round\"", ":", "args", ".", "comm_round", ",", "\n", "\"epochs\"", ":", "args", ".", "epochs", ",", "\n", "\"lr\"", ":", "args", ".", "lr", ",", "\n", "\"wd\"", ":", "args", ".", "wd", ",", "\n", "\"batch_size\"", ":", "args", ".", "batch_size", ",", "\n", "\"frequency_of_the_test\"", ":", "args", ".", "frequency_of_the_test", ",", "\n", "\"is_mobile\"", ":", "args", ".", "is_mobile", ",", "\n", "'dataset_url'", ":", "'{}/get-preprocessed-data/{}'", ".", "format", "(", "\n", "request", ".", "url_root", ",", "\n", "client_id", "-", "1", "\n", ")", ",", "\n", "'is_preprocessed'", ":", "args", ".", "is_preprocessed", ",", "\n", "'grpc_ipconfig_path'", ":", "args", ".", "grpc_ipconfig_path", "}", "\n", "\n", "return", "jsonify", "(", "{", "\"errno\"", ":", "0", ",", "\n", "\"executorId\"", ":", "\"executorId\"", ",", "\n", "\"executorTopic\"", ":", "\"executorTopic\"", ",", "\n", "\"client_id\"", ":", "client_id", ",", "\n", "\"training_task_args\"", ":", "training_task_args", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.Resberry_Pi.app.load_data": [[166, 177], ["logging.info", "logging.info", "data_preprocessing.fl_dataloader.local_dataloader"], "function", ["home.repos.pwc.inspect_result.FedML-AI_FedIoT.data_preprocessing.fl_dataloader.local_dataloader"], ["", "def", "load_data", "(", "args", ",", "train_file_name", ",", "test_file_name", ")", ":", "\n", "\n", "    ", "logging", ".", "info", "(", "\"load_train_data. dataset_name = %s\"", "%", "train_file_name", ")", "\n", "logging", ".", "info", "(", "\"load_test_data. dataset_name = %s\"", "%", "test_file_name", ")", "\n", "train_data_num", ",", "test_data_num", ",", "train_data_global", ",", "test_data_global", ",", "train_data_local_num_dict", ",", "train_data_local_dict", ",", "test_data_local_dict", "=", "local_dataloader", "(", "args", ",", "train_file_name", ",", "test_file_name", ",", "1", ")", "\n", "dataset", "=", "[", "train_data_num", ",", "test_data_num", ",", "train_data_global", ",", "test_data_global", ",", "\n", "train_data_local_num_dict", ",", "train_data_local_dict", ",", "test_data_local_dict", "]", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.Resberry_Pi.app.create_model": [[178, 182], ["model.ae.AutoEncoder", "logging.info"], "function", ["None"], ["", "def", "create_model", "(", "device", ")", ":", "\n", "    ", "model", "=", "AutoEncoder", "(", ")", "\n", "logging", ".", "info", "(", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.model.ae.AutoEncoder.__init__": [[5, 31], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Tanh", "torch.Linear", "torch.Tanh", "torch.Linear", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Linear", "torch.Tanh", "torch.Linear", "torch.Tanh", "torch.Linear", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round", "round"], "methods", ["home.repos.pwc.inspect_result.FedML-AI_FedIoT.model.ae.AutoEncoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AutoEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "enc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "115", ",", "round", "(", "115", "*", "0.75", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "#nn.Dropout(p = 0.1),", "\n", "nn", ".", "Linear", "(", "round", "(", "115", "*", "0.75", ")", ",", "round", "(", "115", "*", "0.50", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "#nn.Dropout(p = 0.1),", "\n", "nn", ".", "Linear", "(", "round", "(", "115", "*", "0.50", ")", ",", "round", "(", "115", "*", "0.33", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "#nn.Dropout(p = 0.1),", "\n", "nn", ".", "Linear", "(", "round", "(", "115", "*", "0.33", ")", ",", "round", "(", "115", "*", "0.25", ")", ")", ",", "\n", "\n", ")", "\n", "self", ".", "dec", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "round", "(", "115", "*", "0.25", ")", ",", "round", "(", "115", "*", "0.33", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "#nn.Dropout(p = 0.1),", "\n", "nn", ".", "Linear", "(", "round", "(", "115", "*", "0.33", ")", ",", "round", "(", "115", "*", "0.50", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "#nn.Dropout(p = 0.1),", "\n", "nn", ".", "Linear", "(", "round", "(", "115", "*", "0.50", ")", ",", "round", "(", "115", "*", "0.75", ")", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "#nn.Dropout(p = 0.1),", "\n", "nn", ".", "Linear", "(", "round", "(", "115", "*", "0.75", ")", ",", "115", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.model.ae.AutoEncoder.forward": [[33, 37], ["ae.AutoEncoder.enc", "ae.AutoEncoder.dec"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encode", "=", "self", ".", "enc", "(", "x", ")", "\n", "decode", "=", "self", ".", "dec", "(", "encode", ")", "\n", "return", "decode", "\n", "", "", ""]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.training.ae_trainer.AETrainer.get_model_params": [[15, 17], ["ae_trainer.AETrainer.model.cpu().state_dict", "ae_trainer.AETrainer.model.cpu"], "methods", ["None"], ["    ", "def", "get_model_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.training.ae_trainer.AETrainer.set_model_params": [[18, 20], ["ae_trainer.AETrainer.model.load_state_dict"], "methods", ["None"], ["", "def", "set_model_params", "(", "self", ",", "model_parameters", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "model_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.training.ae_trainer.AETrainer.train": [[21, 41], ["logging.info", "ae_trainer.AETrainer.model.to", "ae_trainer.AETrainer.train", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "range", "ae_trainer.AETrainer.parameters", "enumerate", "inp.to.to.to", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "ae_trainer.AETrainer.", "torch.nn.MSELoss.", "torch.nn.MSELoss.", "torch.nn.MSELoss.backward", "torch.optim.Adam.step", "torch.optim.Adam.step"], "methods", ["home.repos.pwc.inspect_result.FedML-AI_FedIoT.training.ae_trainer.AETrainer.train"], ["", "def", "train", "(", "self", ",", "train_data", ",", "device", ",", "args", ")", ":", "\n", "        ", "logging", ".", "info", "(", "device", ")", "\n", "model", "=", "self", ".", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "loss_func", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "# model training", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "\n", "# mini- batch loop", "\n", "            ", "epoch_loss", "=", "0.0", "\n", "for", "idx", ",", "inp", "in", "enumerate", "(", "train_data", ")", ":", "\n", "# if idx < round(len(train_data) * 2 / 3):", "\n", "                    ", "inp", "=", "inp", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "decode", "=", "model", "(", "inp", ")", "\n", "loss", "=", "loss_func", "(", "decode", ",", "inp", ")", "\n", "# epoch_loss += loss.item() / args.batch_size", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "# logging.info('Epoch training complete')", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.training.ae_trainer.AETrainer.test": [[43, 45], ["None"], "methods", ["None"], ["", "", "", "def", "test", "(", "self", ",", "test_data", ",", "device", ",", "args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.training.ae_trainer.AETrainer.test_local": [[46, 94], ["ae_trainer.AETrainer.model.to", "ae_trainer.AETrainer.model.eval", "torch.MSELoss", "torch.MSELoss", "enumerate", "enumerate", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "inp.to.to.to", "torch.MSELoss.", "nn.MSELoss.item", "len", "len", "round", "inp.to.to.to", "torch.MSELoss.", "nn.MSELoss.item", "ae_trainer.AETrainer.", "true_positive.append", "false_negative.append", "len", "len", "len", "len", "len", "len", "len", "ae_trainer.AETrainer.", "false_positive.append", "true_negative.append", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "test_local", "(", "self", ",", "client_index", ",", "threshold", ",", "train_data", ",", "test_data", ",", "device", ",", "args", ")", ":", "\n", "# pass", "\n", "        ", "model", "=", "self", ".", "model", ".", "to", "(", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "true_negative", "=", "[", "]", "\n", "false_positive", "=", "[", "]", "\n", "true_positive", "=", "[", "]", "\n", "false_negative", "=", "[", "]", "\n", "thres_func", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "for", "idx", ",", "inp", "in", "enumerate", "(", "train_data", ")", ":", "\n", "            ", "if", "idx", ">=", "round", "(", "len", "(", "train_data", ")", "*", "2", "/", "3", ")", ":", "\n", "                ", "inp", "=", "inp", ".", "to", "(", "device", ")", "\n", "diff", "=", "thres_func", "(", "model", "(", "inp", ")", ",", "inp", ")", "\n", "mse", "=", "diff", ".", "item", "(", ")", "\n", "if", "mse", ">", "threshold", ":", "\n", "                    ", "false_positive", ".", "append", "(", "idx", ")", "\n", "", "else", ":", "\n", "                    ", "true_negative", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "", "for", "idx", ",", "inp", "in", "enumerate", "(", "test_data", ")", ":", "\n", "            ", "inp", "=", "inp", ".", "to", "(", "device", ")", "\n", "diff", "=", "thres_func", "(", "model", "(", "inp", ")", ",", "inp", ")", "\n", "mse", "=", "diff", ".", "item", "(", ")", "\n", "if", "mse", ">", "threshold", ":", "\n", "                ", "true_positive", ".", "append", "(", "idx", ")", "\n", "", "else", ":", "\n", "                ", "false_negative", ".", "append", "(", "idx", ")", "\n", "\n", "# print(len(true_positive))", "\n", "# print(len(false_positive))", "\n", "\n", "", "", "accuracy", "=", "(", "len", "(", "true_positive", ")", "+", "len", "(", "true_negative", ")", ")", "/", "(", "len", "(", "true_positive", ")", "+", "len", "(", "true_negative", ")", "+", "len", "(", "false_positive", ")", "+", "len", "(", "false_negative", ")", ")", "\n", "precision", "=", "len", "(", "true_positive", ")", "/", "(", "len", "(", "true_positive", ")", "+", "len", "(", "false_positive", ")", ")", "\n", "false_positive_rate", "=", "len", "(", "false_positive", ")", "/", "(", "len", "(", "false_positive", ")", "+", "len", "(", "true_negative", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'client_index = %d, The threshold is %f'", "%", "(", "client_index", ",", "threshold", ")", ")", "\n", "logging", ".", "info", "(", "'client_index = %d, The True negative number is %f'", "%", "(", "client_index", ",", "len", "(", "true_negative", ")", ")", ")", "\n", "logging", ".", "info", "(", "'client_index = %d, The False positive number is %f'", "%", "(", "client_index", ",", "len", "(", "false_positive", ")", ")", ")", "\n", "logging", ".", "info", "(", "'client_index = %d, The True positive number is %f'", "%", "(", "client_index", ",", "len", "(", "true_positive", ")", ")", ")", "\n", "logging", ".", "info", "(", "'client_index = %d, The False negative number is %f'", "%", "(", "client_index", ",", "len", "(", "false_negative", ")", ")", ")", "\n", "logging", ".", "info", "(", "'client_index = %d, The accuracy is %f'", "%", "(", "client_index", ",", "accuracy", ")", ")", "\n", "logging", ".", "info", "(", "'client_index = %d, The precision is %f'", "%", "(", "client_index", ",", "precision", ")", ")", "\n", "logging", ".", "info", "(", "'client_index = %d, The false positive rate is %f'", "%", "(", "client_index", ",", "false_positive_rate", ")", ")", "\n", "\n", "return", "accuracy", ",", "precision", ",", "false_positive_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.training.ae_trainer.AETrainer.test_on_the_server": [[95, 152], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "ae_trainer.AETrainer.model.state_dict"], "methods", ["None"], ["", "def", "test_on_the_server", "(", "self", ",", "train_data_local_dict", ",", "test_data_local_dict", ",", "device", ",", "args", "=", "None", ")", ":", "\n", "# logging.info(device)", "\n", "# mse_results_global = []", "\n", "# threshold_dict = {}", "\n", "# thres_func = nn.MSELoss()", "\n", "# #", "\n", "# # opt_threshold = [round(4955.0 * 0.67 / args.batch_size), round(1311.0 * 0.67 / args.batch_size),", "\n", "# #                  round(3910.0 * 0.67 / args.batch_size), round(17524.0 * 0.67 / args.batch_size),", "\n", "# #                  round(6215.0 * 0.67 / args.batch_size), round(9851.0 * 0.67 / args.batch_size),", "\n", "# #                  round(5215.0 * 0.67 / args.batch_size), round(4658.0 * 0.67 / args.batch_size),", "\n", "# #                  round(1953.0 * 0.67 / args.batch_size)]", "\n", "# #", "\n", "# # test_threshold = 1000", "\n", "#", "\n", "# for client_index in train_data_local_dict.keys():", "\n", "#     opt_data = train_data_local_dict[client_index]", "\n", "#     mse_results_per_client = []", "\n", "#     self.model.eval()", "\n", "#     for idx, inp in enumerate(opt_data):", "\n", "#         if idx >= round(len(opt_data) * 2 / 3):", "\n", "#             inp = inp.to(device)", "\n", "#             decode = self.model(inp)", "\n", "#             diff = thres_func(decode, inp)", "\n", "#             mse = diff.item()", "\n", "#             mse_results_per_client.append(mse)", "\n", "#             mse_results_global.append(mse)", "\n", "#     mse_results_per_client = torch.tensor(mse_results_per_client)", "\n", "#     threshold_dict[client_index] = torch.mean(mse_results_per_client) + 1 * torch.std(mse_results_per_client) / np.sqrt(", "\n", "#     args.batch_size)", "\n", "#", "\n", "# # threshold_path = os.path.join(\"/Users/ultraz/PycharmProjects/FedML-IoT-V/experiments/distributed\", 'threshold_dict.pkl')", "\n", "# # joblib.dump(threshold_dict, threshold_path)", "\n", "#", "\n", "#", "\n", "# mse_results_global = torch.tensor(mse_results_global)", "\n", "# threshold_global =torch.mean(mse_results_global) + 1 * torch.std(mse_results_global)/ np.sqrt(args.batch_size)", "\n", "# logging.info('The threshold is %f' % (threshold_global))", "\n", "#", "\n", "# accuracy_array_global = []", "\n", "# precision_array_global = []", "\n", "# fpr_array_global = []", "\n", "#", "\n", "# for client_index in test_data_local_dict.keys():", "\n", "#     test_data = test_data_local_dict[client_index]", "\n", "#     # using global threshold for test", "\n", "#     # [accuracy_client, precision_client, fpr_client] = self.test_local(client_index,", "\n", "#     #                                                                   (test_threshold[client_index] / 2), threshold_global, test_data, device, args)", "\n", "#     [accuracy_client, precision_client, fpr_client] = self.test_local(client_index, threshold_global, train_data_local_dict[client_index], test_data, device, args)", "\n", "#     accuracy_array_global.append(accuracy_client)", "\n", "#     precision_array_global.append(precision_client)", "\n", "#     fpr_array_global.append(fpr_client)", "\n", "\n", "        ", "model_save_dir", "=", "\"../../training\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "model_save_dir", ",", "'model.ckpt'", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "path", ")", "\n", "\n", "return", "True", "", "", "", ""]], "home.repos.pwc.inspect_result.FedML-AI_FedIoT.data_preprocessing.fl_dataloader.local_dataloader": [[13, 52], ["list", "list", "dict", "dict", "dict", "numpy.loadtxt", "numpy.loadtxt", "enumerate", "pandas.read_csv", "numpy.array", "torch.utils.data.DataLoader", "os.path.join", "round", "numpy.isnan", "len"], "function", ["None"], ["def", "local_dataloader", "(", "args", ")", ":", "\n", "    ", "device_list", "=", "[", "'Danmini_Doorbell'", ",", "'Ecobee_Thermostat'", ",", "'Ennio_Doorbell'", ",", "'Philips_B120N10_Baby_Monitor'", ",", "\n", "'Provision_PT_737E_Security_Camera'", ",", "'Provision_PT_838_Security_Camera'", ",", "'Samsung_SNH_1011_N_Webcam'", ",", "\n", "'SimpleHome_XCS7_1002_WHT_Security_Camera'", ",", "'SimpleHome_XCS7_1003_WHT_Security_Camera'", "]", "\n", "train_data_global", "=", "list", "(", ")", "\n", "test_data_global", "=", "list", "(", ")", "\n", "train_data_local_dict", "=", "dict", "(", ")", "\n", "test_data_local_dict", "=", "dict", "(", ")", "\n", "train_data_local_num_dict", "=", "dict", "(", ")", "\n", "train_data_num", "=", "0", "\n", "test_data_num", "=", "0", "\n", "min", "=", "np", ".", "loadtxt", "(", "'min.txt'", ")", "\n", "max", "=", "np", ".", "loadtxt", "(", "'max.txt'", ")", "\n", "for", "i", ",", "device", "in", "enumerate", "(", "device_list", ")", ":", "\n", "        ", "benign_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "device", ",", "'benign_traffic.csv'", ")", ")", "\n", "benign_data", "=", "benign_data", "[", ":", "5000", "]", "\n", "benign_data", "=", "np", ".", "array", "(", "benign_data", ")", "\n", "benign_data", "[", "np", ".", "isnan", "(", "benign_data", ")", "]", "=", "0", "\n", "benign_data", "=", "(", "benign_data", "-", "min", ")", "/", "(", "max", "-", "min", ")", "\n", "# g_attack_data_list = [os.path.join(args.data_dir, device, 'gafgyt_attacks', f)", "\n", "#                       for f in os.listdir(os.path.join(args.data_dir, device, 'gafgyt_attacks'))]", "\n", "# if device == 'Ennio_Doorbell' or device == 'Samsung_SNH_1011_N_Webcam':", "\n", "#     attack_data_list = g_attack_data_list", "\n", "# else:", "\n", "#     m_attack_data_list = [os.path.join(args.data_dir, device, 'mirai_attacks', f)", "\n", "#                           for f in os.listdir(os.path.join(args.data_dir, device, 'mirai_attacks'))]", "\n", "#     attack_data_list = g_attack_data_list + m_attack_data_list", "\n", "\n", "# attack_data = pd.concat([pd.read_csv(f)[:500] for f in attack_data_list])", "\n", "# attack_data = (attack_data - attack_data.mean()) / (attack_data.std())", "\n", "# attack_data = np.array(attack_data)", "\n", "# attack_data[np.isnan(attack_data)] = 0", "\n", "train_data_local_dict", "[", "i", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "benign_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "0", ")", "\n", "test_data_local_dict", "[", "i", "]", "=", "None", "\n", "train_data_local_num_dict", "[", "i", "]", "=", "round", "(", "len", "(", "train_data_local_dict", "[", "i", "]", ")", "*", "2", "/", "3", ")", "*", "args", ".", "batch_size", "\n", "train_data_num", "+=", "train_data_local_num_dict", "[", "i", "]", "\n", "\n", "", "return", "train_data_num", ",", "test_data_num", ",", "train_data_global", ",", "test_data_global", ",", "train_data_local_num_dict", ",", "train_data_local_dict", ",", "test_data_local_dict", "\n", "\n"]]}