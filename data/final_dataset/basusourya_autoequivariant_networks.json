{"home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.mnist_classification_batchwise_accuracy.EQNet.__init__": [[16, 25], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.EQNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "network_dimensions", ",", "eq_indices", ")", ":", "\n", "# hidden_sizes and eq_indices are both lists of size 2", "\n", "        ", "super", "(", "EQNet", ",", "self", ")", ".", "__init__", "(", ")", "# Inherited from the parent class nn.Module", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "network_dimensions", "[", "0", "]", ",", "network_dimensions", "[", "1", "]", ")", "# ", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "network_dimensions", "[", "1", "]", ",", "network_dimensions", "[", "2", "]", ")", "# ", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "network_dimensions", "[", "2", "]", ",", "network_dimensions", "[", "3", "]", ")", "# ", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "# Non-Linear ReLU Layer: max(0,x)", "\n", "self", ".", "eq_indices", "=", "eq_indices", "\n", "self", ".", "network_dimensions", "=", "network_dimensions", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.mnist_classification_batchwise_accuracy.EQNet.forward": [[26, 31], ["mnist_classification_batchwise_accuracy.EQNet.relu", "mnist_classification_batchwise_accuracy.EQNet.relu", "out.mm", "x.mm", "out.mm", "torch.transpose", "[].view", "[].view", "mnist_classification_batchwise_accuracy.EQNet.fc1.weight.view", "mnist_classification_batchwise_accuracy.EQNet.fc2.weight.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "x", ".", "mm", "(", "self", ".", "fc1", ".", "weight", ".", "view", "(", "-", "1", ")", "[", "self", ".", "eq_indices", "[", "0", "]", "]", ".", "view", "(", "self", ".", "network_dimensions", "[", "0", "]", ",", "self", ".", "network_dimensions", "[", "1", "]", ")", ")", ")", "+", "self", ".", "fc1", ".", "bias", "\n", "out", "=", "self", ".", "relu", "(", "out", ".", "mm", "(", "self", ".", "fc2", ".", "weight", ".", "view", "(", "-", "1", ")", "[", "self", ".", "eq_indices", "[", "1", "]", "]", ".", "view", "(", "self", ".", "network_dimensions", "[", "1", "]", ",", "self", ".", "network_dimensions", "[", "2", "]", ")", ")", ")", "+", "self", ".", "fc2", ".", "bias", "\n", "out", "=", "out", ".", "mm", "(", "torch", ".", "transpose", "(", "self", ".", "fc3", ".", "weight", ",", "0", ",", "1", ")", ")", "+", "self", ".", "fc3", ".", "bias", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.mnist_classification_batchwise_accuracy.train": [[33, 52], ["enumerate", "Variable", "Variable", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "images.cuda.view", "torch.cuda.is_available", "images.cuda.cuda", "labels.cuda.cuda", "print", "criterion.item"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step"], ["", "", "def", "train", "(", "net", ",", "device", ",", "train_loader", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "20", ",", "use_cuda", "=", "True", ",", "train_size", "=", "60000", ",", "batch_size", "=", "64", ")", ":", "\n", "  ", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "train_loader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "      ", "images", "=", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "Variable", "(", "labels", ")", "\n", "\n", "if", "use_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "          ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "# Intialize the hidden weight to all zeros", "\n", "outputs", "=", "net", "(", "images", ")", "# Forward pass: compute the output class given a image", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "# Compute the loss: difference between the output class and the pre-given label", "\n", "loss", ".", "backward", "(", ")", "# Backward pass: compute the weight", "\n", "optimizer", ".", "step", "(", ")", "# Optimizer: update the weights of hidden nodes", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "40", "==", "0", ":", "# Logging", "\n", "          ", "print", "(", "'Epoch [%d/%d], Step [%d/%d], Loss: %.4f'", "\n", "%", "(", "epoch", "+", "1", ",", "num_epochs", ",", "i", "+", "1", ",", "(", "train_size", "/", "batch_size", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.mnist_classification_batchwise_accuracy.test": [[53, 73], ["net.eval", "print", "Variable", "net", "torch.max", "labels.cuda.size", "images.cuda.view", "torch.cuda.is_available", "images.cuda.cuda", "labels.cuda.cuda"], "function", ["None"], ["", "def", "test", "(", "net", ",", "device", ",", "test_loader", ",", "use_cuda", "=", "True", ")", ":", "\n", "  ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "for", "images", ",", "labels", "in", "test_loader", ":", "\n", "      ", "images", "=", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", "\n", "#if torch.randn(1)>0.0:", "\n", "#  images = torchvision.transforms.functional.hflip(images)", "\n", "if", "use_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "          ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "outputs", "=", "net", "(", "images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "# Choose the best class from the output: The class with the best score", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "# Increment the total count", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", "# Increment the correct count", "\n", "\n", "", "print", "(", "'Accuracy of the network on the 10K test images:'", ",", "(", "100.0", "*", "correct", "/", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.mnist_classification_batchwise_accuracy.main": [[74, 168], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.device", "print", "dataloader.get_mnist_trainloader", "dataloader.get_mnist_testloader", "range", "torch.cuda.is_available", "train_kwargs.update", "test_kwargs.update", "len", "print", "equivariance_search_utilities.get_equivariant_network().to", "torch.nn.CrossEntropyLoss", "torch.optim.Adam", "range", "mnist_classification_batchwise_accuracy.test", "train.parameters", "time.time", "mnist_classification_batchwise_accuracy.train", "print", "equivariance_search_utilities.get_equivariant_network", "time.time"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_trainloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_testloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.test", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.train", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_equivariant_network"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Augmented MNIST hypothesis testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-size'", ",", "type", "=", "int", ",", "default", "=", "60000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-size'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 14)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 1.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.7", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'Learning rate step gamma (default: 0.7)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dry-run'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'quickly check a single pass'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug-array-id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'augmentation index to be used from aug_array_list'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "train_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "batch_size", "}", "\n", "test_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "test_batch_size", "}", "\n", "\n", "if", "use_cuda", ":", "\n", "\t\t", "cuda_kwargs", "=", "{", "'num_workers'", ":", "1", ",", "\n", "'pin_memory'", ":", "True", ",", "\n", "'shuffle'", ":", "True", "}", "\n", "train_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "test_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "\n", "", "aug_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "\n", "eq_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", "\n", "\n", "aug_array", "=", "aug_array_list", "[", "args", ".", "aug_array_id", "]", "\n", "print", "(", "\"Augmentation array\"", ",", "aug_array", ")", "\n", "# load data with appropriate equivariances", "\n", "trainloader", "=", "get_mnist_trainloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "train_size", "=", "args", ".", "train_size", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "testloader", "=", "get_mnist_testloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "test_size", "=", "args", ".", "test_size", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "network_dimensions", "=", "[", "28", "*", "28", ",", "20", "*", "20", ",", "20", "*", "20", ",", "10", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "eq_array_list", ")", ")", ":", "\n", "\t\t", "eq_array", "=", "eq_array_list", "[", "i", "]", "\n", "print", "(", "\"Equivariance array\"", ",", "eq_array", ")", "\n", "model", "=", "get_equivariant_network", "(", "network_dimensions", ",", "eq_array", ")", ".", "to", "(", "device", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "\t\t  ", "import", "time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "train", "(", "model", ",", "device", ",", "trainloader", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "args", ".", "epochs", ",", "train_size", "=", "args", ".", "train_size", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"Time elapsed\"", ",", "time_elapsed", ",", "\"secs\"", ")", "\n", "# test", "\n", "", "test", "(", "model", ",", "device", ",", "testloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble1.__init__": [[7, 10], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble1.__call__": [[11, 15], ["torch.multinomial", "augmentation_functions.RandomScramble1.synthetic1_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic1_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic1_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble1.synthetic1_matrix": [[16, 24], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble1.get_next_indices_sc1"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1"], ["", "def", "synthetic1_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble1.get_next_indices_sc1": [[25, 39], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc1", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble2.__init__": [[41, 44], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble2.__call__": [[45, 49], ["torch.multinomial", "augmentation_functions.RandomScramble2.synthetic2_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic2_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic2_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble2.synthetic2_matrix": [[50, 58], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble2.get_next_indices_sc2"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2"], ["", "def", "synthetic2_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble2.get_next_indices_sc2": [[59, 63], ["int"], "methods", ["None"], ["", "def", "get_next_indices_sc2", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble3.__init__": [[65, 68], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble3.__call__": [[69, 73], ["torch.multinomial", "augmentation_functions.RandomScramble3.synthetic3_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic3_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic3_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble3.synthetic3_matrix": [[74, 84], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble3.get_next_indices_sc3"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3"], ["", "def", "synthetic3_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble3.get_next_indices_sc3": [[85, 89], ["int"], "methods", ["None"], ["", "def", "get_next_indices_sc3", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble4.__init__": [[91, 94], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble4.__call__": [[95, 99], ["torch.multinomial", "augmentation_functions.RandomScramble4.synthetic4_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic4_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic4_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble4.synthetic4_matrix": [[100, 110], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble4.get_next_indices_sc4"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4"], ["", "def", "synthetic4_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble4.get_next_indices_sc4": [[111, 119], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc4", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble5.__init__": [[121, 124], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble5.__call__": [[125, 129], ["torch.multinomial", "augmentation_functions.RandomScramble5.synthetic5_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic5_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic5_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble5.synthetic5_matrix": [[130, 140], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble5.get_next_indices_sc5"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5"], ["", "def", "synthetic5_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble5.get_next_indices_sc5": [[141, 149], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc5", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble6.__init__": [[151, 154], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble6.__call__": [[155, 159], ["torch.multinomial", "augmentation_functions.RandomScramble6.synthetic6_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic6_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic6_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble6.synthetic6_matrix": [[160, 170], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble6.get_next_indices_sc6"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6"], ["", "def", "synthetic6_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble6.get_next_indices_sc6": [[171, 179], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc6", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble7.__init__": [[182, 185], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble7.__call__": [[186, 190], ["torch.multinomial", "augmentation_functions.RandomScramble7.synthetic7_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic7_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic7_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble7.synthetic7_matrix": [[191, 201], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble7.get_next_indices_sc7"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7"], ["", "def", "synthetic7_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomScramble7.get_next_indices_sc7": [[202, 210], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc7", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomVertical.__init__": [[212, 216], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ",", "d", "=", "1", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "d", "=", "d", "#displacement magnitude", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomVertical.__call__": [[217, 221], ["torch.multinomial", "augmentation_functions.RandomVertical.vtrans_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.vtrans_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "vtrans_matrix", "(", "tensor", ",", "self", ".", "d", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomVertical.vtrans_matrix": [[222, 232], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomVertical.get_next_indices_sc8"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8"], ["", "def", "vtrans_matrix", "(", "self", ",", "w", ",", "d", "=", "1", ")", ":", "\n", "      ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomVertical.get_next_indices_sc8": [[233, 238], ["None"], "methods", ["None"], ["", "def", "get_next_indices_sc8", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "        ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomHorizontal.__init__": [[240, 244], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ",", "d", "=", "1", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "d", "=", "d", "#displacement magnitude", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomHorizontal.__call__": [[245, 249], ["torch.multinomial", "augmentation_functions.RandomHorizontal.htrans_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.htrans_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "htrans_matrix", "(", "tensor", ",", "self", ".", "d", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomHorizontal.htrans_matrix": [[250, 260], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomHorizontal.get_next_indices_sc9"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9"], ["", "def", "htrans_matrix", "(", "self", ",", "w", ",", "d", "=", "1", ")", ":", "\n", "      ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.RandomHorizontal.get_next_indices_sc9": [[261, 266], ["None"], "methods", ["None"], ["", "def", "get_next_indices_sc9", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "        ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.CIFAR_dimension_3_to_1.__call__": [[268, 271], ["augmentation_functions.CIFAR_dimension_3_to_1.dimension_3_to_1"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.CIFAR_dimension_3_to_1.dimension_3_to_1"], ["    ", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "tensor", "=", "self", ".", "dimension_3_to_1", "(", "tensor", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.CIFAR_dimension_3_to_1.dimension_3_to_1": [[272, 280], ["w[].size", "torch.rand", "range", "torch.rand.view", "range"], "methods", ["None"], ["", "def", "dimension_3_to_1", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "(", "w", "[", "0", ",", "i", ",", "j", "]", "+", "w", "[", "1", ",", "i", ",", "j", "]", "+", "w", "[", "2", ",", "i", ",", "j", "]", ")", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.rotation_matrix": [[290, 300], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "", "def", "rotation_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by 90\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "j", ",", "i", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.hflip_matrix": [[302, 312], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "hflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Hflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "i", ",", "m", "-", "1", "-", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.vflip_matrix": [[314, 324], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "vflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Vflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "i", ",", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.get_next_indices_sc1": [[327, 341], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.synthetic1_matrix": [[342, 351], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc1"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1"], ["", "def", "synthetic1_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.get_next_indices_sc2": [[353, 358], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.synthetic2_matrix": [[359, 369], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc2"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2"], ["", "def", "synthetic2_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.get_next_indices_sc3": [[371, 376], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.synthetic3_matrix": [[377, 387], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc3"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3"], ["", "def", "synthetic3_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.get_next_indices_sc4": [[389, 397], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.synthetic4_matrix": [[398, 408], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc4"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4"], ["", "def", "synthetic4_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.get_next_indices_sc5": [[410, 418], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.synthetic5_matrix": [[419, 429], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc5"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5"], ["", "def", "synthetic5_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.get_next_indices_sc6": [[431, 439], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.synthetic6_matrix": [[440, 450], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc6"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6"], ["", "def", "synthetic6_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.get_next_indices_sc7": [[452, 460], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.synthetic7_matrix": [[461, 471], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc7"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7"], ["", "def", "synthetic7_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.get_next_indices_sc8": [[473, 478], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.vtrans_matrix": [[479, 489], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc8"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8"], ["", "def", "vtrans_matrix", "(", "w", ",", "d", "=", "1", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.get_next_indices_sc9": [[491, 496], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.augmentation_functions.htrans_matrix": [[497, 507], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc9"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9"], ["", "def", "htrans_matrix", "(", "w", ",", "d", "=", "1", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.mnist_classification_single_hypothesis_testing.train": [[17, 33], ["range", "len", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "print", "criterion.item"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step"], ["def", "train", "(", "net", ",", "device", ",", "trainimageset", ",", "trainlabelset", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "20", ",", "use_cuda", "=", "True", ",", "train_size", "=", "60000", ",", "batch_size", "=", "64", ")", ":", "\n", "\n", "  ", "for", "i", "in", "range", "(", "len", "(", "trainimageset", ")", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "      ", "images", "=", "trainimageset", "[", "i", "]", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "trainlabelset", "[", "i", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# Intialize the hidden weight to all zeros", "\n", "outputs", "=", "net", "(", "images", ")", "# Forward pass: compute the output class given a image", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "# Compute the loss: difference between the output class and the pre-given label", "\n", "loss", ".", "backward", "(", ")", "# Backward pass: compute the weight", "\n", "optimizer", ".", "step", "(", ")", "# Optimizer: update the weights of hidden nodes", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "40", "==", "0", ":", "# Logging", "\n", "          ", "print", "(", "'Epoch [%d/%d], Step [%d/%d], Loss: %.4f'", "\n", "%", "(", "epoch", "+", "1", ",", "num_epochs", ",", "i", "+", "1", ",", "(", "train_size", "/", "batch_size", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.mnist_classification_single_hypothesis_testing.test": [[34, 50], ["net.eval", "range", "print", "len", "net", "torch.max", "labels.size"], "function", ["None"], ["", "def", "test", "(", "net", ",", "device", ",", "testimageset", ",", "testlabelset", ",", "use_cuda", "=", "True", ")", ":", "\n", "  ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "testimageset", ")", ")", ":", "\n", "      ", "images", "=", "testimageset", "[", "i", "]", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "testlabelset", "[", "i", "]", "\n", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "# Choose the best class from the output: The class with the best score", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "# Increment the total count", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", "# Increment the correct count", "\n", "\n", "", "print", "(", "'Accuracy of the network on the 1K test images:'", ",", "(", "100.0", "*", "correct", "/", "total", ")", ")", "\n", "return", "(", "100.0", "*", "correct", "/", "total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.mnist_classification_single_hypothesis_testing.main": [[51, 170], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.device", "print", "dataloader.get_mnist_trainloader", "dataloader.get_mnist_testloader", "enumerate", "enumerate", "range", "print", "torch.cuda.is_available", "train_kwargs.update", "test_kwargs.update", "trainimageset.append", "trainlabelset.append", "testimageset.append", "testlabelset.append", "len", "print", "equivariance_search_utilities.get_equivariant_network().to", "print", "torch.nn.CrossEntropyLoss", "torch.optim.Adam", "range", "test_accuracy_list.append", "print", "Variable().to", "Variable().to", "Variable().to", "Variable().to", "sum", "train.parameters", "time.time", "mnist_classification_single_hypothesis_testing.train", "print", "max", "equivariance_search_utilities.get_equivariant_network", "time.time", "mnist_classification_single_hypothesis_testing.test", "Variable", "Variable", "Variable", "Variable", "p.numel", "images.view", "images.view", "train.parameters"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_trainloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_testloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.train", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_equivariant_network", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.test"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Augmented MNIST hypothesis testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-size'", ",", "type", "=", "int", ",", "default", "=", "60000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-size'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 14)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 1.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.7", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'Learning rate step gamma (default: 0.7)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dry-run'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'quickly check a single pass'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug-array-id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'augmentation index to be used from aug_array_list'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "train_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "batch_size", "}", "\n", "test_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "test_batch_size", "}", "\n", "\n", "if", "use_cuda", ":", "\n", "\t\t", "cuda_kwargs", "=", "{", "'num_workers'", ":", "1", ",", "\n", "'pin_memory'", ":", "True", ",", "\n", "'shuffle'", ":", "True", "}", "\n", "train_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "test_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "\n", "", "aug_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", "\n", "\n", "eq_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", "\n", "\n", "aug_array", "=", "aug_array_list", "[", "args", ".", "aug_array_id", "]", "\n", "print", "(", "\"Augmentation array\"", ",", "aug_array", ")", "\n", "# load data with appropriate equivariances", "\n", "trainloader", "=", "get_mnist_trainloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "train_size", "=", "args", ".", "train_size", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "testloader", "=", "get_mnist_testloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "test_size", "=", "args", ".", "test_size", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "trainimageset", "=", "[", "]", "\n", "trainlabelset", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "trainloader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "\t\t", "trainimageset", ".", "append", "(", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", ".", "to", "(", "device", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "trainlabelset", ".", "append", "(", "Variable", "(", "labels", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "testimageset", "=", "[", "]", "\n", "testlabelset", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "\t\t", "testimageset", ".", "append", "(", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", ".", "to", "(", "device", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "testlabelset", ".", "append", "(", "Variable", "(", "labels", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "network_dimensions", "=", "[", "28", "*", "28", ",", "20", "*", "20", ",", "20", "*", "20", ",", "10", "]", "\n", "test_accuracy_list", "=", "[", "]", "# Stores the maximum test accuracy for each of the equivariant networks", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "eq_array_list", ")", ")", ":", "\n", "\t\t", "eq_array", "=", "eq_array_list", "[", "i", "]", "\n", "print", "(", "\"Equivariance array\"", ",", "eq_array", ")", "\n", "model", "=", "get_equivariant_network", "(", "network_dimensions", ",", "eq_array", ")", ".", "to", "(", "device", ")", "\n", "print", "(", "\"No. of parameters:\"", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "test_accuracy_temp", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "\t\t  ", "import", "time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "train", "(", "model", ",", "device", ",", "trainimageset", ",", "trainlabelset", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "args", ".", "epochs", ",", "train_size", "=", "args", ".", "train_size", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"Time elapsed\"", ",", "time_elapsed", ",", "\"secs\"", ")", "\n", "# test", "\n", "test_accuracy_temp", "=", "max", "(", "test_accuracy_temp", ",", "test", "(", "model", ",", "device", ",", "testimageset", ",", "testlabelset", ")", ")", "\n", "", "test_accuracy_list", ".", "append", "(", "test_accuracy_temp", ")", "\n", "print", "(", "\"Max accuracy:\"", ",", "test_accuracy_temp", ")", "\n", "", "print", "(", "\"Test accuracies\"", ",", "test_accuracy_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.mnist_classification_hypothesis_testing.train": [[16, 32], ["range", "len", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "print", "criterion.item"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step"], ["def", "train", "(", "net", ",", "device", ",", "trainimageset", ",", "trainlabelset", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "20", ",", "use_cuda", "=", "True", ",", "train_size", "=", "60000", ",", "batch_size", "=", "64", ")", ":", "\n", "\n", "  ", "for", "i", "in", "range", "(", "len", "(", "trainimageset", ")", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "      ", "images", "=", "trainimageset", "[", "i", "]", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "trainlabelset", "[", "i", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# Intialize the hidden weight to all zeros", "\n", "outputs", "=", "net", "(", "images", ")", "# Forward pass: compute the output class given a image", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "# Compute the loss: difference between the output class and the pre-given label", "\n", "loss", ".", "backward", "(", ")", "# Backward pass: compute the weight", "\n", "optimizer", ".", "step", "(", ")", "# Optimizer: update the weights of hidden nodes", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "40", "==", "0", ":", "# Logging", "\n", "          ", "print", "(", "'Epoch [%d/%d], Step [%d/%d], Loss: %.4f'", "\n", "%", "(", "epoch", "+", "1", ",", "num_epochs", ",", "i", "+", "1", ",", "(", "train_size", "/", "batch_size", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.mnist_classification_hypothesis_testing.test": [[33, 49], ["net.eval", "range", "print", "len", "net", "torch.max", "labels.size"], "function", ["None"], ["", "def", "test", "(", "net", ",", "device", ",", "testimageset", ",", "testlabelset", ",", "use_cuda", "=", "True", ")", ":", "\n", "  ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "testimageset", ")", ")", ":", "\n", "      ", "images", "=", "testimageset", "[", "i", "]", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "testlabelset", "[", "i", "]", "\n", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "# Choose the best class from the output: The class with the best score", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "# Increment the total count", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", "# Increment the correct count", "\n", "\n", "", "print", "(", "'Accuracy of the network on the 1K test images:'", ",", "(", "100.0", "*", "correct", "/", "total", ")", ")", "\n", "return", "(", "100.0", "*", "correct", "/", "total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.mnist_classification_hypothesis_testing.main": [[50, 187], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.device", "print", "dataloader.get_mnist_trainloader", "dataloader.get_mnist_testloader", "enumerate", "enumerate", "range", "print", "numpy.save", "torch.cuda.is_available", "train_kwargs.update", "test_kwargs.update", "trainimageset.append", "trainlabelset.append", "testimageset.append", "testlabelset.append", "len", "torch.manual_seed", "print", "equivariance_search_utilities.get_equivariant_network().to", "print", "torch.nn.CrossEntropyLoss", "torch.optim.Adam", "range", "test_accuracy_list.append", "print", "Variable().to", "Variable().to", "Variable().to", "Variable().to", "sum", "train.parameters", "time.time", "mnist_classification_hypothesis_testing.train", "print", "max", "str", "equivariance_search_utilities.get_equivariant_network", "time.time", "mnist_classification_hypothesis_testing.test", "Variable", "Variable", "Variable", "Variable", "p.numel", "images.view", "images.view", "train.parameters"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_trainloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_testloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.train", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_equivariant_network", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.test"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "# For multiple augmentations set the flag --multiple-augmentations to true", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Augmented MNIST hypothesis testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-size'", ",", "type", "=", "int", ",", "default", "=", "60000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-size'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 14)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 1.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.7", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'Learning rate step gamma (default: 0.7)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dry-run'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'quickly check a single pass'", ")", "\n", "parser", ".", "add_argument", "(", "'--multiple-augmentations'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'quickly check a single pass'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug-array-id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'augmentation index to be used from aug_array_list'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "train_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "batch_size", "}", "\n", "test_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "test_batch_size", "}", "\n", "\n", "if", "use_cuda", ":", "\n", "\t\t", "cuda_kwargs", "=", "{", "'num_workers'", ":", "1", ",", "\n", "'pin_memory'", ":", "True", ",", "\n", "'shuffle'", ":", "True", "}", "\n", "train_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "test_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "\n", "", "aug_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", "\n", "\n", "multiple_aug_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "\n", "eq_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", "\n", "\n", "if", "args", ".", "multiple_augmentations", ":", "\n", "\t\t", "aug_array", "=", "multiple_aug_array_list", "[", "args", ".", "aug_array_id", "]", "\n", "", "else", ":", "\n", "\t\t", "aug_array", "=", "aug_array_list", "[", "args", ".", "aug_array_id", "]", "\n", "\n", "", "print", "(", "\"Augmentation array\"", ",", "aug_array", ")", "\n", "# load data with appropriate equivariances", "\n", "trainloader", "=", "get_mnist_trainloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "train_size", "=", "args", ".", "train_size", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "testloader", "=", "get_mnist_testloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "test_size", "=", "args", ".", "test_size", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "trainimageset", "=", "[", "]", "\n", "trainlabelset", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "trainloader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "\t\t", "trainimageset", ".", "append", "(", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", ".", "to", "(", "device", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "trainlabelset", ".", "append", "(", "Variable", "(", "labels", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "testimageset", "=", "[", "]", "\n", "testlabelset", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "\t\t", "testimageset", ".", "append", "(", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", ".", "to", "(", "device", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "testlabelset", ".", "append", "(", "Variable", "(", "labels", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "network_dimensions", "=", "[", "28", "*", "28", ",", "20", "*", "20", ",", "20", "*", "20", ",", "10", "]", "\n", "test_accuracy_list", "=", "[", "]", "# Stores the maximum test accuracy for each of the equivariant networks", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "eq_array_list", ")", ")", ":", "\n", "\t\t", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "eq_array", "=", "eq_array_list", "[", "i", "]", "\n", "print", "(", "\"Equivariance array\"", ",", "eq_array", ")", "\n", "model", "=", "get_equivariant_network", "(", "network_dimensions", ",", "eq_array", ")", ".", "to", "(", "device", ")", "\n", "print", "(", "\"No. of parameters:\"", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "test_accuracy_temp", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "\t\t  ", "import", "time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "train", "(", "model", ",", "device", ",", "trainimageset", ",", "trainlabelset", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "args", ".", "epochs", ",", "train_size", "=", "args", ".", "train_size", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"Time elapsed\"", ",", "time_elapsed", ",", "\"secs\"", ")", "\n", "# test", "\n", "test_accuracy_temp", "=", "max", "(", "test_accuracy_temp", ",", "test", "(", "model", ",", "device", ",", "testimageset", ",", "testlabelset", ")", ")", "\n", "", "test_accuracy_list", ".", "append", "(", "test_accuracy_temp", ")", "\n", "print", "(", "\"Max accuracy:\"", ",", "test_accuracy_temp", ")", "\n", "", "print", "(", "\"Test accuracies\"", ",", "test_accuracy_list", ")", "\n", "np", ".", "save", "(", "\"test_accuracy_SHT\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "test_accuracy_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.mnist_transform_array": [[33, 44], ["torch.zeros", "torch.manual_seed", "range", "transforms_array.append", "len", "torchvision.Normalize", "transforms_array.append", "transforms_array.append", "torchvision.ToTensor"], "function", ["None"], ["def", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", "=", "torch", ".", "zeros", "(", "12", ")", ")", ":", "\n", "# Outputs the array of transformations from aug_array", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "transforms_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aug_array", ")", ")", ":", "\n", "    ", "if", "i", "==", "3", ":", "\n", "      ", "transforms_array", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "", "if", "aug_array", "[", "i", "]", ">", "0", ":", "\n", "      ", "transforms_array", ".", "append", "(", "aug_dict", "[", "i", "]", ")", "\n", "", "", "transforms_array", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ")", "\n", "return", "transforms_array", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.get_mnist_trainloader": [[46, 53], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["", "def", "get_mnist_trainloader", "(", "aug_array", ",", "train_size", "=", "2000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.get_mnist_trainset": [[55, 61], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["", "def", "get_mnist_trainset", "(", "aug_array", ",", "train_size", "=", "2000", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "return", "trainset_mini", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.get_mnist_testloader": [[63, 70], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["", "def", "get_mnist_testloader", "(", "aug_array", ",", "test_size", "=", "1000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "testtransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n", "testset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "testset", ",", "[", "test_size", ",", "len", "(", "testset", ")", "-", "test_size", "]", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "return", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.get_mnist_testset": [[72, 78], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["", "def", "get_mnist_testset", "(", "aug_array", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "testtransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n", "testset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "testset", ",", "[", "test_size", ",", "len", "(", "testset", ")", "-", "test_size", "]", ")", "\n", "return", "testset_mini", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.fashionmnist_transform_array": [[87, 98], ["torch.zeros", "torch.manual_seed", "range", "transforms_array.append", "len", "torchvision.Normalize", "transforms_array.append", "transforms_array.append", "torchvision.ToTensor"], "function", ["None"], ["def", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", "=", "torch", ".", "zeros", "(", "12", ")", ")", ":", "\n", "# Outputs the array of transformations from aug_array", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "transforms_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aug_array", ")", ")", ":", "\n", "    ", "if", "i", "==", "3", ":", "\n", "      ", "transforms_array", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "", "if", "aug_array", "[", "i", "]", ">", "0", ":", "\n", "      ", "transforms_array", ".", "append", "(", "aug_dict", "[", "i", "]", ")", "\n", "", "", "transforms_array", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ")", "\n", "return", "transforms_array", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.get_fashionmnist_trainloader": [[100, 107], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.fashionmnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array"], ["", "def", "get_fashionmnist_trainloader", "(", "aug_array", ",", "train_size", "=", "2000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "FashionMNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.get_fashionmnist_trainset": [[109, 115], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torch.utils.data.random_split", "dataloader.fashionmnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array"], ["", "def", "get_fashionmnist_trainset", "(", "aug_array", ",", "train_size", "=", "2000", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "FashionMNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "return", "trainset_mini", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.get_fashionmnist_testloader": [[117, 124], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.fashionmnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array"], ["", "def", "get_fashionmnist_testloader", "(", "aug_array", ",", "test_size", "=", "1000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "testtransform", "=", "transforms", ".", "Compose", "(", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "FashionMNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n", "testset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "testset", ",", "[", "test_size", ",", "len", "(", "testset", ")", "-", "test_size", "]", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "return", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.get_fashionmnist_testset": [[126, 132], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torch.utils.data.random_split", "dataloader.fashionmnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array"], ["", "def", "get_fashionmnist_testset", "(", "aug_array", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "testtransform", "=", "transforms", ".", "Compose", "(", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "FashionMNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n", "testset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "testset", ",", "[", "test_size", ",", "len", "(", "testset", ")", "-", "test_size", "]", ")", "\n", "return", "testset_mini", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.cifar10_transform_array": [[139, 151], ["torch.zeros", "torch.manual_seed", "range", "transforms_array.append", "len", "torchvision.Normalize", "transforms_array.append", "transforms_array.append", "transforms_array.append", "torchvision.ToTensor", "augmentation_functions.CIFAR_dimension_3_to_1"], "function", ["None"], ["def", "cifar10_transform_array", "(", "aug_dict", ",", "aug_array", "=", "torch", ".", "zeros", "(", "12", ")", ")", ":", "\n", "# Outputs the array of transformations from aug_array", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "transforms_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aug_array", ")", ")", ":", "\n", "    ", "if", "i", "==", "3", ":", "\n", "      ", "transforms_array", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transforms_array", ".", "append", "(", "CIFAR_dimension_3_to_1", "(", ")", ")", "\n", "", "if", "aug_array", "[", "i", "]", ">", "0", ":", "\n", "      ", "transforms_array", ".", "append", "(", "aug_dict", "[", "i", "]", ")", "\n", "", "", "transforms_array", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.7", ",", ")", ",", "(", "0.5", ",", ")", ")", ")", "\n", "return", "transforms_array", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.get_cifar10_trainloader": [[153, 160], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.cifar10_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.cifar10_transform_array"], ["", "def", "get_cifar10_trainloader", "(", "aug_array", ",", "train_size", "=", "2000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "cifar10_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.dataloader.get_cifar10_testloader": [[162, 169], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.cifar10_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.cifar10_transform_array"], ["", "def", "get_cifar10_testloader", "(", "aug_array", ",", "test_size", "=", "1000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "testtransform", "=", "transforms", ".", "Compose", "(", "cifar10_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n", "testset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "testset", ",", "[", "test_size", ",", "len", "(", "testset", ")", "-", "test_size", "]", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "return", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_search_utilities.EQNet.__init__": [[9, 18], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.EQNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "network_dimensions", ",", "eq_indices", ",", "n_orbits", ")", ":", "\n", "# hidden_sizes and eq_indices are both lists of size 2", "\n", "        ", "super", "(", "EQNet", ",", "self", ")", ".", "__init__", "(", ")", "# Inherited from the parent class nn.Module", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "n_orbits", "[", "0", "]", ",", "1", ")", "# ", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "n_orbits", "[", "1", "]", ",", "1", ")", "# ", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "network_dimensions", "[", "2", "]", ",", "network_dimensions", "[", "3", "]", ")", "# ", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "# Non-Linear ReLU Layer: max(0,x)", "\n", "self", ".", "eq_indices", "=", "eq_indices", "\n", "self", ".", "network_dimensions", "=", "network_dimensions", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_search_utilities.EQNet.forward": [[20, 27], ["[].view", "[].view", "equivariance_search_utilities.EQNet.relu", "equivariance_search_utilities.EQNet.relu", "out.mm", "x.mm", "out.mm", "torch.transpose", "equivariance_search_utilities.EQNet.fc1.weight.view", "equivariance_search_utilities.EQNet.fc2.weight.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "w1", "=", "self", ".", "fc1", ".", "weight", ".", "view", "(", "-", "1", ")", "[", "self", ".", "eq_indices", "[", "0", "]", "]", ".", "view", "(", "self", ".", "network_dimensions", "[", "0", "]", ",", "self", ".", "network_dimensions", "[", "1", "]", ")", "\n", "self", ".", "w2", "=", "self", ".", "fc2", ".", "weight", ".", "view", "(", "-", "1", ")", "[", "self", ".", "eq_indices", "[", "1", "]", "]", ".", "view", "(", "self", ".", "network_dimensions", "[", "1", "]", ",", "self", ".", "network_dimensions", "[", "2", "]", ")", "\n", "out", "=", "self", ".", "relu", "(", "x", ".", "mm", "(", "self", ".", "w1", ")", ")", "+", "self", ".", "fc1", ".", "bias", "\n", "out", "=", "self", ".", "relu", "(", "out", ".", "mm", "(", "self", ".", "w2", ")", ")", "+", "self", ".", "fc2", ".", "bias", "\n", "out", "=", "out", ".", "mm", "(", "torch", ".", "transpose", "(", "self", ".", "fc3", ".", "weight", ",", "0", ",", "1", ")", ")", "+", "self", ".", "fc3", ".", "bias", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_search_utilities.get_total_parameters": [[30, 33], ["None"], "function", ["None"], ["", "", "def", "get_total_parameters", "(", "network_dimensions", ",", "n_orbits", ")", ":", "\n", "  ", "total", "=", "n_orbits", "[", "0", "]", "+", "network_dimensions", "[", "1", "]", "+", "n_orbits", "[", "1", "]", "+", "network_dimensions", "[", "2", "]", "+", "network_dimensions", "[", "2", "]", "*", "network_dimensions", "[", "3", "]", "+", "network_dimensions", "[", "3", "]", "\n", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_search_utilities.get_equivariance_indices": [[34, 49], ["range", "len", "get_g_eq_index", "G.append", "int", "int", "math.sqrt", "math.sqrt"], "function", ["None"], ["", "def", "get_equivariance_indices", "(", "eq_array", ",", "I_prev_orbits", ",", "I_prev_index_to_orbit", ",", "input_size", ",", "hidden_size", ")", ":", "\n", "  ", "I_orbits", ",", "I_index_to_orbit", "=", "I_prev_orbits", ",", "I_prev_index_to_orbit", "\n", "G_list", "=", "[", "\"rotation\"", ",", "\"hflip\"", ",", "\"vflip\"", ",", "\"htrans\"", ",", "\"vtrans\"", ",", "\"synthetic1\"", ",", "\"synthetic2\"", ",", "\"synthetic3\"", ",", "\n", "\"synthetic4\"", ",", "\"synthetic5\"", ",", "\"synthetic6\"", ",", "\"synthetic7\"", "]", "\n", "G", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "eq_array", ")", ")", ":", "\n", "    ", "if", "eq_array", "[", "i", "]", "==", "1", ":", "\n", "      ", "G", ".", "append", "(", "G_list", "[", "i", "]", ")", "\n", "\n", "", "", "for", "g", "in", "G", ":", "\n", "    ", "I_orbits", ",", "I_index_to_orbit", "=", "get_g_eq_index", "(", "g", ",", "int", "(", "math", ".", "sqrt", "(", "input_size", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "hidden_size", ")", ")", ",", "I_prev_orbits", ",", "I_prev_index_to_orbit", ")", "\n", "I_prev_orbits", ",", "I_prev_index_to_orbit", "=", "I_orbits", ",", "I_index_to_orbit", "\n", "\n", "", "return", "I_orbits", ",", "I_index_to_orbit", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_search_utilities.get_equivariant_network": [[50, 80], ["range", "equivariance_search_utilities.EQNet", "equivariance_search_utilities.get_total_parameters", "print", "I_prev_index_to_orbit.append", "I_index_to_orbit.append", "n_orbits.append", "len", "int", "int", "equivariance_search_utilities.squeeze_orbits", "len", "math.sqrt", "math.sqrt", "equivariance_functions.get_G_list_equivariance_indices_graph", "set", "range"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_total_parameters", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.squeeze_orbits", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_G_list_equivariance_indices_graph"], ["", "def", "get_equivariant_network", "(", "network_dimensions", "=", "[", "28", "*", "28", ",", "20", "*", "20", ",", "20", "*", "20", ",", "10", "]", ",", "eq_array", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", ":", "\n", "# get the equivariance indices", "\n", "  ", "I_prev_orbits", "=", "[", "]", "\n", "I_prev_index_to_orbit", "=", "[", "]", "\n", "I_orbits", "=", "[", "]", "\n", "I_index_to_orbit", "=", "[", "]", "\n", "n_orbits", "=", "[", "]", "\n", "\n", "for", "it", "in", "range", "(", "len", "(", "network_dimensions", ")", "-", "2", ")", ":", "\n", "#I_prev_orbits.append([{i} for i in range(network_dimensions[it]*network_dimensions[it+1])])", "\n", "\n", "    ", "m", ",", "h", "=", "int", "(", "math", ".", "sqrt", "(", "network_dimensions", "[", "it", "]", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "network_dimensions", "[", "it", "+", "1", "]", ")", ")", "\n", "I_prev_index_to_orbit", ".", "append", "(", "[", "i", "for", "i", "in", "range", "(", "network_dimensions", "[", "it", "]", "*", "network_dimensions", "[", "it", "+", "1", "]", ")", "]", ")", "\n", "I_index_to_orbit", ".", "append", "(", "squeeze_orbits", "(", "get_G_list_equivariance_indices_graph", "(", "m", ",", "h", ",", "eq_array", ",", "I_prev_index_to_orbit", "[", "it", "]", ",", "d", "=", "4", ")", ")", ")", "\n", "#I_orbits.append(temp_1)", "\n", "#I_index_to_orbit.append(temp_2)", "\n", "n_orbits", ".", "append", "(", "len", "(", "set", "(", "I_index_to_orbit", "[", "it", "]", ")", ")", ")", "\n", "\n", "", "eq_indices", "=", "I_index_to_orbit", "\n", "\n", "# define the network model", "\n", "eqnet", "=", "EQNet", "(", "network_dimensions", ",", "eq_indices", ",", "n_orbits", ")", "\n", "\n", "# count the number of parameters", "\n", "pytorch_total_params_orbits", "=", "get_total_parameters", "(", "network_dimensions", ",", "n_orbits", ")", "\n", "print", "(", "\"net parameters orbits:\"", ",", "pytorch_total_params_orbits", ")", "\n", "\n", "#pytorch_total_params = sum(p.numel() for p in eqnet.parameters() if p.requires_grad)", "\n", "#print(\"net parameters:\",pytorch_total_params)", "\n", "return", "eqnet", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_search_utilities.squeeze_orbits": [[81, 102], ["numpy.argsort", "sorted_orbits.tolist.tolist", "range", "numpy.sort", "numpy.argsort", "min", "len", "range", "len"], "function", ["None"], ["", "def", "squeeze_orbits", "(", "orbits", ")", ":", "\n", "\n", "  ", "sorted_orbits", ",", "arg_sorted_orbits", "=", "np", ".", "sort", "(", "orbits", ")", ",", "np", ".", "argsort", "(", "orbits", ")", "\n", "rank_orbits", "=", "np", ".", "argsort", "(", "arg_sorted_orbits", ")", "\n", "sorted_ranked_orbits", "=", "[", "]", "\n", "\n", "sorted_orbits", "=", "sorted_orbits", "-", "min", "(", "sorted_orbits", ")", "\n", "sorted_orbits", "=", "sorted_orbits", ".", "tolist", "(", ")", "\n", "\n", "current_rank", "=", "0", "\n", "current_orbit", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "sorted_orbits", ")", ")", ":", "\n", "    ", "if", "sorted_orbits", "[", "i", "]", ">", "current_orbit", ":", "\n", "      ", "current_orbit", "=", "sorted_orbits", "[", "i", "]", "\n", "sorted_orbits", "[", "i", "]", "=", "current_rank", "+", "1", "\n", "current_rank", "+=", "1", "\n", "", "else", ":", "\n", "      ", "sorted_orbits", "[", "i", "]", "=", "current_rank", "\n", "\n", "", "", "orbits_new", "=", "[", "sorted_orbits", "[", "rank_orbits", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "sorted_orbits", ")", ")", "]", "\n", "return", "orbits_new", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.rotation_matrix": [[7, 17], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["def", "rotation_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by 90\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "j", ",", "i", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.hflip_matrix": [[19, 29], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "hflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Hflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "i", ",", "m", "-", "1", "-", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.vflip_matrix": [[31, 41], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "vflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Vflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "i", ",", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.get_next_indices_sc1": [[44, 58], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.synthetic1_matrix": [[59, 68], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc1"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1"], ["", "def", "synthetic1_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.get_next_indices_sc2": [[70, 75], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.synthetic2_matrix": [[76, 86], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc2"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2"], ["", "def", "synthetic2_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.get_next_indices_sc3": [[88, 93], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.synthetic3_matrix": [[94, 104], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc3"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3"], ["", "def", "synthetic3_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.get_next_indices_sc4": [[106, 114], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.synthetic4_matrix": [[115, 125], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc4"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4"], ["", "def", "synthetic4_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.get_next_indices_sc5": [[127, 135], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.synthetic5_matrix": [[136, 146], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc5"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5"], ["", "def", "synthetic5_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.get_next_indices_sc6": [[148, 156], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.synthetic6_matrix": [[157, 167], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc6"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6"], ["", "def", "synthetic6_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.get_next_indices_sc7": [[169, 177], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.synthetic7_matrix": [[178, 188], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc7"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7"], ["", "def", "synthetic7_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.get_next_indices_sc8": [[190, 195], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.vtrans_matrix": [[196, 206], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc8"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8"], ["", "def", "vtrans_matrix", "(", "w", ",", "d", "=", "4", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.get_next_indices_sc9": [[208, 213], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.group_transformation_matrices.htrans_matrix": [[214, 224], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc9"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9"], ["", "def", "htrans_matrix", "(", "w", ",", "d", "=", "4", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_functions.get_next_indices_sc1": [[6, 20], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_functions.get_next_indices_sc2": [[21, 26], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_functions.get_next_indices_sc3": [[27, 32], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_functions.get_next_indices_sc4": [[33, 41], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_functions.get_next_indices_sc5": [[42, 50], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_functions.get_next_indices_sc6": [[51, 59], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_functions.get_next_indices_sc7": [[60, 68], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_functions.get_next_indices_vert_trans": [[69, 74], ["None"], "function", ["None"], ["", "def", "get_next_indices_vert_trans", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_functions.get_next_indices_hori_trans": [[75, 80], ["None"], "function", ["None"], ["", "def", "get_next_indices_hori_trans", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST Single Equivariance Test.equivariance_functions.get_G_list_equivariance_indices_graph": [[81, 397], ["range", "print", "numpy.zeros", "range", "indices_queue.append", "indices_queue_pair.append", "len", "indices_queue.pop", "indices_queue_pair.pop", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc2", "equivariance_functions.get_next_indices_sc2", "equivariance_functions.get_next_indices_sc3", "equivariance_functions.get_next_indices_sc3", "equivariance_functions.get_next_indices_sc4", "equivariance_functions.get_next_indices_sc4", "equivariance_functions.get_next_indices_sc5", "equivariance_functions.get_next_indices_sc5", "equivariance_functions.get_next_indices_sc6", "equivariance_functions.get_next_indices_sc6", "equivariance_functions.get_next_indices_sc7", "equivariance_functions.get_next_indices_sc7", "range", "range", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "equivariance_functions.get_next_indices_vert_trans", "equivariance_functions.get_next_indices_vert_trans", "equivariance_functions.get_next_indices_hori_trans", "equivariance_functions.get_next_indices_hori_trans", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_vert_trans", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_vert_trans", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_hori_trans", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_hori_trans"], ["", "def", "get_G_list_equivariance_indices_graph", "(", "m", ",", "h", ",", "eq_array", ",", "I_prev", ",", "d", "=", "4", ")", ":", "\n", "  ", "\"Size of input layer = m*m; size of hidden layer = h*h; I permuted indices\"", "\n", "\"d=4 is the default translation step used\"", "\n", "\n", "nx", "=", "m", "*", "m", "#size of X", "\n", "nh", "=", "h", "*", "h", "#size of hidden layer", "\n", "I", "=", "I_prev", "#records the permutation of indices of W, which is of size n*n. For no previous symmetry, I_prev is given as the original indices", "\n", "V", "=", "np", ".", "zeros", "(", "nx", "*", "nh", ")", "-", "1", "#-1 if not visited, else 1", "\n", "current_orbit", "=", "-", "1", "\n", "indices_queue", "=", "[", "]", "\n", "indices_queue_pair", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "nx", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "nh", ")", ":", "\n", "      ", "i_0", "=", "i", "\n", "j_0", "=", "j", "\n", "if", "V", "[", "i_0", "*", "nh", "+", "j_0", "]", "<", "0", ":", "\n", "        ", "V", "[", "i_0", "*", "nh", "+", "j_0", "]", "=", "1", "\n", "index", "=", "i_0", "*", "nh", "+", "j_0", "\n", "indices_queue", ".", "append", "(", "index", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_0", ",", "j_0", "]", ")", "\n", "current_orbit", "+=", "1", "\n", "while", "len", "(", "indices_queue", ")", ">", "0", ":", "\n", "          ", "index", "=", "indices_queue", ".", "pop", "(", "0", ")", "\n", "i_0", ",", "j_0", "=", "indices_queue_pair", ".", "pop", "(", "0", ")", "\n", "I", "[", "index", "]", "=", "current_orbit", "\n", "\n", "if", "eq_array", "[", "0", "]", "==", "1", ":", "\n", "# rotations  ", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#rotate by 90", "\n", "alpha_r", ",", "beta_r", "=", "beta", ",", "m", "-", "1", "-", "alpha", "\n", "gamma_r", ",", "delta_r", "=", "delta", ",", "h", "-", "1", "-", "gamma", "\n", "\n", "i_r", "=", "alpha_r", "*", "m", "+", "beta_r", "\n", "j_r", "=", "gamma_r", "*", "h", "+", "delta_r", "\n", "\n", "index_r", "=", "i_r", "*", "nh", "+", "j_r", "\n", "if", "V", "[", "index_r", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_r", "]", "=", "1", "\n", "I", "[", "index_r", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_r", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_r", ",", "j_r", "]", ")", "\n", "\n", "#rotate by 180", "\n", "", "alpha_rr", ",", "beta_rr", "=", "beta_r", ",", "m", "-", "1", "-", "alpha_r", "\n", "gamma_rr", ",", "delta_rr", "=", "delta_r", ",", "h", "-", "1", "-", "gamma_r", "\n", "\n", "i_rr", "=", "alpha_rr", "*", "m", "+", "beta_rr", "\n", "j_rr", "=", "gamma_rr", "*", "h", "+", "delta_rr", "\n", "\n", "index_rr", "=", "i_rr", "*", "nh", "+", "j_rr", "\n", "if", "V", "[", "index_rr", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_rr", "]", "=", "1", "\n", "I", "[", "index_rr", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_rr", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_rr", ",", "j_rr", "]", ")", "\n", "\n", "#rotate by 270", "\n", "", "alpha_rrr", ",", "beta_rrr", "=", "beta_rr", ",", "m", "-", "1", "-", "alpha_rr", "\n", "gamma_rrr", ",", "delta_rrr", "=", "delta_rr", ",", "h", "-", "1", "-", "gamma_rr", "\n", "\n", "i_rrr", "=", "alpha_rrr", "*", "m", "+", "beta_rrr", "\n", "j_rrr", "=", "gamma_rrr", "*", "h", "+", "delta_rrr", "\n", "\n", "index_rrr", "=", "i_rrr", "*", "nh", "+", "j_rrr", "\n", "if", "V", "[", "index_rrr", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_rrr", "]", "=", "1", "\n", "I", "[", "index_rrr", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_rrr", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_rrr", ",", "j_rrr", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "1", "]", "==", "1", ":", "\n", "# horizontal flip", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#hflip", "\n", "alpha_h", ",", "beta_h", "=", "alpha", ",", "m", "-", "1", "-", "beta", "\n", "gamma_h", ",", "delta_h", "=", "gamma", ",", "h", "-", "1", "-", "delta", "\n", "\n", "i_h", "=", "alpha_h", "*", "m", "+", "beta_h", "\n", "j_h", "=", "gamma_h", "*", "h", "+", "delta_h", "\n", "\n", "index_h", "=", "i_h", "*", "nh", "+", "j_h", "\n", "if", "V", "[", "index_h", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_h", "]", "=", "1", "\n", "I", "[", "index_h", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_h", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_h", ",", "j_h", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "2", "]", "==", "1", ":", "\n", "# vertical flip", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#vflip", "\n", "alpha_h", ",", "beta_h", "=", "m", "-", "1", "-", "alpha", ",", "beta", "\n", "gamma_h", ",", "delta_h", "=", "h", "-", "1", "-", "gamma", ",", "delta", "\n", "\n", "i_h", "=", "alpha_h", "*", "m", "+", "beta_h", "\n", "j_h", "=", "gamma_h", "*", "h", "+", "delta_h", "\n", "\n", "index_h", "=", "i_h", "*", "nh", "+", "j_h", "\n", "if", "V", "[", "index_h", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_h", "]", "=", "1", "\n", "I", "[", "index_h", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_h", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_h", ",", "j_h", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "10", "]", "==", "1", ":", "\n", "# synthetic 1", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to quadrant 2", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc1", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc1", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "#move to quadrant 3", "\n", "", "alpha_qq", ",", "beta_qq", "=", "get_next_indices_sc1", "(", "alpha_q", ",", "beta_q", ",", "m", ",", "m", ")", "\n", "gamma_qq", ",", "delta_qq", "=", "get_next_indices_sc1", "(", "gamma_q", ",", "delta_q", ",", "h", ",", "h", ")", "\n", "\n", "i_qq", "=", "alpha_qq", "*", "m", "+", "beta_qq", "\n", "j_qq", "=", "gamma_qq", "*", "h", "+", "delta_qq", "\n", "\n", "index_qq", "=", "i_qq", "*", "nh", "+", "j_qq", "\n", "if", "V", "[", "index_qq", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_qq", "]", "=", "1", "\n", "I", "[", "index_qq", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_qq", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_qq", ",", "j_qq", "]", ")", "\n", "\n", "#move to quadrant 4", "\n", "", "alpha_qqq", ",", "beta_qqq", "=", "get_next_indices_sc1", "(", "alpha_qq", ",", "beta_qq", ",", "m", ",", "m", ")", "\n", "gamma_qqq", ",", "delta_qqq", "=", "get_next_indices_sc1", "(", "gamma_qq", ",", "delta_qq", ",", "h", ",", "h", ")", "\n", "\n", "i_qqq", "=", "alpha_qqq", "*", "m", "+", "beta_qqq", "\n", "j_qqq", "=", "gamma_qqq", "*", "h", "+", "delta_qqq", "\n", "\n", "index_qqq", "=", "i_qqq", "*", "nh", "+", "j_qqq", "\n", "if", "V", "[", "index_qqq", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_qqq", "]", "=", "1", "\n", "I", "[", "index_qqq", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_qqq", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_qqq", ",", "j_qqq", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "11", "]", "==", "1", ":", "\n", "# synthetic 2", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc2", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc2", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "5", "]", "==", "1", ":", "\n", "# synthetic 3", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc3", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc3", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "6", "]", "==", "1", ":", "\n", "# synthetic 4", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc4", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc4", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "7", "]", "==", "1", ":", "\n", "# synthetic 5", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc5", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc5", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "8", "]", "==", "1", ":", "\n", "# synthetic 6", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc6", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc6", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "9", "]", "==", "1", ":", "\n", "# synthetic 7", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc7", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc7", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "4", "]", "==", "1", ":", "\n", "# vertical translation ", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "for", "it", "in", "range", "(", "m", ")", ":", "\n", "#translate one step", "\n", "              ", "alpha", ",", "beta", "=", "get_next_indices_vert_trans", "(", "alpha", ",", "beta", ",", "m", ",", "m", ",", "d", ")", "\n", "gamma", ",", "delta", "=", "get_next_indices_vert_trans", "(", "gamma", ",", "delta", ",", "h", ",", "h", ",", "d", ")", "\n", "\n", "i_q", "=", "alpha", "*", "m", "+", "beta", "\n", "j_q", "=", "gamma", "*", "h", "+", "delta", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "                ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "it", "+=", "d", "-", "1", "\n", "\n", "", "", "if", "eq_array", "[", "3", "]", "==", "1", ":", "\n", "# horizontal translation", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "for", "it", "in", "range", "(", "h", ")", ":", "\n", "#translate one step", "\n", "              ", "alpha", ",", "beta", "=", "get_next_indices_hori_trans", "(", "alpha", ",", "beta", ",", "m", ",", "m", ",", "d", ")", "\n", "gamma", ",", "delta", "=", "get_next_indices_hori_trans", "(", "gamma", ",", "delta", ",", "h", ",", "h", ",", "d", ")", "\n", "\n", "i_q", "=", "alpha", "*", "m", "+", "beta", "\n", "j_q", "=", "gamma", "*", "h", "+", "delta", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "                ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "it", "+=", "d", "-", "1", "\n", "", "", "", "", "", "", "print", "(", "\"current_orbit\"", ",", "current_orbit", ")", "\n", "return", "I", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.QNet.__init__": [[49, 56], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.EQNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_sizes", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "QNet", ",", "self", ")", ".", "__init__", "(", ")", "# Inherited from the parent class nn.Module", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_sizes", "[", "0", "]", ")", "# 1st Full-Connected Layer: k (input data) -> 500 (hidden node)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "# Non-Linear ReLU Layer: max(0,x)", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_sizes", "[", "0", "]", ",", "hidden_sizes", "[", "1", "]", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "hidden_sizes", "[", "1", "]", ",", "hidden_sizes", "[", "2", "]", ")", "# 2nd Full-Connected Layer: 500 (hidden node) -> k (output class)", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "hidden_sizes", "[", "2", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.QNet.forward": [[57, 64], ["gnas_fcc_MNIST.QNet.relu", "gnas_fcc_MNIST.QNet.relu", "gnas_fcc_MNIST.QNet.relu", "gnas_fcc_MNIST.QNet.fc4", "gnas_fcc_MNIST.QNet.fc1", "gnas_fcc_MNIST.QNet.fc2", "gnas_fcc_MNIST.QNet.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# Forward pass: stacking each layer together", "\n", "        ", "x", "=", "x", "/", "10", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "fc3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc4", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.Environment.__init__": [[106, 133], ["print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "gnas_fcc_MNIST.Environment.get_state_accuracy", "gnas_fcc_MNIST.Environment.get_state_reward", "str", "str"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.get_state_accuracy", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.get_state_reward"], ["  ", "def", "__init__", "(", "self", ",", "device", ",", "trainimageset", ",", "trainlabelset", ",", "testimageset", ",", "testlabelset", ",", "child_network_dimensions", ",", "child_train_size", ",", "child_test_size", ",", "child_batch_size", ",", "child_test_batch_size", ",", "child_lr", "=", "1e-3", ",", "child_epochs", "=", "4", ",", "g_size", "=", "12", ")", ":", "\n", "# Start with all zero vector", "\n", "# Initialize only once, reset as many times as needed, to avoid recomputation of base accuracies.", "\n", "    ", "print", "(", "\"Group Neural Architectural Search using Group Decomposition and Reinforcement Learning!\"", ")", "\n", "self", ".", "k", "=", "g_size", "# k = g_size for fully connected and k = g_size + 4*h_size for convolutional neural networks", "\n", "self", ".", "current_state", "=", "torch", ".", "zeros", "(", "g_size", ")", "# g_size represents the size of the array of groups for equivariance", "\n", "self", ".", "next_state", "=", "torch", ".", "zeros", "(", "g_size", ")", "\n", "self", ".", "models_trained", "=", "1", "# 1 corresponds to the base case", "\n", "self", ".", "time", "=", "0", "# Further, base_reward should be equal to zero.", "\n", "self", ".", "next_state_string", "=", "''", ".", "join", "(", "str", "(", "e", ")", "for", "e", "in", "self", ".", "next_state", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "trainimageset", "=", "trainimageset", "\n", "self", ".", "trainlabelset", "=", "trainlabelset", "\n", "self", ".", "testimageset", "=", "testimageset", "\n", "self", ".", "testlabelset", "=", "testlabelset", "\n", "self", ".", "child_network_dimensions", "=", "child_network_dimensions", "\n", "self", ".", "child_epochs", "=", "child_epochs", "\n", "self", ".", "child_lr", "=", "child_lr", "\n", "self", ".", "child_train_size", "=", "child_train_size", "\n", "self", ".", "child_test_size", "=", "child_test_size", "\n", "self", ".", "child_batch_size", "=", "child_batch_size", "\n", "self", ".", "child_test_batch_size", "=", "child_test_batch_size", "\n", "self", ".", "base_accuracy", "=", "self", ".", "get_state_accuracy", "(", "self", ".", "current_state", ")", "\n", "self", ".", "base_reward", "=", "self", ".", "get_state_reward", "(", "self", ".", "base_accuracy", ",", "self", ".", "base_accuracy", ")", "\n", "current_state_string", "=", "''", ".", "join", "(", "str", "(", "e", ")", "for", "e", "in", "self", ".", "current_state", ")", "\n", "self", ".", "visited_model_rewards", "=", "{", "current_state_string", ":", "self", ".", "base_reward", "}", "# Dictionary of models visited and their rewards. Models are saved in the form of a binary string of length g_size", "\n", "self", ".", "visited_model_accuracies", "=", "{", "current_state_string", ":", "self", ".", "base_accuracy", "}", "# Dictionary of models visited and their accuracies. Models are saved in the form of a binary string of length g_size", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.Environment.step": [[134, 167], ["action.item.item.item", "range", "gnas_fcc_MNIST.Environment.update_current_state", "gnas_fcc_MNIST.Environment.get_state_accuracy", "gnas_fcc_MNIST.Environment.get_state_reward", "str"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.update_current_state", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.get_state_accuracy", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.get_state_reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "#returns from QNN for the data augmentation problem; for this toy example it is going to return +100 for state = all 1s, and -1 for anything else", "\n", "    ", "reward", "=", "0", "\n", "accuracy", "=", "0", "\n", "new_models_trained", "=", "False", "\n", "done", "=", "False", "\n", "self", ".", "time", "+=", "1", "\n", "\n", "# Make action", "\n", "action", "=", "action", ".", "item", "(", ")", "\n", "\n", "# Update states", "\n", "for", "i", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "      ", "self", ".", "next_state", "[", "i", "]", "=", "self", ".", "current_state", "[", "i", "]", "\n", "", "self", ".", "next_state", "[", "action", "]", "=", "(", "self", ".", "current_state", "[", "action", "]", "+", "1", ")", "%", "2", "#remove for multiple adversaries", "\n", "self", ".", "update_current_state", "(", ")", "\n", "self", ".", "next_state_string", "=", "''", ".", "join", "(", "str", "(", "e", ")", "for", "e", "in", "self", ".", "next_state", ")", "\n", "\n", "# Update reward and accuracy", "\n", "if", "self", ".", "next_state_string", "not", "in", "self", ".", "visited_model_rewards", ":", "\n", "      ", "new_models_trained", "=", "True", "\n", "self", ".", "models_trained", "+=", "1", "\n", "accuracy", "=", "self", ".", "get_state_accuracy", "(", "self", ".", "current_state", ")", "\n", "reward", "=", "self", ".", "get_state_reward", "(", "accuracy", ",", "self", ".", "base_accuracy", ")", "\n", "self", ".", "visited_model_accuracies", "[", "self", ".", "next_state_string", "]", "=", "accuracy", "\n", "self", ".", "visited_model_rewards", "[", "self", ".", "next_state_string", "]", "=", "reward", "\n", "", "else", ":", "\n", "      ", "accuracy", "=", "self", ".", "visited_model_accuracies", "[", "self", ".", "next_state_string", "]", "\n", "reward", "=", "self", ".", "visited_model_rewards", "[", "self", ".", "next_state_string", "]", "\n", "\n", "", "if", "self", ".", "time", ">", "100", ":", "\n", "      ", "done", "=", "True", "\n", "", "return", "accuracy", ",", "reward", ",", "new_models_trained", ",", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.Environment.get_state_reward": [[168, 170], ["math.exp", "math.exp", "math.exp", "math.exp", "abs"], "methods", ["None"], ["", "def", "get_state_reward", "(", "self", ",", "state_accuracy", ",", "base_accuracy", ")", ":", "\n", "    ", "return", "(", "state_accuracy", "-", "base_accuracy", ")", "*", "math", ".", "exp", "(", "abs", "(", "state_accuracy", "-", "base_accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.Environment.get_state_accuracy": [[171, 191], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "equivariance_search_utilities.get_equivariant_network().to", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "train.parameters", "gnas_fcc_MNIST.train", "max", "equivariance_search_utilities.get_equivariant_network", "gnas_fcc_MNIST.test", "eq_array.tolist"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.train", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_equivariant_network", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.test"], ["", "def", "get_state_accuracy", "(", "self", ",", "state", ")", ":", "\n", "# Basic Hamming distance", "\n", "# goal_state = [0,1]*6", "\n", "# accuracy = sum([abs(x-y) for (x,y) in zip(goal_state,state)])", "\n", "    ", "torch", ".", "manual_seed", "(", "1", ")", "\n", "eq_array", "=", "state", "\n", "#print(\"Equivariance array\",eq_array)", "\n", "child_model", "=", "get_equivariant_network", "(", "self", ".", "child_network_dimensions", ",", "eq_array", ".", "tolist", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "#print(\"No. of parameters:\", sum(p.numel() for p in model.parameters() if p.requires_grad))", "\n", "child_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "child_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "child_model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "child_lr", ")", "\n", "test_accuracy", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "child_epochs", ")", ":", "\n", "#start_time = time.time()", "\n", "      ", "child_model", "=", "train", "(", "child_model", ",", "self", ".", "device", ",", "self", ".", "trainimageset", ",", "self", ".", "trainlabelset", ",", "child_criterion", ",", "child_optimizer", ",", "epoch", ",", "num_epochs", "=", "self", ".", "child_epochs", ",", "train_size", "=", "self", ".", "child_train_size", ")", "\n", "#time_elapsed = time.time() - start_time", "\n", "#print(\"Time elapsed\",time_elapsed,\"secs\")", "\n", "# test", "\n", "test_accuracy", "=", "max", "(", "test_accuracy", ",", "test", "(", "child_model", ",", "self", ".", "device", ",", "self", ".", "testimageset", ",", "self", ".", "testlabelset", ")", ")", "\n", "", "return", "test_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.Environment.update_avg_reward": [[192, 194], ["None"], "methods", ["None"], ["", "def", "update_avg_reward", "(", "self", ",", "reward", ",", "time", ")", ":", "\n", "    ", "self", ".", "avg_reward", "=", "(", "self", ".", "avg_reward", "*", "(", "time", "-", "1", ")", "+", "reward", ")", "/", "self", ".", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.Environment.update_avg_test_acc": [[195, 197], ["None"], "methods", ["None"], ["", "def", "update_avg_test_acc", "(", "self", ",", "test_acc", ",", "time", ")", ":", "\n", "    ", "self", ".", "avg_test_acc", "=", "(", "self", ".", "avg_test_acc", "*", "(", "time", "-", "1", ")", "+", "test_acc", ")", "/", "self", ".", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.Environment.update_current_state": [[198, 201], ["range"], "methods", ["None"], ["", "def", "update_current_state", "(", "self", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "      ", "self", ".", "current_state", "[", "i", "]", "=", "self", ".", "next_state", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.Environment.reset": [[202, 213], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "print", "random.random", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "random.sample"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.ReplayMemory.sample"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "#reset to state 0 w.p. 0.5, rest of the time set to an uniformly random vector of length k", "\n", "    ", "if", "random", ".", "random", "(", ")", ">", "0.0", ":", "\n", "      ", "self", ".", "current_state", "=", "torch", ".", "zeros", "(", "self", ".", "k", ")", "\n", "", "else", ":", "\n", "      ", "a", "=", "[", "0", "]", "*", "self", ".", "k", "+", "[", "1", "]", "*", "self", ".", "k", "\n", "self", ".", "current_state", "=", "torch", ".", "tensor", "(", "random", ".", "sample", "(", "a", ",", "self", ".", "k", ")", ")", "\n", "", "self", ".", "next_state", "=", "torch", ".", "zeros", "(", "self", ".", "k", ")", "\n", "print", "(", "\"Starting state:\"", ",", "self", ".", "current_state", ")", "\n", "self", ".", "time", "=", "0", "\n", "print", "(", "\"reset!\"", ")", "\n", "#=====================================================================Replay Memory===================================================================================================", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.ReplayMemory.__init__": [[220, 224], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "    ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "position", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.ReplayMemory.push": [[225, 231], ["Transition", "len", "gnas_fcc_MNIST.ReplayMemory.memory.append"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "*", "args", ")", ":", "\n", "    ", "\"Saves a transition\"", "\n", "if", "len", "(", "self", ".", "memory", ")", "<", "self", ".", "capacity", ":", "\n", "      ", "self", ".", "memory", ".", "append", "(", "None", ")", "\n", "", "self", ".", "memory", "[", "self", ".", "position", "]", "=", "Transition", "(", "*", "args", ")", "\n", "self", ".", "position", "=", "(", "self", ".", "position", "+", "1", ")", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.ReplayMemory.sample": [[232, 234], ["random.sample"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.ReplayMemory.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "    ", "return", "random", ".", "sample", "(", "self", ".", "memory", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.train": [[70, 86], ["range", "len", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step"], ["def", "train", "(", "net", ",", "device", ",", "trainimageset", ",", "trainlabelset", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "20", ",", "use_cuda", "=", "True", ",", "train_size", "=", "60000", ",", "batch_size", "=", "64", ")", ":", "\n", "\n", "  ", "for", "i", "in", "range", "(", "len", "(", "trainimageset", ")", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "      ", "images", "=", "trainimageset", "[", "i", "]", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "trainlabelset", "[", "i", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# Intialize the hidden weight to all zeros", "\n", "outputs", "=", "net", "(", "images", ")", "# Forward pass: compute the output class given a image", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "# Compute the loss: difference between the output class and the pre-given label", "\n", "loss", ".", "backward", "(", ")", "# Backward pass: compute the weight", "\n", "optimizer", ".", "step", "(", ")", "# Optimizer: update the weights of hidden nodes", "\n", "\n", "#if (i+1) % 40 == 0:                              # Logging", "\n", "#print('Epoch [%d/%d], Step [%d/%d], Loss: %.4f'", "\n", "#%(epoch+1, num_epochs, i+1, (train_size/batch_size), loss.item()))", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.test": [[87, 103], ["net.eval", "range", "len", "net", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "labels.size"], "function", ["None"], ["", "def", "test", "(", "net", ",", "device", ",", "testimageset", ",", "testlabelset", ",", "use_cuda", "=", "True", ")", ":", "\n", "  ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "testimageset", ")", ")", ":", "\n", "      ", "images", "=", "testimageset", "[", "i", "]", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "testlabelset", "[", "i", "]", "\n", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "# Choose the best class from the output: The class with the best score", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "# Increment the total count", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", "# Increment the correct count", "\n", "\n", "#print('Accuracy of the network on the 1K test images:', (100.0 * correct / total))", "\n", "", "return", "(", "100.0", "*", "correct", "/", "total", ")", "\n", "#=====================================================================Environment (keep it clean :p)============================================================================", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.select_action": [[239, 248], ["random.random", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "[].view().to", "[].view", "random.randrange", "policy_net().max", "policy_net"], "function", ["None"], ["def", "select_action", "(", "state", ",", "EPS", ",", "device", ",", "n_actions", ",", "policy_net", ")", ":", "\n", "  ", "global", "steps_done", "\n", "sample", "=", "random", ".", "random", "(", ")", "\n", "steps_done", "+=", "1", "\n", "if", "sample", ">", "EPS", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "return", "policy_net", "(", "state", ")", ".", "max", "(", "0", ")", "[", "1", "]", ".", "view", "(", "1", ",", "1", ")", ".", "to", "(", "device", ")", "#returns the index instead of the value", "\n", "", "", "else", ":", "\n", "    ", "return", "torch", ".", "tensor", "(", "[", "[", "random", ".", "randrange", "(", "n_actions", ")", "]", "]", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.plot_update": [[251, 259], ["matplotlib.figure", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.pause", "plt.figure.savefig"], "function", ["None"], ["", "", "def", "plot_update", "(", "x_models_trained", ",", "y_accuracy", ")", ":", "\n", "  ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Deep Q-learning MNIST'", ")", "\n", "plt", ".", "xlabel", "(", "'Models trained'", ")", "\n", "plt", ".", "ylabel", "(", "'Accuracy'", ")", "\n", "plt", ".", "plot", "(", "x_models_trained", ",", "y_accuracy", ",", "label", "=", "\"Accuray\"", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "#pause a bit so that plots are updated", "\n", "fig", ".", "savefig", "(", "'GNAS_FCNN_MNIST.eps'", ",", "format", "=", "'eps'", ",", "dpi", "=", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.plot_overall": [[260, 304], ["range", "matplotlib.figure", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.legend", "matplotlib.axis", "matplotlib.axis", "range", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "matplotlib.pause", "plt.figure.savefig", "v_lines.append", "len", "matplotlib.vlines", "sum", "range", "len", "len", "len", "str", "sum", "len", "str", "len", "sum", "len"], "function", ["None"], ["", "def", "plot_overall", "(", "x_models_trained", ",", "y_accuracy", ",", "aug_array_id", "=", "0", ")", ":", "\n", "# average windowed plot", "\n", "# averaged epsilon plot", "\n", "  ", "window_size", "=", "60", "# window_size < 200", "\n", "EPS_MODELS_TRAINED_LIST", "=", "[", "0", ",", "200", ",", "300", ",", "400", ",", "500", ",", "600", ",", "700", ",", "800", ",", "900", ",", "950", ",", "1000", ",", "1200", "]", "\n", "EPS_LIST", "=", "[", "1.0", ",", "0.9", ",", "0.8", ",", "0.7", ",", "0.6", ",", "0.5", ",", "0.4", ",", "0.3", ",", "0.2", ",", "0.1", ",", "0.05", ",", "0.01", "]", "\n", "\n", "y_accuracy_window", "=", "[", "sum", "(", "y_accuracy", "[", "i", ":", "i", "+", "window_size", "]", ")", "/", "window_size", "for", "i", "in", "range", "(", "len", "(", "y_accuracy", ")", "-", "window_size", ")", "]", "\n", "y_epsilon_accuracy", "=", "[", "]", "\n", "v_lines", "=", "[", "]", "\n", "x_models_trained_window", "=", "x_models_trained", "[", "window_size", ":", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "EPS_MODELS_TRAINED_LIST", ")", "-", "1", ")", ":", "\n", "    ", "array", "=", "y_accuracy", "[", "EPS_MODELS_TRAINED_LIST", "[", "i", "]", ":", "EPS_MODELS_TRAINED_LIST", "[", "i", "+", "1", "]", "]", "\n", "y_epsilon_accuracy", "+=", "[", "sum", "(", "array", ")", "/", "(", "len", "(", "array", ")", ")", "]", "*", "(", "len", "(", "array", ")", ")", "\n", "v_lines", ".", "append", "(", "sum", "(", "array", ")", "/", "(", "len", "(", "array", ")", ")", ")", "\n", "\n", "", "y_epsilon_accuracy", "=", "y_epsilon_accuracy", "[", "window_size", ":", "len", "(", "x_models_trained", ")", "]", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Deep Q-learning MNIST'", "+", "' Aug'", "+", "str", "(", "aug_array_id", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Models trained'", ")", "\n", "plt", ".", "ylabel", "(", "'Accuracy'", ")", "\n", "plt", ".", "plot", "(", "x_models_trained_window", ",", "y_accuracy_window", ",", "label", "=", "\"Rolling mean Accuray\"", ")", "\n", "plt", ".", "fill_between", "(", "x_models_trained_window", ",", "y_epsilon_accuracy", ",", "label", "=", "\"Average Accuracy Per Epsilon\"", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "plt", ".", "axis", "(", ")", "\n", "plt", ".", "axis", "(", "(", "x1", ",", "x2", ",", "5", ",", "y2", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "v_lines", ")", ")", ":", "\n", "    ", "plt", ".", "vlines", "(", "EPS_MODELS_TRAINED_LIST", "[", "i", "+", "1", "]", ",", "5", ",", "v_lines", "[", "i", "]", ",", "alpha", "=", "0.3", ")", "\n", "\n", "", "fig", ".", "text", "(", "0.18", ",", "0.14", ",", "'$\\epsilon=1$'", ")", "\n", "fig", ".", "text", "(", "0.275", ",", "0.14", ",", "'$.9$'", ")", "\n", "fig", ".", "text", "(", "0.35", ",", "0.14", ",", "'$.8$'", ")", "\n", "fig", ".", "text", "(", "0.428", ",", "0.14", ",", "'$.7$'", ")", "\n", "fig", ".", "text", "(", "0.490", ",", "0.14", ",", "'$.6$'", ")", "\n", "fig", ".", "text", "(", "0.568", ",", "0.14", ",", "'$.5$'", ")", "\n", "fig", ".", "text", "(", "0.637", ",", "0.14", ",", "'$.4$'", ")", "\n", "fig", ".", "text", "(", "0.705", ",", "0.14", ",", "'$.3$'", ")", "\n", "fig", ".", "text", "(", "0.762", ",", "0.14", ",", "'$.2$'", ")", "\n", "fig", ".", "text", "(", "0.795", ",", "0.14", ",", "'$.1$'", ")", "\n", "fig", ".", "text", "(", "0.83", ",", "0.14", ",", "'$.05$'", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "#pause a bit so that plots are updated", "\n", "fig", ".", "savefig", "(", "'GNAS_FCNN_MNIST_Aug'", "+", "str", "(", "aug_array_id", ")", "+", "'.eps'", ",", "format", "=", "'eps'", ",", "dpi", "=", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.optimize_model": [[309, 354], ["memory.sample", "Transition", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "policy_net().gather().to", "[].detach().to", "torch.smooth_l1_loss", "q_optimizer.zero_grad", "F.smooth_l1_loss.backward", "q_optimizer.step", "len", "expected_state_action_values.unsqueeze", "zip", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "policy_net().gather", "[].detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "policy_net", "target_net().max", "target_net"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.ReplayMemory.sample", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step"], ["", "def", "optimize_model", "(", "k", ",", "device", ",", "memory", ",", "q_optimizer", ",", "Q_BATCH_SIZE", ",", "Q_GAMMA", ")", ":", "\n", "  ", "if", "len", "(", "memory", ".", "memory", ")", "<", "Q_BATCH_SIZE", ":", "\n", "    ", "return", "\n", "", "transitions", "=", "memory", ".", "sample", "(", "Q_BATCH_SIZE", ")", "\n", "# Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for", "\n", "# detailed explanation). This converts batch-array of Transitions", "\n", "# to Transition of batch-arrays.", "\n", "batch", "=", "Transition", "(", "*", "zip", "(", "*", "transitions", ")", ")", "\n", "\n", "# Compute a mask of non-final states and concatenate the batch elements", "\n", "# (a final state would've been the one after which simulation ended)", "\n", "\n", "state_batch", "=", "torch", ".", "cat", "(", "batch", ".", "state", ")", ".", "view", "(", "Q_BATCH_SIZE", ",", "k", ")", ".", "to", "(", "device", ")", "\n", "action_batch", "=", "torch", ".", "cat", "(", "batch", ".", "action", ")", ".", "to", "(", "device", ")", "\n", "reward_batch", "=", "torch", ".", "cat", "(", "batch", ".", "reward", ")", ".", "to", "(", "device", ")", "\n", "next_state_batch", "=", "torch", ".", "cat", "(", "batch", ".", "next_state", ")", ".", "view", "(", "Q_BATCH_SIZE", ",", "k", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "# Compute Q(s_t, a) - the model computes Q(s_t), then we select the", "\n", "# columns of actions taken. These are the actions which would've been taken", "\n", "# for each batch state according to policy_net", "\n", "#print(\"State batch:\",state_batch)", "\n", "state_action_values", "=", "policy_net", "(", "state_batch", ")", ".", "gather", "(", "1", ",", "action_batch", ")", ".", "to", "(", "device", ")", "\n", "#print(\"state_action_values:\",state_action_values)", "\n", "\n", "# Compute V(s_{t+1}) for all next states.", "\n", "# Expected values of actions for non_final_next_states are computed based", "\n", "# on the \"older\" target_net; selecting their best reward with max(1)[0].", "\n", "# This is merged based on the mask, such that we'll have either the expected", "\n", "# state value or 0 in case the state was final.", "\n", "\n", "next_state_values", "=", "target_net", "(", "next_state_batch", ")", ".", "max", "(", "1", ")", "[", "0", "]", ".", "detach", "(", ")", ".", "to", "(", "device", ")", "\n", "#print(\"next_state_values:\",next_state_values)", "\n", "# Compute the expected Q values", "\n", "expected_state_action_values", "=", "(", "next_state_values", "*", "Q_GAMMA", ")", "+", "reward_batch", "\n", "#print(\"expected_state_action_values:\",expected_state_action_values)", "\n", "# Compute Huber loss", "\n", "loss", "=", "F", ".", "smooth_l1_loss", "(", "state_action_values", ",", "expected_state_action_values", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "# Optimize the model", "\n", "q_optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#for param in policy_net.parameters():", "\n", "#param.grad.data.clamp_(-1, 1)", "\n", "q_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.gnas_fcc_MNIST.main": [[355, 515], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "dataloader.get_mnist_trainloader", "dataloader.get_mnist_testloader", "enumerate", "enumerate", "gnas_fcc_MNIST.ReplayMemory", "target_net.load_state_dict", "target_net.eval", "torch.Adam", "gnas_fcc_MNIST.ReplayMemory", "gnas_fcc_MNIST.Environment", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "train_kwargs.update", "test_kwargs.update", "trainimageset.append", "trainlabelset.append", "testimageset.append", "testlabelset.append", "policy_net.state_dict", "policy_net.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "gnas_fcc_MNIST.select_action", "gnas_fcc_MNIST.Environment.step", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "gnas_fcc_MNIST.ReplayMemory.push", "gnas_fcc_MNIST.optimize_model", "policy_net.state_dict", "Variable().to", "Variable().to", "Variable().to", "Variable().to", "print", "y_accuracy.append", "x_models_trained.append", "steps_per_model_list.append", "print", "print", "print", "gnas_fcc_MNIST.plot_update", "gnas_fcc_MNIST.Environment.reset", "target_net.load_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "str", "str", "str", "str", "str", "str", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "policy_net.state_dict", "target_net.state_dict", "Variable", "Variable", "Variable", "Variable", "range", "str", "images.view", "images.view", "range"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_trainloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_testloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.select_action", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.ReplayMemory.push", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.optimize_model", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.plot_update", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.reset"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "# For multiple augmentations set the flag --multiple-augmentations to true", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Deep Q-learning MNIST'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-train-size'", ",", "type", "=", "int", ",", "default", "=", "60000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-test-size'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 14)'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 1.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-gamma'", ",", "type", "=", "float", ",", "default", "=", "0.7", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'Learning rate step gamma (default: 0.7)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dry-run'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'quickly check a single pass'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug-array-id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'augmentation index to be used from aug_array_list'", ")", "\n", "parser", ".", "add_argument", "(", "'--g-size'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "\n", "help", "=", "'Size of the group array'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_models'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'Maximum number of models to be trained'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_episodes'", ",", "type", "=", "int", ",", "default", "=", "60", ",", "\n", "help", "=", "'Maximum number of episodes'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "train_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "child_batch_size", "}", "\n", "test_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "child_test_batch_size", "}", "\n", "if", "use_cuda", ":", "\n", "    ", "cuda_kwargs", "=", "{", "'num_workers'", ":", "1", ",", "\n", "'pin_memory'", ":", "True", ",", "\n", "'shuffle'", ":", "True", "}", "\n", "train_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "test_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "\n", "", "multiple_aug_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "\n", "k", "=", "args", ".", "g_size", "\n", "aug_array", "=", "multiple_aug_array_list", "[", "args", ".", "aug_array_id", "]", "\n", "print", "(", "\"Augmentation array\"", ",", "aug_array", ")", "\n", "# Setup the dataset for child network", "\n", "trainloader", "=", "get_mnist_trainloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "train_size", "=", "args", ".", "child_train_size", ",", "batch_size", "=", "args", ".", "child_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "testloader", "=", "get_mnist_testloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "test_size", "=", "args", ".", "child_test_size", ",", "batch_size", "=", "args", ".", "child_test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "trainimageset", "=", "[", "]", "\n", "trainlabelset", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "trainloader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "    ", "trainimageset", ".", "append", "(", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", ".", "to", "(", "device", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "trainlabelset", ".", "append", "(", "Variable", "(", "labels", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "testimageset", "=", "[", "]", "\n", "testlabelset", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "    ", "testimageset", ".", "append", "(", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", ".", "to", "(", "device", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "testlabelset", ".", "append", "(", "Variable", "(", "labels", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "child_network_dimensions", "=", "[", "28", "*", "28", ",", "20", "*", "20", ",", "20", "*", "20", ",", "10", "]", "\n", "\n", "# Setup the Q-network and its hyperparameters", "\n", "input_size", "=", "args", ".", "g_size", "#12 by default", "\n", "hidden_sizes", "=", "[", "400", ",", "400", ",", "400", "]", "\n", "output_size", "=", "input_size", "\n", "n_actions", "=", "output_size", "\n", "memory", "=", "ReplayMemory", "(", "10000", ")", "\n", "#define the policy network and target network", "\n", "\n", "target_net", ".", "load_state_dict", "(", "policy_net", ".", "state_dict", "(", ")", ")", "\n", "target_net", ".", "eval", "(", ")", "\n", "\n", "q_optimizer", "=", "optim", ".", "Adam", "(", "policy_net", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "memory", "=", "ReplayMemory", "(", "10000", ")", "\n", "\n", "#=======================================================================Setup for Q-learning=============================================================================", "\n", "Q_BATCH_SIZE", "=", "128", "\n", "Q_GAMMA", "=", "0.5", "# Dependency on the future", "\n", "Q_EPS_LIST", "=", "[", "1.0", ",", "0.9", ",", "0.8", ",", "0.7", ",", "0.6", ",", "0.5", ",", "0.4", ",", "0.3", ",", "0.2", ",", "0.1", ",", "0.05", ",", "0.01", "]", "\n", "Q_EPS_INDEX", "=", "0", "\n", "Q_EPS", "=", "Q_EPS_LIST", "[", "Q_EPS_INDEX", "]", "\n", "Q_MODELS_TRAINED_LIST", "=", "[", "200", ",", "300", ",", "400", ",", "500", ",", "600", ",", "700", ",", "800", ",", "900", ",", "950", ",", "1000", ",", "1200", "]", "\n", "Q_TARGET_UPDATE", "=", "2", "\n", "env", "=", "Environment", "(", "device", "=", "device", ",", "trainimageset", "=", "trainimageset", ",", "trainlabelset", "=", "trainlabelset", ",", "testimageset", "=", "testimageset", ",", "testlabelset", "=", "testlabelset", ",", "child_network_dimensions", "=", "child_network_dimensions", ",", "child_train_size", "=", "args", ".", "child_train_size", ",", "child_test_size", "=", "args", ".", "child_test_size", ",", "child_batch_size", "=", "args", ".", "child_batch_size", ",", "child_test_batch_size", "=", "args", ".", "child_test_batch_size", ",", "child_lr", "=", "args", ".", "child_lr", ",", "child_epochs", "=", "args", ".", "child_epochs", ",", "g_size", "=", "args", ".", "g_size", ")", "# (self, device, trainimageset, trainlabelset, testimageset, testlabelset, child_network_dimensions, child_train_size, child_test_size, child_batch_size, child_test_batch_size, child_lr=1e-3, child_epochs=4, g_size=12)", "\n", "y_accuracy", "=", "[", "env", ".", "base_accuracy", "]", "# Compute the rolling mean accuracy and average per epsilon accuracy from here", "\n", "x_models_trained", "=", "[", "env", ".", "models_trained", "]", "# Should be an enumeration from 1,...,total models to be trained.", "\n", "steps_per_model_list", "=", "[", "]", "\n", "average_model_accuracy", "=", "env", ".", "base_accuracy", "\n", "steps_per_model", "=", "1", "# Considering the base accuracies and steps", "\n", "num_episodes", "=", "0", "\n", "\n", "#==========================================================================Iteration loop===============================================================================", "\n", "while", "env", ".", "models_trained", "<", "args", ".", "max_models", "and", "num_episodes", "<", "args", ".", "max_episodes", ":", "\n", "# Select and perform an action", "\n", "    ", "state", "=", "torch", ".", "tensor", "(", "[", "env", ".", "current_state", "[", "i", "]", "for", "i", "in", "range", "(", "env", ".", "k", ")", "]", ")", ".", "to", "(", "device", ")", "\n", "action", "=", "select_action", "(", "state", ",", "Q_EPS", ",", "device", ",", "n_actions", ",", "policy_net", ")", "\n", "accuracy", ",", "reward", ",", "new_models_trained", ",", "done", "=", "env", ".", "step", "(", "action", ")", "# done = True when 1 episode completes, new_models_trained = True only when a new model has been trained in the step", "\n", "reward", "=", "torch", ".", "tensor", "(", "[", "reward", "]", ",", "device", "=", "device", ")", "\n", "next_state", "=", "torch", ".", "tensor", "(", "[", "env", ".", "next_state", "[", "i", "]", "for", "i", "in", "range", "(", "env", ".", "k", ")", "]", ")", "\n", "memory", ".", "push", "(", "state", ",", "action", ",", "next_state", ",", "reward", ")", "\n", "\n", "steps_per_model", "+=", "1", "\n", "average_model_accuracy", "=", "(", "average_model_accuracy", "*", "(", "steps_per_model", "-", "1", ")", "+", "accuracy", ")", "/", "steps_per_model", "\n", "\n", "#================================================Perform one step of the optimization (on the target network)===========================================================", "\n", "optimize_model", "(", "env", ".", "k", ",", "device", ",", "memory", ",", "q_optimizer", ",", "Q_BATCH_SIZE", ",", "Q_GAMMA", ")", "\n", "#=======================Check if new models are trained===========================================", "\n", "if", "new_models_trained", ":", "\n", "      ", "print", "(", "\"Number of models trained:\"", ",", "env", ".", "models_trained", ")", "\n", "y_accuracy", ".", "append", "(", "average_model_accuracy", ")", "\n", "x_models_trained", ".", "append", "(", "env", ".", "models_trained", ")", "\n", "steps_per_model_list", ".", "append", "(", "steps_per_model", ")", "\n", "average_model_accuracy", "=", "0", "\n", "steps_per_model", "=", "0", "\n", "if", "env", ".", "models_trained", "in", "Q_MODELS_TRAINED_LIST", ":", "\n", "        ", "Q_EPS_INDEX", "+=", "1", "\n", "Q_EPS", "=", "Q_EPS_LIST", "[", "Q_EPS_INDEX", "]", "\n", "\n", "", "", "if", "done", ":", "\n", "      ", "num_episodes", "+=", "1", "\n", "print", "(", "\"Number of episodes:\"", ",", "num_episodes", ")", "\n", "print", "(", "\"Current state:\"", ",", "env", ".", "current_state", ")", "\n", "print", "(", "\"Current epsilon value:\"", ",", "Q_EPS", ")", "\n", "plot_update", "(", "x_models_trained", ",", "y_accuracy", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# Update the target network, copying all weights and biases in DQN", "\n", "", "if", "env", ".", "models_trained", "%", "Q_TARGET_UPDATE", "==", "0", ":", "\n", "      ", "target_net", ".", "load_state_dict", "(", "policy_net", ".", "state_dict", "(", ")", ")", "\n", "torch", ".", "save", "(", "target_net", ".", "state_dict", "(", ")", ",", "\"Target_Net_MNIST_DQN_AUG_\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ")", "\n", "\n", "#plot_overall(x_models_trained, y_accuracy, args.aug_array_id)", "\n", "\n", "# Save network and plot data", "\n", "", "", "np", ".", "save", "(", "\"y_accuracy\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "y_accuracy", ")", "\n", "np", ".", "save", "(", "\"x_models_trained\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "x_models_trained", ")", "\n", "np", ".", "save", "(", "\"steps_per_model_list\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "steps_per_model_list", ")", "\n", "np", ".", "save", "(", "\"model_accuracies\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "env", ".", "visited_model_accuracies", ")", "\n", "np", ".", "save", "(", "\"model_rewards\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "env", ".", "visited_model_rewards", ")", "\n", "torch", ".", "save", "(", "policy_net", ".", "state_dict", "(", ")", ",", "\"MNIST_DQN_AUG_\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ")", "\n", "print", "(", "'Complete'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble1.__init__": [[7, 10], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble1.__call__": [[11, 15], ["torch.multinomial", "augmentation_functions.RandomScramble1.synthetic1_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic1_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic1_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble1.synthetic1_matrix": [[16, 24], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble1.get_next_indices_sc1"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1"], ["", "def", "synthetic1_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble1.get_next_indices_sc1": [[25, 39], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc1", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble2.__init__": [[41, 44], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble2.__call__": [[45, 49], ["torch.multinomial", "augmentation_functions.RandomScramble2.synthetic2_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic2_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic2_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble2.synthetic2_matrix": [[50, 58], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble2.get_next_indices_sc2"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2"], ["", "def", "synthetic2_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble2.get_next_indices_sc2": [[59, 63], ["int"], "methods", ["None"], ["", "def", "get_next_indices_sc2", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble3.__init__": [[65, 68], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble3.__call__": [[69, 73], ["torch.multinomial", "augmentation_functions.RandomScramble3.synthetic3_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic3_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic3_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble3.synthetic3_matrix": [[74, 84], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble3.get_next_indices_sc3"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3"], ["", "def", "synthetic3_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble3.get_next_indices_sc3": [[85, 89], ["int"], "methods", ["None"], ["", "def", "get_next_indices_sc3", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble4.__init__": [[91, 94], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble4.__call__": [[95, 99], ["torch.multinomial", "augmentation_functions.RandomScramble4.synthetic4_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic4_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic4_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble4.synthetic4_matrix": [[100, 110], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble4.get_next_indices_sc4"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4"], ["", "def", "synthetic4_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble4.get_next_indices_sc4": [[111, 119], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc4", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble5.__init__": [[121, 124], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble5.__call__": [[125, 129], ["torch.multinomial", "augmentation_functions.RandomScramble5.synthetic5_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic5_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic5_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble5.synthetic5_matrix": [[130, 140], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble5.get_next_indices_sc5"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5"], ["", "def", "synthetic5_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble5.get_next_indices_sc5": [[141, 149], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc5", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble6.__init__": [[151, 154], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble6.__call__": [[155, 159], ["torch.multinomial", "augmentation_functions.RandomScramble6.synthetic6_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic6_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic6_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble6.synthetic6_matrix": [[160, 170], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble6.get_next_indices_sc6"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6"], ["", "def", "synthetic6_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble6.get_next_indices_sc6": [[171, 179], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc6", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble7.__init__": [[182, 185], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble7.__call__": [[186, 190], ["torch.multinomial", "augmentation_functions.RandomScramble7.synthetic7_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic7_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic7_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble7.synthetic7_matrix": [[191, 201], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble7.get_next_indices_sc7"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7"], ["", "def", "synthetic7_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomScramble7.get_next_indices_sc7": [[202, 210], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc7", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomVertical.__init__": [[212, 216], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ",", "d", "=", "1", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "d", "=", "d", "#displacement magnitude", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomVertical.__call__": [[217, 221], ["torch.multinomial", "augmentation_functions.RandomVertical.vtrans_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.vtrans_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "vtrans_matrix", "(", "tensor", ",", "self", ".", "d", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomVertical.vtrans_matrix": [[222, 232], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomVertical.get_next_indices_sc8"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8"], ["", "def", "vtrans_matrix", "(", "self", ",", "w", ",", "d", "=", "1", ")", ":", "\n", "      ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomVertical.get_next_indices_sc8": [[233, 238], ["None"], "methods", ["None"], ["", "def", "get_next_indices_sc8", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "        ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomHorizontal.__init__": [[240, 244], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ",", "d", "=", "1", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "d", "=", "d", "#displacement magnitude", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomHorizontal.__call__": [[245, 249], ["torch.multinomial", "augmentation_functions.RandomHorizontal.htrans_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.htrans_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "htrans_matrix", "(", "tensor", ",", "self", ".", "d", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomHorizontal.htrans_matrix": [[250, 260], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomHorizontal.get_next_indices_sc9"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9"], ["", "def", "htrans_matrix", "(", "self", ",", "w", ",", "d", "=", "1", ")", ":", "\n", "      ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.RandomHorizontal.get_next_indices_sc9": [[261, 266], ["None"], "methods", ["None"], ["", "def", "get_next_indices_sc9", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "        ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.CIFAR_dimension_3_to_1.__call__": [[268, 271], ["augmentation_functions.CIFAR_dimension_3_to_1.dimension_3_to_1"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.CIFAR_dimension_3_to_1.dimension_3_to_1"], ["    ", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "tensor", "=", "self", ".", "dimension_3_to_1", "(", "tensor", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.CIFAR_dimension_3_to_1.dimension_3_to_1": [[272, 280], ["w[].size", "torch.rand", "range", "torch.rand.view", "range"], "methods", ["None"], ["", "def", "dimension_3_to_1", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "(", "w", "[", "0", ",", "i", ",", "j", "]", "+", "w", "[", "1", ",", "i", ",", "j", "]", "+", "w", "[", "2", ",", "i", ",", "j", "]", ")", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.rotation_matrix": [[290, 300], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "", "def", "rotation_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by 90\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "j", ",", "i", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.hflip_matrix": [[302, 312], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "hflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Hflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "i", ",", "m", "-", "1", "-", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.vflip_matrix": [[314, 324], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "vflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Vflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "i", ",", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.get_next_indices_sc1": [[327, 341], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.synthetic1_matrix": [[342, 351], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc1"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1"], ["", "def", "synthetic1_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.get_next_indices_sc2": [[353, 358], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.synthetic2_matrix": [[359, 369], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc2"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2"], ["", "def", "synthetic2_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.get_next_indices_sc3": [[371, 376], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.synthetic3_matrix": [[377, 387], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc3"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3"], ["", "def", "synthetic3_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.get_next_indices_sc4": [[389, 397], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.synthetic4_matrix": [[398, 408], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc4"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4"], ["", "def", "synthetic4_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.get_next_indices_sc5": [[410, 418], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.synthetic5_matrix": [[419, 429], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc5"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5"], ["", "def", "synthetic5_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.get_next_indices_sc6": [[431, 439], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.synthetic6_matrix": [[440, 450], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc6"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6"], ["", "def", "synthetic6_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.get_next_indices_sc7": [[452, 460], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.synthetic7_matrix": [[461, 471], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc7"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7"], ["", "def", "synthetic7_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.get_next_indices_sc8": [[473, 478], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.vtrans_matrix": [[479, 489], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc8"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8"], ["", "def", "vtrans_matrix", "(", "w", ",", "d", "=", "1", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.get_next_indices_sc9": [[491, 496], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.augmentation_functions.htrans_matrix": [[497, 507], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc9"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9"], ["", "def", "htrans_matrix", "(", "w", ",", "d", "=", "1", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.dataloader.mnist_transform_array": [[33, 43], ["torch.zeros", "range", "transforms_array.append", "len", "torchvision.Normalize", "transforms_array.append", "transforms_array.append", "torchvision.ToTensor"], "function", ["None"], ["def", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", "=", "torch", ".", "zeros", "(", "12", ")", ")", ":", "\n", "# Outputs the array of transformations from aug_array", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "transforms_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aug_array", ")", ")", ":", "\n", "    ", "if", "i", "==", "3", ":", "\n", "      ", "transforms_array", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "", "if", "aug_array", "[", "i", "]", ">", "0", ":", "\n", "      ", "transforms_array", ".", "append", "(", "aug_dict", "[", "i", "]", ")", "\n", "", "", "transforms_array", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ")", "\n", "return", "transforms_array", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.dataloader.get_mnist_trainloader": [[45, 51], ["torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["# Get trainloader with augmentation of choice", "\n", "", "def", "get_mnist_trainloader", "(", "aug_array", ",", "train_size", "=", "2000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.dataloader.get_mnist_trainset": [[53, 58], ["torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["\n", "# Get trainset with augmentation of choice", "\n", "", "def", "get_mnist_trainset", "(", "aug_array", ",", "train_size", "=", "2000", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.dataloader.get_mnist_testloader": [[60, 66], ["torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["return", "trainset_mini", "\n", "\n", "# Get testloader with augmentation of choice", "\n", "", "def", "get_mnist_testloader", "(", "aug_array", ",", "test_size", "=", "1000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "testtransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.dataloader.get_mnist_testset": [[68, 73], ["torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "return", "testloader", "\n", "\n", "# Get testset with augmentation of choice", "\n", "", "def", "get_mnist_testset", "(", "aug_array", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.dataloader.cifar10_transform_array": [[80, 91], ["torch.zeros", "range", "transforms_array.append", "len", "torchvision.Normalize", "transforms_array.append", "transforms_array.append", "transforms_array.append", "torchvision.ToTensor", "augmentation_functions.CIFAR_dimension_3_to_1"], "function", ["None"], ["\n", "\n", "#######################################################################################################################", "\n", "# Fashion MNIST", "\n", "#######################################################################################################################", "\n", "\n", "# Composing the augmentation array from aug_array using aug_dict", "\n", "def", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", "=", "torch", ".", "zeros", "(", "12", ")", ")", ":", "\n", "# Outputs the array of transformations from aug_array", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "transforms_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aug_array", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.dataloader.get_cifar10_trainloader": [[93, 99], ["torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.cifar10_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.cifar10_transform_array"], ["      ", "transforms_array", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "", "if", "aug_array", "[", "i", "]", ">", "0", ":", "\n", "      ", "transforms_array", ".", "append", "(", "aug_dict", "[", "i", "]", ")", "\n", "", "", "transforms_array", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ")", "\n", "return", "transforms_array", "\n", "\n", "# Get trainloader with augmentation of choice", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.dataloader.get_cifar10_testloader": [[101, 107], ["torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.cifar10_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.cifar10_transform_array"], ["  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "FashionMNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_search_utilities.EQNet.__init__": [[26, 35], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.EQNet.__init__"], ["return", "out", "\n", "\n", "\n", "\n", "", "", "def", "get_total_parameters", "(", "network_dimensions", ",", "n_orbits", ")", ":", "\n", "  ", "total", "=", "n_orbits", "[", "0", "]", "+", "network_dimensions", "[", "1", "]", "+", "n_orbits", "[", "1", "]", "+", "network_dimensions", "[", "2", "]", "+", "network_dimensions", "[", "2", "]", "*", "network_dimensions", "[", "3", "]", "+", "network_dimensions", "[", "3", "]", "\n", "return", "total", "\n", "\n", "", "def", "get_equivariance_indices", "(", "eq_array", ",", "I_prev_orbits", ",", "I_prev_index_to_orbit", ",", "input_size", ",", "hidden_size", ")", ":", "\n", "  ", "I_orbits", ",", "I_index_to_orbit", "=", "I_prev_orbits", ",", "I_prev_index_to_orbit", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_search_utilities.EQNet.forward": [[37, 44], ["[].view", "[].view", "equivariance_search_utilities.EQNet.relu", "equivariance_search_utilities.EQNet.relu", "out.mm", "x.mm", "out.mm", "torch.transpose", "equivariance_search_utilities.EQNet.fc1.weight.view", "equivariance_search_utilities.EQNet.fc2.weight.view"], "methods", ["None"], ["\"synthetic4\"", ",", "\"synthetic5\"", ",", "\"synthetic6\"", ",", "\"synthetic7\"", "]", "\n", "G", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "eq_array", ")", ")", ":", "\n", "    ", "if", "eq_array", "[", "i", "]", "==", "1", ":", "\n", "      ", "G", ".", "append", "(", "G_list", "[", "i", "]", ")", "\n", "\n", "", "", "for", "g", "in", "G", ":", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_search_utilities.get_total_parameters": [[47, 50], ["None"], "function", ["None"], ["\n", "", "return", "I_orbits", ",", "I_index_to_orbit", "\n", "\n", "", "def", "get_equivariant_network", "(", "network_dimensions", "=", "[", "28", "*", "28", ",", "20", "*", "20", ",", "20", "*", "20", ",", "10", "]", ",", "eq_array", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_search_utilities.get_equivariance_indices": [[51, 66], ["range", "len", "get_g_eq_index", "G.append", "int", "int", "math.sqrt", "math.sqrt"], "function", ["None"], ["# get the equivariance indices", "\n", "  ", "I_prev_orbits", "=", "[", "]", "\n", "I_prev_index_to_orbit", "=", "[", "]", "\n", "I_orbits", "=", "[", "]", "\n", "I_index_to_orbit", "=", "[", "]", "\n", "n_orbits", "=", "[", "]", "\n", "\n", "for", "it", "in", "range", "(", "len", "(", "network_dimensions", ")", "-", "2", ")", ":", "\n", "#I_prev_orbits.append([{i} for i in range(network_dimensions[it]*network_dimensions[it+1])])", "\n", "\n", "    ", "m", ",", "h", "=", "int", "(", "math", ".", "sqrt", "(", "network_dimensions", "[", "it", "]", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "network_dimensions", "[", "it", "+", "1", "]", ")", ")", "\n", "I_prev_index_to_orbit", ".", "append", "(", "[", "i", "for", "i", "in", "range", "(", "network_dimensions", "[", "it", "]", "*", "network_dimensions", "[", "it", "+", "1", "]", ")", "]", ")", "\n", "I_index_to_orbit", ".", "append", "(", "squeeze_orbits", "(", "get_G_list_equivariance_indices_graph", "(", "m", ",", "h", ",", "eq_array", ",", "I_prev_index_to_orbit", "[", "it", "]", ",", "d", "=", "4", ")", ")", ")", "\n", "#I_orbits.append(temp_1)", "\n", "#I_index_to_orbit.append(temp_2)", "\n", "n_orbits", ".", "append", "(", "len", "(", "set", "(", "I_index_to_orbit", "[", "it", "]", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_search_utilities.get_equivariant_network": [[67, 97], ["range", "equivariance_search_utilities.EQNet", "equivariance_search_utilities.get_total_parameters", "print", "I_prev_index_to_orbit.append", "I_index_to_orbit.append", "n_orbits.append", "len", "int", "int", "equivariance_search_utilities.squeeze_orbits", "len", "math.sqrt", "math.sqrt", "equivariance_functions.get_G_list_equivariance_indices_graph", "set", "range"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_total_parameters", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.squeeze_orbits", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_G_list_equivariance_indices_graph"], ["\n", "", "eq_indices", "=", "I_index_to_orbit", "\n", "\n", "# define the network model", "\n", "eqnet", "=", "EQNet", "(", "network_dimensions", ",", "eq_indices", ",", "n_orbits", ")", "\n", "\n", "# count the number of parameters", "\n", "pytorch_total_params_orbits", "=", "get_total_parameters", "(", "network_dimensions", ",", "n_orbits", ")", "\n", "print", "(", "\"net parameters orbits:\"", ",", "pytorch_total_params_orbits", ")", "\n", "\n", "#pytorch_total_params = sum(p.numel() for p in eqnet.parameters() if p.requires_grad)", "\n", "#print(\"net parameters:\",pytorch_total_params)", "\n", "return", "eqnet", "\n", "\n", "", "def", "squeeze_orbits", "(", "orbits", ")", ":", "\n", "\n", "  ", "sorted_orbits", ",", "arg_sorted_orbits", "=", "np", ".", "sort", "(", "orbits", ")", ",", "np", ".", "argsort", "(", "orbits", ")", "\n", "rank_orbits", "=", "np", ".", "argsort", "(", "arg_sorted_orbits", ")", "\n", "sorted_ranked_orbits", "=", "[", "]", "\n", "\n", "sorted_orbits", "=", "sorted_orbits", "-", "min", "(", "sorted_orbits", ")", "\n", "sorted_orbits", "=", "sorted_orbits", ".", "tolist", "(", ")", "\n", "\n", "current_rank", "=", "0", "\n", "current_orbit", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "sorted_orbits", ")", ")", ":", "\n", "    ", "if", "sorted_orbits", "[", "i", "]", ">", "current_orbit", ":", "\n", "      ", "current_orbit", "=", "sorted_orbits", "[", "i", "]", "\n", "sorted_orbits", "[", "i", "]", "=", "current_rank", "+", "1", "\n", "current_rank", "+=", "1", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_search_utilities.squeeze_orbits": [[98, 119], ["numpy.argsort", "sorted_orbits.tolist.tolist", "range", "numpy.sort", "numpy.argsort", "min", "len", "range", "len"], "function", ["None"], ["      ", "sorted_orbits", "[", "i", "]", "=", "current_rank", "\n", "\n", "", "", "orbits_new", "=", "[", "sorted_orbits", "[", "rank_orbits", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "sorted_orbits", ")", ")", "]", "\n", "return", "orbits_new", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.rotation_matrix": [[7, 17], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["def", "rotation_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by 90\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "j", ",", "i", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.hflip_matrix": [[19, 29], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "hflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Hflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "i", ",", "m", "-", "1", "-", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.vflip_matrix": [[31, 41], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "vflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Vflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "i", ",", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.get_next_indices_sc1": [[44, 58], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.synthetic1_matrix": [[59, 68], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc1"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1"], ["", "def", "synthetic1_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.get_next_indices_sc2": [[70, 75], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.synthetic2_matrix": [[76, 86], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc2"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2"], ["", "def", "synthetic2_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.get_next_indices_sc3": [[88, 93], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.synthetic3_matrix": [[94, 104], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc3"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3"], ["", "def", "synthetic3_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.get_next_indices_sc4": [[106, 114], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.synthetic4_matrix": [[115, 125], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc4"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4"], ["", "def", "synthetic4_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.get_next_indices_sc5": [[127, 135], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.synthetic5_matrix": [[136, 146], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc5"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5"], ["", "def", "synthetic5_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.get_next_indices_sc6": [[148, 156], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.synthetic6_matrix": [[157, 167], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc6"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6"], ["", "def", "synthetic6_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.get_next_indices_sc7": [[169, 177], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.synthetic7_matrix": [[178, 188], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc7"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7"], ["", "def", "synthetic7_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.get_next_indices_sc8": [[190, 195], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.vtrans_matrix": [[196, 206], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc8"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8"], ["", "def", "vtrans_matrix", "(", "w", ",", "d", "=", "4", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.get_next_indices_sc9": [[208, 213], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.group_transformation_matrices.htrans_matrix": [[214, 224], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc9"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9"], ["", "def", "htrans_matrix", "(", "w", ",", "d", "=", "4", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_functions.get_next_indices_sc1": [[6, 20], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_functions.get_next_indices_sc2": [[21, 26], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_functions.get_next_indices_sc3": [[27, 32], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_functions.get_next_indices_sc4": [[33, 41], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_functions.get_next_indices_sc5": [[42, 50], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_functions.get_next_indices_sc6": [[51, 59], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_functions.get_next_indices_sc7": [[60, 68], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_functions.get_next_indices_vert_trans": [[69, 74], ["None"], "function", ["None"], ["", "def", "get_next_indices_vert_trans", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_functions.get_next_indices_hori_trans": [[75, 80], ["None"], "function", ["None"], ["", "def", "get_next_indices_hori_trans", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.MNIST DQN.equivariance_functions.get_G_list_equivariance_indices_graph": [[81, 397], ["range", "print", "numpy.zeros", "range", "indices_queue.append", "indices_queue_pair.append", "len", "indices_queue.pop", "indices_queue_pair.pop", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc2", "equivariance_functions.get_next_indices_sc2", "equivariance_functions.get_next_indices_sc3", "equivariance_functions.get_next_indices_sc3", "equivariance_functions.get_next_indices_sc4", "equivariance_functions.get_next_indices_sc4", "equivariance_functions.get_next_indices_sc5", "equivariance_functions.get_next_indices_sc5", "equivariance_functions.get_next_indices_sc6", "equivariance_functions.get_next_indices_sc6", "equivariance_functions.get_next_indices_sc7", "equivariance_functions.get_next_indices_sc7", "range", "range", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "equivariance_functions.get_next_indices_vert_trans", "equivariance_functions.get_next_indices_vert_trans", "equivariance_functions.get_next_indices_hori_trans", "equivariance_functions.get_next_indices_hori_trans", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_vert_trans", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_vert_trans", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_hori_trans", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_hori_trans"], ["", "def", "get_G_list_equivariance_indices_graph", "(", "m", ",", "h", ",", "eq_array", ",", "I_prev", ",", "d", "=", "4", ")", ":", "\n", "  ", "\"Size of input layer = m*m; size of hidden layer = h*h; I permuted indices\"", "\n", "\"d=4 is the default translation step used\"", "\n", "\n", "nx", "=", "m", "*", "m", "#size of X", "\n", "nh", "=", "h", "*", "h", "#size of hidden layer", "\n", "I", "=", "I_prev", "#records the permutation of indices of W, which is of size n*n. For no previous symmetry, I_prev is given as the original indices", "\n", "V", "=", "np", ".", "zeros", "(", "nx", "*", "nh", ")", "-", "1", "#-1 if not visited, else 1", "\n", "current_orbit", "=", "-", "1", "\n", "indices_queue", "=", "[", "]", "\n", "indices_queue_pair", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "nx", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "nh", ")", ":", "\n", "      ", "i_0", "=", "i", "\n", "j_0", "=", "j", "\n", "if", "V", "[", "i_0", "*", "nh", "+", "j_0", "]", "<", "0", ":", "\n", "        ", "V", "[", "i_0", "*", "nh", "+", "j_0", "]", "=", "1", "\n", "index", "=", "i_0", "*", "nh", "+", "j_0", "\n", "indices_queue", ".", "append", "(", "index", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_0", ",", "j_0", "]", ")", "\n", "current_orbit", "+=", "1", "\n", "while", "len", "(", "indices_queue", ")", ">", "0", ":", "\n", "          ", "index", "=", "indices_queue", ".", "pop", "(", "0", ")", "\n", "i_0", ",", "j_0", "=", "indices_queue_pair", ".", "pop", "(", "0", ")", "\n", "I", "[", "index", "]", "=", "current_orbit", "\n", "\n", "if", "eq_array", "[", "0", "]", "==", "1", ":", "\n", "# rotations  ", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#rotate by 90", "\n", "alpha_r", ",", "beta_r", "=", "beta", ",", "m", "-", "1", "-", "alpha", "\n", "gamma_r", ",", "delta_r", "=", "delta", ",", "h", "-", "1", "-", "gamma", "\n", "\n", "i_r", "=", "alpha_r", "*", "m", "+", "beta_r", "\n", "j_r", "=", "gamma_r", "*", "h", "+", "delta_r", "\n", "\n", "index_r", "=", "i_r", "*", "nh", "+", "j_r", "\n", "if", "V", "[", "index_r", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_r", "]", "=", "1", "\n", "I", "[", "index_r", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_r", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_r", ",", "j_r", "]", ")", "\n", "\n", "#rotate by 180", "\n", "", "alpha_rr", ",", "beta_rr", "=", "beta_r", ",", "m", "-", "1", "-", "alpha_r", "\n", "gamma_rr", ",", "delta_rr", "=", "delta_r", ",", "h", "-", "1", "-", "gamma_r", "\n", "\n", "i_rr", "=", "alpha_rr", "*", "m", "+", "beta_rr", "\n", "j_rr", "=", "gamma_rr", "*", "h", "+", "delta_rr", "\n", "\n", "index_rr", "=", "i_rr", "*", "nh", "+", "j_rr", "\n", "if", "V", "[", "index_rr", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_rr", "]", "=", "1", "\n", "I", "[", "index_rr", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_rr", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_rr", ",", "j_rr", "]", ")", "\n", "\n", "#rotate by 270", "\n", "", "alpha_rrr", ",", "beta_rrr", "=", "beta_rr", ",", "m", "-", "1", "-", "alpha_rr", "\n", "gamma_rrr", ",", "delta_rrr", "=", "delta_rr", ",", "h", "-", "1", "-", "gamma_rr", "\n", "\n", "i_rrr", "=", "alpha_rrr", "*", "m", "+", "beta_rrr", "\n", "j_rrr", "=", "gamma_rrr", "*", "h", "+", "delta_rrr", "\n", "\n", "index_rrr", "=", "i_rrr", "*", "nh", "+", "j_rrr", "\n", "if", "V", "[", "index_rrr", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_rrr", "]", "=", "1", "\n", "I", "[", "index_rrr", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_rrr", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_rrr", ",", "j_rrr", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "1", "]", "==", "1", ":", "\n", "# horizontal flip", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#hflip", "\n", "alpha_h", ",", "beta_h", "=", "alpha", ",", "m", "-", "1", "-", "beta", "\n", "gamma_h", ",", "delta_h", "=", "gamma", ",", "h", "-", "1", "-", "delta", "\n", "\n", "i_h", "=", "alpha_h", "*", "m", "+", "beta_h", "\n", "j_h", "=", "gamma_h", "*", "h", "+", "delta_h", "\n", "\n", "index_h", "=", "i_h", "*", "nh", "+", "j_h", "\n", "if", "V", "[", "index_h", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_h", "]", "=", "1", "\n", "I", "[", "index_h", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_h", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_h", ",", "j_h", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "2", "]", "==", "1", ":", "\n", "# vertical flip", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#vflip", "\n", "alpha_h", ",", "beta_h", "=", "m", "-", "1", "-", "alpha", ",", "beta", "\n", "gamma_h", ",", "delta_h", "=", "h", "-", "1", "-", "gamma", ",", "delta", "\n", "\n", "i_h", "=", "alpha_h", "*", "m", "+", "beta_h", "\n", "j_h", "=", "gamma_h", "*", "h", "+", "delta_h", "\n", "\n", "index_h", "=", "i_h", "*", "nh", "+", "j_h", "\n", "if", "V", "[", "index_h", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_h", "]", "=", "1", "\n", "I", "[", "index_h", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_h", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_h", ",", "j_h", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "10", "]", "==", "1", ":", "\n", "# synthetic 1", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to quadrant 2", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc1", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc1", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "#move to quadrant 3", "\n", "", "alpha_qq", ",", "beta_qq", "=", "get_next_indices_sc1", "(", "alpha_q", ",", "beta_q", ",", "m", ",", "m", ")", "\n", "gamma_qq", ",", "delta_qq", "=", "get_next_indices_sc1", "(", "gamma_q", ",", "delta_q", ",", "h", ",", "h", ")", "\n", "\n", "i_qq", "=", "alpha_qq", "*", "m", "+", "beta_qq", "\n", "j_qq", "=", "gamma_qq", "*", "h", "+", "delta_qq", "\n", "\n", "index_qq", "=", "i_qq", "*", "nh", "+", "j_qq", "\n", "if", "V", "[", "index_qq", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_qq", "]", "=", "1", "\n", "I", "[", "index_qq", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_qq", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_qq", ",", "j_qq", "]", ")", "\n", "\n", "#move to quadrant 4", "\n", "", "alpha_qqq", ",", "beta_qqq", "=", "get_next_indices_sc1", "(", "alpha_qq", ",", "beta_qq", ",", "m", ",", "m", ")", "\n", "gamma_qqq", ",", "delta_qqq", "=", "get_next_indices_sc1", "(", "gamma_qq", ",", "delta_qq", ",", "h", ",", "h", ")", "\n", "\n", "i_qqq", "=", "alpha_qqq", "*", "m", "+", "beta_qqq", "\n", "j_qqq", "=", "gamma_qqq", "*", "h", "+", "delta_qqq", "\n", "\n", "index_qqq", "=", "i_qqq", "*", "nh", "+", "j_qqq", "\n", "if", "V", "[", "index_qqq", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_qqq", "]", "=", "1", "\n", "I", "[", "index_qqq", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_qqq", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_qqq", ",", "j_qqq", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "11", "]", "==", "1", ":", "\n", "# synthetic 2", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc2", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc2", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "5", "]", "==", "1", ":", "\n", "# synthetic 3", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc3", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc3", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "6", "]", "==", "1", ":", "\n", "# synthetic 4", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc4", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc4", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "7", "]", "==", "1", ":", "\n", "# synthetic 5", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc5", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc5", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "8", "]", "==", "1", ":", "\n", "# synthetic 6", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc6", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc6", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "9", "]", "==", "1", ":", "\n", "# synthetic 7", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc7", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc7", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "4", "]", "==", "1", ":", "\n", "# vertical translation ", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "for", "it", "in", "range", "(", "m", ")", ":", "\n", "#translate one step", "\n", "              ", "alpha", ",", "beta", "=", "get_next_indices_vert_trans", "(", "alpha", ",", "beta", ",", "m", ",", "m", ",", "d", ")", "\n", "gamma", ",", "delta", "=", "get_next_indices_vert_trans", "(", "gamma", ",", "delta", ",", "h", ",", "h", ",", "d", ")", "\n", "\n", "i_q", "=", "alpha", "*", "m", "+", "beta", "\n", "j_q", "=", "gamma", "*", "h", "+", "delta", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "                ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "it", "+=", "d", "-", "1", "\n", "\n", "", "", "if", "eq_array", "[", "3", "]", "==", "1", ":", "\n", "# horizontal translation", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "for", "it", "in", "range", "(", "h", ")", ":", "\n", "#translate one step", "\n", "              ", "alpha", ",", "beta", "=", "get_next_indices_hori_trans", "(", "alpha", ",", "beta", ",", "m", ",", "m", ",", "d", ")", "\n", "gamma", ",", "delta", "=", "get_next_indices_hori_trans", "(", "gamma", ",", "delta", ",", "h", ",", "h", ",", "d", ")", "\n", "\n", "i_q", "=", "alpha", "*", "m", "+", "beta", "\n", "j_q", "=", "gamma", "*", "h", "+", "delta", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "                ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "it", "+=", "d", "-", "1", "\n", "", "", "", "", "", "", "print", "(", "\"current_orbit\"", ",", "current_orbit", ")", "\n", "return", "I", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.fashionmnist_classification_batchwise_accuracy.EQNet.__init__": [[17, 26], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.EQNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "network_dimensions", ",", "eq_indices", ")", ":", "\n", "# hidden_sizes and eq_indices are both lists of size 2", "\n", "        ", "super", "(", "EQNet", ",", "self", ")", ".", "__init__", "(", ")", "# Inherited from the parent class nn.Module", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "network_dimensions", "[", "0", "]", ",", "network_dimensions", "[", "1", "]", ")", "# ", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "network_dimensions", "[", "1", "]", ",", "network_dimensions", "[", "2", "]", ")", "# ", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "network_dimensions", "[", "2", "]", ",", "network_dimensions", "[", "3", "]", ")", "# ", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "# Non-Linear ReLU Layer: max(0,x)", "\n", "self", ".", "eq_indices", "=", "eq_indices", "\n", "self", ".", "network_dimensions", "=", "network_dimensions", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.fashionmnist_classification_batchwise_accuracy.EQNet.forward": [[27, 32], ["fashionmnist_classification_batchwise_accuracy.EQNet.relu", "fashionmnist_classification_batchwise_accuracy.EQNet.relu", "out.mm", "x.mm", "out.mm", "torch.transpose", "[].view", "[].view", "fashionmnist_classification_batchwise_accuracy.EQNet.fc1.weight.view", "fashionmnist_classification_batchwise_accuracy.EQNet.fc2.weight.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "x", ".", "mm", "(", "self", ".", "fc1", ".", "weight", ".", "view", "(", "-", "1", ")", "[", "self", ".", "eq_indices", "[", "0", "]", "]", ".", "view", "(", "self", ".", "network_dimensions", "[", "0", "]", ",", "self", ".", "network_dimensions", "[", "1", "]", ")", ")", ")", "+", "self", ".", "fc1", ".", "bias", "\n", "out", "=", "self", ".", "relu", "(", "out", ".", "mm", "(", "self", ".", "fc2", ".", "weight", ".", "view", "(", "-", "1", ")", "[", "self", ".", "eq_indices", "[", "1", "]", "]", ".", "view", "(", "self", ".", "network_dimensions", "[", "1", "]", ",", "self", ".", "network_dimensions", "[", "2", "]", ")", ")", ")", "+", "self", ".", "fc2", ".", "bias", "\n", "out", "=", "out", ".", "mm", "(", "torch", ".", "transpose", "(", "self", ".", "fc3", ".", "weight", ",", "0", ",", "1", ")", ")", "+", "self", ".", "fc3", ".", "bias", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.fashionmnist_classification_batchwise_accuracy.train": [[34, 53], ["enumerate", "Variable", "Variable", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "images.cuda.view", "torch.cuda.is_available", "images.cuda.cuda", "labels.cuda.cuda", "print", "criterion.item"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step"], ["", "", "def", "train", "(", "net", ",", "device", ",", "train_loader", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "20", ",", "use_cuda", "=", "True", ",", "train_size", "=", "60000", ",", "batch_size", "=", "64", ")", ":", "\n", "  ", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "train_loader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "      ", "images", "=", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "Variable", "(", "labels", ")", "\n", "\n", "if", "use_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "          ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "# Intialize the hidden weight to all zeros", "\n", "outputs", "=", "net", "(", "images", ")", "# Forward pass: compute the output class given a image", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "# Compute the loss: difference between the output class and the pre-given label", "\n", "loss", ".", "backward", "(", ")", "# Backward pass: compute the weight", "\n", "optimizer", ".", "step", "(", ")", "# Optimizer: update the weights of hidden nodes", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "40", "==", "0", ":", "# Logging", "\n", "          ", "print", "(", "'Epoch [%d/%d], Step [%d/%d], Loss: %.4f'", "\n", "%", "(", "epoch", "+", "1", ",", "num_epochs", ",", "i", "+", "1", ",", "(", "train_size", "/", "batch_size", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.fashionmnist_classification_batchwise_accuracy.test": [[54, 74], ["net.eval", "print", "Variable", "net", "torch.max", "labels.cuda.size", "images.cuda.view", "torch.cuda.is_available", "images.cuda.cuda", "labels.cuda.cuda"], "function", ["None"], ["", "def", "test", "(", "net", ",", "device", ",", "test_loader", ",", "use_cuda", "=", "True", ")", ":", "\n", "  ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "for", "images", ",", "labels", "in", "test_loader", ":", "\n", "      ", "images", "=", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", "\n", "#if torch.randn(1)>0.0:", "\n", "#  images = torchvision.transforms.functional.hflip(images)", "\n", "if", "use_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "          ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "outputs", "=", "net", "(", "images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "# Choose the best class from the output: The class with the best score", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "# Increment the total count", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", "# Increment the correct count", "\n", "\n", "", "print", "(", "'Accuracy of the network on the 10K test images:'", ",", "(", "100.0", "*", "correct", "/", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.fashionmnist_classification_batchwise_accuracy.main": [[75, 169], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.device", "print", "dataloader.get_mnist_trainloader", "dataloader.get_mnist_testloader", "range", "torch.cuda.is_available", "train_kwargs.update", "test_kwargs.update", "len", "print", "equivariance_search_utilities.get_equivariant_network().to", "torch.nn.CrossEntropyLoss", "torch.optim.Adam", "range", "fashionmnist_classification_batchwise_accuracy.test", "train.parameters", "time.time", "fashionmnist_classification_batchwise_accuracy.train", "print", "equivariance_search_utilities.get_equivariant_network", "time.time"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_trainloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_testloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.test", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.train", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_equivariant_network"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Augmented MNIST hypothesis testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-size'", ",", "type", "=", "int", ",", "default", "=", "60000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-size'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 14)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 1.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.7", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'Learning rate step gamma (default: 0.7)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dry-run'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'quickly check a single pass'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug-array-id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'augmentation index to be used from aug_array_list'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "train_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "batch_size", "}", "\n", "test_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "test_batch_size", "}", "\n", "\n", "if", "use_cuda", ":", "\n", "\t\t", "cuda_kwargs", "=", "{", "'num_workers'", ":", "1", ",", "\n", "'pin_memory'", ":", "True", ",", "\n", "'shuffle'", ":", "True", "}", "\n", "train_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "test_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "\n", "", "aug_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "\n", "eq_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", "\n", "\n", "aug_array", "=", "aug_array_list", "[", "args", ".", "aug_array_id", "]", "\n", "print", "(", "\"Augmentation array\"", ",", "aug_array", ")", "\n", "# load data with appropriate equivariances", "\n", "trainloader", "=", "get_mnist_trainloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "train_size", "=", "args", ".", "train_size", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "testloader", "=", "get_mnist_testloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "test_size", "=", "args", ".", "test_size", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "network_dimensions", "=", "[", "28", "*", "28", ",", "20", "*", "20", ",", "20", "*", "20", ",", "10", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "eq_array_list", ")", ")", ":", "\n", "\t\t", "eq_array", "=", "eq_array_list", "[", "i", "]", "\n", "print", "(", "\"Equivariance array\"", ",", "eq_array", ")", "\n", "model", "=", "get_equivariant_network", "(", "network_dimensions", ",", "eq_array", ")", ".", "to", "(", "device", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "\t\t  ", "import", "time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "train", "(", "model", ",", "device", ",", "trainloader", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "args", ".", "epochs", ",", "train_size", "=", "args", ".", "train_size", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"Time elapsed\"", ",", "time_elapsed", ",", "\"secs\"", ")", "\n", "# test", "\n", "", "test", "(", "model", ",", "device", ",", "testloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble1.__init__": [[7, 10], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble1.__call__": [[11, 15], ["torch.multinomial", "augmentation_functions.RandomScramble1.synthetic1_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic1_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic1_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble1.synthetic1_matrix": [[16, 24], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble1.get_next_indices_sc1"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1"], ["", "def", "synthetic1_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble1.get_next_indices_sc1": [[25, 39], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc1", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble2.__init__": [[41, 44], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble2.__call__": [[45, 49], ["torch.multinomial", "augmentation_functions.RandomScramble2.synthetic2_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic2_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic2_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble2.synthetic2_matrix": [[50, 58], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble2.get_next_indices_sc2"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2"], ["", "def", "synthetic2_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble2.get_next_indices_sc2": [[59, 63], ["int"], "methods", ["None"], ["", "def", "get_next_indices_sc2", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble3.__init__": [[65, 68], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble3.__call__": [[69, 73], ["torch.multinomial", "augmentation_functions.RandomScramble3.synthetic3_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic3_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic3_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble3.synthetic3_matrix": [[74, 84], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble3.get_next_indices_sc3"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3"], ["", "def", "synthetic3_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble3.get_next_indices_sc3": [[85, 89], ["int"], "methods", ["None"], ["", "def", "get_next_indices_sc3", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble4.__init__": [[91, 94], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble4.__call__": [[95, 99], ["torch.multinomial", "augmentation_functions.RandomScramble4.synthetic4_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic4_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic4_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble4.synthetic4_matrix": [[100, 110], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble4.get_next_indices_sc4"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4"], ["", "def", "synthetic4_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble4.get_next_indices_sc4": [[111, 119], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc4", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble5.__init__": [[121, 124], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble5.__call__": [[125, 129], ["torch.multinomial", "augmentation_functions.RandomScramble5.synthetic5_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic5_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic5_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble5.synthetic5_matrix": [[130, 140], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble5.get_next_indices_sc5"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5"], ["", "def", "synthetic5_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble5.get_next_indices_sc5": [[141, 149], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc5", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble6.__init__": [[151, 154], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble6.__call__": [[155, 159], ["torch.multinomial", "augmentation_functions.RandomScramble6.synthetic6_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic6_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic6_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble6.synthetic6_matrix": [[160, 170], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble6.get_next_indices_sc6"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6"], ["", "def", "synthetic6_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble6.get_next_indices_sc6": [[171, 179], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc6", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble7.__init__": [[182, 185], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble7.__call__": [[186, 190], ["torch.multinomial", "augmentation_functions.RandomScramble7.synthetic7_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic7_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic7_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble7.synthetic7_matrix": [[191, 201], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble7.get_next_indices_sc7"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7"], ["", "def", "synthetic7_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomScramble7.get_next_indices_sc7": [[202, 210], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc7", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomVertical.__init__": [[212, 216], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ",", "d", "=", "1", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "d", "=", "d", "#displacement magnitude", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomVertical.__call__": [[217, 221], ["torch.multinomial", "augmentation_functions.RandomVertical.vtrans_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.vtrans_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "vtrans_matrix", "(", "tensor", ",", "self", ".", "d", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomVertical.vtrans_matrix": [[222, 232], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomVertical.get_next_indices_sc8"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8"], ["", "def", "vtrans_matrix", "(", "self", ",", "w", ",", "d", "=", "1", ")", ":", "\n", "      ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomVertical.get_next_indices_sc8": [[233, 238], ["None"], "methods", ["None"], ["", "def", "get_next_indices_sc8", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "        ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomHorizontal.__init__": [[240, 244], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ",", "d", "=", "1", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "d", "=", "d", "#displacement magnitude", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomHorizontal.__call__": [[245, 249], ["torch.multinomial", "augmentation_functions.RandomHorizontal.htrans_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.htrans_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "htrans_matrix", "(", "tensor", ",", "self", ".", "d", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomHorizontal.htrans_matrix": [[250, 260], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomHorizontal.get_next_indices_sc9"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9"], ["", "def", "htrans_matrix", "(", "self", ",", "w", ",", "d", "=", "1", ")", ":", "\n", "      ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.RandomHorizontal.get_next_indices_sc9": [[261, 266], ["None"], "methods", ["None"], ["", "def", "get_next_indices_sc9", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "        ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.CIFAR_dimension_3_to_1.__call__": [[268, 271], ["augmentation_functions.CIFAR_dimension_3_to_1.dimension_3_to_1"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.CIFAR_dimension_3_to_1.dimension_3_to_1"], ["    ", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "tensor", "=", "self", ".", "dimension_3_to_1", "(", "tensor", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.CIFAR_dimension_3_to_1.dimension_3_to_1": [[272, 280], ["w[].size", "torch.rand", "range", "torch.rand.view", "range"], "methods", ["None"], ["", "def", "dimension_3_to_1", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "(", "w", "[", "0", ",", "i", ",", "j", "]", "+", "w", "[", "1", ",", "i", ",", "j", "]", "+", "w", "[", "2", ",", "i", ",", "j", "]", ")", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.rotation_matrix": [[290, 300], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "", "def", "rotation_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by 90\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "j", ",", "i", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.hflip_matrix": [[302, 312], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "hflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Hflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "i", ",", "m", "-", "1", "-", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.vflip_matrix": [[314, 324], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "vflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Vflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "i", ",", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.get_next_indices_sc1": [[327, 341], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.synthetic1_matrix": [[342, 351], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc1"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1"], ["", "def", "synthetic1_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.get_next_indices_sc2": [[353, 358], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.synthetic2_matrix": [[359, 369], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc2"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2"], ["", "def", "synthetic2_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.get_next_indices_sc3": [[371, 376], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.synthetic3_matrix": [[377, 387], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc3"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3"], ["", "def", "synthetic3_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.get_next_indices_sc4": [[389, 397], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.synthetic4_matrix": [[398, 408], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc4"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4"], ["", "def", "synthetic4_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.get_next_indices_sc5": [[410, 418], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.synthetic5_matrix": [[419, 429], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc5"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5"], ["", "def", "synthetic5_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.get_next_indices_sc6": [[431, 439], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.synthetic6_matrix": [[440, 450], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc6"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6"], ["", "def", "synthetic6_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.get_next_indices_sc7": [[452, 460], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.synthetic7_matrix": [[461, 471], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc7"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7"], ["", "def", "synthetic7_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.get_next_indices_sc8": [[473, 478], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.vtrans_matrix": [[479, 489], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc8"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8"], ["", "def", "vtrans_matrix", "(", "w", ",", "d", "=", "1", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.get_next_indices_sc9": [[491, 496], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.augmentation_functions.htrans_matrix": [[497, 507], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc9"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9"], ["", "def", "htrans_matrix", "(", "w", ",", "d", "=", "1", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.fashionmnist_classification_single_hypothesis_testing.train": [[16, 32], ["range", "len", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "print", "criterion.item"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step"], ["def", "train", "(", "net", ",", "device", ",", "trainimageset", ",", "trainlabelset", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "20", ",", "use_cuda", "=", "True", ",", "train_size", "=", "60000", ",", "batch_size", "=", "64", ")", ":", "\n", "\n", "  ", "for", "i", "in", "range", "(", "len", "(", "trainimageset", ")", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "      ", "images", "=", "trainimageset", "[", "i", "]", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "trainlabelset", "[", "i", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# Intialize the hidden weight to all zeros", "\n", "outputs", "=", "net", "(", "images", ")", "# Forward pass: compute the output class given a image", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "# Compute the loss: difference between the output class and the pre-given label", "\n", "loss", ".", "backward", "(", ")", "# Backward pass: compute the weight", "\n", "optimizer", ".", "step", "(", ")", "# Optimizer: update the weights of hidden nodes", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "40", "==", "0", ":", "# Logging", "\n", "          ", "print", "(", "'Epoch [%d/%d], Step [%d/%d], Loss: %.4f'", "\n", "%", "(", "epoch", "+", "1", ",", "num_epochs", ",", "i", "+", "1", ",", "(", "train_size", "/", "batch_size", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.fashionmnist_classification_single_hypothesis_testing.test": [[33, 49], ["net.eval", "range", "print", "len", "net", "torch.max", "labels.size"], "function", ["None"], ["", "def", "test", "(", "net", ",", "device", ",", "testimageset", ",", "testlabelset", ",", "use_cuda", "=", "True", ")", ":", "\n", "  ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "testimageset", ")", ")", ":", "\n", "      ", "images", "=", "testimageset", "[", "i", "]", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "testlabelset", "[", "i", "]", "\n", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "# Choose the best class from the output: The class with the best score", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "# Increment the total count", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", "# Increment the correct count", "\n", "\n", "", "print", "(", "'Accuracy of the network on the 1K test images:'", ",", "(", "100.0", "*", "correct", "/", "total", ")", ")", "\n", "return", "(", "100.0", "*", "correct", "/", "total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.fashionmnist_classification_single_hypothesis_testing.main": [[50, 185], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.device", "print", "dataloader.get_mnist_trainloader", "dataloader.get_mnist_testloader", "enumerate", "enumerate", "range", "print", "torch.cuda.is_available", "train_kwargs.update", "test_kwargs.update", "trainimageset.append", "trainlabelset.append", "testimageset.append", "testlabelset.append", "len", "print", "equivariance_search_utilities.get_equivariant_network().to", "print", "torch.nn.CrossEntropyLoss", "torch.optim.Adam", "range", "test_accuracy_list.append", "print", "Variable().to", "Variable().to", "Variable().to", "Variable().to", "sum", "train.parameters", "time.time", "fashionmnist_classification_single_hypothesis_testing.train", "print", "max", "equivariance_search_utilities.get_equivariant_network", "time.time", "fashionmnist_classification_single_hypothesis_testing.test", "Variable", "Variable", "Variable", "Variable", "p.numel", "images.view", "images.view", "train.parameters"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_trainloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_testloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.train", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_equivariant_network", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.test"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "# For multiple augmentations set the flag --multiple-augmentations to true", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Augmented MNIST hypothesis testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-size'", ",", "type", "=", "int", ",", "default", "=", "60000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-size'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 14)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 1.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.7", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'Learning rate step gamma (default: 0.7)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dry-run'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'quickly check a single pass'", ")", "\n", "parser", ".", "add_argument", "(", "'--multiple-augmentations'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'quickly check a single pass'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug-array-id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'augmentation index to be used from aug_array_list'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "train_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "batch_size", "}", "\n", "test_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "test_batch_size", "}", "\n", "\n", "if", "use_cuda", ":", "\n", "\t\t", "cuda_kwargs", "=", "{", "'num_workers'", ":", "1", ",", "\n", "'pin_memory'", ":", "True", ",", "\n", "'shuffle'", ":", "True", "}", "\n", "train_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "test_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "\n", "", "aug_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", "\n", "\n", "multiple_aug_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "\n", "eq_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", "\n", "\n", "if", "args", ".", "multiple_augmentations", ":", "\n", "\t\t", "aug_array", "=", "multiple_aug_array_list", "[", "args", ".", "aug_array_id", "]", "\n", "", "else", ":", "\n", "\t\t", "aug_array", "=", "aug_array_list", "[", "args", ".", "aug_array_id", "]", "\n", "\n", "", "print", "(", "\"Augmentation array\"", ",", "aug_array", ")", "\n", "# load data with appropriate equivariances", "\n", "trainloader", "=", "get_mnist_trainloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "train_size", "=", "args", ".", "train_size", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "testloader", "=", "get_mnist_testloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "test_size", "=", "args", ".", "test_size", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "trainimageset", "=", "[", "]", "\n", "trainlabelset", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "trainloader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "\t\t", "trainimageset", ".", "append", "(", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", ".", "to", "(", "device", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "trainlabelset", ".", "append", "(", "Variable", "(", "labels", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "testimageset", "=", "[", "]", "\n", "testlabelset", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "\t\t", "testimageset", ".", "append", "(", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", ".", "to", "(", "device", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "testlabelset", ".", "append", "(", "Variable", "(", "labels", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "network_dimensions", "=", "[", "28", "*", "28", ",", "20", "*", "20", ",", "20", "*", "20", ",", "10", "]", "\n", "test_accuracy_list", "=", "[", "]", "# Stores the maximum test accuracy for each of the equivariant networks", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "eq_array_list", ")", ")", ":", "\n", "\t\t", "eq_array", "=", "eq_array_list", "[", "i", "]", "\n", "print", "(", "\"Equivariance array\"", ",", "eq_array", ")", "\n", "model", "=", "get_equivariant_network", "(", "network_dimensions", ",", "eq_array", ")", ".", "to", "(", "device", ")", "\n", "print", "(", "\"No. of parameters:\"", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "test_accuracy_temp", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "\t\t  ", "import", "time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "train", "(", "model", ",", "device", ",", "trainimageset", ",", "trainlabelset", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "args", ".", "epochs", ",", "train_size", "=", "args", ".", "train_size", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"Time elapsed\"", ",", "time_elapsed", ",", "\"secs\"", ")", "\n", "# test", "\n", "test_accuracy_temp", "=", "max", "(", "test_accuracy_temp", ",", "test", "(", "model", ",", "device", ",", "testimageset", ",", "testlabelset", ")", ")", "\n", "", "test_accuracy_list", ".", "append", "(", "test_accuracy_temp", ")", "\n", "print", "(", "\"Max accuracy:\"", ",", "test_accuracy_temp", ")", "\n", "", "print", "(", "\"Test accuracies\"", ",", "test_accuracy_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.fashionmnist_classification_hypothesis_testing.train": [[16, 32], ["range", "len", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "print", "criterion.item"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step"], ["def", "train", "(", "net", ",", "device", ",", "trainimageset", ",", "trainlabelset", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "20", ",", "use_cuda", "=", "True", ",", "train_size", "=", "60000", ",", "batch_size", "=", "64", ")", ":", "\n", "\n", "  ", "for", "i", "in", "range", "(", "len", "(", "trainimageset", ")", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "      ", "images", "=", "trainimageset", "[", "i", "]", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "trainlabelset", "[", "i", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# Intialize the hidden weight to all zeros", "\n", "outputs", "=", "net", "(", "images", ")", "# Forward pass: compute the output class given a image", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "# Compute the loss: difference between the output class and the pre-given label", "\n", "loss", ".", "backward", "(", ")", "# Backward pass: compute the weight", "\n", "optimizer", ".", "step", "(", ")", "# Optimizer: update the weights of hidden nodes", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "40", "==", "0", ":", "# Logging", "\n", "          ", "print", "(", "'Epoch [%d/%d], Step [%d/%d], Loss: %.4f'", "\n", "%", "(", "epoch", "+", "1", ",", "num_epochs", ",", "i", "+", "1", ",", "(", "train_size", "/", "batch_size", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.fashionmnist_classification_hypothesis_testing.test": [[33, 49], ["net.eval", "range", "print", "len", "net", "torch.max", "labels.size"], "function", ["None"], ["", "def", "test", "(", "net", ",", "device", ",", "testimageset", ",", "testlabelset", ",", "use_cuda", "=", "True", ")", ":", "\n", "  ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "testimageset", ")", ")", ":", "\n", "      ", "images", "=", "testimageset", "[", "i", "]", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "testlabelset", "[", "i", "]", "\n", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "# Choose the best class from the output: The class with the best score", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "# Increment the total count", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", "# Increment the correct count", "\n", "\n", "", "print", "(", "'Accuracy of the network on the 1K test images:'", ",", "(", "100.0", "*", "correct", "/", "total", ")", ")", "\n", "return", "(", "100.0", "*", "correct", "/", "total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.fashionmnist_classification_hypothesis_testing.main": [[50, 190], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.device", "print", "dataloader.get_fashionmnist_trainloader", "dataloader.get_fashionmnist_testloader", "enumerate", "enumerate", "range", "print", "torch.cuda.is_available", "train_kwargs.update", "test_kwargs.update", "trainimageset.append", "trainlabelset.append", "testimageset.append", "testlabelset.append", "len", "print", "equivariance_search_utilities.get_equivariant_network().to", "print", "torch.nn.CrossEntropyLoss", "torch.optim.Adam", "range", "test_accuracy_list.append", "print", "numpy.save", "numpy.save", "Variable().to", "Variable().to", "Variable().to", "Variable().to", "sum", "train.parameters", "time.time", "fashionmnist_classification_hypothesis_testing.train", "print", "max", "equivariance_search_utilities.get_equivariant_network", "time.time", "fashionmnist_classification_hypothesis_testing.test", "str", "str", "Variable", "Variable", "Variable", "Variable", "p.numel", "images.view", "images.view", "train.parameters"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_fashionmnist_trainloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_fashionmnist_testloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.train", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_equivariant_network", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.test"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "# For multiple augmentations set the flag --multiple-augmentations to true", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Augmented FashionMNIST hypothesis testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-size'", ",", "type", "=", "int", ",", "default", "=", "60000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-size'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 14)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 1.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.7", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'Learning rate step gamma (default: 0.7)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dry-run'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'quickly check a single pass'", ")", "\n", "parser", ".", "add_argument", "(", "'--multiple-augmentations'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'quickly check a single pass'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug-array-id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'augmentation index to be used from aug_array_list'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "train_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "batch_size", "}", "\n", "test_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "test_batch_size", "}", "\n", "\n", "if", "use_cuda", ":", "\n", "\t\t", "cuda_kwargs", "=", "{", "'num_workers'", ":", "1", ",", "\n", "'pin_memory'", ":", "True", ",", "\n", "'shuffle'", ":", "True", "}", "\n", "train_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "test_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "\n", "", "aug_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", "\n", "\n", "multiple_aug_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "\n", "eq_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", "\n", "\n", "if", "args", ".", "multiple_augmentations", ":", "\n", "\t\t", "aug_array", "=", "multiple_aug_array_list", "[", "args", ".", "aug_array_id", "]", "\n", "", "else", ":", "\n", "\t\t", "aug_array", "=", "aug_array_list", "[", "args", ".", "aug_array_id", "]", "\n", "\n", "", "print", "(", "\"Augmentation array\"", ",", "aug_array", ")", "\n", "# load data with appropriate equivariances", "\n", "trainloader", "=", "get_fashionmnist_trainloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "train_size", "=", "args", ".", "train_size", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "testloader", "=", "get_fashionmnist_testloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "test_size", "=", "args", ".", "test_size", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "trainimageset", "=", "[", "]", "\n", "trainlabelset", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "trainloader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "\t\t", "trainimageset", ".", "append", "(", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", ".", "to", "(", "device", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "trainlabelset", ".", "append", "(", "Variable", "(", "labels", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "testimageset", "=", "[", "]", "\n", "testlabelset", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "\t\t", "testimageset", ".", "append", "(", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", ".", "to", "(", "device", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "testlabelset", ".", "append", "(", "Variable", "(", "labels", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "network_dimensions", "=", "[", "28", "*", "28", ",", "20", "*", "20", ",", "20", "*", "20", ",", "10", "]", "\n", "test_accuracy_list", "=", "[", "]", "# Stores the maximum test accuracy for each of the equivariant networks", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "eq_array_list", ")", ")", ":", "\n", "\t\t", "eq_array", "=", "eq_array_list", "[", "i", "]", "\n", "print", "(", "\"Equivariance array\"", ",", "eq_array", ")", "\n", "model", "=", "get_equivariant_network", "(", "network_dimensions", ",", "eq_array", ")", ".", "to", "(", "device", ")", "\n", "print", "(", "\"No. of parameters:\"", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "test_accuracy_temp", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "\t\t  ", "import", "time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "model", "=", "train", "(", "model", ",", "device", ",", "trainimageset", ",", "trainlabelset", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "args", ".", "epochs", ",", "train_size", "=", "args", ".", "train_size", ")", "\n", "time_elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"Time elapsed\"", ",", "time_elapsed", ",", "\"secs\"", ")", "\n", "# test", "\n", "test_accuracy_temp", "=", "max", "(", "test_accuracy_temp", ",", "test", "(", "model", ",", "device", ",", "testimageset", ",", "testlabelset", ")", ")", "\n", "", "test_accuracy_list", ".", "append", "(", "test_accuracy_temp", ")", "\n", "print", "(", "\"Max accuracy:\"", ",", "test_accuracy_temp", ")", "\n", "", "print", "(", "\"Test accuracies\"", ",", "test_accuracy_list", ")", "\n", "\n", "if", "args", ".", "multiple_augmentations", ":", "\n", "\t\t", "np", ".", "save", "(", "\"test_accuracy_FashionMNIST_MHT\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "test_accuracy_list", ")", "\n", "", "else", ":", "\n", "\t\t", "np", ".", "save", "(", "\"test_accuracy_FashionMNIST_SHT\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "test_accuracy_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.mnist_transform_array": [[33, 44], ["torch.zeros", "torch.manual_seed", "range", "transforms_array.append", "len", "torchvision.Normalize", "transforms_array.append", "transforms_array.append", "torchvision.ToTensor"], "function", ["None"], ["def", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", "=", "torch", ".", "zeros", "(", "12", ")", ")", ":", "\n", "# Outputs the array of transformations from aug_array", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "transforms_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aug_array", ")", ")", ":", "\n", "    ", "if", "i", "==", "3", ":", "\n", "      ", "transforms_array", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "", "if", "aug_array", "[", "i", "]", ">", "0", ":", "\n", "      ", "transforms_array", ".", "append", "(", "aug_dict", "[", "i", "]", ")", "\n", "", "", "transforms_array", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ")", "\n", "return", "transforms_array", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.get_mnist_trainloader": [[46, 53], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["", "def", "get_mnist_trainloader", "(", "aug_array", ",", "train_size", "=", "2000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.get_mnist_trainset": [[55, 61], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["", "def", "get_mnist_trainset", "(", "aug_array", ",", "train_size", "=", "2000", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "return", "trainset_mini", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.get_mnist_testloader": [[63, 70], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["", "def", "get_mnist_testloader", "(", "aug_array", ",", "test_size", "=", "1000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "testtransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n", "testset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "testset", ",", "[", "test_size", ",", "len", "(", "testset", ")", "-", "test_size", "]", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "return", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.get_mnist_testset": [[72, 78], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["", "def", "get_mnist_testset", "(", "aug_array", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "testtransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n", "testset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "testset", ",", "[", "test_size", ",", "len", "(", "testset", ")", "-", "test_size", "]", ")", "\n", "return", "testset_mini", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.fashionmnist_transform_array": [[87, 98], ["torch.zeros", "torch.manual_seed", "range", "transforms_array.append", "len", "torchvision.Normalize", "transforms_array.append", "transforms_array.append", "torchvision.ToTensor"], "function", ["None"], ["def", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", "=", "torch", ".", "zeros", "(", "12", ")", ")", ":", "\n", "# Outputs the array of transformations from aug_array", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "transforms_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aug_array", ")", ")", ":", "\n", "    ", "if", "i", "==", "3", ":", "\n", "      ", "transforms_array", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "", "if", "aug_array", "[", "i", "]", ">", "0", ":", "\n", "      ", "transforms_array", ".", "append", "(", "aug_dict", "[", "i", "]", ")", "\n", "", "", "transforms_array", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ")", "\n", "return", "transforms_array", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.get_fashionmnist_trainloader": [[100, 107], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.fashionmnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array"], ["", "def", "get_fashionmnist_trainloader", "(", "aug_array", ",", "train_size", "=", "2000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "FashionMNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.get_fashionmnist_trainset": [[109, 115], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torch.utils.data.random_split", "dataloader.fashionmnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array"], ["", "def", "get_fashionmnist_trainset", "(", "aug_array", ",", "train_size", "=", "2000", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "FashionMNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "return", "trainset_mini", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.get_fashionmnist_testloader": [[117, 124], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.fashionmnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array"], ["", "def", "get_fashionmnist_testloader", "(", "aug_array", ",", "test_size", "=", "1000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "testtransform", "=", "transforms", ".", "Compose", "(", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "FashionMNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n", "testset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "testset", ",", "[", "test_size", ",", "len", "(", "testset", ")", "-", "test_size", "]", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "return", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.get_fashionmnist_testset": [[126, 132], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torch.utils.data.random_split", "dataloader.fashionmnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array"], ["", "def", "get_fashionmnist_testset", "(", "aug_array", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "testtransform", "=", "transforms", ".", "Compose", "(", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "FashionMNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n", "testset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "testset", ",", "[", "test_size", ",", "len", "(", "testset", ")", "-", "test_size", "]", ")", "\n", "return", "testset_mini", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.cifar10_transform_array": [[139, 151], ["torch.zeros", "torch.manual_seed", "range", "transforms_array.append", "len", "torchvision.Normalize", "transforms_array.append", "transforms_array.append", "transforms_array.append", "torchvision.ToTensor", "augmentation_functions.CIFAR_dimension_3_to_1"], "function", ["None"], ["def", "cifar10_transform_array", "(", "aug_dict", ",", "aug_array", "=", "torch", ".", "zeros", "(", "12", ")", ")", ":", "\n", "# Outputs the array of transformations from aug_array", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "transforms_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aug_array", ")", ")", ":", "\n", "    ", "if", "i", "==", "3", ":", "\n", "      ", "transforms_array", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "transforms_array", ".", "append", "(", "CIFAR_dimension_3_to_1", "(", ")", ")", "\n", "", "if", "aug_array", "[", "i", "]", ">", "0", ":", "\n", "      ", "transforms_array", ".", "append", "(", "aug_dict", "[", "i", "]", ")", "\n", "", "", "transforms_array", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.7", ",", ")", ",", "(", "0.5", ",", ")", ")", ")", "\n", "return", "transforms_array", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.get_cifar10_trainloader": [[153, 160], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.cifar10_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.cifar10_transform_array"], ["", "def", "get_cifar10_trainloader", "(", "aug_array", ",", "train_size", "=", "2000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "cifar10_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.dataloader.get_cifar10_testloader": [[162, 169], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.cifar10_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.cifar10_transform_array"], ["", "def", "get_cifar10_testloader", "(", "aug_array", ",", "test_size", "=", "1000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "testtransform", "=", "transforms", ".", "Compose", "(", "cifar10_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n", "testset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "testset", ",", "[", "test_size", ",", "len", "(", "testset", ")", "-", "test_size", "]", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "return", "testloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_search_utilities.EQNet.__init__": [[9, 18], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.EQNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "network_dimensions", ",", "eq_indices", ",", "n_orbits", ")", ":", "\n", "# hidden_sizes and eq_indices are both lists of size 2", "\n", "        ", "super", "(", "EQNet", ",", "self", ")", ".", "__init__", "(", ")", "# Inherited from the parent class nn.Module", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "n_orbits", "[", "0", "]", ",", "1", ")", "# ", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "n_orbits", "[", "1", "]", ",", "1", ")", "# ", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "network_dimensions", "[", "2", "]", ",", "network_dimensions", "[", "3", "]", ")", "# ", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "# Non-Linear ReLU Layer: max(0,x)", "\n", "self", ".", "eq_indices", "=", "eq_indices", "\n", "self", ".", "network_dimensions", "=", "network_dimensions", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_search_utilities.EQNet.forward": [[20, 27], ["[].view", "[].view", "equivariance_search_utilities.EQNet.relu", "equivariance_search_utilities.EQNet.relu", "out.mm", "x.mm", "out.mm", "torch.transpose", "equivariance_search_utilities.EQNet.fc1.weight.view", "equivariance_search_utilities.EQNet.fc2.weight.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "w1", "=", "self", ".", "fc1", ".", "weight", ".", "view", "(", "-", "1", ")", "[", "self", ".", "eq_indices", "[", "0", "]", "]", ".", "view", "(", "self", ".", "network_dimensions", "[", "0", "]", ",", "self", ".", "network_dimensions", "[", "1", "]", ")", "\n", "self", ".", "w2", "=", "self", ".", "fc2", ".", "weight", ".", "view", "(", "-", "1", ")", "[", "self", ".", "eq_indices", "[", "1", "]", "]", ".", "view", "(", "self", ".", "network_dimensions", "[", "1", "]", ",", "self", ".", "network_dimensions", "[", "2", "]", ")", "\n", "out", "=", "self", ".", "relu", "(", "x", ".", "mm", "(", "self", ".", "w1", ")", ")", "+", "self", ".", "fc1", ".", "bias", "\n", "out", "=", "self", ".", "relu", "(", "out", ".", "mm", "(", "self", ".", "w2", ")", ")", "+", "self", ".", "fc2", ".", "bias", "\n", "out", "=", "out", ".", "mm", "(", "torch", ".", "transpose", "(", "self", ".", "fc3", ".", "weight", ",", "0", ",", "1", ")", ")", "+", "self", ".", "fc3", ".", "bias", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_search_utilities.get_total_parameters": [[30, 33], ["None"], "function", ["None"], ["", "", "def", "get_total_parameters", "(", "network_dimensions", ",", "n_orbits", ")", ":", "\n", "  ", "total", "=", "n_orbits", "[", "0", "]", "+", "network_dimensions", "[", "1", "]", "+", "n_orbits", "[", "1", "]", "+", "network_dimensions", "[", "2", "]", "+", "network_dimensions", "[", "2", "]", "*", "network_dimensions", "[", "3", "]", "+", "network_dimensions", "[", "3", "]", "\n", "return", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_search_utilities.get_equivariance_indices": [[34, 49], ["range", "len", "get_g_eq_index", "G.append", "int", "int", "math.sqrt", "math.sqrt"], "function", ["None"], ["", "def", "get_equivariance_indices", "(", "eq_array", ",", "I_prev_orbits", ",", "I_prev_index_to_orbit", ",", "input_size", ",", "hidden_size", ")", ":", "\n", "  ", "I_orbits", ",", "I_index_to_orbit", "=", "I_prev_orbits", ",", "I_prev_index_to_orbit", "\n", "G_list", "=", "[", "\"rotation\"", ",", "\"hflip\"", ",", "\"vflip\"", ",", "\"htrans\"", ",", "\"vtrans\"", ",", "\"synthetic1\"", ",", "\"synthetic2\"", ",", "\"synthetic3\"", ",", "\n", "\"synthetic4\"", ",", "\"synthetic5\"", ",", "\"synthetic6\"", ",", "\"synthetic7\"", "]", "\n", "G", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "eq_array", ")", ")", ":", "\n", "    ", "if", "eq_array", "[", "i", "]", "==", "1", ":", "\n", "      ", "G", ".", "append", "(", "G_list", "[", "i", "]", ")", "\n", "\n", "", "", "for", "g", "in", "G", ":", "\n", "    ", "I_orbits", ",", "I_index_to_orbit", "=", "get_g_eq_index", "(", "g", ",", "int", "(", "math", ".", "sqrt", "(", "input_size", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "hidden_size", ")", ")", ",", "I_prev_orbits", ",", "I_prev_index_to_orbit", ")", "\n", "I_prev_orbits", ",", "I_prev_index_to_orbit", "=", "I_orbits", ",", "I_index_to_orbit", "\n", "\n", "", "return", "I_orbits", ",", "I_index_to_orbit", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_search_utilities.get_equivariant_network": [[50, 80], ["range", "equivariance_search_utilities.EQNet", "equivariance_search_utilities.get_total_parameters", "print", "I_prev_index_to_orbit.append", "I_index_to_orbit.append", "n_orbits.append", "len", "int", "int", "equivariance_search_utilities.squeeze_orbits", "len", "math.sqrt", "math.sqrt", "equivariance_functions.get_G_list_equivariance_indices_graph", "set", "range"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_total_parameters", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.squeeze_orbits", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_G_list_equivariance_indices_graph"], ["", "def", "get_equivariant_network", "(", "network_dimensions", "=", "[", "28", "*", "28", ",", "20", "*", "20", ",", "20", "*", "20", ",", "10", "]", ",", "eq_array", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", ":", "\n", "# get the equivariance indices", "\n", "  ", "I_prev_orbits", "=", "[", "]", "\n", "I_prev_index_to_orbit", "=", "[", "]", "\n", "I_orbits", "=", "[", "]", "\n", "I_index_to_orbit", "=", "[", "]", "\n", "n_orbits", "=", "[", "]", "\n", "\n", "for", "it", "in", "range", "(", "len", "(", "network_dimensions", ")", "-", "2", ")", ":", "\n", "#I_prev_orbits.append([{i} for i in range(network_dimensions[it]*network_dimensions[it+1])])", "\n", "\n", "    ", "m", ",", "h", "=", "int", "(", "math", ".", "sqrt", "(", "network_dimensions", "[", "it", "]", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "network_dimensions", "[", "it", "+", "1", "]", ")", ")", "\n", "I_prev_index_to_orbit", ".", "append", "(", "[", "i", "for", "i", "in", "range", "(", "network_dimensions", "[", "it", "]", "*", "network_dimensions", "[", "it", "+", "1", "]", ")", "]", ")", "\n", "I_index_to_orbit", ".", "append", "(", "squeeze_orbits", "(", "get_G_list_equivariance_indices_graph", "(", "m", ",", "h", ",", "eq_array", ",", "I_prev_index_to_orbit", "[", "it", "]", ",", "d", "=", "4", ")", ")", ")", "\n", "#I_orbits.append(temp_1)", "\n", "#I_index_to_orbit.append(temp_2)", "\n", "n_orbits", ".", "append", "(", "len", "(", "set", "(", "I_index_to_orbit", "[", "it", "]", ")", ")", ")", "\n", "\n", "", "eq_indices", "=", "I_index_to_orbit", "\n", "\n", "# define the network model", "\n", "eqnet", "=", "EQNet", "(", "network_dimensions", ",", "eq_indices", ",", "n_orbits", ")", "\n", "\n", "# count the number of parameters", "\n", "pytorch_total_params_orbits", "=", "get_total_parameters", "(", "network_dimensions", ",", "n_orbits", ")", "\n", "print", "(", "\"net parameters orbits:\"", ",", "pytorch_total_params_orbits", ")", "\n", "\n", "#pytorch_total_params = sum(p.numel() for p in eqnet.parameters() if p.requires_grad)", "\n", "#print(\"net parameters:\",pytorch_total_params)", "\n", "return", "eqnet", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_search_utilities.squeeze_orbits": [[81, 102], ["numpy.argsort", "sorted_orbits.tolist.tolist", "range", "numpy.sort", "numpy.argsort", "min", "len", "range", "len"], "function", ["None"], ["", "def", "squeeze_orbits", "(", "orbits", ")", ":", "\n", "\n", "  ", "sorted_orbits", ",", "arg_sorted_orbits", "=", "np", ".", "sort", "(", "orbits", ")", ",", "np", ".", "argsort", "(", "orbits", ")", "\n", "rank_orbits", "=", "np", ".", "argsort", "(", "arg_sorted_orbits", ")", "\n", "sorted_ranked_orbits", "=", "[", "]", "\n", "\n", "sorted_orbits", "=", "sorted_orbits", "-", "min", "(", "sorted_orbits", ")", "\n", "sorted_orbits", "=", "sorted_orbits", ".", "tolist", "(", ")", "\n", "\n", "current_rank", "=", "0", "\n", "current_orbit", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "sorted_orbits", ")", ")", ":", "\n", "    ", "if", "sorted_orbits", "[", "i", "]", ">", "current_orbit", ":", "\n", "      ", "current_orbit", "=", "sorted_orbits", "[", "i", "]", "\n", "sorted_orbits", "[", "i", "]", "=", "current_rank", "+", "1", "\n", "current_rank", "+=", "1", "\n", "", "else", ":", "\n", "      ", "sorted_orbits", "[", "i", "]", "=", "current_rank", "\n", "\n", "", "", "orbits_new", "=", "[", "sorted_orbits", "[", "rank_orbits", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "sorted_orbits", ")", ")", "]", "\n", "return", "orbits_new", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.rotation_matrix": [[7, 17], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["def", "rotation_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by 90\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "j", ",", "i", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.hflip_matrix": [[19, 29], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "hflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Hflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "i", ",", "m", "-", "1", "-", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.vflip_matrix": [[31, 41], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "vflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Vflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "i", ",", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.get_next_indices_sc1": [[44, 58], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.synthetic1_matrix": [[59, 68], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc1"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1"], ["", "def", "synthetic1_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.get_next_indices_sc2": [[70, 75], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.synthetic2_matrix": [[76, 86], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc2"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2"], ["", "def", "synthetic2_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.get_next_indices_sc3": [[88, 93], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.synthetic3_matrix": [[94, 104], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc3"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3"], ["", "def", "synthetic3_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.get_next_indices_sc4": [[106, 114], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.synthetic4_matrix": [[115, 125], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc4"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4"], ["", "def", "synthetic4_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.get_next_indices_sc5": [[127, 135], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.synthetic5_matrix": [[136, 146], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc5"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5"], ["", "def", "synthetic5_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.get_next_indices_sc6": [[148, 156], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.synthetic6_matrix": [[157, 167], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc6"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6"], ["", "def", "synthetic6_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.get_next_indices_sc7": [[169, 177], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.synthetic7_matrix": [[178, 188], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc7"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7"], ["", "def", "synthetic7_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.get_next_indices_sc8": [[190, 195], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.vtrans_matrix": [[196, 206], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc8"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8"], ["", "def", "vtrans_matrix", "(", "w", ",", "d", "=", "4", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.get_next_indices_sc9": [[208, 213], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.group_transformation_matrices.htrans_matrix": [[214, 224], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc9"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9"], ["", "def", "htrans_matrix", "(", "w", ",", "d", "=", "4", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_functions.get_next_indices_sc1": [[6, 20], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_functions.get_next_indices_sc2": [[21, 26], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_functions.get_next_indices_sc3": [[27, 32], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_functions.get_next_indices_sc4": [[33, 41], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_functions.get_next_indices_sc5": [[42, 50], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_functions.get_next_indices_sc6": [[51, 59], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_functions.get_next_indices_sc7": [[60, 68], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_functions.get_next_indices_vert_trans": [[69, 74], ["None"], "function", ["None"], ["", "def", "get_next_indices_vert_trans", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_functions.get_next_indices_hori_trans": [[75, 80], ["None"], "function", ["None"], ["", "def", "get_next_indices_hori_trans", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST Single Equiavriance Test.equivariance_functions.get_G_list_equivariance_indices_graph": [[81, 397], ["range", "print", "numpy.zeros", "range", "indices_queue.append", "indices_queue_pair.append", "len", "indices_queue.pop", "indices_queue_pair.pop", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc2", "equivariance_functions.get_next_indices_sc2", "equivariance_functions.get_next_indices_sc3", "equivariance_functions.get_next_indices_sc3", "equivariance_functions.get_next_indices_sc4", "equivariance_functions.get_next_indices_sc4", "equivariance_functions.get_next_indices_sc5", "equivariance_functions.get_next_indices_sc5", "equivariance_functions.get_next_indices_sc6", "equivariance_functions.get_next_indices_sc6", "equivariance_functions.get_next_indices_sc7", "equivariance_functions.get_next_indices_sc7", "range", "range", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "equivariance_functions.get_next_indices_vert_trans", "equivariance_functions.get_next_indices_vert_trans", "equivariance_functions.get_next_indices_hori_trans", "equivariance_functions.get_next_indices_hori_trans", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_vert_trans", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_vert_trans", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_hori_trans", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_hori_trans"], ["", "def", "get_G_list_equivariance_indices_graph", "(", "m", ",", "h", ",", "eq_array", ",", "I_prev", ",", "d", "=", "4", ")", ":", "\n", "  ", "\"Size of input layer = m*m; size of hidden layer = h*h; I permuted indices\"", "\n", "\"d=4 is the default translation step used\"", "\n", "\n", "nx", "=", "m", "*", "m", "#size of X", "\n", "nh", "=", "h", "*", "h", "#size of hidden layer", "\n", "I", "=", "I_prev", "#records the permutation of indices of W, which is of size n*n. For no previous symmetry, I_prev is given as the original indices", "\n", "V", "=", "np", ".", "zeros", "(", "nx", "*", "nh", ")", "-", "1", "#-1 if not visited, else 1", "\n", "current_orbit", "=", "-", "1", "\n", "indices_queue", "=", "[", "]", "\n", "indices_queue_pair", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "nx", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "nh", ")", ":", "\n", "      ", "i_0", "=", "i", "\n", "j_0", "=", "j", "\n", "if", "V", "[", "i_0", "*", "nh", "+", "j_0", "]", "<", "0", ":", "\n", "        ", "V", "[", "i_0", "*", "nh", "+", "j_0", "]", "=", "1", "\n", "index", "=", "i_0", "*", "nh", "+", "j_0", "\n", "indices_queue", ".", "append", "(", "index", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_0", ",", "j_0", "]", ")", "\n", "current_orbit", "+=", "1", "\n", "while", "len", "(", "indices_queue", ")", ">", "0", ":", "\n", "          ", "index", "=", "indices_queue", ".", "pop", "(", "0", ")", "\n", "i_0", ",", "j_0", "=", "indices_queue_pair", ".", "pop", "(", "0", ")", "\n", "I", "[", "index", "]", "=", "current_orbit", "\n", "\n", "if", "eq_array", "[", "0", "]", "==", "1", ":", "\n", "# rotations  ", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#rotate by 90", "\n", "alpha_r", ",", "beta_r", "=", "beta", ",", "m", "-", "1", "-", "alpha", "\n", "gamma_r", ",", "delta_r", "=", "delta", ",", "h", "-", "1", "-", "gamma", "\n", "\n", "i_r", "=", "alpha_r", "*", "m", "+", "beta_r", "\n", "j_r", "=", "gamma_r", "*", "h", "+", "delta_r", "\n", "\n", "index_r", "=", "i_r", "*", "nh", "+", "j_r", "\n", "if", "V", "[", "index_r", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_r", "]", "=", "1", "\n", "I", "[", "index_r", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_r", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_r", ",", "j_r", "]", ")", "\n", "\n", "#rotate by 180", "\n", "", "alpha_rr", ",", "beta_rr", "=", "beta_r", ",", "m", "-", "1", "-", "alpha_r", "\n", "gamma_rr", ",", "delta_rr", "=", "delta_r", ",", "h", "-", "1", "-", "gamma_r", "\n", "\n", "i_rr", "=", "alpha_rr", "*", "m", "+", "beta_rr", "\n", "j_rr", "=", "gamma_rr", "*", "h", "+", "delta_rr", "\n", "\n", "index_rr", "=", "i_rr", "*", "nh", "+", "j_rr", "\n", "if", "V", "[", "index_rr", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_rr", "]", "=", "1", "\n", "I", "[", "index_rr", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_rr", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_rr", ",", "j_rr", "]", ")", "\n", "\n", "#rotate by 270", "\n", "", "alpha_rrr", ",", "beta_rrr", "=", "beta_rr", ",", "m", "-", "1", "-", "alpha_rr", "\n", "gamma_rrr", ",", "delta_rrr", "=", "delta_rr", ",", "h", "-", "1", "-", "gamma_rr", "\n", "\n", "i_rrr", "=", "alpha_rrr", "*", "m", "+", "beta_rrr", "\n", "j_rrr", "=", "gamma_rrr", "*", "h", "+", "delta_rrr", "\n", "\n", "index_rrr", "=", "i_rrr", "*", "nh", "+", "j_rrr", "\n", "if", "V", "[", "index_rrr", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_rrr", "]", "=", "1", "\n", "I", "[", "index_rrr", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_rrr", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_rrr", ",", "j_rrr", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "1", "]", "==", "1", ":", "\n", "# horizontal flip", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#hflip", "\n", "alpha_h", ",", "beta_h", "=", "alpha", ",", "m", "-", "1", "-", "beta", "\n", "gamma_h", ",", "delta_h", "=", "gamma", ",", "h", "-", "1", "-", "delta", "\n", "\n", "i_h", "=", "alpha_h", "*", "m", "+", "beta_h", "\n", "j_h", "=", "gamma_h", "*", "h", "+", "delta_h", "\n", "\n", "index_h", "=", "i_h", "*", "nh", "+", "j_h", "\n", "if", "V", "[", "index_h", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_h", "]", "=", "1", "\n", "I", "[", "index_h", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_h", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_h", ",", "j_h", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "2", "]", "==", "1", ":", "\n", "# vertical flip", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#vflip", "\n", "alpha_h", ",", "beta_h", "=", "m", "-", "1", "-", "alpha", ",", "beta", "\n", "gamma_h", ",", "delta_h", "=", "h", "-", "1", "-", "gamma", ",", "delta", "\n", "\n", "i_h", "=", "alpha_h", "*", "m", "+", "beta_h", "\n", "j_h", "=", "gamma_h", "*", "h", "+", "delta_h", "\n", "\n", "index_h", "=", "i_h", "*", "nh", "+", "j_h", "\n", "if", "V", "[", "index_h", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_h", "]", "=", "1", "\n", "I", "[", "index_h", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_h", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_h", ",", "j_h", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "10", "]", "==", "1", ":", "\n", "# synthetic 1", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to quadrant 2", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc1", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc1", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "#move to quadrant 3", "\n", "", "alpha_qq", ",", "beta_qq", "=", "get_next_indices_sc1", "(", "alpha_q", ",", "beta_q", ",", "m", ",", "m", ")", "\n", "gamma_qq", ",", "delta_qq", "=", "get_next_indices_sc1", "(", "gamma_q", ",", "delta_q", ",", "h", ",", "h", ")", "\n", "\n", "i_qq", "=", "alpha_qq", "*", "m", "+", "beta_qq", "\n", "j_qq", "=", "gamma_qq", "*", "h", "+", "delta_qq", "\n", "\n", "index_qq", "=", "i_qq", "*", "nh", "+", "j_qq", "\n", "if", "V", "[", "index_qq", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_qq", "]", "=", "1", "\n", "I", "[", "index_qq", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_qq", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_qq", ",", "j_qq", "]", ")", "\n", "\n", "#move to quadrant 4", "\n", "", "alpha_qqq", ",", "beta_qqq", "=", "get_next_indices_sc1", "(", "alpha_qq", ",", "beta_qq", ",", "m", ",", "m", ")", "\n", "gamma_qqq", ",", "delta_qqq", "=", "get_next_indices_sc1", "(", "gamma_qq", ",", "delta_qq", ",", "h", ",", "h", ")", "\n", "\n", "i_qqq", "=", "alpha_qqq", "*", "m", "+", "beta_qqq", "\n", "j_qqq", "=", "gamma_qqq", "*", "h", "+", "delta_qqq", "\n", "\n", "index_qqq", "=", "i_qqq", "*", "nh", "+", "j_qqq", "\n", "if", "V", "[", "index_qqq", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_qqq", "]", "=", "1", "\n", "I", "[", "index_qqq", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_qqq", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_qqq", ",", "j_qqq", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "11", "]", "==", "1", ":", "\n", "# synthetic 2", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc2", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc2", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "5", "]", "==", "1", ":", "\n", "# synthetic 3", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc3", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc3", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "6", "]", "==", "1", ":", "\n", "# synthetic 4", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc4", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc4", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "7", "]", "==", "1", ":", "\n", "# synthetic 5", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc5", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc5", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "8", "]", "==", "1", ":", "\n", "# synthetic 6", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc6", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc6", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "9", "]", "==", "1", ":", "\n", "# synthetic 7", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc7", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc7", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "4", "]", "==", "1", ":", "\n", "# vertical translation ", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "for", "it", "in", "range", "(", "m", ")", ":", "\n", "#translate one step", "\n", "              ", "alpha", ",", "beta", "=", "get_next_indices_vert_trans", "(", "alpha", ",", "beta", ",", "m", ",", "m", ",", "d", ")", "\n", "gamma", ",", "delta", "=", "get_next_indices_vert_trans", "(", "gamma", ",", "delta", ",", "h", ",", "h", ",", "d", ")", "\n", "\n", "i_q", "=", "alpha", "*", "m", "+", "beta", "\n", "j_q", "=", "gamma", "*", "h", "+", "delta", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "                ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "it", "+=", "d", "-", "1", "\n", "\n", "", "", "if", "eq_array", "[", "3", "]", "==", "1", ":", "\n", "# horizontal translation", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "for", "it", "in", "range", "(", "h", ")", ":", "\n", "#translate one step", "\n", "              ", "alpha", ",", "beta", "=", "get_next_indices_hori_trans", "(", "alpha", ",", "beta", ",", "m", ",", "m", ",", "d", ")", "\n", "gamma", ",", "delta", "=", "get_next_indices_hori_trans", "(", "gamma", ",", "delta", ",", "h", ",", "h", ",", "d", ")", "\n", "\n", "i_q", "=", "alpha", "*", "m", "+", "beta", "\n", "j_q", "=", "gamma", "*", "h", "+", "delta", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "                ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "it", "+=", "d", "-", "1", "\n", "", "", "", "", "", "", "print", "(", "\"current_orbit\"", ",", "current_orbit", ")", "\n", "return", "I", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble1.__init__": [[7, 10], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble1.__call__": [[11, 15], ["torch.multinomial", "augmentation_functions.RandomScramble1.synthetic1_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic1_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic1_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble1.synthetic1_matrix": [[16, 24], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble1.get_next_indices_sc1"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1"], ["", "def", "synthetic1_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble1.get_next_indices_sc1": [[25, 39], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc1", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble2.__init__": [[41, 44], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble2.__call__": [[45, 49], ["torch.multinomial", "augmentation_functions.RandomScramble2.synthetic2_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic2_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic2_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble2.synthetic2_matrix": [[50, 58], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble2.get_next_indices_sc2"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2"], ["", "def", "synthetic2_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble2.get_next_indices_sc2": [[59, 63], ["int"], "methods", ["None"], ["", "def", "get_next_indices_sc2", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble3.__init__": [[65, 68], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble3.__call__": [[69, 73], ["torch.multinomial", "augmentation_functions.RandomScramble3.synthetic3_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic3_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic3_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble3.synthetic3_matrix": [[74, 84], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble3.get_next_indices_sc3"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3"], ["", "def", "synthetic3_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble3.get_next_indices_sc3": [[85, 89], ["int"], "methods", ["None"], ["", "def", "get_next_indices_sc3", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble4.__init__": [[91, 94], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble4.__call__": [[95, 99], ["torch.multinomial", "augmentation_functions.RandomScramble4.synthetic4_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic4_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic4_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble4.synthetic4_matrix": [[100, 110], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble4.get_next_indices_sc4"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4"], ["", "def", "synthetic4_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble4.get_next_indices_sc4": [[111, 119], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc4", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble5.__init__": [[121, 124], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble5.__call__": [[125, 129], ["torch.multinomial", "augmentation_functions.RandomScramble5.synthetic5_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic5_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic5_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble5.synthetic5_matrix": [[130, 140], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble5.get_next_indices_sc5"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5"], ["", "def", "synthetic5_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble5.get_next_indices_sc5": [[141, 149], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc5", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble6.__init__": [[151, 154], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble6.__call__": [[155, 159], ["torch.multinomial", "augmentation_functions.RandomScramble6.synthetic6_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic6_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic6_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble6.synthetic6_matrix": [[160, 170], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble6.get_next_indices_sc6"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6"], ["", "def", "synthetic6_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble6.get_next_indices_sc6": [[171, 179], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc6", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble7.__init__": [[182, 185], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble7.__call__": [[186, 190], ["torch.multinomial", "augmentation_functions.RandomScramble7.synthetic7_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic7_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "synthetic7_matrix", "(", "tensor", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble7.synthetic7_matrix": [[191, 201], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomScramble7.get_next_indices_sc7"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7"], ["", "def", "synthetic7_matrix", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomScramble7.get_next_indices_sc7": [[202, 210], ["int", "int"], "methods", ["None"], ["", "def", "get_next_indices_sc7", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "        ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "          ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomVertical.__init__": [[212, 216], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ",", "d", "=", "1", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "d", "=", "d", "#displacement magnitude", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomVertical.__call__": [[217, 221], ["torch.multinomial", "augmentation_functions.RandomVertical.vtrans_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.vtrans_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "vtrans_matrix", "(", "tensor", ",", "self", ".", "d", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomVertical.vtrans_matrix": [[222, 232], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomVertical.get_next_indices_sc8"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8"], ["", "def", "vtrans_matrix", "(", "self", ",", "w", ",", "d", "=", "1", ")", ":", "\n", "      ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomVertical.get_next_indices_sc8": [[233, 238], ["None"], "methods", ["None"], ["", "def", "get_next_indices_sc8", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "        ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomHorizontal.__init__": [[240, 244], ["torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q", "=", "0.5", ",", "d", "=", "1", ")", ":", "\n", "        ", "self", ".", "p", "=", "torch", ".", "tensor", "(", "[", "1", "-", "q", ",", "q", "]", ")", "\n", "self", ".", "d", "=", "d", "#displacement magnitude", "\n", "self", ".", "q", "=", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomHorizontal.__call__": [[245, 249], ["torch.multinomial", "augmentation_functions.RandomHorizontal.htrans_matrix"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.htrans_matrix"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "if", "torch", ".", "multinomial", "(", "self", ".", "p", ",", "1", ")", ">", "0", ":", "\n", "          ", "tensor", "=", "self", ".", "htrans_matrix", "(", "tensor", ",", "self", ".", "d", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomHorizontal.htrans_matrix": [[250, 260], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.RandomHorizontal.get_next_indices_sc9"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9"], ["", "def", "htrans_matrix", "(", "self", ",", "w", ",", "d", "=", "1", ")", ":", "\n", "      ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "self", ".", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.RandomHorizontal.get_next_indices_sc9": [[261, 266], ["None"], "methods", ["None"], ["", "def", "get_next_indices_sc9", "(", "self", ",", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "        ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "0", ",", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.CIFAR_dimension_3_to_1.__call__": [[268, 271], ["augmentation_functions.CIFAR_dimension_3_to_1.dimension_3_to_1"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.CIFAR_dimension_3_to_1.dimension_3_to_1"], ["    ", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "tensor", "=", "self", ".", "dimension_3_to_1", "(", "tensor", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.CIFAR_dimension_3_to_1.dimension_3_to_1": [[272, 280], ["w[].size", "torch.rand", "range", "torch.rand.view", "range"], "methods", ["None"], ["", "def", "dimension_3_to_1", "(", "self", ",", "w", ")", ":", "\n", "      ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "          ", "w_new", "[", "i", ",", "j", "]", "=", "(", "w", "[", "0", ",", "i", ",", "j", "]", "+", "w", "[", "1", ",", "i", ",", "j", "]", "+", "w", "[", "2", ",", "i", ",", "j", "]", ")", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.rotation_matrix": [[290, 300], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "", "def", "rotation_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by 90\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "j", ",", "i", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.hflip_matrix": [[302, 312], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "hflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Hflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "i", ",", "m", "-", "1", "-", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.vflip_matrix": [[314, 324], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "vflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Vflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "i", ",", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.get_next_indices_sc1": [[327, 341], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.synthetic1_matrix": [[342, 351], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc1"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1"], ["", "def", "synthetic1_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.get_next_indices_sc2": [[353, 358], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.synthetic2_matrix": [[359, 369], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc2"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2"], ["", "def", "synthetic2_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.get_next_indices_sc3": [[371, 376], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.synthetic3_matrix": [[377, 387], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc3"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3"], ["", "def", "synthetic3_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.get_next_indices_sc4": [[389, 397], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.synthetic4_matrix": [[398, 408], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc4"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4"], ["", "def", "synthetic4_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.get_next_indices_sc5": [[410, 418], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.synthetic5_matrix": [[419, 429], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc5"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5"], ["", "def", "synthetic5_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.get_next_indices_sc6": [[431, 439], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.synthetic6_matrix": [[440, 450], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc6"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6"], ["", "def", "synthetic6_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.get_next_indices_sc7": [[452, 460], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.synthetic7_matrix": [[461, 471], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc7"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7"], ["", "def", "synthetic7_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.get_next_indices_sc8": [[473, 478], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.vtrans_matrix": [[479, 489], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc8"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8"], ["", "def", "vtrans_matrix", "(", "w", ",", "d", "=", "1", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.get_next_indices_sc9": [[491, 496], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.augmentation_functions.htrans_matrix": [[497, 507], ["w.size", "torch.rand", "range", "torch.rand.view", "range", "augmentation_functions.get_next_indices_sc9"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9"], ["", "def", "htrans_matrix", "(", "w", ",", "d", "=", "1", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array": [[33, 43], ["torch.zeros", "range", "transforms_array.append", "len", "torchvision.Normalize", "transforms_array.append", "transforms_array.append", "torchvision.ToTensor"], "function", ["None"], ["def", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", "=", "torch", ".", "zeros", "(", "12", ")", ")", ":", "\n", "# Outputs the array of transformations from aug_array", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "transforms_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aug_array", ")", ")", ":", "\n", "    ", "if", "i", "==", "3", ":", "\n", "      ", "transforms_array", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "", "if", "aug_array", "[", "i", "]", ">", "0", ":", "\n", "      ", "transforms_array", ".", "append", "(", "aug_dict", "[", "i", "]", ")", "\n", "", "", "transforms_array", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ")", "\n", "return", "transforms_array", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_trainloader": [[45, 51], ["torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["# Get trainloader with augmentation of choice", "\n", "", "def", "get_mnist_trainloader", "(", "aug_array", ",", "train_size", "=", "2000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_trainset": [[53, 58], ["torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["\n", "# Get trainset with augmentation of choice", "\n", "", "def", "get_mnist_trainset", "(", "aug_array", ",", "train_size", "=", "2000", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_testloader": [[60, 66], ["torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["return", "trainset_mini", "\n", "\n", "# Get testloader with augmentation of choice", "\n", "", "def", "get_mnist_testloader", "(", "aug_array", ",", "test_size", "=", "1000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "testtransform", "=", "transforms", ".", "Compose", "(", "mnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "testset", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_mnist_testset": [[68, 73], ["torchvision.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.random_split", "dataloader.mnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.mnist_transform_array"], ["testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "return", "testloader", "\n", "\n", "# Get testset with augmentation of choice", "\n", "", "def", "get_mnist_testset", "(", "aug_array", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array": [[81, 92], ["torch.zeros", "torch.manual_seed", "range", "transforms_array.append", "len", "torchvision.Normalize", "transforms_array.append", "transforms_array.append", "torchvision.ToTensor"], "function", ["None"], ["\n", "#######################################################################################################################", "\n", "# Fashion MNIST", "\n", "#######################################################################################################################", "\n", "\n", "# Composing the augmentation array from aug_array using aug_dict", "\n", "def", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", "=", "torch", ".", "zeros", "(", "12", ")", ")", ":", "\n", "# Outputs the array of transformations from aug_array", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "transforms_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aug_array", ")", ")", ":", "\n", "    ", "if", "i", "==", "3", ":", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_fashionmnist_trainloader": [[94, 101], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.fashionmnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array"], ["", "if", "aug_array", "[", "i", "]", ">", "0", ":", "\n", "      ", "transforms_array", ".", "append", "(", "aug_dict", "[", "i", "]", ")", "\n", "", "", "transforms_array", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", ")", "\n", "return", "transforms_array", "\n", "\n", "# Get trainloader with augmentation of choice", "\n", "", "def", "get_fashionmnist_trainloader", "(", "aug_array", ",", "train_size", "=", "2000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_fashionmnist_trainset": [[103, 109], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torch.utils.data.random_split", "dataloader.fashionmnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array"], ["trainset", "=", "torchvision", ".", "datasets", ".", "FashionMNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "return", "trainloader", "\n", "\n", "# Get trainset with augmentation of choice", "\n", "", "def", "get_fashionmnist_trainset", "(", "aug_array", ",", "train_size", "=", "2000", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_fashionmnist_testloader": [[111, 118], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.fashionmnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array"], ["traintransform", "=", "transforms", ".", "Compose", "(", "fashionmnist_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "FashionMNIST", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "return", "trainset_mini", "\n", "\n", "# Get testloader with augmentation of choice", "\n", "", "def", "get_fashionmnist_testloader", "(", "aug_array", ",", "test_size", "=", "1000", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_fashionmnist_testset": [[120, 126], ["torch.manual_seed", "torchvision.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torch.utils.data.random_split", "dataloader.fashionmnist_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.fashionmnist_transform_array"], ["testset", "=", "torchvision", ".", "datasets", ".", "FashionMNIST", "(", "root", "=", "'./data'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "testtransform", ")", "\n", "testset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "testset", ",", "[", "test_size", ",", "len", "(", "testset", ")", "-", "test_size", "]", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ")", "\n", "return", "testloader", "\n", "\n", "# Get testset with augmentation of choice", "\n", "", "def", "get_fashionmnist_testset", "(", "aug_array", ",", "batch_size", "=", "4", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ",", "aug_dict", "=", "aug_dict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.cifar10_transform_array": [[133, 144], ["torch.zeros", "range", "transforms_array.append", "len", "torchvision.Normalize", "transforms_array.append", "transforms_array.append", "transforms_array.append", "torchvision.ToTensor", "augmentation_functions.CIFAR_dimension_3_to_1"], "function", ["None"], ["", "classes_fashionmnist", "=", "(", "'T-shirt/top'", ",", "'Trouser'", ",", "'Pullover'", ",", "'Dress'", ",", "'Coat'", ",", "'Sandal'", ",", "'Shirt'", ",", "'Sneaker'", ",", "'Bag'", ",", "'Ankle boot'", ")", "\n", "\n", "#######################################################################################################################", "\n", "# CIFAR-10", "\n", "#######################################################################################################################", "\n", "\n", "def", "cifar10_transform_array", "(", "aug_dict", ",", "aug_array", "=", "torch", ".", "zeros", "(", "12", ")", ")", ":", "\n", "# Outputs the array of transformations from aug_array", "\n", "  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "transforms_array", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aug_array", ")", ")", ":", "\n", "    ", "if", "i", "==", "3", ":", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_cifar10_trainloader": [[146, 152], ["torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.cifar10_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.cifar10_transform_array"], ["transforms_array", ".", "append", "(", "CIFAR_dimension_3_to_1", "(", ")", ")", "\n", "", "if", "aug_array", "[", "i", "]", ">", "0", ":", "\n", "      ", "transforms_array", ".", "append", "(", "aug_dict", "[", "i", "]", ")", "\n", "", "", "transforms_array", ".", "append", "(", "transforms", ".", "Normalize", "(", "(", "0.7", ",", ")", ",", "(", "0.5", ",", ")", ")", ")", "\n", "return", "transforms_array", "\n", "\n", "# Get trainloader with augmentation of choice", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_cifar10_testloader": [[154, 160], ["torchvision.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "dataloader.cifar10_transform_array", "len"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.cifar10_transform_array"], ["  ", "torch", ".", "manual_seed", "(", "1233", ")", "\n", "traintransform", "=", "transforms", ".", "Compose", "(", "cifar10_transform_array", "(", "aug_dict", ",", "aug_array", ")", ")", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./data'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "traintransform", ")", "\n", "trainset_mini", ",", "_", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "trainset", ",", "[", "train_size", ",", "len", "(", "trainset", ")", "-", "train_size", "]", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset_mini", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "return", "trainloader", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.QNet.__init__": [[49, 56], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.EQNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_sizes", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "QNet", ",", "self", ")", ".", "__init__", "(", ")", "# Inherited from the parent class nn.Module", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_sizes", "[", "0", "]", ")", "# 1st Full-Connected Layer: k (input data) -> 500 (hidden node)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "# Non-Linear ReLU Layer: max(0,x)", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_sizes", "[", "0", "]", ",", "hidden_sizes", "[", "1", "]", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "hidden_sizes", "[", "1", "]", ",", "hidden_sizes", "[", "2", "]", ")", "# 2nd Full-Connected Layer: 500 (hidden node) -> k (output class)", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "hidden_sizes", "[", "2", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.QNet.forward": [[57, 64], ["gnas_fcc_FashionMNIST.QNet.relu", "gnas_fcc_FashionMNIST.QNet.relu", "gnas_fcc_FashionMNIST.QNet.relu", "gnas_fcc_FashionMNIST.QNet.fc4", "gnas_fcc_FashionMNIST.QNet.fc1", "gnas_fcc_FashionMNIST.QNet.fc2", "gnas_fcc_FashionMNIST.QNet.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "# Forward pass: stacking each layer together", "\n", "        ", "x", "=", "x", "/", "10", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "fc3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc4", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.__init__": [[106, 133], ["print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "gnas_fcc_FashionMNIST.Environment.get_state_accuracy", "gnas_fcc_FashionMNIST.Environment.get_state_reward", "str", "str"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.get_state_accuracy", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.get_state_reward"], ["  ", "def", "__init__", "(", "self", ",", "device", ",", "trainimageset", ",", "trainlabelset", ",", "testimageset", ",", "testlabelset", ",", "child_network_dimensions", ",", "child_train_size", ",", "child_test_size", ",", "child_batch_size", ",", "child_test_batch_size", ",", "child_lr", "=", "1e-3", ",", "child_epochs", "=", "4", ",", "g_size", "=", "12", ")", ":", "\n", "# Start with all zero vector", "\n", "# Initialize only once, reset as many times as needed, to avoid recomputation of base accuracies.", "\n", "    ", "print", "(", "\"Group Neural Architectural Search using Group Decomposition and Reinforcement Learning!\"", ")", "\n", "self", ".", "k", "=", "g_size", "# k = g_size for fully connected and k = g_size + 4*h_size for convolutional neural networks", "\n", "self", ".", "current_state", "=", "torch", ".", "zeros", "(", "g_size", ")", "# g_size represents the size of the array of groups for equivariance", "\n", "self", ".", "next_state", "=", "torch", ".", "zeros", "(", "g_size", ")", "\n", "self", ".", "models_trained", "=", "1", "# 1 corresponds to the base case", "\n", "self", ".", "time", "=", "0", "# Further, base_reward should be equal to zero.", "\n", "self", ".", "next_state_string", "=", "''", ".", "join", "(", "str", "(", "e", ")", "for", "e", "in", "self", ".", "next_state", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "trainimageset", "=", "trainimageset", "\n", "self", ".", "trainlabelset", "=", "trainlabelset", "\n", "self", ".", "testimageset", "=", "testimageset", "\n", "self", ".", "testlabelset", "=", "testlabelset", "\n", "self", ".", "child_network_dimensions", "=", "child_network_dimensions", "\n", "self", ".", "child_epochs", "=", "child_epochs", "\n", "self", ".", "child_lr", "=", "child_lr", "\n", "self", ".", "child_train_size", "=", "child_train_size", "\n", "self", ".", "child_test_size", "=", "child_test_size", "\n", "self", ".", "child_batch_size", "=", "child_batch_size", "\n", "self", ".", "child_test_batch_size", "=", "child_test_batch_size", "\n", "self", ".", "base_accuracy", "=", "self", ".", "get_state_accuracy", "(", "self", ".", "current_state", ")", "\n", "self", ".", "base_reward", "=", "self", ".", "get_state_reward", "(", "self", ".", "base_accuracy", ",", "self", ".", "base_accuracy", ")", "\n", "current_state_string", "=", "''", ".", "join", "(", "str", "(", "e", ")", "for", "e", "in", "self", ".", "current_state", ")", "\n", "self", ".", "visited_model_rewards", "=", "{", "current_state_string", ":", "self", ".", "base_reward", "}", "# Dictionary of models visited and their rewards. Models are saved in the form of a binary string of length g_size", "\n", "self", ".", "visited_model_accuracies", "=", "{", "current_state_string", ":", "self", ".", "base_accuracy", "}", "# Dictionary of models visited and their accuracies. Models are saved in the form of a binary string of length g_size", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step": [[134, 167], ["action.item.item.item", "range", "gnas_fcc_FashionMNIST.Environment.update_current_state", "gnas_fcc_FashionMNIST.Environment.get_state_accuracy", "gnas_fcc_FashionMNIST.Environment.get_state_reward", "str"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.update_current_state", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.get_state_accuracy", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.get_state_reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "#returns from QNN for the data augmentation problem; for this toy example it is going to return +100 for state = all 1s, and -1 for anything else", "\n", "    ", "reward", "=", "0", "\n", "accuracy", "=", "0", "\n", "new_models_trained", "=", "False", "\n", "done", "=", "False", "\n", "self", ".", "time", "+=", "1", "\n", "\n", "# Make action", "\n", "action", "=", "action", ".", "item", "(", ")", "\n", "\n", "# Update states", "\n", "for", "i", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "      ", "self", ".", "next_state", "[", "i", "]", "=", "self", ".", "current_state", "[", "i", "]", "\n", "", "self", ".", "next_state", "[", "action", "]", "=", "(", "self", ".", "current_state", "[", "action", "]", "+", "1", ")", "%", "2", "#remove for multiple adversaries", "\n", "self", ".", "update_current_state", "(", ")", "\n", "self", ".", "next_state_string", "=", "''", ".", "join", "(", "str", "(", "e", ")", "for", "e", "in", "self", ".", "next_state", ")", "\n", "\n", "# Update reward and accuracy", "\n", "if", "self", ".", "next_state_string", "not", "in", "self", ".", "visited_model_rewards", ":", "\n", "      ", "new_models_trained", "=", "True", "\n", "self", ".", "models_trained", "+=", "1", "\n", "accuracy", "=", "self", ".", "get_state_accuracy", "(", "self", ".", "current_state", ")", "\n", "reward", "=", "self", ".", "get_state_reward", "(", "accuracy", ",", "self", ".", "base_accuracy", ")", "\n", "self", ".", "visited_model_accuracies", "[", "self", ".", "next_state_string", "]", "=", "accuracy", "\n", "self", ".", "visited_model_rewards", "[", "self", ".", "next_state_string", "]", "=", "reward", "\n", "", "else", ":", "\n", "      ", "accuracy", "=", "self", ".", "visited_model_accuracies", "[", "self", ".", "next_state_string", "]", "\n", "reward", "=", "self", ".", "visited_model_rewards", "[", "self", ".", "next_state_string", "]", "\n", "\n", "", "if", "self", ".", "time", ">", "100", ":", "\n", "      ", "done", "=", "True", "\n", "", "return", "accuracy", ",", "reward", ",", "new_models_trained", ",", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.get_state_reward": [[168, 170], ["math.exp", "math.exp", "math.exp", "math.exp", "abs"], "methods", ["None"], ["", "def", "get_state_reward", "(", "self", ",", "state_accuracy", ",", "base_accuracy", ")", ":", "\n", "    ", "return", "(", "state_accuracy", "-", "base_accuracy", ")", "*", "math", ".", "exp", "(", "abs", "(", "state_accuracy", "-", "base_accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.get_state_accuracy": [[171, 191], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "equivariance_search_utilities.get_equivariant_network().to", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "range", "train.parameters", "gnas_fcc_FashionMNIST.train", "max", "equivariance_search_utilities.get_equivariant_network", "gnas_fcc_FashionMNIST.test", "eq_array.tolist"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.train", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_equivariant_network", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.test"], ["", "def", "get_state_accuracy", "(", "self", ",", "state", ")", ":", "\n", "# Basic Hamming distance", "\n", "# goal_state = [0,1]*6", "\n", "# accuracy = sum([abs(x-y) for (x,y) in zip(goal_state,state)])", "\n", "    ", "torch", ".", "manual_seed", "(", "1", ")", "\n", "eq_array", "=", "state", "\n", "#print(\"Equivariance array\",eq_array)", "\n", "child_model", "=", "get_equivariant_network", "(", "self", ".", "child_network_dimensions", ",", "eq_array", ".", "tolist", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "#print(\"No. of parameters:\", sum(p.numel() for p in model.parameters() if p.requires_grad))", "\n", "child_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "child_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "child_model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "child_lr", ")", "\n", "test_accuracy", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "child_epochs", ")", ":", "\n", "#start_time = time.time()", "\n", "      ", "child_model", "=", "train", "(", "child_model", ",", "self", ".", "device", ",", "self", ".", "trainimageset", ",", "self", ".", "trainlabelset", ",", "child_criterion", ",", "child_optimizer", ",", "epoch", ",", "num_epochs", "=", "self", ".", "child_epochs", ",", "train_size", "=", "self", ".", "child_train_size", ")", "\n", "#time_elapsed = time.time() - start_time", "\n", "#print(\"Time elapsed\",time_elapsed,\"secs\")", "\n", "# test", "\n", "test_accuracy", "=", "max", "(", "test_accuracy", ",", "test", "(", "child_model", ",", "self", ".", "device", ",", "self", ".", "testimageset", ",", "self", ".", "testlabelset", ")", ")", "\n", "", "return", "test_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.update_avg_reward": [[192, 194], ["None"], "methods", ["None"], ["", "def", "update_avg_reward", "(", "self", ",", "reward", ",", "time", ")", ":", "\n", "    ", "self", ".", "avg_reward", "=", "(", "self", ".", "avg_reward", "*", "(", "time", "-", "1", ")", "+", "reward", ")", "/", "self", ".", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.update_avg_test_acc": [[195, 197], ["None"], "methods", ["None"], ["", "def", "update_avg_test_acc", "(", "self", ",", "test_acc", ",", "time", ")", ":", "\n", "    ", "self", ".", "avg_test_acc", "=", "(", "self", ".", "avg_test_acc", "*", "(", "time", "-", "1", ")", "+", "test_acc", ")", "/", "self", ".", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.update_current_state": [[198, 201], ["range"], "methods", ["None"], ["", "def", "update_current_state", "(", "self", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "self", ".", "k", ")", ":", "\n", "      ", "self", ".", "current_state", "[", "i", "]", "=", "self", ".", "next_state", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.reset": [[202, 213], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "print", "random.random", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "random.sample"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.ReplayMemory.sample"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "#reset to state 0 w.p. 0.5, rest of the time set to an uniformly random vector of length k", "\n", "    ", "if", "random", ".", "random", "(", ")", ">", "0.0", ":", "\n", "      ", "self", ".", "current_state", "=", "torch", ".", "zeros", "(", "self", ".", "k", ")", "\n", "", "else", ":", "\n", "      ", "a", "=", "[", "0", "]", "*", "self", ".", "k", "+", "[", "1", "]", "*", "self", ".", "k", "\n", "self", ".", "current_state", "=", "torch", ".", "tensor", "(", "random", ".", "sample", "(", "a", ",", "self", ".", "k", ")", ")", "\n", "", "self", ".", "next_state", "=", "torch", ".", "zeros", "(", "self", ".", "k", ")", "\n", "print", "(", "\"Starting state:\"", ",", "self", ".", "current_state", ")", "\n", "self", ".", "time", "=", "0", "\n", "print", "(", "\"reset!\"", ")", "\n", "#=====================================================================Replay Memory===================================================================================================", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.ReplayMemory.__init__": [[220, 224], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "    ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "position", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.ReplayMemory.push": [[225, 231], ["Transition", "len", "gnas_fcc_FashionMNIST.ReplayMemory.memory.append"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "*", "args", ")", ":", "\n", "    ", "\"Saves a transition\"", "\n", "if", "len", "(", "self", ".", "memory", ")", "<", "self", ".", "capacity", ":", "\n", "      ", "self", ".", "memory", ".", "append", "(", "None", ")", "\n", "", "self", ".", "memory", "[", "self", ".", "position", "]", "=", "Transition", "(", "*", "args", ")", "\n", "self", ".", "position", "=", "(", "self", ".", "position", "+", "1", ")", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.ReplayMemory.sample": [[232, 234], ["random.sample"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.ReplayMemory.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "    ", "return", "random", ".", "sample", "(", "self", ".", "memory", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.train": [[70, 86], ["range", "len", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step"], ["def", "train", "(", "net", ",", "device", ",", "trainimageset", ",", "trainlabelset", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "num_epochs", "=", "20", ",", "use_cuda", "=", "True", ",", "train_size", "=", "60000", ",", "batch_size", "=", "64", ")", ":", "\n", "\n", "  ", "for", "i", "in", "range", "(", "len", "(", "trainimageset", ")", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "      ", "images", "=", "trainimageset", "[", "i", "]", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "trainlabelset", "[", "i", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "# Intialize the hidden weight to all zeros", "\n", "outputs", "=", "net", "(", "images", ")", "# Forward pass: compute the output class given a image", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "# Compute the loss: difference between the output class and the pre-given label", "\n", "loss", ".", "backward", "(", ")", "# Backward pass: compute the weight", "\n", "optimizer", ".", "step", "(", ")", "# Optimizer: update the weights of hidden nodes", "\n", "\n", "#if (i+1) % 40 == 0:                              # Logging", "\n", "#print('Epoch [%d/%d], Step [%d/%d], Loss: %.4f'", "\n", "#%(epoch+1, num_epochs, i+1, (train_size/batch_size), loss.item()))", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.test": [[87, 103], ["net.eval", "range", "len", "net", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "labels.size"], "function", ["None"], ["", "def", "test", "(", "net", ",", "device", ",", "testimageset", ",", "testlabelset", ",", "use_cuda", "=", "True", ")", ":", "\n", "  ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "net", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "testimageset", ")", ")", ":", "\n", "      ", "images", "=", "testimageset", "[", "i", "]", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "labels", "=", "testlabelset", "[", "i", "]", "\n", "\n", "outputs", "=", "net", "(", "images", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "# Choose the best class from the output: The class with the best score", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "# Increment the total count", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "sum", "(", ")", "# Increment the correct count", "\n", "\n", "#print('Accuracy of the network on the 1K test images:', (100.0 * correct / total))", "\n", "", "return", "(", "100.0", "*", "correct", "/", "total", ")", "\n", "#=====================================================================Environment (keep it clean :p)============================================================================", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.select_action": [[239, 248], ["random.random", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "[].view().to", "[].view", "random.randrange", "policy_net().max", "policy_net"], "function", ["None"], ["def", "select_action", "(", "state", ",", "EPS", ",", "device", ",", "n_actions", ",", "policy_net", ")", ":", "\n", "  ", "global", "steps_done", "\n", "sample", "=", "random", ".", "random", "(", ")", "\n", "steps_done", "+=", "1", "\n", "if", "sample", ">", "EPS", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "return", "policy_net", "(", "state", ")", ".", "max", "(", "0", ")", "[", "1", "]", ".", "view", "(", "1", ",", "1", ")", ".", "to", "(", "device", ")", "#returns the index instead of the value", "\n", "", "", "else", ":", "\n", "    ", "return", "torch", ".", "tensor", "(", "[", "[", "random", ".", "randrange", "(", "n_actions", ")", "]", "]", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.plot_update": [[251, 259], ["matplotlib.figure", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.pause", "plt.figure.savefig"], "function", ["None"], ["", "", "def", "plot_update", "(", "x_models_trained", ",", "y_accuracy", ")", ":", "\n", "  ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Deep Q-learning FashionMNIST'", ")", "\n", "plt", ".", "xlabel", "(", "'Models trained'", ")", "\n", "plt", ".", "ylabel", "(", "'Accuracy'", ")", "\n", "plt", ".", "plot", "(", "x_models_trained", ",", "y_accuracy", ",", "label", "=", "\"Accuray\"", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "#pause a bit so that plots are updated", "\n", "fig", ".", "savefig", "(", "'GNAS_FCNN_FashionMNIST.eps'", ",", "format", "=", "'eps'", ",", "dpi", "=", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.plot_overall": [[260, 304], ["range", "matplotlib.figure", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.legend", "matplotlib.axis", "matplotlib.axis", "range", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "plt.figure.text", "matplotlib.pause", "plt.figure.savefig", "v_lines.append", "len", "matplotlib.vlines", "sum", "range", "len", "len", "len", "str", "sum", "len", "str", "len", "sum", "len"], "function", ["None"], ["", "def", "plot_overall", "(", "x_models_trained", ",", "y_accuracy", ",", "aug_array_id", "=", "0", ")", ":", "\n", "# average windowed plot", "\n", "# averaged epsilon plot", "\n", "  ", "window_size", "=", "60", "# window_size < 200", "\n", "EPS_MODELS_TRAINED_LIST", "=", "[", "0", ",", "200", ",", "300", ",", "400", ",", "500", ",", "600", ",", "700", ",", "800", ",", "900", ",", "950", ",", "1000", ",", "1200", "]", "\n", "EPS_LIST", "=", "[", "1.0", ",", "0.9", ",", "0.8", ",", "0.7", ",", "0.6", ",", "0.5", ",", "0.4", ",", "0.3", ",", "0.2", ",", "0.1", ",", "0.05", ",", "0.01", "]", "\n", "\n", "y_accuracy_window", "=", "[", "sum", "(", "y_accuracy", "[", "i", ":", "i", "+", "window_size", "]", ")", "/", "window_size", "for", "i", "in", "range", "(", "len", "(", "y_accuracy", ")", "-", "window_size", ")", "]", "\n", "y_epsilon_accuracy", "=", "[", "]", "\n", "v_lines", "=", "[", "]", "\n", "x_models_trained_window", "=", "x_models_trained", "[", "window_size", ":", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "EPS_MODELS_TRAINED_LIST", ")", "-", "1", ")", ":", "\n", "    ", "array", "=", "y_accuracy", "[", "EPS_MODELS_TRAINED_LIST", "[", "i", "]", ":", "EPS_MODELS_TRAINED_LIST", "[", "i", "+", "1", "]", "]", "\n", "y_epsilon_accuracy", "+=", "[", "sum", "(", "array", ")", "/", "(", "len", "(", "array", ")", ")", "]", "*", "(", "len", "(", "array", ")", ")", "\n", "v_lines", ".", "append", "(", "sum", "(", "array", ")", "/", "(", "len", "(", "array", ")", ")", ")", "\n", "\n", "", "y_epsilon_accuracy", "=", "y_epsilon_accuracy", "[", "window_size", ":", "len", "(", "x_models_trained", ")", "]", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "title", "(", "'Deep Q-learning FashionMNIST'", "+", "' Aug'", "+", "str", "(", "aug_array_id", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Models trained'", ")", "\n", "plt", ".", "ylabel", "(", "'Accuracy'", ")", "\n", "plt", ".", "plot", "(", "x_models_trained_window", ",", "y_accuracy_window", ",", "label", "=", "\"Rolling mean Accuray\"", ")", "\n", "plt", ".", "fill_between", "(", "x_models_trained_window", ",", "y_epsilon_accuracy", ",", "label", "=", "\"Average Accuracy Per Epsilon\"", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "plt", ".", "axis", "(", ")", "\n", "plt", ".", "axis", "(", "(", "x1", ",", "x2", ",", "5", ",", "y2", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "v_lines", ")", ")", ":", "\n", "    ", "plt", ".", "vlines", "(", "EPS_MODELS_TRAINED_LIST", "[", "i", "+", "1", "]", ",", "5", ",", "v_lines", "[", "i", "]", ",", "alpha", "=", "0.3", ")", "\n", "\n", "", "fig", ".", "text", "(", "0.18", ",", "0.14", ",", "'$\\epsilon=1$'", ")", "\n", "fig", ".", "text", "(", "0.275", ",", "0.14", ",", "'$.9$'", ")", "\n", "fig", ".", "text", "(", "0.35", ",", "0.14", ",", "'$.8$'", ")", "\n", "fig", ".", "text", "(", "0.428", ",", "0.14", ",", "'$.7$'", ")", "\n", "fig", ".", "text", "(", "0.490", ",", "0.14", ",", "'$.6$'", ")", "\n", "fig", ".", "text", "(", "0.568", ",", "0.14", ",", "'$.5$'", ")", "\n", "fig", ".", "text", "(", "0.637", ",", "0.14", ",", "'$.4$'", ")", "\n", "fig", ".", "text", "(", "0.705", ",", "0.14", ",", "'$.3$'", ")", "\n", "fig", ".", "text", "(", "0.762", ",", "0.14", ",", "'$.2$'", ")", "\n", "fig", ".", "text", "(", "0.795", ",", "0.14", ",", "'$.1$'", ")", "\n", "fig", ".", "text", "(", "0.83", ",", "0.14", ",", "'$.05$'", ")", "\n", "plt", ".", "pause", "(", "0.001", ")", "#pause a bit so that plots are updated", "\n", "fig", ".", "savefig", "(", "'GNAS_FCNN_MNIST_Aug'", "+", "str", "(", "aug_array_id", ")", "+", "'.eps'", ",", "format", "=", "'eps'", ",", "dpi", "=", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.optimize_model": [[309, 354], ["memory.sample", "Transition", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "torch.cat().view().to", "policy_net().gather().to", "[].detach().to", "torch.smooth_l1_loss", "q_optimizer.zero_grad", "F.smooth_l1_loss.backward", "q_optimizer.step", "len", "expected_state_action_values.unsqueeze", "zip", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "policy_net().gather", "[].detach", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "policy_net", "target_net().max", "target_net"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.ReplayMemory.sample", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step"], ["", "def", "optimize_model", "(", "k", ",", "device", ",", "memory", ",", "q_optimizer", ",", "Q_BATCH_SIZE", ",", "Q_GAMMA", ")", ":", "\n", "  ", "if", "len", "(", "memory", ".", "memory", ")", "<", "Q_BATCH_SIZE", ":", "\n", "    ", "return", "\n", "", "transitions", "=", "memory", ".", "sample", "(", "Q_BATCH_SIZE", ")", "\n", "# Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for", "\n", "# detailed explanation). This converts batch-array of Transitions", "\n", "# to Transition of batch-arrays.", "\n", "batch", "=", "Transition", "(", "*", "zip", "(", "*", "transitions", ")", ")", "\n", "\n", "# Compute a mask of non-final states and concatenate the batch elements", "\n", "# (a final state would've been the one after which simulation ended)", "\n", "\n", "state_batch", "=", "torch", ".", "cat", "(", "batch", ".", "state", ")", ".", "view", "(", "Q_BATCH_SIZE", ",", "k", ")", ".", "to", "(", "device", ")", "\n", "action_batch", "=", "torch", ".", "cat", "(", "batch", ".", "action", ")", ".", "to", "(", "device", ")", "\n", "reward_batch", "=", "torch", ".", "cat", "(", "batch", ".", "reward", ")", ".", "to", "(", "device", ")", "\n", "next_state_batch", "=", "torch", ".", "cat", "(", "batch", ".", "next_state", ")", ".", "view", "(", "Q_BATCH_SIZE", ",", "k", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "# Compute Q(s_t, a) - the model computes Q(s_t), then we select the", "\n", "# columns of actions taken. These are the actions which would've been taken", "\n", "# for each batch state according to policy_net", "\n", "#print(\"State batch:\",state_batch)", "\n", "state_action_values", "=", "policy_net", "(", "state_batch", ")", ".", "gather", "(", "1", ",", "action_batch", ")", ".", "to", "(", "device", ")", "\n", "#print(\"state_action_values:\",state_action_values)", "\n", "\n", "# Compute V(s_{t+1}) for all next states.", "\n", "# Expected values of actions for non_final_next_states are computed based", "\n", "# on the \"older\" target_net; selecting their best reward with max(1)[0].", "\n", "# This is merged based on the mask, such that we'll have either the expected", "\n", "# state value or 0 in case the state was final.", "\n", "\n", "next_state_values", "=", "target_net", "(", "next_state_batch", ")", ".", "max", "(", "1", ")", "[", "0", "]", ".", "detach", "(", ")", ".", "to", "(", "device", ")", "\n", "#print(\"next_state_values:\",next_state_values)", "\n", "# Compute the expected Q values", "\n", "expected_state_action_values", "=", "(", "next_state_values", "*", "Q_GAMMA", ")", "+", "reward_batch", "\n", "#print(\"expected_state_action_values:\",expected_state_action_values)", "\n", "# Compute Huber loss", "\n", "loss", "=", "F", ".", "smooth_l1_loss", "(", "state_action_values", ",", "expected_state_action_values", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "# Optimize the model", "\n", "q_optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#for param in policy_net.parameters():", "\n", "#param.grad.data.clamp_(-1, 1)", "\n", "q_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.main": [[355, 515], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "dataloader.get_fashionmnist_trainloader", "dataloader.get_fashionmnist_testloader", "enumerate", "enumerate", "gnas_fcc_FashionMNIST.ReplayMemory", "target_net.load_state_dict", "target_net.eval", "torch.Adam", "gnas_fcc_FashionMNIST.ReplayMemory", "gnas_fcc_FashionMNIST.Environment", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "train_kwargs.update", "test_kwargs.update", "trainimageset.append", "trainlabelset.append", "testimageset.append", "testlabelset.append", "policy_net.state_dict", "policy_net.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "gnas_fcc_FashionMNIST.select_action", "gnas_fcc_FashionMNIST.Environment.step", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "gnas_fcc_FashionMNIST.ReplayMemory.push", "gnas_fcc_FashionMNIST.optimize_model", "policy_net.state_dict", "Variable().to", "Variable().to", "Variable().to", "Variable().to", "print", "y_accuracy.append", "x_models_trained.append", "steps_per_model_list.append", "print", "print", "print", "gnas_fcc_FashionMNIST.plot_update", "gnas_fcc_FashionMNIST.Environment.reset", "target_net.load_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "str", "str", "str", "str", "str", "str", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "policy_net.state_dict", "target_net.state_dict", "Variable", "Variable", "Variable", "Variable", "range", "str", "images.view", "images.view", "range"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_fashionmnist_trainloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.dataloader.get_fashionmnist_testloader", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.select_action", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.step", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.ReplayMemory.push", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.optimize_model", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.plot_update", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.gnas_fcc_FashionMNIST.Environment.reset"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "# For multiple augmentations set the flag --multiple-augmentations to true", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Deep Q-learning FashionMNIST'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-train-size'", ",", "type", "=", "int", ",", "default", "=", "60000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-test-size'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 14)'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 1.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--child-gamma'", ",", "type", "=", "float", ",", "default", "=", "0.7", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'Learning rate step gamma (default: 0.7)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--dry-run'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'quickly check a single pass'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--aug-array-id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'augmentation index to be used from aug_array_list'", ")", "\n", "parser", ".", "add_argument", "(", "'--g-size'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "\n", "help", "=", "'Size of the group array'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_models'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "\n", "help", "=", "'Maximum number of models to be trained'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_episodes'", ",", "type", "=", "int", ",", "default", "=", "60", ",", "\n", "help", "=", "'Maximum number of episodes'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "train_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "child_batch_size", "}", "\n", "test_kwargs", "=", "{", "'batch_size'", ":", "args", ".", "child_test_batch_size", "}", "\n", "if", "use_cuda", ":", "\n", "    ", "cuda_kwargs", "=", "{", "'num_workers'", ":", "1", ",", "\n", "'pin_memory'", ":", "True", ",", "\n", "'shuffle'", ":", "True", "}", "\n", "train_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "test_kwargs", ".", "update", "(", "cuda_kwargs", ")", "\n", "\n", "", "multiple_aug_array_list", "=", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", "\n", "]", "\n", "\n", "k", "=", "args", ".", "g_size", "\n", "aug_array", "=", "multiple_aug_array_list", "[", "args", ".", "aug_array_id", "]", "\n", "print", "(", "\"Augmentation array\"", ",", "aug_array", ")", "\n", "# Setup the dataset for child network", "\n", "trainloader", "=", "get_fashionmnist_trainloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "train_size", "=", "args", ".", "child_train_size", ",", "batch_size", "=", "args", ".", "child_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "testloader", "=", "get_fashionmnist_testloader", "(", "aug_dict", "=", "aug_dict", ",", "aug_array", "=", "aug_array", ",", "test_size", "=", "args", ".", "child_test_size", ",", "batch_size", "=", "args", ".", "child_test_batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "\n", "trainimageset", "=", "[", "]", "\n", "trainlabelset", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "trainloader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "    ", "trainimageset", ".", "append", "(", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", ".", "to", "(", "device", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "trainlabelset", ".", "append", "(", "Variable", "(", "labels", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "testimageset", "=", "[", "]", "\n", "testlabelset", "=", "[", "]", "\n", "for", "i", ",", "(", "images", ",", "labels", ")", "in", "enumerate", "(", "testloader", ")", ":", "# Load a batch of images with its (index, data, class)", "\n", "    ", "testimageset", ".", "append", "(", "Variable", "(", "images", ".", "view", "(", "-", "1", ",", "28", "*", "28", ")", ")", ".", "to", "(", "device", ")", ")", "# Convert torch tensor to Variable: change image from a vector of size 784 to a matrix of 28 x 28", "\n", "testlabelset", ".", "append", "(", "Variable", "(", "labels", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "", "child_network_dimensions", "=", "[", "28", "*", "28", ",", "20", "*", "20", ",", "20", "*", "20", ",", "10", "]", "\n", "\n", "# Setup the Q-network and its hyperparameters", "\n", "input_size", "=", "args", ".", "g_size", "#12 by default", "\n", "hidden_sizes", "=", "[", "400", ",", "400", ",", "400", "]", "\n", "output_size", "=", "input_size", "\n", "n_actions", "=", "output_size", "\n", "memory", "=", "ReplayMemory", "(", "10000", ")", "\n", "#define the policy network and target network", "\n", "\n", "target_net", ".", "load_state_dict", "(", "policy_net", ".", "state_dict", "(", ")", ")", "\n", "target_net", ".", "eval", "(", ")", "\n", "\n", "q_optimizer", "=", "optim", ".", "Adam", "(", "policy_net", ".", "parameters", "(", ")", ",", "lr", "=", "0.001", ")", "\n", "memory", "=", "ReplayMemory", "(", "10000", ")", "\n", "\n", "#=======================================================================Setup for Q-learning=============================================================================", "\n", "Q_BATCH_SIZE", "=", "128", "\n", "Q_GAMMA", "=", "0.5", "# Dependency on the future", "\n", "Q_EPS_LIST", "=", "[", "1.0", ",", "0.9", ",", "0.8", ",", "0.7", ",", "0.6", ",", "0.5", ",", "0.4", ",", "0.3", ",", "0.2", ",", "0.1", ",", "0.05", ",", "0.01", "]", "\n", "Q_EPS_INDEX", "=", "0", "\n", "Q_EPS", "=", "Q_EPS_LIST", "[", "Q_EPS_INDEX", "]", "\n", "Q_MODELS_TRAINED_LIST", "=", "[", "200", ",", "300", ",", "400", ",", "500", ",", "600", ",", "700", ",", "800", ",", "900", ",", "950", ",", "1000", ",", "1200", "]", "\n", "Q_TARGET_UPDATE", "=", "2", "\n", "env", "=", "Environment", "(", "device", "=", "device", ",", "trainimageset", "=", "trainimageset", ",", "trainlabelset", "=", "trainlabelset", ",", "testimageset", "=", "testimageset", ",", "testlabelset", "=", "testlabelset", ",", "child_network_dimensions", "=", "child_network_dimensions", ",", "child_train_size", "=", "args", ".", "child_train_size", ",", "child_test_size", "=", "args", ".", "child_test_size", ",", "child_batch_size", "=", "args", ".", "child_batch_size", ",", "child_test_batch_size", "=", "args", ".", "child_test_batch_size", ",", "child_lr", "=", "args", ".", "child_lr", ",", "child_epochs", "=", "args", ".", "child_epochs", ",", "g_size", "=", "args", ".", "g_size", ")", "# (self, device, trainimageset, trainlabelset, testimageset, testlabelset, child_network_dimensions, child_train_size, child_test_size, child_batch_size, child_test_batch_size, child_lr=1e-3, child_epochs=4, g_size=12)", "\n", "y_accuracy", "=", "[", "env", ".", "base_accuracy", "]", "# Compute the rolling mean accuracy and average per epsilon accuracy from here", "\n", "x_models_trained", "=", "[", "env", ".", "models_trained", "]", "# Should be an enumeration from 1,...,total models to be trained.", "\n", "steps_per_model_list", "=", "[", "]", "\n", "average_model_accuracy", "=", "env", ".", "base_accuracy", "\n", "steps_per_model", "=", "1", "# Considering the base accuracies and steps", "\n", "num_episodes", "=", "0", "\n", "\n", "#==========================================================================Iteration loop===============================================================================", "\n", "while", "env", ".", "models_trained", "<", "args", ".", "max_models", "and", "num_episodes", "<", "args", ".", "max_episodes", ":", "\n", "# Select and perform an action", "\n", "    ", "state", "=", "torch", ".", "tensor", "(", "[", "env", ".", "current_state", "[", "i", "]", "for", "i", "in", "range", "(", "env", ".", "k", ")", "]", ")", ".", "to", "(", "device", ")", "\n", "action", "=", "select_action", "(", "state", ",", "Q_EPS", ",", "device", ",", "n_actions", ",", "policy_net", ")", "\n", "accuracy", ",", "reward", ",", "new_models_trained", ",", "done", "=", "env", ".", "step", "(", "action", ")", "# done = True when 1 episode completes, new_models_trained = True only when a new model has been trained in the step", "\n", "reward", "=", "torch", ".", "tensor", "(", "[", "reward", "]", ",", "device", "=", "device", ")", "\n", "next_state", "=", "torch", ".", "tensor", "(", "[", "env", ".", "next_state", "[", "i", "]", "for", "i", "in", "range", "(", "env", ".", "k", ")", "]", ")", "\n", "memory", ".", "push", "(", "state", ",", "action", ",", "next_state", ",", "reward", ")", "\n", "\n", "steps_per_model", "+=", "1", "\n", "average_model_accuracy", "=", "(", "average_model_accuracy", "*", "(", "steps_per_model", "-", "1", ")", "+", "accuracy", ")", "/", "steps_per_model", "\n", "\n", "#================================================Perform one step of the optimization (on the target network)===========================================================", "\n", "optimize_model", "(", "env", ".", "k", ",", "device", ",", "memory", ",", "q_optimizer", ",", "Q_BATCH_SIZE", ",", "Q_GAMMA", ")", "\n", "#=======================Check if new models are trained===========================================", "\n", "if", "new_models_trained", ":", "\n", "      ", "print", "(", "\"Number of models trained:\"", ",", "env", ".", "models_trained", ")", "\n", "y_accuracy", ".", "append", "(", "average_model_accuracy", ")", "\n", "x_models_trained", ".", "append", "(", "env", ".", "models_trained", ")", "\n", "steps_per_model_list", ".", "append", "(", "steps_per_model", ")", "\n", "average_model_accuracy", "=", "0", "\n", "steps_per_model", "=", "0", "\n", "if", "env", ".", "models_trained", "in", "Q_MODELS_TRAINED_LIST", ":", "\n", "        ", "Q_EPS_INDEX", "+=", "1", "\n", "Q_EPS", "=", "Q_EPS_LIST", "[", "Q_EPS_INDEX", "]", "\n", "\n", "", "", "if", "done", ":", "\n", "      ", "num_episodes", "+=", "1", "\n", "print", "(", "\"Number of episodes:\"", ",", "num_episodes", ")", "\n", "print", "(", "\"Current state:\"", ",", "env", ".", "current_state", ")", "\n", "print", "(", "\"Current epsilon value:\"", ",", "Q_EPS", ")", "\n", "plot_update", "(", "x_models_trained", ",", "y_accuracy", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "# Update the target network, copying all weights and biases in DQN", "\n", "", "if", "env", ".", "models_trained", "%", "Q_TARGET_UPDATE", "==", "0", ":", "\n", "      ", "target_net", ".", "load_state_dict", "(", "policy_net", ".", "state_dict", "(", ")", ")", "\n", "torch", ".", "save", "(", "target_net", ".", "state_dict", "(", ")", ",", "\"Target_Net_FashionMNIST_DQN_AUG_\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ")", "\n", "\n", "#plot_overall(x_models_trained, y_accuracy, args.aug_array_id)", "\n", "\n", "# Save network and plot data", "\n", "", "", "np", ".", "save", "(", "\"y_accuracy\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "y_accuracy", ")", "\n", "np", ".", "save", "(", "\"x_models_trained\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "x_models_trained", ")", "\n", "np", ".", "save", "(", "\"steps_per_model_list\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "steps_per_model_list", ")", "\n", "np", ".", "save", "(", "\"model_accuracies\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "env", ".", "visited_model_accuracies", ")", "\n", "np", ".", "save", "(", "\"model_rewards\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ",", "env", ".", "visited_model_rewards", ")", "\n", "torch", ".", "save", "(", "policy_net", ".", "state_dict", "(", ")", ",", "\"FashionMNIST_DQN_AUG_\"", "+", "str", "(", "args", ".", "aug_array_id", ")", ")", "\n", "print", "(", "'Complete'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.EQNet.__init__": [[26, 35], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.EQNet.__init__"], ["return", "out", "\n", "\n", "\n", "\n", "", "", "def", "get_total_parameters", "(", "network_dimensions", ",", "n_orbits", ")", ":", "\n", "  ", "total", "=", "n_orbits", "[", "0", "]", "+", "network_dimensions", "[", "1", "]", "+", "n_orbits", "[", "1", "]", "+", "network_dimensions", "[", "2", "]", "+", "network_dimensions", "[", "2", "]", "*", "network_dimensions", "[", "3", "]", "+", "network_dimensions", "[", "3", "]", "\n", "return", "total", "\n", "\n", "", "def", "get_equivariance_indices", "(", "eq_array", ",", "I_prev_orbits", ",", "I_prev_index_to_orbit", ",", "input_size", ",", "hidden_size", ")", ":", "\n", "  ", "I_orbits", ",", "I_index_to_orbit", "=", "I_prev_orbits", ",", "I_prev_index_to_orbit", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.EQNet.forward": [[37, 44], ["[].view", "[].view", "equivariance_search_utilities.EQNet.relu", "equivariance_search_utilities.EQNet.relu", "out.mm", "x.mm", "out.mm", "torch.transpose", "equivariance_search_utilities.EQNet.fc1.weight.view", "equivariance_search_utilities.EQNet.fc2.weight.view"], "methods", ["None"], ["\"synthetic4\"", ",", "\"synthetic5\"", ",", "\"synthetic6\"", ",", "\"synthetic7\"", "]", "\n", "G", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "eq_array", ")", ")", ":", "\n", "    ", "if", "eq_array", "[", "i", "]", "==", "1", ":", "\n", "      ", "G", ".", "append", "(", "G_list", "[", "i", "]", ")", "\n", "\n", "", "", "for", "g", "in", "G", ":", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_total_parameters": [[47, 50], ["None"], "function", ["None"], ["\n", "", "return", "I_orbits", ",", "I_index_to_orbit", "\n", "\n", "", "def", "get_equivariant_network", "(", "network_dimensions", "=", "[", "28", "*", "28", ",", "20", "*", "20", ",", "20", "*", "20", ",", "10", "]", ",", "eq_array", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_equivariance_indices": [[51, 66], ["range", "len", "get_g_eq_index", "G.append", "int", "int", "math.sqrt", "math.sqrt"], "function", ["None"], ["# get the equivariance indices", "\n", "  ", "I_prev_orbits", "=", "[", "]", "\n", "I_prev_index_to_orbit", "=", "[", "]", "\n", "I_orbits", "=", "[", "]", "\n", "I_index_to_orbit", "=", "[", "]", "\n", "n_orbits", "=", "[", "]", "\n", "\n", "for", "it", "in", "range", "(", "len", "(", "network_dimensions", ")", "-", "2", ")", ":", "\n", "#I_prev_orbits.append([{i} for i in range(network_dimensions[it]*network_dimensions[it+1])])", "\n", "\n", "    ", "m", ",", "h", "=", "int", "(", "math", ".", "sqrt", "(", "network_dimensions", "[", "it", "]", ")", ")", ",", "int", "(", "math", ".", "sqrt", "(", "network_dimensions", "[", "it", "+", "1", "]", ")", ")", "\n", "I_prev_index_to_orbit", ".", "append", "(", "[", "i", "for", "i", "in", "range", "(", "network_dimensions", "[", "it", "]", "*", "network_dimensions", "[", "it", "+", "1", "]", ")", "]", ")", "\n", "I_index_to_orbit", ".", "append", "(", "squeeze_orbits", "(", "get_G_list_equivariance_indices_graph", "(", "m", ",", "h", ",", "eq_array", ",", "I_prev_index_to_orbit", "[", "it", "]", ",", "d", "=", "4", ")", ")", ")", "\n", "#I_orbits.append(temp_1)", "\n", "#I_index_to_orbit.append(temp_2)", "\n", "n_orbits", ".", "append", "(", "len", "(", "set", "(", "I_index_to_orbit", "[", "it", "]", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_equivariant_network": [[67, 97], ["range", "equivariance_search_utilities.EQNet", "equivariance_search_utilities.get_total_parameters", "print", "I_prev_index_to_orbit.append", "I_index_to_orbit.append", "n_orbits.append", "len", "int", "int", "equivariance_search_utilities.squeeze_orbits", "len", "math.sqrt", "math.sqrt", "equivariance_functions.get_G_list_equivariance_indices_graph", "set", "range"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.get_total_parameters", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.squeeze_orbits", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_G_list_equivariance_indices_graph"], ["\n", "", "eq_indices", "=", "I_index_to_orbit", "\n", "\n", "# define the network model", "\n", "eqnet", "=", "EQNet", "(", "network_dimensions", ",", "eq_indices", ",", "n_orbits", ")", "\n", "\n", "# count the number of parameters", "\n", "pytorch_total_params_orbits", "=", "get_total_parameters", "(", "network_dimensions", ",", "n_orbits", ")", "\n", "print", "(", "\"net parameters orbits:\"", ",", "pytorch_total_params_orbits", ")", "\n", "\n", "#pytorch_total_params = sum(p.numel() for p in eqnet.parameters() if p.requires_grad)", "\n", "#print(\"net parameters:\",pytorch_total_params)", "\n", "return", "eqnet", "\n", "\n", "", "def", "squeeze_orbits", "(", "orbits", ")", ":", "\n", "\n", "  ", "sorted_orbits", ",", "arg_sorted_orbits", "=", "np", ".", "sort", "(", "orbits", ")", ",", "np", ".", "argsort", "(", "orbits", ")", "\n", "rank_orbits", "=", "np", ".", "argsort", "(", "arg_sorted_orbits", ")", "\n", "sorted_ranked_orbits", "=", "[", "]", "\n", "\n", "sorted_orbits", "=", "sorted_orbits", "-", "min", "(", "sorted_orbits", ")", "\n", "sorted_orbits", "=", "sorted_orbits", ".", "tolist", "(", ")", "\n", "\n", "current_rank", "=", "0", "\n", "current_orbit", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "sorted_orbits", ")", ")", ":", "\n", "    ", "if", "sorted_orbits", "[", "i", "]", ">", "current_orbit", ":", "\n", "      ", "current_orbit", "=", "sorted_orbits", "[", "i", "]", "\n", "sorted_orbits", "[", "i", "]", "=", "current_rank", "+", "1", "\n", "current_rank", "+=", "1", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_search_utilities.squeeze_orbits": [[98, 119], ["numpy.argsort", "sorted_orbits.tolist.tolist", "range", "numpy.sort", "numpy.argsort", "min", "len", "range", "len"], "function", ["None"], ["      ", "sorted_orbits", "[", "i", "]", "=", "current_rank", "\n", "\n", "", "", "orbits_new", "=", "[", "sorted_orbits", "[", "rank_orbits", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "sorted_orbits", ")", ")", "]", "\n", "return", "orbits_new", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.rotation_matrix": [[7, 17], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["def", "rotation_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by 90\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "j", ",", "i", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.hflip_matrix": [[19, 29], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "hflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Hflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "i", ",", "m", "-", "1", "-", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.vflip_matrix": [[31, 41], ["w.size", "torch.rand", "range", "range"], "function", ["None"], ["", "def", "vflip_matrix", "(", "w", ")", ":", "\n", "  ", "\"Vflip (square matrix)\"", "\n", "m", ",", "m", "=", "w", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "m", "-", "1", "-", "i", ",", "j", "]", "\n", "\n", "", "", "return", "w_new", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc1": [[44, 58], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic1_matrix": [[59, 68], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc1"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1"], ["", "def", "synthetic1_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc2": [[70, 75], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic2_matrix": [[76, 86], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc2"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2"], ["", "def", "synthetic2_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc3": [[88, 93], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic3_matrix": [[94, 104], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc3"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3"], ["", "def", "synthetic3_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc4": [[106, 114], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic4_matrix": [[115, 125], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc4"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4"], ["", "def", "synthetic4_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc5": [[127, 135], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic5_matrix": [[136, 146], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc5"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5"], ["", "def", "synthetic5_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc6": [[148, 156], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic6_matrix": [[157, 167], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc6"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6"], ["", "def", "synthetic6_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc7": [[169, 177], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.synthetic7_matrix": [[178, 188], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc7"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7"], ["", "def", "synthetic7_matrix", "(", "w", ")", ":", "\n", "  ", "\"Rotates W (square matrix) by one quadrant\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "m", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8": [[190, 195], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.vtrans_matrix": [[196, 206], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc8"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc8"], ["", "def", "vtrans_matrix", "(", "w", ",", "d", "=", "4", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc8", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9": [[208, 213], ["None"], "function", ["None"], ["", "def", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.htrans_matrix": [[214, 224], ["w[].size", "torch.rand", "range", "torch.rand.view", "range", "group_transformation_matrices.get_next_indices_sc9"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.group_transformation_matrices.get_next_indices_sc9"], ["", "def", "htrans_matrix", "(", "w", ",", "d", "=", "4", ")", ":", "\n", "  ", "\"translate vertical\"", "\n", "m", ",", "m", "=", "w", "[", "0", "]", ".", "size", "(", ")", "\n", "w_new", "=", "torch", ".", "rand", "(", "(", "m", ",", "m", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "      ", "w_new", "[", "i", ",", "j", "]", "=", "w", "[", "get_next_indices_sc9", "(", "i", ",", "j", ",", "m", ",", "m", ",", "d", ")", "]", "\n", "\n", "", "", "return", "w_new", ".", "view", "(", "1", ",", "m", ",", "m", ")", "", "", ""]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1": [[6, 20], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "get_next_indices_sc1", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "+", "int", "(", "h", "/", "2", ")", "\n", "", "elif", "i", "<", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "+", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "", "elif", "i", ">=", "int", "(", "m", "/", "2", ")", "and", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "-", "int", "(", "h", "/", "2", ")", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", "-", "int", "(", "m", "/", "2", ")", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2": [[21, 26], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc2", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3": [[27, 32], ["int"], "function", ["None"], ["", "def", "get_next_indices_sc3", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4": [[33, 41], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc4", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", "<", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5": [[42, 50], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc5", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "j", ">=", "int", "(", "h", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "(", "i", "+", "int", "(", "m", "/", "2", ")", ")", "%", "m", ",", "j", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6": [[51, 59], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc6", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", "<", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7": [[60, 68], ["int", "int"], "function", ["None"], ["", "def", "get_next_indices_sc7", "(", "i", ",", "j", ",", "m", ",", "h", ")", ":", "\n", "    ", "\"works for even m,h for now.\"", "\n", "if", "i", ">=", "int", "(", "m", "/", "2", ")", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "int", "(", "h", "/", "2", ")", ")", "%", "h", "\n", "", "else", ":", "\n", "      ", "i_next", ",", "j_next", "=", "i", ",", "j", "\n", "\n", "", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_vert_trans": [[69, 74], ["None"], "function", ["None"], ["", "def", "get_next_indices_vert_trans", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "(", "i", "+", "d", ")", "%", "m", ",", "j", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_hori_trans": [[75, 80], ["None"], "function", ["None"], ["", "def", "get_next_indices_hori_trans", "(", "i", ",", "j", ",", "m", ",", "h", ",", "d", ")", ":", "\n", "    ", "\"one step vertical translation\"", "\n", "i_next", ",", "j_next", "=", "i", ",", "(", "j", "+", "d", ")", "%", "h", "\n", "\n", "return", "(", "i_next", ",", "j_next", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_G_list_equivariance_indices_graph": [[81, 397], ["range", "print", "numpy.zeros", "range", "indices_queue.append", "indices_queue_pair.append", "len", "indices_queue.pop", "indices_queue_pair.pop", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc1", "equivariance_functions.get_next_indices_sc2", "equivariance_functions.get_next_indices_sc2", "equivariance_functions.get_next_indices_sc3", "equivariance_functions.get_next_indices_sc3", "equivariance_functions.get_next_indices_sc4", "equivariance_functions.get_next_indices_sc4", "equivariance_functions.get_next_indices_sc5", "equivariance_functions.get_next_indices_sc5", "equivariance_functions.get_next_indices_sc6", "equivariance_functions.get_next_indices_sc6", "equivariance_functions.get_next_indices_sc7", "equivariance_functions.get_next_indices_sc7", "range", "range", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append", "equivariance_functions.get_next_indices_vert_trans", "equivariance_functions.get_next_indices_vert_trans", "equivariance_functions.get_next_indices_hori_trans", "equivariance_functions.get_next_indices_hori_trans", "indices_queue.append", "indices_queue_pair.append", "indices_queue.append", "indices_queue_pair.append"], "function", ["home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc1", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc2", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc3", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc4", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc5", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc6", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_sc7", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_vert_trans", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_vert_trans", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_hori_trans", "home.repos.pwc.inspect_result.basusourya_autoequivariant_networks.FashionMNIST DQN.equivariance_functions.get_next_indices_hori_trans"], ["", "def", "get_G_list_equivariance_indices_graph", "(", "m", ",", "h", ",", "eq_array", ",", "I_prev", ",", "d", "=", "4", ")", ":", "\n", "  ", "\"Size of input layer = m*m; size of hidden layer = h*h; I permuted indices\"", "\n", "\"d=4 is the default translation step used\"", "\n", "\n", "nx", "=", "m", "*", "m", "#size of X", "\n", "nh", "=", "h", "*", "h", "#size of hidden layer", "\n", "I", "=", "I_prev", "#records the permutation of indices of W, which is of size n*n. For no previous symmetry, I_prev is given as the original indices", "\n", "V", "=", "np", ".", "zeros", "(", "nx", "*", "nh", ")", "-", "1", "#-1 if not visited, else 1", "\n", "current_orbit", "=", "-", "1", "\n", "indices_queue", "=", "[", "]", "\n", "indices_queue_pair", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "nx", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "nh", ")", ":", "\n", "      ", "i_0", "=", "i", "\n", "j_0", "=", "j", "\n", "if", "V", "[", "i_0", "*", "nh", "+", "j_0", "]", "<", "0", ":", "\n", "        ", "V", "[", "i_0", "*", "nh", "+", "j_0", "]", "=", "1", "\n", "index", "=", "i_0", "*", "nh", "+", "j_0", "\n", "indices_queue", ".", "append", "(", "index", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_0", ",", "j_0", "]", ")", "\n", "current_orbit", "+=", "1", "\n", "while", "len", "(", "indices_queue", ")", ">", "0", ":", "\n", "          ", "index", "=", "indices_queue", ".", "pop", "(", "0", ")", "\n", "i_0", ",", "j_0", "=", "indices_queue_pair", ".", "pop", "(", "0", ")", "\n", "I", "[", "index", "]", "=", "current_orbit", "\n", "\n", "if", "eq_array", "[", "0", "]", "==", "1", ":", "\n", "# rotations  ", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#rotate by 90", "\n", "alpha_r", ",", "beta_r", "=", "beta", ",", "m", "-", "1", "-", "alpha", "\n", "gamma_r", ",", "delta_r", "=", "delta", ",", "h", "-", "1", "-", "gamma", "\n", "\n", "i_r", "=", "alpha_r", "*", "m", "+", "beta_r", "\n", "j_r", "=", "gamma_r", "*", "h", "+", "delta_r", "\n", "\n", "index_r", "=", "i_r", "*", "nh", "+", "j_r", "\n", "if", "V", "[", "index_r", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_r", "]", "=", "1", "\n", "I", "[", "index_r", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_r", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_r", ",", "j_r", "]", ")", "\n", "\n", "#rotate by 180", "\n", "", "alpha_rr", ",", "beta_rr", "=", "beta_r", ",", "m", "-", "1", "-", "alpha_r", "\n", "gamma_rr", ",", "delta_rr", "=", "delta_r", ",", "h", "-", "1", "-", "gamma_r", "\n", "\n", "i_rr", "=", "alpha_rr", "*", "m", "+", "beta_rr", "\n", "j_rr", "=", "gamma_rr", "*", "h", "+", "delta_rr", "\n", "\n", "index_rr", "=", "i_rr", "*", "nh", "+", "j_rr", "\n", "if", "V", "[", "index_rr", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_rr", "]", "=", "1", "\n", "I", "[", "index_rr", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_rr", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_rr", ",", "j_rr", "]", ")", "\n", "\n", "#rotate by 270", "\n", "", "alpha_rrr", ",", "beta_rrr", "=", "beta_rr", ",", "m", "-", "1", "-", "alpha_rr", "\n", "gamma_rrr", ",", "delta_rrr", "=", "delta_rr", ",", "h", "-", "1", "-", "gamma_rr", "\n", "\n", "i_rrr", "=", "alpha_rrr", "*", "m", "+", "beta_rrr", "\n", "j_rrr", "=", "gamma_rrr", "*", "h", "+", "delta_rrr", "\n", "\n", "index_rrr", "=", "i_rrr", "*", "nh", "+", "j_rrr", "\n", "if", "V", "[", "index_rrr", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_rrr", "]", "=", "1", "\n", "I", "[", "index_rrr", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_rrr", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_rrr", ",", "j_rrr", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "1", "]", "==", "1", ":", "\n", "# horizontal flip", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#hflip", "\n", "alpha_h", ",", "beta_h", "=", "alpha", ",", "m", "-", "1", "-", "beta", "\n", "gamma_h", ",", "delta_h", "=", "gamma", ",", "h", "-", "1", "-", "delta", "\n", "\n", "i_h", "=", "alpha_h", "*", "m", "+", "beta_h", "\n", "j_h", "=", "gamma_h", "*", "h", "+", "delta_h", "\n", "\n", "index_h", "=", "i_h", "*", "nh", "+", "j_h", "\n", "if", "V", "[", "index_h", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_h", "]", "=", "1", "\n", "I", "[", "index_h", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_h", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_h", ",", "j_h", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "2", "]", "==", "1", ":", "\n", "# vertical flip", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#vflip", "\n", "alpha_h", ",", "beta_h", "=", "m", "-", "1", "-", "alpha", ",", "beta", "\n", "gamma_h", ",", "delta_h", "=", "h", "-", "1", "-", "gamma", ",", "delta", "\n", "\n", "i_h", "=", "alpha_h", "*", "m", "+", "beta_h", "\n", "j_h", "=", "gamma_h", "*", "h", "+", "delta_h", "\n", "\n", "index_h", "=", "i_h", "*", "nh", "+", "j_h", "\n", "if", "V", "[", "index_h", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_h", "]", "=", "1", "\n", "I", "[", "index_h", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_h", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_h", ",", "j_h", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "10", "]", "==", "1", ":", "\n", "# synthetic 1", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to quadrant 2", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc1", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc1", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "#move to quadrant 3", "\n", "", "alpha_qq", ",", "beta_qq", "=", "get_next_indices_sc1", "(", "alpha_q", ",", "beta_q", ",", "m", ",", "m", ")", "\n", "gamma_qq", ",", "delta_qq", "=", "get_next_indices_sc1", "(", "gamma_q", ",", "delta_q", ",", "h", ",", "h", ")", "\n", "\n", "i_qq", "=", "alpha_qq", "*", "m", "+", "beta_qq", "\n", "j_qq", "=", "gamma_qq", "*", "h", "+", "delta_qq", "\n", "\n", "index_qq", "=", "i_qq", "*", "nh", "+", "j_qq", "\n", "if", "V", "[", "index_qq", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_qq", "]", "=", "1", "\n", "I", "[", "index_qq", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_qq", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_qq", ",", "j_qq", "]", ")", "\n", "\n", "#move to quadrant 4", "\n", "", "alpha_qqq", ",", "beta_qqq", "=", "get_next_indices_sc1", "(", "alpha_qq", ",", "beta_qq", ",", "m", ",", "m", ")", "\n", "gamma_qqq", ",", "delta_qqq", "=", "get_next_indices_sc1", "(", "gamma_qq", ",", "delta_qq", ",", "h", ",", "h", ")", "\n", "\n", "i_qqq", "=", "alpha_qqq", "*", "m", "+", "beta_qqq", "\n", "j_qqq", "=", "gamma_qqq", "*", "h", "+", "delta_qqq", "\n", "\n", "index_qqq", "=", "i_qqq", "*", "nh", "+", "j_qqq", "\n", "if", "V", "[", "index_qqq", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_qqq", "]", "=", "1", "\n", "I", "[", "index_qqq", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_qqq", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_qqq", ",", "j_qqq", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "11", "]", "==", "1", ":", "\n", "# synthetic 2", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc2", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc2", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "5", "]", "==", "1", ":", "\n", "# synthetic 3", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc3", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc3", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "6", "]", "==", "1", ":", "\n", "# synthetic 4", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc4", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc4", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "7", "]", "==", "1", ":", "\n", "# synthetic 5", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc5", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc5", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "8", "]", "==", "1", ":", "\n", "# synthetic 6", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc6", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc6", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "9", "]", "==", "1", ":", "\n", "# synthetic 7", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "\n", "#move to next half", "\n", "alpha_q", ",", "beta_q", "=", "get_next_indices_sc7", "(", "alpha", ",", "beta", ",", "m", ",", "m", ")", "\n", "gamma_q", ",", "delta_q", "=", "get_next_indices_sc7", "(", "gamma", ",", "delta", ",", "h", ",", "h", ")", "\n", "\n", "i_q", "=", "alpha_q", "*", "m", "+", "beta_q", "\n", "j_q", "=", "gamma_q", "*", "h", "+", "delta_q", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "              ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "", "if", "eq_array", "[", "4", "]", "==", "1", ":", "\n", "# vertical translation ", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "for", "it", "in", "range", "(", "m", ")", ":", "\n", "#translate one step", "\n", "              ", "alpha", ",", "beta", "=", "get_next_indices_vert_trans", "(", "alpha", ",", "beta", ",", "m", ",", "m", ",", "d", ")", "\n", "gamma", ",", "delta", "=", "get_next_indices_vert_trans", "(", "gamma", ",", "delta", ",", "h", ",", "h", ",", "d", ")", "\n", "\n", "i_q", "=", "alpha", "*", "m", "+", "beta", "\n", "j_q", "=", "gamma", "*", "h", "+", "delta", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "                ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "it", "+=", "d", "-", "1", "\n", "\n", "", "", "if", "eq_array", "[", "3", "]", "==", "1", ":", "\n", "# horizontal translation", "\n", "            ", "alpha", ",", "beta", "=", "i_0", "//", "m", ",", "i_0", "%", "m", "\n", "gamma", ",", "delta", "=", "j_0", "//", "h", ",", "j_0", "%", "h", "\n", "for", "it", "in", "range", "(", "h", ")", ":", "\n", "#translate one step", "\n", "              ", "alpha", ",", "beta", "=", "get_next_indices_hori_trans", "(", "alpha", ",", "beta", ",", "m", ",", "m", ",", "d", ")", "\n", "gamma", ",", "delta", "=", "get_next_indices_hori_trans", "(", "gamma", ",", "delta", ",", "h", ",", "h", ",", "d", ")", "\n", "\n", "i_q", "=", "alpha", "*", "m", "+", "beta", "\n", "j_q", "=", "gamma", "*", "h", "+", "delta", "\n", "\n", "index_q", "=", "i_q", "*", "nh", "+", "j_q", "\n", "if", "V", "[", "index_q", "]", "<", "0", ":", "\n", "                ", "V", "[", "index_q", "]", "=", "1", "\n", "I", "[", "index_q", "]", "=", "current_orbit", "\n", "indices_queue", ".", "append", "(", "index_q", ")", "\n", "indices_queue_pair", ".", "append", "(", "[", "i_q", ",", "j_q", "]", ")", "\n", "\n", "", "it", "+=", "d", "-", "1", "\n", "", "", "", "", "", "", "print", "(", "\"current_orbit\"", ",", "current_orbit", ")", "\n", "return", "I", "", "", ""]]}