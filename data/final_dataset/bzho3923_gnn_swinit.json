{"home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.UFGConv.__init__": [[131, 148], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ufg_global.UFGConv.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ufg_global.UFGConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "r", ",", "Lev", ",", "num_nodes", ",", "shrinkage", "=", "None", ",", "threshold", "=", "1e-4", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "UFGConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Lev", "=", "Lev", "\n", "self", ".", "shrinkage", "=", "shrinkage", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "crop_len", "=", "(", "Lev", "-", "1", ")", "*", "num_nodes", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "filter1", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "1", ")", ")", "\n", "self", ".", "filter2", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "1", ")", ")", "\n", "self", ".", "filter3", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_nodes", ",", "1", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.UFGConv.reset_parameters": [[150, 157], ["torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "filter1", ",", "0.9", ",", "1.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "filter2", ",", "0.9", ",", "1.1", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "filter3", ",", "0.9", ",", "1.1", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.UFGConv.forward": [[158, 198], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch_sparse.spmm", "torch_sparse.spmm", "torch_sparse.spmm", "torch_sparse.spmm", "torch_sparse.spmm", "torch_sparse.spmm", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "Exception", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "d_list", ")", ":", "\n", "# d_list is a list of matrix operators (torch sparse format), row-by-row", "\n", "# x is a torch dense tensor", "\n", "        ", "x", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "\n", "\n", "# Fast Tight Frame Decomposition", "\n", "#         x0 = spmm(d_list[0][0], d_list[0][1], self.num_nodes, self.num_nodes, x)", "\n", "x1", "=", "spmm", "(", "d_list", "[", "1", "]", "[", "0", "]", ",", "d_list", "[", "1", "]", "[", "1", "]", ",", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ",", "x", ")", "\n", "x2", "=", "spmm", "(", "d_list", "[", "2", "]", "[", "0", "]", ",", "d_list", "[", "2", "]", "[", "1", "]", ",", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ",", "x", ")", "\n", "x3", "=", "spmm", "(", "d_list", "[", "3", "]", "[", "0", "]", ",", "d_list", "[", "3", "]", "[", "1", "]", ",", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ",", "x", ")", "\n", "#         x = torch.cat((x1, x2, x3), dim=0)", "\n", "#         x = torch.sparse.mm(torch.cat(d_list, dim=0), x)", "\n", "# the output x has shape [r * Lev * num_nodes, #Features]", "\n", "\n", "# perform wavelet shrinkage (optional)", "\n", "if", "self", ".", "shrinkage", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "shrinkage", "==", "'soft'", ":", "\n", "                ", "x", "=", "torch", ".", "mul", "(", "torch", ".", "sign", "(", "x", ")", ",", "(", "(", "(", "torch", ".", "abs", "(", "x", ")", "-", "self", ".", "threshold", ")", "+", "torch", ".", "abs", "(", "torch", ".", "abs", "(", "x", ")", "-", "self", ".", "threshold", ")", ")", "/", "2", ")", ")", "\n", "", "elif", "self", ".", "shrinkage", "==", "'hard'", ":", "\n", "                ", "x", "=", "torch", ".", "mul", "(", "x", ",", "(", "torch", ".", "abs", "(", "x", ")", ">", "self", ".", "threshold", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Shrinkage type is invalid'", ")", "\n", "\n", "# Hadamard product in spectral domain", "\n", "", "", "x1", "=", "self", ".", "filter1", "*", "x1", "\n", "x2", "=", "self", ".", "filter2", "*", "x2", "\n", "x3", "=", "self", ".", "filter3", "*", "x3", "\n", "# filter has shape [r * Lev * num_nodes, 1]", "\n", "# the output x has shape [r * Lev * num_nodes, #Features]", "\n", "\n", "# Fast Tight Frame Reconstruction", "\n", "#         x = torch.sparse.mm(torch.cat(d_list[self.Lev - 1:], dim=1), x[self.crop_len:, :])", "\n", "x1", "=", "spmm", "(", "d_list", "[", "1", "]", "[", "0", "]", ",", "d_list", "[", "1", "]", "[", "1", "]", ",", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ",", "x1", ")", "\n", "x2", "=", "spmm", "(", "d_list", "[", "2", "]", "[", "0", "]", ",", "d_list", "[", "2", "]", "[", "1", "]", ",", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ",", "x2", ")", "\n", "x3", "=", "spmm", "(", "d_list", "[", "3", "]", "[", "0", "]", ",", "d_list", "[", "3", "]", "[", "1", "]", ",", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ",", "x3", ")", "\n", "\n", "x", "=", "x1", "+", "x2", "+", "x3", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "x", "+=", "self", ".", "bias", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.Net.__init__": [[201, 218], ["torch.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "ufg_global.Net.convs.append", "range", "ufg_global.Net.convs.append", "ufg_global.UFGConv", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "ufg_global.Net.bns.append", "ufg_global.Net.convs.append", "ufg_global.UFGConv", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "ufg_global.UFGConv", "ufg_global.Net.bns.append", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "nhid", ",", "num_classes", ",", "r", ",", "Lev", ",", "num_nodes", ",", "shrinkage", "=", "None", ",", "threshold", "=", "1e-4", ",", "\n", "dropout_prob", "=", "0.5", ",", "num_layers", "=", "2", ",", "batch_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "convs", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convs", ".", "append", "(", "UFGConv", "(", "num_features", ",", "nhid", ",", "r", ",", "Lev", ",", "num_nodes", ",", "shrinkage", "=", "shrinkage", ",", "threshold", "=", "threshold", ")", ")", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "self", ".", "bns", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bns", ".", "append", "(", "torch", ".", "nn", ".", "LayerNorm", "(", "nhid", ")", ")", "\n", "", "for", "_", "in", "range", "(", "num_layers", "-", "2", ")", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "UFGConv", "(", "nhid", ",", "nhid", ",", "r", ",", "Lev", ",", "num_nodes", ",", "shrinkage", "=", "shrinkage", ",", "threshold", "=", "threshold", ")", ")", "\n", "if", "self", ".", "batch_norm", ":", "\n", "                ", "self", ".", "bns", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "nhid", ")", ")", "\n", "", "", "self", ".", "convs", ".", "append", "(", "UFGConv", "(", "nhid", ",", "num_classes", ",", "r", ",", "Lev", ",", "num_nodes", ",", "shrinkage", "=", "shrinkage", ",", "threshold", "=", "threshold", ")", ")", "\n", "\n", "self", ".", "dropout_prob", "=", "dropout_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.Net.reset_parameters": [[219, 225], ["conv.reset_parameters", "bn.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "conv", ".", "reset_parameters", "(", ")", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "for", "bn", "in", "self", ".", "bns", ":", "\n", "                ", "bn", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.Net.forward": [[226, 241], ["enumerate", "conv", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "d_list", ",", "n_id", ")", ":", "\n", "        ", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convs", "[", ":", "-", "1", "]", ")", ":", "\n", "            ", "x", "=", "conv", "(", "x", ",", "d_list", ")", "\n", "#             num_nodes = x.shape[0]", "\n", "#             memory_dim = x.shape[1]", "\n", "#             x = x[n_id, :].clone()", "\n", "if", "self", ".", "batch_norm", ":", "\n", "                ", "x", "=", "self", ".", "bns", "[", "i", "]", "(", "x", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout_prob", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "#             i = torch.stack((n_id.view(-1,1).repeat(1,memory_dim).view(-1), torch.arange(memory_dim).repeat(n_id.size(0)).to(device)), dim=0)", "\n", "#             x = torch.sparse_coo_tensor(i, x.view(-1), (num_nodes, memory_dim)).to_dense()", "\n", "", "x", "=", "self", ".", "convs", "[", "-", "1", "]", "(", "x", ",", "d_list", ")", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.scipy_to_torch_sparse": [[30, 39], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "scipy.sparse.coo_matrix", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.stack", "torch.stack", "torch.stack", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.stack.to", "torch.Tensor.to"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "scipy_to_torch_sparse", "(", "A", ",", "device", ")", ":", "\n", "    ", "A", "=", "sparse", ".", "coo_matrix", "(", "A", ")", "\n", "row", "=", "torch", ".", "tensor", "(", "A", ".", "row", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "col", "=", "torch", ".", "tensor", "(", "A", ".", "col", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "index", "=", "torch", ".", "stack", "(", "(", "row", ",", "col", ")", ",", "dim", "=", "0", ")", "\n", "value", "=", "torch", ".", "Tensor", "(", "A", ".", "data", ")", "\n", "\n", "return", "(", "index", ".", "to", "(", "device", ")", ",", "value", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.ChebyshevApprox": [[42, 53], ["range", "numpy.linspace", "Integrand", "numpy.trapz", "numpy.cos", "f", "numpy.cos"], "function", ["None"], ["", "def", "ChebyshevApprox", "(", "f", ",", "n", ")", ":", "# Assuming f : [0, pi] -> R.", "\n", "    ", "quad_points", "=", "500", "\n", "c", "=", "[", "None", "]", "*", "n", "\n", "a", "=", "math", ".", "pi", "/", "2", "\n", "for", "k", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "        ", "Integrand", "=", "lambda", "x", ":", "np", ".", "cos", "(", "(", "k", "-", "1", ")", "*", "x", ")", "*", "f", "(", "a", "*", "(", "np", ".", "cos", "(", "x", ")", "+", "1", ")", ")", "\n", "x", "=", "np", ".", "linspace", "(", "0", ",", "np", ".", "pi", ",", "quad_points", ")", "\n", "y", "=", "Integrand", "(", "x", ")", "\n", "c", "[", "k", "-", "1", "]", "=", "2", "/", "np", ".", "pi", "*", "np", ".", "trapz", "(", "y", ",", "x", ")", "\n", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.get_operator": [[55, 77], ["len", "range", "scipy.sparse.identity", "dict", "range", "ufg_global.ChebyshevApprox", "range", "range"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.ChebyshevApprox"], ["", "def", "get_operator", "(", "L", ",", "DFilters", ",", "n", ",", "s", ",", "J", ",", "Lev", ")", ":", "\n", "    ", "r", "=", "len", "(", "DFilters", ")", "\n", "c", "=", "[", "None", "]", "*", "r", "\n", "for", "j", "in", "range", "(", "r", ")", ":", "\n", "        ", "c", "[", "j", "]", "=", "ChebyshevApprox", "(", "DFilters", "[", "j", "]", ",", "n", ")", "\n", "", "a", "=", "np", ".", "pi", "/", "2", "# consider the domain of masks as [0, pi]", "\n", "# Fast Tight Frame Decomposition (FTFD)", "\n", "FD1", "=", "sparse", ".", "identity", "(", "L", ".", "shape", "[", "0", "]", ")", "\n", "d", "=", "dict", "(", ")", "\n", "for", "l", "in", "range", "(", "1", ",", "Lev", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "r", ")", ":", "\n", "            ", "T0F", "=", "FD1", "\n", "T1F", "=", "(", "(", "s", "**", "(", "-", "J", "+", "l", "-", "1", ")", "/", "a", ")", "*", "L", ")", "@", "T0F", "-", "T0F", "\n", "d", "[", "j", ",", "l", "-", "1", "]", "=", "(", "1", "/", "2", ")", "*", "c", "[", "j", "]", "[", "0", "]", "*", "T0F", "+", "c", "[", "j", "]", "[", "1", "]", "*", "T1F", "\n", "for", "k", "in", "range", "(", "2", ",", "n", ")", ":", "\n", "                ", "TkF", "=", "(", "(", "2", "/", "a", "*", "s", "**", "(", "-", "J", "+", "l", "-", "1", ")", ")", "*", "L", ")", "@", "T1F", "-", "2", "*", "T1F", "-", "T0F", "\n", "T0F", "=", "T1F", "\n", "T1F", "=", "TkF", "\n", "d", "[", "j", ",", "l", "-", "1", "]", "+=", "c", "[", "j", "]", "[", "k", "]", "*", "TkF", "\n", "", "", "FD1", "=", "d", "[", "0", ",", "l", "-", "1", "]", "\n", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.get_d_list": [[79, 128], ["torch_geometric.utils.get_laplacian", "scipy.sparse.coo_matrix", "len", "range", "ufg_global.get_operator", "list", "range", "ufg_global.ChebyshevApprox", "range", "L[].cpu().numpy", "numpy.cos", "numpy.sin", "list.append", "[].cpu().numpy", "[].cpu().numpy", "numpy.square", "numpy.square", "Exception", "numpy.log", "numpy.log", "ufg_global.scipy_to_torch_sparse", "L[].cpu", "numpy.cos", "numpy.sin", "numpy.sqrt", "numpy.sin", "numpy.multiply", "numpy.multiply", "[].cpu", "[].cpu", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sqrt", "numpy.sin", "numpy.cos", "numpy.sqrt", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.get_operator", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.ChebyshevApprox", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.scipy_to_torch_sparse"], ["", "def", "get_d_list", "(", "edge_index", ",", "num_nodes", ")", ":", "\n", "    ", "L", "=", "get_laplacian", "(", "edge_index", ",", "num_nodes", "=", "num_nodes", ",", "normalization", "=", "'sym'", ")", "\n", "L", "=", "sparse", ".", "coo_matrix", "(", "(", "L", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "(", "L", "[", "0", "]", "[", "0", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "L", "[", "0", "]", "[", "1", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ",", "shape", "=", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "\n", "\n", "## FrameType = 'Haar'", "\n", "FrameType", "=", "'Haar'", "\n", "if", "FrameType", "==", "'Haar'", ":", "\n", "        ", "D1", "=", "lambda", "x", ":", "np", ".", "cos", "(", "x", "/", "2", ")", "\n", "D2", "=", "lambda", "x", ":", "np", ".", "sin", "(", "x", "/", "2", ")", "\n", "DFilters", "=", "[", "D1", ",", "D2", "]", "\n", "RFilters", "=", "[", "D1", ",", "D2", "]", "\n", "", "elif", "FrameType", "==", "'Linear'", ":", "\n", "        ", "D1", "=", "lambda", "x", ":", "np", ".", "square", "(", "np", ".", "cos", "(", "x", "/", "2", ")", ")", "\n", "D2", "=", "lambda", "x", ":", "np", ".", "sin", "(", "x", ")", "/", "np", ".", "sqrt", "(", "2", ")", "\n", "D3", "=", "lambda", "x", ":", "np", ".", "square", "(", "np", ".", "sin", "(", "x", "/", "2", ")", ")", "\n", "DFilters", "=", "[", "D1", ",", "D2", ",", "D3", "]", "\n", "RFilters", "=", "[", "D1", ",", "D2", ",", "D3", "]", "\n", "", "elif", "FrameType", "==", "'Quadratic'", ":", "# not accurate so far", "\n", "        ", "D1", "=", "lambda", "x", ":", "np", ".", "cos", "(", "x", "/", "2", ")", "**", "3", "\n", "D2", "=", "lambda", "x", ":", "np", ".", "multiply", "(", "(", "np", ".", "sqrt", "(", "3", ")", "*", "np", ".", "sin", "(", "x", "/", "2", ")", ")", ",", "np", ".", "cos", "(", "x", "/", "2", ")", "**", "2", ")", "\n", "D3", "=", "lambda", "x", ":", "np", ".", "multiply", "(", "(", "np", ".", "sqrt", "(", "3", ")", "*", "np", ".", "sin", "(", "x", "/", "2", ")", "**", "2", ")", ",", "np", ".", "cos", "(", "x", "/", "2", ")", ")", "\n", "D4", "=", "lambda", "x", ":", "np", ".", "sin", "(", "x", "/", "2", ")", "**", "3", "\n", "DFilters", "=", "[", "D1", ",", "D2", ",", "D3", ",", "D4", "]", "\n", "RFilters", "=", "[", "D1", ",", "D2", ",", "D3", ",", "D4", "]", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Invalid FrameType'", ")", "\n", "\n", "", "Lev", "=", "2", "# level of transform", "\n", "dilation", "=", "2", "# dilation scale", "\n", "n", "=", "2", "# n - 1 = Degree of Chebyshev Polynomial Approximation", "\n", "lambda_max", "=", "4", "\n", "J", "=", "np", ".", "log", "(", "lambda_max", "/", "np", ".", "pi", ")", "/", "np", ".", "log", "(", "dilation", ")", "+", "Lev", "-", "1", "# dilation level to start the decomposition", "\n", "r", "=", "len", "(", "DFilters", ")", "\n", "# perform the Chebyshev Approximation", "\n", "c", "=", "[", "None", "]", "*", "r", "\n", "for", "j", "in", "range", "(", "r", ")", ":", "\n", "        ", "c", "[", "j", "]", "=", "ChebyshevApprox", "(", "DFilters", "[", "j", "]", ",", "n", ")", "\n", "\n", "# get matrix operators", "\n", "", "d", "=", "get_operator", "(", "L", ",", "DFilters", ",", "n", ",", "dilation", ",", "J", ",", "Lev", ")", "\n", "# enhance sparseness of the matrix operators (optional)", "\n", "# d[np.abs(d) < 0.001] = 0.0", "\n", "# store the matrix operators (torch sparse format) into a list: row-by-row", "\n", "d_list", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "r", ")", ":", "\n", "        ", "for", "l", "in", "range", "(", "Lev", ")", ":", "\n", "            ", "d_list", ".", "append", "(", "scipy_to_torch_sparse", "(", "d", "[", "i", ",", "l", "]", ",", "edge_index", ".", "device", ")", ")", "\n", "", "", "return", "d_list", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.FeedForward.__init__": [[16, 70], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "NameError", "torch.nn.Linear", "torch.nn.Linear", "act", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "act", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Sequential", "torch.nn.Sequential", "NameError", "torch.nn.Linear", "torch.nn.Linear", "act", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "act", "torch.nn.Sequential", "torch.nn.Sequential", "NameError", "torch.nn.Linear", "torch.nn.Linear", "act", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "act", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "act", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Linear", "torch.nn.Linear", "act", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "act", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "act"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "hidden_dim", ",", "out_dim", ",", "dropout", "=", "0.", ",", "activation", "=", "'gelu'", ",", "layer", "=", "2", ",", "LN", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "activation", "==", "'relu'", ":", "\n", "            ", "act", "=", "nn", ".", "ReLU", "\n", "", "elif", "activation", "==", "'gelu'", ":", "\n", "            ", "act", "=", "nn", ".", "GELU", "\n", "", "elif", "activation", "==", "'tanh'", ":", "\n", "            ", "act", "=", "nn", ".", "Tanh", "\n", "", "else", ":", "raise", "NameError", "(", "'invalid activation'", ")", "\n", "\n", "if", "LN", ":", "\n", "            ", "if", "layer", "==", "2", ":", "\n", "                ", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", ",", "\n", "act", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", ",", "\n", "act", "(", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "out_dim", ")", "\n", ")", "\n", "", "elif", "layer", "==", "3", ":", "\n", "                ", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", ",", "\n", "act", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "act", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", ",", "\n", "act", "(", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "out_dim", ")", "\n", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'only accept 2 or 3 layers'", ")", "\n", "", "else", ":", "\n", "            ", "if", "layer", "==", "2", ":", "\n", "                ", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", ",", "\n", "act", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", ",", "\n", "act", "(", ")", "\n", ")", "\n", "", "elif", "layer", "==", "3", ":", "\n", "                ", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", ",", "\n", "act", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "act", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", ",", "\n", "act", "(", ")", "\n", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'only accept 2 or 3 layers'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.FeedForward.forward": [[71, 73], ["tgn_mlp.FeedForward.net"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.FeedForward.reset_parameters": [[73, 79], ["tgn_mlp.FeedForward.children", "layer.named_modules", "hasattr", "print", "l.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "for", "n", ",", "l", "in", "layer", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "l", ",", "'reset_parameters'", ")", ":", "\n", "                    ", "print", "(", "f'Reset trainable parameters of layer = {l}'", ")", "\n", "l", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TGNMemory.__init__": [[105, 141], ["super().__init__", "copy.deepcopy", "tgn_mlp.TimeEncoder", "tgn_mlp.TGNMemory.register_buffer", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "tgn_mlp.TGNMemory.register_buffer", "tgn_mlp.TGNMemory.register_buffer", "tgn_mlp.TGNMemory.reset_parameters", "torch.nn.GRUCell", "torch.nn.GRUCell", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "tgn_mlp.FeedForward", "tgn_mlp.FeedForward"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_nodes", ":", "int", ",", "raw_msg_dim", ":", "int", ",", "memory_dim", ":", "int", ",", "\n", "time_dim", ":", "int", ",", "message_module", ":", "Callable", ",", "\n", "aggregator_module", ":", "Callable", ",", "dropout", "=", "0.", ",", "mlp_hid_dim", "=", "None", ",", "activation", "=", "'gelu'", ",", "mlp_layer", "=", "2", ",", "mem_func", "=", "'mlp'", ")", ":", "\n", "        ", "super", "(", "TGNMemory", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "raw_msg_dim", "=", "raw_msg_dim", "\n", "self", ".", "memory_dim", "=", "memory_dim", "\n", "self", ".", "time_dim", "=", "time_dim", "\n", "self", ".", "mem_func", "=", "mem_func", "\n", "\n", "self", ".", "msg_s_module", "=", "message_module", "\n", "self", ".", "msg_d_module", "=", "copy", ".", "deepcopy", "(", "message_module", ")", "\n", "self", ".", "aggr_module", "=", "aggregator_module", "\n", "self", ".", "time_enc", "=", "TimeEncoder", "(", "time_dim", ")", "\n", "\n", "\n", "if", "mem_func", "==", "'mlp'", ":", "\n", "            ", "if", "mlp_hid_dim", "is", "not", "None", ":", "\n", "                ", "self", ".", "mlp", "=", "FeedForward", "(", "message_module", ".", "out_channels", "+", "memory_dim", ",", "mlp_hid_dim", ",", "memory_dim", ",", "dropout", "=", "dropout", ",", "layer", "=", "mlp_layer", ",", "activation", "=", "activation", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "mlp", "=", "FeedForward", "(", "message_module", ".", "out_channels", "+", "memory_dim", ",", "memory_dim", ",", "memory_dim", ",", "dropout", "=", "dropout", ",", "layer", "=", "mlp_layer", ",", "activation", "=", "activation", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "gru", "=", "GRUCell", "(", "message_module", ".", "out_channels", ",", "memory_dim", ")", "\n", "\n", "\n", "", "self", ".", "register_buffer", "(", "'memory'", ",", "torch", ".", "empty", "(", "num_nodes", ",", "memory_dim", ")", ")", "\n", "last_update", "=", "torch", ".", "empty", "(", "self", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "register_buffer", "(", "'last_update'", ",", "last_update", ")", "\n", "self", ".", "register_buffer", "(", "'__assoc__'", ",", "\n", "torch", ".", "empty", "(", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "self", ".", "msg_s_store", "=", "{", "}", "\n", "self", ".", "msg_d_store", "=", "{", "}", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TGNMemory.reset_parameters": [[142, 156], ["hasattr", "hasattr", "hasattr", "tgn_mlp.TGNMemory.time_enc.reset_parameters", "tgn_mlp.TGNMemory.reset_state", "tgn_mlp.TGNMemory.msg_s_module.reset_parameters", "tgn_mlp.TGNMemory.msg_d_module.reset_parameters", "tgn_mlp.TGNMemory.aggr_module.reset_parameters", "tgn_mlp.TGNMemory.mlp.reset_parameters", "tgn_mlp.TGNMemory.gru.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "msg_s_module", ",", "'reset_parameters'", ")", ":", "\n", "            ", "self", ".", "msg_s_module", ".", "reset_parameters", "(", ")", "\n", "", "if", "hasattr", "(", "self", ".", "msg_d_module", ",", "'reset_parameters'", ")", ":", "\n", "            ", "self", ".", "msg_d_module", ".", "reset_parameters", "(", ")", "\n", "", "if", "hasattr", "(", "self", ".", "aggr_module", ",", "'reset_parameters'", ")", ":", "\n", "            ", "self", ".", "aggr_module", ".", "reset_parameters", "(", ")", "\n", "", "self", ".", "time_enc", ".", "reset_parameters", "(", ")", "\n", "\n", "if", "self", ".", "mem_func", "==", "'mlp'", ":", "\n", "            ", "self", ".", "mlp", ".", "reset_parameters", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gru", ".", "reset_parameters", "(", ")", "\n", "", "self", ".", "reset_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TGNMemory.reset_state": [[157, 162], ["torch_geometric.nn.inits.zeros", "torch_geometric.nn.inits.zeros", "tgn_mlp.TGNMemory.__reset_message_store__"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__reset_message_store__"], ["", "def", "reset_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the memory to its initial state.\"\"\"", "\n", "zeros", "(", "self", ".", "memory", ")", "\n", "zeros", "(", "self", ".", "last_update", ")", "\n", "self", ".", "__reset_message_store__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TGNMemory.detach": [[163, 166], ["tgn_mlp.TGNMemory.memory.detach_"], "methods", ["None"], ["", "def", "detach", "(", "self", ")", ":", "\n", "        ", "\"\"\"Detachs the memory from gradient computation.\"\"\"", "\n", "self", ".", "memory", ".", "detach_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TGNMemory.forward": [[167, 176], ["tgn_mlp.TGNMemory.__get_updated_memory__"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__get_updated_memory__"], ["", "def", "forward", "(", "self", ",", "n_id", ":", "Tensor", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "\"\"\"Returns, for all nodes :obj:`n_id`, their current memory and their\n        last updated timestamp.\"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "memory", ",", "last_update", "=", "self", ".", "__get_updated_memory__", "(", "n_id", ")", "\n", "", "else", ":", "\n", "            ", "memory", ",", "last_update", "=", "self", ".", "memory", "[", "n_id", "]", ",", "self", ".", "last_update", "[", "n_id", "]", "\n", "\n", "", "return", "memory", ",", "last_update", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TGNMemory.update_state": [[177, 190], ["torch.cat().unique", "torch.cat().unique", "torch.cat().unique", "torch.cat().unique", "tgn_mlp.TGNMemory.__update_memory__", "tgn_mlp.TGNMemory.__update_msg_store__", "tgn_mlp.TGNMemory.__update_msg_store__", "tgn_mlp.TGNMemory.__update_msg_store__", "tgn_mlp.TGNMemory.__update_msg_store__", "tgn_mlp.TGNMemory.__update_memory__", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_memory__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_msg_store__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_msg_store__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_msg_store__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_msg_store__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_memory__"], ["", "def", "update_state", "(", "self", ",", "src", ",", "dst", ",", "t", ",", "raw_msg", ")", ":", "\n", "        ", "\"\"\"Updates the memory with newly encountered interactions\n        :obj:`(src, dst, t, raw_msg)`.\"\"\"", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "dst", "]", ")", ".", "unique", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "__update_memory__", "(", "n_id", ")", "\n", "self", ".", "__update_msg_store__", "(", "src", ",", "dst", ",", "t", ",", "raw_msg", ",", "self", ".", "msg_s_store", ")", "\n", "self", ".", "__update_msg_store__", "(", "dst", ",", "src", ",", "t", ",", "raw_msg", ",", "self", ".", "msg_d_store", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "__update_msg_store__", "(", "src", ",", "dst", ",", "t", ",", "raw_msg", ",", "self", ".", "msg_s_store", ")", "\n", "self", ".", "__update_msg_store__", "(", "dst", ",", "src", ",", "t", ",", "raw_msg", ",", "self", ".", "msg_d_store", ")", "\n", "self", ".", "__update_memory__", "(", "n_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TGNMemory.__reset_message_store__": [[191, 197], ["tgn_mlp.TGNMemory.memory.new_empty", "tgn_mlp.TGNMemory.memory.new_empty", "range", "range"], "methods", ["None"], ["", "", "def", "__reset_message_store__", "(", "self", ")", ":", "\n", "        ", "i", "=", "self", ".", "memory", ".", "new_empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "msg", "=", "self", ".", "memory", ".", "new_empty", "(", "(", "0", ",", "self", ".", "raw_msg_dim", ")", ")", "\n", "# Message store format: (src, dst, t, msg)", "\n", "self", ".", "msg_s_store", "=", "{", "j", ":", "(", "i", ",", "i", ",", "i", ",", "msg", ")", "for", "j", "in", "range", "(", "self", ".", "num_nodes", ")", "}", "\n", "self", ".", "msg_d_store", "=", "{", "j", ":", "(", "i", ",", "i", ",", "i", ",", "msg", ")", "for", "j", "in", "range", "(", "self", ".", "num_nodes", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TGNMemory.__update_memory__": [[198, 202], ["tgn_mlp.TGNMemory.__get_updated_memory__"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__get_updated_memory__"], ["", "def", "__update_memory__", "(", "self", ",", "n_id", ")", ":", "\n", "        ", "memory", ",", "last_update", "=", "self", ".", "__get_updated_memory__", "(", "n_id", ")", "\n", "self", ".", "memory", "[", "n_id", "]", "=", "memory", "\n", "self", ".", "last_update", "[", "n_id", "]", "=", "last_update", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TGNMemory.__get_updated_memory__": [[203, 230], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "tgn_mlp.TGNMemory.__compute_msg__", "tgn_mlp.TGNMemory.__compute_msg__", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tgn_mlp.TGNMemory.aggr_module", "n_id.size", "n_id.size", "tgn_mlp.TGNMemory.mlp", "tgn_mlp.TGNMemory.gru", "tgn_mlp.TGNMemory.last_update.scatter", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__compute_msg__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__compute_msg__"], ["", "def", "__get_updated_memory__", "(", "self", ",", "n_id", ")", ":", "\n", "        ", "self", ".", "__assoc__", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "n_id", ".", "device", ")", "\n", "\n", "# Compute messages (src -> dst).", "\n", "msg_s", ",", "t_s", ",", "src_s", ",", "dst_s", "=", "self", ".", "__compute_msg__", "(", "\n", "n_id", ",", "self", ".", "msg_s_store", ",", "self", ".", "msg_s_module", ")", "\n", "\n", "# Compute messages (dst -> src).", "\n", "msg_d", ",", "t_d", ",", "src_d", ",", "dst_d", "=", "self", ".", "__compute_msg__", "(", "\n", "n_id", ",", "self", ".", "msg_d_store", ",", "self", ".", "msg_d_module", ")", "\n", "\n", "# Aggregate messages.", "\n", "idx", "=", "torch", ".", "cat", "(", "[", "src_s", ",", "src_d", "]", ",", "dim", "=", "0", ")", "\n", "msg", "=", "torch", ".", "cat", "(", "[", "msg_s", ",", "msg_d", "]", ",", "dim", "=", "0", ")", "\n", "t", "=", "torch", ".", "cat", "(", "[", "t_s", ",", "t_d", "]", ",", "dim", "=", "0", ")", "\n", "aggr", "=", "self", ".", "aggr_module", "(", "msg", ",", "self", ".", "__assoc__", "[", "idx", "]", ",", "t", ",", "n_id", ".", "size", "(", "0", ")", ")", "\n", "\n", "# Get local copy of updated memory.", "\n", "if", "self", ".", "mem_func", "==", "'mlp'", ":", "\n", "            ", "memory", "=", "self", ".", "mlp", "(", "torch", ".", "cat", "(", "(", "aggr", ",", "self", ".", "memory", "[", "n_id", "]", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "memory", "=", "self", ".", "gru", "(", "aggr", ",", "self", ".", "memory", "[", "n_id", "]", ")", "\n", "\n", "# Get local copy of updated `last_update`.", "\n", "", "last_update", "=", "self", ".", "last_update", ".", "scatter", "(", "0", ",", "idx", ",", "t", ")", "[", "n_id", "]", "\n", "\n", "return", "memory", ",", "last_update", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TGNMemory.__update_msg_store__": [[231, 236], ["src.sort", "n_id.unique_consecutive", "zip", "n_id.tolist", "perm.split", "count.tolist"], "methods", ["None"], ["", "def", "__update_msg_store__", "(", "self", ",", "src", ",", "dst", ",", "t", ",", "raw_msg", ",", "msg_store", ")", ":", "\n", "        ", "n_id", ",", "perm", "=", "src", ".", "sort", "(", ")", "\n", "n_id", ",", "count", "=", "n_id", ".", "unique_consecutive", "(", "return_counts", "=", "True", ")", "\n", "for", "i", ",", "idx", "in", "zip", "(", "n_id", ".", "tolist", "(", ")", ",", "perm", ".", "split", "(", "count", ".", "tolist", "(", ")", ")", ")", ":", "\n", "            ", "msg_store", "[", "i", "]", "=", "(", "src", "[", "idx", "]", ",", "dst", "[", "idx", "]", ",", "t", "[", "idx", "]", ",", "raw_msg", "[", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TGNMemory.__compute_msg__": [[237, 250], ["list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tgn_mlp.TGNMemory.time_enc", "msg_module", "zip", "t_rel.to", "n_id.tolist"], "methods", ["None"], ["", "", "def", "__compute_msg__", "(", "self", ",", "n_id", ",", "msg_store", ",", "msg_module", ")", ":", "\n", "        ", "data", "=", "[", "msg_store", "[", "i", "]", "for", "i", "in", "n_id", ".", "tolist", "(", ")", "]", "\n", "src", ",", "dst", ",", "t", ",", "raw_msg", "=", "list", "(", "zip", "(", "*", "data", ")", ")", "\n", "src", "=", "torch", ".", "cat", "(", "src", ",", "dim", "=", "0", ")", "\n", "dst", "=", "torch", ".", "cat", "(", "dst", ",", "dim", "=", "0", ")", "\n", "t", "=", "torch", ".", "cat", "(", "t", ",", "dim", "=", "0", ")", "\n", "raw_msg", "=", "torch", ".", "cat", "(", "raw_msg", ",", "dim", "=", "0", ")", "\n", "t_rel", "=", "t", "-", "self", ".", "last_update", "[", "src", "]", "\n", "t_enc", "=", "self", ".", "time_enc", "(", "t_rel", ".", "to", "(", "raw_msg", ".", "dtype", ")", ")", "\n", "\n", "msg", "=", "msg_module", "(", "self", ".", "memory", "[", "src", "]", ",", "self", ".", "memory", "[", "dst", "]", ",", "raw_msg", ",", "t_enc", ")", "\n", "\n", "return", "msg", ",", "t", ",", "src", ",", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TGNMemory.train": [[251, 259], ["super().train", "tgn_mlp.TGNMemory.__update_memory__", "tgn_mlp.TGNMemory.__reset_message_store__", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_memory__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__reset_message_store__"], ["", "def", "train", "(", "self", ",", "mode", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"Sets the module in training mode.\"\"\"", "\n", "if", "self", ".", "training", "and", "not", "mode", ":", "\n", "# Flush message store to memory in case we just entered eval mode.", "\n", "            ", "self", ".", "__update_memory__", "(", "\n", "torch", ".", "arange", "(", "self", ".", "num_nodes", ",", "device", "=", "self", ".", "memory", ".", "device", ")", ")", "\n", "self", ".", "__reset_message_store__", "(", ")", "\n", "", "super", "(", "TGNMemory", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.IdentityMessage.__init__": [[262, 265], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "raw_msg_dim", ":", "int", ",", "memory_dim", ":", "int", ",", "time_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", "IdentityMessage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "raw_msg_dim", "+", "2", "*", "memory_dim", "+", "time_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.IdentityMessage.forward": [[266, 268], ["torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_src", ",", "z_dst", ",", "raw_msg", ",", "t_enc", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "z_src", ",", "z_dst", ",", "raw_msg", ",", "t_enc", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.LastAggregator.forward": [[271, 277], ["torch_scatter.scatter_max", "msg.new_zeros", "msg.size", "msg.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "msg", ",", "index", ",", "t", ",", "dim_size", ")", ":", "\n", "        ", "_", ",", "argmax", "=", "scatter_max", "(", "t", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "dim_size", ")", "\n", "out", "=", "msg", ".", "new_zeros", "(", "(", "dim_size", ",", "msg", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "mask", "=", "argmax", "<", "msg", ".", "size", "(", "0", ")", "# Filter items with at least one entry.", "\n", "out", "[", "mask", "]", "=", "msg", "[", "argmax", "[", "mask", "]", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.MeanAggregator.forward": [[280, 282], ["torch_scatter.scatter"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "msg", ",", "index", ",", "t", ",", "dim_size", ")", ":", "\n", "        ", "return", "scatter", "(", "msg", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "dim_size", ",", "reduce", "=", "'mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TimeEncoder.__init__": [[285, 289], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "TimeEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "lin", "=", "Linear", "(", "1", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TimeEncoder.reset_parameters": [[290, 292], ["tgn_mlp.TimeEncoder.lin.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "lin", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.TimeEncoder.forward": [[293, 295], ["tgn_mlp.TimeEncoder.lin().cos", "tgn_mlp.TimeEncoder.lin", "t.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "self", ".", "lin", "(", "t", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "cos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.LastNeighborLoader.__init__": [[298, 309], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "tgn_mlp.LastNeighborLoader.reset_state"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state"], ["    ", "def", "__init__", "(", "self", ",", "num_nodes", ":", "int", ",", "size", ":", "int", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n", "self", ".", "neighbors", "=", "torch", ".", "empty", "(", "(", "num_nodes", ",", "size", ")", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "device", ")", "\n", "self", ".", "e_id", "=", "torch", ".", "empty", "(", "(", "num_nodes", ",", "size", ")", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "device", ")", "\n", "self", ".", "__assoc__", "=", "torch", ".", "empty", "(", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "device", ")", "\n", "\n", "self", ".", "reset_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.LastNeighborLoader.__call__": [[310, 325], ["torch.cat().unique.view().repeat", "torch.cat().unique.view().repeat", "torch.cat().unique", "torch.cat().unique", "torch.cat().unique", "torch.cat().unique", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat().unique.size", "torch.cat().unique.size", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat().unique.view", "torch.cat().unique.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "n_id", ")", ":", "\n", "        ", "neighbors", "=", "self", ".", "neighbors", "[", "n_id", "]", "\n", "nodes", "=", "n_id", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "size", ")", "\n", "e_id", "=", "self", ".", "e_id", "[", "n_id", "]", "\n", "\n", "# Filter invalid neighbors (identified by `e_id < 0`).", "\n", "mask", "=", "e_id", ">=", "0", "\n", "neighbors", ",", "nodes", ",", "e_id", "=", "neighbors", "[", "mask", "]", ",", "nodes", "[", "mask", "]", ",", "e_id", "[", "mask", "]", "\n", "\n", "# Relabel node indices.", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "n_id", ",", "neighbors", "]", ")", ".", "unique", "(", ")", "\n", "self", ".", "__assoc__", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "n_id", ".", "device", ")", "\n", "neighbors", ",", "nodes", "=", "self", ".", "__assoc__", "[", "neighbors", "]", ",", "self", ".", "__assoc__", "[", "nodes", "]", "\n", "\n", "return", "n_id", ",", "torch", ".", "stack", "(", "[", "neighbors", ",", "nodes", "]", ")", ",", "e_id", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.LastNeighborLoader.insert": [[326, 365], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "src.numel", "torch.cat.sort", "torch.cat.sort", "torch.cat.unique", "torch.cat.unique", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "tgn_mlp.LastNeighborLoader.__assoc__[].mul_", "torch.cat.new_full", "torch.cat.new_full", "dense_e_id.view.view.view", "torch.cat.new_empty", "torch.cat.new_empty", "dense_neighbors.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.topk", "torch.cat.topk", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.cat.unique.numel", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat.size", "torch.cat.size", "torch.cat.unique.numel", "torch.cat.unique.numel", "src.size"], "methods", ["None"], ["", "def", "insert", "(", "self", ",", "src", ",", "dst", ")", ":", "\n", "# Inserts newly encountered interactions into an ever growing", "\n", "# (undirected) temporal graph.", "\n", "\n", "# Collect central nodes, their neighbors and the current event ids.", "\n", "        ", "neighbors", "=", "torch", ".", "cat", "(", "[", "src", ",", "dst", "]", ",", "dim", "=", "0", ")", "\n", "nodes", "=", "torch", ".", "cat", "(", "[", "dst", ",", "src", "]", ",", "dim", "=", "0", ")", "\n", "e_id", "=", "torch", ".", "arange", "(", "self", ".", "cur_e_id", ",", "self", ".", "cur_e_id", "+", "src", ".", "size", "(", "0", ")", ",", "\n", "device", "=", "src", ".", "device", ")", ".", "repeat", "(", "2", ")", "\n", "self", ".", "cur_e_id", "+=", "src", ".", "numel", "(", ")", "\n", "\n", "# Convert newly encountered interaction ids so that they point to", "\n", "# locations of a \"dense\" format of shape [num_nodes, size].", "\n", "nodes", ",", "perm", "=", "nodes", ".", "sort", "(", ")", "\n", "neighbors", ",", "e_id", "=", "neighbors", "[", "perm", "]", ",", "e_id", "[", "perm", "]", "\n", "\n", "n_id", "=", "nodes", ".", "unique", "(", ")", "\n", "self", ".", "__assoc__", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "numel", "(", ")", ",", "device", "=", "n_id", ".", "device", ")", "\n", "\n", "dense_id", "=", "torch", ".", "arange", "(", "nodes", ".", "size", "(", "0", ")", ",", "device", "=", "nodes", ".", "device", ")", "%", "self", ".", "size", "\n", "dense_id", "+=", "self", ".", "__assoc__", "[", "nodes", "]", ".", "mul_", "(", "self", ".", "size", ")", "\n", "\n", "dense_e_id", "=", "e_id", ".", "new_full", "(", "(", "n_id", ".", "numel", "(", ")", "*", "self", ".", "size", ",", ")", ",", "-", "1", ")", "\n", "dense_e_id", "[", "dense_id", "]", "=", "e_id", "\n", "dense_e_id", "=", "dense_e_id", ".", "view", "(", "-", "1", ",", "self", ".", "size", ")", "\n", "\n", "dense_neighbors", "=", "e_id", ".", "new_empty", "(", "n_id", ".", "numel", "(", ")", "*", "self", ".", "size", ")", "\n", "dense_neighbors", "[", "dense_id", "]", "=", "neighbors", "\n", "dense_neighbors", "=", "dense_neighbors", ".", "view", "(", "-", "1", ",", "self", ".", "size", ")", "\n", "\n", "# Collect new and old interactions...", "\n", "e_id", "=", "torch", ".", "cat", "(", "[", "self", ".", "e_id", "[", "n_id", ",", ":", "self", ".", "size", "]", ",", "dense_e_id", "]", ",", "dim", "=", "-", "1", ")", "\n", "neighbors", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "neighbors", "[", "n_id", ",", ":", "self", ".", "size", "]", ",", "dense_neighbors", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# And sort them based on `e_id`.", "\n", "e_id", ",", "perm", "=", "e_id", ".", "topk", "(", "self", ".", "size", ",", "dim", "=", "-", "1", ")", "\n", "self", ".", "e_id", "[", "n_id", "]", "=", "e_id", "\n", "self", ".", "neighbors", "[", "n_id", "]", "=", "torch", ".", "gather", "(", "neighbors", ",", "1", ",", "perm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.tgn_mlp.LastNeighborLoader.reset_state": [[366, 369], ["tgn_mlp.LastNeighborLoader.e_id.fill_"], "methods", ["None"], ["", "def", "reset_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_e_id", "=", "0", "\n", "self", ".", "e_id", ".", "fill_", "(", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.FeedForward.__init__": [[14, 22], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.GELU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "hidden_dim", ",", "out_dim", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "out_dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.FeedForward.forward": [[23, 25], ["cus_tgn.FeedForward.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.FeedForward.reset_parameters": [[25, 31], ["cus_tgn.FeedForward.children", "layer.named_modules", "hasattr", "print", "l.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "for", "n", ",", "l", "in", "layer", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "hasattr", "(", "l", ",", "'reset_parameters'", ")", ":", "\n", "                    ", "print", "(", "f'Reset trainable parameters of layer = {l}'", ")", "\n", "l", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__init__": [[53, 94], ["super().__init__", "copy.deepcopy", "cus_tgn.TimeEncoder", "pytorch_wavelets.DWT1DForward", "cus_tgn.FeedForward", "torch.nn.GRUCell", "torch.nn.LayerNorm", "cus_tgn.TGNMemory.register_buffer", "torch.empty", "cus_tgn.TGNMemory.register_buffer", "cus_tgn.TGNMemory.register_buffer", "cus_tgn.TGNMemory.reset_parameters", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_nodes", ":", "int", ",", "raw_msg_dim", ":", "int", ",", "memory_dim", ":", "int", ",", "\n", "time_dim", ":", "int", ",", "message_module", ":", "Callable", ",", "\n", "aggregator_module", ":", "Callable", ")", ":", "\n", "        ", "super", "(", "TGNMemory", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "raw_msg_dim", "=", "raw_msg_dim", "\n", "self", ".", "memory_dim", "=", "memory_dim", "\n", "self", ".", "time_dim", "=", "time_dim", "\n", "\n", "self", ".", "msg_s_module", "=", "message_module", "\n", "self", ".", "msg_d_module", "=", "copy", ".", "deepcopy", "(", "message_module", ")", "\n", "self", ".", "aggr_module", "=", "aggregator_module", "\n", "self", ".", "time_enc", "=", "TimeEncoder", "(", "time_dim", ")", "\n", "\n", "# add custom wavelet ", "\n", "self", ".", "dwt", "=", "DWT1DForward", "(", "wave", "=", "'db1'", ",", "J", "=", "2", ")", "\n", "self", ".", "lin", "=", "FeedForward", "(", "20", ",", "10", ",", "3", ",", "dropout", "=", "0.5", ")", "\n", "self", ".", "gru", "=", "GRUCell", "(", "3", "*", "raw_msg_dim", "+", "memory_dim", ",", "memory_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "ln", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "3", "*", "raw_msg_dim", "+", "memory_dim", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'memory'", ",", "torch", ".", "empty", "(", "num_nodes", ",", "memory_dim", ")", ")", "\n", "last_update", "=", "torch", ".", "empty", "(", "self", ".", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "register_buffer", "(", "'last_update'", ",", "last_update", ")", "\n", "self", ".", "register_buffer", "(", "'__assoc__'", ",", "\n", "torch", ".", "empty", "(", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "self", ".", "msg_s_store", "=", "{", "}", "\n", "self", ".", "msg_d_store", "=", "{", "}", "\n", "self", ".", "wave_s_store", "=", "[", "]", "\n", "self", ".", "wave_d_store", "=", "[", "]", "\n", "#         self.wave_s_store_val = []", "\n", "#         self.wave_d_store_test = []", "\n", "#         self.wave_s_store_val = []", "\n", "#         self.wave_d_store_test = []", "\n", "self", ".", "wave_store_exist", "=", "False", "\n", "#         self.wave_store_val_exist = False", "\n", "#         self.wave_store_test_exist = False", "\n", "self", ".", "t_batch", "=", "0", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.reset_parameters": [[97, 109], ["hasattr", "hasattr", "hasattr", "cus_tgn.TGNMemory.time_enc.reset_parameters", "cus_tgn.TGNMemory.gru.reset_parameters", "cus_tgn.TGNMemory.lin.reset_parameters", "cus_tgn.TGNMemory.ln.reset_parameters", "cus_tgn.TGNMemory.reset_state", "cus_tgn.TGNMemory.msg_s_module.reset_parameters", "cus_tgn.TGNMemory.msg_d_module.reset_parameters", "cus_tgn.TGNMemory.aggr_module.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "msg_s_module", ",", "'reset_parameters'", ")", ":", "\n", "            ", "self", ".", "msg_s_module", ".", "reset_parameters", "(", ")", "\n", "", "if", "hasattr", "(", "self", ".", "msg_d_module", ",", "'reset_parameters'", ")", ":", "\n", "            ", "self", ".", "msg_d_module", ".", "reset_parameters", "(", ")", "\n", "", "if", "hasattr", "(", "self", ".", "aggr_module", ",", "'reset_parameters'", ")", ":", "\n", "            ", "self", ".", "aggr_module", ".", "reset_parameters", "(", ")", "\n", "", "self", ".", "time_enc", ".", "reset_parameters", "(", ")", "\n", "self", ".", "gru", ".", "reset_parameters", "(", ")", "\n", "self", ".", "lin", ".", "reset_parameters", "(", ")", "\n", "self", ".", "ln", ".", "reset_parameters", "(", ")", "\n", "self", ".", "reset_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.reset_state": [[110, 116], ["torch_geometric.nn.inits.zeros", "torch_geometric.nn.inits.zeros", "cus_tgn.TGNMemory.__reset_message_store__"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__reset_message_store__"], ["", "def", "reset_state", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the memory to its initial state.\"\"\"", "\n", "zeros", "(", "self", ".", "memory", ")", "\n", "zeros", "(", "self", ".", "last_update", ")", "\n", "self", ".", "__reset_message_store__", "(", ")", "\n", "self", ".", "t_batch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.detach": [[117, 120], ["cus_tgn.TGNMemory.memory.detach_"], "methods", ["None"], ["", "def", "detach", "(", "self", ")", ":", "\n", "        ", "\"\"\"Detachs the memory from gradient computation.\"\"\"", "\n", "self", ".", "memory", ".", "detach_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.forward": [[121, 130], ["cus_tgn.TGNMemory.__get_updated_memory__"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__get_updated_memory__"], ["", "def", "forward", "(", "self", ",", "n_id", ":", "Tensor", ")", "->", "Tuple", "[", "Tensor", ",", "Tensor", "]", ":", "\n", "        ", "\"\"\"Returns, for all nodes :obj:`n_id`, their current memory and their\n        last updated timestamp.\"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "memory", "=", "self", ".", "__get_updated_memory__", "(", "n_id", ")", "\n", "", "else", ":", "\n", "            ", "memory", "=", "self", ".", "memory", "[", "n_id", "]", "\n", "\n", "", "return", "memory", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state": [[131, 145], ["torch.cat().unique", "cus_tgn.TGNMemory.__update_memory__", "cus_tgn.TGNMemory.__update_msg_store__", "cus_tgn.TGNMemory.__update_msg_store__", "cus_tgn.TGNMemory.__update_msg_store__", "cus_tgn.TGNMemory.__update_msg_store__", "cus_tgn.TGNMemory.__update_memory__", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_memory__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_msg_store__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_msg_store__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_msg_store__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_msg_store__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_memory__"], ["", "def", "update_state", "(", "self", ",", "src", ",", "dst", ",", "t", ",", "raw_msg", ")", ":", "\n", "        ", "\"\"\"Updates the memory with newly encountered interactions\n        :obj:`(src, dst, t, raw_msg)`.\"\"\"", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "dst", "]", ")", ".", "unique", "(", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "__update_memory__", "(", "n_id", ")", "\n", "self", ".", "__update_msg_store__", "(", "src", ",", "dst", ",", "t", ",", "raw_msg", ",", "self", ".", "msg_s_store", ",", "self", ".", "wave_s_store", ")", "\n", "self", ".", "__update_msg_store__", "(", "dst", ",", "src", ",", "t", ",", "raw_msg", ",", "self", ".", "msg_d_store", ",", "self", ".", "wave_d_store", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "__update_msg_store__", "(", "src", ",", "dst", ",", "t", ",", "raw_msg", ",", "self", ".", "msg_s_store", ",", "self", ".", "wave_s_store", ")", "\n", "self", ".", "__update_msg_store__", "(", "dst", ",", "src", ",", "t", ",", "raw_msg", ",", "self", ".", "msg_d_store", ",", "self", ".", "wave_d_store", ")", "\n", "self", ".", "__update_memory__", "(", "n_id", ")", "\n", "", "self", ".", "t_batch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__reset_message_store__": [[146, 154], ["cus_tgn.TGNMemory.memory.new_empty", "cus_tgn.TGNMemory.memory.new_empty", "range", "range"], "methods", ["None"], ["", "def", "__reset_message_store__", "(", "self", ")", ":", "\n", "\n", "# Message store format: (src, dst, t, msg)       ", "\n", "        ", "i", "=", "self", ".", "memory", ".", "new_empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "msg", "=", "self", ".", "memory", ".", "new_empty", "(", "(", "0", ",", ")", ")", "\n", "# Message store format: (src, dst, t, msg)", "\n", "self", ".", "msg_s_store", "=", "{", "j", ":", "(", "i", ",", "msg", ")", "for", "j", "in", "range", "(", "self", ".", "num_nodes", ")", "}", "\n", "self", ".", "msg_d_store", "=", "{", "j", ":", "(", "i", ",", "msg", ")", "for", "j", "in", "range", "(", "self", ".", "num_nodes", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_memory__": [[155, 158], ["cus_tgn.TGNMemory.__get_updated_memory__"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__get_updated_memory__"], ["", "def", "__update_memory__", "(", "self", ",", "n_id", ")", ":", "\n", "        ", "memory", "=", "self", ".", "__get_updated_memory__", "(", "n_id", ")", "\n", "self", ".", "memory", "[", "n_id", "]", "=", "memory", "\n", "#         self.last_update[n_id] = last_update", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__get_updated_memory__": [[160, 196], ["torch.arange", "list", "torch.cat", "torch.cat", "torch.cat", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "n_id.size", "zip", "cus_tgn.TGNMemory.lin().view", "zip", "cus_tgn.TGNMemory.lin().view", "torch.cat.size", "torch.cat.new_zeros", "cus_tgn.TGNMemory.gru", "n_id.tolist", "torch.cat.size", "torch.cat.size", "n_id.tolist", "torch.cat.size", "torch.cat.size", "cus_tgn.TGNMemory.ln", "cus_tgn.TGNMemory.lin", "cus_tgn.TGNMemory.lin", "n_id.size", "torch.cat.size"], "methods", ["None"], ["", "def", "__get_updated_memory__", "(", "self", ",", "n_id", ")", ":", "\n", "        ", "self", ".", "__assoc__", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "n_id", ".", "device", ")", "\n", "\n", "#         self.lin1(torch.cat(self.msg_s_store[i], dim=-1)).view(1,-1)", "\n", "# Compute messages (src -> dst).", "\n", "#         msg_s, t_s, src_s, dst_s = self.__compute_msg__(", "\n", "#             n_id, self.msg_s_store, self.msg_s_module)", "\n", "data", "=", "[", "self", ".", "msg_s_store", "[", "i", "]", "for", "i", "in", "n_id", ".", "tolist", "(", ")", "]", "\n", "src_s", ",", "raw_msg_s", "=", "list", "(", "zip", "(", "*", "data", ")", ")", "\n", "src_s", "=", "torch", ".", "cat", "(", "src_s", ",", "dim", "=", "0", ")", "\n", "msg_s", "=", "torch", ".", "cat", "(", "raw_msg_s", ",", "dim", "=", "0", ")", "\n", "msg_s_compress", "=", "self", ".", "lin", "(", "msg_s", ")", ".", "view", "(", "msg_s", ".", "size", "(", "0", ")", ",", "-", "1", ")", "if", "msg_s", ".", "size", "(", "0", ")", "!=", "0", "else", "msg_s", "\n", "msg_s_compress", "=", "torch", ".", "cat", "(", "(", "self", ".", "memory", "[", "src_s", "]", ",", "msg_s_compress", ")", ",", "dim", "=", "-", "1", ")", "\n", "# Compute messages (dst -> src).", "\n", "#         msg_d, t_d, src_d, dst_d = self.__compute_msg__(", "\n", "#             n_id, self.msg_d_store, self.msg_d_module)", "\n", "data", "=", "[", "self", ".", "msg_d_store", "[", "i", "]", "for", "i", "in", "n_id", ".", "tolist", "(", ")", "]", "\n", "src_d", ",", "raw_msg_d", "=", "list", "(", "zip", "(", "*", "data", ")", ")", "\n", "src_d", "=", "torch", ".", "cat", "(", "src_d", ",", "dim", "=", "0", ")", "\n", "msg_d", "=", "torch", ".", "cat", "(", "raw_msg_d", ",", "dim", "=", "0", ")", "\n", "msg_d_compress", "=", "self", ".", "lin", "(", "msg_d", ")", ".", "view", "(", "msg_d", ".", "size", "(", "0", ")", ",", "-", "1", ")", "if", "msg_d", ".", "size", "(", "0", ")", "!=", "0", "else", "msg_d", "\n", "msg_d_compress", "=", "torch", ".", "cat", "(", "(", "self", ".", "memory", "[", "src_d", "]", ",", "msg_d_compress", ")", ",", "dim", "=", "-", "1", ")", "\n", "# Aggregate messages.", "\n", "idx", "=", "torch", ".", "cat", "(", "[", "src_s", ",", "src_d", "]", ",", "dim", "=", "0", ")", "\n", "msg", "=", "torch", ".", "cat", "(", "[", "msg_s_compress", ",", "msg_d_compress", "]", ",", "dim", "=", "0", ")", "\n", "if", "msg", ".", "size", "(", "0", ")", "!=", "0", ":", "\n", "            ", "msg_perm", "=", "msg", ".", "new_zeros", "(", "(", "n_id", ".", "size", "(", "0", ")", ",", "msg", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "msg_perm", "[", "self", ".", "__assoc__", "[", "idx", "]", "]", "=", "msg", "\n", "# Get local copy of updated memory.", "\n", "memory", "=", "self", ".", "gru", "(", "self", ".", "ln", "(", "msg_perm", ")", ",", "self", ".", "memory", "[", "n_id", "]", ")", "\n", "", "else", ":", "\n", "            ", "memory", "=", "self", ".", "memory", "[", "n_id", "]", "\n", "\n", "\n", "\n", "", "return", "memory", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_msg_store__": [[197, 238], ["torch.linspace().to", "src.sort", "n_id.unique_consecutive", "zip", "wave_store.append", "src.sort", "n_id.unique_consecutive", "zip", "n_id.tolist", "perm.split", "abs", "cus_tgn.TGNMemory.dwt", "torch.cat", "n_id.tolist", "perm.split", "torch.linspace", "count.tolist", "torch.tensor", "count.tolist", "min", "max", "abs.argmin"], "methods", ["None"], ["", "def", "__update_msg_store__", "(", "self", ",", "src", ",", "dst", ",", "t", ",", "raw_msg", ",", "msg_store", ",", "wave_store", ")", ":", "\n", "# wavelet raw and also as msg", "\n", "        ", "if", "not", "self", ".", "wave_store_exist", ":", "\n", "#         if self.training:", "\n", "            ", "wave_store_t", "=", "{", "}", "\n", "t_inte", "=", "torch", ".", "linspace", "(", "min", "(", "t", ")", ",", "max", "(", "t", ")", ",", "20", ")", ".", "to", "(", "self", ".", "memory", ".", "device", ")", "\n", "t_inte_tmp", "=", "t_inte", "[", ":", ",", "None", "]", "\n", "\n", "n_id", ",", "perm", "=", "src", ".", "sort", "(", ")", "\n", "n_id", ",", "count", "=", "n_id", ".", "unique_consecutive", "(", "return_counts", "=", "True", ")", "\n", "\n", "for", "i", ",", "idx", "in", "zip", "(", "n_id", ".", "tolist", "(", ")", ",", "perm", ".", "split", "(", "count", ".", "tolist", "(", ")", ")", ")", ":", "\n", "                ", "dist", "=", "abs", "(", "t", "[", "None", ",", "idx", "]", "-", "t_inte_tmp", ")", "\n", "raw_msg_inte", "=", "raw_msg", "[", "idx", "[", "dist", ".", "argmin", "(", "1", ")", "]", "]", "\n", "yl", ",", "yh", "=", "self", ".", "dwt", "(", "(", "raw_msg_inte", ".", "T", ")", "[", "None", ",", ":", "]", ")", "\n", "tmp", "=", "torch", ".", "cat", "(", "(", "yl", ",", "*", "yh", ")", ",", "dim", "=", "-", "1", ")", "\n", "msg_store", "[", "i", "]", "=", "(", "torch", ".", "tensor", "(", "[", "i", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "memory", ".", "device", ")", ",", "tmp", ")", "\n", "wave_store_t", "[", "i", "]", "=", "msg_store", "[", "i", "]", "\n", "", "wave_store", ".", "append", "(", "wave_store_t", ")", "\n", "#             else:", "\n", "#                 t_inte = torch.linspace(min(t), max(t), 20).to(self.memory.device)", "\n", "#                 t_inte_tmp = t_inte[:, None]", "\n", "\n", "#                 n_id, perm = src.sort()", "\n", "#                 n_id, count = n_id.unique_consecutive(return_counts=True)", "\n", "\n", "#                 for i, idx in zip(n_id.tolist(), perm.split(count.tolist())):", "\n", "#                     dist = abs(t[None, idx] - t_inte_tmp)", "\n", "#                     raw_msg_inte = raw_msg[idx[dist.argmin(1)]]", "\n", "#                     yl, yh = self.dwt((raw_msg_inte.T)[None,:])", "\n", "#                     tmp = torch.cat((yl, *yh), dim=-1)", "\n", "#                     msg_store[i] = (torch.tensor([i], dtype=torch.long, device=self.memory.device), tmp)", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "wave_store_t", "=", "wave_store", "[", "self", ".", "t_batch", "]", "\n", "n_id", ",", "perm", "=", "src", ".", "sort", "(", ")", "\n", "n_id", ",", "count", "=", "n_id", ".", "unique_consecutive", "(", "return_counts", "=", "True", ")", "\n", "\n", "for", "i", ",", "idx", "in", "zip", "(", "n_id", ".", "tolist", "(", ")", ",", "perm", ".", "split", "(", "count", ".", "tolist", "(", ")", ")", ")", ":", "\n", "                ", "msg_store", "[", "i", "]", "=", "wave_store_t", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__compute_msg__": [[245, 258], ["list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cus_tgn.TGNMemory.time_enc", "msg_module", "zip", "t_rel.to", "n_id.tolist"], "methods", ["None"], ["", "", "", "def", "__compute_msg__", "(", "self", ",", "n_id", ",", "msg_store", ",", "msg_module", ")", ":", "\n", "        ", "data", "=", "[", "msg_store", "[", "i", "]", "for", "i", "in", "n_id", ".", "tolist", "(", ")", "]", "\n", "src", ",", "dst", ",", "t", ",", "raw_msg", "=", "list", "(", "zip", "(", "*", "data", ")", ")", "\n", "src", "=", "torch", ".", "cat", "(", "src", ",", "dim", "=", "0", ")", "\n", "dst", "=", "torch", ".", "cat", "(", "dst", ",", "dim", "=", "0", ")", "\n", "t", "=", "torch", ".", "cat", "(", "t", ",", "dim", "=", "0", ")", "\n", "raw_msg", "=", "torch", ".", "cat", "(", "raw_msg", ",", "dim", "=", "0", ")", "\n", "t_rel", "=", "t", "-", "self", ".", "last_update", "[", "src", "]", "\n", "t_enc", "=", "self", ".", "time_enc", "(", "t_rel", ".", "to", "(", "raw_msg", ".", "dtype", ")", ")", "\n", "\n", "msg", "=", "msg_module", "(", "self", ".", "memory", "[", "src", "]", ",", "self", ".", "memory", "[", "dst", "]", ",", "raw_msg", ",", "t_enc", ")", "\n", "\n", "return", "msg", ",", "t", ",", "src", ",", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.train": [[259, 267], ["super().train", "cus_tgn.TGNMemory.__update_memory__", "cus_tgn.TGNMemory.__reset_message_store__", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__update_memory__", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.__reset_message_store__"], ["", "def", "train", "(", "self", ",", "mode", ":", "bool", "=", "True", ")", ":", "\n", "        ", "\"\"\"Sets the module in training mode.\"\"\"", "\n", "if", "self", ".", "training", "and", "not", "mode", ":", "\n", "# Flush message store to memory in case we just entered eval mode.", "\n", "            ", "self", ".", "__update_memory__", "(", "\n", "torch", ".", "arange", "(", "self", ".", "num_nodes", ",", "device", "=", "self", ".", "memory", ".", "device", ")", ")", "\n", "self", ".", "__reset_message_store__", "(", ")", "\n", "", "super", "(", "TGNMemory", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.IdentityMessage.__init__": [[270, 273], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "raw_msg_dim", ":", "int", ",", "memory_dim", ":", "int", ",", "time_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", "IdentityMessage", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "raw_msg_dim", "+", "2", "*", "memory_dim", "+", "time_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.IdentityMessage.forward": [[274, 276], ["torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_src", ",", "z_dst", ",", "raw_msg", ",", "t_enc", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "z_src", ",", "z_dst", ",", "raw_msg", ",", "t_enc", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastAggregator.forward": [[279, 285], ["torch_scatter.scatter_max", "msg.new_zeros", "msg.size", "msg.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "msg", ",", "index", ",", "t", ",", "dim_size", ")", ":", "\n", "        ", "_", ",", "argmax", "=", "scatter_max", "(", "t", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "dim_size", ")", "\n", "out", "=", "msg", ".", "new_zeros", "(", "(", "dim_size", ",", "msg", ".", "size", "(", "-", "1", ")", ")", ")", "\n", "mask", "=", "argmax", "<", "msg", ".", "size", "(", "0", ")", "# Filter items with at least one entry.", "\n", "out", "[", "mask", "]", "=", "msg", "[", "argmax", "[", "mask", "]", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.MeanAggregator.forward": [[288, 290], ["torch_scatter.scatter"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "msg", ",", "index", ",", "t", ",", "dim_size", ")", ":", "\n", "        ", "return", "scatter", "(", "msg", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "dim_size", ",", "reduce", "=", "'mean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.__init__": [[293, 297], ["super().__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "TimeEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "lin", "=", "Linear", "(", "1", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters": [[298, 300], ["cus_tgn.TimeEncoder.lin.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "lin", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TimeEncoder.forward": [[301, 303], ["cus_tgn.TimeEncoder.lin().cos", "cus_tgn.TimeEncoder.lin", "t.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "t", ")", ":", "\n", "        ", "return", "self", ".", "lin", "(", "t", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "cos", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.__init__": [[306, 317], ["torch.empty", "torch.empty", "torch.empty", "cus_tgn.LastNeighborLoader.reset_state"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state"], ["    ", "def", "__init__", "(", "self", ",", "num_nodes", ":", "int", ",", "size", ":", "int", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n", "self", ".", "neighbors", "=", "torch", ".", "empty", "(", "(", "num_nodes", ",", "size", ")", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "device", ")", "\n", "self", ".", "e_id", "=", "torch", ".", "empty", "(", "(", "num_nodes", ",", "size", ")", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "device", ")", "\n", "self", ".", "__assoc__", "=", "torch", ".", "empty", "(", "num_nodes", ",", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "device", ")", "\n", "\n", "self", ".", "reset_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.__call__": [[318, 333], ["torch.cat().unique.view().repeat", "torch.cat().unique", "torch.stack", "torch.cat().unique.view", "torch.cat"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "n_id", ")", ":", "\n", "        ", "neighbors", "=", "self", ".", "neighbors", "[", "n_id", "]", "\n", "nodes", "=", "n_id", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "size", ")", "\n", "e_id", "=", "self", ".", "e_id", "[", "n_id", "]", "\n", "\n", "# Filter invalid neighbors (identified by `e_id < 0`).", "\n", "mask", "=", "e_id", ">=", "0", "\n", "neighbors", ",", "nodes", ",", "e_id", "=", "neighbors", "[", "mask", "]", ",", "nodes", "[", "mask", "]", ",", "e_id", "[", "mask", "]", "\n", "\n", "# Relabel node indices.", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "n_id", ",", "neighbors", "]", ")", ".", "unique", "(", ")", "\n", "#         self.__assoc__[n_id] = torch.arange(n_id.size(0), device=n_id.device)", "\n", "#         neighbors, nodes = self.__assoc__[neighbors], self.__assoc__[nodes]", "\n", "\n", "return", "n_id", ",", "torch", ".", "stack", "(", "[", "neighbors", ",", "nodes", "]", ")", ",", "e_id", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert": [[334, 373], ["torch.cat", "torch.cat", "torch.arange().repeat", "src.numel", "torch.cat.sort", "torch.cat.unique", "torch.arange", "cus_tgn.LastNeighborLoader.__assoc__[].mul_", "torch.cat.new_full", "dense_e_id.view.view.view", "torch.cat.new_empty", "dense_neighbors.view.view.view", "torch.cat", "torch.cat", "torch.cat.topk", "torch.gather", "torch.cat.unique.numel", "torch.arange", "torch.arange", "torch.cat.size", "torch.cat.unique.numel", "torch.cat.unique.numel", "src.size"], "methods", ["None"], ["", "def", "insert", "(", "self", ",", "src", ",", "dst", ")", ":", "\n", "# Inserts newly encountered interactions into an ever growing", "\n", "# (undirected) temporal graph.", "\n", "\n", "# Collect central nodes, their neighbors and the current event ids.", "\n", "        ", "neighbors", "=", "torch", ".", "cat", "(", "[", "src", ",", "dst", "]", ",", "dim", "=", "0", ")", "\n", "nodes", "=", "torch", ".", "cat", "(", "[", "dst", ",", "src", "]", ",", "dim", "=", "0", ")", "\n", "e_id", "=", "torch", ".", "arange", "(", "self", ".", "cur_e_id", ",", "self", ".", "cur_e_id", "+", "src", ".", "size", "(", "0", ")", ",", "\n", "device", "=", "src", ".", "device", ")", ".", "repeat", "(", "2", ")", "\n", "self", ".", "cur_e_id", "+=", "src", ".", "numel", "(", ")", "\n", "\n", "# Convert newly encountered interaction ids so that they point to", "\n", "# locations of a \"dense\" format of shape [num_nodes, size].", "\n", "nodes", ",", "perm", "=", "nodes", ".", "sort", "(", ")", "\n", "neighbors", ",", "e_id", "=", "neighbors", "[", "perm", "]", ",", "e_id", "[", "perm", "]", "\n", "\n", "n_id", "=", "nodes", ".", "unique", "(", ")", "\n", "self", ".", "__assoc__", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "numel", "(", ")", ",", "device", "=", "n_id", ".", "device", ")", "\n", "\n", "dense_id", "=", "torch", ".", "arange", "(", "nodes", ".", "size", "(", "0", ")", ",", "device", "=", "nodes", ".", "device", ")", "%", "self", ".", "size", "\n", "dense_id", "+=", "self", ".", "__assoc__", "[", "nodes", "]", ".", "mul_", "(", "self", ".", "size", ")", "\n", "\n", "dense_e_id", "=", "e_id", ".", "new_full", "(", "(", "n_id", ".", "numel", "(", ")", "*", "self", ".", "size", ",", ")", ",", "-", "1", ")", "\n", "dense_e_id", "[", "dense_id", "]", "=", "e_id", "\n", "dense_e_id", "=", "dense_e_id", ".", "view", "(", "-", "1", ",", "self", ".", "size", ")", "\n", "\n", "dense_neighbors", "=", "e_id", ".", "new_empty", "(", "n_id", ".", "numel", "(", ")", "*", "self", ".", "size", ")", "\n", "dense_neighbors", "[", "dense_id", "]", "=", "neighbors", "\n", "dense_neighbors", "=", "dense_neighbors", ".", "view", "(", "-", "1", ",", "self", ".", "size", ")", "\n", "\n", "# Collect new and old interactions...", "\n", "e_id", "=", "torch", ".", "cat", "(", "[", "self", ".", "e_id", "[", "n_id", ",", ":", "self", ".", "size", "]", ",", "dense_e_id", "]", ",", "dim", "=", "-", "1", ")", "\n", "neighbors", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "neighbors", "[", "n_id", ",", ":", "self", ".", "size", "]", ",", "dense_neighbors", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# And sort them based on `e_id`.", "\n", "e_id", ",", "perm", "=", "e_id", ".", "topk", "(", "self", ".", "size", ",", "dim", "=", "-", "1", ")", "\n", "self", ".", "e_id", "[", "n_id", "]", "=", "e_id", "\n", "self", ".", "neighbors", "[", "n_id", "]", "=", "torch", ".", "gather", "(", "neighbors", ",", "1", ",", "perm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state": [[374, 377], ["cus_tgn.LastNeighborLoader.e_id.fill_"], "methods", ["None"], ["", "def", "reset_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "cur_e_id", "=", "0", "\n", "self", ".", "e_id", ".", "fill_", "(", "-", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_transductive.GraphAttentionEmbedding.__init__": [[26, 33], ["super().__init__", "ufg_global.Net"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "msg_dim", ",", "time_enc", ",", "num_nodes", ",", "batch_norm", "=", "True", ",", "drop_out", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "GraphAttentionEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "time_enc", "=", "time_enc", "\n", "edge_dim", "=", "msg_dim", "+", "time_enc", ".", "out_channels", "\n", "\n", "self", ".", "conv", "=", "Net", "(", "in_channels", ",", "out_channels", ",", "out_channels", ",", "r", "=", "2", ",", "Lev", "=", "2", ",", "num_nodes", "=", "num_nodes", ",", "shrinkage", "=", "None", ",", "\n", "threshold", "=", "1e-3", ",", "dropout_prob", "=", "drop_out", ",", "num_layers", "=", "2", ",", "batch_norm", "=", "batch_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_transductive.GraphAttentionEmbedding.forward": [[34, 36], ["link_prediction_transductive.GraphAttentionEmbedding.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "d_list", ",", "n_id", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ",", "d_list", ",", "n_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_transductive.LinkPredictor.__init__": [[39, 44], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "LinkPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin_src", "=", "Linear", "(", "in_channels", ",", "in_channels", ")", "\n", "self", ".", "lin_dst", "=", "Linear", "(", "in_channels", ",", "in_channels", ")", "\n", "self", ".", "lin_final", "=", "Linear", "(", "in_channels", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_transductive.LinkPredictor.forward": [[45, 49], ["h.relu.relu.relu", "link_prediction_transductive.LinkPredictor.lin_final", "link_prediction_transductive.LinkPredictor.lin_src", "link_prediction_transductive.LinkPredictor.lin_dst"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_src", ",", "z_dst", ")", ":", "\n", "        ", "h", "=", "self", ".", "lin_src", "(", "z_src", ")", "+", "self", ".", "lin_dst", "(", "z_dst", ")", "\n", "h", "=", "h", ".", "relu", "(", ")", "\n", "return", "self", ".", "lin_final", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_transductive.pre_train": [[52, 110], ["memory.train", "gnn.train", "link_pred.train", "memory.reset_state", "neighbor_loader.reset_state", "train_data.seq_batches", "optimizer.zero_grad", "torch.randint", "torch.cat().unique", "neighbor_loader", "memory", "ufg_global.get_d_list", "d_list_batch.append", "torch.zeros", "gnn", "link_pred", "link_pred", "criterion", "criterion", "memory.update_state", "neighbor_loader.insert", "criterion.backward", "optimizer.step", "memory.detach", "torch.ones_like", "torch.zeros_like", "float", "src.size", "torch.cat", "NameError", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.get_d_list", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.detach"], ["", "", "def", "pre_train", "(", ")", ":", "\n", "    ", "memory", ".", "train", "(", ")", "\n", "gnn", ".", "train", "(", ")", "\n", "link_pred", ".", "train", "(", ")", "\n", "\n", "memory", ".", "reset_state", "(", ")", "# Start with a fresh memory.", "\n", "neighbor_loader", ".", "reset_state", "(", ")", "# Start with an empty graph.", "\n", "\n", "total_loss", ",", "d_list_batch", "=", "0", ",", "[", "]", "\n", "for", "batch", "in", "train_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "\n", "# Sample negative destination nodes.", "\n", "neg_dst", "=", "torch", ".", "randint", "(", "min_dst_idx", ",", "max_dst_idx", "+", "1", ",", "(", "src", ".", "size", "(", "0", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", ",", "neg_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "\n", "# Get updated memory of all nodes involved in the computation.", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "\n", "d_list", "=", "get_d_list", "(", "edge_index", ",", "num_nodes", ")", "\n", "d_list_batch", ".", "append", "(", "d_list", ")", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "pos_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "pos_dst", "]", ")", "\n", "neg_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "neg_dst", "]", ")", "\n", "\n", "loss", "=", "criterion", "(", "pos_out", ",", "torch", ".", "ones_like", "(", "pos_out", ")", ")", "\n", "loss", "+=", "criterion", "(", "neg_out", ",", "torch", ".", "zeros_like", "(", "neg_out", ")", ")", "\n", "\n", "# Update memory and neighbor loader with ground-truth state.", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "memory", ".", "detach", "(", ")", "\n", "total_loss", "+=", "float", "(", "loss", ")", "*", "batch", ".", "num_events", "\n", "\n", "", "return", "total_loss", "/", "train_data", ".", "num_events", ",", "d_list_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_transductive.train": [[112, 168], ["memory.train", "gnn.train", "link_pred.train", "memory.reset_state", "neighbor_loader.reset_state", "train_data.seq_batches", "optimizer.zero_grad", "torch.randint", "torch.cat().unique", "neighbor_loader", "memory", "torch.zeros", "gnn", "link_pred", "link_pred", "criterion", "criterion", "memory.update_state", "neighbor_loader.insert", "criterion.backward", "optimizer.step", "memory.detach", "torch.ones_like", "torch.zeros_like", "float", "src.size", "torch.cat", "NameError", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.detach"], ["", "def", "train", "(", "d_list_batch", ")", ":", "\n", "    ", "memory", ".", "train", "(", ")", "\n", "gnn", ".", "train", "(", ")", "\n", "link_pred", ".", "train", "(", ")", "\n", "\n", "memory", ".", "reset_state", "(", ")", "# Start with a fresh memory.", "\n", "neighbor_loader", ".", "reset_state", "(", ")", "# Start with an empty graph.", "\n", "\n", "total_loss", ",", "t_batch", "=", "0", ",", "0", "\n", "for", "batch", "in", "train_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "# Sample negative destination nodes.", "\n", "neg_dst", "=", "torch", ".", "randint", "(", "min_dst_idx", ",", "max_dst_idx", "+", "1", ",", "(", "src", ".", "size", "(", "0", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", ",", "neg_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "\n", "# Get updated memory of all nodes involved in the computation.", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "\n", "d_list", "=", "d_list_batch", "[", "t_batch", "]", "\n", "t_batch", "+=", "1", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "pos_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "pos_dst", "]", ")", "\n", "neg_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "neg_dst", "]", ")", "\n", "\n", "loss", "=", "criterion", "(", "pos_out", ",", "torch", ".", "ones_like", "(", "pos_out", ")", ")", "\n", "loss", "+=", "criterion", "(", "neg_out", ",", "torch", ".", "zeros_like", "(", "neg_out", ")", ")", "\n", "\n", "# Update memory and neighbor loader with ground-truth state.", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "memory", ".", "detach", "(", ")", "\n", "total_loss", "+=", "float", "(", "loss", ")", "*", "batch", ".", "num_events", "\n", "\n", "", "return", "total_loss", "/", "train_data", ".", "num_events", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_transductive.pre_test": [[169, 222], ["torch.no_grad", "memory.eval", "gnn.eval", "link_pred.eval", "torch.manual_seed", "inference_data.seq_batches", "torch.randint", "torch.cat().unique", "neighbor_loader", "torch.arange", "memory", "ufg_global.get_d_list", "d_list_batch_test.append", "torch.zeros", "gnn", "link_pred", "link_pred", "torch.cat().sigmoid().cpu", "torch.cat", "aps.append", "aucs.append", "memory.update_state", "neighbor_loader.insert", "float", "float", "torch.cat().unique.size", "sklearn.metrics.average_precision_score", "sklearn.metrics.roc_auc_score", "torch.tensor().mean", "torch.tensor().mean", "src.size", "torch.cat", "torch.cat().sigmoid", "torch.ones", "torch.zeros", "NameError", "link_pred.size", "link_pred.size", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.get_d_list", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "pre_test", "(", "inference_data", ")", ":", "\n", "    ", "memory", ".", "eval", "(", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "link_pred", ".", "eval", "(", ")", "\n", "\n", "\n", "torch", ".", "manual_seed", "(", "12345", ")", "# Ensure deterministic sampling across epochs.", "\n", "\n", "aps", ",", "aucs", ",", "d_list_batch_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", "in", "inference_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "\n", "        ", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "neg_dst", "=", "torch", ".", "randint", "(", "min_dst_idx", ",", "max_dst_idx", "+", "1", ",", "(", "src", ".", "size", "(", "0", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", ",", "neg_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "assoc", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "\n", "d_list", "=", "get_d_list", "(", "edge_index", ",", "num_nodes", ")", "\n", "d_list_batch_test", ".", "append", "(", "d_list", ")", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "pos_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "pos_dst", "]", ")", "\n", "neg_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "neg_dst", "]", ")", "\n", "\n", "y_pred", "=", "torch", ".", "cat", "(", "[", "pos_out", ",", "neg_out", "]", ",", "dim", "=", "0", ")", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", "\n", "y_true", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "ones", "(", "pos_out", ".", "size", "(", "0", ")", ")", ",", "\n", "torch", ".", "zeros", "(", "neg_out", ".", "size", "(", "0", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "aps", ".", "append", "(", "average_precision_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "aucs", ".", "append", "(", "roc_auc_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "", "return", "float", "(", "torch", ".", "tensor", "(", "aps", ")", ".", "mean", "(", ")", ")", ",", "float", "(", "torch", ".", "tensor", "(", "aucs", ")", ".", "mean", "(", ")", ")", ",", "d_list_batch_test", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_transductive.test": [[223, 275], ["torch.no_grad", "memory.eval", "gnn.eval", "link_pred.eval", "torch.manual_seed", "inference_data.seq_batches", "torch.randint", "torch.cat().unique", "neighbor_loader", "torch.arange", "memory", "torch.zeros", "gnn", "link_pred", "link_pred", "torch.cat().sigmoid().cpu", "torch.cat", "aps.append", "aucs.append", "memory.update_state", "neighbor_loader.insert", "float", "float", "torch.cat().unique.size", "sklearn.metrics.average_precision_score", "sklearn.metrics.roc_auc_score", "torch.tensor().mean", "torch.tensor().mean", "src.size", "torch.cat", "torch.cat().sigmoid", "torch.ones", "torch.zeros", "NameError", "link_pred.size", "link_pred.size", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "inference_data", ",", "d_list_batch", ")", ":", "\n", "    ", "memory", ".", "eval", "(", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "link_pred", ".", "eval", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "12345", ")", "# Ensure deterministic sampling across epochs.", "\n", "\n", "aps", ",", "aucs", ",", "t_batch", "=", "[", "]", ",", "[", "]", ",", "0", "\n", "for", "batch", "in", "inference_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "\n", "        ", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "neg_dst", "=", "torch", ".", "randint", "(", "min_dst_idx", ",", "max_dst_idx", "+", "1", ",", "(", "src", ".", "size", "(", "0", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", ",", "neg_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "assoc", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "d_list", "=", "d_list_batch", "[", "t_batch", "]", "\n", "t_batch", "+=", "1", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "pos_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "pos_dst", "]", ")", "\n", "neg_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "neg_dst", "]", ")", "\n", "\n", "y_pred", "=", "torch", ".", "cat", "(", "[", "pos_out", ",", "neg_out", "]", ",", "dim", "=", "0", ")", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", "\n", "y_true", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "ones", "(", "pos_out", ".", "size", "(", "0", ")", ")", ",", "\n", "torch", ".", "zeros", "(", "neg_out", ".", "size", "(", "0", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "aps", ".", "append", "(", "average_precision_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "aucs", ".", "append", "(", "roc_auc_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "\n", "", "return", "float", "(", "torch", ".", "tensor", "(", "aps", ")", ".", "mean", "(", ")", ")", ",", "float", "(", "torch", ".", "tensor", "(", "aucs", ")", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_transductive.train_node_class": [[276, 326], ["memory.eval", "gnn.eval", "memory.reset_state", "neighbor_loader.reset_state", "decoder.train", "train_data.seq_batches", "decoder_optimizer.zero_grad", "torch.cat().unique", "neighbor_loader", "torch.arange", "labels.float().to", "decoder().sigmoid", "decoder_loss_criterion", "memory.update_state", "neighbor_loader.insert", "memory.detach", "decoder_loss_criterion.backward", "decoder_optimizer.step", "torch.cat().unique.size", "torch.no_grad", "memory", "torch.zeros", "gnn", "float", "torch.cat", "labels.float", "decoder", "NameError", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.detach"], ["", "def", "train_node_class", "(", ")", ":", "\n", "    ", "memory", ".", "eval", "(", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "\n", "memory", ".", "reset_state", "(", ")", "# Start with a fresh memory.", "\n", "neighbor_loader", ".", "reset_state", "(", ")", "# Start with an empty graph.", "\n", "decoder", ".", "train", "(", ")", "\n", "total_loss", ",", "t_batch", "=", "0", ",", "0", "\n", "\n", "for", "batch", "in", "train_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "        ", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", ",", "batch", ".", "y", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", ",", "batch", ".", "y", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", ",", "batch", ".", "y", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "decoder_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "assoc", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "# Get updated memory of all nodes involved in the computation.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "d_list", "=", "d_list_batch", "[", "t_batch", "]", "\n", "t_batch", "+=", "1", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "", "labels_batch_torch", "=", "labels", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "pred", "=", "decoder", "(", "z", "[", "assoc", "[", "src", "]", "]", ")", ".", "sigmoid", "(", ")", "\n", "decoder_loss", "=", "decoder_loss_criterion", "(", "pred", ",", "labels_batch_torch", ")", "\n", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "memory", ".", "detach", "(", ")", "\n", "\n", "decoder_loss", ".", "backward", "(", ")", "\n", "decoder_optimizer", ".", "step", "(", ")", "\n", "\n", "total_loss", "+=", "float", "(", "decoder_loss", ")", "*", "batch", ".", "num_events", "\n", "\n", "", "return", "total_loss", "/", "train_data", ".", "num_events", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_transductive.test_node_class": [[327, 363], ["torch.no_grad", "memory.eval", "gnn.eval", "decoder.eval", "inference_data.seq_batches", "torch.cat().unique", "neighbor_loader", "torch.arange", "memory", "torch.zeros", "gnn", "decoder().sigmoid().cpu", "pred_list.append", "memory.update_state", "neighbor_loader.insert", "torch.cat().unique.size", "torch.cat", "decoder().sigmoid", "NameError", "torch.cat", "decoder"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_node_class", "(", "inference_data", ")", ":", "\n", "    ", "memory", ".", "eval", "(", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "\n", "pred_list", ",", "t_batch", "=", "[", "]", ",", "0", "\n", "for", "batch", "in", "inference_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "        ", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", ",", "batch", ".", "y", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", ",", "batch", ".", "y", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", ",", "batch", ".", "y", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "assoc", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "d_list", "=", "d_list_batch", "[", "t_batch", "]", "\n", "t_batch", "+=", "1", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "pred", "=", "decoder", "(", "z", "[", "assoc", "[", "src", "]", "]", ")", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", "\n", "pred_list", ".", "append", "(", "pred", ")", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "", "return", "pred_list", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_inductive.GraphAttentionEmbedding.__init__": [[28, 36], ["super().__init__", "ufg_global.Net"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "msg_dim", ",", "time_enc", ",", "num_nodes", ",", "batch_norm", "=", "True", ",", "drop_out", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "GraphAttentionEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "time_enc", "=", "time_enc", "\n", "edge_dim", "=", "msg_dim", "+", "time_enc", ".", "out_channels", "\n", "#         self.conv = TransformerConv(in_channels, out_channels // 2, heads=2,", "\n", "#                                     dropout=0.1, edge_dim=edge_dim)", "\n", "self", ".", "conv", "=", "Net", "(", "in_channels", ",", "out_channels", ",", "out_channels", ",", "r", "=", "2", ",", "Lev", "=", "2", ",", "num_nodes", "=", "num_nodes", ",", "shrinkage", "=", "None", ",", "\n", "threshold", "=", "1e-3", ",", "dropout_prob", "=", "drop_out", ",", "num_layers", "=", "2", ",", "batch_norm", "=", "batch_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_inductive.GraphAttentionEmbedding.forward": [[37, 42], ["link_prediction_inductive.GraphAttentionEmbedding.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "d_list", ",", "n_id", ")", ":", "\n", "#         rel_t = last_update[edge_index[0]] - t", "\n", "#         rel_t_enc = self.time_enc(rel_t.to(x.dtype))", "\n", "#         edge_attr = torch.cat([rel_t_enc, msg], dim=-1)", "\n", "        ", "return", "self", ".", "conv", "(", "x", ",", "d_list", ",", "n_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_inductive.LinkPredictor.__init__": [[45, 50], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "LinkPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin_src", "=", "Linear", "(", "in_channels", ",", "in_channels", ")", "\n", "self", ".", "lin_dst", "=", "Linear", "(", "in_channels", ",", "in_channels", ")", "\n", "self", ".", "lin_final", "=", "Linear", "(", "in_channels", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_inductive.LinkPredictor.forward": [[51, 55], ["h.relu.relu.relu", "link_prediction_inductive.LinkPredictor.lin_final", "link_prediction_inductive.LinkPredictor.lin_src", "link_prediction_inductive.LinkPredictor.lin_dst"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_src", ",", "z_dst", ")", ":", "\n", "        ", "h", "=", "self", ".", "lin_src", "(", "z_src", ")", "+", "self", ".", "lin_dst", "(", "z_dst", ")", "\n", "h", "=", "h", ".", "relu", "(", ")", "\n", "return", "self", ".", "lin_final", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_inductive.pre_train": [[88, 153], ["memory.train", "gnn.train", "link_pred.train", "memory.reset_state", "neighbor_loader.reset_state", "train_data.seq_batches", "optimizer.zero_grad", "torch.randint", "torch.cat().unique", "neighbor_loader", "memory", "ufg_global.get_d_list", "d_list_batch.append", "torch.zeros", "gnn", "link_pred", "link_pred", "criterion", "criterion", "memory.update_state", "neighbor_loader.insert", "criterion.backward", "optimizer.step", "memory.detach", "torch.ones_like", "torch.zeros_like", "float", "src.size", "torch.cat", "NameError", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.get_d_list", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.detach"], ["", "", "def", "pre_train", "(", ")", ":", "\n", "    ", "memory", ".", "train", "(", ")", "\n", "gnn", ".", "train", "(", ")", "\n", "link_pred", ".", "train", "(", ")", "\n", "\n", "memory", ".", "reset_state", "(", ")", "# Start with a fresh memory.", "\n", "neighbor_loader", ".", "reset_state", "(", ")", "# Start with an empty graph.", "\n", "\n", "total_loss", ",", "d_list_batch", "=", "0", ",", "[", "]", "\n", "for", "batch", "in", "train_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "\n", "# Sample negative destination nodes.", "\n", "neg_dst", "=", "torch", ".", "randint", "(", "min_dst_idx", ",", "max_dst_idx", "+", "1", ",", "(", "src", ".", "size", "(", "0", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", ",", "neg_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "#         assoc[n_id] = torch.arange(n_id.size(0), device=device)", "\n", "\n", "# Get updated memory of all nodes involved in the computation.", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "\n", "d_list", "=", "get_d_list", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "d_list_batch", ".", "append", "(", "d_list", ")", "\n", "\n", "#         i = torch.stack((n_id.view(-1,1).repeat(1,memory_dim).view(-1), torch.arange(memory_dim).repeat(n_id.size(0)).to(device)), dim=0)", "\n", "#         s = torch.sparse_coo_tensor(i, z.view(-1), (data.num_nodes, memory_dim)).to_dense()", "\n", "#         model(s, L_index, L_value, c, dilation, J)", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "#         z = gnn(z, last_update, edge_index, data.t[e_id], data.msg[e_id])", "\n", "\n", "pos_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "pos_dst", "]", ")", "\n", "neg_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "neg_dst", "]", ")", "\n", "\n", "loss", "=", "criterion", "(", "pos_out", ",", "torch", ".", "ones_like", "(", "pos_out", ")", ")", "\n", "loss", "+=", "criterion", "(", "neg_out", ",", "torch", ".", "zeros_like", "(", "neg_out", ")", ")", "\n", "\n", "# Update memory and neighbor loader with ground-truth state.", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "memory", ".", "detach", "(", ")", "\n", "total_loss", "+=", "float", "(", "loss", ")", "*", "batch", ".", "num_events", "\n", "#         print(total_loss/ train_data.num_events)", "\n", "\n", "", "return", "total_loss", "/", "train_data", ".", "num_events", ",", "d_list_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_inductive.train": [[155, 218], ["memory.train", "gnn.train", "link_pred.train", "memory.reset_state", "neighbor_loader.reset_state", "train_data.seq_batches", "optimizer.zero_grad", "torch.randint", "torch.cat().unique", "neighbor_loader", "memory", "torch.zeros", "gnn", "link_pred", "link_pred", "criterion", "criterion", "memory.update_state", "neighbor_loader.insert", "criterion.backward", "optimizer.step", "memory.detach", "torch.ones_like", "torch.zeros_like", "float", "src.size", "torch.cat", "NameError", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.detach"], ["", "def", "train", "(", "d_list_batch", ")", ":", "\n", "    ", "memory", ".", "train", "(", ")", "\n", "gnn", ".", "train", "(", ")", "\n", "link_pred", ".", "train", "(", ")", "\n", "\n", "memory", ".", "reset_state", "(", ")", "# Start with a fresh memory.", "\n", "#     print(memory)", "\n", "neighbor_loader", ".", "reset_state", "(", ")", "# Start with an empty graph.", "\n", "\n", "total_loss", ",", "t_batch", "=", "0", ",", "0", "\n", "for", "batch", "in", "train_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "# Sample negative destination nodes.", "\n", "neg_dst", "=", "torch", ".", "randint", "(", "min_dst_idx", ",", "max_dst_idx", "+", "1", ",", "(", "src", ".", "size", "(", "0", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", ",", "neg_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "#         assoc[n_id] = torch.arange(n_id.size(0), device=device)", "\n", "\n", "# Get updated memory of all nodes involved in the computation.", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "\n", "d_list", "=", "d_list_batch", "[", "t_batch", "]", "\n", "t_batch", "+=", "1", "\n", "\n", "#         i = torch.stack((n_id.view(-1,1).repeat(1,memory_dim).view(-1), torch.arange(memory_dim).repeat(n_id.size(0)).to(device)), dim=0)", "\n", "#         s = torch.sparse_coo_tensor(i, z.view(-1), (data.num_nodes, memory_dim)).to_dense()", "\n", "#         model(s, L_index, L_value, c, dilation, J)", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "#         z = gnn(z, last_update, edge_index, data.t[e_id], data.msg[e_id])", "\n", "\n", "pos_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "pos_dst", "]", ")", "\n", "neg_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "neg_dst", "]", ")", "\n", "\n", "loss", "=", "criterion", "(", "pos_out", ",", "torch", ".", "ones_like", "(", "pos_out", ")", ")", "\n", "loss", "+=", "criterion", "(", "neg_out", ",", "torch", ".", "zeros_like", "(", "neg_out", ")", ")", "\n", "\n", "# Update memory and neighbor loader with ground-truth state.", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "memory", ".", "detach", "(", ")", "\n", "total_loss", "+=", "float", "(", "loss", ")", "*", "batch", ".", "num_events", "\n", "#         print(total_loss/ train_data.num_events)", "\n", "\n", "", "return", "total_loss", "/", "train_data", ".", "num_events", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_inductive.pre_test": [[219, 281], ["torch.no_grad", "memory.eval", "gnn.eval", "link_pred.eval", "torch.manual_seed", "inference_data.seq_batches", "torch.cat().unique", "neighbor_loader", "torch.arange", "memory", "ufg_global.get_d_list", "d_list_batch_test.append", "torch.zeros", "gnn", "link_pred", "link_pred", "torch.cat().sigmoid().cpu", "torch.cat", "aps.append", "aucs.append", "memory.update_state", "neighbor_loader.insert", "float", "float", "torch.tensor", "torch.cat().unique.size", "sklearn.metrics.average_precision_score", "sklearn.metrics.roc_auc_score", "torch.tensor().mean", "torch.tensor().mean", "infer_rand_sampler.sample", "torch.cat", "torch.cat().sigmoid", "torch.ones", "torch.zeros", "NameError", "src.size", "link_pred.size", "link_pred.size", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.get_d_list", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.RandEdgeSampler.sample"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "pre_test", "(", "inference_data", ",", "infer_rand_sampler", ")", ":", "\n", "    ", "memory", ".", "eval", "(", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "link_pred", ".", "eval", "(", ")", "\n", "\n", "\n", "torch", ".", "manual_seed", "(", "12345", ")", "# Ensure deterministic sampling across epochs.", "\n", "\n", "aps", ",", "aucs", ",", "d_list_batch_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", "in", "inference_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "\n", "        ", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "#         neg_dst = torch.randint(min_dst_idx, max_dst_idx + 1, (src.size(0), ),", "\n", "#                                 dtype=torch.long, device=device)", "\n", "#         n_id = torch.cat([src, pos_dst, neg_dst]).unique()", "\n", "\n", "neg_pair", "=", "torch", ".", "tensor", "(", "infer_rand_sampler", ".", "sample", "(", "src", ".", "size", "(", "0", ")", ")", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "-", "1", "# due to index dif", "\n", "neg_src", ",", "neg_dst", "=", "neg_pair", "[", "0", "]", ",", "neg_pair", "[", "1", "]", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", ",", "neg_src", ",", "neg_dst", "]", ")", ".", "unique", "(", ")", "\n", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "assoc", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "\n", "d_list", "=", "get_d_list", "(", "edge_index", ",", "num_nodes", ")", "\n", "d_list_batch_test", ".", "append", "(", "d_list", ")", "\n", "\n", "#         i = torch.stack((n_id.view(-1,1).repeat(1,memory_dim).view(-1), torch.arange(memory_dim).repeat(n_id.size(0)).to(device)), dim=0)", "\n", "#         s = torch.sparse_coo_tensor(i, z.view(-1), (data.num_nodes, memory_dim)).to_dense()", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "#         pos_out = link_pred(z_full[src], z_full[pos_dst])", "\n", "#         neg_out = link_pred(z_full[src], z_full[neg_dst])", "\n", "\n", "pos_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "pos_dst", "]", ")", "\n", "neg_out", "=", "link_pred", "(", "z_full", "[", "neg_src", "]", ",", "z_full", "[", "neg_dst", "]", ")", "\n", "\n", "y_pred", "=", "torch", ".", "cat", "(", "[", "pos_out", ",", "neg_out", "]", ",", "dim", "=", "0", ")", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", "\n", "y_true", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "ones", "(", "pos_out", ".", "size", "(", "0", ")", ")", ",", "\n", "torch", ".", "zeros", "(", "neg_out", ".", "size", "(", "0", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "aps", ".", "append", "(", "average_precision_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "aucs", ".", "append", "(", "roc_auc_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "", "return", "float", "(", "torch", ".", "tensor", "(", "aps", ")", ".", "mean", "(", ")", ")", ",", "float", "(", "torch", ".", "tensor", "(", "aucs", ")", ".", "mean", "(", ")", ")", ",", "d_list_batch_test", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_inductive.test": [[282, 343], ["torch.no_grad", "memory.eval", "gnn.eval", "link_pred.eval", "torch.manual_seed", "inference_data.seq_batches", "torch.cat().unique", "neighbor_loader", "torch.arange", "memory", "torch.zeros", "gnn", "link_pred", "link_pred", "torch.cat().sigmoid().cpu", "torch.cat", "aps.append", "aucs.append", "memory.update_state", "neighbor_loader.insert", "float", "float", "torch.tensor", "torch.cat().unique.size", "sklearn.metrics.average_precision_score", "sklearn.metrics.roc_auc_score", "torch.tensor().mean", "torch.tensor().mean", "infer_rand_sampler.sample", "torch.cat", "torch.cat().sigmoid", "torch.ones", "torch.zeros", "NameError", "src.size", "link_pred.size", "link_pred.size", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.RandEdgeSampler.sample"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "inference_data", ",", "d_list_batch", ",", "infer_rand_sampler", ")", ":", "\n", "    ", "memory", ".", "eval", "(", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "link_pred", ".", "eval", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "12345", ")", "# Ensure deterministic sampling across epochs.", "\n", "\n", "aps", ",", "aucs", ",", "t_batch", "=", "[", "]", ",", "[", "]", ",", "0", "\n", "for", "batch", "in", "inference_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "\n", "        ", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "#         neg_dst = torch.randint(min_dst_idx, max_dst_idx + 1, (src.size(0), ),", "\n", "#                                 dtype=torch.long, device=device)", "\n", "\n", "#         n_id = torch.cat([src, pos_dst, neg_dst]).unique()", "\n", "neg_pair", "=", "torch", ".", "tensor", "(", "infer_rand_sampler", ".", "sample", "(", "src", ".", "size", "(", "0", ")", ")", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "-", "1", "# due to index dif", "\n", "neg_src", ",", "neg_dst", "=", "neg_pair", "[", "0", "]", ",", "neg_pair", "[", "1", "]", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", ",", "neg_src", ",", "neg_dst", "]", ")", ".", "unique", "(", ")", "\n", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "assoc", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "d_list", "=", "d_list_batch", "[", "t_batch", "]", "\n", "t_batch", "+=", "1", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "#         i = torch.stack((n_id.view(-1,1).repeat(1,memory_dim).view(-1), torch.arange(memory_dim).repeat(n_id.size(0)).to(device)), dim=0)", "\n", "#         s = torch.sparse_coo_tensor(i, z.view(-1), (data.num_nodes, memory_dim)).to_dense()", "\n", "#         model(s, L_index, L_value, c, dilation, J)", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "#         pos_out = link_pred(z_full[src], z_full[pos_dst])", "\n", "#         neg_out = link_pred(z_full[src], z_full[neg_dst])", "\n", "pos_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "pos_dst", "]", ")", "\n", "neg_out", "=", "link_pred", "(", "z_full", "[", "neg_src", "]", ",", "z_full", "[", "neg_dst", "]", ")", "\n", "\n", "y_pred", "=", "torch", ".", "cat", "(", "[", "pos_out", ",", "neg_out", "]", ",", "dim", "=", "0", ")", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", "\n", "y_true", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "ones", "(", "pos_out", ".", "size", "(", "0", ")", ")", ",", "\n", "torch", ".", "zeros", "(", "neg_out", ".", "size", "(", "0", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "aps", ".", "append", "(", "average_precision_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "aucs", ".", "append", "(", "roc_auc_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "\n", "", "return", "float", "(", "torch", ".", "tensor", "(", "aps", ")", ".", "mean", "(", ")", ")", ",", "float", "(", "torch", ".", "tensor", "(", "aucs", ")", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_inductive.train_node_class": [[344, 394], ["memory.eval", "gnn.eval", "memory.reset_state", "neighbor_loader.reset_state", "decoder.train", "train_data.seq_batches", "decoder_optimizer.zero_grad", "torch.cat().unique", "neighbor_loader", "torch.arange", "labels.float().to", "decoder().sigmoid", "decoder_loss_criterion", "memory.update_state", "neighbor_loader.insert", "memory.detach", "decoder_loss_criterion.backward", "decoder_optimizer.step", "torch.cat().unique.size", "torch.no_grad", "memory", "torch.zeros", "gnn", "float", "torch.cat", "labels.float", "decoder", "NameError", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.detach"], ["", "def", "train_node_class", "(", ")", ":", "\n", "    ", "memory", ".", "eval", "(", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "\n", "memory", ".", "reset_state", "(", ")", "# Start with a fresh memory.", "\n", "neighbor_loader", ".", "reset_state", "(", ")", "# Start with an empty graph.", "\n", "decoder", ".", "train", "(", ")", "\n", "total_loss", ",", "t_batch", "=", "0", ",", "0", "\n", "\n", "for", "batch", "in", "train_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "        ", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", ",", "batch", ".", "y", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", ",", "batch", ".", "y", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", ",", "batch", ".", "y", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "decoder_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "assoc", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "# Get updated memory of all nodes involved in the computation.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "d_list", "=", "d_list_batch", "[", "t_batch", "]", "\n", "t_batch", "+=", "1", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "", "labels_batch_torch", "=", "labels", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "pred", "=", "decoder", "(", "z", "[", "assoc", "[", "src", "]", "]", ")", ".", "sigmoid", "(", ")", "\n", "decoder_loss", "=", "decoder_loss_criterion", "(", "pred", ",", "labels_batch_torch", ")", "\n", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "memory", ".", "detach", "(", ")", "\n", "\n", "decoder_loss", ".", "backward", "(", ")", "\n", "decoder_optimizer", ".", "step", "(", ")", "\n", "\n", "total_loss", "+=", "float", "(", "decoder_loss", ")", "*", "batch", ".", "num_events", "\n", "\n", "", "return", "total_loss", "/", "train_data", ".", "num_events", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.link_prediction_inductive.test_node_class": [[395, 435], ["torch.no_grad", "memory.eval", "gnn.eval", "decoder.eval", "inference_data.seq_batches", "torch.cat().unique", "neighbor_loader", "torch.arange", "memory", "torch.zeros", "gnn", "decoder().sigmoid().cpu", "pred_list.append", "memory.update_state", "neighbor_loader.insert", "torch.cat().unique.size", "torch.cat", "decoder().sigmoid", "NameError", "torch.cat", "decoder"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_node_class", "(", "inference_data", ")", ":", "\n", "    ", "memory", ".", "eval", "(", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "\n", "\n", "pred_list", ",", "t_batch", "=", "[", "]", ",", "0", "\n", "for", "batch", "in", "inference_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "        ", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", ",", "batch", ".", "y", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", ",", "batch", ".", "y", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", ",", "batch", ".", "y", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "assoc", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "d_list", "=", "d_list_batch", "[", "t_batch", "]", "\n", "t_batch", "+=", "1", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "pred", "=", "decoder", "(", "z", "[", "assoc", "[", "src", "]", "]", ")", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "#         aps.append(average_precision_score(labels.cpu(), pred))", "\n", "#         aucs.append(roc_auc_score(labels.cpu(), pred))", "\n", "pred_list", ".", "append", "(", "pred", ")", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "", "return", "pred_list", "#float(torch.tensor(aucs).mean()) # float(torch.tensor(aps).mean()) #, ", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.GraphAttentionEmbedding.__init__": [[26, 32], ["super().__init__", "ufg_global.Net"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "msg_dim", ",", "time_enc", ",", "num_nodes", ",", "batch_norm", "=", "True", ",", "drop_out", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "GraphAttentionEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "time_enc", "=", "time_enc", "\n", "edge_dim", "=", "msg_dim", "+", "time_enc", ".", "out_channels", "\n", "self", ".", "conv", "=", "Net", "(", "in_channels", ",", "out_channels", ",", "out_channels", ",", "r", "=", "2", ",", "Lev", "=", "2", ",", "num_nodes", "=", "num_nodes", ",", "shrinkage", "=", "None", ",", "\n", "threshold", "=", "1e-3", ",", "dropout_prob", "=", "drop_out", ",", "num_layers", "=", "2", ",", "batch_norm", "=", "batch_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.GraphAttentionEmbedding.forward": [[33, 35], ["node_classification.GraphAttentionEmbedding.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "d_list", ",", "n_id", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ",", "d_list", ",", "n_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.LinkPredictor.__init__": [[38, 43], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "super", "(", "LinkPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin_src", "=", "Linear", "(", "in_channels", ",", "in_channels", ")", "\n", "self", ".", "lin_dst", "=", "Linear", "(", "in_channels", ",", "in_channels", ")", "\n", "self", ".", "lin_final", "=", "Linear", "(", "in_channels", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.LinkPredictor.forward": [[44, 48], ["h.relu.relu.relu", "node_classification.LinkPredictor.lin_final", "node_classification.LinkPredictor.lin_src", "node_classification.LinkPredictor.lin_dst"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_src", ",", "z_dst", ")", ":", "\n", "        ", "h", "=", "self", ".", "lin_src", "(", "z_src", ")", "+", "self", ".", "lin_dst", "(", "z_dst", ")", "\n", "h", "=", "h", ".", "relu", "(", ")", "\n", "return", "self", ".", "lin_final", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.pre_train": [[52, 112], ["memory.train", "gnn.train", "link_pred.train", "memory.reset_state", "neighbor_loader.reset_state", "train_data.seq_batches", "optimizer.zero_grad", "torch.randint", "torch.cat().unique", "neighbor_loader", "memory", "ufg_global.get_d_list", "d_list_batch.append", "torch.zeros", "gnn", "link_pred", "link_pred", "criterion", "criterion", "memory.update_state", "neighbor_loader.insert", "criterion.backward", "optimizer.step", "memory.detach", "torch.ones_like", "torch.zeros_like", "float", "src.size", "torch.cat", "NameError", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.get_d_list", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.detach"], ["", "", "def", "pre_train", "(", ")", ":", "\n", "    ", "memory", ".", "train", "(", ")", "\n", "gnn", ".", "train", "(", ")", "\n", "link_pred", ".", "train", "(", ")", "\n", "\n", "memory", ".", "reset_state", "(", ")", "# Start with a fresh memory.", "\n", "neighbor_loader", ".", "reset_state", "(", ")", "# Start with an empty graph.", "\n", "\n", "total_loss", ",", "d_list_batch", "=", "0", ",", "[", "]", "\n", "for", "batch", "in", "train_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "\n", "# Sample negative destination nodes.", "\n", "neg_dst", "=", "torch", ".", "randint", "(", "min_dst_idx", ",", "max_dst_idx", "+", "1", ",", "(", "src", ".", "size", "(", "0", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", ",", "neg_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "\n", "# Get updated memory of all nodes involved in the computation.", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "\n", "d_list", "=", "get_d_list", "(", "edge_index", ",", "num_nodes", ")", "\n", "\n", "d_list_batch", ".", "append", "(", "d_list", ")", "\n", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "pos_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "pos_dst", "]", ")", "\n", "neg_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "neg_dst", "]", ")", "\n", "\n", "loss", "=", "criterion", "(", "pos_out", ",", "torch", ".", "ones_like", "(", "pos_out", ")", ")", "\n", "loss", "+=", "criterion", "(", "neg_out", ",", "torch", ".", "zeros_like", "(", "neg_out", ")", ")", "\n", "\n", "# Update memory and neighbor loader with ground-truth state.", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "memory", ".", "detach", "(", ")", "\n", "total_loss", "+=", "float", "(", "loss", ")", "*", "batch", ".", "num_events", "\n", "\n", "", "return", "total_loss", "/", "train_data", ".", "num_events", ",", "d_list_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train": [[114, 170], ["memory.train", "gnn.train", "link_pred.train", "memory.reset_state", "neighbor_loader.reset_state", "train_data.seq_batches", "optimizer.zero_grad", "torch.randint", "torch.cat().unique", "neighbor_loader", "memory", "torch.zeros", "gnn", "link_pred", "link_pred", "criterion", "criterion", "memory.update_state", "neighbor_loader.insert", "criterion.backward", "optimizer.step", "memory.detach", "torch.ones_like", "torch.zeros_like", "float", "src.size", "torch.cat", "NameError", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.detach"], ["", "def", "train", "(", "d_list_batch", ")", ":", "\n", "    ", "memory", ".", "train", "(", ")", "\n", "gnn", ".", "train", "(", ")", "\n", "link_pred", ".", "train", "(", ")", "\n", "\n", "memory", ".", "reset_state", "(", ")", "# Start with a fresh memory.", "\n", "neighbor_loader", ".", "reset_state", "(", ")", "# Start with an empty graph.", "\n", "\n", "total_loss", ",", "t_batch", "=", "0", ",", "0", "\n", "for", "batch", "in", "train_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "# Sample negative destination nodes.", "\n", "neg_dst", "=", "torch", ".", "randint", "(", "min_dst_idx", ",", "max_dst_idx", "+", "1", ",", "(", "src", ".", "size", "(", "0", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", ",", "neg_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "\n", "# Get updated memory of all nodes involved in the computation.", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "\n", "d_list", "=", "d_list_batch", "[", "t_batch", "]", "\n", "t_batch", "+=", "1", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "pos_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "pos_dst", "]", ")", "\n", "neg_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "neg_dst", "]", ")", "\n", "\n", "loss", "=", "criterion", "(", "pos_out", ",", "torch", ".", "ones_like", "(", "pos_out", ")", ")", "\n", "loss", "+=", "criterion", "(", "neg_out", ",", "torch", ".", "zeros_like", "(", "neg_out", ")", ")", "\n", "\n", "# Update memory and neighbor loader with ground-truth state.", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "memory", ".", "detach", "(", ")", "\n", "total_loss", "+=", "float", "(", "loss", ")", "*", "batch", ".", "num_events", "\n", "\n", "", "return", "total_loss", "/", "train_data", ".", "num_events", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.pre_test": [[171, 224], ["torch.no_grad", "memory.eval", "gnn.eval", "link_pred.eval", "torch.manual_seed", "inference_data.seq_batches", "torch.randint", "torch.cat().unique", "neighbor_loader", "torch.arange", "memory", "ufg_global.get_d_list", "d_list_batch_test.append", "torch.zeros", "gnn", "link_pred", "link_pred", "torch.cat().sigmoid().cpu", "torch.cat", "aps.append", "aucs.append", "memory.update_state", "neighbor_loader.insert", "float", "float", "torch.cat().unique.size", "sklearn.metrics.average_precision_score", "sklearn.metrics.roc_auc_score", "torch.tensor().mean", "torch.tensor().mean", "src.size", "torch.cat", "torch.cat().sigmoid", "torch.ones", "torch.zeros", "NameError", "link_pred.size", "link_pred.size", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.ufg_global.get_d_list", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "pre_test", "(", "inference_data", ")", ":", "\n", "    ", "memory", ".", "eval", "(", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "link_pred", ".", "eval", "(", ")", "\n", "\n", "\n", "torch", ".", "manual_seed", "(", "12345", ")", "# Ensure deterministic sampling across epochs.", "\n", "\n", "aps", ",", "aucs", ",", "d_list_batch_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", "in", "inference_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "\n", "        ", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "neg_dst", "=", "torch", ".", "randint", "(", "min_dst_idx", ",", "max_dst_idx", "+", "1", ",", "(", "src", ".", "size", "(", "0", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", ",", "neg_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "assoc", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "\n", "d_list", "=", "get_d_list", "(", "edge_index", ",", "num_nodes", ")", "\n", "d_list_batch_test", ".", "append", "(", "d_list", ")", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "pos_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "pos_dst", "]", ")", "\n", "neg_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "neg_dst", "]", ")", "\n", "\n", "y_pred", "=", "torch", ".", "cat", "(", "[", "pos_out", ",", "neg_out", "]", ",", "dim", "=", "0", ")", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", "\n", "y_true", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "ones", "(", "pos_out", ".", "size", "(", "0", ")", ")", ",", "\n", "torch", ".", "zeros", "(", "neg_out", ".", "size", "(", "0", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "aps", ".", "append", "(", "average_precision_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "aucs", ".", "append", "(", "roc_auc_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "", "return", "float", "(", "torch", ".", "tensor", "(", "aps", ")", ".", "mean", "(", ")", ")", ",", "float", "(", "torch", ".", "tensor", "(", "aucs", ")", ".", "mean", "(", ")", ")", ",", "d_list_batch_test", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.test": [[225, 277], ["torch.no_grad", "memory.eval", "gnn.eval", "link_pred.eval", "torch.manual_seed", "inference_data.seq_batches", "torch.randint", "torch.cat().unique", "neighbor_loader", "torch.arange", "memory", "torch.zeros", "gnn", "link_pred", "link_pred", "torch.cat().sigmoid().cpu", "torch.cat", "aps.append", "aucs.append", "memory.update_state", "neighbor_loader.insert", "float", "float", "torch.cat().unique.size", "sklearn.metrics.average_precision_score", "sklearn.metrics.roc_auc_score", "torch.tensor().mean", "torch.tensor().mean", "src.size", "torch.cat", "torch.cat().sigmoid", "torch.ones", "torch.zeros", "NameError", "link_pred.size", "link_pred.size", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test", "(", "inference_data", ",", "d_list_batch", ")", ":", "\n", "    ", "memory", ".", "eval", "(", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "link_pred", ".", "eval", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "12345", ")", "# Ensure deterministic sampling across epochs.", "\n", "\n", "aps", ",", "aucs", ",", "t_batch", "=", "[", "]", ",", "[", "]", ",", "0", "\n", "for", "batch", "in", "inference_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "\n", "        ", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "neg_dst", "=", "torch", ".", "randint", "(", "min_dst_idx", ",", "max_dst_idx", "+", "1", ",", "(", "src", ".", "size", "(", "0", ")", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", ",", "neg_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "assoc", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "d_list", "=", "d_list_batch", "[", "t_batch", "]", "\n", "t_batch", "+=", "1", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "pos_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "pos_dst", "]", ")", "\n", "neg_out", "=", "link_pred", "(", "z_full", "[", "src", "]", ",", "z_full", "[", "neg_dst", "]", ")", "\n", "\n", "y_pred", "=", "torch", ".", "cat", "(", "[", "pos_out", ",", "neg_out", "]", ",", "dim", "=", "0", ")", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", "\n", "y_true", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "ones", "(", "pos_out", ".", "size", "(", "0", ")", ")", ",", "\n", "torch", ".", "zeros", "(", "neg_out", ".", "size", "(", "0", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "aps", ".", "append", "(", "average_precision_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "aucs", ".", "append", "(", "roc_auc_score", "(", "y_true", ",", "y_pred", ")", ")", "\n", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "\n", "", "return", "float", "(", "torch", ".", "tensor", "(", "aps", ")", ".", "mean", "(", ")", ")", ",", "float", "(", "torch", ".", "tensor", "(", "aucs", ")", ".", "mean", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train_node_class": [[278, 328], ["memory.eval", "gnn.eval", "memory.reset_state", "neighbor_loader.reset_state", "decoder.train", "train_data.seq_batches", "decoder_optimizer.zero_grad", "torch.cat().unique", "neighbor_loader", "torch.arange", "labels.float().to", "decoder().sigmoid", "decoder_loss_criterion", "memory.update_state", "neighbor_loader.insert", "memory.detach", "decoder_loss_criterion.backward", "decoder_optimizer.step", "torch.cat().unique.size", "torch.no_grad", "memory", "torch.zeros", "gnn", "float", "torch.cat", "labels.float", "decoder", "NameError", "torch.cat"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.reset_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.train", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.detach"], ["", "def", "train_node_class", "(", "d_list_batch", ")", ":", "\n", "    ", "memory", ".", "eval", "(", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "\n", "memory", ".", "reset_state", "(", ")", "# Start with a fresh memory.", "\n", "neighbor_loader", ".", "reset_state", "(", ")", "# Start with an empty graph.", "\n", "decoder", ".", "train", "(", ")", "\n", "total_loss", ",", "t_batch", "=", "0", ",", "0", "\n", "\n", "for", "batch", "in", "train_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "        ", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", ",", "batch", ".", "y", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", ",", "batch", ".", "y", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", ",", "batch", ".", "y", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "decoder_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "assoc", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "# Get updated memory of all nodes involved in the computation.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "d_list", "=", "d_list_batch", "[", "t_batch", "]", "\n", "t_batch", "+=", "1", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "", "labels_batch_torch", "=", "labels", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "pred", "=", "decoder", "(", "z", "[", "assoc", "[", "src", "]", "]", ")", ".", "sigmoid", "(", ")", "\n", "decoder_loss", "=", "decoder_loss_criterion", "(", "pred", ",", "labels_batch_torch", ")", "\n", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "memory", ".", "detach", "(", ")", "\n", "\n", "decoder_loss", ".", "backward", "(", ")", "\n", "decoder_optimizer", ".", "step", "(", ")", "\n", "\n", "total_loss", "+=", "float", "(", "decoder_loss", ")", "*", "batch", ".", "num_events", "\n", "\n", "", "return", "total_loss", "/", "train_data", ".", "num_events", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.node_classification.test_node_class": [[329, 368], ["torch.no_grad", "memory.eval", "gnn.eval", "decoder.eval", "inference_data.seq_batches", "torch.cat().unique", "neighbor_loader", "torch.arange", "memory", "torch.zeros", "gnn", "decoder().sigmoid().cpu", "pred_list.append", "memory.update_state", "neighbor_loader.insert", "torch.cat().unique.size", "torch.cat", "decoder().sigmoid", "NameError", "torch.cat", "decoder"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.TGNMemory.update_state", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.None.cus_tgn.LastNeighborLoader.insert"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "test_node_class", "(", "inference_data", ",", "d_list_batch", ")", ":", "\n", "    ", "memory", ".", "eval", "(", ")", "\n", "gnn", ".", "eval", "(", ")", "\n", "decoder", ".", "eval", "(", ")", "\n", "\n", "\n", "pred_list", ",", "t_batch", "=", "[", "]", ",", "0", "\n", "for", "batch", "in", "inference_data", ".", "seq_batches", "(", "batch_size", "=", "args", ".", "batch_size", ")", ":", "\n", "        ", "if", "data_process_type", "==", "'svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", "@", "mode", ",", "batch", ".", "y", "\n", "", "elif", "data_process_type", "==", "'raw'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "batch", ".", "msg", ",", "batch", ".", "y", "\n", "", "elif", "data_process_type", "==", "'raw+svd'", ":", "\n", "            ", "src", ",", "pos_dst", ",", "t", ",", "msg", ",", "labels", "=", "batch", ".", "src", ",", "batch", ".", "dst", ",", "batch", ".", "t", ",", "torch", ".", "cat", "(", "(", "batch", ".", "msg", ",", "batch", ".", "msg", "@", "mode", ")", ",", "dim", "=", "-", "1", ")", ",", "batch", ".", "y", "\n", "", "else", ":", "raise", "NameError", "(", "'wrong data preprocessing type'", ")", "\n", "\n", "n_id", "=", "torch", ".", "cat", "(", "[", "src", ",", "pos_dst", "]", ")", ".", "unique", "(", ")", "\n", "n_id", ",", "edge_index", ",", "e_id", "=", "neighbor_loader", "(", "n_id", ")", "\n", "assoc", "[", "n_id", "]", "=", "torch", ".", "arange", "(", "n_id", ".", "size", "(", "0", ")", ",", "device", "=", "device", ")", "\n", "\n", "z", ",", "last_update", "=", "memory", "(", "n_id", ")", "\n", "num_nodes", "=", "data", ".", "num_nodes", "\n", "memory_dim", "=", "memory", ".", "memory_dim", "\n", "d_list", "=", "d_list_batch", "[", "t_batch", "]", "\n", "t_batch", "+=", "1", "\n", "\n", "s", "=", "torch", ".", "zeros", "(", "data", ".", "num_nodes", ",", "memory_dim", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "s", "[", "n_id", "]", "=", "z", "\n", "z_full", "=", "gnn", "(", "s", ",", "d_list", ",", "n_id", ")", "\n", "\n", "pred", "=", "decoder", "(", "z", "[", "assoc", "[", "src", "]", "]", ")", ".", "sigmoid", "(", ")", ".", "cpu", "(", ")", "\n", "\n", "\n", "pred_list", ".", "append", "(", "pred", ")", "\n", "memory", ".", "update_state", "(", "src", ",", "pos_dst", ",", "t", ",", "msg", ")", "\n", "neighbor_loader", ".", "insert", "(", "src", ",", "pos_dst", ")", "\n", "\n", "", "return", "pred_list", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.data_processing.Data.__init__": [[25, 34], ["len", "len", "set", "set"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "sources", ",", "destinations", ",", "timestamps", ",", "edge_idxs", ",", "labels", ")", ":", "\n", "    ", "self", ".", "sources", "=", "sources", "\n", "self", ".", "destinations", "=", "destinations", "\n", "self", ".", "timestamps", "=", "timestamps", "\n", "self", ".", "edge_idxs", "=", "edge_idxs", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "n_interactions", "=", "len", "(", "sources", ")", "\n", "self", ".", "unique_nodes", "=", "set", "(", "sources", ")", "|", "set", "(", "destinations", ")", "\n", "self", ".", "n_unique_nodes", "=", "len", "(", "self", ".", "unique_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.data_processing.findMode": [[9, 23], ["data.seq_batches", "data.seq_batches.__next__", "msg.cpu().numpy", "scipy.linalg.svd", "fbpca.pca", "fbpca.diffsnorm", "print", "torch.tensor().float().to", "msg.cpu", "torch.tensor().float", "torch.tensor"], "function", ["None"], ["def", "findMode", "(", "data", ",", "num_modes", ")", ":", "\n", "    ", "tmp", "=", "data", ".", "seq_batches", "(", "batch_size", "=", "data", ".", "num_events", ")", "\n", "batch", "=", "tmp", ".", "__next__", "(", ")", "\n", "msg", "=", "batch", ".", "msg", "\n", "\n", "msg1", "=", "msg", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "(", "U", ",", "s", ",", "Va", ")", "=", "svd", "(", "msg1", ",", "full_matrices", "=", "False", ")", "\n", "msg1", "=", "msg1", "/", "s", "[", "0", "]", "\n", "\n", "(", "U", ",", "s", ",", "Va", ")", "=", "pca", "(", "msg1", ",", "num_modes", ",", "True", ")", "\n", "err", "=", "diffsnorm", "(", "msg1", ",", "U", ",", "s", ",", "Va", ")", "\n", "print", "(", "f' Truncated svd of first{num_modes: 2d} modes, spectral norm error:  {err:.4f}'", ")", "\n", "mode", "=", "torch", ".", "tensor", "(", "Va", ")", ".", "float", "(", ")", ".", "to", "(", "msg", ".", "device", ")", ".", "T", "\n", "return", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.data_processing.get_data_node_classification": [[36, 68], ["pandas.read_csv", "numpy.load", "numpy.load", "list", "random.seed", "data_processing.Data", "data_processing.Data", "data_processing.Data", "data_processing.Data", "numpy.quantile", "numpy.logical_and"], "function", ["None"], ["", "", "def", "get_data_node_classification", "(", "dataset_name", ",", "use_validation", "=", "False", ")", ":", "\n", "### Load data and train val test split", "\n", "  ", "graph_df", "=", "pd", ".", "read_csv", "(", "'./data/ml_{}.csv'", ".", "format", "(", "dataset_name", ")", ")", "\n", "edge_features", "=", "np", ".", "load", "(", "'./data/ml_{}.npy'", ".", "format", "(", "dataset_name", ")", ")", "\n", "node_features", "=", "np", ".", "load", "(", "'./data/ml_{}_node.npy'", ".", "format", "(", "dataset_name", ")", ")", "\n", "\n", "val_time", ",", "test_time", "=", "list", "(", "np", ".", "quantile", "(", "graph_df", ".", "ts", ",", "[", "0.70", ",", "0.85", "]", ")", ")", "\n", "\n", "sources", "=", "graph_df", ".", "u", ".", "values", "\n", "destinations", "=", "graph_df", ".", "i", ".", "values", "\n", "edge_idxs", "=", "graph_df", ".", "idx", ".", "values", "\n", "labels", "=", "graph_df", ".", "label", ".", "values", "\n", "timestamps", "=", "graph_df", ".", "ts", ".", "values", "\n", "\n", "random", ".", "seed", "(", "2020", ")", "\n", "\n", "train_mask", "=", "timestamps", "<=", "val_time", "if", "use_validation", "else", "timestamps", "<=", "test_time", "\n", "test_mask", "=", "timestamps", ">", "test_time", "\n", "val_mask", "=", "np", ".", "logical_and", "(", "timestamps", "<=", "test_time", ",", "timestamps", ">", "val_time", ")", "if", "use_validation", "else", "test_mask", "\n", "\n", "full_data", "=", "Data", "(", "sources", ",", "destinations", ",", "timestamps", ",", "edge_idxs", ",", "labels", ")", "\n", "\n", "train_data", "=", "Data", "(", "sources", "[", "train_mask", "]", ",", "destinations", "[", "train_mask", "]", ",", "timestamps", "[", "train_mask", "]", ",", "\n", "edge_idxs", "[", "train_mask", "]", ",", "labels", "[", "train_mask", "]", ")", "\n", "\n", "val_data", "=", "Data", "(", "sources", "[", "val_mask", "]", ",", "destinations", "[", "val_mask", "]", ",", "timestamps", "[", "val_mask", "]", ",", "\n", "edge_idxs", "[", "val_mask", "]", ",", "labels", "[", "val_mask", "]", ")", "\n", "\n", "test_data", "=", "Data", "(", "sources", "[", "test_mask", "]", ",", "destinations", "[", "test_mask", "]", ",", "timestamps", "[", "test_mask", "]", ",", "\n", "edge_idxs", "[", "test_mask", "]", ",", "labels", "[", "test_mask", "]", ")", "\n", "\n", "return", "full_data", ",", "node_features", ",", "edge_features", ",", "train_data", ",", "val_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.data_processing.get_data": [[70, 176], ["pandas.read_csv", "numpy.load", "numpy.load", "list", "data_processing.Data", "random.seed", "len", "set().union", "set", "numpy.logical_and", "numpy.logical_and", "data_processing.Data", "set().union", "numpy.logical_and", "data_processing.Data", "data_processing.Data", "data_processing.Data", "data_processing.Data", "print", "print", "print", "print", "print", "print", "print", "numpy.random.rand", "numpy.quantile", "set", "set", "set", "random.sample", "pd.read_csv.u.map", "pd.read_csv.i.map", "len", "set", "set", "numpy.array", "numpy.array", "numpy.logical_and", "numpy.logical_and", "numpy.array", "numpy.logical_and", "numpy.logical_and", "set", "int", "set", "len", "len", "list", "list", "zip", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.RandEdgeSampler.sample"], ["", "def", "get_data", "(", "dataset_name", ",", "different_new_nodes_between_val_and_test", "=", "False", ",", "randomize_features", "=", "False", ")", ":", "\n", "### Load data and train val test split", "\n", "  ", "graph_df", "=", "pd", ".", "read_csv", "(", "'./data/ml_{}.csv'", ".", "format", "(", "dataset_name", ")", ")", "\n", "edge_features", "=", "np", ".", "load", "(", "'./data/ml_{}.npy'", ".", "format", "(", "dataset_name", ")", ")", "\n", "node_features", "=", "np", ".", "load", "(", "'./data/ml_{}_node.npy'", ".", "format", "(", "dataset_name", ")", ")", "\n", "\n", "if", "randomize_features", ":", "\n", "    ", "node_features", "=", "np", ".", "random", ".", "rand", "(", "node_features", ".", "shape", "[", "0", "]", ",", "node_features", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "val_time", ",", "test_time", "=", "list", "(", "np", ".", "quantile", "(", "graph_df", ".", "ts", ",", "[", "0.70", ",", "0.85", "]", ")", ")", "\n", "\n", "sources", "=", "graph_df", ".", "u", ".", "values", "\n", "destinations", "=", "graph_df", ".", "i", ".", "values", "\n", "edge_idxs", "=", "graph_df", ".", "idx", ".", "values", "\n", "labels", "=", "graph_df", ".", "label", ".", "values", "\n", "timestamps", "=", "graph_df", ".", "ts", ".", "values", "\n", "\n", "full_data", "=", "Data", "(", "sources", ",", "destinations", ",", "timestamps", ",", "edge_idxs", ",", "labels", ")", "\n", "\n", "random", ".", "seed", "(", "2020", ")", "\n", "\n", "node_set", "=", "set", "(", "sources", ")", "|", "set", "(", "destinations", ")", "\n", "n_total_unique_nodes", "=", "len", "(", "node_set", ")", "\n", "\n", "# Compute nodes which appear at test time", "\n", "test_node_set", "=", "set", "(", "sources", "[", "timestamps", ">", "val_time", "]", ")", ".", "union", "(", "\n", "set", "(", "destinations", "[", "timestamps", ">", "val_time", "]", ")", ")", "\n", "# Sample nodes which we keep as new nodes (to test inductiveness), so than we have to remove all", "\n", "# their edges from training", "\n", "new_test_node_set", "=", "set", "(", "random", ".", "sample", "(", "test_node_set", ",", "int", "(", "0.1", "*", "n_total_unique_nodes", ")", ")", ")", "\n", "\n", "# Mask saying for each source and destination whether they are new test nodes", "\n", "new_test_source_mask", "=", "graph_df", ".", "u", ".", "map", "(", "lambda", "x", ":", "x", "in", "new_test_node_set", ")", ".", "values", "\n", "new_test_destination_mask", "=", "graph_df", ".", "i", ".", "map", "(", "lambda", "x", ":", "x", "in", "new_test_node_set", ")", ".", "values", "\n", "\n", "# Mask which is true for edges with both destination and source not being new test nodes (because", "\n", "# we want to remove all edges involving any new test node)", "\n", "observed_edges_mask", "=", "np", ".", "logical_and", "(", "~", "new_test_source_mask", ",", "~", "new_test_destination_mask", ")", "\n", "\n", "# For train we keep edges happening before the validation time which do not involve any new node", "\n", "# used for inductiveness", "\n", "train_mask", "=", "np", ".", "logical_and", "(", "timestamps", "<=", "val_time", ",", "observed_edges_mask", ")", "\n", "\n", "train_data", "=", "Data", "(", "sources", "[", "train_mask", "]", ",", "destinations", "[", "train_mask", "]", ",", "timestamps", "[", "train_mask", "]", ",", "\n", "edge_idxs", "[", "train_mask", "]", ",", "labels", "[", "train_mask", "]", ")", "\n", "\n", "# define the new nodes sets for testing inductiveness of the model", "\n", "train_node_set", "=", "set", "(", "train_data", ".", "sources", ")", ".", "union", "(", "train_data", ".", "destinations", ")", "\n", "assert", "len", "(", "train_node_set", "&", "new_test_node_set", ")", "==", "0", "\n", "new_node_set", "=", "node_set", "-", "train_node_set", "\n", "\n", "val_mask", "=", "np", ".", "logical_and", "(", "timestamps", "<=", "test_time", ",", "timestamps", ">", "val_time", ")", "\n", "test_mask", "=", "timestamps", ">", "test_time", "\n", "\n", "if", "different_new_nodes_between_val_and_test", ":", "\n", "    ", "n_new_nodes", "=", "len", "(", "new_test_node_set", ")", "//", "2", "\n", "val_new_node_set", "=", "set", "(", "list", "(", "new_test_node_set", ")", "[", ":", "n_new_nodes", "]", ")", "\n", "test_new_node_set", "=", "set", "(", "list", "(", "new_test_node_set", ")", "[", "n_new_nodes", ":", "]", ")", "\n", "\n", "edge_contains_new_val_node_mask", "=", "np", ".", "array", "(", "\n", "[", "(", "a", "in", "val_new_node_set", "or", "b", "in", "val_new_node_set", ")", "for", "a", ",", "b", "in", "zip", "(", "sources", ",", "destinations", ")", "]", ")", "\n", "edge_contains_new_test_node_mask", "=", "np", ".", "array", "(", "\n", "[", "(", "a", "in", "test_new_node_set", "or", "b", "in", "test_new_node_set", ")", "for", "a", ",", "b", "in", "zip", "(", "sources", ",", "destinations", ")", "]", ")", "\n", "new_node_val_mask", "=", "np", ".", "logical_and", "(", "val_mask", ",", "edge_contains_new_val_node_mask", ")", "\n", "new_node_test_mask", "=", "np", ".", "logical_and", "(", "test_mask", ",", "edge_contains_new_test_node_mask", ")", "\n", "\n", "\n", "", "else", ":", "\n", "    ", "edge_contains_new_node_mask", "=", "np", ".", "array", "(", "\n", "[", "(", "a", "in", "new_node_set", "or", "b", "in", "new_node_set", ")", "for", "a", ",", "b", "in", "zip", "(", "sources", ",", "destinations", ")", "]", ")", "\n", "new_node_val_mask", "=", "np", ".", "logical_and", "(", "val_mask", ",", "edge_contains_new_node_mask", ")", "\n", "new_node_test_mask", "=", "np", ".", "logical_and", "(", "test_mask", ",", "edge_contains_new_node_mask", ")", "\n", "\n", "# validation and test with all edges", "\n", "", "val_data", "=", "Data", "(", "sources", "[", "val_mask", "]", ",", "destinations", "[", "val_mask", "]", ",", "timestamps", "[", "val_mask", "]", ",", "\n", "edge_idxs", "[", "val_mask", "]", ",", "labels", "[", "val_mask", "]", ")", "\n", "\n", "test_data", "=", "Data", "(", "sources", "[", "test_mask", "]", ",", "destinations", "[", "test_mask", "]", ",", "timestamps", "[", "test_mask", "]", ",", "\n", "edge_idxs", "[", "test_mask", "]", ",", "labels", "[", "test_mask", "]", ")", "\n", "\n", "# validation and test with edges that at least has one new node (not in training set)", "\n", "new_node_val_data", "=", "Data", "(", "sources", "[", "new_node_val_mask", "]", ",", "destinations", "[", "new_node_val_mask", "]", ",", "\n", "timestamps", "[", "new_node_val_mask", "]", ",", "\n", "edge_idxs", "[", "new_node_val_mask", "]", ",", "labels", "[", "new_node_val_mask", "]", ")", "\n", "\n", "new_node_test_data", "=", "Data", "(", "sources", "[", "new_node_test_mask", "]", ",", "destinations", "[", "new_node_test_mask", "]", ",", "\n", "timestamps", "[", "new_node_test_mask", "]", ",", "edge_idxs", "[", "new_node_test_mask", "]", ",", "\n", "labels", "[", "new_node_test_mask", "]", ")", "\n", "\n", "print", "(", "\"The dataset has {} interactions, involving {} different nodes\"", ".", "format", "(", "full_data", ".", "n_interactions", ",", "\n", "full_data", ".", "n_unique_nodes", ")", ")", "\n", "print", "(", "\"The training dataset has {} interactions, involving {} different nodes\"", ".", "format", "(", "\n", "train_data", ".", "n_interactions", ",", "train_data", ".", "n_unique_nodes", ")", ")", "\n", "print", "(", "\"The validation dataset has {} interactions, involving {} different nodes\"", ".", "format", "(", "\n", "val_data", ".", "n_interactions", ",", "val_data", ".", "n_unique_nodes", ")", ")", "\n", "print", "(", "\"The test dataset has {} interactions, involving {} different nodes\"", ".", "format", "(", "\n", "test_data", ".", "n_interactions", ",", "test_data", ".", "n_unique_nodes", ")", ")", "\n", "print", "(", "\"The new node validation dataset has {} interactions, involving {} different nodes\"", ".", "format", "(", "\n", "new_node_val_data", ".", "n_interactions", ",", "new_node_val_data", ".", "n_unique_nodes", ")", ")", "\n", "print", "(", "\"The new node test dataset has {} interactions, involving {} different nodes\"", ".", "format", "(", "\n", "new_node_test_data", ".", "n_interactions", ",", "new_node_test_data", ".", "n_unique_nodes", ")", ")", "\n", "print", "(", "\"{} nodes were used for the inductive testing, i.e. are never seen during training\"", ".", "format", "(", "\n", "len", "(", "new_test_node_set", ")", ")", ")", "\n", "\n", "return", "node_features", ",", "edge_features", ",", "full_data", ",", "train_data", ",", "val_data", ",", "test_data", ",", "new_node_val_data", ",", "new_node_test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.data_processing.compute_time_statistics": [[178, 203], ["dict", "dict", "range", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "len", "all_timediffs_src.append", "all_timediffs_dst.append", "len", "len", "len", "len", "dict.keys", "dict.keys"], "function", ["None"], ["", "def", "compute_time_statistics", "(", "sources", ",", "destinations", ",", "timestamps", ")", ":", "\n", "  ", "last_timestamp_sources", "=", "dict", "(", ")", "\n", "last_timestamp_dst", "=", "dict", "(", ")", "\n", "all_timediffs_src", "=", "[", "]", "\n", "all_timediffs_dst", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "sources", ")", ")", ":", "\n", "    ", "source_id", "=", "sources", "[", "k", "]", "\n", "dest_id", "=", "destinations", "[", "k", "]", "\n", "c_timestamp", "=", "timestamps", "[", "k", "]", "\n", "if", "source_id", "not", "in", "last_timestamp_sources", ".", "keys", "(", ")", ":", "\n", "      ", "last_timestamp_sources", "[", "source_id", "]", "=", "0", "\n", "", "if", "dest_id", "not", "in", "last_timestamp_dst", ".", "keys", "(", ")", ":", "\n", "      ", "last_timestamp_dst", "[", "dest_id", "]", "=", "0", "\n", "", "all_timediffs_src", ".", "append", "(", "c_timestamp", "-", "last_timestamp_sources", "[", "source_id", "]", ")", "\n", "all_timediffs_dst", ".", "append", "(", "c_timestamp", "-", "last_timestamp_dst", "[", "dest_id", "]", ")", "\n", "last_timestamp_sources", "[", "source_id", "]", "=", "c_timestamp", "\n", "last_timestamp_dst", "[", "dest_id", "]", "=", "c_timestamp", "\n", "", "assert", "len", "(", "all_timediffs_src", ")", "==", "len", "(", "sources", ")", "\n", "assert", "len", "(", "all_timediffs_dst", ")", "==", "len", "(", "sources", ")", "\n", "mean_time_shift_src", "=", "np", ".", "mean", "(", "all_timediffs_src", ")", "\n", "std_time_shift_src", "=", "np", ".", "std", "(", "all_timediffs_src", ")", "\n", "mean_time_shift_dst", "=", "np", ".", "mean", "(", "all_timediffs_dst", ")", "\n", "std_time_shift_dst", "=", "np", ".", "std", "(", "all_timediffs_dst", ")", "\n", "\n", "return", "mean_time_shift_src", ",", "std_time_shift_src", ",", "mean_time_shift_dst", ",", "std_time_shift_dst", "\n", "", ""]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.preprocess_data.preprocess": [[8, 37], ["open", "next", "enumerate", "pandas.DataFrame", "numpy.array", "line.strip().split", "int", "int", "float", "float", "numpy.array", "u_list.append", "i_list.append", "ts_list.append", "label_list.append", "idx_list.append", "feat_l.append", "line.strip", "float"], "function", ["None"], ["def", "preprocess", "(", "data_name", ")", ":", "\n", "  ", "u_list", ",", "i_list", ",", "ts_list", ",", "label_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "feat_l", "=", "[", "]", "\n", "idx_list", "=", "[", "]", "\n", "\n", "with", "open", "(", "data_name", ")", "as", "f", ":", "\n", "    ", "s", "=", "next", "(", "f", ")", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "      ", "e", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "u", "=", "int", "(", "e", "[", "0", "]", ")", "\n", "i", "=", "int", "(", "e", "[", "1", "]", ")", "\n", "\n", "ts", "=", "float", "(", "e", "[", "2", "]", ")", "\n", "label", "=", "float", "(", "e", "[", "3", "]", ")", "# int(e[3])", "\n", "\n", "feat", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "e", "[", "4", ":", "]", "]", ")", "\n", "\n", "u_list", ".", "append", "(", "u", ")", "\n", "i_list", ".", "append", "(", "i", ")", "\n", "ts_list", ".", "append", "(", "ts", ")", "\n", "label_list", ".", "append", "(", "label", ")", "\n", "idx_list", ".", "append", "(", "idx", ")", "\n", "\n", "feat_l", ".", "append", "(", "feat", ")", "\n", "", "", "return", "pd", ".", "DataFrame", "(", "{", "'u'", ":", "u_list", ",", "\n", "'i'", ":", "i_list", ",", "\n", "'ts'", ":", "ts_list", ",", "\n", "'label'", ":", "label_list", ",", "\n", "'idx'", ":", "idx_list", "}", ")", ",", "np", ".", "array", "(", "feat_l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.preprocess_data.reindex": [[39, 58], ["df.copy", "len", "len", "df.u.max", "df.u.unique", "df.i.unique", "df.u.max", "df.u.min", "df.i.max", "df.i.min"], "function", ["None"], ["", "def", "reindex", "(", "df", ",", "bipartite", "=", "True", ")", ":", "\n", "  ", "new_df", "=", "df", ".", "copy", "(", ")", "\n", "if", "bipartite", ":", "\n", "    ", "assert", "(", "df", ".", "u", ".", "max", "(", ")", "-", "df", ".", "u", ".", "min", "(", ")", "+", "1", "==", "len", "(", "df", ".", "u", ".", "unique", "(", ")", ")", ")", "\n", "assert", "(", "df", ".", "i", ".", "max", "(", ")", "-", "df", ".", "i", ".", "min", "(", ")", "+", "1", "==", "len", "(", "df", ".", "i", ".", "unique", "(", ")", ")", ")", "\n", "\n", "upper_u", "=", "df", ".", "u", ".", "max", "(", ")", "+", "1", "\n", "new_i", "=", "df", ".", "i", "+", "upper_u", "\n", "\n", "new_df", ".", "i", "=", "new_i", "\n", "new_df", ".", "u", "+=", "1", "\n", "new_df", ".", "i", "+=", "1", "\n", "new_df", ".", "idx", "+=", "1", "\n", "", "else", ":", "\n", "    ", "new_df", ".", "u", "+=", "1", "\n", "new_df", ".", "i", "+=", "1", "\n", "new_df", ".", "idx", "+=", "1", "\n", "\n", "", "return", "new_df", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.preprocess_data.run": [[60, 79], ["pathlib.Path().mkdir", "preprocess_data.preprocess", "preprocess_data.reindex", "numpy.vstack", "max", "numpy.zeros", "reindex.to_csv", "numpy.save", "numpy.save", "numpy.zeros", "reindex.u.max", "reindex.i.max", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.preprocess_data.preprocess", "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.preprocess_data.reindex"], ["", "def", "run", "(", "data_name", ",", "bipartite", "=", "True", ")", ":", "\n", "  ", "Path", "(", "\"data/\"", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "PATH", "=", "'./data/{}.csv'", ".", "format", "(", "data_name", ")", "\n", "OUT_DF", "=", "'./data/ml_{}.csv'", ".", "format", "(", "data_name", ")", "\n", "OUT_FEAT", "=", "'./data/ml_{}.npy'", ".", "format", "(", "data_name", ")", "\n", "OUT_NODE_FEAT", "=", "'./data/ml_{}_node.npy'", ".", "format", "(", "data_name", ")", "\n", "\n", "df", ",", "feat", "=", "preprocess", "(", "PATH", ")", "\n", "new_df", "=", "reindex", "(", "df", ",", "bipartite", ")", "\n", "\n", "empty", "=", "np", ".", "zeros", "(", "feat", ".", "shape", "[", "1", "]", ")", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "feat", "=", "np", ".", "vstack", "(", "[", "empty", ",", "feat", "]", ")", "\n", "\n", "max_idx", "=", "max", "(", "new_df", ".", "u", ".", "max", "(", ")", ",", "new_df", ".", "i", ".", "max", "(", ")", ")", "\n", "rand_feat", "=", "np", ".", "zeros", "(", "(", "max_idx", "+", "1", ",", "172", ")", ")", "\n", "\n", "new_df", ".", "to_csv", "(", "OUT_DF", ")", "\n", "np", ".", "save", "(", "OUT_FEAT", ",", "feat", ")", "\n", "np", ".", "save", "(", "OUT_NODE_FEAT", ",", "rand_feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.MergeLayer.__init__": [[7, 15], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["  ", "def", "__init__", "(", "self", ",", "dim1", ",", "dim2", ",", "dim3", ",", "dim4", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "torch", ".", "nn", ".", "Linear", "(", "dim1", "+", "dim2", ",", "dim3", ")", "\n", "self", ".", "fc2", "=", "torch", ".", "nn", ".", "Linear", "(", "dim3", ",", "dim4", ")", "\n", "self", ".", "act", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc1", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc2", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.MergeLayer.forward": [[16, 20], ["torch.cat", "utils.MergeLayer.act", "utils.MergeLayer.fc2", "utils.MergeLayer.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "    ", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "1", ")", "\n", "h", "=", "self", ".", "act", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "return", "self", ".", "fc2", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.MLP.__init__": [[23, 30], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__"], ["  ", "def", "__init__", "(", "self", ",", "dim", ",", "drop", "=", "0.3", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc_1", "=", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "80", ")", "\n", "self", ".", "fc_2", "=", "torch", ".", "nn", ".", "Linear", "(", "80", ",", "10", ")", "\n", "self", ".", "fc_3", "=", "torch", ".", "nn", ".", "Linear", "(", "10", ",", "1", ")", "\n", "self", ".", "act", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "drop", ",", "inplace", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.MLP.forward": [[31, 37], ["utils.MLP.act", "utils.MLP.dropout", "utils.MLP.act", "utils.MLP.dropout", "utils.MLP.fc_3().squeeze", "utils.MLP.fc_1", "utils.MLP.fc_2", "utils.MLP.fc_3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "act", "(", "self", ".", "fc_1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "self", ".", "fc_2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "return", "self", ".", "fc_3", "(", "x", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.EarlyStopMonitor.__init__": [[40, 52], ["range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_round", "=", "3", ",", "higher_better", "=", "True", ",", "tolerance", "=", "1e-10", ",", "outer_max_round", "=", "2", ",", "num_epoch_per_round", "=", "40", ")", ":", "\n", "        ", "self", ".", "max_round", "=", "max_round", "\n", "self", ".", "num_outer_round", "=", "0", "\n", "self", ".", "num_round", "=", "0", "\n", "self", ".", "num_epoch_per_round", "=", "num_epoch_per_round", "\n", "self", ".", "outer_max_round", "=", "outer_max_round", "\n", "self", ".", "epoch_count", "=", "0", "\n", "self", ".", "best_epoch", "=", "[", "0", "for", "i", "in", "range", "(", "outer_max_round", ")", "]", "\n", "\n", "self", ".", "last_best", "=", "[", "None", "for", "i", "in", "range", "(", "outer_max_round", ")", "]", "\n", "self", ".", "higher_better", "=", "higher_better", "\n", "self", ".", "tolerance", "=", "tolerance", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.EarlyStopMonitor.early_stop_check": [[53, 72], ["numpy.abs"], "methods", ["None"], ["", "def", "early_stop_check", "(", "self", ",", "curr_val", ")", ":", "\n", "        ", "if", "not", "self", ".", "higher_better", ":", "\n", "          ", "curr_val", "*=", "-", "1", "\n", "", "if", "self", ".", "last_best", "[", "self", ".", "num_outer_round", "]", "is", "None", ":", "\n", "          ", "self", ".", "last_best", "[", "self", ".", "num_outer_round", "]", "=", "curr_val", "\n", "", "elif", "(", "curr_val", "-", "self", ".", "last_best", "[", "self", ".", "num_outer_round", "]", ")", "/", "np", ".", "abs", "(", "self", ".", "last_best", "[", "self", ".", "num_outer_round", "]", ")", ">", "self", ".", "tolerance", ":", "\n", "          ", "self", ".", "last_best", "[", "self", ".", "num_outer_round", "]", "=", "curr_val", "\n", "self", ".", "num_round", "=", "0", "\n", "self", ".", "best_epoch", "[", "self", ".", "num_outer_round", "]", "=", "self", ".", "epoch_count", "\n", "", "else", ":", "\n", "          ", "self", ".", "num_round", "+=", "1", "\n", "\n", "", "self", ".", "epoch_count", "+=", "1", "\n", "if", "self", ".", "num_round", ">=", "self", ".", "max_round", ":", "#or self.epoch_count % self.num_epoch_per_round == 0:", "\n", "            ", "self", ".", "num_outer_round", "+=", "1", "\n", "self", ".", "num_round", "=", "0", "\n", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.EarlyStopMonitor.final_stop_check": [[73, 75], ["None"], "methods", ["None"], ["", "", "def", "final_stop_check", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_outer_round", ">=", "self", ".", "outer_max_round", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.RandEdgeSampler.__init__": [[78, 86], ["numpy.unique", "numpy.unique", "numpy.random.RandomState"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "src_list", ",", "dst_list", ",", "seed", "=", "None", ")", ":", "\n", "    ", "self", ".", "seed", "=", "None", "\n", "self", ".", "src_list", "=", "np", ".", "unique", "(", "src_list", ")", "\n", "self", ".", "dst_list", "=", "np", ".", "unique", "(", "dst_list", ")", "\n", "\n", "if", "seed", "is", "not", "None", ":", "\n", "      ", "self", ".", "seed", "=", "seed", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.RandEdgeSampler.sample": [[87, 96], ["numpy.random.randint", "numpy.random.randint", "utils.RandEdgeSampler.random_state.randint", "utils.RandEdgeSampler.random_state.randint", "len", "len", "len", "len"], "methods", ["None"], ["", "", "def", "sample", "(", "self", ",", "size", ")", ":", "\n", "    ", "if", "self", ".", "seed", "is", "None", ":", "\n", "      ", "src_index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "src_list", ")", ",", "size", ")", "\n", "dst_index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "dst_list", ")", ",", "size", ")", "\n", "", "else", ":", "\n", "\n", "      ", "src_index", "=", "self", ".", "random_state", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "src_list", ")", ",", "size", ")", "\n", "dst_index", "=", "self", ".", "random_state", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "dst_list", ")", ",", "size", ")", "\n", "", "return", "self", ".", "src_list", "[", "src_index", "]", ",", "self", ".", "dst_list", "[", "dst_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.RandEdgeSampler.reset_random_state": [[97, 99], ["numpy.random.RandomState"], "methods", ["None"], ["", "def", "reset_random_state", "(", "self", ")", ":", "\n", "    ", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.__init__": [[114, 132], ["sorted", "utils.NeighborFinder.node_to_neighbors.append", "utils.NeighborFinder.node_to_edge_idxs.append", "utils.NeighborFinder.node_to_edge_timestamps.append", "numpy.random.RandomState", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "adj_list", ",", "uniform", "=", "False", ",", "seed", "=", "None", ")", ":", "\n", "    ", "self", ".", "node_to_neighbors", "=", "[", "]", "\n", "self", ".", "node_to_edge_idxs", "=", "[", "]", "\n", "self", ".", "node_to_edge_timestamps", "=", "[", "]", "\n", "\n", "for", "neighbors", "in", "adj_list", ":", "\n", "# Neighbors is a list of tuples (neighbor, edge_idx, timestamp)", "\n", "# We sort the list based on timestamp", "\n", "      ", "sorted_neighhbors", "=", "sorted", "(", "neighbors", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ")", "\n", "self", ".", "node_to_neighbors", ".", "append", "(", "np", ".", "array", "(", "[", "x", "[", "0", "]", "for", "x", "in", "sorted_neighhbors", "]", ")", ")", "\n", "self", ".", "node_to_edge_idxs", ".", "append", "(", "np", ".", "array", "(", "[", "x", "[", "1", "]", "for", "x", "in", "sorted_neighhbors", "]", ")", ")", "\n", "self", ".", "node_to_edge_timestamps", ".", "append", "(", "np", ".", "array", "(", "[", "x", "[", "2", "]", "for", "x", "in", "sorted_neighhbors", "]", ")", ")", "\n", "\n", "", "self", ".", "uniform", "=", "uniform", "\n", "\n", "if", "seed", "is", "not", "None", ":", "\n", "      ", "self", ".", "seed", "=", "seed", "\n", "self", ".", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.find_before": [[133, 143], ["numpy.searchsorted"], "methods", ["None"], ["", "", "def", "find_before", "(", "self", ",", "src_idx", ",", "cut_time", ")", ":", "\n", "    ", "\"\"\"\n    Extracts all the interactions happening before cut_time for user src_idx in the overall interaction graph. The returned interactions are sorted by time.\n\n    Returns 3 lists: neighbors, edge_idxs, timestamps\n\n    \"\"\"", "\n", "i", "=", "np", ".", "searchsorted", "(", "self", ".", "node_to_edge_timestamps", "[", "src_idx", "]", ",", "cut_time", ")", "\n", "\n", "return", "self", ".", "node_to_neighbors", "[", "src_idx", "]", "[", ":", "i", "]", ",", "self", ".", "node_to_edge_idxs", "[", "src_idx", "]", "[", ":", "i", "]", ",", "self", ".", "node_to_edge_timestamps", "[", "src_idx", "]", "[", ":", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.get_temporal_neighbor": [[144, 197], ["numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros().astype", "enumerate", "len", "len", "zip", "utils.NeighborFinder.find_before", "numpy.zeros", "numpy.zeros", "numpy.zeros", "len", "numpy.random.randint", "edge_times[].argsort", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.NeighborFinder.find_before"], ["", "def", "get_temporal_neighbor", "(", "self", ",", "source_nodes", ",", "timestamps", ",", "n_neighbors", "=", "20", ")", ":", "\n", "    ", "\"\"\"\n    Given a list of users ids and relative cut times, extracts a sampled temporal neighborhood of each user in the list.\n\n    Params\n    ------\n    src_idx_l: List[int]\n    cut_time_l: List[float],\n    num_neighbors: int\n    \"\"\"", "\n", "assert", "(", "len", "(", "source_nodes", ")", "==", "len", "(", "timestamps", ")", ")", "\n", "\n", "tmp_n_neighbors", "=", "n_neighbors", "if", "n_neighbors", ">", "0", "else", "1", "\n", "# NB! All interactions described in these matrices are sorted in each row by time", "\n", "neighbors", "=", "np", ".", "zeros", "(", "(", "len", "(", "source_nodes", ")", ",", "tmp_n_neighbors", ")", ")", ".", "astype", "(", "\n", "np", ".", "int32", ")", "# each entry in position (i,j) represent the id of the item targeted by user src_idx_l[i] with an interaction happening before cut_time_l[i]", "\n", "edge_times", "=", "np", ".", "zeros", "(", "(", "len", "(", "source_nodes", ")", ",", "tmp_n_neighbors", ")", ")", ".", "astype", "(", "\n", "np", ".", "float32", ")", "# each entry in position (i,j) represent the timestamp of an interaction between user src_idx_l[i] and item neighbors[i,j] happening before cut_time_l[i]", "\n", "edge_idxs", "=", "np", ".", "zeros", "(", "(", "len", "(", "source_nodes", ")", ",", "tmp_n_neighbors", ")", ")", ".", "astype", "(", "\n", "np", ".", "int32", ")", "# each entry in position (i,j) represent the interaction index of an interaction between user src_idx_l[i] and item neighbors[i,j] happening before cut_time_l[i]", "\n", "\n", "for", "i", ",", "(", "source_node", ",", "timestamp", ")", "in", "enumerate", "(", "zip", "(", "source_nodes", ",", "timestamps", ")", ")", ":", "\n", "      ", "source_neighbors", ",", "source_edge_idxs", ",", "source_edge_times", "=", "self", ".", "find_before", "(", "source_node", ",", "\n", "timestamp", ")", "# extracts all neighbors, interactions indexes and timestamps of all interactions of user source_node happening before cut_time", "\n", "\n", "if", "len", "(", "source_neighbors", ")", ">", "0", "and", "n_neighbors", ">", "0", ":", "\n", "        ", "if", "self", ".", "uniform", ":", "# if we are applying uniform sampling, shuffles the data above before sampling", "\n", "          ", "sampled_idx", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "source_neighbors", ")", ",", "n_neighbors", ")", "\n", "\n", "neighbors", "[", "i", ",", ":", "]", "=", "source_neighbors", "[", "sampled_idx", "]", "\n", "edge_times", "[", "i", ",", ":", "]", "=", "source_edge_times", "[", "sampled_idx", "]", "\n", "edge_idxs", "[", "i", ",", ":", "]", "=", "source_edge_idxs", "[", "sampled_idx", "]", "\n", "\n", "# re-sort based on time", "\n", "pos", "=", "edge_times", "[", "i", ",", ":", "]", ".", "argsort", "(", ")", "\n", "neighbors", "[", "i", ",", ":", "]", "=", "neighbors", "[", "i", ",", ":", "]", "[", "pos", "]", "\n", "edge_times", "[", "i", ",", ":", "]", "=", "edge_times", "[", "i", ",", ":", "]", "[", "pos", "]", "\n", "edge_idxs", "[", "i", ",", ":", "]", "=", "edge_idxs", "[", "i", ",", ":", "]", "[", "pos", "]", "\n", "", "else", ":", "\n", "# Take most recent interactions", "\n", "          ", "source_edge_times", "=", "source_edge_times", "[", "-", "n_neighbors", ":", "]", "\n", "source_neighbors", "=", "source_neighbors", "[", "-", "n_neighbors", ":", "]", "\n", "source_edge_idxs", "=", "source_edge_idxs", "[", "-", "n_neighbors", ":", "]", "\n", "\n", "assert", "(", "len", "(", "source_neighbors", ")", "<=", "n_neighbors", ")", "\n", "assert", "(", "len", "(", "source_edge_times", ")", "<=", "n_neighbors", ")", "\n", "assert", "(", "len", "(", "source_edge_idxs", ")", "<=", "n_neighbors", ")", "\n", "\n", "neighbors", "[", "i", ",", "n_neighbors", "-", "len", "(", "source_neighbors", ")", ":", "]", "=", "source_neighbors", "\n", "edge_times", "[", "i", ",", "n_neighbors", "-", "len", "(", "source_edge_times", ")", ":", "]", "=", "source_edge_times", "\n", "edge_idxs", "[", "i", ",", "n_neighbors", "-", "len", "(", "source_edge_idxs", ")", ":", "]", "=", "source_edge_idxs", "\n", "\n", "", "", "", "return", "neighbors", ",", "edge_idxs", ",", "edge_times", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.get_neighbor_finder": [[101, 111], ["zip", "utils.NeighborFinder", "max", "adj_list[].append", "adj_list[].append", "data.sources.max", "data.destinations.max", "range"], "function", ["None"], ["", "", "def", "get_neighbor_finder", "(", "data", ",", "uniform", ",", "max_node_idx", "=", "None", ")", ":", "\n", "  ", "max_node_idx", "=", "max", "(", "data", ".", "sources", ".", "max", "(", ")", ",", "data", ".", "destinations", ".", "max", "(", ")", ")", "if", "max_node_idx", "is", "None", "else", "max_node_idx", "\n", "adj_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "max_node_idx", "+", "1", ")", "]", "\n", "for", "source", ",", "destination", ",", "edge_idx", ",", "timestamp", "in", "zip", "(", "data", ".", "sources", ",", "data", ".", "destinations", ",", "\n", "data", ".", "edge_idxs", ",", "\n", "data", ".", "timestamps", ")", ":", "\n", "    ", "adj_list", "[", "source", "]", ".", "append", "(", "(", "destination", ",", "edge_idx", ",", "timestamp", ")", ")", "\n", "adj_list", "[", "destination", "]", ".", "append", "(", "(", "source", ",", "edge_idx", ",", "timestamp", ")", ")", "\n", "\n", "", "return", "NeighborFinder", "(", "adj_list", ",", "uniform", "=", "uniform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.get_sampler": [[198, 209], ["utils.data_processing.get_data", "utils.RandEdgeSampler", "utils.RandEdgeSampler", "utils.RandEdgeSampler", "utils.RandEdgeSampler"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.data_processing.get_data"], ["", "", "def", "get_sampler", "(", "data_name", "=", "'wikipedia'", ")", ":", "\n", "    ", "_", ",", "_", ",", "full_data", ",", "train_data", ",", "val_data", ",", "test_data", ",", "new_node_val_data", ",", "new_node_test_data", "=", "get_data", "(", "data_name", ")", "\n", "train_rand_sampler", "=", "RandEdgeSampler", "(", "train_data", ".", "sources", ",", "train_data", ".", "destinations", ",", "seed", "=", "11", ")", "\n", "val_rand_sampler", "=", "RandEdgeSampler", "(", "full_data", ".", "sources", ",", "full_data", ".", "destinations", ",", "seed", "=", "0", ")", "\n", "\n", "test_rand_sampler", "=", "RandEdgeSampler", "(", "full_data", ".", "sources", ",", "full_data", ".", "destinations", ",", "seed", "=", "2", ")", "\n", "nn_test_rand_sampler", "=", "RandEdgeSampler", "(", "new_node_test_data", ".", "sources", ",", "\n", "new_node_test_data", ".", "destinations", ",", "\n", "seed", "=", "3", ")", "\n", "return", "train_rand_sampler", ",", "val_rand_sampler", ",", "test_rand_sampler", ",", "nn_test_rand_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.get_sampler_newdata": [[210, 227], ["utils.data_processing.get_data", "utils.RandEdgeSampler", "utils.RandEdgeSampler", "utils.RandEdgeSampler", "utils.RandEdgeSampler", "torch_geometric.data.TemporalData", "torch_geometric.data.TemporalData", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.data_processing.get_data"], ["", "def", "get_sampler_newdata", "(", "data_name", "=", "'wikipedia'", ")", ":", "\n", "    ", "node_features", ",", "edge_features", ",", "full_data", ",", "train_data", ",", "val_data", ",", "test_data", ",", "new_node_val_data", ",", "new_node_test_data", "=", "get_data", "(", "data_name", ")", "\n", "train_rand_sampler", "=", "RandEdgeSampler", "(", "train_data", ".", "sources", ",", "train_data", ".", "destinations", ",", "seed", "=", "11", ")", "\n", "val_rand_sampler", "=", "RandEdgeSampler", "(", "full_data", ".", "sources", ",", "full_data", ".", "destinations", ",", "seed", "=", "0", ")", "\n", "\n", "test_rand_sampler", "=", "RandEdgeSampler", "(", "full_data", ".", "sources", ",", "full_data", ".", "destinations", ",", "seed", "=", "2", ")", "\n", "nn_test_rand_sampler", "=", "RandEdgeSampler", "(", "new_node_test_data", ".", "sources", ",", "\n", "new_node_test_data", ".", "destinations", ",", "\n", "seed", "=", "3", ")", "\n", "new_val_data", "=", "TemporalData", "(", "src", "=", "torch", ".", "tensor", "(", "new_node_val_data", ".", "sources", ")", "-", "1", ",", "dst", "=", "torch", ".", "tensor", "(", "new_node_val_data", ".", "destinations", ")", "-", "1", ",", "\n", "t", "=", "torch", ".", "tensor", "(", "new_node_val_data", ".", "timestamps", ",", "dtype", "=", "torch", ".", "long", ")", ",", "msg", "=", "torch", ".", "tensor", "(", "edge_features", "[", "new_node_val_data", ".", "edge_idxs", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "y", "=", "torch", ".", "tensor", "(", "new_node_val_data", ".", "labels", ")", ")", "\n", "\n", "new_test_data", "=", "TemporalData", "(", "src", "=", "torch", ".", "tensor", "(", "new_node_test_data", ".", "sources", ")", "-", "1", ",", "dst", "=", "torch", ".", "tensor", "(", "new_node_test_data", ".", "destinations", ")", "-", "1", ",", "\n", "t", "=", "torch", ".", "tensor", "(", "new_node_test_data", ".", "timestamps", ",", "dtype", "=", "torch", ".", "long", ")", ",", "msg", "=", "torch", ".", "tensor", "(", "edge_features", "[", "new_node_test_data", ".", "edge_idxs", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "y", "=", "torch", ".", "tensor", "(", "new_node_test_data", ".", "labels", ")", ")", "\n", "\n", "return", "train_rand_sampler", ",", "val_rand_sampler", ",", "test_rand_sampler", ",", "nn_test_rand_sampler", ",", "new_val_data", ",", "new_test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.utils.get_sampler_4inductive": [[228, 257], ["utils.data_processing.get_data", "utils.RandEdgeSampler", "utils.RandEdgeSampler", "utils.RandEdgeSampler", "utils.RandEdgeSampler", "utils.RandEdgeSampler", "torch_geometric.data.TemporalData", "torch_geometric.data.TemporalData", "torch_geometric.data.TemporalData", "torch_geometric.data.TemporalData", "torch_geometric.data.TemporalData", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_swinit.utils.data_processing.get_data"], ["", "def", "get_sampler_4inductive", "(", "data_name", "=", "'wikipedia'", ")", ":", "\n", "    ", "node_features", ",", "edge_features", ",", "full_data", ",", "train_data", ",", "val_data", ",", "test_data", ",", "new_node_val_data", ",", "new_node_test_data", "=", "get_data", "(", "data_name", ")", "\n", "train_rand_sampler", "=", "RandEdgeSampler", "(", "train_data", ".", "sources", ",", "train_data", ".", "destinations", ",", "seed", "=", "11", ")", "\n", "val_rand_sampler", "=", "RandEdgeSampler", "(", "full_data", ".", "sources", ",", "full_data", ".", "destinations", ",", "seed", "=", "0", ")", "\n", "nn_val_rand_sampler", "=", "RandEdgeSampler", "(", "new_node_val_data", ".", "sources", ",", "new_node_val_data", ".", "destinations", ",", "\n", "seed", "=", "1", ")", "\n", "\n", "test_rand_sampler", "=", "RandEdgeSampler", "(", "full_data", ".", "sources", ",", "full_data", ".", "destinations", ",", "seed", "=", "2", ")", "\n", "nn_test_rand_sampler", "=", "RandEdgeSampler", "(", "new_node_test_data", ".", "sources", ",", "\n", "new_node_test_data", ".", "destinations", ",", "\n", "seed", "=", "3", ")", "\n", "train_data_1", "=", "TemporalData", "(", "src", "=", "torch", ".", "tensor", "(", "train_data", ".", "sources", ")", "-", "1", ",", "dst", "=", "torch", ".", "tensor", "(", "train_data", ".", "destinations", ")", "-", "1", ",", "\n", "t", "=", "torch", ".", "tensor", "(", "train_data", ".", "timestamps", ",", "dtype", "=", "torch", ".", "long", ")", ",", "msg", "=", "torch", ".", "tensor", "(", "edge_features", "[", "train_data", ".", "edge_idxs", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "y", "=", "torch", ".", "tensor", "(", "train_data", ".", "labels", ")", ")", "\n", "\n", "val_data_1", "=", "TemporalData", "(", "src", "=", "torch", ".", "tensor", "(", "val_data", ".", "sources", ")", "-", "1", ",", "dst", "=", "torch", ".", "tensor", "(", "val_data", ".", "destinations", ")", "-", "1", ",", "\n", "t", "=", "torch", ".", "tensor", "(", "val_data", ".", "timestamps", ",", "dtype", "=", "torch", ".", "long", ")", ",", "msg", "=", "torch", ".", "tensor", "(", "edge_features", "[", "val_data", ".", "edge_idxs", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "y", "=", "torch", ".", "tensor", "(", "val_data", ".", "labels", ")", ")", "\n", "\n", "test_data_1", "=", "TemporalData", "(", "src", "=", "torch", ".", "tensor", "(", "test_data", ".", "sources", ")", "-", "1", ",", "dst", "=", "torch", ".", "tensor", "(", "test_data", ".", "destinations", ")", "-", "1", ",", "\n", "t", "=", "torch", ".", "tensor", "(", "test_data", ".", "timestamps", ",", "dtype", "=", "torch", ".", "long", ")", ",", "msg", "=", "torch", ".", "tensor", "(", "edge_features", "[", "test_data", ".", "edge_idxs", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "y", "=", "torch", ".", "tensor", "(", "test_data", ".", "labels", ")", ")", "\n", "\n", "\n", "new_val_data", "=", "TemporalData", "(", "src", "=", "torch", ".", "tensor", "(", "new_node_val_data", ".", "sources", ")", "-", "1", ",", "dst", "=", "torch", ".", "tensor", "(", "new_node_val_data", ".", "destinations", ")", "-", "1", ",", "\n", "t", "=", "torch", ".", "tensor", "(", "new_node_val_data", ".", "timestamps", ",", "dtype", "=", "torch", ".", "long", ")", ",", "msg", "=", "torch", ".", "tensor", "(", "edge_features", "[", "new_node_val_data", ".", "edge_idxs", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "y", "=", "torch", ".", "tensor", "(", "new_node_val_data", ".", "labels", ")", ")", "\n", "\n", "new_test_data", "=", "TemporalData", "(", "src", "=", "torch", ".", "tensor", "(", "new_node_test_data", ".", "sources", ")", "-", "1", ",", "dst", "=", "torch", ".", "tensor", "(", "new_node_test_data", ".", "destinations", ")", "-", "1", ",", "\n", "t", "=", "torch", ".", "tensor", "(", "new_node_test_data", ".", "timestamps", ",", "dtype", "=", "torch", ".", "long", ")", ",", "msg", "=", "torch", ".", "tensor", "(", "edge_features", "[", "new_node_test_data", ".", "edge_idxs", "]", ",", "dtype", "=", "torch", ".", "float", ")", ",", "y", "=", "torch", ".", "tensor", "(", "new_node_test_data", ".", "labels", ")", ")", "\n", "\n", "return", "train_rand_sampler", ",", "val_rand_sampler", ",", "test_rand_sampler", ",", "nn_val_rand_sampler", ",", "nn_test_rand_sampler", ",", "train_data_1", ",", "val_data_1", ",", "test_data_1", ",", "new_val_data", ",", "new_test_data", "", "", ""]]}