{"home.repos.pwc.inspect_result.facebookresearch_gala.None.main.actor_learner": [[25, 160], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.set_device", "torch.cuda.set_device", "make_vec_envs", "gala.model.Policy", "gala.model.Policy.to", "gala.gala_a2c.GALA_A2C", "gala.storage.RolloutStorage", "make_vec_envs.reset", "gala.storage.RolloutStorage.obs[].copy_", "gala.storage.RolloutStorage.to", "collections.deque", "barrier.wait", "print", "time.time", "range", "torch.cuda.is_available", "torch.cuda.is_available", "int", "int", "range", "gala.storage.RolloutStorage.compute_returns", "gala.gala_a2c.GALA_A2C.update", "gala.storage.RolloutStorage.after_update", "utils.update_linear_schedule", "make_vec_envs.step", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "gala.storage.RolloutStorage.insert", "torch.no_grad", "torch.no_grad", "gala.model.Policy.get_value().detach", "torch.save", "torch.save", "time.time", "print", "torch.no_grad", "torch.no_grad", "gala.model.Policy.act", "os.path.join", "len", "info.keys", "collections.deque.append", "gala.model.Policy.get_value", "getattr", "int", "len", "numpy.mean", "numpy.median", "numpy.min", "numpy.max", "utils.get_vec_normalize", "info.keys"], "function", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.make_vec_envs", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.compute_returns", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.gala_a2c.GALA_A2C.update", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.after_update", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.update_linear_schedule", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.TimeLimitMask.step", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.insert", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.Policy.act", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.Policy.get_value", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.get_vec_normalize"], ["def", "actor_learner", "(", "args", ",", "rank", ",", "barrier", ",", "device", ",", "gossip_buffer", ")", ":", "\n", "    ", "\"\"\" Single Actor-Learner Process \"\"\"", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "if", "args", ".", "cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda_deterministic", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "# (Hack) Import here to ensure OpenAI-gym envs only run on the CPUs", "\n", "# corresponding to the processes' affinity", "\n", "", "from", "gala", "import", "utils", "\n", "from", "gala", ".", "envs", "import", "make_vec_envs", "\n", "# Make envs", "\n", "envs", "=", "make_vec_envs", "(", "args", ".", "env_name", ",", "args", ".", "seed", ",", "args", ".", "num_procs_per_learner", ",", "\n", "args", ".", "gamma", ",", "args", ".", "log_dir", ",", "device", ",", "False", ",", "\n", "rank", "=", "rank", ")", "\n", "\n", "# Initialize actor_critic", "\n", "actor_critic", "=", "Policy", "(", "\n", "envs", ".", "observation_space", ".", "shape", ",", "\n", "envs", ".", "action_space", ",", "\n", "base_kwargs", "=", "{", "'recurrent'", ":", "args", ".", "recurrent_policy", "}", ")", "\n", "actor_critic", ".", "to", "(", "device", ")", "\n", "\n", "# Initialize agent", "\n", "agent", "=", "GALA_A2C", "(", "\n", "actor_critic", ",", "\n", "args", ".", "value_loss_coef", ",", "\n", "args", ".", "entropy_coef", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "eps", "=", "args", ".", "eps", ",", "\n", "alpha", "=", "args", ".", "alpha", ",", "\n", "max_grad_norm", "=", "args", ".", "max_grad_norm", ",", "\n", "rank", "=", "rank", ",", "\n", "gossip_buffer", "=", "gossip_buffer", "\n", ")", "\n", "\n", "rollouts", "=", "RolloutStorage", "(", "args", ".", "num_steps_per_update", ",", "\n", "args", ".", "num_procs_per_learner", ",", "\n", "envs", ".", "observation_space", ".", "shape", ",", "envs", ".", "action_space", ",", "\n", "actor_critic", ".", "recurrent_hidden_state_size", ")", "\n", "obs", "=", "envs", ".", "reset", "(", ")", "\n", "rollouts", ".", "obs", "[", "0", "]", ".", "copy_", "(", "obs", ")", "\n", "rollouts", ".", "to", "(", "device", ")", "\n", "\n", "episode_rewards", "=", "deque", "(", "maxlen", "=", "10", ")", "\n", "\n", "# Synchronize agents before starting training", "\n", "barrier", ".", "wait", "(", ")", "\n", "print", "(", "'%s: barrier passed'", "%", "rank", ")", "\n", "\n", "# Start training", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "num_updates", "=", "int", "(", "args", ".", "num_env_steps", ")", "//", "(", "\n", "args", ".", "num_steps_per_update", "\n", "*", "args", ".", "num_procs_per_learner", "\n", "*", "args", ".", "num_learners", ")", "\n", "save_interval", "=", "int", "(", "args", ".", "save_interval", ")", "//", "(", "\n", "args", ".", "num_steps_per_update", "\n", "*", "args", ".", "num_procs_per_learner", "\n", "*", "args", ".", "num_learners", ")", "\n", "\n", "for", "j", "in", "range", "(", "num_updates", ")", ":", "\n", "\n", "# Decrease learning rate linearly", "\n", "        ", "if", "args", ".", "use_linear_lr_decay", ":", "\n", "            ", "utils", ".", "update_linear_schedule", "(", "\n", "agent", ".", "optimizer", ",", "j", ",", "num_updates", ",", "args", ".", "lr", ")", "\n", "# --/", "\n", "\n", "# Step through environment", "\n", "# --", "\n", "", "for", "step", "in", "range", "(", "args", ".", "num_steps_per_update", ")", ":", "\n", "# Sample actions", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "value", ",", "action", ",", "action_log_prob", ",", "recurrent_hidden_states", "=", "actor_critic", ".", "act", "(", "\n", "rollouts", ".", "obs", "[", "step", "]", ",", "rollouts", ".", "recurrent_hidden_states", "[", "step", "]", ",", "\n", "rollouts", ".", "masks", "[", "step", "]", ")", "\n", "# Obser reward and next obs", "\n", "", "obs", ",", "reward", ",", "done", ",", "infos", "=", "envs", ".", "step", "(", "action", ")", "\n", "for", "info", "in", "infos", ":", "\n", "                ", "if", "'episode'", "in", "info", ".", "keys", "(", ")", ":", "\n", "                    ", "episode_rewards", ".", "append", "(", "info", "[", "'episode'", "]", "[", "'r'", "]", ")", "\n", "# If done then clean the history of observations.", "\n", "", "", "masks", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "[", "0.0", "]", "if", "done_", "else", "[", "1.0", "]", "for", "done_", "in", "done", "]", ")", "\n", "bad_masks", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "[", "0.0", "]", "if", "'bad_transition'", "in", "info", ".", "keys", "(", ")", "else", "[", "1.0", "]", "\n", "for", "info", "in", "infos", "]", ")", "\n", "rollouts", ".", "insert", "(", "obs", ",", "recurrent_hidden_states", ",", "action", ",", "\n", "action_log_prob", ",", "value", ",", "reward", ",", "masks", ",", "bad_masks", ")", "\n", "# --/", "\n", "\n", "# Update parameters", "\n", "# --", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "next_value", "=", "actor_critic", ".", "get_value", "(", "\n", "rollouts", ".", "obs", "[", "-", "1", "]", ",", "rollouts", ".", "recurrent_hidden_states", "[", "-", "1", "]", ",", "\n", "rollouts", ".", "masks", "[", "-", "1", "]", ")", ".", "detach", "(", ")", "\n", "", "rollouts", ".", "compute_returns", "(", "next_value", ",", "args", ".", "use_gae", ",", "args", ".", "gamma", ",", "\n", "args", ".", "gae_lambda", ",", "args", ".", "use_proper_time_limits", ")", "\n", "value_loss", ",", "action_loss", ",", "dist_entropy", "=", "agent", ".", "update", "(", "rollouts", ")", "\n", "rollouts", ".", "after_update", "(", ")", "\n", "# --/", "\n", "\n", "# Save every \"save_interval\" local environment steps (or last update)", "\n", "if", "(", "j", "%", "save_interval", "==", "0", "\n", "or", "j", "==", "num_updates", "-", "1", ")", "and", "args", ".", "save_dir", "!=", "''", ":", "\n", "            ", "torch", ".", "save", "(", "[", "\n", "actor_critic", ",", "\n", "getattr", "(", "utils", ".", "get_vec_normalize", "(", "envs", ")", ",", "'ob_rms'", ",", "None", ")", "\n", "]", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\n", "'%s.%.3d.pt'", "%", "(", "rank", ",", "j", "//", "save_interval", ")", ")", ")", "\n", "# --/", "\n", "\n", "# Log every \"log_interval\" local environment steps", "\n", "", "if", "j", "%", "args", ".", "log_interval", "==", "0", "and", "len", "(", "episode_rewards", ")", ">", "1", ":", "\n", "            ", "num_steps", "=", "(", "j", "+", "1", ")", "*", "args", ".", "num_procs_per_learner", "*", "args", ".", "num_steps_per_update", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "(", "'{}: Updates {}, num timesteps {}, FPS {} '", "+", "\n", "'\\n {}: Last {} training episodes: '", "+", "\n", "'mean/median reward {:.1f}/{:.1f}, '", "+", "\n", "'min/max reward {:.1f}/{:.1f}\\n'", ")", ".", "\n", "format", "(", "rank", ",", "j", ",", "num_steps", ",", "\n", "int", "(", "num_steps", "/", "(", "end", "-", "start", ")", ")", ",", "rank", ",", "\n", "len", "(", "episode_rewards", ")", ",", "\n", "np", ".", "mean", "(", "episode_rewards", ")", ",", "\n", "np", ".", "median", "(", "episode_rewards", ")", ",", "\n", "np", ".", "min", "(", "episode_rewards", ")", ",", "\n", "np", ".", "max", "(", "episode_rewards", ")", ",", "\n", "dist_entropy", ",", "value_loss", ",", "action_loss", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.None.main.make_gossip_buffer": [[164, 206], ["range", "gala.model.Policy", "gala.model.Policy.to", "mng.list", "mng.list", "mng.list", "mng.list", "gala.gpu_gossip_buffer.GossipBuffer", "gala.graph_manager.FullyConnectedGraph", "topology.append", "mng.Lock", "mng.list", "mng.list", "range", "range", "range", "range", "mng.Event", "mng.Event", "range", "range"], "function", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to"], ["", "", "", "def", "make_gossip_buffer", "(", "args", ",", "mng", ",", "device", ")", ":", "\n", "\n", "# Make local-gossip-buffer", "\n", "    ", "if", "args", ".", "num_learners", ">", "1", ":", "\n", "# Make Topology", "\n", "        ", "topology", "=", "[", "]", "\n", "for", "rank", "in", "range", "(", "args", ".", "num_learners", ")", ":", "\n", "            ", "graph", "=", "Graph", "(", "rank", ",", "args", ".", "num_learners", ",", "\n", "peers_per_itr", "=", "args", ".", "num_peers", ")", "\n", "topology", ".", "append", "(", "graph", ")", "\n", "\n", "# Initialize \"actor_critic-shaped\" parameter-buffer", "\n", "", "actor_critic", "=", "Policy", "(", "\n", "(", "4", ",", "84", ",", "84", ")", ",", "\n", "base_kwargs", "=", "{", "'recurrent'", ":", "args", ".", "recurrent_policy", "}", ",", "\n", "env_name", "=", "args", ".", "env_name", ")", "\n", "actor_critic", ".", "to", "(", "device", ")", "\n", "\n", "# Keep track of local iterations since learner's last sync", "\n", "sync_list", "=", "mng", ".", "list", "(", "[", "0", "for", "_", "in", "range", "(", "args", ".", "num_learners", ")", "]", ")", "\n", "# Used to ensure proc-safe access to agents' message-buffers", "\n", "buffer_locks", "=", "mng", ".", "list", "(", "[", "mng", ".", "Lock", "(", ")", "for", "_", "in", "range", "(", "args", ".", "num_learners", ")", "]", ")", "\n", "# Used to signal between processes that message was read", "\n", "read_events", "=", "mng", ".", "list", "(", "[", "\n", "mng", ".", "list", "(", "[", "mng", ".", "Event", "(", ")", "for", "_", "in", "range", "(", "args", ".", "num_learners", ")", "]", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "num_learners", ")", "]", ")", "\n", "# Used to signal between processes that message was written", "\n", "write_events", "=", "mng", ".", "list", "(", "[", "\n", "mng", ".", "list", "(", "[", "mng", ".", "Event", "(", ")", "for", "_", "in", "range", "(", "args", ".", "num_learners", ")", "]", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "num_learners", ")", "]", ")", "\n", "\n", "# Need to maintain a reference to all objects in main processes", "\n", "_references", "=", "[", "topology", ",", "actor_critic", ",", "buffer_locks", ",", "\n", "read_events", ",", "write_events", ",", "sync_list", "]", "\n", "gossip_buffer", "=", "GossipBuffer", "(", "topology", ",", "actor_critic", ",", "buffer_locks", ",", "\n", "read_events", ",", "write_events", ",", "sync_list", ",", "\n", "sync_freq", "=", "args", ".", "sync_freq", ")", "\n", "", "else", ":", "\n", "        ", "_references", "=", "None", "\n", "gossip_buffer", "=", "None", "\n", "\n", "", "return", "gossip_buffer", ",", "_references", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.None.main.train": [[208, 243], ["pprint.pprint", "torch.Manager", "mp.Manager.Barrier", "torch.device", "torch.device", "main.make_gossip_buffer", "range", "torch.Process", "mp.Process.start", "proc_list.append", "mp.Process.join"], "function", ["home.repos.pwc.inspect_result.facebookresearch_gala.None.main.make_gossip_buffer"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "pp", ".", "pprint", "(", "args", ")", "\n", "\n", "proc_manager", "=", "mp", ".", "Manager", "(", ")", "\n", "barrier", "=", "proc_manager", ".", "Barrier", "(", "args", ".", "num_learners", ")", "\n", "\n", "# Shared-gossip-buffer on GPU-0", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%s'", "%", "0", "if", "args", ".", "cuda", "else", "'cpu'", ")", "\n", "shared_gossip_buffer", ",", "_references", "=", "make_gossip_buffer", "(", "\n", "args", ",", "proc_manager", ",", "device", ")", "\n", "\n", "# Make actor-learner processes", "\n", "proc_list", "=", "[", "]", "\n", "for", "rank", "in", "range", "(", "args", ".", "num_learners", ")", ":", "\n", "\n", "# Uncomment these lines to use 2 GPUs", "\n", "# gpu_id = int(rank % 2)  # Even-rank agents on gpu-0, odd-rank on gpu-1", "\n", "# device = torch.device('cuda:%s' % gpu_id if args.cuda else 'cpu')", "\n", "        ", "proc", "=", "mp", ".", "Process", "(", "\n", "target", "=", "actor_learner", ",", "\n", "args", "=", "(", "args", ",", "rank", ",", "barrier", ",", "device", ",", "shared_gossip_buffer", ")", ",", "\n", "daemon", "=", "False", "\n", ")", "\n", "proc", ".", "start", "(", ")", "\n", "proc_list", ".", "append", "(", "proc", ")", "\n", "\n", "# # Bind agents to specific hardware-threads (generally not necessary)", "\n", "# avail = list(os.sched_getaffinity(proc.pid))  # available-hwthrds", "\n", "# cpal = math.ceil(len(avail) / args.num_learners)  # cores-per-proc", "\n", "# mask = [avail[(rank * cpal + i) % len(avail)] for i in range(cpal)]", "\n", "# print('process-mask:', mask)", "\n", "# os.sched_setaffinity(proc.pid, mask)", "\n", "\n", "", "for", "proc", "in", "proc_list", ":", "\n", "        ", "proc", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager.__init__": [[20, 27], ["graph_manager.GraphManager._make_graph", "int", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph._make_graph"], ["    ", "def", "__init__", "(", "self", ",", "rank", ",", "world_size", ",", "peers_per_itr", "=", "1", ")", ":", "\n", "        ", "assert", "int", "(", "peers_per_itr", ")", ">=", "1", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "phone_book", "=", "self", ".", "_make_graph", "(", ")", "\n", "self", ".", "_peers_per_itr", "=", "peers_per_itr", "\n", "self", ".", "_group_indices", "=", "[", "i", "for", "i", "in", "range", "(", "peers_per_itr", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager.peers_per_itr": [[32, 37], ["range"], "methods", ["None"], ["", "@", "peers_per_itr", ".", "setter", "\n", "def", "peers_per_itr", "(", "self", ",", "v", ")", ":", "\n", "        ", "self", ".", "_peers_per_itr", "=", "v", "\n", "# set group-indices attr. --- point to out-peers in phone-book", "\n", "self", ".", "_group_indices", "=", "[", "i", "for", "i", "in", "range", "(", "v", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._make_graph": [[38, 45], ["None"], "methods", ["None"], ["", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns a nested list of peers; the outer-list is indexed by rank,\n        the inner list denotes the set of peers that 'rank' can send\n        messages to at any point in time\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager.is_regular_graph": [[46, 49], ["None"], "methods", ["None"], ["", "def", "is_regular_graph", "(", "self", ")", ":", "\n", "        ", "\"\"\" Whether each node has the same number of in-peers as out-peers \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager.is_bipartite_graph": [[50, 53], ["None"], "methods", ["None"], ["", "def", "is_bipartite_graph", "(", "self", ")", ":", "\n", "        ", "\"\"\" Whether graph is bipartite or not \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager.is_passive": [[54, 57], ["None"], "methods", ["None"], ["", "def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "\n", "        ", "\"\"\" Whether 'rank' is a passive node or not \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager.is_dynamic_graph": [[58, 61], ["None"], "methods", ["None"], ["", "def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "\n", "        ", "\"\"\" Whether the graph-type is dynamic (as opposed to static) \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager.get_peers": [[62, 78], ["graph_manager.GraphManager._rotate_group_indices", "out_peers.append", "enumerate", "in_peers.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_group_indices"], ["", "def", "get_peers", "(", "self", ",", "rotate", "=", "False", ")", ":", "\n", "        ", "\"\"\" Returns the out and in-peers corresponding to 'self.rank' \"\"\"", "\n", "# cycle through in- and out-peers by updating group-index", "\n", "if", "rotate", ":", "\n", "            ", "self", ".", "_rotate_group_indices", "(", ")", "\n", "\n", "# get out- and in-peers using new group-indices", "\n", "", "out_peers", ",", "in_peers", "=", "[", "]", ",", "[", "]", "\n", "for", "group_index", "in", "self", ".", "_group_indices", ":", "\n", "            ", "out_peers", ".", "append", "(", "self", ".", "phone_book", "[", "self", ".", "rank", "]", "[", "group_index", "]", ")", "\n", "for", "rank", ",", "peers", "in", "enumerate", "(", "self", ".", "phone_book", ")", ":", "\n", "                ", "if", "rank", "==", "self", ".", "rank", ":", "\n", "                    ", "continue", "\n", "", "if", "self", ".", "rank", "==", "peers", "[", "group_index", "]", ":", "\n", "                    ", "in_peers", ".", "append", "(", "rank", ")", "\n", "", "", "", "return", "out_peers", ",", "in_peers", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_group_indices": [[79, 85], ["enumerate", "int", "len"], "methods", ["None"], ["", "def", "_rotate_group_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\" Incerement group indices to point to the next out-peer \"\"\"", "\n", "increment", "=", "self", ".", "peers_per_itr", "\n", "for", "i", ",", "group_index", "in", "enumerate", "(", "self", ".", "_group_indices", ")", ":", "\n", "            ", "self", ".", "_group_indices", "[", "i", "]", "=", "int", "(", "(", "group_index", "+", "increment", ")", "\n", "%", "len", "(", "self", ".", "phone_book", "[", "self", ".", "rank", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_forward": [[86, 89], ["None"], "methods", ["None"], ["", "", "def", "_rotate_forward", "(", "self", ",", "r", ",", "p", ")", ":", "\n", "        ", "\"\"\" Helper function returns peer that is p hops ahead of r \"\"\"", "\n", "return", "(", "r", "+", "p", ")", "%", "self", ".", "world_size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_backward": [[90, 98], ["range"], "methods", ["None"], ["", "def", "_rotate_backward", "(", "self", ",", "r", ",", "p", ")", ":", "\n", "        ", "\"\"\" Helper function returns peer that is p hops behind r \"\"\"", "\n", "temp", "=", "r", "\n", "for", "_", "in", "range", "(", "p", ")", ":", "\n", "            ", "temp", "-=", "1", "\n", "if", "temp", "<", "0", ":", "\n", "                ", "temp", "=", "self", ".", "world_size", "-", "1", "\n", "", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicDirectedExponentialGraph._make_graph": [[102, 114], ["range", "range", "range", "graph_manager.DynamicDirectedExponentialGraph._rotate_forward", "graph_manager.DynamicDirectedExponentialGraph._rotate_backward", "int", "group.append", "group.append", "math.log"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_backward"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "phone_book", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "world_size", ")", "]", "\n", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "group", "=", "phone_book", "[", "rank", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "int", "(", "mlog", "(", "self", ".", "world_size", "-", "1", ",", "2", ")", ")", "+", "1", ")", ":", "\n", "                ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "2", "**", "i", ")", "\n", "if", "f_peer", "not", "in", "group", ":", "\n", "                    ", "group", ".", "append", "(", "f_peer", ")", "\n", "", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "2", "**", "i", ")", "\n", "if", "b_peer", "not", "in", "group", ":", "\n", "                    ", "group", ".", "append", "(", "b_peer", ")", "\n", "", "", "", "return", "phone_book", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicDirectedExponentialGraph.is_regular_graph": [[115, 116], ["None"], "methods", ["None"], ["", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicDirectedExponentialGraph.is_bipartite_graph": [[117, 118], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicDirectedExponentialGraph.is_passive": [[119, 120], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicDirectedExponentialGraph.is_dynamic_graph": [[121, 122], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicBipartiteExponentialGraph._make_graph": [[126, 152], ["range", "range", "range", "int", "graph_manager.DynamicBipartiteExponentialGraph._rotate_forward", "graph_manager.DynamicBipartiteExponentialGraph._rotate_backward", "graph_manager.DynamicBipartiteExponentialGraph._rotate_forward", "graph_manager.DynamicBipartiteExponentialGraph._rotate_backward", "math.log", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "group.append", "group.append", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "group.append", "group.append", "graph_manager.DynamicBipartiteExponentialGraph.is_passive", "graph_manager.DynamicBipartiteExponentialGraph.is_passive"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "phone_book", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "world_size", ")", "]", "\n", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "group", "=", "phone_book", "[", "rank", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "int", "(", "mlog", "(", "self", ".", "world_size", "-", "1", ",", "2", ")", ")", "+", "1", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "1", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "1", "+", "2", "**", "i", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "1", "+", "2", "**", "i", ")", "\n", "# create directory for non-passive peers", "\n", "", "if", "not", "self", ".", "is_passive", "(", "rank", ")", "and", "(", "\n", "self", ".", "is_passive", "(", "f_peer", ")", "and", "self", ".", "is_passive", "(", "b_peer", ")", ")", ":", "\n", "                    ", "if", "f_peer", "not", "in", "group", ":", "\n", "                        ", "group", ".", "append", "(", "f_peer", ")", "# forward peer...", "\n", "", "if", "b_peer", "not", "in", "group", ":", "\n", "                        ", "group", ".", "append", "(", "b_peer", ")", "# then backward peer", "\n", "# create directory for passive peers", "\n", "", "", "elif", "self", ".", "is_passive", "(", "rank", ")", "and", "(", "\n", "not", "(", "self", ".", "is_passive", "(", "f_peer", ")", "or", "self", ".", "is_passive", "(", "b_peer", ")", ")", ")", ":", "\n", "                    ", "if", "b_peer", "not", "in", "group", ":", "\n", "                        ", "group", ".", "append", "(", "b_peer", ")", "# backward peer...", "\n", "", "if", "f_peer", "not", "in", "group", ":", "\n", "                        ", "group", ".", "append", "(", "f_peer", ")", "# then forward peer", "\n", "", "", "", "", "return", "phone_book", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicBipartiteExponentialGraph.is_regular_graph": [[153, 154], ["None"], "methods", ["None"], ["", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicBipartiteExponentialGraph.is_bipartite_graph": [[155, 156], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicBipartiteExponentialGraph.is_passive": [[157, 160], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "\n", "        ", "rank", "=", "self", ".", "rank", "if", "rank", "is", "None", "else", "rank", "\n", "return", "(", "rank", "%", "2", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicBipartiteExponentialGraph.is_dynamic_graph": [[161, 162], ["None"], "methods", ["None"], ["", "def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicDirectedLinearGraph._make_graph": [[166, 180], ["range", "range", "range", "graph_manager.DynamicDirectedLinearGraph._rotate_forward", "graph_manager.DynamicDirectedLinearGraph._rotate_backward", "group.append", "group.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_backward"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "phone_book", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "world_size", ")", "]", "\n", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "group", "=", "phone_book", "[", "rank", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "world_size", ")", ":", "\n", "                ", "if", "i", "%", "2", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "i", ")", "\n", "if", "f_peer", "not", "in", "group", ":", "\n", "                    ", "group", ".", "append", "(", "f_peer", ")", "\n", "", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "i", ")", "\n", "if", "b_peer", "not", "in", "group", ":", "\n", "                    ", "group", ".", "append", "(", "b_peer", ")", "\n", "", "", "", "return", "phone_book", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicDirectedLinearGraph.is_regular_graph": [[181, 182], ["None"], "methods", ["None"], ["", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicDirectedLinearGraph.is_bipartite_graph": [[183, 184], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicDirectedLinearGraph.is_passive": [[185, 186], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicDirectedLinearGraph.is_dynamic_graph": [[187, 188], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicBipartiteLinearGraph._make_graph": [[192, 214], ["range", "range", "range", "graph_manager.DynamicBipartiteLinearGraph._rotate_forward", "graph_manager.DynamicBipartiteLinearGraph._rotate_backward", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "group.append", "group.append", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "group.append", "group.append", "graph_manager.DynamicBipartiteLinearGraph.is_passive", "graph_manager.DynamicBipartiteLinearGraph.is_passive"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_forward", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_backward", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "phone_book", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "world_size", ")", "]", "\n", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "group", "=", "phone_book", "[", "rank", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "world_size", ")", ":", "\n", "                ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "i", ")", "\n", "b_peer", "=", "self", ".", "_rotate_backward", "(", "rank", ",", "i", ")", "\n", "# create directory for non-passive peers", "\n", "if", "not", "self", ".", "is_passive", "(", "rank", ")", "and", "(", "\n", "self", ".", "is_passive", "(", "f_peer", ")", "and", "self", ".", "is_passive", "(", "b_peer", ")", ")", ":", "\n", "                    ", "if", "f_peer", "not", "in", "group", ":", "\n", "                        ", "group", ".", "append", "(", "f_peer", ")", "# forward peer...", "\n", "", "if", "b_peer", "not", "in", "group", ":", "\n", "                        ", "group", ".", "append", "(", "b_peer", ")", "# then backward peer", "\n", "# create directory for passive peers", "\n", "", "", "elif", "self", ".", "is_passive", "(", "rank", ")", "and", "(", "\n", "not", "(", "self", ".", "is_passive", "(", "f_peer", ")", "or", "self", ".", "is_passive", "(", "b_peer", ")", ")", ")", ":", "\n", "                    ", "if", "b_peer", "not", "in", "group", ":", "\n", "                        ", "group", ".", "append", "(", "b_peer", ")", "# backward peer...", "\n", "", "if", "f_peer", "not", "in", "group", ":", "\n", "                        ", "group", ".", "append", "(", "f_peer", ")", "# then forward peer", "\n", "", "", "", "", "return", "phone_book", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicBipartiteLinearGraph.is_regular_graph": [[215, 216], ["None"], "methods", ["None"], ["", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicBipartiteLinearGraph.is_bipartite_graph": [[217, 218], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicBipartiteLinearGraph.is_passive": [[219, 222], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "\n", "        ", "rank", "=", "self", ".", "rank", "if", "rank", "is", "None", "else", "rank", "\n", "return", "(", "rank", "%", "2", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.DynamicBipartiteLinearGraph.is_dynamic_graph": [[223, 224], ["None"], "methods", ["None"], ["", "def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.StaticDirectedLinearGraph._make_graph": [[228, 236], ["range", "graph_manager.StaticDirectedLinearGraph._rotate_forward", "range", "group.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_forward"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "phone_book", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "world_size", ")", "]", "\n", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "group", "=", "phone_book", "[", "rank", "]", "\n", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "1", ")", "\n", "if", "f_peer", "not", "in", "group", ":", "\n", "                ", "group", ".", "append", "(", "f_peer", ")", "\n", "", "", "return", "phone_book", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.StaticDirectedLinearGraph.is_regular_graph": [[237, 238], ["None"], "methods", ["None"], ["", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.StaticDirectedLinearGraph.is_bipartite_graph": [[239, 240], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.StaticDirectedLinearGraph.is_passive": [[241, 242], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.StaticDirectedLinearGraph.is_dynamic_graph": [[243, 244], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph._make_graph": [[248, 257], ["range", "range", "range", "graph_manager.FullyConnectedGraph._rotate_forward", "group.append"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager._rotate_forward"], ["    ", "def", "_make_graph", "(", "self", ")", ":", "\n", "        ", "phone_book", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "world_size", ")", "]", "\n", "for", "rank", "in", "range", "(", "self", ".", "world_size", ")", ":", "\n", "            ", "group", "=", "phone_book", "[", "rank", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "world_size", ")", ":", "\n", "                ", "f_peer", "=", "self", ".", "_rotate_forward", "(", "rank", ",", "i", ")", "\n", "if", "f_peer", "not", "in", "group", "and", "f_peer", "!=", "rank", ":", "\n", "                    ", "group", ".", "append", "(", "f_peer", ")", "\n", "", "", "", "return", "phone_book", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_regular_graph": [[258, 259], ["None"], "methods", ["None"], ["", "def", "is_regular_graph", "(", "self", ")", ":", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_bipartite_graph": [[260, 261], ["None"], "methods", ["None"], ["def", "is_bipartite_graph", "(", "self", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_passive": [[262, 263], ["None"], "methods", ["None"], ["def", "is_passive", "(", "self", ",", "rank", "=", "None", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.FullyConnectedGraph.is_dynamic_graph": [[264, 265], ["None"], "methods", ["None"], ["def", "is_dynamic_graph", "(", "self", ",", "graph_type", "=", "None", ")", ":", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.arguments.get_args": [[12, 166], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.is_available", "int"], "function", ["None"], ["def", "get_args", "(", "arg_dict", "=", "None", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'RL'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "'--sync-freq'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "'max amount of message staleness for local gossip'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-learners'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of learners to stack on device'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-peers'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'number of peers to communicate with in each iteration'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--lr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "7e-4", ",", "\n", "help", "=", "'learning rate (default: 7e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eps'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1e-5", ",", "\n", "help", "=", "'RMSprop optimizer epsilon (default: 1e-5)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--alpha'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.99", ",", "\n", "help", "=", "'RMSprop optimizer apha (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gamma'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.99", ",", "\n", "help", "=", "'discount factor for rewards (default: 0.99)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--use-gae'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'use generalized advantage estimation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gae-lambda'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.95", ",", "\n", "help", "=", "'gae lambda parameter (default: 0.95)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--entropy-coef'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.01", ",", "\n", "help", "=", "'entropy term coefficient (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--value-loss-coef'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "'value loss coefficient (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max-grad-norm'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "'max norm of gradients (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cuda-deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"sets flags for determinism when using CUDA (potentially slow!)\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-procs-per-learner'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "16", ",", "\n", "help", "=", "'num simulators per learner (default: 16)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max-steps'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "int", "(", "10e3", ")", ",", "\n", "help", "=", "'max episode length (default: 10,000)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-steps-per-update'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", ",", "\n", "help", "=", "'number of forward steps in A2C (default: 5)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--clip-param'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.2", ",", "\n", "help", "=", "'ppo clip parameter (default: 0.2)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--log-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10", ",", "\n", "help", "=", "'log interval, measured in environment steps (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--save-interval'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "100", ",", "\n", "help", "=", "'save interval, measured in environment steps (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-env-steps'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "10e6", ",", "\n", "help", "=", "'number of total environment steps to train (default: 10e6)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--env-name'", ",", "\n", "default", "=", "'PongNoFrameskip-v4'", ",", "\n", "help", "=", "'environment to train on (default: PongNoFrameskip-v4)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-log-dir'", ",", "\n", "default", "=", "'/tmp/gym/eval/'", ",", "\n", "help", "=", "'directory to save agent eval-logs (default: /tmp/gym/eval/)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--log-dir'", ",", "\n", "default", "=", "'/tmp/gym/'", ",", "\n", "help", "=", "'directory to save agent logs (default: /tmp/gym)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--save-dir'", ",", "\n", "default", "=", "'./trained_models/'", ",", "\n", "help", "=", "'directory to save agent logs (default: ./trained_models/)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cuda-device'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "'index of cuda device to use'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no-cuda'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--use-proper-time-limits'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'compute returns taking into account time limits'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--recurrent-policy'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'use a recurrent policy'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--use-linear-lr-decay'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'use a linear schedule on the learning rate'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "arg_dict", ")", "\n", "args", ".", "cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.TimeLimitMask.step": [[132, 138], ["envs.TimeLimitMask.env.step"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.TimeLimitMask.step"], ["    ", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "rew", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "done", "and", "self", ".", "env", ".", "_max_episode_steps", "==", "self", ".", "env", ".", "_elapsed_steps", ":", "\n", "            ", "info", "[", "'bad_transition'", "]", "=", "True", "\n", "\n", "", "return", "obs", ",", "rew", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.TimeLimitMask.reset": [[139, 141], ["envs.TimeLimitMask.env.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorchFrameStack.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.MaskGoal.observation": [[145, 149], ["None"], "methods", ["None"], ["    ", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "if", "self", ".", "env", ".", "_elapsed_steps", ">", "0", ":", "\n", "            ", "observation", "[", "-", "2", ":", "0", "]", "=", "0", "\n", "", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.TransposeObs.__init__": [[152, 157], ["gym.ObservationWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Transpose observation space (base class)\n        \"\"\"", "\n", "super", "(", "TransposeObs", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.TransposeImage.__init__": [[160, 175], ["envs.TransposeObs.__init__", "gym.spaces.box.Box", "len", "str"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ",", "op", "=", "[", "2", ",", "0", ",", "1", "]", ")", ":", "\n", "        ", "\"\"\"\n        Transpose observation space for images\n        \"\"\"", "\n", "super", "(", "TransposeImage", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "assert", "len", "(", "op", ")", "==", "3", ",", "f\"Error: Operation, {str(op)}, must be dim3\"", "\n", "self", ".", "op", "=", "op", "\n", "obs_shape", "=", "self", ".", "observation_space", ".", "shape", "\n", "self", ".", "observation_space", "=", "Box", "(", "\n", "self", ".", "observation_space", ".", "low", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "self", ".", "observation_space", ".", "high", "[", "0", ",", "0", ",", "0", "]", ",", "[", "\n", "obs_shape", "[", "self", ".", "op", "[", "0", "]", "]", ",", "obs_shape", "[", "self", ".", "op", "[", "1", "]", "]", ",", "\n", "obs_shape", "[", "self", ".", "op", "[", "2", "]", "]", "\n", "]", ",", "\n", "dtype", "=", "self", ".", "observation_space", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.TransposeImage.observation": [[176, 178], ["ob.transpose"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "ob", ")", ":", "\n", "        ", "return", "ob", ".", "transpose", "(", "self", ".", "op", "[", "0", "]", ",", "self", ".", "op", "[", "1", "]", ",", "self", ".", "op", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorch.__init__": [[181, 185], ["baselines.common.vec_env.VecEnvWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "venv", ",", "device", ")", ":", "\n", "        ", "\"\"\"Return only every `skip`-th frame\"\"\"", "\n", "super", "(", "VecPyTorch", ",", "self", ")", ".", "__init__", "(", "venv", ")", "\n", "self", ".", "device", "=", "device", "\n", "# TODO: Fix data types", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorch.reset": [[187, 191], ["envs.VecPyTorch.venv.reset", "torch.from_numpy().float().to", "torch.from_numpy().float", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorchFrameStack.reset", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorch.step_async": [[192, 198], ["isinstance", "actions.squeeze.squeeze.cpu().numpy", "envs.VecPyTorch.venv.step_async", "actions.squeeze.squeeze.squeeze", "actions.squeeze.squeeze.cpu"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorch.step_async"], ["", "def", "step_async", "(", "self", ",", "actions", ")", ":", "\n", "        ", "if", "isinstance", "(", "actions", ",", "torch", ".", "LongTensor", ")", ":", "\n", "# Squeeze the dimension for discrete actions", "\n", "            ", "actions", "=", "actions", ".", "squeeze", "(", "1", ")", "\n", "", "actions", "=", "actions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "venv", ".", "step_async", "(", "actions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorch.step_wait": [[199, 204], ["envs.VecPyTorch.venv.step_wait", "torch.from_numpy().float().to", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().float", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorchFrameStack.step_wait", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "obs", "=", "torch", ".", "from_numpy", "(", "obs", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "reward", "=", "torch", ".", "from_numpy", "(", "reward", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecNormalize.__init__": [[207, 210], ["baselines.common.vec_env.vec_normalize.VecNormalize.__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VecNormalize", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "training", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecNormalize._obfilt": [[211, 221], ["numpy.clip", "envs.VecNormalize.ob_rms.update", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gala_a2c.GALA_A2C.update"], ["", "def", "_obfilt", "(", "self", ",", "obs", ",", "update", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "ob_rms", ":", "\n", "            ", "if", "self", ".", "training", "and", "update", ":", "\n", "                ", "self", ".", "ob_rms", ".", "update", "(", "obs", ")", "\n", "", "obs", "=", "np", ".", "clip", "(", "(", "obs", "-", "self", ".", "ob_rms", ".", "mean", ")", "/", "\n", "np", ".", "sqrt", "(", "self", ".", "ob_rms", ".", "var", "+", "self", ".", "epsilon", ")", ",", "\n", "-", "self", ".", "clipob", ",", "self", ".", "clipob", ")", "\n", "return", "obs", "\n", "", "else", ":", "\n", "            ", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecNormalize.train": [[222, 224], ["None"], "methods", ["None"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "training", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecNormalize.eval": [[225, 227], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "self", ".", "training", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorchFrameStack.__init__": [[232, 250], ["numpy.repeat", "numpy.repeat", "torch.zeros().to", "gym.spaces.Box", "baselines.common.vec_env.VecEnvWrapper.__init__", "torch.device", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "venv", ",", "nstack", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "venv", "=", "venv", "\n", "self", ".", "nstack", "=", "nstack", "\n", "\n", "wos", "=", "venv", ".", "observation_space", "# wrapped ob space", "\n", "self", ".", "shape_dim0", "=", "wos", ".", "shape", "[", "0", "]", "\n", "\n", "low", "=", "np", ".", "repeat", "(", "wos", ".", "low", ",", "self", ".", "nstack", ",", "axis", "=", "0", ")", "\n", "high", "=", "np", ".", "repeat", "(", "wos", ".", "high", ",", "self", ".", "nstack", ",", "axis", "=", "0", ")", "\n", "\n", "if", "device", "is", "None", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "self", ".", "stacked_obs", "=", "torch", ".", "zeros", "(", "(", "venv", ".", "num_envs", ",", ")", "+", "\n", "low", ".", "shape", ")", ".", "to", "(", "device", ")", "\n", "\n", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "low", ",", "high", "=", "high", ",", "dtype", "=", "venv", ".", "observation_space", ".", "dtype", ")", "\n", "VecEnvWrapper", ".", "__init__", "(", "self", ",", "venv", ",", "observation_space", "=", "observation_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorchFrameStack.step_wait": [[251, 260], ["envs.VecPyTorchFrameStack.venv.step_wait", "enumerate"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorchFrameStack.step_wait"], ["", "def", "step_wait", "(", "self", ")", ":", "\n", "        ", "obs", ",", "rews", ",", "news", ",", "infos", "=", "self", ".", "venv", ".", "step_wait", "(", ")", "\n", "self", ".", "stacked_obs", "[", ":", ",", ":", "-", "self", ".", "shape_dim0", "]", "=", "self", ".", "stacked_obs", "[", ":", ",", "self", ".", "shape_dim0", ":", "]", "\n", "for", "(", "i", ",", "new", ")", "in", "enumerate", "(", "news", ")", ":", "\n", "            ", "if", "new", ":", "\n", "                ", "self", ".", "stacked_obs", "[", "i", "]", "=", "0", "\n", "", "", "self", ".", "stacked_obs", "[", ":", ",", "-", "self", ".", "shape_dim0", ":", "]", "=", "obs", "\n", "return", "self", ".", "stacked_obs", ",", "rews", ",", "news", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorchFrameStack.reset": [[261, 269], ["envs.VecPyTorchFrameStack.venv.reset", "torch.zeros", "envs.VecPyTorchFrameStack.stacked_obs.zero_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorchFrameStack.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "venv", ".", "reset", "(", ")", "\n", "if", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", ":", "\n", "            ", "self", ".", "stacked_obs", "=", "torch", ".", "zeros", "(", "self", ".", "stacked_obs", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "stacked_obs", ".", "zero_", "(", ")", "\n", "", "self", ".", "stacked_obs", "[", ":", ",", "-", "self", ".", "shape_dim0", ":", "]", "=", "obs", "\n", "return", "self", ".", "stacked_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorchFrameStack.close": [[270, 272], ["envs.VecPyTorchFrameStack.venv.close"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecPyTorchFrameStack.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "venv", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.make_env": [[53, 97], ["env_id.startswith", "baselines.common.atari_wrappers.wrap_deepmind.seed", "env_id.split", "dm_control2gym.make", "gym.make", "hasattr", "isinstance", "baselines.common.atari_wrappers.make_atari", "str().find", "envs.TimeLimitMask", "baselines.bench.Monitor", "envs.TransposeImage", "os.path.join", "len", "baselines.common.atari_wrappers.wrap_deepmind", "len", "NotImplementedError", "len", "str", "str"], "function", ["None"], ["", "def", "make_env", "(", "env_id", ",", "seed", ",", "rank", ",", "log_dir", ",", "allow_early_resets", ",", "signature", "=", "''", ",", "\n", "max_steps", "=", "None", ")", ":", "\n", "    ", "def", "_thunk", "(", ")", ":", "\n", "        ", "if", "env_id", ".", "startswith", "(", "\"dm\"", ")", ":", "\n", "            ", "_", ",", "domain", ",", "task", "=", "env_id", ".", "split", "(", "'.'", ")", "\n", "env", "=", "dm_control2gym", ".", "make", "(", "domain_name", "=", "domain", ",", "task_name", "=", "task", ")", "\n", "", "else", ":", "\n", "            ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "\n", "", "is_atari", "=", "hasattr", "(", "gym", ".", "envs", ",", "'atari'", ")", "and", "isinstance", "(", "\n", "env", ".", "unwrapped", ",", "gym", ".", "envs", ".", "atari", ".", "atari_env", ".", "AtariEnv", ")", "\n", "if", "is_atari", ":", "\n", "            ", "env", "=", "make_atari", "(", "env_id", ",", "max_steps", ")", "\n", "\n", "", "env", ".", "seed", "(", "seed", "+", "rank", ")", "\n", "\n", "obs_shape", "=", "env", ".", "observation_space", ".", "shape", "\n", "\n", "if", "str", "(", "env", ".", "__class__", ".", "__name__", ")", ".", "find", "(", "'TimeLimit'", ")", ">=", "0", ":", "\n", "            ", "env", "=", "TimeLimitMask", "(", "env", ")", "\n", "\n", "", "if", "log_dir", "is", "not", "None", ":", "\n", "            ", "env", "=", "bench", ".", "Monitor", "(", "\n", "env", ",", "\n", "os", ".", "path", ".", "join", "(", "log_dir", ",", "str", "(", "rank", ")", "+", "signature", ")", ",", "\n", "allow_early_resets", "=", "allow_early_resets", ")", "\n", "\n", "", "if", "is_atari", ":", "\n", "            ", "if", "len", "(", "env", ".", "observation_space", ".", "shape", ")", "==", "3", ":", "\n", "                ", "env", "=", "wrap_deepmind", "(", "env", ")", "\n", "", "", "elif", "len", "(", "env", ".", "observation_space", ".", "shape", ")", "==", "3", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"CNN models work only for atari,\\n\"", "\n", "\"please use a custom wrapper for a custom pixel input env.\\n\"", "\n", "\"See wrap_deepmind for an example.\"", ")", "\n", "\n", "# If the input has shape (W,H,3), wrap for PyTorch convolutions", "\n", "", "obs_shape", "=", "env", ".", "observation_space", ".", "shape", "\n", "if", "len", "(", "obs_shape", ")", "==", "3", "and", "obs_shape", "[", "2", "]", "in", "[", "1", ",", "3", "]", ":", "\n", "            ", "env", "=", "TransposeImage", "(", "env", ",", "op", "=", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "\n", "", "return", "env", "\n", "\n", "", "return", "_thunk", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.make_vec_envs": [[99, 128], ["print", "envs.VecPyTorch", "envs.make_env", "len", "baselines.common.vec_env.shmem_vec_env.ShmemVecEnv", "baselines.common.vec_env.dummy_vec_env.DummyVecEnv", "len", "envs.VecPyTorchFrameStack", "range", "envs.VecNormalize", "envs.VecNormalize", "len", "envs.VecPyTorchFrameStack"], "function", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.make_env"], ["", "def", "make_vec_envs", "(", "env_name", ",", "seed", ",", "num_processes", ",", "gamma", ",", "log_dir", ",", "device", ",", "\n", "allow_early_resets", ",", "num_frame_stack", "=", "None", ",", "rank", "=", "0", ",", "\n", "signature", "=", "''", ",", "max_steps", "=", "None", ")", ":", "\n", "    ", "print", "(", "'log-dir'", ",", "log_dir", ")", "\n", "envs", "=", "[", "\n", "make_env", "(", "env_name", ",", "seed", ",", "(", "rank", "*", "num_processes", ")", "+", "i", ",", "log_dir", ",", "\n", "allow_early_resets", ",", "signature", ",", "max_steps", ")", "\n", "for", "i", "in", "range", "(", "num_processes", ")", "\n", "]", "\n", "\n", "if", "len", "(", "envs", ")", ">", "1", ":", "\n", "        ", "envs", "=", "ShmemVecEnv", "(", "envs", ")", "\n", "", "else", ":", "\n", "        ", "envs", "=", "DummyVecEnv", "(", "envs", ")", "\n", "\n", "", "if", "len", "(", "envs", ".", "observation_space", ".", "shape", ")", "==", "1", ":", "\n", "        ", "if", "gamma", "is", "None", ":", "\n", "            ", "envs", "=", "VecNormalize", "(", "envs", ",", "ret", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "envs", "=", "VecNormalize", "(", "envs", ",", "gamma", "=", "gamma", ")", "\n", "\n", "", "", "envs", "=", "VecPyTorch", "(", "envs", ",", "device", ")", "\n", "\n", "if", "num_frame_stack", "is", "not", "None", ":", "\n", "        ", "envs", "=", "VecPyTorchFrameStack", "(", "envs", ",", "num_frame_stack", ",", "device", ")", "\n", "", "elif", "len", "(", "envs", ".", "observation_space", ".", "shape", ")", "==", "3", ":", "\n", "        ", "envs", "=", "VecPyTorchFrameStack", "(", "envs", ",", "4", ",", "device", ")", "\n", "\n", "", "return", "envs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.Flatten.forward": [[42, 44], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.Policy.__init__": [[47, 84], ["torch.Module.__init__", "base", "gala.distributions.Categorical", "len", "gala.distributions.Categorical", "len", "env_name.find", "gala.distributions.DiagGaussian", "gala.distributions.Bernoulli"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obs_shape", ",", "action_space", "=", "None", ",", "base", "=", "None", ",", "base_kwargs", "=", "None", ",", "env_name", "=", "None", ")", ":", "\n", "        ", "super", "(", "Policy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "base_kwargs", "is", "None", ":", "\n", "            ", "base_kwargs", "=", "{", "}", "\n", "", "if", "base", "is", "None", ":", "\n", "            ", "if", "len", "(", "obs_shape", ")", "==", "3", ":", "\n", "                ", "base", "=", "CNNBase", "\n", "", "elif", "len", "(", "obs_shape", ")", "==", "1", ":", "\n", "                ", "base", "=", "MLPBase", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "self", ".", "base", "=", "base", "(", "obs_shape", "[", "0", "]", ",", "**", "base_kwargs", ")", "\n", "\n", "if", "action_space", "is", "None", ":", "\n", "            ", "game", "=", "env_name", "[", ":", "env_name", ".", "find", "(", "'NoFrameskip'", ")", "]", "\n", "num_actions", "=", "{", "\n", "'BeamRider'", ":", "9", ",", "\n", "'Breakout'", ":", "4", ",", "\n", "'Pong'", ":", "6", ",", "\n", "'Qbert'", ":", "6", ",", "\n", "'Seaquest'", ":", "18", ",", "\n", "'SpaceInvaders'", ":", "6", ",", "\n", "}", "\n", "num_outputs", "=", "num_actions", "[", "game", "]", "\n", "self", ".", "dist", "=", "Categorical", "(", "self", ".", "base", ".", "output_size", ",", "num_outputs", ")", "\n", "", "elif", "action_space", ".", "__class__", ".", "__name__", "==", "\"Discrete\"", ":", "\n", "            ", "num_outputs", "=", "action_space", ".", "n", "\n", "self", ".", "dist", "=", "Categorical", "(", "self", ".", "base", ".", "output_size", ",", "num_outputs", ")", "\n", "", "elif", "action_space", ".", "__class__", ".", "__name__", "==", "\"Box\"", ":", "\n", "            ", "num_outputs", "=", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "dist", "=", "DiagGaussian", "(", "self", ".", "base", ".", "output_size", ",", "num_outputs", ")", "\n", "", "elif", "action_space", ".", "__class__", ".", "__name__", "==", "\"MultiBinary\"", ":", "\n", "            ", "num_outputs", "=", "action_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "dist", "=", "Bernoulli", "(", "self", ".", "base", ".", "output_size", ",", "num_outputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.Policy.is_recurrent": [[85, 88], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "is_recurrent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base", ".", "is_recurrent", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.Policy.recurrent_hidden_state_size": [[89, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_hidden_state_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Size of rnn_hx.\"\"\"", "\n", "return", "self", ".", "base", ".", "recurrent_hidden_state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.Policy.forward": [[94, 96], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.Policy.act": [[97, 110], ["model.Policy.base", "model.Policy.dist", "model.Policy.log_probs", "model.Policy.entropy().mean", "model.Policy.mode", "model.Policy.sample", "model.Policy.entropy"], "methods", ["None"], ["", "def", "act", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "deterministic", "=", "False", ")", ":", "\n", "        ", "value", ",", "actor_features", ",", "rnn_hxs", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "\n", "if", "deterministic", ":", "\n", "            ", "action", "=", "dist", ".", "mode", "(", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "dist_entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "value", ",", "action", ",", "action_log_probs", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.Policy.get_value": [[111, 114], ["model.Policy.base"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "value", ",", "_", ",", "_", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.Policy.evaluate_actions": [[115, 123], ["model.Policy.base", "model.Policy.dist", "model.Policy.log_probs", "model.Policy.entropy().mean", "model.Policy.entropy"], "methods", ["None"], ["", "def", "evaluate_actions", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ",", "action", ")", ":", "\n", "        ", "value", ",", "actor_features", ",", "rnn_hxs", "=", "self", ".", "base", "(", "inputs", ",", "rnn_hxs", ",", "masks", ")", "\n", "dist", "=", "self", ".", "dist", "(", "actor_features", ")", "\n", "\n", "action_log_probs", "=", "dist", ".", "log_probs", "(", "action", ")", "\n", "dist_entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "return", "value", ",", "action_log_probs", ",", "dist_entropy", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.NNBase.__init__": [[126, 139], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "model.NNBase.gru.named_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "recurrent", ",", "recurrent_input_size", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "NNBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_hidden_size", "=", "hidden_size", "\n", "self", ".", "_recurrent", "=", "recurrent", "\n", "\n", "if", "recurrent", ":", "\n", "            ", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "recurrent_input_size", ",", "hidden_size", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "gru", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'bias'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "param", ",", "0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.NNBase.is_recurrent": [[140, 143], ["None"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "is_recurrent", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_recurrent", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.NNBase.recurrent_hidden_state_size": [[144, 149], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_hidden_state_size", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_recurrent", ":", "\n", "            ", "return", "self", ".", "_hidden_size", "\n", "", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.NNBase.output_size": [[150, 153], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.NNBase._forward_gru": [[154, 210], ["x.view.view.size", "hxs.squeeze.squeeze.size", "model.NNBase.gru", "x.view.view.squeeze", "hxs.squeeze.squeeze.squeeze", "hxs.squeeze.squeeze.size", "int", "x.view.view.view", "masks.view.view.view", "hxs.squeeze.squeeze.unsqueeze", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.view.view.view", "hxs.squeeze.squeeze.squeeze", "x.view.view.unsqueeze", "x.view.view.size", "has_zeros.dim", "model.NNBase.gru", "outputs.append", "x.view.view.size", "len", "has_zeros.item", "masks[].view"], "methods", ["None"], ["", "def", "_forward_gru", "(", "self", ",", "x", ",", "hxs", ",", "masks", ")", ":", "\n", "        ", "if", "x", ".", "size", "(", "0", ")", "==", "hxs", ".", "size", "(", "0", ")", ":", "\n", "            ", "x", ",", "hxs", "=", "self", ".", "gru", "(", "x", ".", "unsqueeze", "(", "0", ")", ",", "(", "hxs", "*", "masks", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "x", "=", "x", ".", "squeeze", "(", "0", ")", "\n", "hxs", "=", "hxs", ".", "squeeze", "(", "0", ")", "\n", "", "else", ":", "\n", "# x is a (T, N, -1) tensor that has been flatten to (T * N, -1)", "\n", "            ", "N", "=", "hxs", ".", "size", "(", "0", ")", "\n", "T", "=", "int", "(", "x", ".", "size", "(", "0", ")", "/", "N", ")", "\n", "\n", "# unflatten", "\n", "x", "=", "x", ".", "view", "(", "T", ",", "N", ",", "x", ".", "size", "(", "1", ")", ")", "\n", "\n", "# Same deal with masks", "\n", "masks", "=", "masks", ".", "view", "(", "T", ",", "N", ")", "\n", "\n", "# Let's figure out which steps in the sequence have a zero for any agent", "\n", "# We will always assume t=0 has a zero in it as that makes the logic cleaner", "\n", "has_zeros", "=", "(", "(", "masks", "[", "1", ":", "]", "==", "0.0", ")", ".", "any", "(", "dim", "=", "-", "1", ")", "\n", ".", "nonzero", "(", ")", "\n", ".", "squeeze", "(", ")", "\n", ".", "cpu", "(", ")", ")", "\n", "\n", "# +1 to correct the masks[1:]", "\n", "if", "has_zeros", ".", "dim", "(", ")", "==", "0", ":", "\n", "# Deal with scalar", "\n", "                ", "has_zeros", "=", "[", "has_zeros", ".", "item", "(", ")", "+", "1", "]", "\n", "", "else", ":", "\n", "                ", "has_zeros", "=", "(", "has_zeros", "+", "1", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# add t=0 and t=T to the list", "\n", "", "has_zeros", "=", "[", "0", "]", "+", "has_zeros", "+", "[", "T", "]", "\n", "\n", "hxs", "=", "hxs", ".", "unsqueeze", "(", "0", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "has_zeros", ")", "-", "1", ")", ":", "\n", "# We can now process steps that don't have any zeros in masks together!", "\n", "# This is much faster", "\n", "                ", "start_idx", "=", "has_zeros", "[", "i", "]", "\n", "end_idx", "=", "has_zeros", "[", "i", "+", "1", "]", "\n", "\n", "rnn_scores", ",", "hxs", "=", "self", ".", "gru", "(", "\n", "x", "[", "start_idx", ":", "end_idx", "]", ",", "\n", "hxs", "*", "masks", "[", "start_idx", "]", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ")", "\n", "\n", "outputs", ".", "append", "(", "rnn_scores", ")", "\n", "\n", "# assert len(outputs) == T", "\n", "# x is a (T, N, -1) tensor", "\n", "", "x", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "0", ")", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "T", "*", "N", ",", "-", "1", ")", "\n", "hxs", "=", "hxs", ".", "squeeze", "(", "0", ")", "\n", "\n", "", "return", "x", ",", "hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.CNNBase.__init__": [[213, 231], ["model.NNBase.__init__", "torch.Sequential", "torch.Sequential", "init_", "model.CNNBase.train", "model.init", "init_", "torch.ReLU", "torch.ReLU", "init_", "torch.ReLU", "torch.ReLU", "init_", "torch.ReLU", "torch.ReLU", "model.Flatten", "init_", "torch.ReLU", "torch.ReLU", "model.init", "torch.Linear", "torch.Linear", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecNormalize.train", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.init", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "recurrent", "=", "False", ",", "hidden_size", "=", "512", ")", ":", "\n", "        ", "super", "(", "CNNBase", ",", "self", ")", ".", "__init__", "(", "recurrent", ",", "hidden_size", ",", "hidden_size", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ",", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "num_inputs", ",", "32", ",", "8", ",", "stride", "=", "4", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "4", ",", "stride", "=", "2", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "3", ",", "stride", "=", "1", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "Flatten", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "32", "*", "7", "*", "7", ",", "hidden_size", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ")", "\n", "\n", "self", ".", "critic_linear", "=", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.CNNBase.forward": [[232, 239], ["model.CNNBase.main", "model.CNNBase._forward_gru", "model.CNNBase.critic_linear"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.NNBase._forward_gru"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "x", "=", "self", ".", "main", "(", "inputs", "/", "255.0", ")", "\n", "\n", "if", "self", ".", "is_recurrent", ":", "\n", "            ", "x", ",", "rnn_hxs", "=", "self", ".", "_forward_gru", "(", "x", ",", "rnn_hxs", ",", "masks", ")", "\n", "\n", "", "return", "self", ".", "critic_linear", "(", "x", ")", ",", "x", ",", "rnn_hxs", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.MLPBase.__init__": [[242, 262], ["model.NNBase.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "init_", "model.MLPBase.train", "model.init", "init_", "torch.Tanh", "torch.Tanh", "init_", "torch.Tanh", "torch.Tanh", "init_", "torch.Tanh", "torch.Tanh", "init_", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "numpy.sqrt", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.VecNormalize.train", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "recurrent", "=", "False", ",", "hidden_size", "=", "64", ")", ":", "\n", "        ", "super", "(", "MLPBase", ",", "self", ")", ".", "__init__", "(", "recurrent", ",", "num_inputs", ",", "hidden_size", ")", "\n", "\n", "if", "recurrent", ":", "\n", "            ", "num_inputs", "=", "hidden_size", "\n", "\n", "", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ",", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "\n", "self", ".", "actor", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "self", ".", "critic", "=", "nn", ".", "Sequential", "(", "\n", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "\n", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "self", ".", "critic_linear", "=", "init_", "(", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", ")", "\n", "\n", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.MLPBase.forward": [[263, 273], ["model.MLPBase.critic", "model.MLPBase.actor", "model.MLPBase._forward_gru", "model.MLPBase.critic_linear"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.NNBase._forward_gru"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "rnn_hxs", ",", "masks", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "if", "self", ".", "is_recurrent", ":", "\n", "            ", "x", ",", "rnn_hxs", "=", "self", ".", "_forward_gru", "(", "x", ",", "rnn_hxs", ",", "masks", ")", "\n", "\n", "", "hidden_critic", "=", "self", ".", "critic", "(", "x", ")", "\n", "hidden_actor", "=", "self", ".", "actor", "(", "x", ")", "\n", "\n", "return", "self", ".", "critic_linear", "(", "hidden_critic", ")", ",", "hidden_actor", ",", "rnn_hxs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.init": [[35, 39], ["bias_init", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_"], "function", ["None"], ["def", "init", "(", "module", ",", "weight_init", ",", "bias_init", ",", "gain", "=", "1", ")", ":", "\n", "    ", "weight_init", "(", "module", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "bias_init", "(", "module", ".", "bias", ".", "data", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.distributions.AddBias.__init__": [[33, 36], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "bias.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bias", ")", ":", "\n", "        ", "super", "(", "AddBias", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_bias", "=", "nn", ".", "Parameter", "(", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.distributions.AddBias.forward": [[37, 44], ["x.dim", "distributions.AddBias._bias.t().view", "distributions.AddBias._bias.t().view", "distributions.AddBias._bias.t", "distributions.AddBias._bias.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "bias", "=", "self", ".", "_bias", ".", "t", "(", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "bias", "=", "self", ".", "_bias", ".", "t", "(", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "x", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.distributions.Categorical.__init__": [[98, 108], ["torch.Module.__init__", "init_", "distributions.init", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ")", ":", "\n", "        ", "super", "(", "Categorical", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "\n", "m", ",", "\n", "nn", ".", "init", ".", "orthogonal_", ",", "\n", "lambda", "x", ":", "nn", ".", "init", ".", "constant_", "(", "x", ",", "0", ")", ",", "\n", "gain", "=", "0.01", ")", "\n", "\n", "self", ".", "linear", "=", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "num_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.distributions.Categorical.forward": [[109, 112], ["distributions.Categorical.linear", "FixedCategorical"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "FixedCategorical", "(", "logits", "=", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.distributions.DiagGaussian.__init__": [[115, 123], ["torch.Module.__init__", "init_", "distributions.AddBias", "distributions.init", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ")", ":", "\n", "        ", "super", "(", "DiagGaussian", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ")", "\n", "\n", "self", ".", "fc_mean", "=", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "num_outputs", ")", ")", "\n", "self", ".", "logstd", "=", "AddBias", "(", "torch", ".", "zeros", "(", "num_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.distributions.DiagGaussian.forward": [[124, 134], ["distributions.DiagGaussian.fc_mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "distributions.DiagGaussian.logstd", "FixedNormal", "distributions.DiagGaussian.size", "zeros.cuda.cuda.cuda", "distributions.DiagGaussian.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "action_mean", "=", "self", ".", "fc_mean", "(", "x", ")", "\n", "\n", "#  An ugly hack for my KFAC implementation.", "\n", "zeros", "=", "torch", ".", "zeros", "(", "action_mean", ".", "size", "(", ")", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "zeros", "=", "zeros", ".", "cuda", "(", ")", "\n", "\n", "", "action_logstd", "=", "self", ".", "logstd", "(", "zeros", ")", "\n", "return", "FixedNormal", "(", "action_mean", ",", "action_logstd", ".", "exp", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.distributions.Bernoulli.__init__": [[137, 144], ["torch.Module.__init__", "init_", "distributions.init", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.init"], ["    ", "def", "__init__", "(", "self", ",", "num_inputs", ",", "num_outputs", ")", ":", "\n", "        ", "super", "(", "Bernoulli", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "init_", "=", "lambda", "m", ":", "init", "(", "m", ",", "nn", ".", "init", ".", "orthogonal_", ",", "lambda", "x", ":", "nn", ".", "init", ".", "\n", "constant_", "(", "x", ",", "0", ")", ")", "\n", "\n", "self", ".", "linear", "=", "init_", "(", "nn", ".", "Linear", "(", "num_inputs", ",", "num_outputs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.distributions.Bernoulli.forward": [[145, 148], ["distributions.Bernoulli.linear", "FixedBernoulli"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "return", "FixedBernoulli", "(", "logits", "=", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.distributions.init": [[46, 50], ["bias_init", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_"], "function", ["None"], ["", "", "def", "init", "(", "module", ",", "weight_init", ",", "bias_init", ",", "gain", "=", "1", ")", ":", "\n", "    ", "weight_init", "(", "module", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "bias_init", "(", "module", ".", "bias", ".", "data", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.gala_a2c.GALA_A2C.__init__": [[15, 31], ["torch.RMSprop", "torch.RMSprop", "actor_critic.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "actor_critic", ",", "value_loss_coef", ",", "entropy_coef", ",", "lr", "=", "None", ",", "\n", "eps", "=", "None", ",", "alpha", "=", "None", ",", "max_grad_norm", "=", "None", ",", "\n", "rank", "=", "0", ",", "gossip_buffer", "=", "None", ")", ":", "\n", "        ", "\"\"\" GALA_A2C \"\"\"", "\n", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "gossip_buffer", "=", "gossip_buffer", "\n", "self", ".", "actor_critic", "=", "actor_critic", "\n", "\n", "self", ".", "value_loss_coef", "=", "value_loss_coef", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "\n", "self", ".", "optimizer", "=", "optim", ".", "RMSprop", "(", "\n", "actor_critic", ".", "parameters", "(", ")", ",", "lr", ",", "eps", "=", "eps", ",", "alpha", "=", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.gala_a2c.GALA_A2C.update": [[32, 67], ["rollouts.rewards.size", "gala_a2c.GALA_A2C.actor_critic.evaluate_actions", "values.view.view.view", "action_log_probs.view.view.view", "advantages.pow().mean", "gala_a2c.GALA_A2C.optimizer.zero_grad", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "gala_a2c.GALA_A2C.optimizer.step", "rollouts.obs.size", "rollouts.actions.size", "rollouts.obs[].view", "rollouts.recurrent_hidden_states[].view", "rollouts.masks[].view", "rollouts.actions.view", "gala_a2c.GALA_A2C.actor_critic.parameters", "gala_a2c.GALA_A2C.gossip_buffer.write_message", "gala_a2c.GALA_A2C.gossip_buffer.aggregate_message", "advantages.pow().mean.item", "action_loss.item", "dist_entropy.item", "advantages.pow", "advantages.detach"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.model.Policy.evaluate_actions", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.envs.TimeLimitMask.step", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.write_message", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.aggregate_message"], ["", "def", "update", "(", "self", ",", "rollouts", ")", ":", "\n", "        ", "obs_shape", "=", "rollouts", ".", "obs", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "action_shape", "=", "rollouts", ".", "actions", ".", "size", "(", ")", "[", "-", "1", "]", "\n", "num_steps", ",", "num_processes", ",", "_", "=", "rollouts", ".", "rewards", ".", "size", "(", ")", "\n", "\n", "values", ",", "action_log_probs", ",", "dist_entropy", ",", "_", "=", "self", ".", "actor_critic", ".", "evaluate_actions", "(", "\n", "rollouts", ".", "obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "*", "obs_shape", ")", ",", "\n", "rollouts", ".", "recurrent_hidden_states", "[", "0", "]", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "actor_critic", ".", "recurrent_hidden_state_size", ")", ",", "\n", "rollouts", ".", "masks", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "rollouts", ".", "actions", ".", "view", "(", "-", "1", ",", "action_shape", ")", ")", "\n", "\n", "values", "=", "values", ".", "view", "(", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "action_log_probs", "=", "action_log_probs", ".", "view", "(", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "\n", "advantages", "=", "rollouts", ".", "returns", "[", ":", "-", "1", "]", "-", "values", "\n", "value_loss", "=", "advantages", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "action_loss", "=", "-", "(", "advantages", ".", "detach", "(", ")", "*", "action_log_probs", ")", ".", "mean", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "(", "value_loss", "*", "self", ".", "value_loss_coef", "+", "action_loss", "-", "\n", "dist_entropy", "*", "self", ".", "entropy_coef", ")", ".", "backward", "(", ")", "\n", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "actor_critic", ".", "parameters", "(", ")", ",", "\n", "self", ".", "max_grad_norm", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Local-Gossip", "\n", "if", "self", ".", "gossip_buffer", "is", "not", "None", ":", "\n", "            ", "self", ".", "gossip_buffer", ".", "write_message", "(", "self", ".", "rank", ",", "self", ".", "actor_critic", ")", "\n", "self", ".", "gossip_buffer", ".", "aggregate_message", "(", "self", ".", "rank", ",", "self", ".", "actor_critic", ")", "\n", "\n", "", "return", "value_loss", ".", "item", "(", ")", ",", "action_loss", ".", "item", "(", ")", ",", "dist_entropy", ".", "item", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.__init__": [[36, 60], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "storage.RolloutStorage.actions.long"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_steps", ",", "num_processes", ",", "obs_shape", ",", "action_space", ",", "\n", "recurrent_hidden_state_size", ")", ":", "\n", "        ", "self", ".", "obs", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "*", "obs_shape", ")", "\n", "self", ".", "recurrent_hidden_states", "=", "torch", ".", "zeros", "(", "\n", "num_steps", "+", "1", ",", "num_processes", ",", "recurrent_hidden_state_size", ")", "\n", "self", ".", "rewards", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "value_preds", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "returns", "=", "torch", ".", "zeros", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "self", ".", "action_log_probs", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "1", ")", "\n", "if", "action_space", ".", "__class__", ".", "__name__", "==", "'Discrete'", ":", "\n", "            ", "action_shape", "=", "1", "\n", "", "else", ":", "\n", "            ", "action_shape", "=", "action_space", ".", "shape", "[", "0", "]", "\n", "", "self", ".", "actions", "=", "torch", ".", "zeros", "(", "num_steps", ",", "num_processes", ",", "action_shape", ")", "\n", "if", "action_space", ".", "__class__", ".", "__name__", "==", "'Discrete'", ":", "\n", "            ", "self", ".", "actions", "=", "self", ".", "actions", ".", "long", "(", ")", "\n", "", "self", ".", "masks", "=", "torch", ".", "ones", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "\n", "# Masks that indicate whether it's a true terminal state", "\n", "# or time limit end state", "\n", "self", ".", "bad_masks", "=", "torch", ".", "ones", "(", "num_steps", "+", "1", ",", "num_processes", ",", "1", ")", "\n", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to": [[61, 71], ["storage.RolloutStorage.obs.to", "storage.RolloutStorage.recurrent_hidden_states.to", "storage.RolloutStorage.rewards.to", "storage.RolloutStorage.value_preds.to", "storage.RolloutStorage.returns.to", "storage.RolloutStorage.action_log_probs.to", "storage.RolloutStorage.actions.to", "storage.RolloutStorage.masks.to", "storage.RolloutStorage.bad_masks.to"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "obs", "=", "self", ".", "obs", ".", "to", "(", "device", ")", "\n", "self", ".", "recurrent_hidden_states", "=", "self", ".", "recurrent_hidden_states", ".", "to", "(", "device", ")", "\n", "self", ".", "rewards", "=", "self", ".", "rewards", ".", "to", "(", "device", ")", "\n", "self", ".", "value_preds", "=", "self", ".", "value_preds", ".", "to", "(", "device", ")", "\n", "self", ".", "returns", "=", "self", ".", "returns", ".", "to", "(", "device", ")", "\n", "self", ".", "action_log_probs", "=", "self", ".", "action_log_probs", ".", "to", "(", "device", ")", "\n", "self", ".", "actions", "=", "self", ".", "actions", ".", "to", "(", "device", ")", "\n", "self", ".", "masks", "=", "self", ".", "masks", ".", "to", "(", "device", ")", "\n", "self", ".", "bad_masks", "=", "self", ".", "bad_masks", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.insert": [[72, 85], ["storage.RolloutStorage.obs[].copy_", "storage.RolloutStorage.recurrent_hidden_states[].copy_", "storage.RolloutStorage.actions[].copy_", "storage.RolloutStorage.action_log_probs[].copy_", "storage.RolloutStorage.value_preds[].copy_", "storage.RolloutStorage.rewards[].copy_", "storage.RolloutStorage.masks[].copy_", "storage.RolloutStorage.bad_masks[].copy_"], "methods", ["None"], ["", "def", "insert", "(", "self", ",", "obs", ",", "recurrent_hidden_states", ",", "actions", ",", "action_log_probs", ",", "\n", "value_preds", ",", "rewards", ",", "masks", ",", "bad_masks", ")", ":", "\n", "        ", "self", ".", "obs", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "obs", ")", "\n", "self", ".", "recurrent_hidden_states", "[", "self", ".", "step", "+", "\n", "1", "]", ".", "copy_", "(", "recurrent_hidden_states", ")", "\n", "self", ".", "actions", "[", "self", ".", "step", "]", ".", "copy_", "(", "actions", ")", "\n", "self", ".", "action_log_probs", "[", "self", ".", "step", "]", ".", "copy_", "(", "action_log_probs", ")", "\n", "self", ".", "value_preds", "[", "self", ".", "step", "]", ".", "copy_", "(", "value_preds", ")", "\n", "self", ".", "rewards", "[", "self", ".", "step", "]", ".", "copy_", "(", "rewards", ")", "\n", "self", ".", "masks", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "masks", ")", "\n", "self", ".", "bad_masks", "[", "self", ".", "step", "+", "1", "]", ".", "copy_", "(", "bad_masks", ")", "\n", "\n", "self", ".", "step", "=", "(", "self", ".", "step", "+", "1", ")", "%", "self", ".", "num_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.after_update": [[86, 91], ["storage.RolloutStorage.obs[].copy_", "storage.RolloutStorage.recurrent_hidden_states[].copy_", "storage.RolloutStorage.masks[].copy_", "storage.RolloutStorage.bad_masks[].copy_"], "methods", ["None"], ["", "def", "after_update", "(", "self", ")", ":", "\n", "        ", "self", ".", "obs", "[", "0", "]", ".", "copy_", "(", "self", ".", "obs", "[", "-", "1", "]", ")", "\n", "self", ".", "recurrent_hidden_states", "[", "0", "]", ".", "copy_", "(", "self", ".", "recurrent_hidden_states", "[", "-", "1", "]", ")", "\n", "self", ".", "masks", "[", "0", "]", ".", "copy_", "(", "self", ".", "masks", "[", "-", "1", "]", ")", "\n", "self", ".", "bad_masks", "[", "0", "]", ".", "copy_", "(", "self", ".", "bad_masks", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.compute_returns": [[92, 132], ["reversed", "reversed", "reversed", "reversed", "range", "range", "range", "range", "storage.RolloutStorage.rewards.size", "storage.RolloutStorage.rewards.size", "storage.RolloutStorage.rewards.size", "storage.RolloutStorage.rewards.size"], "methods", ["None"], ["", "def", "compute_returns", "(", "self", ",", "\n", "next_value", ",", "\n", "use_gae", ",", "\n", "gamma", ",", "\n", "gae_lambda", ",", "\n", "use_proper_time_limits", "=", "True", ")", ":", "\n", "        ", "if", "use_proper_time_limits", ":", "\n", "            ", "if", "use_gae", ":", "\n", "                ", "self", ".", "value_preds", "[", "-", "1", "]", "=", "next_value", "\n", "gae", "=", "0", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                    ", "delta", "=", "self", ".", "rewards", "[", "step", "]", "+", "gamma", "*", "self", ".", "value_preds", "[", "\n", "step", "+", "1", "]", "*", "self", ".", "masks", "[", "step", "+", "\n", "1", "]", "-", "self", ".", "value_preds", "[", "step", "]", "\n", "gae", "=", "delta", "+", "gamma", "*", "gae_lambda", "*", "self", ".", "masks", "[", "step", "+", "\n", "1", "]", "*", "gae", "\n", "gae", "=", "gae", "*", "self", ".", "bad_masks", "[", "step", "+", "1", "]", "\n", "self", ".", "returns", "[", "step", "]", "=", "gae", "+", "self", ".", "value_preds", "[", "step", "]", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "returns", "[", "-", "1", "]", "=", "next_value", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                    ", "self", ".", "returns", "[", "step", "]", "=", "(", "self", ".", "returns", "[", "step", "+", "1", "]", "*", "gamma", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "+", "self", ".", "rewards", "[", "step", "]", ")", "*", "self", ".", "bad_masks", "[", "step", "+", "1", "]", "+", "(", "1", "-", "self", ".", "bad_masks", "[", "step", "+", "1", "]", ")", "*", "self", ".", "value_preds", "[", "step", "]", "\n", "", "", "", "else", ":", "\n", "            ", "if", "use_gae", ":", "\n", "                ", "self", ".", "value_preds", "[", "-", "1", "]", "=", "next_value", "\n", "gae", "=", "0", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                    ", "delta", "=", "self", ".", "rewards", "[", "step", "]", "+", "gamma", "*", "self", ".", "value_preds", "[", "\n", "step", "+", "1", "]", "*", "self", ".", "masks", "[", "step", "+", "\n", "1", "]", "-", "self", ".", "value_preds", "[", "step", "]", "\n", "gae", "=", "delta", "+", "gamma", "*", "gae_lambda", "*", "self", ".", "masks", "[", "step", "+", "\n", "1", "]", "*", "gae", "\n", "self", ".", "returns", "[", "step", "]", "=", "gae", "+", "self", ".", "value_preds", "[", "step", "]", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "returns", "[", "-", "1", "]", "=", "next_value", "\n", "for", "step", "in", "reversed", "(", "range", "(", "self", ".", "rewards", ".", "size", "(", "0", ")", ")", ")", ":", "\n", "                    ", "self", ".", "returns", "[", "step", "]", "=", "self", ".", "returns", "[", "step", "+", "1", "]", "*", "gamma", "*", "self", ".", "masks", "[", "step", "+", "1", "]", "+", "self", ".", "rewards", "[", "step", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.feed_forward_generator": [[133, 170], ["torch.utils.data.sampler.BatchSampler", "storage.RolloutStorage.rewards.size", "torch.utils.data.sampler.SubsetRandomSampler", "range", "storage.RolloutStorage.obs[].view", "storage.RolloutStorage.recurrent_hidden_states[].view", "storage.RolloutStorage.actions.view", "storage.RolloutStorage.value_preds[].view", "storage.RolloutStorage.returns[].view", "storage.RolloutStorage.masks[].view", "storage.RolloutStorage.action_log_probs.view", "storage.RolloutStorage.recurrent_hidden_states.size", "storage.RolloutStorage.actions.size", "advantages.view", "storage.RolloutStorage.obs.size"], "methods", ["None"], ["", "", "", "", "def", "feed_forward_generator", "(", "self", ",", "\n", "advantages", ",", "\n", "num_mini_batch", "=", "None", ",", "\n", "mini_batch_size", "=", "None", ")", ":", "\n", "        ", "num_steps", ",", "num_processes", "=", "self", ".", "rewards", ".", "size", "(", ")", "[", "0", ":", "2", "]", "\n", "batch_size", "=", "num_processes", "*", "num_steps", "\n", "\n", "if", "mini_batch_size", "is", "None", ":", "\n", "            ", "assert", "batch_size", ">=", "num_mini_batch", ",", "(", "\n", "\"PPO requires the number of processes ({}) \"", "\n", "\"* number of steps ({}) = {} \"", "\n", "\"to be greater than or equal to the number of PPO mini batches ({}).\"", "\n", "\"\"", ".", "format", "(", "num_processes", ",", "num_steps", ",", "num_processes", "*", "num_steps", ",", "\n", "num_mini_batch", ")", ")", "\n", "mini_batch_size", "=", "batch_size", "//", "num_mini_batch", "\n", "", "sampler", "=", "BatchSampler", "(", "\n", "SubsetRandomSampler", "(", "range", "(", "batch_size", ")", ")", ",", "\n", "mini_batch_size", ",", "\n", "drop_last", "=", "True", ")", "\n", "for", "indices", "in", "sampler", ":", "\n", "            ", "obs_batch", "=", "self", ".", "obs", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "*", "self", ".", "obs", ".", "size", "(", ")", "[", "2", ":", "]", ")", "[", "indices", "]", "\n", "recurrent_hidden_states_batch", "=", "self", ".", "recurrent_hidden_states", "[", ":", "-", "1", "]", ".", "view", "(", "\n", "-", "1", ",", "self", ".", "recurrent_hidden_states", ".", "size", "(", "-", "1", ")", ")", "[", "indices", "]", "\n", "actions_batch", "=", "self", ".", "actions", ".", "view", "(", "-", "1", ",", "\n", "self", ".", "actions", ".", "size", "(", "-", "1", ")", ")", "[", "indices", "]", "\n", "value_preds_batch", "=", "self", ".", "value_preds", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "return_batch", "=", "self", ".", "returns", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "masks_batch", "=", "self", ".", "masks", "[", ":", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "old_action_log_probs_batch", "=", "self", ".", "action_log_probs", ".", "view", "(", "-", "1", ",", "\n", "1", ")", "[", "indices", "]", "\n", "if", "advantages", "is", "None", ":", "\n", "                ", "adv_targ", "=", "None", "\n", "", "else", ":", "\n", "                ", "adv_targ", "=", "advantages", ".", "view", "(", "-", "1", ",", "1", ")", "[", "indices", "]", "\n", "\n", "", "yield", "obs_batch", ",", "recurrent_hidden_states_batch", ",", "actions_batch", ",", "value_preds_batch", ",", "return_batch", ",", "masks_batch", ",", "old_action_log_probs_batch", ",", "adv_targ", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.recurrent_generator": [[171, 229], ["storage.RolloutStorage.rewards.size", "torch.randperm", "range", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().view", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "storage._flatten_helper", "_flatten_helper.append", "torch.stack().view.append", "_flatten_helper.append", "_flatten_helper.append", "_flatten_helper.append", "_flatten_helper.append", "_flatten_helper.append", "_flatten_helper.append", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage._flatten_helper", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage._flatten_helper", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage._flatten_helper", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage._flatten_helper", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage._flatten_helper", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage._flatten_helper", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage._flatten_helper"], ["", "", "def", "recurrent_generator", "(", "self", ",", "advantages", ",", "num_mini_batch", ")", ":", "\n", "        ", "num_processes", "=", "self", ".", "rewards", ".", "size", "(", "1", ")", "\n", "assert", "num_processes", ">=", "num_mini_batch", ",", "(", "\n", "\"PPO requires the number of processes ({}) \"", "\n", "\"to be greater than or equal to the number of \"", "\n", "\"PPO mini batches ({}).\"", ".", "format", "(", "num_processes", ",", "num_mini_batch", ")", ")", "\n", "num_envs_per_batch", "=", "num_processes", "//", "num_mini_batch", "\n", "perm", "=", "torch", ".", "randperm", "(", "num_processes", ")", "\n", "for", "start_ind", "in", "range", "(", "0", ",", "num_processes", ",", "num_envs_per_batch", ")", ":", "\n", "            ", "obs_batch", "=", "[", "]", "\n", "recurrent_hidden_states_batch", "=", "[", "]", "\n", "actions_batch", "=", "[", "]", "\n", "value_preds_batch", "=", "[", "]", "\n", "return_batch", "=", "[", "]", "\n", "masks_batch", "=", "[", "]", "\n", "old_action_log_probs_batch", "=", "[", "]", "\n", "adv_targ", "=", "[", "]", "\n", "\n", "for", "offset", "in", "range", "(", "num_envs_per_batch", ")", ":", "\n", "                ", "ind", "=", "perm", "[", "start_ind", "+", "offset", "]", "\n", "obs_batch", ".", "append", "(", "self", ".", "obs", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "recurrent_hidden_states_batch", ".", "append", "(", "\n", "self", ".", "recurrent_hidden_states", "[", "0", ":", "1", ",", "ind", "]", ")", "\n", "actions_batch", ".", "append", "(", "self", ".", "actions", "[", ":", ",", "ind", "]", ")", "\n", "value_preds_batch", ".", "append", "(", "self", ".", "value_preds", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "return_batch", ".", "append", "(", "self", ".", "returns", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "masks_batch", ".", "append", "(", "self", ".", "masks", "[", ":", "-", "1", ",", "ind", "]", ")", "\n", "old_action_log_probs_batch", ".", "append", "(", "\n", "self", ".", "action_log_probs", "[", ":", ",", "ind", "]", ")", "\n", "adv_targ", ".", "append", "(", "advantages", "[", ":", ",", "ind", "]", ")", "\n", "\n", "", "T", ",", "N", "=", "self", ".", "num_steps", ",", "num_envs_per_batch", "\n", "# These are all tensors of size (T, N, -1)", "\n", "obs_batch", "=", "torch", ".", "stack", "(", "obs_batch", ",", "1", ")", "\n", "actions_batch", "=", "torch", ".", "stack", "(", "actions_batch", ",", "1", ")", "\n", "value_preds_batch", "=", "torch", ".", "stack", "(", "value_preds_batch", ",", "1", ")", "\n", "return_batch", "=", "torch", ".", "stack", "(", "return_batch", ",", "1", ")", "\n", "masks_batch", "=", "torch", ".", "stack", "(", "masks_batch", ",", "1", ")", "\n", "old_action_log_probs_batch", "=", "torch", ".", "stack", "(", "\n", "old_action_log_probs_batch", ",", "1", ")", "\n", "adv_targ", "=", "torch", ".", "stack", "(", "adv_targ", ",", "1", ")", "\n", "\n", "# States is just a (N, -1) tensor", "\n", "recurrent_hidden_states_batch", "=", "torch", ".", "stack", "(", "\n", "recurrent_hidden_states_batch", ",", "1", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "\n", "# Flatten the (T, N, ...) tensors to (T * N, ...)", "\n", "obs_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "obs_batch", ")", "\n", "actions_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "actions_batch", ")", "\n", "value_preds_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "value_preds_batch", ")", "\n", "return_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "return_batch", ")", "\n", "masks_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "masks_batch", ")", "\n", "old_action_log_probs_batch", "=", "_flatten_helper", "(", "T", ",", "N", ",", "old_action_log_probs_batch", ")", "\n", "adv_targ", "=", "_flatten_helper", "(", "T", ",", "N", ",", "adv_targ", ")", "\n", "\n", "yield", "obs_batch", ",", "recurrent_hidden_states_batch", ",", "actions_batch", ",", "value_preds_batch", ",", "return_batch", ",", "masks_batch", ",", "old_action_log_probs_batch", ",", "adv_targ", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage._flatten_helper": [[31, 33], ["_tensor.view", "_tensor.size"], "function", ["None"], ["def", "_flatten_helper", "(", "T", ",", "N", ",", "_tensor", ")", ":", "\n", "    ", "return", "_tensor", ".", "view", "(", "T", "*", "N", ",", "*", "_tensor", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.AddBias.__init__": [[62, 65], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "bias.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bias", ")", ":", "\n", "        ", "super", "(", "AddBias", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_bias", "=", "nn", ".", "Parameter", "(", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.AddBias.forward": [[66, 73], ["x.dim", "utils.AddBias._bias.t().view", "utils.AddBias._bias.t().view", "utils.AddBias._bias.t", "utils.AddBias._bias.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "bias", "=", "self", ".", "_bias", ".", "t", "(", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "bias", "=", "self", ".", "_bias", ".", "t", "(", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "return", "x", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.get_render_func": [[40, 49], ["hasattr", "hasattr", "utils.get_render_func", "hasattr", "utils.get_render_func"], "function", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.get_render_func", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.get_render_func"], ["def", "get_render_func", "(", "venv", ")", ":", "\n", "    ", "if", "hasattr", "(", "venv", ",", "'envs'", ")", ":", "\n", "        ", "return", "venv", ".", "envs", "[", "0", "]", ".", "render", "\n", "", "elif", "hasattr", "(", "venv", ",", "'venv'", ")", ":", "\n", "        ", "return", "get_render_func", "(", "venv", ".", "venv", ")", "\n", "", "elif", "hasattr", "(", "venv", ",", "'env'", ")", ":", "\n", "        ", "return", "get_render_func", "(", "venv", ".", "env", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.get_vec_normalize": [[51, 58], ["isinstance", "hasattr", "utils.get_vec_normalize"], "function", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.get_vec_normalize"], ["", "def", "get_vec_normalize", "(", "venv", ")", ":", "\n", "    ", "if", "isinstance", "(", "venv", ",", "VecNormalize", ")", ":", "\n", "        ", "return", "venv", "\n", "", "elif", "hasattr", "(", "venv", ",", "'venv'", ")", ":", "\n", "        ", "return", "get_vec_normalize", "(", "venv", ".", "venv", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.update_linear_schedule": [[75, 80], ["float"], "function", ["None"], ["", "", "def", "update_linear_schedule", "(", "optimizer", ",", "epoch", ",", "total_num_epochs", ",", "initial_lr", ")", ":", "\n", "    ", "\"\"\"Decreases the learning rate linearly\"\"\"", "\n", "lr", "=", "initial_lr", "-", "(", "initial_lr", "*", "(", "epoch", "/", "float", "(", "total_num_epochs", ")", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.init": [[82, 86], ["weight_init", "bias_init"], "function", ["None"], ["", "", "def", "init", "(", "module", ",", "weight_init", ",", "bias_init", ",", "gain", "=", "1", ")", ":", "\n", "    ", "weight_init", "(", "module", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "bias_init", "(", "module", ".", "bias", ".", "data", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.utils.cleanup_log_dir": [[88, 95], ["os.makedirs", "glob.glob", "os.path.join", "os.remove"], "function", ["None"], ["", "def", "cleanup_log_dir", "(", "log_dir", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'*.monitor.csv'", ")", ")", "\n", "for", "f", "in", "files", ":", "\n", "            ", "os", ".", "remove", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.__init__": [[22, 50], ["len", "range", "copy.deepcopy", "copy.deepcopy.share_memory", "gpu_gossip_buffer.GossipBuffer.msg_buffer.append", "event.set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "topology", ",", "model", ",", "buffer_locks", ",", "read_events", ",", "\n", "write_events", ",", "sync_list", ",", "sync_freq", "=", "0", ")", ":", "\n", "        ", "\"\"\" GossipBuffer \"\"\"", "\n", "\n", "self", ".", "topology", "=", "topology", "\n", "self", ".", "num_learners", "=", "len", "(", "topology", ")", "\n", "self", ".", "sync_list", "=", "sync_list", "\n", "self", ".", "sync_freq", "=", "sync_freq", "\n", "\n", "# Initialize message buffer (4-item object):", "\n", "# [0] -> Msg-Tensor", "\n", "# [1] -> Events recording peers that have read the message", "\n", "# [2] -> Events recording peer that has written the message", "\n", "# [3] -> Lock for safe access of Msg-Tensor", "\n", "self", ".", "msg_buffer", "=", "[", "]", "\n", "for", "rank", "in", "range", "(", "self", ".", "num_learners", ")", ":", "\n", "            ", "msg", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "msg", ".", "share_memory", "(", ")", "\n", "r_events", "=", "read_events", "[", "rank", "]", "\n", "w_events", "=", "write_events", "[", "rank", "]", "\n", "lock", "=", "buffer_locks", "[", "rank", "]", "\n", "self", ".", "msg_buffer", ".", "append", "(", "[", "msg", ",", "r_events", ",", "w_events", ",", "lock", "]", ")", "\n", "\n", "# Initialize each Read-Buffer as 'read'", "\n", "", "for", "msg_buffer", "in", "self", ".", "msg_buffer", ":", "\n", "            ", "read_event_list", "=", "msg_buffer", "[", "1", "]", "\n", "for", "event", "in", "read_event_list", ":", "\n", "                ", "event", ".", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.write_message": [[51, 104], ["torch.no_grad", "gpu_gossip_buffer.GossipBuffer.topology[].get_peers", "zip", "gpu_gossip_buffer.GossipBuffer.topology[].get_peers", "torch.cuda.current_stream().synchronize", "read_event_list[].is_set", "read_event.wait", "read_event.clear", "broadcast_buffer.parameters", "model.parameters", "bp.data.copy_", "bp.data.div_", "write_event_list[].set", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager.get_peers", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager.get_peers"], ["", "", "", "def", "write_message", "(", "self", ",", "rank", ",", "model", ",", "rotate", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Write agent 'rank's 'model' to a local 'boradcast buffer' that will be\n        read by the out-neighbours defined in 'self.topology'.\n\n        :param rank: Agent's rank in multi-agent graph topology\n        :param model: Agent's torch neural network model\n        :param rotate: Whether to alternate peers in graph topology\n\n        Agents should only write to their own broadcast buffer:\n            i.e., ensure 'model' belongs to agent 'rank'\n        WARNING: setting rotate=True with sync_freq > 1 not currently supported\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "# Get local broadcast-buffer", "\n", "            ", "msg_buffer", "=", "self", ".", "msg_buffer", "[", "rank", "]", "\n", "broadcast_buffer", "=", "msg_buffer", "[", "0", "]", "\n", "read_event_list", "=", "msg_buffer", "[", "1", "]", "\n", "write_event_list", "=", "msg_buffer", "[", "2", "]", "\n", "lock", "=", "msg_buffer", "[", "3", "]", "\n", "\n", "# Check if out-peers finished reading our last message", "\n", "out_peers", ",", "_", "=", "self", ".", "topology", "[", "rank", "]", ".", "get_peers", "(", ")", "\n", "read_complete", "=", "True", "\n", "for", "peer", "in", "out_peers", ":", "\n", "                ", "if", "not", "read_event_list", "[", "peer", "]", ".", "is_set", "(", ")", ":", "\n", "                    ", "read_complete", "=", "False", "\n", "break", "\n", "\n", "# If peers done reading our last message, wait and clear events", "\n", "", "", "if", "read_complete", ":", "\n", "                ", "for", "peer", "in", "out_peers", ":", "\n", "                    ", "read_event", "=", "read_event_list", "[", "peer", "]", "\n", "read_event", ".", "wait", "(", ")", "\n", "read_event", ".", "clear", "(", ")", "\n", "# If not done reading, cannot write another message right now", "\n", "", "", "else", ":", "\n", "                ", "return", "\n", "\n", "# Update broadcast-buffer with new message", "\n", "# -- flatten params and multiply by mixing-weight", "\n", "", "num_peers", "=", "self", ".", "topology", "[", "rank", "]", ".", "peers_per_itr", "\n", "with", "lock", ":", "\n", "                ", "for", "bp", ",", "p", "in", "zip", "(", "broadcast_buffer", ".", "parameters", "(", ")", ",", "\n", "model", ".", "parameters", "(", ")", ")", ":", "\n", "                    ", "bp", ".", "data", ".", "copy_", "(", "p", ")", "\n", "bp", ".", "data", ".", "div_", "(", "num_peers", "+", "1", ")", "\n", "# -- mark message as 'written'", "\n", "", "out_peers", ",", "_", "=", "self", ".", "topology", "[", "rank", "]", ".", "get_peers", "(", "rotate", ")", "\n", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "synchronize", "(", ")", "\n", "for", "peer", "in", "out_peers", ":", "\n", "                    ", "write_event_list", "[", "peer", "]", ".", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_gala.gala.gpu_gossip_buffer.GossipBuffer.aggregate_message": [[105, 161], ["torch.no_grad", "gpu_gossip_buffer.GossipBuffer.topology[].get_peers", "model.parameters", "print", "p.data.div_", "write_event.is_set", "write_event.wait", "write_event.clear", "zip", "torch.cuda.current_stream().synchronize", "[].set", "model.parameters", "peer_msg.parameters", "p.data.add_", "bp.to", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_gala.gala.graph_manager.GraphManager.get_peers", "home.repos.pwc.inspect_result.facebookresearch_gala.gala.storage.RolloutStorage.to"], ["", "", "", "", "def", "aggregate_message", "(", "self", ",", "rank", ",", "model", ")", ":", "\n", "        ", "\"\"\"\n        Average messages with local model:\n        Average all in-neighbours' (defined in 'self.topology') parameters with\n        agent 'rank's 'model' and copy the result into 'model'.\n\n        Agents should only aggregate messages into their own model:\n            i.e., ensure 'model belongs to agent 'rank'\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "# Check if in-peers finished writing messages to broadcast buffers", "\n", "            ", "_", ",", "in_peers", "=", "self", ".", "topology", "[", "rank", "]", ".", "get_peers", "(", ")", "\n", "write_complete", "=", "True", "\n", "for", "peer", "in", "in_peers", ":", "\n", "                ", "peer_buffer", "=", "self", ".", "msg_buffer", "[", "peer", "]", "\n", "write_event", "=", "peer_buffer", "[", "2", "]", "[", "rank", "]", "\n", "if", "not", "write_event", ".", "is_set", "(", ")", ":", "\n", "                    ", "write_complete", "=", "False", "\n", "break", "\n", "\n", "# Check if any messages are excessively stale", "\n", "", "", "stale_assert", "=", "self", ".", "sync_list", "[", "rank", "]", ">=", "self", ".", "sync_freq", "\n", "\n", "# If peers done writing or message too stale, wait and clear events", "\n", "if", "write_complete", "or", "stale_assert", ":", "\n", "                ", "for", "peer", "in", "in_peers", ":", "\n", "                    ", "peer_buffer", "=", "self", ".", "msg_buffer", "[", "peer", "]", "\n", "write_event", "=", "peer_buffer", "[", "2", "]", "[", "rank", "]", "\n", "write_event", ".", "wait", "(", ")", "\n", "write_event", ".", "clear", "(", ")", "\n", "self", ".", "sync_list", "[", "rank", "]", "=", "0", "\n", "# Not done writing, but staleness is still tolerable", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "sync_list", "[", "rank", "]", "+=", "1", "\n", "print", "(", "'%s: staleness %s'", "%", "(", "rank", ",", "self", ".", "sync_list", "[", "rank", "]", ")", ")", "\n", "return", "\n", "\n", "# Lazy-mixing of local params", "\n", "", "num_peers", "=", "self", ".", "topology", "[", "rank", "]", ".", "peers_per_itr", "\n", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "data", ".", "div_", "(", "num_peers", "+", "1", ")", "\n", "\n", "# Aggregate received messages", "\n", "", "for", "peer", "in", "in_peers", ":", "\n", "                ", "peer_buffer", "=", "self", ".", "msg_buffer", "[", "peer", "]", "\n", "lock", "=", "peer_buffer", "[", "3", "]", "\n", "with", "lock", ":", "\n", "# Read message and update 'params'", "\n", "                    ", "peer_msg", "=", "peer_buffer", "[", "0", "]", "\n", "for", "p", ",", "bp", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "\n", "peer_msg", ".", "parameters", "(", ")", ")", ":", "\n", "                        ", "p", ".", "data", ".", "add_", "(", "bp", ".", "to", "(", "p", ".", "device", ",", "non_blocking", "=", "True", ")", ")", "\n", "", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "synchronize", "(", ")", "\n", "# Mark message as 'read'", "\n", "peer_buffer", "[", "1", "]", "[", "rank", "]", ".", "set", "(", ")", "\n", "", "", "", "", "", ""]]}