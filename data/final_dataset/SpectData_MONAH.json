{"home.repos.pwc.inspect_result.SpectData_MONAH.Stage_4.main.weave_session_level_transcript": [[16, 60], ["Python.run_creating_directories", "Python.get_demographics_blob", "Python.get_prosody_blob", "Python.get_actions_blob", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.concat", "pd.concat.to_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.Audio_files_manipulation.copy_mp4_files.run_creating_directories", "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_demographics_parent.get_demographics_blob", "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_parent.get_prosody_blob", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_parent.get_actions_blob"], ["def", "weave_session_level_transcript", "(", "video_name_1", ",", "\n", "video_name_2", ",", "\n", "d_word_count", ",", "\n", "p_delay", ",", "\n", "p_wpm", ",", "\n", "p_tone", ",", "\n", "a_au", ",", "\n", "a_posiface", ",", "\n", "a_smile", ",", "\n", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    combine session level transcripts\n    :param video_name_1:\n    :param video_name_2:\n    :return:\n    '''", "\n", "\n", "cdi", ".", "run_creating_directories", "(", "video_name_1", ",", "video_name_2", ")", "\n", "sdp", ".", "get_demographics_blob", "(", "video_name_1", ",", "video_name_2", ",", "word_count", "=", "d_word_count", ",", "\n", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "spp", ".", "get_prosody_blob", "(", "video_name_1", ",", "video_name_2", ",", "delay", "=", "p_delay", ",", "wpm", "=", "p_wpm", ",", "tone", "=", "p_tone", ")", "\n", "sap", ".", "get_actions_blob", "(", "video_name_1", ",", "video_name_2", ",", "au_action", "=", "a_au", ",", "posiface", "=", "a_posiface", ",", "smile", "=", "a_smile", ")", "\n", "\n", "demographics_blob", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'Demographics'", ",", "\n", "'narrative_coarse.csv'", ")", ")", "\n", "prosody_blob", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'Prosody'", ",", "\n", "'narrative_coarse.csv'", ")", ")", "\n", "actions_blob", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'Actions'", ",", "\n", "'narrative_coarse.csv'", ")", ")", "\n", "\n", "narrative_coarse", "=", "pd", ".", "concat", "(", "[", "demographics_blob", ",", "prosody_blob", ",", "actions_blob", "]", ",", "axis", "=", "0", ")", "\n", "narrative_coarse", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'narrative_coarse.csv'", ")", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_4.create_directories.run_creating_directories": [[7, 20], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "run_creating_directories", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Create directory for session-level transcripts\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ")", "\n", "for", "sub_folder", "in", "[", "'Actions'", ",", "'Demographics'", ",", "'Mimicry'", ",", "'Prosody'", ",", "'Semantics'", "]", ":", "\n", "        ", "sub_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "sub_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sub_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "sub_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_delay.z_score_per_dev_fold": [[16, 30], ["pandas.DataFrame", "pandas.DataFrame", "df_train.video_id.apply", "df_result.append.append", "x.split"], "function", ["None"], ["def", "z_score_per_dev_fold", "(", "df", ",", "col_name", ")", ":", "\n", "# for loop", "\n", "    ", "df_result", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"Video_ID\"", ",", "col_name", "+", "'_z'", "]", ")", "\n", "df_train", "=", "df", "\n", "train_mil", "=", "cfg", ".", "parameters_cfg", "[", "'p_'", "+", "col_name", "+", "'_mu'", "]", "\n", "train_sd", "=", "cfg", ".", "parameters_cfg", "[", "'p_'", "+", "col_name", "+", "'_sd'", "]", "\n", "\n", "df_series", "=", "(", "df", "[", "col_name", "]", "-", "train_mil", ")", "/", "(", "train_sd", ")", "\n", "df_return", "=", "pd", ".", "DataFrame", "(", ")", "\n", "df_return", "[", "'Video_ID'", "]", "=", "df_train", ".", "video_id", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "df_return", "[", "col_name", "+", "'_z'", "]", "=", "df_series", "\n", "\n", "df_result", "=", "df_result", ".", "append", "(", "df_return", ")", "\n", "return", "df_result", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_delay.get_z_bucket": [[31, 46], ["pandas.DataFrame"], "function", ["None"], ["", "def", "get_z_bucket", "(", "z_series", ")", ":", "\n", "    ", "'''\n    takes in the z_series and outputs the bucket very low;low;high;very high\n    '''", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "z_series", ")", "\n", "df", ".", "columns", "=", "[", "'z'", "]", "\n", "\n", "df", "[", "'z_bucket'", "]", "=", "None", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "1", ",", "'z_bucket'", "]", "=", "'low'", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "2", ",", "'z_bucket'", "]", "=", "'very low'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "1", ",", "'z_bucket'", "]", "=", "'high'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "2", ",", "'z_bucket'", "]", "=", "'very high'", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_delay.run_dataframe": [[47, 67], ["pandas.read_csv", "data.reset_index.groupby().agg", "data.reset_index.reset_index", "data.reset_index.delay_std.apply", "os.path.join", "data.reset_index.groupby"], "function", ["None"], ["", "def", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Load dataframe of summary metrics\n    :return: dataframe of metrics\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "'talkturn_delay.csv'", ")", ")", "\n", "data", "=", "data", "[", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "'delay'", "]", "]", "\n", "data", "=", "data", ".", "groupby", "(", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", "]", ")", ".", "agg", "(", "\n", "{", "'delay'", ":", "[", "min", ",", "max", ",", "'mean'", ",", "'std'", "]", "}", "\n", ")", "\n", "data", "=", "data", ".", "reset_index", "(", ")", "\n", "data", ".", "columns", "=", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "\n", "'delay_min'", ",", "'delay_max'", ",", "'delay_mean'", ",", "'delay_std'", "]", "\n", "data", "[", "'delay_va'", "]", "=", "data", ".", "delay_std", ".", "apply", "(", "lambda", "x", ":", "x", "*", "x", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_delay.get_blob": [[68, 107], ["session_prosody_delay.z_score_per_dev_fold", "pandas.concat", "print", "pd.concat.copy", "tqdm.tqdm", "range", "session_prosody_delay.get_z_bucket", "len", "print"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.z_score_per_dev_fold", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_z_bucket"], ["", "def", "get_blob", "(", "variable", ",", "fxn", ",", "speaker", ",", "data", ")", ":", "\n", "    ", "'''\n    Generates blob\n    :param variable: specific AU variable being analyzed\n    :param fxn: mean/std/min/max\n    :param speaker: speaker 1 or speaker 2\n    :return:\n    '''", "\n", "var", "=", "z_score_per_dev_fold", "(", "df", "=", "data", ".", "loc", "[", "(", "data", "[", "'speaker'", "]", "==", "speaker", ")", "]", ",", "\n", "col_name", "=", "variable", "+", "'_'", "+", "fxn", ")", "\n", "var", "=", "pd", ".", "concat", "(", "[", "var", ",", "get_z_bucket", "(", "var", "[", "variable", "+", "'_'", "+", "fxn", "+", "'_z'", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "if", "fxn", "==", "'mean'", ":", "\n", "        ", "text", "=", "'average'", "\n", "", "elif", "fxn", "==", "'va'", ":", "\n", "        ", "text", "=", "'variance'", "\n", "", "elif", "fxn", "==", "'min'", ":", "\n", "        ", "text", "=", "'minimum'", "\n", "", "elif", "fxn", "==", "'max'", ":", "\n", "        ", "text", "=", "'maximum'", "\n", "", "else", ":", "\n", "        ", "text", "=", "''", "\n", "\n", "", "variable_text", "=", "'delay'", "\n", "\n", "print", "(", "'Generating '", ",", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", ")", "\n", "i", "=", "0", "\n", "df_copy", "=", "var", ".", "copy", "(", ")", "\n", "df_copy", "[", "'blob'", "]", "=", "None", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "var", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "var", ".", "iloc", "[", "i", "]", "\n", "if", "row_df", "[", "'z_bucket'", "]", "==", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "df_copy", ".", "blob", ".", "iloc", "[", "i", "]", "=", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", "+", "row_df", "[", "'z_bucket'", "]", "+", "' '", "\n", "print", "(", "df_copy", ")", "\n", "\n", "", "", "return", "df_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_delay.get_all_blob": [[108, 139], ["session_prosody_delay.run_dataframe", "pandas.DataFrame", "pd.concat.fillna", "[].apply().reset_index", "tqdm.tqdm", "range", "pd.concat.sort_values", "[].apply", "len", "session_prosody_delay.get_blob", "print", "pandas.concat", "len", "pd.concat.groupby"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.run_dataframe", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_blob"], ["", "def", "get_all_blob", "(", "video_name_1", ",", "video_name_2", ")", ":", "\n", "# Importing connection object", "\n", "    ", "data", "=", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ")", "\n", "\n", "delay_blob", "=", "pd", ".", "DataFrame", "(", ")", "\n", "speakers", "=", "[", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", ",", "cfg", ".", "parameters_cfg", "[", "'speaker_2'", "]", "]", "\n", "\n", "for", "speaker", "in", "speakers", ":", "\n", "        ", "for", "fxn", "in", "[", "'mean'", ",", "'va'", ",", "'min'", ",", "'max'", "]", ":", "\n", "            ", "for", "variable_text", "in", "[", "'delay'", "]", ":", "\n", "                ", "blob", "=", "get_blob", "(", "variable_text", ",", "fxn", ",", "speaker", ",", "data", ")", "\n", "print", "(", "blob", ")", "\n", "delay_blob", "=", "pd", ".", "concat", "(", "[", "delay_blob", ",", "\n", "blob", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "delay_blob", ".", "fillna", "(", "value", "=", "''", ",", "inplace", "=", "True", ")", "\n", "\n", "delay_blob", "=", "delay_blob", ".", "groupby", "(", "[", "'Video_ID'", "]", ")", "[", "\n", "'blob'", "]", ".", "apply", "(", "lambda", "x", ":", "''", ".", "join", "(", "x", ")", ")", ".", "reset_index", "(", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "delay_blob", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "delay_blob", ".", "iloc", "[", "i", "]", "\n", "if", "not", "row_df", "[", "'blob'", "]", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "row_df", "[", "'blob'", "]", ")", ">", "0", ":", "\n", "                ", "delay_blob", ".", "blob", ".", "iloc", "[", "i", "]", "=", "row_df", "[", "'blob'", "]", "[", ":", "-", "1", "]", "+", "'. '", "\n", "\n", "", "", "delay_blob", "=", "delay_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "\n", "", "return", "delay_blob", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_parent.get_prosody_blob": [[17, 78], ["Python.get_all_blob", "Python.get_all_blob", "Python.get_all_blob", "speechrate_blob.sort_values.sort_values", "speechrate_blob.sort_values.blob.apply", "delay_blob.sort_values.sort_values", "delay_blob.sort_values.blob.apply", "tone_blob.sort_values.sort_values", "tone_blob.sort_values.blob.apply", "len", "len", "len", "pandas.merge", "pd.merge.fillna", "pandas.merge", "pd.merge.fillna", "export.to_csv", "set", "set", "set", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_all_blob", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_all_blob", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_all_blob"], ["def", "get_prosody_blob", "(", "video_name_1", ",", "video_name_2", ",", "delay", ",", "wpm", ",", "tone", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Combining all action transcripts in one blob\n    :param video_name_1:\n    :param video_name_2:\n    :return:\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "speechrate_blob", "=", "sps", ".", "get_all_blob", "(", "video_name_1", ",", "\n", "video_name_2", ")", "\n", "delay_blob", "=", "spd", ".", "get_all_blob", "(", "video_name_1", ",", "\n", "video_name_2", ")", "\n", "tone_blob", "=", "spt", ".", "get_all_blob", "(", "video_name_1", ",", "\n", "video_name_2", ")", "\n", "\n", "speechrate_blob", "=", "speechrate_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "speechrate_blob", "[", "'blob'", "]", "=", "speechrate_blob", ".", "blob", ".", "apply", "(", "lambda", "x", ":", "x", "if", "wpm", "==", "1", "else", "''", ")", "\n", "\n", "delay_blob", "=", "delay_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "delay_blob", "[", "'blob'", "]", "=", "delay_blob", ".", "blob", ".", "apply", "(", "lambda", "x", ":", "x", "if", "delay", "==", "1", "else", "''", ")", "\n", "\n", "tone_blob", "=", "tone_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "tone_blob", "[", "'blob'", "]", "=", "tone_blob", ".", "blob", ".", "apply", "(", "lambda", "x", ":", "x", "if", "tone", "==", "1", "else", "''", ")", "\n", "\n", "len", "(", "set", "(", "speechrate_blob", ".", "Video_ID", ")", ")", "\n", "len", "(", "set", "(", "delay_blob", ".", "Video_ID", ")", ")", "\n", "len", "(", "set", "(", "tone_blob", ".", "Video_ID", ")", ")", "\n", "\n", "prosody_blob", "=", "pd", ".", "merge", "(", "left", "=", "tone_blob", ",", "right", "=", "delay_blob", ",", "\n", "on", "=", "[", "'Video_ID'", "]", ",", "\n", "how", "=", "'left'", ")", "\n", "\n", "prosody_blob", ".", "fillna", "(", "value", "=", "''", ",", "inplace", "=", "True", ")", "\n", "\n", "prosody_blob", "[", "'prosody_blob'", "]", "=", "prosody_blob", "[", "'blob_x'", "]", "+", "prosody_blob", "[", "'blob_y'", "]", "\n", "\n", "prosody_blob", "=", "prosody_blob", "[", "[", "'Video_ID'", ",", "'prosody_blob'", "]", "]", "\n", "\n", "prosody_blob", "=", "pd", ".", "merge", "(", "left", "=", "prosody_blob", ",", "right", "=", "speechrate_blob", ",", "\n", "on", "=", "[", "'Video_ID'", "]", ",", "\n", "how", "=", "'left'", ")", "\n", "\n", "prosody_blob", ".", "fillna", "(", "value", "=", "''", ",", "inplace", "=", "True", ")", "\n", "\n", "prosody_blob", "[", "'prosody_blob'", "]", "=", "prosody_blob", "[", "'prosody_blob'", "]", "+", "prosody_blob", "[", "'blob'", "]", "\n", "\n", "prosody_blob", "=", "prosody_blob", "[", "[", "'Video_ID'", ",", "'prosody_blob'", "]", "]", "\n", "\n", "# EXPORT", "\n", "\n", "prosody_blob", "[", "'family'", "]", "=", "'prosody'", "\n", "export", "=", "prosody_blob", "[", "[", "'Video_ID'", ",", "'family'", ",", "'prosody_blob'", "]", "]", "\n", "export", ".", "columns", "=", "[", "'Video_ID'", ",", "'family'", ",", "'text_blob'", "]", "\n", "\n", "export", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'Prosody'", ",", "\n", "'narrative_coarse.csv'", ")", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_speechrate.z_score_per_dev_fold": [[16, 30], ["pandas.DataFrame", "pandas.DataFrame", "df_train.video_id.apply", "df_result.append.append", "x.split"], "function", ["None"], ["def", "z_score_per_dev_fold", "(", "df", ",", "col_name", ")", ":", "\n", "# for loop", "\n", "    ", "df_result", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"Video_ID\"", ",", "col_name", "+", "'_z'", "]", ")", "\n", "df_train", "=", "df", "\n", "train_mil", "=", "cfg", ".", "parameters_cfg", "[", "'p_'", "+", "col_name", "+", "'_mu'", "]", "\n", "train_sd", "=", "cfg", ".", "parameters_cfg", "[", "'p_'", "+", "col_name", "+", "'_sd'", "]", "\n", "\n", "df_series", "=", "(", "df", "[", "col_name", "]", "-", "train_mil", ")", "/", "(", "train_sd", ")", "\n", "df_return", "=", "pd", ".", "DataFrame", "(", ")", "\n", "df_return", "[", "'Video_ID'", "]", "=", "df_train", ".", "video_id", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "df_return", "[", "col_name", "+", "'_z'", "]", "=", "df_series", "\n", "\n", "df_result", "=", "df_result", ".", "append", "(", "df_return", ")", "\n", "return", "df_result", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_speechrate.get_z_bucket": [[31, 46], ["pandas.DataFrame"], "function", ["None"], ["", "def", "get_z_bucket", "(", "z_series", ")", ":", "\n", "    ", "'''\n    takes in the z_series and outputs the bucket very low;low;high;very high\n    '''", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "z_series", ")", "\n", "df", ".", "columns", "=", "[", "'z'", "]", "\n", "\n", "df", "[", "'z_bucket'", "]", "=", "None", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "1", ",", "'z_bucket'", "]", "=", "'low'", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "2", ",", "'z_bucket'", "]", "=", "'very low'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "1", ",", "'z_bucket'", "]", "=", "'high'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "2", ",", "'z_bucket'", "]", "=", "'very high'", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_speechrate.run_dataframe": [[47, 66], ["pandas.read_csv", "data.reset_index.groupby().agg", "data.reset_index.reset_index", "data.reset_index.wpm_std.apply", "os.path.join", "data.reset_index.groupby"], "function", ["None"], ["", "def", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Load dataframe of summary metrics\n    :return: dataframe of metrics\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "'talkturn_wpm.csv'", ")", ")", "\n", "data", "=", "data", "[", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "'wpm'", "]", "]", "\n", "data", "=", "data", ".", "groupby", "(", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", "]", ")", ".", "agg", "(", "\n", "{", "'wpm'", ":", "[", "'mean'", ",", "'std'", "]", "}", "\n", ")", "\n", "data", "=", "data", ".", "reset_index", "(", ")", "\n", "data", ".", "columns", "=", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "'wpm_mean'", ",", "'wpm_std'", "]", "\n", "data", "[", "'wpm_va'", "]", "=", "data", ".", "wpm_std", ".", "apply", "(", "lambda", "x", ":", "x", "*", "x", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_speechrate.get_blob": [[67, 106], ["session_prosody_speechrate.z_score_per_dev_fold", "pandas.concat", "print", "pd.concat.copy", "tqdm.tqdm", "range", "session_prosody_speechrate.get_z_bucket", "len", "print"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.z_score_per_dev_fold", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_z_bucket"], ["", "def", "get_blob", "(", "variable", ",", "fxn", ",", "speaker", ",", "data", ")", ":", "\n", "    ", "'''\n    Generates blob\n    :param variable: specific AU variable being analyzed\n    :param fxn: mean/std/min/max\n    :param speaker: speaker 1 or speaker 2\n    :return:\n    '''", "\n", "var", "=", "z_score_per_dev_fold", "(", "df", "=", "data", ".", "loc", "[", "(", "data", "[", "'speaker'", "]", "==", "speaker", ")", "]", ",", "\n", "col_name", "=", "variable", "+", "'_'", "+", "fxn", ")", "\n", "var", "=", "pd", ".", "concat", "(", "[", "var", ",", "get_z_bucket", "(", "var", "[", "variable", "+", "'_'", "+", "fxn", "+", "'_z'", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "if", "fxn", "==", "'mean'", ":", "\n", "        ", "text", "=", "'average'", "\n", "", "elif", "fxn", "==", "'va'", ":", "\n", "        ", "text", "=", "'variance'", "\n", "", "elif", "fxn", "==", "'min'", ":", "\n", "        ", "text", "=", "'minimum'", "\n", "", "elif", "fxn", "==", "'max'", ":", "\n", "        ", "text", "=", "'maximum'", "\n", "", "else", ":", "\n", "        ", "text", "=", "''", "\n", "\n", "", "variable_text", "=", "'speech rate'", "\n", "\n", "print", "(", "'Generating '", ",", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", ")", "\n", "i", "=", "0", "\n", "df_copy", "=", "var", ".", "copy", "(", ")", "\n", "df_copy", "[", "'blob'", "]", "=", "None", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "var", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "var", ".", "iloc", "[", "i", "]", "\n", "if", "row_df", "[", "'z_bucket'", "]", "==", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "df_copy", ".", "blob", ".", "iloc", "[", "i", "]", "=", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", "+", "row_df", "[", "'z_bucket'", "]", "+", "' '", "\n", "print", "(", "df_copy", ")", "\n", "\n", "", "", "return", "df_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_speechrate.get_all_blob": [[107, 138], ["session_prosody_speechrate.run_dataframe", "pandas.DataFrame", "pd.concat.fillna", "[].apply().reset_index", "tqdm.tqdm", "range", "pd.concat.sort_values", "[].apply", "len", "session_prosody_speechrate.get_blob", "print", "pandas.concat", "len", "pd.concat.groupby"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.run_dataframe", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_blob"], ["", "def", "get_all_blob", "(", "video_name_1", ",", "video_name_2", ")", ":", "\n", "# Importing connection object", "\n", "    ", "data", "=", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ")", "\n", "\n", "speechrate_blob", "=", "pd", ".", "DataFrame", "(", ")", "\n", "speakers", "=", "[", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", ",", "cfg", ".", "parameters_cfg", "[", "'speaker_2'", "]", "]", "\n", "\n", "for", "speaker", "in", "speakers", ":", "\n", "        ", "for", "fxn", "in", "[", "'mean'", ",", "'va'", "]", ":", "\n", "            ", "for", "variable_text", "in", "[", "'wpm'", "]", ":", "\n", "                ", "blob", "=", "get_blob", "(", "variable_text", ",", "fxn", ",", "speaker", ",", "data", ")", "\n", "print", "(", "blob", ")", "\n", "speechrate_blob", "=", "pd", ".", "concat", "(", "[", "speechrate_blob", ",", "\n", "blob", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "speechrate_blob", ".", "fillna", "(", "value", "=", "''", ",", "inplace", "=", "True", ")", "\n", "\n", "speechrate_blob", "=", "speechrate_blob", ".", "groupby", "(", "[", "'Video_ID'", "]", ")", "[", "\n", "'blob'", "]", ".", "apply", "(", "lambda", "x", ":", "''", ".", "join", "(", "x", ")", ")", ".", "reset_index", "(", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "speechrate_blob", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "speechrate_blob", ".", "iloc", "[", "i", "]", "\n", "if", "not", "row_df", "[", "'blob'", "]", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "row_df", "[", "'blob'", "]", ")", ">", "0", ":", "\n", "                ", "speechrate_blob", ".", "blob", ".", "iloc", "[", "i", "]", "=", "row_df", "[", "'blob'", "]", "[", ":", "-", "1", "]", "+", "'. '", "\n", "\n", "", "", "speechrate_blob", "=", "speechrate_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "\n", "", "return", "speechrate_blob", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_tone.z_score_per_dev_fold": [[16, 30], ["pandas.DataFrame", "pandas.DataFrame", "df_train.video_id.apply", "df_result.append.append", "x.split"], "function", ["None"], ["def", "z_score_per_dev_fold", "(", "df", ",", "col_name", ")", ":", "\n", "# for loop", "\n", "    ", "df_result", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"Video_ID\"", ",", "col_name", "+", "'_z'", "]", ")", "\n", "df_train", "=", "df", "\n", "train_mil", "=", "cfg", ".", "parameters_cfg", "[", "'p_'", "+", "col_name", "+", "'_mu'", "]", "\n", "train_sd", "=", "cfg", ".", "parameters_cfg", "[", "'p_'", "+", "col_name", "+", "'_sd'", "]", "\n", "\n", "df_series", "=", "(", "df", "[", "col_name", "]", "-", "train_mil", ")", "/", "(", "train_sd", ")", "\n", "df_return", "=", "pd", ".", "DataFrame", "(", ")", "\n", "df_return", "[", "'Video_ID'", "]", "=", "df_train", ".", "video_id", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "df_return", "[", "col_name", "+", "'_z'", "]", "=", "df_series", "\n", "\n", "df_result", "=", "df_result", ".", "append", "(", "df_return", ")", "\n", "return", "df_result", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_tone.get_z_bucket": [[31, 46], ["pandas.DataFrame"], "function", ["None"], ["", "def", "get_z_bucket", "(", "z_series", ")", ":", "\n", "    ", "'''\n    takes in the z_series and outputs the bucket very low;low;high;very high\n    '''", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "z_series", ")", "\n", "df", ".", "columns", "=", "[", "'z'", "]", "\n", "\n", "df", "[", "'z_bucket'", "]", "=", "None", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "1", ",", "'z_bucket'", "]", "=", "'low'", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "2", ",", "'z_bucket'", "]", "=", "'very low'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "1", ",", "'z_bucket'", "]", "=", "'high'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "2", ",", "'z_bucket'", "]", "=", "'very high'", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_tone.run_dataframe": [[47, 78], ["pandas.read_csv", "data.reset_index.groupby().agg", "data.reset_index.reset_index", "data.reset_index.neutrality_std.apply", "data.reset_index.happiness_std.apply", "data.reset_index.sadness_std.apply", "data.reset_index.anger_std.apply", "data.reset_index.fear_std.apply", "os.path.join", "data.reset_index.groupby"], "function", ["None"], ["", "def", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Load dataframe of summary metrics\n    :return: dataframe of metrics\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_1'", ",", "\n", "'talkturn_vokaturi.csv'", ")", ")", "\n", "data", "=", "data", "[", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "\n", "'neutrality'", ",", "'happiness'", ",", "'sadness'", ",", "'anger'", ",", "'fear'", "]", "]", "\n", "data", "=", "data", ".", "groupby", "(", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", "]", ")", ".", "agg", "(", "\n", "{", "'neutrality'", ":", "[", "'mean'", ",", "'std'", "]", ",", "'happiness'", ":", "[", "'mean'", ",", "'std'", "]", ",", "\n", "'sadness'", ":", "[", "'mean'", ",", "'std'", "]", ",", "'anger'", ":", "[", "'mean'", ",", "'std'", "]", ",", "\n", "'fear'", ":", "[", "'mean'", ",", "'std'", "]", "}", "\n", ")", "\n", "data", "=", "data", ".", "reset_index", "(", ")", "\n", "data", ".", "columns", "=", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "\n", "'neutrality_mean'", ",", "'neutrality_std'", ",", "\n", "'happiness_mean'", ",", "'happiness_std'", ",", "\n", "'sadness_mean'", ",", "'sadness_std'", ",", "\n", "'anger_mean'", ",", "'anger_std'", ",", "\n", "'fear_mean'", ",", "'fear_std'", "]", "\n", "data", "[", "'neutrality_va'", "]", "=", "data", ".", "neutrality_std", ".", "apply", "(", "lambda", "x", ":", "x", "*", "x", ")", "\n", "data", "[", "'happiness_va'", "]", "=", "data", ".", "happiness_std", ".", "apply", "(", "lambda", "x", ":", "x", "*", "x", ")", "\n", "data", "[", "'sadness_va'", "]", "=", "data", ".", "sadness_std", ".", "apply", "(", "lambda", "x", ":", "x", "*", "x", ")", "\n", "data", "[", "'anger_va'", "]", "=", "data", ".", "anger_std", ".", "apply", "(", "lambda", "x", ":", "x", "*", "x", ")", "\n", "data", "[", "'fear_va'", "]", "=", "data", ".", "fear_std", ".", "apply", "(", "lambda", "x", ":", "x", "*", "x", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_tone.get_blob": [[79, 118], ["session_prosody_tone.z_score_per_dev_fold", "pandas.concat", "print", "pd.concat.copy", "tqdm.tqdm", "range", "session_prosody_tone.get_z_bucket", "len", "print"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.z_score_per_dev_fold", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_z_bucket"], ["", "def", "get_blob", "(", "variable", ",", "fxn", ",", "speaker", ",", "data", ")", ":", "\n", "    ", "'''\n    Generates blob\n    :param variable: specific AU variable being analyzed\n    :param fxn: mean/std/min/max\n    :param speaker: speaker 1 or speaker 2\n    :return:\n    '''", "\n", "var", "=", "z_score_per_dev_fold", "(", "df", "=", "data", ".", "loc", "[", "(", "data", "[", "'speaker'", "]", "==", "speaker", ")", "]", ",", "\n", "col_name", "=", "variable", "+", "'_'", "+", "fxn", ")", "\n", "var", "=", "pd", ".", "concat", "(", "[", "var", ",", "get_z_bucket", "(", "var", "[", "variable", "+", "'_'", "+", "fxn", "+", "'_z'", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "if", "fxn", "==", "'mean'", ":", "\n", "        ", "text", "=", "'average'", "\n", "", "elif", "fxn", "==", "'va'", ":", "\n", "        ", "text", "=", "'variance'", "\n", "", "elif", "fxn", "==", "'min'", ":", "\n", "        ", "text", "=", "'minimum'", "\n", "", "elif", "fxn", "==", "'max'", ":", "\n", "        ", "text", "=", "'maximum'", "\n", "", "else", ":", "\n", "        ", "text", "=", "''", "\n", "\n", "", "variable_text", "=", "variable", "+", "' tone'", "\n", "\n", "print", "(", "'Generating '", ",", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", ")", "\n", "i", "=", "0", "\n", "df_copy", "=", "var", ".", "copy", "(", ")", "\n", "df_copy", "[", "'blob'", "]", "=", "None", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "var", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "var", ".", "iloc", "[", "i", "]", "\n", "if", "row_df", "[", "'z_bucket'", "]", "==", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "df_copy", ".", "blob", ".", "iloc", "[", "i", "]", "=", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", "+", "row_df", "[", "'z_bucket'", "]", "+", "' '", "\n", "print", "(", "df_copy", ")", "\n", "\n", "", "", "return", "df_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.prosody.session_prosody_tone.get_all_blob": [[119, 150], ["session_prosody_tone.run_dataframe", "pandas.DataFrame", "pd.concat.fillna", "[].apply().reset_index", "tqdm.tqdm", "range", "pd.concat.sort_values", "[].apply", "len", "session_prosody_tone.get_blob", "print", "pandas.concat", "len", "pd.concat.groupby"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.run_dataframe", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_blob"], ["", "def", "get_all_blob", "(", "video_name_1", ",", "video_name_2", ")", ":", "\n", "# Importing connection object", "\n", "    ", "data", "=", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ")", "\n", "\n", "tone_blob", "=", "pd", ".", "DataFrame", "(", ")", "\n", "speakers", "=", "[", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", ",", "cfg", ".", "parameters_cfg", "[", "'speaker_2'", "]", "]", "\n", "\n", "for", "speaker", "in", "speakers", ":", "\n", "        ", "for", "fxn", "in", "[", "'mean'", ",", "'va'", "]", ":", "\n", "            ", "for", "variable_text", "in", "[", "'neutrality'", ",", "'happiness'", ",", "'sadness'", ",", "'anger'", ",", "'fear'", "]", ":", "\n", "                ", "blob", "=", "get_blob", "(", "variable_text", ",", "fxn", ",", "speaker", ",", "data", ")", "\n", "print", "(", "blob", ")", "\n", "tone_blob", "=", "pd", ".", "concat", "(", "[", "tone_blob", ",", "\n", "blob", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "tone_blob", ".", "fillna", "(", "value", "=", "''", ",", "inplace", "=", "True", ")", "\n", "\n", "tone_blob", "=", "tone_blob", ".", "groupby", "(", "[", "'Video_ID'", "]", ")", "[", "\n", "'blob'", "]", ".", "apply", "(", "lambda", "x", ":", "''", ".", "join", "(", "x", ")", ")", ".", "reset_index", "(", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "tone_blob", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "tone_blob", ".", "iloc", "[", "i", "]", "\n", "if", "not", "row_df", "[", "'blob'", "]", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "row_df", "[", "'blob'", "]", ")", ">", "0", ":", "\n", "                ", "tone_blob", ".", "blob", ".", "iloc", "[", "i", "]", "=", "row_df", "[", "'blob'", "]", "[", ":", "-", "1", "]", "+", "'. '", "\n", "\n", "", "", "tone_blob", "=", "tone_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "\n", "", "return", "tone_blob", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_demographics_talkativeness.z_score_per_dev_fold": [[20, 35], ["pandas.DataFrame", "pandas.DataFrame", "df_train.video_id.apply", "df_result.append.append", "x.split"], "function", ["None"], ["def", "z_score_per_dev_fold", "(", "df", ",", "col_name", ")", ":", "\n", "\n", "# for loop", "\n", "    ", "df_result", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"Video_ID\"", ",", "col_name", "+", "'_z'", "]", ")", "\n", "df_train", "=", "df", "\n", "train_mil", "=", "cfg", ".", "parameters_cfg", "[", "'d_'", "+", "col_name", "+", "'_mu'", "]", "\n", "train_sd", "=", "cfg", ".", "parameters_cfg", "[", "'d_'", "+", "col_name", "+", "'_sd'", "]", "\n", "\n", "df_series", "=", "(", "df", "[", "col_name", "]", "-", "train_mil", ")", "/", "(", "train_sd", ")", "\n", "df_return", "=", "pd", ".", "DataFrame", "(", ")", "\n", "df_return", "[", "'Video_ID'", "]", "=", "df_train", ".", "video_id", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "df_return", "[", "col_name", "+", "'_z'", "]", "=", "df_series", "\n", "\n", "df_result", "=", "df_result", ".", "append", "(", "df_return", ")", "\n", "return", "df_result", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_demographics_talkativeness.get_z_bucket": [[36, 52], ["pandas.DataFrame"], "function", ["None"], ["", "def", "get_z_bucket", "(", "z_series", ")", ":", "\n", "    ", "'''\n    takes in the z_series and outputs the bucket very low;low;high;very high\n    '''", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "z_series", ")", "\n", "df", ".", "columns", "=", "[", "'z'", "]", "\n", "\n", "df", "[", "'z_bucket'", "]", "=", "None", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "1", ",", "'z_bucket'", "]", "=", "'low'", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "2", ",", "'z_bucket'", "]", "=", "'very low'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "1", ",", "'z_bucket'", "]", "=", "'high'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "2", ",", "'z_bucket'", "]", "=", "'very high'", "\n", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_demographics_talkativeness.run_dataframe": [[53, 66], ["Python.run_computing_wordcount", "pandas.read_csv", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_level_wordcount.run_computing_wordcount"], ["", "def", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Load dataframe of summary metrics\n    :return: dataframe of metrics\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "slw", ".", "run_computing_wordcount", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'Demographics'", ",", "\n", "'session_level_wordcount.csv'", ")", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_demographics_talkativeness.get_blob": [[67, 104], ["session_demographics_talkativeness.z_score_per_dev_fold", "pandas.concat", "print", "pd.concat.copy", "tqdm.tqdm", "range", "session_demographics_talkativeness.get_z_bucket", "len", "print"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.z_score_per_dev_fold", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_z_bucket"], ["", "def", "get_blob", "(", "variable", ",", "fxn", ",", "speaker", ",", "data", ")", ":", "\n", "    ", "'''\n    Generates blob\n    :param variable: specific AU variable being analyzed\n    :param fxn: mean/std/min/max\n    :param speaker: speaker 1 or speaker 2\n    :return:\n    '''", "\n", "var", "=", "z_score_per_dev_fold", "(", "df", "=", "data", ".", "loc", "[", "(", "data", "[", "'speaker'", "]", "==", "speaker", ")", "]", ",", "\n", "col_name", "=", "variable", "+", "'_'", "+", "fxn", ")", "\n", "var", "=", "pd", ".", "concat", "(", "[", "var", ",", "get_z_bucket", "(", "var", "[", "variable", "+", "'_'", "+", "fxn", "+", "'_z'", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "if", "fxn", "==", "'count'", ":", "\n", "        ", "text", "=", "'number of '", "\n", "", "elif", "fxn", "==", "'uniquecount'", ":", "\n", "        ", "text", "=", "'unique number of '", "\n", "", "elif", "fxn", "==", "'countprop'", ":", "\n", "        ", "text", "=", "'proportion of number of '", "\n", "", "else", ":", "\n", "        ", "text", "=", "''", "\n", "\n", "", "variable_text", "=", "'words'", "\n", "\n", "print", "(", "'Generating '", ",", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", ")", "\n", "i", "=", "0", "\n", "df_copy", "=", "var", ".", "copy", "(", ")", "\n", "df_copy", "[", "'blob'", "]", "=", "None", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "var", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "var", ".", "iloc", "[", "i", "]", "\n", "if", "row_df", "[", "'z_bucket'", "]", "==", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "df_copy", ".", "blob", ".", "iloc", "[", "i", "]", "=", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", "+", "row_df", "[", "'z_bucket'", "]", "+", "' '", "\n", "print", "(", "df_copy", ")", "\n", "\n", "", "", "return", "df_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_demographics_talkativeness.get_all_blob": [[106, 136], ["session_demographics_talkativeness.run_dataframe", "pandas.DataFrame", "[].apply().reset_index", "tqdm.tqdm", "pd.concat.fillna", "range", "pd.concat.sort_values", "[].apply", "len", "session_demographics_talkativeness.get_blob", "pandas.concat", "len", "pd.concat.groupby"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.run_dataframe", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_blob"], ["", "def", "get_all_blob", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "# Importing connection object", "\n", "    ", "data", "=", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", "\n", "\n", "talkativeness_blob", "=", "pd", ".", "DataFrame", "(", ")", "\n", "speakers", "=", "[", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", ",", "cfg", ".", "parameters_cfg", "[", "'speaker_2'", "]", "]", "\n", "\n", "for", "speaker", "in", "speakers", ":", "\n", "        ", "for", "fxn", "in", "[", "'count'", ",", "'countprop'", ",", "'uniquecount'", "]", ":", "\n", "            ", "for", "variable_text", "in", "[", "'word'", "]", ":", "\n", "                ", "blob", "=", "get_blob", "(", "variable_text", ",", "fxn", ",", "speaker", ",", "data", ")", "\n", "talkativeness_blob", "=", "pd", ".", "concat", "(", "[", "talkativeness_blob", ",", "\n", "blob", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "talkativeness_blob", ".", "fillna", "(", "value", "=", "''", ",", "inplace", "=", "True", ")", "\n", "\n", "", "talkativeness_blob", "=", "talkativeness_blob", ".", "groupby", "(", "[", "'Video_ID'", "]", ")", "[", "\n", "'blob'", "]", ".", "apply", "(", "lambda", "x", ":", "''", ".", "join", "(", "x", ")", ")", ".", "reset_index", "(", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "talkativeness_blob", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "talkativeness_blob", ".", "iloc", "[", "i", "]", "\n", "if", "not", "row_df", "[", "'blob'", "]", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "row_df", "[", "'blob'", "]", ")", ">", "0", ":", "\n", "                ", "talkativeness_blob", ".", "blob", ".", "iloc", "[", "i", "]", "=", "row_df", "[", "'blob'", "]", "[", ":", "-", "1", "]", "+", "'. '", "\n", "\n", "", "", "talkativeness_blob", "=", "talkativeness_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "\n", "", "return", "talkativeness_blob", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_demographics_parent.get_demographics_blob": [[12, 42], ["Python.get_all_blob", "word_count_blob.sort_values.sort_values", "word_count_blob.sort_values.blob.apply", "len", "export.to_csv", "set", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_all_blob"], ["def", "get_demographics_blob", "(", "video_name_1", ",", "video_name_2", ",", "word_count", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Combining all action transcripts in one blob\n    :param video_name_1:\n    :param video_name_2:\n    :return:\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "word_count_blob", "=", "sdt", ".", "get_all_blob", "(", "video_name_1", ",", "\n", "video_name_2", ",", "\n", "parallel_run_settings", ")", "\n", "\n", "word_count_blob", "=", "word_count_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "word_count_blob", "[", "'blob'", "]", "=", "word_count_blob", ".", "blob", ".", "apply", "(", "lambda", "x", ":", "x", "if", "word_count", "==", "1", "else", "''", ")", "\n", "\n", "len", "(", "set", "(", "word_count_blob", ".", "Video_ID", ")", ")", "\n", "\n", "demographics_blob", "=", "word_count_blob", "\n", "demographics_blob", ".", "columns", "=", "[", "'Video_ID'", ",", "'demographics_blob'", "]", "\n", "\n", "# EXPORT", "\n", "demographics_blob", "[", "'family'", "]", "=", "'demographics'", "\n", "export", "=", "demographics_blob", "[", "[", "'Video_ID'", ",", "'family'", ",", "'demographics_blob'", "]", "]", "\n", "export", ".", "columns", "=", "[", "'Video_ID'", ",", "'family'", ",", "'text_blob'", "]", "\n", "\n", "export", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'Demographics'", ",", "\n", "'narrative_coarse.csv'", ")", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_level_wordcount.run_dataframe": [[12, 25], ["pandas.read_csv", "[].apply().reset_index", "os.path.join", "[].apply", "pd.read_csv.groupby"], "function", ["None"], ["def", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Load dataframe of summary metrics\n    :return: dataframe of metrics\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "raw_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "'weaved talkturns.csv'", ")", ")", "\n", "data", "=", "raw_data", ".", "groupby", "(", "[", "'video_id'", ",", "'speaker'", "]", ")", "[", "'text'", "]", ".", "apply", "(", "' '", ".", "join", ")", ".", "reset_index", "(", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_level_wordcount.extract_session_wordcount": [[26, 58], ["pandas.DataFrame", "list", "wordcount_data.append.video_id.apply", "wordcount_data.append.groupby().agg", "pd.merge.reset_index", "pandas.merge", "pd.merge.apply", "set", "logging.info", "speaker_data[].item", "len", "wordcount_data.append.append", "wordcount_data.append.groupby", "s.replace.replace", "s.replace.split", "str", "x.split"], "function", ["None"], ["", "def", "extract_session_wordcount", "(", "data", ")", ":", "\n", "    ", "'''\n    Compute for session-level wordcount\n    :param data: session data to be analyzed\n    :return: word count\n    '''", "\n", "wordcount_data", "=", "pd", ".", "DataFrame", "(", ")", "\n", "# Count the total number of words", "\n", "for", "video_id", "in", "list", "(", "set", "(", "data", "[", "'video_id'", "]", ")", ")", ":", "\n", "        ", "video_data", "=", "data", "[", "data", "[", "'video_id'", "]", "==", "video_id", "]", "\n", "for", "speaker", "in", "video_data", "[", "'speaker'", "]", ":", "\n", "            ", "speaker_data", "=", "video_data", "[", "video_data", "[", "'speaker'", "]", "==", "speaker", "]", "\n", "s", "=", "speaker_data", "[", "'text'", "]", ".", "item", "(", ")", "\n", "for", "char", "in", "'-.,\\n'", ":", "\n", "                ", "s", "=", "s", ".", "replace", "(", "char", ",", "' '", ")", "# replace special characters with space", "\n", "", "speaker_data", "[", "'word_count'", "]", "=", "len", "(", "s", ".", "split", "(", ")", ")", "\n", "wordcount_data", "=", "wordcount_data", ".", "append", "(", "speaker_data", ")", "\n", "\n", "", "logging", ".", "info", "(", "str", "(", "video_id", ")", "+", "\" word count done\"", ")", "\n", "", "wordcount_data", "=", "wordcount_data", "[", "[", "'video_id'", ",", "'speaker'", ",", "'word_count'", "]", "]", "\n", "wordcount_data", "[", "'audio_id'", "]", "=", "wordcount_data", ".", "video_id", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "\n", "\n", "# Compute for proportion", "\n", "total_data", "=", "wordcount_data", ".", "groupby", "(", "[", "'audio_id'", "]", ")", ".", "agg", "(", "{", "'word_count'", ":", "sum", "}", ")", "\n", "total_data", "=", "total_data", ".", "reset_index", "(", ")", "\n", "total_data", ".", "columns", "=", "[", "'audio_id'", ",", "'total_word_count'", "]", "\n", "total_data", "=", "pd", ".", "merge", "(", "total_data", ",", "wordcount_data", ",", "how", "=", "\"inner\"", ",", "on", "=", "\"audio_id\"", ")", "\n", "total_data", "[", "'word_countprop'", "]", "=", "total_data", ".", "apply", "(", "lambda", "x", ":", "\n", "x", "[", "'word_count'", "]", "/", "x", "[", "'total_word_count'", "]", ",", "axis", "=", "1", ")", "\n", "total_data", "=", "total_data", "[", "[", "'video_id'", ",", "'speaker'", ",", "'word_count'", ",", "'word_countprop'", "]", "]", "\n", "\n", "return", "total_data", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_level_wordcount.extract_session_unique_wordcount": [[59, 86], ["pandas.DataFrame", "list", "[].count", "unique_wordcount_data.reset_index.reset_index", "set", "speaker_data.text.apply().sum", "speaker_data.text.apply().sum.to_frame().reset_index", "wordcount_data.append.append", "logging.info", "wordcount_data.append.groupby", "speaker_data.text.apply", "speaker_data.text.apply().sum.to_frame", "str", "pandas.value_counts", "x.split"], "function", ["None"], ["", "def", "extract_session_unique_wordcount", "(", "data", ")", ":", "\n", "    ", "'''\n    Compute for session level unique word count\n    :param data:\n    :return:\n    '''", "\n", "wordcount_data", "=", "pd", ".", "DataFrame", "(", ")", "\n", "# Count the total number of unique words", "\n", "for", "video_id", "in", "list", "(", "set", "(", "data", "[", "'video_id'", "]", ")", ")", ":", "\n", "        ", "video_data", "=", "data", "[", "data", "[", "'video_id'", "]", "==", "video_id", "]", "\n", "for", "speaker", "in", "video_data", "[", "'speaker'", "]", ":", "\n", "            ", "speaker_data", "=", "video_data", "[", "video_data", "[", "'speaker'", "]", "==", "speaker", "]", "\n", "summary", "=", "speaker_data", ".", "text", ".", "apply", "(", "lambda", "x", ":", "pd", ".", "value_counts", "(", "x", ".", "split", "(", "\" \"", ")", ")", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "summ", "=", "summary", ".", "to_frame", "(", ")", ".", "reset_index", "(", ")", "\n", "summ", ".", "columns", "=", "[", "'word'", ",", "'count'", "]", "\n", "summ", "[", "'video_id'", "]", "=", "video_id", "\n", "summ", "[", "'speaker'", "]", "=", "speaker", "\n", "summ", "=", "summ", "[", "summ", "[", "'word'", "]", "!=", "\"\"", "]", "\n", "\n", "wordcount_data", "=", "wordcount_data", ".", "append", "(", "summ", ")", "\n", "logging", ".", "info", "(", "str", "(", "video_id", ")", "+", "\" unique word count done\"", ")", "\n", "\n", "", "", "unique_wordcount_data", "=", "wordcount_data", ".", "groupby", "(", "[", "'video_id'", ",", "'speaker'", "]", ")", "[", "'word'", "]", ".", "count", "(", ")", "\n", "unique_wordcount_data", "=", "unique_wordcount_data", ".", "reset_index", "(", ")", "\n", "unique_wordcount_data", ".", "columns", "=", "[", "'video_id'", ",", "'speaker'", ",", "'word_uniquecount'", "]", "\n", "\n", "return", "unique_wordcount_data", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_level_wordcount.run_computing_wordcount": [[88, 109], ["logging.getLogger().setLevel", "session_level_wordcount.run_dataframe", "session_level_wordcount.extract_session_wordcount", "session_level_wordcount.extract_session_unique_wordcount", "pandas.merge", "pd.merge.to_csv", "os.path.join", "logging.getLogger"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.run_dataframe", "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_level_wordcount.extract_session_wordcount", "home.repos.pwc.inspect_result.SpectData_MONAH.demographics.session_level_wordcount.extract_session_unique_wordcount"], ["", "def", "run_computing_wordcount", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Computes for word count data\n    :param video_name_1: video to be analyzed\n    :param video_name_2: video_to be analyzed\n    :return:\n    '''", "\n", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "data", "=", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", "\n", "\n", "word_count", "=", "extract_session_wordcount", "(", "data", ")", "\n", "unique_word_count", "=", "extract_session_unique_wordcount", "(", "data", ")", "\n", "\n", "summary", "=", "pd", ".", "merge", "(", "word_count", ",", "unique_word_count", ",", "how", "=", "\"inner\"", ",", "on", "=", "[", "'video_id'", ",", "'speaker'", "]", ")", "\n", "summary", ".", "columns", "=", "[", "'video_id'", ",", "'speaker'", ",", "'word_count'", ",", "'word_countprop'", ",", "'word_uniquecount'", "]", "\n", "summary", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'Demographics'", ",", "\n", "'session_level_wordcount.csv'", ")", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.pitch_viz.pitch_viz.adhoc": [[12, 72], ["seaborn.set", "pitch_viz.Sound", "pitch_viz.Sound.to_pitch", "matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.grid", "matplotlib.ylim", "matplotlib.ylabel", "matplotlib.xlabel", "fig.add_subplot.tick_params", "fig.add_subplot.tick_params", "fig.add_subplot.xaxis.label.set_color", "fig.add_subplot.yaxis.label.set_color", "dict", "fig.add_subplot.text", "fig.add_subplot.text", "fig.add_subplot.text", "fig.add_subplot.text", "fig.add_subplot.text", "fig.add_subplot.text", "matplotlib.show", "dict", "seaborn.set", "matplotlib.subplots", "seaborn.scatterplot", "seaborn.scatterplot", "axs[].text", "matplotlib.show", "snd.to_pitch.xs"], "function", ["None"], ["def", "adhoc", "(", ")", ":", "\n", "    ", "sns", ".", "set", "(", ")", "# Use seaborn's default style to make attractive graphs", "\n", "\n", "# Plot nice figures using Python's \"standard\" matplotlib library", "\n", "snd", "=", "pitch_viz", ".", "Sound", "(", "\"Examples/the_north_wind_and_the_sun.wav\"", ")", "\n", "\n", "pitch", "=", "snd", ".", "to_pitch", "(", ")", "\n", "\n", "pitch_values", "=", "pitch", ".", "selected_array", "[", "'frequency'", "]", "\n", "pitch_values", "[", "pitch_values", "==", "0", "]", "=", "np", ".", "nan", "\n", "\n", "#################", "\n", "# Matplotlib", "\n", "#################", "\n", "plt", ".", "rcParams", "[", "\"figure.facecolor\"", "]", "=", "\"w\"", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "\n", "ax", ".", "plot", "(", "pitch", ".", "xs", "(", ")", ",", "pitch_values", ",", "'o'", ",", "markersize", "=", "2", ",", "color", "=", "'cyan'", ")", "\n", "ax", ".", "grid", "(", "False", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "pitch", ".", "ceiling", ")", "\n", "plt", ".", "ylabel", "(", "\"fundamental frequency [Hz]\"", ")", "\n", "plt", ".", "xlabel", "(", "\"Time [s]\"", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'x'", ",", "colors", "=", "'grey'", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'y'", ",", "colors", "=", "'grey'", ")", "\n", "ax", ".", "xaxis", ".", "label", ".", "set_color", "(", "'grey'", ")", "\n", "ax", ".", "yaxis", ".", "label", ".", "set_color", "(", "'grey'", ")", "\n", "\n", "# Add labels to the plot", "\n", "style", "=", "dict", "(", "size", "=", "10", ",", "color", "=", "'black'", ")", "\n", "\n", "ax", ".", "text", "(", "0.1", ",", "50", ",", "\"The\"", ",", "**", "style", ")", "\n", "ax", ".", "text", "(", "0.22", ",", "50", ",", "\"north\"", ",", "**", "style", ")", "\n", "ax", ".", "text", "(", "0.475", ",", "50", ",", "\"wind\"", ",", "**", "style", ")", "\n", "ax", ".", "text", "(", "0.7", ",", "50", ",", "\"and\"", ",", "**", "style", ")", "\n", "ax", ".", "text", "(", "0.8", ",", "50", ",", "\"the\"", ",", "**", "style", ")", "\n", "ax", ".", "text", "(", "1.04", ",", "50", ",", "\"Sun\"", ",", "**", "style", ")", "\n", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "# TODO", "\n", "# Ask Marriane to push dev branch", "\n", "# Current plan is to generate png at talkturn level", "\n", "# Play button simply plays two videos, doesn't highlight", "\n", "# (or simply have a roving asterisks in a table of talkturns)", "\n", "# I will coauthor with Marriane wrt to config file. Option to generate pitch visualization", "\n", "\n", "#################", "\n", "# Seaborn", "\n", "#################", "\n", "\n", "style", "=", "dict", "(", "size", "=", "10", ",", "color", "=", "'black'", ")", "\n", "sns", ".", "set", "(", "rc", "=", "{", "'axes.facecolor'", ":", "'white'", ",", "'figure.facecolor'", ":", "'white'", "}", ")", "\n", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "nrows", "=", "2", ")", "\n", "g1", "=", "sns", ".", "scatterplot", "(", "data", "=", "pitch_values", ",", "ax", "=", "axs", "[", "0", "]", ")", "\n", "g2", "=", "sns", ".", "scatterplot", "(", "data", "=", "pitch_values", ",", "ax", "=", "axs", "[", "1", "]", ")", "\n", "axs", "[", "0", "]", ".", "text", "(", "0.1", ",", "50", ",", "\"?The\"", ",", "**", "style", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.pitch_viz.pitch_viz._get_wav_df": [[74, 106], ["glob.glob", "pandas.DataFrame", "range", "wav_df.sort_values.sort_values", "len", "os.path.basename", "int", "os.path.splitext", "os.path.basename.rfind", "os.path.basename.find", "os.path.basename.rfind"], "function", ["None"], ["", "def", "_get_wav_df", "(", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Get the keys and paths of waves per talkturn\n    Those one-word talkturns don't have a wav file because\n    they have only a start time and not a end time\n    :param parallel_run_settings:\n    :return: wav_df\n    '''", "\n", "# List the talkturn wavs that have been cut", "\n", "wav_files", "=", "glob", ".", "glob", "(", "parallel_run_settings", "[", "'talkturn_wav_path'", "]", "+", "\"/*.wav\"", ")", "\n", "wav_df", "=", "pd", ".", "DataFrame", "(", "wav_files", ",", "columns", "=", "[", "'path'", "]", ")", "\n", "\n", "wav_df", "[", "'video_id'", "]", "=", "'unk'", "\n", "wav_df", "[", "'audio_id'", "]", "=", "'unk'", "\n", "wav_df", "[", "'talkturn_id'", "]", "=", "-", "1", "\n", "\n", "for", "idx", "in", "range", "(", "len", "(", "wav_df", ")", ")", ":", "\n", "        ", "wav_i", "=", "wav_df", "[", "'path'", "]", "[", "idx", "]", "\n", "wav_i", "=", "os", ".", "path", ".", "basename", "(", "wav_i", ")", "\n", "wav_i", "=", "os", ".", "path", ".", "splitext", "(", "wav_i", ")", "[", "0", "]", "\n", "\n", "video_id", "=", "wav_i", "[", ":", "wav_i", ".", "rfind", "(", "'_'", ")", "]", "\n", "talkturn_id", "=", "int", "(", "wav_i", "[", "wav_i", ".", "rfind", "(", "'_'", ")", "+", "1", ":", "]", ")", "\n", "audio_id", "=", "wav_i", "[", ":", "wav_i", ".", "find", "(", "'_'", ")", "]", "\n", "\n", "wav_df", "[", "'video_id'", "]", ".", "at", "[", "idx", "]", "=", "video_id", "\n", "wav_df", "[", "'audio_id'", "]", ".", "at", "[", "idx", "]", "=", "audio_id", "\n", "wav_df", "[", "'talkturn_id'", "]", ".", "at", "[", "idx", "]", "=", "talkturn_id", "\n", "\n", "", "wav_df", "=", "wav_df", ".", "sort_values", "(", "by", "=", "'talkturn_id'", ")", "\n", "\n", "return", "wav_df", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.pitch_viz.pitch_viz._get_pitch_df": [[108, 156], ["pandas.read_csv", "pandas.read_csv", "pd.read_csv.merge", "pitch_viz._get_wav_df", "pd.read_csv.reset_index", "_get_wav_df.reset_index", "text_narrative.merge.merge", "os.path.join", "os.path.join", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.pitch_viz.pitch_viz._get_wav_df"], ["", "def", "_get_pitch_df", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Get a dataframe that contains the path of all talkturns (if applicable)\n    :param video_name_1:\n    :param video_name_2:\n    :param parallel_run_settings:\n    :return:\n    '''", "\n", "\n", "parallel_run_settings", "[", "'talkturn_wav_path'", "]", "\n", "\n", "# Narrative fine has the multimodal annotations but not the start and end time", "\n", "# Require to merge with weaved talkturns", "\n", "text_narrative", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_3\"", ",", "\n", "\"narrative_fine.csv\"", ")", ")", "\n", "\n", "weaved_talkturn", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "'weaved talkturns.csv'", ")", ")", "\n", "\n", "assert", "len", "(", "text_narrative", ")", "==", "len", "(", "weaved_talkturn", ")", "\n", "\n", "text_narrative", ".", "columns", "\n", "weaved_talkturn", ".", "columns", "\n", "\n", "narrative_timings", "=", "text_narrative", ".", "merge", "(", "weaved_talkturn", ")", "\n", "narrative_timings", "=", "narrative_timings", "[", "[", "'video_id'", ",", "'audio_id'", ",", "'talkturn no'", ",", "\n", "'text_blob'", ",", "'start time'", ",", "'end time'", "]", "]", "\n", "\n", "wav_df", "=", "_get_wav_df", "(", "parallel_run_settings", ")", "\n", "\n", "text_narrative", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "wav_df", ".", "reset_index", "(", "drop", "=", "True", ",", "inplace", "=", "True", ")", "\n", "\n", "narrative_timings", ".", "columns", "\n", "wav_df", ".", "columns", "\n", "pitch_df", "=", "narrative_timings", ".", "merge", "(", "wav_df", ",", "\n", "left_on", "=", "[", "'video_id'", ",", "'audio_id'", ",", "'talkturn no'", "]", ",", "\n", "right_on", "=", "[", "'video_id'", ",", "'audio_id'", ",", "'talkturn_id'", "]", ",", "\n", "how", "=", "'left'", "\n", ")", "\n", "\n", "assert", "len", "(", "pitch_df", ")", "==", "len", "(", "narrative_timings", ")", "\n", "\n", "return", "pitch_df", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.pitch_viz.pitch_viz._get_word_timings": [[158, 160], ["None"], "function", ["None"], ["", "def", "_get_word_timings", "(", "audio_id", ",", "talkturn_no", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_smile.z_score_per_dev_fold": [[16, 30], ["pandas.DataFrame", "pandas.DataFrame", "df_train.video_id.apply", "df_result.append.append", "x.split"], "function", ["None"], ["def", "z_score_per_dev_fold", "(", "df", ",", "col_name", ")", ":", "\n", "# for loop", "\n", "    ", "df_result", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"Video_ID\"", ",", "col_name", "+", "'_z'", "]", ")", "\n", "df_train", "=", "df", "\n", "train_mil", "=", "cfg", ".", "parameters_cfg", "[", "'a_'", "+", "col_name", "+", "'_mu'", "]", "\n", "train_sd", "=", "cfg", ".", "parameters_cfg", "[", "'a_'", "+", "col_name", "+", "'_sd'", "]", "\n", "\n", "df_series", "=", "(", "df", "[", "col_name", "]", "-", "train_mil", ")", "/", "(", "train_sd", ")", "\n", "df_return", "=", "pd", ".", "DataFrame", "(", ")", "\n", "df_return", "[", "'Video_ID'", "]", "=", "df_train", ".", "video_id", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "df_return", "[", "col_name", "+", "'_z'", "]", "=", "df_series", "\n", "\n", "df_result", "=", "df_result", ".", "append", "(", "df_return", ")", "\n", "return", "df_result", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_smile.get_z_bucket": [[31, 46], ["pandas.DataFrame"], "function", ["None"], ["", "def", "get_z_bucket", "(", "z_series", ")", ":", "\n", "    ", "'''\n    takes in the z_series and outputs the bucket very low;low;high;very high\n    '''", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "z_series", ")", "\n", "df", ".", "columns", "=", "[", "'z'", "]", "\n", "\n", "df", "[", "'z_bucket'", "]", "=", "None", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "1", ",", "'z_bucket'", "]", "=", "'low'", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "2", ",", "'z_bucket'", "]", "=", "'very low'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "1", ",", "'z_bucket'", "]", "=", "'high'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "2", ",", "'z_bucket'", "]", "=", "'very high'", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_smile.run_dataframe": [[47, 69], ["pandas.read_csv", "pandas.read_csv", "pandas.merge", "data.reset_index.groupby().agg", "data.reset_index.reset_index", "os.path.join", "os.path.join", "data.reset_index.groupby"], "function", ["None"], ["", "def", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Load dataframe of summary metrics\n    :return: dataframe of metrics\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "raw_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "'talkturn_smile.csv'", ")", ")", "\n", "talkurn", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "'weaved talkturns.csv'", ")", ")", "\n", "data", "=", "pd", ".", "merge", "(", "talkurn", ",", "raw_data", ",", "how", "=", "\"inner\"", ",", "on", "=", "[", "\"video_id\"", ",", "\"talkturn no\"", ",", "\"speaker\"", "]", ")", "\n", "data", "=", "data", ".", "groupby", "(", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", "]", ")", ".", "agg", "(", "\n", "{", "'smile'", ":", "[", "sum", "]", "}", "\n", ")", "\n", "data", "=", "data", ".", "reset_index", "(", ")", "\n", "data", ".", "columns", "=", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "'smile_count'", "]", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_smile.get_blob": [[70, 98], ["session_action_smile.z_score_per_dev_fold", "pandas.concat", "print", "pd.concat.copy", "tqdm.tqdm", "range", "session_action_smile.get_z_bucket", "len", "print"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.z_score_per_dev_fold", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_z_bucket"], ["", "def", "get_blob", "(", "variable", ",", "fxn", ",", "speaker", ",", "data", ")", ":", "\n", "    ", "'''\n    Generates blob\n    :param variable: specific AU variable being analyzed\n    :param fxn: mean/std/min/max\n    :param speaker: speaker 1 or speaker 2\n    :return:\n    '''", "\n", "var", "=", "z_score_per_dev_fold", "(", "df", "=", "data", ".", "loc", "[", "(", "data", "[", "'speaker'", "]", "==", "speaker", ")", "]", ",", "\n", "col_name", "=", "variable", "+", "'_'", "+", "fxn", ")", "\n", "var", "=", "pd", ".", "concat", "(", "[", "var", ",", "get_z_bucket", "(", "var", "[", "variable", "+", "'_'", "+", "fxn", "+", "'_z'", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "text", "=", "'number of '", "\n", "variable_text", "=", "'smile'", "\n", "\n", "print", "(", "'Generating '", ",", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", ")", "\n", "i", "=", "0", "\n", "df_copy", "=", "var", ".", "copy", "(", ")", "\n", "df_copy", "[", "'blob'", "]", "=", "None", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "var", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "var", ".", "iloc", "[", "i", "]", "\n", "if", "row_df", "[", "'z_bucket'", "]", "==", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "df_copy", ".", "blob", ".", "iloc", "[", "i", "]", "=", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", "+", "row_df", "[", "'z_bucket'", "]", "+", "' '", "\n", "print", "(", "df_copy", ")", "\n", "\n", "", "", "return", "df_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_smile.get_all_blob": [[99, 130], ["session_action_smile.run_dataframe", "pandas.DataFrame", "pd.concat.fillna", "[].apply().reset_index", "tqdm.tqdm", "range", "pd.concat.sort_values", "[].apply", "len", "session_action_smile.get_blob", "print", "pandas.concat", "len", "pd.concat.groupby"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.run_dataframe", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_blob"], ["", "def", "get_all_blob", "(", "video_name_1", ",", "video_name_2", ")", ":", "\n", "# Importing connection object", "\n", "    ", "data", "=", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ")", "\n", "\n", "action_blob", "=", "pd", ".", "DataFrame", "(", ")", "\n", "speakers", "=", "[", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", ",", "cfg", ".", "parameters_cfg", "[", "'speaker_2'", "]", "]", "\n", "\n", "for", "speaker", "in", "speakers", ":", "\n", "        ", "for", "fxn", "in", "[", "'count'", "]", ":", "\n", "            ", "for", "variable_text", "in", "[", "'smile'", "]", ":", "\n", "                ", "blob", "=", "get_blob", "(", "variable_text", ",", "fxn", ",", "speaker", ",", "data", ")", "\n", "print", "(", "blob", ")", "\n", "action_blob", "=", "pd", ".", "concat", "(", "[", "action_blob", ",", "\n", "blob", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "action_blob", ".", "fillna", "(", "value", "=", "''", ",", "inplace", "=", "True", ")", "\n", "\n", "action_blob", "=", "action_blob", ".", "groupby", "(", "[", "'Video_ID'", "]", ")", "[", "\n", "'blob'", "]", ".", "apply", "(", "lambda", "x", ":", "''", ".", "join", "(", "x", ")", ")", ".", "reset_index", "(", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "action_blob", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "action_blob", ".", "iloc", "[", "i", "]", "\n", "if", "not", "row_df", "[", "'blob'", "]", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "row_df", "[", "'blob'", "]", ")", ">", "0", ":", "\n", "                ", "action_blob", ".", "blob", ".", "iloc", "[", "i", "]", "=", "row_df", "[", "'blob'", "]", "[", ":", "-", "1", "]", "+", "'. '", "\n", "\n", "", "", "action_blob", "=", "action_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "\n", "", "return", "action_blob", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_parent.get_actions_blob": [[17, 78], ["Python.get_all_blob", "Python.get_all_blob", "Python.get_all_blob", "posiface_count_blob.sort_values.sort_values", "posiface_count_blob.sort_values.blob.apply", "smiling_count_blob.sort_values.sort_values", "smiling_count_blob.sort_values.blob.apply", "au_blob.sort_values.sort_values", "au_blob.sort_values.blob.apply", "len", "len", "len", "pandas.merge", "pd.merge.fillna", "pandas.merge", "pd.merge.fillna", "export.to_csv", "set", "set", "set", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_all_blob", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_all_blob", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_all_blob"], ["def", "get_actions_blob", "(", "video_name_1", ",", "video_name_2", ",", "posiface", ",", "smile", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Combining all action transcripts in one blob\n    :param video_name_1:\n    :param video_name_2:\n    :return:\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "posiface_count_blob", "=", "sap", ".", "get_all_blob", "(", "video_name_1", ",", "\n", "video_name_2", ")", "\n", "smiling_count_blob", "=", "sas", ".", "get_all_blob", "(", "video_name_1", ",", "\n", "video_name_2", ")", "\n", "au_blob", "=", "saa", ".", "get_all_blob", "(", "video_name_1", ",", "\n", "video_name_2", ")", "\n", "\n", "posiface_count_blob", "=", "posiface_count_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "posiface_count_blob", "[", "'blob'", "]", "=", "posiface_count_blob", ".", "blob", ".", "apply", "(", "lambda", "x", ":", "x", "if", "posiface", "==", "1", "else", "''", ")", "\n", "\n", "smiling_count_blob", "=", "smiling_count_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "smiling_count_blob", "[", "'blob'", "]", "=", "smiling_count_blob", ".", "blob", ".", "apply", "(", "lambda", "x", ":", "x", "if", "smile", "==", "1", "else", "''", ")", "\n", "\n", "au_blob", "=", "au_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "au_blob", "[", "'blob'", "]", "=", "au_blob", ".", "blob", ".", "apply", "(", "lambda", "x", ":", "x", "if", "smile", "==", "1", "else", "''", ")", "\n", "\n", "len", "(", "set", "(", "posiface_count_blob", ".", "Video_ID", ")", ")", "\n", "len", "(", "set", "(", "smiling_count_blob", ".", "Video_ID", ")", ")", "\n", "len", "(", "set", "(", "au_blob", ".", "Video_ID", ")", ")", "\n", "\n", "actions_blob", "=", "pd", ".", "merge", "(", "left", "=", "au_blob", ",", "right", "=", "smiling_count_blob", ",", "\n", "on", "=", "[", "'Video_ID'", "]", ",", "\n", "how", "=", "'left'", ")", "\n", "\n", "actions_blob", ".", "fillna", "(", "value", "=", "''", ",", "inplace", "=", "True", ")", "\n", "\n", "actions_blob", "[", "'actions_blob'", "]", "=", "actions_blob", "[", "'blob_x'", "]", "+", "actions_blob", "[", "'blob_y'", "]", "\n", "\n", "actions_blob", "=", "actions_blob", "[", "[", "'Video_ID'", ",", "'actions_blob'", "]", "]", "\n", "\n", "actions_blob", "=", "pd", ".", "merge", "(", "left", "=", "actions_blob", ",", "right", "=", "posiface_count_blob", ",", "\n", "on", "=", "[", "'Video_ID'", "]", ",", "\n", "how", "=", "'left'", ")", "\n", "\n", "actions_blob", ".", "fillna", "(", "value", "=", "''", ",", "inplace", "=", "True", ")", "\n", "\n", "actions_blob", "[", "'actions_blob'", "]", "=", "actions_blob", "[", "'actions_blob'", "]", "+", "actions_blob", "[", "'blob'", "]", "\n", "\n", "actions_blob", "=", "actions_blob", "[", "[", "'Video_ID'", ",", "'actions_blob'", "]", "]", "\n", "\n", "# EXPORT", "\n", "\n", "actions_blob", "[", "'family'", "]", "=", "'actions'", "\n", "export", "=", "actions_blob", "[", "[", "'Video_ID'", ",", "'family'", ",", "'actions_blob'", "]", "]", "\n", "export", ".", "columns", "=", "[", "'Video_ID'", ",", "'family'", ",", "'text_blob'", "]", "\n", "\n", "export", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'Actions'", ",", "\n", "'narrative_coarse.csv'", ")", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_au.z_score_per_dev_fold": [[16, 30], ["pandas.DataFrame", "pandas.DataFrame", "df_train.video_id.apply", "df_result.append.append", "x.split"], "function", ["None"], ["def", "z_score_per_dev_fold", "(", "df", ",", "col_name", ")", ":", "\n", "# for loop", "\n", "    ", "df_result", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"Video_ID\"", ",", "col_name", "+", "'_z'", "]", ")", "\n", "df_train", "=", "df", "\n", "train_mil", "=", "cfg", ".", "parameters_cfg", "[", "'a_'", "+", "col_name", "+", "'_mu'", "]", "\n", "train_sd", "=", "cfg", ".", "parameters_cfg", "[", "'a_'", "+", "col_name", "+", "'_sd'", "]", "\n", "\n", "df_series", "=", "(", "df", "[", "col_name", "]", "-", "train_mil", ")", "/", "(", "train_sd", ")", "\n", "df_return", "=", "pd", ".", "DataFrame", "(", ")", "\n", "df_return", "[", "'Video_ID'", "]", "=", "df_train", ".", "video_id", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "df_return", "[", "col_name", "+", "'_z'", "]", "=", "df_series", "\n", "\n", "df_result", "=", "df_result", ".", "append", "(", "df_return", ")", "\n", "return", "df_result", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_au.get_z_bucket": [[31, 46], ["pandas.DataFrame"], "function", ["None"], ["", "def", "get_z_bucket", "(", "z_series", ")", ":", "\n", "    ", "'''\n    takes in the z_series and outputs the bucket very low;low;high;very high\n    '''", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "z_series", ")", "\n", "df", ".", "columns", "=", "[", "'z'", "]", "\n", "\n", "df", "[", "'z_bucket'", "]", "=", "None", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "1", ",", "'z_bucket'", "]", "=", "'low'", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "2", ",", "'z_bucket'", "]", "=", "'very low'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "1", ",", "'z_bucket'", "]", "=", "'high'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "2", ",", "'z_bucket'", "]", "=", "'very high'", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_au.run_dataframe": [[47, 83], ["pandas.read_csv", "pandas.read_csv", "pandas.merge", "data.reset_index.apply", "data.reset_index.groupby().agg", "data.reset_index.reset_index", "data.reset_index.AU05_std.apply", "data.reset_index.AU17_std.apply", "data.reset_index.AU20_std.apply", "data.reset_index.AU25_std.apply", "os.path.join", "os.path.join", "data.reset_index.groupby"], "function", ["None"], ["", "def", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Load dataframe of summary metrics\n    :return: dataframe of metrics\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "raw_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_1'", ",", "\n", "'openface_raw.csv'", ")", ")", "\n", "raw_data", "=", "raw_data", "[", "[", "'video_id'", ",", "' timestamp'", ",", "' AU05_r'", ",", "' AU17_r'", ",", "' AU20_r'", ",", "' AU25_r'", "]", "]", "\n", "talkurn", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "'weaved talkturns.csv'", ")", ")", "\n", "data", "=", "pd", ".", "merge", "(", "talkurn", ",", "raw_data", ",", "how", "=", "\"inner\"", ",", "on", "=", "\"video_id\"", ")", "\n", "data", "[", "'time_status'", "]", "=", "data", ".", "apply", "(", "lambda", "x", ":", "1", "if", "x", "[", "'start time'", "]", "<=", "x", "[", "' timestamp'", "]", "and", "\n", "x", "[", "' timestamp'", "]", "<=", "x", "[", "'end time'", "]", "else", "0", ",", "axis", "=", "1", ")", "\n", "data", "=", "data", ".", "loc", "[", "(", "data", "[", "'time_status'", "]", "==", "1", ")", "]", "\n", "data", "=", "data", ".", "groupby", "(", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", "]", ")", ".", "agg", "(", "\n", "{", "' AU05_r'", ":", "[", "min", ",", "max", ",", "'mean'", ",", "'std'", "]", ",", "' AU17_r'", ":", "[", "min", ",", "max", ",", "'mean'", ",", "'std'", "]", ",", "\n", "' AU20_r'", ":", "[", "min", ",", "max", ",", "'mean'", ",", "'std'", "]", ",", "' AU25_r'", ":", "[", "min", ",", "max", ",", "'mean'", ",", "'std'", "]", "\n", "}", "\n", ")", "\n", "data", "=", "data", ".", "reset_index", "(", ")", "\n", "data", ".", "columns", "=", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "\n", "'AU05_min'", ",", "'AU05_max'", ",", "'AU05_mean'", ",", "'AU05_std'", ",", "\n", "'AU17_min'", ",", "'AU17_max'", ",", "'AU17_mean'", ",", "'AU17_std'", ",", "\n", "'AU20_min'", ",", "'AU20_max'", ",", "'AU20_mean'", ",", "'AU20_std'", ",", "\n", "'AU25_min'", ",", "'AU25_max'", ",", "'AU25_mean'", ",", "'AU25_std'", "]", "\n", "data", "[", "'AU05_va'", "]", "=", "data", ".", "AU05_std", ".", "apply", "(", "lambda", "x", ":", "x", "*", "x", ")", "\n", "data", "[", "'AU17_va'", "]", "=", "data", ".", "AU17_std", ".", "apply", "(", "lambda", "x", ":", "x", "*", "x", ")", "\n", "data", "[", "'AU20_va'", "]", "=", "data", ".", "AU20_std", ".", "apply", "(", "lambda", "x", ":", "x", "*", "x", ")", "\n", "data", "[", "'AU25_va'", "]", "=", "data", ".", "AU25_std", ".", "apply", "(", "lambda", "x", ":", "x", "*", "x", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_au.get_blob": [[84, 132], ["session_action_au.z_score_per_dev_fold", "pandas.concat", "print", "pd.concat.copy", "tqdm.tqdm", "range", "session_action_au.get_z_bucket", "len", "print"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.z_score_per_dev_fold", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_z_bucket"], ["", "def", "get_blob", "(", "variable", ",", "fxn", ",", "speaker", ",", "data", ")", ":", "\n", "    ", "'''\n    Generates blob\n    :param variable: specific AU variable being analyzed\n    :param fxn: mean/std/min/max\n    :param speaker: speaker 1 or speaker 2\n    :return:\n    '''", "\n", "var", "=", "z_score_per_dev_fold", "(", "df", "=", "data", ".", "loc", "[", "(", "data", "[", "'speaker'", "]", "==", "speaker", ")", "]", ",", "\n", "col_name", "=", "variable", "+", "'_'", "+", "fxn", ")", "\n", "var", "=", "pd", ".", "concat", "(", "[", "var", ",", "get_z_bucket", "(", "var", "[", "variable", "+", "'_'", "+", "fxn", "+", "'_z'", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "if", "fxn", "==", "'mean'", ":", "\n", "        ", "text", "=", "'average'", "\n", "", "elif", "fxn", "==", "'va'", ":", "\n", "        ", "text", "=", "'variance'", "\n", "", "elif", "fxn", "==", "'min'", ":", "\n", "        ", "text", "=", "'minimum'", "\n", "", "elif", "fxn", "==", "'max'", ":", "\n", "        ", "text", "=", "'maximum'", "\n", "", "else", ":", "\n", "        ", "text", "=", "''", "\n", "\n", "", "if", "variable", "==", "'AU05'", ":", "\n", "        ", "variable_text", "=", "'upper lid raiser'", "\n", "", "elif", "variable", "==", "'AU17'", ":", "\n", "        ", "variable_text", "=", "'chin raiser'", "\n", "", "elif", "variable", "==", "'AU20'", ":", "\n", "        ", "variable_text", "=", "'lip stretcher'", "\n", "", "elif", "variable", "==", "'AU25'", ":", "\n", "        ", "variable_text", "=", "'jaw drop'", "\n", "", "else", ":", "\n", "        ", "variable_text", "=", "''", "\n", "\n", "", "print", "(", "'Generating '", ",", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", ")", "\n", "i", "=", "0", "\n", "df_copy", "=", "var", ".", "copy", "(", ")", "\n", "df_copy", "[", "'blob'", "]", "=", "None", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "var", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "var", ".", "iloc", "[", "i", "]", "\n", "if", "row_df", "[", "'z_bucket'", "]", "==", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "df_copy", ".", "blob", ".", "iloc", "[", "i", "]", "=", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", "+", "row_df", "[", "'z_bucket'", "]", "+", "' '", "\n", "print", "(", "df_copy", ")", "\n", "\n", "", "", "return", "df_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_au.get_all_blob": [[133, 164], ["session_action_au.run_dataframe", "pandas.DataFrame", "pd.concat.fillna", "[].apply().reset_index", "tqdm.tqdm", "range", "pd.concat.sort_values", "[].apply", "len", "session_action_au.get_blob", "print", "pandas.concat", "len", "pd.concat.groupby"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.run_dataframe", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_blob"], ["", "def", "get_all_blob", "(", "video_name_1", ",", "video_name_2", ")", ":", "\n", "# Importing connection object", "\n", "    ", "data", "=", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ")", "\n", "\n", "action_blob", "=", "pd", ".", "DataFrame", "(", ")", "\n", "speakers", "=", "[", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", ",", "cfg", ".", "parameters_cfg", "[", "'speaker_2'", "]", "]", "\n", "\n", "for", "speaker", "in", "speakers", ":", "\n", "        ", "for", "fxn", "in", "[", "'mean'", ",", "'va'", ",", "'min'", ",", "'max'", "]", ":", "\n", "            ", "for", "variable_text", "in", "[", "'AU05'", ",", "'AU17'", ",", "'AU20'", ",", "'AU25'", "]", ":", "\n", "                ", "blob", "=", "get_blob", "(", "variable_text", ",", "fxn", ",", "speaker", ",", "data", ")", "\n", "print", "(", "blob", ")", "\n", "action_blob", "=", "pd", ".", "concat", "(", "[", "action_blob", ",", "\n", "blob", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "action_blob", ".", "fillna", "(", "value", "=", "''", ",", "inplace", "=", "True", ")", "\n", "\n", "action_blob", "=", "action_blob", ".", "groupby", "(", "[", "'Video_ID'", "]", ")", "[", "\n", "'blob'", "]", ".", "apply", "(", "lambda", "x", ":", "''", ".", "join", "(", "x", ")", ")", ".", "reset_index", "(", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "action_blob", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "action_blob", ".", "iloc", "[", "i", "]", "\n", "if", "not", "row_df", "[", "'blob'", "]", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "row_df", "[", "'blob'", "]", ")", ">", "0", ":", "\n", "                ", "action_blob", ".", "blob", ".", "iloc", "[", "i", "]", "=", "row_df", "[", "'blob'", "]", "[", ":", "-", "1", "]", "+", "'. '", "\n", "\n", "", "", "action_blob", "=", "action_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "\n", "", "return", "action_blob", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.z_score_per_dev_fold": [[16, 30], ["pandas.DataFrame", "pandas.DataFrame", "df_train.video_id.apply", "df_result.append.append", "x.split"], "function", ["None"], ["def", "z_score_per_dev_fold", "(", "df", ",", "col_name", ")", ":", "\n", "# for loop", "\n", "    ", "df_result", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "\"Video_ID\"", ",", "col_name", "+", "'_z'", "]", ")", "\n", "df_train", "=", "df", "\n", "train_mil", "=", "cfg", ".", "parameters_cfg", "[", "'a_'", "+", "col_name", "+", "'_mu'", "]", "\n", "train_sd", "=", "cfg", ".", "parameters_cfg", "[", "'a_'", "+", "col_name", "+", "'_sd'", "]", "\n", "\n", "df_series", "=", "(", "df", "[", "col_name", "]", "-", "train_mil", ")", "/", "(", "train_sd", ")", "\n", "df_return", "=", "pd", ".", "DataFrame", "(", ")", "\n", "df_return", "[", "'Video_ID'", "]", "=", "df_train", ".", "video_id", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "df_return", "[", "col_name", "+", "'_z'", "]", "=", "df_series", "\n", "\n", "df_result", "=", "df_result", ".", "append", "(", "df_return", ")", "\n", "return", "df_result", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_z_bucket": [[31, 46], ["pandas.DataFrame"], "function", ["None"], ["", "def", "get_z_bucket", "(", "z_series", ")", ":", "\n", "    ", "'''\n    takes in the z_series and outputs the bucket very low;low;high;very high\n    '''", "\n", "\n", "df", "=", "pd", ".", "DataFrame", "(", "z_series", ")", "\n", "df", ".", "columns", "=", "[", "'z'", "]", "\n", "\n", "df", "[", "'z_bucket'", "]", "=", "None", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "1", ",", "'z_bucket'", "]", "=", "'low'", "\n", "df", ".", "loc", "[", "df", ".", "z", "<", "-", "2", ",", "'z_bucket'", "]", "=", "'very low'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "1", ",", "'z_bucket'", "]", "=", "'high'", "\n", "df", ".", "loc", "[", "df", ".", "z", ">", "2", ",", "'z_bucket'", "]", "=", "'very high'", "\n", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.run_dataframe": [[47, 69], ["pandas.read_csv", "pandas.read_csv", "pandas.merge", "data.reset_index.groupby().agg", "data.reset_index.reset_index", "os.path.join", "os.path.join", "data.reset_index.groupby"], "function", ["None"], ["", "def", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Load dataframe of summary metrics\n    :return: dataframe of metrics\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "raw_data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "'talkturn_posiface.csv'", ")", ")", "\n", "talkurn", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "'weaved talkturns.csv'", ")", ")", "\n", "data", "=", "pd", ".", "merge", "(", "talkurn", ",", "raw_data", ",", "how", "=", "\"inner\"", ",", "on", "=", "[", "\"video_id\"", ",", "\"talkturn no\"", ",", "\"speaker\"", "]", ")", "\n", "data", "=", "data", ".", "groupby", "(", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", "]", ")", ".", "agg", "(", "\n", "{", "'posiface'", ":", "[", "sum", "]", "}", "\n", ")", "\n", "data", "=", "data", ".", "reset_index", "(", ")", "\n", "data", ".", "columns", "=", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "'posiface_count'", "]", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_blob": [[70, 98], ["session_action_posiface.z_score_per_dev_fold", "pandas.concat", "print", "pd.concat.copy", "tqdm.tqdm", "range", "session_action_posiface.get_z_bucket", "len", "print"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.z_score_per_dev_fold", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_z_bucket"], ["", "def", "get_blob", "(", "variable", ",", "fxn", ",", "speaker", ",", "data", ")", ":", "\n", "    ", "'''\n    Generates blob\n    :param variable: specific AU variable being analyzed\n    :param fxn: mean/std/min/max\n    :param speaker: speaker 1 or speaker 2\n    :return:\n    '''", "\n", "var", "=", "z_score_per_dev_fold", "(", "df", "=", "data", ".", "loc", "[", "(", "data", "[", "'speaker'", "]", "==", "speaker", ")", "]", ",", "\n", "col_name", "=", "variable", "+", "'_'", "+", "fxn", ")", "\n", "var", "=", "pd", ".", "concat", "(", "[", "var", ",", "get_z_bucket", "(", "var", "[", "variable", "+", "'_'", "+", "fxn", "+", "'_z'", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "text", "=", "'number of '", "\n", "variable_text", "=", "'positive face expression'", "\n", "\n", "print", "(", "'Generating '", ",", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", ")", "\n", "i", "=", "0", "\n", "df_copy", "=", "var", ".", "copy", "(", ")", "\n", "df_copy", "[", "'blob'", "]", "=", "None", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "var", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "var", ".", "iloc", "[", "i", "]", "\n", "if", "row_df", "[", "'z_bucket'", "]", "==", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "df_copy", ".", "blob", ".", "iloc", "[", "i", "]", "=", "text", "+", "' '", "+", "variable_text", "+", "' by '", "+", "speaker", "+", "' '", "+", "row_df", "[", "'z_bucket'", "]", "+", "' '", "\n", "print", "(", "df_copy", ")", "\n", "\n", "", "", "return", "df_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_all_blob": [[99, 130], ["session_action_posiface.run_dataframe", "pandas.DataFrame", "pd.concat.fillna", "[].apply().reset_index", "tqdm.tqdm", "range", "pd.concat.sort_values", "[].apply", "len", "session_action_posiface.get_blob", "print", "pandas.concat", "len", "pd.concat.groupby"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.run_dataframe", "home.repos.pwc.inspect_result.SpectData_MONAH.actions.session_action_posiface.get_blob"], ["", "def", "get_all_blob", "(", "video_name_1", ",", "video_name_2", ")", ":", "\n", "# Importing connection object", "\n", "    ", "data", "=", "run_dataframe", "(", "video_name_1", ",", "video_name_2", ")", "\n", "\n", "action_blob", "=", "pd", ".", "DataFrame", "(", ")", "\n", "speakers", "=", "[", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", ",", "cfg", ".", "parameters_cfg", "[", "'speaker_2'", "]", "]", "\n", "\n", "for", "speaker", "in", "speakers", ":", "\n", "        ", "for", "fxn", "in", "[", "'count'", "]", ":", "\n", "            ", "for", "variable_text", "in", "[", "'posiface'", "]", ":", "\n", "                ", "blob", "=", "get_blob", "(", "variable_text", ",", "fxn", ",", "speaker", ",", "data", ")", "\n", "print", "(", "blob", ")", "\n", "action_blob", "=", "pd", ".", "concat", "(", "[", "action_blob", ",", "\n", "blob", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "action_blob", ".", "fillna", "(", "value", "=", "''", ",", "inplace", "=", "True", ")", "\n", "\n", "action_blob", "=", "action_blob", ".", "groupby", "(", "[", "'Video_ID'", "]", ")", "[", "\n", "'blob'", "]", ".", "apply", "(", "lambda", "x", ":", "''", ".", "join", "(", "x", ")", ")", ".", "reset_index", "(", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "action_blob", ")", ")", ")", ":", "\n", "        ", "row_df", "=", "action_blob", ".", "iloc", "[", "i", "]", "\n", "if", "not", "row_df", "[", "'blob'", "]", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "row_df", "[", "'blob'", "]", ")", ">", "0", ":", "\n", "                ", "action_blob", ".", "blob", ".", "iloc", "[", "i", "]", "=", "row_df", "[", "'blob'", "]", "[", ":", "-", "1", "]", "+", "'. '", "\n", "\n", "", "", "action_blob", "=", "action_blob", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "\n", "", "return", "action_blob", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.config.dir_config._auto_populate_derivative_directories": [[17, 57], ["str", "str", "str", "str", "str", "str", "str", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "os.path.join", "pathlib.Path", "platform.platform().lower", "str", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pathlib.Path", "pathlib.Path", "os.path.exists", "os.makedirs", "platform.platform", "os.path.join", "os.path.join"], "function", ["None"], ["def", "_auto_populate_derivative_directories", "(", "parallel_run_settings", ")", ":", "\n", "# Automatically Populate Derivative directories", "\n", "    ", "parallel_run_settings", "[", "'OpenFace_CSV_Path'", "]", "=", "str", "(", "pathlib", ".", "Path", "(", "\n", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'MONAH'", "]", ",", "'staging'", ")", "\n", ")", ")", "\n", "\n", "parallel_run_settings", "[", "'avi_path'", "]", "=", "str", "(", "pathlib", ".", "Path", "(", "\n", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'MONAH'", "]", ",", "'downloaded_videos'", ")", ")", ")", "\n", "parallel_run_settings", "[", "'wav_path'", "]", "=", "str", "(", "pathlib", ".", "Path", "(", "\n", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'MONAH'", "]", ",", "'downloaded_audio'", ")", ")", ")", "\n", "parallel_run_settings", "[", "'csv_path'", "]", "=", "str", "(", "pathlib", ".", "Path", "(", "\n", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'MONAH'", "]", ",", "'output'", ")", ")", ")", "\n", "\n", "parallel_run_settings", "[", "'usb_csv_path'", "]", "=", "str", "(", "pathlib", ".", "Path", "(", "\n", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'MONAH'", "]", ",", "'open_face_csv'", ")", ")", ")", "\n", "parallel_run_settings", "[", "'talkturn_wav_path'", "]", "=", "str", "(", "\n", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'wav_path'", "]", ",", "'talkturn'", ")", ")", "\n", "\n", "parallel_run_settings", "[", "'Vokaturi_API_Path'", "]", "=", "str", "(", "\n", "pathlib", ".", "Path", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'Vokaturi_Install_Path'", "]", ",", "'api'", ")", ")", ")", "\n", "\n", "if", "'linux'", "in", "platform", ".", "platform", "(", ")", ".", "lower", "(", ")", ":", "\n", "        ", "parallel_run_settings", "[", "'Vokaturi_Library_Path'", "]", "=", "str", "(", "pathlib", ".", "Path", "(", "\n", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'Vokaturi_Install_Path'", "]", ",", "\n", "\"lib/open/linux/OpenVokaturi-3-4-linux64.so\"", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "parallel_run_settings", "[", "'Vokaturi_Library_Path'", "]", "=", "str", "(", "pathlib", ".", "Path", "(", "\n", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'Vokaturi_Install_Path'", "]", ",", "\n", "\"lib/open/win/OpenVokaturi-3-4-win64.dll\"", ")", ")", ")", "\n", "\n", "# Auto create directories if not present", "\n", "", "keys", "=", "[", "'OpenFace_CSV_Path'", ",", "'avi_path'", ",", "'wav_path'", ",", "'csv_path'", ",", "'usb_csv_path'", ",", "\n", "'talkturn_wav_path'", "]", "\n", "\n", "for", "key", "in", "keys", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "parallel_run_settings", "[", "key", "]", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "parallel_run_settings", "[", "key", "]", ")", "\n", "\n", "", "", "return", "parallel_run_settings", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.config.dir_config.get_parallel_run_settings": [[59, 124], ["dir_config._auto_populate_derivative_directories", "set", "str", "str", "str", "str", "str", "str", "str", "str", "str", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.config.dir_config._auto_populate_derivative_directories"], ["", "def", "get_parallel_run_settings", "(", "computer_name", ")", ":", "\n", "    ", "assert", "(", "computer_name", ")", "in", "set", "(", "[", "'marriane_win'", ",", "\n", "'marriane_linux'", ",", "\n", "'joshua_linux'", "]", ")", ",", "'Unknown Computer Name'", "\n", "\n", "parallel_run_settings", "=", "{", "}", "\n", "parallel_run_settings", "[", "'computer_name'", "]", "=", "computer_name", "\n", "\n", "# Initialize", "\n", "parallel_run_settings", "[", "'OpenFace_CSV_Path'", "]", "=", "None", "\n", "parallel_run_settings", "[", "'avi_path'", "]", "=", "None", "\n", "parallel_run_settings", "[", "'wav_path'", "]", "=", "None", "\n", "parallel_run_settings", "[", "'csv_path'", "]", "=", "None", "\n", "\n", "# Setting up OpenFace", "\n", "# https://github.com/TadasBaltrusaitis/OpenFace", "\n", "parallel_run_settings", "[", "'feature_extraction_path'", "]", "=", "None", "\n", "parallel_run_settings", "[", "'offset_multiple'", "]", "=", "None", "\n", "parallel_run_settings", "[", "'usb_csv_path'", "]", "=", "None", "\n", "\n", "# Setting up Vokaturi version 3.4", "\n", "# https://developers.vokaturi.com/downloads/sdk", "\n", "# This is the path to Vokaturi.py when you download the", "\n", "# OpenVokaturi Software Development Kit from the link above", "\n", "parallel_run_settings", "[", "'Vokaturi_Install_Path'", "]", "=", "None", "\n", "parallel_run_settings", "[", "'Vokaturi_API_Path'", "]", "=", "None", "\n", "parallel_run_settings", "[", "'Vokaturi_Library_Path'", "]", "=", "None", "\n", "parallel_run_settings", "[", "'talkturn_wav_path'", "]", "=", "None", "\n", "\n", "if", "computer_name", "==", "'marriane_win'", ":", "\n", "        ", "parallel_run_settings", "[", "'MONAH'", "]", "=", "str", "(", "pathlib", ".", "Path", "(", "\"E:/iemocap\"", ")", ")", "\n", "\n", "parallel_run_settings", "[", "'feature_extraction_path'", "]", "=", "str", "(", "\n", "pathlib", ".", "Path", "(", "\"E:/OpenFace_2.2.0_win_x64 Josh/OpenFace_2.2.0_win_x64\"", ")", ")", "\n", "\n", "parallel_run_settings", "[", "'offset_multiple'", "]", "=", "0", "\n", "\n", "parallel_run_settings", "[", "'Vokaturi_Install_Path'", "]", "=", "str", "(", "\n", "pathlib", ".", "Path", "(", "\"E:/OpenVokaturi-3-4/OpenVokaturi-3-4\"", ")", ")", "\n", "\n", "", "if", "computer_name", "==", "'marriane_linux'", ":", "\n", "        ", "parallel_run_settings", "[", "'MONAH'", "]", "=", "str", "(", "pathlib", ".", "Path", "(", "\"/datadrive/MONAH\"", ")", ")", "\n", "\n", "parallel_run_settings", "[", "'feature_extraction_path'", "]", "=", "str", "(", "\n", "pathlib", ".", "Path", "(", "\"/datadrive/Github/opencv-4.1.0/build/bin/\"", ")", ")", "\n", "\n", "parallel_run_settings", "[", "'offset_multiple'", "]", "=", "0", "\n", "\n", "parallel_run_settings", "[", "'Vokaturi_Install_Path'", "]", "=", "str", "(", "\n", "pathlib", ".", "Path", "(", "\"/datadrive/Github/OpenVokaturi-3-4\"", ")", ")", "\n", "\n", "", "if", "computer_name", "==", "'joshua_linux'", ":", "\n", "        ", "parallel_run_settings", "[", "'MONAH'", "]", "=", "str", "(", "pathlib", ".", "Path", "(", "\"/mnt/S/MONAH\"", ")", ")", "\n", "\n", "parallel_run_settings", "[", "'feature_extraction_path'", "]", "=", "str", "(", "\n", "pathlib", ".", "Path", "(", "\"/mnt/G/Github/OpenFace/build/bin/\"", ")", ")", "\n", "\n", "parallel_run_settings", "[", "'offset_multiple'", "]", "=", "0", "\n", "\n", "parallel_run_settings", "[", "'Vokaturi_Install_Path'", "]", "=", "str", "(", "\n", "pathlib", ".", "Path", "(", "\"/mnt/H/Tools/OpenVokaturi-3-4\"", ")", ")", "\n", "\n", "", "parallel_run_settings", "=", "_auto_populate_derivative_directories", "(", "parallel_run_settings", ")", "\n", "\n", "return", "parallel_run_settings", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.config.test_dir_config.TestPRS.test_all_not_none": [[17, 32], ["parallel_run_settings.items"], "methods", ["None"], ["def", "test_all_not_none", "(", "self", ")", ":", "\n", "        ", "'''\n        Check that all values are not none, that is they are initiated\n        :return: assertion\n        '''", "\n", "\n", "parallel_run_settings", "=", "TestPRS", ".", "parallel_run_settings", "\n", "\n", "result", "=", "True", "\n", "\n", "for", "key", ",", "val", "in", "parallel_run_settings", ".", "items", "(", ")", ":", "\n", "            ", "if", "val", "is", "None", ":", "\n", "                ", "result", "=", "False", "\n", "\n", "", "", "assert", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SpectData_MONAH.Actions.talkturn_family_actions.combine_actions_features": [[13, 63], ["Python.compute_smile", "Python.compute_posiface", "Python.compute_au_actions", "pandas.read_csv", "pandas.read_csv", "smile[].apply", "pandas.read_csv", "posiface[].apply", "pandas.read_csv", "au_actions[].apply", "pd.merge.fillna", "pd.merge.to_csv", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "pandas.merge", "os.path.join", "x.split", "x.split", "x.split"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.Actions.talkturn_smile.compute_smile", "home.repos.pwc.inspect_result.SpectData_MONAH.Actions.talkturn_posiface.compute_posiface", "home.repos.pwc.inspect_result.SpectData_MONAH.Actions.talkturn_au_actions.compute_au_actions"], ["def", "combine_actions_features", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    combine action features in one summary table\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "sml", ".", "compute_smile", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "psf", ".", "compute_posiface", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "aua", ".", "compute_au_actions", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "\n", "# load dataframes", "\n", "talkturn", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "\"_\"", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "\"weaved talkturns.csv\"", ")", ")", "\n", "talkturn", "=", "talkturn", "[", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "'text'", ",", "'start time'", ",", "'end time'", "]", "]", "\n", "# smile detected", "\n", "smile", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "\"_\"", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "\"talkturn_smile.csv\"", ")", ")", "\n", "smile", "[", "'audio_id'", "]", "=", "smile", "[", "'video_id'", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "smile", "=", "smile", "[", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "'smile'", "]", "]", "\n", "# posiface detected", "\n", "posiface", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "\"_\"", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "\"talkturn_posiface.csv\"", ")", ")", "\n", "posiface", "[", "'audio_id'", "]", "=", "posiface", "[", "'video_id'", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "posiface", "=", "posiface", "[", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "'posiface'", "]", "]", "\n", "# au actions detected", "\n", "au_actions", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "\"_\"", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "\"talkturn_au_actions.csv\"", ")", ")", "\n", "au_actions", "[", "'audio_id'", "]", "=", "au_actions", "[", "'video_id'", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "au_actions", "=", "au_actions", "[", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "'AU05_c'", ",", "\n", "'AU17_c'", ",", "'AU20_c'", ",", "'AU25_c'", "]", "]", "\n", "\n", "dfs", "=", "[", "smile", ",", "posiface", ",", "au_actions", "]", "\n", "dfr", "=", "dfs", "[", "0", "]", "\n", "for", "df_", "in", "dfs", "[", "1", ":", "]", ":", "\n", "        ", "dfr", "=", "pd", ".", "merge", "(", "dfr", ",", "df_", ",", "how", "=", "'outer'", ",", "on", "=", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", "]", ")", "\n", "\n", "", "dfr", "=", "dfr", ".", "fillna", "(", "0", ")", "\n", "dfr", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "\"_\"", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "'talkturn_family_actions.csv'", ")", ",", "\n", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Actions.talkturn_posiface.compute_posiface": [[12, 50], ["pandas.read_csv", "pandas.read_csv", "open_face_results.sort_values.apply", "open_face_results.sort_values.sort_values", "pandas.merge", "numpy.where", "numpy.where", "pd.merge.groupby().agg", "posiface.reset_index.reset_index", "numpy.where", "posiface.reset_index.to_csv", "os.path.join", "os.path.join", "os.path.join", "pd.merge.groupby"], "function", ["None"], ["def", "compute_posiface", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Compute for posiface status of the talkturn\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "talkturn", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "\"weaved talkturns.csv\"", ")", ")", "\n", "open_face_results", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_1\"", ",", "\n", "\"openface_raw.csv\"", ")", ")", "\n", "open_face_results", "[", "'speaker'", "]", "=", "open_face_results", ".", "apply", "(", "lambda", "x", ":", "\n", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", "\n", "if", "x", "[", "'video_id'", "]", "==", "video_name_1", "else", "\n", "cfg", ".", "parameters_cfg", "[", "'speaker_2'", "]", ",", "\n", "axis", "=", "1", ")", "\n", "open_face_results", "=", "open_face_results", ".", "sort_values", "(", "by", "=", "[", "'video_id'", ",", "'frame'", "]", ")", "\n", "for_posiface", "=", "pd", ".", "merge", "(", "talkturn", ",", "open_face_results", ",", "how", "=", "\"inner\"", ",", "on", "=", "[", "\"video_id\"", ",", "\"speaker\"", "]", ")", "\n", "for_posiface", "[", "'time_status'", "]", "=", "np", ".", "where", "(", "(", "for_posiface", "[", "'start time'", "]", "<=", "\n", "for_posiface", "[", "' timestamp'", "]", ")", "&", "\n", "(", "for_posiface", "[", "'end time'", "]", ">=", "\n", "for_posiface", "[", "' timestamp'", "]", ")", ",", "1", ",", "0", ")", "\n", "for_posiface", "=", "for_posiface", "[", "for_posiface", "[", "'time_status'", "]", "==", "1", "]", "\n", "for_posiface", "[", "'posiface_status'", "]", "=", "np", ".", "where", "(", "(", "for_posiface", "[", "' AU12_c'", "]", "==", "1", ")", ",", "1", ",", "0", ")", "\n", "posiface", "=", "for_posiface", ".", "groupby", "(", "[", "'video_id'", ",", "'speaker'", ",", "'talkturn no'", "]", ")", ".", "agg", "(", "{", "\n", "'posiface_status'", ":", "sum", ",", "\n", "' timestamp'", ":", "'count'", "\n", "}", ")", "\n", "posiface", "=", "posiface", ".", "reset_index", "(", ")", "\n", "posiface", "[", "'posiface'", "]", "=", "np", ".", "where", "(", "(", "posiface", "[", "'posiface_status'", "]", "==", "posiface", "[", "' timestamp'", "]", ")", ",", "1", ",", "0", ")", "\n", "posiface", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "\"_\"", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "\"talkturn_posiface.csv\"", ")", ",", "\n", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Actions.talkturn_au_actions.compute_au_actions": [[12, 58], ["pandas.read_csv", "pandas.read_csv", "open_face_results.sort_values.apply", "open_face_results.sort_values.sort_values", "pandas.merge", "numpy.where", "pd.merge.groupby().agg", "au_actions.reset_index.reset_index", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "au_actions.reset_index.to_csv", "os.path.join", "os.path.join", "os.path.join", "pd.merge.groupby"], "function", ["None"], ["def", "compute_au_actions", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Compute for the au summary per talkturn\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "talkturn", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "\"weaved talkturns.csv\"", ")", ")", "\n", "open_face_results", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_1\"", ",", "\n", "\"openface_raw.csv\"", ")", ")", "\n", "open_face_results", "[", "'speaker'", "]", "=", "open_face_results", ".", "apply", "(", "lambda", "x", ":", "\n", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", "\n", "if", "x", "[", "'video_id'", "]", "==", "video_name_1", "else", "\n", "cfg", ".", "parameters_cfg", "[", "'speaker_2'", "]", ",", "\n", "axis", "=", "1", ")", "\n", "open_face_results", "=", "open_face_results", ".", "sort_values", "(", "by", "=", "[", "'video_id'", ",", "'speaker'", ",", "'frame'", "]", ")", "\n", "for_aus", "=", "pd", ".", "merge", "(", "talkturn", ",", "open_face_results", ",", "how", "=", "\"inner\"", ",", "on", "=", "[", "\"video_id\"", ",", "\"speaker\"", "]", ")", "\n", "for_aus", "[", "'time_status'", "]", "=", "np", ".", "where", "(", "(", "for_aus", "[", "'start time'", "]", "<=", "\n", "for_aus", "[", "' timestamp'", "]", ")", "&", "\n", "(", "for_aus", "[", "'end time'", "]", ">=", "\n", "for_aus", "[", "' timestamp'", "]", ")", ",", "1", ",", "0", ")", "\n", "for_aus", "=", "for_aus", "[", "for_aus", "[", "'time_status'", "]", "==", "1", "]", "\n", "au_actions", "=", "for_aus", ".", "groupby", "(", "[", "'video_id'", ",", "'speaker'", ",", "'talkturn no'", "]", ")", ".", "agg", "(", "{", "\n", "' timestamp'", ":", "'count'", ",", "\n", "' AU05_c'", ":", "sum", ",", "\n", "' AU17_c'", ":", "sum", ",", "\n", "' AU20_c'", ":", "sum", ",", "\n", "' AU25_c'", ":", "sum", "\n", "}", ")", "\n", "au_actions", "=", "au_actions", ".", "reset_index", "(", ")", "\n", "au_actions", "[", "'AU05_c'", "]", "=", "np", ".", "where", "(", "(", "au_actions", "[", "' timestamp'", "]", "==", "au_actions", "[", "' AU05_c'", "]", ")", ",", "1", ",", "0", ")", "\n", "au_actions", "[", "'AU17_c'", "]", "=", "np", ".", "where", "(", "(", "au_actions", "[", "' timestamp'", "]", "==", "au_actions", "[", "' AU17_c'", "]", ")", ",", "1", ",", "0", ")", "\n", "au_actions", "[", "'AU20_c'", "]", "=", "np", ".", "where", "(", "(", "au_actions", "[", "' timestamp'", "]", "==", "au_actions", "[", "' AU20_c'", "]", ")", ",", "1", ",", "0", ")", "\n", "au_actions", "[", "'AU25_c'", "]", "=", "np", ".", "where", "(", "(", "au_actions", "[", "' timestamp'", "]", "==", "au_actions", "[", "' AU25_c'", "]", ")", ",", "1", ",", "0", ")", "\n", "au_actions", "=", "au_actions", "[", "[", "'video_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "\n", "'AU05_c'", ",", "'AU17_c'", ",", "'AU20_c'", ",", "'AU25_c'", "]", "]", "\n", "\n", "au_actions", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "\"talkturn_au_actions.csv\"", ")", ",", "\n", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Actions.talkturn_smile.compute_smile": [[12, 56], ["pandas.read_csv", "pandas.read_csv", "pd.read_csv.apply", "open_face.sort_values.sort_values", "open_face[].shift", "open_face[].shift", "open_face.sort_values.apply", "pd.merge.previous_timestamp.apply", "pd.merge.timestamp.apply", "pd.merge.previous_smiling_end_date.shift", "pandas.merge", "numpy.where", "pd.merge.to_csv", "os.path.join", "os.path.join", "os.path.join", "open_face[].isnull"], "function", ["None"], ["def", "compute_smile", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Compute smile per talkturn\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "talkturn", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "\"weaved talkturns.csv\"", ")", ")", "\n", "open_face_results", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_1\"", ",", "\n", "\"openface_raw.csv\"", ")", ")", "\n", "open_face_results", "[", "'speaker'", "]", "=", "open_face_results", ".", "apply", "(", "lambda", "x", ":", "\n", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", "\n", "if", "x", "[", "'video_id'", "]", "==", "video_name_1", "else", "\n", "cfg", ".", "parameters_cfg", "[", "'speaker_2'", "]", ",", "\n", "axis", "=", "1", ")", "\n", "open_face", "=", "open_face_results", "[", "(", "open_face_results", "[", "' AU06_c'", "]", "==", "1", ")", "&", "\n", "(", "open_face_results", "[", "' AU12_c'", "]", "==", "1", ")", "]", "\n", "open_face", "=", "open_face", ".", "sort_values", "(", "by", "=", "[", "'video_id'", ",", "'frame'", "]", ")", "\n", "open_face", "=", "open_face", "[", "[", "'video_id'", ",", "'speaker'", ",", "'frame'", ",", "' timestamp'", ",", "' AU06_c'", ",", "' AU12_c'", "]", "]", "\n", "open_face", ".", "columns", "=", "[", "'video_id'", ",", "'speaker'", ",", "'frame'", ",", "'timestamp'", ",", "'AU06_c'", ",", "'AU12_c'", "]", "\n", "open_face", "[", "'previous_timestamp'", "]", "=", "open_face", "[", "'timestamp'", "]", ".", "shift", "(", ")", "\n", "open_face", "[", "'previous_frame'", "]", "=", "open_face", "[", "'frame'", "]", ".", "shift", "(", ")", "\n", "open_face", "[", "'frame_status'", "]", "=", "open_face", ".", "apply", "(", "lambda", "x", ":", "x", "[", "'frame'", "]", "-", "x", "[", "'previous_frame'", "]", ",", "\n", "axis", "=", "1", ")", "\n", "smiling_df", "=", "open_face", "[", "(", "open_face", "[", "'frame_status'", "]", "!=", "1", ")", "|", "(", "open_face", "[", "'frame_status'", "]", ".", "isnull", "(", ")", ")", "]", "\n", "smiling_df", "[", "'previous_smiling_end_date'", "]", "=", "smiling_df", ".", "previous_timestamp", ".", "apply", "(", "lambda", "x", ":", "x", ")", "\n", "smiling_df", "[", "'start_date'", "]", "=", "smiling_df", ".", "timestamp", ".", "apply", "(", "lambda", "x", ":", "x", ")", "\n", "smiling_df", "[", "'end_date'", "]", "=", "smiling_df", ".", "previous_smiling_end_date", ".", "shift", "(", "-", "1", ")", "\n", "smiling_df", "=", "smiling_df", "[", "(", "smiling_df", "[", "'end_date'", "]", "-", "smiling_df", "[", "'start_date'", "]", ")", ">=", "\n", "cfg", ".", "parameters_cfg", "[", "'a_smile_time'", "]", "]", "\n", "smiling_df", "=", "smiling_df", "[", "[", "'video_id'", ",", "'speaker'", ",", "'start_date'", ",", "'end_date'", "]", "]", "\n", "smiling_df", "=", "pd", ".", "merge", "(", "smiling_df", ",", "talkturn", ",", "how", "=", "\"right\"", ",", "on", "=", "[", "'video_id'", ",", "'speaker'", "]", ")", "\n", "smiling_df", "[", "'smile'", "]", "=", "np", ".", "where", "(", "(", "smiling_df", "[", "'start time'", "]", "<=", "smiling_df", "[", "'start_date'", "]", ")", "&", "\n", "(", "smiling_df", "[", "'end time'", "]", ">=", "smiling_df", "[", "'end_date'", "]", ")", ",", "1", ",", "0", ")", "\n", "smiling_df", "=", "smiling_df", "[", "[", "'video_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "'smile'", "]", "]", "\n", "smiling_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "\"_\"", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "'talkturn_smile.csv'", ")", ",", "\n", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Verbatim.execute_weaving_talkturn.run_weaving_talkturn": [[16, 122], ["Python.run_google_speech_to_text", "pandas.read_csv", "df_word.drop_duplicates.apply", "df_word.drop_duplicates.Audio_ID.apply", "df_word.drop_duplicates.Audio_ID.apply", "df_word.drop_duplicates.drop_duplicates", "df_word.drop_duplicates.sort_values", "df_word[].shift", "df_word[].shift", "list", "pandas.DataFrame", "[].apply().reset_index", "talkturn.sort_values.groupby().agg", "[].item.reset_index", "pandas.merge", "talkturn.sort_values.sort_values", "talkturn.sort_values.to_csv", "gc.collect", "os.path.join", "df_word.drop_duplicates.groupby().cumcount", "set", "logging.getLogger().setLevel", "logging.info", "os.path.join", "[].item", "[].item", "[].item", "[].apply", "talkturn.sort_values.groupby", "x.split", "df_word.drop_duplicates.groupby", "logging.getLogger", "row_list.append", "row_list.append", "str", "start_date.item", "start_date.item", "str", "talkturn.sort_values.groupby"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.Google_speech_to_text.execute_google_speech_to_text.run_google_speech_to_text"], ["def", "run_weaving_talkturn", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    weave resulted scripts from google speech to text\n    :return: none\n    '''", "\n", "gst", ".", "run_google_speech_to_text", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "\n", "# Load dataframes", "\n", "df_word", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_1'", ",", "\n", "\"word_transcripts.csv\"", ")", ")", "\n", "df_word", "[", "'speaker_tag'", "]", "=", "df_word", ".", "apply", "(", "lambda", "x", ":", "\n", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", "\n", "if", "x", "[", "'Audio_ID'", "]", "==", "video_name_1", "else", "\n", "cfg", ".", "parameters_cfg", "[", "'speaker_2'", "]", ",", "\n", "axis", "=", "1", ")", "\n", "df_word", "[", "'video_id'", "]", "=", "df_word", ".", "Audio_ID", ".", "apply", "(", "lambda", "x", ":", "x", ")", "\n", "df_word", "[", "'audio_id'", "]", "=", "df_word", ".", "Audio_ID", ".", "apply", "(", "lambda", "x", ":", "x", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "\n", "df_word", "=", "df_word", ".", "drop_duplicates", "(", ")", "\n", "df_word", ".", "sort_values", "(", "by", "=", "[", "'start_time'", "]", ",", "inplace", "=", "True", ")", "\n", "df_word", "[", "'word number by audio'", "]", "=", "df_word", ".", "groupby", "(", "[", "'audio_id'", "]", ")", ".", "cumcount", "(", ")", "+", "1", "\n", "df_word", "[", "'speaker lagged'", "]", "=", "df_word", "[", "'speaker_tag'", "]", ".", "shift", "(", ")", "\n", "df_word", "[", "'audio lagged'", "]", "=", "df_word", "[", "'audio_id'", "]", ".", "shift", "(", ")", "\n", "\n", "# Initialize values", "\n", "row_list", "=", "[", "]", "\n", "k", "=", "1", "\n", "\n", "for", "audio_id", "in", "list", "(", "set", "(", "df_word", "[", "'audio_id'", "]", ")", ")", ":", "\n", "\n", "        ", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "word_number", "=", "1", "\n", "grouping", "=", "0", "\n", "for", "word", "in", "df_word", "[", "'word'", "]", "[", "df_word", "[", "'audio_id'", "]", "==", "audio_id", "]", ":", "\n", "            ", "video_id", "=", "(", "df_word", "[", "'video_id'", "]", "[", "\n", "(", "df_word", "[", "'audio_id'", "]", "==", "audio_id", ")", "&", "\n", "(", "df_word", "[", "'word number by audio'", "]", "==", "word_number", ")", "]", ")", ".", "item", "(", ")", "\n", "dfr_a", "=", "(", "df_word", "[", "'speaker lagged'", "]", "[", "\n", "(", "df_word", "[", "'audio_id'", "]", "==", "audio_id", ")", "&", "\n", "(", "df_word", "[", "'word number by audio'", "]", "==", "word_number", ")", "]", ")", ".", "item", "(", ")", "\n", "dfr_b", "=", "(", "df_word", "[", "'speaker_tag'", "]", "[", "\n", "(", "df_word", "[", "'audio_id'", "]", "==", "audio_id", ")", "&", "\n", "(", "df_word", "[", "'word number by audio'", "]", "==", "word_number", ")", "]", ")", ".", "item", "(", ")", "\n", "\n", "if", "(", "(", "not", "dfr_a", ")", "or", "(", "dfr_a", "==", "dfr_b", ")", ")", ":", "\n", "                ", "grouping", "=", "grouping", "\n", "start_date", "=", "df_word", "[", "'start_time'", "]", "[", "\n", "(", "df_word", "[", "'audio_id'", "]", "==", "audio_id", ")", "&", "\n", "(", "df_word", "[", "'word number by audio'", "]", "==", "word_number", ")", "]", "\n", "speaker", "=", "dfr_b", "\n", "text", "=", "word", "\n", "\n", "row_i", "=", "{", "'video_id'", ":", "video_id", ",", "\n", "'audio_id'", ":", "audio_id", ",", "\n", "'talkturn no'", ":", "grouping", ",", "\n", "'start date'", ":", "start_date", ".", "item", "(", ")", ",", "\n", "'speaker'", ":", "speaker", ",", "\n", "'text'", ":", "text", "}", "\n", "row_list", ".", "append", "(", "row_i", ")", "\n", "\n", "word_number", "=", "word_number", "+", "1", "\n", "\n", "", "else", ":", "\n", "                ", "grouping", "=", "grouping", "+", "1", "\n", "start_date", "=", "df_word", "[", "'start_time'", "]", "[", "\n", "(", "df_word", "[", "'audio_id'", "]", "==", "audio_id", ")", "&", "\n", "(", "df_word", "[", "'word number by audio'", "]", "==", "word_number", ")", "]", "\n", "speaker", "=", "dfr_b", "\n", "text", "=", "word", "\n", "\n", "row_i", "=", "{", "'video_id'", ":", "video_id", ",", "\n", "'audio_id'", ":", "audio_id", ",", "\n", "'talkturn no'", ":", "grouping", ",", "\n", "'start date'", ":", "start_date", ".", "item", "(", ")", ",", "\n", "'speaker'", ":", "speaker", ",", "\n", "'text'", ":", "text", "}", "\n", "row_list", ".", "append", "(", "row_i", ")", "\n", "\n", "word_number", "=", "word_number", "+", "1", "\n", "\n", "", "", "logging", ".", "info", "(", "str", "(", "k", ")", "+", "\" Completed \"", "+", "str", "(", "audio_id", ")", ")", "\n", "\n", "k", "=", "k", "+", "1", "\n", "\n", "", "talkturn", "=", "pd", ".", "DataFrame", "(", "row_list", ")", "\n", "dfr_a", "=", "talkturn", ".", "groupby", "(", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", "]", ")", "[", "'text'", "]", ".", "apply", "(", "\n", "' '", ".", "join", ")", ".", "reset_index", "(", ")", "\n", "dfr_b", "=", "talkturn", ".", "groupby", "(", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", "]", ")", ".", "agg", "(", "{", "\n", "'start date'", ":", "[", "min", ",", "max", "]", "}", ")", "\n", "dfr_b", "=", "dfr_b", ".", "reset_index", "(", ")", "\n", "dfr_b", ".", "columns", "=", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "'start time'", ",", "'end time'", "]", "\n", "talkturn", "=", "pd", ".", "merge", "(", "dfr_a", ",", "dfr_b", ",", "how", "=", "'outer'", ",", "on", "=", "(", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ")", ")", "\n", "talkturn", "=", "talkturn", ".", "sort_values", "(", "by", "=", "[", "'video_id'", ",", "'audio_id'", ",", "'talkturn no'", "]", ",", "\n", "ascending", "=", "[", "True", ",", "True", ",", "True", "]", ")", "\n", "talkturn", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "'weaved talkturns.csv'", ")", ",", "\n", "sep", "=", "','", ",", "\n", "index", "=", "False", ",", "\n", "encoding", "=", "'utf-8'", ")", "\n", "del", "[", "[", "df_word", ",", "dfr_a", ",", "dfr_b", "]", "]", "\n", "gc", ".", "collect", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_delay.extract_delay": [[10, 32], ["pandas.read_csv", "talkturn[].shift", "talkturn[].shift", "numpy.where", "numpy.where", "final_talkturn.to_csv", "os.path.join", "os.path.join"], "function", ["None"], ["def", "extract_delay", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Computes for the talkturn delay\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "talkturn", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "'weaved talkturns.csv'", ")", ")", "\n", "talkturn", "[", "'previous_speaker'", "]", "=", "talkturn", "[", "'speaker'", "]", ".", "shift", "(", ")", "\n", "talkturn", "[", "'next_start_time'", "]", "=", "talkturn", "[", "'start time'", "]", ".", "shift", "(", "-", "1", ")", "\n", "talkturn", "[", "'delay'", "]", "=", "talkturn", "[", "'next_start_time'", "]", "-", "talkturn", "[", "'end time'", "]", "\n", "talkturn", "[", "'speaker_match'", "]", "=", "np", ".", "where", "(", "(", "talkturn", "[", "'speaker'", "]", "!=", "talkturn", "[", "'previous_speaker'", "]", ")", ",", "\n", "0", ",", "1", ")", "\n", "idx", "=", "np", ".", "where", "(", "(", "talkturn", "[", "'speaker_match'", "]", "==", "0", ")", "&", "(", "talkturn", "[", "'delay'", "]", ">", "0", ")", ")", "\n", "final_talkturn", "=", "talkturn", ".", "loc", "[", "idx", "]", "\n", "final_talkturn", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "'talkturn_delay.csv'", ")", ",", "\n", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.get_summary_feature": [[13, 31], ["pandas.merge", "numpy.where", "pd.merge.groupby().agg", "df_summary.reset_index.reset_index", "pd.merge.groupby"], "function", ["None"], ["def", "get_summary_feature", "(", "table_name", ",", "column_name", ")", ":", "\n", "    ", "'''\n    This function gets the mean and standard deviation per talkturn\n    :param table_name: table to be analyzed\n    :param column_name: column to be analyzed\n    :return: summary table of mean and sd\n    '''", "\n", "dfr", "=", "pd", ".", "merge", "(", "table_name", ",", "table_name", ",", "how", "=", "\"inner\"", ",", "on", "=", "[", "'audio_id'", ",", "'speaker'", "]", ")", "\n", "dfr", "[", "'previous_talkturn'", "]", "=", "np", ".", "where", "(", "dfr", "[", "'talkturn no_y'", "]", "<", "dfr", "[", "'talkturn no_x'", "]", ",", "1", ",", "0", ")", "\n", "dfr", "[", "column_name", "]", "=", "dfr", "[", "column_name", "+", "'_y'", "]", "*", "dfr", "[", "'previous_talkturn'", "]", "\n", "df_summary", "=", "dfr", ".", "groupby", "(", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no_x'", "]", ")", ".", "agg", "(", "{", "\n", "column_name", ":", "[", "'mean'", ",", "'std'", "]", "\n", "}", ")", "\n", "df_summary", "=", "df_summary", ".", "reset_index", "(", ")", "\n", "df_summary", ".", "columns", "=", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "\n", "column_name", "+", "'_mean'", ",", "column_name", "+", "'_sd'", "]", "\n", "\n", "return", "df_summary", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.normalize_column_values": [[32, 48], ["pandas.merge", "numpy.where"], "function", ["None"], ["", "def", "normalize_column_values", "(", "table_name", ",", "column_name", ",", "summary_table", ")", ":", "\n", "    ", "'''\n    This function normalizes the given column values\n    :param table_name: table to be normalized\n    :param column_name: column to be normalized\n    :param summary_table: table of means and standard deviation\n    :return: table with normalized column values\n    '''", "\n", "dfr", "=", "pd", ".", "merge", "(", "table_name", ",", "summary_table", ",", "how", "=", "\"inner\"", ",", "\n", "on", "=", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", "]", ")", "\n", "dfr", "[", "column_name", "+", "'_z'", "]", "=", "np", ".", "where", "(", "dfr", "[", "column_name", "+", "'_sd'", "]", "==", "0", ",", "0", ",", "\n", "(", "dfr", "[", "column_name", "]", "-", "dfr", "[", "column_name", "+", "'_mean'", "]", ")", "*", "1.0", "/", "\n", "dfr", "[", "column_name", "+", "'_sd'", "]", ")", "\n", "dfr", "=", "dfr", "[", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "column_name", "+", "'_z'", "]", "]", "\n", "\n", "return", "dfr", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.combine_prosody_features": [[49, 118], ["Python.extract_speech_rate", "Python.extract_delay", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "talkturn_family_prosody.get_summary_feature", "talkturn_family_prosody.get_summary_feature", "talkturn_family_prosody.get_summary_feature", "talkturn_family_prosody.get_summary_feature", "talkturn_family_prosody.get_summary_feature", "talkturn_family_prosody.get_summary_feature", "talkturn_family_prosody.get_summary_feature", "talkturn_family_prosody.normalize_column_values", "talkturn_family_prosody.normalize_column_values", "pandas.merge", "talkturn_family_prosody.normalize_column_values", "talkturn_family_prosody.normalize_column_values", "talkturn_family_prosody.normalize_column_values", "talkturn_family_prosody.normalize_column_values", "talkturn_family_prosody.normalize_column_values", "pd.merge.fillna", "pd.merge.to_csv", "os.path.join", "os.path.join", "os.path.join", "pandas.merge", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_wpm.extract_speech_rate", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_delay.extract_delay", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.get_summary_feature", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.get_summary_feature", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.get_summary_feature", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.get_summary_feature", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.get_summary_feature", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.get_summary_feature", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.get_summary_feature", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.normalize_column_values", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.normalize_column_values", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.normalize_column_values", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.normalize_column_values", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.normalize_column_values", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.normalize_column_values", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.normalize_column_values"], ["", "def", "combine_prosody_features", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Combine normalize feature values\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "wpm", ".", "extract_speech_rate", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "dly", ".", "extract_delay", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "\n", "# Load dataframes", "\n", "df_wpm", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "\"talkturn_wpm.csv\"", ")", ")", "\n", "df_delay", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "\"talkturn_delay.csv\"", ")", ")", "\n", "df_delay", "[", "'delay_ms'", "]", "=", "df_delay", "[", "'delay'", "]", "*", "1000", "\n", "df_vokaturi", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_1\"", ",", "\n", "\"talkturn_vokaturi.csv\"", ")", ")", "\n", "\n", "wpm_summary", "=", "get_summary_feature", "(", "table_name", "=", "df_wpm", ",", "column_name", "=", "\"wpm\"", ")", "\n", "delay_summary", "=", "get_summary_feature", "(", "table_name", "=", "df_delay", ",", "column_name", "=", "\"delay\"", ")", "\n", "vokaturi_summary_1", "=", "get_summary_feature", "(", "table_name", "=", "df_vokaturi", ",", "column_name", "=", "\"neutrality\"", ")", "\n", "vokaturi_summary_2", "=", "get_summary_feature", "(", "table_name", "=", "df_vokaturi", ",", "column_name", "=", "\"happiness\"", ")", "\n", "vokaturi_summary_3", "=", "get_summary_feature", "(", "table_name", "=", "df_vokaturi", ",", "column_name", "=", "\"sadness\"", ")", "\n", "vokaturi_summary_4", "=", "get_summary_feature", "(", "table_name", "=", "df_vokaturi", ",", "column_name", "=", "\"anger\"", ")", "\n", "vokaturi_summary_5", "=", "get_summary_feature", "(", "table_name", "=", "df_vokaturi", ",", "column_name", "=", "\"fear\"", ")", "\n", "\n", "wpm_summary", "=", "normalize_column_values", "(", "table_name", "=", "df_wpm", ",", "\n", "column_name", "=", "\"wpm\"", ",", "\n", "summary_table", "=", "wpm_summary", ")", "\n", "delay_summary", "=", "normalize_column_values", "(", "table_name", "=", "df_delay", ",", "\n", "column_name", "=", "\"delay\"", ",", "\n", "summary_table", "=", "delay_summary", ")", "\n", "delay_summary", "=", "pd", ".", "merge", "(", "delay_summary", ",", "df_delay", ",", "how", "=", "'inner'", ",", "\n", "on", "=", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", "]", ")", "\n", "delay_summary", "=", "delay_summary", "[", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "'delay_z'", ",", "'delay_ms'", "]", "]", "\n", "vokaturi_summary_1", "=", "normalize_column_values", "(", "table_name", "=", "df_vokaturi", ",", "\n", "column_name", "=", "\"neutrality\"", ",", "\n", "summary_table", "=", "vokaturi_summary_1", ")", "\n", "vokaturi_summary_2", "=", "normalize_column_values", "(", "table_name", "=", "df_vokaturi", ",", "\n", "column_name", "=", "\"happiness\"", ",", "\n", "summary_table", "=", "vokaturi_summary_2", ")", "\n", "vokaturi_summary_3", "=", "normalize_column_values", "(", "table_name", "=", "df_vokaturi", ",", "\n", "column_name", "=", "\"sadness\"", ",", "\n", "summary_table", "=", "vokaturi_summary_3", ")", "\n", "vokaturi_summary_4", "=", "normalize_column_values", "(", "table_name", "=", "df_vokaturi", ",", "\n", "column_name", "=", "\"anger\"", ",", "\n", "summary_table", "=", "vokaturi_summary_4", ")", "\n", "vokaturi_summary_5", "=", "normalize_column_values", "(", "table_name", "=", "df_vokaturi", ",", "\n", "column_name", "=", "\"fear\"", ",", "\n", "summary_table", "=", "vokaturi_summary_5", ")", "\n", "\n", "dfs", "=", "[", "wpm_summary", ",", "delay_summary", ",", "vokaturi_summary_1", ",", "vokaturi_summary_2", ",", "\n", "vokaturi_summary_3", ",", "vokaturi_summary_4", ",", "vokaturi_summary_5", "]", "\n", "dfr", "=", "dfs", "[", "0", "]", "\n", "for", "df_", "in", "dfs", "[", "1", ":", "]", ":", "\n", "        ", "dfr", "=", "pd", ".", "merge", "(", "dfr", ",", "df_", ",", "how", "=", "'outer'", ",", "on", "=", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", "]", ")", "\n", "\n", "", "dfr", "=", "dfr", ".", "fillna", "(", "0", ")", "\n", "dfr", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "'talkturn_family_prosody.csv'", ")", ",", "\n", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_wpm.extract_speech_rate": [[9, 31], ["pandas.read_csv", "talkturn[].str.split().str.len", "pd.read_csv.apply", "pd.read_csv.duration.apply", "pd.read_csv.apply", "wpm.to_csv", "os.path.join", "os.path.join", "talkturn[].str.split"], "function", ["None"], ["def", "extract_speech_rate", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Computes for speech rate per talkturn\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "\n", "# Load dataframes", "\n", "talkturn", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "\"weaved talkturns.csv\"", ")", ")", "\n", "talkturn", "[", "'wordcount'", "]", "=", "talkturn", "[", "'text'", "]", ".", "str", ".", "split", "(", ")", ".", "str", ".", "len", "(", ")", "\n", "talkturn", "[", "'duration'", "]", "=", "talkturn", ".", "apply", "(", "lambda", "x", ":", "x", "[", "'end time'", "]", "-", "x", "[", "'start time'", "]", ",", "axis", "=", "1", ")", "\n", "talkturn", "[", "'duration'", "]", "=", "talkturn", ".", "duration", ".", "apply", "(", "lambda", "x", ":", "1", "if", "x", "==", "0", "else", "x", ")", "\n", "talkturn", "[", "'wpm'", "]", "=", "talkturn", ".", "apply", "(", "lambda", "x", ":", "x", "[", "'wordcount'", "]", "*", "60.0", "/", "(", "x", "[", "'duration'", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "wpm", "=", "talkturn", "[", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "'wpm'", "]", "]", "\n", "wpm", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_2\"", ",", "\n", "\"talkturn_wpm.csv\"", ")", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.main.set_video": [[26, 30], ["main.run_settings", "print"], "function", ["None"], ["    "]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.main.weave_vpa": [[32, 61], ["Python.run_creating_directories", "print", "Python.combine_prosody_features", "Python.combine_actions_features", "print", "Python.weave_narrative", "print"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.Audio_files_manipulation.copy_mp4_files.run_creating_directories", "home.repos.pwc.inspect_result.SpectData_MONAH.Prosody.talkturn_family_prosody.combine_prosody_features", "home.repos.pwc.inspect_result.SpectData_MONAH.Actions.talkturn_family_actions.combine_actions_features", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.weave_narrative"], ["\n", "cdi", ".", "run_creating_directories", "(", "video_name_1", ",", "video_name_2", ")", "\n", "sdp", ".", "get_demographics_blob", "(", "video_name_1", ",", "video_name_2", ",", "word_count", "=", "d_word_count", ",", "\n", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "spp", ".", "get_prosody_blob", "(", "video_name_1", ",", "video_name_2", ",", "delay", "=", "p_delay", ",", "wpm", "=", "p_wpm", ",", "tone", "=", "p_tone", ")", "\n", "sap", ".", "get_actions_blob", "(", "video_name_1", ",", "video_name_2", ",", "au_action", "=", "a_au", ",", "posiface", "=", "a_posiface", ",", "smile", "=", "a_smile", ")", "\n", "\n", "demographics_blob", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'Demographics'", ",", "\n", "'narrative_coarse.csv'", ")", ")", "\n", "prosody_blob", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'Prosody'", ",", "\n", "'narrative_coarse.csv'", ")", ")", "\n", "actions_blob", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'Actions'", ",", "\n", "'narrative_coarse.csv'", ")", ")", "\n", "\n", "narrative_coarse", "=", "pd", ".", "concat", "(", "[", "demographics_blob", ",", "prosody_blob", ",", "actions_blob", "]", ",", "axis", "=", "0", ")", "\n", "narrative_coarse", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_4'", ",", "\n", "'narrative_coarse.csv'", ")", ",", "index", "=", "False", ")", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.test_narrative_file.TestNRF.test_init": [[17, 19], ["len"], "methods", ["None"], ["def", "test_init", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "dfr", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.test_narrative_file.TestNRF.test_sorted": [[20, 24], ["test_narrative_file.TestNRF.dfr[].sort_values", "source.equals"], "methods", ["None"], ["", "def", "test_sorted", "(", "self", ")", ":", "\n", "        ", "source", "=", "self", ".", "dfr", "[", "'talkturn no'", "]", "\n", "sorted", "=", "self", ".", "dfr", "[", "'talkturn no'", "]", ".", "sort_values", "(", ")", "\n", "assert", "source", ".", "equals", "(", "sorted", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.num_words_lookup": [[10, 18], ["pandas.DataFrame"], "function", ["None"], ["def", "num_words_lookup", "(", "num", ")", ":", "\n", "    ", "d", "=", "{", "'num_id'", ":", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", "]", ",", "\n", "'num_inwords'", ":", "[", "'two'", ",", "'three'", ",", "'four'", ",", "'five'", ",", "\n", "'six'", ",", "'seven'", ",", "'eight'", ",", "'nine'", ",", "\n", "'ten'", ",", "'eleven'", ",", "'twelve'", "]", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "d", ")", "\n", "\n", "return", "df", ".", "loc", "[", "df", "[", "'num_id'", "]", "==", "num", ",", "'num_inwords'", "]", ".", "values", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.delay_look_up": [[19, 31], ["pandas.DataFrame"], "function", ["None"], ["", "def", "delay_look_up", "(", "num", ")", ":", "\n", "    ", "'''\n    Look up table for delay\n    :return: look up data frame\n    '''", "\n", "d", "=", "{", "'lb'", ":", "[", "-", "1", ",", "0", ",", "1", ",", "2", "]", ",", "\n", "'ub'", ":", "[", "0", ",", "1", ",", "2", ",", "99", "]", ",", "\n", "'text'", ":", "[", "'a short delay '", ",", "'a slightly long delay '", ",", "\n", "'a long delay '", ",", "'a significantly long delay '", "]", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "d", ")", "\n", "\n", "return", "df", ".", "loc", "[", "(", "df", "[", "'lb'", "]", "<=", "num", ")", "&", "(", "num", "<", "df", "[", "'ub'", "]", ")", ",", "'text'", "]", ".", "values", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.wpm_look_up": [[32, 44], ["pandas.DataFrame"], "function", ["None"], ["", "def", "wpm_look_up", "(", "num", ")", ":", "\n", "    ", "'''\n    Look up table for wpm\n    :return: look up data frame\n    '''", "\n", "d", "=", "{", "'lb'", ":", "[", "-", "99", ",", "-", "2", ",", "1", ",", "2", "]", ",", "\n", "'ub'", ":", "[", "-", "2", ",", "-", "1", ",", "2", ",", "99", "]", ",", "\n", "'text'", ":", "[", "'very slowly '", ",", "'slowly '", ",", "\n", "'quickly '", ",", "'very quickly '", "]", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "d", ")", "\n", "\n", "return", "df", ".", "loc", "[", "(", "df", "[", "'lb'", "]", "<=", "num", ")", "&", "(", "num", "<", "df", "[", "'ub'", "]", ")", ",", "'text'", "]", ".", "values", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.tone_look_up": [[45, 57], ["pandas.DataFrame"], "function", ["None"], ["", "def", "tone_look_up", "(", "num", ")", ":", "\n", "    ", "'''\n    Look up table for tone\n    :return: look up data frame\n    '''", "\n", "d", "=", "{", "'lb'", ":", "[", "1", ",", "2", ",", "3", "]", ",", "\n", "'ub'", ":", "[", "2", ",", "3", ",", "4", "]", ",", "\n", "'text'", ":", "[", "'happily '", ",", "'angrily '", ",", "\n", "'sadly '", "]", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "d", ")", "\n", "\n", "return", "df", ".", "loc", "[", "(", "df", "[", "'lb'", "]", "<=", "num", ")", "&", "(", "num", "<", "df", "[", "'ub'", "]", ")", ",", "'text'", "]", ".", "values", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.jaw_drop_look_up": [[58, 69], ["pandas.DataFrame"], "function", ["None"], ["", "def", "jaw_drop_look_up", "(", "num", ")", ":", "\n", "    ", "'''\n    Look up table for tone\n    :return: look up data frame\n    '''", "\n", "d", "=", "{", "'lb'", ":", "[", "1", ",", "0", "]", ",", "\n", "'ub'", ":", "[", "2", ",", "1", "]", ",", "\n", "'text'", ":", "[", "' dropped jaw'", ",", "''", "]", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "d", ")", "\n", "\n", "return", "df", ".", "loc", "[", "(", "df", "[", "'lb'", "]", "<=", "num", ")", "&", "(", "num", "<", "df", "[", "'ub'", "]", ")", ",", "'text'", "]", ".", "values", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.chin_raiser_look_up": [[70, 81], ["pandas.DataFrame"], "function", ["None"], ["", "def", "chin_raiser_look_up", "(", "num", ")", ":", "\n", "    ", "'''\n    Look up table for tone\n    :return: look up data frame\n    '''", "\n", "d", "=", "{", "'lb'", ":", "[", "1", ",", "0", "]", ",", "\n", "'ub'", ":", "[", "2", ",", "1", "]", ",", "\n", "'text'", ":", "[", "' raised chin'", ",", "''", "]", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "d", ")", "\n", "\n", "return", "df", ".", "loc", "[", "(", "df", "[", "'lb'", "]", "<=", "num", ")", "&", "(", "num", "<", "df", "[", "'ub'", "]", ")", ",", "'text'", "]", ".", "values", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.upper_lid_raiser_look_up": [[82, 93], ["pandas.DataFrame"], "function", ["None"], ["", "def", "upper_lid_raiser_look_up", "(", "num", ")", ":", "\n", "    ", "'''\n    Look up table for tone\n    :return: look up data frame\n    '''", "\n", "d", "=", "{", "'lb'", ":", "[", "1", ",", "0", "]", ",", "\n", "'ub'", ":", "[", "2", ",", "1", "]", ",", "\n", "'text'", ":", "[", "' raised upper lid'", ",", "''", "]", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "d", ")", "\n", "\n", "return", "df", ".", "loc", "[", "(", "df", "[", "'lb'", "]", "<=", "num", ")", "&", "(", "num", "<", "df", "[", "'ub'", "]", ")", ",", "'text'", "]", ".", "values", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.stretch_lip_look_up": [[94, 105], ["pandas.DataFrame"], "function", ["None"], ["", "def", "stretch_lip_look_up", "(", "num", ")", ":", "\n", "    ", "'''\n    Look up table for tone\n    :return: look up data frame\n    '''", "\n", "d", "=", "{", "'lb'", ":", "[", "1", ",", "0", "]", ",", "\n", "'ub'", ":", "[", "2", ",", "1", "]", ",", "\n", "'text'", ":", "[", "' stretched lip'", ",", "''", "]", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "d", ")", "\n", "\n", "return", "df", ".", "loc", "[", "(", "df", "[", "'lb'", "]", "<=", "num", ")", "&", "(", "num", "<", "df", "[", "'ub'", "]", ")", ",", "'text'", "]", ".", "values", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.posiface_look_up": [[106, 117], ["pandas.DataFrame"], "function", ["None"], ["", "def", "posiface_look_up", "(", "num", ")", ":", "\n", "    ", "'''\n    Look up table for tone\n    :return: look up data frame\n    '''", "\n", "d", "=", "{", "'lb'", ":", "[", "1", ",", "0", "]", ",", "\n", "'ub'", ":", "[", "2", ",", "1", "]", ",", "\n", "'text'", ":", "[", "' displayed a positive expression'", ",", "''", "]", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "d", ")", "\n", "\n", "return", "df", ".", "loc", "[", "(", "df", "[", "'lb'", "]", "<=", "num", ")", "&", "(", "num", "<", "df", "[", "'ub'", "]", ")", ",", "'text'", "]", ".", "values", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.smile_look_up": [[118, 129], ["pandas.DataFrame"], "function", ["None"], ["", "def", "smile_look_up", "(", "num", ")", ":", "\n", "    ", "'''\n    Look up table for tone\n    :return: look up data frame\n    '''", "\n", "d", "=", "{", "'lb'", ":", "[", "1", ",", "0", "]", ",", "\n", "'ub'", ":", "[", "2", ",", "1", "]", ",", "\n", "'text'", ":", "[", "' smiled'", ",", "''", "]", "}", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "d", ")", "\n", "\n", "return", "df", ".", "loc", "[", "(", "df", "[", "'lb'", "]", "<=", "num", ")", "&", "(", "num", "<", "df", "[", "'ub'", "]", ")", ",", "'text'", "]", ".", "values", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.weave_narrative": [[130, 262], ["pandas.read_csv", "talkturn[].str.replace", "pd.read_csv.text.apply", "pd.read_csv.text.apply", "pandas.read_csv", "pandas.read_csv", "pd.merge.text.apply", "pd.merge.fillna", "pd.merge.delay_ms.apply", "pd.merge.apply", "pd.merge.wpm_z.apply", "pd.merge.smile.apply", "pd.merge.posiface.apply", "pd.merge.AU05_c.apply", "pd.merge.AU17_c.apply", "pd.merge.AU20_c.apply", "pd.merge.AU25_c.apply", "pd.merge.tone.apply", "pd.merge.apply", "pd.merge.apply", "pd.merge.apply", "pd.merge.apply", "pd.merge.apply", "pd.merge.apply", "pd.merge.apply", "pd.merge.apply", "pd.merge.apply", "pd.merge.blob_1.apply", "pd.merge.blob_2.apply", "pd.merge.blob_3.apply", "pd.merge.blob_4.apply", "pd.merge.blob_6.apply", "pd.merge.blob_8.apply", "pd.merge.apply", "pd.merge.apply", "pd.merge.sort_values", "pd.merge.to_csv", "logging.getLogger", "logging.getLogger.info", "os.path.join", "os.path.join", "os.path.join", "pandas.merge", "pd.merge.apply", "len", "len", "os.path.join", "x.lower", "narrative_fine.smile_look_up", "narrative_fine.posiface_look_up", "narrative_fine.upper_lid_raiser_look_up", "narrative_fine.chin_raiser_look_up", "narrative_fine.stretch_lip_look_up", "narrative_fine.jaw_drop_look_up", "narrative_fine.num_words_lookup", "narrative_fine.delay_look_up", "narrative_fine.wpm_look_up", "narrative_fine.tone_look_up", "str.lower", "round"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.smile_look_up", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.posiface_look_up", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.upper_lid_raiser_look_up", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.chin_raiser_look_up", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.stretch_lip_look_up", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.jaw_drop_look_up", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.num_words_lookup", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.delay_look_up", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.wpm_look_up", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.narrative_fine.tone_look_up"], ["", "def", "weave_narrative", "(", "video_name_1", ",", "video_name_2", ",", "delay", ",", "tone", ",", "speech_rate", ",", "\n", "au_action", ",", "posiface", ",", "smile", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Weaves narratives and exports csv\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "\n", "talkturn", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "'weaved talkturns.csv'", ")", ")", "\n", "talkturn", "[", "'text'", "]", "=", "talkturn", "[", "'text'", "]", ".", "str", ".", "replace", "(", "r'[^\\w\\s]+'", ",", "''", ")", "\n", "talkturn", "[", "'text'", "]", "=", "talkturn", ".", "text", ".", "apply", "(", "lambda", "x", ":", "x", "[", ":", "-", "1", "]", "if", "x", "[", "-", "1", ":", "]", "==", "' '", "else", "x", ")", "\n", "talkturn", "[", "'text'", "]", "=", "talkturn", ".", "text", ".", "apply", "(", "lambda", "x", ":", "x", "[", ":", "-", "1", "]", "if", "x", "[", "-", "1", ":", "]", "==", "' '", "else", "x", ")", "\n", "prosody", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "'talkturn_family_prosody.csv'", ")", ")", "\n", "actions", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "'talkturn_family_actions.csv'", ")", ")", "\n", "dfs", "=", "[", "talkturn", ",", "prosody", ",", "actions", "]", "\n", "dfr", "=", "dfs", "[", "0", "]", "\n", "for", "df_", "in", "dfs", "[", "1", ":", "]", ":", "\n", "        ", "dfr", "=", "pd", ".", "merge", "(", "dfr", ",", "df_", ",", "how", "=", "'outer'", ",", "on", "=", "[", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", "]", ")", "\n", "\n", "", "if", "(", "delay", "+", "tone", "+", "speech_rate", "==", "0", ")", "and", "(", "au_action", "+", "smile", "+", "posiface", "==", "0", ")", ":", "\n", "        ", "family", "=", "'v'", "\n", "", "elif", "(", "delay", "+", "tone", "+", "speech_rate", ">=", "1", ")", "and", "(", "au_action", "+", "smile", "+", "posiface", "==", "0", ")", ":", "\n", "        ", "family", "=", "'vp'", "\n", "", "elif", "(", "delay", "+", "tone", "+", "speech_rate", "==", "0", ")", "and", "(", "au_action", "+", "smile", "+", "posiface", ">=", "1", ")", ":", "\n", "        ", "family", "=", "'va'", "\n", "", "elif", "(", "delay", "+", "tone", "+", "speech_rate", ">=", "1", ")", "and", "(", "au_action", "+", "smile", "+", "posiface", ">=", "1", ")", ":", "\n", "        ", "family", "=", "'vpa'", "\n", "", "else", ":", "\n", "        ", "family", "=", "''", "\n", "\n", "", "dfr", "[", "'family'", "]", "=", "family", "\n", "dfr", "[", "'text'", "]", "=", "dfr", ".", "text", ".", "apply", "(", "lambda", "x", ":", "x", ".", "lower", "(", ")", ")", "\n", "dfr", ".", "loc", "[", "dfr", "[", "'happiness_z'", "]", ">", "2", ",", "'tone'", "]", "=", "1", "\n", "dfr", ".", "loc", "[", "dfr", "[", "'anger_z'", "]", ">", "2", ",", "'tone'", "]", "=", "2", "\n", "dfr", ".", "loc", "[", "dfr", "[", "'sadness_z'", "]", ">", "2", ",", "'tone'", "]", "=", "3", "\n", "dfr", "=", "dfr", ".", "fillna", "(", "0", ")", "\n", "\n", "dfr", "[", "'delay_num_words'", "]", "=", "dfr", ".", "delay_ms", ".", "apply", "(", "lambda", "x", ":", "num_words_lookup", "(", "num", "=", "round", "(", "x", "/", "100", ",", "0", ")", ")", "\n", "if", "x", ">=", "200", "and", "x", "<=", "1200", "else", "(", "' more than twelve'", "if", "x", ">", "1200", "else", "''", ")", ")", "\n", "dfr", "[", "'delay_text'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "delay_look_up", "(", "num", "=", "x", "[", "'delay_z'", "]", ")", "\n", "if", "x", "[", "'delay_ms'", "]", ">=", "200", "else", "''", ",", "axis", "=", "1", ")", "\n", "dfr", "[", "'wpm_text'", "]", "=", "dfr", ".", "wpm_z", ".", "apply", "(", "lambda", "x", ":", "wpm_look_up", "(", "num", "=", "x", ")", "if", "x", "<=", "-", "1", "or", "x", ">=", "1", "else", "''", ")", "\n", "dfr", "[", "'smile_text'", "]", "=", "dfr", ".", "smile", ".", "apply", "(", "lambda", "x", ":", "smile_look_up", "(", "num", "=", "x", ")", ")", "\n", "dfr", "[", "'posiface_text'", "]", "=", "dfr", ".", "posiface", ".", "apply", "(", "lambda", "x", ":", "posiface_look_up", "(", "num", "=", "x", ")", ")", "\n", "dfr", "[", "'upper_lid_raiser_text'", "]", "=", "dfr", ".", "AU05_c", ".", "apply", "(", "lambda", "x", ":", "upper_lid_raiser_look_up", "(", "num", "=", "x", ")", ")", "\n", "dfr", "[", "'chin_raiser_text'", "]", "=", "dfr", ".", "AU17_c", ".", "apply", "(", "lambda", "x", ":", "chin_raiser_look_up", "(", "num", "=", "x", ")", ")", "\n", "dfr", "[", "'lip_stretcher_text'", "]", "=", "dfr", ".", "AU20_c", ".", "apply", "(", "lambda", "x", ":", "stretch_lip_look_up", "(", "num", "=", "x", ")", ")", "\n", "dfr", "[", "'jaw_drop_text'", "]", "=", "dfr", ".", "AU25_c", ".", "apply", "(", "lambda", "x", ":", "jaw_drop_look_up", "(", "num", "=", "x", ")", ")", "\n", "dfr", "[", "'tone_text'", "]", "=", "dfr", ".", "tone", ".", "apply", "(", "lambda", "x", ":", "tone_look_up", "(", "num", "=", "x", ")", "if", "x", ">", "0", "and", "x", "<=", "3", "else", "''", ")", "\n", "\n", "# smile", "\n", "dfr", "[", "'blob_1'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "x", "[", "'smile_text'", "]", "+", "' '", "if", "x", "[", "'smile'", "]", "!=", "0", "else", "''", ",", "axis", "=", "1", ")", "\n", "\n", "# posiface", "\n", "dfr", "[", "'blob_2'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "x", "[", "'posiface_text'", "]", "+", "' '", "if", "x", "[", "'posiface'", "]", "!=", "0", "\n", "else", "''", ",", "axis", "=", "1", ")", "\n", "\n", "# au actions", "\n", "dfr", "[", "'blob_3'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "x", "[", "'upper_lid_raiser_text'", "]", "+", "x", "[", "'chin_raiser_text'", "]", "+", "\n", "x", "[", "'lip_stretcher_text'", "]", "+", "x", "[", "'jaw_drop_text'", "]", "+", "' '", "\n", "if", "x", "[", "'AU05_c'", "]", "!=", "0", "or", "x", "[", "'AU17_c'", "]", "!=", "0", "or", "x", "[", "'AU20_c'", "]", "!=", "0", "or", "x", "[", "'AU25_c'", "]", "!=", "0", "else", "''", ",", "axis", "=", "1", ")", "\n", "\n", "# delay", "\n", "dfr", "[", "'blob_4'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "'after '", "+", "x", "[", "'delay_num_words'", "]", "+", "' hundred milliseconds '", "\n", "+", "x", "[", "'delay_text'", "]", "if", "x", "[", "'delay_ms'", "]", ">=", "200", "else", "''", ",", "axis", "=", "1", ")", "\n", "\n", "# speaker", "\n", "dfr", "[", "'blob_5'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "'the '", "+", "x", "[", "'speaker'", "]", "+", "' '", ",", "axis", "=", "1", ")", "\n", "\n", "# tone", "\n", "dfr", "[", "'blob_6'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "x", "[", "'tone_text'", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# connector", "\n", "dfr", "[", "'blob_7'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "'and '", "if", "x", "[", "'tone_text'", "]", "!=", "''", "\n", "and", "x", "[", "'wpm_text'", "]", "!=", "''", "\n", "and", "tone", "!=", "0", "\n", "and", "speech_rate", "!=", "0", "\n", "else", "''", ",", "axis", "=", "1", ")", "\n", "\n", "# speech rate", "\n", "dfr", "[", "'blob_8'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "x", "[", "'wpm_text'", "]", ",", "axis", "=", "1", ")", "\n", "dfr", "[", "'blob_9'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "'the '", "+", "x", "[", "'speaker'", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# clean", "\n", "dfr", "[", "'blob_1'", "]", "=", "dfr", ".", "blob_1", ".", "apply", "(", "lambda", "x", ":", "''", "if", "smile", "==", "0", "else", "x", ")", "\n", "dfr", "[", "'blob_2'", "]", "=", "dfr", ".", "blob_2", ".", "apply", "(", "lambda", "x", ":", "''", "if", "posiface", "==", "0", "else", "x", ")", "\n", "dfr", "[", "'blob_3'", "]", "=", "dfr", ".", "blob_3", ".", "apply", "(", "lambda", "x", ":", "''", "if", "au_action", "==", "0", "else", "x", ")", "\n", "dfr", "[", "'blob_4'", "]", "=", "dfr", ".", "blob_4", ".", "apply", "(", "lambda", "x", ":", "''", "if", "delay", "==", "0", "else", "x", ")", "\n", "dfr", "[", "'blob_6'", "]", "=", "dfr", ".", "blob_6", ".", "apply", "(", "lambda", "x", ":", "''", "if", "tone", "==", "0", "else", "x", ")", "\n", "dfr", "[", "'blob_8'", "]", "=", "dfr", ".", "blob_8", ".", "apply", "(", "lambda", "x", ":", "''", "if", "speech_rate", "==", "0", "else", "x", ")", "\n", "dfr", "[", "'blob_9'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "''", "if", "x", "[", "'blob_1'", "]", "==", "''", "\n", "and", "x", "[", "'blob_2'", "]", "==", "''", "\n", "and", "x", "[", "'blob_3'", "]", "==", "''", "\n", "else", "x", "[", "'blob_9'", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# verbatim", "\n", "dfr", "[", "'blob_10'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "'said '", "+", "str", ".", "lower", "(", "x", "[", "'text'", "]", ")", "+", "'.'", ",", "axis", "=", "1", ")", "\n", "dfr", "[", "'text_blob'", "]", "=", "''", "\n", "\n", "for", "blob", "in", "[", "'blob_9'", ",", "'blob_1'", ",", "'blob_2'", ",", "'blob_3'", ",", "'blob_4'", ",", "\n", "'blob_5'", ",", "'blob_6'", ",", "'blob_7'", ",", "'blob_8'", ",", "'blob_10'", "]", ":", "\n", "        ", "dfr", "[", "'text_blob'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "x", "[", "'text_blob'", "]", "+", "x", "[", "blob", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "dfr", "=", "dfr", "[", "[", "'audio_id'", ",", "'talkturn no'", ",", "'family'", ",", "'text_blob'", "]", "]", "\n", "\n", "# Running order of the conversation", "\n", "dfr", ".", "sort_values", "(", "by", "=", "[", "'audio_id'", ",", "'talkturn no'", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "# Quality check - ensure same number of rows", "\n", "assert", "len", "(", "talkturn", ")", "==", "len", "(", "dfr", ")", "\n", "\n", "# Export", "\n", "dfr", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "\"Stage_3\"", ",", "\n", "\"narrative_fine.csv\"", ")", ",", "\n", "index", "=", "False", ")", "\n", "\n", "# Log information for user", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "'Narrative Fine CSV exported'", ")", "\n", "\n", "return", "dfr", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.test_main.Test_Narrative.test_v": [[59, 94], ["Python.weave_vpa", "Python.weave_vpa", "pandas.read_csv", "actual.head.head.head", "actual.head.head.iterrows", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.main.weave_vpa", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.main.weave_vpa"], []], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.test_main.Test_Narrative.test_vp": [[96, 131], ["Python.weave_vpa", "Python.weave_vpa", "pandas.read_csv", "actual.head.head.head", "actual.head.head.iterrows", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.main.weave_vpa", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.main.weave_vpa"], []], "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.test_main.Test_Narrative.test_vpa": [[133, 168], ["Python.weave_vpa", "Python.weave_vpa", "pandas.read_csv", "actual.head.head.head", "actual.head.head.iterrows", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.main.weave_vpa", "home.repos.pwc.inspect_result.SpectData_MONAH.Stage_3.main.weave_vpa"], []], "home.repos.pwc.inspect_result.SpectData_MONAH.FFMpeg.execute_extracting_audio.run_extracting_audio": [[9, 32], ["logging.getLogger().setLevel", "os.listdir", "file.endswith", "os.path.join", "os.system", "shutil.move", "logging.info", "logging.getLogger", "video_list.append", "os.path.splitext", "os.path.splitext"], "function", ["None"], ["def", "run_extracting_audio", "(", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Extract audio only from the video file\n    :return: none\n    '''", "\n", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "video_list", "=", "[", "]", "\n", "for", "file", "in", "os", ".", "listdir", "(", "parallel_run_settings", "[", "'avi_path'", "]", ")", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "\".avi\"", ")", ":", "\n", "            ", "video_list", ".", "append", "(", "file", ")", "\n", "\n", "", "", "video_i", "=", "video_list", "[", "0", "]", "\n", "for", "video_i", "in", "video_list", ":", "\n", "        ", "video_path", "=", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'avi_path'", "]", ",", "video_i", ")", "\n", "video_path", "=", "os", ".", "path", ".", "splitext", "(", "video_path", ")", "[", "0", "]", "\n", "os", ".", "system", "(", "\"ffmpeg -i {0}.avi -f wav -ab 192000 -ac 1 -vn {0}.wav\"", ".", "format", "(", "video_path", ")", ")", "\n", "\n", "shutil", ".", "move", "(", "video_path", "+", "'.wav'", ",", "\n", "parallel_run_settings", "[", "'wav_path'", "]", "+", "'/'", "+", "os", ".", "path", ".", "splitext", "(", "video_i", ")", "[", "0", "]", "+", "'.wav'", ")", "\n", "\n", "log_text", "=", "\"Completed extracting audio for \"", "\n", "logging", ".", "info", "(", "log_text", "+", "video_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Audio_files_manipulation.copy_mp4_files.get_local_list_files": [[11, 46], ["print", "tqdm.tqdm", "pandas.DataFrame", "set", "os.walk", "list", "zip", "file.endswith", "os.path.abspath", "full_paths.append", "file_names.append", "file_sizes.append", "video_ids.append", "os.path.join", "os.path.getsize", "speakers.append", "speakers.append"], "function", ["None"], ["def", "get_local_list_files", "(", "video_name_1", ",", "video_name_2", ",", "file_format", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    List video files to be analyzed\n    :param file_format:\n    :param src_dir:\n    :return: list of video file names\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "print", "(", "'Get Local List Files'", ",", "file_format", ")", "\n", "assert", "file_format", "in", "set", "(", "[", "'avi'", "]", ")", ",", "'file_format must be avi'", "\n", "full_paths", "=", "[", "]", "\n", "file_names", "=", "[", "]", "\n", "video_ids", "=", "[", "]", "\n", "speakers", "=", "[", "]", "\n", "file_sizes", "=", "[", "]", "\n", "video_list", "=", "[", "video_name_1", "+", "'.avi'", ",", "video_name_2", "+", "'.avi'", "]", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "tqdm", "(", "os", ".", "walk", "(", "parallel_run_settings", "[", "'avi_path'", "]", ")", ")", ":", "\n", "        ", "for", "file", "in", "files", ":", "\n", "            ", "if", "file", ".", "endswith", "(", "'.'", "+", "file_format", ")", "and", "file", "in", "video_list", ":", "\n", "                ", "full_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "full_paths", ".", "append", "(", "full_path", ")", "\n", "file_names", ".", "append", "(", "file", ")", "\n", "file_sizes", ".", "append", "(", "os", ".", "path", ".", "getsize", "(", "full_path", ")", ")", "\n", "video_ids", ".", "append", "(", "file", "[", ":", "-", "4", "]", ")", "\n", "\n", "if", "'_F'", "in", "file", ":", "\n", "                    ", "speakers", ".", "append", "(", "'F'", ")", "\n", "", "else", ":", "\n", "                    ", "speakers", ".", "append", "(", "'M'", ")", "\n", "\n", "", "", "", "", "results", "=", "pd", ".", "DataFrame", "(", "list", "(", "zip", "(", "full_paths", ",", "file_names", ",", "video_ids", ",", "speakers", ",", "file_sizes", ")", ")", ",", "\n", "columns", "=", "[", "'full_path'", ",", "'file_name'", ",", "'Video_ID'", ",", "'Speaker'", ",", "'file_size'", "]", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Audio_files_manipulation.copy_mp4_files.run_creating_directories": [[48, 65], ["os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "run_creating_directories", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Create needed directories\n    :param video_name_1: file 1\n    :param video_name_2: file 2\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "for", "sub_folder", "in", "[", "'Stage_1'", ",", "'Stage_2'", ",", "'Stage_3'", ",", "'Stage_4'", "]", ":", "\n", "        ", "sub_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "sub_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "sub_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "sub_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Vokaturi.execute_vokaturi.insert_df": [[16, 24], ["emotions_df.to_csv", "os.path.join"], "function", ["None"], ["def", "insert_df", "(", "emotions_df", ",", "dest_dir", ")", ":", "\n", "    ", "'''\n    insert result vokaturi features to the vokaturi table\n    :param emotions_df: result vokaturi features\n    :return: none\n    '''", "\n", "emotions_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "\"talkturn_vokaturi.csv\"", ")", ",", "\n", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Vokaturi.execute_vokaturi.analyze_wav": [[25, 77], ["sys.path.append", "print", "scipy.io.wavfile.read", "print", "print", "len", "print", "Vokaturi.SampleArrayC", "print", "Vokaturi.Voice", "print", "Vokaturi.Voice.fill", "print", "Vokaturi.Quality", "Vokaturi.EmotionProbabilities", "Vokaturi.Voice.extract", "Vokaturi.Voice.destroy", "print", "print", "print", "print", "print"], "function", ["None"], ["", "def", "analyze_wav", "(", "wav_path", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    runs vokaturi to the wav file\n    :param wav_path: wav file\n    :return: vokaturi features dataframe\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "sys", ".", "path", ".", "append", "(", "parallel_run_settings", "[", "'Vokaturi_API_Path'", "]", ")", "\n", "import", "Vokaturi", "\n", "\n", "print", "(", "\"Reading sound file...\"", ")", "\n", "file_name", "=", "wav_path", "\n", "(", "sample_rate", ",", "samples", ")", "=", "scipy", ".", "io", ".", "wavfile", ".", "read", "(", "file_name", ")", "\n", "print", "(", "\"   sample rate %.3f Hz\"", "%", "sample_rate", ")", "\n", "\n", "print", "(", "\"Allocating Vokaturi sample array...\"", ")", "\n", "buffer_length", "=", "len", "(", "samples", ")", "\n", "print", "(", "\"   %d samples, %d channels\"", "%", "(", "buffer_length", ",", "samples", ".", "ndim", ")", ")", "\n", "c_buffer", "=", "Vokaturi", ".", "SampleArrayC", "(", "buffer_length", ")", "\n", "if", "samples", ".", "ndim", "==", "1", ":", "\n", "        ", "c_buffer", "[", ":", "]", "=", "samples", "[", ":", "]", "/", "32768.0", "# mono", "\n", "", "else", ":", "\n", "        ", "c_buffer", "[", ":", "]", "=", "0.5", "*", "(", "samples", "[", ":", ",", "0", "]", "+", "0.0", "+", "samples", "[", ":", ",", "1", "]", ")", "/", "32768.0", "# stereo", "\n", "\n", "", "print", "(", "\"Creating VokaturiVoice...\"", ")", "\n", "voice", "=", "Vokaturi", ".", "Voice", "(", "sample_rate", ",", "buffer_length", ")", "\n", "\n", "print", "(", "\"Filling VokaturiVoice with samples...\"", ")", "\n", "voice", ".", "fill", "(", "buffer_length", ",", "c_buffer", ")", "\n", "\n", "print", "(", "\"Extracting emotions from VokaturiVoice...\"", ")", "\n", "quality", "=", "Vokaturi", ".", "Quality", "(", ")", "\n", "emotion_probabilities", "=", "Vokaturi", ".", "EmotionProbabilities", "(", ")", "\n", "voice", ".", "extract", "(", "quality", ",", "emotion_probabilities", ")", "\n", "\n", "emotions", "=", "{", "}", "\n", "\n", "if", "quality", ".", "valid", ":", "\n", "        ", "print", "(", "\"Neutral: %.3f\"", "%", "emotion_probabilities", ".", "neutrality", ")", "\n", "print", "(", "\"Happy: %.3f\"", "%", "emotion_probabilities", ".", "happiness", ")", "\n", "print", "(", "\"Sad: %.3f\"", "%", "emotion_probabilities", ".", "sadness", ")", "\n", "print", "(", "\"Angry: %.3f\"", "%", "emotion_probabilities", ".", "anger", ")", "\n", "print", "(", "\"Fear: %.3f\"", "%", "emotion_probabilities", ".", "fear", ")", "\n", "\n", "emotions", "[", "'neutrality'", "]", "=", "emotion_probabilities", ".", "neutrality", "\n", "emotions", "[", "'happiness'", "]", "=", "emotion_probabilities", ".", "happiness", "\n", "emotions", "[", "'sadness'", "]", "=", "emotion_probabilities", ".", "sadness", "\n", "emotions", "[", "'anger'", "]", "=", "emotion_probabilities", ".", "anger", "\n", "emotions", "[", "'fear'", "]", "=", "emotion_probabilities", ".", "fear", "\n", "\n", "", "voice", ".", "destroy", "(", ")", "\n", "return", "emotions", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Vokaturi.execute_vokaturi.run_vokaturi": [[79, 136], ["sys.path.append", "print", "Vokaturi.load", "print", "Python.cut_files", "pandas.DataFrame", "tqdm.tqdm", "print", "execute_vokaturi.insert_df", "glob.glob", "os.walk", "Vokaturi.versionAndLicense", "os.path.join", "os.unlink", "print", "file.endswith", "print", "os.path.abspath", "execute_vokaturi.analyze_wav", "print", "file.startswith", "os.path.join", "pandas.DataFrame", "pd.DataFrame.apply", "emotions.append.append", "no_emotions.append", "talkturn_id_complete.split", "talkturn_id_complete.split", "len", "talkturn_id_complete.split"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.Vokaturi.cut_wav_file.cut_files", "home.repos.pwc.inspect_result.SpectData_MONAH.Vokaturi.execute_vokaturi.insert_df", "home.repos.pwc.inspect_result.SpectData_MONAH.Vokaturi.execute_vokaturi.analyze_wav"], ["", "def", "run_vokaturi", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Extract vokaturi features and stores in a table\n    :return: rows with no emotions\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "sys", ".", "path", ".", "append", "(", "parallel_run_settings", "[", "'Vokaturi_API_Path'", "]", ")", "\n", "import", "Vokaturi", "\n", "\n", "print", "(", "\"Loading library...\"", ")", "\n", "Vokaturi", ".", "load", "(", "parallel_run_settings", "[", "'Vokaturi_Library_Path'", "]", ")", "\n", "print", "(", "\"Analyzed by: %s\"", "%", "Vokaturi", ".", "versionAndLicense", "(", ")", ")", "\n", "\n", "cwf", ".", "cut_files", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", "\n", "no_emotions", "=", "[", "]", "\n", "emotions", "=", "pd", ".", "DataFrame", "(", ")", "\n", "\n", "# Get the list of talkturn wav", "\n", "for", "root", ",", "dirs", ",", "files", "in", "tqdm", "(", "os", ".", "walk", "(", "parallel_run_settings", "[", "'talkturn_wav_path'", "]", ")", ")", ":", "\n", "        ", "for", "file", "in", "files", ":", "\n", "            ", "if", "file", ".", "endswith", "(", "'.wav'", ")", "and", "not", "file", ".", "startswith", "(", "'._'", ")", ":", "\n", "                ", "print", "(", "file", ")", "\n", "talkturn_id_complete", "=", "file", "[", "0", ":", "-", "4", "]", "\n", "full_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "result", "=", "analyze_wav", "(", "full_path", ",", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "if", "result", ":", "\n", "                    ", "df_emotions", "=", "pd", ".", "DataFrame", "(", "result", ",", "index", "=", "[", "0", "]", ")", "\n", "df_emotions", "[", "'video_id'", "]", "=", "talkturn_id_complete", "[", "0", ":", "\n", "(", "len", "(", "talkturn_id_complete", ".", "split", "(", "\"_\"", ")", "[", "2", "]", ")", "+", "1", ")", "*", "-", "1", "]", "\n", "df_emotions", "[", "'speaker'", "]", "=", "df_emotions", ".", "apply", "(", "lambda", "x", ":", "\n", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", "\n", "if", "x", "[", "'video_id'", "]", "==", "video_name_1", "\n", "else", "cfg", ".", "parameters_cfg", "[", "'speaker_2'", "]", ",", "\n", "axis", "=", "1", ")", "\n", "df_emotions", "[", "'talkturn no'", "]", "=", "talkturn_id_complete", ".", "split", "(", "\"_\"", ")", "[", "2", "]", "\n", "df_emotions", "[", "'audio_id'", "]", "=", "talkturn_id_complete", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "df_emotions", "=", "df_emotions", "[", "\n", "[", "'video_id'", ",", "'audio_id'", ",", "'speaker'", ",", "'talkturn no'", ",", "'neutrality'", ",", "'happiness'", ",", "\n", "'sadness'", ",", "'anger'", ",", "'fear'", "]", "]", "\n", "emotions", "=", "emotions", ".", "append", "(", "df_emotions", ")", "\n", "", "else", ":", "\n", "                    ", "no_emotions", ".", "append", "(", "full_path", ")", "\n", "\n", "", "", "", "", "print", "(", "no_emotions", ")", "\n", "insert_df", "(", "emotions_df", "=", "emotions", ",", "dest_dir", "=", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "\"_\"", "+", "video_name_2", ",", "\n", "\"Stage_1\"", ")", ")", "\n", "\n", "# Delete files", "\n", "files", "=", "glob", ".", "glob", "(", "parallel_run_settings", "[", "'talkturn_wav_path'", "]", "+", "'\\*.wav'", ")", "\n", "\n", "for", "f", "in", "files", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "unlink", "(", "f", ")", "\n", "print", "(", "\"Deleted: \"", "+", "f", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "print", "(", "\"Error: %s : %s\"", "%", "(", "f", ",", "e", ".", "strerror", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Vokaturi.cut_wav_file.convert": [[15, 22], ["str", "datetime.timedelta"], "function", ["None"], ["def", "convert", "(", "n_sec", ")", ":", "\n", "    ", "'''\n    convert seconds to time format\n    :param n: seconds\n    :return: time\n    '''", "\n", "return", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "n_sec", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Vokaturi.cut_wav_file.cut_to_talkturn": [[23, 42], ["pydub.AudioSegment.from_wav", "AudioSegment.from_wav.export", "os.path.join", "os.path.join", "str"], "function", ["None"], ["", "def", "cut_to_talkturn", "(", "file", ",", "start_time", ",", "end_time", ",", "talkturn_no", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    cut wav file into talkturn wav files\n    :param file: wav file\n    :param start_time: start cut time\n    :param end_time: end cut time\n    :param talkturn_no: talkturn number\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "\n", "t_1", "=", "start_time", "*", "1000", "\n", "t_2", "=", "end_time", "*", "1000", "\n", "new_audio", "=", "AudioSegment", ".", "from_wav", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'wav_path'", "]", ",", "file", ")", ")", "\n", "new_audio", "=", "new_audio", "[", "t_1", ":", "t_2", "]", "\n", "\n", "# Marriane TODO reduce dependencies on finding a certain character", "\n", "new_audio", ".", "export", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'talkturn_wav_path'", "]", ",", "file", "[", ":", "-", "4", "]", "+", "\"_\"", "+", "\n", "str", "(", "talkturn_no", ")", "+", "'.wav'", ")", ",", "format", "=", "\"wav\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Vokaturi.cut_wav_file.cut_files": [[44, 79], ["pandas.read_csv", "pd.read_csv.apply", "print", "os.path.join", "new_data.iterrows", "numpy.where", "cut_wav_file.cut_to_talkturn", "print", "str"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.Vokaturi.cut_wav_file.cut_to_talkturn"], ["", "def", "cut_files", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    cut wav files into smaller wav talkturns\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings(\"marriane_win\")", "\n", "dfr", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_2'", ",", "\n", "\"weaved talkturns.csv\"", ")", ")", "\n", "dfr", "[", "'audio_id'", "]", "=", "dfr", ".", "apply", "(", "lambda", "x", ":", "video_name_1", "\n", "if", "x", "[", "'speaker'", "]", "==", "cfg", ".", "parameters_cfg", "[", "'speaker_1'", "]", "\n", "else", "video_name_2", ",", "axis", "=", "1", ")", "\n", "\n", "print", "(", "dfr", ")", "\n", "\n", "wav_list", "=", "[", "video_name_1", "+", "'.wav'", ",", "video_name_2", "+", "'.wav'", "]", "\n", "#for i in os.listdir(parallel_run_settings['wav_path']):", "\n", "#if i.endswith(\".wav\"):", "\n", "#wav_list.append(i)", "\n", "\n", "for", "i", "in", "wav_list", ":", "\n", "        ", "new_data", "=", "dfr", ".", "loc", "[", "np", ".", "where", "(", "(", "dfr", "[", "'audio_id'", "]", "==", "i", "[", ":", "-", "4", "]", ")", ")", "]", "\n", "\n", "for", "index", ",", "row", "in", "new_data", ".", "iterrows", "(", ")", ":", "\n", "            ", "start_time", "=", "row", "[", "'start time'", "]", "\n", "end_time", "=", "row", "[", "'end time'", "]", "\n", "if", "start_time", "!=", "end_time", ":", "\n", "                ", "talkturn_number", "=", "row", "[", "'talkturn no'", "]", "\n", "cut_to_talkturn", "(", "file", "=", "i", ",", "start_time", "=", "start_time", ",", "end_time", "=", "end_time", ",", "\n", "talkturn_no", "=", "talkturn_number", ",", "\n", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "print", "(", "\"\\n Cut talkturn: \"", "+", "str", "(", "talkturn_number", ")", ")", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_cli.invoke_openface_cli": [[13, 43], ["os.path.join", "print", "subprocess.run", "print", "os.path.exists", "os.makedirs", "bash_command.split"], "function", ["None"], ["def", "invoke_openface_cli", "(", "video_full_path", ",", "video_file_name", ",", "feature_extraction_path", ",", "out_dir", ")", ":", "\n", "    ", "'''\n    Sets up open face subprocess\n    :param video_full_path: full path of video file\n    :param video_file_name: video file name\n    :param FeatureExtractionPath: openface path\n    :param out_dir: destination directory\n    :return:\n    '''", "\n", "bash_command", "=", "feature_extraction_path", "+", "\"/FeatureExtraction -f \"", "\n", "bash_command", "=", "bash_command", "+", "video_full_path", "\n", "\n", "# Create output directory", "\n", "bash_command", "=", "bash_command", "+", "' -out_dir '", "\n", "subfolder", "=", "video_file_name", "[", "0", ":", "-", "4", "]", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "subfolder", ")", "\n", "bash_command", "=", "bash_command", "+", "out_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "print", "(", "bash_command", ")", "\n", "\n", "# Invoke OpenFace", "\n", "import", "subprocess", "\n", "c_p", "=", "subprocess", ".", "run", "(", "bash_command", ".", "split", "(", ")", ",", "\n", "check", "=", "True", ",", "\n", "universal_newlines", "=", "True", ",", "\n", "stdout", "=", "subprocess", ".", "PIPE", ",", "\n", "stderr", "=", "subprocess", ".", "PIPE", ")", "\n", "print", "(", "c_p", ".", "stderr", ",", "c_p", ".", "returncode", ")", "\n", "return", "c_p", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_cli.get_todo_files": [[44, 51], ["None"], "function", ["None"], ["", "def", "get_todo_files", "(", "file_info", ")", ":", "\n", "    ", "'''\n    Inner Joins file_info with yet to be done video_id from the DB\n    :param file_info: contain the df of local files\n    :return: yet to be done video_ids\n    '''", "\n", "return", "file_info", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_cli.for_loop_invoke_cli": [[52, 108], ["Python.get_local_list_files", "file_info.sort_values.sort_values", "print", "range", "len", "len", "print", "openface_cli.get_todo_files", "datetime.datetime.now", "pathlib.Path", "print", "todo_file_info[].str.contains().any", "datetime.datetime.now", "print", "len", "len", "Python.update_row", "openface_cli.invoke_openface_cli", "print", "print", "todo_file_info[].str.contains", "os.path.join", "str", "len", "Python.update_row", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.Audio_files_manipulation.copy_mp4_files.get_local_list_files", "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_cli.get_todo_files", "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_log.update_row", "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_cli.invoke_openface_cli", "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_log.update_row"], ["", "def", "for_loop_invoke_cli", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    implement open face run\n    :param parallel_run_settings: folder settings\n    :param file_info: all files\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "file_info", "=", "cmf", ".", "get_local_list_files", "(", "video_name_1", ",", "video_name_2", ",", "file_format", "=", "'avi'", ",", "\n", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "\n", "file_info", "=", "file_info", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "print", "(", "len", "(", "file_info", ")", ",", "len", "(", "file_info", ")", "/", "2", ")", "\n", "\n", "feature_extraction_path", "=", "parallel_run_settings", "[", "'feature_extraction_path'", "]", "\n", "out_dir", "=", "parallel_run_settings", "[", "'OpenFace_CSV_Path'", "]", "\n", "src_dir", "=", "parallel_run_settings", "[", "'csv_path'", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "file_info", ")", ",", "1", ")", ":", "\n", "        ", "print", "(", "'\\n==============================================='", ")", "\n", "todo_file_info", "=", "get_todo_files", "(", "file_info", ")", "\n", "start_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "\n", "f_i", "=", "file_info", ".", "iloc", "[", "i", "]", "\n", "video_full_path", "=", "pathlib", ".", "Path", "(", "f_i", "[", "'full_path'", "]", ")", "\n", "video_file_name", "=", "f_i", "[", "'file_name'", "]", "\n", "print", "(", "i", ",", "'of'", ",", "len", "(", "file_info", ")", ",", "start_time", ",", "video_full_path", ")", "\n", "\n", "if", "todo_file_info", "[", "'file_name'", "]", ".", "str", ".", "contains", "(", "video_file_name", ")", ".", "any", "(", ")", ":", "\n", "# Pre-processing Logging", "\n", "            ", "column_name", "=", "'Opened_with_OpenFace'", "\n", "video_id", "=", "f_i", "[", "'Video_ID'", "]", "\n", "ofl", ".", "update_row", "(", "os", ".", "path", ".", "join", "(", "src_dir", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_1'", ")", ",", "video_id", ",", "column_name", ")", "\n", "\n", "# Start Processing", "\n", "c_p", "=", "invoke_openface_cli", "(", "str", "(", "video_full_path", ")", ",", "\n", "video_file_name", ",", "\n", "feature_extraction_path", ",", "\n", "out_dir", ")", "\n", "print", "(", "'cp.stderr length'", ",", "len", "(", "c_p", ".", "stderr", ")", ")", "\n", "\n", "# Post processing Logging", "\n", "if", "not", "c_p", ".", "stderr", ":", "\n", "\n", "                ", "column_name", "=", "'CSV_produced'", "\n", "ofl", ".", "update_row", "(", "os", ".", "path", ".", "join", "(", "src_dir", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_1'", ")", ",", "video_id", ",", "column_name", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'This file is not in todo_file_info.'", ")", "\n", "\n", "# Record time delta", "\n", "", "end_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "'time taken:'", ",", "end_time", "-", "start_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_log.update_row": [[13, 31], ["pandas.read_csv", "pd.read_csv.to_csv", "set", "os.path.join", "os.path.join"], "function", ["None"], ["def", "update_row", "(", "src_dir", ",", "video_id", ",", "column_name", ")", ":", "\n", "    ", "'''\n    update row in the log table\n    :param src_dir: local source of the log table\n    :param video_id: video to be updated\n    :param column_name: column to be updated\n    :return: none\n    '''", "\n", "assert", "column_name", "in", "set", "(", "[", "'Opened_with_OpenFace'", ",", "\n", "'CSV_produced'", ",", "\n", "'VideoLength_checked'", "]", ")", ",", "\"column_name must match\"", "\n", "\n", "# log updates in a local file", "\n", "dfr", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "src_dir", ",", "\n", "\"openface_log.csv\"", ")", ")", "\n", "dfr", ".", "loc", "[", "(", "dfr", ".", "Video_ID", "==", "video_id", ")", ",", "[", "column_name", "]", "]", "=", "1", "\n", "dfr", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "src_dir", ",", "\n", "\"openface_log.csv\"", ")", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_log.batch_update_csv_produced": [[32, 52], ["range", "len", "openface_log.update_row", "openface_log.update_row"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_log.update_row", "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_log.update_row"], ["", "def", "batch_update_csv_produced", "(", "processed_files", ",", "src_dir", ")", ":", "\n", "    ", "'''\n    updates csv when open face is implemented\n    :param processed_files: files done\n    :param src_dir: local source of the log table\n    :return: none\n    '''", "\n", "i", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "processed_files", ")", ",", "1", ")", ":", "\n", "        ", "processed_file", "=", "processed_files", ".", "iloc", "[", "i", "]", "\n", "file_name", "=", "processed_file", "[", "'file_name'", "]", "\n", "\n", "# Logging Variables", "\n", "column_name", "=", "'Opened_with_OpenFace'", "\n", "video_id", "=", "file_name", "[", ":", "-", "4", "]", "\n", "\n", "update_row", "(", "src_dir", ",", "video_id", ",", "column_name", ")", "\n", "\n", "column_name", "=", "'CSV_produced'", "\n", "update_row", "(", "src_dir", ",", "video_id", ",", "column_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_log.openface_log": [[53, 66], ["openface_log.update_row", "Python.get_local_list_files", "openface_log.batch_update_csv_produced"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_log.update_row", "home.repos.pwc.inspect_result.SpectData_MONAH.Audio_files_manipulation.copy_mp4_files.get_local_list_files", "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_log.batch_update_csv_produced"], ["", "", "def", "openface_log", "(", "src_dir", ",", "video_id", ",", "column_name", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Log processes in open face execution\n    :param video_id: video being analyzed\n    :param column_name: column to be updated\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "\n", "update_row", "(", "src_dir", ",", "video_id", ",", "column_name", ")", "\n", "\n", "processed_files", "=", "cmf", ".", "get_local_list_files", "(", "file_format", "=", "'avi'", ")", "\n", "batch_update_csv_produced", "(", "processed_files", ",", "parallel_run_settings", "[", "'csv_path'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.execute_open_face_to_dataset.run_open_face": [[14, 53], ["Python.download_video", "Python.get_video_duration", "Python.get_local_list_files", "file_info.sort_values.sort_values", "print", "Python.for_loop_invoke_cli", "Python.check_videolength", "pandas.DataFrame", "open_face_results.append.to_csv", "len", "pandas.read_csv", "open_face_results.append.append", "os.path.join", "os.path.join", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.download_avi.download_video", "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.download_avi.get_video_duration", "home.repos.pwc.inspect_result.SpectData_MONAH.Audio_files_manipulation.copy_mp4_files.get_local_list_files", "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_cli.for_loop_invoke_cli", "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.check_video_length.check_videolength"], ["def", "run_open_face", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Run open face to video files\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "\n", "# download videos", "\n", "video_list", "=", "da", ".", "download_video", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", "\n", "\n", "#  get video duration", "\n", "da", ".", "get_video_duration", "(", "src_dir", "=", "parallel_run_settings", "[", "'avi_path'", "]", ",", "\n", "video_list", "=", "video_list", ",", "\n", "dest_dir", "=", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_1'", ")", ")", "\n", "\n", "# run open face", "\n", "file_info", "=", "cmf", ".", "get_local_list_files", "(", "video_name_1", ",", "video_name_2", ",", "file_format", "=", "'avi'", ",", "\n", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "file_info", "=", "file_info", ".", "sort_values", "(", "by", "=", "[", "'Video_ID'", "]", ")", "\n", "print", "(", "len", "(", "file_info", ")", ",", "len", "(", "file_info", ")", "/", "2", ")", "\n", "ofc", ".", "for_loop_invoke_cli", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "# check video duration", "\n", "cvl", ".", "check_videolength", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "\n", "# combine open face results", "\n", "open_face_results", "=", "pd", ".", "DataFrame", "(", ")", "\n", "for", "video_i", "in", "video_list", ":", "\n", "        ", "results", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'OpenFace_CSV_Path'", "]", "+", "\n", "\"/\"", "+", "video_i", "[", ":", "-", "4", "]", ",", "video_i", "[", ":", "-", "4", "]", "+", "\".csv\"", ")", ")", "\n", "results", "[", "'video_id'", "]", "=", "video_i", "[", ":", "-", "4", "]", "\n", "open_face_results", "=", "open_face_results", ".", "append", "(", "results", ")", "\n", "\n", "", "open_face_results", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_1'", ",", "\n", "\"openface_raw.csv\"", ")", ",", "\n", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.check_video_length.check_videolength": [[14, 39], ["Python.download_video", "pandas.read_csv", "data[].max", "pandas.read_csv", "os.path.join", "os.path.join", "abs", "Python.update_row", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.download_avi.download_video", "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.openface_log.update_row"], ["def", "check_videolength", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Checks matching of video length\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "video_list", "=", "da", ".", "download_video", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", "\n", "\n", "column_name", "=", "'VideoLength_checked'", "\n", "for", "video_id", "in", "video_list", ":", "\n", "        ", "video_name", "=", "video_id", "[", ":", "-", "4", "]", "\n", "data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'OpenFace_CSV_Path'", "]", ",", "\n", "video_name", ",", "video_name", "+", "\".csv\"", ")", ")", "\n", "timestamp", "=", "data", "[", "' timestamp'", "]", ".", "max", "(", ")", "\n", "data", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_1'", ",", "\n", "\"video_duration.csv\"", ")", ")", "\n", "duration", "=", "data", "[", "data", "[", "'Video_ID'", "]", "==", "video_name", "]", "[", "'duration'", "]", ".", "values", "[", "0", "]", "\n", "if", "abs", "(", "timestamp", "-", "duration", ")", "<", "0.5", ":", "\n", "            ", "ofl", ".", "update_row", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_1'", ")", ",", "video_name", ",", "column_name", ")", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.download_avi.get_video_duration": [[10, 39], ["pandas.DataFrame", "pd.DataFrame.to_csv", "pd.DataFrame.to_csv", "print", "os.path.join", "moviepy.editor.VideoFileClip", "moviepy.editor.VideoFileClip.close", "row_list.append", "print", "os.path.join", "os.path.join"], "function", ["None"], ["def", "get_video_duration", "(", "src_dir", ",", "video_list", ",", "dest_dir", ")", ":", "\n", "    ", "'''\n    Computes for video duration of the video file\n    :param src_dir: local file directory\n    :param video_list: list of videos\n    :param dest_dir: destination file to be updated\n    :return:\n    '''", "\n", "row_list", "=", "[", "]", "\n", "for", "video_i", "in", "video_list", ":", "\n", "        ", "input_file", "=", "os", ".", "path", ".", "join", "(", "src_dir", ",", "video_i", ")", "\n", "clip", "=", "VideoFileClip", "(", "input_file", ")", "\n", "video_duration", "=", "clip", ".", "duration", "\n", "clip", ".", "close", "(", ")", "\n", "row_i", "=", "{", "'Video_ID'", ":", "video_i", "[", ":", "-", "4", "]", ",", "'duration'", ":", "video_duration", "}", "\n", "row_list", ".", "append", "(", "row_i", ")", "\n", "print", "(", "\"Computed duration: \"", "+", "video_i", ")", "\n", "\n", "# Store duration", "\n", "", "dfr", "=", "pd", ".", "DataFrame", "(", "row_list", ")", "\n", "dfr", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "\"video_duration.csv\"", ")", ")", "\n", "\n", "# For open face", "\n", "dfr", "[", "'Opened_with_OpenFace'", "]", "=", "0", "\n", "dfr", "[", "'CSV_produced'", "]", "=", "0", "\n", "dfr", "[", "'VideoLength_checked'", "]", "=", "0", "\n", "dfr", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "\"openface_log.csv\"", ")", ")", "\n", "\n", "print", "(", "'Inserted video duration of video list'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.download_avi.download_video": [[40, 54], ["download_avi.get_video_duration", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.OpenFace.download_avi.get_video_duration"], ["", "def", "download_video", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Downloads local videos to be analyzed\n    :return: video list\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "video_list", "=", "[", "video_name_1", "+", "'.avi'", ",", "video_name_2", "+", "'.avi'", "]", "\n", "get_video_duration", "(", "src_dir", "=", "parallel_run_settings", "[", "'avi_path'", "]", ",", "\n", "video_list", "=", "video_list", ",", "\n", "dest_dir", "=", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "\n", "'Stage_1'", ")", ")", "\n", "\n", "return", "video_list", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Google_speech_to_text.transcribe_wav_file.transcribe_gcs": [[14, 72], ["scipy.io.wavfile.read", "google.cloud.speech_v1p1beta1.SpeechClient", "google.cloud.speech_v1p1beta1.types.RecognitionAudio", "google.cloud.speech_v1p1beta1.types.RecognitionConfig", "speech.SpeechClient.long_running_recognize", "print", "client.long_running_recognize.result", "print", "pandas.DataFrame", "pd.DataFrame.columns.tolist", "pd.DataFrame.drop_duplicates", "pandas.DataFrame", "pd.DataFrame.columns.tolist", "pd.DataFrame.drop_duplicates", "os.path.join", "row_list.append", "sub_row_list.append"], "function", ["None"], ["def", "transcribe_gcs", "(", "bucket_name", ",", "audio_id", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    This function asynchronously transcribes the audio file.\n    :param bucket_name: bucket_name in google cloud\n    :param audio_id: wav file\n    :return: word and utterance transcripts\n    '''", "\n", "\n", "os", ".", "environ", "[", "\"GOOGLE_APPLICATION_CREDENTIALS\"", "]", "=", "\"./data/secrets/69b431b78607.json\"", "\n", "# info = mediainfo(os.path.join(parallel_run_settings['wav_path'], audio_id))", "\n", "# sample_rate = info['sample_rate']", "\n", "sample_rate", ",", "data", "=", "read_wav", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'wav_path'", "]", ",", "audio_id", ")", ")", "\n", "# channels = info['channels']", "\n", "client", "=", "speech", ".", "SpeechClient", "(", ")", "\n", "gcs_uri", "=", "\"gs://\"", "+", "bucket_name", "+", "\"/\"", "+", "audio_id", "\n", "audio", "=", "speech", ".", "types", ".", "RecognitionAudio", "(", "uri", "=", "gcs_uri", ")", "\n", "config", "=", "speech", ".", "types", ".", "RecognitionConfig", "(", "\n", "encoding", "=", "speech", ".", "enums", ".", "RecognitionConfig", ".", "AudioEncoding", ".", "LINEAR16", ",", "\n", "sample_rate_hertz", "=", "sample_rate", ",", "\n", "language_code", "=", "'en-US'", ",", "\n", "enable_speaker_diarization", "=", "True", ",", "\n", "diarization_speaker_count", "=", "1", ",", "\n", "audio_channel_count", "=", "1", ",", "# channels,", "\n", "enable_separate_recognition_per_channel", "=", "True", ")", "\n", "\n", "operation", "=", "client", ".", "long_running_recognize", "(", "config", ",", "audio", ")", "\n", "print", "(", "'\\nWaiting for operation to complete...'", ")", "\n", "response", "=", "operation", ".", "result", "(", "timeout", "=", "10000", ")", "\n", "print", "(", "'\\nCompleted!'", ")", "\n", "\n", "row_list", "=", "[", "]", "\n", "sub_row_list", "=", "[", "]", "\n", "for", "result", "in", "response", ".", "results", ":", "\n", "        ", "row_i", "=", "{", "'transcript'", ":", "result", ".", "alternatives", "[", "0", "]", ".", "transcript", ",", "\n", "'confidence'", ":", "result", ".", "alternatives", "[", "0", "]", ".", "confidence", "}", "\n", "for", "alternative", "in", "result", ".", "alternatives", ":", "\n", "            ", "for", "word_info", "in", "alternative", ".", "words", ":", "\n", "                ", "sub_row_i", "=", "{", "'word'", ":", "word_info", ".", "word", ",", "\n", "'start_time'", ":", "(", "word_info", ".", "start_time", ".", "seconds", "+", "\n", "word_info", ".", "start_time", ".", "nanos", "*", "1e-9", ")", "}", "\n", "sub_row_list", ".", "append", "(", "sub_row_i", ")", "\n", "", "", "row_list", ".", "append", "(", "row_i", ")", "\n", "\n", "", "df_word", "=", "pd", ".", "DataFrame", "(", "sub_row_list", ")", "\n", "df_word", "[", "'Audio_ID'", "]", "=", "audio_id", "[", ":", "-", "4", "]", "\n", "cols_word", "=", "df_word", ".", "columns", ".", "tolist", "(", ")", "\n", "cols_word", "=", "cols_word", "[", "-", "1", ":", "]", "+", "cols_word", "[", ":", "-", "1", "]", "\n", "df_word", "=", "df_word", "[", "cols_word", "]", "\n", "df_word", ".", "drop_duplicates", "(", "inplace", "=", "True", ")", "\n", "\n", "df_talkturn", "=", "pd", ".", "DataFrame", "(", "row_list", ")", "\n", "df_talkturn", "[", "'Audio_ID'", "]", "=", "audio_id", "[", ":", "-", "4", "]", "\n", "cols_talkturn", "=", "df_talkturn", ".", "columns", ".", "tolist", "(", ")", "\n", "cols_talkturn", "=", "cols_talkturn", "[", "-", "1", ":", "]", "+", "cols_talkturn", "[", ":", "-", "1", "]", "\n", "df_talkturn", "=", "df_talkturn", "[", "cols_talkturn", "]", "\n", "df_talkturn", ".", "drop_duplicates", "(", "inplace", "=", "True", ")", "\n", "\n", "return", "df_talkturn", ",", "df_word", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Google_speech_to_text.download_wav.download_audio": [[6, 17], ["None"], "function", ["None"], ["def", "download_audio", "(", "video_name_1", ",", "video_name_2", ")", ":", "\n", "    ", "'''\n    Lists the .wav files from the source folder\n    :param dest_dir: folder where the files are saved\n    :return: list of names of .wav files\n    '''", "\n", "\n", "# List all audio downloaded", "\n", "audio_list", "=", "[", "video_name_1", "+", "'.wav'", ",", "video_name_2", "+", "'.wav'", "]", "\n", "\n", "return", "audio_list", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Google_speech_to_text.upload_to_gcs.upload_blob": [[10, 25], ["google.cloud.storage.Client", "storage.Client.get_bucket", "storage_client.get_bucket.blob", "bucket.blob.upload_from_filename", "os.path.join"], "function", ["None"], ["def", "upload_blob", "(", "bucket_name", ",", "destination_blob_name", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Uploads a file to the bucket.\n    :param bucket_name: bucket name in google cloud\n    :param source_file_name: local file name of wav file\n    :param destination_blob_name: file name in google cloud\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "os", ".", "environ", "[", "\"GOOGLE_APPLICATION_CREDENTIALS\"", "]", "=", "\"./data/secrets/69b431b78607.json\"", "\n", "storage_client", "=", "storage", ".", "Client", "(", ")", "\n", "bucket", "=", "storage_client", ".", "get_bucket", "(", "bucket_name", ")", "\n", "blob", "=", "bucket", ".", "blob", "(", "destination_blob_name", ")", "\n", "blob", ".", "upload_from_filename", "(", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'wav_path'", "]", ",", "\n", "destination_blob_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Google_speech_to_text.execute_google_speech_to_text.insert_to_table": [[14, 23], ["dfr.to_csv", "print", "os.path.join"], "function", ["None"], ["def", "insert_to_table", "(", "dfr", ",", "dest_dir", ",", "table_name", ")", ":", "\n", "    ", "'''\n    :param df: data frame to be inserted to the file/table\n    :param dest_dir: folder location of the file/table to append data\n    :param table_name: file/table name to append data to\n    :return: none\n    '''", "\n", "dfr", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "dest_dir", ",", "table_name", "+", "\".csv\"", ")", ",", "index", "=", "False", ")", "\n", "print", "(", "\"\\nSuccessfully inserted data to \"", "+", "table_name", "+", "\".csv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SpectData_MONAH.Google_speech_to_text.execute_google_speech_to_text.run_google_speech_to_text": [[24, 59], ["Python.download_audio", "print", "pandas.DataFrame", "pandas.DataFrame", "os.path.join", "execute_google_speech_to_text.insert_to_table", "execute_google_speech_to_text.insert_to_table", "os.path.join", "Python.upload_blob", "Python.transcribe_gcs", "utterance.append.append", "word.append.append", "os.path.exists", "os.makedirs", "os.path.join"], "function", ["home.repos.pwc.inspect_result.SpectData_MONAH.Google_speech_to_text.download_wav.download_audio", "home.repos.pwc.inspect_result.SpectData_MONAH.Google_speech_to_text.execute_google_speech_to_text.insert_to_table", "home.repos.pwc.inspect_result.SpectData_MONAH.Google_speech_to_text.execute_google_speech_to_text.insert_to_table", "home.repos.pwc.inspect_result.SpectData_MONAH.Google_speech_to_text.upload_to_gcs.upload_blob", "home.repos.pwc.inspect_result.SpectData_MONAH.Google_speech_to_text.transcribe_wav_file.transcribe_gcs"], ["", "def", "run_google_speech_to_text", "(", "video_name_1", ",", "video_name_2", ",", "parallel_run_settings", ")", ":", "\n", "    ", "'''\n    Run google speech to text\n    :return: none\n    '''", "\n", "# parallel_run_settings = prs.get_parallel_run_settings('marriane_win')", "\n", "bucket", "=", "\"marriane-bucket\"", "\n", "audio_list", "=", "dw", ".", "download_audio", "(", "video_name_1", ",", "video_name_2", ")", "\n", "print", "(", "audio_list", ")", "\n", "utterance", "=", "pd", ".", "DataFrame", "(", ")", "\n", "word", "=", "pd", ".", "DataFrame", "(", ")", "\n", "for", "audio_id", "in", "audio_list", ":", "\n", "        ", "audio_full_path", "=", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'wav_path'", "]", ",", "audio_id", ")", "\n", "utg", ".", "upload_blob", "(", "bucket_name", "=", "bucket", ",", "\n", "destination_blob_name", "=", "audio_id", ",", "\n", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "result", "=", "twf", ".", "transcribe_gcs", "(", "bucket_name", "=", "bucket", ",", "\n", "audio_id", "=", "audio_id", ",", "\n", "parallel_run_settings", "=", "parallel_run_settings", ")", "\n", "utterance", "=", "utterance", ".", "append", "(", "result", "[", "0", "]", ")", "\n", "word", "=", "word", ".", "append", "(", "result", "[", "1", "]", ")", "\n", "\n", "", "dest_dir", "=", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "'Stage_1'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dest_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dest_dir", ")", "\n", "\n", "", "insert_to_table", "(", "dfr", "=", "utterance", ",", "\n", "dest_dir", "=", "dest_dir", ",", "\n", "table_name", "=", "\"utterance_transcripts\"", ")", "\n", "insert_to_table", "(", "dfr", "=", "word", ",", "\n", "dest_dir", "=", "os", ".", "path", ".", "join", "(", "parallel_run_settings", "[", "'csv_path'", "]", ",", "\n", "video_name_1", "+", "'_'", "+", "video_name_2", ",", "'Stage_1'", ")", ",", "\n", "table_name", "=", "\"word_transcripts\"", ")", "\n", "\n"]]}