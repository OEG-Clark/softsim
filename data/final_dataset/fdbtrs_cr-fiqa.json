{"home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.train_cr_fiqa.main": [[26, 173], ["torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.get_rank", "torch.get_world_size", "logging.getLogger", "utils.utils_logging.init_logging", "dataset.MXFaceDataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "dataset.DataLoaderX", "iresnet50().to.parameters", "torch.nn.parallel.distributed.DistributedDataParallel", "iresnet50().to.train", "torch.nn.parallel.distributed.DistributedDataParallel", "losses.CR_FIQA_LOSS().to.train", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.nn.CrossEntropyLoss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "int", "utils.utils_callbacks.CallBackVerification", "utils.utils_callbacks.CallBackLogging", "utils.utils_callbacks.CallBackModelCheckpoint", "utils.utils_logging.AverageMeter", "range", "torch.destroy_process_group", "os.makedirs", "time.sleep", "backbones.iresnet.iresnet100().to", "torch.broadcast", "losses.CR_FIQA_LOSS().to", "print", "logging.info", "logging.info", "logging.info", "print", "torch.utils.data.distributed.DistributedSampler.set_epoch", "enumerate", "torch.optim.lr_scheduler.LambdaLR.step", "torch.optim.lr_scheduler.LambdaLR.step", "utils.utils_callbacks.CallBackModelCheckpoint.", "os.path.exists", "backbones.iresnet.iresnet50().to", "logging.info", "os.path.join", "iresnet50().to.load_state_dict", "os.path.join", "losses.CR_FIQA_LOSS().to.load_state_dict", "int", "torch.optim.lr_scheduler.LambdaLR.get_lr", "torch.optim.lr_scheduler.LambdaLR.get_lr", "img.cuda.cuda", "label.cuda.cuda", "iresnet50().to.", "losses.CR_FIQA_LOSS().to.", "torch.nn.SmoothL1Loss.", "loss_v.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.SGD.step", "torch.optim.SGD.step", "torch.optim.SGD.zero_grad", "torch.optim.SGD.zero_grad", "utils.utils_logging.AverageMeter.update", "utils.utils_callbacks.CallBackLogging.", "utils.utils_callbacks.CallBackVerification.", "backbones.iresnet.iresnet100", "torch.load", "torch.load", "torch.load", "torch.load", "logging.info", "logging.info", "logging.info", "losses.CR_FIQA_LOSS", "torch.load", "torch.load", "torch.load", "torch.load", "logging.info", "logging.info", "torch.optim.lr_scheduler.LambdaLR.get_lr", "torch.nn.CrossEntropyLoss.", "iresnet50().to.parameters", "loss_v.item", "backbones.iresnet.iresnet50", "str", "str", "iresnet50().to.parameters", "losses.CR_FIQA_LOSS().to.parameters", "len", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_logging.init_logging", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_logging.AverageMeter.update", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet100", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet50"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "local_rank", "=", "args", ".", "local_rank", "\n", "torch", ".", "cuda", ".", "set_device", "(", "local_rank", ")", "\n", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "output", ")", "and", "rank", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "output", ")", "\n", "", "else", ":", "\n", "        ", "time", ".", "sleep", "(", "2", ")", "\n", "\n", "", "log_root", "=", "logging", ".", "getLogger", "(", ")", "\n", "init_logging", "(", "log_root", ",", "rank", ",", "cfg", ".", "output", ")", "\n", "\n", "trainset", "=", "MXFaceDataset", "(", "root_dir", "=", "cfg", ".", "rec", ",", "local_rank", "=", "local_rank", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "\n", "trainset", ",", "shuffle", "=", "True", ")", "\n", "\n", "train_loader", "=", "DataLoaderX", "(", "\n", "local_rank", "=", "local_rank", ",", "dataset", "=", "trainset", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "\n", "sampler", "=", "train_sampler", ",", "num_workers", "=", "16", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "\n", "# load evaluation", "\n", "\n", "if", "cfg", ".", "network", "==", "\"iresnet100\"", ":", "\n", "        ", "backbone", "=", "iresnet100", "(", "dropout", "=", "0.4", ",", "num_features", "=", "cfg", ".", "embedding_size", ")", ".", "to", "(", "local_rank", ")", "\n", "", "elif", "cfg", ".", "network", "==", "\"iresnet50\"", ":", "\n", "        ", "backbone", "=", "iresnet50", "(", "dropout", "=", "0.4", ",", "num_features", "=", "cfg", ".", "embedding_size", ",", "use_se", "=", "False", ",", "qs", "=", "1", ")", ".", "to", "(", "local_rank", ")", "\n", "", "else", ":", "\n", "        ", "backbone", "=", "None", "\n", "logging", ".", "info", "(", "\"load backbone failed!\"", ")", "\n", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "try", ":", "\n", "            ", "backbone_pth", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "output", ",", "str", "(", "cfg", ".", "global_step", ")", "+", "\"backbone.pth\"", ")", "\n", "backbone", ".", "load_state_dict", "(", "torch", ".", "load", "(", "backbone_pth", ",", "map_location", "=", "torch", ".", "device", "(", "local_rank", ")", ")", ")", "\n", "if", "rank", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "\"backbone student loaded successfully!\"", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "\"backbone resume loaded successfully!\"", ")", "\n", "", "", "except", "(", "FileNotFoundError", ",", "KeyError", ",", "IndexError", ",", "RuntimeError", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"load backbone resume init, failed!\"", ")", "\n", "\n", "", "", "for", "ps", "in", "backbone", ".", "parameters", "(", ")", ":", "\n", "        ", "dist", ".", "broadcast", "(", "ps", ",", "0", ")", "\n", "\n", "", "backbone", "=", "DistributedDataParallel", "(", "\n", "module", "=", "backbone", ",", "broadcast_buffers", "=", "False", ",", "device_ids", "=", "[", "local_rank", "]", ")", "\n", "backbone", ".", "train", "(", ")", "\n", "\n", "# get header", "\n", "if", "args", ".", "loss", "==", "\"CR_FIQA_LOSS\"", ":", "\n", "        ", "header", "=", "losses", ".", "CR_FIQA_LOSS", "(", "in_features", "=", "cfg", ".", "embedding_size", ",", "out_features", "=", "cfg", ".", "num_classes", ",", "s", "=", "cfg", ".", "s", ",", "m", "=", "cfg", ".", "m", ")", ".", "to", "(", "local_rank", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Header not implemented\"", ")", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "try", ":", "\n", "            ", "header_pth", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "identity_model", ",", "str", "(", "cfg", ".", "identity_step", ")", "+", "\"header.pth\"", ")", "\n", "header", ".", "load_state_dict", "(", "torch", ".", "load", "(", "header_pth", ",", "map_location", "=", "torch", ".", "device", "(", "local_rank", ")", ")", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "\"header resume loaded successfully!\"", ")", "\n", "", "", "except", "(", "FileNotFoundError", ",", "KeyError", ",", "IndexError", ",", "RuntimeError", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"header resume init, failed!\"", ")", "\n", "\n", "", "", "header", "=", "DistributedDataParallel", "(", "\n", "module", "=", "header", ",", "broadcast_buffers", "=", "False", ",", "device_ids", "=", "[", "local_rank", "]", ")", "\n", "header", ".", "train", "(", ")", "\n", "\n", "opt_backbone", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", "=", "[", "{", "'params'", ":", "backbone", ".", "parameters", "(", ")", "}", "]", ",", "\n", "lr", "=", "cfg", ".", "lr", "/", "512", "*", "cfg", ".", "batch_size", "*", "world_size", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "cfg", ".", "weight_decay", ")", "\n", "opt_header", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "params", "=", "[", "{", "'params'", ":", "header", ".", "parameters", "(", ")", "}", "]", ",", "\n", "lr", "=", "cfg", ".", "lr", "/", "512", "*", "cfg", ".", "batch_size", "*", "world_size", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "cfg", ".", "weight_decay", ")", "\n", "\n", "scheduler_backbone", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", "=", "opt_backbone", ",", "lr_lambda", "=", "cfg", ".", "lr_func", ")", "\n", "scheduler_header", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "optimizer", "=", "opt_header", ",", "lr_lambda", "=", "cfg", ".", "lr_func", ")", "\n", "\n", "criterion", "=", "CrossEntropyLoss", "(", ")", "\n", "criterion_qs", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", "beta", "=", "0.5", ")", "\n", "\n", "start_epoch", "=", "0", "\n", "total_step", "=", "int", "(", "len", "(", "trainset", ")", "/", "cfg", ".", "batch_size", "/", "world_size", "*", "cfg", ".", "num_epoch", ")", "\n", "if", "rank", "==", "0", ":", "logging", ".", "info", "(", "\"Total Step is: %d\"", "%", "total_step", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "rem_steps", "=", "(", "total_step", "-", "cfg", ".", "global_step", ")", "\n", "cur_epoch", "=", "cfg", ".", "num_epoch", "-", "int", "(", "cfg", ".", "num_epoch", "/", "total_step", "*", "rem_steps", ")", "\n", "logging", ".", "info", "(", "\"resume from estimated epoch {}\"", ".", "format", "(", "cur_epoch", ")", ")", "\n", "logging", ".", "info", "(", "\"remaining steps {}\"", ".", "format", "(", "rem_steps", ")", ")", "\n", "\n", "start_epoch", "=", "cur_epoch", "\n", "scheduler_backbone", ".", "last_epoch", "=", "cur_epoch", "\n", "scheduler_header", ".", "last_epoch", "=", "cur_epoch", "\n", "\n", "# --------- this could be solved more elegant ----------------", "\n", "opt_backbone", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "scheduler_backbone", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "opt_header", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "scheduler_header", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n", "print", "(", "\"last learning rate: {}\"", ".", "format", "(", "scheduler_header", ".", "get_lr", "(", ")", ")", ")", "\n", "# ------------------------------------------------------------", "\n", "\n", "", "callback_verification", "=", "CallBackVerification", "(", "cfg", ".", "eval_step", ",", "rank", ",", "cfg", ".", "val_targets", ",", "cfg", ".", "rec", ")", "\n", "callback_logging", "=", "CallBackLogging", "(", "50", ",", "rank", ",", "total_step", ",", "cfg", ".", "batch_size", ",", "world_size", ",", "writer", "=", "None", ")", "\n", "callback_checkpoint", "=", "CallBackModelCheckpoint", "(", "rank", ",", "cfg", ".", "output", ")", "\n", "alpha", "=", "10.0", "#10.0", "\n", "loss", "=", "AverageMeter", "(", ")", "\n", "global_step", "=", "cfg", ".", "global_step", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "cfg", ".", "num_epoch", ")", ":", "\n", "        ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "for", "_", ",", "(", "img", ",", "label", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "global_step", "+=", "1", "\n", "img", "=", "img", ".", "cuda", "(", "local_rank", ",", "non_blocking", "=", "True", ")", "\n", "label", "=", "label", ".", "cuda", "(", "local_rank", ",", "non_blocking", "=", "True", ")", "\n", "\n", "features", ",", "qs", "=", "backbone", "(", "img", ")", "\n", "thetas", ",", "std", ",", "ccs", ",", "nnccs", "=", "header", "(", "features", ",", "label", ")", "\n", "loss_qs", "=", "criterion_qs", "(", "ccs", "/", "nnccs", ",", "qs", ")", "\n", "loss_v", "=", "criterion", "(", "thetas", ",", "label", ")", "+", "alpha", "*", "loss_qs", "\n", "loss_v", ".", "backward", "(", ")", "\n", "clip_grad_norm_", "(", "backbone", ".", "parameters", "(", ")", ",", "max_norm", "=", "5", ",", "norm_type", "=", "2", ")", "\n", "\n", "opt_backbone", ".", "step", "(", ")", "\n", "opt_header", ".", "step", "(", ")", "\n", "\n", "opt_backbone", ".", "zero_grad", "(", ")", "\n", "opt_header", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ".", "update", "(", "loss_v", ".", "item", "(", ")", ",", "1", ")", "\n", "\n", "callback_logging", "(", "global_step", ",", "loss", ",", "epoch", ",", "0", ",", "loss_qs", ")", "\n", "callback_verification", "(", "global_step", ",", "backbone", ")", "\n", "\n", "", "scheduler_backbone", ".", "step", "(", ")", "\n", "scheduler_header", ".", "step", "(", ")", "\n", "\n", "callback_checkpoint", "(", "global_step", ",", "backbone", ",", "header", ")", "\n", "\n", "", "dist", ".", "destroy_process_group", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.BackgroundGenerator.__init__": [[14, 21], ["threading.Thread.__init__", "queue.Queue", "dataset.BackgroundGenerator.start"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "local_rank", ",", "max_prefetch", "=", "6", ")", ":", "\n", "        ", "super", "(", "BackgroundGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "queue", "=", "Queue", ".", "Queue", "(", "max_prefetch", ")", "\n", "self", ".", "generator", "=", "generator", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "daemon", "=", "True", "\n", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.BackgroundGenerator.run": [[22, 27], ["torch.cuda.set_device", "dataset.BackgroundGenerator.queue.put", "dataset.BackgroundGenerator.queue.put"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "local_rank", ")", "\n", "for", "item", "in", "self", ".", "generator", ":", "\n", "            ", "self", ".", "queue", ".", "put", "(", "item", ")", "\n", "", "self", ".", "queue", ".", "put", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.BackgroundGenerator.next": [[28, 33], ["dataset.BackgroundGenerator.queue.get"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.get"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "next_item", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "if", "next_item", "is", "None", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "return", "next_item", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.BackgroundGenerator.__next__": [[34, 36], ["dataset.BackgroundGenerator.next"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.BackgroundGenerator.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.BackgroundGenerator.__iter__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.DataLoaderX.__init__": [[42, 46], ["torch.utils.data.DataLoader.__init__", "torch.cuda.Stream"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "local_rank", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DataLoaderX", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", "local_rank", ")", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.DataLoaderX.__iter__": [[47, 52], ["torch.utils.data.DataLoader.__iter__", "dataset.BackgroundGenerator", "dataset.DataLoaderX.preload"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.DataLoaderX.__iter__", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.DataLoaderX.preload"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "iter", "=", "super", "(", "DataLoaderX", ",", "self", ")", ".", "__iter__", "(", ")", "\n", "self", ".", "iter", "=", "BackgroundGenerator", "(", "self", ".", "iter", ",", "self", ".", "local_rank", ")", "\n", "self", ".", "preload", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.DataLoaderX.preload": [[53, 61], ["next", "torch.cuda.stream", "range", "len", "dataset.DataLoaderX.batch[].to"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.BackgroundGenerator.next"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "self", ".", "batch", "=", "next", "(", "self", ".", "iter", ",", "None", ")", "\n", "if", "self", ".", "batch", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "len", "(", "self", ".", "batch", ")", ")", ":", "\n", "                ", "self", ".", "batch", "[", "k", "]", "=", "self", ".", "batch", "[", "k", "]", ".", "to", "(", "device", "=", "self", ".", "local_rank", ",", "\n", "non_blocking", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.DataLoaderX.__next__": [[62, 69], ["torch.cuda.current_stream().wait_stream", "dataset.DataLoaderX.preload", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.DataLoaderX.preload"], ["", "", "", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "batch", "=", "self", ".", "batch", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "self", ".", "preload", "(", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.MXFaceDataset.__init__": [[72, 92], ["torch.utils.data.Dataset.__init__", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "mxnet.recordio.MXIndexedRecordIO", "dataset.MXFaceDataset.imgrec.read_idx", "mxnet.recordio.unpack", "numpy.array", "numpy.array", "torchvision.transforms.ToPILImage", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "int", "int", "range", "list", "int"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "local_rank", ")", ":", "\n", "        ", "super", "(", "MXFaceDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", ")", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "path_imgrec", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'train.rec'", ")", "\n", "path_imgidx", "=", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'train.idx'", ")", "\n", "self", ".", "imgrec", "=", "mx", ".", "recordio", ".", "MXIndexedRecordIO", "(", "path_imgidx", ",", "path_imgrec", ",", "'r'", ")", "\n", "s", "=", "self", ".", "imgrec", ".", "read_idx", "(", "0", ")", "\n", "header", ",", "_", "=", "mx", ".", "recordio", ".", "unpack", "(", "s", ")", "\n", "if", "header", ".", "flag", ">", "0", ":", "\n", "            ", "self", ".", "header0", "=", "(", "int", "(", "header", ".", "label", "[", "0", "]", ")", ",", "int", "(", "header", ".", "label", "[", "1", "]", ")", ")", "\n", "self", ".", "imgidx", "=", "np", ".", "array", "(", "range", "(", "1", ",", "int", "(", "header", ".", "label", "[", "0", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "imgidx", "=", "np", ".", "array", "(", "list", "(", "self", ".", "imgrec", ".", "keys", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.MXFaceDataset.__getitem__": [[93, 105], ["dataset.MXFaceDataset.imgrec.read_idx", "mxnet.recordio.unpack", "torch.tensor", "mxnet.image.imdecode().asnumpy", "isinstance", "dataset.MXFaceDataset.transform", "mxnet.image.imdecode"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "idx", "=", "self", ".", "imgidx", "[", "index", "]", "\n", "s", "=", "self", ".", "imgrec", ".", "read_idx", "(", "idx", ")", "\n", "header", ",", "img", "=", "mx", ".", "recordio", ".", "unpack", "(", "s", ")", "\n", "label", "=", "header", ".", "label", "\n", "if", "not", "isinstance", "(", "label", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "label", "=", "label", "[", "0", "]", "\n", "", "label", "=", "torch", ".", "tensor", "(", "label", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "sample", "=", "mx", ".", "image", ".", "imdecode", "(", "img", ")", ".", "asnumpy", "(", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "", "return", "sample", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.dataset.MXFaceDataset.__len__": [[106, 108], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgidx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.losses.CR_FIQA_LOSS.__init__": [[30, 38], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.init.normal_", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "s", "=", "64.0", ",", "m", "=", "0.50", ")", ":", "\n", "        ", "super", "(", "CR_FIQA_LOSS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "kernel", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "kernel", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.losses.CR_FIQA_LOSS.forward": [[39, 56], ["losses.l2_norm", "losses.l2_norm", "torch.mm", "cos_theta.clamp.clamp.clamp", "torch.zeros", "torch.zeros.scatter_", "cos_theta.clamp.clamp.acos_", "cos_theta.clamp.clamp.cos_().mul_", "torch.where", "torch.no_grad", "cos_theta[].detach().clone", "cos_theta.clamp.clamp.detach().clone", "cos_theta.clamp.detach().clone.max", "index.size", "cos_theta.clamp.clamp.size", "cos_theta.clamp.clamp.cos_", "cos_theta[].detach", "cos_theta.clamp.clamp.detach", "label.view", "label.view"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.l2_norm", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.l2_norm"], ["", "def", "forward", "(", "self", ",", "embbedings", ",", "label", ")", ":", "\n", "        ", "embbedings", "=", "l2_norm", "(", "embbedings", ",", "axis", "=", "1", ")", "\n", "kernel_norm", "=", "l2_norm", "(", "self", ".", "kernel", ",", "axis", "=", "0", ")", "\n", "cos_theta", "=", "torch", ".", "mm", "(", "embbedings", ",", "kernel_norm", ")", "\n", "cos_theta", "=", "cos_theta", ".", "clamp", "(", "-", "1", ",", "1", ")", "# for numerical stability", "\n", "index", "=", "torch", ".", "where", "(", "label", "!=", "-", "1", ")", "[", "0", "]", "\n", "m_hot", "=", "torch", ".", "zeros", "(", "index", ".", "size", "(", ")", "[", "0", "]", ",", "cos_theta", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "cos_theta", ".", "device", ")", "\n", "m_hot", ".", "scatter_", "(", "1", ",", "label", "[", "index", ",", "None", "]", ",", "self", ".", "m", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "           ", "distmat", "=", "cos_theta", "[", "index", ",", "label", ".", "view", "(", "-", "1", ")", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "max_negative_cloned", "=", "cos_theta", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "max_negative_cloned", "[", "index", ",", "label", ".", "view", "(", "-", "1", ")", "]", "=", "-", "1e-12", "\n", "max_negative", ",", "_", "=", "max_negative_cloned", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "cos_theta", ".", "acos_", "(", ")", "\n", "cos_theta", "[", "index", "]", "+=", "m_hot", "\n", "cos_theta", ".", "cos_", "(", ")", ".", "mul_", "(", "self", ".", "s", ")", "\n", "return", "cos_theta", ",", "0", ",", "distmat", "[", "index", ",", "None", "]", ",", "max_negative", "[", "index", ",", "None", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.None.losses.l2_norm": [[7, 12], ["torch.norm", "torch.div"], "function", ["None"], ["def", "l2_norm", "(", "input", ",", "axis", "=", "1", ")", ":", "\n", "    ", "norm", "=", "torch", ".", "norm", "(", "input", ",", "2", ",", "axis", ",", "True", ")", "\n", "output", "=", "torch", ".", "div", "(", "input", ",", "norm", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.align_trans.estimate_norm": [[25, 57], ["skimage.transform.SimilarityTransform", "numpy.insert", "float", "numpy.expand_dims", "numpy.arange", "trans.SimilarityTransform.estimate", "numpy.dot", "numpy.sum", "numpy.ones", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["def", "estimate_norm", "(", "lmk", ",", "image_size", "=", "112", ",", "createEvalDB", "=", "False", ")", ":", "\n", "    ", "\"\"\" estimate the transformation matrix\n    :param lmk: detected landmarks \n    :param image_size: resulting image size (default=112)\n    :param createEvalDB: (boolean) crop an evaluation or training dataset\n    :return: transformation matrix M and index\n    \"\"\"", "\n", "assert", "lmk", ".", "shape", "==", "(", "5", ",", "2", ")", "\n", "assert", "image_size", "==", "112", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "lmk_tran", "=", "np", ".", "insert", "(", "lmk", ",", "2", ",", "values", "=", "np", ".", "ones", "(", "5", ")", ",", "axis", "=", "1", ")", "\n", "min_M", "=", "[", "]", "\n", "min_index", "=", "[", "]", "\n", "min_error", "=", "float", "(", "'inf'", ")", "\n", "if", "createEvalDB", ":", "\n", "        ", "src", "=", "arcface_eval_ref_points", "\n", "", "else", ":", "\n", "        ", "src", "=", "arcface_ref_points", "\n", "", "src", "=", "np", ".", "expand_dims", "(", "src", ",", "axis", "=", "0", ")", "\n", "\n", "for", "i", "in", "np", ".", "arange", "(", "src", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "tform", ".", "estimate", "(", "lmk", ",", "src", "[", "i", "]", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "results", "=", "np", ".", "dot", "(", "M", ",", "lmk_tran", ".", "T", ")", "\n", "results", "=", "results", ".", "T", "\n", "error", "=", "np", ".", "sum", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "results", "-", "src", "[", "i", "]", ")", "**", "2", ",", "axis", "=", "1", ")", ")", ")", "\n", "#         print(error)", "\n", "if", "error", "<", "min_error", ":", "\n", "            ", "min_error", "=", "error", "\n", "min_M", "=", "M", "\n", "min_index", "=", "i", "\n", "", "", "return", "min_M", ",", "min_index", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.align_trans.norm_crop": [[60, 70], ["align_trans.estimate_norm", "cv2.warpAffine"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.align_trans.estimate_norm"], ["", "def", "norm_crop", "(", "img", ",", "landmark", ",", "image_size", "=", "112", ",", "createEvalDB", "=", "False", ")", ":", "\n", "    ", "\"\"\" transforms image to match the landmarks with reference landmarks\n    :param landmark: detected landmarks \n    :param image_size: resulting image size (default=112)\n    :param createEvalDB: (boolean) crop an evaluation or training dataset\n    :return: transformed image\n    \"\"\"", "\n", "M", ",", "pose_index", "=", "estimate_norm", "(", "landmark", ",", "image_size", "=", "image_size", ",", "createEvalDB", "=", "createEvalDB", ")", "\n", "warped", "=", "cv2", ".", "warpAffine", "(", "img", ",", "M", ",", "(", "image_size", ",", "image_size", ")", ",", "borderValue", "=", "0.0", ")", "\n", "return", "warped", "\n", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_amp._MultiDeviceReplicator.__init__": [[13, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_tensor", ":", "torch", ".", "Tensor", ")", "->", "None", ":", "\n", "        ", "assert", "master_tensor", ".", "is_cuda", "\n", "self", ".", "master", "=", "master_tensor", "\n", "self", ".", "_per_device_tensors", ":", "Dict", "[", "torch", ".", "device", ",", "torch", ".", "Tensor", "]", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_amp._MultiDeviceReplicator.get": [[18, 24], ["utils_amp._MultiDeviceReplicator._per_device_tensors.get", "utils_amp._MultiDeviceReplicator.master.to"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.get"], ["", "def", "get", "(", "self", ",", "device", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "retval", "=", "self", ".", "_per_device_tensors", ".", "get", "(", "device", ",", "None", ")", "\n", "if", "retval", "is", "None", ":", "\n", "            ", "retval", "=", "self", ".", "master", ".", "to", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ",", "copy", "=", "True", ")", "\n", "self", ".", "_per_device_tensors", "[", "device", "]", "=", "retval", "\n", "", "return", "retval", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_amp.MaxClipGradScaler.__init__": [[27, 30], ["torch.cuda.amp.GradScaler.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "init_scale", ",", "max_scale", ":", "float", ",", "growth_interval", "=", "100", ")", ":", "\n", "        ", "GradScaler", ".", "__init__", "(", "self", ",", "init_scale", "=", "init_scale", ",", "growth_interval", "=", "growth_interval", ")", "\n", "self", ".", "max_scale", "=", "max_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_amp.MaxClipGradScaler.scale_clip": [[31, 39], ["utils_amp.MaxClipGradScaler.get_scale", "utils_amp.MaxClipGradScaler.set_growth_factor", "utils_amp.MaxClipGradScaler.get_scale", "utils_amp.MaxClipGradScaler.set_growth_factor", "utils_amp.MaxClipGradScaler.get_scale", "utils_amp.MaxClipGradScaler._scale.fill_", "utils_amp.MaxClipGradScaler.set_growth_factor"], "methods", ["None"], ["", "def", "scale_clip", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "get_scale", "(", ")", "==", "self", ".", "max_scale", ":", "\n", "            ", "self", ".", "set_growth_factor", "(", "1", ")", "\n", "", "elif", "self", ".", "get_scale", "(", ")", "<", "self", ".", "max_scale", ":", "\n", "            ", "self", ".", "set_growth_factor", "(", "2", ")", "\n", "", "elif", "self", ".", "get_scale", "(", ")", ">", "self", ".", "max_scale", ":", "\n", "            ", "self", ".", "_scale", ".", "fill_", "(", "self", ".", "max_scale", ")", "\n", "self", ".", "set_growth_factor", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_amp.MaxClipGradScaler.scale": [[40, 82], ["utils_amp.MaxClipGradScaler.scale_clip", "isinstance", "utils_amp.MaxClipGradScaler.scale.apply_scale"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_amp.MaxClipGradScaler.scale_clip"], ["", "", "def", "scale", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"\n        Multiplies ('scales') a tensor or list of tensors by the scale factor.\n\n        Returns scaled outputs.  If this instance of :class:`GradScaler` is not enabled, outputs are returned\n        unmodified.\n\n        Arguments:\n            outputs (Tensor or iterable of Tensors):  Outputs to scale.\n        \"\"\"", "\n", "if", "not", "self", ".", "_enabled", ":", "\n", "            ", "return", "outputs", "\n", "", "self", ".", "scale_clip", "(", ")", "\n", "# Short-circuit for the common case.", "\n", "if", "isinstance", "(", "outputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "assert", "outputs", ".", "is_cuda", "\n", "if", "self", ".", "_scale", "is", "None", ":", "\n", "                ", "self", ".", "_lazy_init_scale_growth_tracker", "(", "outputs", ".", "device", ")", "\n", "", "assert", "self", ".", "_scale", "is", "not", "None", "\n", "return", "outputs", "*", "self", ".", "_scale", ".", "to", "(", "device", "=", "outputs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# Invoke the more complex machinery only if we're treating multiple outputs.", "\n", "", "stash", ":", "List", "[", "_MultiDeviceReplicator", "]", "=", "[", "]", "# holds a reference that can be overwritten by apply_scale", "\n", "\n", "def", "apply_scale", "(", "val", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "assert", "val", ".", "is_cuda", "\n", "if", "len", "(", "stash", ")", "==", "0", ":", "\n", "                    ", "if", "self", ".", "_scale", "is", "None", ":", "\n", "                        ", "self", ".", "_lazy_init_scale_growth_tracker", "(", "val", ".", "device", ")", "\n", "", "assert", "self", ".", "_scale", "is", "not", "None", "\n", "stash", ".", "append", "(", "_MultiDeviceReplicator", "(", "self", ".", "_scale", ")", ")", "\n", "", "return", "val", "*", "stash", "[", "0", "]", ".", "get", "(", "val", ".", "device", ")", "\n", "", "elif", "isinstance", "(", "val", ",", "container_abcs", ".", "Iterable", ")", ":", "\n", "                ", "iterable", "=", "map", "(", "apply_scale", ",", "val", ")", "\n", "if", "isinstance", "(", "val", ",", "list", ")", "or", "isinstance", "(", "val", ",", "tuple", ")", ":", "\n", "                    ", "return", "type", "(", "val", ")", "(", "iterable", ")", "\n", "", "else", ":", "\n", "                    ", "return", "iterable", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"outputs must be a Tensor or an iterable of Tensors\"", ")", "\n", "", "", "return", "apply_scale", "(", "outputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_logging.AverageMeter.__init__": [[10, 16], ["utils_logging.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_logging.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "None", "\n", "self", ".", "avg", "=", "None", "\n", "self", ".", "sum", "=", "None", "\n", "self", ".", "count", "=", "None", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_logging.AverageMeter.reset": [[17, 22], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_logging.AverageMeter.update": [[23, 28], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_logging.init_logging": [[30, 42], ["log_root.setLevel", "logging.Formatter", "logging.FileHandler", "logging.StreamHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "log_root.addHandler", "log_root.addHandler", "log_root.info", "os.path.join"], "function", ["None"], ["", "", "def", "init_logging", "(", "log_root", ",", "rank", ",", "models_root", ",", "logfile", "=", "None", ")", ":", "\n", "    ", "if", "rank", "is", "0", ":", "\n", "        ", "log_root", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"Training: %(asctime)s-%(message)s\"", ")", "\n", "file_name", "=", "\"training.log\"", "if", "logfile", "is", "None", "else", "logfile", "\n", "handler_file", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "models_root", ",", "file_name", ")", ")", "\n", "handler_stream", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "handler_file", ".", "setFormatter", "(", "formatter", ")", "\n", "handler_stream", ".", "setFormatter", "(", "formatter", ")", "\n", "log_root", ".", "addHandler", "(", "handler_file", ")", "\n", "log_root", ".", "addHandler", "(", "handler_stream", ")", "\n", "log_root", ".", "info", "(", "'rank_id: %d'", "%", "rank", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_callbacks.CallBackVerification.__init__": [[13, 22], ["len", "utils_callbacks.CallBackVerification.init_dataset"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_callbacks.CallBackVerification.init_dataset"], ["    ", "def", "__init__", "(", "self", ",", "frequent", ",", "rank", ",", "val_targets", ",", "rec_prefix", ",", "image_size", "=", "(", "112", ",", "112", ")", ")", ":", "\n", "        ", "self", ".", "frequent", ":", "int", "=", "frequent", "\n", "self", ".", "rank", ":", "int", "=", "rank", "\n", "self", ".", "highest_acc", ":", "float", "=", "0.0", "\n", "self", ".", "highest_acc_list", ":", "List", "[", "float", "]", "=", "[", "0.0", "]", "*", "len", "(", "val_targets", ")", "\n", "self", ".", "ver_list", ":", "List", "[", "object", "]", "=", "[", "]", "\n", "self", ".", "ver_name_list", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "self", ".", "init_dataset", "(", "val_targets", "=", "val_targets", ",", "data_dir", "=", "rec_prefix", ",", "image_size", "=", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_callbacks.CallBackVerification.ver_test": [[23, 35], ["range", "len", "eval.verification.test", "logging.info", "logging.info", "logging.info", "results.append"], "methods", ["None"], ["", "", "def", "ver_test", "(", "self", ",", "backbone", ":", "torch", ".", "nn", ".", "Module", ",", "global_step", ":", "int", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "ver_list", ")", ")", ":", "\n", "            ", "acc1", ",", "std1", ",", "acc2", ",", "std2", ",", "xnorm", ",", "embeddings_list", "=", "verification", ".", "test", "(", "\n", "self", ".", "ver_list", "[", "i", "]", ",", "backbone", ",", "10", ",", "10", ")", "\n", "logging", ".", "info", "(", "'[%s][%d]XNorm: %f'", "%", "(", "self", ".", "ver_name_list", "[", "i", "]", ",", "global_step", ",", "xnorm", ")", ")", "\n", "logging", ".", "info", "(", "'[%s][%d]Accuracy-Flip: %1.5f+-%1.5f'", "%", "(", "self", ".", "ver_name_list", "[", "i", "]", ",", "global_step", ",", "acc2", ",", "std2", ")", ")", "\n", "if", "acc2", ">", "self", ".", "highest_acc_list", "[", "i", "]", ":", "\n", "                ", "self", ".", "highest_acc_list", "[", "i", "]", "=", "acc2", "\n", "", "logging", ".", "info", "(", "\n", "'[%s][%d]Accuracy-Highest: %1.5f'", "%", "(", "self", ".", "ver_name_list", "[", "i", "]", ",", "global_step", ",", "self", ".", "highest_acc_list", "[", "i", "]", ")", ")", "\n", "results", ".", "append", "(", "acc2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_callbacks.CallBackVerification.init_dataset": [[36, 43], ["os.path.join", "os.path.exists", "eval.verification.load_bin", "utils_callbacks.CallBackVerification.ver_list.append", "utils_callbacks.CallBackVerification.ver_name_list.append"], "methods", ["None"], ["", "", "def", "init_dataset", "(", "self", ",", "val_targets", ",", "data_dir", ",", "image_size", ")", ":", "\n", "        ", "for", "name", "in", "val_targets", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "name", "+", "\".bin\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "data_set", "=", "verification", ".", "load_bin", "(", "path", ",", "image_size", ")", "\n", "self", ".", "ver_list", ".", "append", "(", "data_set", ")", "\n", "self", ".", "ver_name_list", ".", "append", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_callbacks.CallBackVerification.__call__": [[44, 49], ["backbone.eval", "utils_callbacks.CallBackVerification.ver_test", "backbone.train"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_callbacks.CallBackVerification.ver_test"], ["", "", "", "def", "__call__", "(", "self", ",", "num_update", ",", "backbone", ":", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "if", "self", ".", "rank", "==", "0", "and", "num_update", ">", "0", "and", "num_update", "%", "self", ".", "frequent", "==", "0", ":", "\n", "            ", "backbone", ".", "eval", "(", ")", "\n", "self", ".", "ver_test", "(", "backbone", ",", "num_update", ")", "\n", "backbone", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_callbacks.CallBackLogging.__init__": [[52, 65], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "frequent", ",", "rank", ",", "total_step", ",", "batch_size", ",", "world_size", ",", "writer", "=", "None", ",", "resume", "=", "0", ",", "rem_total_steps", "=", "None", ")", ":", "\n", "        ", "self", ".", "frequent", ":", "int", "=", "frequent", "\n", "self", ".", "rank", ":", "int", "=", "rank", "\n", "self", ".", "time_start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "total_step", ":", "int", "=", "total_step", "\n", "self", ".", "batch_size", ":", "int", "=", "batch_size", "\n", "self", ".", "world_size", ":", "int", "=", "world_size", "\n", "self", ".", "writer", "=", "writer", "\n", "self", ".", "resume", "=", "resume", "\n", "self", ".", "rem_total_steps", "=", "rem_total_steps", "\n", "\n", "self", ".", "init", "=", "False", "\n", "self", ".", "tic", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_callbacks.CallBackLogging.__call__": [[66, 94], ["logging.info", "loss.reset", "time.time", "time.time", "utils_callbacks.CallBackLogging.writer.add_scalar", "utils_callbacks.CallBackLogging.writer.add_scalar", "float", "time.time", "time.time"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_logging.AverageMeter.reset"], ["", "def", "__call__", "(", "self", ",", "global_step", ",", "loss", ":", "AverageMeter", ",", "epoch", ":", "int", ",", "std", ":", "float", ",", "center", ":", "float", ")", ":", "\n", "        ", "if", "self", ".", "rank", "==", "0", "and", "global_step", ">", "0", "and", "global_step", "%", "self", ".", "frequent", "==", "0", ":", "\n", "            ", "if", "self", ".", "init", ":", "\n", "                ", "try", ":", "\n", "                    ", "speed", ":", "float", "=", "self", ".", "frequent", "*", "self", ".", "batch_size", "/", "(", "time", ".", "time", "(", ")", "-", "self", ".", "tic", ")", "\n", "speed_total", "=", "speed", "*", "self", ".", "world_size", "\n", "", "except", "ZeroDivisionError", ":", "\n", "                    ", "speed_total", "=", "float", "(", "'inf'", ")", "\n", "\n", "", "time_now", "=", "(", "time", ".", "time", "(", ")", "-", "self", ".", "time_start", ")", "/", "3600", "\n", "# TODO: resume time_total is not working", "\n", "if", "self", ".", "resume", ":", "\n", "                    ", "time_total", "=", "time_now", "/", "(", "(", "global_step", "+", "1", ")", "/", "self", ".", "rem_total_steps", ")", "\n", "", "else", ":", "\n", "                    ", "time_total", "=", "time_now", "/", "(", "(", "global_step", "+", "1", ")", "/", "self", ".", "total_step", ")", "\n", "", "time_for_end", "=", "time_total", "-", "time_now", "\n", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "                    ", "self", ".", "writer", ".", "add_scalar", "(", "'time_for_end'", ",", "time_for_end", ",", "global_step", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'loss'", ",", "loss", ".", "avg", ",", "global_step", ")", "\n", "", "msg", "=", "\"Speed %.2f samples/sec   Loss %.4f Margin %.4f Center %.4f Epoch: %d   Global Step: %d   Required: %1.f hours\"", "%", "(", "\n", "speed_total", ",", "loss", ".", "avg", ",", "std", ",", "center", ",", "epoch", ",", "global_step", ",", "time_for_end", "\n", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "loss", ".", "reset", "(", ")", "\n", "self", ".", "tic", "=", "time", ".", "time", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "init", "=", "True", "\n", "self", ".", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_callbacks.CallBackModelCheckpoint.__init__": [[96, 99], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "rank", ",", "output", "=", "\"./\"", ")", ":", "\n", "        ", "self", ".", "rank", ":", "int", "=", "rank", "\n", "self", ".", "output", ":", "str", "=", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_callbacks.CallBackModelCheckpoint.__call__": [[100, 105], ["torch.save", "torch.save", "backbone.module.state_dict", "os.path.join", "header.module.state_dict", "os.path.join", "str", "str"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "global_step", ",", "backbone", ":", "torch", ".", "nn", ".", "Module", ",", "header", ":", "torch", ".", "nn", ".", "Module", "=", "None", ")", ":", "\n", "        ", "if", "global_step", ">", "100", "and", "self", ".", "rank", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "backbone", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "output", ",", "str", "(", "global_step", ")", "+", "\"backbone.pth\"", ")", ")", "\n", "", "if", "global_step", ">", "100", "and", "header", "is", "not", "None", ":", "\n", "            ", "torch", ".", "save", "(", "header", ".", "module", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "output", ",", "str", "(", "global_step", ")", "+", "\"header.pth\"", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.extract_adience.find_central_face": [[23, 36], ["numpy.array", "len", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.argmin"], "function", ["None"], ["def", "find_central_face", "(", "img", ",", "keypoints", ")", ":", "\n", "# if multiple faces are detected, select the face most in the middle of the image", "\n", "    ", "mid_face_idx", "=", "0", "\n", "if", "len", "(", "keypoints", ")", ">", "1", ":", "\n", "        ", "img_mid_point", "=", "np", ".", "array", "(", "[", "img", ".", "shape", "[", "1", "]", "//", "2", ",", "img", ".", "shape", "[", "0", "]", "//", "2", "]", ")", "# [x (width), y (height)]", "\n", "noses", "=", "np", ".", "array", "(", "[", "keypoint", "[", "'keypoints'", "]", "[", "'nose'", "]", "for", "keypoint", "in", "keypoints", "]", ")", "\n", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "noses", "-", "img_mid_point", ",", "axis", "=", "1", ")", "# calculate distance between nose and img mid point", "\n", "mid_face_idx", "=", "np", ".", "argmin", "(", "distances", ")", "\n", "\n", "", "facial5points", "=", "[", "keypoints", "[", "mid_face_idx", "]", "[", "'keypoints'", "]", "[", "'left_eye'", "]", ",", "keypoints", "[", "mid_face_idx", "]", "[", "'keypoints'", "]", "[", "'right_eye'", "]", ",", "\n", "keypoints", "[", "mid_face_idx", "]", "[", "'keypoints'", "]", "[", "'nose'", "]", ",", "keypoints", "[", "mid_face_idx", "]", "[", "'keypoints'", "]", "[", "'mouth_left'", "]", ",", "\n", "keypoints", "[", "mid_face_idx", "]", "[", "'keypoints'", "]", "[", "'mouth_right'", "]", "]", "\n", "return", "np", ".", "array", "(", "facial5points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.ijb_pair_file.read_template_pair_list": [[22, 29], ["pairs[].astype", "pairs[].astype", "pairs[].astype", "print", "pandas.read_csv"], "function", ["None"], ["def", "read_template_pair_list", "(", "path", ")", ":", "\n", "    ", "pairs", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "t1", "=", "pairs", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "t2", "=", "pairs", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "label", "=", "pairs", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "print", "(", "\"Template pair list loaded\"", ")", "\n", "return", "t1", ",", "t2", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.ijb_pair_file.read_template_media_list": [[31, 38], ["ijb_meta[].astype", "ijb_meta[].astype", "print", "pandas.read_csv"], "function", ["None"], ["", "def", "read_template_media_list", "(", "path", ")", ":", "\n", "    ", "ijb_meta", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "img_names", "=", "ijb_meta", "[", ":", ",", "0", "]", "\n", "templates", "=", "ijb_meta", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "medias", "=", "ijb_meta", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "print", "(", "\"Tid mid list loaded\"", ")", "\n", "return", "img_names", ",", "templates", ",", "medias", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.ijb_pair_file.load_raw_templates": [[40, 46], ["numpy.zeros", "enumerate", "os.path.join", "numpy.load", "len", "file.replace"], "function", ["None"], ["", "def", "load_raw_templates", "(", "files", ")", ":", "\n", "    ", "features", "=", "np", ".", "zeros", "(", "(", "len", "(", "files", ")", ",", "1024", ")", ")", "\n", "for", "i", ",", "file", "in", "enumerate", "(", "files", ")", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "raw_feature_path", ",", "file", ".", "replace", "(", "\".jpg\"", ",", "\".npy\"", ")", ")", "\n", "features", "[", "i", "]", "=", "np", ".", "load", "(", "filepath", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.ijb_pair_file.aggregate_templates": [[48, 72], ["ijb_pair_file.read_template_media_list", "numpy.unique", "tqdm.tqdm", "numpy.where", "ijb_pair_file.load_raw_templates", "numpy.unique", "zip", "numpy.array", "sklearn.preprocessing.normalize", "numpy.save", "len", "numpy.where", "numpy.sum", "os.path.join", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.read_template_media_list", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.load_raw_templates"], ["", "def", "aggregate_templates", "(", ")", ":", "\n", "    ", "imgs_names", ",", "templates", ",", "medias", "=", "read_template_media_list", "(", "tid_mid_path", ")", "\n", "\n", "unique_templates", "=", "np", ".", "unique", "(", "templates", ")", "\n", "\n", "for", "uqt", "in", "tqdm", "(", "unique_templates", ",", "total", "=", "len", "(", "unique_templates", ")", ")", ":", "\n", "\n", "        ", "(", "ind_t", ",", ")", "=", "np", ".", "where", "(", "templates", "==", "uqt", ")", "\n", "face_norm_feats", "=", "load_raw_templates", "(", "imgs_names", "[", "ind_t", "]", ")", "\n", "face_medias", "=", "medias", "[", "ind_t", "]", "\n", "unique_medias", ",", "unique_media_counts", "=", "np", ".", "unique", "(", "face_medias", ",", "\n", "return_counts", "=", "True", ")", "\n", "media_norm_feats", "=", "[", "]", "\n", "for", "u", ",", "ct", "in", "zip", "(", "unique_medias", ",", "unique_media_counts", ")", ":", "\n", "            ", "(", "ind_m", ",", ")", "=", "np", ".", "where", "(", "face_medias", "==", "u", ")", "\n", "if", "ct", "==", "1", ":", "\n", "                ", "media_norm_feats", "+=", "[", "face_norm_feats", "[", "ind_m", "]", "]", "\n", "", "else", ":", "# image features from the same video will be aggregated into one feature", "\n", "                ", "media_norm_feats", "+=", "[", "\n", "np", ".", "mean", "(", "face_norm_feats", "[", "ind_m", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "]", "\n", "", "", "media_norm_feats", "=", "np", ".", "array", "(", "media_norm_feats", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "aggregated_feature", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "np", ".", "sum", "(", "media_norm_feats", ",", "axis", "=", "0", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "outpath", ",", "f\"{uqt}.npy\"", ")", ",", "aggregated_feature", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.ijb_pair_file.load_quality_scores": [[78, 83], ["print", "pandas.read_csv", "float", "qs[].split"], "function", ["None"], ["def", "load_quality_scores", "(", "path", ")", ":", "\n", "    ", "quality_scores", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "score_dict", "=", "{", "qs", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ":", "float", "(", "qs", "[", "1", "]", ")", "for", "qs", "in", "quality_scores", "}", "\n", "print", "(", "\"Quality scores loaded\"", ")", "\n", "return", "score_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.ijb_pair_file.get_min_score": [[87, 93], ["numpy.where", "scores.append", "max", "min"], "function", ["None"], ["def", "get_min_score", "(", "person", ")", ":", "\n", "    ", "(", "ind_t1", ",", ")", "=", "np", ".", "where", "(", "templates", "==", "person", ")", "\n", "scores", "=", "[", "]", "\n", "for", "img_name", "in", "imgs_names", "[", "ind_t1", "]", ":", "\n", "        ", "scores", ".", "append", "(", "score_dict", "[", "img_name", "]", ")", "\n", "", "return", "max", "(", "scores", ")", "if", "quality_model", "==", "\"PFE\"", "else", "min", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.ijb_pair_file.get_score_part": [[95, 108], ["tqdm.tqdm", "queue.put", "zip", "ijb_pair_file.get_min_score", "ijb_pair_file.get_min_score", "len", "max", "min"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.ijb_pair_file.get_min_score", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.ijb_pair_file.get_min_score"], ["", "def", "get_score_part", "(", "t1s", ",", "t2s", ",", "labels", ",", "queue", ")", ":", "\n", "    ", "q_pair_list", "=", "\"\"", "\n", "for", "t1", ",", "t2", ",", "label", "in", "tqdm", "(", "zip", "(", "t1s", ",", "t2s", ",", "labels", ")", ",", "total", "=", "len", "(", "t1s", ")", ")", ":", "\n", "        ", "min_score_t1", "=", "get_min_score", "(", "t1", ")", "\n", "min_score_t2", "=", "get_min_score", "(", "t2", ")", "\n", "if", "quality_model", "==", "\"PFE\"", ":", "\n", "            ", "min_score", "=", "max", "(", "[", "min_score_t1", ",", "min_score_t2", "]", ")", "\n", "", "else", ":", "\n", "            ", "min_score", "=", "min", "(", "[", "min_score_t1", ",", "min_score_t2", "]", ")", "\n", "\n", "", "q_pair_list", "+=", "f\"{t1} {t2} {label} {min_score}\\n\"", "\n", "\n", "", "queue", ".", "put", "(", "q_pair_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.ijb_pair_file.create_quality_list": [[110, 144], ["ijb_pair_file.read_template_pair_list", "print", "multiprocessing.Queue", "range", "multiprocessing.Process", "processes.append", "multiprocessing.Process.start", "os.path.join", "open", "open.close", "len", "multiprocessing.Process", "processes.append", "multiprocessing.Process.start", "os.path.join", "multiprocessing.Queue.get", "open.write", "multiprocessing.Process.join"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.read_template_pair_list", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.get"], ["", "def", "create_quality_list", "(", ")", ":", "\n", "    ", "t1s", ",", "t2s", ",", "labels", "=", "read_template_pair_list", "(", "pair_path", ")", "\n", "part_idx", "=", "len", "(", "t1s", ")", "//", "threads", "\n", "print", "(", "f\"Quality estimation model: {quality_model}\\n{threads+1} Threads\"", ")", "\n", "\n", "q", "=", "Queue", "(", ")", "\n", "processes", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "threads", ")", ":", "\n", "        ", "t1_part", "=", "t1s", "[", "idx", "*", "part_idx", ":", "(", "idx", "+", "1", ")", "*", "part_idx", "]", "\n", "t2_part", "=", "t2s", "[", "idx", "*", "part_idx", ":", "(", "idx", "+", "1", ")", "*", "part_idx", "]", "\n", "label_part", "=", "labels", "[", "idx", "*", "part_idx", ":", "(", "idx", "+", "1", ")", "*", "part_idx", "]", "\n", "p", "=", "Process", "(", "target", "=", "get_score_part", ",", "args", "=", "(", "t1_part", ",", "t2_part", ",", "label_part", ",", "q", ")", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "\n", "", "t1_part", "=", "t1s", "[", "threads", "*", "part_idx", ":", "]", "\n", "t2_part", "=", "t2s", "[", "threads", "*", "part_idx", ":", "]", "\n", "label_part", "=", "labels", "[", "threads", "*", "part_idx", ":", "]", "\n", "p", "=", "Process", "(", "target", "=", "get_score_part", ",", "args", "=", "(", "t1_part", ",", "t2_part", ",", "label_part", ",", "q", ")", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "\"/data/maklemt/quality_data\"", ",", "dataset_name", ")", "\n", "pair_list", "=", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "f\"quality_pair_list_{quality_model}_{dataset_name}.txt\"", ")", ",", "\"w\"", ")", "\n", "\n", "for", "p", "in", "processes", ":", "\n", "        ", "ret", "=", "q", ".", "get", "(", ")", "# will block", "\n", "pair_list", ".", "write", "(", "ret", ")", "\n", "", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n", "", "pair_list", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.Embedding.__init__": [[110, 129], ["eval_ijbc_qs.get_backbone", "numpy.array", "torch.nn.DataParallel", "eval_ijbc_qs.Embedding.model.eval"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.get_backbone"], ["    ", "def", "__init__", "(", "self", ",", "prefix", ",", "data_shape", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "self", ".", "image_size", "=", "(", "112", ",", "112", ")", "\n", "backbone", "=", "get_backbone", "(", "prefix", ")", "\n", "if", "prefix", "==", "\"ArcFaceModel\"", ":", "\n", "            ", "self", ".", "model", "=", "backbone", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "backbone", ",", "device_ids", "=", "[", "gpu_id", "]", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "", "src", "=", "np", ".", "array", "(", "[", "\n", "[", "30.2946", ",", "51.6963", "]", ",", "\n", "[", "65.5318", ",", "51.5014", "]", ",", "\n", "[", "48.0252", ",", "71.7366", "]", ",", "\n", "[", "33.5493", ",", "92.3655", "]", ",", "\n", "[", "62.7299", ",", "92.2041", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", ":", ",", "0", "]", "+=", "8.0", "\n", "self", ".", "src", "=", "src", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data_shape", "=", "data_shape", "\n", "self", ".", "modelname", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.Embedding.get": [[130, 159], ["skimage.transform.SimilarityTransform", "skimage.transform.SimilarityTransform.estimate", "cv2.warpAffine", "cv2.cvtColor", "numpy.fliplr", "numpy.transpose", "numpy.transpose", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "rimg", ",", "landmark", ")", ":", "\n", "\n", "        ", "assert", "landmark", ".", "shape", "[", "0", "]", "==", "68", "or", "landmark", ".", "shape", "[", "0", "]", "==", "5", "\n", "assert", "landmark", ".", "shape", "[", "1", "]", "==", "2", "\n", "if", "landmark", ".", "shape", "[", "0", "]", "==", "68", ":", "\n", "            ", "landmark5", "=", "np", ".", "zeros", "(", "(", "5", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "landmark5", "[", "0", "]", "=", "(", "landmark", "[", "36", "]", "+", "landmark", "[", "39", "]", ")", "/", "2", "\n", "landmark5", "[", "1", "]", "=", "(", "landmark", "[", "42", "]", "+", "landmark", "[", "45", "]", ")", "/", "2", "\n", "landmark5", "[", "2", "]", "=", "landmark", "[", "30", "]", "\n", "landmark5", "[", "3", "]", "=", "landmark", "[", "48", "]", "\n", "landmark5", "[", "4", "]", "=", "landmark", "[", "54", "]", "\n", "", "else", ":", "\n", "            ", "landmark5", "=", "landmark", "\n", "", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "landmark5", ",", "self", ".", "src", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "rimg", ",", "\n", "M", ",", "(", "self", ".", "image_size", "[", "1", "]", ",", "self", ".", "image_size", "[", "0", "]", ")", ",", "\n", "borderValue", "=", "0.0", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "# cv2.imwrite(f\"IJBTest.png\", img)", "\n", "# exit()", "\n", "img_flip", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# 3*112*112, RGB", "\n", "img_flip", "=", "np", ".", "transpose", "(", "img_flip", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "input_blob", "=", "np", ".", "zeros", "(", "(", "2", ",", "3", ",", "self", ".", "image_size", "[", "0", "]", ",", "self", ".", "image_size", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "input_blob", "[", "0", "]", "=", "img", "\n", "input_blob", "[", "1", "]", "=", "img_flip", "\n", "return", "input_blob", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.Embedding.forward_db": [[160, 182], ["torch.no_grad", "torch.Tensor().cuda", "eval_ijbc_qs.Embedding.reshape", "eval_ijbc_qs.Embedding.cpu().numpy", "mx.nd.array", "mx.io.DataBatch", "eval_ijbc_qs.Embedding.model.forward", "[].asnumpy", "emb.reshape.reshape.reshape", "torch.Tensor().cuda.div_", "torch.Tensor().cuda.div_().sub_().div_", "eval_ijbc_qs.Embedding.model", "eval_ijbc_qs.Embedding.model", "torch.Tensor", "eval_ijbc_qs.Embedding.cpu", "torch.Tensor().cuda.div_().sub_", "eval_ijbc_qs.Embedding.model.get_outputs", "torch.Tensor().cuda.div_"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.OnTopQS.forward"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward_db", "(", "self", ",", "batch_data", ")", ":", "\n", "        ", "if", "self", ".", "modelname", "==", "\"ArcFaceModel\"", ":", "\n", "            ", "data", "=", "mx", ".", "nd", ".", "array", "(", "batch_data", ")", "\n", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "data", ",", ")", ")", "\n", "self", ".", "model", ".", "forward", "(", "db", ",", "is_train", "=", "False", ")", "\n", "emb", "=", "self", ".", "model", ".", "get_outputs", "(", ")", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "emb", "=", "emb", ".", "reshape", "(", "[", "self", ".", "batch_size", ",", "2", "*", "emb", ".", "shape", "[", "1", "]", "]", ")", "\n", "return", "emb", "\n", "\n", "", "imgs", "=", "torch", ".", "Tensor", "(", "batch_data", ")", ".", "cuda", "(", ")", "\n", "if", "self", ".", "modelname", "==", "\"MagFaceModel\"", ":", "\n", "            ", "imgs", ".", "div_", "(", "255", ")", "\n", "", "else", ":", "\n", "            ", "imgs", ".", "div_", "(", "255", ")", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "\n", "", "if", "self", ".", "modelname", "==", "\"CurricularFaceModel\"", ":", "\n", "            ", "feat", ",", "_", "=", "self", ".", "model", "(", "imgs", ")", "\n", "", "else", ":", "\n", "            ", "feat", "=", "self", ".", "model", "(", "imgs", ")", "\n", "", "feat", "=", "feat", ".", "reshape", "(", "[", "self", ".", "batch_size", ",", "2", "*", "feat", ".", "shape", "[", "1", "]", "]", ")", "\n", "return", "feat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.get_backbone": [[71, 108], ["mx.model.load_checkpoint", "sym.get_internals", "mx.mod.Module", "builder_inf.bind", "builder_inf.set_params", "mx.gpu", "mx.cpu", "int", "torch.load", "IR_101().to", "builder_inf.load_state_dict", "os.path.join", "torch.load", "iresnet100().to", "builder_inf.load_state_dict", "IR_101", "os.path.join", "builder_inf", "print", "exit", "iresnet100", "os.path.join"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.IR_101", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.mag_network_inf.builder_inf", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet100"], ["def", "get_backbone", "(", "modelname", ")", ":", "\n", "    ", "if", "modelname", "==", "\"ArcFaceModel\"", ":", "\n", "        ", "prefix", "=", "\"/home/fboutros/PR/pretrained-model/model-r100-ii/model\"", "\n", "epoch", "=", "\"0000\"", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "ctx", "=", "mx", ".", "gpu", "(", "gpu_id", ")", "\n", "", "else", ":", "\n", "            ", "ctx", "=", "mx", ".", "cpu", "(", ")", "\n", "", "sym", ",", "arg_params", ",", "aux_params", "=", "mx", ".", "model", ".", "load_checkpoint", "(", "prefix", ",", "int", "(", "epoch", ")", ")", "\n", "all_layers", "=", "sym", ".", "get_internals", "(", ")", "\n", "sym", "=", "all_layers", "[", "'fc1_output'", "]", "\n", "backbone", "=", "mx", ".", "mod", ".", "Module", "(", "symbol", "=", "sym", ",", "context", "=", "ctx", ",", "label_names", "=", "None", ")", "\n", "backbone", ".", "bind", "(", "data_shapes", "=", "[", "(", "'data'", ",", "(", "1", ",", "3", ",", "112", ",", "112", ")", ")", "]", ")", "\n", "backbone", ".", "set_params", "(", "arg_params", ",", "aux_params", ")", "\n", "", "elif", "modelname", "==", "\"CurricularFaceModel\"", ":", "\n", "        ", "from", "backbones", ".", "model_irse", "import", "IR_SE_101", ",", "IR_101", "\n", "prefix", "=", "\"/home/fboutros/FR-vulnerability/CurricularFace_Backbone\"", "\n", "epoch", "=", "\"295672\"", "\n", "weight", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "prefix", ",", "\"CurricularFace_Backbone.pth\"", ")", ")", "\n", "backbone", "=", "IR_101", "(", "[", "112", ",", "112", "]", ")", ".", "to", "(", "f\"cuda:{gpu_id}\"", ")", "\n", "backbone", ".", "load_state_dict", "(", "weight", ")", "\n", "", "elif", "modelname", "==", "\"ElasticFaceModel\"", ":", "\n", "        ", "from", "backbones", ".", "iresnet", "import", "iresnet100", "\n", "prefix", "=", "\"/home/fboutros/FR-vulnerability/ElasticFace\"", "\n", "epoch", "=", "\"295672\"", "\n", "weight", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "prefix", ",", "epoch", "+", "\"backbone.pth\"", ")", ")", "\n", "backbone", "=", "iresnet100", "(", ")", ".", "to", "(", "f\"cuda:{gpu_id}\"", ")", "\n", "backbone", ".", "load_state_dict", "(", "weight", ")", "\n", "", "elif", "modelname", "==", "\"MagFaceModel\"", ":", "\n", "        ", "from", "backbones", ".", "mag_network_inf", "import", "builder_inf", "\n", "prefix", "=", "\"/home/maklemt/image-quality\"", "\n", "epoch", "=", "\"00025\"", "\n", "backbone", "=", "builder_inf", "(", "os", ".", "path", ".", "join", "(", "prefix", ",", "\"magface_epoch_\"", "+", "epoch", "+", "\".pth\"", ")", ",", "\"iresnet100\"", ",", "512", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unknown model\"", ")", "\n", "exit", "(", ")", "\n", "", "return", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.divideIntoNstrand": [[185, 190], ["enumerate", "twoList[].append", "range"], "function", ["None"], ["", "", "def", "divideIntoNstrand", "(", "listTemp", ",", "n", ")", ":", "\n", "    ", "twoList", "=", "[", "[", "]", "for", "i", "in", "range", "(", "n", ")", "]", "\n", "for", "i", ",", "e", "in", "enumerate", "(", "listTemp", ")", ":", "\n", "        ", "twoList", "[", "i", "%", "n", "]", ".", "append", "(", "e", ")", "\n", "", "return", "twoList", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.read_template_media_list": [[192, 198], ["ijb_meta[].astype", "ijb_meta[].astype", "pandas.read_csv"], "function", ["None"], ["", "def", "read_template_media_list", "(", "path", ")", ":", "\n", "# ijb_meta = np.loadtxt(path, dtype=str)", "\n", "    ", "ijb_meta", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "templates", "=", "ijb_meta", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "medias", "=", "ijb_meta", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "templates", ",", "medias", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.read_template_pair_list": [[201, 210], ["pairs[].astype", "pairs[].astype", "pairs[].astype", "pandas.read_csv"], "function", ["None"], ["", "def", "read_template_pair_list", "(", "path", ")", ":", "\n", "# pairs = np.loadtxt(path, dtype=str)", "\n", "    ", "pairs", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "# print(pairs.shape)", "\n", "# print(pairs[:, 0].astype(np.int))", "\n", "t1", "=", "pairs", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "t2", "=", "pairs", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "label", "=", "pairs", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "t1", ",", "t2", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.read_quality_scores": [[212, 217], ["print", "pandas.read_csv", "float", "qs[].split"], "function", ["None"], ["", "def", "read_quality_scores", "(", "path", ")", ":", "\n", "    ", "quality_scores", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "score_dict", "=", "{", "qs", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ":", "float", "(", "qs", "[", "1", "]", ")", "for", "qs", "in", "quality_scores", "}", "\n", "print", "(", "\"Quality scores loaded\"", ")", "\n", "return", "score_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.read_image_feature": [[219, 223], ["open", "pickle.load"], "function", ["None"], ["", "def", "read_image_feature", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "img_feats", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "return", "img_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.get_image_feature": [[225, 294], ["print", "numpy.empty", "numpy.empty", "eval_ijbc_qs.Embedding", "enumerate", "numpy.empty", "eval_ijbc_qs.Embedding", "enumerate", "numpy.array().astype", "numpy.array().astype", "len", "len", "each_line.strip().split", "os.path.join", "cv2.imread", "numpy.array", "lmk.reshape.reshape", "eval_ijbc_qs.Embedding.get", "np.array().astype.append", "np.array().astype.append", "each_line.strip().split", "os.path.join", "cv2.imread", "numpy.array", "lmk.reshape.reshape", "eval_ijbc_qs.Embedding.get", "np.array().astype.append", "np.array().astype.append", "len", "print", "eval_ijbc_qs.Embedding.forward_db", "os.path.join.split", "print", "eval_ijbc_qs.Embedding.forward_db", "os.path.join.split", "numpy.array", "numpy.array", "each_line.strip", "float", "each_line.strip", "float", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.get", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.get", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.forward_db", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.forward_db"], ["", "def", "get_image_feature", "(", "img_path", ",", "files_list", ",", "model_path", ",", "epoch", ",", "gpu_id", ",", "quality_dict", ")", ":", "\n", "    ", "data_shape", "=", "(", "3", ",", "112", ",", "112", ")", "\n", "\n", "files", "=", "files_list", "\n", "print", "(", "'files:'", ",", "len", "(", "files", ")", ")", "\n", "rare_size", "=", "len", "(", "files", ")", "%", "batch_size", "\n", "faceness_scores", "=", "[", "]", "\n", "quality_scores", "=", "[", "]", "\n", "batch", "=", "0", "\n", "img_feats", "=", "np", ".", "empty", "(", "(", "len", "(", "files", ")", ",", "embedding_size", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "\"\"\"\n    for img_index, each_line in tqdm(enumerate(files), total=len(files)):\n        name_lmk_score = each_line.strip().split(' ')\n        template_name = os.path.join(template_path, name_lmk_score[0].replace('.jpg', '.npy'))\n        img_feats[img_index] = np.load(template_name)\n        qual_key = name_lmk_score[0]\n        quality_scores.append(quality_dict[qual_key])\n        faceness_scores.append(name_lmk_score[-1])\n    \"\"\"", "\n", "\n", "# extract embeddings with model", "\n", "batch_data", "=", "np", ".", "empty", "(", "(", "2", "*", "batch_size", ",", "3", ",", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", ")", "\n", "embedding", "=", "Embedding", "(", "model_path", ",", "data_shape", ",", "batch_size", ")", "\n", "for", "img_index", ",", "each_line", "in", "enumerate", "(", "files", "[", ":", "len", "(", "files", ")", "-", "rare_size", "]", ")", ":", "\n", "        ", "name_lmk_score", "=", "each_line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "img_name", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "name_lmk_score", "[", "0", "]", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_name", ")", "\n", "lmk", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "name_lmk_score", "[", "1", ":", "-", "1", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "lmk", "=", "lmk", ".", "reshape", "(", "(", "5", ",", "2", ")", ")", "\n", "input_blob", "=", "embedding", ".", "get", "(", "img", ",", "lmk", ")", "\n", "\n", "batch_data", "[", "2", "*", "(", "img_index", "-", "batch", "*", "batch_size", ")", "]", "[", ":", "]", "=", "input_blob", "[", "0", "]", "\n", "batch_data", "[", "2", "*", "(", "img_index", "-", "batch", "*", "batch_size", ")", "+", "1", "]", "[", ":", "]", "=", "input_blob", "[", "1", "]", "\n", "if", "(", "img_index", "+", "1", ")", "%", "batch_size", "==", "0", ":", "\n", "            ", "print", "(", "'batch'", ",", "batch", ")", "\n", "img_feats", "[", "batch", "*", "batch_size", ":", "batch", "*", "batch_size", "+", "\n", "batch_size", "]", "[", ":", "]", "=", "embedding", ".", "forward_db", "(", "batch_data", ")", "\n", "batch", "+=", "1", "\n", "", "qual_key", "=", "img_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "quality_scores", ".", "append", "(", "quality_dict", "[", "qual_key", "]", ")", "\n", "faceness_scores", ".", "append", "(", "name_lmk_score", "[", "-", "1", "]", ")", "\n", "\n", "", "batch_data", "=", "np", ".", "empty", "(", "(", "2", "*", "rare_size", ",", "3", ",", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", ")", "\n", "embedding", "=", "Embedding", "(", "model_path", ",", "data_shape", ",", "rare_size", ")", "\n", "for", "img_index", ",", "each_line", "in", "enumerate", "(", "files", "[", "len", "(", "files", ")", "-", "rare_size", ":", "]", ")", ":", "\n", "        ", "name_lmk_score", "=", "each_line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "img_name", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "name_lmk_score", "[", "0", "]", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_name", ")", "\n", "lmk", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "name_lmk_score", "[", "1", ":", "-", "1", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "lmk", "=", "lmk", ".", "reshape", "(", "(", "5", ",", "2", ")", ")", "\n", "input_blob", "=", "embedding", ".", "get", "(", "img", ",", "lmk", ")", "\n", "batch_data", "[", "2", "*", "img_index", "]", "[", ":", "]", "=", "input_blob", "[", "0", "]", "\n", "batch_data", "[", "2", "*", "img_index", "+", "1", "]", "[", ":", "]", "=", "input_blob", "[", "1", "]", "\n", "if", "(", "img_index", "+", "1", ")", "%", "rare_size", "==", "0", ":", "\n", "            ", "print", "(", "'batch'", ",", "batch", ")", "\n", "img_feats", "[", "len", "(", "files", ")", "-", "\n", "rare_size", ":", "]", "[", ":", "]", "=", "embedding", ".", "forward_db", "(", "batch_data", ")", "\n", "batch", "+=", "1", "\n", "", "qual_key", "=", "img_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "quality_scores", ".", "append", "(", "quality_dict", "[", "qual_key", "]", ")", "\n", "faceness_scores", ".", "append", "(", "name_lmk_score", "[", "-", "1", "]", ")", "\n", "", "faceness_scores", "=", "np", ".", "array", "(", "faceness_scores", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "quality_scores", "=", "np", ".", "array", "(", "quality_scores", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# img_feats = np.ones( (len(files), 1024), dtype=np.float32) * 0.01", "\n", "# faceness_scores = np.ones( (len(files), ), dtype=np.float32 )", "\n", "return", "img_feats", ",", "faceness_scores", ",", "quality_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.image2template_feature": [[296, 332], ["numpy.unique", "numpy.zeros", "enumerate", "sklearn.preprocessing.normalize", "numpy.where", "numpy.unique", "zip", "numpy.array", "numpy.sum", "len", "numpy.where", "print", "numpy.mean"], "function", ["None"], ["", "def", "image2template_feature", "(", "img_feats", "=", "None", ",", "templates", "=", "None", ",", "medias", "=", "None", ",", "quality_scores", "=", "None", ")", ":", "\n", "# ==========================================================", "\n", "# 1. face image feature l2 normalization. img_feats:[number_image x feats_dim]", "\n", "# 2. compute media feature.", "\n", "# 3. compute template feature.", "\n", "# ==========================================================", "\n", "    ", "unique_templates", "=", "np", ".", "unique", "(", "templates", ")", "\n", "template_feats", "=", "np", ".", "zeros", "(", "(", "len", "(", "unique_templates", ")", ",", "img_feats", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "for", "count_template", ",", "uqt", "in", "enumerate", "(", "unique_templates", ")", ":", "\n", "\n", "        ", "(", "ind_t", ",", ")", "=", "np", ".", "where", "(", "templates", "==", "uqt", ")", "\n", "face_norm_feats", "=", "img_feats", "[", "ind_t", "]", "\n", "\n", "face_medias", "=", "medias", "[", "ind_t", "]", "\n", "unique_medias", ",", "unique_media_counts", "=", "np", ".", "unique", "(", "face_medias", ",", "\n", "return_counts", "=", "True", ")", "\n", "media_norm_feats", "=", "[", "]", "\n", "for", "u", ",", "ct", "in", "zip", "(", "unique_medias", ",", "unique_media_counts", ")", ":", "\n", "            ", "(", "ind_m", ",", ")", "=", "np", ".", "where", "(", "face_medias", "==", "u", ")", "\n", "if", "ct", "==", "1", ":", "\n", "                ", "media_norm_feats", "+=", "[", "face_norm_feats", "[", "ind_m", "]", "]", "\n", "", "else", ":", "# image features from the same video will be aggregated into one feature", "\n", "                ", "media_norm_feats", "+=", "[", "\n", "np", ".", "mean", "(", "face_norm_feats", "[", "ind_m", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "]", "\n", "", "", "media_norm_feats", "=", "np", ".", "array", "(", "media_norm_feats", ")", "\n", "# media_norm_feats = media_norm_feats / np.sqrt(np.sum(media_norm_feats ** 2, -1, keepdims=True))", "\n", "template_feats", "[", "count_template", "]", "=", "np", ".", "sum", "(", "media_norm_feats", ",", "axis", "=", "0", ")", "\n", "if", "count_template", "%", "2000", "==", "0", ":", "\n", "            ", "print", "(", "'Finish Calculating {} template features.'", ".", "format", "(", "\n", "count_template", ")", ")", "\n", "# template_norm_feats = template_feats / np.sqrt(np.sum(template_feats ** 2, -1, keepdims=True))", "\n", "", "", "template_norm_feats", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "template_feats", ")", "\n", "# print(template_norm_feats.shape)", "\n", "return", "template_norm_feats", ",", "unique_templates", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.verification": [[334, 361], ["numpy.zeros", "enumerate", "numpy.zeros", "numpy.array", "len", "enumerate", "range", "numpy.sum", "np.sum.flatten", "len", "len", "range", "print", "max", "len"], "function", ["None"], ["", "def", "verification", "(", "template_norm_feats", "=", "None", ",", "\n", "unique_templates", "=", "None", ",", "\n", "p1", "=", "None", ",", "\n", "p2", "=", "None", ")", ":", "\n", "# ==========================================================", "\n", "#         Compute set-to-set Similarity Score.", "\n", "# ==========================================================", "\n", "    ", "template2id", "=", "np", ".", "zeros", "(", "(", "max", "(", "unique_templates", ")", "+", "1", ",", "1", ")", ",", "dtype", "=", "int", ")", "\n", "for", "count_template", ",", "uqt", "in", "enumerate", "(", "unique_templates", ")", ":", "\n", "        ", "template2id", "[", "uqt", "]", "=", "count_template", "\n", "\n", "", "score", "=", "np", ".", "zeros", "(", "(", "len", "(", "p1", ")", ",", ")", ")", "# save cosine distance between pairs", "\n", "\n", "total_pairs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "p1", ")", ")", ")", "\n", "batchsize", "=", "100000", "# small batchsize instead of all pairs in one batch due to the memory limiation", "\n", "sublists", "=", "[", "\n", "total_pairs", "[", "i", ":", "i", "+", "batchsize", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "p1", ")", ",", "batchsize", ")", "\n", "]", "\n", "total_sublists", "=", "len", "(", "sublists", ")", "\n", "for", "c", ",", "s", "in", "enumerate", "(", "sublists", ")", ":", "\n", "        ", "feat1", "=", "template_norm_feats", "[", "template2id", "[", "p1", "[", "s", "]", "]", "]", "\n", "feat2", "=", "template_norm_feats", "[", "template2id", "[", "p2", "[", "s", "]", "]", "]", "\n", "similarity_score", "=", "np", ".", "sum", "(", "feat1", "*", "feat2", ",", "-", "1", ")", "\n", "score", "[", "s", "]", "=", "similarity_score", ".", "flatten", "(", ")", "\n", "if", "c", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Finish {}/{} pairs.'", ".", "format", "(", "c", ",", "total_sublists", ")", ")", "\n", "", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.verification2": [[364, 386], ["numpy.zeros", "enumerate", "numpy.zeros", "numpy.array", "len", "enumerate", "range", "numpy.sum", "np.sum.flatten", "len", "len", "range", "print", "max", "len"], "function", ["None"], ["", "def", "verification2", "(", "template_norm_feats", "=", "None", ",", "\n", "unique_templates", "=", "None", ",", "\n", "p1", "=", "None", ",", "\n", "p2", "=", "None", ")", ":", "\n", "    ", "template2id", "=", "np", ".", "zeros", "(", "(", "max", "(", "unique_templates", ")", "+", "1", ",", "1", ")", ",", "dtype", "=", "int", ")", "\n", "for", "count_template", ",", "uqt", "in", "enumerate", "(", "unique_templates", ")", ":", "\n", "        ", "template2id", "[", "uqt", "]", "=", "count_template", "\n", "", "score", "=", "np", ".", "zeros", "(", "(", "len", "(", "p1", ")", ",", ")", ")", "# save cosine distance between pairs", "\n", "total_pairs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "p1", ")", ")", ")", "\n", "batchsize", "=", "100000", "# small batchsize instead of all pairs in one batch due to the memory limiation", "\n", "sublists", "=", "[", "\n", "total_pairs", "[", "i", ":", "i", "+", "batchsize", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "p1", ")", ",", "batchsize", ")", "\n", "]", "\n", "total_sublists", "=", "len", "(", "sublists", ")", "\n", "for", "c", ",", "s", "in", "enumerate", "(", "sublists", ")", ":", "\n", "        ", "feat1", "=", "template_norm_feats", "[", "template2id", "[", "p1", "[", "s", "]", "]", "]", "\n", "feat2", "=", "template_norm_feats", "[", "template2id", "[", "p2", "[", "s", "]", "]", "]", "\n", "similarity_score", "=", "np", ".", "sum", "(", "feat1", "*", "feat2", ",", "-", "1", ")", "\n", "score", "[", "s", "]", "=", "similarity_score", ".", "flatten", "(", ")", "\n", "if", "c", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Finish {}/{} pairs.'", ".", "format", "(", "c", ",", "total_sublists", ")", ")", "\n", "", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.eval_ijbc_qs.read_score": [[388, 392], ["open", "pickle.load"], "function", ["None"], ["", "def", "read_score", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "img_feats", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "return", "img_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.extract_emb.parse_arguments": [[9, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_arguments", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset_path'", ",", "type", "=", "str", ",", "default", "=", "'./data/quality_data/XQLFW'", ",", "\n", "help", "=", "'dataset directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--modelname'", ",", "type", "=", "str", ",", "default", "=", "'ElasticFaceModel'", ",", "\n", "help", "=", "'ArcFaceModel, CurricularFaceModel, ElasticFaceModel, MagFaceModel'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'GPU id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "'path to pretrained model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_id'", ",", "type", "=", "str", ",", "default", "=", "\"295672\"", ",", "\n", "help", "=", "'digit number in backbone file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--relative_dir'", ",", "type", "=", "str", ",", "default", "=", "'./data'", ",", "\n", "help", "=", "'path to save the embeddings'", ")", "\n", "return", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.extract_emb.read_img_path_list": [[28, 33], ["open", "f.readlines", "os.path.join", "line.rstrip"], "function", ["None"], ["", "def", "read_img_path_list", "(", "image_path_file", ",", "relative_dir", ")", ":", "\n", "    ", "with", "open", "(", "image_path_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "lines", "=", "[", "os", ".", "path", ".", "join", "(", "relative_dir", ",", "line", ".", "rstrip", "(", ")", ")", "for", "line", "in", "lines", "]", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.extract_emb.main": [[34, 72], ["os.path.join", "extract_emb.read_img_path_list", "MagFaceModel.get_batch_feature", "MagFaceModel.get_batch_feature", "print", "tqdm.tqdm", "dataset_path.split", "os.path.exists", "os.makedirs", "os.path.join", "ArcFaceModel", "range", "numpy.concatenate", "str", "numpy.save", "CurricularFaceModel", "len", "os.path.join", "ElasticFaceModel", "[].split", "MagFaceModel", "print", "exit", "str().split", "str"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.extract_emb.read_img_path_list", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.get_batch_feature", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.get_batch_feature"], ["", "def", "main", "(", "param", ")", ":", "\n", "    ", "dataset_path", "=", "param", ".", "dataset_path", "\n", "modelname", "=", "param", ".", "modelname", "\n", "gpu_id", "=", "param", ".", "gpu_id", "\n", "data_path", "=", "param", ".", "relative_dir", "\n", "dataset_name", "=", "dataset_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"quality_embeddings\"", ",", "f\"{dataset_name}_{modelname}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_path", ")", "\n", "", "image_path_list", "=", "read_img_path_list", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"image_path_list.txt\"", ")", ",", "data_path", ")", "\n", "if", "modelname", "==", "\"ArcFaceModel\"", ":", "\n", "        ", "from", "model", ".", "ArcFaceModel", "import", "ArcFaceModel", "\n", "face_model", "=", "ArcFaceModel", "(", "param", ".", "model_path", ",", "param", ".", "model_id", ",", "gpu_id", "=", "gpu_id", ")", "\n", "", "elif", "modelname", "==", "\"CurricularFaceModel\"", ":", "\n", "        ", "from", "model", ".", "CurricularFaceModel", "import", "CurricularFaceModel", "\n", "face_model", "=", "CurricularFaceModel", "(", "param", ".", "model_path", ",", "param", ".", "model_id", ",", "gpu_id", ")", "\n", "", "elif", "modelname", "==", "\"ElasticFaceModel\"", ":", "\n", "        ", "from", "model", ".", "ElasticFaceModel", "import", "ElasticFaceModel", "\n", "face_model", "=", "ElasticFaceModel", "(", "param", ".", "model_path", ",", "param", ".", "model_id", ",", "gpu_id", ")", "\n", "", "elif", "modelname", "==", "\"MagFaceModel\"", ":", "\n", "        ", "from", "model", ".", "MagFaceModel", "import", "MagFaceModel", "\n", "face_model", "=", "MagFaceModel", "(", "param", ".", "model_path", ",", "param", ".", "model_id", ",", "gpu_id", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unknown model\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "features", "=", "face_model", ".", "get_batch_feature", "(", "image_path_list", ")", "\n", "features_flipped", "=", "face_model", ".", "get_batch_feature", "(", "image_path_list", ",", "flip", "=", "1", ")", "\n", "\n", "# too slow for IJBC", "\n", "# conc_features = np.concatenate((features, features_flipped), axis=1)", "\n", "# print(conc_features.shape)", "\n", "\n", "print", "(", "\"save features\"", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "features", ")", ")", ")", ":", "\n", "        ", "conc_features", "=", "np", ".", "concatenate", "(", "(", "features", "[", "i", "]", ",", "features_flipped", "[", "i", "]", ")", ",", "axis", "=", "0", ")", "\n", "filename", "=", "str", "(", "str", "(", "image_path_list", "[", "i", "]", ")", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "filename", ")", ",", "conc_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.extract_xqlfw.copy_img": [[17, 24], ["os.path.join", "cv2.imread", "cv2.cvtColor", "cv2.imwrite", "os.path.join", "str().zfill", "str"], "function", ["None"], ["def", "copy_img", "(", "person", ",", "img_id", ")", ":", "\n", "    ", "img_name", "=", "f\"{person}_{str(img_id).zfill(4)}.jpg\"", "\n", "tmp_path", "=", "os", ".", "path", ".", "join", "(", "align_path", ",", "person", ",", "img_name", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "tmp_path", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "outpath", ",", "\"images\"", ",", "img_name", ")", ",", "img", ")", "\n", "return", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.extract_xqlfw.create_xqlfw_pairs": [[26, 52], ["open", "open", "open", "open.close", "open.close", "open.close", "os.path.join", "os.path.join", "open.readlines", "line.strip().split", "open.write", "open.write", "open.write", "len", "extract_xqlfw.copy_img", "extract_xqlfw.copy_img", "extract_xqlfw.copy_img", "extract_xqlfw.copy_img", "line.strip", "os.path.join", "os.path.join", "int", "len"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.crerate_pair_xqlfw.copy_img", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.crerate_pair_xqlfw.copy_img", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.crerate_pair_xqlfw.copy_img", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.crerate_pair_xqlfw.copy_img"], ["", "def", "create_xqlfw_pairs", "(", "pairs_filename", ")", ":", "\n", "    ", "\"\"\" reads xqlfw pairs.txt and creates pair_list.txt \n    and image_path_list.txt of required format\n    :param pairs_filename: path to pairs.txt\n    \"\"\"", "\n", "txt_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "outpath", ",", "\"image_path_list.txt\"", ")", ",", "\"w\"", ")", "\n", "pair_list", "=", "open", "(", "os", ".", "path", ".", "join", "(", "outpath", ",", "\"pair_list.txt\"", ")", ",", "\"w\"", ")", "\n", "\n", "f", "=", "open", "(", "pairs_filename", ",", "'r'", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", "[", "1", ":", "]", ":", "\n", "        ", "pair", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "len", "(", "pair", ")", "==", "3", ":", "\n", "            ", "img_name1", "=", "copy_img", "(", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", ")", "\n", "img_name2", "=", "copy_img", "(", "pair", "[", "0", "]", ",", "pair", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "img_name1", "=", "copy_img", "(", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", ")", "\n", "img_name2", "=", "copy_img", "(", "pair", "[", "2", "]", ",", "pair", "[", "3", "]", ")", "\n", "\n", "", "txt_file", ".", "write", "(", "os", ".", "path", ".", "join", "(", "rel_img_path", ",", "img_name1", ")", "+", "\"\\n\"", ")", "\n", "txt_file", ".", "write", "(", "os", ".", "path", ".", "join", "(", "rel_img_path", ",", "img_name2", ")", "+", "\"\\n\"", ")", "\n", "pair_list", ".", "write", "(", "f\"{img_name1} {img_name2} {int(len(pair)==3)}\\n\"", ")", "\n", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "txt_file", ".", "close", "(", ")", "\n", "pair_list", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.ElasticFaceModel.ElasticFaceModel.__init__": [[7, 9], ["model.FaceModel.FaceModel.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_prefix", ",", "model_epoch", ",", "gpu_id", ")", ":", "\n", "        ", "super", "(", "ElasticFaceModel", ",", "self", ")", ".", "__init__", "(", "model_prefix", ",", "model_epoch", ",", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.ElasticFaceModel.ElasticFaceModel._get_model": [[10, 17], ["torch.load", "backbones.iresnet.iresnet100().to", "backbones.iresnet.iresnet100().to.load_state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel.eval", "os.path.join", "backbones.iresnet.iresnet100"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet100"], ["", "def", "_get_model", "(", "self", ",", "ctx", ",", "image_size", ",", "prefix", ",", "epoch", ",", "layer", ")", ":", "\n", "        ", "weight", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "prefix", ",", "epoch", "+", "\"backbone.pth\"", ")", ")", "\n", "backbone", "=", "iresnet100", "(", ")", ".", "to", "(", "f\"cuda:{ctx}\"", ")", "\n", "backbone", ".", "load_state_dict", "(", "weight", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "backbone", ",", "device_ids", "=", "[", "ctx", "]", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.ElasticFaceModel.ElasticFaceModel._getFeatureBlob": [[18, 25], ["torch.no_grad", "torch.Tensor().cuda", "torch.Tensor().cuda.div_().sub_().div_", "ElasticFaceModel.ElasticFaceModel.model", "ElasticFaceModel.ElasticFaceModel.cpu().numpy", "torch.Tensor", "torch.Tensor().cuda.div_().sub_", "ElasticFaceModel.ElasticFaceModel.cpu", "torch.Tensor().cuda.div_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_getFeatureBlob", "(", "self", ",", "input_blob", ")", ":", "\n", "        ", "imgs", "=", "torch", ".", "Tensor", "(", "input_blob", ")", ".", "cuda", "(", ")", "\n", "imgs", ".", "div_", "(", "255", ")", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "feat", "=", "self", ".", "model", "(", "imgs", ")", "\n", "#feat = feat.reshape([self.batch_size, 2 * feat.shape[1]])", "\n", "return", "feat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.MagFaceModel.MagFaceModel.__init__": [[7, 9], ["model.FaceModel.FaceModel.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_prefix", ",", "model_epoch", ",", "gpu_id", ")", ":", "\n", "        ", "super", "(", "MagFaceModel", ",", "self", ")", ".", "__init__", "(", "model_prefix", ",", "model_epoch", ",", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.MagFaceModel.MagFaceModel._get_model": [[10, 15], ["backbones.mag_network_inf.builder_inf", "torch.nn.DataParallel", "torch.nn.DataParallel.eval", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.mag_network_inf.builder_inf"], ["", "def", "_get_model", "(", "self", ",", "ctx", ",", "image_size", ",", "prefix", ",", "epoch", ",", "layer", ")", ":", "\n", "        ", "backbone", "=", "builder_inf", "(", "os", ".", "path", ".", "join", "(", "prefix", ",", "\"magface_epoch_\"", "+", "epoch", "+", "\".pth\"", ")", ",", "\"iresnet100\"", ",", "512", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "backbone", ",", "device_ids", "=", "[", "ctx", "]", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.MagFaceModel.MagFaceModel._getFeatureBlob": [[16, 23], ["torch.no_grad", "torch.Tensor().cuda", "torch.Tensor().cuda.div_", "MagFaceModel.MagFaceModel.model", "MagFaceModel.MagFaceModel.cpu().numpy", "torch.Tensor", "MagFaceModel.MagFaceModel.cpu"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_getFeatureBlob", "(", "self", ",", "input_blob", ")", ":", "\n", "        ", "imgs", "=", "torch", ".", "Tensor", "(", "input_blob", ")", ".", "cuda", "(", ")", "\n", "imgs", ".", "div_", "(", "255", ")", "\n", "feat", "=", "self", ".", "model", "(", "imgs", ")", "\n", "#feat = feat.reshape([self.batch_size, 2 * feat.shape[1]])", "\n", "return", "feat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.CurricularFaceModel.CurricularFaceModel.__init__": [[11, 13], ["model.FaceModel.FaceModel.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_prefix", ",", "model_epoch", ",", "gpu_id", ")", ":", "\n", "        ", "super", "(", "CurricularFaceModel", ",", "self", ")", ".", "__init__", "(", "model_prefix", ",", "model_epoch", ",", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.CurricularFaceModel.CurricularFaceModel._get_model": [[14, 21], ["torch.load", "backbones.model_irse.IR_101().to", "backbones.model_irse.IR_101().to.load_state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel.eval", "os.path.join", "backbones.model_irse.IR_101"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.IR_101"], ["", "def", "_get_model", "(", "self", ",", "ctx", ",", "image_size", ",", "prefix", ",", "epoch", ",", "layer", ")", ":", "\n", "        ", "weight", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "prefix", ",", "\"CurricularFace_Backbone.pth\"", ")", ")", "\n", "backbone", "=", "IR_101", "(", "[", "112", ",", "112", "]", ")", ".", "to", "(", "f\"cuda:{ctx}\"", ")", "\n", "backbone", ".", "load_state_dict", "(", "weight", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "backbone", ",", "device_ids", "=", "[", "ctx", "]", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.CurricularFaceModel.CurricularFaceModel._getFeatureBlob": [[22, 29], ["torch.no_grad", "torch.Tensor().cuda", "torch.Tensor().cuda.div_().sub_().div_", "CurricularFaceModel.CurricularFaceModel.model", "feat.cpu().numpy", "torch.Tensor", "torch.Tensor().cuda.div_().sub_", "feat.cpu", "torch.Tensor().cuda.div_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_getFeatureBlob", "(", "self", ",", "input_blob", ")", ":", "\n", "        ", "imgs", "=", "torch", ".", "Tensor", "(", "input_blob", ")", ".", "cuda", "(", ")", "\n", "imgs", ".", "div_", "(", "255", ")", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "feat", ",", "_", "=", "self", ".", "model", "(", "imgs", ")", "\n", "#feat = feat.reshape([self.batch_size, 2 * feat.shape[1]])", "\n", "return", "feat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.ArcFaceModel.ArcFaceModel.__init__": [[7, 9], ["model.FaceModel.FaceModel.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_prefix", ",", "model_epoch", ",", "gpu_id", ")", ":", "\n", "        ", "super", "(", "ArcFaceModel", ",", "self", ")", ".", "__init__", "(", "model_prefix", ",", "model_epoch", ",", "gpu_id", ")", "\n", "", "def", "_get_model", "(", "self", ",", "ctx", ",", "image_size", ",", "prefix", ",", "epoch", ",", "layer", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.ArcFaceModel.ArcFaceModel._get_model": [[9, 22], ["print", "mxnet.model.load_checkpoint", "sym.get_internals", "mxnet.mod.Module", "mxnet.mod.Module.bind", "mxnet.mod.Module.set_params", "mxnet.gpu", "mxnet.cpu", "int"], "methods", ["None"], ["", "def", "_get_model", "(", "self", ",", "ctx", ",", "image_size", ",", "prefix", ",", "epoch", ",", "layer", ")", ":", "\n", "        ", "print", "(", "'loading'", ",", "prefix", ",", "epoch", ")", "\n", "if", "ctx", ">=", "0", ":", "\n", "            ", "ctx", "=", "mx", ".", "gpu", "(", "ctx", ")", "\n", "", "else", ":", "\n", "            ", "ctx", "=", "mx", ".", "cpu", "(", ")", "\n", "", "sym", ",", "arg_params", ",", "aux_params", "=", "mx", ".", "model", ".", "load_checkpoint", "(", "prefix", ",", "int", "(", "epoch", ")", ")", "\n", "all_layers", "=", "sym", ".", "get_internals", "(", ")", "\n", "sym", "=", "all_layers", "[", "layer", "+", "'_output'", "]", "\n", "model", "=", "mx", ".", "mod", ".", "Module", "(", "symbol", "=", "sym", ",", "context", "=", "ctx", ",", "label_names", "=", "None", ")", "\n", "model", ".", "bind", "(", "data_shapes", "=", "[", "(", "'data'", ",", "(", "1", ",", "3", ",", "image_size", "[", "0", "]", ",", "image_size", "[", "1", "]", ")", ")", "]", ")", "\n", "model", ".", "set_params", "(", "arg_params", ",", "aux_params", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.ArcFaceModel.ArcFaceModel._getFeatureBlob": [[23, 29], ["mxnet.nd.array", "mxnet.io.DataBatch", "ArcFaceModel.ArcFaceModel.model.forward", "[].asnumpy", "ArcFaceModel.ArcFaceModel.model.get_outputs"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.OnTopQS.forward"], ["", "def", "_getFeatureBlob", "(", "self", ",", "input_blob", ")", ":", "\n", "        ", "data", "=", "mx", ".", "nd", ".", "array", "(", "input_blob", ")", "\n", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "data", ",", ")", ")", "\n", "self", ".", "model", ".", "forward", "(", "db", ",", "is_train", "=", "False", ")", "\n", "emb", "=", "self", ".", "model", ".", "get_outputs", "(", ")", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "return", "emb", "", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.FaceModel.FaceModel.__init__": [[7, 13], ["FaceModel.FaceModel._get_model"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel._get_model"], ["    ", "def", "__init__", "(", "self", ",", "model_prefix", ",", "model_epoch", ",", "ctx_id", "=", "7", ")", ":", "\n", "        ", "self", ".", "gpu_id", "=", "ctx_id", "\n", "self", ".", "image_size", "=", "(", "112", ",", "112", ")", "\n", "self", ".", "model_prefix", "=", "model_prefix", "\n", "self", ".", "model_epoch", "=", "model_epoch", "\n", "self", ".", "model", "=", "self", ".", "_get_model", "(", "ctx", "=", "ctx_id", ",", "image_size", "=", "self", ".", "image_size", ",", "prefix", "=", "self", ".", "model_prefix", ",", "epoch", "=", "self", ".", "model_epoch", ",", "layer", "=", "'fc1'", ")", "\n", "", "def", "_get_model", "(", "self", ",", "ctx", ",", "image_size", ",", "prefix", ",", "epoch", ",", "layer", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.FaceModel.FaceModel._get_model": [[13, 15], ["None"], "methods", ["None"], ["", "def", "_get_model", "(", "self", ",", "ctx", ",", "image_size", ",", "prefix", ",", "epoch", ",", "layer", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.FaceModel.FaceModel._getFeatureBlob": [[16, 18], ["None"], "methods", ["None"], ["", "def", "_getFeatureBlob", "(", "self", ",", "input_blob", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.FaceModel.FaceModel.get_feature": [[19, 29], ["cv2.imread", "cv2.resize", "cv2.cvtColor", "numpy.transpose", "numpy.expand_dims", "FaceModel.FaceModel._getFeatureBlob", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize.reshape"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel._getFeatureBlob"], ["", "def", "get_feature", "(", "self", ",", "image_path", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "112", ",", "112", ")", ")", "\n", "a", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "a", "=", "np", ".", "transpose", "(", "a", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "input_blob", "=", "np", ".", "expand_dims", "(", "a", ",", "axis", "=", "0", ")", "\n", "emb", "=", "self", ".", "_getFeatureBlob", "(", "input_blob", ")", "\n", "emb", "=", "normalize", "(", "emb", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "#print(type(emb), emb.shape)", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.model.FaceModel.FaceModel.get_batch_feature": [[30, 60], ["int", "range", "numpy.vstack", "sklearn.preprocessing.normalize", "len", "numpy.array", "FaceModel.FaceModel._getFeatureBlob", "sklearn.preprocessing.normalize.append", "print", "len", "cv2.imread", "cv2.resize", "numpy.transpose", "images.append", "cv2.flip", "str"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel._getFeatureBlob"], ["", "def", "get_batch_feature", "(", "self", ",", "image_path_list", ",", "batch_size", "=", "64", ",", "flip", "=", "0", ")", ":", "\n", "        ", "count", "=", "0", "\n", "num_batch", "=", "int", "(", "len", "(", "image_path_list", ")", "/", "batch_size", ")", "\n", "features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "image_path_list", ")", ",", "batch_size", ")", ":", "\n", "\n", "            ", "if", "count", "<", "num_batch", ":", "\n", "                ", "tmp_list", "=", "image_path_list", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "", "else", ":", "\n", "                ", "tmp_list", "=", "image_path_list", "[", "i", ":", "]", "\n", "", "count", "+=", "1", "\n", "\n", "images", "=", "[", "]", "\n", "for", "image_path", "in", "tmp_list", ":", "\n", "                ", "image", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "112", ",", "112", ")", ")", "\n", "if", "flip", "==", "1", ":", "\n", "                    ", "image", "=", "cv2", ".", "flip", "(", "image", ",", "1", ")", "# flip image horizontally", "\n", "# a = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)", "\n", "", "a", "=", "np", ".", "transpose", "(", "image", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "images", ".", "append", "(", "a", ")", "\n", "", "input_blob", "=", "np", ".", "array", "(", "images", ")", "\n", "\n", "emb", "=", "self", ".", "_getFeatureBlob", "(", "input_blob", ")", "\n", "features", ".", "append", "(", "emb", ")", "\n", "print", "(", "\"batch\"", "+", "str", "(", "i", ")", ")", "\n", "", "features", "=", "np", ".", "vstack", "(", "features", ")", "\n", "features", "=", "normalize", "(", "features", ")", "\n", "#print('output features:', features.shape)", "\n", "return", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.Flatten.forward": [[12, 14], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.SEModule.__init__": [[24, 37], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "reduction", ")", ":", "\n", "        ", "super", "(", "SEModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "Conv2d", "(", "\n", "channels", ",", "channels", "//", "reduction", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc1", ".", "weight", ".", "data", ")", "\n", "\n", "self", ".", "relu", "=", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "Conv2d", "(", "\n", "channels", "//", "reduction", ",", "channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "sigmoid", "=", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.SEModule.forward": [[38, 47], ["model_irse.SEModule.avg_pool", "model_irse.SEModule.fc1", "model_irse.SEModule.relu", "model_irse.SEModule.fc2", "model_irse.SEModule.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "module_input", "=", "x", "\n", "x", "=", "self", ".", "avg_pool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "sigmoid", "(", "x", ")", "\n", "\n", "return", "module_input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.bottleneck_IR.__init__": [[50, 63], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "depth", ",", "stride", ")", ":", "\n", "        ", "super", "(", "bottleneck_IR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "BatchNorm2d", "(", "depth", ")", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.bottleneck_IR.forward": [[64, 69], ["model_irse.bottleneck_IR.shortcut_layer", "model_irse.bottleneck_IR.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "\n", "return", "res", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.bottleneck_IR_SE.__init__": [[72, 87], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "model_irse.SEModule", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "depth", ",", "stride", ")", ":", "\n", "        ", "super", "(", "bottleneck_IR_SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "in_channel", "==", "depth", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "MaxPool2d", "(", "1", ",", "stride", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "shortcut_layer", "=", "Sequential", "(", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "1", ",", "1", ")", ",", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", ")", "\n", "", "self", ".", "res_layer", "=", "Sequential", "(", "\n", "BatchNorm2d", "(", "in_channel", ")", ",", "\n", "Conv2d", "(", "in_channel", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "PReLU", "(", "depth", ")", ",", "\n", "Conv2d", "(", "depth", ",", "depth", ",", "(", "3", ",", "3", ")", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "depth", ")", ",", "\n", "SEModule", "(", "depth", ",", "16", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.bottleneck_IR_SE.forward": [[89, 94], ["model_irse.bottleneck_IR_SE.shortcut_layer", "model_irse.bottleneck_IR_SE.res_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "self", ".", "shortcut_layer", "(", "x", ")", "\n", "res", "=", "self", ".", "res_layer", "(", "x", ")", "\n", "\n", "return", "res", "+", "shortcut", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.Backbone.__init__": [[132, 168], ["torch.nn.Module.__init__", "model_irse.get_blocks", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "model_irse.Backbone._initialize_weights", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Dropout", "model_irse.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Dropout", "model_irse.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "modules.append", "unit_module"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_blocks", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.Backbone._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "num_layers", ",", "mode", "=", "'ir'", ")", ":", "\n", "        ", "super", "(", "Backbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "input_size", "[", "0", "]", "in", "[", "112", ",", "224", "]", ",", "\"input_size should be [112, 112] or [224, 224]\"", "\n", "assert", "num_layers", "in", "[", "50", ",", "100", ",", "152", "]", ",", "\"num_layers should be 50, 100 or 152\"", "\n", "assert", "mode", "in", "[", "'ir'", ",", "'ir_se'", "]", ",", "\"mode should be ir or ir_se\"", "\n", "blocks", "=", "get_blocks", "(", "num_layers", ")", "\n", "if", "mode", "==", "'ir'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR", "\n", "", "elif", "mode", "==", "'ir_se'", ":", "\n", "            ", "unit_module", "=", "bottleneck_IR_SE", "\n", "", "self", ".", "input_layer", "=", "Sequential", "(", "Conv2d", "(", "3", ",", "64", ",", "(", "3", ",", "3", ")", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "64", ")", ",", "\n", "PReLU", "(", "64", ")", ")", "\n", "if", "input_size", "[", "0", "]", "==", "112", ":", "\n", "            ", "self", ".", "output_layer", "=", "Sequential", "(", "BatchNorm2d", "(", "512", ")", ",", "\n", "Dropout", "(", "0.4", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", "*", "7", "*", "7", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ",", "affine", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_layer", "=", "Sequential", "(", "BatchNorm2d", "(", "512", ")", ",", "\n", "Dropout", "(", "0.4", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "Linear", "(", "512", "*", "14", "*", "14", ",", "512", ")", ",", "\n", "BatchNorm1d", "(", "512", ",", "affine", "=", "False", ")", ")", "\n", "\n", "", "modules", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "for", "bottleneck", "in", "block", ":", "\n", "                ", "modules", ".", "append", "(", "\n", "unit_module", "(", "bottleneck", ".", "in_channel", ",", "\n", "bottleneck", ".", "depth", ",", "\n", "bottleneck", ".", "stride", ")", ")", "\n", "", "", "self", ".", "body", "=", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.Backbone.forward": [[169, 176], ["model_irse.Backbone.input_layer", "model_irse.Backbone.body", "model_irse.Backbone.view", "model_irse.Backbone.output_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "input_layer", "(", "x", ")", "\n", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "conv_out", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "\n", "return", "x", ",", "conv_out", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.Backbone._initialize_weights": [[177, 190], ["model_irse.Backbone.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.l2_norm": [[16, 21], ["torch.norm", "torch.norm", "torch.div", "torch.div"], "function", ["None"], ["", "", "def", "l2_norm", "(", "input", ",", "axis", "=", "1", ")", ":", "\n", "    ", "norm", "=", "torch", ".", "norm", "(", "input", ",", "2", ",", "axis", ",", "True", ")", "\n", "output", "=", "torch", ".", "div", "(", "input", ",", "norm", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block": [[100, 103], ["model_irse.Bottleneck", "model_irse.Bottleneck", "range"], "function", ["None"], ["", "def", "get_block", "(", "in_channel", ",", "depth", ",", "num_units", ",", "stride", "=", "2", ")", ":", "\n", "\n", "    ", "return", "[", "Bottleneck", "(", "in_channel", ",", "depth", ",", "stride", ")", "]", "+", "[", "Bottleneck", "(", "depth", ",", "depth", ",", "1", ")", "for", "i", "in", "range", "(", "num_units", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_blocks": [[105, 129], ["model_irse.get_block", "model_irse.get_block", "model_irse.get_block", "model_irse.get_block", "model_irse.get_block", "model_irse.get_block", "model_irse.get_block", "model_irse.get_block", "model_irse.get_block", "model_irse.get_block", "model_irse.get_block", "model_irse.get_block"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.get_block"], ["", "def", "get_blocks", "(", "num_layers", ")", ":", "\n", "    ", "if", "num_layers", "==", "50", ":", "\n", "        ", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "4", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "14", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "elif", "num_layers", "==", "100", ":", "\n", "        ", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "13", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "30", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "", "elif", "num_layers", "==", "152", ":", "\n", "        ", "blocks", "=", "[", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "64", ",", "num_units", "=", "3", ")", ",", "\n", "get_block", "(", "in_channel", "=", "64", ",", "depth", "=", "128", ",", "num_units", "=", "8", ")", ",", "\n", "get_block", "(", "in_channel", "=", "128", ",", "depth", "=", "256", ",", "num_units", "=", "36", ")", ",", "\n", "get_block", "(", "in_channel", "=", "256", ",", "depth", "=", "512", ",", "num_units", "=", "3", ")", "\n", "]", "\n", "\n", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.IR_50": [[191, 197], ["model_irse.Backbone"], "function", ["None"], ["", "", "", "", "", "def", "IR_50", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-50 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "50", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.IR_101": [[199, 205], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_101", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-101 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "100", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.IR_152": [[207, 213], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_152", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir-152 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "152", ",", "'ir'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.IR_SE_50": [[215, 221], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_SE_50", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir_se-50 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "50", ",", "'ir_se'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.IR_SE_101": [[223, 229], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_SE_101", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir_se-101 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "100", ",", "'ir_se'", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.IR_SE_152": [[231, 237], ["model_irse.Backbone"], "function", ["None"], ["", "def", "IR_SE_152", "(", "input_size", ")", ":", "\n", "    ", "\"\"\"Constructs a ir_se-152 model.\n    \"\"\"", "\n", "model", "=", "Backbone", "(", "input_size", ",", "152", ",", "'ir_se'", ")", "\n", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.activation.Identity.__init__": [[12, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.activation.Identity.forward": [[15, 17], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.activation.Identity.__repr__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{name}()'", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ")", "\n", "", "", "class", "HSigmoid", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.activation.HSigmoid.forward": [[25, 27], ["torch.relu6", "torch.relu6", "torch.relu6"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "F", ".", "relu6", "(", "x", "+", "3.0", ",", "inplace", "=", "True", ")", "/", "6.0", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.activation.Swish.forward": [[33, 35], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "", "class", "HSwish", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.activation.HSwish.__init__": [[44, 47], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["def", "__init__", "(", "self", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "HSwish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.activation.HSwish.forward": [[48, 50], ["torch.relu6", "torch.relu6", "torch.relu6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "F", ".", "relu6", "(", "x", "+", "3.0", ",", "inplace", "=", "self", ".", "inplace", ")", "/", "6.0", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.activation.get_activation_layer": [[52, 91], ["inspect.isfunction", "activation", "isinstance", "isinstance", "torch.ReLU", "torch.PReLU", "torch.ReLU6", "activation.Swish", "activation.HSwish", "torch.Sigmoid", "activation.HSigmoid", "activation.Identity", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_activation_layer", "(", "activation", ",", "param", ")", ":", "\n", "    ", "\"\"\"\n    Create activation layer from string/function.\n\n    Parameters:\n    ----------\n    activation : function, or str, or nn.Module\n        Activation function or name of activation function.\n\n    Returns:\n    -------\n    nn.Module\n        Activation layer.\n    \"\"\"", "\n", "assert", "(", "activation", "is", "not", "None", ")", "\n", "if", "isfunction", "(", "activation", ")", ":", "\n", "        ", "return", "activation", "(", ")", "\n", "", "elif", "isinstance", "(", "activation", ",", "str", ")", ":", "\n", "        ", "if", "activation", "==", "\"relu\"", ":", "\n", "            ", "return", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "\"prelu\"", ":", "\n", "            ", "return", "nn", ".", "PReLU", "(", "param", ")", "\n", "", "elif", "activation", "==", "\"relu6\"", ":", "\n", "            ", "return", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "\"swish\"", ":", "\n", "            ", "return", "Swish", "(", ")", "\n", "", "elif", "activation", "==", "\"hswish\"", ":", "\n", "            ", "return", "HSwish", "(", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "\"sigmoid\"", ":", "\n", "            ", "return", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "activation", "==", "\"hsigmoid\"", ":", "\n", "            ", "return", "HSigmoid", "(", ")", "\n", "", "elif", "activation", "==", "\"identity\"", ":", "\n", "            ", "return", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "(", "isinstance", "(", "activation", ",", "nn", ".", "Module", ")", ")", "\n", "return", "activation", "", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet_mag.IBasicBlock.__init__": [[22, 40], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "iresnet_mag.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "iresnet_mag.conv3x3", "torch.nn.BatchNorm2d", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.conv3x3", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "IBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ",", "eps", "=", "2e-05", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "eps", "=", "2e-05", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "eps", "=", "2e-05", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet_mag.IBasicBlock.forward": [[41, 57], ["iresnet_mag.IBasicBlock.bn1", "iresnet_mag.IBasicBlock.conv1", "iresnet_mag.IBasicBlock.bn2", "iresnet_mag.IBasicBlock.prelu", "iresnet_mag.IBasicBlock.conv2", "iresnet_mag.IBasicBlock.bn3", "iresnet_mag.IBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "prelu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet_mag.IResNet.__init__": [[62, 108], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "iresnet_mag.IResNet._make_layer", "iresnet_mag.IResNet._make_layer", "iresnet_mag.IResNet._make_layer", "iresnet_mag.IResNet._make_layer", "torch.nn.AdaptiveAvgPool2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout2d", "torch.nn.Linear", "torch.nn.BatchNorm1d", "iresnet_mag.IResNet.modules", "len", "ValueError", "isinstance", "iresnet_mag.IResNet.modules", "torch.nn.init.kaiming_normal_", "isinstance", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "512", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ")", ":", "\n", "        ", "super", "(", "IResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ",", "eps", "=", "2e-05", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "\n", "512", "*", "block", ".", "expansion", ",", "eps", "=", "2e-05", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.4", ",", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", "*", "self", ".", "fc_scale", ",", "num_classes", ")", "\n", "self", ".", "features", "=", "nn", ".", "BatchNorm1d", "(", "num_classes", ",", "eps", "=", "2e-05", ",", "momentum", "=", "0.9", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "IBasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet_mag.IResNet._make_layer": [[109, 131], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "iresnet_mag.conv1x1", "torch.nn.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "\n", "eps", "=", "2e-05", ",", "momentum", "=", "0.9", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet_mag.IResNet.forward": [[132, 149], ["iresnet_mag.IResNet.conv1", "iresnet_mag.IResNet.bn1", "iresnet_mag.IResNet.prelu", "iresnet_mag.IResNet.layer1", "iresnet_mag.IResNet.layer2", "iresnet_mag.IResNet.layer3", "iresnet_mag.IResNet.layer4", "iresnet_mag.IResNet.bn2", "iresnet_mag.IResNet.dropout", "iresnet_mag.IResNet.view", "iresnet_mag.IResNet.fc", "iresnet_mag.IResNet.features", "iresnet_mag.IResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet_mag.conv3x3": [[8, 12], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet_mag.conv1x1": [[14, 17], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet_mag._iresnet": [[151, 158], ["iresnet_mag.IResNet"], "function", ["None"], ["", "", "def", "_iresnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "IResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "# if pretrained:", "\n", "# state_dict = load_state_dict_from_url(model_urls[arch],", "\n", "#                                        progress=progress)", "\n", "# model.load_state_dict(state_dict)", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet_mag.iresnet18": [[160, 163], ["iresnet_mag._iresnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet._iresnet"], ["", "def", "iresnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet18'", ",", "IBasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet_mag.iresnet34": [[165, 168], ["iresnet_mag._iresnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet._iresnet"], ["", "def", "iresnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet34'", ",", "IBasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet_mag.iresnet50": [[170, 173], ["iresnet_mag._iresnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet._iresnet"], ["", "def", "iresnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet50'", ",", "IBasicBlock", ",", "[", "3", ",", "4", ",", "14", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet_mag.iresnet100": [[175, 178], ["iresnet_mag._iresnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet._iresnet"], ["", "def", "iresnet100", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet100'", ",", "IBasicBlock", ",", "[", "3", ",", "13", ",", "30", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.mag_network_inf.NetworkBuilder_inf.__init__": [[39, 42], ["torch.Module.__init__", "mag_network_inf.load_features"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.mag_network_inf.load_features"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "embedding_size", ")", ":", "\n", "        ", "super", "(", "NetworkBuilder_inf", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "load_features", "(", "backbone", ",", "embedding_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.mag_network_inf.NetworkBuilder_inf.forward": [[43, 47], ["mag_network_inf.NetworkBuilder_inf.features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# add Fp, a pose feature", "\n", "        ", "x", "=", "self", ".", "features", "(", "input", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.mag_network_inf.load_features": [[12, 36], ["backbones.iresnet_mag.iresnet34", "backbones.iresnet_mag.iresnet18", "backbones.iresnet_mag.iresnet50", "backbones.iresnet_mag.iresnet100", "ValueError"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet34", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet18", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet50", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet100"], ["def", "load_features", "(", "backbone_name", ",", "embedding_size", ")", ":", "\n", "    ", "if", "backbone_name", "==", "'iresnet34'", ":", "\n", "        ", "features", "=", "iresnet", ".", "iresnet34", "(", "\n", "pretrained", "=", "False", ",", "\n", "num_classes", "=", "embedding_size", ",", "\n", ")", "\n", "", "elif", "backbone_name", "==", "'iresnet18'", ":", "\n", "        ", "features", "=", "iresnet", ".", "iresnet18", "(", "\n", "pretrained", "=", "False", ",", "\n", "num_classes", "=", "embedding_size", ",", "\n", ")", "\n", "", "elif", "backbone_name", "==", "'iresnet50'", ":", "\n", "        ", "features", "=", "iresnet", ".", "iresnet50", "(", "\n", "pretrained", "=", "False", ",", "\n", "num_classes", "=", "embedding_size", ",", "\n", ")", "\n", "", "elif", "backbone_name", "==", "'iresnet100'", ":", "\n", "        ", "features", "=", "iresnet", ".", "iresnet100", "(", "\n", "pretrained", "=", "False", ",", "\n", "num_classes", "=", "embedding_size", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.mag_network_inf.load_dict_inf": [[49, 66], ["os.path.isfile", "print", "mag_network_inf.clean_dict_inf", "model.state_dict", "model.state_dict.update", "model.load_state_dict", "sys.exit", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.mag_network_inf.clean_dict_inf", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.utils.utils_logging.AverageMeter.update"], ["", "", "def", "load_dict_inf", "(", "checkpoint_path", ",", "model", ",", "cpu_mode", "=", "False", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "checkpoint_path", ")", ":", "\n", "        ", "print", "(", "'=> loading pth from {} ...'", ".", "format", "(", "checkpoint_path", ")", ")", "\n", "if", "cpu_mode", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "", "_state_dict", "=", "clean_dict_inf", "(", "model", ",", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "model_dict", ".", "update", "(", "_state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "# delete to release more space", "\n", "del", "checkpoint", "\n", "del", "_state_dict", "\n", "", "else", ":", "\n", "        ", "sys", ".", "exit", "(", "\"=> No checkpoint found at '{}'\"", ".", "format", "(", "checkpoint_path", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.mag_network_inf.clean_dict_inf": [[68, 87], ["collections.OrderedDict", "state_dict.items", "len", "len", "model.state_dict().keys", "collections.OrderedDict.keys", "sys.exit", "model.state_dict().keys", "v.size", "[].size", "k.split", "model.state_dict().keys", "v.size", "[].size", "model.state_dict", "k.split", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict"], "function", ["None"], ["", "def", "clean_dict_inf", "(", "model", ",", "state_dict", ")", ":", "\n", "    ", "_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "# # assert k[0:1] == 'features.module.'", "\n", "        ", "new_k", "=", "'features.'", "+", "'.'", ".", "join", "(", "k", ".", "split", "(", "'.'", ")", "[", "2", ":", "]", ")", "\n", "if", "new_k", "in", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "and", "v", ".", "size", "(", ")", "==", "model", ".", "state_dict", "(", ")", "[", "new_k", "]", ".", "size", "(", ")", ":", "\n", "            ", "_state_dict", "[", "new_k", "]", "=", "v", "\n", "# assert k[0:1] == 'module.features.'", "\n", "", "new_kk", "=", "'.'", ".", "join", "(", "k", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", ")", "\n", "if", "new_kk", "in", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", "and", "v", ".", "size", "(", ")", "==", "model", ".", "state_dict", "(", ")", "[", "new_kk", "]", ".", "size", "(", ")", ":", "\n", "            ", "_state_dict", "[", "new_kk", "]", "=", "v", "\n", "", "", "num_model", "=", "len", "(", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "num_ckpt", "=", "len", "(", "_state_dict", ".", "keys", "(", ")", ")", "\n", "if", "num_model", "!=", "num_ckpt", ":", "\n", "        ", "sys", ".", "exit", "(", "\"=> Not all weights loaded, model params: {}, loaded params: {}\"", ".", "format", "(", "\n", "num_model", ",", "num_ckpt", ")", ")", "\n", "", "return", "_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.mag_network_inf.builder_inf": [[89, 94], ["mag_network_inf.NetworkBuilder_inf", "mag_network_inf.load_dict_inf"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.mag_network_inf.load_dict_inf"], ["", "def", "builder_inf", "(", "checkpoint_path", ",", "backbone", ",", "embedding_size", ")", ":", "\n", "    ", "model", "=", "NetworkBuilder_inf", "(", "backbone", ",", "embedding_size", ")", "\n", "# Used to run inference", "\n", "model", "=", "load_dict_inf", "(", "checkpoint_path", ",", "model", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IBasicBlock.__init__": [[47, 65], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "iresnet.conv3x3", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "iresnet.conv3x3", "torch.nn.BatchNorm2d", "ValueError", "NotImplementedError", "iresnet.SEModule"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.conv3x3", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.conv3x3"], ["        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "prelu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "identity", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "IResNet", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "fc_scale", "=", "7", "*", "7", "\n", "def", "__init__", "(", "self", ",", "\n", "block", ",", "layers", ",", "dropout", "=", "0", ",", "num_features", "=", "512", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "fp16", "=", "False", ")", ":", "\n", "        ", "super", "(", "IResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IBasicBlock.forward": [[66, 80], ["iresnet.IBasicBlock.bn1", "iresnet.IBasicBlock.conv1", "iresnet.IBasicBlock.bn2", "iresnet.IBasicBlock.prelu", "iresnet.IBasicBlock.conv2", "iresnet.IBasicBlock.bn3", "iresnet.IBasicBlock.se_block", "iresnet.IBasicBlock.downsample"], "methods", ["None"], ["self", ".", "fp16", "=", "fp16", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ",", "eps", "=", "1e-05", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IResNet.__init__": [[84, 136], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "iresnet.IResNet._make_layer", "iresnet.IResNet._make_layer", "iresnet.IResNet._make_layer", "iresnet.IResNet._make_layer", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "iresnet.IResNet.modules", "len", "ValueError", "isinstance", "iresnet.IResNet.modules", "torch.nn.init.normal_", "isinstance", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer"], ["dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "256", ",", "\n", "layers", "[", "2", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "512", ",", "\n", "layers", "[", "3", "]", ",", "\n", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "512", "*", "block", ".", "expansion", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ",", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", "*", "self", ".", "fc_scale", ",", "num_features", ")", "\n", "self", ".", "features", "=", "nn", ".", "BatchNorm1d", "(", "num_features", ",", "eps", "=", "1e-05", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "features", ".", "weight", ",", "1.0", ")", "\n", "self", ".", "features", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.1", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "IBasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n", "", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "eps", "=", "1e-05", ",", ")", ",", "\n", ")", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "dilation", "=", "self", ".", "dilation", ")", ")", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IResNet._make_layer": [[137, 162], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "iresnet.conv1x1", "torch.nn.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.conv1x1"], ["\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "self", ".", "fp16", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "prelu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ".", "float", "(", ")", "if", "self", ".", "fp16", "else", "x", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "def", "_iresnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "IResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "ValueError", "(", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IResNet.forward": [[163, 180], ["iresnet.IResNet.fc", "iresnet.IResNet.features", "iresnet.IResNet.qs", "torch.cuda.amp.autocast", "iresnet.IResNet.conv1", "iresnet.IResNet.bn1", "iresnet.IResNet.prelu", "iresnet.IResNet.layer1", "iresnet.IResNet.layer2", "iresnet.IResNet.layer3", "iresnet.IResNet.layer4", "iresnet.IResNet.bn2", "torch.flatten", "iresnet.IResNet.dropout", "iresnet.IResNet.float"], "methods", ["None"], ["\n", "", "def", "iresnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet18'", ",", "IBasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "\n", "progress", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "def", "iresnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet34'", ",", "IBasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "\n", "progress", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "def", "iresnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet50'", ",", "IBasicBlock", ",", "[", "3", ",", "4", ",", "14", ",", "3", "]", ",", "pretrained", ",", "\n", "progress", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "def", "iresnet100", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "_iresnet", "(", "'iresnet100'", ",", "IBasicBlock", ",", "[", "3", ",", "13", ",", "30", ",", "3", "]", ",", "pretrained", ",", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.conv3x3": [[7, 17], ["torch.nn.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.conv1x1": [[19, 26], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet._iresnet": [[291, 296], ["iresnet.IResNet", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet18": [[306, 309], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet._iresnet"], []], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet34": [[311, 314], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet._iresnet"], []], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet50": [[316, 319], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet._iresnet"], []], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet100": [[324, 327], ["iresnet._iresnet"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet._iresnet"], []], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet._test": [[327, 340], ["model", "print"], "function", ["None"], []], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.Flatten.forward": [[104, 106], ["x.view", "x.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.ConvBlock.__init__": [[166, 201], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.ReLU", "isinstance", "torch.nn.ZeroPad2d", "torch.nn.BatchNorm2d", "backbones.activation.get_activation_layer", "len"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.activation.get_activation_layer"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activate", "=", "(", "activation", "is", "not", "None", ")", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "self", ".", "use_pad", "=", "(", "isinstance", "(", "padding", ",", "(", "list", ",", "tuple", ")", ")", "and", "(", "len", "(", "padding", ")", "==", "4", ")", ")", "\n", "\n", "if", "self", ".", "use_pad", ":", "\n", "            ", "self", ".", "pad", "=", "nn", ".", "ZeroPad2d", "(", "padding", "=", "padding", ")", "\n", "padding", "=", "0", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "\n", "num_features", "=", "out_channels", ",", "\n", "eps", "=", "bn_eps", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "self", ".", "activ", "=", "get_activation_layer", "(", "activation", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.ConvBlock.forward": [[202, 211], ["utils.ConvBlock.conv", "utils.ConvBlock.pad", "utils.ConvBlock.bn", "utils.ConvBlock.activ"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_pad", ":", "\n", "            ", "x", "=", "self", ".", "pad", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "activate", ":", "\n", "            ", "x", "=", "self", ".", "activ", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.DwsConvBlock.__init__": [[336, 368], ["torch.nn.Module.__init__", "utils.dwconv_block", "utils.conv1x1_block", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.dwconv_block", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.conv1x1_block"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "dw_use_bn", "=", "True", ",", "\n", "pw_use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "dw_activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "pw_activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "        ", "super", "(", "DwsConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dw_conv", "=", "dwconv_block", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "in_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "dw_use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "dw_activation", ")", "\n", "self", ".", "pw_conv", "=", "conv1x1_block", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "pw_use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "pw_activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.DwsConvBlock.forward": [[369, 375], ["utils.DwsConvBlock.dw_conv", "utils.DwsConvBlock.pw_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "dw_conv", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "pw_conv", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.round_channels": [[9, 30], ["max", "float", "int"], "function", ["None"], ["def", "round_channels", "(", "channels", ",", "\n", "divisor", "=", "8", ")", ":", "\n", "    ", "\"\"\"\n    Round weighted channel number (make divisible operation).\n\n    Parameters:\n    ----------\n    channels : int or float\n        Original number of channels.\n    divisor : int, default 8\n        Alignment value.\n\n    Returns:\n    -------\n    int\n        Weighted number of channels.\n    \"\"\"", "\n", "rounded_channels", "=", "max", "(", "int", "(", "channels", "+", "divisor", "/", "2.0", ")", "//", "divisor", "*", "divisor", ",", "divisor", ")", "\n", "if", "float", "(", "rounded_channels", ")", "<", "0.9", "*", "channels", ":", "\n", "        ", "rounded_channels", "+=", "divisor", "\n", "", "return", "rounded_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.conv1x1": [[31, 59], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "groups", "=", "1", ",", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Convolution 1x1 layer.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "groups", "=", "groups", ",", "dilation", "=", "dilation", ",", "\n", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.conv3x3": [[63, 99], ["torch.nn.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Convolution 3x3 layer.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int or tuple/list of 2 int, default 1\n        Padding value for convolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for convolution layer.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ")", "\n", "", "class", "Flatten", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.depthwise_conv3x3": [[107, 137], ["torch.nn.Conv2d"], "function", ["None"], ["", "", "def", "depthwise_conv3x3", "(", "channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Depthwise convolution 3x3 layer.\n\n    Parameters:\n    ----------\n    channels : int\n        Number of input/output channels.\n    strides : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int or tuple/list of 2 int, default 1\n        Padding value for convolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for convolution layer.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "channels", ",", "\n", "out_channels", "=", "channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "channels", ",", "\n", "bias", "=", "bias", ")", "\n", "", "class", "ConvBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.conv1x1_block": [[212, 256], ["utils.ConvBlock", "torch.nn.ReLU"], "function", ["None"], ["", "", "def", "conv1x1_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    1x1 version of the standard convolution block.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int, or tuple/list of 2 int, or tuple/list of 4 int, default 0\n        Padding value for convolution layer.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    use_bn : bool, default True\n        Whether to use BatchNorm layer.\n    bn_eps : float, default 1e-5\n        Small float added to variance in Batch norm.\n    activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function or name of activation function.\n    \"\"\"", "\n", "return", "ConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.conv3x3_block": [[257, 305], ["utils.ConvBlock", "torch.nn.ReLU"], "function", ["None"], ["", "def", "conv3x3_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    3x3 version of the standard convolution block.\n\n    Parameters:\n    ----------\n    in_channels : int\n        Number of input channels.\n    out_channels : int\n        Number of output channels.\n    stride : int or tuple/list of 2 int, default 1\n        Strides of the convolution.\n    padding : int, or tuple/list of 2 int, or tuple/list of 4 int, default 1\n        Padding value for convolution layer.\n    dilation : int or tuple/list of 2 int, default 1\n        Dilation value for convolution layer.\n    groups : int, default 1\n        Number of groups.\n    bias : bool, default False\n        Whether the layer uses a bias vector.\n    use_bn : bool, default True\n        Whether to use BatchNorm layer.\n    bn_eps : float, default 1e-5\n        Small float added to variance in Batch norm.\n    activation : function or str or None, default nn.ReLU(inplace=True)\n        Activation function or name of activation function.\n    \"\"\"", "\n", "return", "ConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "activation", ")", "\n", "", "class", "DwsConvBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.dwconv_block": [[377, 402], ["utils.ConvBlock", "torch.nn.ReLU"], "function", ["None"], ["", "", "def", "dwconv_block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "use_bn", "=", "True", ",", "\n", "bn_eps", "=", "1e-5", ",", "\n", "activation", "=", "(", "lambda", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ")", ":", "\n", "    ", "\"\"\"\n    Depthwise convolution block.\n    \"\"\"", "\n", "return", "ConvBlock", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "out_channels", ",", "\n", "bias", "=", "bias", ",", "\n", "use_bn", "=", "use_bn", ",", "\n", "bn_eps", "=", "bn_eps", ",", "\n", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.channel_shuffle2": [[403, 430], ["x.view.size", "x.view.view", "torch.transpose().contiguous", "x.view.view", "torch.transpose"], "function", ["None"], ["", "def", "channel_shuffle2", "(", "x", ",", "\n", "groups", ")", ":", "\n", "    ", "\"\"\"\n    Channel shuffle operation from 'ShuffleNet: An Extremely Efficient Convolutional Neural Network for Mobile Devices,'\n    https://arxiv.org/abs/1707.01083. The alternative version.\n\n    Parameters:\n    ----------\n    x : Tensor\n        Input tensor.\n    groups : int\n        Number of groups.\n\n    Returns:\n    -------\n    Tensor\n        Resulted tensor.\n    \"\"\"", "\n", "batch", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "assert", "(", "channels", "%", "groups", "==", "0", ")", "\n", "channels_per_group", "=", "channels", "//", "groups", "\n", "\n", "x", "=", "x", ".", "view", "(", "batch", ",", "channels_per_group", ",", "groups", ",", "height", ",", "width", ")", "\n", "x", "=", "torch", ".", "transpose", "(", "x", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "batch", ",", "channels", ",", "height", ",", "width", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils._calc_width": [[431, 438], ["filter", "net.parameters", "numpy.prod", "param.size"], "function", ["None"], ["", "def", "_calc_width", "(", "net", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "net_params", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", "\n", "weight_count", "=", "0", "\n", "for", "param", "in", "net_params", ":", "\n", "        ", "weight_count", "+=", "np", ".", "prod", "(", "param", ".", "size", "(", ")", ")", "\n", "", "return", "weight_count", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.flops_to_string": [[439, 448], ["str", "round", "str", "str", "round", "str", "round"], "function", ["None"], ["", "def", "flops_to_string", "(", "flops", ",", "units", "=", "'GFLOPS'", ",", "precision", "=", "4", ")", ":", "\n", "    ", "if", "units", "==", "'GFLOPS'", ":", "\n", "        ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "9", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'MFLOPS'", ":", "\n", "        ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "6", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "elif", "units", "==", "'KFLOPS'", ":", "\n", "        ", "return", "str", "(", "round", "(", "flops", "/", "10.", "**", "3", ",", "precision", ")", ")", "+", "' '", "+", "units", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "flops", ")", "+", "' FLOPS'", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.count_model_flops": [[452, 541], ["model.eval", "utils.count_model_flops.foo"], "function", ["None"], ["", "", "def", "count_model_flops", "(", "model", ",", "input_res", "=", "[", "112", ",", "112", "]", ",", "multiply_adds", "=", "True", ")", ":", "\n", "    ", "list_conv", "=", "[", "]", "\n", "\n", "def", "conv_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "[", "0", "]", "*", "self", ".", "kernel_size", "[", "1", "]", "*", "(", "self", ".", "in_channels", "/", "self", ".", "groups", ")", "\n", "bias_ops", "=", "1", "if", "self", ".", "bias", "is", "not", "None", "else", "0", "\n", "\n", "params", "=", "output_channels", "*", "(", "kernel_ops", "+", "bias_ops", ")", "\n", "flops", "=", "(", "kernel_ops", "*", "(", "\n", "2", "if", "multiply_adds", "else", "1", ")", "+", "bias_ops", ")", "*", "output_channels", "*", "output_height", "*", "output_width", "*", "batch_size", "\n", "\n", "list_conv", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_linear", "=", "[", "]", "\n", "\n", "def", "linear_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", "=", "input", "[", "0", "]", ".", "size", "(", "0", ")", "if", "input", "[", "0", "]", ".", "dim", "(", ")", "==", "2", "else", "1", "\n", "\n", "weight_ops", "=", "self", ".", "weight", ".", "nelement", "(", ")", "*", "(", "2", "if", "multiply_adds", "else", "1", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "bias_ops", "=", "self", ".", "bias", ".", "nelement", "(", ")", "if", "self", ".", "bias", ".", "nelement", "(", ")", "else", "0", "\n", "flops", "=", "batch_size", "*", "(", "weight_ops", "+", "bias_ops", ")", "\n", "", "else", ":", "\n", "            ", "flops", "=", "batch_size", "*", "weight_ops", "\n", "", "list_linear", ".", "append", "(", "flops", ")", "\n", "\n", "", "list_bn", "=", "[", "]", "\n", "\n", "def", "bn_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_bn", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", "*", "2", ")", "\n", "\n", "", "list_relu", "=", "[", "]", "\n", "\n", "def", "relu_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "list_relu", ".", "append", "(", "input", "[", "0", "]", ".", "nelement", "(", ")", ")", "\n", "\n", "", "list_pooling", "=", "[", "]", "\n", "\n", "def", "pooling_hook", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "output_channels", ",", "output_height", ",", "output_width", "=", "output", "[", "0", "]", ".", "size", "(", ")", "\n", "\n", "kernel_ops", "=", "self", ".", "kernel_size", "*", "self", ".", "kernel_size", "\n", "bias_ops", "=", "0", "\n", "params", "=", "0", "\n", "flops", "=", "(", "kernel_ops", "+", "bias_ops", ")", "*", "output_channels", "*", "output_height", "*", "output_width", "*", "batch_size", "\n", "\n", "list_pooling", ".", "append", "(", "flops", ")", "\n", "", "def", "pooling_hook_ad", "(", "self", ",", "input", ",", "output", ")", ":", "\n", "        ", "batch_size", ",", "input_channels", ",", "input_height", ",", "input_width", "=", "input", "[", "0", "]", ".", "size", "(", ")", "\n", "input", "=", "input", "[", "0", "]", "\n", "flops", "=", "int", "(", "np", ".", "prod", "(", "input", ".", "shape", ")", ")", "\n", "list_pooling", ".", "append", "(", "flops", ")", "\n", "\n", "", "handles", "=", "[", "]", "\n", "\n", "def", "foo", "(", "net", ")", ":", "\n", "        ", "childrens", "=", "list", "(", "net", ".", "children", "(", ")", ")", "\n", "if", "not", "childrens", ":", "\n", "            ", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "handles", ".", "append", "(", "net", ".", "register_forward_hook", "(", "conv_hook", ")", ")", "\n", "", "elif", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "                ", "handles", ".", "append", "(", "net", ".", "register_forward_hook", "(", "linear_hook", ")", ")", "\n", "", "elif", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "handles", ".", "append", "(", "net", ".", "register_forward_hook", "(", "bn_hook", ")", ")", "\n", "", "elif", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "ReLU", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "PReLU", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "Sigmoid", ")", "or", "isinstance", "(", "net", ",", "HSwish", ")", "or", "isinstance", "(", "net", ",", "Swish", ")", ":", "\n", "                ", "handles", ".", "append", "(", "net", ".", "register_forward_hook", "(", "relu_hook", ")", ")", "\n", "", "elif", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", "or", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", ":", "\n", "                ", "handles", ".", "append", "(", "net", ".", "register_forward_hook", "(", "pooling_hook", ")", ")", "\n", "", "elif", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "AdaptiveAvgPool2d", ")", ":", "\n", "                ", "handles", ".", "append", "(", "net", ".", "register_forward_hook", "(", "pooling_hook_ad", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"warning\"", "+", "str", "(", "net", ")", ")", "\n", "", "return", "\n", "", "for", "c", "in", "childrens", ":", "\n", "            ", "foo", "(", "c", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "foo", "(", "model", ")", "\n", "input", "=", "Variable", "(", "torch", ".", "rand", "(", "3", ",", "input_res", "[", "1", "]", ",", "input_res", "[", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "True", ")", "\n", "out", "=", "model", "(", "input", ")", "\n", "total_flops", "=", "(", "sum", "(", "list_conv", ")", "+", "sum", "(", "list_linear", ")", "+", "sum", "(", "list_bn", ")", "+", "sum", "(", "list_relu", ")", "+", "sum", "(", "list_pooling", ")", ")", "\n", "for", "h", "in", "handles", ":", "\n", "        ", "h", ".", "remove", "(", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "return", "flops_to_string", "(", "total_flops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.SEModule.__init__": [[27, 34], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["\n", "", "class", "IBasicBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "base_width", "=", "64", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "super", "(", "IBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.SEModule.forward": [[35, 44], ["iresnet.SEModule.avg_pool", "iresnet.SEModule.fc1", "iresnet.SEModule.relu", "iresnet.SEModule.fc2", "iresnet.SEModule.sigmoid"], "methods", ["None"], ["", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "prelu", "=", "nn", ".", "PReLU", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "eps", "=", "1e-05", ",", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet.__init__": [[184, 237], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.PReLU", "iresnet.IdentityIResNet._make_layer", "iresnet.IdentityIResNet._make_layer", "iresnet.IdentityIResNet._make_layer", "iresnet.IdentityIResNet._make_layer", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.init.constant_", "iresnet.IdentityIResNet.modules", "len", "ValueError", "isinstance", "iresnet.IdentityIResNet.modules", "torch.nn.init.normal_", "isinstance", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer"], ["\n", "pretrained", "=", "False", "\n", "\n", "models", "=", "[", "\n", "iresnet100", "\n", "]", "\n", "\n", "for", "model", "in", "models", ":", "\n", "\n", "        ", "net", "=", "model", "(", ")", "\n", "print", "(", "net", ")", "\n", "# net.train()", "\n", "weight_count", "=", "_calc_width", "(", "net", ")", "\n", "flops", "=", "count_model_flops", "(", "net", ")", "\n", "print", "(", "\"m={}, {}\"", ".", "format", "(", "model", ".", "__name__", ",", "weight_count", ")", ")", "\n", "print", "(", "\"m={}, {}\"", ".", "format", "(", "model", ".", "__name__", ",", "flops", ")", ")", "\n", "\n", "#assert (model != mixnet_s or weight_count == 4134606)", "\n", "#assert (model != mixnet_m or weight_count == 5014382)", "\n", "#assert (model != mixnet_l or weight_count == 7329252)", "\n", "net", ".", "eval", "(", ")", "\n", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "112", ",", "112", ")", "\n", "\n", "y", "=", "net", "(", "x", ")", "\n", "y", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "assert", "(", "tuple", "(", "y", ".", "size", "(", ")", ")", "==", "(", "1", ",", "512", ")", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "_test", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet._make_layer": [[238, 263], ["layers.append", "range", "torch.nn.Sequential", "torch.nn.Sequential", "block", "layers.append", "iresnet.conv1x1", "torch.nn.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.utils.conv1x1"], []], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.IdentityIResNet.forward": [[264, 280], ["iresnet.IdentityIResNet.fc", "iresnet.IdentityIResNet.features", "torch.cuda.amp.autocast", "iresnet.IdentityIResNet.conv1", "iresnet.IdentityIResNet.bn1", "iresnet.IdentityIResNet.prelu", "iresnet.IdentityIResNet.layer1", "iresnet.IdentityIResNet.layer2", "iresnet.IdentityIResNet.layer3", "iresnet.IdentityIResNet.layer4", "iresnet.IdentityIResNet.bn2", "torch.flatten", "iresnet.IdentityIResNet.dropout", "iresnet.IdentityIResNet.float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.OnTopQS.__init__": [[282, 286], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], []], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.OnTopQS.forward": [[287, 289], ["iresnet.OnTopQS.qs"], "methods", ["None"], []], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet._iresne_identity": [[297, 302], ["iresnet.IdentityIResNet", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet50_identity": [[320, 323], ["iresnet._iresne_identity"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet._iresne_identity"], []], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.load_quality": [[47, 56], ["open", "f.readlines", "[].strip", "[].strip", "l.split", "l.split"], "function", ["None"], ["def", "load_quality", "(", "scores", ")", ":", "\n", "    ", "quality", "=", "{", "}", "\n", "with", "open", "(", "scores", "[", "0", "]", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "l", "in", "lines", ":", "\n", "            ", "scores", "=", "l", ".", "split", "(", ")", "[", "1", "]", ".", "strip", "(", ")", "\n", "n", "=", "l", ".", "split", "(", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "quality", "[", "n", "]", "=", "scores", "\n", "", "", "return", "quality", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.load_quality_pair": [[57, 69], ["erc.load_quality", "open", "f.readlines", "range", "len", "min", "pairs_quality.append", "lines[].rstrip().split", "lines[].rstrip().split", "float", "float", "load_quality.get", "load_quality.get", "lines[].rstrip", "lines[].rstrip", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.load_quality", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.get", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.get"], ["", "def", "load_quality_pair", "(", "pair_path", ",", "scores", ",", "dataset", ",", "args", ")", ":", "\n", "    ", "pairs_quality", "=", "[", "]", "\n", "quality", "=", "load_quality", "(", "scores", ")", "\n", "with", "open", "(", "pair_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "idex", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "            ", "a", "=", "lines", "[", "idex", "]", ".", "rstrip", "(", ")", ".", "split", "(", ")", "[", "0", "]", "\n", "b", "=", "lines", "[", "idex", "]", ".", "rstrip", "(", ")", ".", "split", "(", ")", "[", "1", "]", "\n", "qlt", "=", "min", "(", "float", "(", "quality", ".", "get", "(", "os", ".", "path", ".", "join", "(", "args", ".", "quality_score_dir", ",", "dataset", ",", "'images'", ",", "f\"{a}{IMAGE_EXTENSION}\"", ")", ")", ")", ",", "\n", "float", "(", "quality", ".", "get", "(", "os", ".", "path", ".", "join", "(", "args", ".", "quality_score_dir", ",", "dataset", ",", "'images'", ",", "f\"{b}{IMAGE_EXTENSION}\"", ")", ")", ")", ")", "\n", "pairs_quality", ".", "append", "(", "qlt", ")", "\n", "", "", "return", "pairs_quality", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.load_feat_pair": [[70, 83], ["print", "open", "f.readlines", "range", "len", "int", "numpy.load", "numpy.load", "lines[].rstrip().split", "lines[].rstrip().split", "os.path.join", "os.path.join", "lines[].rstrip().split", "lines[].rstrip", "lines[].rstrip", "lines[].rstrip"], "function", ["None"], ["", "def", "load_feat_pair", "(", "pair_path", ",", "root", ")", ":", "\n", "    ", "pairs", "=", "{", "}", "\n", "with", "open", "(", "pair_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "idex", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "            ", "a", "=", "lines", "[", "idex", "]", ".", "rstrip", "(", ")", ".", "split", "(", ")", "[", "0", "]", "\n", "b", "=", "lines", "[", "idex", "]", ".", "rstrip", "(", ")", ".", "split", "(", ")", "[", "1", "]", "\n", "is_same", "=", "int", "(", "lines", "[", "idex", "]", ".", "rstrip", "(", ")", ".", "split", "(", ")", "[", "2", "]", ")", "\n", "feat_a", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "f\"{a}.npy\"", ")", ")", "\n", "feat_b", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "f\"{b}.npy\"", ")", ")", "\n", "pairs", "[", "idex", "]", "=", "[", "feat_a", ",", "feat_b", ",", "is_same", "]", "\n", "", "", "print", "(", "\"All features are loaded\"", ")", "\n", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.distance_": [[84, 99], ["numpy.sum", "numpy.clip", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "numpy.subtract", "numpy.sum", "numpy.multiply", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.arccos", "numpy.square"], "function", ["None"], ["", "def", "distance_", "(", "embeddings0", ",", "embeddings1", ",", "dist", "=", "\"cosine\"", ")", ":", "\n", "# Distance based on cosine similarity", "\n", "    ", "if", "(", "dist", "==", "\"cosine\"", ")", ":", "\n", "        ", "dot", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "embeddings0", ",", "embeddings1", ")", ",", "axis", "=", "1", ")", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "embeddings0", ",", "axis", "=", "1", ")", "*", "np", ".", "linalg", ".", "norm", "(", "embeddings1", ",", "axis", "=", "1", ")", "\n", "# shaving", "\n", "similarity", "=", "np", ".", "clip", "(", "dot", "/", "norm", ",", "-", "1.", ",", "1.", ")", "\n", "dist", "=", "np", ".", "arccos", "(", "similarity", ")", "/", "math", ".", "pi", "\n", "", "else", ":", "\n", "        ", "embeddings0", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings0", ")", "\n", "embeddings1", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "embeddings1", ")", "\n", "diff", "=", "np", ".", "subtract", "(", "embeddings0", ",", "embeddings1", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "diff", ")", ",", "1", ")", "\n", "\n", "", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.calc_score": [[100, 114], ["erc.distance_", "numpy.sort", "numpy.sort", "numpy.mean", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.distance_"], ["", "def", "calc_score", "(", "embeddings0", ",", "embeddings1", ",", "actual_issame", ",", "subtract_mean", "=", "False", ",", "dist_type", "=", "'cosine'", ")", ":", "\n", "    ", "assert", "(", "embeddings0", ".", "shape", "[", "0", "]", "==", "embeddings1", ".", "shape", "[", "0", "]", ")", "\n", "assert", "(", "embeddings0", ".", "shape", "[", "1", "]", "==", "embeddings1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "if", "subtract_mean", ":", "\n", "        ", "mean", "=", "np", ".", "mean", "(", "np", ".", "concatenate", "(", "[", "embeddings0", ",", "embeddings1", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "mean", "=", "0.", "\n", "\n", "", "dist", "=", "distance_", "(", "embeddings0", ",", "embeddings1", ",", "dist", "=", "dist_type", ")", "\n", "# sort in a desending order", "\n", "pos_scores", "=", "np", ".", "sort", "(", "dist", "[", "actual_issame", "==", "1", "]", ")", "\n", "neg_scores", "=", "np", ".", "sort", "(", "dist", "[", "actual_issame", "==", "0", "]", ")", "\n", "return", "pos_scores", ",", "neg_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.save_pdf": [[115, 147], ["matplotlib.subplots", "range", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.xlim", "matplotlib.xticks", "matplotlib.title", "matplotlib.ylabel", "ax1.get_position", "fig.legend", "matplotlib.tight_layout", "matplotlib.savefig", "numpy.arange", "os.path.isdir", "os.makedirs", "len", "print", "matplotlib.plot", "sklearn.metrics.auc", "numpy.arange", "os.path.join", "numpy.array", "numpy.array", "open", "f.write", "matplotlib.font_manager.FontProperties", "os.path.join", "len", "str", "str", "len", "str"], "function", ["None"], ["", "def", "save_pdf", "(", "fnmrs_lists", ",", "method_labels", ",", "model", ",", "output_dir", ",", "fmr", ",", "db", ")", ":", "\n", "    ", "fontsize", "=", "20", "\n", "colors", "=", "[", "'green'", ",", "'black'", ",", "'orange'", ",", "'plum'", ",", "'cyan'", ",", "'gold'", ",", "'gray'", ",", "'salmon'", ",", "'deepskyblue'", ",", "'red'", ",", "'blue'", ",", "\n", "'darkseagreen'", ",", "'seashell'", ",", "'hotpink'", ",", "'indigo'", ",", "'lightseagreen'", ",", "'khaki'", ",", "'brown'", ",", "'teal'", ",", "'darkcyan'", "]", "\n", "STYLES", "=", "[", "'--'", ",", "'-.'", ",", "':'", ",", "'v--'", ",", "'^--'", ",", "',--'", ",", "'<--'", ",", "'>--'", ",", "'1--'", ",", "\n", "'-'", ",", "'-'", ",", "'2--'", ",", "'3--'", ",", "'4--'", ",", "'.--'", ",", "'p--'", ",", "'*--'", ",", "'h--'", ",", "'H--'", ",", "'+--'", ",", "'x--'", ",", "'d--'", ",", "'|--'", ",", "'---'", "]", "\n", "unconsidered_rates", "=", "100", "*", "np", ".", "arange", "(", "0", ",", "0.98", ",", "0.05", ")", "\n", "\n", "fig", ",", "ax1", "=", "plt", ".", "subplots", "(", ")", "# added", "\n", "if", "(", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "fnmrs_lists", ")", ")", ":", "\n", "        ", "print", "(", "fnmrs_lists", "[", "i", "]", ")", "\n", "plt", ".", "plot", "(", "unconsidered_rates", "[", ":", "len", "(", "fnmrs_lists", "[", "i", "]", ")", "]", ",", "fnmrs_lists", "[", "i", "]", ",", "STYLES", "[", "i", "]", ",", "color", "=", "colors", "[", "i", "]", ",", "\n", "label", "=", "method_labels", "[", "i", "]", ")", "\n", "auc_value", "=", "metrics", ".", "auc", "(", "np", ".", "array", "(", "unconsidered_rates", "[", ":", "len", "(", "fnmrs_lists", "[", "i", "]", ")", "]", "/", "100", ")", ",", "np", ".", "array", "(", "fnmrs_lists", "[", "i", "]", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "db", ",", "str", "(", "fmr", ")", "+", "\"_auc.txt\"", ")", ",", "\"a\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "db", "+", "':'", "+", "model", "+", "':'", "+", "method_labels", "[", "i", "]", "+", "':'", "+", "str", "(", "auc_value", ")", "+", "'\\n'", ")", "\n", "", "", "plt", ".", "xlabel", "(", "'Ratio of unconsidered image [%]'", ")", "\n", "\n", "plt", ".", "xlabel", "(", "'Ratio of unconsidered image [%]'", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "xlim", "(", "[", "0", ",", "98", "]", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "98", ",", "10", ")", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "title", "(", "f\"Testing on {db}, FMR={fmr}\"", "+", "f\" ({model})\"", ",", "fontsize", "=", "fontsize", ")", "# update : -3", "\n", "plt", ".", "ylabel", "(", "'FNMR'", ",", "fontsize", "=", "fontsize", ")", "\n", "\n", "axbox", "=", "ax1", ".", "get_position", "(", ")", "\n", "fig", ".", "legend", "(", "bbox_to_anchor", "=", "(", "axbox", ".", "x0", "+", "0.5", "*", "axbox", ".", "width", ",", "axbox", ".", "y0", "-", "0.22", ")", ",", "prop", "=", "FontProperties", "(", "size", "=", "12", ")", ",", "\n", "loc", "=", "'lower center'", ",", "ncol", "=", "6", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "db", ",", "db", "+", "'_'", "+", "str", "(", "fmr", ")", "+", "'_'", "+", "model", "+", "'.png'", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.getFNMRFixedTH": [[148, 192], ["feat_pairs.items", "numpy.vstack", "numpy.vstack", "numpy.vstack().reshape", "numpy.array", "len", "numpy.arange", "int", "numpy.asarray", "numpy.asarray", "np.vstack.append", "np.vstack.append", "np.vstack().reshape.append", "numpy.argsort", "erc.calc_score", "ERC.roc.get_eer_threshold", "fnmrs_list_2.append", "fnmrs_list_3.append", "fnmrs_list_4.append", "numpy.vstack", "numpy.argsort", "int", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.calc_score", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.roc.get_eer_threshold"], ["", "def", "getFNMRFixedTH", "(", "feat_pairs", ",", "qlts", ",", "dist_type", "=", "'cosine'", ",", "desc", "=", "True", ")", ":", "\n", "    ", "embeddings0", ",", "embeddings1", ",", "targets", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "pair_qlt_list", "=", "[", "]", "# store the min qlt", "\n", "for", "k", ",", "v", "in", "feat_pairs", ".", "items", "(", ")", ":", "\n", "        ", "feat_a", "=", "v", "[", "0", "]", "\n", "feat_b", "=", "v", "[", "1", "]", "\n", "ab_is_same", "=", "int", "(", "v", "[", "2", "]", ")", "\n", "# convert into np", "\n", "np_feat_a", "=", "np", ".", "asarray", "(", "feat_a", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "np_feat_b", "=", "np", ".", "asarray", "(", "feat_b", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "# append", "\n", "embeddings0", ".", "append", "(", "np_feat_a", ")", "\n", "embeddings1", ".", "append", "(", "np_feat_b", ")", "\n", "targets", ".", "append", "(", "ab_is_same", ")", "\n", "\n", "# evaluate", "\n", "", "embeddings0", "=", "np", ".", "vstack", "(", "embeddings0", ")", "\n", "embeddings1", "=", "np", ".", "vstack", "(", "embeddings1", ")", "\n", "targets", "=", "np", ".", "vstack", "(", "targets", ")", ".", "reshape", "(", "-", "1", ",", ")", "\n", "qlts", "=", "np", ".", "array", "(", "qlts", ")", "\n", "if", "(", "desc", ")", ":", "\n", "        ", "qlts_sorted_idx", "=", "np", ".", "argsort", "(", "qlts", ")", "\n", "", "else", ":", "\n", "        ", "qlts_sorted_idx", "=", "np", ".", "argsort", "(", "qlts", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "", "num_pairs", "=", "len", "(", "targets", ")", "\n", "unconsidered_rates", "=", "np", ".", "arange", "(", "0", ",", "0.98", ",", "0.05", ")", "\n", "\n", "fnmrs_list_2", "=", "[", "]", "\n", "fnmrs_list_3", "=", "[", "]", "\n", "fnmrs_list_4", "=", "[", "]", "\n", "for", "u_rate", "in", "unconsidered_rates", ":", "\n", "        ", "hq_pairs_idx", "=", "qlts_sorted_idx", "[", "int", "(", "u_rate", "*", "num_pairs", ")", ":", "]", "\n", "pos_dists", ",", "neg_dists", "=", "calc_score", "(", "embeddings0", "[", "hq_pairs_idx", "]", ",", "embeddings1", "[", "hq_pairs_idx", "]", ",", "targets", "[", "hq_pairs_idx", "]", ",", "dist_type", "=", "dist_type", ")", "\n", "fmr100_th", ",", "fmr1000_th", ",", "fmr10000_th", "=", "get_eer_threshold", "(", "pos_dists", ",", "neg_dists", ",", "ds_scores", "=", "True", ")", "\n", "\n", "g_true", "=", "[", "g", "for", "g", "in", "pos_dists", "if", "g", "<", "fmr100_th", "]", "\n", "fnmrs_list_2", ".", "append", "(", "1", "-", "len", "(", "g_true", ")", "/", "(", "len", "(", "pos_dists", ")", ")", ")", "\n", "g_true", "=", "[", "g", "for", "g", "in", "pos_dists", "if", "g", "<", "fmr1000_th", "]", "\n", "fnmrs_list_3", ".", "append", "(", "1", "-", "len", "(", "g_true", ")", "/", "(", "len", "(", "pos_dists", ")", ")", ")", "\n", "g_true", "=", "[", "g", "for", "g", "in", "pos_dists", "if", "g", "<", "fmr10000_th", "]", "\n", "fnmrs_list_4", ".", "append", "(", "1", "-", "len", "(", "g_true", ")", "/", "(", "len", "(", "pos_dists", ")", ")", ")", "\n", "\n", "", "return", "fnmrs_list_2", ",", "fnmrs_list_3", ",", "fnmrs_list_4", ",", "unconsidered_rates", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.perform_1v1_quality_eval": [[194, 243], ["args.eval_db.split", "args.models.split", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.join", "os.remove", "os.path.join", "os.remove", "os.path.join", "os.remove", "args.method_name.split", "numpy.arange", "erc.save_pdf", "erc.save_pdf", "erc.save_pdf", "os.path.join", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs", "print", "erc.load_feat_pair", "erc.load_quality_pair", "erc.getFNMRFixedTH", "fnmrs_list_2.append", "fnmrs_list_3.append", "fnmrs_list_4.append", "method_labels.append", "numpy.save", "numpy.save", "numpy.save", "str", "str", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "str", "str", "str", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.save_pdf", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.save_pdf", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.save_pdf", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.load_feat_pair", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.load_quality_pair", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.getFNMRFixedTH"], ["", "def", "perform_1v1_quality_eval", "(", "args", ")", ":", "\n", " ", "d", "=", "args", ".", "eval_db", ".", "split", "(", "','", ")", "\n", "\n", "for", "dataset", "in", "d", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "dataset", ",", "str", "(", "1e-2", ")", "+", "\"_auc.txt\"", ")", ")", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "dataset", ",", "str", "(", "1e-2", ")", "+", "\"_auc.txt\"", ")", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "dataset", ",", "str", "(", "1e-3", ")", "+", "\"_auc.txt\"", ")", ")", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "dataset", ",", "str", "(", "1e-3", ")", "+", "\"_auc.txt\"", ")", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "dataset", ",", "str", "(", "1e-4", ")", "+", "\"_auc.txt\"", ")", ")", ":", "\n", "        ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "dataset", ",", "str", "(", "1e-4", ")", "+", "\"_auc.txt\"", ")", ")", "\n", "\n", "", "", "models", "=", "args", ".", "models", ".", "split", "(", "','", ")", "\n", "for", "model", "in", "models", ":", "\n", "  ", "for", "dataset", "in", "d", ":", "\n", "    ", "method_names", "=", "args", ".", "method_name", ".", "split", "(", "','", ")", "\n", "fnmrs_list_2", "=", "[", "]", "\n", "fnmrs_list_3", "=", "[", "]", "\n", "fnmrs_list_4", "=", "[", "]", "\n", "method_labels", "=", "[", "]", "\n", "\n", "if", "(", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "dataset", ",", "'fnmr'", ")", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "dataset", ",", "'fnmr'", ")", ")", "\n", "\n", "", "unconsidered_rates", "=", "np", ".", "arange", "(", "0", ",", "0.98", ",", "0.05", ")", "\n", "\n", "for", "method_name", "in", "method_names", ":", "\n", "        ", "print", "(", "f\"----process {model} {dataset} {method_name}-----------\"", ")", "\n", "desc", "=", "False", "if", "method_name", "==", "'PFE'", "else", "True", "\n", "\n", "feat_pairs", "=", "load_feat_pair", "(", "os", ".", "path", ".", "join", "(", "args", ".", "quality_score_dir", ",", "dataset", ",", "'pair_list.txt'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "embeddings_dir", ",", "f\"{dataset}_{model}\"", ")", ")", "\n", "\n", "quality_scores", "=", "load_quality_pair", "(", "os", ".", "path", ".", "join", "(", "args", ".", "quality_score_dir", ",", "dataset", ",", "'pair_list.txt'", ")", "\n", "[", "os", ".", "path", ".", "join", "(", "args", ".", "quality_score_dir", ",", "dataset", ",", "f\"{method_name}_{dataset}.txt\"", ")", "]", ",", "\n", "dataset", ",", "args", ")", "\n", "\n", "fnmr2", ",", "fnmr3", ",", "fnmr4", ",", "unconsidered_rates", "=", "getFNMRFixedTH", "(", "feat_pairs", ",", "quality_scores", ",", "dist_type", "=", "args", ".", "distance_metric", ",", "desc", "=", "desc", ")", "\n", "fnmrs_list_2", ".", "append", "(", "fnmr2", ")", "\n", "fnmrs_list_3", ".", "append", "(", "fnmr3", ")", "\n", "fnmrs_list_4", ".", "append", "(", "fnmr4", ")", "\n", "method_labels", ".", "append", "(", "f\"{method_name}\"", ")", "\n", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "dataset", ",", "'fnmr'", ",", "f\"{method_name}_{model}_{dataset}_fnmr2.npy\"", ")", ",", "fnmr2", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "dataset", ",", "'fnmr'", ",", "f\"{method_name}_{model}_{dataset}_fnmr3.npy\"", ")", ",", "fnmr3", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "dataset", ",", "'fnmr'", ",", "f\"{method_name}_{model}_{dataset}_fnmr4.npy\"", ")", ",", "fnmr4", ")", "\n", "\n", "", "save_pdf", "(", "fnmrs_list_2", ",", "method_labels", ",", "model", "=", "model", ",", "output_dir", "=", "args", ".", "output_dir", ",", "fmr", "=", "1e-2", ",", "db", "=", "dataset", ")", "\n", "save_pdf", "(", "fnmrs_list_3", ",", "method_labels", ",", "model", "=", "model", ",", "output_dir", "=", "args", ".", "output_dir", ",", "fmr", "=", "1e-3", ",", "db", "=", "dataset", ")", "\n", "save_pdf", "(", "fnmrs_list_4", ",", "method_labels", ",", "model", "=", "model", ",", "output_dir", "=", "args", ".", "output_dir", ",", "fmr", "=", "1e-4", ",", "db", "=", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.main": [[244, 247], ["parser.parse_args", "erc.perform_1v1_quality_eval"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.erc.perform_1v1_quality_eval"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "perform_1v1_quality_eval", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.roc.calculate_roc": [[4, 69], ["isinstance", "isinstance", "len", "len", "zip", "zip", "list", "list", "numpy.array", "numpy.cumsum", "numpy.unique", "numpy.array", "numpy.array", "numpy.float64", "numpy.float64", "sorted", "operator.itemgetter"], "function", ["None"], ["def", "calculate_roc", "(", "gscores", ",", "iscores", ",", "ds_scores", "=", "False", ",", "rates", "=", "True", ")", ":", "\n", "    ", "\"\"\"Calculates FMR, FNMR\n    @param gscores: Genuine matching scores\n    @type gscores: Union[list, ndarray]\n    @param iscores: Impostor matching scores\n    @type giscores: Union[list, ndarray]\n    @param ds_scores: Indicates whether input scores are\n        dissimilarity scores\n    @type ds_scores: bool\n    @param rates: Indicates whether to return error rates instead\n        of error values\n    @type rates: bool\n    @return: (thresholds, FMR, FNMR) or (thresholds, FM, FNM)\n    @rtype: tuple\n    \"\"\"", "\n", "if", "isinstance", "(", "gscores", ",", "list", ")", ":", "\n", "        ", "gscores", "=", "np", ".", "array", "(", "gscores", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "if", "isinstance", "(", "iscores", ",", "list", ")", ":", "\n", "        ", "iscores", "=", "np", ".", "array", "(", "iscores", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "", "if", "gscores", ".", "dtype", "==", "np", ".", "int", ":", "\n", "        ", "gscores", "=", "np", ".", "float64", "(", "gscores", ")", "\n", "\n", "", "if", "iscores", ".", "dtype", "==", "np", ".", "int", ":", "\n", "        ", "iscores", "=", "np", ".", "float64", "(", "iscores", ")", "\n", "\n", "", "if", "ds_scores", ":", "\n", "        ", "gscores", "=", "gscores", "*", "-", "1", "\n", "iscores", "=", "iscores", "*", "-", "1", "\n", "\n", "", "gscores_number", "=", "len", "(", "gscores", ")", "\n", "iscores_number", "=", "len", "(", "iscores", ")", "\n", "\n", "# Labeling genuine scores as 1 and impostor scores as 0", "\n", "gscores", "=", "zip", "(", "gscores", ",", "[", "1", "]", "*", "gscores_number", ")", "\n", "iscores", "=", "zip", "(", "iscores", ",", "[", "0", "]", "*", "iscores_number", ")", "\n", "\n", "# Python3 compatibility", "\n", "gscores", "=", "list", "(", "gscores", ")", "\n", "iscores", "=", "list", "(", "iscores", ")", "\n", "\n", "# Stacking scores", "\n", "scores", "=", "np", ".", "array", "(", "sorted", "(", "gscores", "+", "iscores", ",", "key", "=", "operator", ".", "itemgetter", "(", "0", ")", ")", ")", "\n", "cumul", "=", "np", ".", "cumsum", "(", "scores", "[", ":", ",", "1", "]", ")", "\n", "\n", "# Grouping scores", "\n", "thresholds", ",", "u_indices", "=", "np", ".", "unique", "(", "scores", "[", ":", ",", "0", "]", ",", "return_index", "=", "True", ")", "\n", "\n", "# Calculating FNM and FM distributions", "\n", "fnm", "=", "cumul", "[", "u_indices", "]", "-", "scores", "[", "u_indices", "]", "[", ":", ",", "1", "]", "# rejecting s < t", "\n", "fm", "=", "iscores_number", "-", "(", "u_indices", "-", "fnm", ")", "\n", "\n", "# Calculating FMR and FNMR", "\n", "if", "rates", ":", "\n", "        ", "fnm_rates", "=", "fnm", "/", "gscores_number", "\n", "fm_rates", "=", "fm", "/", "iscores_number", "\n", "", "else", ":", "\n", "        ", "fnm_rates", "=", "fnm", "\n", "fm_rates", "=", "fm", "\n", "\n", "", "if", "ds_scores", ":", "\n", "        ", "return", "thresholds", "*", "-", "1", ",", "fm_rates", ",", "fnm_rates", "\n", "\n", "", "return", "thresholds", ",", "fm_rates", ",", "fnm_rates", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.roc.get_fmr_op": [[70, 86], ["numpy.argmin", "abs"], "function", ["None"], ["", "def", "get_fmr_op", "(", "fmr", ",", "fnmr", ",", "op", ")", ":", "\n", "    ", "\"\"\"Returns the value of the given FMR operating point\n    Definition:\n    ZeroFMR: is defined as the lowest FNMR at which no false matches occur.\n    Others FMR operating points are defined in a similar way.\n    @param fmr: False Match Rates\n    @type fmr: ndarray\n    @param fnmr: False Non-Match Rates\n    @type fnmr: ndarray\n    @param op: Operating point\n    @type op: float\n    @returns: Index, The lowest FNMR at which the probability of FMR == op\n    @rtype: float\n    \"\"\"", "\n", "index", "=", "np", ".", "argmin", "(", "abs", "(", "fmr", "-", "op", ")", ")", "\n", "return", "index", ",", "fnmr", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.roc.get_fnmr_op": [[87, 107], ["abs", "numpy.min", "numpy.where"], "function", ["None"], ["", "def", "get_fnmr_op", "(", "fmr", ",", "fnmr", ",", "op", ")", ":", "\n", "    ", "\"\"\"Returns the value of the given FNMR operating point\n    Definition:\n    ZeroFNMR: is defined as the lowest FMR at which no non-false matches occur.\n    Others FNMR operating points are defined in a similar way.\n    @param fmr: False Match Rates\n    @type fmr: ndarray\n    @param fnmr: False Non-Match Rates\n    @type fnmr: ndarray\n    @param op: Operating point\n    @type op: float\n    @returns: Index, The lowest FMR at which the probability of FNMR == op\n    @rtype: float\n    \"\"\"", "\n", "temp", "=", "abs", "(", "fnmr", "-", "op", ")", "\n", "min_val", "=", "np", ".", "min", "(", "temp", ")", "\n", "index", "=", "np", ".", "where", "(", "temp", "==", "min_val", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "#index = np.argmin(abs(fnmr - op))", "\n", "\n", "return", "index", ",", "fmr", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.roc.get_eer_threshold": [[108, 149], ["roc.calculate_roc", "len", "len", "roc.get_fmr_op", "roc.get_fmr_op", "roc.get_fmr_op"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.roc.calculate_roc", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.roc.get_fmr_op", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.roc.get_fmr_op", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.ERC.roc.get_fmr_op"], ["", "def", "get_eer_threshold", "(", "gen_scores", ",", "imp_scores", ",", "hformat", "=", "False", ",", "ds_scores", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates EER associated statistics\n    Keyword Arguments:\n    @param gen_scores: The genuine scores\n    @type gen_scores: list\n    @param imp_scores: The impostor scores\n    @type imp_scores: list\n    @param id: An id for the experiment\n    @type id: str\n    @param hformat: Indicates whether the impostor scores are in histogram\n        format\n    @type hformat: bool\n    @param ds_scores: Indicates whether the input scores are dissimilarity\n        scores\n    @type ds_scores: bool\n    \"\"\"", "\n", "\n", "# Calculating probabilities using scores as thrs", "\n", "roc_info", "=", "calculate_roc", "(", "gen_scores", ",", "imp_scores", ",", "\n", "ds_scores", ",", "rates", "=", "False", ")", "\n", "gnumber", "=", "len", "(", "gen_scores", ")", "\n", "inumber", "=", "len", "(", "imp_scores", ")", "\n", "thrs", ",", "fm", ",", "fnm", "=", "roc_info", "\n", "fmr", "=", "fm", "/", "inumber", "\n", "fnmr", "=", "fnm", "/", "gnumber", "\n", "ind", ",", "fmr1000", "=", "get_fmr_op", "(", "fmr", ",", "fnmr", ",", "0.001", ")", "\n", "fmr1000_th", "=", "thrs", "[", "ind", "]", "\n", "\n", "ind", ",", "fmr100", "=", "get_fmr_op", "(", "fmr", ",", "fnmr", ",", "0.01", ")", "\n", "fmr100_th", "=", "thrs", "[", "ind", "]", "\n", "\n", "ind", ",", "fmr10000", "=", "get_fmr_op", "(", "fmr", ",", "fnmr", ",", "0.0001", ")", "\n", "fmr10000_th", "=", "thrs", "[", "ind", "]", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "return", "fmr100_th", ",", "fmr1000_th", ",", "fmr10000_th", "\n", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.__init__": [[99, 118], ["eval_ijbc_qs.get_backbone", "numpy.array", "torch.nn.DataParallel", "eval_ijbc_qs.Embedding.model.eval"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.get_backbone"], ["", "elif", "modelname", "==", "\"MagFaceModel\"", ":", "\n", "        ", "from", "backbones", ".", "mag_network_inf", "import", "builder_inf", "\n", "prefix", "=", "\"/home/maklemt/image-quality\"", "\n", "epoch", "=", "\"00025\"", "\n", "backbone", "=", "builder_inf", "(", "os", ".", "path", ".", "join", "(", "prefix", ",", "\"magface_epoch_\"", "+", "epoch", "+", "\".pth\"", ")", ",", "\"iresnet100\"", ",", "512", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unknown model\"", ")", "\n", "exit", "(", ")", "\n", "", "return", "backbone", "\n", "\n", "", "class", "Embedding", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "prefix", ",", "data_shape", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "self", ".", "image_size", "=", "(", "112", ",", "112", ")", "\n", "backbone", "=", "get_backbone", "(", "prefix", ")", "\n", "if", "prefix", "==", "\"ArcFaceModel\"", ":", "\n", "            ", "self", ".", "model", "=", "backbone", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "backbone", ",", "device_ids", "=", "[", "gpu_id", "]", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "", "src", "=", "np", ".", "array", "(", "[", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.get": [[119, 146], ["skimage.transform.SimilarityTransform", "skimage.transform.SimilarityTransform.estimate", "cv2.warpAffine", "cv2.cvtColor", "numpy.fliplr", "numpy.transpose", "numpy.transpose", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["[", "30.2946", ",", "51.6963", "]", ",", "\n", "[", "65.5318", ",", "51.5014", "]", ",", "\n", "[", "48.0252", ",", "71.7366", "]", ",", "\n", "[", "33.5493", ",", "92.3655", "]", ",", "\n", "[", "62.7299", ",", "92.2041", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", ":", ",", "0", "]", "+=", "8.0", "\n", "self", ".", "src", "=", "src", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "data_shape", "=", "data_shape", "\n", "self", ".", "modelname", "=", "prefix", "\n", "\n", "", "def", "get", "(", "self", ",", "rimg", ",", "landmark", ")", ":", "\n", "\n", "        ", "assert", "landmark", ".", "shape", "[", "0", "]", "==", "68", "or", "landmark", ".", "shape", "[", "0", "]", "==", "5", "\n", "assert", "landmark", ".", "shape", "[", "1", "]", "==", "2", "\n", "if", "landmark", ".", "shape", "[", "0", "]", "==", "68", ":", "\n", "            ", "landmark5", "=", "np", ".", "zeros", "(", "(", "5", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "landmark5", "[", "0", "]", "=", "(", "landmark", "[", "36", "]", "+", "landmark", "[", "39", "]", ")", "/", "2", "\n", "landmark5", "[", "1", "]", "=", "(", "landmark", "[", "42", "]", "+", "landmark", "[", "45", "]", ")", "/", "2", "\n", "landmark5", "[", "2", "]", "=", "landmark", "[", "30", "]", "\n", "landmark5", "[", "3", "]", "=", "landmark", "[", "48", "]", "\n", "landmark5", "[", "4", "]", "=", "landmark", "[", "54", "]", "\n", "", "else", ":", "\n", "            ", "landmark5", "=", "landmark", "\n", "", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "landmark5", ",", "self", ".", "src", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "img", "=", "cv2", ".", "warpAffine", "(", "rimg", ",", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.forward_db": [[147, 169], ["torch.no_grad", "torch.Tensor().cuda", "eval_ijbc_qs.Embedding.reshape", "eval_ijbc_qs.Embedding.cpu().numpy", "mx.nd.array", "mx.io.DataBatch", "eval_ijbc_qs.Embedding.model.forward", "[].asnumpy", "emb.reshape.reshape.reshape", "torch.Tensor().cuda.div_", "torch.Tensor().cuda.div_().sub_().div_", "eval_ijbc_qs.Embedding.model", "eval_ijbc_qs.Embedding.model", "torch.Tensor", "eval_ijbc_qs.Embedding.cpu", "torch.Tensor().cuda.div_().sub_", "eval_ijbc_qs.Embedding.model.get_outputs", "torch.Tensor().cuda.div_"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.OnTopQS.forward"], ["M", ",", "(", "self", ".", "image_size", "[", "1", "]", ",", "self", ".", "image_size", "[", "0", "]", ")", ",", "\n", "borderValue", "=", "0.0", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "# cv2.imwrite(f\"IJBTest.png\", img)", "\n", "# exit()", "\n", "img_flip", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# 3*112*112, RGB", "\n", "img_flip", "=", "np", ".", "transpose", "(", "img_flip", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "input_blob", "=", "np", ".", "zeros", "(", "(", "2", ",", "3", ",", "self", ".", "image_size", "[", "0", "]", ",", "self", ".", "image_size", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "input_blob", "[", "0", "]", "=", "img", "\n", "input_blob", "[", "1", "]", "=", "img_flip", "\n", "return", "input_blob", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward_db", "(", "self", ",", "batch_data", ")", ":", "\n", "        ", "if", "self", ".", "modelname", "==", "\"ArcFaceModel\"", ":", "\n", "            ", "data", "=", "mx", ".", "nd", ".", "array", "(", "batch_data", ")", "\n", "db", "=", "mx", ".", "io", ".", "DataBatch", "(", "data", "=", "(", "data", ",", ")", ")", "\n", "self", ".", "model", ".", "forward", "(", "db", ",", "is_train", "=", "False", ")", "\n", "emb", "=", "self", ".", "model", ".", "get_outputs", "(", ")", "[", "0", "]", ".", "asnumpy", "(", ")", "\n", "emb", "=", "emb", ".", "reshape", "(", "[", "self", ".", "batch_size", ",", "2", "*", "emb", ".", "shape", "[", "1", "]", "]", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.get_backbone": [[66, 97], ["mx.model.load_checkpoint", "sym.get_internals", "mx.mod.Module", "builder_inf.bind", "builder_inf.set_params", "mx.gpu", "mx.cpu", "int", "torch.load", "IR_101().to", "builder_inf.load_state_dict", "os.path.join", "torch.load", "iresnet100().to", "builder_inf.load_state_dict", "IR_101", "os.path.join", "builder_inf", "print", "exit", "iresnet100", "os.path.join"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.model_irse.IR_101", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.mag_network_inf.builder_inf", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet100"], ["import", "numpy", "as", "np", "\n", "import", "torch", "\n", "from", "skimage", "import", "transform", "as", "trans", "\n", "\n", "\n", "def", "get_backbone", "(", "modelname", ")", ":", "\n", "    ", "if", "modelname", "==", "\"ArcFaceModel\"", ":", "\n", "        ", "prefix", "=", "\"/home/fboutros/PR/pretrained-model/model-r100-ii/model\"", "\n", "epoch", "=", "\"0000\"", "\n", "if", "gpu_id", ">=", "0", ":", "\n", "            ", "ctx", "=", "mx", ".", "gpu", "(", "gpu_id", ")", "\n", "", "else", ":", "\n", "            ", "ctx", "=", "mx", ".", "cpu", "(", ")", "\n", "", "sym", ",", "arg_params", ",", "aux_params", "=", "mx", ".", "model", ".", "load_checkpoint", "(", "prefix", ",", "int", "(", "epoch", ")", ")", "\n", "all_layers", "=", "sym", ".", "get_internals", "(", ")", "\n", "sym", "=", "all_layers", "[", "'fc1_output'", "]", "\n", "backbone", "=", "mx", ".", "mod", ".", "Module", "(", "symbol", "=", "sym", ",", "context", "=", "ctx", ",", "label_names", "=", "None", ")", "\n", "backbone", ".", "bind", "(", "data_shapes", "=", "[", "(", "'data'", ",", "(", "1", ",", "3", ",", "112", ",", "112", ")", ")", "]", ")", "\n", "backbone", ".", "set_params", "(", "arg_params", ",", "aux_params", ")", "\n", "", "elif", "modelname", "==", "\"CurricularFaceModel\"", ":", "\n", "        ", "from", "backbones", ".", "model_irse", "import", "IR_SE_101", ",", "IR_101", "\n", "prefix", "=", "\"/home/fboutros/FR-vulnerability/CurricularFace_Backbone\"", "\n", "epoch", "=", "\"295672\"", "\n", "weight", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "prefix", ",", "\"CurricularFace_Backbone.pth\"", ")", ")", "\n", "backbone", "=", "IR_101", "(", "[", "112", ",", "112", "]", ")", ".", "to", "(", "f\"cuda:{gpu_id}\"", ")", "\n", "backbone", ".", "load_state_dict", "(", "weight", ")", "\n", "", "elif", "modelname", "==", "\"ElasticFaceModel\"", ":", "\n", "        ", "from", "backbones", ".", "iresnet", "import", "iresnet100", "\n", "prefix", "=", "\"/home/fboutros/FR-vulnerability/ElasticFace\"", "\n", "epoch", "=", "\"295672\"", "\n", "weight", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "prefix", ",", "epoch", "+", "\"backbone.pth\"", ")", ")", "\n", "backbone", "=", "iresnet100", "(", ")", ".", "to", "(", "f\"cuda:{gpu_id}\"", ")", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.divideIntoNstrand": [[172, 177], ["enumerate", "twoList[].append", "range"], "function", ["None"], ["            ", "imgs", ".", "div_", "(", "255", ")", "\n", "", "else", ":", "\n", "            ", "imgs", ".", "div_", "(", "255", ")", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "\n", "", "if", "self", ".", "modelname", "==", "\"CurricularFaceModel\"", ":", "\n", "            ", "feat", ",", "_", "=", "self", ".", "model", "(", "imgs", ")", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.read_template_media_list": [[179, 185], ["ijb_meta[].astype", "ijb_meta[].astype", "pandas.read_csv"], "function", ["None"], ["            ", "feat", "=", "self", ".", "model", "(", "imgs", ")", "\n", "", "feat", "=", "feat", ".", "reshape", "(", "[", "self", ".", "batch_size", ",", "2", "*", "feat", ".", "shape", "[", "1", "]", "]", ")", "\n", "return", "feat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "# \u5c06\u4e00\u4e2alist\u5c3d\u91cf\u5747\u5206\u6210n\u4efd\uff0c\u9650\u5236len(list)==n\uff0c\u4efd\u6570\u5927\u4e8e\u539flist\u5185\u5143\u7d20\u4e2a\u6570\u5219\u5206\u914d\u7a7alist[]", "\n", "", "", "def", "divideIntoNstrand", "(", "listTemp", ",", "n", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.read_template_pair_list": [[188, 197], ["pairs[].astype", "pairs[].astype", "pairs[].astype", "pandas.read_csv"], "function", ["None"], ["        ", "twoList", "[", "i", "%", "n", "]", ".", "append", "(", "e", ")", "\n", "", "return", "twoList", "\n", "\n", "\n", "", "def", "read_template_media_list", "(", "path", ")", ":", "\n", "# ijb_meta = np.loadtxt(path, dtype=str)", "\n", "    ", "ijb_meta", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "templates", "=", "ijb_meta", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "medias", "=", "ijb_meta", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "templates", ",", "medias", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.read_quality_scores": [[199, 204], ["print", "pandas.read_csv", "float", "qs[].split"], "function", ["None"], ["\n", "\n", "", "def", "read_template_pair_list", "(", "path", ")", ":", "\n", "# pairs = np.loadtxt(path, dtype=str)", "\n", "    ", "pairs", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "# print(pairs.shape)", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.read_image_feature": [[206, 210], ["open", "pickle.load"], "function", ["None"], ["t1", "=", "pairs", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "t2", "=", "pairs", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "label", "=", "pairs", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "t1", ",", "t2", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.get_image_feature": [[212, 281], ["print", "numpy.empty", "numpy.empty", "eval_ijbc_qs.Embedding", "enumerate", "numpy.empty", "eval_ijbc_qs.Embedding", "enumerate", "numpy.array().astype", "numpy.array().astype", "len", "len", "each_line.strip().split", "os.path.join", "cv2.imread", "numpy.array", "lmk.reshape.reshape", "eval_ijbc_qs.Embedding.get", "np.array().astype.append", "np.array().astype.append", "each_line.strip().split", "os.path.join", "cv2.imread", "numpy.array", "lmk.reshape.reshape", "eval_ijbc_qs.Embedding.get", "np.array().astype.append", "np.array().astype.append", "len", "print", "eval_ijbc_qs.Embedding.forward_db", "os.path.join.split", "print", "eval_ijbc_qs.Embedding.forward_db", "os.path.join.split", "numpy.array", "numpy.array", "each_line.strip", "float", "each_line.strip", "float", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.get", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.get", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.forward_db", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.forward_db"], ["", "def", "read_quality_scores", "(", "path", ")", ":", "\n", "    ", "quality_scores", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "score_dict", "=", "{", "qs", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ":", "float", "(", "qs", "[", "1", "]", ")", "for", "qs", "in", "quality_scores", "}", "\n", "print", "(", "\"Quality scores loaded\"", ")", "\n", "return", "score_dict", "\n", "\n", "\n", "", "def", "read_image_feature", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "fid", ":", "\n", "        ", "img_feats", "=", "pickle", ".", "load", "(", "fid", ")", "\n", "", "return", "img_feats", "\n", "\n", "\n", "", "def", "get_image_feature", "(", "img_path", ",", "files_list", ",", "model_path", ",", "epoch", ",", "gpu_id", ",", "quality_dict", ")", ":", "\n", "    ", "data_shape", "=", "(", "3", ",", "112", ",", "112", ")", "\n", "\n", "files", "=", "files_list", "\n", "print", "(", "'files:'", ",", "len", "(", "files", ")", ")", "\n", "rare_size", "=", "len", "(", "files", ")", "%", "batch_size", "\n", "faceness_scores", "=", "[", "]", "\n", "quality_scores", "=", "[", "]", "\n", "batch", "=", "0", "\n", "img_feats", "=", "np", ".", "empty", "(", "(", "len", "(", "files", ")", ",", "embedding_size", "*", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "\"\"\"\n    for img_index, each_line in tqdm(enumerate(files), total=len(files)):\n        name_lmk_score = each_line.strip().split(' ')\n        template_name = os.path.join(template_path, name_lmk_score[0].replace('.jpg', '.npy'))\n        img_feats[img_index] = np.load(template_name)\n        qual_key = name_lmk_score[0]\n        quality_scores.append(quality_dict[qual_key])\n        faceness_scores.append(name_lmk_score[-1])\n    \"\"\"", "\n", "\n", "# extract embeddings with model", "\n", "batch_data", "=", "np", ".", "empty", "(", "(", "2", "*", "batch_size", ",", "3", ",", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", ")", "\n", "embedding", "=", "Embedding", "(", "model_path", ",", "data_shape", ",", "batch_size", ")", "\n", "for", "img_index", ",", "each_line", "in", "enumerate", "(", "files", "[", ":", "len", "(", "files", ")", "-", "rare_size", "]", ")", ":", "\n", "        ", "name_lmk_score", "=", "each_line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "img_name", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "name_lmk_score", "[", "0", "]", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_name", ")", "\n", "lmk", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "name_lmk_score", "[", "1", ":", "-", "1", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "lmk", "=", "lmk", ".", "reshape", "(", "(", "5", ",", "2", ")", ")", "\n", "input_blob", "=", "embedding", ".", "get", "(", "img", ",", "lmk", ")", "\n", "\n", "batch_data", "[", "2", "*", "(", "img_index", "-", "batch", "*", "batch_size", ")", "]", "[", ":", "]", "=", "input_blob", "[", "0", "]", "\n", "batch_data", "[", "2", "*", "(", "img_index", "-", "batch", "*", "batch_size", ")", "+", "1", "]", "[", ":", "]", "=", "input_blob", "[", "1", "]", "\n", "if", "(", "img_index", "+", "1", ")", "%", "batch_size", "==", "0", ":", "\n", "            ", "print", "(", "'batch'", ",", "batch", ")", "\n", "img_feats", "[", "batch", "*", "batch_size", ":", "batch", "*", "batch_size", "+", "\n", "batch_size", "]", "[", ":", "]", "=", "embedding", ".", "forward_db", "(", "batch_data", ")", "\n", "batch", "+=", "1", "\n", "", "qual_key", "=", "img_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "quality_scores", ".", "append", "(", "quality_dict", "[", "qual_key", "]", ")", "\n", "faceness_scores", ".", "append", "(", "name_lmk_score", "[", "-", "1", "]", ")", "\n", "\n", "", "batch_data", "=", "np", ".", "empty", "(", "(", "2", "*", "rare_size", ",", "3", ",", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", ")", "\n", "embedding", "=", "Embedding", "(", "model_path", ",", "data_shape", ",", "rare_size", ")", "\n", "for", "img_index", ",", "each_line", "in", "enumerate", "(", "files", "[", "len", "(", "files", ")", "-", "rare_size", ":", "]", ")", ":", "\n", "        ", "name_lmk_score", "=", "each_line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "img_name", "=", "os", ".", "path", ".", "join", "(", "img_path", ",", "name_lmk_score", "[", "0", "]", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "img_name", ")", "\n", "lmk", "=", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "name_lmk_score", "[", "1", ":", "-", "1", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "lmk", "=", "lmk", ".", "reshape", "(", "(", "5", ",", "2", ")", ")", "\n", "input_blob", "=", "embedding", ".", "get", "(", "img", ",", "lmk", ")", "\n", "batch_data", "[", "2", "*", "img_index", "]", "[", ":", "]", "=", "input_blob", "[", "0", "]", "\n", "batch_data", "[", "2", "*", "img_index", "+", "1", "]", "[", ":", "]", "=", "input_blob", "[", "1", "]", "\n", "if", "(", "img_index", "+", "1", ")", "%", "rare_size", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.image2template_feature": [[283, 319], ["numpy.unique", "numpy.zeros", "enumerate", "sklearn.preprocessing.normalize", "numpy.where", "numpy.unique", "zip", "numpy.array", "numpy.sum", "len", "numpy.where", "print", "numpy.mean"], "function", ["None"], ["img_feats", "[", "len", "(", "files", ")", "-", "\n", "rare_size", ":", "]", "[", ":", "]", "=", "embedding", ".", "forward_db", "(", "batch_data", ")", "\n", "batch", "+=", "1", "\n", "", "qual_key", "=", "img_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "quality_scores", ".", "append", "(", "quality_dict", "[", "qual_key", "]", ")", "\n", "faceness_scores", ".", "append", "(", "name_lmk_score", "[", "-", "1", "]", ")", "\n", "", "faceness_scores", "=", "np", ".", "array", "(", "faceness_scores", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "quality_scores", "=", "np", ".", "array", "(", "quality_scores", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# img_feats = np.ones( (len(files), 1024), dtype=np.float32) * 0.01", "\n", "# faceness_scores = np.ones( (len(files), ), dtype=np.float32 )", "\n", "return", "img_feats", ",", "faceness_scores", ",", "quality_scores", "\n", "\n", "\n", "", "def", "image2template_feature", "(", "img_feats", "=", "None", ",", "templates", "=", "None", ",", "medias", "=", "None", ",", "quality_scores", "=", "None", ")", ":", "\n", "# ==========================================================", "\n", "# 1. face image feature l2 normalization. img_feats:[number_image x feats_dim]", "\n", "# 2. compute media feature.", "\n", "# 3. compute template feature.", "\n", "# ==========================================================", "\n", "    ", "unique_templates", "=", "np", ".", "unique", "(", "templates", ")", "\n", "template_feats", "=", "np", ".", "zeros", "(", "(", "len", "(", "unique_templates", ")", ",", "img_feats", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "for", "count_template", ",", "uqt", "in", "enumerate", "(", "unique_templates", ")", ":", "\n", "\n", "        ", "(", "ind_t", ",", ")", "=", "np", ".", "where", "(", "templates", "==", "uqt", ")", "\n", "face_norm_feats", "=", "img_feats", "[", "ind_t", "]", "\n", "\n", "face_medias", "=", "medias", "[", "ind_t", "]", "\n", "unique_medias", ",", "unique_media_counts", "=", "np", ".", "unique", "(", "face_medias", ",", "\n", "return_counts", "=", "True", ")", "\n", "media_norm_feats", "=", "[", "]", "\n", "for", "u", ",", "ct", "in", "zip", "(", "unique_medias", ",", "unique_media_counts", ")", ":", "\n", "            ", "(", "ind_m", ",", ")", "=", "np", ".", "where", "(", "face_medias", "==", "u", ")", "\n", "if", "ct", "==", "1", ":", "\n", "                ", "media_norm_feats", "+=", "[", "face_norm_feats", "[", "ind_m", "]", "]", "\n", "", "else", ":", "# image features from the same video will be aggregated into one feature", "\n", "                ", "media_norm_feats", "+=", "[", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.verification": [[321, 348], ["numpy.zeros", "enumerate", "numpy.zeros", "numpy.array", "len", "enumerate", "range", "numpy.sum", "np.sum.flatten", "len", "len", "range", "print", "max", "len"], "function", ["None"], ["]", "\n", "", "", "media_norm_feats", "=", "np", ".", "array", "(", "media_norm_feats", ")", "\n", "# media_norm_feats = media_norm_feats / np.sqrt(np.sum(media_norm_feats ** 2, -1, keepdims=True))", "\n", "template_feats", "[", "count_template", "]", "=", "np", ".", "sum", "(", "media_norm_feats", ",", "axis", "=", "0", ")", "\n", "if", "count_template", "%", "2000", "==", "0", ":", "\n", "            ", "print", "(", "'Finish Calculating {} template features.'", ".", "format", "(", "\n", "count_template", ")", ")", "\n", "# template_norm_feats = template_feats / np.sqrt(np.sum(template_feats ** 2, -1, keepdims=True))", "\n", "", "", "template_norm_feats", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "template_feats", ")", "\n", "# print(template_norm_feats.shape)", "\n", "return", "template_norm_feats", ",", "unique_templates", "\n", "\n", "\n", "", "def", "verification", "(", "template_norm_feats", "=", "None", ",", "\n", "unique_templates", "=", "None", ",", "\n", "p1", "=", "None", ",", "\n", "p2", "=", "None", ")", ":", "\n", "# ==========================================================", "\n", "#         Compute set-to-set Similarity Score.", "\n", "# ==========================================================", "\n", "    ", "template2id", "=", "np", ".", "zeros", "(", "(", "max", "(", "unique_templates", ")", "+", "1", ",", "1", ")", ",", "dtype", "=", "int", ")", "\n", "for", "count_template", ",", "uqt", "in", "enumerate", "(", "unique_templates", ")", ":", "\n", "        ", "template2id", "[", "uqt", "]", "=", "count_template", "\n", "\n", "", "score", "=", "np", ".", "zeros", "(", "(", "len", "(", "p1", ")", ",", ")", ")", "# save cosine distance between pairs", "\n", "\n", "total_pairs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "p1", ")", ")", ")", "\n", "batchsize", "=", "100000", "# small batchsize instead of all pairs in one batch due to the memory limiation", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.verification2": [[351, 373], ["numpy.zeros", "enumerate", "numpy.zeros", "numpy.array", "len", "enumerate", "range", "numpy.sum", "np.sum.flatten", "len", "len", "range", "print", "max", "len"], "function", ["None"], ["]", "\n", "total_sublists", "=", "len", "(", "sublists", ")", "\n", "for", "c", ",", "s", "in", "enumerate", "(", "sublists", ")", ":", "\n", "        ", "feat1", "=", "template_norm_feats", "[", "template2id", "[", "p1", "[", "s", "]", "]", "]", "\n", "feat2", "=", "template_norm_feats", "[", "template2id", "[", "p2", "[", "s", "]", "]", "]", "\n", "similarity_score", "=", "np", ".", "sum", "(", "feat1", "*", "feat2", ",", "-", "1", ")", "\n", "score", "[", "s", "]", "=", "similarity_score", ".", "flatten", "(", ")", "\n", "if", "c", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Finish {}/{} pairs.'", ".", "format", "(", "c", ",", "total_sublists", ")", ")", "\n", "", "", "return", "score", "\n", "\n", "\n", "# In[ ]:", "\n", "", "def", "verification2", "(", "template_norm_feats", "=", "None", ",", "\n", "unique_templates", "=", "None", ",", "\n", "p1", "=", "None", ",", "\n", "p2", "=", "None", ")", ":", "\n", "    ", "template2id", "=", "np", ".", "zeros", "(", "(", "max", "(", "unique_templates", ")", "+", "1", ",", "1", ")", ",", "dtype", "=", "int", ")", "\n", "for", "count_template", ",", "uqt", "in", "enumerate", "(", "unique_templates", ")", ":", "\n", "        ", "template2id", "[", "uqt", "]", "=", "count_template", "\n", "", "score", "=", "np", ".", "zeros", "(", "(", "len", "(", "p1", ")", ",", ")", ")", "# save cosine distance between pairs", "\n", "total_pairs", "=", "np", ".", "array", "(", "range", "(", "len", "(", "p1", ")", ")", ")", "\n", "batchsize", "=", "100000", "# small batchsize instead of all pairs in one batch due to the memory limiation", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.read_score": [[375, 379], ["open", "pickle.load"], "function", ["None"], ["total_pairs", "[", "i", ":", "i", "+", "batchsize", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "p1", ")", ",", "batchsize", ")", "\n", "]", "\n", "total_sublists", "=", "len", "(", "sublists", ")", "\n", "for", "c", ",", "s", "in", "enumerate", "(", "sublists", ")", ":", "\n", "        ", "feat1", "=", "template_norm_feats", "[", "template2id", "[", "p1", "[", "s", "]", "]", "]", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.extract_emb.parse_arguments": [[9, 25], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_arguments", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset_path'", ",", "type", "=", "str", ",", "default", "=", "'./data/quality_data/XQLFW'", ",", "\n", "help", "=", "'dataset directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--modelname'", ",", "type", "=", "str", ",", "default", "=", "'ElasticFaceModel'", ",", "\n", "help", "=", "'ArcFaceModel, CurricularFaceModel, ElasticFaceModel, MagFaceModel'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'GPU id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "'path to pretrained model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_id'", ",", "type", "=", "str", ",", "default", "=", "\"295672\"", ",", "\n", "help", "=", "'digit number in backbone file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--relative_dir'", ",", "type", "=", "str", ",", "default", "=", "'./data'", ",", "\n", "help", "=", "'path to save the embeddings'", ")", "\n", "return", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.extract_emb.read_img_path_list": [[28, 33], ["open", "f.readlines", "os.path.join", "line.rstrip"], "function", ["None"], ["", "def", "read_img_path_list", "(", "image_path_file", ",", "relative_dir", ")", ":", "\n", "    ", "with", "open", "(", "image_path_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "lines", "=", "[", "os", ".", "path", ".", "join", "(", "relative_dir", ",", "line", ".", "rstrip", "(", ")", ")", "for", "line", "in", "lines", "]", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.extract_emb.main": [[34, 74], ["os.path.join", "extract_emb.read_img_path_list", "MagFaceModel.get_batch_feature", "MagFaceModel.get_batch_feature", "print", "tqdm.tqdm", "dataset_path.split", "dataset_name.lower", "os.path.exists", "os.makedirs", "os.path.join", "ArcFaceModel", "range", "numpy.concatenate", "str", "numpy.save", "CurricularFaceModel", "len", "os.path.join", "ElasticFaceModel", "[].split", "MagFaceModel", "print", "exit", "str().split", "str"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.extract_emb.read_img_path_list", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.get_batch_feature", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.get_batch_feature"], ["", "def", "main", "(", "param", ")", ":", "\n", "    ", "dataset_path", "=", "param", ".", "dataset_path", "\n", "modelname", "=", "param", ".", "modelname", "\n", "gpu_id", "=", "param", ".", "gpu_id", "\n", "data_path", "=", "param", ".", "relative_dir", "\n", "dataset_name", "=", "dataset_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"quality_embeddings\"", ",", "f\"{dataset_name}_{modelname}\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "out_path", ")", "\n", "", "image_path_list", "=", "read_img_path_list", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"image_path_list.txt\"", ")", ",", "data_path", ")", "\n", "if", "modelname", "==", "\"ArcFaceModel\"", ":", "\n", "        ", "from", "model", ".", "ArcFaceModel", "import", "ArcFaceModel", "\n", "face_model", "=", "ArcFaceModel", "(", "param", ".", "model_path", ",", "param", ".", "model_id", ",", "gpu_id", "=", "gpu_id", ")", "\n", "", "elif", "modelname", "==", "\"CurricularFaceModel\"", ":", "\n", "        ", "from", "model", ".", "CurricularFaceModel", "import", "CurricularFaceModel", "\n", "face_model", "=", "CurricularFaceModel", "(", "param", ".", "model_path", ",", "param", ".", "model_id", ",", "gpu_id", ")", "\n", "", "elif", "modelname", "==", "\"ElasticFaceModel\"", ":", "\n", "        ", "from", "model", ".", "ElasticFaceModel", "import", "ElasticFaceModel", "\n", "face_model", "=", "ElasticFaceModel", "(", "param", ".", "model_path", ",", "param", ".", "model_id", ",", "gpu_id", ")", "\n", "", "elif", "modelname", "==", "\"MagFaceModel\"", ":", "\n", "        ", "from", "model", ".", "MagFaceModel", "import", "MagFaceModel", "\n", "face_model", "=", "MagFaceModel", "(", "param", ".", "model_path", ",", "param", ".", "model_id", ",", "gpu_id", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Unknown model\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "features", "=", "face_model", ".", "get_batch_feature", "(", "image_path_list", ")", "\n", "features_flipped", "=", "face_model", ".", "get_batch_feature", "(", "image_path_list", ",", "flip", "=", "1", ")", "\n", "\n", "# too slow for IJBC", "\n", "# conc_features = np.concatenate((features, features_flipped), axis=1)", "\n", "# print(conc_features.shape)", "\n", "\n", "print", "(", "\"save features\"", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "features", ")", ")", ")", ":", "\n", "        ", "conc_features", "=", "np", ".", "concatenate", "(", "(", "features", "[", "i", "]", ",", "features_flipped", "[", "i", "]", ")", ",", "axis", "=", "0", ")", "\n", "filename", "=", "str", "(", "str", "(", "image_path_list", "[", "i", "]", ")", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "out_path", ",", "filename", ")", ",", "conc_features", ")", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", "parse_arguments", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.parse_arguments": [[10, 26], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_arguments", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset_path'", ",", "type", "=", "str", ",", "default", "=", "'/data/fboutros/IJB_release/IJB_release/IJBC'", ",", "\n", "help", "=", "'dataset directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--modelname'", ",", "type", "=", "str", ",", "default", "=", "'ElasticFaceModel'", ",", "\n", "help", "=", "'ArcFaceModel, CurricularFaceModel, ElasticFaceModel, MagFaceModel'", ")", "\n", "parser", ".", "add_argument", "(", "'--q_modelname'", ",", "type", "=", "str", ",", "default", "=", "'CRFIQAL'", ",", "\n", "help", "=", "'CRFIQAL, CRFIQAS'", ")", "\n", "parser", ".", "add_argument", "(", "'--threads'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'Number of threads'", ")", "\n", "parser", ".", "add_argument", "(", "'--raw_feature_path'", ",", "type", "=", "str", ",", "default", "=", "'./data/quality_embeddings'", ",", "\n", "help", "=", "'path to raw embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--new_pair_path'", ",", "type", "=", "str", ",", "default", "=", "'./data/quality_data'", ",", "\n", "help", "=", "'path to save new quality pair list'", ")", "\n", "return", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.read_template_pair_list": [[28, 35], ["pairs[].astype", "pairs[].astype", "pairs[].astype", "print", "pandas.read_csv"], "function", ["None"], ["", "def", "read_template_pair_list", "(", "path", ")", ":", "\n", "    ", "pairs", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "t1", "=", "pairs", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "t2", "=", "pairs", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "label", "=", "pairs", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "print", "(", "\"Template pair list loaded\"", ")", "\n", "return", "t1", ",", "t2", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.read_template_media_list": [[37, 44], ["ijb_meta[].astype", "ijb_meta[].astype", "print", "pandas.read_csv"], "function", ["None"], ["", "def", "read_template_media_list", "(", "path", ")", ":", "\n", "    ", "ijb_meta", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "img_names", "=", "ijb_meta", "[", ":", ",", "0", "]", "\n", "templates", "=", "ijb_meta", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "medias", "=", "ijb_meta", "[", ":", ",", "2", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "print", "(", "\"Tid mid list loaded\"", ")", "\n", "return", "img_names", ",", "templates", ",", "medias", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.load_raw_templates": [[46, 52], ["numpy.zeros", "enumerate", "os.path.join", "numpy.load", "len", "file.replace"], "function", ["None"], ["", "def", "load_raw_templates", "(", "files", ",", "raw_feature_path", ")", ":", "\n", "    ", "features", "=", "np", ".", "zeros", "(", "(", "len", "(", "files", ")", ",", "1024", ")", ")", "\n", "for", "i", ",", "file", "in", "enumerate", "(", "files", ")", ":", "\n", "        ", "filepath", "=", "os", ".", "path", ".", "join", "(", "raw_feature_path", ",", "file", ".", "replace", "(", "\".jpg\"", ",", "\".npy\"", ")", ")", "\n", "features", "[", "i", "]", "=", "np", ".", "load", "(", "filepath", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.aggregate_templates": [[54, 78], ["ijb_qs_pair_file.read_template_media_list", "numpy.unique", "tqdm.tqdm", "numpy.where", "ijb_qs_pair_file.load_raw_templates", "numpy.unique", "zip", "numpy.array", "sklearn.preprocessing.normalize", "numpy.save", "len", "numpy.where", "numpy.sum", "os.path.join", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.read_template_media_list", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.load_raw_templates"], ["", "def", "aggregate_templates", "(", "tid_mid_path", ",", "feat_outpath", ",", "raw_feature_path", ")", ":", "\n", "    ", "imgs_names", ",", "templates", ",", "medias", "=", "read_template_media_list", "(", "tid_mid_path", ")", "\n", "\n", "unique_templates", "=", "np", ".", "unique", "(", "templates", ")", "\n", "\n", "for", "uqt", "in", "tqdm", "(", "unique_templates", ",", "total", "=", "len", "(", "unique_templates", ")", ")", ":", "\n", "\n", "        ", "(", "ind_t", ",", ")", "=", "np", ".", "where", "(", "templates", "==", "uqt", ")", "\n", "face_norm_feats", "=", "load_raw_templates", "(", "imgs_names", "[", "ind_t", "]", ",", "raw_feature_path", ")", "\n", "face_medias", "=", "medias", "[", "ind_t", "]", "\n", "unique_medias", ",", "unique_media_counts", "=", "np", ".", "unique", "(", "face_medias", ",", "\n", "return_counts", "=", "True", ")", "\n", "media_norm_feats", "=", "[", "]", "\n", "for", "u", ",", "ct", "in", "zip", "(", "unique_medias", ",", "unique_media_counts", ")", ":", "\n", "            ", "(", "ind_m", ",", ")", "=", "np", ".", "where", "(", "face_medias", "==", "u", ")", "\n", "if", "ct", "==", "1", ":", "\n", "                ", "media_norm_feats", "+=", "[", "face_norm_feats", "[", "ind_m", "]", "]", "\n", "", "else", ":", "# image features from the same video will be aggregated into one feature", "\n", "                ", "media_norm_feats", "+=", "[", "\n", "np", ".", "mean", "(", "face_norm_feats", "[", "ind_m", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "]", "\n", "", "", "media_norm_feats", "=", "np", ".", "array", "(", "media_norm_feats", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "aggregated_feature", "=", "sklearn", ".", "preprocessing", ".", "normalize", "(", "np", ".", "sum", "(", "media_norm_feats", ",", "axis", "=", "0", ")", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "feat_outpath", ",", "f\"{uqt}.npy\"", ")", ",", "aggregated_feature", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.load_quality_scores": [[82, 87], ["print", "pandas.read_csv", "float", "qs[].split"], "function", ["None"], ["", "", "def", "load_quality_scores", "(", "path", ")", ":", "\n", "    ", "quality_scores", "=", "pd", ".", "read_csv", "(", "path", ",", "sep", "=", "' '", ",", "header", "=", "None", ")", ".", "values", "\n", "score_dict", "=", "{", "qs", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ":", "float", "(", "qs", "[", "1", "]", ")", "for", "qs", "in", "quality_scores", "}", "\n", "print", "(", "\"Quality scores loaded\"", ")", "\n", "return", "score_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.get_score_part": [[89, 110], ["tqdm.tqdm", "queue.put", "numpy.where", "zip", "ijb_qs_pair_file.get_score_part.get_min_score"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.feature_extraction.ijb_pair_file.get_min_score"], ["", "def", "get_score_part", "(", "t1s", ",", "t2s", ",", "labels", ",", "quality_model", ",", "templates", ",", "imgs_names", ",", "score_dict", ",", "queue", ")", ":", "\n", "\n", "    ", "def", "get_min_score", "(", "person", ")", ":", "\n", "        ", "(", "ind_t1", ",", ")", "=", "np", ".", "where", "(", "templates", "==", "person", ")", "\n", "scores", "=", "[", "]", "\n", "for", "img_name", "in", "imgs_names", "[", "ind_t1", "]", ":", "\n", "            ", "scores", ".", "append", "(", "score_dict", "[", "img_name", "]", ")", "\n", "", "return", "max", "(", "scores", ")", "if", "quality_model", "==", "\"PFE\"", "else", "min", "(", "scores", ")", "\n", "\n", "", "q_pair_list", "=", "\"\"", "\n", "for", "t1", ",", "t2", ",", "label", "in", "tqdm", "(", "zip", "(", "t1s", ",", "t2s", ",", "labels", ")", ",", "total", "=", "len", "(", "t1s", ")", ")", ":", "\n", "        ", "min_score_t1", "=", "get_min_score", "(", "t1", ")", "\n", "min_score_t2", "=", "get_min_score", "(", "t2", ")", "\n", "if", "quality_model", "==", "\"PFE\"", ":", "\n", "            ", "min_score", "=", "max", "(", "[", "min_score_t1", ",", "min_score_t2", "]", ")", "\n", "", "else", ":", "\n", "            ", "min_score", "=", "min", "(", "[", "min_score_t1", ",", "min_score_t2", "]", ")", "\n", "\n", "", "q_pair_list", "+=", "f\"{t1} {t2} {label} {min_score}\\n\"", "\n", "\n", "", "queue", ".", "put", "(", "q_pair_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.create_quality_list": [[112, 149], ["ijb_qs_pair_file.read_template_media_list", "ijb_qs_pair_file.load_quality_scores", "ijb_qs_pair_file.read_template_pair_list", "print", "multiprocessing.Queue", "range", "multiprocessing.Process", "processes.append", "multiprocessing.Process.start", "os.path.join", "open", "open.close", "len", "multiprocessing.Process", "processes.append", "multiprocessing.Process.start", "os.path.join", "multiprocessing.Queue.get", "open.write", "multiprocessing.Process.join"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.read_template_media_list", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.load_quality_scores", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.read_template_pair_list", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.eval_ijbc_qs.Embedding.get"], ["", "def", "create_quality_list", "(", "pair_path", ",", "tid_mid_path", ",", "quality_score_path", ",", "quality_model", ",", "dataset_name", ",", "threads", ",", "new_pair_path", ")", ":", "\n", "    ", "imgs_names", ",", "templates", ",", "_", "=", "read_template_media_list", "(", "tid_mid_path", ")", "\n", "score_dict", "=", "load_quality_scores", "(", "quality_score_path", ")", "\n", "\n", "t1s", ",", "t2s", ",", "labels", "=", "read_template_pair_list", "(", "pair_path", ")", "\n", "part_idx", "=", "len", "(", "t1s", ")", "//", "threads", "\n", "print", "(", "f\"Quality estimation model: {quality_model}\\n{threads+1} Threads\"", ")", "\n", "\n", "q", "=", "Queue", "(", ")", "\n", "processes", "=", "[", "]", "\n", "\n", "for", "idx", "in", "range", "(", "threads", ")", ":", "\n", "        ", "t1_part", "=", "t1s", "[", "idx", "*", "part_idx", ":", "(", "idx", "+", "1", ")", "*", "part_idx", "]", "\n", "t2_part", "=", "t2s", "[", "idx", "*", "part_idx", ":", "(", "idx", "+", "1", ")", "*", "part_idx", "]", "\n", "label_part", "=", "labels", "[", "idx", "*", "part_idx", ":", "(", "idx", "+", "1", ")", "*", "part_idx", "]", "\n", "p", "=", "Process", "(", "target", "=", "get_score_part", ",", "args", "=", "(", "t1_part", ",", "t2_part", ",", "label_part", ",", "quality_model", ",", "templates", ",", "imgs_names", ",", "score_dict", ",", "q", ")", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "\n", "", "t1_part", "=", "t1s", "[", "threads", "*", "part_idx", ":", "]", "\n", "t2_part", "=", "t2s", "[", "threads", "*", "part_idx", ":", "]", "\n", "label_part", "=", "labels", "[", "threads", "*", "part_idx", ":", "]", "\n", "p", "=", "Process", "(", "target", "=", "get_score_part", ",", "args", "=", "(", "t1_part", ",", "t2_part", ",", "label_part", ",", "quality_model", ",", "templates", ",", "imgs_names", ",", "score_dict", ",", "q", ")", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "p", ".", "start", "(", ")", "\n", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "new_pair_path", ",", "dataset_name", ")", "\n", "pair_list", "=", "open", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "f\"quality_pair_list_{quality_model}_{dataset_name}.txt\"", ")", ",", "\"w\"", ")", "\n", "\n", "for", "p", "in", "processes", ":", "\n", "        ", "ret", "=", "q", ".", "get", "(", ")", "# will block", "\n", "pair_list", ".", "write", "(", "ret", ")", "\n", "", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n", "", "pair_list", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.main": [[151, 170], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "ijb_qs_pair_file.aggregate_templates", "ijb_qs_pair_file.create_quality_list", "dataset_path.split", "os.path.exists", "os.makedirs", "dataset_name.lower", "dataset_name.lower"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.aggregate_templates", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.IJB-C Evaluation.ijb_qs_pair_file.create_quality_list"], ["", "def", "main", "(", "param", ")", ":", "\n", "    ", "dataset_path", "=", "param", ".", "dataset_path", "\n", "dataset_name", "=", "dataset_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "model", "=", "param", ".", "modelname", "\n", "quality_model", "=", "param", ".", "q_modelname", "\n", "threads", "=", "param", ".", "threads", "\n", "new_pair_list_path", "=", "param", ".", "new_pair_path", "\n", "quality_score_path", "=", "os", ".", "path", ".", "join", "(", "\"quality_scores\"", ",", "f\"{quality_model}_{dataset_name}.txt\"", ")", "\n", "raw_feature_path", "=", "os", ".", "path", ".", "join", "(", "param", ".", "raw_feature_path", ",", "dataset_name", "+", "\"_\"", "+", "model", "+", "\"_raw\"", ")", "\n", "outpath", "=", "raw_feature_path", "[", ":", "-", "4", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outpath", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "outpath", ")", "\n", "\n", "", "tid_mid_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"meta\"", ",", "f\"{dataset_name.lower()}_face_tid_mid.txt\"", ")", "\n", "pair_path", "=", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "\"meta\"", ",", "f\"{dataset_name.lower()}_template_pair_label.txt\"", ")", "\n", "\n", "aggregate_templates", "(", "tid_mid_path", ",", "outpath", ",", "raw_feature_path", ")", "\n", "\n", "create_quality_list", "(", "pair_path", ",", "tid_mid_path", ",", "quality_score_path", ",", "quality_model", ",", "dataset_name", ",", "threads", ",", "new_pair_list_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.QualityModel.QualityModel.__init__": [[7, 9], ["evaluation.FaceModel.FaceModel.__init__"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_prefix", ",", "model_epoch", ",", "gpu_id", ")", ":", "\n", "        ", "super", "(", "QualityModel", ",", "self", ")", ".", "__init__", "(", "model_prefix", ",", "model_epoch", ",", "gpu_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.QualityModel.QualityModel._get_model": [[10, 21], ["torch.load", "backbones.iresnet.iresnet100().to.load_state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel.eval", "os.path.join", "backbones.iresnet.iresnet50().to", "backbones.iresnet.iresnet100().to", "backbones.iresnet.iresnet50", "backbones.iresnet.iresnet100"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet50", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.backbones.iresnet.iresnet100"], ["", "def", "_get_model", "(", "self", ",", "ctx", ",", "image_size", ",", "prefix", ",", "epoch", ",", "layer", ",", "backbone", ")", ":", "\n", "        ", "weight", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "prefix", ",", "epoch", "+", "\"backbone.pth\"", ")", ")", "\n", "if", "(", "backbone", "==", "\"iresnet50\"", ")", ":", "\n", "            ", "backbone", "=", "iresnet50", "(", "num_features", "=", "512", ",", "qs", "=", "1", ",", "use_se", "=", "False", ")", ".", "to", "(", "f\"cuda:{ctx}\"", ")", "\n", "", "else", ":", "\n", "            ", "backbone", "=", "iresnet100", "(", "num_features", "=", "512", ",", "qs", "=", "1", ",", "use_se", "=", "False", ")", ".", "to", "(", "f\"cuda:{ctx}\"", ")", "\n", "\n", "", "backbone", ".", "load_state_dict", "(", "weight", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "backbone", ",", "device_ids", "=", "[", "ctx", "]", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.QualityModel.QualityModel._getFeatureBlob": [[22, 28], ["torch.no_grad", "torch.Tensor().cuda", "torch.Tensor().cuda.div_().sub_().div_", "QualityModel.QualityModel.model", "feat.cpu().numpy", "qs.cpu().numpy", "torch.Tensor", "torch.Tensor().cuda.div_().sub_", "feat.cpu", "qs.cpu", "torch.Tensor().cuda.div_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_getFeatureBlob", "(", "self", ",", "input_blob", ")", ":", "\n", "        ", "imgs", "=", "torch", ".", "Tensor", "(", "input_blob", ")", ".", "cuda", "(", ")", "\n", "imgs", ".", "div_", "(", "255", ")", ".", "sub_", "(", "0.5", ")", ".", "div_", "(", "0.5", ")", "\n", "feat", ",", "qs", "=", "self", ".", "model", "(", "imgs", ")", "\n", "return", "feat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "qs", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.extract_adience.find_central_face": [[23, 36], ["numpy.array", "len", "numpy.array", "numpy.array", "numpy.linalg.norm", "numpy.argmin"], "function", ["None"], ["def", "find_central_face", "(", "img", ",", "keypoints", ")", ":", "\n", "# if multiple faces are detected, select the face most in the middle of the image", "\n", "    ", "mid_face_idx", "=", "0", "\n", "if", "len", "(", "keypoints", ")", ">", "1", ":", "\n", "        ", "img_mid_point", "=", "np", ".", "array", "(", "[", "img", ".", "shape", "[", "1", "]", "//", "2", ",", "img", ".", "shape", "[", "0", "]", "//", "2", "]", ")", "# [x (width), y (height)]", "\n", "noses", "=", "np", ".", "array", "(", "[", "keypoint", "[", "'keypoints'", "]", "[", "'nose'", "]", "for", "keypoint", "in", "keypoints", "]", ")", "\n", "distances", "=", "np", ".", "linalg", ".", "norm", "(", "noses", "-", "img_mid_point", ",", "axis", "=", "1", ")", "# calculate distance between nose and img mid point", "\n", "mid_face_idx", "=", "np", ".", "argmin", "(", "distances", ")", "\n", "\n", "", "facial5points", "=", "[", "keypoints", "[", "mid_face_idx", "]", "[", "'keypoints'", "]", "[", "'left_eye'", "]", ",", "keypoints", "[", "mid_face_idx", "]", "[", "'keypoints'", "]", "[", "'right_eye'", "]", ",", "\n", "keypoints", "[", "mid_face_idx", "]", "[", "'keypoints'", "]", "[", "'nose'", "]", ",", "keypoints", "[", "mid_face_idx", "]", "[", "'keypoints'", "]", "[", "'mouth_left'", "]", ",", "\n", "keypoints", "[", "mid_face_idx", "]", "[", "'keypoints'", "]", "[", "'mouth_right'", "]", "]", "\n", "return", "np", ".", "array", "(", "facial5points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.__init__": [[7, 13], ["FaceModel.FaceModel._get_model"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel._get_model"], ["    ", "def", "__init__", "(", "self", ",", "model_prefix", ",", "model_epoch", ",", "ctx_id", "=", "7", ")", ":", "\n", "        ", "self", ".", "gpu_id", "=", "ctx_id", "\n", "self", ".", "image_size", "=", "(", "112", ",", "112", ")", "\n", "self", ".", "model_prefix", "=", "model_prefix", "\n", "self", ".", "model_epoch", "=", "model_epoch", "\n", "self", ".", "model", "=", "self", ".", "_get_model", "(", "ctx", "=", "ctx_id", ",", "image_size", "=", "self", ".", "image_size", ",", "prefix", "=", "self", ".", "model_prefix", ",", "epoch", "=", "self", ".", "model_epoch", ",", "layer", "=", "'fc1'", ")", "\n", "", "def", "_get_model", "(", "self", ",", "ctx", ",", "image_size", ",", "prefix", ",", "epoch", ",", "layer", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel._get_model": [[13, 15], ["None"], "methods", ["None"], ["", "def", "_get_model", "(", "self", ",", "ctx", ",", "image_size", ",", "prefix", ",", "epoch", ",", "layer", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel._getFeatureBlob": [[16, 18], ["None"], "methods", ["None"], ["", "def", "_getFeatureBlob", "(", "self", ",", "input_blob", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.get_feature": [[19, 27], ["cv2.imread", "cv2.resize", "numpy.transpose", "numpy.expand_dims", "FaceModel.FaceModel._getFeatureBlob", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize.reshape"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel._getFeatureBlob"], ["", "def", "get_feature", "(", "self", ",", "image_path", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "112", ",", "112", ")", ")", "\n", "a", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "a", "=", "np", ".", "transpose", "(", "a", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "input_blob", "=", "np", ".", "expand_dims", "(", "a", ",", "axis", "=", "0", ")", "\n", "emb", "=", "self", ".", "_getFeatureBlob", "(", "input_blob", ")", "\n", "emb", "=", "normalize", "(", "emb", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "#print(type(emb), emb.shape)", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.get_batch_feature": [[28, 57], ["int", "range", "numpy.vstack", "numpy.vstack", "sklearn.preprocessing.normalize", "len", "numpy.array", "FaceModel.FaceModel._getFeatureBlob", "numpy.vstack.append", "sklearn.preprocessing.normalize.append", "len", "cv2.imread", "cv2.resize", "numpy.transpose", "images.append"], "methods", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel._getFeatureBlob"], ["return", "emb", "\n", "\n", "", "def", "get_batch_feature", "(", "self", ",", "image_path_list", ",", "batch_size", "=", "64", ",", "flip", "=", "0", ")", ":", "\n", "        ", "count", "=", "0", "\n", "num_batch", "=", "int", "(", "len", "(", "image_path_list", ")", "/", "batch_size", ")", "\n", "features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "image_path_list", ")", ",", "batch_size", ")", ":", "\n", "\n", "            ", "if", "count", "<", "num_batch", ":", "\n", "                ", "tmp_list", "=", "image_path_list", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "", "else", ":", "\n", "                ", "tmp_list", "=", "image_path_list", "[", "i", ":", "]", "\n", "", "count", "+=", "1", "\n", "\n", "images", "=", "[", "]", "\n", "for", "image_path", "in", "tmp_list", ":", "\n", "                ", "image", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "112", ",", "112", ")", ")", "\n", "if", "flip", "==", "1", ":", "\n", "                    ", "image", "=", "cv2", ".", "flip", "(", "image", ",", "1", ")", "# flip image horizontally", "\n", "# a = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)", "\n", "", "a", "=", "np", ".", "transpose", "(", "image", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "images", ".", "append", "(", "a", ")", "\n", "", "input_blob", "=", "np", ".", "array", "(", "images", ")", "\n", "\n", "emb", "=", "self", ".", "_getFeatureBlob", "(", "input_blob", ")", "\n", "features", ".", "append", "(", "emb", ")", "\n", "print", "(", "\"batch\"", "+", "str", "(", "i", ")", ")", "\n", "", "features", "=", "np", ".", "vstack", "(", "features", ")", "\n", "features", "=", "normalize", "(", "features", ")", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.crerate_pair_xqlfw.copy_img": [[17, 24], ["os.path.join", "cv2.imread", "cv2.cvtColor", "cv2.imwrite", "os.path.join", "str().zfill", "str"], "function", ["None"], ["def", "copy_img", "(", "person", ",", "img_id", ")", ":", "\n", "    ", "img_name", "=", "f\"{person}_{str(img_id).zfill(4)}.jpg\"", "\n", "tmp_path", "=", "os", ".", "path", ".", "join", "(", "align_path", ",", "person", ",", "img_name", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "tmp_path", ")", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "outpath", ",", "\"images\"", ",", "img_name", ")", ",", "img", ")", "\n", "return", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.crerate_pair_xqlfw.create_xqlfw_pairs": [[26, 52], ["open", "open", "open", "open.close", "open.close", "open.close", "os.path.join", "os.path.join", "open.readlines", "line.strip().split", "open.write", "open.write", "open.write", "len", "crerate_pair_xqlfw.copy_img", "crerate_pair_xqlfw.copy_img", "crerate_pair_xqlfw.copy_img", "crerate_pair_xqlfw.copy_img", "line.strip", "os.path.join", "os.path.join", "int", "len"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.crerate_pair_xqlfw.copy_img", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.crerate_pair_xqlfw.copy_img", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.crerate_pair_xqlfw.copy_img", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.crerate_pair_xqlfw.copy_img"], ["", "def", "create_xqlfw_pairs", "(", "pairs_filename", ")", ":", "\n", "    ", "\"\"\" reads xqlfw pairs.txt and creates pair_list.txt \n    and image_path_list.txt of required format\n    :param pairs_filename: path to pairs.txt\n    \"\"\"", "\n", "txt_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "outpath", ",", "\"image_path_list.txt\"", ")", ",", "\"w\"", ")", "\n", "pair_list", "=", "open", "(", "os", ".", "path", ".", "join", "(", "outpath", ",", "\"pair_list.txt\"", ")", ",", "\"w\"", ")", "\n", "\n", "f", "=", "open", "(", "pairs_filename", ",", "'r'", ")", "\n", "for", "line", "in", "f", ".", "readlines", "(", ")", "[", "1", ":", "]", ":", "\n", "        ", "pair", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "len", "(", "pair", ")", "==", "3", ":", "\n", "            ", "img_name1", "=", "copy_img", "(", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", ")", "\n", "img_name2", "=", "copy_img", "(", "pair", "[", "0", "]", ",", "pair", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "img_name1", "=", "copy_img", "(", "pair", "[", "0", "]", ",", "pair", "[", "1", "]", ")", "\n", "img_name2", "=", "copy_img", "(", "pair", "[", "2", "]", ",", "pair", "[", "3", "]", ")", "\n", "\n", "", "txt_file", ".", "write", "(", "os", ".", "path", ".", "join", "(", "rel_img_path", ",", "img_name1", ")", "+", "\"\\n\"", ")", "\n", "txt_file", ".", "write", "(", "os", ".", "path", ".", "join", "(", "rel_img_path", ",", "img_name2", ")", "+", "\"\\n\"", ")", "\n", "pair_list", ".", "write", "(", "f\"{img_name1} {img_name2} {int(len(pair)==3)}\\n\"", ")", "\n", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "txt_file", ".", "close", "(", ")", "\n", "pair_list", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.getQualityScore.parse_arguments": [[8, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_arguments", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "type", "=", "str", ",", "default", "=", "'./data'", ",", "\n", "help", "=", "'Root dir for evaluation dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--pairs'", ",", "type", "=", "str", ",", "default", "=", "'pairs.txt'", ",", "\n", "help", "=", "'lfw pairs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--datasets'", ",", "type", "=", "str", ",", "default", "=", "'XQLFW'", ",", "\n", "help", "=", "'list of evaluation datasets (,)  e.g.  XQLFW, lfw,calfw,agedb_30,cfp_fp,cplfw,IJBC.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'GPU id.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "\"/home/fboutros/LearnableMargin/output/ResNet50-COSQSArcFace_SmothL1\"", ",", "\n", "help", "=", "'path to pretrained evaluation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_id'", ",", "type", "=", "str", ",", "default", "=", "\"32572\"", ",", "\n", "help", "=", "'digit number in backbone file name'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "type", "=", "str", ",", "default", "=", "\"iresnet50\"", ",", "\n", "help", "=", "' iresnet100 or iresnet50 '", ")", "\n", "parser", ".", "add_argument", "(", "'--score_file_name'", ",", "type", "=", "str", ",", "default", "=", "\"quality_r50.txt\"", ",", "\n", "help", "=", "'score file name, the file will be store in the same data dir'", ")", "\n", "#", "\n", "\n", "return", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.getQualityScore.read_image_list": [[31, 38], ["open", "f.readlines", "image_lists.append", "os.path.join", "l.rstrip"], "function", ["None"], ["", "def", "read_image_list", "(", "image_list_file", ",", "image_dir", "=", "''", ")", ":", "\n", "    ", "image_lists", "=", "[", "]", "\n", "with", "open", "(", "image_list_file", ")", "as", "f", ":", "\n", "        ", "absolute_list", "=", "f", ".", "readlines", "(", ")", "\n", "for", "l", "in", "absolute_list", ":", "\n", "            ", "image_lists", ".", "append", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "l", ".", "rstrip", "(", ")", ")", ")", "\n", "", "", "return", "image_lists", ",", "absolute_list", "\n", "", "def", "main", "(", "param", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.getQualityScore.main": [[38, 50], ["param.datasets.split", "evaluation.QualityModel.QualityModel", "os.path.join", "getQualityScore.read_image_list", "evaluation.QualityModel.QualityModel.get_batch_feature", "os.path.isdir", "open", "range", "os.path.join", "os.path.join", "os.makedirs", "os.path.join", "len", "open.write", "os.path.join", "str", "absolute_list[].rstrip"], "function", ["home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.getQualityScore.read_image_list", "home.repos.pwc.inspect_result.fdbtrs_cr-fiqa.evaluation.FaceModel.FaceModel.get_batch_feature"], ["", "def", "main", "(", "param", ")", ":", "\n", "    ", "datasets", "=", "param", ".", "datasets", ".", "split", "(", "','", ")", "\n", "face_model", "=", "QualityModel", "(", "param", ".", "model_path", ",", "param", ".", "model_id", ",", "param", ".", "gpu_id", ",", "param", ".", "backbone", ")", "\n", "for", "dataset", "in", "datasets", ":", "\n", "        ", "root", "=", "os", ".", "path", ".", "join", "(", "param", ".", "data_dir", ")", "\n", "image_list", ",", "absolute_list", "=", "read_image_list", "(", "os", ".", "path", ".", "join", "(", "param", ".", "data_dir", ",", "'quality_data'", ",", "dataset", ",", "'image_path_list.txt'", ")", ",", "root", ")", "\n", "embedding", ",", "quality", "=", "face_model", ".", "get_batch_feature", "(", "image_list", ",", "batch_size", "=", "16", ")", "\n", "if", "(", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "param", ".", "data_dir", ",", "'quality_data'", ",", "dataset", ")", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "param", ".", "data_dir", ",", "'quality_data'", ",", "dataset", ")", ")", "\n", "", "quality_score", "=", "open", "(", "os", ".", "path", ".", "join", "(", "param", ".", "data_dir", ",", "'quality_data'", ",", "dataset", ",", "param", ".", "score_file_name", ")", ",", "\"a\"", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "quality", ")", ")", ":", "\n", "            ", "quality_score", ".", "write", "(", "absolute_list", "[", "i", "]", ".", "rstrip", "(", ")", "+", "\" \"", "+", "str", "(", "quality", "[", "i", "]", "[", "0", "]", ")", "+", "\"\\n\"", ")", "\n", "\n"]]}