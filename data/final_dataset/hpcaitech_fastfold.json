{"home.repos.pwc.inspect_result.hpcaitech_fastfold.None.inference.add_data_args": [[37, 74], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "datetime.date.today().strftime", "datetime.date.today"], "function", ["None"], ["def", "add_data_args", "(", "parser", ":", "argparse", ".", "ArgumentParser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\n", "'--uniref90_database_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--mgnify_database_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pdb70_database_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--uniclust30_database_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--bfd_database_path'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--jackhmmer_binary_path'", ",", "type", "=", "str", ",", "default", "=", "'/usr/bin/jackhmmer'", ")", "\n", "parser", ".", "add_argument", "(", "'--hhblits_binary_path'", ",", "type", "=", "str", ",", "default", "=", "'/usr/bin/hhblits'", ")", "\n", "parser", ".", "add_argument", "(", "'--hhsearch_binary_path'", ",", "type", "=", "str", ",", "default", "=", "'/usr/bin/hhsearch'", ")", "\n", "parser", ".", "add_argument", "(", "'--kalign_binary_path'", ",", "type", "=", "str", ",", "default", "=", "'/usr/bin/kalign'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max_template_date'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "date", ".", "today", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d\"", ")", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--obsolete_pdbs_path'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--release_dates_path'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.None.inference.main": [[76, 217], ["fastfold.distributed.init_dap", "fastfold.distributed.init_dap", "fastfold.config.model_config", "fastfold.model.hub.AlphaFold", "fastfold.utils.import_weights.import_jax_weights_", "fastfold.utils.inject_fastnn", "model.cuda.eval", "model.cuda.cuda", "fastfold.data.templates.TemplateHitFeaturizer", "fastfold.data.data_pipeline.DataPipeline", "fastfold.data.feature_pipeline.FeaturePipeline", "zip", "random.randrange", "os.path.exists", "os.makedirs", "os.path.join", "open", "torch.distributed.broadcast_object_list", "print", "torch.distributed.barrier", "torch.distributed.barrier", "l.strip", "torch.distributed.get_rank", "os.path.join", "print", "os.path.join", "data_pipeline.DataPipeline.process_fasta", "os.remove", "feature_pipeline.FeaturePipeline.process_features", "torch.no_grad", "time.perf_counter", "model.cuda.", "print", "torch.distributed.get_rank", "fastfold.utils.tensor_utils.tensor_tree_map", "fastfold.utils.tensor_utils.tensor_tree_map", "numpy.mean", "numpy.repeat", "fastfold.common.protein.from_prediction", "os.path.join", "fastfold.AmberRelaxation", "time.perf_counter", "relax.AmberRelaxation.process", "print", "os.path.join", "fp.readlines", "open", "fp.write", "fastfold.data.data_pipeline.AlignmentRunner", "data_pipeline.AlignmentRunner.run", "torch.as_tensor().cuda", "open", "f.write", "open", "f.write", "os.path.exists", "os.makedirs", "fastfold.utils.tensor_utils.tensor_tree_map.items", "numpy.array", "numpy.array", "fastfold.common.protein.to_pdb", "torch.as_tensor", "x[].cpu", "x.cpu", "time.perf_counter", "time.perf_counter"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.core.init_dap", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.core.init_dap", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastfold.config.model_config", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights.import_jax_weights_", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.inject_fastnn", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cuda", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline.process_fasta", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.feature_pipeline.FeaturePipeline.process_features", "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.from_prediction", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.relax.AmberRelaxation.process", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.AlignmentRunner.run", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cuda", "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.to_pdb"], ["", "def", "main", "(", "args", ")", ":", "\n", "# init distributed for Dynamic Axial Parallelism", "\n", "    ", "fastfold", ".", "distributed", ".", "init_dap", "(", ")", "\n", "\n", "config", "=", "model_config", "(", "args", ".", "model_name", ")", "\n", "model", "=", "AlphaFold", "(", "config", ")", "\n", "import_jax_weights_", "(", "model", ",", "args", ".", "param_path", ",", "version", "=", "args", ".", "model_name", ")", "\n", "\n", "model", "=", "inject_fastnn", "(", "model", ")", "\n", "model", "=", "model", ".", "eval", "(", ")", "\n", "#script_preset_(model)", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "template_featurizer", "=", "templates", ".", "TemplateHitFeaturizer", "(", "\n", "mmcif_dir", "=", "args", ".", "template_mmcif_dir", ",", "\n", "max_template_date", "=", "args", ".", "max_template_date", ",", "\n", "max_hits", "=", "config", ".", "data", ".", "predict", ".", "max_templates", ",", "\n", "kalign_binary_path", "=", "args", ".", "kalign_binary_path", ",", "\n", "release_dates_path", "=", "args", ".", "release_dates_path", ",", "\n", "obsolete_pdbs_path", "=", "args", ".", "obsolete_pdbs_path", ")", "\n", "\n", "use_small_bfd", "=", "args", ".", "preset", "==", "'reduced_dbs'", "# (args.bfd_database_path is None)", "\n", "if", "use_small_bfd", ":", "\n", "        ", "assert", "args", ".", "bfd_database_path", "is", "not", "None", "\n", "", "else", ":", "\n", "        ", "assert", "args", ".", "bfd_database_path", "is", "not", "None", "\n", "assert", "args", ".", "uniclust30_database_path", "is", "not", "None", "\n", "\n", "", "data_processor", "=", "data_pipeline", ".", "DataPipeline", "(", "template_featurizer", "=", "template_featurizer", ",", ")", "\n", "\n", "output_dir_base", "=", "args", ".", "output_dir", "\n", "random_seed", "=", "args", ".", "data_random_seed", "\n", "if", "random_seed", "is", "None", ":", "\n", "        ", "random_seed", "=", "random", ".", "randrange", "(", "sys", ".", "maxsize", ")", "\n", "", "feature_processor", "=", "feature_pipeline", ".", "FeaturePipeline", "(", "config", ".", "data", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir_base", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir_base", ")", "\n", "", "if", "(", "args", ".", "use_precomputed_alignments", "is", "None", ")", ":", "\n", "        ", "alignment_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir_base", ",", "\"alignments\"", ")", "\n", "", "else", ":", "\n", "        ", "alignment_dir", "=", "args", ".", "use_precomputed_alignments", "\n", "\n", "# Gather input sequences", "\n", "", "with", "open", "(", "args", ".", "fasta_path", ",", "\"r\"", ")", "as", "fp", ":", "\n", "        ", "lines", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "\n", "", "tags", ",", "seqs", "=", "lines", "[", ":", ":", "2", "]", ",", "lines", "[", "1", ":", ":", "2", "]", "\n", "tags", "=", "[", "l", "[", "1", ":", "]", "for", "l", "in", "tags", "]", "\n", "\n", "for", "tag", ",", "seq", "in", "zip", "(", "tags", ",", "seqs", ")", ":", "\n", "        ", "batch", "=", "[", "None", "]", "\n", "if", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "fasta_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"tmp.fasta\"", ")", "\n", "with", "open", "(", "fasta_path", ",", "\"w\"", ")", "as", "fp", ":", "\n", "                ", "fp", ".", "write", "(", "f\">{tag}\\n{seq}\"", ")", "\n", "\n", "", "print", "(", "\"Generating features...\"", ")", "\n", "local_alignment_dir", "=", "os", ".", "path", ".", "join", "(", "alignment_dir", ",", "tag", ")", "\n", "if", "(", "args", ".", "use_precomputed_alignments", "is", "None", ")", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "local_alignment_dir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "local_alignment_dir", ")", "\n", "\n", "", "alignment_runner", "=", "data_pipeline", ".", "AlignmentRunner", "(", "\n", "jackhmmer_binary_path", "=", "args", ".", "jackhmmer_binary_path", ",", "\n", "hhblits_binary_path", "=", "args", ".", "hhblits_binary_path", ",", "\n", "hhsearch_binary_path", "=", "args", ".", "hhsearch_binary_path", ",", "\n", "uniref90_database_path", "=", "args", ".", "uniref90_database_path", ",", "\n", "mgnify_database_path", "=", "args", ".", "mgnify_database_path", ",", "\n", "bfd_database_path", "=", "args", ".", "bfd_database_path", ",", "\n", "uniclust30_database_path", "=", "args", ".", "uniclust30_database_path", ",", "\n", "pdb70_database_path", "=", "args", ".", "pdb70_database_path", ",", "\n", "use_small_bfd", "=", "use_small_bfd", ",", "\n", "no_cpus", "=", "args", ".", "cpus", ",", "\n", ")", "\n", "alignment_runner", ".", "run", "(", "fasta_path", ",", "local_alignment_dir", ")", "\n", "\n", "", "feature_dict", "=", "data_processor", ".", "process_fasta", "(", "fasta_path", "=", "fasta_path", ",", "\n", "alignment_dir", "=", "local_alignment_dir", ")", "\n", "\n", "# Remove temporary FASTA file", "\n", "os", ".", "remove", "(", "fasta_path", ")", "\n", "\n", "processed_feature_dict", "=", "feature_processor", ".", "process_features", "(", "\n", "feature_dict", ",", "\n", "mode", "=", "'predict'", ",", "\n", ")", "\n", "\n", "batch", "=", "[", "processed_feature_dict", "]", "\n", "\n", "\n", "", "torch", ".", "distributed", ".", "broadcast_object_list", "(", "batch", ",", "src", "=", "0", ")", "\n", "batch", "=", "batch", "[", "0", "]", "\n", "\n", "print", "(", "\"Executing model...\"", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch", "=", "{", "k", ":", "torch", ".", "as_tensor", "(", "v", ")", ".", "cuda", "(", ")", "for", "k", ",", "v", "in", "batch", ".", "items", "(", ")", "}", "\n", "\n", "t", "=", "time", ".", "perf_counter", "(", ")", "\n", "out", "=", "model", "(", "batch", ")", "\n", "print", "(", "f\"Inference time: {time.perf_counter() - t}\"", ")", "\n", "\n", "", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "if", "torch", ".", "distributed", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# Toss out the recycling dimensions --- we don't need them anymore", "\n", "            ", "batch", "=", "tensor_tree_map", "(", "lambda", "x", ":", "np", ".", "array", "(", "x", "[", "...", ",", "-", "1", "]", ".", "cpu", "(", ")", ")", ",", "batch", ")", "\n", "out", "=", "tensor_tree_map", "(", "lambda", "x", ":", "np", ".", "array", "(", "x", ".", "cpu", "(", ")", ")", ",", "out", ")", "\n", "\n", "plddt", "=", "out", "[", "\"plddt\"", "]", "\n", "mean_plddt", "=", "np", ".", "mean", "(", "plddt", ")", "\n", "\n", "plddt_b_factors", "=", "np", ".", "repeat", "(", "plddt", "[", "...", ",", "None", "]", ",", "residue_constants", ".", "atom_type_num", ",", "axis", "=", "-", "1", ")", "\n", "\n", "unrelaxed_protein", "=", "protein", ".", "from_prediction", "(", "features", "=", "batch", ",", "\n", "result", "=", "out", ",", "\n", "b_factors", "=", "plddt_b_factors", ")", "\n", "\n", "# Save the unrelaxed PDB.", "\n", "unrelaxed_output_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\n", "f'{tag}_{args.model_name}_unrelaxed.pdb'", ")", "\n", "with", "open", "(", "unrelaxed_output_path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "protein", ".", "to_pdb", "(", "unrelaxed_protein", ")", ")", "\n", "\n", "", "amber_relaxer", "=", "relax", ".", "AmberRelaxation", "(", "\n", "use_gpu", "=", "True", ",", "\n", "**", "config", ".", "relax", ",", "\n", ")", "\n", "\n", "# Relax the prediction.", "\n", "t", "=", "time", ".", "perf_counter", "(", ")", "\n", "relaxed_pdb_str", ",", "_", ",", "_", "=", "amber_relaxer", ".", "process", "(", "prot", "=", "unrelaxed_protein", ")", "\n", "print", "(", "f\"Relaxation time: {time.perf_counter() - t}\"", ")", "\n", "\n", "# Save the relaxed PDB.", "\n", "relaxed_output_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\n", "f'{tag}_{args.model_name}_relaxed.pdb'", ")", "\n", "with", "open", "(", "relaxed_output_path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "relaxed_pdb_str", ")", "\n", "\n", "", "", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.None.setup.get_cuda_bare_metal_version": [[12, 21], ["subprocess.check_output", "subprocess.check_output.split", "output[].split", "raw_output.split.index", "torch.utils.cpp_extension.CUDA_HOME"], "function", ["None"], ["def", "get_cuda_bare_metal_version", "(", "cuda_dir", ")", ":", "\n", "    ", "raw_output", "=", "subprocess", ".", "check_output", "(", "[", "cuda_dir", "+", "\"/bin/nvcc\"", ",", "\"-V\"", "]", ",", "universal_newlines", "=", "True", ")", "\n", "output", "=", "raw_output", ".", "split", "(", ")", "\n", "release_idx", "=", "output", ".", "index", "(", "\"release\"", ")", "+", "1", "\n", "release", "=", "output", "[", "release_idx", "]", ".", "split", "(", "\".\"", ")", "\n", "bare_metal_major", "=", "release", "[", "0", "]", "\n", "bare_metal_minor", "=", "release", "[", "1", "]", "[", "0", "]", "\n", "\n", "return", "raw_output", ",", "bare_metal_major", ",", "bare_metal_minor", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.None.setup.check_cuda_torch_binary_vs_bare_metal": [[23, 38], ["setup.get_cuda_bare_metal_version", "print", "print", "torch.version.cuda.split", "torch.version.cuda.split", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.None.setup.get_cuda_bare_metal_version"], ["", "def", "check_cuda_torch_binary_vs_bare_metal", "(", "cuda_dir", ")", ":", "\n", "    ", "raw_output", ",", "bare_metal_major", ",", "bare_metal_minor", "=", "get_cuda_bare_metal_version", "(", "cuda_dir", ")", "\n", "torch_binary_major", "=", "torch", ".", "version", ".", "cuda", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "torch_binary_minor", "=", "torch", ".", "version", ".", "cuda", ".", "split", "(", "\".\"", ")", "[", "1", "]", "\n", "\n", "print", "(", "\"\\nCompiling cuda extensions with\"", ")", "\n", "print", "(", "raw_output", "+", "\"from \"", "+", "cuda_dir", "+", "\"/bin\\n\"", ")", "\n", "\n", "if", "(", "bare_metal_major", "!=", "torch_binary_major", ")", "or", "(", "bare_metal_minor", "!=", "torch_binary_minor", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"Cuda extensions are being compiled with a version of Cuda that does \"", "+", "\n", "\"not match the version used to compile Pytorch binaries.  \"", "+", "\n", "\"Pytorch binaries were compiled with Cuda {}.\\n\"", ".", "format", "(", "torch", ".", "version", ".", "cuda", ")", "+", "\n", "\"In some cases, a minor-version mismatch will not cause later errors:  \"", "+", "\n", "\"https://github.com/NVIDIA/apex/pull/323#discussion_r287021798.  \"", "\n", "\"You can try commenting out this check (at your own risk).\"", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.None.setup.append_nvcc_threads": [[41, 46], ["setup.get_cuda_bare_metal_version", "int", "int"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.None.setup.get_cuda_bare_metal_version"], ["", "", "def", "append_nvcc_threads", "(", "nvcc_extra_args", ")", ":", "\n", "    ", "_", ",", "bare_metal_major", ",", "bare_metal_minor", "=", "get_cuda_bare_metal_version", "(", "CUDA_HOME", ")", "\n", "if", "int", "(", "bare_metal_major", ")", ">=", "11", "and", "int", "(", "bare_metal_minor", ")", ">=", "2", ":", "\n", "        ", "return", "nvcc_extra_args", "+", "[", "\"--threads\"", ",", "\"4\"", "]", "\n", "", "return", "nvcc_extra_args", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.test_fastnn.test_layernorm.test_layernorm": [[5, 42], ["torch.device", "torch.rand().to().requires_grad_", "torch.nn.LayerNorm().to", "fastfold.model.fastnn.kernel.LayerNorm.to", "torch.nn.LayerNorm().to.", "FastLayerNorm().to.", "torch.max().cpu().item", "torch.rand_like().requires_grad_", "torch_module.backward", "fastnn_module.backward", "torch.max().cpu().item", "torch.max().cpu().item", "torch.rand().to().requires_grad_.size", "torch.rand().to", "torch.nn.LayerNorm", "fastfold.model.fastnn.kernel.LayerNorm", "torch.max().cpu", "torch.rand_like", "torch.max().cpu", "torch.max().cpu", "torch.rand", "torch.max", "torch.max", "torch.max", "torch.abs", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.device", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.layer_norm.FusedLayerNormAffineFunction.backward", "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.layer_norm.FusedLayerNormAffineFunction.backward", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to"], ["def", "test_layernorm", "(", ")", ":", "\n", "\n", "# [batch, dim]", "\n", "    ", "test_shape", "=", "[", "[", "64", ",", "64", "]", ",", "[", "64", ",", "128", "]", ",", "[", "64", ",", "129", "]", ",", "[", "64", ",", "1024", "]", "]", "\n", "test_dtype", "=", "[", "torch", ".", "float32", ",", "torch", ".", "float16", ",", "torch", ".", "bfloat16", "]", "\n", "test_device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "\n", "tolerance_eps", "=", "{", "torch", ".", "float32", ":", "10e-5", ",", "torch", ".", "float16", ":", "10e-2", ",", "torch", ".", "bfloat16", ":", "10e-2", "}", "\n", "\n", "for", "shape", "in", "test_shape", ":", "\n", "        ", "for", "dtype", "in", "test_dtype", ":", "\n", "            ", "sample_input", "=", "torch", ".", "rand", "(", "shape", ")", ".", "to", "(", "device", "=", "test_device", ",", "\n", "dtype", "=", "dtype", ")", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "dim_", "=", "sample_input", ".", "size", "(", ")", "[", "-", "1", "]", "\n", "torch_module", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "normalized_shape", "=", "dim_", ")", ".", "to", "(", "device", "=", "test_device", ",", "\n", "dtype", "=", "dtype", ")", "\n", "fastnn_module", "=", "FastLayerNorm", "(", "normalized_shape", "=", "dim_", ")", ".", "to", "(", "device", "=", "test_device", ",", "dtype", "=", "dtype", ")", "\n", "\n", "# Forward", "\n", "torch_out", "=", "torch_module", "(", "sample_input", ")", "\n", "fastnn_out", "=", "fastnn_module", "(", "sample_input", ")", "\n", "forward_error", "=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "torch_out", "-", "fastnn_out", ")", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "assert", "forward_error", "<", "tolerance_eps", "[", "dtype", "]", ",", "f\"Error when {shape} {dtype}\"", "\n", "\n", "# Backward", "\n", "out_grad", "=", "torch", ".", "rand_like", "(", "torch_out", ")", ".", "requires_grad_", "(", "False", ")", "\n", "torch_out", ".", "backward", "(", "out_grad", ")", "\n", "fastnn_out", ".", "backward", "(", "out_grad", ")", "\n", "\n", "backward_weight_error", "=", "torch", ".", "max", "(", "\n", "torch", ".", "abs", "(", "torch_module", ".", "weight", ".", "grad", "-", "fastnn_module", ".", "weight", ".", "grad", ")", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "assert", "backward_weight_error", "<", "tolerance_eps", "[", "dtype", "]", ",", "f\"Error when {shape} {dtype}\"", "\n", "\n", "backward_bias_error", "=", "torch", ".", "max", "(", "\n", "torch", ".", "abs", "(", "torch_module", ".", "bias", ".", "grad", "-", "fastnn_module", ".", "bias", ".", "grad", ")", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "assert", "backward_bias_error", "<", "tolerance_eps", "[", "dtype", "]", ",", "f\"Error when {shape} {dtype}\"", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.test_fastnn.test_softmax.test_softmax": [[5, 35], ["torch.device", "torch.rand().to().requires_grad_", "torch.clone().requires_grad_", "torch.nn.functional.softmax", "fastfold.model.fastnn.kernel.softmax", "torch.max().cpu().item", "torch.rand_like().requires_grad_", "torch.nn.functional.softmax.backward", "fastfold.model.fastnn.kernel.softmax.backward", "torch.max().cpu().item", "torch.rand().to", "torch.clone", "torch.max().cpu", "torch.rand_like", "torch.max().cpu", "torch.rand().to().requires_grad_.detach", "torch.rand", "torch.max", "torch.max", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.device", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax", "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.layer_norm.FusedLayerNormAffineFunction.backward", "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.layer_norm.FusedLayerNormAffineFunction.backward", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach"], ["def", "test_softmax", "(", ")", ":", "\n", "\n", "# [batch, dim]", "\n", "    ", "test_shape", "=", "[", "[", "64", ",", "64", "]", ",", "[", "64", ",", "128", "]", ",", "[", "64", ",", "129", "]", ",", "[", "64", ",", "1024", "]", "]", "\n", "test_dtype", "=", "[", "torch", ".", "float32", ",", "torch", ".", "float16", ",", "torch", ".", "bfloat16", "]", "\n", "test_device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "\n", "tolerance_eps", "=", "{", "torch", ".", "float32", ":", "10e-5", ",", "torch", ".", "float16", ":", "10e-2", ",", "torch", ".", "bfloat16", ":", "10e-2", "}", "\n", "\n", "for", "shape", "in", "test_shape", ":", "\n", "        ", "for", "dtype", "in", "test_dtype", ":", "\n", "            ", "sample_input", "=", "torch", ".", "rand", "(", "shape", ")", ".", "to", "(", "device", "=", "test_device", ",", "\n", "dtype", "=", "dtype", ")", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "sample_input_fastnn", "=", "torch", ".", "clone", "(", "sample_input", ".", "detach", "(", ")", ")", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "# Forward", "\n", "torch_out", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "sample_input", ",", "dim", "=", "-", "1", ")", "\n", "fastnn_out", "=", "softmax", "(", "sample_input_fastnn", ")", "\n", "forward_error", "=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "torch_out", "-", "fastnn_out", ")", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "assert", "forward_error", "<", "tolerance_eps", "[", "dtype", "]", ",", "f\"Error when {shape} {dtype}\"", "\n", "\n", "# Backward", "\n", "out_grad", "=", "torch", ".", "rand_like", "(", "torch_out", ")", ".", "requires_grad_", "(", "False", ")", "\n", "torch_out", ".", "backward", "(", "out_grad", ")", "\n", "fastnn_out", ".", "backward", "(", "out_grad", ")", "\n", "\n", "backward_error", "=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "sample_input", ".", "grad", "-", "\n", "sample_input_fastnn", ".", "grad", ")", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "assert", "backward_error", "<", "tolerance_eps", "[", "dtype", "]", ",", "f\"Error when {shape} {dtype}\"", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.benchmark.perf.main": [[11, 175], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "fastfold.distributed.init_dap", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "range", "range", "torch.randn().requires_grad_", "torch.randn().requires_grad_", "torch.randn().requires_grad_", "torch.randn().requires_grad_", "torch.ones().requires_grad_", "torch.ones().requires_grad_", "torch.ones().requires_grad_", "torch.ones().requires_grad_", "torch.randn_like", "torch.randn_like", "range", "torch.distributed.barrier", "torch.distributed.barrier", "torch.cuda.synchronize", "torch.cuda.synchronize", "range", "print", "torch.cuda.is_available", "torch.cuda.is_available", "NotImplementedError", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "attn_layers[].cuda", "attn_layers[].to", "start_evt_fwd.append", "start_evt_bwd.append", "stop_evt_bwd.append", "torch.profiler.profile", "torch.profiler.profile", "torch.profiler.profile.start", "torch.distributed.barrier", "torch.distributed.barrier", "torch.cuda.synchronize", "torch.cuda.synchronize", "range", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.profiler.profile.stop", "start_evt_fwd[].elapsed_time", "start_evt_bwd[].elapsed_time", "attn_layers.append", "attn_layers.append", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "start_evt_fwd[].record", "attn_layers[].forward", "start_evt_bwd[].record", "layer_inputs[].backward", "stop_evt_bwd[].record", "torch.profiler.profile.step", "super().__init__", "int", "int", "EvoformerBlock", "perf..EvoformerBlock", "OpenFoldEvoformer", "fastfold.model.fastnn.Evoformer", "torch.profiler.schedule", "torch.profiler.schedule", "torch.profiler.tensorboard_trace_handler", "torch.profiler.tensorboard_trace_handler", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.core.init_dap", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cuda", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.hub.alphafold.AlphaFold.forward", "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.layer_norm.FusedLayerNormAffineFunction.backward", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.device", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.device", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.device", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.device", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.device", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.device", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.device", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.device"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Evoformer Standalone Perf Benchmark'", ")", "\n", "parser", ".", "add_argument", "(", "\"--dap-size\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--msa-length'", ",", "default", "=", "132", ",", "type", "=", "int", ",", "help", "=", "'Sequence Length of MSA'", ")", "\n", "parser", ".", "add_argument", "(", "'--res-length'", ",", "\n", "default", "=", "256", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Sequence Length of Residues'", ")", "\n", "parser", ".", "add_argument", "(", "'--trials'", ",", "default", "=", "50", ",", "type", "=", "int", ",", "help", "=", "'Number of Trials to Execute'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-trials'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'Warmup Trials to discard'", ")", "\n", "parser", ".", "add_argument", "(", "'--layers'", ",", "\n", "default", "=", "12", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'Evoformer Layers to Execute'", ")", "\n", "parser", ".", "add_argument", "(", "'--cm'", ",", "default", "=", "256", ",", "type", "=", "int", ",", "help", "=", "'MSA hidden dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--cz'", ",", "default", "=", "128", ",", "type", "=", "int", ",", "help", "=", "'Pair hidden dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--heads'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'Number of Multihead Attention heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--openfold'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Benchmark with Evoformer Implementation from OpenFold.'", ")", "\n", "parser", ".", "add_argument", "(", "'--fwd'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Only execute Fwd Pass.'", ")", "\n", "parser", ".", "add_argument", "(", "'--prof'", ",", "action", "=", "'store_true'", ",", "help", "=", "'run with profiler.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "init_dap", "(", "args", ".", "dap_size", ")", "\n", "\n", "precision", "=", "torch", ".", "bfloat16", "\n", "if", "args", ".", "dap_size", ">", "1", ":", "\n", "# (PyTorch issue) Currently All2All communication does not support the Bfloat16 datatype in PyTorch", "\n", "        ", "precision", "=", "torch", ".", "float16", "\n", "\n", "", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Running on CPU is not supported'", ")", "\n", "\n", "", "torch", ".", "manual_seed", "(", "42", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "42", ")", "\n", "\n", "", "if", "args", ".", "openfold", ":", "\n", "        ", "from", "openfold", ".", "model", ".", "evoformer", "import", "EvoformerBlock", "\n", "\n", "class", "OpenFoldEvoformer", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "            ", "def", "__init__", "(", "self", ",", "d_node", ",", "d_pair", ")", ":", "\n", "                ", "super", "(", "OpenFoldEvoformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_node", "=", "d_node", "\n", "self", ".", "d_pair", "=", "d_pair", "\n", "\n", "self", ".", "c_hidden_msa_att", "=", "int", "(", "d_node", "/", "8", ")", "\n", "self", ".", "c_hidden_pair_att", "=", "int", "(", "d_pair", "/", "8", ")", "\n", "\n", "self", ".", "EvoformerBlock", "=", "EvoformerBlock", "(", "c_m", "=", "d_node", ",", "\n", "c_z", "=", "d_pair", ",", "\n", "c_hidden_msa_att", "=", "self", ".", "c_hidden_msa_att", ",", "\n", "c_hidden_opm", "=", "self", ".", "c_hidden_msa_att", ",", "\n", "c_hidden_mul", "=", "self", ".", "d_pair", ",", "\n", "c_hidden_pair_att", "=", "self", ".", "c_hidden_pair_att", ",", "\n", "no_heads_msa", "=", "8", ",", "\n", "no_heads_pair", "=", "4", ",", "\n", "transition_n", "=", "4", ",", "\n", "msa_dropout", "=", "0.15", ",", "\n", "pair_dropout", "=", "0.25", ",", "\n", "inf", "=", "1e9", ",", "\n", "eps", "=", "1e-10", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "node", ",", "pair", ",", "node_mask", ",", "pair_mask", ")", ":", "\n", "                ", "node", ",", "pair", "=", "self", ".", "EvoformerBlock", "(", "node", ",", "pair", ",", "node_mask", ",", "pair_mask", ")", "\n", "return", "node", ",", "pair", "\n", "\n", "", "", "", "attn_layers", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "0", ",", "args", ".", "layers", ")", ":", "\n", "        ", "if", "args", ".", "openfold", ":", "\n", "            ", "attn_layers", ".", "append", "(", "OpenFoldEvoformer", "(", "d_node", "=", "args", ".", "cm", ",", "d_pair", "=", "args", ".", "cz", ")", ")", "\n", "", "else", ":", "\n", "            ", "attn_layers", ".", "append", "(", "Evoformer", "(", "d_node", "=", "args", ".", "cm", ",", "d_pair", "=", "args", ".", "cz", ")", ")", "\n", "", "attn_layers", "[", "idx", "]", ".", "cuda", "(", ")", "\n", "attn_layers", "[", "idx", "]", ".", "to", "(", "dtype", "=", "precision", ")", "\n", "\n", "", "start_evt_fwd", "=", "[", "]", "\n", "start_evt_bwd", "=", "[", "]", "\n", "stop_evt_bwd", "=", "[", "]", "\n", "for", "recorded_trial", "in", "range", "(", "0", ",", "args", ".", "trials", ")", ":", "\n", "        ", "start_evt_fwd", ".", "append", "(", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", ")", "\n", "start_evt_bwd", ".", "append", "(", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", ")", "\n", "stop_evt_bwd", ".", "append", "(", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", ")", "\n", "\n", "", "inputs_node", "=", "torch", ".", "randn", "(", "args", ".", "batch_size", ",", "\n", "args", ".", "msa_length", "//", "args", ".", "dap_size", ",", "\n", "args", ".", "res_length", ",", "\n", "args", ".", "cm", ",", "\n", "dtype", "=", "precision", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "requires_grad_", "(", "True", ")", "\n", "inputs_pair", "=", "torch", ".", "randn", "(", "args", ".", "batch_size", ",", "\n", "args", ".", "res_length", "//", "args", ".", "dap_size", ",", "\n", "args", ".", "res_length", ",", "\n", "args", ".", "cz", ",", "\n", "dtype", "=", "precision", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "requires_grad_", "(", "True", ")", "\n", "node_mask", "=", "torch", ".", "ones", "(", "(", "args", ".", "batch_size", ",", "args", ".", "msa_length", ",", "args", ".", "res_length", ")", ",", "\n", "dtype", "=", "precision", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "requires_grad_", "(", "False", ")", "\n", "pair_mask", "=", "torch", ".", "ones", "(", "(", "args", ".", "batch_size", ",", "args", ".", "res_length", ",", "args", ".", "res_length", ")", ",", "\n", "dtype", "=", "precision", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", ")", ".", "requires_grad_", "(", "False", ")", "\n", "grads_node", "=", "torch", ".", "randn_like", "(", "inputs_pair", ")", "\n", "\n", "if", "args", ".", "prof", ":", "\n", "        ", "prof", "=", "torch", ".", "profiler", ".", "profile", "(", "\n", "schedule", "=", "torch", ".", "profiler", ".", "schedule", "(", "wait", "=", "1", ",", "\n", "warmup", "=", "args", ".", "warmup_trials", ",", "\n", "active", "=", "args", ".", "trials", ",", "\n", "repeat", "=", "1", ")", ",", "\n", "on_trace_ready", "=", "torch", ".", "profiler", ".", "tensorboard_trace_handler", "(", "'./log/fastfold'", ")", ",", "\n", "profile_memory", "=", "False", ",", "\n", "record_shapes", "=", "False", ",", "\n", "with_stack", "=", "False", ")", "\n", "prof", ".", "start", "(", ")", "\n", "\n", "", "for", "trial", "in", "range", "(", "0", ",", "args", ".", "trials", "+", "args", ".", "warmup_trials", ")", ":", "\n", "        ", "layer_inputs", "=", "inputs_node", ",", "inputs_pair", "\n", "evt_idx", "=", "trial", "-", "args", ".", "warmup_trials", "\n", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "if", "evt_idx", ">=", "0", ":", "\n", "            ", "start_evt_fwd", "[", "evt_idx", "]", ".", "record", "(", ")", "\n", "\n", "", "for", "lyr_idx", "in", "range", "(", "0", ",", "args", ".", "layers", ")", ":", "\n", "            ", "layer_inputs", "=", "attn_layers", "[", "lyr_idx", "]", ".", "forward", "(", "*", "layer_inputs", ",", "node_mask", ",", "pair_mask", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "if", "evt_idx", ">=", "0", ":", "\n", "            ", "start_evt_bwd", "[", "evt_idx", "]", ".", "record", "(", ")", "\n", "\n", "", "if", "not", "args", ".", "fwd", ":", "\n", "            ", "layer_inputs", "[", "1", "]", ".", "backward", "(", "grads_node", ")", "\n", "\n", "", "if", "evt_idx", ">=", "0", ":", "\n", "            ", "stop_evt_bwd", "[", "evt_idx", "]", ".", "record", "(", ")", "\n", "\n", "", "if", "args", ".", "prof", ":", "\n", "            ", "prof", ".", "step", "(", ")", "\n", "\n", "", "", "if", "args", ".", "prof", ":", "\n", "        ", "prof", ".", "stop", "(", ")", "\n", "\n", "", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "elapsed_time_fwd", "=", "0.0", "\n", "elapsed_time_bwd", "=", "0.0", "\n", "for", "evt_idx", "in", "range", "(", "0", ",", "args", ".", "trials", ")", ":", "\n", "        ", "elapsed_time_fwd", "+=", "start_evt_fwd", "[", "evt_idx", "]", ".", "elapsed_time", "(", "start_evt_bwd", "[", "evt_idx", "]", ")", "\n", "elapsed_time_bwd", "+=", "start_evt_bwd", "[", "evt_idx", "]", ".", "elapsed_time", "(", "stop_evt_bwd", "[", "evt_idx", "]", ")", "\n", "\n", "", "print", "(", "\"[ MSA Attn ] Input: {:4d}, {:4d}, {:4d}, ({:4d} {:4d}) Fwd Time / Layer: {:.3f} ms Bwd Time / Layer: {:.3f} ms\"", ".", "format", "(", "\n", "args", ".", "batch_size", ",", "args", ".", "msa_length", ",", "args", ".", "res_length", ",", "args", ".", "cm", ",", "args", ".", "cz", ",", "elapsed_time_fwd", "/", "(", "args", ".", "trials", "*", "args", ".", "layers", ")", ",", "elapsed_time_bwd", "/", "(", "args", ".", "trials", "*", "args", ".", "layers", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastfold.config.set_inf": [[5, 11], ["c.items", "isinstance", "config.set_inf"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.fastfold.config.set_inf"], ["def", "set_inf", "(", "c", ",", "inf", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "c", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "mlc", ".", "ConfigDict", ")", ":", "\n", "            ", "set_inf", "(", "v", ",", "inf", ")", "\n", "", "elif", "k", "==", "\"inf\"", ":", "\n", "            ", "c", "[", "k", "]", "=", "inf", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastfold.config.model_config": [[13, 91], ["copy.deepcopy", "config.set_inf", "ValueError"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.fastfold.config.set_inf"], ["", "", "", "def", "model_config", "(", "name", ",", "train", "=", "False", ",", "low_prec", "=", "False", ")", ":", "\n", "    ", "c", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "if", "name", "==", "\"initial_training\"", ":", "\n", "# AF2 Suppl. Table 4, \"initial training\" setting", "\n", "        ", "pass", "\n", "", "elif", "name", "==", "\"finetuning\"", ":", "\n", "# AF2 Suppl. Table 4, \"finetuning\" setting", "\n", "        ", "c", ".", "data", ".", "common", ".", "max_extra_msa", "=", "5120", "\n", "c", ".", "data", ".", "train", ".", "crop_size", "=", "384", "\n", "c", ".", "data", ".", "train", ".", "max_msa_clusters", "=", "512", "\n", "c", ".", "loss", ".", "violation", ".", "weight", "=", "1.", "\n", "", "elif", "name", "==", "\"model_1\"", ":", "\n", "# AF2 Suppl. Table 5, Model 1.1.1", "\n", "        ", "c", ".", "data", ".", "common", ".", "max_extra_msa", "=", "5120", "\n", "c", ".", "data", ".", "common", ".", "reduce_max_clusters_by_max_templates", "=", "True", "\n", "c", ".", "data", ".", "common", ".", "use_templates", "=", "True", "\n", "c", ".", "data", ".", "common", ".", "use_template_torsion_angles", "=", "True", "\n", "c", ".", "model", ".", "template", ".", "enabled", "=", "True", "\n", "", "elif", "name", "==", "\"model_2\"", ":", "\n", "# AF2 Suppl. Table 5, Model 1.1.2", "\n", "        ", "c", ".", "data", ".", "common", ".", "reduce_max_clusters_by_max_templates", "=", "True", "\n", "c", ".", "data", ".", "common", ".", "use_templates", "=", "True", "\n", "c", ".", "data", ".", "common", ".", "use_template_torsion_angles", "=", "True", "\n", "c", ".", "model", ".", "template", ".", "enabled", "=", "True", "\n", "", "elif", "name", "==", "\"model_3\"", ":", "\n", "# AF2 Suppl. Table 5, Model 1.2.1", "\n", "        ", "c", ".", "data", ".", "common", ".", "max_extra_msa", "=", "5120", "\n", "c", ".", "model", ".", "template", ".", "enabled", "=", "False", "\n", "", "elif", "name", "==", "\"model_4\"", ":", "\n", "# AF2 Suppl. Table 5, Model 1.2.2", "\n", "        ", "c", ".", "data", ".", "common", ".", "max_extra_msa", "=", "5120", "\n", "c", ".", "model", ".", "template", ".", "enabled", "=", "False", "\n", "", "elif", "name", "==", "\"model_5\"", ":", "\n", "# AF2 Suppl. Table 5, Model 1.2.3", "\n", "        ", "c", ".", "model", ".", "template", ".", "enabled", "=", "False", "\n", "", "elif", "name", "==", "\"model_1_ptm\"", ":", "\n", "        ", "c", ".", "data", ".", "common", ".", "max_extra_msa", "=", "5120", "\n", "c", ".", "data", ".", "common", ".", "reduce_max_clusters_by_max_templates", "=", "True", "\n", "c", ".", "data", ".", "common", ".", "use_templates", "=", "True", "\n", "c", ".", "data", ".", "common", ".", "use_template_torsion_angles", "=", "True", "\n", "c", ".", "model", ".", "template", ".", "enabled", "=", "True", "\n", "c", ".", "model", ".", "heads", ".", "tm", ".", "enabled", "=", "True", "\n", "c", ".", "loss", ".", "tm", ".", "weight", "=", "0.1", "\n", "", "elif", "name", "==", "\"model_2_ptm\"", ":", "\n", "        ", "c", ".", "data", ".", "common", ".", "reduce_max_clusters_by_max_templates", "=", "True", "\n", "c", ".", "data", ".", "common", ".", "use_templates", "=", "True", "\n", "c", ".", "data", ".", "common", ".", "use_template_torsion_angles", "=", "True", "\n", "c", ".", "model", ".", "template", ".", "enabled", "=", "True", "\n", "c", ".", "model", ".", "heads", ".", "tm", ".", "enabled", "=", "True", "\n", "c", ".", "loss", ".", "tm", ".", "weight", "=", "0.1", "\n", "", "elif", "name", "==", "\"model_3_ptm\"", ":", "\n", "        ", "c", ".", "data", ".", "common", ".", "max_extra_msa", "=", "5120", "\n", "c", ".", "model", ".", "template", ".", "enabled", "=", "False", "\n", "c", ".", "model", ".", "heads", ".", "tm", ".", "enabled", "=", "True", "\n", "c", ".", "loss", ".", "tm", ".", "weight", "=", "0.1", "\n", "", "elif", "name", "==", "\"model_4_ptm\"", ":", "\n", "        ", "c", ".", "data", ".", "common", ".", "max_extra_msa", "=", "5120", "\n", "c", ".", "model", ".", "template", ".", "enabled", "=", "False", "\n", "c", ".", "model", ".", "heads", ".", "tm", ".", "enabled", "=", "True", "\n", "c", ".", "loss", ".", "tm", ".", "weight", "=", "0.1", "\n", "", "elif", "name", "==", "\"model_5_ptm\"", ":", "\n", "        ", "c", ".", "model", ".", "template", ".", "enabled", "=", "False", "\n", "c", ".", "model", ".", "heads", ".", "tm", ".", "enabled", "=", "True", "\n", "c", ".", "loss", ".", "tm", ".", "weight", "=", "0.1", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid model name\"", ")", "\n", "\n", "", "if", "train", ":", "\n", "        ", "c", ".", "globals", ".", "blocks_per_ckpt", "=", "1", "\n", "c", ".", "globals", ".", "chunk_size", "=", "None", "\n", "\n", "", "if", "low_prec", ":", "\n", "        ", "c", ".", "globals", ".", "eps", "=", "1e-4", "\n", "# If we want exact numerical parity with the original, inf can't be", "\n", "# a global constant", "\n", "set_inf", "(", "c", ",", "1e4", ")", "\n", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.checkpointing.get_checkpoint_fn": [[24, 28], ["None"], "function", ["None"], ["def", "get_checkpoint_fn", "(", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "utils", ".", "checkpoint", ".", "checkpoint", "\n", "\n", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.checkpointing.checkpoint_blocks": [[30, 85], ["checkpointing.checkpoint_blocks.wrap"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "checkpoint_blocks", "(", "\n", "blocks", ":", "List", "[", "Callable", "]", ",", "\n", "args", ":", "BLOCK_ARGS", ",", "\n", "blocks_per_ckpt", ":", "Optional", "[", "int", "]", ",", "\n", ")", "->", "BLOCK_ARGS", ":", "\n", "    ", "\"\"\"\n    Chunk a list of blocks and run each chunk with activation\n    checkpointing. We define a \"block\" as a callable whose only inputs are\n    the outputs of the previous block.\n\n    Implements Subsection 1.11.8\n\n    Args:\n        blocks:\n            List of blocks\n        args:\n            Tuple of arguments for the first block.\n        blocks_per_ckpt:\n            Size of each chunk. A higher value corresponds to fewer \n            checkpoints, and trades memory for speed. If None, no checkpointing \n            is performed.\n    Returns:\n        The output of the final block\n    \"\"\"", "\n", "def", "wrap", "(", "a", ")", ":", "\n", "        ", "return", "(", "a", ",", ")", "if", "type", "(", "a", ")", "is", "not", "tuple", "else", "a", "\n", "\n", "", "def", "exec", "(", "b", ",", "a", ")", ":", "\n", "        ", "for", "block", "in", "b", ":", "\n", "            ", "a", "=", "wrap", "(", "block", "(", "*", "a", ")", ")", "\n", "", "return", "a", "\n", "\n", "", "def", "chunker", "(", "s", ",", "e", ")", ":", "\n", "        ", "def", "exec_sliced", "(", "*", "a", ")", ":", "\n", "            ", "return", "exec", "(", "blocks", "[", "s", ":", "e", "]", ",", "a", ")", "\n", "\n", "", "return", "exec_sliced", "\n", "\n", "# Avoids mishaps when the blocks take just one argument", "\n", "", "args", "=", "wrap", "(", "args", ")", "\n", "\n", "if", "blocks_per_ckpt", "is", "None", ":", "\n", "        ", "return", "exec", "(", "blocks", ",", "args", ")", "\n", "", "elif", "blocks_per_ckpt", "<", "1", "or", "blocks_per_ckpt", ">", "len", "(", "blocks", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"blocks_per_ckpt must be between 1 and len(blocks)\"", ")", "\n", "\n", "", "checkpoint", "=", "get_checkpoint_fn", "(", ")", "\n", "\n", "for", "s", "in", "range", "(", "0", ",", "len", "(", "blocks", ")", ",", "blocks_per_ckpt", ")", ":", "\n", "        ", "e", "=", "s", "+", "blocks_per_ckpt", "\n", "args", "=", "checkpoint", "(", "chunker", "(", "s", ",", "e", ")", ",", "*", "args", ")", "\n", "args", "=", "wrap", "(", "args", ")", "\n", "\n", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.feats.pseudo_beta_fn": [[34, 53], ["torch.where", "torch.where", "is_gly[].expand", "torch.where", "torch.where", "len"], "function", ["None"], ["def", "pseudo_beta_fn", "(", "aatype", ",", "all_atom_positions", ",", "all_atom_masks", ")", ":", "\n", "    ", "is_gly", "=", "aatype", "==", "rc", ".", "restype_order", "[", "\"G\"", "]", "\n", "ca_idx", "=", "rc", ".", "atom_order", "[", "\"CA\"", "]", "\n", "cb_idx", "=", "rc", ".", "atom_order", "[", "\"CB\"", "]", "\n", "pseudo_beta", "=", "torch", ".", "where", "(", "\n", "is_gly", "[", "...", ",", "None", "]", ".", "expand", "(", "*", "(", "(", "-", "1", ",", ")", "*", "len", "(", "is_gly", ".", "shape", ")", ")", ",", "3", ")", ",", "\n", "all_atom_positions", "[", "...", ",", "ca_idx", ",", ":", "]", ",", "\n", "all_atom_positions", "[", "...", ",", "cb_idx", ",", ":", "]", ",", "\n", ")", "\n", "\n", "if", "all_atom_masks", "is", "not", "None", ":", "\n", "        ", "pseudo_beta_mask", "=", "torch", ".", "where", "(", "\n", "is_gly", ",", "\n", "all_atom_masks", "[", "...", ",", "ca_idx", "]", ",", "\n", "all_atom_masks", "[", "...", ",", "cb_idx", "]", ",", "\n", ")", "\n", "return", "pseudo_beta", ",", "pseudo_beta_mask", "\n", "", "else", ":", "\n", "        ", "return", "pseudo_beta", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.feats.atom14_to_atom37": [[55, 66], ["fastfold.utils.tensor_utils.batched_gather", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.batched_gather"], ["", "", "def", "atom14_to_atom37", "(", "atom14", ",", "batch", ")", ":", "\n", "    ", "atom37_data", "=", "batched_gather", "(", "\n", "atom14", ",", "\n", "batch", "[", "\"residx_atom37_to_atom14\"", "]", ",", "\n", "dim", "=", "-", "2", ",", "\n", "no_batch_dims", "=", "len", "(", "atom14", ".", "shape", "[", ":", "-", "2", "]", ")", ",", "\n", ")", "\n", "\n", "atom37_data", "=", "atom37_data", "*", "batch", "[", "\"atom37_atom_exists\"", "]", "[", "...", ",", "None", "]", "\n", "\n", "return", "atom37_data", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.feats.build_template_angle_feat": [[68, 90], ["torch.cat", "torch.cat", "torch.functional.one_hot", "torsion_angles_sin_cos.reshape", "alt_torsion_angles_sin_cos.reshape"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot"], ["", "def", "build_template_angle_feat", "(", "template_feats", ")", ":", "\n", "    ", "template_aatype", "=", "template_feats", "[", "\"template_aatype\"", "]", "\n", "torsion_angles_sin_cos", "=", "template_feats", "[", "\"template_torsion_angles_sin_cos\"", "]", "\n", "alt_torsion_angles_sin_cos", "=", "template_feats", "[", "\n", "\"template_alt_torsion_angles_sin_cos\"", "\n", "]", "\n", "torsion_angles_mask", "=", "template_feats", "[", "\"template_torsion_angles_mask\"", "]", "\n", "template_angle_feat", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "nn", ".", "functional", ".", "one_hot", "(", "template_aatype", ",", "22", ")", ",", "\n", "torsion_angles_sin_cos", ".", "reshape", "(", "\n", "*", "torsion_angles_sin_cos", ".", "shape", "[", ":", "-", "2", "]", ",", "14", "\n", ")", ",", "\n", "alt_torsion_angles_sin_cos", ".", "reshape", "(", "\n", "*", "alt_torsion_angles_sin_cos", ".", "shape", "[", ":", "-", "2", "]", ",", "14", "\n", ")", ",", "\n", "torsion_angles_mask", ",", "\n", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "\n", "return", "template_angle_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.feats.build_template_pair_feat": [[92, 160], ["torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.functional.one_hot", "to_concat.append", "to_concat.append", "fastfold.utils.rigid_utils.Rigid.make_transform_from_reference", "rigids[].invert_apply", "torch.rsqrt", "torch.rsqrt", "to_concat.extend", "to_concat.append", "torch.cat", "torch.cat", "torch.linspace", "torch.linspace", "aatype_one_hot[].expand", "aatype_one_hot[].expand", "Rigid.make_transform_from_reference.get_trans", "torch.unbind", "torch.unbind", "lower.new_tensor", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.make_transform_from_reference", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.invert_apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_trans"], ["", "def", "build_template_pair_feat", "(", "\n", "batch", ",", "\n", "min_bin", ",", "max_bin", ",", "no_bins", ",", "\n", "use_unit_vector", "=", "False", ",", "\n", "eps", "=", "1e-20", ",", "inf", "=", "1e8", "\n", ")", ":", "\n", "    ", "template_mask", "=", "batch", "[", "\"template_pseudo_beta_mask\"", "]", "\n", "template_mask_2d", "=", "template_mask", "[", "...", ",", "None", "]", "*", "template_mask", "[", "...", ",", "None", ",", ":", "]", "\n", "\n", "# Compute distogram (this seems to differ slightly from Alg. 5)", "\n", "tpb", "=", "batch", "[", "\"template_pseudo_beta\"", "]", "\n", "dgram", "=", "torch", ".", "sum", "(", "\n", "(", "tpb", "[", "...", ",", "None", ",", ":", "]", "-", "tpb", "[", "...", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", "\n", ")", "\n", "lower", "=", "torch", ".", "linspace", "(", "min_bin", ",", "max_bin", ",", "no_bins", ",", "device", "=", "tpb", ".", "device", ")", "**", "2", "\n", "upper", "=", "torch", ".", "cat", "(", "[", "lower", "[", "1", ":", "]", ",", "lower", ".", "new_tensor", "(", "[", "inf", "]", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "dgram", "=", "(", "(", "dgram", ">", "lower", ")", "*", "(", "dgram", "<", "upper", ")", ")", ".", "type", "(", "dgram", ".", "dtype", ")", "\n", "\n", "to_concat", "=", "[", "dgram", ",", "template_mask_2d", "[", "...", ",", "None", "]", "]", "\n", "\n", "aatype_one_hot", "=", "nn", ".", "functional", ".", "one_hot", "(", "\n", "batch", "[", "\"template_aatype\"", "]", ",", "\n", "rc", ".", "restype_num", "+", "2", ",", "\n", ")", "\n", "\n", "n_res", "=", "batch", "[", "\"template_aatype\"", "]", ".", "shape", "[", "-", "1", "]", "\n", "to_concat", ".", "append", "(", "\n", "aatype_one_hot", "[", "...", ",", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "\n", "*", "aatype_one_hot", ".", "shape", "[", ":", "-", "2", "]", ",", "n_res", ",", "-", "1", ",", "-", "1", "\n", ")", "\n", ")", "\n", "to_concat", ".", "append", "(", "\n", "aatype_one_hot", "[", "...", ",", "None", ",", ":", "]", ".", "expand", "(", "\n", "*", "aatype_one_hot", ".", "shape", "[", ":", "-", "2", "]", ",", "-", "1", ",", "n_res", ",", "-", "1", "\n", ")", "\n", ")", "\n", "\n", "n", ",", "ca", ",", "c", "=", "[", "rc", ".", "atom_order", "[", "a", "]", "for", "a", "in", "[", "\"N\"", ",", "\"CA\"", ",", "\"C\"", "]", "]", "\n", "rigids", "=", "Rigid", ".", "make_transform_from_reference", "(", "\n", "n_xyz", "=", "batch", "[", "\"template_all_atom_positions\"", "]", "[", "...", ",", "n", ",", ":", "]", ",", "\n", "ca_xyz", "=", "batch", "[", "\"template_all_atom_positions\"", "]", "[", "...", ",", "ca", ",", ":", "]", ",", "\n", "c_xyz", "=", "batch", "[", "\"template_all_atom_positions\"", "]", "[", "...", ",", "c", ",", ":", "]", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n", "points", "=", "rigids", ".", "get_trans", "(", ")", "[", "...", ",", "None", ",", ":", ",", ":", "]", "\n", "rigid_vec", "=", "rigids", "[", "...", ",", "None", "]", ".", "invert_apply", "(", "points", ")", "\n", "\n", "inv_distance_scalar", "=", "torch", ".", "rsqrt", "(", "eps", "+", "torch", ".", "sum", "(", "rigid_vec", "**", "2", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "t_aa_masks", "=", "batch", "[", "\"template_all_atom_mask\"", "]", "\n", "template_mask", "=", "(", "\n", "t_aa_masks", "[", "...", ",", "n", "]", "*", "t_aa_masks", "[", "...", ",", "ca", "]", "*", "t_aa_masks", "[", "...", ",", "c", "]", "\n", ")", "\n", "template_mask_2d", "=", "template_mask", "[", "...", ",", "None", "]", "*", "template_mask", "[", "...", ",", "None", ",", ":", "]", "\n", "\n", "inv_distance_scalar", "=", "inv_distance_scalar", "*", "template_mask_2d", "\n", "unit_vector", "=", "rigid_vec", "*", "inv_distance_scalar", "[", "...", ",", "None", "]", "\n", "\n", "if", "(", "not", "use_unit_vector", ")", ":", "\n", "        ", "unit_vector", "=", "unit_vector", "*", "0.", "\n", "\n", "", "to_concat", ".", "extend", "(", "torch", ".", "unbind", "(", "unit_vector", "[", "...", ",", "None", ",", ":", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "to_concat", ".", "append", "(", "template_mask_2d", "[", "...", ",", "None", "]", ")", "\n", "\n", "act", "=", "torch", ".", "cat", "(", "to_concat", ",", "dim", "=", "-", "1", ")", "\n", "act", "=", "act", "*", "template_mask_2d", "[", "...", ",", "None", "]", "\n", "\n", "return", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.feats.build_extra_msa_feat": [[162, 170], ["torch.functional.one_hot", "torch.cat", "torch.cat", "batch[].unsqueeze", "batch[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze"], ["", "def", "build_extra_msa_feat", "(", "batch", ")", ":", "\n", "    ", "msa_1hot", "=", "nn", ".", "functional", ".", "one_hot", "(", "batch", "[", "\"extra_msa\"", "]", ",", "23", ")", "\n", "msa_feat", "=", "[", "\n", "msa_1hot", ",", "\n", "batch", "[", "\"extra_has_deletion\"", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "batch", "[", "\"extra_deletion_value\"", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "]", "\n", "return", "torch", ".", "cat", "(", "msa_feat", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.feats.torsion_angles_to_frames": [[172, 236], ["r.from_tensor_4x4", "torch.cat.new_zeros", "torch.cat", "torch.cat", "torch.cat.new_zeros", "fastfold.utils.rigid_utils.Rigid", "r.from_tensor_4x4.compose", "chi1_frame_to_bb.compose", "chi1_frame_to_bb.compose.compose", "chi2_frame_to_bb.compose.compose", "fastfold.utils.rigid_utils.Rigid.cat", "r[].compose", "fastfold.utils.rigid_utils.Rotation", "alpha.new_zeros.expand", "r.from_tensor_4x4.get_rots().get_rot_mats", "chi1_frame_to_bb.compose.unsqueeze", "chi2_frame_to_bb.compose.unsqueeze", "chi3_frame_to_bb.compose.unsqueeze", "len", "r.from_tensor_4x4.get_rots"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.from_tensor_4x4", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.compose", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.compose", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.compose", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.compose", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.compose", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_rot_mats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_rots"], ["", "def", "torsion_angles_to_frames", "(", "\n", "r", ":", "Rigid", ",", "\n", "alpha", ":", "torch", ".", "Tensor", ",", "\n", "aatype", ":", "torch", ".", "Tensor", ",", "\n", "rrgdf", ":", "torch", ".", "Tensor", ",", "\n", ")", ":", "\n", "# [*, N, 8, 4, 4]", "\n", "    ", "default_4x4", "=", "rrgdf", "[", "aatype", ",", "...", "]", "\n", "\n", "# [*, N, 8] transformations, i.e.", "\n", "#   One [*, N, 8, 3, 3] rotation matrix and", "\n", "#   One [*, N, 8, 3]    translation matrix", "\n", "default_r", "=", "r", ".", "from_tensor_4x4", "(", "default_4x4", ")", "\n", "\n", "bb_rot", "=", "alpha", ".", "new_zeros", "(", "(", "*", "(", "(", "1", ",", ")", "*", "len", "(", "alpha", ".", "shape", "[", ":", "-", "1", "]", ")", ")", ",", "2", ")", ")", "\n", "bb_rot", "[", "...", ",", "1", "]", "=", "1", "\n", "\n", "# [*, N, 8, 2]", "\n", "alpha", "=", "torch", ".", "cat", "(", "\n", "[", "bb_rot", ".", "expand", "(", "*", "alpha", ".", "shape", "[", ":", "-", "2", "]", ",", "-", "1", ",", "-", "1", ")", ",", "alpha", "]", ",", "dim", "=", "-", "2", "\n", ")", "\n", "\n", "# [*, N, 8, 3, 3]", "\n", "# Produces rotation matrices of the form:", "\n", "# [", "\n", "#   [1, 0  , 0  ],", "\n", "#   [0, a_2,-a_1],", "\n", "#   [0, a_1, a_2]", "\n", "# ]", "\n", "# This follows the original code rather than the supplement, which uses", "\n", "# different indices.", "\n", "\n", "all_rots", "=", "alpha", ".", "new_zeros", "(", "default_r", ".", "get_rots", "(", ")", ".", "get_rot_mats", "(", ")", ".", "shape", ")", "\n", "all_rots", "[", "...", ",", "0", ",", "0", "]", "=", "1", "\n", "all_rots", "[", "...", ",", "1", ",", "1", "]", "=", "alpha", "[", "...", ",", "1", "]", "\n", "all_rots", "[", "...", ",", "1", ",", "2", "]", "=", "-", "alpha", "[", "...", ",", "0", "]", "\n", "all_rots", "[", "...", ",", "2", ",", "1", ":", "]", "=", "alpha", "\n", "\n", "all_rots", "=", "Rigid", "(", "Rotation", "(", "rot_mats", "=", "all_rots", ")", ",", "None", ")", "\n", "\n", "all_frames", "=", "default_r", ".", "compose", "(", "all_rots", ")", "\n", "\n", "chi2_frame_to_frame", "=", "all_frames", "[", "...", ",", "5", "]", "\n", "chi3_frame_to_frame", "=", "all_frames", "[", "...", ",", "6", "]", "\n", "chi4_frame_to_frame", "=", "all_frames", "[", "...", ",", "7", "]", "\n", "\n", "chi1_frame_to_bb", "=", "all_frames", "[", "...", ",", "4", "]", "\n", "chi2_frame_to_bb", "=", "chi1_frame_to_bb", ".", "compose", "(", "chi2_frame_to_frame", ")", "\n", "chi3_frame_to_bb", "=", "chi2_frame_to_bb", ".", "compose", "(", "chi3_frame_to_frame", ")", "\n", "chi4_frame_to_bb", "=", "chi3_frame_to_bb", ".", "compose", "(", "chi4_frame_to_frame", ")", "\n", "\n", "all_frames_to_bb", "=", "Rigid", ".", "cat", "(", "\n", "[", "\n", "all_frames", "[", "...", ",", ":", "5", "]", ",", "\n", "chi2_frame_to_bb", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "chi3_frame_to_bb", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "chi4_frame_to_bb", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "\n", "all_frames_to_global", "=", "r", "[", "...", ",", "None", "]", ".", "compose", "(", "all_frames_to_bb", ")", "\n", "\n", "return", "all_frames_to_global", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.feats.frames_and_literature_positions_to_atom14_pos": [[238, 275], ["torch.functional.one_hot", "t_atoms_to_global.map_tensor_fn.map_tensor_fn", "atom_mask[].unsqueeze", "t_atoms_to_global.map_tensor_fn.apply", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.map_tensor_fn", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply"], ["", "def", "frames_and_literature_positions_to_atom14_pos", "(", "\n", "r", ":", "Rigid", ",", "\n", "aatype", ":", "torch", ".", "Tensor", ",", "\n", "default_frames", ",", "\n", "group_idx", ",", "\n", "atom_mask", ",", "\n", "lit_positions", ",", "\n", ")", ":", "\n", "# [*, N, 14, 4, 4]", "\n", "    ", "default_4x4", "=", "default_frames", "[", "aatype", ",", "...", "]", "\n", "\n", "# [*, N, 14]", "\n", "group_mask", "=", "group_idx", "[", "aatype", ",", "...", "]", "\n", "\n", "# [*, N, 14, 8]", "\n", "group_mask", "=", "nn", ".", "functional", ".", "one_hot", "(", "\n", "group_mask", ",", "\n", "num_classes", "=", "default_frames", ".", "shape", "[", "-", "3", "]", ",", "\n", ")", "\n", "\n", "# [*, N, 14, 8]", "\n", "t_atoms_to_global", "=", "r", "[", "...", ",", "None", ",", ":", "]", "*", "group_mask", "\n", "\n", "# [*, N, 14]", "\n", "t_atoms_to_global", "=", "t_atoms_to_global", ".", "map_tensor_fn", "(", "\n", "lambda", "x", ":", "torch", ".", "sum", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", ")", "\n", "\n", "# [*, N, 14, 1]", "\n", "atom_mask", "=", "atom_mask", "[", "aatype", ",", "...", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "# [*, N, 14, 3]", "\n", "lit_positions", "=", "lit_positions", "[", "aatype", ",", "...", "]", "\n", "pred_positions", "=", "t_atoms_to_global", ".", "apply", "(", "lit_positions", ")", "\n", "pred_positions", "=", "pred_positions", "*", "atom_mask", "\n", "\n", "return", "pred_positions", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.EvoformerBlock.__init__": [[16, 25], ["torch.Module.__init__", "fastfold.model.fastnn.MSAStack", "fastfold.model.fastnn.OutProductMean", "fastfold.model.fastnn.PairStack"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_m", ":", "int", ",", "c_z", ":", "int", ",", "first_block", ":", "bool", ",", "last_block", ":", "bool", ")", ":", "\n", "        ", "super", "(", "EvoformerBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "first_block", "=", "first_block", "\n", "self", ".", "last_block", "=", "last_block", "\n", "\n", "self", ".", "msa_stack", "=", "MSAStack", "(", "c_m", ",", "c_z", ",", "p_drop", "=", "0.15", ")", "\n", "self", ".", "communication", "=", "OutProductMean", "(", "n_feat", "=", "c_m", ",", "n_feat_out", "=", "c_z", ",", "n_feat_proj", "=", "32", ")", "\n", "self", ".", "pair_stack", "=", "PairStack", "(", "d_pair", "=", "c_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.EvoformerBlock.forward": [[26, 75], ["colossalai.core.global_context.get_world_size", "torch.nn.functional.pad.size", "torch.nn.functional.pad.size", "torch.nn.functional.pad.unsqueeze", "torch.nn.functional.pad.unsqueeze", "torch.nn.functional.pad.unsqueeze", "torch.nn.functional.pad.unsqueeze", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "inject_fastnn.EvoformerBlock.msa_stack", "fastfold.distributed.comm_async.All_to_All_Async.apply", "inject_fastnn.EvoformerBlock.pair_stack", "fastfold.distributed.comm_async.All_to_All_Async_Opp.apply", "fastfold.distributed.comm.gather.unsqueeze", "fastfold.distributed.comm.gather.unsqueeze", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "fastfold.distributed.comm.scatter", "fastfold.distributed.comm.scatter", "inject_fastnn.EvoformerBlock.communication", "fastfold.distributed.comm.gather.squeeze", "fastfold.distributed.comm.gather.squeeze", "fastfold.distributed.comm.gather", "fastfold.distributed.comm.gather", "int"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.scatter", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.scatter", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.gather", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.gather"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "msa_mask", ":", "torch", ".", "Tensor", ",", "\n", "pair_mask", ":", "torch", ".", "Tensor", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "_mask_trans", ":", "bool", "=", "True", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "\n", "        ", "dap_size", "=", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "\n", "\n", "seq_length", "=", "pair_mask", ".", "size", "(", "-", "1", ")", "\n", "padding_size", "=", "(", "int", "(", "seq_length", "/", "dap_size", ")", "+", "1", ")", "*", "dap_size", "-", "seq_length", "\n", "\n", "if", "self", ".", "first_block", ":", "\n", "            ", "m", "=", "m", ".", "unsqueeze", "(", "0", ")", "\n", "z", "=", "z", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "m", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "m", ",", "(", "0", ",", "0", ",", "0", ",", "padding_size", ")", ")", "\n", "z", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "z", ",", "(", "0", ",", "0", ",", "0", ",", "padding_size", ",", "0", ",", "padding_size", ")", ")", "\n", "\n", "m", "=", "scatter", "(", "m", ",", "dim", "=", "1", ")", "\n", "z", "=", "scatter", "(", "z", ",", "dim", "=", "1", ")", "\n", "\n", "", "msa_mask", "=", "msa_mask", ".", "unsqueeze", "(", "0", ")", "\n", "pair_mask", "=", "pair_mask", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "msa_mask", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "msa_mask", ",", "(", "0", ",", "padding_size", ")", ")", "\n", "pair_mask", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "pair_mask", ",", "(", "0", ",", "padding_size", ",", "0", ",", "padding_size", ")", ")", "\n", "\n", "m", "=", "self", ".", "msa_stack", "(", "m", ",", "z", ",", "msa_mask", ")", "\n", "\n", "z", "=", "z", "+", "self", ".", "communication", "(", "m", ",", "msa_mask", ")", "\n", "m", ",", "work", "=", "All_to_All_Async", ".", "apply", "(", "m", ",", "1", ",", "2", ")", "\n", "z", "=", "self", ".", "pair_stack", "(", "z", ",", "pair_mask", ")", "\n", "m", "=", "All_to_All_Async_Opp", ".", "apply", "(", "m", ",", "work", ",", "1", ",", "2", ")", "\n", "\n", "if", "self", ".", "last_block", ":", "\n", "            ", "m", "=", "m", ".", "squeeze", "(", "0", ")", "\n", "z", "=", "z", ".", "squeeze", "(", "0", ")", "\n", "\n", "m", "=", "gather", "(", "m", ",", "dim", "=", "0", ")", "\n", "z", "=", "gather", "(", "z", ",", "dim", "=", "0", ")", "\n", "\n", "m", "=", "m", "[", ":", ",", ":", "-", "padding_size", ",", ":", "]", "\n", "z", "=", "z", "[", ":", "-", "padding_size", ",", ":", "-", "padding_size", ",", ":", "]", "\n", "\n", "", "return", "m", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_layernorm": [[77, 80], ["model_fast.weight.copy_", "model_fast.bias.copy_"], "function", ["None"], ["", "", "def", "copy_layernorm", "(", "model_fast", ",", "model_ori", ")", ":", "\n", "    ", "model_fast", ".", "weight", ".", "copy_", "(", "model_ori", ".", "weight", ")", "\n", "model_fast", ".", "bias", ".", "copy_", "(", "model_ori", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_linear": [[82, 86], ["model_fast.weight.copy_", "model_fast.bias.copy_"], "function", ["None"], ["", "def", "copy_linear", "(", "model_fast", ",", "model_ori", ")", ":", "\n", "    ", "model_fast", ".", "weight", ".", "copy_", "(", "model_ori", ".", "weight", ")", "\n", "if", "model_fast", ".", "use_bias", ":", "\n", "        ", "model_fast", ".", "bias", ".", "copy_", "(", "model_ori", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_qkv_linear": [[88, 90], ["model_fast.weight.copy_", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat"], ["", "", "def", "copy_qkv_linear", "(", "model_fast", ",", "ori_q", ",", "ori_k", ",", "ori_v", ")", ":", "\n", "    ", "model_fast", ".", "weight", ".", "copy_", "(", "torch", ".", "cat", "(", "(", "ori_q", ".", "weight", ",", "ori_k", ".", "weight", ",", "ori_v", ".", "weight", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_attention": [[92, 101], ["inject_fastnn.copy_qkv_linear", "inject_fastnn.copy_linear", "inject_fastnn.copy_linear", "model_fast.gating_bias.copy_", "print"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_qkv_linear", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_linear", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_linear"], ["", "def", "copy_attention", "(", "model_fast", ",", "model_ori", ")", ":", "\n", "    ", "copy_qkv_linear", "(", "model_fast", ".", "to_qkv", ",", "model_ori", ".", "linear_q", ",", "model_ori", ".", "linear_k", ",", "model_ori", ".", "linear_v", ")", "\n", "copy_linear", "(", "model_fast", ".", "gating_linear", ",", "model_ori", ".", "linear_g", ")", "\n", "copy_linear", "(", "model_fast", ".", "o_linear", ",", "model_ori", ".", "linear_o", ")", "\n", "\n", "try", ":", "\n", "        ", "model_fast", ".", "gating_bias", ".", "copy_", "(", "model_ori", ".", "linear_g", ".", "bias", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "\"no gating_bias need copy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_left_right": [[103, 106], ["model_fast.weight.copy_", "model_fast.bias.copy_", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat"], ["", "", "def", "copy_left_right", "(", "model_fast", ",", "ori_left", ",", "ori_right", ")", ":", "\n", "    ", "model_fast", ".", "weight", ".", "copy_", "(", "torch", ".", "cat", "(", "(", "ori_left", ".", "weight", ",", "ori_right", ".", "weight", ")", ",", "dim", "=", "0", ")", ")", "\n", "model_fast", ".", "bias", ".", "copy_", "(", "torch", ".", "cat", "(", "(", "ori_left", ".", "bias", ",", "ori_right", ".", "bias", ")", ",", "dim", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_transition": [[108, 112], ["inject_fastnn.copy_layernorm", "inject_fastnn.copy_linear", "inject_fastnn.copy_linear"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_layernorm", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_linear", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_linear"], ["", "def", "copy_transition", "(", "model_fast", ",", "model_ori", ")", ":", "\n", "    ", "copy_layernorm", "(", "model_fast", ".", "norm", ",", "model_ori", ".", "layer_norm", ")", "\n", "copy_linear", "(", "model_fast", ".", "linear1", ",", "model_ori", ".", "linear_1", ")", "\n", "copy_linear", "(", "model_fast", ".", "linear2", ",", "model_ori", ".", "linear_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_triangle": [[114, 124], ["inject_fastnn.copy_layernorm", "inject_fastnn.copy_layernorm", "inject_fastnn.copy_linear", "inject_fastnn.copy_linear", "model_fast.output_bias.copy_", "inject_fastnn.copy_left_right", "inject_fastnn.copy_left_right"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_layernorm", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_layernorm", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_linear", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_linear", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_left_right", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_left_right"], ["", "def", "copy_triangle", "(", "model_fast", ",", "model_ori", ")", ":", "\n", "    ", "copy_layernorm", "(", "model_fast", ".", "layernorm1", ",", "model_ori", ".", "layer_norm_in", ")", "\n", "copy_layernorm", "(", "model_fast", ".", "layernorm2", ",", "model_ori", ".", "layer_norm_out", ")", "\n", "copy_linear", "(", "model_fast", ".", "output_gate", ",", "model_ori", ".", "linear_g", ")", "\n", "copy_linear", "(", "model_fast", ".", "output_projection", ",", "model_ori", ".", "linear_z", ")", "\n", "model_fast", ".", "output_bias", ".", "copy_", "(", "model_ori", ".", "linear_z", ".", "bias", ")", "\n", "\n", "copy_left_right", "(", "model_fast", ".", "left_right_projection", ",", "model_ori", ".", "linear_a_p", ",", "model_ori", ".", "linear_b_p", ")", "\n", "\n", "copy_left_right", "(", "model_fast", ".", "left_right_gate", ",", "model_ori", ".", "linear_a_g", ",", "model_ori", ".", "linear_b_g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_triangle_att": [[126, 132], ["inject_fastnn.copy_layernorm", "inject_fastnn.copy_linear", "inject_fastnn.copy_attention", "model_fast.out_bias.copy_"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_layernorm", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_linear", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_attention"], ["", "def", "copy_triangle_att", "(", "model_fast", ",", "model_ori", ")", ":", "\n", "    ", "copy_layernorm", "(", "model_fast", ".", "layernorm1", ",", "model_ori", ".", "layer_norm", ")", "\n", "copy_linear", "(", "model_fast", ".", "linear_b", ",", "model_ori", ".", "linear", ")", "\n", "copy_attention", "(", "model_fast", ".", "attention", ",", "model_ori", ".", "mha", ")", "\n", "\n", "model_fast", ".", "out_bias", ".", "copy_", "(", "model_ori", ".", "mha", ".", "linear_o", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_para": [[134, 180], ["inject_fastnn.copy_layernorm", "inject_fastnn.copy_layernorm", "inject_fastnn.copy_attention", "block_fast.msa_stack.MSARowAttentionWithPairBias.linear_b_weights.copy_", "block_fast.msa_stack.MSARowAttentionWithPairBias.out_bias.copy_", "inject_fastnn.copy_layernorm", "inject_fastnn.copy_attention", "inject_fastnn.copy_transition", "inject_fastnn.copy_layernorm", "inject_fastnn.copy_linear", "inject_fastnn.copy_linear", "inject_fastnn.copy_linear", "inject_fastnn.copy_triangle", "inject_fastnn.copy_triangle", "inject_fastnn.copy_triangle_att", "inject_fastnn.copy_triangle_att", "inject_fastnn.copy_transition"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_layernorm", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_layernorm", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_attention", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_layernorm", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_attention", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_transition", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_layernorm", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_linear", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_linear", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_linear", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_triangle", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_triangle", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_triangle_att", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_triangle_att", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_transition"], ["", "def", "copy_para", "(", "block_fast", ",", "block_ori", ")", ":", "\n", "# msa_stack", "\n", "# MSARowAttentionWithPairBias", "\n", "    ", "copy_layernorm", "(", "block_fast", ".", "msa_stack", ".", "MSARowAttentionWithPairBias", ".", "layernormM", ",", "\n", "block_ori", ".", "msa_att_row", ".", "layer_norm_m", ")", "\n", "copy_layernorm", "(", "block_fast", ".", "msa_stack", ".", "MSARowAttentionWithPairBias", ".", "layernormZ", ",", "\n", "block_ori", ".", "msa_att_row", ".", "layer_norm_z", ")", "\n", "\n", "copy_attention", "(", "block_fast", ".", "msa_stack", ".", "MSARowAttentionWithPairBias", ".", "attention", ",", "\n", "block_ori", ".", "msa_att_row", ".", "mha", ")", "\n", "\n", "block_fast", ".", "msa_stack", ".", "MSARowAttentionWithPairBias", ".", "linear_b_weights", ".", "copy_", "(", "\n", "block_ori", ".", "msa_att_row", ".", "linear_z", ".", "weight", ")", "\n", "\n", "block_fast", ".", "msa_stack", ".", "MSARowAttentionWithPairBias", ".", "out_bias", ".", "copy_", "(", "\n", "block_ori", ".", "msa_att_row", ".", "mha", ".", "linear_o", ".", "bias", ")", "\n", "\n", "# MSAColumnAttention", "\n", "copy_layernorm", "(", "block_fast", ".", "msa_stack", ".", "MSAColumnAttention", ".", "layernormM", ",", "\n", "block_ori", ".", "msa_att_col", ".", "_msa_att", ".", "layer_norm_m", ")", "\n", "\n", "copy_attention", "(", "block_fast", ".", "msa_stack", ".", "MSAColumnAttention", ".", "attention", ",", "\n", "block_ori", ".", "msa_att_col", ".", "_msa_att", ".", "mha", ")", "\n", "\n", "# MSATransition", "\n", "copy_transition", "(", "block_fast", ".", "msa_stack", ".", "MSATransition", ",", "block_ori", ".", "core", ".", "msa_transition", ")", "\n", "\n", "# communication", "\n", "copy_layernorm", "(", "block_fast", ".", "communication", ".", "layernormM", ",", "\n", "block_ori", ".", "core", ".", "outer_product_mean", ".", "layer_norm", ")", "\n", "copy_linear", "(", "block_fast", ".", "communication", ".", "linear_a", ",", "block_ori", ".", "core", ".", "outer_product_mean", ".", "linear_1", ")", "\n", "copy_linear", "(", "block_fast", ".", "communication", ".", "linear_b", ",", "block_ori", ".", "core", ".", "outer_product_mean", ".", "linear_2", ")", "\n", "copy_linear", "(", "block_fast", ".", "communication", ".", "o_linear", ",", "block_ori", ".", "core", ".", "outer_product_mean", ".", "linear_out", ")", "\n", "\n", "# pair_stack", "\n", "# TriangleMultiplicationOutgoing", "\n", "copy_triangle", "(", "block_fast", ".", "pair_stack", ".", "TriangleMultiplicationOutgoing", ",", "block_ori", ".", "core", ".", "tri_mul_out", ")", "\n", "# TriangleMultiplicationIncoming", "\n", "copy_triangle", "(", "block_fast", ".", "pair_stack", ".", "TriangleMultiplicationIncoming", ",", "block_ori", ".", "core", ".", "tri_mul_in", ")", "\n", "\n", "# TriangleAttentionStartingNode", "\n", "copy_triangle_att", "(", "block_fast", ".", "pair_stack", ".", "TriangleAttentionStartingNode", ",", "\n", "block_ori", ".", "core", ".", "tri_att_start", ")", "\n", "copy_triangle_att", "(", "block_fast", ".", "pair_stack", ".", "TriangleAttentionEndingNode", ",", "block_ori", ".", "core", ".", "tri_att_end", ")", "\n", "\n", "copy_transition", "(", "block_fast", ".", "pair_stack", ".", "PairTransition", ",", "block_ori", ".", "core", ".", "pair_transition", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.inject_fastnn": [[182, 201], ["torch.no_grad", "torch.no_grad", "torch.ModuleList", "enumerate", "inject_fastnn.EvoformerBlock", "inject_fastnn.copy_para", "nn.ModuleList.append", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.inject_fastnn.copy_para"], ["", "def", "inject_fastnn", "(", "model", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "fastfold_blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "block_id", ",", "ori_block", "in", "enumerate", "(", "model", ".", "evoformer", ".", "blocks", ")", ":", "\n", "            ", "c_m", "=", "ori_block", ".", "msa_att_row", ".", "c_in", "\n", "c_z", "=", "ori_block", ".", "msa_att_row", ".", "c_z", "\n", "fastfold_block", "=", "EvoformerBlock", "(", "c_m", "=", "c_m", ",", "\n", "c_z", "=", "c_z", ",", "\n", "first_block", "=", "(", "block_id", "==", "0", ")", ",", "\n", "last_block", "=", "(", "block_id", "==", "len", "(", "model", ".", "evoformer", ".", "blocks", ")", "-", "\n", "1", ")", ")", "\n", "\n", "copy_para", "(", "fastfold_block", ",", "ori_block", ")", "\n", "\n", "fastfold_blocks", ".", "append", "(", "fastfold_block", ")", "\n", "\n", "", "model", ".", "evoformer", ".", "blocks", "=", "fastfold_blocks", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.__init__": [[300, 337], ["ValueError", "ValueError", "quats.to.to.to", "rot_mats.to.to.to", "torch.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to"], ["def", "__init__", "(", "self", ",", "\n", "rot_mats", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "quats", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "normalize_quats", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                rot_mats:\n                    A [*, 3, 3] rotation matrix tensor. Mutually exclusive with\n                    quats\n                quats:\n                    A [*, 4] quaternion. Mutually exclusive with rot_mats. If\n                    normalize_quats is not True, must be a unit quaternion\n                normalize_quats:\n                    If quats is specified, whether to normalize quats\n        \"\"\"", "\n", "if", "(", "(", "rot_mats", "is", "None", "and", "quats", "is", "None", ")", "or", "\n", "(", "rot_mats", "is", "not", "None", "and", "quats", "is", "not", "None", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Exactly one input argument must be specified\"", ")", "\n", "\n", "", "if", "(", "(", "rot_mats", "is", "not", "None", "and", "rot_mats", ".", "shape", "[", "-", "2", ":", "]", "!=", "(", "3", ",", "3", ")", ")", "or", "\n", "(", "quats", "is", "not", "None", "and", "quats", ".", "shape", "[", "-", "1", "]", "!=", "4", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Incorrectly shaped rotation matrix or quaternion\"", "\n", ")", "\n", "\n", "# Force full-precision", "\n", "", "if", "(", "quats", "is", "not", "None", ")", ":", "\n", "            ", "quats", "=", "quats", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "if", "(", "rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "rot_mats", "=", "rot_mats", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "", "if", "(", "quats", "is", "not", "None", "and", "normalize_quats", ")", ":", "\n", "            ", "quats", "=", "quats", "/", "torch", ".", "linalg", ".", "norm", "(", "quats", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "", "self", ".", "_rot_mats", "=", "rot_mats", "\n", "self", ".", "_quats", "=", "quats", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.identity": [[338, 376], ["rigid_utils.identity_rot_mats", "rigid_utils.Rotation", "rigid_utils.identity_quats", "rigid_utils.Rotation", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.identity_rot_mats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.identity_quats"], ["", "@", "staticmethod", "\n", "def", "identity", "(", "\n", "shape", ",", "\n", "dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", "=", "None", ",", "\n", "device", ":", "Optional", "[", "torch", ".", "device", "]", "=", "None", ",", "\n", "requires_grad", ":", "bool", "=", "True", ",", "\n", "fmt", ":", "str", "=", "\"quat\"", ",", "\n", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Returns an identity Rotation.\n\n            Args:\n                shape:\n                    The \"shape\" of the resulting Rotation object. See documentation\n                    for the shape property\n                dtype:\n                    The torch dtype for the rotation\n                device:\n                    The torch device for the new rotation\n                requires_grad:\n                    Whether the underlying tensors in the new rotation object\n                    should require gradient computation\n                fmt:\n                    One of \"quat\" or \"rot_mat\". Determines the underlying format\n                    of the new object's rotation \n            Returns:\n                A new identity rotation\n        \"\"\"", "\n", "if", "(", "fmt", "==", "\"rot_mat\"", ")", ":", "\n", "            ", "rot_mats", "=", "identity_rot_mats", "(", "\n", "shape", ",", "dtype", ",", "device", ",", "requires_grad", ",", "\n", ")", "\n", "return", "Rotation", "(", "rot_mats", "=", "rot_mats", ",", "quats", "=", "None", ")", "\n", "", "elif", "(", "fmt", "==", "\"quat\"", ")", ":", "\n", "            ", "quats", "=", "identity_quats", "(", "shape", ",", "dtype", ",", "device", ",", "requires_grad", ")", "\n", "return", "Rotation", "(", "rot_mats", "=", "None", ",", "quats", "=", "quats", ",", "normalize_quats", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Invalid format: f{fmt}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.__getitem__": [[379, 401], ["type", "rigid_utils.Rotation", "rigid_utils.Rotation", "ValueError", "slice", "slice", "slice"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ":", "Any", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Allows torch-style indexing over the virtual shape of the rotation\n            object. See documentation for the shape property.\n\n            Args:\n                index:\n                    A torch index. E.g. (1, 3, 2), or (slice(None,))\n            Returns:\n                The indexed rotation\n        \"\"\"", "\n", "if", "type", "(", "index", ")", "!=", "tuple", ":", "\n", "            ", "index", "=", "(", "index", ",", ")", "\n", "\n", "", "if", "(", "self", ".", "_rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "rot_mats", "=", "self", ".", "_rot_mats", "[", "index", "+", "(", "slice", "(", "None", ")", ",", "slice", "(", "None", ")", ")", "]", "\n", "return", "Rotation", "(", "rot_mats", "=", "rot_mats", ")", "\n", "", "elif", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "quats", "=", "self", ".", "_quats", "[", "index", "+", "(", "slice", "(", "None", ")", ",", ")", "]", "\n", "return", "Rotation", "(", "quats", "=", "quats", ",", "normalize_quats", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.__mul__": [[402, 426], ["isinstance", "TypeError", "rigid_utils.Rotation", "rigid_utils.Rotation", "ValueError"], "methods", ["None"], ["", "", "def", "__mul__", "(", "self", ",", "\n", "right", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Pointwise left multiplication of the rotation with a tensor. Can be\n            used to e.g. mask the Rotation.\n\n            Args:\n                right:\n                    The tensor multiplicand\n            Returns:\n                The product\n        \"\"\"", "\n", "if", "not", "(", "isinstance", "(", "right", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"The other multiplicand must be a Tensor\"", ")", "\n", "\n", "", "if", "(", "self", ".", "_rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "rot_mats", "=", "self", ".", "_rot_mats", "*", "right", "[", "...", ",", "None", ",", "None", "]", "\n", "return", "Rotation", "(", "rot_mats", "=", "rot_mats", ",", "quats", "=", "None", ")", "\n", "", "elif", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "quats", "=", "self", ".", "_quats", "*", "right", "[", "...", ",", "None", "]", "\n", "return", "Rotation", "(", "rot_mats", "=", "None", ",", "quats", "=", "quats", ",", "normalize_quats", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.__rmul__": [[427, 440], ["rigid_utils.Rotation.__mul__"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.__mul__"], ["", "", "def", "__rmul__", "(", "self", ",", "\n", "left", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Reverse pointwise multiplication of the rotation with a tensor.\n\n            Args:\n                left:\n                    The left multiplicand\n            Returns:\n                The product\n        \"\"\"", "\n", "return", "self", ".", "__mul__", "(", "left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.shape": [[443, 462], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", "->", "torch", ".", "Size", ":", "\n", "        ", "\"\"\"\n            Returns the virtual shape of the rotation object. This shape is\n            defined as the batch dimensions of the underlying rotation matrix\n            or quaternion. If the Rotation was initialized with a [10, 3, 3]\n            rotation matrix tensor, for example, the resulting shape would be\n            [10].\n        \n            Returns:\n                The virtual shape of the rotation object\n        \"\"\"", "\n", "s", "=", "None", "\n", "if", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "s", "=", "self", ".", "_quats", ".", "shape", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "s", "=", "self", ".", "_rot_mats", ".", "shape", "[", ":", "-", "2", "]", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.dtype": [[463, 477], ["ValueError"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", "->", "torch", ".", "dtype", ":", "\n", "        ", "\"\"\"\n            Returns the dtype of the underlying rotation.\n\n            Returns:\n                The dtype of the underlying rotation\n        \"\"\"", "\n", "if", "(", "self", ".", "_rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "return", "self", ".", "_rot_mats", ".", "dtype", "\n", "", "elif", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "return", "self", ".", "_quats", ".", "dtype", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.device": [[478, 492], ["ValueError"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "device", "(", "self", ")", "->", "torch", ".", "device", ":", "\n", "        ", "\"\"\"\n            The device of the underlying rotation\n\n            Returns:\n                The device of the underlying rotation\n        \"\"\"", "\n", "if", "(", "self", ".", "_rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "return", "self", ".", "_rot_mats", ".", "device", "\n", "", "elif", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "return", "self", ".", "_quats", ".", "device", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.requires_grad": [[493, 507], ["ValueError"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "requires_grad", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n            Returns the requires_grad property of the underlying rotation\n\n            Returns:\n                The requires_grad property of the underlying tensor\n        \"\"\"", "\n", "if", "(", "self", ".", "_rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "return", "self", ".", "_rot_mats", ".", "requires_grad", "\n", "", "elif", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "return", "self", ".", "_quats", ".", "requires_grad", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_rot_mats": [[508, 523], ["ValueError", "rigid_utils.quat_to_rot"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.quat_to_rot"], ["", "", "def", "get_rot_mats", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n            Returns the underlying rotation as a rotation matrix tensor.\n\n            Returns:\n                The rotation as a rotation matrix tensor\n        \"\"\"", "\n", "rot_mats", "=", "self", ".", "_rot_mats", "\n", "if", "(", "rot_mats", "is", "None", ")", ":", "\n", "            ", "if", "(", "self", ".", "_quats", "is", "None", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "", "else", ":", "\n", "                ", "rot_mats", "=", "quat_to_rot", "(", "self", ".", "_quats", ")", "\n", "\n", "", "", "return", "rot_mats", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_quats": [[524, 542], ["ValueError", "rigid_utils.rot_to_quat"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.rot_to_quat"], ["", "def", "get_quats", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n            Returns the underlying rotation as a quaternion tensor.\n\n            Depending on whether the Rotation was initialized with a\n            quaternion, this function may call torch.linalg.eigh.\n\n            Returns:\n                The rotation as a quaternion tensor.\n        \"\"\"", "\n", "quats", "=", "self", ".", "_quats", "\n", "if", "(", "quats", "is", "None", ")", ":", "\n", "            ", "if", "(", "self", ".", "_rot_mats", "is", "None", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "", "else", ":", "\n", "                ", "quats", "=", "rot_to_quat", "(", "self", ".", "_rot_mats", ")", "\n", "\n", "", "", "return", "quats", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_cur_rot": [[543, 556], ["ValueError"], "methods", ["None"], ["", "def", "get_cur_rot", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n            Return the underlying rotation in its current form\n\n            Returns:\n                The stored rotation\n        \"\"\"", "\n", "if", "(", "self", ".", "_rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "return", "self", ".", "_rot_mats", "\n", "", "elif", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "return", "self", ".", "_quats", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.compose_q_update_vec": [[559, 584], ["rigid_utils.Rotation.get_quats", "rigid_utils.Rotation", "rigid_utils.quat_multiply_by_vec"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_quats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.quat_multiply_by_vec"], ["", "", "def", "compose_q_update_vec", "(", "self", ",", "\n", "q_update_vec", ":", "torch", ".", "Tensor", ",", "\n", "normalize_quats", ":", "bool", "=", "True", "\n", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Returns a new quaternion Rotation after updating the current\n            object's underlying rotation with a quaternion update, formatted\n            as a [*, 3] tensor whose final three columns represent x, y, z such \n            that (1, x, y, z) is the desired (not necessarily unit) quaternion\n            update.\n\n            Args:\n                q_update_vec:\n                    A [*, 3] quaternion update tensor\n                normalize_quats:\n                    Whether to normalize the output quaternion\n            Returns:\n                An updated Rotation\n        \"\"\"", "\n", "quats", "=", "self", ".", "get_quats", "(", ")", "\n", "new_quats", "=", "quats", "+", "quat_multiply_by_vec", "(", "quats", ",", "q_update_vec", ")", "\n", "return", "Rotation", "(", "\n", "rot_mats", "=", "None", ",", "\n", "quats", "=", "new_quats", ",", "\n", "normalize_quats", "=", "normalize_quats", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.compose_r": [[586, 601], ["rigid_utils.Rotation.get_rot_mats", "r.get_rot_mats", "rigid_utils.rot_matmul", "rigid_utils.Rotation"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_rot_mats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_rot_mats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.rot_matmul"], ["", "def", "compose_r", "(", "self", ",", "r", ":", "Rotation", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Compose the rotation matrices of the current Rotation object with\n            those of another.\n\n            Args:\n                r:\n                    An update rotation object\n            Returns:\n                An updated rotation object\n        \"\"\"", "\n", "r1", "=", "self", ".", "get_rot_mats", "(", ")", "\n", "r2", "=", "r", ".", "get_rot_mats", "(", ")", "\n", "new_rot_mats", "=", "rot_matmul", "(", "r1", ",", "r2", ")", "\n", "return", "Rotation", "(", "rot_mats", "=", "new_rot_mats", ",", "quats", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.compose_q": [[602, 621], ["rigid_utils.Rotation.get_quats", "r.get_quats", "rigid_utils.quat_multiply", "rigid_utils.Rotation"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_quats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_quats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.quat_multiply"], ["", "def", "compose_q", "(", "self", ",", "r", ":", "Rotation", ",", "normalize_quats", ":", "bool", "=", "True", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Compose the quaternions of the current Rotation object with those\n            of another.\n\n            Depending on whether either Rotation was initialized with\n            quaternions, this function may call torch.linalg.eigh.\n\n            Args:\n                r:\n                    An update rotation object\n            Returns:\n                An updated rotation object\n        \"\"\"", "\n", "q1", "=", "self", ".", "get_quats", "(", ")", "\n", "q2", "=", "r", ".", "get_quats", "(", ")", "\n", "new_quats", "=", "quat_multiply", "(", "q1", ",", "q2", ")", "\n", "return", "Rotation", "(", "\n", "rot_mats", "=", "None", ",", "quats", "=", "new_quats", ",", "normalize_quats", "=", "normalize_quats", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.apply": [[623, 636], ["rigid_utils.Rotation.get_rot_mats", "rigid_utils.rot_vec_mul"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_rot_mats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.rot_vec_mul"], ["", "def", "apply", "(", "self", ",", "pts", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n            Apply the current Rotation as a rotation matrix to a set of 3D\n            coordinates.\n\n            Args:\n                pts:\n                    A [*, 3] set of points\n            Returns:\n                [*, 3] rotated points\n        \"\"\"", "\n", "rot_mats", "=", "self", ".", "get_rot_mats", "(", ")", "\n", "return", "rot_vec_mul", "(", "rot_mats", ",", "pts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.invert_apply": [[637, 650], ["rigid_utils.Rotation.get_rot_mats", "rigid_utils.invert_rot_mat", "rigid_utils.rot_vec_mul"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_rot_mats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.invert_rot_mat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.rot_vec_mul"], ["", "def", "invert_apply", "(", "self", ",", "pts", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n            The inverse of the apply() method.\n\n            Args:\n                pts:\n                    A [*, 3] set of points\n            Returns:\n                [*, 3] inverse-rotated points\n        \"\"\"", "\n", "rot_mats", "=", "self", ".", "get_rot_mats", "(", ")", "\n", "inv_rot_mats", "=", "invert_rot_mat", "(", "rot_mats", ")", "\n", "return", "rot_vec_mul", "(", "inv_rot_mats", ",", "pts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.invert": [[651, 671], ["rigid_utils.Rotation", "rigid_utils.Rotation", "ValueError", "rigid_utils.invert_rot_mat", "rigid_utils.invert_quat"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.invert_rot_mat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.invert_quat"], ["", "def", "invert", "(", "self", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Returns the inverse of the current Rotation.\n\n            Returns:\n                The inverse of the current Rotation\n        \"\"\"", "\n", "if", "(", "self", ".", "_rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "return", "Rotation", "(", "\n", "rot_mats", "=", "invert_rot_mat", "(", "self", ".", "_rot_mats", ")", ",", "\n", "quats", "=", "None", "\n", ")", "\n", "", "elif", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "return", "Rotation", "(", "\n", "rot_mats", "=", "None", ",", "\n", "quats", "=", "invert_quat", "(", "self", ".", "_quats", ")", ",", "\n", "normalize_quats", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.unsqueeze": [[674, 697], ["len", "ValueError", "rigid_utils.Rotation._rot_mats.unsqueeze", "rigid_utils.Rotation", "rigid_utils.Rotation._quats.unsqueeze", "rigid_utils.Rotation", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze"], ["", "", "def", "unsqueeze", "(", "self", ",", "\n", "dim", ":", "int", ",", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Analogous to torch.unsqueeze. The dimension is relative to the\n            shape of the Rotation object.\n            \n            Args:\n                dim: A positive or negative dimension index.\n            Returns:\n                The unsqueezed Rotation.\n        \"\"\"", "\n", "if", "dim", ">=", "len", "(", "self", ".", "shape", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid dimension\"", ")", "\n", "\n", "", "if", "(", "self", ".", "_rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "rot_mats", "=", "self", ".", "_rot_mats", ".", "unsqueeze", "(", "dim", "if", "dim", ">=", "0", "else", "dim", "-", "2", ")", "\n", "return", "Rotation", "(", "rot_mats", "=", "rot_mats", ",", "quats", "=", "None", ")", "\n", "", "elif", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "quats", "=", "self", ".", "_quats", ".", "unsqueeze", "(", "dim", "if", "dim", ">=", "0", "else", "dim", "-", "1", ")", "\n", "return", "Rotation", "(", "rot_mats", "=", "None", ",", "quats", "=", "quats", ",", "normalize_quats", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.cat": [[698, 723], ["torch.cat", "rigid_utils.Rotation", "r.get_rot_mats"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_rot_mats"], ["", "", "@", "staticmethod", "\n", "def", "cat", "(", "\n", "rs", ":", "Sequence", "[", "Rotation", "]", ",", "\n", "dim", ":", "int", ",", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Concatenates rotations along one of the batch dimensions. Analogous\n            to torch.cat().\n\n            Note that the output of this operation is always a rotation matrix,\n            regardless of the format of input rotations.\n\n            Args:\n                rs: \n                    A list of rotation objects\n                dim: \n                    The dimension along which the rotations should be \n                    concatenated\n            Returns:\n                A concatenated Rotation object in rotation matrix format\n        \"\"\"", "\n", "rot_mats", "=", "[", "r", ".", "get_rot_mats", "(", ")", "for", "r", "in", "rs", "]", "\n", "rot_mats", "=", "torch", ".", "cat", "(", "rot_mats", ",", "dim", "=", "dim", "if", "dim", ">=", "0", "else", "dim", "-", "2", ")", "\n", "\n", "return", "Rotation", "(", "rot_mats", "=", "rot_mats", ",", "quats", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.map_tensor_fn": [[724, 752], ["rigid_utils.Rotation._rot_mats.view", "torch.stack", "rot_mats.view.view.view", "rigid_utils.Rotation", "list", "torch.stack", "rigid_utils.Rotation", "ValueError", "map", "list", "torch.unbind", "map", "torch.unbind"], "methods", ["None"], ["", "def", "map_tensor_fn", "(", "self", ",", "\n", "fn", ":", "Callable", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Apply a Tensor -> Tensor function to underlying rotation tensors,\n            mapping over the rotation dimension(s). Can be used e.g. to sum out\n            a one-hot batch dimension.\n\n            Args:\n                fn:\n                    A Tensor -> Tensor function to be mapped over the Rotation \n            Returns:\n                The transformed Rotation object\n        \"\"\"", "\n", "if", "(", "self", ".", "_rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "rot_mats", "=", "self", ".", "_rot_mats", ".", "view", "(", "self", ".", "_rot_mats", ".", "shape", "[", ":", "-", "2", "]", "+", "(", "9", ",", ")", ")", "\n", "rot_mats", "=", "torch", ".", "stack", "(", "\n", "list", "(", "map", "(", "fn", ",", "torch", ".", "unbind", "(", "rot_mats", ",", "dim", "=", "-", "1", ")", ")", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "rot_mats", "=", "rot_mats", ".", "view", "(", "rot_mats", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "3", ",", "3", ")", ")", "\n", "return", "Rotation", "(", "rot_mats", "=", "rot_mats", ",", "quats", "=", "None", ")", "\n", "", "elif", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "quats", "=", "torch", ".", "stack", "(", "\n", "list", "(", "map", "(", "fn", ",", "torch", ".", "unbind", "(", "self", ".", "_quats", ",", "dim", "=", "-", "1", ")", ")", ")", ",", "dim", "=", "-", "1", "\n", ")", "\n", "return", "Rotation", "(", "rot_mats", "=", "None", ",", "quats", "=", "quats", ",", "normalize_quats", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.cuda": [[753, 770], ["rigid_utils.Rotation", "rigid_utils.Rotation", "ValueError", "rigid_utils.Rotation._rot_mats.cuda", "rigid_utils.Rotation._quats.cuda"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cuda", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cuda"], ["", "", "def", "cuda", "(", "self", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Analogous to the cuda() method of torch Tensors\n\n            Returns:\n                A copy of the Rotation in CUDA memory\n        \"\"\"", "\n", "if", "(", "self", ".", "_rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "return", "Rotation", "(", "rot_mats", "=", "self", ".", "_rot_mats", ".", "cuda", "(", ")", ",", "quats", "=", "None", ")", "\n", "", "elif", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "return", "Rotation", "(", "\n", "rot_mats", "=", "None", ",", "\n", "quats", "=", "self", ".", "_quats", ".", "cuda", "(", ")", ",", "\n", "normalize_quats", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to": [[771, 799], ["rigid_utils.Rotation", "rigid_utils.Rotation", "ValueError", "rigid_utils.Rotation._rot_mats.to", "rigid_utils.Rotation._quats.to"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to"], ["", "", "def", "to", "(", "self", ",", "\n", "device", ":", "Optional", "[", "torch", ".", "device", "]", ",", "\n", "dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", "\n", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Analogous to the to() method of torch Tensors\n\n            Args:\n                device:\n                    A torch device\n                dtype:\n                    A torch dtype\n            Returns:\n                A copy of the Rotation using the new device and dtype\n        \"\"\"", "\n", "if", "(", "self", ".", "_rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "return", "Rotation", "(", "\n", "rot_mats", "=", "self", ".", "_rot_mats", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", ",", "\n", "quats", "=", "None", ",", "\n", ")", "\n", "", "elif", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "return", "Rotation", "(", "\n", "rot_mats", "=", "None", ",", "\n", "quats", "=", "self", ".", "_quats", ".", "to", "(", "device", "=", "device", ",", "dtype", "=", "dtype", ")", ",", "\n", "normalize_quats", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach": [[800, 819], ["rigid_utils.Rotation", "rigid_utils.Rotation", "ValueError", "rigid_utils.Rotation._rot_mats.detach", "rigid_utils.Rotation._quats.detach"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach"], ["", "", "def", "detach", "(", "self", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Returns a copy of the Rotation whose underlying Tensor has been\n            detached from its torch graph.\n\n            Returns:\n                A copy of the Rotation whose underlying Tensor has been detached\n                from its torch graph\n        \"\"\"", "\n", "if", "(", "self", ".", "_rot_mats", "is", "not", "None", ")", ":", "\n", "            ", "return", "Rotation", "(", "rot_mats", "=", "self", ".", "_rot_mats", ".", "detach", "(", ")", ",", "quats", "=", "None", ")", "\n", "", "elif", "(", "self", ".", "_quats", "is", "not", "None", ")", ":", "\n", "            ", "return", "Rotation", "(", "\n", "rot_mats", "=", "None", ",", "\n", "quats", "=", "self", ".", "_quats", ".", "detach", "(", ")", ",", "\n", "normalize_quats", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Both rotations are None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.__init__": [[828, 871], ["identity_trans.to", "rigid_utils.Rotation.identity", "ValueError", "ValueError", "rigid_utils.identity_trans"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.identity", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.identity_trans"], ["def", "__init__", "(", "self", ",", "\n", "rots", ":", "Optional", "[", "Rotation", "]", ",", "\n", "trans", ":", "Optional", "[", "torch", ".", "Tensor", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                rots: A [*, 3, 3] rotation tensor\n                trans: A corresponding [*, 3] translation tensor\n        \"\"\"", "\n", "# (we need device, dtype, etc. from at least one input)", "\n", "\n", "batch_dims", ",", "dtype", ",", "device", ",", "requires_grad", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "if", "(", "trans", "is", "not", "None", ")", ":", "\n", "            ", "batch_dims", "=", "trans", ".", "shape", "[", ":", "-", "1", "]", "\n", "dtype", "=", "trans", ".", "dtype", "\n", "device", "=", "trans", ".", "device", "\n", "requires_grad", "=", "trans", ".", "requires_grad", "\n", "", "elif", "(", "rots", "is", "not", "None", ")", ":", "\n", "            ", "batch_dims", "=", "rots", ".", "shape", "\n", "dtype", "=", "rots", ".", "dtype", "\n", "device", "=", "rots", ".", "device", "\n", "requires_grad", "=", "rots", ".", "requires_grad", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"At least one input argument must be specified\"", ")", "\n", "\n", "", "if", "(", "rots", "is", "None", ")", ":", "\n", "            ", "rots", "=", "Rotation", ".", "identity", "(", "\n", "batch_dims", ",", "dtype", ",", "device", ",", "requires_grad", ",", "\n", ")", "\n", "", "elif", "(", "trans", "is", "None", ")", ":", "\n", "            ", "trans", "=", "identity_trans", "(", "\n", "batch_dims", ",", "dtype", ",", "device", ",", "requires_grad", ",", "\n", ")", "\n", "\n", "", "if", "(", "(", "rots", ".", "shape", "!=", "trans", ".", "shape", "[", ":", "-", "1", "]", ")", "or", "\n", "(", "rots", ".", "device", "!=", "trans", ".", "device", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Rots and trans incompatible\"", ")", "\n", "\n", "# Force full precision. Happens to the rotations automatically.", "\n", "", "trans", "=", "trans", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "self", ".", "_rots", "=", "rots", "\n", "self", ".", "_trans", "=", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.identity": [[872, 898], ["rigid_utils.Rigid", "rigid_utils.Rotation.identity", "rigid_utils.identity_trans"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.identity", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.identity_trans"], ["", "@", "staticmethod", "\n", "def", "identity", "(", "\n", "shape", ":", "Tuple", "[", "int", "]", ",", "\n", "dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", "=", "None", ",", "\n", "device", ":", "Optional", "[", "torch", ".", "device", "]", "=", "None", ",", "\n", "requires_grad", ":", "bool", "=", "True", ",", "\n", "fmt", ":", "str", "=", "\"quat\"", ",", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Constructs an identity transformation.\n\n            Args:\n                shape: \n                    The desired shape\n                dtype: \n                    The dtype of both internal tensors\n                device: \n                    The device of both internal tensors\n                requires_grad: \n                    Whether grad should be enabled for the internal tensors\n            Returns:\n                The identity transformation\n        \"\"\"", "\n", "return", "Rigid", "(", "\n", "Rotation", ".", "identity", "(", "shape", ",", "dtype", ",", "device", ",", "requires_grad", ",", "fmt", "=", "fmt", ")", ",", "\n", "identity_trans", "(", "shape", ",", "dtype", ",", "device", ",", "requires_grad", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.__getitem__": [[900, 929], ["rigid_utils.Rigid", "type", "slice"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "\n", "index", ":", "Any", ",", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\" \n            Indexes the affine transformation with PyTorch-style indices.\n            The index is applied to the shared dimensions of both the rotation\n            and the translation.\n\n            E.g.::\n\n                r = Rotation(rot_mats=torch.rand(10, 10, 3, 3), quats=None)\n                t = Rigid(r, torch.rand(10, 10, 3))\n                indexed = t[3, 4:6]\n                assert(indexed.shape == (2,))\n                assert(indexed.get_rots().shape == (2,))\n                assert(indexed.get_trans().shape == (2, 3))\n\n            Args:\n                index: A standard torch tensor index. E.g. 8, (10, None, 3),\n                or (3, slice(0, 1, None))\n            Returns:\n                The indexed tensor \n        \"\"\"", "\n", "if", "type", "(", "index", ")", "!=", "tuple", ":", "\n", "            ", "index", "=", "(", "index", ",", ")", "\n", "\n", "", "return", "Rigid", "(", "\n", "self", ".", "_rots", "[", "index", "]", ",", "\n", "self", ".", "_trans", "[", "index", "+", "(", "slice", "(", "None", ")", ",", ")", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.__mul__": [[931, 951], ["rigid_utils.Rigid", "isinstance", "TypeError"], "methods", ["None"], ["", "def", "__mul__", "(", "self", ",", "\n", "right", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Pointwise left multiplication of the transformation with a tensor.\n            Can be used to e.g. mask the Rigid.\n\n            Args:\n                right:\n                    The tensor multiplicand\n            Returns:\n                The product\n        \"\"\"", "\n", "if", "not", "(", "isinstance", "(", "right", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"The other multiplicand must be a Tensor\"", ")", "\n", "\n", "", "new_rots", "=", "self", ".", "_rots", "*", "right", "\n", "new_trans", "=", "self", ".", "_trans", "*", "right", "[", "...", ",", "None", "]", "\n", "\n", "return", "Rigid", "(", "new_rots", ",", "new_trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.__rmul__": [[952, 966], ["rigid_utils.Rigid.__mul__"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.__mul__"], ["", "def", "__rmul__", "(", "self", ",", "\n", "left", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Reverse pointwise multiplication of the transformation with a \n            tensor.\n\n            Args:\n                left:\n                    The left multiplicand\n            Returns:\n                The product\n        \"\"\"", "\n", "return", "self", ".", "__mul__", "(", "left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.shape": [[967, 978], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", "->", "torch", ".", "Size", ":", "\n", "        ", "\"\"\"\n            Returns the shape of the shared dimensions of the rotation and\n            the translation.\n            \n            Returns:\n                The shape of the transformation\n        \"\"\"", "\n", "s", "=", "self", ".", "_trans", ".", "shape", "[", ":", "-", "1", "]", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.device": [[979, 988], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", "->", "torch", ".", "device", ":", "\n", "        ", "\"\"\"\n            Returns the device on which the Rigid's tensors are located.\n\n            Returns:\n                The device on which the Rigid's tensors are located\n        \"\"\"", "\n", "return", "self", ".", "_trans", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_rots": [[989, 997], ["None"], "methods", ["None"], ["", "def", "get_rots", "(", "self", ")", "->", "Rotation", ":", "\n", "        ", "\"\"\"\n            Getter for the rotation.\n\n            Returns:\n                The rotation object\n        \"\"\"", "\n", "return", "self", ".", "_rots", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_trans": [[998, 1006], ["None"], "methods", ["None"], ["", "def", "get_trans", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n            Getter for the translation.\n\n            Returns:\n                The stored translation\n        \"\"\"", "\n", "return", "self", ".", "_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.compose_q_update_vec": [[1007, 1028], ["rigid_utils.Rigid._rots.compose_q_update_vec", "rigid_utils.Rigid._rots.apply", "rigid_utils.Rigid"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.compose_q_update_vec", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply"], ["", "def", "compose_q_update_vec", "(", "self", ",", "\n", "q_update_vec", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Composes the transformation with a quaternion update vector of\n            shape [*, 6], where the final 6 columns represent the x, y, and\n            z values of a quaternion of form (1, x, y, z) followed by a 3D\n            translation.\n\n            Args:\n                q_vec: The quaternion update vector.\n            Returns:\n                The composed transformation.\n        \"\"\"", "\n", "q_vec", ",", "t_vec", "=", "q_update_vec", "[", "...", ",", ":", "3", "]", ",", "q_update_vec", "[", "...", ",", "3", ":", "]", "\n", "new_rots", "=", "self", ".", "_rots", ".", "compose_q_update_vec", "(", "q_vec", ")", "\n", "\n", "trans_update", "=", "self", ".", "_rots", ".", "apply", "(", "t_vec", ")", "\n", "new_translation", "=", "self", ".", "_trans", "+", "trans_update", "\n", "\n", "return", "Rigid", "(", "new_rots", ",", "new_translation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.compose": [[1029, 1044], ["rigid_utils.Rigid._rots.compose_r", "rigid_utils.Rigid", "rigid_utils.Rigid._rots.apply"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.compose_r", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply"], ["", "def", "compose", "(", "self", ",", "\n", "r", ":", "Rigid", ",", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Composes the current rigid object with another.\n\n            Args:\n                r:\n                    Another Rigid object\n            Returns:\n                The composition of the two transformations\n        \"\"\"", "\n", "new_rot", "=", "self", ".", "_rots", ".", "compose_r", "(", "r", ".", "_rots", ")", "\n", "new_trans", "=", "self", ".", "_rots", ".", "apply", "(", "r", ".", "_trans", ")", "+", "self", ".", "_trans", "\n", "return", "Rigid", "(", "new_rot", ",", "new_trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply": [[1045, 1058], ["rigid_utils.Rigid._rots.apply"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply"], ["", "def", "apply", "(", "self", ",", "\n", "pts", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n            Applies the transformation to a coordinate tensor.\n\n            Args:\n                pts: A [*, 3] coordinate tensor.\n            Returns:\n                The transformed points.\n        \"\"\"", "\n", "rotated", "=", "self", ".", "_rots", ".", "apply", "(", "pts", ")", "\n", "return", "rotated", "+", "self", ".", "_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.invert_apply": [[1059, 1072], ["rigid_utils.Rigid._rots.invert_apply"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.invert_apply"], ["", "def", "invert_apply", "(", "self", ",", "\n", "pts", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n            Applies the inverse of the transformation to a coordinate tensor.\n\n            Args:\n                pts: A [*, 3] coordinate tensor\n            Returns:\n                The transformed points.\n        \"\"\"", "\n", "pts", "=", "pts", "-", "self", ".", "_trans", "\n", "return", "self", ".", "_rots", ".", "invert_apply", "(", "pts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.invert": [[1073, 1084], ["rigid_utils.Rigid._rots.invert", "rigid_utils.Rigid.apply", "rigid_utils.Rigid"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.invert", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply"], ["", "def", "invert", "(", "self", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Inverts the transformation.\n\n            Returns:\n                The inverse transformation.\n        \"\"\"", "\n", "rot_inv", "=", "self", ".", "_rots", ".", "invert", "(", ")", "\n", "trn_inv", "=", "rot_inv", ".", "apply", "(", "self", ".", "_trans", ")", "\n", "\n", "return", "Rigid", "(", "rot_inv", ",", "-", "1", "*", "trn_inv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.map_tensor_fn": [[1085, 1106], ["rigid_utils.Rigid._rots.map_tensor_fn", "torch.stack", "rigid_utils.Rigid", "list", "map", "torch.unbind"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.map_tensor_fn"], ["", "def", "map_tensor_fn", "(", "self", ",", "\n", "fn", ":", "Callable", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Apply a Tensor -> Tensor function to underlying translation and\n            rotation tensors, mapping over the translation/rotation dimensions\n            respectively.\n\n            Args:\n                fn:\n                    A Tensor -> Tensor function to be mapped over the Rigid\n            Returns:\n                The transformed Rigid object\n        \"\"\"", "\n", "new_rots", "=", "self", ".", "_rots", ".", "map_tensor_fn", "(", "fn", ")", "\n", "new_trans", "=", "torch", ".", "stack", "(", "\n", "list", "(", "map", "(", "fn", ",", "torch", ".", "unbind", "(", "self", ".", "_trans", ",", "dim", "=", "-", "1", ")", ")", ")", ",", "\n", "dim", "=", "-", "1", "\n", ")", "\n", "\n", "return", "Rigid", "(", "new_rots", ",", "new_trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.to_tensor_4x4": [[1107, 1119], ["rigid_utils.Rigid._trans.new_zeros", "rigid_utils.Rigid._rots.get_rot_mats"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_rot_mats"], ["", "def", "to_tensor_4x4", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n            Converts a transformation to a homogenous transformation tensor.\n\n            Returns:\n                A [*, 4, 4] homogenous transformation tensor\n        \"\"\"", "\n", "tensor", "=", "self", ".", "_trans", ".", "new_zeros", "(", "(", "*", "self", ".", "shape", ",", "4", ",", "4", ")", ")", "\n", "tensor", "[", "...", ",", ":", "3", ",", ":", "3", "]", "=", "self", ".", "_rots", ".", "get_rot_mats", "(", ")", "\n", "tensor", "[", "...", ",", ":", "3", ",", "3", "]", "=", "self", ".", "_trans", "\n", "tensor", "[", "...", ",", "3", ",", "3", "]", "=", "1", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.from_tensor_4x4": [[1120, 1140], ["rigid_utils.Rotation", "rigid_utils.Rigid", "ValueError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "from_tensor_4x4", "(", "\n", "t", ":", "torch", ".", "Tensor", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Constructs a transformation from a homogenous transformation\n            tensor.\n\n            Args:\n                t: [*, 4, 4] homogenous transformation tensor\n            Returns:\n                T object with shape [*]\n        \"\"\"", "\n", "if", "(", "t", ".", "shape", "[", "-", "2", ":", "]", "!=", "(", "4", ",", "4", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Incorrectly shaped input tensor\"", ")", "\n", "\n", "", "rots", "=", "Rotation", "(", "rot_mats", "=", "t", "[", "...", ",", ":", "3", ",", ":", "3", "]", ",", "quats", "=", "None", ")", "\n", "trans", "=", "t", "[", "...", ",", ":", "3", ",", "3", "]", "\n", "\n", "return", "Rigid", "(", "rots", ",", "trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.to_tensor_7": [[1141, 1154], ["rigid_utils.Rigid._trans.new_zeros", "rigid_utils.Rigid._rots.get_quats"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_quats"], ["", "def", "to_tensor_7", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n            Converts a transformation to a tensor with 7 final columns, four \n            for the quaternion followed by three for the translation.\n\n            Returns:\n                A [*, 7] tensor representation of the transformation\n        \"\"\"", "\n", "tensor", "=", "self", ".", "_trans", ".", "new_zeros", "(", "(", "*", "self", ".", "shape", ",", "7", ")", ")", "\n", "tensor", "[", "...", ",", ":", "4", "]", "=", "self", ".", "_rots", ".", "get_quats", "(", ")", "\n", "tensor", "[", "...", ",", "4", ":", "]", "=", "self", ".", "_trans", "\n", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.from_tensor_7": [[1155, 1172], ["rigid_utils.Rotation", "rigid_utils.Rigid", "ValueError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "from_tensor_7", "(", "\n", "t", ":", "torch", ".", "Tensor", ",", "\n", "normalize_quats", ":", "bool", "=", "False", ",", "\n", ")", "->", "Rigid", ":", "\n", "        ", "if", "(", "t", ".", "shape", "[", "-", "1", "]", "!=", "7", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Incorrectly shaped input tensor\"", ")", "\n", "\n", "", "quats", ",", "trans", "=", "t", "[", "...", ",", ":", "4", "]", ",", "t", "[", "...", ",", "4", ":", "]", "\n", "\n", "rots", "=", "Rotation", "(", "\n", "rot_mats", "=", "None", ",", "\n", "quats", "=", "quats", ",", "\n", "normalize_quats", "=", "normalize_quats", "\n", ")", "\n", "\n", "return", "Rigid", "(", "rots", ",", "trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.from_3_points": [[1173, 1217], ["torch.unbind", "torch.unbind", "torch.unbind", "torch.sqrt", "sum", "torch.sqrt", "torch.stack", "rots.reshape.reshape.reshape", "rigid_utils.Rotation", "rigid_utils.Rigid", "torch.stack", "zip", "zip", "sum", "zip", "sum", "zip", "zip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "from_3_points", "(", "\n", "p_neg_x_axis", ":", "torch", ".", "Tensor", ",", "\n", "origin", ":", "torch", ".", "Tensor", ",", "\n", "p_xy_plane", ":", "torch", ".", "Tensor", ",", "\n", "eps", ":", "float", "=", "1e-8", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Implements algorithm 21. Constructs transformations from sets of 3 \n            points using the Gram-Schmidt algorithm.\n\n            Args:\n                p_neg_x_axis: [*, 3] coordinates\n                origin: [*, 3] coordinates used as frame origins\n                p_xy_plane: [*, 3] coordinates\n                eps: Small epsilon value\n            Returns:\n                A transformation object of shape [*]\n        \"\"\"", "\n", "p_neg_x_axis", "=", "torch", ".", "unbind", "(", "p_neg_x_axis", ",", "dim", "=", "-", "1", ")", "\n", "origin", "=", "torch", ".", "unbind", "(", "origin", ",", "dim", "=", "-", "1", ")", "\n", "p_xy_plane", "=", "torch", ".", "unbind", "(", "p_xy_plane", ",", "dim", "=", "-", "1", ")", "\n", "\n", "e0", "=", "[", "c1", "-", "c2", "for", "c1", ",", "c2", "in", "zip", "(", "origin", ",", "p_neg_x_axis", ")", "]", "\n", "e1", "=", "[", "c1", "-", "c2", "for", "c1", ",", "c2", "in", "zip", "(", "p_xy_plane", ",", "origin", ")", "]", "\n", "\n", "denom", "=", "torch", ".", "sqrt", "(", "sum", "(", "(", "c", "*", "c", "for", "c", "in", "e0", ")", ")", "+", "eps", ")", "\n", "e0", "=", "[", "c", "/", "denom", "for", "c", "in", "e0", "]", "\n", "dot", "=", "sum", "(", "(", "c1", "*", "c2", "for", "c1", ",", "c2", "in", "zip", "(", "e0", ",", "e1", ")", ")", ")", "\n", "e1", "=", "[", "c2", "-", "c1", "*", "dot", "for", "c1", ",", "c2", "in", "zip", "(", "e0", ",", "e1", ")", "]", "\n", "denom", "=", "torch", ".", "sqrt", "(", "sum", "(", "(", "c", "*", "c", "for", "c", "in", "e1", ")", ")", "+", "eps", ")", "\n", "e1", "=", "[", "c", "/", "denom", "for", "c", "in", "e1", "]", "\n", "e2", "=", "[", "\n", "e0", "[", "1", "]", "*", "e1", "[", "2", "]", "-", "e0", "[", "2", "]", "*", "e1", "[", "1", "]", ",", "\n", "e0", "[", "2", "]", "*", "e1", "[", "0", "]", "-", "e0", "[", "0", "]", "*", "e1", "[", "2", "]", ",", "\n", "e0", "[", "0", "]", "*", "e1", "[", "1", "]", "-", "e0", "[", "1", "]", "*", "e1", "[", "0", "]", ",", "\n", "]", "\n", "\n", "rots", "=", "torch", ".", "stack", "(", "[", "c", "for", "tup", "in", "zip", "(", "e0", ",", "e1", ",", "e2", ")", "for", "c", "in", "tup", "]", ",", "dim", "=", "-", "1", ")", "\n", "rots", "=", "rots", ".", "reshape", "(", "rots", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "3", ",", "3", ")", ")", "\n", "\n", "rot_obj", "=", "Rotation", "(", "rot_mats", "=", "rots", ",", "quats", "=", "None", ")", "\n", "\n", "return", "Rigid", "(", "rot_obj", ",", "torch", ".", "stack", "(", "origin", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze": [[1218, 1236], ["rigid_utils.Rigid._rots.unsqueeze", "rigid_utils.Rigid._trans.unsqueeze", "rigid_utils.Rigid", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze"], ["", "def", "unsqueeze", "(", "self", ",", "\n", "dim", ":", "int", ",", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Analogous to torch.unsqueeze. The dimension is relative to the\n            shared dimensions of the rotation/translation.\n            \n            Args:\n                dim: A positive or negative dimension index.\n            Returns:\n                The unsqueezed transformation.\n        \"\"\"", "\n", "if", "dim", ">=", "len", "(", "self", ".", "shape", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid dimension\"", ")", "\n", "", "rots", "=", "self", ".", "_rots", ".", "unsqueeze", "(", "dim", ")", "\n", "trans", "=", "self", ".", "_trans", ".", "unsqueeze", "(", "dim", "if", "dim", ">=", "0", "else", "dim", "-", "1", ")", "\n", "\n", "return", "Rigid", "(", "rots", ",", "trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat": [[1237, 1260], ["rigid_utils.Rotation.cat", "torch.cat", "rigid_utils.Rigid"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat"], ["", "@", "staticmethod", "\n", "def", "cat", "(", "\n", "ts", ":", "Sequence", "[", "Rigid", "]", ",", "\n", "dim", ":", "int", ",", "\n", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Concatenates transformations along a new dimension.\n\n            Args:\n                ts: \n                    A list of T objects\n                dim: \n                    The dimension along which the transformations should be \n                    concatenated\n            Returns:\n                A concatenated transformation object\n        \"\"\"", "\n", "rots", "=", "Rotation", ".", "cat", "(", "[", "t", ".", "_rots", "for", "t", "in", "ts", "]", ",", "dim", ")", "\n", "trans", "=", "torch", ".", "cat", "(", "\n", "[", "t", ".", "_trans", "for", "t", "in", "ts", "]", ",", "dim", "=", "dim", "if", "dim", ">=", "0", "else", "dim", "-", "1", "\n", ")", "\n", "\n", "return", "Rigid", "(", "rots", ",", "trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply_rot_fn": [[1261, 1272], ["rigid_utils.Rigid", "fn"], "methods", ["None"], ["", "def", "apply_rot_fn", "(", "self", ",", "fn", ":", "Callable", "[", "Rotation", ",", "Rotation", "]", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Applies a Rotation -> Rotation function to the stored rotation\n            object.\n\n            Args:\n                fn: A function of type Rotation -> Rotation\n            Returns:\n                A transformation object with a transformed rotation.\n        \"\"\"", "\n", "return", "Rigid", "(", "fn", "(", "self", ".", "_rots", ")", ",", "self", ".", "_trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply_trans_fn": [[1273, 1285], ["rigid_utils.Rigid", "fn"], "methods", ["None"], ["", "def", "apply_trans_fn", "(", "self", ",", "fn", ":", "Callable", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Applies a Tensor -> Tensor function to the stored translation.\n\n            Args:\n                fn: \n                    A function of type Tensor -> Tensor to be applied to the\n                    translation\n            Returns:\n                A transformation object with a transformed translation.\n        \"\"\"", "\n", "return", "Rigid", "(", "self", ".", "_rots", ",", "fn", "(", "self", ".", "_trans", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.scale_translation": [[1286, 1298], ["rigid_utils.Rigid.apply_trans_fn"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply_trans_fn"], ["", "def", "scale_translation", "(", "self", ",", "trans_scale_factor", ":", "float", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Scales the translation by a constant factor.\n\n            Args:\n                trans_scale_factor:\n                    The constant factor\n            Returns:\n                A transformation object with a scaled translation.\n        \"\"\"", "\n", "fn", "=", "lambda", "t", ":", "t", "*", "trans_scale_factor", "\n", "return", "self", ".", "apply_trans_fn", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.stop_rot_gradient": [[1299, 1308], ["rigid_utils.Rigid.apply_rot_fn", "r.detach"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply_rot_fn", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach"], ["", "def", "stop_rot_gradient", "(", "self", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Detaches the underlying rotation object\n\n            Returns:\n                A transformation object with detached rotations\n        \"\"\"", "\n", "fn", "=", "lambda", "r", ":", "r", ".", "detach", "(", ")", "\n", "return", "self", ".", "apply_rot_fn", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.make_transform_from_reference": [[1309, 1381], ["torch.sqrt", "sin_c1.new_zeros", "sin_c1.new_ones", "sin_c1.new_zeros", "torch.sqrt", "sin_c2.new_zeros", "rigid_utils.rot_matmul", "rigid_utils.rot_vec_mul", "torch.sqrt", "sin_c2.new_zeros", "rigid_utils.rot_matmul", "rots.transpose.transpose.transpose", "rigid_utils.Rotation", "rigid_utils.Rigid", "torch.sqrt", "range", "range"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.rot_matmul", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.rot_vec_mul", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.rot_matmul"], ["", "@", "staticmethod", "\n", "def", "make_transform_from_reference", "(", "n_xyz", ",", "ca_xyz", ",", "c_xyz", ",", "eps", "=", "1e-20", ")", ":", "\n", "        ", "\"\"\"\n            Returns a transformation object from reference coordinates.\n  \n            Note that this method does not take care of symmetries. If you \n            provide the atom positions in the non-standard way, the N atom will \n            end up not at [-0.527250, 1.359329, 0.0] but instead at \n            [-0.527250, -1.359329, 0.0]. You need to take care of such cases in \n            your code.\n  \n            Args:\n                n_xyz: A [*, 3] tensor of nitrogen xyz coordinates.\n                ca_xyz: A [*, 3] tensor of carbon alpha xyz coordinates.\n                c_xyz: A [*, 3] tensor of carbon xyz coordinates.\n            Returns:\n                A transformation object. After applying the translation and \n                rotation to the reference backbone, the coordinates will \n                approximately equal to the input coordinates.\n        \"\"\"", "\n", "translation", "=", "-", "1", "*", "ca_xyz", "\n", "n_xyz", "=", "n_xyz", "+", "translation", "\n", "c_xyz", "=", "c_xyz", "+", "translation", "\n", "\n", "c_x", ",", "c_y", ",", "c_z", "=", "[", "c_xyz", "[", "...", ",", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "norm", "=", "torch", ".", "sqrt", "(", "eps", "+", "c_x", "**", "2", "+", "c_y", "**", "2", ")", "\n", "sin_c1", "=", "-", "c_y", "/", "norm", "\n", "cos_c1", "=", "c_x", "/", "norm", "\n", "zeros", "=", "sin_c1", ".", "new_zeros", "(", "sin_c1", ".", "shape", ")", "\n", "ones", "=", "sin_c1", ".", "new_ones", "(", "sin_c1", ".", "shape", ")", "\n", "\n", "c1_rots", "=", "sin_c1", ".", "new_zeros", "(", "(", "*", "sin_c1", ".", "shape", ",", "3", ",", "3", ")", ")", "\n", "c1_rots", "[", "...", ",", "0", ",", "0", "]", "=", "cos_c1", "\n", "c1_rots", "[", "...", ",", "0", ",", "1", "]", "=", "-", "1", "*", "sin_c1", "\n", "c1_rots", "[", "...", ",", "1", ",", "0", "]", "=", "sin_c1", "\n", "c1_rots", "[", "...", ",", "1", ",", "1", "]", "=", "cos_c1", "\n", "c1_rots", "[", "...", ",", "2", ",", "2", "]", "=", "1", "\n", "\n", "norm", "=", "torch", ".", "sqrt", "(", "eps", "+", "c_x", "**", "2", "+", "c_y", "**", "2", "+", "c_z", "**", "2", ")", "\n", "sin_c2", "=", "c_z", "/", "norm", "\n", "cos_c2", "=", "torch", ".", "sqrt", "(", "c_x", "**", "2", "+", "c_y", "**", "2", ")", "/", "norm", "\n", "\n", "c2_rots", "=", "sin_c2", ".", "new_zeros", "(", "(", "*", "sin_c2", ".", "shape", ",", "3", ",", "3", ")", ")", "\n", "c2_rots", "[", "...", ",", "0", ",", "0", "]", "=", "cos_c2", "\n", "c2_rots", "[", "...", ",", "0", ",", "2", "]", "=", "sin_c2", "\n", "c2_rots", "[", "...", ",", "1", ",", "1", "]", "=", "1", "\n", "c2_rots", "[", "...", ",", "2", ",", "0", "]", "=", "-", "1", "*", "sin_c2", "\n", "c2_rots", "[", "...", ",", "2", ",", "2", "]", "=", "cos_c2", "\n", "\n", "c_rots", "=", "rot_matmul", "(", "c2_rots", ",", "c1_rots", ")", "\n", "n_xyz", "=", "rot_vec_mul", "(", "c_rots", ",", "n_xyz", ")", "\n", "\n", "_", ",", "n_y", ",", "n_z", "=", "[", "n_xyz", "[", "...", ",", "i", "]", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "norm", "=", "torch", ".", "sqrt", "(", "eps", "+", "n_y", "**", "2", "+", "n_z", "**", "2", ")", "\n", "sin_n", "=", "-", "n_z", "/", "norm", "\n", "cos_n", "=", "n_y", "/", "norm", "\n", "\n", "n_rots", "=", "sin_c2", ".", "new_zeros", "(", "(", "*", "sin_c2", ".", "shape", ",", "3", ",", "3", ")", ")", "\n", "n_rots", "[", "...", ",", "0", ",", "0", "]", "=", "1", "\n", "n_rots", "[", "...", ",", "1", ",", "1", "]", "=", "cos_n", "\n", "n_rots", "[", "...", ",", "1", ",", "2", "]", "=", "-", "1", "*", "sin_n", "\n", "n_rots", "[", "...", ",", "2", ",", "1", "]", "=", "sin_n", "\n", "n_rots", "[", "...", ",", "2", ",", "2", "]", "=", "cos_n", "\n", "\n", "rots", "=", "rot_matmul", "(", "n_rots", ",", "c_rots", ")", "\n", "\n", "rots", "=", "rots", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "translation", "=", "-", "1", "*", "translation", "\n", "\n", "rot_obj", "=", "Rotation", "(", "rot_mats", "=", "rots", ",", "quats", "=", "None", ")", "\n", "\n", "return", "Rigid", "(", "rot_obj", ",", "translation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cuda": [[1382, 1390], ["rigid_utils.Rigid", "rigid_utils.Rigid._rots.cuda", "rigid_utils.Rigid._trans.cuda"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cuda", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cuda"], ["", "def", "cuda", "(", "self", ")", "->", "Rigid", ":", "\n", "        ", "\"\"\"\n            Moves the transformation object to GPU memory\n            \n            Returns:\n                A version of the transformation on GPU\n        \"\"\"", "\n", "return", "Rigid", "(", "self", ".", "_rots", ".", "cuda", "(", ")", ",", "self", ".", "_trans", ".", "cuda", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.rot_matmul": [[23, 81], ["torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["def", "rot_matmul", "(", "\n", "a", ":", "torch", ".", "Tensor", ",", "\n", "b", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n        Performs matrix multiplication of two rotation matrix tensors. Written\n        out by hand to avoid AMP downcasting.\n\n        Args:\n            a: [*, 3, 3] left multiplicand\n            b: [*, 3, 3] right multiplicand\n        Returns:\n            The product ab\n    \"\"\"", "\n", "row_1", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "a", "[", "...", ",", "0", ",", "0", "]", "*", "b", "[", "...", ",", "0", ",", "0", "]", "\n", "+", "a", "[", "...", ",", "0", ",", "1", "]", "*", "b", "[", "...", ",", "1", ",", "0", "]", "\n", "+", "a", "[", "...", ",", "0", ",", "2", "]", "*", "b", "[", "...", ",", "2", ",", "0", "]", ",", "\n", "a", "[", "...", ",", "0", ",", "0", "]", "*", "b", "[", "...", ",", "0", ",", "1", "]", "\n", "+", "a", "[", "...", ",", "0", ",", "1", "]", "*", "b", "[", "...", ",", "1", ",", "1", "]", "\n", "+", "a", "[", "...", ",", "0", ",", "2", "]", "*", "b", "[", "...", ",", "2", ",", "1", "]", ",", "\n", "a", "[", "...", ",", "0", ",", "0", "]", "*", "b", "[", "...", ",", "0", ",", "2", "]", "\n", "+", "a", "[", "...", ",", "0", ",", "1", "]", "*", "b", "[", "...", ",", "1", ",", "2", "]", "\n", "+", "a", "[", "...", ",", "0", ",", "2", "]", "*", "b", "[", "...", ",", "2", ",", "2", "]", ",", "\n", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "row_2", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "a", "[", "...", ",", "1", ",", "0", "]", "*", "b", "[", "...", ",", "0", ",", "0", "]", "\n", "+", "a", "[", "...", ",", "1", ",", "1", "]", "*", "b", "[", "...", ",", "1", ",", "0", "]", "\n", "+", "a", "[", "...", ",", "1", ",", "2", "]", "*", "b", "[", "...", ",", "2", ",", "0", "]", ",", "\n", "a", "[", "...", ",", "1", ",", "0", "]", "*", "b", "[", "...", ",", "0", ",", "1", "]", "\n", "+", "a", "[", "...", ",", "1", ",", "1", "]", "*", "b", "[", "...", ",", "1", ",", "1", "]", "\n", "+", "a", "[", "...", ",", "1", ",", "2", "]", "*", "b", "[", "...", ",", "2", ",", "1", "]", ",", "\n", "a", "[", "...", ",", "1", ",", "0", "]", "*", "b", "[", "...", ",", "0", ",", "2", "]", "\n", "+", "a", "[", "...", ",", "1", ",", "1", "]", "*", "b", "[", "...", ",", "1", ",", "2", "]", "\n", "+", "a", "[", "...", ",", "1", ",", "2", "]", "*", "b", "[", "...", ",", "2", ",", "2", "]", ",", "\n", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "row_3", "=", "torch", ".", "stack", "(", "\n", "[", "\n", "a", "[", "...", ",", "2", ",", "0", "]", "*", "b", "[", "...", ",", "0", ",", "0", "]", "\n", "+", "a", "[", "...", ",", "2", ",", "1", "]", "*", "b", "[", "...", ",", "1", ",", "0", "]", "\n", "+", "a", "[", "...", ",", "2", ",", "2", "]", "*", "b", "[", "...", ",", "2", ",", "0", "]", ",", "\n", "a", "[", "...", ",", "2", ",", "0", "]", "*", "b", "[", "...", ",", "0", ",", "1", "]", "\n", "+", "a", "[", "...", ",", "2", ",", "1", "]", "*", "b", "[", "...", ",", "1", ",", "1", "]", "\n", "+", "a", "[", "...", ",", "2", ",", "2", "]", "*", "b", "[", "...", ",", "2", ",", "1", "]", ",", "\n", "a", "[", "...", ",", "2", ",", "0", "]", "*", "b", "[", "...", ",", "0", ",", "2", "]", "\n", "+", "a", "[", "...", ",", "2", ",", "1", "]", "*", "b", "[", "...", ",", "1", ",", "2", "]", "\n", "+", "a", "[", "...", ",", "2", ",", "2", "]", "*", "b", "[", "...", ",", "2", ",", "2", "]", ",", "\n", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "\n", "return", "torch", ".", "stack", "(", "[", "row_1", ",", "row_2", ",", "row_3", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.rot_vec_mul": [[83, 107], ["torch.stack"], "function", ["None"], ["", "def", "rot_vec_mul", "(", "\n", "r", ":", "torch", ".", "Tensor", ",", "\n", "t", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n        Applies a rotation to a vector. Written out by hand to avoid transfer\n        to avoid AMP downcasting.\n\n        Args:\n            r: [*, 3, 3] rotation matrices\n            t: [*, 3] coordinate tensors\n        Returns:\n            [*, 3] rotated coordinates\n    \"\"\"", "\n", "x", "=", "t", "[", "...", ",", "0", "]", "\n", "y", "=", "t", "[", "...", ",", "1", "]", "\n", "z", "=", "t", "[", "...", ",", "2", "]", "\n", "return", "torch", ".", "stack", "(", "\n", "[", "\n", "r", "[", "...", ",", "0", ",", "0", "]", "*", "x", "+", "r", "[", "...", ",", "0", ",", "1", "]", "*", "y", "+", "r", "[", "...", ",", "0", ",", "2", "]", "*", "z", ",", "\n", "r", "[", "...", ",", "1", ",", "0", "]", "*", "x", "+", "r", "[", "...", ",", "1", ",", "1", "]", "*", "y", "+", "r", "[", "...", ",", "1", ",", "2", "]", "*", "z", ",", "\n", "r", "[", "...", ",", "2", ",", "0", "]", "*", "x", "+", "r", "[", "...", ",", "2", ",", "1", "]", "*", "y", "+", "r", "[", "...", ",", "2", ",", "2", "]", "*", "z", ",", "\n", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.identity_rot_mats": [[110, 123], ["torch.eye", "rots.expand.view", "rots.expand.expand", "len"], "function", ["None"], ["", "def", "identity_rot_mats", "(", "\n", "batch_dims", ":", "Tuple", "[", "int", "]", ",", "\n", "dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", "=", "None", ",", "\n", "device", ":", "Optional", "[", "torch", ".", "device", "]", "=", "None", ",", "\n", "requires_grad", ":", "bool", "=", "True", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "rots", "=", "torch", ".", "eye", "(", "\n", "3", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ",", "requires_grad", "=", "requires_grad", "\n", ")", "\n", "rots", "=", "rots", ".", "view", "(", "*", "(", "(", "1", ",", ")", "*", "len", "(", "batch_dims", ")", ")", ",", "3", ",", "3", ")", "\n", "rots", "=", "rots", ".", "expand", "(", "*", "batch_dims", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "return", "rots", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.identity_trans": [[125, 138], ["torch.zeros"], "function", ["None"], ["", "def", "identity_trans", "(", "\n", "batch_dims", ":", "Tuple", "[", "int", "]", ",", "\n", "dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", "=", "None", ",", "\n", "device", ":", "Optional", "[", "torch", ".", "device", "]", "=", "None", ",", "\n", "requires_grad", ":", "bool", "=", "True", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "trans", "=", "torch", ".", "zeros", "(", "\n", "(", "*", "batch_dims", ",", "3", ")", ",", "\n", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ",", "\n", "requires_grad", "=", "requires_grad", "\n", ")", "\n", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.identity_quats": [[140, 157], ["torch.zeros", "torch.no_grad"], "function", ["None"], ["", "def", "identity_quats", "(", "\n", "batch_dims", ":", "Tuple", "[", "int", "]", ",", "\n", "dtype", ":", "Optional", "[", "torch", ".", "dtype", "]", "=", "None", ",", "\n", "device", ":", "Optional", "[", "torch", ".", "device", "]", "=", "None", ",", "\n", "requires_grad", ":", "bool", "=", "True", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "quat", "=", "torch", ".", "zeros", "(", "\n", "(", "*", "batch_dims", ",", "4", ")", ",", "\n", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ",", "\n", "requires_grad", "=", "requires_grad", "\n", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "quat", "[", "...", ",", "0", "]", "=", "1", "\n", "\n", "", "return", "quat", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils._to_mat": [[164, 172], ["numpy.zeros"], "function", ["None"], ["def", "_to_mat", "(", "pairs", ")", ":", "\n", "    ", "mat", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "for", "pair", "in", "pairs", ":", "\n", "        ", "key", ",", "value", "=", "pair", "\n", "ind", "=", "_qtr_ind_dict", "[", "key", "]", "\n", "mat", "[", "ind", "//", "4", "]", "[", "ind", "%", "4", "]", "=", "value", "\n", "\n", "", "return", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.quat_to_rot": [[186, 207], ["quat.new_tensor", "quat.new_tensor.view", "torch.sum", "len"], "function", ["None"], ["def", "quat_to_rot", "(", "quat", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n        Converts a quaternion to a rotation matrix.\n\n        Args:\n            quat: [*, 4] quaternions\n        Returns:\n            [*, 3, 3] rotation matrices\n    \"\"\"", "\n", "# [*, 4, 4]", "\n", "quat", "=", "quat", "[", "...", ",", "None", "]", "*", "quat", "[", "...", ",", "None", ",", ":", "]", "\n", "\n", "# [4, 4, 3, 3]", "\n", "mat", "=", "quat", ".", "new_tensor", "(", "_QTR_MAT", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# [*, 4, 4, 3, 3]", "\n", "shaped_qtr_mat", "=", "mat", ".", "view", "(", "(", "1", ",", ")", "*", "len", "(", "quat", ".", "shape", "[", ":", "-", "2", "]", ")", "+", "mat", ".", "shape", ")", "\n", "quat", "=", "quat", "[", "...", ",", "None", ",", "None", "]", "*", "shaped_qtr_mat", "\n", "\n", "# [*, 3, 3]", "\n", "return", "torch", ".", "sum", "(", "quat", ",", "dim", "=", "(", "-", "3", ",", "-", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.rot_to_quat": [[209, 229], ["torch.linalg.eigh", "ValueError", "torch.stack", "range", "range", "torch.stack"], "function", ["None"], ["", "def", "rot_to_quat", "(", "\n", "rot", ":", "torch", ".", "Tensor", ",", "\n", ")", ":", "\n", "    ", "if", "(", "rot", ".", "shape", "[", "-", "2", ":", "]", "!=", "(", "3", ",", "3", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input rotation is incorrectly shaped\"", ")", "\n", "\n", "", "rot", "=", "[", "[", "rot", "[", "...", ",", "i", ",", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "[", "[", "xx", ",", "xy", ",", "xz", "]", ",", "[", "yx", ",", "yy", ",", "yz", "]", ",", "[", "zx", ",", "zy", ",", "zz", "]", "]", "=", "rot", "\n", "\n", "k", "=", "[", "\n", "[", "xx", "+", "yy", "+", "zz", ",", "zy", "-", "yz", ",", "xz", "-", "zx", ",", "yx", "-", "xy", ",", "]", ",", "\n", "[", "zy", "-", "yz", ",", "xx", "-", "yy", "-", "zz", ",", "xy", "+", "yx", ",", "xz", "+", "zx", ",", "]", ",", "\n", "[", "xz", "-", "zx", ",", "xy", "+", "yx", ",", "yy", "-", "xx", "-", "zz", ",", "yz", "+", "zy", ",", "]", ",", "\n", "[", "yx", "-", "xy", ",", "xz", "+", "zx", ",", "yz", "+", "zy", ",", "zz", "-", "xx", "-", "yy", ",", "]", "\n", "]", "\n", "\n", "k", "=", "(", "1.", "/", "3.", ")", "*", "torch", ".", "stack", "(", "[", "torch", ".", "stack", "(", "t", ",", "dim", "=", "-", "1", ")", "for", "t", "in", "k", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "_", ",", "vectors", "=", "torch", ".", "linalg", ".", "eigh", "(", "k", ")", "\n", "return", "vectors", "[", "...", ",", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.quat_multiply": [[255, 264], ["quat1.new_tensor", "quat1.new_tensor.view", "torch.sum", "len"], "function", ["None"], ["def", "quat_multiply", "(", "quat1", ",", "quat2", ")", ":", "\n", "    ", "\"\"\"Multiply a quaternion by another quaternion.\"\"\"", "\n", "mat", "=", "quat1", ".", "new_tensor", "(", "_QUAT_MULTIPLY", ")", "\n", "reshaped_mat", "=", "mat", ".", "view", "(", "(", "1", ",", ")", "*", "len", "(", "quat1", ".", "shape", "[", ":", "-", "1", "]", ")", "+", "mat", ".", "shape", ")", "\n", "return", "torch", ".", "sum", "(", "\n", "reshaped_mat", "*", "\n", "quat1", "[", "...", ",", ":", ",", "None", ",", "None", "]", "*", "\n", "quat2", "[", "...", ",", "None", ",", ":", ",", "None", "]", ",", "\n", "dim", "=", "(", "-", "3", ",", "-", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.quat_multiply_by_vec": [[267, 276], ["quat.new_tensor", "quat.new_tensor.view", "torch.sum", "len"], "function", ["None"], ["", "def", "quat_multiply_by_vec", "(", "quat", ",", "vec", ")", ":", "\n", "    ", "\"\"\"Multiply a quaternion by a pure-vector quaternion.\"\"\"", "\n", "mat", "=", "quat", ".", "new_tensor", "(", "_QUAT_MULTIPLY_BY_VEC", ")", "\n", "reshaped_mat", "=", "mat", ".", "view", "(", "(", "1", ",", ")", "*", "len", "(", "quat", ".", "shape", "[", ":", "-", "1", "]", ")", "+", "mat", ".", "shape", ")", "\n", "return", "torch", ".", "sum", "(", "\n", "reshaped_mat", "*", "\n", "quat", "[", "...", ",", ":", ",", "None", ",", "None", "]", "*", "\n", "vec", "[", "...", ",", "None", ",", ":", ",", "None", "]", ",", "\n", "dim", "=", "(", "-", "3", ",", "-", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.invert_rot_mat": [[279, 281], ["rot_mat.transpose"], "function", ["None"], ["", "def", "invert_rot_mat", "(", "rot_mat", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "rot_mat", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.invert_quat": [[283, 288], ["quat.clone", "torch.sum"], "function", ["None"], ["", "def", "invert_quat", "(", "quat", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "quat_prime", "=", "quat", ".", "clone", "(", ")", "\n", "quat_prime", "[", "...", ",", "1", ":", "]", "*=", "-", "1", "\n", "inv", "=", "quat_prime", "/", "torch", ".", "sum", "(", "quat", "**", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "inv", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.permute_final_dims": [[22, 26], ["list", "tensor.permute", "len", "range", "len"], "function", ["None"], ["def", "permute_final_dims", "(", "tensor", ":", "torch", ".", "Tensor", ",", "inds", ":", "List", "[", "int", "]", ")", ":", "\n", "    ", "zero_index", "=", "-", "1", "*", "len", "(", "inds", ")", "\n", "first_inds", "=", "list", "(", "range", "(", "len", "(", "tensor", ".", "shape", "[", ":", "zero_index", "]", ")", ")", ")", "\n", "return", "tensor", ".", "permute", "(", "first_inds", "+", "[", "zero_index", "+", "i", "for", "i", "in", "inds", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.flatten_final_dims": [[28, 30], ["t.reshape"], "function", ["None"], ["", "def", "flatten_final_dims", "(", "t", ":", "torch", ".", "Tensor", ",", "no_dims", ":", "int", ")", ":", "\n", "    ", "return", "t", ".", "reshape", "(", "t", ".", "shape", "[", ":", "-", "no_dims", "]", "+", "(", "-", "1", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.masked_mean": [[32, 35], ["mask.expand.expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "masked_mean", "(", "mask", ",", "value", ",", "dim", ",", "eps", "=", "1e-4", ")", ":", "\n", "    ", "mask", "=", "mask", ".", "expand", "(", "*", "value", ".", "shape", ")", "\n", "return", "torch", ".", "sum", "(", "mask", "*", "value", ",", "dim", "=", "dim", ")", "/", "(", "eps", "+", "torch", ".", "sum", "(", "mask", ",", "dim", "=", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.pts_to_distogram": [[37, 45], ["torch.linspace", "torch.linspace", "torch.sqrt", "torch.sqrt", "torch.bucketize", "torch.bucketize", "torch.sum", "torch.sum", "pts.unsqueeze", "pts.unsqueeze"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze"], ["", "def", "pts_to_distogram", "(", "pts", ",", "min_bin", "=", "2.3125", ",", "max_bin", "=", "21.6875", ",", "no_bins", "=", "64", ")", ":", "\n", "    ", "boundaries", "=", "torch", ".", "linspace", "(", "\n", "min_bin", ",", "max_bin", ",", "no_bins", "-", "1", ",", "device", "=", "pts", ".", "device", "\n", ")", "\n", "dists", "=", "torch", ".", "sqrt", "(", "\n", "torch", ".", "sum", "(", "(", "pts", ".", "unsqueeze", "(", "-", "2", ")", "-", "pts", ".", "unsqueeze", "(", "-", "3", ")", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "\n", ")", "\n", "return", "torch", ".", "bucketize", "(", "dists", ",", "boundaries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.dict_multimap": [[47, 58], ["first.items", "type", "tensor_utils.dict_multimap", "fn"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.dict_multimap"], ["", "def", "dict_multimap", "(", "fn", ",", "dicts", ")", ":", "\n", "    ", "first", "=", "dicts", "[", "0", "]", "\n", "new_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "first", ".", "items", "(", ")", ":", "\n", "        ", "all_v", "=", "[", "d", "[", "k", "]", "for", "d", "in", "dicts", "]", "\n", "if", "type", "(", "v", ")", "is", "dict", ":", "\n", "            ", "new_dict", "[", "k", "]", "=", "dict_multimap", "(", "fn", ",", "all_v", ")", "\n", "", "else", ":", "\n", "            ", "new_dict", "[", "k", "]", "=", "fn", "(", "all_v", ")", "\n", "\n", "", "", "return", "new_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot": [[60, 65], ["v_bins.view", "torch.argmin", "torch.argmin", "torch.functional.one_hot().float", "torch.abs", "torch.abs", "torch.functional.one_hot", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot"], ["", "def", "one_hot", "(", "x", ",", "v_bins", ")", ":", "\n", "    ", "reshaped_bins", "=", "v_bins", ".", "view", "(", "(", "(", "1", ",", ")", "*", "len", "(", "x", ".", "shape", ")", ")", "+", "(", "len", "(", "v_bins", ")", ",", ")", ")", "\n", "diffs", "=", "x", "[", "...", ",", "None", "]", "-", "reshaped_bins", "\n", "am", "=", "torch", ".", "argmin", "(", "torch", ".", "abs", "(", "diffs", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "nn", ".", "functional", ".", "one_hot", "(", "am", ",", "num_classes", "=", "len", "(", "v_bins", ")", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.batched_gather": [[67, 80], ["enumerate", "ranges.extend", "torch.arange", "torch.arange", "r.view.view", "ranges.append", "slice", "range", "len", "len"], "function", ["None"], ["", "def", "batched_gather", "(", "data", ",", "inds", ",", "dim", "=", "0", ",", "no_batch_dims", "=", "0", ")", ":", "\n", "    ", "ranges", "=", "[", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "data", ".", "shape", "[", ":", "no_batch_dims", "]", ")", ":", "\n", "        ", "r", "=", "torch", ".", "arange", "(", "s", ")", "\n", "r", "=", "r", ".", "view", "(", "*", "(", "*", "(", "(", "1", ",", ")", "*", "i", ")", ",", "-", "1", ",", "*", "(", "(", "1", ",", ")", "*", "(", "len", "(", "inds", ".", "shape", ")", "-", "i", "-", "1", ")", ")", ")", ")", "\n", "ranges", ".", "append", "(", "r", ")", "\n", "\n", "", "remaining_dims", "=", "[", "\n", "slice", "(", "None", ")", "for", "_", "in", "range", "(", "len", "(", "data", ".", "shape", ")", "-", "no_batch_dims", ")", "\n", "]", "\n", "remaining_dims", "[", "dim", "-", "no_batch_dims", "if", "dim", ">=", "0", "else", "dim", "]", "=", "inds", "\n", "ranges", ".", "extend", "(", "remaining_dims", ")", "\n", "return", "data", "[", "ranges", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.dict_map": [[83, 92], ["dic.items", "type", "tensor_utils.dict_map", "tensor_utils.tree_map"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.dict_map", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.tree_map"], ["", "def", "dict_map", "(", "fn", ",", "dic", ",", "leaf_type", ")", ":", "\n", "    ", "new_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "dic", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "v", ")", "is", "dict", ":", "\n", "            ", "new_dict", "[", "k", "]", "=", "dict_map", "(", "fn", ",", "v", ",", "leaf_type", ")", "\n", "", "else", ":", "\n", "            ", "new_dict", "[", "k", "]", "=", "tree_map", "(", "fn", ",", "v", ",", "leaf_type", ")", "\n", "\n", "", "", "return", "new_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.tree_map": [[94, 106], ["isinstance", "tensor_utils.dict_map", "isinstance", "isinstance", "tensor_utils.tree_map", "tuple", "isinstance", "fn", "print", "ValueError", "tensor_utils.tree_map", "type"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.dict_map", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.tree_map", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.tree_map"], ["", "def", "tree_map", "(", "fn", ",", "tree", ",", "leaf_type", ")", ":", "\n", "    ", "if", "isinstance", "(", "tree", ",", "dict", ")", ":", "\n", "        ", "return", "dict_map", "(", "fn", ",", "tree", ",", "leaf_type", ")", "\n", "", "elif", "isinstance", "(", "tree", ",", "list", ")", ":", "\n", "        ", "return", "[", "tree_map", "(", "fn", ",", "x", ",", "leaf_type", ")", "for", "x", "in", "tree", "]", "\n", "", "elif", "isinstance", "(", "tree", ",", "tuple", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "tree_map", "(", "fn", ",", "x", ",", "leaf_type", ")", "for", "x", "in", "tree", "]", ")", "\n", "", "elif", "isinstance", "(", "tree", ",", "leaf_type", ")", ":", "\n", "        ", "return", "fn", "(", "tree", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "type", "(", "tree", ")", ")", "\n", "raise", "ValueError", "(", "\"Not supported\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils._fetch_dims": [[110, 125], ["type", "tree.values", "shapes.extend", "tensor_utils._fetch_dims", "shapes.extend", "shapes.append", "ValueError", "tensor_utils._fetch_dims"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils._fetch_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils._fetch_dims"], ["def", "_fetch_dims", "(", "tree", ")", ":", "\n", "    ", "shapes", "=", "[", "]", "\n", "tree_type", "=", "type", "(", "tree", ")", "\n", "if", "tree_type", "is", "dict", ":", "\n", "        ", "for", "v", "in", "tree", ".", "values", "(", ")", ":", "\n", "            ", "shapes", ".", "extend", "(", "_fetch_dims", "(", "v", ")", ")", "\n", "", "", "elif", "tree_type", "is", "list", "or", "tree_type", "is", "tuple", ":", "\n", "        ", "for", "t", "in", "tree", ":", "\n", "            ", "shapes", ".", "extend", "(", "_fetch_dims", "(", "t", ")", ")", "\n", "", "", "elif", "tree_type", "is", "torch", ".", "Tensor", ":", "\n", "        ", "shapes", ".", "append", "(", "tree", ".", "shape", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not supported\"", ")", "\n", "\n", "", "return", "shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils._flat_idx_to_idx": [[127, 138], ["reversed", "tuple", "idx.append", "reversed"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_flat_idx_to_idx", "(", "\n", "flat_idx", ":", "int", ",", "\n", "dims", ":", "Tuple", "[", "int", "]", ",", "\n", ")", "->", "Tuple", "[", "int", "]", ":", "\n", "    ", "idx", "=", "[", "]", "\n", "for", "d", "in", "reversed", "(", "dims", ")", ":", "\n", "        ", "idx", ".", "append", "(", "flat_idx", "%", "d", ")", "\n", "flat_idx", "=", "flat_idx", "//", "d", "\n", "\n", "", "return", "tuple", "(", "reversed", "(", "idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils._get_minimal_slice_set": [[140, 256], ["zip", "tuple", "len", "range", "tensor_utils._get_minimal_slice_set.reduce_edge_list"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_get_minimal_slice_set", "(", "\n", "start", ":", "Sequence", "[", "int", "]", ",", "\n", "end", ":", "Sequence", "[", "int", "]", ",", "\n", "dims", ":", "int", ",", "\n", "start_edges", ":", "Optional", "[", "Sequence", "[", "bool", "]", "]", "=", "None", ",", "\n", "end_edges", ":", "Optional", "[", "Sequence", "[", "bool", "]", "]", "=", "None", ",", "\n", ")", "->", "Sequence", "[", "Tuple", "[", "int", "]", "]", ":", "\n", "    ", "\"\"\" \n        Produces an ordered sequence of tensor slices that, when used in\n        sequence on a tensor with shape dims, yields tensors that contain every\n        leaf in the contiguous range [start, end]. Care is taken to yield a \n        short sequence of slices, and perhaps even the shortest possible (I'm \n        pretty sure it's the latter).\n         \n        end is INCLUSIVE. \n    \"\"\"", "\n", "# start_edges and end_edges both indicate whether, starting from any given", "\n", "# dimension, the start/end index is at the top/bottom edge of the", "\n", "# corresponding tensor, modeled as a tree", "\n", "def", "reduce_edge_list", "(", "l", ")", ":", "\n", "        ", "tally", "=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "l", ")", ")", ":", "\n", "            ", "reversed_idx", "=", "-", "1", "*", "(", "i", "+", "1", ")", "\n", "l", "[", "reversed_idx", "]", "*=", "tally", "\n", "tally", "=", "l", "[", "reversed_idx", "]", "\n", "\n", "", "", "if", "(", "start_edges", "is", "None", ")", ":", "\n", "        ", "start_edges", "=", "[", "s", "==", "0", "for", "s", "in", "start", "]", "\n", "reduce_edge_list", "(", "start_edges", ")", "\n", "", "if", "(", "end_edges", "is", "None", ")", ":", "\n", "        ", "end_edges", "=", "[", "e", "==", "(", "d", "-", "1", ")", "for", "e", ",", "d", "in", "zip", "(", "end", ",", "dims", ")", "]", "\n", "reduce_edge_list", "(", "end_edges", ")", "\n", "\n", "# Base cases. Either start/end are empty and we're done, or the final,", "\n", "# one-dimensional tensor can be simply sliced", "\n", "", "if", "(", "len", "(", "start", ")", "==", "0", ")", ":", "\n", "        ", "return", "[", "tuple", "(", ")", "]", "\n", "", "elif", "(", "len", "(", "start", ")", "==", "1", ")", ":", "\n", "        ", "return", "[", "(", "slice", "(", "start", "[", "0", "]", ",", "end", "[", "0", "]", "+", "1", ")", ",", ")", "]", "\n", "\n", "", "slices", "=", "[", "]", "\n", "path", "=", "[", "]", "\n", "\n", "# Dimensions common to start and end can be selected directly", "\n", "for", "s", ",", "e", "in", "zip", "(", "start", ",", "end", ")", ":", "\n", "        ", "if", "(", "s", "==", "e", ")", ":", "\n", "            ", "path", ".", "append", "(", "slice", "(", "s", ",", "s", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n", "", "", "path", "=", "tuple", "(", "path", ")", "\n", "divergence_idx", "=", "len", "(", "path", ")", "\n", "\n", "# start == end, and we're done", "\n", "if", "(", "divergence_idx", "==", "len", "(", "dims", ")", ")", ":", "\n", "        ", "return", "[", "tuple", "(", "path", ")", "]", "\n", "\n", "", "def", "upper", "(", ")", ":", "\n", "        ", "sdi", "=", "start", "[", "divergence_idx", "]", "\n", "return", "[", "\n", "path", "+", "(", "slice", "(", "sdi", ",", "sdi", "+", "1", ")", ",", ")", "+", "s", "for", "s", "in", "\n", "_get_minimal_slice_set", "(", "\n", "start", "[", "divergence_idx", "+", "1", ":", "]", ",", "\n", "[", "d", "-", "1", "for", "d", "in", "dims", "[", "divergence_idx", "+", "1", ":", "]", "]", ",", "\n", "dims", "[", "divergence_idx", "+", "1", ":", "]", ",", "\n", "start_edges", "=", "start_edges", "[", "divergence_idx", "+", "1", ":", "]", ",", "\n", "end_edges", "=", "[", "1", "for", "_", "in", "end_edges", "[", "divergence_idx", "+", "1", ":", "]", "]", "\n", ")", "\n", "]", "\n", "\n", "", "def", "lower", "(", ")", ":", "\n", "        ", "edi", "=", "end", "[", "divergence_idx", "]", "\n", "return", "[", "\n", "path", "+", "(", "slice", "(", "edi", ",", "edi", "+", "1", ")", ",", ")", "+", "s", "for", "s", "in", "\n", "_get_minimal_slice_set", "(", "\n", "[", "0", "for", "_", "in", "start", "[", "divergence_idx", "+", "1", ":", "]", "]", ",", "\n", "end", "[", "divergence_idx", "+", "1", ":", "]", ",", "\n", "dims", "[", "divergence_idx", "+", "1", ":", "]", ",", "\n", "start_edges", "=", "[", "1", "for", "_", "in", "start_edges", "[", "divergence_idx", "+", "1", ":", "]", "]", ",", "\n", "end_edges", "=", "end_edges", "[", "divergence_idx", "+", "1", ":", "]", ",", "\n", ")", "\n", "]", "\n", "\n", "# If both start and end are at the edges of the subtree rooted at", "\n", "# divergence_idx, we can just select the whole subtree at once", "\n", "", "if", "(", "start_edges", "[", "divergence_idx", "]", "and", "end_edges", "[", "divergence_idx", "]", ")", ":", "\n", "        ", "slices", ".", "append", "(", "\n", "path", "+", "(", "slice", "(", "start", "[", "divergence_idx", "]", ",", "end", "[", "divergence_idx", "]", "+", "1", ")", ",", ")", "\n", ")", "\n", "# If just start is at the edge, we can grab almost all of the subtree, ", "\n", "# treating only the ragged bottom edge as an edge case", "\n", "", "elif", "(", "start_edges", "[", "divergence_idx", "]", ")", ":", "\n", "        ", "slices", ".", "append", "(", "\n", "path", "+", "(", "slice", "(", "start", "[", "divergence_idx", "]", ",", "end", "[", "divergence_idx", "]", ")", ",", ")", "\n", ")", "\n", "slices", ".", "extend", "(", "lower", "(", ")", ")", "\n", "# Analogous to the previous case, but the top is ragged this time", "\n", "", "elif", "(", "end_edges", "[", "divergence_idx", "]", ")", ":", "\n", "        ", "slices", ".", "extend", "(", "upper", "(", ")", ")", "\n", "slices", ".", "append", "(", "\n", "path", "+", "(", "slice", "(", "start", "[", "divergence_idx", "]", "+", "1", ",", "end", "[", "divergence_idx", "]", "+", "1", ")", ",", ")", "\n", ")", "\n", "# If both sides of the range are ragged, we need to handle both sides", "\n", "# separately. If there's contiguous meat in between them, we can index it", "\n", "# in one big chunk", "\n", "", "else", ":", "\n", "        ", "slices", ".", "extend", "(", "upper", "(", ")", ")", "\n", "middle_ground", "=", "end", "[", "divergence_idx", "]", "-", "start", "[", "divergence_idx", "]", "\n", "if", "(", "middle_ground", ">", "1", ")", ":", "\n", "            ", "slices", ".", "append", "(", "\n", "path", "+", "(", "slice", "(", "start", "[", "divergence_idx", "]", "+", "1", ",", "end", "[", "divergence_idx", "]", ")", ",", ")", "\n", ")", "\n", "", "slices", ".", "extend", "(", "lower", "(", ")", ")", "\n", "\n", "", "return", "[", "tuple", "(", "s", ")", "for", "s", "in", "slices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils._chunk_slice": [[258, 292], ["list", "list", "tensor_utils._get_minimal_slice_set", "torch.cat", "torch.cat", "tensor_utils._flat_idx_to_idx", "tensor_utils._flat_idx_to_idx", "s.view"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils._get_minimal_slice_set", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils._flat_idx_to_idx", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils._flat_idx_to_idx"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_chunk_slice", "(", "\n", "t", ":", "torch", ".", "Tensor", ",", "\n", "flat_start", ":", "int", ",", "\n", "flat_end", ":", "int", ",", "\n", "no_batch_dims", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n        Equivalent to\n        \n            t.reshape((-1,) + t.shape[no_batch_dims:])[flat_start:flat_end]\n\n        but without the need for the initial reshape call, which can be \n        memory-intensive in certain situations. The only reshape operations\n        in this function are performed on sub-tensors that scale with\n        (flat_end - flat_start), the chunk size.\n    \"\"\"", "\n", "\n", "batch_dims", "=", "t", ".", "shape", "[", ":", "no_batch_dims", "]", "\n", "start_idx", "=", "list", "(", "_flat_idx_to_idx", "(", "flat_start", ",", "batch_dims", ")", ")", "\n", "# _get_minimal_slice_set is inclusive", "\n", "end_idx", "=", "list", "(", "_flat_idx_to_idx", "(", "flat_end", "-", "1", ",", "batch_dims", ")", ")", "\n", "\n", "# Get an ordered list of slices to perform", "\n", "slices", "=", "_get_minimal_slice_set", "(", "\n", "start_idx", ",", "\n", "end_idx", ",", "\n", "batch_dims", ",", "\n", ")", "\n", "\n", "sliced_tensors", "=", "[", "t", "[", "s", "]", "for", "s", "in", "slices", "]", "\n", "\n", "return", "torch", ".", "cat", "(", "\n", "[", "s", ".", "view", "(", "(", "-", "1", ",", ")", "+", "t", ".", "shape", "[", "no_batch_dims", ":", "]", ")", "for", "s", "in", "sliced_tensors", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.chunk_layer": [[295, 409], ["tuple", "tensor_tree_map", "range", "tensor_tree_map", "ValueError", "tensor_tree_map", "layer", "type", "t.expand.view", "len", "tensor_utils._fetch_dims", "max", "t.expand.reshape", "t.expand.expand", "functools.partial", "tensor_tree_map", "tensor_utils.chunk_layer.assign"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils._fetch_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights.assign"], ["", "def", "chunk_layer", "(", "\n", "layer", ":", "Callable", ",", "\n", "inputs", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "chunk_size", ":", "int", ",", "\n", "no_batch_dims", ":", "int", ",", "\n", "low_mem", ":", "bool", "=", "False", ",", "\n", ")", "->", "Any", ":", "\n", "    ", "\"\"\"\n    Implements the \"chunking\" procedure described in section 1.11.8.\n\n    Layer outputs and inputs are assumed to be simple \"pytrees,\"\n    consisting only of (arbitrarily nested) lists, tuples, and dicts with\n    torch.Tensor leaves.\n\n    Args:\n        layer:\n            The layer to be applied chunk-wise\n        inputs:\n            A (non-nested) dictionary of keyworded inputs. All leaves must\n            be tensors and must share the same batch dimensions.\n        chunk_size:\n            The number of sub-batches per chunk. If multiple batch\n            dimensions are specified, a \"sub-batch\" is defined as a single\n            indexing of all batch dimensions simultaneously (s.t. the\n            number of sub-batches is the product of the batch dimensions).\n        no_batch_dims:\n            How many of the initial dimensions of each input tensor can\n            be considered batch dimensions.\n        low_mem:\n            Avoids flattening potentially large input tensors. Unnecessary\n            in most cases, and is ever so slightly slower than the default\n            setting.\n    Returns:\n        The reassembled output of the layer on the inputs.\n    \"\"\"", "\n", "if", "not", "(", "len", "(", "inputs", ")", ">", "0", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Must provide at least one input\"", ")", "\n", "\n", "", "initial_dims", "=", "[", "shape", "[", ":", "no_batch_dims", "]", "for", "shape", "in", "_fetch_dims", "(", "inputs", ")", "]", "\n", "orig_batch_dims", "=", "tuple", "(", "[", "max", "(", "s", ")", "for", "s", "in", "zip", "(", "*", "initial_dims", ")", "]", ")", "\n", "\n", "def", "_prep_inputs", "(", "t", ")", ":", "\n", "# TODO: make this more memory efficient. This sucks", "\n", "        ", "if", "(", "not", "low_mem", ")", ":", "\n", "            ", "if", "not", "sum", "(", "t", ".", "shape", "[", ":", "no_batch_dims", "]", ")", "==", "no_batch_dims", ":", "\n", "                ", "t", "=", "t", ".", "expand", "(", "orig_batch_dims", "+", "t", ".", "shape", "[", "no_batch_dims", ":", "]", ")", "\n", "", "t", "=", "t", ".", "reshape", "(", "-", "1", ",", "*", "t", ".", "shape", "[", "no_batch_dims", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "t", "=", "t", ".", "expand", "(", "orig_batch_dims", "+", "t", ".", "shape", "[", "no_batch_dims", ":", "]", ")", "\n", "", "return", "t", "\n", "\n", "", "prepped_inputs", "=", "tensor_tree_map", "(", "_prep_inputs", ",", "inputs", ")", "\n", "\n", "flat_batch_dim", "=", "1", "\n", "for", "d", "in", "orig_batch_dims", ":", "\n", "        ", "flat_batch_dim", "*=", "d", "\n", "\n", "", "no_chunks", "=", "flat_batch_dim", "//", "chunk_size", "+", "(", "\n", "flat_batch_dim", "%", "chunk_size", "!=", "0", "\n", ")", "\n", "\n", "i", "=", "0", "\n", "out", "=", "None", "\n", "for", "_", "in", "range", "(", "no_chunks", ")", ":", "\n", "# Chunk the input", "\n", "        ", "if", "(", "not", "low_mem", ")", ":", "\n", "            ", "select_chunk", "=", "(", "\n", "lambda", "t", ":", "t", "[", "i", ":", "i", "+", "chunk_size", "]", "if", "t", ".", "shape", "[", "0", "]", "!=", "1", "else", "t", "\n", ")", "\n", "", "else", ":", "\n", "            ", "select_chunk", "=", "(", "\n", "partial", "(", "\n", "_chunk_slice", ",", "\n", "flat_start", "=", "i", ",", "\n", "flat_end", "=", "min", "(", "flat_batch_dim", ",", "i", "+", "chunk_size", ")", ",", "\n", "no_batch_dims", "=", "len", "(", "orig_batch_dims", ")", "\n", ")", "\n", ")", "\n", "\n", "", "chunks", "=", "tensor_tree_map", "(", "select_chunk", ",", "prepped_inputs", ")", "\n", "\n", "# Run the layer on the chunk", "\n", "output_chunk", "=", "layer", "(", "**", "chunks", ")", "\n", "\n", "# Allocate space for the output", "\n", "if", "out", "is", "None", ":", "\n", "            ", "allocate", "=", "lambda", "t", ":", "t", ".", "new_zeros", "(", "(", "flat_batch_dim", ",", ")", "+", "t", ".", "shape", "[", "1", ":", "]", ")", "\n", "out", "=", "tensor_tree_map", "(", "allocate", ",", "output_chunk", ")", "\n", "\n", "# Put the chunk in its pre-allocated space", "\n", "", "out_type", "=", "type", "(", "output_chunk", ")", "\n", "if", "out_type", "is", "dict", ":", "\n", "            ", "def", "assign", "(", "d1", ",", "d2", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "d1", ".", "items", "(", ")", ":", "\n", "                    ", "if", "type", "(", "v", ")", "is", "dict", ":", "\n", "                        ", "assign", "(", "v", ",", "d2", "[", "k", "]", ")", "\n", "", "else", ":", "\n", "                        ", "v", "[", "i", ":", "i", "+", "chunk_size", "]", "=", "d2", "[", "k", "]", "\n", "\n", "", "", "", "assign", "(", "out", ",", "output_chunk", ")", "\n", "", "elif", "out_type", "is", "tuple", ":", "\n", "            ", "for", "x1", ",", "x2", "in", "zip", "(", "out", ",", "output_chunk", ")", ":", "\n", "                ", "x1", "[", "i", ":", "i", "+", "chunk_size", "]", "=", "x2", "\n", "", "", "elif", "out_type", "is", "torch", ".", "Tensor", ":", "\n", "            ", "out", "[", "i", ":", "i", "+", "chunk_size", "]", "=", "output_chunk", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not supported\"", ")", "\n", "\n", "", "i", "+=", "chunk_size", "\n", "\n", "", "reshape", "=", "lambda", "t", ":", "t", ".", "view", "(", "orig_batch_dims", "+", "t", ".", "shape", "[", "1", ":", "]", ")", "\n", "out", "=", "tensor_tree_map", "(", "reshape", ",", "out", ")", "\n", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights.ParamType.__init__": [[44, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fn", ")", ":", "\n", "        ", "self", ".", "transformation", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights._process_translations_dict": [[55, 72], ["d.items", "type", "flat.update", "_process_translations_dict().items", "import_weights._process_translations_dict"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights._process_translations_dict"], ["", "def", "_process_translations_dict", "(", "d", ",", "top_layer", "=", "True", ")", ":", "\n", "    ", "flat", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "v", ")", "==", "dict", ":", "\n", "            ", "prefix", "=", "_NPZ_KEY_PREFIX", "if", "top_layer", "else", "\"\"", "\n", "sub_flat", "=", "{", "\n", "(", "prefix", "+", "\"/\"", ".", "join", "(", "[", "k", ",", "k_prime", "]", ")", ")", ":", "v_prime", "\n", "for", "k_prime", ",", "v_prime", "in", "_process_translations_dict", "(", "\n", "v", ",", "top_layer", "=", "False", "\n", ")", ".", "items", "(", ")", "\n", "}", "\n", "flat", ".", "update", "(", "sub_flat", ")", "\n", "", "else", ":", "\n", "            ", "k", "=", "\"/\"", "+", "k", "if", "not", "top_layer", "else", "k", "\n", "flat", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "flat", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights.stacked": [[74, 101], ["template.items", "type", "import_weights.stacked", "type", "import_weights.Param"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights.stacked"], ["", "def", "stacked", "(", "param_dict_list", ",", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        param_dict_list:\n            A list of (nested) Param dicts to stack. The structure of\n            each dict must be the identical (down to the ParamTypes of\n            \"parallel\" Params). There must be at least one dict\n            in the list.\n    \"\"\"", "\n", "if", "out", "is", "None", ":", "\n", "        ", "out", "=", "{", "}", "\n", "", "template", "=", "param_dict_list", "[", "0", "]", "\n", "for", "k", ",", "_", "in", "template", ".", "items", "(", ")", ":", "\n", "        ", "v", "=", "[", "d", "[", "k", "]", "for", "d", "in", "param_dict_list", "]", "\n", "if", "type", "(", "v", "[", "0", "]", ")", "is", "dict", ":", "\n", "            ", "out", "[", "k", "]", "=", "{", "}", "\n", "stacked", "(", "v", ",", "out", "=", "out", "[", "k", "]", ")", "\n", "", "elif", "type", "(", "v", "[", "0", "]", ")", "is", "Param", ":", "\n", "            ", "stacked_param", "=", "Param", "(", "\n", "param", "=", "[", "param", ".", "param", "for", "param", "in", "v", "]", ",", "\n", "param_type", "=", "v", "[", "0", "]", ".", "param_type", ",", "\n", "stacked", "=", "True", ",", "\n", ")", "\n", "\n", "out", "[", "k", "]", "=", "stacked_param", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights.assign": [[103, 123], ["translation_dict.items", "torch.no_grad", "torch.as_tensor", "torch.unbind", "list", "zip", "map", "p.copy_", "print", "print", "print"], "function", ["None"], ["", "def", "assign", "(", "translation_dict", ",", "orig_weights", ")", ":", "\n", "    ", "for", "k", ",", "param", "in", "translation_dict", ".", "items", "(", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "weights", "=", "torch", ".", "as_tensor", "(", "orig_weights", "[", "k", "]", ")", "\n", "ref", ",", "param_type", "=", "param", ".", "param", ",", "param", ".", "param_type", "\n", "if", "param", ".", "stacked", ":", "\n", "                ", "weights", "=", "torch", ".", "unbind", "(", "weights", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "weights", "=", "[", "weights", "]", "\n", "ref", "=", "[", "ref", "]", "\n", "\n", "", "try", ":", "\n", "                ", "weights", "=", "list", "(", "map", "(", "param_type", ".", "transformation", ",", "weights", ")", ")", "\n", "for", "p", ",", "w", "in", "zip", "(", "ref", ",", "weights", ")", ":", "\n", "                    ", "p", ".", "copy_", "(", "w", ")", "\n", "", "", "except", ":", "\n", "                ", "print", "(", "k", ")", "\n", "print", "(", "ref", "[", "0", "]", ".", "shape", ")", "\n", "print", "(", "weights", "[", "0", "]", ".", "shape", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights.import_jax_weights_": [[125, 450], ["numpy.load", "functools.partial", "import_weights.stacked", "import_weights.stacked", "import_weights.stacked", "import_weights._process_translations_dict", "list", "list", "import_weights.assign", "import_weights.Param", "import_weights.Param", "import_weights.Param", "import_weights.Param", "import_weights.Param", "dict", "dict", "dict", "list", "np.load.keys", "_process_translations_dict.keys", "len", "LinearWeight", "LinearBias", "import_weights.Param", "import_weights.Param", "LinearWeightMHA", "LinearWeightMHA", "LinearWeightMHA", "import_weights.Param", "LinearBias", "AttentionGatedParams", "LayerNormParams", "LinearWeight", "AttentionGatedParams", "LayerNormParams", "LinearParams", "LinearParams", "LinearParams", "LinearParams", "LayerNormParams", "LinearParams", "LinearParams", "LayerNormParams", "LinearParams", "LinearParams", "LinearParams", "LinearParams", "LayerNormParams", "LinearParams", "LinearParams", "LayerNormParams", "LinearParams", "LinearParams", "LayerNormParams", "AttentionGatedParams", "LayerNormParams", "AttentionGatedParams", "LayerNormParams", "GlobalAttentionParams", "LinearParams", "LinearParams", "LinearParams", "LinearParams", "import_weights.Param", "LinearParams", "LinearParams", "TriAttParams", "TriAttParams", "TriMulOutParams", "TriMulInParams", "PairTransitionParams", "LayerNormParams", "LinearParams", "LinearParams", "LayerNormParams", "LinearParams", "LinearParams", "LinearWeightOPM", "LinearBias", "MSAGlobalAttParams", "MSAColAttParams", "MSAAttPairBiasParams", "MSATransitionParams", "OuterProductMeanParams", "TriMulOutParams", "TriMulInParams", "TriAttParams", "TriAttParams", "PairTransitionParams", "IPAParams", "LayerNormParams", "LinearParams", "LinearParams", "LinearParams", "LayerNormParams", "LinearParams", "TemplatePairBlockParams", "functools.partial.", "import_weights.import_jax_weights_.EvoformerBlockParams"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights.stacked", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights.stacked", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights.stacked", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights._process_translations_dict", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.import_weights.assign"], ["", "", "", "", "def", "import_jax_weights_", "(", "model", ",", "npz_path", ",", "version", "=", "\"model_1\"", ")", ":", "\n", "    ", "data", "=", "np", ".", "load", "(", "npz_path", ")", "\n", "\n", "#######################", "\n", "# Some templates", "\n", "#######################", "\n", "\n", "LinearWeight", "=", "lambda", "l", ":", "(", "Param", "(", "l", ",", "param_type", "=", "ParamType", ".", "LinearWeight", ")", ")", "\n", "\n", "LinearBias", "=", "lambda", "l", ":", "(", "Param", "(", "l", ")", ")", "\n", "\n", "LinearWeightMHA", "=", "lambda", "l", ":", "(", "Param", "(", "l", ",", "param_type", "=", "ParamType", ".", "LinearWeightMHA", ")", ")", "\n", "\n", "LinearBiasMHA", "=", "lambda", "b", ":", "(", "Param", "(", "b", ",", "param_type", "=", "ParamType", ".", "LinearBiasMHA", ")", ")", "\n", "\n", "LinearWeightOPM", "=", "lambda", "l", ":", "(", "Param", "(", "l", ",", "param_type", "=", "ParamType", ".", "LinearWeightOPM", ")", ")", "\n", "\n", "LinearParams", "=", "lambda", "l", ":", "{", "\n", "\"weights\"", ":", "LinearWeight", "(", "l", ".", "weight", ")", ",", "\n", "\"bias\"", ":", "LinearBias", "(", "l", ".", "bias", ")", ",", "\n", "}", "\n", "\n", "LayerNormParams", "=", "lambda", "l", ":", "{", "\n", "\"scale\"", ":", "Param", "(", "l", ".", "weight", ")", ",", "\n", "\"offset\"", ":", "Param", "(", "l", ".", "bias", ")", ",", "\n", "}", "\n", "\n", "AttentionParams", "=", "lambda", "att", ":", "{", "\n", "\"query_w\"", ":", "LinearWeightMHA", "(", "att", ".", "linear_q", ".", "weight", ")", ",", "\n", "\"key_w\"", ":", "LinearWeightMHA", "(", "att", ".", "linear_k", ".", "weight", ")", ",", "\n", "\"value_w\"", ":", "LinearWeightMHA", "(", "att", ".", "linear_v", ".", "weight", ")", ",", "\n", "\"output_w\"", ":", "Param", "(", "\n", "att", ".", "linear_o", ".", "weight", ",", "\n", "param_type", "=", "ParamType", ".", "LinearMHAOutputWeight", ",", "\n", ")", ",", "\n", "\"output_b\"", ":", "LinearBias", "(", "att", ".", "linear_o", ".", "bias", ")", ",", "\n", "}", "\n", "\n", "AttentionGatedParams", "=", "lambda", "att", ":", "dict", "(", "\n", "**", "AttentionParams", "(", "att", ")", ",", "\n", "**", "{", "\n", "\"gating_w\"", ":", "LinearWeightMHA", "(", "att", ".", "linear_g", ".", "weight", ")", ",", "\n", "\"gating_b\"", ":", "LinearBiasMHA", "(", "att", ".", "linear_g", ".", "bias", ")", ",", "\n", "}", ",", "\n", ")", "\n", "\n", "GlobalAttentionParams", "=", "lambda", "att", ":", "dict", "(", "\n", "AttentionGatedParams", "(", "att", ")", ",", "\n", "key_w", "=", "LinearWeight", "(", "att", ".", "linear_k", ".", "weight", ")", ",", "\n", "value_w", "=", "LinearWeight", "(", "att", ".", "linear_v", ".", "weight", ")", ",", "\n", ")", "\n", "\n", "TriAttParams", "=", "lambda", "tri_att", ":", "{", "\n", "\"query_norm\"", ":", "LayerNormParams", "(", "tri_att", ".", "layer_norm", ")", ",", "\n", "\"feat_2d_weights\"", ":", "LinearWeight", "(", "tri_att", ".", "linear", ".", "weight", ")", ",", "\n", "\"attention\"", ":", "AttentionGatedParams", "(", "tri_att", ".", "mha", ")", ",", "\n", "}", "\n", "\n", "TriMulOutParams", "=", "lambda", "tri_mul", ":", "{", "\n", "\"layer_norm_input\"", ":", "LayerNormParams", "(", "tri_mul", ".", "layer_norm_in", ")", ",", "\n", "\"left_projection\"", ":", "LinearParams", "(", "tri_mul", ".", "linear_a_p", ")", ",", "\n", "\"right_projection\"", ":", "LinearParams", "(", "tri_mul", ".", "linear_b_p", ")", ",", "\n", "\"left_gate\"", ":", "LinearParams", "(", "tri_mul", ".", "linear_a_g", ")", ",", "\n", "\"right_gate\"", ":", "LinearParams", "(", "tri_mul", ".", "linear_b_g", ")", ",", "\n", "\"center_layer_norm\"", ":", "LayerNormParams", "(", "tri_mul", ".", "layer_norm_out", ")", ",", "\n", "\"output_projection\"", ":", "LinearParams", "(", "tri_mul", ".", "linear_z", ")", ",", "\n", "\"gating_linear\"", ":", "LinearParams", "(", "tri_mul", ".", "linear_g", ")", ",", "\n", "}", "\n", "\n", "# see commit b88f8da on the Alphafold repo", "\n", "# Alphafold swaps the pseudocode's a and b between the incoming/outcoming", "\n", "# iterations of triangle multiplication, which is confusing and not", "\n", "# reproduced in our implementation.", "\n", "TriMulInParams", "=", "lambda", "tri_mul", ":", "{", "\n", "\"layer_norm_input\"", ":", "LayerNormParams", "(", "tri_mul", ".", "layer_norm_in", ")", ",", "\n", "\"left_projection\"", ":", "LinearParams", "(", "tri_mul", ".", "linear_b_p", ")", ",", "\n", "\"right_projection\"", ":", "LinearParams", "(", "tri_mul", ".", "linear_a_p", ")", ",", "\n", "\"left_gate\"", ":", "LinearParams", "(", "tri_mul", ".", "linear_b_g", ")", ",", "\n", "\"right_gate\"", ":", "LinearParams", "(", "tri_mul", ".", "linear_a_g", ")", ",", "\n", "\"center_layer_norm\"", ":", "LayerNormParams", "(", "tri_mul", ".", "layer_norm_out", ")", ",", "\n", "\"output_projection\"", ":", "LinearParams", "(", "tri_mul", ".", "linear_z", ")", ",", "\n", "\"gating_linear\"", ":", "LinearParams", "(", "tri_mul", ".", "linear_g", ")", ",", "\n", "}", "\n", "\n", "PairTransitionParams", "=", "lambda", "pt", ":", "{", "\n", "\"input_layer_norm\"", ":", "LayerNormParams", "(", "pt", ".", "layer_norm", ")", ",", "\n", "\"transition1\"", ":", "LinearParams", "(", "pt", ".", "linear_1", ")", ",", "\n", "\"transition2\"", ":", "LinearParams", "(", "pt", ".", "linear_2", ")", ",", "\n", "}", "\n", "\n", "MSAAttParams", "=", "lambda", "matt", ":", "{", "\n", "\"query_norm\"", ":", "LayerNormParams", "(", "matt", ".", "layer_norm_m", ")", ",", "\n", "\"attention\"", ":", "AttentionGatedParams", "(", "matt", ".", "mha", ")", ",", "\n", "}", "\n", "\n", "MSAColAttParams", "=", "lambda", "matt", ":", "{", "\n", "\"query_norm\"", ":", "LayerNormParams", "(", "matt", ".", "_msa_att", ".", "layer_norm_m", ")", ",", "\n", "\"attention\"", ":", "AttentionGatedParams", "(", "matt", ".", "_msa_att", ".", "mha", ")", ",", "\n", "}", "\n", "\n", "MSAGlobalAttParams", "=", "lambda", "matt", ":", "{", "\n", "\"query_norm\"", ":", "LayerNormParams", "(", "matt", ".", "layer_norm_m", ")", ",", "\n", "\"attention\"", ":", "GlobalAttentionParams", "(", "matt", ".", "global_attention", ")", ",", "\n", "}", "\n", "\n", "MSAAttPairBiasParams", "=", "lambda", "matt", ":", "dict", "(", "\n", "**", "MSAAttParams", "(", "matt", ")", ",", "\n", "**", "{", "\n", "\"feat_2d_norm\"", ":", "LayerNormParams", "(", "matt", ".", "layer_norm_z", ")", ",", "\n", "\"feat_2d_weights\"", ":", "LinearWeight", "(", "matt", ".", "linear_z", ".", "weight", ")", ",", "\n", "}", ",", "\n", ")", "\n", "\n", "IPAParams", "=", "lambda", "ipa", ":", "{", "\n", "\"q_scalar\"", ":", "LinearParams", "(", "ipa", ".", "linear_q", ")", ",", "\n", "\"kv_scalar\"", ":", "LinearParams", "(", "ipa", ".", "linear_kv", ")", ",", "\n", "\"q_point_local\"", ":", "LinearParams", "(", "ipa", ".", "linear_q_points", ")", ",", "\n", "\"kv_point_local\"", ":", "LinearParams", "(", "ipa", ".", "linear_kv_points", ")", ",", "\n", "\"trainable_point_weights\"", ":", "Param", "(", "\n", "param", "=", "ipa", ".", "head_weights", ",", "param_type", "=", "ParamType", ".", "Other", "\n", ")", ",", "\n", "\"attention_2d\"", ":", "LinearParams", "(", "ipa", ".", "linear_b", ")", ",", "\n", "\"output_projection\"", ":", "LinearParams", "(", "ipa", ".", "linear_out", ")", ",", "\n", "}", "\n", "\n", "TemplatePairBlockParams", "=", "lambda", "b", ":", "{", "\n", "\"triangle_attention_starting_node\"", ":", "TriAttParams", "(", "b", ".", "tri_att_start", ")", ",", "\n", "\"triangle_attention_ending_node\"", ":", "TriAttParams", "(", "b", ".", "tri_att_end", ")", ",", "\n", "\"triangle_multiplication_outgoing\"", ":", "TriMulOutParams", "(", "b", ".", "tri_mul_out", ")", ",", "\n", "\"triangle_multiplication_incoming\"", ":", "TriMulInParams", "(", "b", ".", "tri_mul_in", ")", ",", "\n", "\"pair_transition\"", ":", "PairTransitionParams", "(", "b", ".", "pair_transition", ")", ",", "\n", "}", "\n", "\n", "MSATransitionParams", "=", "lambda", "m", ":", "{", "\n", "\"input_layer_norm\"", ":", "LayerNormParams", "(", "m", ".", "layer_norm", ")", ",", "\n", "\"transition1\"", ":", "LinearParams", "(", "m", ".", "linear_1", ")", ",", "\n", "\"transition2\"", ":", "LinearParams", "(", "m", ".", "linear_2", ")", ",", "\n", "}", "\n", "\n", "OuterProductMeanParams", "=", "lambda", "o", ":", "{", "\n", "\"layer_norm_input\"", ":", "LayerNormParams", "(", "o", ".", "layer_norm", ")", ",", "\n", "\"left_projection\"", ":", "LinearParams", "(", "o", ".", "linear_1", ")", ",", "\n", "\"right_projection\"", ":", "LinearParams", "(", "o", ".", "linear_2", ")", ",", "\n", "\"output_w\"", ":", "LinearWeightOPM", "(", "o", ".", "linear_out", ".", "weight", ")", ",", "\n", "\"output_b\"", ":", "LinearBias", "(", "o", ".", "linear_out", ".", "bias", ")", ",", "\n", "}", "\n", "\n", "def", "EvoformerBlockParams", "(", "b", ",", "is_extra_msa", "=", "False", ")", ":", "\n", "        ", "if", "is_extra_msa", ":", "\n", "            ", "col_att_name", "=", "\"msa_column_global_attention\"", "\n", "msa_col_att_params", "=", "MSAGlobalAttParams", "(", "b", ".", "msa_att_col", ")", "\n", "", "else", ":", "\n", "            ", "col_att_name", "=", "\"msa_column_attention\"", "\n", "msa_col_att_params", "=", "MSAColAttParams", "(", "b", ".", "msa_att_col", ")", "\n", "\n", "", "d", "=", "{", "\n", "\"msa_row_attention_with_pair_bias\"", ":", "MSAAttPairBiasParams", "(", "\n", "b", ".", "msa_att_row", "\n", ")", ",", "\n", "col_att_name", ":", "msa_col_att_params", ",", "\n", "\"msa_transition\"", ":", "MSATransitionParams", "(", "b", ".", "core", ".", "msa_transition", ")", ",", "\n", "\"outer_product_mean\"", ":", "\n", "OuterProductMeanParams", "(", "b", ".", "core", ".", "outer_product_mean", ")", ",", "\n", "\"triangle_multiplication_outgoing\"", ":", "\n", "TriMulOutParams", "(", "b", ".", "core", ".", "tri_mul_out", ")", ",", "\n", "\"triangle_multiplication_incoming\"", ":", "\n", "TriMulInParams", "(", "b", ".", "core", ".", "tri_mul_in", ")", ",", "\n", "\"triangle_attention_starting_node\"", ":", "\n", "TriAttParams", "(", "b", ".", "core", ".", "tri_att_start", ")", ",", "\n", "\"triangle_attention_ending_node\"", ":", "\n", "TriAttParams", "(", "b", ".", "core", ".", "tri_att_end", ")", ",", "\n", "\"pair_transition\"", ":", "\n", "PairTransitionParams", "(", "b", ".", "core", ".", "pair_transition", ")", ",", "\n", "}", "\n", "\n", "return", "d", "\n", "\n", "", "ExtraMSABlockParams", "=", "partial", "(", "EvoformerBlockParams", ",", "is_extra_msa", "=", "True", ")", "\n", "\n", "FoldIterationParams", "=", "lambda", "sm", ":", "{", "\n", "\"invariant_point_attention\"", ":", "IPAParams", "(", "sm", ".", "ipa", ")", ",", "\n", "\"attention_layer_norm\"", ":", "LayerNormParams", "(", "sm", ".", "layer_norm_ipa", ")", ",", "\n", "\"transition\"", ":", "LinearParams", "(", "sm", ".", "transition", ".", "layers", "[", "0", "]", ".", "linear_1", ")", ",", "\n", "\"transition_1\"", ":", "LinearParams", "(", "sm", ".", "transition", ".", "layers", "[", "0", "]", ".", "linear_2", ")", ",", "\n", "\"transition_2\"", ":", "LinearParams", "(", "sm", ".", "transition", ".", "layers", "[", "0", "]", ".", "linear_3", ")", ",", "\n", "\"transition_layer_norm\"", ":", "LayerNormParams", "(", "sm", ".", "transition", ".", "layer_norm", ")", ",", "\n", "\"affine_update\"", ":", "LinearParams", "(", "sm", ".", "bb_update", ".", "linear", ")", ",", "\n", "\"rigid_sidechain\"", ":", "{", "\n", "\"input_projection\"", ":", "LinearParams", "(", "sm", ".", "angle_resnet", ".", "linear_in", ")", ",", "\n", "\"input_projection_1\"", ":", "LinearParams", "(", "sm", ".", "angle_resnet", ".", "linear_initial", ")", ",", "\n", "\"resblock1\"", ":", "LinearParams", "(", "sm", ".", "angle_resnet", ".", "layers", "[", "0", "]", ".", "linear_1", ")", ",", "\n", "\"resblock2\"", ":", "LinearParams", "(", "sm", ".", "angle_resnet", ".", "layers", "[", "0", "]", ".", "linear_2", ")", ",", "\n", "\"resblock1_1\"", ":", "LinearParams", "(", "sm", ".", "angle_resnet", ".", "layers", "[", "1", "]", ".", "linear_1", ")", ",", "\n", "\"resblock2_1\"", ":", "LinearParams", "(", "sm", ".", "angle_resnet", ".", "layers", "[", "1", "]", ".", "linear_2", ")", ",", "\n", "\"unnormalized_angles\"", ":", "LinearParams", "(", "sm", ".", "angle_resnet", ".", "linear_out", ")", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "############################", "\n", "# translations dict overflow", "\n", "############################", "\n", "\n", "tps_blocks", "=", "model", ".", "template_pair_stack", ".", "blocks", "\n", "tps_blocks_params", "=", "stacked", "(", "\n", "[", "TemplatePairBlockParams", "(", "b", ")", "for", "b", "in", "tps_blocks", "]", "\n", ")", "\n", "\n", "ems_blocks", "=", "model", ".", "extra_msa_stack", ".", "blocks", "\n", "ems_blocks_params", "=", "stacked", "(", "[", "ExtraMSABlockParams", "(", "b", ")", "for", "b", "in", "ems_blocks", "]", ")", "\n", "\n", "evo_blocks", "=", "model", ".", "evoformer", ".", "blocks", "\n", "evo_blocks_params", "=", "stacked", "(", "[", "EvoformerBlockParams", "(", "b", ")", "for", "b", "in", "evo_blocks", "]", ")", "\n", "\n", "translations", "=", "{", "\n", "\"evoformer\"", ":", "{", "\n", "\"preprocess_1d\"", ":", "LinearParams", "(", "model", ".", "input_embedder", ".", "linear_tf_m", ")", ",", "\n", "\"preprocess_msa\"", ":", "LinearParams", "(", "model", ".", "input_embedder", ".", "linear_msa_m", ")", ",", "\n", "\"left_single\"", ":", "LinearParams", "(", "model", ".", "input_embedder", ".", "linear_tf_z_i", ")", ",", "\n", "\"right_single\"", ":", "LinearParams", "(", "model", ".", "input_embedder", ".", "linear_tf_z_j", ")", ",", "\n", "\"prev_pos_linear\"", ":", "LinearParams", "(", "model", ".", "recycling_embedder", ".", "linear", ")", ",", "\n", "\"prev_msa_first_row_norm\"", ":", "LayerNormParams", "(", "\n", "model", ".", "recycling_embedder", ".", "layer_norm_m", "\n", ")", ",", "\n", "\"prev_pair_norm\"", ":", "LayerNormParams", "(", "\n", "model", ".", "recycling_embedder", ".", "layer_norm_z", "\n", ")", ",", "\n", "\"pair_activiations\"", ":", "LinearParams", "(", "\n", "model", ".", "input_embedder", ".", "linear_relpos", "\n", ")", ",", "\n", "\"template_embedding\"", ":", "{", "\n", "\"single_template_embedding\"", ":", "{", "\n", "\"embedding2d\"", ":", "LinearParams", "(", "\n", "model", ".", "template_pair_embedder", ".", "linear", "\n", ")", ",", "\n", "\"template_pair_stack\"", ":", "{", "\n", "\"__layer_stack_no_state\"", ":", "tps_blocks_params", ",", "\n", "}", ",", "\n", "\"output_layer_norm\"", ":", "LayerNormParams", "(", "\n", "model", ".", "template_pair_stack", ".", "layer_norm", "\n", ")", ",", "\n", "}", ",", "\n", "\"attention\"", ":", "AttentionParams", "(", "model", ".", "template_pointwise_att", ".", "mha", ")", ",", "\n", "}", ",", "\n", "\"extra_msa_activations\"", ":", "LinearParams", "(", "\n", "model", ".", "extra_msa_embedder", ".", "linear", "\n", ")", ",", "\n", "\"extra_msa_stack\"", ":", "ems_blocks_params", ",", "\n", "\"template_single_embedding\"", ":", "LinearParams", "(", "\n", "model", ".", "template_angle_embedder", ".", "linear_1", "\n", ")", ",", "\n", "\"template_projection\"", ":", "LinearParams", "(", "\n", "model", ".", "template_angle_embedder", ".", "linear_2", "\n", ")", ",", "\n", "\"evoformer_iteration\"", ":", "evo_blocks_params", ",", "\n", "\"single_activations\"", ":", "LinearParams", "(", "model", ".", "evoformer", ".", "linear", ")", ",", "\n", "}", ",", "\n", "\"structure_module\"", ":", "{", "\n", "\"single_layer_norm\"", ":", "LayerNormParams", "(", "\n", "model", ".", "structure_module", ".", "layer_norm_s", "\n", ")", ",", "\n", "\"initial_projection\"", ":", "LinearParams", "(", "\n", "model", ".", "structure_module", ".", "linear_in", "\n", ")", ",", "\n", "\"pair_layer_norm\"", ":", "LayerNormParams", "(", "\n", "model", ".", "structure_module", ".", "layer_norm_z", "\n", ")", ",", "\n", "\"fold_iteration\"", ":", "FoldIterationParams", "(", "model", ".", "structure_module", ")", ",", "\n", "}", ",", "\n", "\"predicted_lddt_head\"", ":", "{", "\n", "\"input_layer_norm\"", ":", "LayerNormParams", "(", "\n", "model", ".", "aux_heads", ".", "plddt", ".", "layer_norm", "\n", ")", ",", "\n", "\"act_0\"", ":", "LinearParams", "(", "model", ".", "aux_heads", ".", "plddt", ".", "linear_1", ")", ",", "\n", "\"act_1\"", ":", "LinearParams", "(", "model", ".", "aux_heads", ".", "plddt", ".", "linear_2", ")", ",", "\n", "\"logits\"", ":", "LinearParams", "(", "model", ".", "aux_heads", ".", "plddt", ".", "linear_3", ")", ",", "\n", "}", ",", "\n", "\"distogram_head\"", ":", "{", "\n", "\"half_logits\"", ":", "LinearParams", "(", "model", ".", "aux_heads", ".", "distogram", ".", "linear", ")", ",", "\n", "}", ",", "\n", "\"experimentally_resolved_head\"", ":", "{", "\n", "\"logits\"", ":", "LinearParams", "(", "\n", "model", ".", "aux_heads", ".", "experimentally_resolved", ".", "linear", "\n", ")", ",", "\n", "}", ",", "\n", "\"masked_msa_head\"", ":", "{", "\n", "\"logits\"", ":", "LinearParams", "(", "model", ".", "aux_heads", ".", "masked_msa", ".", "linear", ")", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "no_templ", "=", "[", "\n", "\"model_3\"", ",", "\n", "\"model_4\"", ",", "\n", "\"model_5\"", ",", "\n", "\"model_3_ptm\"", ",", "\n", "\"model_4_ptm\"", ",", "\n", "\"model_5_ptm\"", ",", "\n", "]", "\n", "if", "version", "in", "no_templ", ":", "\n", "        ", "evo_dict", "=", "translations", "[", "\"evoformer\"", "]", "\n", "keys", "=", "list", "(", "evo_dict", ".", "keys", "(", ")", ")", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "if", "\"template_\"", "in", "k", ":", "\n", "                ", "evo_dict", ".", "pop", "(", "k", ")", "\n", "\n", "", "", "", "if", "\"_ptm\"", "in", "version", ":", "\n", "        ", "translations", "[", "\"predicted_aligned_error_head\"", "]", "=", "{", "\n", "\"logits\"", ":", "LinearParams", "(", "model", ".", "aux_heads", ".", "tm", ".", "linear", ")", "\n", "}", "\n", "\n", "# Flatten keys and insert missing key prefixes", "\n", "", "flat", "=", "_process_translations_dict", "(", "translations", ")", "\n", "\n", "# Sanity check", "\n", "keys", "=", "list", "(", "data", ".", "keys", "(", ")", ")", "\n", "flat_keys", "=", "list", "(", "flat", ".", "keys", "(", ")", ")", "\n", "incorrect", "=", "[", "k", "for", "k", "in", "flat_keys", "if", "k", "not", "in", "keys", "]", "\n", "missing", "=", "[", "k", "for", "k", "in", "keys", "if", "k", "not", "in", "flat_keys", "]", "\n", "# print(f\"Incorrect: {incorrect}\")", "\n", "# print(f\"Missing: {missing}\")", "\n", "\n", "assert", "len", "(", "incorrect", ")", "==", "0", "\n", "# assert(sorted(list(flat.keys())) == sorted(list(data.keys())))", "\n", "\n", "# Set weights", "\n", "assign", "(", "flat", ",", "data", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.core.ensure_divisibility": [[7, 10], ["None"], "function", ["None"], ["def", "ensure_divisibility", "(", "numerator", ",", "denominator", ")", ":", "\n", "    ", "\"\"\"Ensure that numerator is divisible by the denominator.\"\"\"", "\n", "assert", "numerator", "%", "denominator", "==", "0", ",", "'{} is not divisible by {}'", ".", "format", "(", "numerator", ",", "denominator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.core.set_missing_distributed_environ": [[12, 15], ["str", "str"], "function", ["None"], ["", "def", "set_missing_distributed_environ", "(", "key", ",", "value", ")", ":", "\n", "    ", "if", "key", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "str", "(", "key", ")", "]", "=", "str", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.core.init_dap": [[17, 41], ["colossalai.logging.disable_existing_loggers", "torch.distributed.is_initialized", "core.set_missing_distributed_environ", "core.set_missing_distributed_environ", "core.set_missing_distributed_environ", "core.set_missing_distributed_environ", "core.set_missing_distributed_environ", "colossalai.launch_from_torch", "colossalai.logging.get_dist_logger", "colossalai.logging.get_dist_logger.error", "exit", "int", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.core.set_missing_distributed_environ", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.core.set_missing_distributed_environ", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.core.set_missing_distributed_environ", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.core.set_missing_distributed_environ", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.core.set_missing_distributed_environ"], ["", "", "def", "init_dap", "(", "tensor_model_parallel_size_", "=", "None", ")", ":", "\n", "    ", "colossalai", ".", "logging", ".", "disable_existing_loggers", "(", ")", "\n", "\n", "if", "tensor_model_parallel_size_", "==", "None", ":", "\n", "        ", "if", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "            ", "tensor_model_parallel_size_", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "", "else", ":", "\n", "            ", "tensor_model_parallel_size_", "=", "1", "\n", "\n", "", "", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "_logger", "=", "colossalai", ".", "logging", ".", "get_dist_logger", "(", ")", "\n", "_logger", ".", "error", "(", "\n", "\"use fastfold.distributed.init_dap instead of torch.distributed.init_process_group!\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "# set distributed environ for single device launch", "\n", "", "set_missing_distributed_environ", "(", "'WORLD_SIZE'", ",", "1", ")", "\n", "set_missing_distributed_environ", "(", "'RANK'", ",", "0", ")", "\n", "set_missing_distributed_environ", "(", "'LOCAL_RANK'", ",", "0", ")", "\n", "set_missing_distributed_environ", "(", "'MASTER_ADDR'", ",", "\"localhost\"", ")", "\n", "set_missing_distributed_environ", "(", "'MASTER_PORT'", ",", "-", "1", ")", "\n", "\n", "colossalai", ".", "launch_from_torch", "(", "\n", "config", "=", "{", "\"parallel\"", ":", "dict", "(", "tensor", "=", "dict", "(", "size", "=", "tensor_model_parallel_size_", ")", ")", "}", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.Copy.forward": [[76, 79], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ":", "\"Copy\"", ",", "input", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.Copy.backward": [[80, 83], ["comm._reduce"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._reduce"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ":", "\"Copy\"", ",", "grad_output", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "_reduce", "(", "grad_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.Scatter.forward": [[95, 99], ["ctx.save_for_backward", "comm._split", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._split"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ":", "\"Scatter\"", ",", "input", ":", "Tensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "torch", ".", "tensor", "(", "[", "dim", "]", ")", ")", "\n", "return", "_split", "(", "input", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.Scatter.backward": [[100, 104], ["comm._gather", "int"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._gather"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ":", "\"Scatter\"", ",", "grad_output", ":", "Tensor", ")", "->", "Tuple", "[", "Tensor", "]", ":", "\n", "        ", "dim", ",", "=", "ctx", ".", "saved_tensors", "\n", "return", "_gather", "(", "grad_output", ",", "dim", "=", "int", "(", "dim", ")", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.Reduce.forward": [[116, 119], ["comm._reduce"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._reduce"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ":", "\"Reduce\"", ",", "input", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "_reduce", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.Reduce.backward": [[120, 123], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ":", "\"Reduce\"", ",", "grad_output", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "grad_output", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.Gather.forward": [[135, 139], ["ctx.save_for_backward", "comm._gather", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._gather"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ":", "\"Gather\"", ",", "input", ":", "Tensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "torch", ".", "tensor", "(", "[", "dim", "]", ")", ")", "\n", "return", "_gather", "(", "input", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.Gather.backward": [[140, 144], ["comm._split", "int"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._split"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ":", "\"Gather\"", ",", "grad_output", ":", "Tensor", ")", "->", "Tuple", "[", "Tensor", "]", ":", "\n", "        ", "dim", ",", "=", "ctx", ".", "saved_tensors", "\n", "return", "_split", "(", "grad_output", ",", "dim", "=", "int", "(", "dim", ")", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.All_to_All.forward": [[194, 198], ["ctx.save_for_backward", "comm._all_to_all", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._all_to_all"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ":", "\"All_to_All\"", ",", "input_", ":", "Tensor", ",", "in_dim", ":", "int", "=", "-", "1", ",", "out_dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "torch", ".", "tensor", "(", "[", "in_dim", ",", "out_dim", "]", ")", ")", "\n", "return", "_all_to_all", "(", "input_", ",", "in_dim", "=", "in_dim", ",", "out_dim", "=", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.All_to_All.backward": [[199, 204], ["comm._all_to_all", "int", "int"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._all_to_all"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ":", "\"All_to_All\"", ",", "grad_output", ":", "Tensor", ")", "->", "Tuple", "[", "Tensor", "]", ":", "\n", "        ", "saved_tensors", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "return", "_all_to_all", "(", "grad_output", ",", "in_dim", "=", "int", "(", "saved_tensors", "[", "1", "]", ")", ",", "\n", "out_dim", "=", "int", "(", "saved_tensors", "[", "0", "]", ")", ")", ",", "None", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.divide": [[13, 16], ["core.ensure_divisibility"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.core.ensure_divisibility"], ["def", "divide", "(", "numerator", ",", "denominator", ")", ":", "\n", "    ", "ensure_divisibility", "(", "numerator", ",", "denominator", ")", "\n", "return", "numerator", "//", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._reduce": [[18, 28], ["torch.all_reduce", "colossalai.core.global_context.get_world_size", "colossalai.core.global_context.get_group"], "function", ["None"], ["", "def", "_reduce", "(", "tensor", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "if", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "==", "1", ":", "\n", "        ", "return", "tensor", "\n", "\n", "", "dist", ".", "all_reduce", "(", "tensor", ",", "\n", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ",", "\n", "group", "=", "gpc", ".", "get_group", "(", "ParallelMode", ".", "TENSOR", ")", ",", "\n", "async_op", "=", "False", ")", "\n", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._split": [[30, 40], ["comm.divide", "torch.split", "torch.split", "tensor_list[].contiguous", "colossalai.core.global_context.get_world_size", "colossalai.core.global_context.get_world_size", "colossalai.core.global_context.get_local_rank"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.divide"], ["", "def", "_split", "(", "tensor", ":", "Tensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "    ", "if", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "==", "1", ":", "\n", "        ", "return", "tensor", "\n", "\n", "", "split_size", "=", "divide", "(", "tensor", ".", "shape", "[", "dim", "]", ",", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", ")", "\n", "tensor_list", "=", "torch", ".", "split", "(", "tensor", ",", "split_size", ",", "dim", "=", "dim", ")", "\n", "\n", "output", "=", "tensor_list", "[", "gpc", ".", "get_local_rank", "(", "ParallelMode", ".", "TENSOR", ")", "]", ".", "contiguous", "(", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._gather": [[42, 66], ["colossalai.core.global_context.get_world_size", "list", "colossalai.core.global_context.get_world_size", "torch.empty", "torch.empty", "torch.cat.chunk", "torch.all_gather", "torch.all_gather", "torch.cat", "torch.cat", "colossalai.core.global_context.get_world_size", "list", "torch.empty_like", "torch.empty_like", "colossalai.core.global_context.get_group", "range", "colossalai.core.global_context.get_group", "colossalai.core.global_context.get_world_size"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat"], ["", "def", "_gather", "(", "tensor", ":", "Tensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "    ", "if", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "==", "1", ":", "\n", "        ", "return", "tensor", "\n", "\n", "", "if", "dim", "==", "1", ":", "\n", "        ", "output_shape", "=", "list", "(", "tensor", ".", "shape", ")", "\n", "output_shape", "[", "1", "]", "*=", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "\n", "output", "=", "torch", ".", "empty", "(", "output_shape", ",", "dtype", "=", "tensor", ".", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "tensor_list", "=", "output", ".", "chunk", "(", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", ",", "dim", "=", "1", ")", "\n", "dist", ".", "all_gather", "(", "list", "(", "tensor_list", ")", ",", "\n", "tensor", ",", "\n", "group", "=", "gpc", ".", "get_group", "(", "ParallelMode", ".", "TENSOR", ")", ",", "\n", "async_op", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "tensor_list", "=", "[", "\n", "torch", ".", "empty_like", "(", "tensor", ")", "for", "_", "in", "range", "(", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", ")", "\n", "]", "\n", "dist", ".", "all_gather", "(", "tensor_list", ",", "\n", "tensor", ",", "\n", "group", "=", "gpc", ".", "get_group", "(", "ParallelMode", ".", "TENSOR", ")", ",", "\n", "async_op", "=", "False", ")", "\n", "output", "=", "torch", ".", "cat", "(", "tensor_list", ",", "dim", "=", "dim", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.copy": [[68, 72], ["torch.is_grad_enabled", "torch.is_grad_enabled", "Copy.apply"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply"], ["", "def", "copy", "(", "input", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "if", "torch", ".", "is_grad_enabled", "(", ")", "and", "input", ".", "requires_grad", ":", "\n", "        ", "input", "=", "Copy", ".", "apply", "(", "input", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.scatter": [[85, 91], ["torch.is_grad_enabled", "torch.is_grad_enabled", "Scatter.apply", "comm._split"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._split"], ["", "", "def", "scatter", "(", "input", ":", "Tensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "    ", "if", "torch", ".", "is_grad_enabled", "(", ")", "and", "input", ".", "requires_grad", ":", "\n", "        ", "input", "=", "Scatter", ".", "apply", "(", "input", ",", "dim", ")", "\n", "", "else", ":", "\n", "        ", "input", "=", "_split", "(", "input", ",", "dim", "=", "dim", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.reduce": [[106, 112], ["torch.is_grad_enabled", "torch.is_grad_enabled", "Reduce.apply", "comm._reduce"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._reduce"], ["", "", "def", "reduce", "(", "input", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "if", "torch", ".", "is_grad_enabled", "(", ")", "and", "input", ".", "requires_grad", ":", "\n", "        ", "input", "=", "Reduce", ".", "apply", "(", "input", ")", "\n", "", "else", ":", "\n", "        ", "input", "=", "_reduce", "(", "input", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.gather": [[125, 131], ["torch.is_grad_enabled", "torch.is_grad_enabled", "Gather.apply", "comm._gather"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._gather"], ["", "", "def", "gather", "(", "input", ":", "Tensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "    ", "if", "torch", ".", "is_grad_enabled", "(", ")", "and", "input", ".", "requires_grad", ":", "\n", "        ", "input", "=", "Gather", ".", "apply", "(", "input", ",", "dim", ")", "\n", "", "else", ":", "\n", "        ", "input", "=", "_gather", "(", "input", ",", "dim", "=", "dim", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._all_to_all": [[146, 174], ["comm.divide", "torch.split", "torch.split", "colossalai.core.global_context.get_world_size", "colossalai.core.global_context.get_world_size", "tensor_.contiguous", "list", "colossalai.core.global_context.get_world_size", "torch.empty", "torch.empty", "torch.cat.chunk", "torch.all_to_all", "torch.all_to_all", "torch.cat", "torch.cat", "colossalai.core.global_context.get_world_size", "list", "torch.ones_like", "torch.ones_like", "colossalai.core.global_context.get_group", "colossalai.core.global_context.get_group"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.divide", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat"], ["", "", "def", "_all_to_all", "(", "tensor", ":", "Tensor", ",", "in_dim", ":", "int", "=", "-", "1", ",", "out_dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "    ", "if", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "==", "1", ":", "\n", "        ", "return", "tensor", "\n", "\n", "", "split_size", "=", "divide", "(", "tensor", ".", "shape", "[", "in_dim", "]", ",", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", ")", "\n", "input_tensor_list", "=", "torch", ".", "split", "(", "tensor", ",", "split_size", ",", "dim", "=", "in_dim", ")", "\n", "\n", "input_tensor_list", "=", "[", "tensor_", ".", "contiguous", "(", ")", "for", "tensor_", "in", "input_tensor_list", "]", "\n", "if", "out_dim", "==", "1", ":", "\n", "        ", "output_shape", "=", "list", "(", "input_tensor_list", "[", "0", "]", ".", "shape", ")", "\n", "output_shape", "[", "1", "]", "*=", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "\n", "output", "=", "torch", ".", "empty", "(", "output_shape", ",", "dtype", "=", "tensor", ".", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "output_tensor_list", "=", "output", ".", "chunk", "(", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", ",", "dim", "=", "1", ")", "\n", "dist", ".", "all_to_all", "(", "list", "(", "output_tensor_list", ")", ",", "\n", "input_tensor_list", ",", "\n", "group", "=", "gpc", ".", "get_group", "(", "ParallelMode", ".", "TENSOR", ")", ",", "\n", "async_op", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "output_tensor_list", "=", "[", "torch", ".", "ones_like", "(", "tensor_", ")", "for", "tensor_", "in", "input_tensor_list", "]", "\n", "\n", "dist", ".", "all_to_all", "(", "output_tensor_list", ",", "\n", "input_tensor_list", ",", "\n", "group", "=", "gpc", ".", "get_group", "(", "ParallelMode", ".", "TENSOR", ")", ",", "\n", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "output_tensor_list", ",", "dim", "=", "out_dim", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.col_to_row": [[176, 182], ["torch.is_grad_enabled", "torch.is_grad_enabled", "All_to_All.apply", "comm._all_to_all"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._all_to_all"], ["", "def", "col_to_row", "(", "input_", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "if", "torch", ".", "is_grad_enabled", "(", ")", "and", "input_", ".", "requires_grad", ":", "\n", "        ", "input_", "=", "All_to_All", ".", "apply", "(", "input_", ",", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "        ", "input_", "=", "_all_to_all", "(", "input_", ",", "in_dim", "=", "1", ",", "out_dim", "=", "2", ")", "\n", "", "return", "input_", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.row_to_col": [[184, 190], ["torch.is_grad_enabled", "torch.is_grad_enabled", "All_to_All.apply", "comm._all_to_all"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._all_to_all"], ["", "def", "row_to_col", "(", "input_", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "if", "torch", ".", "is_grad_enabled", "(", ")", "and", "input_", ".", "requires_grad", ":", "\n", "        ", "input_", "=", "All_to_All", ".", "apply", "(", "input_", ",", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "input_", "=", "_all_to_all", "(", "input_", ",", "in_dim", "=", "2", ",", "out_dim", "=", "1", ")", "\n", "", "return", "input_", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.GatherAsyncOpp.forward": [[48, 53], ["colossalai.core.global_context.get_world_size", "einops.rearrange"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ":", "\"GatherAsyncOpp\"", ",", "input", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "mp_size", "=", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "\n", "output", "=", "rearrange", "(", "input", ",", "'n (x h) w c -> n h (x w) c'", ",", "x", "=", "mp_size", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.GatherAsyncOpp.backward": [[54, 59], ["colossalai.core.global_context.get_world_size", "grad_output.resize_", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ":", "\"GatherAsyncOpp\"", ",", "grad_output", ":", "Tensor", ")", "->", "Tuple", "[", "Tensor", "]", ":", "\n", "        ", "mp_size", "=", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "\n", "n", ",", "h", ",", "w", ",", "c", "=", "grad_output", ".", "shape", "\n", "return", "grad_output", ".", "resize_", "(", "n", ",", "h", "*", "mp_size", ",", "int", "(", "w", "/", "mp_size", ")", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.GatherAsync.forward": [[63, 67], ["comm_async._gather_async"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async._gather_async"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ":", "\"GatherAsync\"", ",", "input", ":", "Tensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "        ", "ctx", ".", "dim", "=", "dim", "\n", "return", "_gather_async", "(", "input", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.GatherAsync.backward": [[68, 75], ["colossalai.core.global_context.get_world_size", "grad_output.resize_", "comm._split", "int"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm._split"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ":", "\"GatherAsync\"", ",", "grad_output", ":", "Tensor", ",", "grad_work", "=", "None", ")", "->", "Tuple", "[", "Tensor", "]", ":", "\n", "        ", "if", "ctx", ".", "dim", "==", "2", ":", "\n", "            ", "mp_size", "=", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "\n", "n", ",", "h", ",", "w", ",", "c", "=", "grad_output", ".", "shape", "\n", "grad_output", ".", "resize_", "(", "n", ",", "int", "(", "h", "/", "mp_size", ")", ",", "w", "*", "mp_size", ",", "c", ")", "\n", "", "return", "_split", "(", "grad_output", ",", "dim", "=", "ctx", ".", "dim", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.All_to_All_Async.forward": [[103, 111], ["comm_async._all_to_all_async"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async._all_to_all_async"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ":", "\"All_to_All_Async\"", ",", "\n", "input_", ":", "Tensor", ",", "\n", "in_dim", ":", "int", "=", "-", "1", ",", "\n", "out_dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "        ", "ctx", ".", "in_dim", "=", "in_dim", "\n", "ctx", ".", "out_dim", "=", "out_dim", "\n", "return", "_all_to_all_async", "(", "input_", ",", "in_dim", "=", "in_dim", ",", "out_dim", "=", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.All_to_All_Async.backward": [[112, 122], ["WORLD_WORK_ALL2ALL.wait", "colossalai.core.global_context.get_world_size", "einops.rearrange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ":", "\"All_to_All_Async\"", ",", "grad_output", ":", "Tensor", ",", "grad_work", "=", "None", ")", "->", "Tuple", "[", "Tensor", "]", ":", "\n", "        ", "global", "WORLD_WORK_ALL2ALL", "\n", "if", "WORLD_WORK_ALL2ALL", ":", "\n", "            ", "WORLD_WORK_ALL2ALL", ".", "wait", "(", ")", "\n", "", "WORLD_WORK_ALL2ALL", "=", "None", "\n", "if", "ctx", ".", "in_dim", "==", "2", ":", "\n", "            ", "mp_size", "=", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "\n", "grad_output", "=", "rearrange", "(", "grad_output", ",", "'n (x h) w c -> n h (x w) c'", ",", "x", "=", "mp_size", ")", "\n", "", "return", "grad_output", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.All_to_All_Async_Opp.forward": [[126, 140], ["work.wait", "colossalai.core.global_context.get_world_size", "einops.rearrange"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ":", "\"All_to_All_Async_Opp\"", ",", "\n", "output", ":", "Tensor", ",", "\n", "work", ",", "\n", "in_dim", ":", "int", "=", "-", "1", ",", "\n", "out_dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "        ", "ctx", ".", "in_dim", "=", "in_dim", "\n", "ctx", ".", "out_dim", "=", "out_dim", "\n", "if", "work", ":", "\n", "            ", "work", ".", "wait", "(", ")", "\n", "", "if", "out_dim", "==", "2", ":", "\n", "            ", "mp_size", "=", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "\n", "output", "=", "rearrange", "(", "output", ",", "'n (x h) w c -> n h (x w) c'", ",", "x", "=", "mp_size", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.All_to_All_Async_Opp.backward": [[141, 148], ["comm_async._all_to_all_async"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async._all_to_all_async"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ":", "\"All_to_All_Async_Opp\"", ",", "grad_output", ":", "Tensor", ")", "->", "Tuple", "[", "Tensor", "]", ":", "\n", "        ", "global", "WORLD_WORK_ALL2ALL", "\n", "d_tensor", ",", "WORLD_WORK_ALL2ALL", "=", "_all_to_all_async", "(", "grad_output", ",", "\n", "in_dim", "=", "ctx", ".", "out_dim", ",", "\n", "out_dim", "=", "ctx", ".", "in_dim", ")", "\n", "return", "d_tensor", ",", "None", ",", "None", ",", "None", "", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async._gather_async": [[14, 28], ["list", "colossalai.core.global_context.get_world_size", "torch.empty", "torch.empty", "torch.empty.chunk", "torch.all_gather", "colossalai.core.global_context.get_world_size", "colossalai.core.global_context.get_world_size", "list", "colossalai.core.global_context.get_group"], "function", ["None"], ["def", "_gather_async", "(", "tensor", ":", "Tensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "    ", "if", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "==", "1", ":", "\n", "        ", "return", "tensor", ",", "None", "\n", "\n", "", "output_shape", "=", "list", "(", "tensor", ".", "shape", ")", "\n", "output_shape", "[", "1", "]", "*=", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "\n", "output", "=", "torch", ".", "empty", "(", "output_shape", ",", "dtype", "=", "tensor", ".", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "tensor_list", "=", "output", ".", "chunk", "(", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", ",", "dim", "=", "1", ")", "\n", "work", "=", "dist", ".", "all_gather", "(", "list", "(", "tensor_list", ")", ",", "\n", "tensor", ",", "\n", "group", "=", "gpc", ".", "get_group", "(", "ParallelMode", ".", "TENSOR", ")", ",", "\n", "async_op", "=", "True", ")", "\n", "\n", "return", "output", ",", "work", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.gather_async": [[30, 36], ["torch.is_grad_enabled", "torch.is_grad_enabled", "GatherAsync.apply", "comm_async._gather_async"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async._gather_async"], ["", "def", "gather_async", "(", "input", ":", "Tensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "    ", "if", "torch", ".", "is_grad_enabled", "(", ")", "and", "input", ".", "requires_grad", ":", "\n", "        ", "input", ",", "work", "=", "GatherAsync", ".", "apply", "(", "input", ",", "dim", ")", "\n", "", "else", ":", "\n", "        ", "input", ",", "work", "=", "_gather_async", "(", "input", ",", "dim", "=", "dim", ")", "\n", "", "return", "input", ",", "work", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.gather_async_opp": [[38, 44], ["work.wait", "GatherAsyncOpp.apply"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply"], ["", "def", "gather_async_opp", "(", "output", ":", "Tensor", ",", "work", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "    ", "if", "work", ":", "\n", "        ", "work", ".", "wait", "(", ")", "\n", "", "if", "dim", "==", "2", ":", "\n", "        ", "output", "=", "GatherAsyncOpp", ".", "apply", "(", "output", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async._all_to_all_async": [[77, 96], ["comm.divide", "torch.split", "torch.split", "list", "colossalai.core.global_context.get_world_size", "torch.empty", "torch.empty", "torch.empty.chunk", "torch.all_to_all", "colossalai.core.global_context.get_world_size", "colossalai.core.global_context.get_world_size", "tensor_.contiguous", "colossalai.core.global_context.get_world_size", "list", "colossalai.core.global_context.get_group"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.divide"], ["", "", "def", "_all_to_all_async", "(", "tensor", ":", "Tensor", ",", "in_dim", ":", "int", "=", "-", "1", ",", "out_dim", ":", "int", "=", "-", "1", ")", "->", "Tensor", ":", "\n", "    ", "if", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "==", "1", ":", "\n", "        ", "return", "tensor", ",", "None", "\n", "\n", "", "split_size", "=", "divide", "(", "tensor", ".", "shape", "[", "in_dim", "]", ",", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", ")", "\n", "input_tensor_list", "=", "torch", ".", "split", "(", "tensor", ",", "split_size", ",", "dim", "=", "in_dim", ")", "\n", "\n", "input_tensor_list", "=", "[", "tensor_", ".", "contiguous", "(", ")", "for", "tensor_", "in", "input_tensor_list", "]", "\n", "\n", "output_shape", "=", "list", "(", "input_tensor_list", "[", "0", "]", ".", "shape", ")", "\n", "output_shape", "[", "1", "]", "*=", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", "\n", "output", "=", "torch", ".", "empty", "(", "output_shape", ",", "dtype", "=", "tensor", ".", "dtype", ",", "device", "=", "tensor", ".", "device", ")", "\n", "output_tensor_list", "=", "output", ".", "chunk", "(", "gpc", ".", "get_world_size", "(", "ParallelMode", ".", "TENSOR", ")", ",", "dim", "=", "1", ")", "\n", "work", "=", "dist", ".", "all_to_all", "(", "list", "(", "output_tensor_list", ")", ",", "\n", "input_tensor_list", ",", "\n", "group", "=", "gpc", ".", "get_group", "(", "ParallelMode", ".", "TENSOR", ")", ",", "\n", "async_op", "=", "True", ")", "\n", "\n", "return", "output", ",", "work", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.AlphaFoldLoss.__init__": [[1551, 1554], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AlphaFoldLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.AlphaFoldLoss.forward": [[1555, 1636], ["loss_fns.items", "cum_loss.detach().clone", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "cum_loss.detach().clone", "out.keys", "loss.find_structural_violations", "out.keys", "batch.update", "loss_fn", "loss.new_tensor.new_tensor.detach().clone", "batch[].float", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "loss.compute_renamed_ground_truth", "loss.distogram_loss", "loss.experimentally_resolved_loss", "loss.fape_loss", "loss.lddt_loss", "loss.masked_msa_loss", "loss.supervised_chi_loss", "loss.violation_loss", "loss.tm_loss", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "logging.warning", "loss.new_tensor.new_tensor.new_tensor", "cum_loss.detach", "min", "cum_loss.detach", "loss.new_tensor.new_tensor.detach"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.find_structural_violations", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_renamed_ground_truth", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.distogram_loss", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.experimentally_resolved_loss", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.fape_loss", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.lddt_loss", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.masked_msa_loss", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.supervised_chi_loss", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.violation_loss", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.tm_loss", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach"], ["", "def", "forward", "(", "self", ",", "out", ",", "batch", ",", "_return_breakdown", "=", "False", ")", ":", "\n", "        ", "if", "\"violation\"", "not", "in", "out", ".", "keys", "(", ")", ":", "\n", "            ", "out", "[", "\"violation\"", "]", "=", "find_structural_violations", "(", "\n", "batch", ",", "\n", "out", "[", "\"sm\"", "]", "[", "\"positions\"", "]", "[", "-", "1", "]", ",", "\n", "**", "self", ".", "config", ".", "violation", ",", "\n", ")", "\n", "\n", "", "if", "\"renamed_atom14_gt_positions\"", "not", "in", "out", ".", "keys", "(", ")", ":", "\n", "            ", "batch", ".", "update", "(", "\n", "compute_renamed_ground_truth", "(", "\n", "batch", ",", "\n", "out", "[", "\"sm\"", "]", "[", "\"positions\"", "]", "[", "-", "1", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "loss_fns", "=", "{", "\n", "\"distogram\"", ":", "lambda", ":", "distogram_loss", "(", "\n", "logits", "=", "out", "[", "\"distogram_logits\"", "]", ",", "\n", "**", "{", "**", "batch", ",", "**", "self", ".", "config", ".", "distogram", "}", ",", "\n", ")", ",", "\n", "\"experimentally_resolved\"", ":", "lambda", ":", "experimentally_resolved_loss", "(", "\n", "logits", "=", "out", "[", "\"experimentally_resolved_logits\"", "]", ",", "\n", "**", "{", "**", "batch", ",", "**", "self", ".", "config", ".", "experimentally_resolved", "}", ",", "\n", ")", ",", "\n", "\"fape\"", ":", "lambda", ":", "fape_loss", "(", "\n", "out", ",", "\n", "batch", ",", "\n", "self", ".", "config", ".", "fape", ",", "\n", ")", ",", "\n", "\"lddt\"", ":", "lambda", ":", "lddt_loss", "(", "\n", "logits", "=", "out", "[", "\"lddt_logits\"", "]", ",", "\n", "all_atom_pred_pos", "=", "out", "[", "\"final_atom_positions\"", "]", ",", "\n", "**", "{", "**", "batch", ",", "**", "self", ".", "config", ".", "lddt", "}", ",", "\n", ")", ",", "\n", "\"masked_msa\"", ":", "lambda", ":", "masked_msa_loss", "(", "\n", "logits", "=", "out", "[", "\"masked_msa_logits\"", "]", ",", "\n", "**", "{", "**", "batch", ",", "**", "self", ".", "config", ".", "masked_msa", "}", ",", "\n", ")", ",", "\n", "\"supervised_chi\"", ":", "lambda", ":", "supervised_chi_loss", "(", "\n", "out", "[", "\"sm\"", "]", "[", "\"angles\"", "]", ",", "\n", "out", "[", "\"sm\"", "]", "[", "\"unnormalized_angles\"", "]", ",", "\n", "**", "{", "**", "batch", ",", "**", "self", ".", "config", ".", "supervised_chi", "}", ",", "\n", ")", ",", "\n", "\"violation\"", ":", "lambda", ":", "violation_loss", "(", "\n", "out", "[", "\"violation\"", "]", ",", "\n", "**", "batch", ",", "\n", ")", ",", "\n", "}", "\n", "\n", "if", "(", "self", ".", "config", ".", "tm", ".", "enabled", ")", ":", "\n", "            ", "loss_fns", "[", "\"tm\"", "]", "=", "lambda", ":", "tm_loss", "(", "\n", "logits", "=", "out", "[", "\"tm_logits\"", "]", ",", "\n", "**", "{", "**", "batch", ",", "**", "out", ",", "**", "self", ".", "config", ".", "tm", "}", ",", "\n", ")", "\n", "\n", "", "cum_loss", "=", "0.", "\n", "losses", "=", "{", "}", "\n", "for", "loss_name", ",", "loss_fn", "in", "loss_fns", ".", "items", "(", ")", ":", "\n", "            ", "weight", "=", "self", ".", "config", "[", "loss_name", "]", ".", "weight", "\n", "loss", "=", "loss_fn", "(", ")", "\n", "if", "(", "torch", ".", "isnan", "(", "loss", ")", "or", "torch", ".", "isinf", "(", "loss", ")", ")", ":", "\n", "                ", "logging", ".", "warning", "(", "f\"{loss_name} loss is NaN. Skipping...\"", ")", "\n", "loss", "=", "loss", ".", "new_tensor", "(", "0.", ",", "requires_grad", "=", "True", ")", "\n", "", "cum_loss", "=", "cum_loss", "+", "weight", "*", "loss", "\n", "losses", "[", "loss_name", "]", "=", "loss", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "", "losses", "[", "\"unscaled_loss\"", "]", "=", "cum_loss", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "# Scale the loss by the square root of the minimum of the crop size and", "\n", "# the (average) sequence length. See subsection 1.9.", "\n", "seq_len", "=", "torch", ".", "mean", "(", "batch", "[", "\"seq_length\"", "]", ".", "float", "(", ")", ")", "\n", "crop_len", "=", "batch", "[", "\"aatype\"", "]", ".", "shape", "[", "-", "1", "]", "\n", "cum_loss", "=", "cum_loss", "*", "torch", ".", "sqrt", "(", "min", "(", "seq_len", ",", "crop_len", ")", ")", "\n", "\n", "losses", "[", "\"loss\"", "]", "=", "cum_loss", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "if", "(", "not", "_return_breakdown", ")", ":", "\n", "            ", "return", "cum_loss", "\n", "\n", "", "return", "cum_loss", ",", "losses", "", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.softmax_cross_entropy": [[37, 43], ["torch.sum", "torch.sum", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax"], "function", ["None"], ["def", "softmax_cross_entropy", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "loss", "=", "-", "1", "*", "torch", ".", "sum", "(", "\n", "labels", "*", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.sigmoid_cross_entropy": [[45, 50], ["torch.log", "torch.log", "torch.log", "torch.log", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "sigmoid_cross_entropy", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "log_p", "=", "torch", ".", "log", "(", "torch", ".", "sigmoid", "(", "logits", ")", ")", "\n", "log_not_p", "=", "torch", ".", "log", "(", "torch", ".", "sigmoid", "(", "-", "logits", ")", ")", "\n", "loss", "=", "-", "labels", "*", "log_p", "-", "(", "1", "-", "labels", ")", "*", "log_not_p", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.torsion_angle_loss": [[52, 74], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.minimum", "torch.minimum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm.unsqueeze", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze"], ["", "def", "torsion_angle_loss", "(", "\n", "a", ",", "# [*, N, 7, 2]", "\n", "a_gt", ",", "# [*, N, 7, 2]", "\n", "a_alt_gt", ",", "# [*, N, 7, 2]", "\n", ")", ":", "\n", "# [*, N, 7]", "\n", "    ", "norm", "=", "torch", ".", "norm", "(", "a", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# [*, N, 7, 2]", "\n", "a", "=", "a", "/", "norm", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "# [*, N, 7]", "\n", "diff_norm_gt", "=", "torch", ".", "norm", "(", "a", "-", "a_gt", ",", "dim", "=", "-", "1", ")", "\n", "diff_norm_alt_gt", "=", "torch", ".", "norm", "(", "a", "-", "a_alt_gt", ",", "dim", "=", "-", "1", ")", "\n", "min_diff", "=", "torch", ".", "minimum", "(", "diff_norm_gt", "**", "2", ",", "diff_norm_alt_gt", "**", "2", ")", "\n", "\n", "# [*]", "\n", "l_torsion", "=", "torch", ".", "mean", "(", "min_diff", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "l_angle_norm", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "norm", "-", "1", ")", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "\n", "an_weight", "=", "0.02", "\n", "return", "l_torsion", "+", "an_weight", "*", "l_angle_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_fape": [[76, 148], ["[].apply", "[].apply", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pred_frames.invert", "target_frames.invert", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.invert", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.invert"], ["", "def", "compute_fape", "(", "\n", "pred_frames", ":", "Rigid", ",", "\n", "target_frames", ":", "Rigid", ",", "\n", "frames_mask", ":", "torch", ".", "Tensor", ",", "\n", "pred_positions", ":", "torch", ".", "Tensor", ",", "\n", "target_positions", ":", "torch", ".", "Tensor", ",", "\n", "positions_mask", ":", "torch", ".", "Tensor", ",", "\n", "length_scale", ":", "float", ",", "\n", "l1_clamp_distance", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "eps", "=", "1e-8", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n        Computes FAPE loss.\n\n        Args:\n            pred_frames:\n                [*, N_frames] Rigid object of predicted frames\n            target_frames:\n                [*, N_frames] Rigid object of ground truth frames\n            frames_mask:\n                [*, N_frames] binary mask for the frames\n            pred_positions:\n                [*, N_pts, 3] predicted atom positions\n            target_positions:\n                [*, N_pts, 3] ground truth positions\n            positions_mask:\n                [*, N_pts] positions mask\n            length_scale:\n                Length scale by which the loss is divided\n            l1_clamp_distance:\n                Cutoff above which distance errors are disregarded\n            eps:\n                Small value used to regularize denominators\n        Returns:\n            [*] loss tensor\n    \"\"\"", "\n", "# [*, N_frames, N_pts, 3]", "\n", "local_pred_pos", "=", "pred_frames", ".", "invert", "(", ")", "[", "...", ",", "None", "]", ".", "apply", "(", "\n", "pred_positions", "[", "...", ",", "None", ",", ":", ",", ":", "]", ",", "\n", ")", "\n", "local_target_pos", "=", "target_frames", ".", "invert", "(", ")", "[", "...", ",", "None", "]", ".", "apply", "(", "\n", "target_positions", "[", "...", ",", "None", ",", ":", ",", ":", "]", ",", "\n", ")", "\n", "\n", "error_dist", "=", "torch", ".", "sqrt", "(", "\n", "torch", ".", "sum", "(", "(", "local_pred_pos", "-", "local_target_pos", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "+", "eps", "\n", ")", "\n", "\n", "if", "l1_clamp_distance", "is", "not", "None", ":", "\n", "        ", "error_dist", "=", "torch", ".", "clamp", "(", "error_dist", ",", "min", "=", "0", ",", "max", "=", "l1_clamp_distance", ")", "\n", "\n", "", "normed_error", "=", "error_dist", "/", "length_scale", "\n", "normed_error", "=", "normed_error", "*", "frames_mask", "[", "...", ",", "None", "]", "\n", "normed_error", "=", "normed_error", "*", "positions_mask", "[", "...", ",", "None", ",", ":", "]", "\n", "\n", "# FP16-friendly averaging. Roughly equivalent to:", "\n", "#", "\n", "# norm_factor = (", "\n", "#     torch.sum(frames_mask, dim=-1) *", "\n", "#     torch.sum(positions_mask, dim=-1)", "\n", "# )", "\n", "# normed_error = torch.sum(normed_error, dim=(-1, -2)) / (eps + norm_factor)", "\n", "#", "\n", "# (\"roughly\" because eps is necessarily duplicated in the latter)", "\n", "normed_error", "=", "torch", ".", "sum", "(", "normed_error", ",", "dim", "=", "-", "1", ")", "\n", "normed_error", "=", "(", "\n", "normed_error", "/", "(", "eps", "+", "torch", ".", "sum", "(", "frames_mask", ",", "dim", "=", "-", "1", ")", ")", "[", "...", ",", "None", "]", "\n", ")", "\n", "normed_error", "=", "torch", ".", "sum", "(", "normed_error", ",", "dim", "=", "-", "1", ")", "\n", "normed_error", "=", "normed_error", "/", "(", "eps", "+", "torch", ".", "sum", "(", "positions_mask", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "return", "normed_error", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.backbone_loss": [[150, 206], ["fastfold.utils.rigid_utils.Rigid.from_tensor_7", "fastfold.utils.rigid_utils.Rigid", "fastfold.utils.rigid_utils.Rigid.from_tensor_4x4", "loss.compute_fape", "torch.mean", "torch.mean", "fastfold.utils.rigid_utils.Rotation", "fastfold.utils.rigid_utils.Rigid.get_trans", "fastfold.utils.rigid_utils.Rigid.get_trans", "gt_aff[].get_trans", "loss.compute_fape", "fastfold.utils.rigid_utils.Rigid.get_trans", "gt_aff[].get_trans", "fastfold.utils.rigid_utils.Rigid.get_rots().get_rot_mats", "fastfold.utils.rigid_utils.Rigid.get_rots"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.from_tensor_7", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.from_tensor_4x4", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_fape", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_trans", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_trans", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_trans", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_fape", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_trans", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_trans", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_rot_mats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_rots"], ["", "def", "backbone_loss", "(", "\n", "backbone_rigid_tensor", ":", "torch", ".", "Tensor", ",", "\n", "backbone_rigid_mask", ":", "torch", ".", "Tensor", ",", "\n", "traj", ":", "torch", ".", "Tensor", ",", "\n", "use_clamped_fape", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "clamp_distance", ":", "float", "=", "10.0", ",", "\n", "loss_unit_distance", ":", "float", "=", "10.0", ",", "\n", "eps", ":", "float", "=", "1e-4", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "pred_aff", "=", "Rigid", ".", "from_tensor_7", "(", "traj", ")", "\n", "pred_aff", "=", "Rigid", "(", "\n", "Rotation", "(", "rot_mats", "=", "pred_aff", ".", "get_rots", "(", ")", ".", "get_rot_mats", "(", ")", ",", "quats", "=", "None", ")", ",", "\n", "pred_aff", ".", "get_trans", "(", ")", ",", "\n", ")", "\n", "\n", "# DISCREPANCY: DeepMind somehow gets a hold of a tensor_7 version of", "\n", "# backbone tensor, normalizes it, and then turns it back to a rotation", "\n", "# matrix. To avoid a potentially numerically unstable rotation matrix", "\n", "# to quaternion conversion, we just use the original rotation matrix", "\n", "# outright. This one hasn't been composed a bunch of times, though, so", "\n", "# it might be fine.", "\n", "gt_aff", "=", "Rigid", ".", "from_tensor_4x4", "(", "backbone_rigid_tensor", ")", "\n", "\n", "fape_loss", "=", "compute_fape", "(", "\n", "pred_aff", ",", "\n", "gt_aff", "[", "None", "]", ",", "\n", "backbone_rigid_mask", "[", "None", "]", ",", "\n", "pred_aff", ".", "get_trans", "(", ")", ",", "\n", "gt_aff", "[", "None", "]", ".", "get_trans", "(", ")", ",", "\n", "backbone_rigid_mask", "[", "None", "]", ",", "\n", "l1_clamp_distance", "=", "clamp_distance", ",", "\n", "length_scale", "=", "loss_unit_distance", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n", "if", "use_clamped_fape", "is", "not", "None", ":", "\n", "        ", "unclamped_fape_loss", "=", "compute_fape", "(", "\n", "pred_aff", ",", "\n", "gt_aff", "[", "None", "]", ",", "\n", "backbone_rigid_mask", "[", "None", "]", ",", "\n", "pred_aff", ".", "get_trans", "(", ")", ",", "\n", "gt_aff", "[", "None", "]", ".", "get_trans", "(", ")", ",", "\n", "backbone_rigid_mask", "[", "None", "]", ",", "\n", "l1_clamp_distance", "=", "None", ",", "\n", "length_scale", "=", "loss_unit_distance", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n", "\n", "fape_loss", "=", "fape_loss", "*", "use_clamped_fape", "+", "unclamped_fape_loss", "*", "(", "\n", "1", "-", "use_clamped_fape", "\n", ")", "\n", "\n", "# Average over the batch dimension", "\n", "", "fape_loss", "=", "torch", ".", "mean", "(", "fape_loss", ")", "\n", "\n", "return", "fape_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.sidechain_loss": [[208, 256], ["Rigid.from_tensor_4x4.view", "fastfold.utils.rigid_utils.Rigid.from_tensor_4x4", "Rigid.from_tensor_4x4.view", "fastfold.utils.rigid_utils.Rigid.from_tensor_4x4", "rigidgroups_gt_exists.reshape.reshape", "sidechain_atom_pos.view.view", "renamed_atom14_gt_positions.view.view", "renamed_atom14_gt_exists.view.view", "loss.compute_fape"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.from_tensor_4x4", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.from_tensor_4x4", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_fape"], ["", "def", "sidechain_loss", "(", "\n", "sidechain_frames", ":", "torch", ".", "Tensor", ",", "\n", "sidechain_atom_pos", ":", "torch", ".", "Tensor", ",", "\n", "rigidgroups_gt_frames", ":", "torch", ".", "Tensor", ",", "\n", "rigidgroups_alt_gt_frames", ":", "torch", ".", "Tensor", ",", "\n", "rigidgroups_gt_exists", ":", "torch", ".", "Tensor", ",", "\n", "renamed_atom14_gt_positions", ":", "torch", ".", "Tensor", ",", "\n", "renamed_atom14_gt_exists", ":", "torch", ".", "Tensor", ",", "\n", "alt_naming_is_better", ":", "torch", ".", "Tensor", ",", "\n", "clamp_distance", ":", "float", "=", "10.0", ",", "\n", "length_scale", ":", "float", "=", "10.0", ",", "\n", "eps", ":", "float", "=", "1e-4", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "renamed_gt_frames", "=", "(", "\n", "1.0", "-", "alt_naming_is_better", "[", "...", ",", "None", ",", "None", ",", "None", "]", "\n", ")", "*", "rigidgroups_gt_frames", "+", "alt_naming_is_better", "[", "\n", "...", ",", "None", ",", "None", ",", "None", "\n", "]", "*", "rigidgroups_alt_gt_frames", "\n", "\n", "# Steamroll the inputs", "\n", "sidechain_frames", "=", "sidechain_frames", "[", "-", "1", "]", "\n", "batch_dims", "=", "sidechain_frames", ".", "shape", "[", ":", "-", "4", "]", "\n", "sidechain_frames", "=", "sidechain_frames", ".", "view", "(", "*", "batch_dims", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "sidechain_frames", "=", "Rigid", ".", "from_tensor_4x4", "(", "sidechain_frames", ")", "\n", "renamed_gt_frames", "=", "renamed_gt_frames", ".", "view", "(", "*", "batch_dims", ",", "-", "1", ",", "4", ",", "4", ")", "\n", "renamed_gt_frames", "=", "Rigid", ".", "from_tensor_4x4", "(", "renamed_gt_frames", ")", "\n", "rigidgroups_gt_exists", "=", "rigidgroups_gt_exists", ".", "reshape", "(", "*", "batch_dims", ",", "-", "1", ")", "\n", "sidechain_atom_pos", "=", "sidechain_atom_pos", "[", "-", "1", "]", "\n", "sidechain_atom_pos", "=", "sidechain_atom_pos", ".", "view", "(", "*", "batch_dims", ",", "-", "1", ",", "3", ")", "\n", "renamed_atom14_gt_positions", "=", "renamed_atom14_gt_positions", ".", "view", "(", "\n", "*", "batch_dims", ",", "-", "1", ",", "3", "\n", ")", "\n", "renamed_atom14_gt_exists", "=", "renamed_atom14_gt_exists", ".", "view", "(", "*", "batch_dims", ",", "-", "1", ")", "\n", "\n", "fape", "=", "compute_fape", "(", "\n", "sidechain_frames", ",", "\n", "renamed_gt_frames", ",", "\n", "rigidgroups_gt_exists", ",", "\n", "sidechain_atom_pos", ",", "\n", "renamed_atom14_gt_positions", ",", "\n", "renamed_atom14_gt_exists", ",", "\n", "l1_clamp_distance", "=", "clamp_distance", ",", "\n", "length_scale", "=", "length_scale", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n", "\n", "return", "fape", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.fape_loss": [[258, 280], ["loss.backbone_loss", "loss.sidechain_loss", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.backbone_loss", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.sidechain_loss"], ["", "def", "fape_loss", "(", "\n", "out", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "batch", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "config", ":", "ml_collections", ".", "ConfigDict", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "bb_loss", "=", "backbone_loss", "(", "\n", "traj", "=", "out", "[", "\"sm\"", "]", "[", "\"frames\"", "]", ",", "\n", "**", "{", "**", "batch", ",", "**", "config", ".", "backbone", "}", ",", "\n", ")", "\n", "\n", "sc_loss", "=", "sidechain_loss", "(", "\n", "out", "[", "\"sm\"", "]", "[", "\"sidechain_frames\"", "]", ",", "\n", "out", "[", "\"sm\"", "]", "[", "\"positions\"", "]", ",", "\n", "**", "{", "**", "batch", ",", "**", "config", ".", "sidechain", "}", ",", "\n", ")", "\n", "\n", "loss", "=", "config", ".", "backbone", ".", "weight", "*", "bb_loss", "+", "config", ".", "sidechain", ".", "weight", "*", "sc_loss", "\n", "\n", "# Average over the batch dimension", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.supervised_chi_loss": [[282, 364], ["torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.einsum", "torch.einsum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.minimum", "torch.minimum", "sq_chi_error.permute.permute", "fastfold.utils.tensor_utils.masked_mean", "torch.sqrt", "torch.sqrt", "torch.abs", "torch.abs", "norm_error.permute.permute", "fastfold.utils.tensor_utils.masked_mean", "torch.mean", "torch.mean", "torch.nn.functional.one_hot.type", "angles_sin_cos.new_tensor", "torch.sum", "torch.sum", "range", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.masked_mean", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.masked_mean"], ["", "def", "supervised_chi_loss", "(", "\n", "angles_sin_cos", ":", "torch", ".", "Tensor", ",", "\n", "unnormalized_angles_sin_cos", ":", "torch", ".", "Tensor", ",", "\n", "aatype", ":", "torch", ".", "Tensor", ",", "\n", "seq_mask", ":", "torch", ".", "Tensor", ",", "\n", "chi_mask", ":", "torch", ".", "Tensor", ",", "\n", "chi_angles_sin_cos", ":", "torch", ".", "Tensor", ",", "\n", "chi_weight", ":", "float", ",", "\n", "angle_norm_weight", ":", "float", ",", "\n", "eps", "=", "1e-6", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n        Implements Algorithm 27 (torsionAngleLoss)\n\n        Args:\n            angles_sin_cos:\n                [*, N, 7, 2] predicted angles\n            unnormalized_angles_sin_cos:\n                The same angles, but unnormalized\n            aatype:\n                [*, N] residue indices\n            seq_mask:\n                [*, N] sequence mask\n            chi_mask:\n                [*, N, 7] angle mask\n            chi_angles_sin_cos:\n                [*, N, 7, 2] ground truth angles\n            chi_weight:\n                Weight for the angle component of the loss\n            angle_norm_weight:\n                Weight for the normalization component of the loss\n        Returns:\n            [*] loss tensor\n    \"\"\"", "\n", "pred_angles", "=", "angles_sin_cos", "[", "...", ",", "3", ":", ",", ":", "]", "\n", "residue_type_one_hot", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "\n", "aatype", ",", "\n", "residue_constants", ".", "restype_num", "+", "1", ",", "\n", ")", "\n", "chi_pi_periodic", "=", "torch", ".", "einsum", "(", "\n", "\"...ij,jk->ik\"", ",", "\n", "residue_type_one_hot", ".", "type", "(", "angles_sin_cos", ".", "dtype", ")", ",", "\n", "angles_sin_cos", ".", "new_tensor", "(", "residue_constants", ".", "chi_pi_periodic", ")", ",", "\n", ")", "\n", "\n", "true_chi", "=", "chi_angles_sin_cos", "[", "None", "]", "\n", "\n", "shifted_mask", "=", "(", "1", "-", "2", "*", "chi_pi_periodic", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "true_chi_shifted", "=", "shifted_mask", "*", "true_chi", "\n", "sq_chi_error", "=", "torch", ".", "sum", "(", "(", "true_chi", "-", "pred_angles", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "\n", "sq_chi_error_shifted", "=", "torch", ".", "sum", "(", "\n", "(", "true_chi_shifted", "-", "pred_angles", ")", "**", "2", ",", "dim", "=", "-", "1", "\n", ")", "\n", "sq_chi_error", "=", "torch", ".", "minimum", "(", "sq_chi_error", ",", "sq_chi_error_shifted", ")", "\n", "# The ol' switcheroo", "\n", "sq_chi_error", "=", "sq_chi_error", ".", "permute", "(", "\n", "*", "range", "(", "len", "(", "sq_chi_error", ".", "shape", ")", ")", "[", "1", ":", "-", "2", "]", ",", "0", ",", "-", "2", ",", "-", "1", "\n", ")", "\n", "sq_chi_loss", "=", "masked_mean", "(", "\n", "chi_mask", "[", "...", ",", "None", ",", ":", ",", ":", "]", ",", "sq_chi_error", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ",", "-", "3", ")", "\n", ")", "\n", "\n", "loss", "=", "chi_weight", "*", "sq_chi_loss", "\n", "\n", "angle_norm", "=", "torch", ".", "sqrt", "(", "\n", "torch", ".", "sum", "(", "unnormalized_angles_sin_cos", "**", "2", ",", "dim", "=", "-", "1", ")", "+", "eps", "\n", ")", "\n", "norm_error", "=", "torch", ".", "abs", "(", "angle_norm", "-", "1.0", ")", "\n", "norm_error", "=", "norm_error", ".", "permute", "(", "\n", "*", "range", "(", "len", "(", "norm_error", ".", "shape", ")", ")", "[", "1", ":", "-", "2", "]", ",", "0", ",", "-", "2", ",", "-", "1", "\n", ")", "\n", "angle_norm_loss", "=", "masked_mean", "(", "\n", "seq_mask", "[", "...", ",", "None", ",", ":", ",", "None", "]", ",", "norm_error", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ",", "-", "3", ")", "\n", ")", "\n", "\n", "loss", "=", "loss", "+", "angle_norm_weight", "*", "angle_norm_loss", "\n", "\n", "# Average over the batch dimension", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_plddt": [[366, 378], ["torch.arange", "torch.arange", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.sum", "torch.sum", "torch.arange.view", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax"], ["", "def", "compute_plddt", "(", "logits", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "num_bins", "=", "logits", ".", "shape", "[", "-", "1", "]", "\n", "bin_width", "=", "1.0", "/", "num_bins", "\n", "bounds", "=", "torch", ".", "arange", "(", "\n", "start", "=", "0.5", "*", "bin_width", ",", "end", "=", "1.0", ",", "step", "=", "bin_width", ",", "device", "=", "logits", ".", "device", "\n", ")", "\n", "probs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "pred_lddt_ca", "=", "torch", ".", "sum", "(", "\n", "probs", "*", "bounds", ".", "view", "(", "*", "(", "(", "1", ",", ")", "*", "len", "(", "probs", ".", "shape", "[", ":", "-", "1", "]", ")", ")", ",", "*", "bounds", ".", "shape", ")", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "return", "pred_lddt_ca", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.lddt": [[380, 434], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "fastfold.utils.tensor_utils.permute_final_dims", "torch.eye", "torch.eye", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims"], ["", "def", "lddt", "(", "\n", "all_atom_pred_pos", ":", "torch", ".", "Tensor", ",", "\n", "all_atom_positions", ":", "torch", ".", "Tensor", ",", "\n", "all_atom_mask", ":", "torch", ".", "Tensor", ",", "\n", "cutoff", ":", "float", "=", "15.0", ",", "\n", "eps", ":", "float", "=", "1e-10", ",", "\n", "per_residue", ":", "bool", "=", "True", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "n", "=", "all_atom_mask", ".", "shape", "[", "-", "2", "]", "\n", "dmat_true", "=", "torch", ".", "sqrt", "(", "\n", "eps", "\n", "+", "torch", ".", "sum", "(", "\n", "(", "\n", "all_atom_positions", "[", "...", ",", "None", ",", ":", "]", "\n", "-", "all_atom_positions", "[", "...", ",", "None", ",", ":", ",", ":", "]", "\n", ")", "\n", "**", "2", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "dmat_pred", "=", "torch", ".", "sqrt", "(", "\n", "eps", "\n", "+", "torch", ".", "sum", "(", "\n", "(", "\n", "all_atom_pred_pos", "[", "...", ",", "None", ",", ":", "]", "\n", "-", "all_atom_pred_pos", "[", "...", ",", "None", ",", ":", ",", ":", "]", "\n", ")", "\n", "**", "2", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", ")", "\n", "dists_to_score", "=", "(", "\n", "(", "dmat_true", "<", "cutoff", ")", "\n", "*", "all_atom_mask", "\n", "*", "permute_final_dims", "(", "all_atom_mask", ",", "(", "1", ",", "0", ")", ")", "\n", "*", "(", "1.0", "-", "torch", ".", "eye", "(", "n", ",", "device", "=", "all_atom_mask", ".", "device", ")", ")", "\n", ")", "\n", "\n", "dist_l1", "=", "torch", ".", "abs", "(", "dmat_true", "-", "dmat_pred", ")", "\n", "\n", "score", "=", "(", "\n", "(", "dist_l1", "<", "0.5", ")", ".", "type", "(", "dist_l1", ".", "dtype", ")", "\n", "+", "(", "dist_l1", "<", "1.0", ")", ".", "type", "(", "dist_l1", ".", "dtype", ")", "\n", "+", "(", "dist_l1", "<", "2.0", ")", ".", "type", "(", "dist_l1", ".", "dtype", ")", "\n", "+", "(", "dist_l1", "<", "4.0", ")", ".", "type", "(", "dist_l1", ".", "dtype", ")", "\n", ")", "\n", "score", "=", "score", "*", "0.25", "\n", "\n", "dims", "=", "(", "-", "1", ",", ")", "if", "per_residue", "else", "(", "-", "2", ",", "-", "1", ")", "\n", "norm", "=", "1.0", "/", "(", "eps", "+", "torch", ".", "sum", "(", "dists_to_score", ",", "dim", "=", "dims", ")", ")", "\n", "score", "=", "norm", "*", "(", "eps", "+", "torch", ".", "sum", "(", "dists_to_score", "*", "score", ",", "dim", "=", "dims", ")", ")", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.lddt_ca": [[436, 456], ["loss.lddt"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.lddt"], ["", "def", "lddt_ca", "(", "\n", "all_atom_pred_pos", ":", "torch", ".", "Tensor", ",", "\n", "all_atom_positions", ":", "torch", ".", "Tensor", ",", "\n", "all_atom_mask", ":", "torch", ".", "Tensor", ",", "\n", "cutoff", ":", "float", "=", "15.0", ",", "\n", "eps", ":", "float", "=", "1e-10", ",", "\n", "per_residue", ":", "bool", "=", "True", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "ca_pos", "=", "residue_constants", ".", "atom_order", "[", "\"CA\"", "]", "\n", "all_atom_pred_pos", "=", "all_atom_pred_pos", "[", "...", ",", "ca_pos", ",", ":", "]", "\n", "all_atom_positions", "=", "all_atom_positions", "[", "...", ",", "ca_pos", ",", ":", "]", "\n", "all_atom_mask", "=", "all_atom_mask", "[", "...", ",", "ca_pos", ":", "(", "ca_pos", "+", "1", ")", "]", "# keep dim", "\n", "\n", "return", "lddt", "(", "\n", "all_atom_pred_pos", ",", "\n", "all_atom_positions", ",", "\n", "all_atom_mask", ",", "\n", "cutoff", "=", "cutoff", ",", "\n", "eps", "=", "eps", ",", "\n", "per_residue", "=", "per_residue", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.lddt_loss": [[459, 509], ["loss.lddt", "score.detach.detach", "torch.floor().long", "torch.floor().long", "torch.clamp", "torch.clamp", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "loss.softmax_cross_entropy", "all_atom_mask.squeeze.squeeze", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.floor", "torch.floor", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.lddt", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.softmax_cross_entropy"], ["", "def", "lddt_loss", "(", "\n", "logits", ":", "torch", ".", "Tensor", ",", "\n", "all_atom_pred_pos", ":", "torch", ".", "Tensor", ",", "\n", "all_atom_positions", ":", "torch", ".", "Tensor", ",", "\n", "all_atom_mask", ":", "torch", ".", "Tensor", ",", "\n", "resolution", ":", "torch", ".", "Tensor", ",", "\n", "cutoff", ":", "float", "=", "15.0", ",", "\n", "no_bins", ":", "int", "=", "50", ",", "\n", "min_resolution", ":", "float", "=", "0.1", ",", "\n", "max_resolution", ":", "float", "=", "3.0", ",", "\n", "eps", ":", "float", "=", "1e-10", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "n", "=", "all_atom_mask", ".", "shape", "[", "-", "2", "]", "\n", "\n", "ca_pos", "=", "residue_constants", ".", "atom_order", "[", "\"CA\"", "]", "\n", "all_atom_pred_pos", "=", "all_atom_pred_pos", "[", "...", ",", "ca_pos", ",", ":", "]", "\n", "all_atom_positions", "=", "all_atom_positions", "[", "...", ",", "ca_pos", ",", ":", "]", "\n", "all_atom_mask", "=", "all_atom_mask", "[", "...", ",", "ca_pos", ":", "(", "ca_pos", "+", "1", ")", "]", "# keep dim", "\n", "\n", "score", "=", "lddt", "(", "\n", "all_atom_pred_pos", ",", "\n", "all_atom_positions", ",", "\n", "all_atom_mask", ",", "\n", "cutoff", "=", "cutoff", ",", "\n", "eps", "=", "eps", "\n", ")", "\n", "\n", "score", "=", "score", ".", "detach", "(", ")", "\n", "\n", "bin_index", "=", "torch", ".", "floor", "(", "score", "*", "no_bins", ")", ".", "long", "(", ")", "\n", "bin_index", "=", "torch", ".", "clamp", "(", "bin_index", ",", "max", "=", "(", "no_bins", "-", "1", ")", ")", "\n", "lddt_ca_one_hot", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "\n", "bin_index", ",", "num_classes", "=", "no_bins", "\n", ")", "\n", "\n", "errors", "=", "softmax_cross_entropy", "(", "logits", ",", "lddt_ca_one_hot", ")", "\n", "all_atom_mask", "=", "all_atom_mask", ".", "squeeze", "(", "-", "1", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "errors", "*", "all_atom_mask", ",", "dim", "=", "-", "1", ")", "/", "(", "\n", "eps", "+", "torch", ".", "sum", "(", "all_atom_mask", ",", "dim", "=", "-", "1", ")", "\n", ")", "\n", "\n", "loss", "=", "loss", "*", "(", "\n", "(", "resolution", ">=", "min_resolution", ")", "&", "(", "resolution", "<=", "max_resolution", ")", "\n", ")", "\n", "\n", "# Average over the batch dimension", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.distogram_loss": [[511, 557], ["torch.linspace", "torch.linspace", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "loss.softmax_cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.softmax_cross_entropy", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot"], ["", "def", "distogram_loss", "(", "\n", "logits", ",", "\n", "pseudo_beta", ",", "\n", "pseudo_beta_mask", ",", "\n", "min_bin", "=", "2.3125", ",", "\n", "max_bin", "=", "21.6875", ",", "\n", "no_bins", "=", "64", ",", "\n", "eps", "=", "1e-6", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "    ", "boundaries", "=", "torch", ".", "linspace", "(", "\n", "min_bin", ",", "\n", "max_bin", ",", "\n", "no_bins", "-", "1", ",", "\n", "device", "=", "logits", ".", "device", ",", "\n", ")", "\n", "boundaries", "=", "boundaries", "**", "2", "\n", "\n", "dists", "=", "torch", ".", "sum", "(", "\n", "(", "pseudo_beta", "[", "...", ",", "None", ",", ":", "]", "-", "pseudo_beta", "[", "...", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", ",", "\n", "dim", "=", "-", "1", ",", "\n", "keepdims", "=", "True", ",", "\n", ")", "\n", "\n", "true_bins", "=", "torch", ".", "sum", "(", "dists", ">", "boundaries", ",", "dim", "=", "-", "1", ")", "\n", "\n", "errors", "=", "softmax_cross_entropy", "(", "\n", "logits", ",", "\n", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "true_bins", ",", "no_bins", ")", ",", "\n", ")", "\n", "\n", "square_mask", "=", "pseudo_beta_mask", "[", "...", ",", "None", "]", "*", "pseudo_beta_mask", "[", "...", ",", "None", ",", ":", "]", "\n", "\n", "# FP16-friendly sum. Equivalent to:", "\n", "# mean = (torch.sum(errors * square_mask, dim=(-1, -2)) /", "\n", "#         (eps + torch.sum(square_mask, dim=(-1, -2))))", "\n", "denom", "=", "eps", "+", "torch", ".", "sum", "(", "square_mask", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "mean", "=", "errors", "*", "square_mask", "\n", "mean", "=", "torch", ".", "sum", "(", "mean", ",", "dim", "=", "-", "1", ")", "\n", "mean", "=", "mean", "/", "denom", "[", "...", ",", "None", "]", "\n", "mean", "=", "torch", ".", "sum", "(", "mean", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Average over the batch dimensions", "\n", "mean", "=", "torch", ".", "mean", "(", "mean", ")", "\n", "\n", "return", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss._calculate_bin_centers": [[559, 566], ["torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat"], ["", "def", "_calculate_bin_centers", "(", "boundaries", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "step", "=", "boundaries", "[", "1", "]", "-", "boundaries", "[", "0", "]", "\n", "bin_centers", "=", "boundaries", "+", "step", "/", "2", "\n", "bin_centers", "=", "torch", ".", "cat", "(", "\n", "[", "bin_centers", ",", "(", "bin_centers", "[", "-", "1", "]", "+", "step", ")", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "0", "\n", ")", "\n", "return", "bin_centers", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss._calculate_expected_aligned_error": [[568, 576], ["loss._calculate_bin_centers", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss._calculate_bin_centers"], ["", "def", "_calculate_expected_aligned_error", "(", "\n", "alignment_confidence_breaks", ":", "torch", ".", "Tensor", ",", "\n", "aligned_distance_error_probs", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "bin_centers", "=", "_calculate_bin_centers", "(", "alignment_confidence_breaks", ")", "\n", "return", "(", "\n", "torch", ".", "sum", "(", "aligned_distance_error_probs", "*", "bin_centers", ",", "dim", "=", "-", "1", ")", ",", "\n", "bin_centers", "[", "-", "1", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_predicted_aligned_error": [[579, 616], ["torch.linspace", "torch.linspace", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "loss._calculate_expected_aligned_error"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss._calculate_expected_aligned_error"], ["", "def", "compute_predicted_aligned_error", "(", "\n", "logits", ":", "torch", ".", "Tensor", ",", "\n", "max_bin", ":", "int", "=", "31", ",", "\n", "no_bins", ":", "int", "=", "64", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"Computes aligned confidence metrics from logits.\n\n    Args:\n      logits: [*, num_res, num_res, num_bins] the logits output from\n        PredictedAlignedErrorHead.\n      max_bin: Maximum bin value\n      no_bins: Number of bins\n    Returns:\n      aligned_confidence_probs: [*, num_res, num_res, num_bins] the predicted\n        aligned error probabilities over bins for each residue pair.\n      predicted_aligned_error: [*, num_res, num_res] the expected aligned distance\n        error for each pair of residues.\n      max_predicted_aligned_error: [*] the maximum predicted error possible.\n    \"\"\"", "\n", "boundaries", "=", "torch", ".", "linspace", "(", "\n", "0", ",", "max_bin", ",", "steps", "=", "(", "no_bins", "-", "1", ")", ",", "device", "=", "logits", ".", "device", "\n", ")", "\n", "\n", "aligned_confidence_probs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "(", "\n", "predicted_aligned_error", ",", "\n", "max_predicted_aligned_error", ",", "\n", ")", "=", "_calculate_expected_aligned_error", "(", "\n", "alignment_confidence_breaks", "=", "boundaries", ",", "\n", "aligned_distance_error_probs", "=", "aligned_confidence_probs", ",", "\n", ")", "\n", "\n", "return", "{", "\n", "\"aligned_confidence_probs\"", ":", "aligned_confidence_probs", ",", "\n", "\"predicted_aligned_error\"", ":", "predicted_aligned_error", ",", "\n", "\"max_predicted_aligned_error\"", ":", "max_predicted_aligned_error", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_tm": [[619, 651], ["torch.linspace", "torch.linspace", "loss._calculate_bin_centers", "torch.sum", "torch.sum", "max", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "logits.new_ones", "logits.new_ones.sum", "tuple", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss._calculate_bin_centers", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax"], ["", "def", "compute_tm", "(", "\n", "logits", ":", "torch", ".", "Tensor", ",", "\n", "residue_weights", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "max_bin", ":", "int", "=", "31", ",", "\n", "no_bins", ":", "int", "=", "64", ",", "\n", "eps", ":", "float", "=", "1e-8", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "residue_weights", "is", "None", ":", "\n", "        ", "residue_weights", "=", "logits", ".", "new_ones", "(", "logits", ".", "shape", "[", "-", "2", "]", ")", "\n", "\n", "", "boundaries", "=", "torch", ".", "linspace", "(", "\n", "0", ",", "max_bin", ",", "steps", "=", "(", "no_bins", "-", "1", ")", ",", "device", "=", "logits", ".", "device", "\n", ")", "\n", "\n", "bin_centers", "=", "_calculate_bin_centers", "(", "boundaries", ")", "\n", "torch", ".", "sum", "(", "residue_weights", ")", "\n", "n", "=", "logits", ".", "shape", "[", "-", "2", "]", "\n", "clipped_n", "=", "max", "(", "n", ",", "19", ")", "\n", "\n", "d0", "=", "1.24", "*", "(", "clipped_n", "-", "15", ")", "**", "(", "1.0", "/", "3", ")", "-", "1.8", "\n", "\n", "probs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "tm_per_bin", "=", "1.0", "/", "(", "1", "+", "(", "bin_centers", "**", "2", ")", "/", "(", "d0", "**", "2", ")", ")", "\n", "predicted_tm_term", "=", "torch", ".", "sum", "(", "probs", "*", "tm_per_bin", ",", "dim", "=", "-", "1", ")", "\n", "\n", "normed_residue_mask", "=", "residue_weights", "/", "(", "eps", "+", "residue_weights", ".", "sum", "(", ")", ")", "\n", "per_alignment", "=", "torch", ".", "sum", "(", "predicted_tm_term", "*", "normed_residue_mask", ",", "dim", "=", "-", "1", ")", "\n", "weighted", "=", "per_alignment", "*", "residue_weights", "\n", "argmax", "=", "(", "weighted", "==", "torch", ".", "max", "(", "weighted", ")", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "return", "per_alignment", "[", "tuple", "(", "argmax", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.tm_loss": [[653, 708], ["fastfold.utils.rigid_utils.Rigid.from_tensor_7", "fastfold.utils.rigid_utils.Rigid.from_tensor_4x4", "torch.sum", "torch.sum", "sq_diff.detach.detach", "torch.linspace", "torch.linspace", "torch.sum", "torch.sum", "loss.softmax_cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "[].apply", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.sum", "torch.sum", "affine.get_trans", "loss.tm_loss._points"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.from_tensor_7", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.from_tensor_4x4", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.softmax_cross_entropy", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_trans"], ["", "def", "tm_loss", "(", "\n", "logits", ",", "\n", "final_affine_tensor", ",", "\n", "backbone_rigid_tensor", ",", "\n", "backbone_rigid_mask", ",", "\n", "resolution", ",", "\n", "max_bin", "=", "31", ",", "\n", "no_bins", "=", "64", ",", "\n", "min_resolution", ":", "float", "=", "0.1", ",", "\n", "max_resolution", ":", "float", "=", "3.0", ",", "\n", "eps", "=", "1e-8", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "    ", "pred_affine", "=", "Rigid", ".", "from_tensor_7", "(", "final_affine_tensor", ")", "\n", "backbone_rigid", "=", "Rigid", ".", "from_tensor_4x4", "(", "backbone_rigid_tensor", ")", "\n", "\n", "def", "_points", "(", "affine", ")", ":", "\n", "        ", "pts", "=", "affine", ".", "get_trans", "(", ")", "[", "...", ",", "None", ",", ":", ",", ":", "]", "\n", "return", "affine", ".", "invert", "(", ")", "[", "...", ",", "None", "]", ".", "apply", "(", "pts", ")", "\n", "\n", "", "sq_diff", "=", "torch", ".", "sum", "(", "\n", "(", "_points", "(", "pred_affine", ")", "-", "_points", "(", "backbone_rigid", ")", ")", "**", "2", ",", "dim", "=", "-", "1", "\n", ")", "\n", "\n", "sq_diff", "=", "sq_diff", ".", "detach", "(", ")", "\n", "\n", "boundaries", "=", "torch", ".", "linspace", "(", "\n", "0", ",", "max_bin", ",", "steps", "=", "(", "no_bins", "-", "1", ")", ",", "device", "=", "logits", ".", "device", "\n", ")", "\n", "boundaries", "=", "boundaries", "**", "2", "\n", "true_bins", "=", "torch", ".", "sum", "(", "sq_diff", "[", "...", ",", "None", "]", ">", "boundaries", ",", "dim", "=", "-", "1", ")", "\n", "\n", "errors", "=", "softmax_cross_entropy", "(", "\n", "logits", ",", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "true_bins", ",", "no_bins", ")", "\n", ")", "\n", "\n", "square_mask", "=", "(", "\n", "backbone_rigid_mask", "[", "...", ",", "None", "]", "*", "backbone_rigid_mask", "[", "...", ",", "None", ",", ":", "]", "\n", ")", "\n", "\n", "loss", "=", "torch", ".", "sum", "(", "errors", "*", "square_mask", ",", "dim", "=", "-", "1", ")", "\n", "scale", "=", "0.5", "# hack to help FP16 training along", "\n", "denom", "=", "eps", "+", "torch", ".", "sum", "(", "scale", "*", "square_mask", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "loss", "=", "loss", "/", "denom", "[", "...", ",", "None", "]", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "loss", "*", "scale", "\n", "\n", "loss", "=", "loss", "*", "(", "\n", "(", "resolution", ">=", "min_resolution", ")", "&", "(", "resolution", "<=", "max_resolution", ")", "\n", ")", "\n", "\n", "# Average over the loss dimension", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.between_residue_bond_loss": [[710, 866], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.maximum", "torch.maximum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.max", "torch.max", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.square", "torch.square", "torch.sum", "torch.sum", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "between_residue_bond_loss", "(", "\n", "pred_atom_positions", ":", "torch", ".", "Tensor", ",", "# (*, N, 37/14, 3)", "\n", "pred_atom_mask", ":", "torch", ".", "Tensor", ",", "# (*, N, 37/14)", "\n", "residue_index", ":", "torch", ".", "Tensor", ",", "# (*, N)", "\n", "aatype", ":", "torch", ".", "Tensor", ",", "# (*, N)", "\n", "tolerance_factor_soft", "=", "12.0", ",", "\n", "tolerance_factor_hard", "=", "12.0", ",", "\n", "eps", "=", "1e-6", ",", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"Flat-bottom loss to penalize structural violations between residues.\n\n    This is a loss penalizing any violation of the geometry around the peptide\n    bond between consecutive amino acids. This loss corresponds to\n    Jumper et al. (2021) Suppl. Sec. 1.9.11, eq 44, 45.\n\n    Args:\n      pred_atom_positions: Atom positions in atom37/14 representation\n      pred_atom_mask: Atom mask in atom37/14 representation\n      residue_index: Residue index for given amino acid, this is assumed to be\n        monotonically increasing.\n      aatype: Amino acid type of given residue\n      tolerance_factor_soft: soft tolerance factor measured in standard deviations\n        of pdb distributions\n      tolerance_factor_hard: hard tolerance factor measured in standard deviations\n        of pdb distributions\n\n    Returns:\n      Dict containing:\n        * 'c_n_loss_mean': Loss for peptide bond length violations\n        * 'ca_c_n_loss_mean': Loss for violations of bond angle around C spanned\n            by CA, C, N\n        * 'c_n_ca_loss_mean': Loss for violations of bond angle around N spanned\n            by C, N, CA\n        * 'per_residue_loss_sum': sum of all losses for each residue\n        * 'per_residue_violation_mask': mask denoting all residues with violation\n            present.\n    \"\"\"", "\n", "# Get the positions of the relevant backbone atoms.", "\n", "this_ca_pos", "=", "pred_atom_positions", "[", "...", ",", ":", "-", "1", ",", "1", ",", ":", "]", "\n", "this_ca_mask", "=", "pred_atom_mask", "[", "...", ",", ":", "-", "1", ",", "1", "]", "\n", "this_c_pos", "=", "pred_atom_positions", "[", "...", ",", ":", "-", "1", ",", "2", ",", ":", "]", "\n", "this_c_mask", "=", "pred_atom_mask", "[", "...", ",", ":", "-", "1", ",", "2", "]", "\n", "next_n_pos", "=", "pred_atom_positions", "[", "...", ",", "1", ":", ",", "0", ",", ":", "]", "\n", "next_n_mask", "=", "pred_atom_mask", "[", "...", ",", "1", ":", ",", "0", "]", "\n", "next_ca_pos", "=", "pred_atom_positions", "[", "...", ",", "1", ":", ",", "1", ",", ":", "]", "\n", "next_ca_mask", "=", "pred_atom_mask", "[", "...", ",", "1", ":", ",", "1", "]", "\n", "has_no_gap_mask", "=", "(", "residue_index", "[", "...", ",", "1", ":", "]", "-", "residue_index", "[", "...", ",", ":", "-", "1", "]", ")", "==", "1.0", "\n", "\n", "# Compute loss for the C--N bond.", "\n", "c_n_bond_length", "=", "torch", ".", "sqrt", "(", "\n", "eps", "+", "torch", ".", "sum", "(", "(", "this_c_pos", "-", "next_n_pos", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "\n", ")", "\n", "\n", "# The C-N bond to proline has slightly different length because of the ring.", "\n", "next_is_proline", "=", "aatype", "[", "...", ",", "1", ":", "]", "==", "residue_constants", ".", "resname_to_idx", "[", "\"PRO\"", "]", "\n", "gt_length", "=", "(", "\n", "~", "next_is_proline", "\n", ")", "*", "residue_constants", ".", "between_res_bond_length_c_n", "[", "\n", "0", "\n", "]", "+", "next_is_proline", "*", "residue_constants", ".", "between_res_bond_length_c_n", "[", "\n", "1", "\n", "]", "\n", "gt_stddev", "=", "(", "\n", "~", "next_is_proline", "\n", ")", "*", "residue_constants", ".", "between_res_bond_length_stddev_c_n", "[", "\n", "0", "\n", "]", "+", "next_is_proline", "*", "residue_constants", ".", "between_res_bond_length_stddev_c_n", "[", "\n", "1", "\n", "]", "\n", "c_n_bond_length_error", "=", "torch", ".", "sqrt", "(", "eps", "+", "(", "c_n_bond_length", "-", "gt_length", ")", "**", "2", ")", "\n", "c_n_loss_per_residue", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "\n", "c_n_bond_length_error", "-", "tolerance_factor_soft", "*", "gt_stddev", "\n", ")", "\n", "mask", "=", "this_c_mask", "*", "next_n_mask", "*", "has_no_gap_mask", "\n", "c_n_loss", "=", "torch", ".", "sum", "(", "mask", "*", "c_n_loss_per_residue", ",", "dim", "=", "-", "1", ")", "/", "(", "\n", "torch", ".", "sum", "(", "mask", ",", "dim", "=", "-", "1", ")", "+", "eps", "\n", ")", "\n", "c_n_violation_mask", "=", "mask", "*", "(", "\n", "c_n_bond_length_error", ">", "(", "tolerance_factor_hard", "*", "gt_stddev", ")", "\n", ")", "\n", "\n", "# Compute loss for the angles.", "\n", "ca_c_bond_length", "=", "torch", ".", "sqrt", "(", "\n", "eps", "+", "torch", ".", "sum", "(", "(", "this_ca_pos", "-", "this_c_pos", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "\n", ")", "\n", "n_ca_bond_length", "=", "torch", ".", "sqrt", "(", "\n", "eps", "+", "torch", ".", "sum", "(", "(", "next_n_pos", "-", "next_ca_pos", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "\n", ")", "\n", "\n", "c_ca_unit_vec", "=", "(", "this_ca_pos", "-", "this_c_pos", ")", "/", "ca_c_bond_length", "[", "...", ",", "None", "]", "\n", "c_n_unit_vec", "=", "(", "next_n_pos", "-", "this_c_pos", ")", "/", "c_n_bond_length", "[", "...", ",", "None", "]", "\n", "n_ca_unit_vec", "=", "(", "next_ca_pos", "-", "next_n_pos", ")", "/", "n_ca_bond_length", "[", "...", ",", "None", "]", "\n", "\n", "ca_c_n_cos_angle", "=", "torch", ".", "sum", "(", "c_ca_unit_vec", "*", "c_n_unit_vec", ",", "dim", "=", "-", "1", ")", "\n", "gt_angle", "=", "residue_constants", ".", "between_res_cos_angles_ca_c_n", "[", "0", "]", "\n", "gt_stddev", "=", "residue_constants", ".", "between_res_bond_length_stddev_c_n", "[", "0", "]", "\n", "ca_c_n_cos_angle_error", "=", "torch", ".", "sqrt", "(", "\n", "eps", "+", "(", "ca_c_n_cos_angle", "-", "gt_angle", ")", "**", "2", "\n", ")", "\n", "ca_c_n_loss_per_residue", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "\n", "ca_c_n_cos_angle_error", "-", "tolerance_factor_soft", "*", "gt_stddev", "\n", ")", "\n", "mask", "=", "this_ca_mask", "*", "this_c_mask", "*", "next_n_mask", "*", "has_no_gap_mask", "\n", "ca_c_n_loss", "=", "torch", ".", "sum", "(", "mask", "*", "ca_c_n_loss_per_residue", ",", "dim", "=", "-", "1", ")", "/", "(", "\n", "torch", ".", "sum", "(", "mask", ",", "dim", "=", "-", "1", ")", "+", "eps", "\n", ")", "\n", "ca_c_n_violation_mask", "=", "mask", "*", "(", "\n", "ca_c_n_cos_angle_error", ">", "(", "tolerance_factor_hard", "*", "gt_stddev", ")", "\n", ")", "\n", "\n", "c_n_ca_cos_angle", "=", "torch", ".", "sum", "(", "(", "-", "c_n_unit_vec", ")", "*", "n_ca_unit_vec", ",", "dim", "=", "-", "1", ")", "\n", "gt_angle", "=", "residue_constants", ".", "between_res_cos_angles_c_n_ca", "[", "0", "]", "\n", "gt_stddev", "=", "residue_constants", ".", "between_res_cos_angles_c_n_ca", "[", "1", "]", "\n", "c_n_ca_cos_angle_error", "=", "torch", ".", "sqrt", "(", "\n", "eps", "+", "torch", ".", "square", "(", "c_n_ca_cos_angle", "-", "gt_angle", ")", "\n", ")", "\n", "c_n_ca_loss_per_residue", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "\n", "c_n_ca_cos_angle_error", "-", "tolerance_factor_soft", "*", "gt_stddev", "\n", ")", "\n", "mask", "=", "this_c_mask", "*", "next_n_mask", "*", "next_ca_mask", "*", "has_no_gap_mask", "\n", "c_n_ca_loss", "=", "torch", ".", "sum", "(", "mask", "*", "c_n_ca_loss_per_residue", ",", "dim", "=", "-", "1", ")", "/", "(", "\n", "torch", ".", "sum", "(", "mask", ",", "dim", "=", "-", "1", ")", "+", "eps", "\n", ")", "\n", "c_n_ca_violation_mask", "=", "mask", "*", "(", "\n", "c_n_ca_cos_angle_error", ">", "(", "tolerance_factor_hard", "*", "gt_stddev", ")", "\n", ")", "\n", "\n", "# Compute a per residue loss (equally distribute the loss to both", "\n", "# neighbouring residues).", "\n", "per_residue_loss_sum", "=", "(", "\n", "c_n_loss_per_residue", "+", "ca_c_n_loss_per_residue", "+", "c_n_ca_loss_per_residue", "\n", ")", "\n", "per_residue_loss_sum", "=", "0.5", "*", "(", "\n", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "per_residue_loss_sum", ",", "(", "0", ",", "1", ")", ")", "\n", "+", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "per_residue_loss_sum", ",", "(", "1", ",", "0", ")", ")", "\n", ")", "\n", "\n", "# Compute hard violations.", "\n", "violation_mask", "=", "torch", ".", "max", "(", "\n", "torch", ".", "stack", "(", "\n", "[", "c_n_violation_mask", ",", "ca_c_n_violation_mask", ",", "c_n_ca_violation_mask", "]", ",", "\n", "dim", "=", "-", "2", ",", "\n", ")", ",", "\n", "dim", "=", "-", "2", ",", "\n", ")", "[", "0", "]", "\n", "violation_mask", "=", "torch", ".", "maximum", "(", "\n", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "violation_mask", ",", "(", "0", ",", "1", ")", ")", ",", "\n", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "violation_mask", ",", "(", "1", ",", "0", ")", ")", ",", "\n", ")", "\n", "\n", "return", "{", "\n", "\"c_n_loss_mean\"", ":", "c_n_loss", ",", "\n", "\"ca_c_n_loss_mean\"", ":", "ca_c_n_loss", ",", "\n", "\"c_n_ca_loss_mean\"", ":", "c_n_ca_loss", ",", "\n", "\"per_residue_loss_sum\"", ":", "per_residue_loss_sum", ",", "\n", "\"per_residue_violation_mask\"", ":", "violation_mask", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.between_residue_clash_loss": [[869, 1013], ["torch.sqrt", "torch.sqrt", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "c_one_hot.type.reshape", "c_one_hot.type.type", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "n_one_hot.type.reshape", "n_one_hot.type.type", "cys.index", "residue_index.new_tensor", "cys_sg_idx.reshape().squeeze.reshape().squeeze", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.maximum", "torch.maximum", "residue_index.new_tensor", "residue_index.new_tensor", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.amax", "torch.amax", "torch.amax", "torch.amax", "torch.sum", "torch.sum", "cys_sg_idx.reshape().squeeze.reshape", "torch.sum", "torch.sum", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot"], ["", "def", "between_residue_clash_loss", "(", "\n", "atom14_pred_positions", ":", "torch", ".", "Tensor", ",", "\n", "atom14_atom_exists", ":", "torch", ".", "Tensor", ",", "\n", "atom14_atom_radius", ":", "torch", ".", "Tensor", ",", "\n", "residue_index", ":", "torch", ".", "Tensor", ",", "\n", "overlap_tolerance_soft", "=", "1.5", ",", "\n", "overlap_tolerance_hard", "=", "1.5", ",", "\n", "eps", "=", "1e-10", ",", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"Loss to penalize steric clashes between residues.\n\n    This is a loss penalizing any steric clashes due to non bonded atoms in\n    different peptides coming too close. This loss corresponds to the part with\n    different residues of\n    Jumper et al. (2021) Suppl. Sec. 1.9.11, eq 46.\n\n    Args:\n      atom14_pred_positions: Predicted positions of atoms in\n        global prediction frame\n      atom14_atom_exists: Mask denoting whether atom at positions exists for given\n        amino acid type\n      atom14_atom_radius: Van der Waals radius for each atom.\n      residue_index: Residue index for given amino acid.\n      overlap_tolerance_soft: Soft tolerance factor.\n      overlap_tolerance_hard: Hard tolerance factor.\n\n    Returns:\n      Dict containing:\n        * 'mean_loss': average clash loss\n        * 'per_atom_loss_sum': sum of all clash losses per atom, shape (N, 14)\n        * 'per_atom_clash_mask': mask whether atom clashes with any other atom\n            shape (N, 14)\n    \"\"\"", "\n", "fp_type", "=", "atom14_pred_positions", ".", "dtype", "\n", "\n", "# Create the distance matrix.", "\n", "# (N, N, 14, 14)", "\n", "dists", "=", "torch", ".", "sqrt", "(", "\n", "eps", "\n", "+", "torch", ".", "sum", "(", "\n", "(", "\n", "atom14_pred_positions", "[", "...", ",", ":", ",", "None", ",", ":", ",", "None", ",", ":", "]", "\n", "-", "atom14_pred_positions", "[", "...", ",", "None", ",", ":", ",", "None", ",", ":", ",", ":", "]", "\n", ")", "\n", "**", "2", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "# Create the mask for valid distances.", "\n", "# shape (N, N, 14, 14)", "\n", "dists_mask", "=", "(", "\n", "atom14_atom_exists", "[", "...", ",", ":", ",", "None", ",", ":", ",", "None", "]", "\n", "*", "atom14_atom_exists", "[", "...", ",", "None", ",", ":", ",", "None", ",", ":", "]", "\n", ")", ".", "type", "(", "fp_type", ")", "\n", "\n", "# Mask out all the duplicate entries in the lower triangular matrix.", "\n", "# Also mask out the diagonal (atom-pairs from the same residue) -- these atoms", "\n", "# are handled separately.", "\n", "dists_mask", "=", "dists_mask", "*", "(", "\n", "residue_index", "[", "...", ",", ":", ",", "None", ",", "None", ",", "None", "]", "\n", "<", "residue_index", "[", "...", ",", "None", ",", ":", ",", "None", ",", "None", "]", "\n", ")", "\n", "\n", "# Backbone C--N bond between subsequent residues is no clash.", "\n", "c_one_hot", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "\n", "residue_index", ".", "new_tensor", "(", "2", ")", ",", "num_classes", "=", "14", "\n", ")", "\n", "c_one_hot", "=", "c_one_hot", ".", "reshape", "(", "\n", "*", "(", "(", "1", ",", ")", "*", "len", "(", "residue_index", ".", "shape", "[", ":", "-", "1", "]", ")", ")", ",", "*", "c_one_hot", ".", "shape", "\n", ")", "\n", "c_one_hot", "=", "c_one_hot", ".", "type", "(", "fp_type", ")", "\n", "n_one_hot", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "\n", "residue_index", ".", "new_tensor", "(", "0", ")", ",", "num_classes", "=", "14", "\n", ")", "\n", "n_one_hot", "=", "n_one_hot", ".", "reshape", "(", "\n", "*", "(", "(", "1", ",", ")", "*", "len", "(", "residue_index", ".", "shape", "[", ":", "-", "1", "]", ")", ")", ",", "*", "n_one_hot", ".", "shape", "\n", ")", "\n", "n_one_hot", "=", "n_one_hot", ".", "type", "(", "fp_type", ")", "\n", "\n", "neighbour_mask", "=", "(", "\n", "residue_index", "[", "...", ",", ":", ",", "None", ",", "None", ",", "None", "]", "+", "1", "\n", ")", "==", "residue_index", "[", "...", ",", "None", ",", ":", ",", "None", ",", "None", "]", "\n", "c_n_bonds", "=", "(", "\n", "neighbour_mask", "\n", "*", "c_one_hot", "[", "...", ",", "None", ",", "None", ",", ":", ",", "None", "]", "\n", "*", "n_one_hot", "[", "...", ",", "None", ",", "None", ",", "None", ",", ":", "]", "\n", ")", "\n", "dists_mask", "=", "dists_mask", "*", "(", "1.0", "-", "c_n_bonds", ")", "\n", "\n", "# Disulfide bridge between two cysteines is no clash.", "\n", "cys", "=", "residue_constants", ".", "restype_name_to_atom14_names", "[", "\"CYS\"", "]", "\n", "cys_sg_idx", "=", "cys", ".", "index", "(", "\"SG\"", ")", "\n", "cys_sg_idx", "=", "residue_index", ".", "new_tensor", "(", "cys_sg_idx", ")", "\n", "cys_sg_idx", "=", "cys_sg_idx", ".", "reshape", "(", "\n", "*", "(", "(", "1", ",", ")", "*", "len", "(", "residue_index", ".", "shape", "[", ":", "-", "1", "]", ")", ")", ",", "1", "\n", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "cys_sg_one_hot", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "cys_sg_idx", ",", "num_classes", "=", "14", ")", "\n", "disulfide_bonds", "=", "(", "\n", "cys_sg_one_hot", "[", "...", ",", "None", ",", "None", ",", ":", ",", "None", "]", "\n", "*", "cys_sg_one_hot", "[", "...", ",", "None", ",", "None", ",", "None", ",", ":", "]", "\n", ")", "\n", "dists_mask", "=", "dists_mask", "*", "(", "1.0", "-", "disulfide_bonds", ")", "\n", "\n", "# Compute the lower bound for the allowed distances.", "\n", "# shape (N, N, 14, 14)", "\n", "dists_lower_bound", "=", "dists_mask", "*", "(", "\n", "atom14_atom_radius", "[", "...", ",", ":", ",", "None", ",", ":", ",", "None", "]", "\n", "+", "atom14_atom_radius", "[", "...", ",", "None", ",", ":", ",", "None", ",", ":", "]", "\n", ")", "\n", "\n", "# Compute the error.", "\n", "# shape (N, N, 14, 14)", "\n", "dists_to_low_error", "=", "dists_mask", "*", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "\n", "dists_lower_bound", "-", "overlap_tolerance_soft", "-", "dists", "\n", ")", "\n", "\n", "# Compute the mean loss.", "\n", "# shape ()", "\n", "mean_loss", "=", "torch", ".", "sum", "(", "dists_to_low_error", ")", "/", "(", "1e-6", "+", "torch", ".", "sum", "(", "dists_mask", ")", ")", "\n", "\n", "# Compute the per atom loss sum.", "\n", "# shape (N, 14)", "\n", "per_atom_loss_sum", "=", "torch", ".", "sum", "(", "dists_to_low_error", ",", "dim", "=", "(", "-", "4", ",", "-", "2", ")", ")", "+", "torch", ".", "sum", "(", "\n", "dists_to_low_error", ",", "axis", "=", "(", "-", "3", ",", "-", "1", ")", "\n", ")", "\n", "\n", "# Compute the hard clash mask.", "\n", "# shape (N, N, 14, 14)", "\n", "clash_mask", "=", "dists_mask", "*", "(", "\n", "dists", "<", "(", "dists_lower_bound", "-", "overlap_tolerance_hard", ")", "\n", ")", "\n", "\n", "# Compute the per atom clash.", "\n", "# shape (N, 14)", "\n", "per_atom_clash_mask", "=", "torch", ".", "maximum", "(", "\n", "torch", ".", "amax", "(", "clash_mask", ",", "axis", "=", "(", "-", "4", ",", "-", "2", ")", ")", ",", "\n", "torch", ".", "amax", "(", "clash_mask", ",", "axis", "=", "(", "-", "3", ",", "-", "1", ")", ")", ",", "\n", ")", "\n", "\n", "return", "{", "\n", "\"mean_loss\"", ":", "mean_loss", ",", "# shape ()", "\n", "\"per_atom_loss_sum\"", ":", "per_atom_loss_sum", ",", "# shape (N, 14)", "\n", "\"per_atom_clash_mask\"", ":", "per_atom_clash_mask", ",", "# shape (N, 14)", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.within_residue_violations": [[1016, 1100], ["dists_masks.reshape.reshape", "torch.sqrt", "torch.sqrt", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.maximum", "torch.maximum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.eye", "torch.eye", "torch.sum", "torch.sum", "torch.max", "torch.max", "torch.max", "torch.max", "len"], "function", ["None"], ["", "def", "within_residue_violations", "(", "\n", "atom14_pred_positions", ":", "torch", ".", "Tensor", ",", "\n", "atom14_atom_exists", ":", "torch", ".", "Tensor", ",", "\n", "atom14_dists_lower_bound", ":", "torch", ".", "Tensor", ",", "\n", "atom14_dists_upper_bound", ":", "torch", ".", "Tensor", ",", "\n", "tighten_bounds_for_loss", "=", "0.0", ",", "\n", "eps", "=", "1e-10", ",", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"Loss to penalize steric clashes within residues.\n\n    This is a loss penalizing any steric violations or clashes of non-bonded atoms\n    in a given peptide. This loss corresponds to the part with\n    the same residues of\n    Jumper et al. (2021) Suppl. Sec. 1.9.11, eq 46.\n\n    Args:\n        atom14_pred_positions ([*, N, 14, 3]):\n            Predicted positions of atoms in global prediction frame.\n        atom14_atom_exists ([*, N, 14]):\n            Mask denoting whether atom at positions exists for given\n            amino acid type\n        atom14_dists_lower_bound ([*, N, 14]):\n            Lower bound on allowed distances.\n        atom14_dists_upper_bound ([*, N, 14]):\n            Upper bound on allowed distances\n        tighten_bounds_for_loss ([*, N]):\n            Extra factor to tighten loss\n\n    Returns:\n      Dict containing:\n        * 'per_atom_loss_sum' ([*, N, 14]):\n              sum of all clash losses per atom, shape\n        * 'per_atom_clash_mask' ([*, N, 14]):\n              mask whether atom clashes with any other atom shape\n    \"\"\"", "\n", "# Compute the mask for each residue.", "\n", "dists_masks", "=", "1.0", "-", "torch", ".", "eye", "(", "14", ",", "device", "=", "atom14_atom_exists", ".", "device", ")", "[", "None", "]", "\n", "dists_masks", "=", "dists_masks", ".", "reshape", "(", "\n", "*", "(", "(", "1", ",", ")", "*", "len", "(", "atom14_atom_exists", ".", "shape", "[", ":", "-", "2", "]", ")", ")", ",", "*", "dists_masks", ".", "shape", "\n", ")", "\n", "dists_masks", "=", "(", "\n", "atom14_atom_exists", "[", "...", ",", ":", ",", ":", ",", "None", "]", "\n", "*", "atom14_atom_exists", "[", "...", ",", ":", ",", "None", ",", ":", "]", "\n", "*", "dists_masks", "\n", ")", "\n", "\n", "# Distance matrix", "\n", "dists", "=", "torch", ".", "sqrt", "(", "\n", "eps", "\n", "+", "torch", ".", "sum", "(", "\n", "(", "\n", "atom14_pred_positions", "[", "...", ",", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "-", "atom14_pred_positions", "[", "...", ",", ":", ",", "None", ",", ":", ",", ":", "]", "\n", ")", "\n", "**", "2", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "# Compute the loss.", "\n", "dists_to_low_error", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "\n", "atom14_dists_lower_bound", "+", "tighten_bounds_for_loss", "-", "dists", "\n", ")", "\n", "dists_to_high_error", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "\n", "dists", "-", "(", "atom14_dists_upper_bound", "-", "tighten_bounds_for_loss", ")", "\n", ")", "\n", "loss", "=", "dists_masks", "*", "(", "dists_to_low_error", "+", "dists_to_high_error", ")", "\n", "\n", "# Compute the per atom loss sum.", "\n", "per_atom_loss_sum", "=", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "-", "2", ")", "+", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Compute the violations mask.", "\n", "violations", "=", "dists_masks", "*", "(", "\n", "(", "dists", "<", "atom14_dists_lower_bound", ")", "|", "(", "dists", ">", "atom14_dists_upper_bound", ")", "\n", ")", "\n", "\n", "# Compute the per atom violations.", "\n", "per_atom_violations", "=", "torch", ".", "maximum", "(", "\n", "torch", ".", "max", "(", "violations", ",", "dim", "=", "-", "2", ")", "[", "0", "]", ",", "torch", ".", "max", "(", "violations", ",", "axis", "=", "-", "1", ")", "[", "0", "]", "\n", ")", "\n", "\n", "return", "{", "\n", "\"per_atom_loss_sum\"", ":", "per_atom_loss_sum", ",", "\n", "\"per_atom_violations\"", ":", "per_atom_violations", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.find_structural_violations": [[1103, 1213], ["loss.between_residue_bond_loss", "atom14_pred_positions.new_tensor", "loss.between_residue_clash_loss", "fastfold.common.residue_constants.make_atom14_dists_bounds", "loss.within_residue_violations", "atom14_pred_positions.new_tensor", "atom14_pred_positions.new_tensor", "torch.max", "torch.max", "torch.stack", "torch.stack", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.between_residue_bond_loss", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.between_residue_clash_loss", "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants.make_atom14_dists_bounds", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.within_residue_violations"], ["", "def", "find_structural_violations", "(", "\n", "batch", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "atom14_pred_positions", ":", "torch", ".", "Tensor", ",", "\n", "violation_tolerance_factor", ":", "float", ",", "\n", "clash_overlap_tolerance", ":", "float", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"Computes several checks for structural violations.\"\"\"", "\n", "\n", "# Compute between residue backbone violations of bonds and angles.", "\n", "connection_violations", "=", "between_residue_bond_loss", "(", "\n", "pred_atom_positions", "=", "atom14_pred_positions", ",", "\n", "pred_atom_mask", "=", "batch", "[", "\"atom14_atom_exists\"", "]", ",", "\n", "residue_index", "=", "batch", "[", "\"residue_index\"", "]", ",", "\n", "aatype", "=", "batch", "[", "\"aatype\"", "]", ",", "\n", "tolerance_factor_soft", "=", "violation_tolerance_factor", ",", "\n", "tolerance_factor_hard", "=", "violation_tolerance_factor", ",", "\n", ")", "\n", "\n", "# Compute the Van der Waals radius for every atom", "\n", "# (the first letter of the atom name is the element type).", "\n", "# Shape: (N, 14).", "\n", "atomtype_radius", "=", "[", "\n", "residue_constants", ".", "van_der_waals_radius", "[", "name", "[", "0", "]", "]", "\n", "for", "name", "in", "residue_constants", ".", "atom_types", "\n", "]", "\n", "atomtype_radius", "=", "atom14_pred_positions", ".", "new_tensor", "(", "atomtype_radius", ")", "\n", "atom14_atom_radius", "=", "(", "\n", "batch", "[", "\"atom14_atom_exists\"", "]", "\n", "*", "atomtype_radius", "[", "batch", "[", "\"residx_atom14_to_atom37\"", "]", "]", "\n", ")", "\n", "\n", "# Compute the between residue clash loss.", "\n", "between_residue_clashes", "=", "between_residue_clash_loss", "(", "\n", "atom14_pred_positions", "=", "atom14_pred_positions", ",", "\n", "atom14_atom_exists", "=", "batch", "[", "\"atom14_atom_exists\"", "]", ",", "\n", "atom14_atom_radius", "=", "atom14_atom_radius", ",", "\n", "residue_index", "=", "batch", "[", "\"residue_index\"", "]", ",", "\n", "overlap_tolerance_soft", "=", "clash_overlap_tolerance", ",", "\n", "overlap_tolerance_hard", "=", "clash_overlap_tolerance", ",", "\n", ")", "\n", "\n", "# Compute all within-residue violations (clashes,", "\n", "# bond length and angle violations).", "\n", "restype_atom14_bounds", "=", "residue_constants", ".", "make_atom14_dists_bounds", "(", "\n", "overlap_tolerance", "=", "clash_overlap_tolerance", ",", "\n", "bond_length_tolerance_factor", "=", "violation_tolerance_factor", ",", "\n", ")", "\n", "atom14_atom_exists", "=", "batch", "[", "\"atom14_atom_exists\"", "]", "\n", "atom14_dists_lower_bound", "=", "atom14_pred_positions", ".", "new_tensor", "(", "\n", "restype_atom14_bounds", "[", "\"lower_bound\"", "]", "\n", ")", "[", "batch", "[", "\"aatype\"", "]", "]", "\n", "atom14_dists_upper_bound", "=", "atom14_pred_positions", ".", "new_tensor", "(", "\n", "restype_atom14_bounds", "[", "\"upper_bound\"", "]", "\n", ")", "[", "batch", "[", "\"aatype\"", "]", "]", "\n", "residue_violations", "=", "within_residue_violations", "(", "\n", "atom14_pred_positions", "=", "atom14_pred_positions", ",", "\n", "atom14_atom_exists", "=", "batch", "[", "\"atom14_atom_exists\"", "]", ",", "\n", "atom14_dists_lower_bound", "=", "atom14_dists_lower_bound", ",", "\n", "atom14_dists_upper_bound", "=", "atom14_dists_upper_bound", ",", "\n", "tighten_bounds_for_loss", "=", "0.0", ",", "\n", ")", "\n", "\n", "# Combine them to a single per-residue violation mask (used later for LDDT).", "\n", "per_residue_violations_mask", "=", "torch", ".", "max", "(", "\n", "torch", ".", "stack", "(", "\n", "[", "\n", "connection_violations", "[", "\"per_residue_violation_mask\"", "]", ",", "\n", "torch", ".", "max", "(", "\n", "between_residue_clashes", "[", "\"per_atom_clash_mask\"", "]", ",", "dim", "=", "-", "1", "\n", ")", "[", "0", "]", ",", "\n", "torch", ".", "max", "(", "residue_violations", "[", "\"per_atom_violations\"", "]", ",", "dim", "=", "-", "1", ")", "[", "0", "]", ",", "\n", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "[", "0", "]", "\n", "\n", "return", "{", "\n", "\"between_residues\"", ":", "{", "\n", "\"bonds_c_n_loss_mean\"", ":", "connection_violations", "[", "\"c_n_loss_mean\"", "]", ",", "# ()", "\n", "\"angles_ca_c_n_loss_mean\"", ":", "connection_violations", "[", "\n", "\"ca_c_n_loss_mean\"", "\n", "]", ",", "# ()", "\n", "\"angles_c_n_ca_loss_mean\"", ":", "connection_violations", "[", "\n", "\"c_n_ca_loss_mean\"", "\n", "]", ",", "# ()", "\n", "\"connections_per_residue_loss_sum\"", ":", "connection_violations", "[", "\n", "\"per_residue_loss_sum\"", "\n", "]", ",", "# (N)", "\n", "\"connections_per_residue_violation_mask\"", ":", "connection_violations", "[", "\n", "\"per_residue_violation_mask\"", "\n", "]", ",", "# (N)", "\n", "\"clashes_mean_loss\"", ":", "between_residue_clashes", "[", "\"mean_loss\"", "]", ",", "# ()", "\n", "\"clashes_per_atom_loss_sum\"", ":", "between_residue_clashes", "[", "\n", "\"per_atom_loss_sum\"", "\n", "]", ",", "# (N, 14)", "\n", "\"clashes_per_atom_clash_mask\"", ":", "between_residue_clashes", "[", "\n", "\"per_atom_clash_mask\"", "\n", "]", ",", "# (N, 14)", "\n", "}", ",", "\n", "\"within_residues\"", ":", "{", "\n", "\"per_atom_loss_sum\"", ":", "residue_violations", "[", "\n", "\"per_atom_loss_sum\"", "\n", "]", ",", "# (N, 14)", "\n", "\"per_atom_violations\"", ":", "residue_violations", "[", "\n", "\"per_atom_violations\"", "\n", "]", ",", "# (N, 14),", "\n", "}", ",", "\n", "\"total_per_residue_violations_mask\"", ":", "per_residue_violations_mask", ",", "# (N)", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.find_structural_violations_np": [[1216, 1231], ["fastfold.utils.tensor_utils.tree_map", "to_tensor", "loss.find_structural_violations", "fastfold.utils.tensor_utils.tensor_tree_map", "torch.tensor", "torch.tensor", "numpy.array"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.tree_map", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.find_structural_violations"], ["", "def", "find_structural_violations_np", "(", "\n", "batch", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "\n", "atom14_pred_positions", ":", "np", ".", "ndarray", ",", "\n", "config", ":", "ml_collections", ".", "ConfigDict", ",", "\n", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "to_tensor", "=", "lambda", "x", ":", "torch", ".", "tensor", "(", "x", ")", "\n", "batch", "=", "tree_map", "(", "to_tensor", ",", "batch", ",", "np", ".", "ndarray", ")", "\n", "atom14_pred_positions", "=", "to_tensor", "(", "atom14_pred_positions", ")", "\n", "\n", "out", "=", "find_structural_violations", "(", "batch", ",", "atom14_pred_positions", ",", "**", "config", ")", "\n", "\n", "to_np", "=", "lambda", "x", ":", "np", ".", "array", "(", "x", ")", "\n", "np_out", "=", "tensor_tree_map", "(", "to_np", ",", "out", ")", "\n", "\n", "return", "np_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.extreme_ca_ca_distance_violations": [[1233, 1268], ["torch.sqrt", "torch.sqrt", "fastfold.utils.tensor_utils.masked_mean", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.masked_mean"], ["", "def", "extreme_ca_ca_distance_violations", "(", "\n", "pred_atom_positions", ":", "torch", ".", "Tensor", ",", "# (N, 37(14), 3)", "\n", "pred_atom_mask", ":", "torch", ".", "Tensor", ",", "# (N, 37(14))", "\n", "residue_index", ":", "torch", ".", "Tensor", ",", "# (N)", "\n", "max_angstrom_tolerance", "=", "1.5", ",", "\n", "eps", "=", "1e-6", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Counts residues whose Ca is a large distance from its neighbour.\n\n    Measures the fraction of CA-CA pairs between consecutive amino acids that are\n    more than 'max_angstrom_tolerance' apart.\n\n    Args:\n      pred_atom_positions: Atom positions in atom37/14 representation\n      pred_atom_mask: Atom mask in atom37/14 representation\n      residue_index: Residue index for given amino acid, this is assumed to be\n        monotonically increasing.\n      max_angstrom_tolerance: Maximum distance allowed to not count as violation.\n    Returns:\n      Fraction of consecutive CA-CA pairs with violation.\n    \"\"\"", "\n", "this_ca_pos", "=", "pred_atom_positions", "[", "...", ",", ":", "-", "1", ",", "1", ",", ":", "]", "\n", "this_ca_mask", "=", "pred_atom_mask", "[", "...", ",", ":", "-", "1", ",", "1", "]", "\n", "next_ca_pos", "=", "pred_atom_positions", "[", "...", ",", "1", ":", ",", "1", ",", ":", "]", "\n", "next_ca_mask", "=", "pred_atom_mask", "[", "...", ",", "1", ":", ",", "1", "]", "\n", "has_no_gap_mask", "=", "(", "residue_index", "[", "...", ",", "1", ":", "]", "-", "residue_index", "[", "...", ",", ":", "-", "1", "]", ")", "==", "1.0", "\n", "ca_ca_distance", "=", "torch", ".", "sqrt", "(", "\n", "eps", "+", "torch", ".", "sum", "(", "(", "this_ca_pos", "-", "next_ca_pos", ")", "**", "2", ",", "dim", "=", "-", "1", ")", "\n", ")", "\n", "violations", "=", "(", "\n", "ca_ca_distance", "-", "residue_constants", ".", "ca_ca", "\n", ")", ">", "max_angstrom_tolerance", "\n", "mask", "=", "this_ca_mask", "*", "next_ca_mask", "*", "has_no_gap_mask", "\n", "mean", "=", "masked_mean", "(", "mask", ",", "violations", ",", "-", "1", ")", "\n", "return", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_violation_metrics": [[1270, 1311], ["loss.extreme_ca_ca_distance_violations", "fastfold.utils.tensor_utils.masked_mean", "fastfold.utils.tensor_utils.masked_mean", "fastfold.utils.tensor_utils.masked_mean", "fastfold.utils.tensor_utils.masked_mean", "torch.max", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.extreme_ca_ca_distance_violations", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.masked_mean", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.masked_mean", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.masked_mean", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.masked_mean"], ["", "def", "compute_violation_metrics", "(", "\n", "batch", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "atom14_pred_positions", ":", "torch", ".", "Tensor", ",", "# (N, 14, 3)", "\n", "violations", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"Compute several metrics to assess the structural violations.\"\"\"", "\n", "ret", "=", "{", "}", "\n", "extreme_ca_ca_violations", "=", "extreme_ca_ca_distance_violations", "(", "\n", "pred_atom_positions", "=", "atom14_pred_positions", ",", "\n", "pred_atom_mask", "=", "batch", "[", "\"atom14_atom_exists\"", "]", ",", "\n", "residue_index", "=", "batch", "[", "\"residue_index\"", "]", ",", "\n", ")", "\n", "ret", "[", "\"violations_extreme_ca_ca_distance\"", "]", "=", "extreme_ca_ca_violations", "\n", "ret", "[", "\"violations_between_residue_bond\"", "]", "=", "masked_mean", "(", "\n", "batch", "[", "\"seq_mask\"", "]", ",", "\n", "violations", "[", "\"between_residues\"", "]", "[", "\n", "\"connections_per_residue_violation_mask\"", "\n", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "ret", "[", "\"violations_between_residue_clash\"", "]", "=", "masked_mean", "(", "\n", "mask", "=", "batch", "[", "\"seq_mask\"", "]", ",", "\n", "value", "=", "torch", ".", "max", "(", "\n", "violations", "[", "\"between_residues\"", "]", "[", "\"clashes_per_atom_clash_mask\"", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "[", "0", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "ret", "[", "\"violations_within_residue\"", "]", "=", "masked_mean", "(", "\n", "mask", "=", "batch", "[", "\"seq_mask\"", "]", ",", "\n", "value", "=", "torch", ".", "max", "(", "\n", "violations", "[", "\"within_residues\"", "]", "[", "\"per_atom_violations\"", "]", ",", "dim", "=", "-", "1", "\n", ")", "[", "0", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "ret", "[", "\"violations_per_residue\"", "]", "=", "masked_mean", "(", "\n", "mask", "=", "batch", "[", "\"seq_mask\"", "]", ",", "\n", "value", "=", "violations", "[", "\"total_per_residue_violations_mask\"", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_violation_metrics_np": [[1313, 1327], ["fastfold.utils.tensor_utils.tree_map", "to_tensor", "fastfold.utils.tensor_utils.tree_map", "loss.compute_violation_metrics", "fastfold.utils.tensor_utils.tree_map", "torch.tensor", "torch.tensor", "numpy.array"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.tree_map", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.tree_map", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_violation_metrics", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.tree_map"], ["", "def", "compute_violation_metrics_np", "(", "\n", "batch", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "\n", "atom14_pred_positions", ":", "np", ".", "ndarray", ",", "\n", "violations", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ",", "\n", ")", "->", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "to_tensor", "=", "lambda", "x", ":", "torch", ".", "tensor", "(", "x", ")", "\n", "batch", "=", "tree_map", "(", "to_tensor", ",", "batch", ",", "np", ".", "ndarray", ")", "\n", "atom14_pred_positions", "=", "to_tensor", "(", "atom14_pred_positions", ")", "\n", "violations", "=", "tree_map", "(", "to_tensor", ",", "violations", ",", "np", ".", "ndarray", ")", "\n", "\n", "out", "=", "compute_violation_metrics", "(", "batch", ",", "atom14_pred_positions", ",", "violations", ")", "\n", "\n", "to_np", "=", "lambda", "x", ":", "np", ".", "array", "(", "x", ")", "\n", "return", "tree_map", "(", "to_np", ",", "out", ",", "torch", ".", "Tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.violation_loss": [[1329, 1349], ["torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "violation_loss", "(", "\n", "violations", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "atom14_atom_exists", ":", "torch", ".", "Tensor", ",", "\n", "eps", "=", "1e-6", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "num_atoms", "=", "torch", ".", "sum", "(", "atom14_atom_exists", ")", "\n", "l_clash", "=", "torch", ".", "sum", "(", "\n", "violations", "[", "\"between_residues\"", "]", "[", "\"clashes_per_atom_loss_sum\"", "]", "\n", "+", "violations", "[", "\"within_residues\"", "]", "[", "\"per_atom_loss_sum\"", "]", "\n", ")", "\n", "l_clash", "=", "l_clash", "/", "(", "eps", "+", "num_atoms", ")", "\n", "loss", "=", "(", "\n", "violations", "[", "\"between_residues\"", "]", "[", "\"bonds_c_n_loss_mean\"", "]", "\n", "+", "violations", "[", "\"between_residues\"", "]", "[", "\"angles_ca_c_n_loss_mean\"", "]", "\n", "+", "violations", "[", "\"between_residues\"", "]", "[", "\"angles_c_n_ca_loss_mean\"", "]", "\n", "+", "l_clash", "\n", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_renamed_ground_truth": [[1351, 1456], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "compute_renamed_ground_truth", "(", "\n", "batch", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "atom14_pred_positions", ":", "torch", ".", "Tensor", ",", "\n", "eps", "=", "1e-10", ",", "\n", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"\n    Find optimal renaming of ground truth based on the predicted positions.\n\n    Alg. 26 \"renameSymmetricGroundTruthAtoms\"\n\n    This renamed ground truth is then used for all losses,\n    such that each loss moves the atoms in the same direction.\n\n    Args:\n      batch: Dictionary containing:\n        * atom14_gt_positions: Ground truth positions.\n        * atom14_alt_gt_positions: Ground truth positions with renaming swaps.\n        * atom14_atom_is_ambiguous: 1.0 for atoms that are affected by\n            renaming swaps.\n        * atom14_gt_exists: Mask for which atoms exist in ground truth.\n        * atom14_alt_gt_exists: Mask for which atoms exist in ground truth\n            after renaming.\n        * atom14_atom_exists: Mask for whether each atom is part of the given\n            amino acid type.\n      atom14_pred_positions: Array of atom positions in global frame with shape\n    Returns:\n      Dictionary containing:\n        alt_naming_is_better: Array with 1.0 where alternative swap is better.\n        renamed_atom14_gt_positions: Array of optimal ground truth positions\n          after renaming swaps are performed.\n        renamed_atom14_gt_exists: Mask after renaming swap is performed.\n    \"\"\"", "\n", "\n", "pred_dists", "=", "torch", ".", "sqrt", "(", "\n", "eps", "\n", "+", "torch", ".", "sum", "(", "\n", "(", "\n", "atom14_pred_positions", "[", "...", ",", "None", ",", ":", ",", "None", ",", ":", "]", "\n", "-", "atom14_pred_positions", "[", "...", ",", "None", ",", ":", ",", "None", ",", ":", ",", ":", "]", "\n", ")", "\n", "**", "2", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "atom14_gt_positions", "=", "batch", "[", "\"atom14_gt_positions\"", "]", "\n", "gt_dists", "=", "torch", ".", "sqrt", "(", "\n", "eps", "\n", "+", "torch", ".", "sum", "(", "\n", "(", "\n", "atom14_gt_positions", "[", "...", ",", "None", ",", ":", ",", "None", ",", ":", "]", "\n", "-", "atom14_gt_positions", "[", "...", ",", "None", ",", ":", ",", "None", ",", ":", ",", ":", "]", "\n", ")", "\n", "**", "2", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "atom14_alt_gt_positions", "=", "batch", "[", "\"atom14_alt_gt_positions\"", "]", "\n", "alt_gt_dists", "=", "torch", ".", "sqrt", "(", "\n", "eps", "\n", "+", "torch", ".", "sum", "(", "\n", "(", "\n", "atom14_alt_gt_positions", "[", "...", ",", "None", ",", ":", ",", "None", ",", ":", "]", "\n", "-", "atom14_alt_gt_positions", "[", "...", ",", "None", ",", ":", ",", "None", ",", ":", ",", ":", "]", "\n", ")", "\n", "**", "2", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "lddt", "=", "torch", ".", "sqrt", "(", "eps", "+", "(", "pred_dists", "-", "gt_dists", ")", "**", "2", ")", "\n", "alt_lddt", "=", "torch", ".", "sqrt", "(", "eps", "+", "(", "pred_dists", "-", "alt_gt_dists", ")", "**", "2", ")", "\n", "\n", "atom14_gt_exists", "=", "batch", "[", "\"atom14_gt_exists\"", "]", "\n", "atom14_atom_is_ambiguous", "=", "batch", "[", "\"atom14_atom_is_ambiguous\"", "]", "\n", "mask", "=", "(", "\n", "atom14_gt_exists", "[", "...", ",", "None", ",", ":", ",", "None", "]", "\n", "*", "atom14_atom_is_ambiguous", "[", "...", ",", "None", ",", ":", ",", "None", "]", "\n", "*", "atom14_gt_exists", "[", "...", ",", "None", ",", ":", ",", "None", ",", ":", "]", "\n", "*", "(", "1.0", "-", "atom14_atom_is_ambiguous", "[", "...", ",", "None", ",", ":", ",", "None", ",", ":", "]", ")", "\n", ")", "\n", "\n", "per_res_lddt", "=", "torch", ".", "sum", "(", "mask", "*", "lddt", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ",", "-", "3", ")", ")", "\n", "alt_per_res_lddt", "=", "torch", ".", "sum", "(", "mask", "*", "alt_lddt", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ",", "-", "3", ")", ")", "\n", "\n", "fp_type", "=", "atom14_pred_positions", ".", "dtype", "\n", "alt_naming_is_better", "=", "(", "alt_per_res_lddt", "<", "per_res_lddt", ")", ".", "type", "(", "fp_type", ")", "\n", "\n", "renamed_atom14_gt_positions", "=", "(", "\n", "1.0", "-", "alt_naming_is_better", "[", "...", ",", "None", ",", "None", "]", "\n", ")", "*", "atom14_gt_positions", "+", "alt_naming_is_better", "[", "\n", "...", ",", "None", ",", "None", "\n", "]", "*", "atom14_alt_gt_positions", "\n", "\n", "renamed_atom14_gt_mask", "=", "(", "\n", "1.0", "-", "alt_naming_is_better", "[", "...", ",", "None", "]", "\n", ")", "*", "atom14_gt_exists", "+", "alt_naming_is_better", "[", "...", ",", "None", "]", "*", "batch", "[", "\n", "\"atom14_alt_gt_exists\"", "\n", "]", "\n", "\n", "return", "{", "\n", "\"alt_naming_is_better\"", ":", "alt_naming_is_better", ",", "\n", "\"renamed_atom14_gt_positions\"", ":", "renamed_atom14_gt_positions", ",", "\n", "\"renamed_atom14_gt_exists\"", ":", "renamed_atom14_gt_mask", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.experimentally_resolved_loss": [[1459, 1481], ["loss.sigmoid_cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.sigmoid_cross_entropy"], ["", "def", "experimentally_resolved_loss", "(", "\n", "logits", ":", "torch", ".", "Tensor", ",", "\n", "atom37_atom_exists", ":", "torch", ".", "Tensor", ",", "\n", "all_atom_mask", ":", "torch", ".", "Tensor", ",", "\n", "resolution", ":", "torch", ".", "Tensor", ",", "\n", "min_resolution", ":", "float", ",", "\n", "max_resolution", ":", "float", ",", "\n", "eps", ":", "float", "=", "1e-8", ",", "\n", "**", "kwargs", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "errors", "=", "sigmoid_cross_entropy", "(", "logits", ",", "all_atom_mask", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "errors", "*", "atom37_atom_exists", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "loss", "/", "(", "eps", "+", "torch", ".", "sum", "(", "atom37_atom_exists", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "-", "1", ")", "\n", "\n", "loss", "=", "loss", "*", "(", "\n", "(", "resolution", ">=", "min_resolution", ")", "&", "(", "resolution", "<=", "max_resolution", ")", "\n", ")", "\n", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.masked_msa_loss": [[1483, 1514], ["loss.softmax_cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.softmax_cross_entropy", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot"], ["", "def", "masked_msa_loss", "(", "logits", ",", "true_msa", ",", "bert_mask", ",", "eps", "=", "1e-8", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Computes BERT-style masked MSA loss. Implements subsection 1.9.9.\n\n    Args:\n        logits: [*, N_seq, N_res, 23] predicted residue distribution\n        true_msa: [*, N_seq, N_res] true MSA\n        bert_mask: [*, N_seq, N_res] MSA mask\n    Returns:\n        Masked MSA loss\n    \"\"\"", "\n", "errors", "=", "softmax_cross_entropy", "(", "\n", "logits", ",", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "true_msa", ",", "num_classes", "=", "23", ")", "\n", ")", "\n", "\n", "# FP16-friendly averaging. Equivalent to:", "\n", "# loss = (", "\n", "#     torch.sum(errors * bert_mask, dim=(-1, -2)) /", "\n", "#     (eps + torch.sum(bert_mask, dim=(-1, -2)))", "\n", "# )", "\n", "loss", "=", "errors", "*", "bert_mask", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "-", "1", ")", "\n", "scale", "=", "0.5", "\n", "denom", "=", "eps", "+", "torch", ".", "sum", "(", "scale", "*", "bert_mask", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "loss", "=", "loss", "/", "denom", "[", "...", ",", "None", "]", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "-", "1", ")", "\n", "loss", "=", "loss", "*", "scale", "\n", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_drmsd": [[1516, 1538], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "compute_drmsd", "(", "structure_1", ",", "structure_2", ",", "mask", "=", "None", ")", ":", "\n", "    ", "if", "(", "mask", "is", "not", "None", ")", ":", "\n", "        ", "structure_1", "=", "structure_1", "*", "mask", "[", "...", ",", "None", "]", "\n", "structure_2", "=", "structure_2", "*", "mask", "[", "...", ",", "None", "]", "\n", "\n", "", "d1", "=", "structure_1", "[", "...", ",", ":", ",", "None", ",", ":", "]", "-", "structure_1", "[", "...", ",", "None", ",", ":", ",", ":", "]", "\n", "d2", "=", "structure_2", "[", "...", ",", ":", ",", "None", ",", ":", "]", "-", "structure_2", "[", "...", ",", "None", ",", ":", ",", ":", "]", "\n", "\n", "d1", "=", "d1", "**", "2", "\n", "d2", "=", "d2", "**", "2", "\n", "\n", "d1", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "d1", ",", "dim", "=", "-", "1", ")", ")", "\n", "d2", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "d2", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "drmsd", "=", "d1", "-", "d2", "\n", "drmsd", "=", "drmsd", "**", "2", "\n", "drmsd", "=", "torch", ".", "sum", "(", "drmsd", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "n", "=", "d1", ".", "shape", "[", "-", "1", "]", "if", "mask", "is", "None", "else", "torch", ".", "sum", "(", "mask", ",", "dim", "=", "-", "1", ")", "\n", "drmsd", "=", "drmsd", "*", "(", "1", "/", "(", "n", "*", "(", "n", "-", "1", ")", ")", ")", "if", "n", ">", "1", "else", "(", "drmsd", "*", "0.", ")", "\n", "drmsd", "=", "torch", ".", "sqrt", "(", "drmsd", ")", "\n", "\n", "return", "drmsd", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_drmsd_np": [[1540, 1547], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "loss.compute_drmsd", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_drmsd"], ["", "def", "compute_drmsd_np", "(", "structure_1", ",", "structure_2", ",", "mask", "=", "None", ")", ":", "\n", "    ", "structure_1", "=", "torch", ".", "tensor", "(", "structure_1", ")", "\n", "structure_2", "=", "torch", ".", "tensor", "(", "structure_2", ")", "\n", "if", "(", "mask", "is", "not", "None", ")", ":", "\n", "        ", "mask", "=", "torch", ".", "tensor", "(", "mask", ")", "\n", "\n", "", "return", "compute_drmsd", "(", "structure_1", ",", "structure_2", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.outer_product_mean.OuterProductMean.__init__": [[31, 52], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_m", ",", "c_z", ",", "c_hidden", ",", "eps", "=", "1e-3", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_m:\n                MSA embedding channel dimension\n            c_z:\n                Pair embedding channel dimension\n            c_hidden:\n                Hidden channel dimension\n        \"\"\"", "\n", "super", "(", "OuterProductMean", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_m", "=", "c_m", "\n", "self", ".", "c_z", "=", "c_z", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "c_m", ")", "\n", "self", ".", "linear_1", "=", "Linear", "(", "c_m", ",", "c_hidden", ")", "\n", "self", ".", "linear_2", "=", "Linear", "(", "c_m", ",", "c_hidden", ")", "\n", "self", ".", "linear_out", "=", "Linear", "(", "c_hidden", "**", "2", ",", "c_z", ",", "init", "=", "\"final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.outer_product_mean.OuterProductMean._opm": [[53, 64], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "outer_product_mean.OuterProductMean.reshape", "outer_product_mean.OuterProductMean.linear_out"], "methods", ["None"], ["", "def", "_opm", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "# [*, N_res, N_res, C, C]", "\n", "        ", "outer", "=", "torch", ".", "einsum", "(", "\"...bac,...dae->...bdce\"", ",", "a", ",", "b", ")", "\n", "\n", "# [*, N_res, N_res, C * C]", "\n", "outer", "=", "outer", ".", "reshape", "(", "outer", ".", "shape", "[", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", "\n", "\n", "# [*, N_res, N_res, C_z]", "\n", "outer", "=", "self", ".", "linear_out", "(", "outer", ")", "\n", "\n", "return", "outer", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.outer_product_mean.OuterProductMean._chunk": [[65, 89], ["a.reshape", "b.reshape", "zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "fastfold.utils.tensor_utils.chunk_layer.reshape", "fastfold.utils.tensor_utils.chunk_layer", "out.append", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.chunk_layer"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_chunk", "(", "self", ",", "\n", "a", ":", "torch", ".", "Tensor", ",", "\n", "b", ":", "torch", ".", "Tensor", ",", "\n", "chunk_size", ":", "int", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "# Since the \"batch dim\" in this case is not a true batch dimension", "\n", "# (in that the shape of the output depends on it), we need to", "\n", "# iterate over it ourselves", "\n", "        ", "a_reshape", "=", "a", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "a", ".", "shape", "[", "-", "3", ":", "]", ")", "\n", "b_reshape", "=", "b", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "b", ".", "shape", "[", "-", "3", ":", "]", ")", "\n", "out", "=", "[", "]", "\n", "for", "a_prime", ",", "b_prime", "in", "zip", "(", "a_reshape", ",", "b_reshape", ")", ":", "\n", "            ", "outer", "=", "chunk_layer", "(", "\n", "partial", "(", "self", ".", "_opm", ",", "b", "=", "b_prime", ")", ",", "\n", "{", "\"a\"", ":", "a_prime", "}", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "no_batch_dims", "=", "1", ",", "\n", ")", "\n", "out", ".", "append", "(", "outer", ")", "\n", "", "outer", "=", "torch", ".", "stack", "(", "out", ",", "dim", "=", "0", ")", "\n", "outer", "=", "outer", ".", "reshape", "(", "a", ".", "shape", "[", ":", "-", "3", "]", "+", "outer", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n", "return", "outer", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.outer_product_mean.OuterProductMean.forward": [[90, 130], ["outer_product_mean.OuterProductMean.layer_norm", "outer_product_mean.OuterProductMean.new_ones.unsqueeze", "a.transpose.transpose.transpose", "b.transpose.transpose.transpose", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "outer_product_mean.OuterProductMean.new_ones", "outer_product_mean.OuterProductMean.linear_1", "outer_product_mean.OuterProductMean.linear_2", "outer_product_mean.OuterProductMean._chunk", "outer_product_mean.OuterProductMean._opm"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_attention.TriangleAttention._chunk", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.outer_product_mean.OuterProductMean._opm"], ["", "def", "forward", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            m:\n                [*, N_seq, N_res, C_m] MSA embedding\n            mask:\n                [*, N_seq, N_res] MSA mask\n        Returns:\n            [*, N_res, N_res, C_z] pair embedding update\n        \"\"\"", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "m", ".", "new_ones", "(", "m", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "# [*, N_seq, N_res, C_m]", "\n", "", "m", "=", "self", ".", "layer_norm", "(", "m", ")", "\n", "\n", "# [*, N_seq, N_res, C]", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "a", "=", "self", ".", "linear_1", "(", "m", ")", "*", "mask", "\n", "b", "=", "self", ".", "linear_2", "(", "m", ")", "*", "mask", "\n", "\n", "a", "=", "a", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "b", "=", "b", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "\n", "if", "chunk_size", "is", "not", "None", ":", "\n", "            ", "outer", "=", "self", ".", "_chunk", "(", "a", ",", "b", ",", "chunk_size", ")", "\n", "", "else", ":", "\n", "            ", "outer", "=", "self", ".", "_opm", "(", "a", ",", "b", ")", "\n", "\n", "# [*, N_res, N_res, 1]", "\n", "", "norm", "=", "torch", ".", "einsum", "(", "\"...abc,...adc->...bdc\"", ",", "mask", ",", "mask", ")", "\n", "\n", "# [*, N_res, N_res, C_z]", "\n", "outer", "=", "outer", "/", "(", "self", ".", "eps", "+", "norm", ")", "\n", "\n", "return", "outer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.MSATransition.__init__": [[49, 67], ["torch.Module.__init__", "fastfold.model.nn.primitives.LayerNorm", "fastfold.model.nn.primitives.Linear", "torch.ReLU", "torch.ReLU", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_m", ",", "n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_m:\n                MSA channel dimension\n            n:\n                Factor multiplied to c_m to obtain the hidden channel\n                dimension\n        \"\"\"", "\n", "super", "(", "MSATransition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_m", "=", "c_m", "\n", "self", ".", "n", "=", "n", "\n", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "self", ".", "c_m", ")", "\n", "self", ".", "linear_1", "=", "Linear", "(", "self", ".", "c_m", ",", "self", ".", "n", "*", "self", ".", "c_m", ",", "init", "=", "\"relu\"", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "linear_2", "=", "Linear", "(", "self", ".", "n", "*", "self", ".", "c_m", ",", "self", ".", "c_m", ",", "init", "=", "\"final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.MSATransition._transition": [[68, 73], ["evoformer.MSATransition.linear_1", "evoformer.MSATransition.relu", "evoformer.MSATransition.linear_2"], "methods", ["None"], ["", "def", "_transition", "(", "self", ",", "m", ",", "mask", ")", ":", "\n", "        ", "m", "=", "self", ".", "linear_1", "(", "m", ")", "\n", "m", "=", "self", ".", "relu", "(", "m", ")", "\n", "m", "=", "self", ".", "linear_2", "(", "m", ")", "*", "mask", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.MSATransition._chunk": [[74, 85], ["fastfold.utils.tensor_utils.chunk_layer", "len"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.chunk_layer"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_chunk", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", "chunk_size", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "         ", "return", "chunk_layer", "(", "\n", "self", ".", "_transition", ",", "\n", "{", "\"m\"", ":", "m", ",", "\"mask\"", ":", "mask", "}", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "no_batch_dims", "=", "len", "(", "m", ".", "shape", "[", ":", "-", "2", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.MSATransition.forward": [[88, 118], ["evoformer.MSATransition.new_ones.unsqueeze", "evoformer.MSATransition.layer_norm", "evoformer.MSATransition.new_ones", "evoformer.MSATransition._chunk", "evoformer.MSATransition._transition"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_attention.TriangleAttention._chunk", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.pair_transition.PairTransition._transition"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            m:\n                [*, N_seq, N_res, C_m] MSA activation\n            mask:\n                [*, N_seq, N_res, C_m] MSA mask\n        Returns:\n            m:\n                [*, N_seq, N_res, C_m] MSA activation update\n        \"\"\"", "\n", "# DISCREPANCY: DeepMind forgets to apply the MSA mask here.", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "m", ".", "new_ones", "(", "m", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "", "mask", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "m", "=", "self", ".", "layer_norm", "(", "m", ")", "\n", "\n", "if", "chunk_size", "is", "not", "None", ":", "\n", "            ", "m", "=", "self", ".", "_chunk", "(", "m", ",", "mask", ",", "chunk_size", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "self", ".", "_transition", "(", "m", ",", "mask", ")", "\n", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.EvoformerBlockCore.__init__": [[121, 178], ["torch.Module.__init__", "evoformer.MSATransition", "fastfold.model.nn.outer_product_mean.OuterProductMean", "fastfold.model.nn.triangular_multiplicative_update.TriangleMultiplicationOutgoing", "fastfold.model.nn.triangular_multiplicative_update.TriangleMultiplicationIncoming", "fastfold.model.nn.triangular_attention.TriangleAttentionStartingNode", "fastfold.model.nn.triangular_attention.TriangleAttentionEndingNode", "fastfold.model.nn.pair_transition.PairTransition", "fastfold.model.nn.dropout.DropoutRowwise", "fastfold.model.nn.dropout.DropoutColumnwise"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "c_m", ":", "int", ",", "\n", "c_z", ":", "int", ",", "\n", "c_hidden_opm", ":", "int", ",", "\n", "c_hidden_mul", ":", "int", ",", "\n", "c_hidden_pair_att", ":", "int", ",", "\n", "no_heads_msa", ":", "int", ",", "\n", "no_heads_pair", ":", "int", ",", "\n", "transition_n", ":", "int", ",", "\n", "pair_dropout", ":", "float", ",", "\n", "inf", ":", "float", ",", "\n", "eps", ":", "float", ",", "\n", "_is_extra_msa_stack", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "EvoformerBlockCore", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "msa_transition", "=", "MSATransition", "(", "\n", "c_m", "=", "c_m", ",", "\n", "n", "=", "transition_n", ",", "\n", ")", "\n", "\n", "self", ".", "outer_product_mean", "=", "OuterProductMean", "(", "\n", "c_m", ",", "\n", "c_z", ",", "\n", "c_hidden_opm", ",", "\n", ")", "\n", "\n", "self", ".", "tri_mul_out", "=", "TriangleMultiplicationOutgoing", "(", "\n", "c_z", ",", "\n", "c_hidden_mul", ",", "\n", ")", "\n", "self", ".", "tri_mul_in", "=", "TriangleMultiplicationIncoming", "(", "\n", "c_z", ",", "\n", "c_hidden_mul", ",", "\n", ")", "\n", "\n", "self", ".", "tri_att_start", "=", "TriangleAttentionStartingNode", "(", "\n", "c_z", ",", "\n", "c_hidden_pair_att", ",", "\n", "no_heads_pair", ",", "\n", "inf", "=", "inf", ",", "\n", ")", "\n", "self", ".", "tri_att_end", "=", "TriangleAttentionEndingNode", "(", "\n", "c_z", ",", "\n", "c_hidden_pair_att", ",", "\n", "no_heads_pair", ",", "\n", "inf", "=", "inf", ",", "\n", ")", "\n", "\n", "self", ".", "pair_transition", "=", "PairTransition", "(", "\n", "c_z", ",", "\n", "transition_n", ",", "\n", ")", "\n", "\n", "self", ".", "ps_dropout_row_layer", "=", "DropoutRowwise", "(", "pair_dropout", ")", "\n", "self", ".", "ps_dropout_col_layer", "=", "DropoutColumnwise", "(", "pair_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.EvoformerBlockCore.forward": [[179, 213], ["evoformer.EvoformerBlockCore.msa_transition", "evoformer.EvoformerBlockCore.outer_product_mean", "evoformer.EvoformerBlockCore.ps_dropout_row_layer", "evoformer.EvoformerBlockCore.ps_dropout_row_layer", "evoformer.EvoformerBlockCore.ps_dropout_row_layer", "evoformer.EvoformerBlockCore.ps_dropout_col_layer", "evoformer.EvoformerBlockCore.pair_transition", "evoformer.EvoformerBlockCore.tri_mul_out", "evoformer.EvoformerBlockCore.tri_mul_in", "evoformer.EvoformerBlockCore.tri_att_start", "evoformer.EvoformerBlockCore.tri_att_end"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "msa_mask", ":", "torch", ".", "Tensor", ",", "\n", "pair_mask", ":", "torch", ".", "Tensor", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "_mask_trans", ":", "bool", "=", "True", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# DeepMind doesn't mask these transitions in the source, so _mask_trans", "\n", "# should be disabled to better approximate the exact activations of", "\n", "# the original.", "\n", "        ", "msa_trans_mask", "=", "msa_mask", "if", "_mask_trans", "else", "None", "\n", "pair_trans_mask", "=", "pair_mask", "if", "_mask_trans", "else", "None", "\n", "\n", "m", "=", "m", "+", "self", ".", "msa_transition", "(", "\n", "m", ",", "mask", "=", "msa_trans_mask", ",", "chunk_size", "=", "chunk_size", "\n", ")", "\n", "z", "=", "z", "+", "self", ".", "outer_product_mean", "(", "\n", "m", ",", "mask", "=", "msa_mask", ",", "chunk_size", "=", "chunk_size", "\n", ")", "\n", "z", "=", "z", "+", "self", ".", "ps_dropout_row_layer", "(", "self", ".", "tri_mul_out", "(", "z", ",", "mask", "=", "pair_mask", ")", ")", "\n", "z", "=", "z", "+", "self", ".", "ps_dropout_row_layer", "(", "self", ".", "tri_mul_in", "(", "z", ",", "mask", "=", "pair_mask", ")", ")", "\n", "z", "=", "z", "+", "self", ".", "ps_dropout_row_layer", "(", "\n", "self", ".", "tri_att_start", "(", "z", ",", "mask", "=", "pair_mask", ",", "chunk_size", "=", "chunk_size", ")", "\n", ")", "\n", "z", "=", "z", "+", "self", ".", "ps_dropout_col_layer", "(", "\n", "self", ".", "tri_att_end", "(", "z", ",", "mask", "=", "pair_mask", ",", "chunk_size", "=", "chunk_size", ")", "\n", ")", "\n", "z", "=", "z", "+", "self", ".", "pair_transition", "(", "\n", "z", ",", "mask", "=", "pair_trans_mask", ",", "chunk_size", "=", "chunk_size", "\n", ")", "\n", "\n", "return", "m", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.EvoformerBlock.__init__": [[216, 262], ["torch.Module.__init__", "fastfold.model.nn.msa.MSARowAttentionWithPairBias", "fastfold.model.nn.msa.MSAColumnAttention", "fastfold.model.nn.dropout.DropoutRowwise", "evoformer.EvoformerBlockCore"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "c_m", ":", "int", ",", "\n", "c_z", ":", "int", ",", "\n", "c_hidden_msa_att", ":", "int", ",", "\n", "c_hidden_opm", ":", "int", ",", "\n", "c_hidden_mul", ":", "int", ",", "\n", "c_hidden_pair_att", ":", "int", ",", "\n", "no_heads_msa", ":", "int", ",", "\n", "no_heads_pair", ":", "int", ",", "\n", "transition_n", ":", "int", ",", "\n", "msa_dropout", ":", "float", ",", "\n", "pair_dropout", ":", "float", ",", "\n", "inf", ":", "float", ",", "\n", "eps", ":", "float", ",", "\n", ")", ":", "\n", "        ", "super", "(", "EvoformerBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "msa_att_row", "=", "MSARowAttentionWithPairBias", "(", "\n", "c_m", "=", "c_m", ",", "\n", "c_z", "=", "c_z", ",", "\n", "c_hidden", "=", "c_hidden_msa_att", ",", "\n", "no_heads", "=", "no_heads_msa", ",", "\n", "inf", "=", "inf", ",", "\n", ")", "\n", "\n", "self", ".", "msa_att_col", "=", "MSAColumnAttention", "(", "\n", "c_m", ",", "\n", "c_hidden_msa_att", ",", "\n", "no_heads_msa", ",", "\n", "inf", "=", "inf", ",", "\n", ")", "\n", "\n", "self", ".", "msa_dropout_layer", "=", "DropoutRowwise", "(", "msa_dropout", ")", "\n", "\n", "self", ".", "core", "=", "EvoformerBlockCore", "(", "\n", "c_m", "=", "c_m", ",", "\n", "c_z", "=", "c_z", ",", "\n", "c_hidden_opm", "=", "c_hidden_opm", ",", "\n", "c_hidden_mul", "=", "c_hidden_mul", ",", "\n", "c_hidden_pair_att", "=", "c_hidden_pair_att", ",", "\n", "no_heads_msa", "=", "no_heads_msa", ",", "\n", "no_heads_pair", "=", "no_heads_pair", ",", "\n", "transition_n", "=", "transition_n", ",", "\n", "pair_dropout", "=", "pair_dropout", ",", "\n", "inf", "=", "inf", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.EvoformerBlock.forward": [[264, 286], ["evoformer.EvoformerBlock.core", "evoformer.EvoformerBlock.msa_dropout_layer", "evoformer.EvoformerBlock.msa_att_col", "evoformer.EvoformerBlock.msa_att_row"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "msa_mask", ":", "torch", ".", "Tensor", ",", "\n", "pair_mask", ":", "torch", ".", "Tensor", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "_mask_trans", ":", "bool", "=", "True", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "m", "=", "m", "+", "self", ".", "msa_dropout_layer", "(", "\n", "self", ".", "msa_att_row", "(", "m", ",", "z", "=", "z", ",", "mask", "=", "msa_mask", ",", "chunk_size", "=", "chunk_size", ")", "\n", ")", "\n", "m", "=", "m", "+", "self", ".", "msa_att_col", "(", "m", ",", "mask", "=", "msa_mask", ",", "chunk_size", "=", "chunk_size", ")", "\n", "m", ",", "z", "=", "self", ".", "core", "(", "\n", "m", ",", "\n", "z", ",", "\n", "msa_mask", "=", "msa_mask", ",", "\n", "pair_mask", "=", "pair_mask", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "_mask_trans", "=", "_mask_trans", ",", "\n", ")", "\n", "\n", "return", "m", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.ExtraMSABlock.__init__": [[295, 345], ["torch.Module.__init__", "fastfold.model.nn.msa.MSARowAttentionWithPairBias", "fastfold.model.nn.msa.MSAColumnGlobalAttention", "fastfold.model.nn.dropout.DropoutRowwise", "evoformer.EvoformerBlockCore"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "\n", "c_m", ":", "int", ",", "\n", "c_z", ":", "int", ",", "\n", "c_hidden_msa_att", ":", "int", ",", "\n", "c_hidden_opm", ":", "int", ",", "\n", "c_hidden_mul", ":", "int", ",", "\n", "c_hidden_pair_att", ":", "int", ",", "\n", "no_heads_msa", ":", "int", ",", "\n", "no_heads_pair", ":", "int", ",", "\n", "transition_n", ":", "int", ",", "\n", "msa_dropout", ":", "float", ",", "\n", "pair_dropout", ":", "float", ",", "\n", "inf", ":", "float", ",", "\n", "eps", ":", "float", ",", "\n", "ckpt", ":", "bool", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ExtraMSABlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ckpt", "=", "ckpt", "\n", "\n", "self", ".", "msa_att_row", "=", "MSARowAttentionWithPairBias", "(", "\n", "c_m", "=", "c_m", ",", "\n", "c_z", "=", "c_z", ",", "\n", "c_hidden", "=", "c_hidden_msa_att", ",", "\n", "no_heads", "=", "no_heads_msa", ",", "\n", "inf", "=", "inf", ",", "\n", ")", "\n", "\n", "self", ".", "msa_att_col", "=", "MSAColumnGlobalAttention", "(", "\n", "c_in", "=", "c_m", ",", "\n", "c_hidden", "=", "c_hidden_msa_att", ",", "\n", "no_heads", "=", "no_heads_msa", ",", "\n", "inf", "=", "inf", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n", "\n", "self", ".", "msa_dropout_layer", "=", "DropoutRowwise", "(", "msa_dropout", ")", "\n", "\n", "self", ".", "core", "=", "EvoformerBlockCore", "(", "\n", "c_m", "=", "c_m", ",", "\n", "c_z", "=", "c_z", ",", "\n", "c_hidden_opm", "=", "c_hidden_opm", ",", "\n", "c_hidden_mul", "=", "c_hidden_mul", ",", "\n", "c_hidden_pair_att", "=", "c_hidden_pair_att", ",", "\n", "no_heads_msa", "=", "no_heads_msa", ",", "\n", "no_heads_pair", "=", "no_heads_pair", ",", "\n", "transition_n", "=", "transition_n", ",", "\n", "pair_dropout", "=", "pair_dropout", ",", "\n", "inf", "=", "inf", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.ExtraMSABlock.forward": [[347, 382], ["evoformer.ExtraMSABlock.msa_dropout_layer", "evoformer.ExtraMSABlock.core", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "fastfold.utils.checkpointing.get_checkpoint_fn", "fastfold.utils.checkpointing.get_checkpoint_fn.", "evoformer.ExtraMSABlock.forward.fn"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.checkpointing.get_checkpoint_fn"], ["", "def", "forward", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "msa_mask", ":", "torch", ".", "Tensor", ",", "\n", "pair_mask", ":", "torch", ".", "Tensor", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "_chunk_logits", ":", "Optional", "[", "int", "]", "=", "1024", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "m", "=", "m", "+", "self", ".", "msa_dropout_layer", "(", "\n", "self", ".", "msa_att_row", "(", "\n", "m", ".", "clone", "(", ")", ",", "\n", "z", "=", "z", ".", "clone", "(", ")", ",", "\n", "mask", "=", "msa_mask", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "_chunk_logits", "=", "_chunk_logits", "if", "torch", ".", "is_grad_enabled", "(", ")", "else", "None", ",", "\n", "_checkpoint_chunks", "=", "\n", "self", ".", "ckpt", "if", "torch", ".", "is_grad_enabled", "(", ")", "else", "False", ",", "\n", ")", "\n", ")", "\n", "\n", "def", "fn", "(", "m", ",", "z", ")", ":", "\n", "            ", "m", "=", "m", "+", "self", ".", "msa_att_col", "(", "m", ",", "mask", "=", "msa_mask", ",", "chunk_size", "=", "chunk_size", ")", "\n", "m", ",", "z", "=", "self", ".", "core", "(", "\n", "m", ",", "z", ",", "msa_mask", "=", "msa_mask", ",", "pair_mask", "=", "pair_mask", ",", "chunk_size", "=", "chunk_size", "\n", ")", "\n", "\n", "return", "m", ",", "z", "\n", "\n", "", "if", "(", "torch", ".", "is_grad_enabled", "(", ")", "and", "self", ".", "ckpt", ")", ":", "\n", "            ", "checkpoint_fn", "=", "get_checkpoint_fn", "(", ")", "\n", "m", ",", "z", "=", "checkpoint_fn", "(", "fn", ",", "m", ",", "z", ")", "\n", "", "else", ":", "\n", "            ", "m", ",", "z", "=", "fn", "(", "m", ",", "z", ")", "\n", "\n", "", "return", "m", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.EvoformerStack.__init__": [[391, 473], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "fastfold.model.nn.primitives.Linear", "evoformer.EvoformerBlock", "evoformer.EvoformerStack.blocks.append"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "c_m", ":", "int", ",", "\n", "c_z", ":", "int", ",", "\n", "c_hidden_msa_att", ":", "int", ",", "\n", "c_hidden_opm", ":", "int", ",", "\n", "c_hidden_mul", ":", "int", ",", "\n", "c_hidden_pair_att", ":", "int", ",", "\n", "c_s", ":", "int", ",", "\n", "no_heads_msa", ":", "int", ",", "\n", "no_heads_pair", ":", "int", ",", "\n", "no_blocks", ":", "int", ",", "\n", "transition_n", ":", "int", ",", "\n", "msa_dropout", ":", "float", ",", "\n", "pair_dropout", ":", "float", ",", "\n", "blocks_per_ckpt", ":", "int", ",", "\n", "inf", ":", "float", ",", "\n", "eps", ":", "float", ",", "\n", "clear_cache_between_blocks", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_m:\n                MSA channel dimension\n            c_z:\n                Pair channel dimension\n            c_hidden_msa_att:\n                Hidden dimension in MSA attention\n            c_hidden_opm:\n                Hidden dimension in outer product mean module\n            c_hidden_mul:\n                Hidden dimension in multiplicative updates\n            c_hidden_pair_att:\n                Hidden dimension in triangular attention\n            c_s:\n                Channel dimension of the output \"single\" embedding\n            no_heads_msa:\n                Number of heads used for MSA attention\n            no_heads_pair:\n                Number of heads used for pair attention\n            no_blocks:\n                Number of Evoformer blocks in the stack\n            transition_n:\n                Factor by which to multiply c_m to obtain the MSATransition\n                hidden dimension\n            msa_dropout:\n                Dropout rate for MSA activations\n            pair_dropout:\n                Dropout used for pair activations\n            blocks_per_ckpt:\n                Number of Evoformer blocks in each activation checkpoint\n            clear_cache_between_blocks:\n                Whether to clear CUDA's GPU memory cache between blocks of the\n                stack. Slows down each block but can reduce fragmentation\n        \"\"\"", "\n", "super", "(", "EvoformerStack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "blocks_per_ckpt", "=", "blocks_per_ckpt", "\n", "self", ".", "clear_cache_between_blocks", "=", "clear_cache_between_blocks", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "no_blocks", ")", ":", "\n", "            ", "block", "=", "EvoformerBlock", "(", "\n", "c_m", "=", "c_m", ",", "\n", "c_z", "=", "c_z", ",", "\n", "c_hidden_msa_att", "=", "c_hidden_msa_att", ",", "\n", "c_hidden_opm", "=", "c_hidden_opm", ",", "\n", "c_hidden_mul", "=", "c_hidden_mul", ",", "\n", "c_hidden_pair_att", "=", "c_hidden_pair_att", ",", "\n", "no_heads_msa", "=", "no_heads_msa", ",", "\n", "no_heads_pair", "=", "no_heads_pair", ",", "\n", "transition_n", "=", "transition_n", ",", "\n", "msa_dropout", "=", "msa_dropout", ",", "\n", "pair_dropout", "=", "pair_dropout", ",", "\n", "inf", "=", "inf", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n", "self", ".", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "self", ".", "linear", "=", "Linear", "(", "c_m", ",", "c_s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.EvoformerStack.forward": [[474, 527], ["fastfold.utils.checkpointing.checkpoint_blocks", "evoformer.EvoformerStack.linear", "functools.partial", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "block", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.checkpointing.checkpoint_blocks"], ["", "def", "forward", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "msa_mask", ":", "torch", ".", "Tensor", ",", "\n", "pair_mask", ":", "torch", ".", "Tensor", ",", "\n", "chunk_size", ":", "int", ",", "\n", "_mask_trans", ":", "bool", "=", "True", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "Optional", "[", "torch", ".", "Tensor", "]", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            m:\n                [*, N_seq, N_res, C_m] MSA embedding\n            z:\n                [*, N_res, N_res, C_z] pair embedding\n            msa_mask:\n                [*, N_seq, N_res] MSA mask\n            pair_mask:\n                [*, N_res, N_res] pair mask\n        Returns:\n            m:\n                [*, N_seq, N_res, C_m] MSA embedding\n            z:\n                [*, N_res, N_res, C_z] pair embedding\n            s:\n                [*, N_res, C_s] single embedding (or None if extra MSA stack)\n        \"\"\"", "\n", "blocks", "=", "[", "\n", "partial", "(", "\n", "b", ",", "\n", "msa_mask", "=", "msa_mask", ",", "\n", "pair_mask", "=", "pair_mask", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "_mask_trans", "=", "_mask_trans", ",", "\n", ")", "\n", "for", "b", "in", "self", ".", "blocks", "\n", "]", "\n", "\n", "if", "(", "self", ".", "clear_cache_between_blocks", ")", ":", "\n", "            ", "def", "block_with_cache_clear", "(", "block", ",", "*", "args", ")", ":", "\n", "                ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "return", "block", "(", "*", "args", ")", "\n", "\n", "", "blocks", "=", "[", "partial", "(", "block_with_cache_clear", ",", "b", ")", "for", "b", "in", "blocks", "]", "\n", "\n", "", "m", ",", "z", "=", "checkpoint_blocks", "(", "\n", "blocks", ",", "\n", "args", "=", "(", "m", ",", "z", ")", ",", "\n", "blocks_per_ckpt", "=", "self", ".", "blocks_per_ckpt", "if", "self", ".", "training", "else", "None", ",", "\n", ")", "\n", "\n", "s", "=", "self", ".", "linear", "(", "m", "[", "...", ",", "0", ",", ":", ",", ":", "]", ")", "\n", "\n", "return", "m", ",", "z", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.ExtraMSAStack.__init__": [[534, 575], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "evoformer.ExtraMSABlock", "evoformer.ExtraMSAStack.blocks.append"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "\n", "c_m", ":", "int", ",", "\n", "c_z", ":", "int", ",", "\n", "c_hidden_msa_att", ":", "int", ",", "\n", "c_hidden_opm", ":", "int", ",", "\n", "c_hidden_mul", ":", "int", ",", "\n", "c_hidden_pair_att", ":", "int", ",", "\n", "no_heads_msa", ":", "int", ",", "\n", "no_heads_pair", ":", "int", ",", "\n", "no_blocks", ":", "int", ",", "\n", "transition_n", ":", "int", ",", "\n", "msa_dropout", ":", "float", ",", "\n", "pair_dropout", ":", "float", ",", "\n", "inf", ":", "float", ",", "\n", "eps", ":", "float", ",", "\n", "ckpt", ":", "bool", ",", "\n", "clear_cache_between_blocks", ":", "bool", "=", "False", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ExtraMSAStack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "clear_cache_between_blocks", "=", "clear_cache_between_blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "no_blocks", ")", ":", "\n", "            ", "block", "=", "ExtraMSABlock", "(", "\n", "c_m", "=", "c_m", ",", "\n", "c_z", "=", "c_z", ",", "\n", "c_hidden_msa_att", "=", "c_hidden_msa_att", ",", "\n", "c_hidden_opm", "=", "c_hidden_opm", ",", "\n", "c_hidden_mul", "=", "c_hidden_mul", ",", "\n", "c_hidden_pair_att", "=", "c_hidden_pair_att", ",", "\n", "no_heads_msa", "=", "no_heads_msa", ",", "\n", "no_heads_pair", "=", "no_heads_pair", ",", "\n", "transition_n", "=", "transition_n", ",", "\n", "msa_dropout", "=", "msa_dropout", ",", "\n", "pair_dropout", "=", "pair_dropout", ",", "\n", "inf", "=", "inf", ",", "\n", "eps", "=", "eps", ",", "\n", "ckpt", "=", "ckpt", ",", "\n", ")", "\n", "self", ".", "blocks", ".", "append", "(", "block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.evoformer.ExtraMSAStack.forward": [[576, 621], ["b", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "chunk_size", ":", "int", ",", "\n", "msa_mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "pair_mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "_mask_trans", ":", "bool", "=", "True", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            m:\n                [*, N_extra, N_res, C_m] extra MSA embedding\n            z:\n                [*, N_res, N_res, C_z] pair embedding\n            msa_mask:\n                Optional [*, N_extra, N_res] MSA mask\n            pair_mask:\n                Optional [*, N_res, N_res] pair mask\n        Returns:\n            [*, N_res, N_res, C_z] pair update\n        \"\"\"", "\n", "#checkpoint_fn = get_checkpoint_fn()", "\n", "#blocks = [", "\n", "#    partial(b, msa_mask=msa_mask, pair_mask=pair_mask, chunk_size=chunk_size, _chunk_logits=None) for b in self.blocks", "\n", "#]", "\n", "\n", "#def dodo(b, *args):", "\n", "#    torch.cuda.empty_cache()", "\n", "#    return b(*args)", "\n", "\n", "#blocks = [partial(dodo, b) for b in blocks]", "\n", "\n", "#for b in blocks:", "\n", "#    if(torch.is_grad_enabled()):", "\n", "#        m, z = checkpoint_fn(b, *(m, z))", "\n", "#    else:", "\n", "#        m, z = b(m, z)", "\n", "\n", "for", "b", "in", "self", ".", "blocks", ":", "\n", "            ", "m", ",", "z", "=", "b", "(", "m", ",", "z", ",", "msa_mask", ",", "pair_mask", ",", "chunk_size", "=", "chunk_size", ")", "\n", "\n", "if", "(", "self", ".", "clear_cache_between_blocks", ")", ":", "\n", "                ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "", "return", "z", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.pair_transition.PairTransition.__init__": [[29, 47], ["torch.Module.__init__", "fastfold.model.nn.primitives.LayerNorm", "fastfold.model.nn.primitives.Linear", "torch.ReLU", "torch.ReLU", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_z", ",", "n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_z:\n                Pair transition channel dimension\n            n:\n                Factor by which c_z is multiplied to obtain hidden channel\n                dimension\n        \"\"\"", "\n", "super", "(", "PairTransition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_z", "=", "c_z", "\n", "self", ".", "n", "=", "n", "\n", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "self", ".", "c_z", ")", "\n", "self", ".", "linear_1", "=", "Linear", "(", "self", ".", "c_z", ",", "self", ".", "n", "*", "self", ".", "c_z", ",", "init", "=", "\"relu\"", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "linear_2", "=", "Linear", "(", "self", ".", "n", "*", "self", ".", "c_z", ",", "c_z", ",", "init", "=", "\"final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.pair_transition.PairTransition._transition": [[48, 57], ["pair_transition.PairTransition.linear_1", "pair_transition.PairTransition.relu", "pair_transition.PairTransition.linear_2"], "methods", ["None"], ["", "def", "_transition", "(", "self", ",", "z", ",", "mask", ")", ":", "\n", "# [*, N_res, N_res, C_hidden]", "\n", "        ", "z", "=", "self", ".", "linear_1", "(", "z", ")", "\n", "z", "=", "self", ".", "relu", "(", "z", ")", "\n", "\n", "# [*, N_res, N_res, C_z]", "\n", "z", "=", "self", ".", "linear_2", "(", "z", ")", "*", "mask", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.pair_transition.PairTransition._chunk": [[58, 69], ["fastfold.utils.tensor_utils.chunk_layer", "len"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.chunk_layer"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_chunk", "(", "self", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", "chunk_size", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "chunk_layer", "(", "\n", "self", ".", "_transition", ",", "\n", "{", "\"z\"", ":", "z", ",", "\"mask\"", ":", "mask", "}", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "no_batch_dims", "=", "len", "(", "z", ".", "shape", "[", ":", "-", "2", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.pair_transition.PairTransition.forward": [[72, 100], ["pair_transition.PairTransition.new_ones.unsqueeze", "pair_transition.PairTransition.layer_norm", "pair_transition.PairTransition.new_ones", "pair_transition.PairTransition._chunk", "pair_transition.PairTransition._transition"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_attention.TriangleAttention._chunk", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.pair_transition.PairTransition._transition"], ["", "def", "forward", "(", "self", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            z:\n                [*, N_res, N_res, C_z] pair embedding\n        Returns:\n            [*, N_res, N_res, C_z] pair embedding update\n        \"\"\"", "\n", "# DISCREPANCY: DeepMind forgets to apply the mask in this module.", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "z", ".", "new_ones", "(", "z", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "# [*, N_res, N_res, 1]", "\n", "", "mask", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "# [*, N_res, N_res, C_z]", "\n", "z", "=", "self", ".", "layer_norm", "(", "z", ")", "\n", "\n", "if", "chunk_size", "is", "not", "None", ":", "\n", "            ", "z", "=", "self", ".", "_chunk", "(", "z", ",", "mask", ",", "chunk_size", ")", "\n", "", "else", ":", "\n", "            ", "z", "=", "self", ".", "_transition", "(", "z", "=", "z", ",", "mask", "=", "mask", ")", "\n", "\n", "", "return", "z", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.Linear.__init__": [[110, 167], ["torch.Linear.__init__", "init_fn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "primitives.Linear.bias.fill_", "primitives.lecun_normal_init_", "primitives.he_normal_init_", "primitives.glorot_uniform_init_", "primitives.gating_init_", "primitives.normal_init_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "primitives.Linear.bias.fill_", "primitives.final_init_", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.lecun_normal_init_", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.he_normal_init_", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.glorot_uniform_init_", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.gating_init_", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.normal_init_", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.final_init_"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_dim", ":", "int", ",", "\n", "out_dim", ":", "int", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "init", ":", "str", "=", "\"default\"", ",", "\n", "init_fn", ":", "Optional", "[", "Callable", "[", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ",", "None", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            in_dim:\n                The final dimension of inputs to the layer\n            out_dim:\n                The final dimension of layer outputs\n            bias:\n                Whether to learn an additive bias. True by default\n            init:\n                The initializer to use. Choose from:\n\n                \"default\": LeCun fan-in truncated normal initialization\n                \"relu\": He initialization w/ truncated normal distribution\n                \"glorot\": Fan-average Glorot uniform initialization\n                \"gating\": Weights=0, Bias=1\n                \"normal\": Normal initialization with std=1/sqrt(fan_in)\n                \"final\": Weights=0, Bias=0\n\n                Overridden by init_fn if the latter is not None.\n            init_fn:\n                A custom initializer taking weight and bias as inputs.\n                Overrides init if not None.\n        \"\"\"", "\n", "super", "(", "Linear", ",", "self", ")", ".", "__init__", "(", "in_dim", ",", "out_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "bias", ".", "fill_", "(", "0", ")", "\n", "\n", "", "", "if", "init_fn", "is", "not", "None", ":", "\n", "            ", "init_fn", "(", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "if", "init", "==", "\"default\"", ":", "\n", "                ", "lecun_normal_init_", "(", "self", ".", "weight", ")", "\n", "", "elif", "init", "==", "\"relu\"", ":", "\n", "                ", "he_normal_init_", "(", "self", ".", "weight", ")", "\n", "", "elif", "init", "==", "\"glorot\"", ":", "\n", "                ", "glorot_uniform_init_", "(", "self", ".", "weight", ")", "\n", "", "elif", "init", "==", "\"gating\"", ":", "\n", "                ", "gating_init_", "(", "self", ".", "weight", ")", "\n", "if", "bias", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "self", ".", "bias", ".", "fill_", "(", "1.0", ")", "\n", "", "", "", "elif", "init", "==", "\"normal\"", ":", "\n", "                ", "normal_init_", "(", "self", ".", "weight", ")", "\n", "", "elif", "init", "==", "\"final\"", ":", "\n", "                ", "final_init_", "(", "self", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid init string.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.LayerNorm.__init__": [[171, 179], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_in", "=", "(", "c_in", ",", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "c_in", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "c_in", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.LayerNorm.forward": [[180, 190], ["torch.functional.layer_norm", "torch.functional.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "nn", ".", "functional", ".", "layer_norm", "(", "\n", "x", ",", "\n", "self", ".", "c_in", ",", "\n", "self", ".", "weight", ",", "\n", "self", ".", "bias", ",", "\n", "self", ".", "eps", ",", "\n", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.Attention.__init__": [[289, 335], ["torch.Module.__init__", "primitives.Linear", "primitives.Linear", "primitives.Linear", "primitives.Linear", "torch.Sigmoid", "torch.Sigmoid", "primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "c_q", ":", "int", ",", "\n", "c_k", ":", "int", ",", "\n", "c_v", ":", "int", ",", "\n", "c_hidden", ":", "int", ",", "\n", "no_heads", ":", "int", ",", "\n", "gating", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_q:\n                Input dimension of query data\n            c_k:\n                Input dimension of key data\n            c_v:\n                Input dimension of value data\n            c_hidden:\n                Per-head hidden dimension\n            no_heads:\n                Number of attention heads\n            gating:\n                Whether the output should be gated using query data\n        \"\"\"", "\n", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_q", "=", "c_q", "\n", "self", ".", "c_k", "=", "c_k", "\n", "self", ".", "c_v", "=", "c_v", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "self", ".", "no_heads", "=", "no_heads", "\n", "self", ".", "gating", "=", "gating", "\n", "\n", "# DISCREPANCY: c_hidden is not the per-head channel dimension, as", "\n", "# stated in the supplement, but the overall channel dimension.", "\n", "\n", "self", ".", "linear_q", "=", "Linear", "(", "self", ".", "c_q", ",", "self", ".", "c_hidden", "*", "self", ".", "no_heads", ",", "bias", "=", "False", ",", "init", "=", "\"glorot\"", ")", "\n", "self", ".", "linear_k", "=", "Linear", "(", "self", ".", "c_k", ",", "self", ".", "c_hidden", "*", "self", ".", "no_heads", ",", "bias", "=", "False", ",", "init", "=", "\"glorot\"", ")", "\n", "self", ".", "linear_v", "=", "Linear", "(", "self", ".", "c_v", ",", "self", ".", "c_hidden", "*", "self", ".", "no_heads", ",", "bias", "=", "False", ",", "init", "=", "\"glorot\"", ")", "\n", "self", ".", "linear_o", "=", "Linear", "(", "self", ".", "c_hidden", "*", "self", ".", "no_heads", ",", "self", ".", "c_q", ",", "init", "=", "\"final\"", ")", "\n", "\n", "self", ".", "linear_g", "=", "None", "\n", "if", "self", ".", "gating", ":", "\n", "            ", "self", ".", "linear_g", "=", "Linear", "(", "self", ".", "c_q", ",", "self", ".", "c_hidden", "*", "self", ".", "no_heads", ",", "init", "=", "\"gating\"", ")", "\n", "\n", "", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.Attention._prep_qkv": [[336, 351], ["primitives.Attention.linear_q", "primitives.Attention.linear_k", "primitives.Attention.linear_v", "q.view.view.view", "k.view.view.view", "v.view.view.view", "math.sqrt"], "methods", ["None"], ["", "def", "_prep_qkv", "(", "self", ",", "q_x", ":", "torch", ".", "Tensor", ",", "\n", "kv_x", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# [*, Q/K/V, H * C_hidden]", "\n", "        ", "q", "=", "self", ".", "linear_q", "(", "q_x", ")", "\n", "k", "=", "self", ".", "linear_k", "(", "kv_x", ")", "\n", "v", "=", "self", ".", "linear_v", "(", "kv_x", ")", "\n", "\n", "# [*, Q/K, H, C_hidden]", "\n", "q", "=", "q", ".", "view", "(", "q", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "self", ".", "no_heads", ",", "-", "1", ")", ")", "\n", "k", "=", "k", ".", "view", "(", "k", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "self", ".", "no_heads", ",", "-", "1", ")", ")", "\n", "v", "=", "v", ".", "view", "(", "v", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "self", ".", "no_heads", ",", "-", "1", ")", ")", "\n", "\n", "q", "/=", "math", ".", "sqrt", "(", "self", ".", "c_hidden", ")", "\n", "\n", "return", "q", ",", "k", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.Attention._wrap_up": [[352, 367], ["fastfold.utils.tensor_utils.flatten_final_dims", "primitives.Attention.linear_o", "primitives.Attention.sigmoid", "g.view.view.view", "primitives.Attention.linear_g"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.flatten_final_dims"], ["", "def", "_wrap_up", "(", "self", ",", "o", ":", "torch", ".", "Tensor", ",", "q_x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "(", "self", ".", "linear_g", "is", "not", "None", ")", ":", "\n", "            ", "g", "=", "self", ".", "sigmoid", "(", "self", ".", "linear_g", "(", "q_x", ")", ")", "\n", "\n", "# [*, Q, H, C_hidden]", "\n", "g", "=", "g", ".", "view", "(", "g", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "self", ".", "no_heads", ",", "-", "1", ")", ")", "\n", "o", "=", "o", "*", "g", "\n", "\n", "# [*, Q, H * C_hidden]", "\n", "", "o", "=", "flatten_final_dims", "(", "o", ",", "2", ")", "\n", "\n", "# [*, Q, C_q]", "\n", "o", "=", "self", ".", "linear_o", "(", "o", ")", "\n", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.Attention.forward": [[368, 412], ["primitives.Attention._prep_qkv", "primitives.Attention._wrap_up", "ValueError", "primitives._lma", "primitives._attention", "b.expand"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.Attention._prep_qkv", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.Attention._wrap_up", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives._lma", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives._attention"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "q_x", ":", "torch", ".", "Tensor", ",", "\n", "kv_x", ":", "torch", ".", "Tensor", ",", "\n", "biases", ":", "Optional", "[", "List", "[", "torch", ".", "Tensor", "]", "]", "=", "None", ",", "\n", "use_lma", ":", "bool", "=", "False", ",", "\n", "q_chunk_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "kv_chunk_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            q_x:\n                [*, Q, C_q] query data\n            kv_x:\n                [*, K, C_k] key data\n            biases:\n                List of biases that broadcast to [*, H, Q, K]\n            use_lma:\n                Whether to use low-memory attention\n            q_chunk_size:\n                Query chunk size (for LMA)\n            kv_chunk_size:\n                Key/Value chunk size (for LMA)\n        Returns\n            [*, Q, C_q] attention update\n        \"\"\"", "\n", "if", "(", "biases", "is", "None", ")", ":", "\n", "            ", "biases", "=", "[", "]", "\n", "", "if", "(", "use_lma", "and", "(", "q_chunk_size", "is", "None", "or", "kv_chunk_size", "is", "None", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"If use_lma is specified, q_chunk_size and kv_chunk_size must \"", "\n", "\"be provided\"", ")", "\n", "\n", "", "q", ",", "k", ",", "v", "=", "self", ".", "_prep_qkv", "(", "q_x", ",", "kv_x", ")", "\n", "\n", "if", "(", "use_lma", ")", ":", "\n", "            ", "biases", "=", "[", "b", ".", "expand", "(", "b", ".", "shape", "[", ":", "-", "2", "]", "+", "(", "q_x", ".", "shape", "[", "-", "2", "]", ",", ")", "+", "(", "kv_x", ".", "shape", "[", "-", "2", "]", ",", ")", ")", "for", "b", "in", "biases", "]", "\n", "\n", "o", "=", "_lma", "(", "q", ",", "k", ",", "v", ",", "biases", ",", "q_chunk_size", ",", "kv_chunk_size", ")", "\n", "", "else", ":", "\n", "            ", "o", "=", "_attention", "(", "q", ",", "k", ",", "v", ",", "biases", ")", "\n", "\n", "", "o", "=", "self", ".", "_wrap_up", "(", "o", ",", "q_x", ")", "\n", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.GlobalAttention.__init__": [[416, 443], ["torch.Module.__init__", "primitives.Linear", "primitives.Linear", "primitives.Linear", "primitives.Linear", "primitives.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_in", ",", "c_hidden", ",", "no_heads", ",", "inf", ",", "eps", ")", ":", "\n", "        ", "super", "(", "GlobalAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "self", ".", "no_heads", "=", "no_heads", "\n", "self", ".", "inf", "=", "inf", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "self", ".", "linear_q", "=", "Linear", "(", "c_in", ",", "c_hidden", "*", "no_heads", ",", "bias", "=", "False", ",", "init", "=", "\"glorot\"", ")", "\n", "\n", "self", ".", "linear_k", "=", "Linear", "(", "\n", "c_in", ",", "\n", "c_hidden", ",", "\n", "bias", "=", "False", ",", "\n", "init", "=", "\"glorot\"", ",", "\n", ")", "\n", "self", ".", "linear_v", "=", "Linear", "(", "\n", "c_in", ",", "\n", "c_hidden", ",", "\n", "bias", "=", "False", ",", "\n", "init", "=", "\"glorot\"", ",", "\n", ")", "\n", "self", ".", "linear_g", "=", "Linear", "(", "c_in", ",", "c_hidden", "*", "no_heads", ",", "init", "=", "\"gating\"", ")", "\n", "self", ".", "linear_o", "=", "Linear", "(", "c_hidden", "*", "no_heads", ",", "c_in", ",", "init", "=", "\"final\"", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.GlobalAttention.forward": [[444, 491], ["primitives.GlobalAttention.linear_q", "q.view.view.view", "primitives.GlobalAttention.linear_k", "primitives.GlobalAttention.linear_v", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "primitives.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "primitives.GlobalAttention.sigmoid", "g.view.view.view", "o.reshape.reshape.reshape", "primitives.GlobalAttention.linear_o", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "primitives.GlobalAttention.transpose", "primitives.GlobalAttention.linear_g", "o.reshape.reshape.unsqueeze", "mask.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze"], ["", "def", "forward", "(", "self", ",", "m", ":", "torch", ".", "Tensor", ",", "mask", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "# [*, N_res, C_in]", "\n", "        ", "q", "=", "torch", ".", "sum", "(", "m", "*", "mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", "dim", "=", "-", "2", ")", "/", "(", "torch", ".", "sum", "(", "mask", ",", "dim", "=", "-", "1", ")", "[", "...", ",", "None", "]", "+", "self", ".", "eps", ")", "\n", "\n", "# [*, N_res, H * C_hidden]", "\n", "q", "=", "self", ".", "linear_q", "(", "q", ")", "\n", "q", "*=", "(", "self", ".", "c_hidden", "**", "(", "-", "0.5", ")", ")", "\n", "\n", "# [*, N_res, H, C_hidden]", "\n", "q", "=", "q", ".", "view", "(", "q", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "self", ".", "no_heads", ",", "-", "1", ")", ")", "\n", "\n", "# [*, N_res, N_seq, C_hidden]", "\n", "k", "=", "self", ".", "linear_k", "(", "m", ")", "\n", "v", "=", "self", ".", "linear_v", "(", "m", ")", "\n", "\n", "# [*, N_res, H, N_seq]", "\n", "a", "=", "torch", ".", "matmul", "(", "\n", "q", ",", "\n", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "# [*, N_res, C_hidden, N_seq]", "\n", ")", "\n", "bias", "=", "(", "self", ".", "inf", "*", "(", "mask", "-", "1", ")", ")", "[", "...", ",", ":", ",", "None", ",", ":", "]", "\n", "a", "+=", "bias", "\n", "a", "=", "softmax", "(", "a", ")", "\n", "\n", "# [*, N_res, H, C_hidden]", "\n", "o", "=", "torch", ".", "matmul", "(", "\n", "a", ",", "\n", "v", ",", "\n", ")", "\n", "\n", "# [*, N_res, N_seq, C_hidden]", "\n", "g", "=", "self", ".", "sigmoid", "(", "self", ".", "linear_g", "(", "m", ")", ")", "\n", "\n", "# [*, N_res, N_seq, H, C_hidden]", "\n", "g", "=", "g", ".", "view", "(", "g", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "self", ".", "no_heads", ",", "-", "1", ")", ")", "\n", "\n", "# [*, N_res, N_seq, H, C_hidden]", "\n", "o", "=", "o", ".", "unsqueeze", "(", "-", "3", ")", "*", "g", "\n", "\n", "# [*, N_res, N_seq, H * C_hidden]", "\n", "o", "=", "o", ".", "reshape", "(", "o", ".", "shape", "[", ":", "-", "2", "]", "+", "(", "-", "1", ",", ")", ")", "\n", "\n", "# [*, N_res, N_seq, C_in]", "\n", "m", "=", "self", ".", "linear_o", "(", "o", ")", "\n", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives._prod": [[33, 38], ["None"], "function", ["None"], ["def", "_prod", "(", "nums", ")", ":", "\n", "    ", "out", "=", "1", "\n", "for", "n", "in", "nums", ":", "\n", "        ", "out", "=", "out", "*", "n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives._calculate_fan": [[40, 53], ["ValueError"], "function", ["None"], ["", "def", "_calculate_fan", "(", "linear_weight_shape", ",", "fan", "=", "\"fan_in\"", ")", ":", "\n", "    ", "fan_out", ",", "fan_in", "=", "linear_weight_shape", "\n", "\n", "if", "fan", "==", "\"fan_in\"", ":", "\n", "        ", "f", "=", "fan_in", "\n", "", "elif", "fan", "==", "\"fan_out\"", ":", "\n", "        ", "f", "=", "fan_out", "\n", "", "elif", "fan", "==", "\"fan_avg\"", ":", "\n", "        ", "f", "=", "(", "fan_in", "+", "fan_out", ")", "/", "2", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid fan option\"", ")", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.trunc_normal_init_": [[55, 67], ["primitives._calculate_fan", "primitives._prod", "scipy.stats.truncnorm.rvs", "numpy.reshape", "max", "math.sqrt", "scipy.stats.truncnorm.std", "torch.no_grad", "torch.no_grad", "weights.copy_", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives._calculate_fan", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives._prod"], ["", "def", "trunc_normal_init_", "(", "weights", ",", "scale", "=", "1.0", ",", "fan", "=", "\"fan_in\"", ")", ":", "\n", "    ", "shape", "=", "weights", ".", "shape", "\n", "f", "=", "_calculate_fan", "(", "shape", ",", "fan", ")", "\n", "scale", "=", "scale", "/", "max", "(", "1", ",", "f", ")", "\n", "a", "=", "-", "2", "\n", "b", "=", "2", "\n", "std", "=", "math", ".", "sqrt", "(", "scale", ")", "/", "truncnorm", ".", "std", "(", "a", "=", "a", ",", "b", "=", "b", ",", "loc", "=", "0", ",", "scale", "=", "1", ")", "\n", "size", "=", "_prod", "(", "shape", ")", "\n", "samples", "=", "truncnorm", ".", "rvs", "(", "a", "=", "a", ",", "b", "=", "b", ",", "loc", "=", "0", ",", "scale", "=", "std", ",", "size", "=", "size", ")", "\n", "samples", "=", "np", ".", "reshape", "(", "samples", ",", "shape", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "weights", ".", "copy_", "(", "torch", ".", "tensor", "(", "samples", ",", "device", "=", "weights", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.lecun_normal_init_": [[69, 71], ["primitives.trunc_normal_init_"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.trunc_normal_init_"], ["", "", "def", "lecun_normal_init_", "(", "weights", ")", ":", "\n", "    ", "trunc_normal_init_", "(", "weights", ",", "scale", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.he_normal_init_": [[73, 75], ["primitives.trunc_normal_init_"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.trunc_normal_init_"], ["", "def", "he_normal_init_", "(", "weights", ")", ":", "\n", "    ", "trunc_normal_init_", "(", "weights", ",", "scale", "=", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.glorot_uniform_init_": [[77, 79], ["torch.init.xavier_uniform_"], "function", ["None"], ["", "def", "glorot_uniform_init_", "(", "weights", ")", ":", "\n", "    ", "nn", ".", "init", ".", "xavier_uniform_", "(", "weights", ",", "gain", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.final_init_": [[81, 84], ["torch.no_grad", "torch.no_grad", "weights.fill_"], "function", ["None"], ["", "def", "final_init_", "(", "weights", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "weights", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.gating_init_": [[86, 89], ["torch.no_grad", "torch.no_grad", "weights.fill_"], "function", ["None"], ["", "", "def", "gating_init_", "(", "weights", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "weights", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.normal_init_": [[91, 93], ["torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "function", ["None"], ["", "", "def", "normal_init_", "(", "weights", ")", ":", "\n", "    ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "weights", ",", "nonlinearity", "=", "\"linear\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.ipa_point_weights_init_": [[95, 99], ["torch.no_grad", "torch.no_grad", "weights.fill_"], "function", ["None"], ["", "def", "ipa_point_weights_init_", "(", "weights", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "softplus_inverse_1", "=", "0.541324854612918", "\n", "weights", ".", "fill_", "(", "softplus_inverse_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax": [[192, 201], ["torch.nn.functional.softmax", "torch.nn.functional.softmax"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "softmax", "(", "t", ":", "torch", ".", "Tensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n        Softmax, but without automatic casting to fp32 when the input is of\n        type bfloat16\n    \"\"\"", "\n", "s", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "t", ",", "dim", "=", "dim", ")", "\n", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives._attention": [[204, 230], ["fastfold.utils.tensor_utils.permute_final_dims", "fastfold.utils.tensor_utils.permute_final_dims", "fastfold.utils.tensor_utils.permute_final_dims", "torch.matmul", "torch.matmul", "primitives.softmax", "torch.matmul", "torch.matmul", "a.transpose.transpose"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax"], ["", "def", "_attention", "(", "query", ":", "torch", ".", "Tensor", ",", "key", ":", "torch", ".", "Tensor", ",", "value", ":", "torch", ".", "Tensor", ",", "\n", "biases", ":", "List", "[", "torch", ".", "Tensor", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "# [*, H, Q, C_hidden]", "\n", "    ", "query", "=", "permute_final_dims", "(", "query", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "# [*, H, C_hidden, K]", "\n", "key", "=", "permute_final_dims", "(", "key", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "# [*, H, V, C_hidden]", "\n", "value", "=", "permute_final_dims", "(", "value", ",", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "# [*, H, Q, K]", "\n", "a", "=", "torch", ".", "matmul", "(", "query", ",", "key", ")", "\n", "\n", "for", "b", "in", "biases", ":", "\n", "        ", "a", "+=", "b", "\n", "\n", "", "a", "=", "softmax", "(", "a", ",", "-", "1", ")", "\n", "\n", "# [*, H, Q, C_hidden]", "\n", "a", "=", "torch", ".", "matmul", "(", "a", ",", "value", ")", "\n", "\n", "# [*, Q, H, C_hidden]", "\n", "a", "=", "a", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives._attention_chunked_trainable": [[232, 281], ["fastfold.utils.checkpointing.get_checkpoint_fn", "range", "torch.cat", "torch.cat", "ValueError", "primitives._attention", "slice", "tuple", "o_chunks.append", "len", "len", "fastfold.utils.checkpointing.get_checkpoint_fn.", "primitives._attention", "slice", "slice", "slice", "primitives._attention_chunked_trainable._slice_bias"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.checkpointing.get_checkpoint_fn", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives._attention", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives._attention"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_attention_chunked_trainable", "(", "\n", "query", ",", "\n", "key", ",", "\n", "value", ",", "\n", "biases", ",", "\n", "chunk_size", ",", "\n", "chunk_dim", ",", "\n", "checkpoint", ",", "\n", ")", ":", "\n", "    ", "if", "(", "checkpoint", "and", "len", "(", "biases", ")", ">", "2", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Checkpointed version permits only permits two bias terms\"", ")", "\n", "\n", "", "def", "_checkpointable_attention", "(", "q", ",", "k", ",", "v", ",", "b1", ",", "b2", ")", ":", "\n", "        ", "bs", "=", "[", "b", "for", "b", "in", "[", "b1", ",", "b2", "]", "if", "b", "is", "not", "None", "]", "\n", "return", "_attention", "(", "q", ",", "k", ",", "v", ",", "bs", ")", "\n", "\n", "", "o_chunks", "=", "[", "]", "\n", "checkpoint_fn", "=", "get_checkpoint_fn", "(", ")", "\n", "count", "=", "query", ".", "shape", "[", "chunk_dim", "]", "\n", "for", "start", "in", "range", "(", "0", ",", "count", ",", "chunk_size", ")", ":", "\n", "        ", "end", "=", "start", "+", "chunk_size", "\n", "idx", "=", "[", "slice", "(", "None", ")", "]", "*", "len", "(", "query", ".", "shape", ")", "\n", "idx", "[", "chunk_dim", "]", "=", "slice", "(", "start", ",", "end", ")", "\n", "idx_tup", "=", "tuple", "(", "idx", ")", "\n", "q_chunk", "=", "query", "[", "idx_tup", "]", "\n", "k_chunk", "=", "key", "[", "idx_tup", "]", "\n", "v_chunk", "=", "value", "[", "idx_tup", "]", "\n", "\n", "def", "_slice_bias", "(", "b", ")", ":", "\n", "            ", "idx", "[", "chunk_dim", "]", "=", "(", "slice", "(", "start", ",", "end", ")", "if", "b", ".", "shape", "[", "chunk_dim", "]", "!=", "1", "else", "slice", "(", "None", ")", ")", "\n", "return", "b", "[", "tuple", "(", "idx", ")", "]", "\n", "\n", "", "if", "(", "checkpoint", ")", ":", "\n", "            ", "bias_1_chunk", ",", "bias_2_chunk", "=", "[", "\n", "_slice_bias", "(", "b", ")", "if", "b", "is", "not", "None", "else", "None", "for", "b", "in", "(", "biases", "+", "[", "None", ",", "None", "]", ")", "[", ":", "2", "]", "\n", "]", "\n", "\n", "o_chunk", "=", "checkpoint_fn", "(", "_checkpointable_attention", ",", "q_chunk", ",", "k_chunk", ",", "v_chunk", ",", "\n", "bias_1_chunk", ",", "bias_2_chunk", ")", "\n", "", "else", ":", "\n", "            ", "bias_chunks", "=", "[", "_slice_bias", "(", "b", ")", "for", "b", "in", "biases", "]", "\n", "\n", "o_chunk", "=", "_attention", "(", "q_chunk", ",", "k_chunk", ",", "v_chunk", ",", "bias_chunks", ")", "\n", "\n", "", "o_chunks", ".", "append", "(", "o_chunk", ")", "\n", "\n", "", "o", "=", "torch", ".", "cat", "(", "o_chunks", ",", "dim", "=", "chunk_dim", ")", "\n", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives._lma": [[493, 553], ["q.new_zeros", "range", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.exp", "torch.exp", "torch.exp.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.einsum", "torch.einsum", "a.transpose.transpose", "torch.exp", "torch.exp", "torch.einsum", "torch.einsum", "maxes.append", "weights.append", "values.append", "torch.max", "torch.max", "torch.stack.unsqueeze", "torch.max", "torch.max", "max_a.detach().squeeze", "torch.sum", "torch.sum", "max_a.detach"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach"], ["", "", "def", "_lma", "(", "\n", "q", ":", "torch", ".", "Tensor", ",", "\n", "k", ":", "torch", ".", "Tensor", ",", "\n", "v", ":", "torch", ".", "Tensor", ",", "\n", "biases", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "q_chunk_size", ":", "int", ",", "\n", "kv_chunk_size", ":", "int", ",", "\n", ")", ":", "\n", "    ", "no_q", ",", "no_kv", "=", "q", ".", "shape", "[", "-", "3", "]", ",", "k", ".", "shape", "[", "-", "3", "]", "\n", "\n", "# [*, Q, H, C_hidden]", "\n", "o", "=", "q", ".", "new_zeros", "(", "q", ".", "shape", ")", "\n", "for", "q_s", "in", "range", "(", "0", ",", "no_q", ",", "q_chunk_size", ")", ":", "\n", "        ", "q_chunk", "=", "q", "[", "...", ",", "q_s", ":", "q_s", "+", "q_chunk_size", ",", ":", ",", ":", "]", "\n", "large_bias_chunks", "=", "[", "b", "[", "...", ",", "q_s", ":", "q_s", "+", "q_chunk_size", ",", ":", "]", "for", "b", "in", "biases", "]", "\n", "\n", "maxes", "=", "[", "]", "\n", "weights", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "for", "kv_s", "in", "range", "(", "0", ",", "no_kv", ",", "kv_chunk_size", ")", ":", "\n", "            ", "k_chunk", "=", "k", "[", "...", ",", "kv_s", ":", "kv_s", "+", "kv_chunk_size", ",", ":", ",", ":", "]", "\n", "v_chunk", "=", "v", "[", "...", ",", "kv_s", ":", "kv_s", "+", "kv_chunk_size", ",", ":", ",", ":", "]", "\n", "small_bias_chunks", "=", "[", "b", "[", "...", ",", "kv_s", ":", "kv_s", "+", "kv_chunk_size", "]", "for", "b", "in", "large_bias_chunks", "]", "\n", "\n", "a", "=", "torch", ".", "einsum", "(", "\n", "\"...qhd,...khd->...hqk\"", ",", "\n", "q_chunk", ",", "\n", "k_chunk", ",", "\n", ")", "\n", "\n", "for", "b", "in", "small_bias_chunks", ":", "\n", "                ", "a", "+=", "b", "\n", "\n", "", "a", "=", "a", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "\n", "max_a", "=", "torch", ".", "max", "(", "a", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "exp_a", "=", "torch", ".", "exp", "(", "a", "-", "max_a", ")", "\n", "exp_v", "=", "torch", ".", "einsum", "(", "\"...vhf,...qhv->...qhf\"", ",", "v_chunk", ",", "exp_a", ")", "\n", "\n", "maxes", ".", "append", "(", "max_a", ".", "detach", "(", ")", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "weights", ".", "append", "(", "torch", ".", "sum", "(", "exp_a", ",", "dim", "=", "-", "1", ")", ")", "\n", "values", ".", "append", "(", "exp_v", ")", "\n", "\n", "", "chunk_max", "=", "torch", ".", "stack", "(", "maxes", ",", "dim", "=", "-", "3", ")", "\n", "chunk_weights", "=", "torch", ".", "stack", "(", "weights", ",", "dim", "=", "-", "3", ")", "\n", "chunk_values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "-", "4", ")", "\n", "\n", "global_max", "=", "torch", ".", "max", "(", "chunk_max", ",", "dim", "=", "-", "3", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "max_diffs", "=", "torch", ".", "exp", "(", "chunk_max", "-", "global_max", ")", "\n", "chunk_values", "*=", "max_diffs", ".", "unsqueeze", "(", "-", "1", ")", "\n", "chunk_weights", "*=", "max_diffs", "\n", "\n", "all_values", "=", "torch", ".", "sum", "(", "chunk_values", ",", "dim", "=", "-", "4", ")", "\n", "all_weights", "=", "torch", ".", "sum", "(", "chunk_weights", ".", "unsqueeze", "(", "-", "1", ")", ",", "dim", "=", "-", "4", ")", "\n", "\n", "q_chunk_out", "=", "all_values", "/", "all_weights", "\n", "\n", "o", "[", "...", ",", "q_s", ":", "q_s", "+", "q_chunk_size", ",", ":", ",", ":", "]", "=", "q_chunk_out", "\n", "\n", "", "return", "o", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.AngleResnetBlock.__init__": [[41, 55], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c_hidden", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_hidden:\n                Hidden channel dimension\n        \"\"\"", "\n", "super", "(", "AngleResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "\n", "self", ".", "linear_1", "=", "Linear", "(", "self", ".", "c_hidden", ",", "self", ".", "c_hidden", ",", "init", "=", "\"relu\"", ")", "\n", "self", ".", "linear_2", "=", "Linear", "(", "self", ".", "c_hidden", ",", "self", ".", "c_hidden", ",", "init", "=", "\"final\"", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.AngleResnetBlock.forward": [[56, 66], ["structure_module.AngleResnetBlock.relu", "structure_module.AngleResnetBlock.linear_1", "structure_module.AngleResnetBlock.relu", "structure_module.AngleResnetBlock.linear_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "a", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "s_initial", "=", "a", "\n", "\n", "a", "=", "self", ".", "relu", "(", "a", ")", "\n", "a", "=", "self", ".", "linear_1", "(", "a", ")", "\n", "a", "=", "self", ".", "relu", "(", "a", ")", "\n", "a", "=", "self", ".", "linear_2", "(", "a", ")", "\n", "\n", "return", "a", "+", "s_initial", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.AngleResnet.__init__": [[73, 106], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "torch.ModuleList", "torch.ModuleList", "range", "fastfold.model.nn.primitives.Linear", "torch.ReLU", "torch.ReLU", "structure_module.AngleResnetBlock", "structure_module.AngleResnet.layers.append"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_in", ",", "c_hidden", ",", "no_blocks", ",", "no_angles", ",", "epsilon", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_in:\n                Input channel dimension\n            c_hidden:\n                Hidden channel dimension\n            no_blocks:\n                Number of resnet blocks\n            no_angles:\n                Number of torsion angles to generate\n            epsilon:\n                Small constant for normalization\n        \"\"\"", "\n", "super", "(", "AngleResnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "self", ".", "no_blocks", "=", "no_blocks", "\n", "self", ".", "no_angles", "=", "no_angles", "\n", "self", ".", "eps", "=", "epsilon", "\n", "\n", "self", ".", "linear_in", "=", "Linear", "(", "self", ".", "c_in", ",", "self", ".", "c_hidden", ")", "\n", "self", ".", "linear_initial", "=", "Linear", "(", "self", ".", "c_in", ",", "self", ".", "c_hidden", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "no_blocks", ")", ":", "\n", "            ", "layer", "=", "AngleResnetBlock", "(", "c_hidden", "=", "self", ".", "c_hidden", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "", "self", ".", "linear_out", "=", "Linear", "(", "self", ".", "c_hidden", ",", "self", ".", "no_angles", "*", "2", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.AngleResnet.forward": [[107, 152], ["structure_module.AngleResnet.relu", "structure_module.AngleResnet.linear_initial", "structure_module.AngleResnet.relu", "structure_module.AngleResnet.linear_in", "structure_module.AngleResnet.relu", "structure_module.AngleResnet.linear_out", "l.view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "l", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "s", ":", "torch", ".", "Tensor", ",", "s_initial", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            s:\n                [*, C_hidden] single embedding\n            s_initial:\n                [*, C_hidden] single embedding as of the start of the\n                StructureModule\n        Returns:\n            [*, no_angles, 2] predicted angles\n        \"\"\"", "\n", "# NOTE: The ReLU's applied to the inputs are absent from the supplement", "\n", "# pseudocode but present in the source. For maximal compatibility with", "\n", "# the pretrained weights, I'm going with the source.", "\n", "\n", "# [*, C_hidden]", "\n", "s_initial", "=", "self", ".", "relu", "(", "s_initial", ")", "\n", "s_initial", "=", "self", ".", "linear_initial", "(", "s_initial", ")", "\n", "s", "=", "self", ".", "relu", "(", "s", ")", "\n", "s", "=", "self", ".", "linear_in", "(", "s", ")", "\n", "s", "=", "s", "+", "s_initial", "\n", "\n", "for", "l", "in", "self", ".", "layers", ":", "\n", "            ", "s", "=", "l", "(", "s", ")", "\n", "\n", "", "s", "=", "self", ".", "relu", "(", "s", ")", "\n", "\n", "# [*, no_angles * 2]", "\n", "s", "=", "self", ".", "linear_out", "(", "s", ")", "\n", "\n", "# [*, no_angles, 2]", "\n", "s", "=", "s", ".", "view", "(", "s", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "-", "1", ",", "2", ")", ")", "\n", "\n", "unnormalized_s", "=", "s", "\n", "norm_denom", "=", "torch", ".", "sqrt", "(", "\n", "torch", ".", "clamp", "(", "\n", "torch", ".", "sum", "(", "s", "**", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ",", "\n", "min", "=", "self", ".", "eps", ",", "\n", ")", "\n", ")", "\n", "s", "=", "s", "/", "norm_denom", "\n", "\n", "return", "unnormalized_s", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.InvariantPointAttention.__init__": [[158, 223], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "torch.Parameter", "torch.Parameter", "fastfold.model.nn.primitives.ipa_point_weights_init_", "fastfold.model.nn.primitives.Linear", "torch.Softmax", "torch.Softmax", "torch.Softplus", "torch.Softplus", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.ipa_point_weights_init_"], ["def", "__init__", "(", "\n", "self", ",", "\n", "c_s", ":", "int", ",", "\n", "c_z", ":", "int", ",", "\n", "c_hidden", ":", "int", ",", "\n", "no_heads", ":", "int", ",", "\n", "no_qk_points", ":", "int", ",", "\n", "no_v_points", ":", "int", ",", "\n", "inf", ":", "float", "=", "1e5", ",", "\n", "eps", ":", "float", "=", "1e-8", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_s:\n                Single representation channel dimension\n            c_z:\n                Pair representation channel dimension\n            c_hidden:\n                Hidden channel dimension\n            no_heads:\n                Number of attention heads\n            no_qk_points:\n                Number of query/key points to generate\n            no_v_points:\n                Number of value points to generate\n        \"\"\"", "\n", "super", "(", "InvariantPointAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_s", "=", "c_s", "\n", "self", ".", "c_z", "=", "c_z", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "self", ".", "no_heads", "=", "no_heads", "\n", "self", ".", "no_qk_points", "=", "no_qk_points", "\n", "self", ".", "no_v_points", "=", "no_v_points", "\n", "self", ".", "inf", "=", "inf", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "# These linear layers differ from their specifications in the", "\n", "# supplement. There, they lack bias and use Glorot initialization.", "\n", "# Here as in the official source, they have bias and use the default", "\n", "# Lecun initialization.", "\n", "hc", "=", "self", ".", "c_hidden", "*", "self", ".", "no_heads", "\n", "self", ".", "linear_q", "=", "Linear", "(", "self", ".", "c_s", ",", "hc", ")", "\n", "self", ".", "linear_kv", "=", "Linear", "(", "self", ".", "c_s", ",", "2", "*", "hc", ")", "\n", "\n", "hpq", "=", "self", ".", "no_heads", "*", "self", ".", "no_qk_points", "*", "3", "\n", "self", ".", "linear_q_points", "=", "Linear", "(", "self", ".", "c_s", ",", "hpq", ")", "\n", "\n", "hpkv", "=", "self", ".", "no_heads", "*", "(", "self", ".", "no_qk_points", "+", "self", ".", "no_v_points", ")", "*", "3", "\n", "self", ".", "linear_kv_points", "=", "Linear", "(", "self", ".", "c_s", ",", "hpkv", ")", "\n", "\n", "hpv", "=", "self", ".", "no_heads", "*", "self", ".", "no_v_points", "*", "3", "\n", "\n", "self", ".", "linear_b", "=", "Linear", "(", "self", ".", "c_z", ",", "self", ".", "no_heads", ")", "\n", "\n", "self", ".", "head_weights", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "no_heads", ")", ")", ")", "\n", "ipa_point_weights_init_", "(", "self", ".", "head_weights", ")", "\n", "\n", "concat_out_dim", "=", "self", ".", "no_heads", "*", "(", "\n", "self", ".", "c_z", "+", "self", ".", "c_hidden", "+", "self", ".", "no_v_points", "*", "4", "\n", ")", "\n", "self", ".", "linear_out", "=", "Linear", "(", "concat_out_dim", ",", "self", ".", "c_s", ",", "init", "=", "\"final\"", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "softplus", "=", "nn", ".", "Softplus", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.InvariantPointAttention.forward": [[224, 378], ["structure_module.InvariantPointAttention.linear_q", "structure_module.InvariantPointAttention.linear_kv", "q.view.view.view", "kv.view.view.view", "torch.split", "torch.split", "torch.split", "torch.split", "structure_module.InvariantPointAttention.linear_q_points", "torch.split", "torch.split", "torch.split", "torch.split", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "r[].apply", "q_pts.view.view.view", "structure_module.InvariantPointAttention.linear_kv_points", "torch.split", "torch.split", "torch.split", "torch.split", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "r[].apply", "kv_pts.view.view.view", "torch.split", "torch.split", "torch.split", "torch.split", "structure_module.InvariantPointAttention.linear_b", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "sum", "structure_module.InvariantPointAttention.softplus().view", "fastfold.utils.tensor_utils.permute_final_dims", "structure_module.InvariantPointAttention.softmax", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "fastfold.utils.tensor_utils.flatten_final_dims", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "fastfold.utils.tensor_utils.permute_final_dims", "r[].invert_apply", "fastfold.utils.tensor_utils.flatten_final_dims", "o_pt.reshape.reshape.reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "fastfold.utils.tensor_utils.flatten_final_dims", "structure_module.InvariantPointAttention.linear_out", "fastfold.utils.tensor_utils.permute_final_dims", "fastfold.utils.tensor_utils.permute_final_dims", "math.sqrt", "fastfold.utils.tensor_utils.permute_final_dims", "q_pts.view.view.unsqueeze", "k_pts.unsqueeze", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "math.sqrt", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.unsqueeze", "mask.unsqueeze", "square_mask.unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "structure_module.InvariantPointAttention.transpose", "z.to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "structure_module.InvariantPointAttention.softplus", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "v.transpose().to", "fastfold.utils.tensor_utils.permute_final_dims", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "v.transpose", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.softmax", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.flatten_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.invert_apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.flatten_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.flatten_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "s", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "r", ":", "Rigid", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            s:\n                [*, N_res, C_s] single representation\n            z:\n                [*, N_res, N_res, C_z] pair representation\n            r:\n                [*, N_res] transformation object\n            mask:\n                [*, N_res] mask\n        Returns:\n            [*, N_res, C_s] single representation update\n        \"\"\"", "\n", "#######################################", "\n", "# Generate scalar and point activations", "\n", "#######################################", "\n", "# [*, N_res, H * C_hidden]", "\n", "q", "=", "self", ".", "linear_q", "(", "s", ")", "\n", "kv", "=", "self", ".", "linear_kv", "(", "s", ")", "\n", "\n", "# [*, N_res, H, C_hidden]", "\n", "q", "=", "q", ".", "view", "(", "q", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "self", ".", "no_heads", ",", "-", "1", ")", ")", "\n", "\n", "# [*, N_res, H, 2 * C_hidden]", "\n", "kv", "=", "kv", ".", "view", "(", "kv", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "self", ".", "no_heads", ",", "-", "1", ")", ")", "\n", "\n", "# [*, N_res, H, C_hidden]", "\n", "k", ",", "v", "=", "torch", ".", "split", "(", "kv", ",", "self", ".", "c_hidden", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# [*, N_res, H * P_q * 3]", "\n", "q_pts", "=", "self", ".", "linear_q_points", "(", "s", ")", "\n", "\n", "# This is kind of clunky, but it's how the original does it", "\n", "# [*, N_res, H * P_q, 3]", "\n", "q_pts", "=", "torch", ".", "split", "(", "q_pts", ",", "q_pts", ".", "shape", "[", "-", "1", "]", "//", "3", ",", "dim", "=", "-", "1", ")", "\n", "q_pts", "=", "torch", ".", "stack", "(", "q_pts", ",", "dim", "=", "-", "1", ")", "\n", "q_pts", "=", "r", "[", "...", ",", "None", "]", ".", "apply", "(", "q_pts", ")", "\n", "\n", "# [*, N_res, H, P_q, 3]", "\n", "q_pts", "=", "q_pts", ".", "view", "(", "\n", "q_pts", ".", "shape", "[", ":", "-", "2", "]", "+", "(", "self", ".", "no_heads", ",", "self", ".", "no_qk_points", ",", "3", ")", "\n", ")", "\n", "\n", "# [*, N_res, H * (P_q + P_v) * 3]", "\n", "kv_pts", "=", "self", ".", "linear_kv_points", "(", "s", ")", "\n", "\n", "# [*, N_res, H * (P_q + P_v), 3]", "\n", "kv_pts", "=", "torch", ".", "split", "(", "kv_pts", ",", "kv_pts", ".", "shape", "[", "-", "1", "]", "//", "3", ",", "dim", "=", "-", "1", ")", "\n", "kv_pts", "=", "torch", ".", "stack", "(", "kv_pts", ",", "dim", "=", "-", "1", ")", "\n", "kv_pts", "=", "r", "[", "...", ",", "None", "]", ".", "apply", "(", "kv_pts", ")", "\n", "\n", "# [*, N_res, H, (P_q + P_v), 3]", "\n", "kv_pts", "=", "kv_pts", ".", "view", "(", "kv_pts", ".", "shape", "[", ":", "-", "2", "]", "+", "(", "self", ".", "no_heads", ",", "-", "1", ",", "3", ")", ")", "\n", "\n", "# [*, N_res, H, P_q/P_v, 3]", "\n", "k_pts", ",", "v_pts", "=", "torch", ".", "split", "(", "\n", "kv_pts", ",", "[", "self", ".", "no_qk_points", ",", "self", ".", "no_v_points", "]", ",", "dim", "=", "-", "2", "\n", ")", "\n", "\n", "##########################", "\n", "# Compute attention scores", "\n", "##########################", "\n", "# [*, N_res, N_res, H]", "\n", "b", "=", "self", ".", "linear_b", "(", "z", ")", "\n", "\n", "# [*, H, N_res, N_res]", "\n", "a", "=", "torch", ".", "matmul", "(", "\n", "permute_final_dims", "(", "q", ",", "(", "1", ",", "0", ",", "2", ")", ")", ",", "# [*, H, N_res, C_hidden]", "\n", "permute_final_dims", "(", "k", ",", "(", "1", ",", "2", ",", "0", ")", ")", ",", "# [*, H, C_hidden, N_res]", "\n", ")", "\n", "a", "*=", "math", ".", "sqrt", "(", "1.0", "/", "(", "3", "*", "self", ".", "c_hidden", ")", ")", "\n", "a", "+=", "(", "math", ".", "sqrt", "(", "1.0", "/", "3", ")", "*", "permute_final_dims", "(", "b", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "\n", "# [*, N_res, N_res, H, P_q, 3]", "\n", "pt_att", "=", "q_pts", ".", "unsqueeze", "(", "-", "4", ")", "-", "k_pts", ".", "unsqueeze", "(", "-", "5", ")", "\n", "pt_att", "=", "pt_att", "**", "2", "\n", "\n", "# [*, N_res, N_res, H, P_q]", "\n", "pt_att", "=", "sum", "(", "torch", ".", "unbind", "(", "pt_att", ",", "dim", "=", "-", "1", ")", ")", "\n", "head_weights", "=", "self", ".", "softplus", "(", "self", ".", "head_weights", ")", ".", "view", "(", "\n", "*", "(", "(", "1", ",", ")", "*", "len", "(", "pt_att", ".", "shape", "[", ":", "-", "2", "]", ")", "+", "(", "-", "1", ",", "1", ")", ")", "\n", ")", "\n", "head_weights", "=", "head_weights", "*", "math", ".", "sqrt", "(", "\n", "1.0", "/", "(", "3", "*", "(", "self", ".", "no_qk_points", "*", "9.0", "/", "2", ")", ")", "\n", ")", "\n", "pt_att", "=", "pt_att", "*", "head_weights", "\n", "\n", "# [*, N_res, N_res, H]", "\n", "pt_att", "=", "torch", ".", "sum", "(", "pt_att", ",", "dim", "=", "-", "1", ")", "*", "(", "-", "0.5", ")", "\n", "# [*, N_res, N_res]", "\n", "square_mask", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", "*", "mask", ".", "unsqueeze", "(", "-", "2", ")", "\n", "square_mask", "=", "self", ".", "inf", "*", "(", "square_mask", "-", "1", ")", "\n", "\n", "# [*, H, N_res, N_res]", "\n", "pt_att", "=", "permute_final_dims", "(", "pt_att", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "a", "=", "a", "+", "pt_att", "\n", "a", "=", "a", "+", "square_mask", ".", "unsqueeze", "(", "-", "3", ")", "\n", "a", "=", "self", ".", "softmax", "(", "a", ")", "\n", "\n", "################", "\n", "# Compute output", "\n", "################", "\n", "# [*, N_res, H, C_hidden]", "\n", "o", "=", "torch", ".", "matmul", "(", "\n", "a", ",", "v", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", ".", "to", "(", "dtype", "=", "a", ".", "dtype", ")", "\n", ")", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "\n", "# [*, N_res, H * C_hidden]", "\n", "o", "=", "flatten_final_dims", "(", "o", ",", "2", ")", "\n", "\n", "# As DeepMind explains, this manual matmul ensures that the operation", "\n", "# happens in float32.", "\n", "# [*, H, 3, N_res, P_v]", "\n", "o_pt", "=", "torch", ".", "sum", "(", "\n", "(", "\n", "a", "[", "...", ",", "None", ",", ":", ",", ":", ",", "None", "]", "\n", "*", "permute_final_dims", "(", "v_pts", ",", "(", "1", ",", "3", ",", "0", ",", "2", ")", ")", "[", "...", ",", "None", ",", ":", ",", ":", "]", "\n", ")", ",", "\n", "dim", "=", "-", "2", ",", "\n", ")", "\n", "\n", "# [*, N_res, H, P_v, 3]", "\n", "o_pt", "=", "permute_final_dims", "(", "o_pt", ",", "(", "2", ",", "0", ",", "3", ",", "1", ")", ")", "\n", "o_pt", "=", "r", "[", "...", ",", "None", ",", "None", "]", ".", "invert_apply", "(", "o_pt", ")", "\n", "\n", "# [*, N_res, H * P_v]", "\n", "o_pt_norm", "=", "flatten_final_dims", "(", "\n", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "o_pt", "**", "2", ",", "dim", "=", "-", "1", ")", "+", "self", ".", "eps", ")", ",", "2", "\n", ")", "\n", "\n", "# [*, N_res, H * P_v, 3]", "\n", "o_pt", "=", "o_pt", ".", "reshape", "(", "*", "o_pt", ".", "shape", "[", ":", "-", "3", "]", ",", "-", "1", ",", "3", ")", "\n", "\n", "# [*, N_res, H, C_z]", "\n", "o_pair", "=", "torch", ".", "matmul", "(", "a", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", ",", "z", ".", "to", "(", "dtype", "=", "a", ".", "dtype", ")", ")", "\n", "\n", "# [*, N_res, H * C_z]", "\n", "o_pair", "=", "flatten_final_dims", "(", "o_pair", ",", "2", ")", "\n", "\n", "# [*, N_res, C_s]", "\n", "s", "=", "self", ".", "linear_out", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "o", ",", "*", "torch", ".", "unbind", "(", "o_pt", ",", "dim", "=", "-", "1", ")", ",", "o_pt_norm", ",", "o_pair", ")", ",", "dim", "=", "-", "1", "\n", ")", ".", "to", "(", "dtype", "=", "z", ".", "dtype", ")", "\n", ")", "\n", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.BackboneUpdate.__init__": [[385, 396], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_s", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_s:\n                Single representation channel dimension\n        \"\"\"", "\n", "super", "(", "BackboneUpdate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_s", "=", "c_s", "\n", "\n", "self", ".", "linear", "=", "Linear", "(", "self", ".", "c_s", ",", "6", ",", "init", "=", "\"final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.BackboneUpdate.forward": [[397, 408], ["structure_module.BackboneUpdate.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            [*, N_res, C_s] single representation\n        Returns:\n            [*, N_res, 6] update vector \n        \"\"\"", "\n", "# [*, 6]", "\n", "update", "=", "self", ".", "linear", "(", "s", ")", "\n", "\n", "return", "update", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModuleTransitionLayer.__init__": [[411, 421], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", ")", ":", "\n", "        ", "super", "(", "StructureModuleTransitionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c", "=", "c", "\n", "\n", "self", ".", "linear_1", "=", "Linear", "(", "self", ".", "c", ",", "self", ".", "c", ",", "init", "=", "\"relu\"", ")", "\n", "self", ".", "linear_2", "=", "Linear", "(", "self", ".", "c", ",", "self", ".", "c", ",", "init", "=", "\"relu\"", ")", "\n", "self", ".", "linear_3", "=", "Linear", "(", "self", ".", "c", ",", "self", ".", "c", ",", "init", "=", "\"final\"", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModuleTransitionLayer.forward": [[422, 433], ["structure_module.StructureModuleTransitionLayer.linear_1", "structure_module.StructureModuleTransitionLayer.relu", "structure_module.StructureModuleTransitionLayer.linear_2", "structure_module.StructureModuleTransitionLayer.relu", "structure_module.StructureModuleTransitionLayer.linear_3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ")", ":", "\n", "        ", "s_initial", "=", "s", "\n", "s", "=", "self", ".", "linear_1", "(", "s", ")", "\n", "s", "=", "self", ".", "relu", "(", "s", ")", "\n", "s", "=", "self", ".", "linear_2", "(", "s", ")", "\n", "s", "=", "self", ".", "relu", "(", "s", ")", "\n", "s", "=", "self", ".", "linear_3", "(", "s", ")", "\n", "\n", "s", "=", "s", "+", "s_initial", "\n", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModuleTransition.__init__": [[436, 450], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Dropout", "torch.Dropout", "fastfold.model.nn.primitives.LayerNorm", "structure_module.StructureModuleTransitionLayer", "structure_module.StructureModuleTransition.layers.append"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", ",", "num_layers", ",", "dropout_rate", ")", ":", "\n", "        ", "super", "(", "StructureModuleTransition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c", "=", "c", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "l", "=", "StructureModuleTransitionLayer", "(", "self", ".", "c", ")", "\n", "self", ".", "layers", ".", "append", "(", "l", ")", "\n", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_rate", ")", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "self", ".", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModuleTransition.forward": [[451, 459], ["structure_module.StructureModuleTransition.dropout", "structure_module.StructureModuleTransition.layer_norm", "l"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ")", ":", "\n", "        ", "for", "l", "in", "self", ".", "layers", ":", "\n", "            ", "s", "=", "l", "(", "s", ")", "\n", "\n", "", "s", "=", "self", ".", "dropout", "(", "s", ")", "\n", "s", "=", "self", ".", "layer_norm", "(", "s", ")", "\n", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModule.__init__": [[462, 572], ["torch.Module.__init__", "fastfold.model.nn.primitives.LayerNorm", "fastfold.model.nn.primitives.LayerNorm", "fastfold.model.nn.primitives.Linear", "structure_module.InvariantPointAttention", "torch.Dropout", "torch.Dropout", "fastfold.model.nn.primitives.LayerNorm", "structure_module.StructureModuleTransition", "structure_module.BackboneUpdate", "structure_module.AngleResnet"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "c_s", ",", "\n", "c_z", ",", "\n", "c_ipa", ",", "\n", "c_resnet", ",", "\n", "no_heads_ipa", ",", "\n", "no_qk_points", ",", "\n", "no_v_points", ",", "\n", "dropout_rate", ",", "\n", "no_blocks", ",", "\n", "no_transition_layers", ",", "\n", "no_resnet_blocks", ",", "\n", "no_angles", ",", "\n", "trans_scale_factor", ",", "\n", "epsilon", ",", "\n", "inf", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_s:\n                Single representation channel dimension\n            c_z:\n                Pair representation channel dimension\n            c_ipa:\n                IPA hidden channel dimension\n            c_resnet:\n                Angle resnet (Alg. 23 lines 11-14) hidden channel dimension\n            no_heads_ipa:\n                Number of IPA heads\n            no_qk_points:\n                Number of query/key points to generate during IPA\n            no_v_points:\n                Number of value points to generate during IPA\n            dropout_rate:\n                Dropout rate used throughout the layer\n            no_blocks:\n                Number of structure module blocks\n            no_transition_layers:\n                Number of layers in the single representation transition\n                (Alg. 23 lines 8-9)\n            no_resnet_blocks:\n                Number of blocks in the angle resnet\n            no_angles:\n                Number of angles to generate in the angle resnet\n            trans_scale_factor:\n                Scale of single representation transition hidden dimension\n            epsilon:\n                Small number used in angle resnet normalization\n            inf:\n                Large number used for attention masking\n        \"\"\"", "\n", "super", "(", "StructureModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_s", "=", "c_s", "\n", "self", ".", "c_z", "=", "c_z", "\n", "self", ".", "c_ipa", "=", "c_ipa", "\n", "self", ".", "c_resnet", "=", "c_resnet", "\n", "self", ".", "no_heads_ipa", "=", "no_heads_ipa", "\n", "self", ".", "no_qk_points", "=", "no_qk_points", "\n", "self", ".", "no_v_points", "=", "no_v_points", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "no_blocks", "=", "no_blocks", "\n", "self", ".", "no_transition_layers", "=", "no_transition_layers", "\n", "self", ".", "no_resnet_blocks", "=", "no_resnet_blocks", "\n", "self", ".", "no_angles", "=", "no_angles", "\n", "self", ".", "trans_scale_factor", "=", "trans_scale_factor", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "inf", "=", "inf", "\n", "\n", "# To be lazily initialized later", "\n", "self", ".", "default_frames", "=", "None", "\n", "self", ".", "group_idx", "=", "None", "\n", "self", ".", "atom_mask", "=", "None", "\n", "self", ".", "lit_positions", "=", "None", "\n", "\n", "self", ".", "layer_norm_s", "=", "LayerNorm", "(", "self", ".", "c_s", ")", "\n", "self", ".", "layer_norm_z", "=", "LayerNorm", "(", "self", ".", "c_z", ")", "\n", "\n", "self", ".", "linear_in", "=", "Linear", "(", "self", ".", "c_s", ",", "self", ".", "c_s", ")", "\n", "\n", "self", ".", "ipa", "=", "InvariantPointAttention", "(", "\n", "self", ".", "c_s", ",", "\n", "self", ".", "c_z", ",", "\n", "self", ".", "c_ipa", ",", "\n", "self", ".", "no_heads_ipa", ",", "\n", "self", ".", "no_qk_points", ",", "\n", "self", ".", "no_v_points", ",", "\n", "inf", "=", "self", ".", "inf", ",", "\n", "eps", "=", "self", ".", "epsilon", ",", "\n", ")", "\n", "\n", "self", ".", "ipa_dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_rate", ")", "\n", "self", ".", "layer_norm_ipa", "=", "LayerNorm", "(", "self", ".", "c_s", ")", "\n", "\n", "self", ".", "transition", "=", "StructureModuleTransition", "(", "\n", "self", ".", "c_s", ",", "\n", "self", ".", "no_transition_layers", ",", "\n", "self", ".", "dropout_rate", ",", "\n", ")", "\n", "\n", "self", ".", "bb_update", "=", "BackboneUpdate", "(", "self", ".", "c_s", ")", "\n", "\n", "self", ".", "angle_resnet", "=", "AngleResnet", "(", "\n", "self", ".", "c_s", ",", "\n", "self", ".", "c_resnet", ",", "\n", "self", ".", "no_resnet_blocks", ",", "\n", "self", ".", "no_angles", ",", "\n", "self", ".", "epsilon", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModule.forward": [[574, 675], ["structure_module.StructureModule.layer_norm_s", "structure_module.StructureModule.layer_norm_z", "structure_module.StructureModule.linear_in", "fastfold.utils.rigid_utils.Rigid.identity", "range", "fastfold.utils.tensor_utils.dict_multimap", "structure_module.StructureModule.new_ones", "structure_module.StructureModule.ipa_dropout", "structure_module.StructureModule.layer_norm_ipa", "structure_module.StructureModule.transition", "rigids.stop_rot_gradient.stop_rot_gradient.compose_q_update_vec", "fastfold.utils.rigid_utils.Rigid", "backb_to_global.scale_translation.scale_translation.scale_translation", "structure_module.StructureModule.angle_resnet", "structure_module.StructureModule.torsion_angles_to_frames", "structure_module.StructureModule.frames_and_literature_positions_to_atom14_pos", "rigids.stop_rot_gradient.stop_rot_gradient.scale_translation", "fastfold.utils.tensor_utils.dict_multimap.append", "structure_module.StructureModule.ipa", "structure_module.StructureModule.bb_update", "fastfold.utils.rigid_utils.Rotation", "rigids.stop_rot_gradient.stop_rot_gradient.get_trans", "rigids.stop_rot_gradient.scale_translation.to_tensor_7", "structure_module.StructureModule.to_tensor_4x4", "rigids.stop_rot_gradient.stop_rot_gradient.stop_rot_gradient", "rigids.stop_rot_gradient.stop_rot_gradient.get_rots().get_rot_mats", "rigids.stop_rot_gradient.stop_rot_gradient.get_rots"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.identity", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.dict_multimap", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.compose_q_update_vec", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.scale_translation", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModule.torsion_angles_to_frames", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModule.frames_and_literature_positions_to_atom14_pos", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.scale_translation", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_trans", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.to_tensor_7", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.to_tensor_4x4", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.stop_rot_gradient", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.get_rot_mats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_rots"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "s", ",", "\n", "z", ",", "\n", "aatype", ",", "\n", "mask", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            s:\n                [*, N_res, C_s] single representation\n            z:\n                [*, N_res, N_res, C_z] pair representation\n            aatype:\n                [*, N_res] amino acid indices\n            mask:\n                Optional [*, N_res] sequence mask\n        Returns:\n            A dictionary of outputs\n        \"\"\"", "\n", "if", "mask", "is", "None", ":", "\n", "# [*, N]", "\n", "            ", "mask", "=", "s", ".", "new_ones", "(", "s", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "# [*, N, C_s]", "\n", "", "s", "=", "self", ".", "layer_norm_s", "(", "s", ")", "\n", "\n", "# [*, N, N, C_z]", "\n", "z", "=", "self", ".", "layer_norm_z", "(", "z", ")", "\n", "\n", "# [*, N, C_s]", "\n", "s_initial", "=", "s", "\n", "s", "=", "self", ".", "linear_in", "(", "s", ")", "\n", "\n", "# [*, N]", "\n", "rigids", "=", "Rigid", ".", "identity", "(", "\n", "s", ".", "shape", "[", ":", "-", "1", "]", ",", "\n", "s", ".", "dtype", ",", "\n", "s", ".", "device", ",", "\n", "self", ".", "training", ",", "\n", "fmt", "=", "\"quat\"", ",", "\n", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "no_blocks", ")", ":", "\n", "# [*, N, C_s]", "\n", "            ", "s", "=", "s", "+", "self", ".", "ipa", "(", "s", ",", "z", ",", "rigids", ",", "mask", ")", "\n", "s", "=", "self", ".", "ipa_dropout", "(", "s", ")", "\n", "s", "=", "self", ".", "layer_norm_ipa", "(", "s", ")", "\n", "s", "=", "self", ".", "transition", "(", "s", ")", "\n", "\n", "# [*, N]", "\n", "rigids", "=", "rigids", ".", "compose_q_update_vec", "(", "self", ".", "bb_update", "(", "s", ")", ")", "\n", "\n", "# To hew as closely as possible to AlphaFold, we convert our", "\n", "# quaternion-based transformations to rotation-matrix ones", "\n", "# here", "\n", "backb_to_global", "=", "Rigid", "(", "\n", "Rotation", "(", "\n", "rot_mats", "=", "rigids", ".", "get_rots", "(", ")", ".", "get_rot_mats", "(", ")", ",", "\n", "quats", "=", "None", "\n", ")", ",", "\n", "rigids", ".", "get_trans", "(", ")", ",", "\n", ")", "\n", "\n", "backb_to_global", "=", "backb_to_global", ".", "scale_translation", "(", "\n", "self", ".", "trans_scale_factor", "\n", ")", "\n", "\n", "# [*, N, 7, 2]", "\n", "unnormalized_angles", ",", "angles", "=", "self", ".", "angle_resnet", "(", "s", ",", "s_initial", ")", "\n", "\n", "all_frames_to_global", "=", "self", ".", "torsion_angles_to_frames", "(", "\n", "backb_to_global", ",", "\n", "angles", ",", "\n", "aatype", ",", "\n", ")", "\n", "\n", "pred_xyz", "=", "self", ".", "frames_and_literature_positions_to_atom14_pos", "(", "\n", "all_frames_to_global", ",", "\n", "aatype", ",", "\n", ")", "\n", "\n", "scaled_rigids", "=", "rigids", ".", "scale_translation", "(", "self", ".", "trans_scale_factor", ")", "\n", "\n", "preds", "=", "{", "\n", "\"frames\"", ":", "scaled_rigids", ".", "to_tensor_7", "(", ")", ",", "\n", "\"sidechain_frames\"", ":", "all_frames_to_global", ".", "to_tensor_4x4", "(", ")", ",", "\n", "\"unnormalized_angles\"", ":", "unnormalized_angles", ",", "\n", "\"angles\"", ":", "angles", ",", "\n", "\"positions\"", ":", "pred_xyz", ",", "\n", "}", "\n", "\n", "outputs", ".", "append", "(", "preds", ")", "\n", "\n", "if", "i", "<", "(", "self", ".", "no_blocks", "-", "1", ")", ":", "\n", "                ", "rigids", "=", "rigids", ".", "stop_rot_gradient", "(", ")", "\n", "\n", "", "", "outputs", "=", "dict_multimap", "(", "torch", ".", "stack", ",", "outputs", ")", "\n", "outputs", "[", "\"single\"", "]", "=", "s", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModule._init_residue_constants": [[676, 703], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "_init_residue_constants", "(", "self", ",", "float_dtype", ",", "device", ")", ":", "\n", "        ", "if", "self", ".", "default_frames", "is", "None", ":", "\n", "            ", "self", ".", "default_frames", "=", "torch", ".", "tensor", "(", "\n", "restype_rigid_group_default_frame", ",", "\n", "dtype", "=", "float_dtype", ",", "\n", "device", "=", "device", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "\n", "", "if", "self", ".", "group_idx", "is", "None", ":", "\n", "            ", "self", ".", "group_idx", "=", "torch", ".", "tensor", "(", "\n", "restype_atom14_to_rigid_group", ",", "\n", "device", "=", "device", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "\n", "", "if", "self", ".", "atom_mask", "is", "None", ":", "\n", "            ", "self", ".", "atom_mask", "=", "torch", ".", "tensor", "(", "\n", "restype_atom14_mask", ",", "\n", "dtype", "=", "float_dtype", ",", "\n", "device", "=", "device", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "\n", "", "if", "self", ".", "lit_positions", "is", "None", ":", "\n", "            ", "self", ".", "lit_positions", "=", "torch", ".", "tensor", "(", "\n", "restype_atom14_rigid_group_positions", ",", "\n", "dtype", "=", "float_dtype", ",", "\n", "device", "=", "device", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModule.torsion_angles_to_frames": [[705, 710], ["structure_module.StructureModule._init_residue_constants", "fastfold.utils.feats.torsion_angles_to_frames"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModule._init_residue_constants", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModule.torsion_angles_to_frames"], ["", "", "def", "torsion_angles_to_frames", "(", "self", ",", "r", ",", "alpha", ",", "f", ")", ":", "\n", "# Lazily initialize the residue constants on the correct device", "\n", "        ", "self", ".", "_init_residue_constants", "(", "alpha", ".", "dtype", ",", "alpha", ".", "device", ")", "\n", "# Separated purely to make testing less annoying", "\n", "return", "torsion_angles_to_frames", "(", "r", ",", "alpha", ",", "f", ",", "self", ".", "default_frames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModule.frames_and_literature_positions_to_atom14_pos": [[711, 723], ["structure_module.StructureModule._init_residue_constants", "fastfold.utils.feats.frames_and_literature_positions_to_atom14_pos", "r.get_rots", "r.get_rots"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModule._init_residue_constants", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.structure_module.StructureModule.frames_and_literature_positions_to_atom14_pos", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_rots", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.get_rots"], ["", "def", "frames_and_literature_positions_to_atom14_pos", "(", "\n", "self", ",", "r", ",", "f", "# [*, N, 8]  # [*, N]", "\n", ")", ":", "\n", "# Lazily initialize the residue constants on the correct device", "\n", "        ", "self", ".", "_init_residue_constants", "(", "r", ".", "get_rots", "(", ")", ".", "dtype", ",", "r", ".", "get_rots", "(", ")", ".", "device", ")", "\n", "return", "frames_and_literature_positions_to_atom14_pos", "(", "\n", "r", ",", "\n", "f", ",", "\n", "self", ".", "default_frames", ",", "\n", "self", ".", "group_idx", ",", "\n", "self", ".", "atom_mask", ",", "\n", "self", ".", "lit_positions", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.heads.AuxiliaryHeads.__init__": [[28, 53], ["torch.Module.__init__", "heads.PerResidueLDDTCaPredictor", "heads.DistogramHead", "heads.MaskedMSAHead", "heads.ExperimentallyResolvedHead", "heads.TMScoreHead"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AuxiliaryHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "plddt", "=", "PerResidueLDDTCaPredictor", "(", "\n", "**", "config", "[", "\"lddt\"", "]", ",", "\n", ")", "\n", "\n", "self", ".", "distogram", "=", "DistogramHead", "(", "\n", "**", "config", "[", "\"distogram\"", "]", ",", "\n", ")", "\n", "\n", "self", ".", "masked_msa", "=", "MaskedMSAHead", "(", "\n", "**", "config", "[", "\"masked_msa\"", "]", ",", "\n", ")", "\n", "\n", "self", ".", "experimentally_resolved", "=", "ExperimentallyResolvedHead", "(", "\n", "**", "config", "[", "\"experimentally_resolved\"", "]", ",", "\n", ")", "\n", "\n", "if", "config", ".", "tm", ".", "enabled", ":", "\n", "            ", "self", ".", "tm", "=", "TMScoreHead", "(", "\n", "**", "config", ".", "tm", ",", "\n", ")", "\n", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.heads.AuxiliaryHeads.forward": [[54, 89], ["heads.AuxiliaryHeads.plddt", "fastfold.model.loss.compute_plddt", "heads.AuxiliaryHeads.distogram", "heads.AuxiliaryHeads.masked_msa", "heads.AuxiliaryHeads.experimentally_resolved", "heads.AuxiliaryHeads.tm", "fastfold.model.loss.compute_tm", "aux_out.update", "fastfold.model.loss.compute_predicted_aligned_error"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_plddt", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_tm", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_predicted_aligned_error"], ["", "def", "forward", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "aux_out", "=", "{", "}", "\n", "lddt_logits", "=", "self", ".", "plddt", "(", "outputs", "[", "\"sm\"", "]", "[", "\"single\"", "]", ")", "\n", "aux_out", "[", "\"lddt_logits\"", "]", "=", "lddt_logits", "\n", "\n", "# Required for relaxation later on", "\n", "aux_out", "[", "\"plddt\"", "]", "=", "compute_plddt", "(", "lddt_logits", ")", "\n", "\n", "distogram_logits", "=", "self", ".", "distogram", "(", "outputs", "[", "\"pair\"", "]", ")", "\n", "aux_out", "[", "\"distogram_logits\"", "]", "=", "distogram_logits", "\n", "\n", "masked_msa_logits", "=", "self", ".", "masked_msa", "(", "outputs", "[", "\"msa\"", "]", ")", "\n", "aux_out", "[", "\"masked_msa_logits\"", "]", "=", "masked_msa_logits", "\n", "\n", "experimentally_resolved_logits", "=", "self", ".", "experimentally_resolved", "(", "\n", "outputs", "[", "\"single\"", "]", "\n", ")", "\n", "aux_out", "[", "\n", "\"experimentally_resolved_logits\"", "\n", "]", "=", "experimentally_resolved_logits", "\n", "\n", "if", "self", ".", "config", ".", "tm", ".", "enabled", ":", "\n", "            ", "tm_logits", "=", "self", ".", "tm", "(", "outputs", "[", "\"pair\"", "]", ")", "\n", "aux_out", "[", "\"tm_logits\"", "]", "=", "tm_logits", "\n", "aux_out", "[", "\"predicted_tm_score\"", "]", "=", "compute_tm", "(", "\n", "tm_logits", ",", "**", "self", ".", "config", ".", "tm", "\n", ")", "\n", "aux_out", ".", "update", "(", "\n", "compute_predicted_aligned_error", "(", "\n", "tm_logits", ",", "\n", "**", "self", ".", "config", ".", "tm", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "aux_out", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.heads.PerResidueLDDTCaPredictor.__init__": [[92, 106], ["torch.Module.__init__", "fastfold.model.nn.primitives.LayerNorm", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "no_bins", ",", "c_in", ",", "c_hidden", ")", ":", "\n", "        ", "super", "(", "PerResidueLDDTCaPredictor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "no_bins", "=", "no_bins", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "self", ".", "c_in", ")", "\n", "\n", "self", ".", "linear_1", "=", "Linear", "(", "self", ".", "c_in", ",", "self", ".", "c_hidden", ",", "init", "=", "\"relu\"", ")", "\n", "self", ".", "linear_2", "=", "Linear", "(", "self", ".", "c_hidden", ",", "self", ".", "c_hidden", ",", "init", "=", "\"relu\"", ")", "\n", "self", ".", "linear_3", "=", "Linear", "(", "self", ".", "c_hidden", ",", "self", ".", "no_bins", ",", "init", "=", "\"final\"", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.heads.PerResidueLDDTCaPredictor.forward": [[107, 116], ["heads.PerResidueLDDTCaPredictor.layer_norm", "heads.PerResidueLDDTCaPredictor.linear_1", "heads.PerResidueLDDTCaPredictor.relu", "heads.PerResidueLDDTCaPredictor.linear_2", "heads.PerResidueLDDTCaPredictor.relu", "heads.PerResidueLDDTCaPredictor.linear_3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ")", ":", "\n", "        ", "s", "=", "self", ".", "layer_norm", "(", "s", ")", "\n", "s", "=", "self", ".", "linear_1", "(", "s", ")", "\n", "s", "=", "self", ".", "relu", "(", "s", ")", "\n", "s", "=", "self", ".", "linear_2", "(", "s", ")", "\n", "s", "=", "self", ".", "relu", "(", "s", ")", "\n", "s", "=", "self", ".", "linear_3", "(", "s", ")", "\n", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.heads.DistogramHead.__init__": [[125, 139], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_z", ",", "no_bins", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_z:\n                Input channel dimension\n            no_bins:\n                Number of distogram bins\n        \"\"\"", "\n", "super", "(", "DistogramHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_z", "=", "c_z", "\n", "self", ".", "no_bins", "=", "no_bins", "\n", "\n", "self", ".", "linear", "=", "Linear", "(", "self", ".", "c_z", ",", "self", ".", "no_bins", ",", "init", "=", "\"final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.heads.DistogramHead.forward": [[140, 152], ["heads.DistogramHead.linear", "heads.DistogramHead.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "# [*, N, N, C_z]", "\n", "        ", "\"\"\"\n        Args:\n            z:\n                [*, N_res, N_res, C_z] pair embedding\n        Returns:\n            [*, N, N, no_bins] distogram probability distribution\n        \"\"\"", "\n", "# [*, N, N, no_bins]", "\n", "logits", "=", "self", ".", "linear", "(", "z", ")", "\n", "logits", "=", "logits", "+", "logits", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.heads.TMScoreHead.__init__": [[159, 173], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_z", ",", "no_bins", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_z:\n                Input channel dimension\n            no_bins:\n                Number of bins\n        \"\"\"", "\n", "super", "(", "TMScoreHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_z", "=", "c_z", "\n", "self", ".", "no_bins", "=", "no_bins", "\n", "\n", "self", ".", "linear", "=", "Linear", "(", "self", ".", "c_z", ",", "self", ".", "no_bins", ",", "init", "=", "\"final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.heads.TMScoreHead.forward": [[174, 185], ["heads.TMScoreHead.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            z:\n                [*, N_res, N_res, C_z] pairwise embedding\n        Returns:\n            [*, N_res, N_res, no_bins] prediction\n        \"\"\"", "\n", "# [*, N, N, no_bins]", "\n", "logits", "=", "self", ".", "linear", "(", "z", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.heads.MaskedMSAHead.__init__": [[192, 206], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_m", ",", "c_out", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_m:\n                MSA channel dimension\n            c_out:\n                Output channel dimension\n        \"\"\"", "\n", "super", "(", "MaskedMSAHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_m", "=", "c_m", "\n", "self", ".", "c_out", "=", "c_out", "\n", "\n", "self", ".", "linear", "=", "Linear", "(", "self", ".", "c_m", ",", "self", ".", "c_out", ",", "init", "=", "\"final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.heads.MaskedMSAHead.forward": [[207, 218], ["heads.MaskedMSAHead.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "m", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            m:\n                [*, N_seq, N_res, C_m] MSA embedding\n        Returns:\n            [*, N_seq, N_res, C_out] reconstruction\n        \"\"\"", "\n", "# [*, N_seq, N_res, C_out]", "\n", "logits", "=", "self", ".", "linear", "(", "m", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.heads.ExperimentallyResolvedHead.__init__": [[226, 240], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_s", ",", "c_out", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_s:\n                Input channel dimension\n            c_out:\n                Number of distogram bins\n        \"\"\"", "\n", "super", "(", "ExperimentallyResolvedHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_s", "=", "c_s", "\n", "self", ".", "c_out", "=", "c_out", "\n", "\n", "self", ".", "linear", "=", "Linear", "(", "self", ".", "c_s", ",", "self", ".", "c_out", ",", "init", "=", "\"final\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.heads.ExperimentallyResolvedHead.forward": [[241, 252], ["heads.ExperimentallyResolvedHead.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            s:\n                [*, N_res, C_s] single embedding\n        Returns:\n            [*, N, C_out] logits\n        \"\"\"", "\n", "# [*, N, C_out]", "\n", "logits", "=", "self", ".", "linear", "(", "s", ")", "\n", "return", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.dropout.Dropout.__init__": [[30, 45], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "type"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "r", ":", "float", ",", "batch_dim", ":", "Union", "[", "int", ",", "List", "[", "int", "]", "]", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            r:\n                Dropout rate\n            batch_dim:\n                Dimension(s) along which the dropout mask is shared\n        \"\"\"", "\n", "super", "(", "Dropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "r", "=", "r", "\n", "if", "type", "(", "batch_dim", ")", "==", "int", ":", "\n", "            ", "batch_dim", "=", "[", "batch_dim", "]", "\n", "", "self", ".", "batch_dim", "=", "batch_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "r", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.dropout.Dropout.forward": [[46, 61], ["list", "x.new_ones", "dropout.Dropout.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            x:\n                Tensor to which dropout is applied. Can have any shape\n                compatible with self.batch_dim\n        \"\"\"", "\n", "shape", "=", "list", "(", "x", ".", "shape", ")", "\n", "if", "self", ".", "batch_dim", "is", "not", "None", ":", "\n", "            ", "for", "bd", "in", "self", ".", "batch_dim", ":", "\n", "                ", "shape", "[", "bd", "]", "=", "1", "\n", "", "", "mask", "=", "x", ".", "new_ones", "(", "shape", ")", "\n", "mask", "=", "self", ".", "dropout", "(", "mask", ")", "\n", "x", "*=", "mask", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAAttention.__init__": [[37, 83], ["torch.Module.__init__", "fastfold.model.nn.primitives.LayerNorm", "fastfold.model.nn.primitives.Attention", "fastfold.model.nn.primitives.LayerNorm", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "c_in", ",", "\n", "c_hidden", ",", "\n", "no_heads", ",", "\n", "pair_bias", "=", "False", ",", "\n", "c_z", "=", "None", ",", "\n", "inf", "=", "1e9", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_in:\n                Input channel dimension\n            c_hidden:\n                Per-head hidden channel dimension\n            no_heads:\n                Number of attention heads\n            pair_bias:\n                Whether to use pair embedding bias\n            c_z:\n                Pair embedding channel dimension. Ignored unless pair_bias\n                is true\n            inf:\n                A large number to be used in computing the attention mask\n        \"\"\"", "\n", "super", "(", "MSAAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "self", ".", "no_heads", "=", "no_heads", "\n", "self", ".", "pair_bias", "=", "pair_bias", "\n", "self", ".", "c_z", "=", "c_z", "\n", "self", ".", "inf", "=", "inf", "\n", "\n", "self", ".", "layer_norm_m", "=", "LayerNorm", "(", "self", ".", "c_in", ")", "\n", "\n", "self", ".", "layer_norm_z", "=", "None", "\n", "self", ".", "linear_z", "=", "None", "\n", "if", "self", ".", "pair_bias", ":", "\n", "            ", "self", ".", "layer_norm_z", "=", "LayerNorm", "(", "self", ".", "c_z", ")", "\n", "self", ".", "linear_z", "=", "Linear", "(", "\n", "self", ".", "c_z", ",", "self", ".", "no_heads", ",", "bias", "=", "False", ",", "init", "=", "\"normal\"", "\n", ")", "\n", "\n", "", "self", ".", "mha", "=", "Attention", "(", "\n", "self", ".", "c_in", ",", "self", ".", "c_in", ",", "self", ".", "c_in", ",", "self", ".", "c_hidden", ",", "self", ".", "no_heads", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAAttention._chunk": [[85, 96], ["fastfold.utils.tensor_utils.chunk_layer", "len"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.chunk_layer"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_chunk", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "biases", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "chunk_size", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "chunk_layer", "(", "\n", "self", ".", "mha", ",", "\n", "{", "\"q_x\"", ":", "m", ",", "\"kv_x\"", ":", "m", ",", "\"biases\"", ":", "biases", "}", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "no_batch_dims", "=", "len", "(", "m", ".", "shape", "[", ":", "-", "2", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAAttention._prep_inputs": [[98, 138], ["msa.MSAAttention.layer_norm_m", "msa.MSAAttention.new_ones", "msa.MSAAttention.layer_norm_z", "msa.MSAAttention.linear_z", "fastfold.utils.tensor_utils.permute_final_dims().unsqueeze", "fastfold.utils.tensor_utils.permute_final_dims"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims"], ["", "def", "_prep_inputs", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "Optional", "[", "torch", ".", "Tensor", "]", ",", "\n", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# [*, N_seq, N_res, C_m]", "\n", "        ", "m", "=", "self", ".", "layer_norm_m", "(", "m", ")", "\n", "\n", "n_seq", ",", "n_res", "=", "m", ".", "shape", "[", "-", "3", ":", "-", "1", "]", "\n", "if", "mask", "is", "None", ":", "\n", "# [*, N_seq, N_res]", "\n", "            ", "mask", "=", "m", ".", "new_ones", "(", "\n", "m", ".", "shape", "[", ":", "-", "3", "]", "+", "(", "n_seq", ",", "n_res", ")", ",", "\n", ")", "\n", "\n", "# [*, N_seq, 1, 1, N_res]", "\n", "", "mask_bias", "=", "(", "self", ".", "inf", "*", "(", "mask", "-", "1", ")", ")", "[", "...", ",", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "# This step simply returns a larger view of the bias, and does not", "\n", "# consume additional memory.", "\n", "# [*, N_seq, no_heads, N_res, N_res]", "\n", "#bias = bias.expand(", "\n", "#    ((-1,) * len(bias.shape[:-4])) + (-1, self.no_heads, n_res, -1)", "\n", "#)", "\n", "\n", "if", "(", "self", ".", "pair_bias", "and", "\n", "z", "is", "not", "None", "and", "# For the ", "\n", "self", ".", "layer_norm_z", "is", "not", "None", "and", "# benefit of", "\n", "self", ".", "linear_z", "is", "not", "None", "# TorchScript", "\n", ")", ":", "\n", "# [*, N_res, N_res, C_z]", "\n", "            ", "z", "=", "self", ".", "layer_norm_z", "(", "z", ")", "\n", "\n", "# [*, N_res, N_res, no_heads]", "\n", "z", "=", "self", ".", "linear_z", "(", "z", ")", "\n", "\n", "# [*, 1, no_heads, N_res, N_res]", "\n", "z", "=", "permute_final_dims", "(", "z", ",", "(", "2", ",", "0", ",", "1", ")", ")", ".", "unsqueeze", "(", "-", "4", ")", "\n", "\n", "", "return", "m", ",", "mask_bias", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAAttention._chunked_msa_attn": [[139, 178], ["fastfold.utils.checkpointing.get_checkpoint_fn", "fastfold.model.nn.primitives._attention_chunked_trainable", "msa.MSAAttention._prep_inputs", "msa.MSAAttention.mha._prep_qkv", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "fastfold.utils.checkpointing.get_checkpoint_fn.", "msa.MSAAttention._chunked_msa_attn._get_qkv"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.checkpointing.get_checkpoint_fn", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives._attention_chunked_trainable", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAAttention._prep_inputs", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.primitives.Attention._prep_qkv"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_chunked_msa_attn", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "Optional", "[", "torch", ".", "Tensor", "]", ",", "\n", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", ",", "\n", "chunk_logits", ":", "int", ",", "\n", "checkpoint", ":", "bool", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "MSA_DIM", "=", "-", "4", "\n", "\n", "def", "_get_qkv", "(", "m", ",", "z", ")", ":", "\n", "            ", "m", ",", "mask_bias", ",", "z", "=", "self", ".", "_prep_inputs", "(", "m", ",", "z", ",", "mask", ")", "\n", "q", ",", "k", ",", "v", "=", "self", ".", "mha", ".", "_prep_qkv", "(", "m", ",", "m", ")", "\n", "return", "m", ",", "q", ",", "k", ",", "v", ",", "mask_bias", ",", "z", "\n", "\n", "", "checkpoint_fn", "=", "get_checkpoint_fn", "(", ")", "\n", "\n", "if", "(", "torch", ".", "is_grad_enabled", "(", ")", "and", "checkpoint", ")", ":", "\n", "            ", "m", ",", "q", ",", "k", ",", "v", ",", "mask_bias", ",", "z", "=", "checkpoint_fn", "(", "_get_qkv", ",", "m", ",", "z", ")", "\n", "", "else", ":", "\n", "            ", "m", ",", "q", ",", "k", ",", "v", ",", "mask_bias", ",", "z", "=", "_get_qkv", "(", "m", ",", "z", ")", "\n", "\n", "", "o", "=", "_attention_chunked_trainable", "(", "\n", "query", "=", "q", ",", "\n", "key", "=", "k", ",", "\n", "value", "=", "v", ",", "\n", "biases", "=", "[", "mask_bias", ",", "z", "]", ",", "\n", "chunk_size", "=", "chunk_logits", ",", "\n", "chunk_dim", "=", "MSA_DIM", ",", "\n", "checkpoint", "=", "checkpoint", ",", "\n", ")", "\n", "\n", "if", "(", "torch", ".", "is_grad_enabled", "(", ")", "and", "checkpoint", ")", ":", "\n", "# Storing an additional m here is far from ideal", "\n", "            ", "m", "=", "checkpoint_fn", "(", "self", ".", "mha", ".", "_wrap_up", ",", "o", ",", "m", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "self", ".", "mha", ".", "_wrap_up", "(", "o", ",", "m", ")", "\n", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAAttention.forward": [[179, 224], ["msa.MSAAttention._prep_inputs", "msa.MSAAttention._chunked_msa_attn", "biases.append", "msa.MSAAttention._chunk", "msa.MSAAttention.mha"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAAttention._prep_inputs", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAAttention._chunked_msa_attn", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_attention.TriangleAttention._chunk"], ["", "def", "forward", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "_chunk_logits", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "_checkpoint_chunks", ":", "Optional", "[", "bool", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            m:\n                [*, N_seq, N_res, C_m] MSA embedding\n            z:\n                [*, N_res, N_res, C_z] pair embedding. Required only if\n                pair_bias is True\n            mask:\n                [*, N_seq, N_res] MSA mask\n            chunk_size:\n                Size of chunks into which the inputs are split along their\n                batch dimensions. A low value decreases memory overhead at the \n                cost of slower execution. Chunking is not performed by default.\n                \n        \"\"\"", "\n", "if", "(", "_chunk_logits", "is", "not", "None", ")", ":", "\n", "            ", "return", "self", ".", "_chunked_msa_attn", "(", "\n", "m", "=", "m", ",", "z", "=", "z", ",", "mask", "=", "mask", ",", "\n", "chunk_logits", "=", "_chunk_logits", ",", "checkpoint", "=", "_checkpoint_chunks", "\n", ")", "\n", "\n", "", "m", ",", "mask_bias", ",", "z", "=", "self", ".", "_prep_inputs", "(", "m", ",", "z", ",", "mask", ")", "\n", "\n", "biases", "=", "[", "mask_bias", "]", "\n", "if", "(", "z", "is", "not", "None", ")", ":", "\n", "            ", "biases", ".", "append", "(", "z", ")", "\n", "\n", "", "if", "chunk_size", "is", "not", "None", ":", "\n", "            ", "m", "=", "self", ".", "_chunk", "(", "m", ",", "biases", ",", "chunk_size", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "self", ".", "mha", "(", "\n", "q_x", "=", "m", ",", "\n", "kv_x", "=", "m", ",", "\n", "biases", "=", "biases", "\n", ")", "\n", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSARowAttentionWithPairBias.__init__": [[231, 252], ["msa.MSAAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_m", ",", "c_z", ",", "c_hidden", ",", "no_heads", ",", "inf", "=", "1e9", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_m:\n                Input channel dimension\n            c_z:\n                Pair embedding channel dimension\n            c_hidden:\n                Per-head hidden channel dimension\n            no_heads:\n                Number of attention heads\n            inf:\n                Large number used to construct attention masks\n        \"\"\"", "\n", "super", "(", "MSARowAttentionWithPairBias", ",", "self", ")", ".", "__init__", "(", "\n", "c_m", ",", "\n", "c_hidden", ",", "\n", "no_heads", ",", "\n", "pair_bias", "=", "True", ",", "\n", "c_z", "=", "c_z", ",", "\n", "inf", "=", "inf", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAColumnAttention.__init__": [[263, 289], ["torch.Module.__init__", "msa.MSAAttention"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_m", ",", "c_hidden", ",", "no_heads", ",", "inf", "=", "1e9", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_m:\n                MSA channel dimension\n            c_hidden:\n                Per-head hidden channel dimension\n            no_heads:\n                Number of attention heads\n            inf:\n                Large number used to construct attention masks\n        \"\"\"", "\n", "super", "(", "MSAColumnAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_m", "=", "c_m", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "self", ".", "no_heads", "=", "no_heads", "\n", "self", ".", "inf", "=", "inf", "\n", "\n", "self", ".", "_msa_att", "=", "MSAAttention", "(", "\n", "c_in", "=", "c_m", ",", "\n", "c_hidden", "=", "c_hidden", ",", "\n", "no_heads", "=", "no_heads", ",", "\n", "pair_bias", "=", "False", ",", "\n", "c_z", "=", "None", ",", "\n", "inf", "=", "inf", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAColumnAttention.forward": [[291, 320], ["m.transpose.transpose.transpose", "msa.MSAColumnAttention._msa_att", "m.transpose.transpose.transpose", "mask.transpose.transpose.transpose", "mask.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            m:\n                [*, N_seq, N_res, C_m] MSA embedding\n            mask:\n                [*, N_seq, N_res] MSA mask\n            chunk_size:\n                Size of chunks into which the inputs are split along their\n                batch dimensions. A low value decreases memory overhead at the \n                cost of slower execution. Chunking is not performed by default.\n        \"\"\"", "\n", "# [*, N_res, N_seq, C_in]", "\n", "m", "=", "m", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n", "", "m", "=", "self", ".", "_msa_att", "(", "m", ",", "mask", "=", "mask", ",", "chunk_size", "=", "chunk_size", ")", "\n", "\n", "# [*, N_seq, N_res, C_in]", "\n", "m", "=", "m", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAColumnGlobalAttention.__init__": [[323, 342], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "fastfold.model.nn.primitives.GlobalAttention"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "c_in", ",", "c_hidden", ",", "no_heads", ",", "inf", "=", "1e9", ",", "eps", "=", "1e-10", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MSAColumnGlobalAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "self", ".", "no_heads", "=", "no_heads", "\n", "self", ".", "inf", "=", "inf", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "self", ".", "layer_norm_m", "=", "nn", ".", "LayerNorm", "(", "c_in", ")", "\n", "\n", "self", ".", "global_attention", "=", "GlobalAttention", "(", "\n", "c_in", "=", "c_in", ",", "\n", "c_hidden", "=", "c_hidden", ",", "\n", "no_heads", "=", "no_heads", ",", "\n", "inf", "=", "inf", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAColumnGlobalAttention._chunk": [[344, 359], ["fastfold.utils.tensor_utils.chunk_layer", "len"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.chunk_layer"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_chunk", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", "chunk_size", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "mha_input", "=", "{", "\n", "\"m\"", ":", "m", ",", "\n", "\"mask\"", ":", "mask", ",", "\n", "}", "\n", "return", "chunk_layer", "(", "\n", "self", ".", "global_attention", ",", "\n", "mha_input", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "no_batch_dims", "=", "len", "(", "m", ".", "shape", "[", ":", "-", "2", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.msa.MSAColumnGlobalAttention.forward": [[361, 393], ["msa.MSAColumnGlobalAttention.transpose", "torch.ones().detach.transpose", "torch.ones().detach.transpose", "msa.MSAColumnGlobalAttention.layer_norm_m", "msa.MSAColumnGlobalAttention.transpose", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "torch.ones().detach", "msa.MSAColumnGlobalAttention._chunk", "msa.MSAColumnGlobalAttention.global_attention", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.detach", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_attention.TriangleAttention._chunk"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "n_seq", ",", "n_res", ",", "c_in", "=", "m", ".", "shape", "[", "-", "3", ":", "]", "\n", "\n", "if", "mask", "is", "None", ":", "\n", "# [*, N_seq, N_res]", "\n", "            ", "mask", "=", "torch", ".", "ones", "(", "\n", "m", ".", "shape", "[", ":", "-", "1", "]", ",", "\n", "dtype", "=", "m", ".", "dtype", ",", "\n", "device", "=", "m", ".", "device", ",", "\n", ")", ".", "detach", "(", ")", "\n", "\n", "# [*, N_res, N_seq, C_in]", "\n", "", "m", "=", "m", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n", "# [*, N_res, N_seq, C_in]", "\n", "m", "=", "self", ".", "layer_norm_m", "(", "m", ")", "\n", "\n", "if", "chunk_size", "is", "not", "None", ":", "\n", "            ", "m", "=", "self", ".", "_chunk", "(", "m", ",", "mask", ",", "chunk_size", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "self", ".", "global_attention", "(", "m", "=", "m", ",", "mask", "=", "mask", ")", "\n", "\n", "# [*, N_seq, N_res, C_in]", "\n", "", "m", "=", "m", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "\n", "return", "m", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_multiplicative_update.TriangleMultiplicativeUpdate.__init__": [[30, 54], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.LayerNorm", "fastfold.model.nn.primitives.LayerNorm", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_z", ",", "c_hidden", ",", "_outgoing", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_z:\n                Input channel dimension\n            c:\n                Hidden channel dimension\n        \"\"\"", "\n", "super", "(", "TriangleMultiplicativeUpdate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c_z", "=", "c_z", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "self", ".", "_outgoing", "=", "_outgoing", "\n", "\n", "self", ".", "linear_a_p", "=", "Linear", "(", "self", ".", "c_z", ",", "self", ".", "c_hidden", ")", "\n", "self", ".", "linear_a_g", "=", "Linear", "(", "self", ".", "c_z", ",", "self", ".", "c_hidden", ",", "init", "=", "\"gating\"", ")", "\n", "self", ".", "linear_b_p", "=", "Linear", "(", "self", ".", "c_z", ",", "self", ".", "c_hidden", ")", "\n", "self", ".", "linear_b_g", "=", "Linear", "(", "self", ".", "c_z", ",", "self", ".", "c_hidden", ",", "init", "=", "\"gating\"", ")", "\n", "self", ".", "linear_g", "=", "Linear", "(", "self", ".", "c_z", ",", "self", ".", "c_z", ",", "init", "=", "\"gating\"", ")", "\n", "self", ".", "linear_z", "=", "Linear", "(", "self", ".", "c_hidden", ",", "self", ".", "c_z", ",", "init", "=", "\"final\"", ")", "\n", "\n", "self", ".", "layer_norm_in", "=", "LayerNorm", "(", "self", ".", "c_z", ")", "\n", "self", ".", "layer_norm_out", "=", "LayerNorm", "(", "self", ".", "c_hidden", ")", "\n", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_multiplicative_update.TriangleMultiplicativeUpdate._combine_projections": [[55, 60], ["NotImplementedError"], "methods", ["None"], ["", "def", "_combine_projections", "(", "self", ",", "\n", "a", ":", "torch", ".", "Tensor", ",", "\n", "b", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"This method needs to be overridden\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_multiplicative_update.TriangleMultiplicativeUpdate.forward": [[61, 91], ["triangular_multiplicative_update.TriangleMultiplicativeUpdate.new_ones.unsqueeze", "triangular_multiplicative_update.TriangleMultiplicativeUpdate.layer_norm_in", "triangular_multiplicative_update.TriangleMultiplicativeUpdate._combine_projections", "triangular_multiplicative_update.TriangleMultiplicativeUpdate.layer_norm_out", "triangular_multiplicative_update.TriangleMultiplicativeUpdate.linear_z", "triangular_multiplicative_update.TriangleMultiplicativeUpdate.sigmoid", "triangular_multiplicative_update.TriangleMultiplicativeUpdate.new_ones", "triangular_multiplicative_update.TriangleMultiplicativeUpdate.linear_a_p", "triangular_multiplicative_update.TriangleMultiplicativeUpdate.sigmoid", "triangular_multiplicative_update.TriangleMultiplicativeUpdate.linear_b_p", "triangular_multiplicative_update.TriangleMultiplicativeUpdate.sigmoid", "triangular_multiplicative_update.TriangleMultiplicativeUpdate.linear_g", "triangular_multiplicative_update.TriangleMultiplicativeUpdate.linear_a_g", "triangular_multiplicative_update.TriangleMultiplicativeUpdate.linear_b_g"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_multiplicative_update.TriangleMultiplicationIncoming._combine_projections"], ["", "def", "forward", "(", "self", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            x:\n                [*, N_res, N_res, C_z] input tensor\n            mask:\n                [*, N_res, N_res] input mask\n        Returns:\n            [*, N_res, N_res, C_z] output tensor\n        \"\"\"", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "mask", "=", "z", ".", "new_ones", "(", "z", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "", "mask", "=", "mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "z", "=", "self", ".", "layer_norm_in", "(", "z", ")", "\n", "a", "=", "self", ".", "linear_a_p", "(", "z", ")", "*", "self", ".", "sigmoid", "(", "self", ".", "linear_a_g", "(", "z", ")", ")", "\n", "a", "=", "a", "*", "mask", "\n", "b", "=", "self", ".", "linear_b_p", "(", "z", ")", "*", "self", ".", "sigmoid", "(", "self", ".", "linear_b_g", "(", "z", ")", ")", "\n", "b", "=", "b", "*", "mask", "\n", "x", "=", "self", ".", "_combine_projections", "(", "a", ",", "b", ")", "\n", "x", "=", "self", ".", "layer_norm_out", "(", "x", ")", "\n", "x", "=", "self", ".", "linear_z", "(", "x", ")", "\n", "g", "=", "self", ".", "sigmoid", "(", "self", ".", "linear_g", "(", "z", ")", ")", "\n", "z", "=", "x", "*", "g", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_multiplicative_update.TriangleMultiplicationOutgoing._combine_projections": [[97, 109], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "fastfold.utils.tensor_utils.permute_final_dims", "fastfold.utils.tensor_utils.permute_final_dims", "fastfold.utils.tensor_utils.permute_final_dims"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims"], ["def", "_combine_projections", "(", "self", ",", "\n", "a", ":", "torch", ".", "Tensor", ",", "# [*, N_i, N_k, C]", "\n", "b", ":", "torch", ".", "Tensor", ",", "# [*, N_j, N_k, C]", "\n", ")", ":", "\n", "# [*, C, N_i, N_j]", "\n", "        ", "p", "=", "torch", ".", "matmul", "(", "\n", "permute_final_dims", "(", "a", ",", "(", "2", ",", "0", ",", "1", ")", ")", ",", "\n", "permute_final_dims", "(", "b", ",", "(", "2", ",", "1", ",", "0", ")", ")", ",", "\n", ")", "\n", "\n", "# [*, N_i, N_j, C]", "\n", "return", "permute_final_dims", "(", "p", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_multiplicative_update.TriangleMultiplicationIncoming._combine_projections": [[115, 127], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "fastfold.utils.tensor_utils.permute_final_dims", "fastfold.utils.tensor_utils.permute_final_dims", "fastfold.utils.tensor_utils.permute_final_dims"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims"], ["def", "_combine_projections", "(", "self", ",", "\n", "a", ":", "torch", ".", "Tensor", ",", "# [*, N_k, N_i, C]", "\n", "b", ":", "torch", ".", "Tensor", ",", "# [*, N_k, N_j, C]", "\n", ")", ":", "\n", "# [*, C, N_i, N_j]", "\n", "        ", "p", "=", "torch", ".", "matmul", "(", "\n", "permute_final_dims", "(", "a", ",", "(", "2", ",", "1", ",", "0", ")", ")", ",", "\n", "permute_final_dims", "(", "b", ",", "(", "2", ",", "0", ",", "1", ")", ")", ",", "\n", ")", "\n", "\n", "# [*, N_i, N_j, C]", "\n", "return", "permute_final_dims", "(", "p", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.template.TemplatePointwiseAttention.__init__": [[48, 73], ["torch.Module.__init__", "fastfold.model.nn.primitives.Attention"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "c_t", ",", "c_z", ",", "c_hidden", ",", "no_heads", ",", "inf", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_t:\n                Template embedding channel dimension\n            c_z:\n                Pair embedding channel dimension\n            c_hidden:\n                Hidden channel dimension\n        \"\"\"", "\n", "super", "(", "TemplatePointwiseAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_t", "=", "c_t", "\n", "self", ".", "c_z", "=", "c_z", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "self", ".", "no_heads", "=", "no_heads", "\n", "self", ".", "inf", "=", "inf", "\n", "\n", "self", ".", "mha", "=", "Attention", "(", "\n", "self", ".", "c_z", ",", "\n", "self", ".", "c_t", ",", "\n", "self", ".", "c_t", ",", "\n", "self", ".", "c_hidden", ",", "\n", "self", ".", "no_heads", ",", "\n", "gating", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.template.TemplatePointwiseAttention._chunk": [[75, 91], ["fastfold.utils.tensor_utils.chunk_layer", "len"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.chunk_layer"], ["", "def", "_chunk", "(", "self", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "t", ":", "torch", ".", "Tensor", ",", "\n", "biases", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "chunk_size", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "mha_inputs", "=", "{", "\n", "\"q_x\"", ":", "z", ",", "\n", "\"kv_x\"", ":", "t", ",", "\n", "\"biases\"", ":", "biases", ",", "\n", "}", "\n", "return", "chunk_layer", "(", "\n", "self", ".", "mha", ",", "\n", "mha_inputs", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "no_batch_dims", "=", "len", "(", "z", ".", "shape", "[", ":", "-", "2", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.template.TemplatePointwiseAttention.forward": [[94, 133], ["template.TemplatePointwiseAttention.unsqueeze", "fastfold.utils.tensor_utils.permute_final_dims", "template.TemplatePointwiseAttention.squeeze", "fastfold.utils.tensor_utils.permute_final_dims.new_ones", "template.TemplatePointwiseAttention._chunk", "template.TemplatePointwiseAttention.mha"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_attention.TriangleAttention._chunk"], ["", "def", "forward", "(", "self", ",", "\n", "t", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "template_mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            t:\n                [*, N_templ, N_res, N_res, C_t] template embedding\n            z:\n                [*, N_res, N_res, C_t] pair embedding\n            template_mask:\n                [*, N_templ] template mask\n        Returns:\n            [*, N_res, N_res, C_z] pair embedding update\n        \"\"\"", "\n", "if", "template_mask", "is", "None", ":", "\n", "            ", "template_mask", "=", "t", ".", "new_ones", "(", "t", ".", "shape", "[", ":", "-", "3", "]", ")", "\n", "\n", "", "bias", "=", "self", ".", "inf", "*", "(", "template_mask", "[", "...", ",", "None", ",", "None", ",", "None", ",", "None", ",", ":", "]", "-", "1", ")", "\n", "\n", "# [*, N_res, N_res, 1, C_z]", "\n", "z", "=", "z", ".", "unsqueeze", "(", "-", "2", ")", "\n", "\n", "# [*, N_res, N_res, N_temp, C_t]", "\n", "t", "=", "permute_final_dims", "(", "t", ",", "(", "1", ",", "2", ",", "0", ",", "3", ")", ")", "\n", "\n", "# [*, N_res, N_res, 1, C_z]", "\n", "biases", "=", "[", "bias", "]", "\n", "if", "chunk_size", "is", "not", "None", ":", "\n", "            ", "z", "=", "self", ".", "_chunk", "(", "z", ",", "t", ",", "biases", ",", "chunk_size", ")", "\n", "", "else", ":", "\n", "            ", "z", "=", "self", ".", "mha", "(", "q_x", "=", "z", ",", "kv_x", "=", "t", ",", "biases", "=", "biases", ")", "\n", "\n", "# [*, N_res, N_res, C_z]", "\n", "", "z", "=", "z", ".", "squeeze", "(", "-", "2", ")", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.template.TemplatePairStackBlock.__init__": [[136, 185], ["torch.Module.__init__", "fastfold.model.nn.dropout.DropoutRowwise", "fastfold.model.nn.dropout.DropoutColumnwise", "fastfold.model.nn.triangular_attention.TriangleAttentionStartingNode", "fastfold.model.nn.triangular_attention.TriangleAttentionEndingNode", "fastfold.model.nn.triangular_multiplicative_update.TriangleMultiplicationOutgoing", "fastfold.model.nn.triangular_multiplicative_update.TriangleMultiplicationIncoming", "fastfold.model.nn.pair_transition.PairTransition"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "c_t", ":", "int", ",", "\n", "c_hidden_tri_att", ":", "int", ",", "\n", "c_hidden_tri_mul", ":", "int", ",", "\n", "no_heads", ":", "int", ",", "\n", "pair_transition_n", ":", "int", ",", "\n", "dropout_rate", ":", "float", ",", "\n", "inf", ":", "float", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "super", "(", "TemplatePairStackBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_t", "=", "c_t", "\n", "self", ".", "c_hidden_tri_att", "=", "c_hidden_tri_att", "\n", "self", ".", "c_hidden_tri_mul", "=", "c_hidden_tri_mul", "\n", "self", ".", "no_heads", "=", "no_heads", "\n", "self", ".", "pair_transition_n", "=", "pair_transition_n", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "inf", "=", "inf", "\n", "\n", "self", ".", "dropout_row", "=", "DropoutRowwise", "(", "self", ".", "dropout_rate", ")", "\n", "self", ".", "dropout_col", "=", "DropoutColumnwise", "(", "self", ".", "dropout_rate", ")", "\n", "\n", "self", ".", "tri_att_start", "=", "TriangleAttentionStartingNode", "(", "\n", "self", ".", "c_t", ",", "\n", "self", ".", "c_hidden_tri_att", ",", "\n", "self", ".", "no_heads", ",", "\n", "inf", "=", "inf", ",", "\n", ")", "\n", "self", ".", "tri_att_end", "=", "TriangleAttentionEndingNode", "(", "\n", "self", ".", "c_t", ",", "\n", "self", ".", "c_hidden_tri_att", ",", "\n", "self", ".", "no_heads", ",", "\n", "inf", "=", "inf", ",", "\n", ")", "\n", "\n", "self", ".", "tri_mul_out", "=", "TriangleMultiplicationOutgoing", "(", "\n", "self", ".", "c_t", ",", "\n", "self", ".", "c_hidden_tri_mul", ",", "\n", ")", "\n", "self", ".", "tri_mul_in", "=", "TriangleMultiplicationIncoming", "(", "\n", "self", ".", "c_t", ",", "\n", "self", ".", "c_hidden_tri_mul", ",", "\n", ")", "\n", "\n", "self", ".", "pair_transition", "=", "PairTransition", "(", "\n", "self", ".", "c_t", ",", "\n", "self", ".", "pair_transition_n", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.template.TemplatePairStackBlock.forward": [[187, 240], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "t.unsqueeze", "m.unsqueeze", "len", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "template.TemplatePairStackBlock.dropout_row", "template.TemplatePairStackBlock.dropout_col", "template.TemplatePairStackBlock.dropout_row", "template.TemplatePairStackBlock.dropout_row", "template.TemplatePairStackBlock.pair_transition", "template.TemplatePairStackBlock.tri_att_start", "template.TemplatePairStackBlock.tri_att_end", "template.TemplatePairStackBlock.tri_mul_out", "template.TemplatePairStackBlock.tri_mul_in"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze"], ["", "def", "forward", "(", "self", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "torch", ".", "Tensor", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "_mask_trans", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "single_templates", "=", "[", "\n", "t", ".", "unsqueeze", "(", "-", "4", ")", "for", "t", "in", "torch", ".", "unbind", "(", "z", ",", "dim", "=", "-", "4", ")", "\n", "]", "\n", "single_templates_masks", "=", "[", "\n", "m", ".", "unsqueeze", "(", "-", "3", ")", "for", "m", "in", "torch", ".", "unbind", "(", "mask", ",", "dim", "=", "-", "3", ")", "\n", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "single_templates", ")", ")", ":", "\n", "            ", "single", "=", "single_templates", "[", "i", "]", "\n", "single_mask", "=", "single_templates_masks", "[", "i", "]", "\n", "\n", "single", "=", "single", "+", "self", ".", "dropout_row", "(", "\n", "self", ".", "tri_att_start", "(", "\n", "single", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "mask", "=", "single_mask", "\n", ")", "\n", ")", "\n", "single", "=", "single", "+", "self", ".", "dropout_col", "(", "\n", "self", ".", "tri_att_end", "(", "\n", "single", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "mask", "=", "single_mask", "\n", ")", "\n", ")", "\n", "single", "=", "single", "+", "self", ".", "dropout_row", "(", "\n", "self", ".", "tri_mul_out", "(", "\n", "single", ",", "\n", "mask", "=", "single_mask", "\n", ")", "\n", ")", "\n", "single", "=", "single", "+", "self", ".", "dropout_row", "(", "\n", "self", ".", "tri_mul_in", "(", "\n", "single", ",", "\n", "mask", "=", "single_mask", "\n", ")", "\n", ")", "\n", "single", "=", "single", "+", "self", ".", "pair_transition", "(", "\n", "single", ",", "\n", "mask", "=", "single_mask", "if", "_mask_trans", "else", "None", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", ")", "\n", "\n", "single_templates", "[", "i", "]", "=", "single", "\n", "\n", "", "z", "=", "torch", ".", "cat", "(", "single_templates", ",", "dim", "=", "-", "4", ")", "\n", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.template.TemplatePairStack.__init__": [[246, 295], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "range", "fastfold.model.nn.primitives.LayerNorm", "template.TemplatePairStackBlock", "template.TemplatePairStack.blocks.append"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "c_t", ",", "\n", "c_hidden_tri_att", ",", "\n", "c_hidden_tri_mul", ",", "\n", "no_blocks", ",", "\n", "no_heads", ",", "\n", "pair_transition_n", ",", "\n", "dropout_rate", ",", "\n", "blocks_per_ckpt", ",", "\n", "inf", "=", "1e9", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_t:\n                Template embedding channel dimension\n            c_hidden_tri_att:\n                Per-head hidden dimension for triangular attention\n            c_hidden_tri_att:\n                Hidden dimension for triangular multiplication\n            no_blocks:\n                Number of blocks in the stack\n            pair_transition_n:\n                Scale of pair transition (Alg. 15) hidden dimension\n            dropout_rate:\n                Dropout rate used throughout the stack\n            blocks_per_ckpt:\n                Number of blocks per activation checkpoint. None disables\n                activation checkpointing\n        \"\"\"", "\n", "super", "(", "TemplatePairStack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "blocks_per_ckpt", "=", "blocks_per_ckpt", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "no_blocks", ")", ":", "\n", "            ", "block", "=", "TemplatePairStackBlock", "(", "\n", "c_t", "=", "c_t", ",", "\n", "c_hidden_tri_att", "=", "c_hidden_tri_att", ",", "\n", "c_hidden_tri_mul", "=", "c_hidden_tri_mul", ",", "\n", "no_heads", "=", "no_heads", ",", "\n", "pair_transition_n", "=", "pair_transition_n", ",", "\n", "dropout_rate", "=", "dropout_rate", ",", "\n", "inf", "=", "inf", ",", "\n", ")", "\n", "self", ".", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "self", ".", "layer_norm", "=", "LayerNorm", "(", "c_t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.template.TemplatePairStack.forward": [[296, 334], ["fastfold.utils.checkpointing.checkpoint_blocks", "template.TemplatePairStack.layer_norm", "list", "mask.expand.expand.expand", "functools.partial"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.checkpointing.checkpoint_blocks"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "t", ":", "torch", ".", "tensor", ",", "\n", "mask", ":", "torch", ".", "tensor", ",", "\n", "chunk_size", ":", "int", ",", "\n", "_mask_trans", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            t:\n                [*, N_templ, N_res, N_res, C_t] template embedding\n            mask:\n                [*, N_templ, N_res, N_res] mask\n        Returns:\n            [*, N_templ, N_res, N_res, C_t] template embedding update\n        \"\"\"", "\n", "if", "(", "mask", ".", "shape", "[", "-", "3", "]", "==", "1", ")", ":", "\n", "            ", "expand_idx", "=", "list", "(", "mask", ".", "shape", ")", "\n", "expand_idx", "[", "-", "3", "]", "=", "t", ".", "shape", "[", "-", "4", "]", "\n", "mask", "=", "mask", ".", "expand", "(", "*", "expand_idx", ")", "\n", "\n", "", "t", ",", "=", "checkpoint_blocks", "(", "\n", "blocks", "=", "[", "\n", "partial", "(", "\n", "b", ",", "\n", "mask", "=", "mask", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "_mask_trans", "=", "_mask_trans", ",", "\n", ")", "\n", "for", "b", "in", "self", ".", "blocks", "\n", "]", ",", "\n", "args", "=", "(", "t", ",", ")", ",", "\n", "blocks_per_ckpt", "=", "self", ".", "blocks_per_ckpt", "if", "self", ".", "training", "else", "None", ",", "\n", ")", "\n", "\n", "t", "=", "self", ".", "layer_norm", "(", "t", ")", "\n", "\n", "return", "t", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.embedders.InputEmbedder.__init__": [[31, 70], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "tf_dim", ":", "int", ",", "\n", "msa_dim", ":", "int", ",", "\n", "c_z", ":", "int", ",", "\n", "c_m", ":", "int", ",", "\n", "relpos_k", ":", "int", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tf_dim:\n                Final dimension of the target features\n            msa_dim:\n                Final dimension of the MSA features\n            c_z:\n                Pair embedding dimension\n            c_m:\n                MSA embedding dimension\n            relpos_k:\n                Window size used in relative positional encoding\n        \"\"\"", "\n", "super", "(", "InputEmbedder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tf_dim", "=", "tf_dim", "\n", "self", ".", "msa_dim", "=", "msa_dim", "\n", "\n", "self", ".", "c_z", "=", "c_z", "\n", "self", ".", "c_m", "=", "c_m", "\n", "\n", "self", ".", "linear_tf_z_i", "=", "Linear", "(", "tf_dim", ",", "c_z", ")", "\n", "self", ".", "linear_tf_z_j", "=", "Linear", "(", "tf_dim", ",", "c_z", ")", "\n", "self", ".", "linear_tf_m", "=", "Linear", "(", "tf_dim", ",", "c_m", ")", "\n", "self", ".", "linear_msa_m", "=", "Linear", "(", "msa_dim", ",", "c_m", ")", "\n", "\n", "# RPE stuff", "\n", "self", ".", "relpos_k", "=", "relpos_k", "\n", "self", ".", "no_bins", "=", "2", "*", "relpos_k", "+", "1", "\n", "self", ".", "linear_relpos", "=", "Linear", "(", "self", ".", "no_bins", ",", "c_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.embedders.InputEmbedder.relpos": [[71, 87], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "fastfold.utils.tensor_utils.one_hot().type", "embedders.InputEmbedder.linear_relpos", "fastfold.utils.tensor_utils.one_hot"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.one_hot"], ["", "def", "relpos", "(", "self", ",", "ri", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Computes relative positional encodings\n\n        Implements Algorithm 4.\n\n        Args:\n            ri:\n                \"residue_index\" features of shape [*, N]\n        \"\"\"", "\n", "d", "=", "ri", "[", "...", ",", "None", "]", "-", "ri", "[", "...", ",", "None", ",", ":", "]", "\n", "boundaries", "=", "torch", ".", "arange", "(", "\n", "start", "=", "-", "self", ".", "relpos_k", ",", "end", "=", "self", ".", "relpos_k", "+", "1", ",", "device", "=", "d", ".", "device", "\n", ")", "\n", "oh", "=", "one_hot", "(", "d", ",", "boundaries", ")", ".", "type", "(", "ri", ".", "dtype", ")", "\n", "return", "self", ".", "linear_relpos", "(", "oh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.embedders.InputEmbedder.forward": [[88, 127], ["embedders.InputEmbedder.linear_tf_z_i", "embedders.InputEmbedder.linear_tf_z_j", "embedders.InputEmbedder.linear_tf_m().unsqueeze().expand", "embedders.InputEmbedder.relpos", "embedders.InputEmbedder.linear_msa_m", "ri.type", "embedders.InputEmbedder.linear_tf_m().unsqueeze", "len", "embedders.InputEmbedder.linear_tf_m"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.embedders.InputEmbedder.relpos", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "tf", ":", "torch", ".", "Tensor", ",", "\n", "ri", ":", "torch", ".", "Tensor", ",", "\n", "msa", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            tf:\n                \"target_feat\" features of shape [*, N_res, tf_dim]\n            ri:\n                \"residue_index\" features of shape [*, N_res]\n            msa:\n                \"msa_feat\" features of shape [*, N_clust, N_res, msa_dim]\n        Returns:\n            msa_emb:\n                [*, N_clust, N_res, C_m] MSA embedding\n            pair_emb:\n                [*, N_res, N_res, C_z] pair embedding\n\n        \"\"\"", "\n", "# [*, N_res, c_z]", "\n", "tf_emb_i", "=", "self", ".", "linear_tf_z_i", "(", "tf", ")", "\n", "tf_emb_j", "=", "self", ".", "linear_tf_z_j", "(", "tf", ")", "\n", "\n", "# [*, N_res, N_res, c_z]", "\n", "pair_emb", "=", "tf_emb_i", "[", "...", ",", "None", ",", ":", "]", "+", "tf_emb_j", "[", "...", ",", "None", ",", ":", ",", ":", "]", "\n", "pair_emb", "=", "pair_emb", "+", "self", ".", "relpos", "(", "ri", ".", "type", "(", "pair_emb", ".", "dtype", ")", ")", "\n", "\n", "# [*, N_clust, N_res, c_m]", "\n", "n_clust", "=", "msa", ".", "shape", "[", "-", "3", "]", "\n", "tf_m", "=", "(", "\n", "self", ".", "linear_tf_m", "(", "tf", ")", "\n", ".", "unsqueeze", "(", "-", "3", ")", "\n", ".", "expand", "(", "(", "(", "-", "1", ",", ")", "*", "len", "(", "tf", ".", "shape", "[", ":", "-", "2", "]", ")", "+", "(", "n_clust", ",", "-", "1", ",", "-", "1", ")", ")", ")", "\n", ")", "\n", "msa_emb", "=", "self", ".", "linear_msa_m", "(", "msa", ")", "+", "tf_m", "\n", "\n", "return", "msa_emb", ",", "pair_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.embedders.RecyclingEmbedder.__init__": [[136, 171], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.LayerNorm", "fastfold.model.nn.primitives.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "c_m", ":", "int", ",", "\n", "c_z", ":", "int", ",", "\n", "min_bin", ":", "float", ",", "\n", "max_bin", ":", "float", ",", "\n", "no_bins", ":", "int", ",", "\n", "inf", ":", "float", "=", "1e8", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_m:\n                MSA channel dimension\n            c_z:\n                Pair embedding channel dimension\n            min_bin:\n                Smallest distogram bin (Angstroms)\n            max_bin:\n                Largest distogram bin (Angstroms)\n            no_bins:\n                Number of distogram bins\n        \"\"\"", "\n", "super", "(", "RecyclingEmbedder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_m", "=", "c_m", "\n", "self", ".", "c_z", "=", "c_z", "\n", "self", ".", "min_bin", "=", "min_bin", "\n", "self", ".", "max_bin", "=", "max_bin", "\n", "self", ".", "no_bins", "=", "no_bins", "\n", "self", ".", "inf", "=", "inf", "\n", "\n", "self", ".", "linear", "=", "Linear", "(", "self", ".", "no_bins", ",", "self", ".", "c_z", ")", "\n", "self", ".", "layer_norm_m", "=", "LayerNorm", "(", "self", ".", "c_m", ")", "\n", "self", ".", "layer_norm_z", "=", "LayerNorm", "(", "self", ".", "c_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.embedders.RecyclingEmbedder.forward": [[172, 223], ["torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "embedders.RecyclingEmbedder.layer_norm_m", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "embedders.RecyclingEmbedder.linear", "embedders.RecyclingEmbedder.layer_norm_z", "squared_bins.new_tensor"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "torch", ".", "Tensor", ",", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            m:\n                First row of the MSA embedding. [*, N_res, C_m]\n            z:\n                [*, N_res, N_res, C_z] pair embedding\n            x:\n                [*, N_res, 3] predicted C_beta coordinates\n        Returns:\n            m:\n                [*, N_res, C_m] MSA embedding update\n            z:\n                [*, N_res, N_res, C_z] pair embedding update\n        \"\"\"", "\n", "bins", "=", "torch", ".", "linspace", "(", "\n", "self", ".", "min_bin", ",", "\n", "self", ".", "max_bin", ",", "\n", "self", ".", "no_bins", ",", "\n", "dtype", "=", "x", ".", "dtype", ",", "\n", "device", "=", "x", ".", "device", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "\n", "\n", "# [*, N, C_m]", "\n", "m_update", "=", "self", ".", "layer_norm_m", "(", "m", ")", "\n", "\n", "# This squared method might become problematic in FP16 mode.", "\n", "# I'm using it because my homegrown method had a stubborn discrepancy I", "\n", "# couldn't find in time.", "\n", "squared_bins", "=", "bins", "**", "2", "\n", "upper", "=", "torch", ".", "cat", "(", "\n", "[", "squared_bins", "[", "1", ":", "]", ",", "squared_bins", ".", "new_tensor", "(", "[", "self", ".", "inf", "]", ")", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n", "d", "=", "torch", ".", "sum", "(", "\n", "(", "x", "[", "...", ",", "None", ",", ":", "]", "-", "x", "[", "...", ",", "None", ",", ":", ",", ":", "]", ")", "**", "2", ",", "dim", "=", "-", "1", ",", "keepdims", "=", "True", "\n", ")", "\n", "\n", "# [*, N, N, no_bins]", "\n", "d", "=", "(", "(", "d", ">", "squared_bins", ")", "*", "(", "d", "<", "upper", ")", ")", ".", "type", "(", "x", ".", "dtype", ")", "\n", "\n", "# [*, N, N, C_z]", "\n", "d", "=", "self", ".", "linear", "(", "d", ")", "\n", "z_update", "=", "d", "+", "self", ".", "layer_norm_z", "(", "z", ")", "\n", "\n", "return", "m_update", ",", "z_update", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.embedders.TemplateAngleEmbedder.__init__": [[232, 253], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear", "torch.ReLU", "torch.ReLU", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "c_in", ":", "int", ",", "\n", "c_out", ":", "int", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_in:\n                Final dimension of \"template_angle_feat\"\n            c_out:\n                Output channel dimension\n        \"\"\"", "\n", "super", "(", "TemplateAngleEmbedder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_out", "=", "c_out", "\n", "self", ".", "c_in", "=", "c_in", "\n", "\n", "self", ".", "linear_1", "=", "Linear", "(", "self", ".", "c_in", ",", "self", ".", "c_out", ",", "init", "=", "\"relu\"", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "linear_2", "=", "Linear", "(", "self", ".", "c_out", ",", "self", ".", "c_out", ",", "init", "=", "\"relu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.embedders.TemplateAngleEmbedder.forward": [[254, 266], ["embedders.TemplateAngleEmbedder.linear_1", "embedders.TemplateAngleEmbedder.relu", "embedders.TemplateAngleEmbedder.linear_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            x: [*, N_templ, N_res, c_in] \"template_angle_feat\" features\n        Returns:\n            x: [*, N_templ, N_res, C_out] embedding\n        \"\"\"", "\n", "x", "=", "self", ".", "linear_1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "linear_2", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.embedders.TemplatePairEmbedder.__init__": [[275, 295], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "c_in", ":", "int", ",", "\n", "c_out", ":", "int", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_in:\n\n            c_out:\n                Output channel dimension\n        \"\"\"", "\n", "super", "(", "TemplatePairEmbedder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_out", "=", "c_out", "\n", "\n", "# Despite there being no relu nearby, the source uses that initializer", "\n", "self", ".", "linear", "=", "Linear", "(", "self", ".", "c_in", ",", "self", ".", "c_out", ",", "init", "=", "\"relu\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.embedders.TemplatePairEmbedder.forward": [[296, 310], ["embedders.TemplatePairEmbedder.linear"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            x:\n                [*, C_in] input tensor\n        Returns:\n            [*, C_out] output tensor\n        \"\"\"", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.embedders.ExtraMSAEmbedder.__init__": [[319, 338], ["torch.Module.__init__", "fastfold.model.nn.primitives.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "c_in", ":", "int", ",", "\n", "c_out", ":", "int", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_in:\n                Input channel dimension\n            c_out:\n                Output channel dimension\n        \"\"\"", "\n", "super", "(", "ExtraMSAEmbedder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_out", "=", "c_out", "\n", "\n", "self", ".", "linear", "=", "Linear", "(", "self", ".", "c_in", ",", "self", ".", "c_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.embedders.ExtraMSAEmbedder.forward": [[339, 350], ["embedders.ExtraMSAEmbedder.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            x:\n                [*, N_extra_seq, N_res, C_in] \"extra_msa_feat\" features\n        Returns:\n            [*, N_extra_seq, N_res, C_out] embedding\n        \"\"\"", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_attention.TriangleAttention.__init__": [[32, 58], ["torch.Module.__init__", "fastfold.model.nn.primitives.LayerNorm", "fastfold.model.nn.primitives.Linear", "fastfold.model.nn.primitives.Attention"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "c_in", ",", "c_hidden", ",", "no_heads", ",", "starting", ",", "inf", "=", "1e9", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            c_in:\n                Input channel dimension\n            c_hidden:\n                Overall hidden channel dimension (not per-head)\n            no_heads:\n                Number of attention heads\n        \"\"\"", "\n", "super", "(", "TriangleAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "self", ".", "no_heads", "=", "no_heads", "\n", "self", ".", "starting", "=", "starting", "\n", "self", ".", "inf", "=", "inf", "\n", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "self", ".", "c_in", ")", "\n", "\n", "self", ".", "linear", "=", "Linear", "(", "c_in", ",", "self", ".", "no_heads", ",", "bias", "=", "False", ",", "init", "=", "\"normal\"", ")", "\n", "\n", "self", ".", "mha", "=", "Attention", "(", "\n", "self", ".", "c_in", ",", "self", ".", "c_in", ",", "self", ".", "c_in", ",", "self", ".", "c_hidden", ",", "self", ".", "no_heads", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_attention.TriangleAttention._chunk": [[60, 76], ["fastfold.utils.tensor_utils.chunk_layer", "functools.partial", "len"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.chunk_layer"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "_chunk", "(", "self", ",", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", "biases", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "chunk_size", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "mha_inputs", "=", "{", "\n", "\"q_x\"", ":", "x", ",", "\n", "\"kv_x\"", ":", "x", ",", "\n", "\"biases\"", ":", "biases", ",", "\n", "}", "\n", "return", "chunk_layer", "(", "\n", "partial", "(", "self", ".", "mha", ")", ",", "\n", "mha_inputs", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "no_batch_dims", "=", "len", "(", "x", ".", "shape", "[", ":", "-", "2", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_attention.TriangleAttention.forward": [[78, 124], ["triangular_attention.TriangleAttention.layer_norm", "fastfold.utils.tensor_utils.permute_final_dims", "triangle_bias.unsqueeze.unsqueeze.unsqueeze", "x.transpose.transpose.new_ones", "x.transpose.transpose.transpose", "mask.transpose.transpose.transpose", "triangular_attention.TriangleAttention.linear", "triangular_attention.TriangleAttention._chunk", "triangular_attention.TriangleAttention.mha", "x.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.nn.triangular_attention.TriangleAttention._chunk"], ["", "def", "forward", "(", "self", ",", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "chunk_size", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Args:\n            x:\n                [*, I, J, C_in] input tensor (e.g. the pair representation)\n        Returns:\n            [*, I, J, C_in] output tensor\n        \"\"\"", "\n", "if", "mask", "is", "None", ":", "\n", "# [*, I, J]", "\n", "            ", "mask", "=", "x", ".", "new_ones", "(", "\n", "x", ".", "shape", "[", ":", "-", "1", "]", ",", "\n", ")", "\n", "\n", "# Shape annotations assume self.starting. Else, I and J are flipped", "\n", "", "if", "not", "self", ".", "starting", ":", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "mask", "=", "mask", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n", "# [*, I, J, C_in]", "\n", "", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# [*, I, 1, 1, J]", "\n", "mask_bias", "=", "(", "self", ".", "inf", "*", "(", "mask", "-", "1", ")", ")", "[", "...", ",", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "# [*, H, I, J]", "\n", "triangle_bias", "=", "permute_final_dims", "(", "self", ".", "linear", "(", "x", ")", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "# [*, 1, H, I, J]", "\n", "triangle_bias", "=", "triangle_bias", ".", "unsqueeze", "(", "-", "4", ")", "\n", "\n", "biases", "=", "[", "mask_bias", ",", "triangle_bias", "]", "\n", "\n", "if", "chunk_size", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "_chunk", "(", "x", ",", "biases", ",", "chunk_size", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "mha", "(", "q_x", "=", "x", ",", "kv_x", "=", "x", ",", "biases", "=", "biases", ")", "\n", "\n", "", "if", "not", "self", ".", "starting", ":", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.ops.DropoutRowwise.__init__": [[16, 20], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "super", "(", "DropoutRowwise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.ops.DropoutRowwise.forward": [[21, 25], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "ops.DropoutRowwise.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "dropout_mask", "=", "torch", ".", "ones_like", "(", "x", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ")", "\n", "dropout_mask", "=", "self", ".", "dropout", "(", "dropout_mask", ")", "\n", "return", "dropout_mask", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.ops.DropoutColumnwise.__init__": [[29, 33], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "super", "(", "DropoutColumnwise", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.ops.DropoutColumnwise.forward": [[34, 38], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "ops.DropoutColumnwise.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "dropout_mask", "=", "torch", ".", "ones_like", "(", "x", "[", ":", ",", ":", ",", "0", ":", "1", ",", ":", "]", ")", "\n", "dropout_mask", "=", "self", ".", "dropout", "(", "dropout_mask", ")", "\n", "return", "dropout_mask", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.ops.Transition.__init__": [[42, 47], ["torch.Module.__init__", "fastfold.model.fastnn.kernel.LayerNorm", "ops.Linear", "ops.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d", ",", "n", "=", "4", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "d", ")", "\n", "self", ".", "linear1", "=", "Linear", "(", "d", ",", "n", "*", "d", ",", "initializer", "=", "'relu'", ")", "\n", "self", ".", "linear2", "=", "Linear", "(", "n", "*", "d", ",", "d", ",", "initializer", "=", "'zeros'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.ops.Transition.forward": [[48, 52], ["ops.Transition.norm", "ops.Transition.linear2", "torch.relu", "torch.relu", "torch.relu", "ops.Transition.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "        ", "x", "=", "self", ".", "norm", "(", "src", ")", "\n", "x", "=", "self", ".", "linear2", "(", "F", ".", "relu", "(", "self", ".", "linear1", "(", "x", ")", ")", ")", "\n", "return", "src", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.ops.OutProductMean.__init__": [[56, 67], ["torch.Module.__init__", "fastfold.model.fastnn.kernel.LayerNorm", "ops.Linear", "ops.Linear", "ops.Linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_feat", "=", "64", ",", "n_feat_out", "=", "128", ",", "n_feat_proj", "=", "32", ")", ":", "\n", "        ", "super", "(", "OutProductMean", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "layernormM", "=", "LayerNorm", "(", "n_feat", ")", "\n", "self", ".", "linear_a", "=", "Linear", "(", "n_feat", ",", "n_feat_proj", ")", "\n", "self", ".", "linear_b", "=", "Linear", "(", "n_feat", ",", "n_feat_proj", ")", "\n", "\n", "self", ".", "o_linear", "=", "Linear", "(", "n_feat_proj", "*", "n_feat_proj", ",", "\n", "n_feat_out", ",", "\n", "initializer", "=", "'zero'", ",", "\n", "use_bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.ops.OutProductMean.forward": [[68, 91], ["ops.OutProductMean.layernormM", "ops.OutProductMean.linear_b", "fastfold.distributed.comm_async.gather_async", "ops.OutProductMean.linear_a", "M_mask.unsqueeze.unsqueeze.unsqueeze", "fastfold.distributed.scatter", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "fastfold.distributed.comm_async.gather_async_opp", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "einops.rearrange", "ops.OutProductMean.o_linear"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.gather_async", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.scatter", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.gather_async_opp"], ["", "def", "forward", "(", "self", ",", "M", ",", "M_mask", ")", ":", "\n", "        ", "M", "=", "self", ".", "layernormM", "(", "M", ")", "\n", "right_act", "=", "self", ".", "linear_b", "(", "M", ")", "\n", "\n", "right_act_all", ",", "work", "=", "gather_async", "(", "right_act", ",", "dim", "=", "2", ")", "\n", "# right_act_all = gather(right_act, dim=2)", "\n", "\n", "left_act", "=", "self", ".", "linear_a", "(", "M", ")", "\n", "M_mask", "=", "M_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "M_mask_col", "=", "scatter", "(", "M_mask", ",", "dim", "=", "2", ")", "\n", "left_act", "=", "M_mask_col", "*", "left_act", "\n", "norm", "=", "torch", ".", "einsum", "(", "'bsid,bsjd->bijd'", ",", "M_mask_col", ",", "M_mask", ")", "\n", "\n", "right_act_all", "=", "gather_async_opp", "(", "right_act_all", ",", "work", ",", "dim", "=", "2", ")", "\n", "\n", "right_act_all", "=", "M_mask", "*", "right_act_all", "\n", "O", "=", "torch", ".", "einsum", "(", "'bsid,bsje->bijde'", ",", "left_act", ",", "right_act_all", ")", "\n", "O", "=", "rearrange", "(", "O", ",", "'b i j d e -> b i j (d e)'", ")", "\n", "Z", "=", "self", ".", "o_linear", "(", "O", ")", "\n", "\n", "Z", "/=", "(", "1e-3", "+", "norm", ")", "\n", "\n", "return", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.ops.Linear.__init__": [[101, 121], ["torch.Linear.__init__", "initializer.glorot_uniform_af", "initializer.glorot_uniform_af", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ops.Linear.bias.fill_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.initializer.glorot_uniform_af", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.initializer.glorot_uniform_af"], ["def", "__init__", "(", "\n", "self", ",", "\n", "feature_in", ":", "int", ",", "\n", "feature_out", ":", "int", ",", "\n", "initializer", ":", "str", "=", "'linear'", ",", "\n", "use_bias", ":", "bool", "=", "True", ",", "\n", "bias_init", ":", "float", "=", "0.", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Linear", ",", "self", ")", ".", "__init__", "(", "feature_in", ",", "feature_out", ",", "bias", "=", "use_bias", ")", "\n", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "if", "initializer", "==", "'linear'", ":", "\n", "            ", "glorot_uniform_af", "(", "self", ".", "weight", ",", "gain", "=", "1.0", ")", "\n", "", "elif", "initializer", "==", "'relu'", ":", "\n", "            ", "glorot_uniform_af", "(", "self", ".", "weight", ",", "gain", "=", "2.0", ")", "\n", "", "elif", "initializer", "==", "'zeros'", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "weight", ")", "\n", "", "if", "self", ".", "use_bias", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "bias", ".", "fill_", "(", "bias_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.ops.SelfAttention.__init__": [[128, 152], ["torch.Module.__init__", "ops.Linear", "ops.Linear", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "ops.Linear", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "qkv_dim", ",", "c", ",", "n_head", ",", "out_dim", ",", "gating", "=", "True", ",", "last_bias_fuse", "=", "False", ")", ":", "\n", "        ", "super", "(", "SelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "qkv_dim", "=", "qkv_dim", "\n", "self", ".", "c", "=", "c", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "gating", "=", "gating", "\n", "self", ".", "last_bias_fuse", "=", "last_bias_fuse", "\n", "\n", "self", ".", "scaling", "=", "self", ".", "c", "**", "(", "-", "0.5", ")", "\n", "\n", "self", ".", "to_qkv", "=", "Linear", "(", "qkv_dim", ",", "3", "*", "n_head", "*", "c", ",", "initializer", "=", "'linear'", ",", "use_bias", "=", "False", ")", "\n", "# self.to_q = Linear(qkv_dim, n_head * c, initializer='linear', use_bias=False)", "\n", "# self.to_k = Linear(qkv_dim, n_head * c, initializer='linear', use_bias=False)", "\n", "# self.to_v = Linear(qkv_dim, n_head * c, initializer='linear', use_bias=False)", "\n", "\n", "if", "gating", ":", "\n", "            ", "self", ".", "gating_bias", "=", "nn", ".", "parameter", ".", "Parameter", "(", "data", "=", "torch", ".", "ones", "(", "(", "n_head", "*", "c", ",", ")", ")", ")", "\n", "self", ".", "gating_linear", "=", "Linear", "(", "qkv_dim", ",", "n_head", "*", "c", ",", "initializer", "=", "'zero'", ",", "use_bias", "=", "False", ")", "\n", "\n", "", "self", ".", "o_linear", "=", "Linear", "(", "n_head", "*", "c", ",", "\n", "out_dim", ",", "\n", "initializer", "=", "'zero'", ",", "\n", "use_bias", "=", "(", "not", "last_bias_fuse", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.ops.SelfAttention.forward": [[153, 193], ["ops.SelfAttention.to_qkv().chunk", "map", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "einops.rearrange", "ops.SelfAttention.o_linear", "k.transpose", "fastfold.distributed.comm_async.gather_async_opp", "einops.rearrange", "fastfold.model.fastnn.kernel.scale_mask_bias_softmax", "fastfold.model.fastnn.kernel.scale_mask_softmax", "ops.SelfAttention.gating_linear", "fastfold.model.fastnn.kernel.bias_sigmod_ele", "ops.SelfAttention.to_qkv", "einops.rearrange", "einops.rearrange.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.gather_async_opp", "home.repos.pwc.inspect_result.hpcaitech_fastfold.jit.fused_ops.bias_sigmod_ele", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze"], ["", "def", "forward", "(", "self", ",", "in_data", ",", "mask", ",", "nonbatched_bias", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param in_data: [batch_size1, batch_size2, len_qkv, qkv_dim]\n        :param bias: None or [batch_size1, batch_size2, n_head, len_q, len_kv]\n        :param nonbatched_bias: None or [batch_size1, n_head, len_q, len_kv]\n        \"\"\"", "\n", "\n", "qkv", "=", "self", ".", "to_qkv", "(", "in_data", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "q", ",", "k", ",", "v", "=", "map", "(", "lambda", "t", ":", "rearrange", "(", "t", ",", "'b1 b2 n (h d) -> b1 b2 h n d'", ",", "h", "=", "self", ".", "n_head", ")", ",", "qkv", ")", "\n", "\n", "# q = self.to_q(in_data)", "\n", "# k = self.to_k(in_data)", "\n", "# v = self.to_k(in_data)", "\n", "\n", "# q, k, v = map(lambda t: rearrange(t, 'b1 b2 n (h d) -> b1 b2 h n d', h=self.n_head), [q, k, v])", "\n", "\n", "# q = q * self.scaling", "\n", "\n", "logits", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "# logits += mask", "\n", "\n", "if", "nonbatched_bias", "is", "not", "None", ":", "\n", "# logits += nonbatched_bias.unsqueeze(1)", "\n", "            ", "bias", "=", "gather_async_opp", "(", "*", "nonbatched_bias", ",", "dim", "=", "1", ")", "\n", "bias", "=", "rearrange", "(", "bias", ",", "'b q k h -> b h q k'", ")", "\n", "weights", "=", "scale_mask_bias_softmax", "(", "logits", ",", "mask", ",", "bias", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "scaling", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "scale_mask_softmax", "(", "logits", ",", "mask", ",", "self", ".", "scaling", ")", "\n", "# weights = torch.softmax(logits, dim=-1)", "\n", "# weights = softmax(logits)", "\n", "\n", "", "weighted_avg", "=", "torch", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "weighted_avg", "=", "rearrange", "(", "weighted_avg", ",", "'b1 b2 h n d -> b1 b2 n (h d)'", ")", "\n", "\n", "if", "self", ".", "gating", ":", "\n", "            ", "gate_values", "=", "self", ".", "gating_linear", "(", "in_data", ")", "\n", "weighted_avg", "=", "bias_sigmod_ele", "(", "gate_values", ",", "self", ".", "gating_bias", ",", "weighted_avg", ")", "\n", "\n", "", "output", "=", "self", ".", "o_linear", "(", "weighted_avg", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.evoformer.Evoformer.__init__": [[9, 15], ["torch.Module.__init__", "fastfold.model.fastnn.MSAStack", "fastfold.model.fastnn.OutProductMean", "fastfold.model.fastnn.PairStack"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["#", "\n", "# Unless required by applicable law or agreed to in writing, software", "\n", "# distributed under the License is distributed on an \"AS IS\" BASIS,", "\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "\n", "# See the License for the specific language governing permissions and", "\n", "# limitations under the License.", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.evoformer.Evoformer.forward": [[16, 23], ["evoformer.Evoformer.msa_stack", "fastfold.distributed.comm_async.All_to_All_Async.apply", "evoformer.Evoformer.pair_stack", "fastfold.distributed.comm_async.All_to_All_Async_Opp.apply", "evoformer.Evoformer.communication"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply"], ["import", "math", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "from", "typing", "import", "Tuple", ",", "Optional", "\n", "from", "functools", "import", "partial", "\n", "\n", "from", "fastfold", ".", "model", ".", "nn", ".", "primitives", "import", "Linear", ",", "LayerNorm", "\n", "from", "fastfold", ".", "model", ".", "nn", ".", "dropout", "import", "DropoutRowwise", ",", "DropoutColumnwise", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.initializer.glorot_uniform_af": [[7, 30], ["torch.init.uniform_", "len", "numpy.prod", "math.sqrt", "math.sqrt", "float"], "function", ["None"], ["def", "glorot_uniform_af", "(", "x", ",", "gain", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    initialize tensors the same as xavier_initializer in PyTorch, but the dimensions are different:\n    In PyTorch:\n    [feature_out, feature_in, n_head ...]\n    In Jax:\n    [... n_head, feature_in, feature_out]\n    However, there is a feature in original Alphafold2 code that they use the Jax version initializer to initialize tensors like:\n    [feature_in, n_head, feature_out]\n\n    In this function, we keep this feature to initialize [feature_in, n_head, ..., feature_out] tensors\n    \"\"\"", "\n", "fan_in", ",", "fan_out", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "if", "len", "(", "x", ".", "shape", ")", ">", "2", ":", "\n", "        ", "receptive_field_size", "=", "np", ".", "prod", "(", "x", ".", "shape", "[", ":", "-", "2", "]", ")", "\n", "fan_in", "*=", "receptive_field_size", "\n", "fan_out", "*=", "receptive_field_size", "\n", "", "std", "=", "gain", "*", "math", ".", "sqrt", "(", "2.0", "/", "float", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "dev", "=", "math", ".", "sqrt", "(", "3.0", ")", "*", "std", "# Calculate uniform bounds from standard deviation", "\n", "\n", "nn", ".", "init", ".", "uniform_", "(", "x", ",", "-", "dev", ",", "dev", ")", "\n", "\n", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.msa.MSARowAttentionWithPairBias.__init__": [[16, 39], ["torch.Module.__init__", "fastfold.model.fastnn.kernel.LayerNorm", "fastfold.model.fastnn.kernel.LayerNorm", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "fastfold.model.fastnn.ops.SelfAttention", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["import", "math", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "from", "typing", "import", "Optional", ",", "List", ",", "Tuple", "\n", "\n", "from", "fastfold", ".", "model", ".", "nn", ".", "primitives", "import", "(", "\n", "Linear", ",", "\n", "LayerNorm", ",", "\n", "Attention", ",", "\n", "GlobalAttention", ",", "\n", "_attention_chunked_trainable", ",", "\n", ")", "\n", "from", "fastfold", ".", "utils", ".", "checkpointing", "import", "get_checkpoint_fn", "\n", "from", "fastfold", ".", "utils", ".", "tensor_utils", "import", "(", "\n", "chunk_layer", ",", "\n", "permute_final_dims", ",", "\n", "flatten_final_dims", ",", "\n", ")", "\n", "\n", "\n", "class", "MSAAttention", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "c_in", ",", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.msa.MSARowAttentionWithPairBias.forward": [[40, 54], ["msa.MSARowAttentionWithPairBias.layernormM", "msa.MSARowAttentionWithPairBias.layernormZ", "torch.linear", "torch.linear", "torch.linear", "fastfold.distributed.comm_async.gather_async", "msa.MSARowAttentionWithPairBias.attention", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "fastfold.model.fastnn.kernel.bias_dropout_add"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.gather_async", "home.repos.pwc.inspect_result.hpcaitech_fastfold.jit.fused_ops.bias_dropout_add"], ["c_hidden", ",", "\n", "no_heads", ",", "\n", "pair_bias", "=", "False", ",", "\n", "c_z", "=", "None", ",", "\n", "inf", "=", "1e9", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.msa.MSAColumnAttention.__init__": [[58, 70], ["torch.Module.__init__", "fastfold.model.fastnn.kernel.LayerNorm", "fastfold.model.fastnn.ops.SelfAttention"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["\n", "super", "(", "MSAAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c_in", "=", "c_in", "\n", "self", ".", "c_hidden", "=", "c_hidden", "\n", "self", ".", "no_heads", "=", "no_heads", "\n", "self", ".", "pair_bias", "=", "pair_bias", "\n", "self", ".", "c_z", "=", "c_z", "\n", "self", ".", "inf", "=", "inf", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.msa.MSAColumnAttention.forward": [[71, 82], ["M_raw.transpose", "msa.MSAColumnAttention.layernormM", "M_mask.transpose.transpose.transpose", "msa.MSAColumnAttention.attention", "M.transpose.transpose.transpose"], "methods", ["None"], ["self", ".", "layer_norm_m", "=", "LayerNorm", "(", "self", ".", "c_in", ")", "\n", "\n", "self", ".", "layer_norm_z", "=", "None", "\n", "self", ".", "linear_z", "=", "None", "\n", "if", "self", ".", "pair_bias", ":", "\n", "            ", "self", ".", "layer_norm_z", "=", "LayerNorm", "(", "self", ".", "c_z", ")", "\n", "self", ".", "linear_z", "=", "Linear", "(", "\n", "self", ".", "c_z", ",", "self", ".", "no_heads", ",", "bias", "=", "False", ",", "init", "=", "\"normal\"", "\n", ")", "\n", "\n", "", "self", ".", "mha", "=", "Attention", "(", "\n", "self", ".", "c_in", ",", "self", ".", "c_in", ",", "self", ".", "c_in", ",", "self", ".", "c_hidden", ",", "self", ".", "no_heads", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.msa.MSAStack.__init__": [[86, 95], ["torch.Module.__init__", "msa.MSARowAttentionWithPairBias", "msa.MSAColumnAttention", "fastfold.model.fastnn.ops.Transition"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "_chunk", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "biases", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "chunk_size", ":", "int", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "chunk_layer", "(", "\n", "self", ".", "mha", ",", "\n", "{", "\"q_x\"", ":", "m", ",", "\"kv_x\"", ":", "m", ",", "\"biases\"", ":", "biases", "}", ",", "\n", "chunk_size", "=", "chunk_size", ",", "\n", "no_batch_dims", "=", "len", "(", "m", ".", "shape", "[", ":", "-", "2", "]", ")", ",", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.msa.MSAStack.forward": [[96, 108], ["fastfold.distributed.scatter", "msa.MSAStack.MSARowAttentionWithPairBias", "fastfold.distributed.row_to_col", "fastfold.distributed.scatter", "msa.MSAStack.MSAColumnAttention", "msa.MSAStack.MSATransition"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.scatter", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.row_to_col", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.scatter"], [")", "\n", "\n", "", "def", "_prep_inputs", "(", "self", ",", "\n", "m", ":", "torch", ".", "Tensor", ",", "\n", "z", ":", "Optional", "[", "torch", ".", "Tensor", "]", ",", "\n", "mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "# [*, N_seq, N_res, C_m]", "\n", "        ", "m", "=", "self", ".", "layer_norm_m", "(", "m", ")", "\n", "\n", "n_seq", ",", "n_res", "=", "m", ".", "shape", "[", "-", "3", ":", "-", "1", "]", "\n", "if", "mask", "is", "None", ":", "\n", "# [*, N_seq, N_res]", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.TriangleMultiplicationOutgoing.__init__": [[20, 35], ["torch.Module.__init__", "fastfold.model.fastnn.kernel.LayerNorm", "fastfold.model.fastnn.ops.Linear", "fastfold.model.fastnn.ops.Linear", "fastfold.model.fastnn.ops.Linear", "fastfold.model.fastnn.kernel.LayerNorm", "fastfold.model.fastnn.ops.Linear", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_pair", ",", "p_drop", ",", "c", "=", "128", ")", ":", "\n", "        ", "super", "(", "TriangleMultiplicationOutgoing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_pair", "=", "d_pair", "\n", "self", ".", "c", "=", "c", "\n", "\n", "self", ".", "layernorm1", "=", "LayerNorm", "(", "d_pair", ")", "\n", "self", ".", "left_right_projection", "=", "Linear", "(", "d_pair", ",", "2", "*", "c", ")", "\n", "self", ".", "left_right_gate", "=", "Linear", "(", "d_pair", ",", "2", "*", "c", ",", "initializer", "=", "'zeros'", ",", "bias_init", "=", "1.", ")", "\n", "\n", "self", ".", "output_gate", "=", "Linear", "(", "d_pair", ",", "d_pair", ",", "initializer", "=", "'zeros'", ",", "bias_init", "=", "1.", ")", "\n", "self", ".", "layernorm2", "=", "LayerNorm", "(", "c", ")", "\n", "self", ".", "output_projection", "=", "Linear", "(", "d_pair", ",", "d_pair", ",", "initializer", "=", "'zeros'", ",", "use_bias", "=", "False", ")", "\n", "self", ".", "output_bias", "=", "nn", ".", "parameter", ".", "Parameter", "(", "data", "=", "torch", ".", "zeros", "(", "(", "d_pair", ",", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "p_drop", "=", "p_drop", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.TriangleMultiplicationOutgoing.forward": [[36, 70], ["triangle.TriangleMultiplicationOutgoing.layernorm1", "triangle.TriangleMultiplicationOutgoing.left_right_projection", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "triangle.TriangleMultiplicationOutgoing.chunk", "fastfold.distributed.comm_async.gather_async", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "triangle.permute_final_dims", "fastfold.distributed.comm_async.gather_async_opp", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "triangle.permute_final_dims", "triangle.TriangleMultiplicationOutgoing.output_projection", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "fastfold.model.fastnn.kernel.bias_ele_dropout_residual", "Z_mask_row.unsqueeze", "triangle.TriangleMultiplicationOutgoing.left_right_gate", "fastfold.distributed.comm_async.gather_async_opp.contiguous", "triangle.TriangleMultiplicationOutgoing.output_gate", "triangle.permute_final_dims", "triangle.TriangleMultiplicationOutgoing.layernorm2"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.gather_async", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.gather_async_opp", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.jit.fused_ops.bias_ele_dropout_residual", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims"], ["", "def", "forward", "(", "self", ",", "Z_raw", ",", "Z_mask_row", ")", ":", "\n", "        ", "Z", "=", "self", ".", "layernorm1", "(", "Z_raw", ")", "\n", "left_right_proj_act", "=", "self", ".", "left_right_projection", "(", "Z", ")", "\n", "left_right_proj_act", "=", "Z_mask_row", ".", "unsqueeze", "(", "-", "1", ")", "*", "left_right_proj_act", "\n", "\n", "left_right_proj_act", "*=", "torch", ".", "sigmoid", "(", "self", ".", "left_right_gate", "(", "Z", ")", ")", "\n", "\n", "left_proj_act", ",", "right_proj_act", "=", "left_right_proj_act", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# right_proj_act = gather(right_proj_act.contiguous(), dim=1)", "\n", "\n", "right_proj_act", ",", "work", "=", "gather_async", "(", "right_proj_act", ".", "contiguous", "(", ")", ",", "dim", "=", "1", ")", "\n", "\n", "g", "=", "torch", ".", "sigmoid", "(", "self", ".", "output_gate", "(", "Z", ")", ")", "\n", "left_proj_act", "=", "permute_final_dims", "(", "left_proj_act", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "right_proj_act", "=", "gather_async_opp", "(", "right_proj_act", ",", "work", ",", "dim", "=", "1", ")", "\n", "\n", "p", "=", "torch", ".", "matmul", "(", "\n", "left_proj_act", ",", "\n", "permute_final_dims", "(", "right_proj_act", ",", "(", "2", ",", "1", ",", "0", ")", ")", ",", "\n", ")", "\n", "ab", "=", "permute_final_dims", "(", "p", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "# ab = torch.einsum('bikd,bjkd->bijd', left_proj_act, right_proj_act)", "\n", "ab", "=", "self", ".", "output_projection", "(", "self", ".", "layernorm2", "(", "ab", ")", ")", "\n", "dropout_mask", "=", "torch", ".", "ones_like", "(", "Z", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "device", "=", "Z", ".", "device", ",", "dtype", "=", "Z", ".", "dtype", ")", "\n", "return", "bias_ele_dropout_residual", "(", "ab", ",", "\n", "self", ".", "output_bias", ",", "\n", "g", ",", "\n", "dropout_mask", ",", "\n", "Z_raw", ",", "\n", "prob", "=", "self", ".", "p_drop", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.TriangleMultiplicationIncoming.__init__": [[74, 89], ["torch.Module.__init__", "fastfold.model.fastnn.kernel.LayerNorm", "fastfold.model.fastnn.ops.Linear", "fastfold.model.fastnn.ops.Linear", "fastfold.model.fastnn.ops.Linear", "fastfold.model.fastnn.kernel.LayerNorm", "fastfold.model.fastnn.ops.Linear", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_pair", ",", "p_drop", ",", "c", "=", "128", ")", ":", "\n", "        ", "super", "(", "TriangleMultiplicationIncoming", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_pair", "=", "d_pair", "\n", "self", ".", "c", "=", "c", "\n", "\n", "self", ".", "layernorm1", "=", "LayerNorm", "(", "d_pair", ")", "\n", "self", ".", "left_right_projection", "=", "Linear", "(", "d_pair", ",", "2", "*", "c", ")", "\n", "self", ".", "left_right_gate", "=", "Linear", "(", "d_pair", ",", "2", "*", "c", ",", "initializer", "=", "'zeros'", ",", "bias_init", "=", "1.", ")", "\n", "\n", "self", ".", "output_gate", "=", "Linear", "(", "d_pair", ",", "d_pair", ",", "initializer", "=", "'zeros'", ",", "bias_init", "=", "1.", ")", "\n", "self", ".", "layernorm2", "=", "LayerNorm", "(", "c", ")", "\n", "self", ".", "output_projection", "=", "Linear", "(", "d_pair", ",", "d_pair", ",", "initializer", "=", "'zeros'", ",", "use_bias", "=", "False", ")", "\n", "self", ".", "output_bias", "=", "nn", ".", "parameter", ".", "Parameter", "(", "data", "=", "torch", ".", "zeros", "(", "(", "d_pair", ",", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "p_drop", "=", "p_drop", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.TriangleMultiplicationIncoming.forward": [[90, 120], ["triangle.TriangleMultiplicationIncoming.layernorm1", "triangle.TriangleMultiplicationIncoming.left_right_projection", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "triangle.TriangleMultiplicationIncoming.chunk", "fastfold.distributed.comm_async.gather_async", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "triangle.permute_final_dims", "fastfold.distributed.comm_async.gather_async_opp", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "triangle.permute_final_dims", "triangle.TriangleMultiplicationIncoming.output_projection", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "fastfold.model.fastnn.kernel.bias_ele_dropout_residual", "Z_mask_col.unsqueeze", "triangle.TriangleMultiplicationIncoming.left_right_gate", "fastfold.distributed.comm_async.gather_async_opp.contiguous", "triangle.TriangleMultiplicationIncoming.output_gate", "triangle.permute_final_dims", "triangle.TriangleMultiplicationIncoming.layernorm2"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.gather_async", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.gather_async_opp", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims", "home.repos.pwc.inspect_result.hpcaitech_fastfold.jit.fused_ops.bias_ele_dropout_residual", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims"], ["", "def", "forward", "(", "self", ",", "Z_raw", ",", "Z_mask_col", ")", ":", "\n", "        ", "Z", "=", "self", ".", "layernorm1", "(", "Z_raw", ")", "\n", "left_right_proj_act", "=", "self", ".", "left_right_projection", "(", "Z", ")", "\n", "left_right_proj_act", "=", "Z_mask_col", ".", "unsqueeze", "(", "-", "1", ")", "*", "left_right_proj_act", "\n", "\n", "left_right_proj_act", "*=", "torch", ".", "sigmoid", "(", "self", ".", "left_right_gate", "(", "Z", ")", ")", "\n", "\n", "left_proj_act", ",", "right_proj_act", "=", "left_right_proj_act", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "left_proj_act", ",", "work", "=", "gather_async", "(", "left_proj_act", ".", "contiguous", "(", ")", ",", "dim", "=", "2", ")", "\n", "\n", "g", "=", "torch", ".", "sigmoid", "(", "self", ".", "output_gate", "(", "Z", ")", ")", "\n", "\n", "right_proj_act", "=", "permute_final_dims", "(", "right_proj_act", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "left_proj_act", "=", "gather_async_opp", "(", "left_proj_act", ",", "work", ",", "dim", "=", "2", ")", "\n", "\n", "p", "=", "torch", ".", "matmul", "(", "permute_final_dims", "(", "left_proj_act", ",", "(", "2", ",", "1", ",", "0", ")", ")", ",", "right_proj_act", ")", "\n", "ab", "=", "permute_final_dims", "(", "p", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "# ab = torch.einsum('bkid,bkjd->bijd', left_proj_act, right_proj_act)", "\n", "ab", "=", "self", ".", "output_projection", "(", "self", ".", "layernorm2", "(", "ab", ")", ")", "\n", "dropout_mask", "=", "torch", ".", "ones_like", "(", "Z", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "device", "=", "Z", ".", "device", ",", "dtype", "=", "Z", ".", "dtype", ")", "\n", "return", "bias_ele_dropout_residual", "(", "ab", ",", "\n", "self", ".", "output_bias", ",", "\n", "g", ",", "\n", "dropout_mask", ",", "\n", "Z_raw", ",", "\n", "prob", "=", "self", ".", "p_drop", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.TriangleAttentionStartingNode.__init__": [[124, 145], ["torch.Module.__init__", "fastfold.model.fastnn.kernel.LayerNorm", "fastfold.model.fastnn.ops.Linear", "fastfold.model.fastnn.ops.SelfAttention", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_pair", ",", "p_drop", ",", "c", "=", "32", ",", "n_head", "=", "4", ")", ":", "\n", "        ", "super", "(", "TriangleAttentionStartingNode", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_pair", "=", "d_pair", "\n", "self", ".", "c", "=", "c", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "p_drop", "=", "p_drop", "\n", "\n", "self", ".", "layernorm1", "=", "LayerNorm", "(", "d_pair", ")", "\n", "# _init_weights = torch.nn.init.normal_(torch.zeros([d_pair, n_head]),", "\n", "#                                       std=1.0 / math.sqrt(d_pair))", "\n", "# self.linear_b_weights = nn.parameter.Parameter(data=_init_weights)", "\n", "\n", "self", ".", "linear_b", "=", "Linear", "(", "d_pair", ",", "n_head", ",", "initializer", "=", "'linear'", ",", "use_bias", "=", "False", ")", "\n", "self", ".", "attention", "=", "SelfAttention", "(", "qkv_dim", "=", "d_pair", ",", "\n", "c", "=", "c", ",", "\n", "n_head", "=", "n_head", ",", "\n", "out_dim", "=", "d_pair", ",", "\n", "gating", "=", "True", ",", "\n", "last_bias_fuse", "=", "True", ")", "\n", "\n", "self", ".", "out_bias", "=", "nn", ".", "parameter", ".", "Parameter", "(", "data", "=", "torch", ".", "zeros", "(", "(", "d_pair", ",", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.TriangleAttentionStartingNode.forward": [[146, 164], ["triangle.TriangleAttentionStartingNode.layernorm1", "triangle.TriangleAttentionStartingNode.linear_b", "fastfold.distributed.comm_async.gather_async", "triangle.TriangleAttentionStartingNode.attention", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "fastfold.model.fastnn.kernel.bias_dropout_add"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.gather_async", "home.repos.pwc.inspect_result.hpcaitech_fastfold.jit.fused_ops.bias_dropout_add"], ["", "def", "forward", "(", "self", ",", "Z_raw", ",", "Z_mask", ")", ":", "\n", "        ", "Z", "=", "self", ".", "layernorm1", "(", "Z_raw", ")", "\n", "b", "=", "self", ".", "linear_b", "(", "Z", ")", "\n", "# b = torch.einsum('bqkc,ch->bhqk', Z, self.linear_b_weights)", "\n", "b", ",", "work", "=", "gather_async", "(", "b", ",", "dim", "=", "1", ")", "\n", "\n", "# b = rearrange(b, 'b q k h -> b h q k')", "\n", "\n", "# padding_bias = (1e9 * (Z_mask - 1.))[:, :, None, None, :]", "\n", "Z", "=", "self", ".", "attention", "(", "Z", ",", "Z_mask", ",", "(", "b", ",", "work", ")", ")", "\n", "\n", "dropout_mask", "=", "torch", ".", "ones_like", "(", "Z", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", ",", "device", "=", "Z", ".", "device", ",", "dtype", "=", "Z", ".", "dtype", ")", "\n", "return", "bias_dropout_add", "(", "Z", ",", "\n", "self", ".", "out_bias", ",", "\n", "dropout_mask", ",", "\n", "Z_raw", ",", "\n", "prob", "=", "self", ".", "p_drop", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.TriangleAttentionEndingNode.__init__": [[168, 189], ["torch.Module.__init__", "fastfold.model.fastnn.kernel.LayerNorm", "fastfold.model.fastnn.ops.Linear", "fastfold.model.fastnn.ops.SelfAttention", "torch.parameter.Parameter", "torch.parameter.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_pair", ",", "p_drop", ",", "c", "=", "32", ",", "n_head", "=", "4", ")", ":", "\n", "        ", "super", "(", "TriangleAttentionEndingNode", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_pair", "=", "d_pair", "\n", "self", ".", "c", "=", "c", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "p_drop", "=", "p_drop", "\n", "\n", "self", ".", "layernorm1", "=", "LayerNorm", "(", "d_pair", ")", "\n", "# _init_weights = torch.nn.init.normal_(torch.zeros([d_pair, n_head]),", "\n", "#                                       std=1.0 / math.sqrt(d_pair))", "\n", "# self.linear_b_weights = nn.parameter.Parameter(data=_init_weights)", "\n", "\n", "self", ".", "linear_b", "=", "Linear", "(", "d_pair", ",", "n_head", ",", "initializer", "=", "'linear'", ",", "use_bias", "=", "False", ")", "\n", "self", ".", "attention", "=", "SelfAttention", "(", "qkv_dim", "=", "d_pair", ",", "\n", "c", "=", "c", ",", "\n", "n_head", "=", "n_head", ",", "\n", "out_dim", "=", "d_pair", ",", "\n", "gating", "=", "True", ",", "\n", "last_bias_fuse", "=", "True", ")", "\n", "\n", "self", ".", "out_bias", "=", "nn", ".", "parameter", ".", "Parameter", "(", "data", "=", "torch", ".", "zeros", "(", "(", "d_pair", ",", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.TriangleAttentionEndingNode.forward": [[190, 210], ["Z_raw.transpose", "Z_mask.transpose.transpose.transpose", "triangle.TriangleAttentionEndingNode.layernorm1", "triangle.TriangleAttentionEndingNode.linear_b", "fastfold.distributed.comm_async.gather_async", "triangle.TriangleAttentionEndingNode.attention", "Z.transpose.transpose.transpose", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "fastfold.model.fastnn.kernel.bias_dropout_add"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm_async.gather_async", "home.repos.pwc.inspect_result.hpcaitech_fastfold.jit.fused_ops.bias_dropout_add"], ["", "def", "forward", "(", "self", ",", "Z_raw", ",", "Z_mask", ")", ":", "\n", "        ", "Z", "=", "Z_raw", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "Z_mask", "=", "Z_mask", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n", "Z", "=", "self", ".", "layernorm1", "(", "Z", ")", "\n", "b", "=", "self", ".", "linear_b", "(", "Z", ")", "\n", "# b = torch.einsum('bqkc,ch->bhqk', Z, self.linear_b_weights)", "\n", "b", ",", "work", "=", "gather_async", "(", "b", ",", "dim", "=", "1", ")", "\n", "# b = rearrange(b, 'b q k h -> b h q k')", "\n", "# padding_bias = (1e9 * (Z_mask - 1.))[:, :, None, None, :]", "\n", "Z", "=", "self", ".", "attention", "(", "Z", ",", "Z_mask", ",", "(", "b", ",", "work", ")", ")", "\n", "\n", "Z", "=", "Z", ".", "transpose", "(", "-", "2", ",", "-", "3", ")", "\n", "dropout_mask", "=", "torch", ".", "ones_like", "(", "Z", "[", ":", ",", ":", ",", "0", ":", "1", ",", ":", "]", ",", "device", "=", "Z", ".", "device", ",", "dtype", "=", "Z", ".", "dtype", ")", "\n", "return", "bias_dropout_add", "(", "Z", ",", "\n", "self", ".", "out_bias", ",", "\n", "dropout_mask", ",", "\n", "Z_raw", ",", "\n", "prob", "=", "self", ".", "p_drop", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.PairStack.__init__": [[214, 236], ["torch.Module.__init__", "int", "triangle.TriangleMultiplicationOutgoing", "triangle.TriangleMultiplicationIncoming", "triangle.TriangleAttentionStartingNode", "triangle.TriangleAttentionEndingNode", "fastfold.model.fastnn.ops.Transition"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_pair", ",", "p_drop", "=", "0.25", ")", ":", "\n", "        ", "super", "(", "PairStack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_pair", "=", "d_pair", "\n", "self", ".", "n_head", "=", "4", "\n", "self", ".", "hidden_c", "=", "int", "(", "d_pair", "/", "self", ".", "n_head", ")", "\n", "\n", "self", ".", "TriangleMultiplicationOutgoing", "=", "TriangleMultiplicationOutgoing", "(", "d_pair", ",", "\n", "p_drop", "=", "p_drop", ",", "\n", "c", "=", "d_pair", ")", "\n", "self", ".", "TriangleMultiplicationIncoming", "=", "TriangleMultiplicationIncoming", "(", "d_pair", ",", "\n", "p_drop", "=", "p_drop", ",", "\n", "c", "=", "d_pair", ")", "\n", "self", ".", "TriangleAttentionStartingNode", "=", "TriangleAttentionStartingNode", "(", "d_pair", ",", "\n", "p_drop", "=", "p_drop", ",", "\n", "c", "=", "self", ".", "hidden_c", ",", "\n", "n_head", "=", "self", ".", "n_head", ")", "\n", "self", ".", "TriangleAttentionEndingNode", "=", "TriangleAttentionEndingNode", "(", "d_pair", ",", "\n", "p_drop", "=", "p_drop", ",", "\n", "c", "=", "self", ".", "hidden_c", ",", "\n", "n_head", "=", "self", ".", "n_head", ")", "\n", "self", ".", "PairTransition", "=", "Transition", "(", "d", "=", "d_pair", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.PairStack.forward": [[237, 250], ["fastfold.distributed.comm.scatter", "fastfold.distributed.comm.scatter", "triangle.PairStack.TriangleMultiplicationOutgoing", "fastfold.distributed.comm.row_to_col", "triangle.PairStack.TriangleMultiplicationIncoming", "fastfold.distributed.comm.col_to_row", "triangle.PairStack.TriangleAttentionStartingNode", "fastfold.distributed.comm.row_to_col", "triangle.PairStack.TriangleAttentionEndingNode", "triangle.PairStack.PairTransition", "fastfold.distributed.comm.col_to_row"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.scatter", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.scatter", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.row_to_col", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.col_to_row", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.row_to_col", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.col_to_row"], ["", "def", "forward", "(", "self", ",", "pair", ",", "pair_mask", ")", ":", "\n", "        ", "pair_mask_row", "=", "scatter", "(", "pair_mask", ",", "dim", "=", "1", ")", "\n", "pair_mask_col", "=", "scatter", "(", "pair_mask", ",", "dim", "=", "2", ")", "\n", "pair", "=", "self", ".", "TriangleMultiplicationOutgoing", "(", "pair", ",", "pair_mask_row", ")", "\n", "pair", "=", "row_to_col", "(", "pair", ")", "\n", "pair", "=", "self", ".", "TriangleMultiplicationIncoming", "(", "pair", ",", "pair_mask_col", ")", "\n", "pair", "=", "col_to_row", "(", "pair", ")", "\n", "pair", "=", "self", ".", "TriangleAttentionStartingNode", "(", "pair", ",", "pair_mask_row", ")", "\n", "pair", "=", "row_to_col", "(", "pair", ")", "\n", "pair", "=", "self", ".", "TriangleAttentionEndingNode", "(", "pair", ",", "pair_mask_col", ")", "\n", "pair", "=", "self", ".", "PairTransition", "(", "pair", ")", "\n", "pair", "=", "col_to_row", "(", "pair", ")", "\n", "return", "pair", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.fastnn.triangle.permute_final_dims": [[12, 16], ["list", "tensor.permute", "len", "range", "len"], "function", ["None"], ["def", "permute_final_dims", "(", "tensor", ",", "inds", ")", ":", "\n", "    ", "zero_index", "=", "-", "1", "*", "len", "(", "inds", ")", "\n", "first_inds", "=", "list", "(", "range", "(", "len", "(", "tensor", ".", "shape", "[", ":", "zero_index", "]", ")", ")", ")", "\n", "return", "tensor", ".", "permute", "(", "first_inds", "+", "[", "zero_index", "+", "i", "for", "i", "in", "inds", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.jit.options._set_jit_fusion_options": [[6, 30], ["int", "int", "torch._C._jit_set_profiling_mode", "torch._C._jit_set_profiling_executor", "torch._C._jit_override_can_fuse_on_cpu", "torch._C._jit_override_can_fuse_on_gpu", "torch.__version__.split", "torch.__version__.split"], "function", ["None"], ["def", "_set_jit_fusion_options", "(", ")", ":", "\n", "    ", "\"\"\"Set PyTorch JIT layer fusion options.\"\"\"", "\n", "global", "JIT_OPTIONS_SET", "\n", "if", "JIT_OPTIONS_SET", "==", "False", ":", "\n", "# flags required to enable jit fusion kernels", "\n", "        ", "TORCH_MAJOR", "=", "int", "(", "torch", ".", "__version__", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "TORCH_MINOR", "=", "int", "(", "torch", ".", "__version__", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "\n", "# if (TORCH_MAJOR > 1) or (TORCH_MAJOR == 1 and TORCH_MINOR >= 10):", "\n", "#     # nvfuser", "\n", "#     torch._C._jit_set_profiling_executor(True)", "\n", "#     torch._C._jit_set_profiling_mode(True)", "\n", "#     torch._C._jit_override_can_fuse_on_cpu(False)", "\n", "#     torch._C._jit_override_can_fuse_on_gpu(False)", "\n", "#     torch._C._jit_set_texpr_fuser_enabled(False)", "\n", "#     torch._C._jit_set_nvfuser_enabled(True)", "\n", "#     torch._C._debug_set_autodiff_subgraph_inlining(False)", "\n", "# else:", "\n", "# legacy pytorch fuser", "\n", "torch", ".", "_C", ".", "_jit_set_profiling_mode", "(", "False", ")", "\n", "torch", ".", "_C", ".", "_jit_set_profiling_executor", "(", "False", ")", "\n", "torch", ".", "_C", ".", "_jit_override_can_fuse_on_cpu", "(", "True", ")", "\n", "torch", ".", "_C", ".", "_jit_override_can_fuse_on_gpu", "(", "True", ")", "\n", "\n", "JIT_OPTIONS_SET", "=", "True", "", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.jit.fused_ops.bias_sigmod_ele": [[5, 8], ["torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["@", "torch", ".", "jit", ".", "script", "\n", "def", "bias_sigmod_ele", "(", "y", ",", "bias", ",", "z", ")", ":", "\n", "    ", "return", "torch", ".", "sigmoid", "(", "y", "+", "bias", ")", "*", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.jit.fused_ops.bias_dropout_add": [[10, 16], ["torch.dropout"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "bias_dropout_add", "(", "x", ":", "torch", ".", "Tensor", ",", "bias", ":", "torch", ".", "Tensor", ",", "dropmask", ":", "torch", ".", "Tensor", ",", "\n", "residual", ":", "torch", ".", "Tensor", ",", "prob", ":", "float", ",", "training", ":", "bool", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "out", "=", "(", "x", "+", "bias", ")", "*", "F", ".", "dropout", "(", "dropmask", ",", "p", "=", "prob", ",", "training", "=", "training", ")", "\n", "out", "=", "residual", "+", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.jit.fused_ops.bias_ele_dropout_residual": [[18, 23], ["torch.dropout"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "bias_ele_dropout_residual", "(", "ab", ":", "torch", ".", "Tensor", ",", "b", ":", "torch", ".", "Tensor", ",", "g", ":", "torch", ".", "Tensor", ",", "\n", "dropout_mask", ":", "torch", ".", "Tensor", ",", "Z_raw", ":", "torch", ".", "Tensor", ",", "prob", ":", "float", ",", "\n", "training", ":", "bool", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "return", "Z_raw", "+", "F", ".", "dropout", "(", "dropout_mask", ",", "p", "=", "prob", ",", "training", "=", "training", ")", "*", "(", "g", "*", "(", "ab", "+", "b", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.softmax.SoftmaxAffineFunction.forward": [[12, 21], ["input.contiguous", "functools.reduce", "fastfold_softmax_cuda.forward", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.reduce", "home.repos.pwc.inspect_result.hpcaitech_fastfold.hub.alphafold.AlphaFold.forward"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "input_", "=", "input", ".", "contiguous", "(", ")", "\n", "ctx", ".", "cols", "=", "input_", ".", "shape", "[", "-", "1", "]", "\n", "ctx", ".", "rows", "=", "reduce", "(", "mul", ",", "input", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "output", "=", "fastfold_softmax_cuda", ".", "forward", "(", "input_", ",", "ctx", ".", "rows", ",", "ctx", ".", "cols", ")", "\n", "ctx", ".", "save_for_backward", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.softmax.SoftmaxAffineFunction.backward": [[22, 32], ["fastfold_softmax_cuda.backward", "grad_output.contiguous"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.layer_norm.FusedLayerNormAffineFunction.backward"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "\n", "        ", "output", "=", "ctx", ".", "saved_tensors", "[", "0", "]", "\n", "\n", "grad_input", "=", "None", "\n", "grad_input", "=", "fastfold_softmax_cuda", ".", "backward", "(", "grad_output", ".", "contiguous", "(", ")", ",", "output", ",", "\n", "ctx", ".", "rows", ",", "ctx", ".", "cols", ")", "\n", "\n", "return", "grad_input", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.softmax.FusedScaleMaskSoftmaxFunction.forward": [[36, 48], ["input.contiguous", "mask.contiguous", "functools.reduce", "fastfold_softmax_cuda.fused_scale_mask_softmax_forward", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.reduce"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "mask", ",", "scale", ")", ":", "\n", "        ", "input_", "=", "input", ".", "contiguous", "(", ")", "\n", "mask_", "=", "mask", ".", "contiguous", "(", ")", "\n", "ctx", ".", "cols", "=", "input_", ".", "shape", "[", "-", "1", "]", "\n", "ctx", ".", "rows", "=", "reduce", "(", "mul", ",", "input", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "output", "=", "fastfold_softmax_cuda", ".", "fused_scale_mask_softmax_forward", "(", "\n", "input_", ",", "mask_", ",", "ctx", ".", "rows", ",", "ctx", ".", "cols", ",", "scale", ")", "\n", "ctx", ".", "save_for_backward", "(", "output", ",", "mask_", ")", "\n", "ctx", ".", "scale", "=", "scale", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.softmax.FusedScaleMaskSoftmaxFunction.backward": [[49, 59], ["fastfold_softmax_cuda.fused_scale_mask_softmax_backward", "grad_output.contiguous", "fastfold_softmax_cuda.fused_scale_mask_softmax_backward.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "\n", "        ", "output", ",", "mask_", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "None", "\n", "grad_input", "=", "fastfold_softmax_cuda", ".", "fused_scale_mask_softmax_backward", "(", "\n", "grad_output", ".", "contiguous", "(", ")", ",", "output", ",", "mask_", ",", "ctx", ".", "rows", ",", "ctx", ".", "cols", ",", "ctx", ".", "scale", ")", "\n", "\n", "return", "grad_input", ".", "contiguous", "(", ")", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.softmax.FusedScaleMaskBiasSoftmaxFunction.forward": [[63, 76], ["input.contiguous", "mask.contiguous", "bias.contiguous", "functools.reduce", "fastfold_softmax_cuda.fused_scale_mask_bias_softmax_forward", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.reduce"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "mask", ",", "bias", ",", "scale", ")", ":", "\n", "        ", "input_", "=", "input", ".", "contiguous", "(", ")", "\n", "mask_", "=", "mask", ".", "contiguous", "(", ")", "\n", "bias_", "=", "bias", ".", "contiguous", "(", ")", "\n", "ctx", ".", "cols", "=", "input_", ".", "shape", "[", "-", "1", "]", "\n", "ctx", ".", "rows", "=", "reduce", "(", "mul", ",", "input", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "output", "=", "fastfold_softmax_cuda", ".", "fused_scale_mask_bias_softmax_forward", "(", "\n", "input_", ",", "mask_", ",", "bias_", ",", "ctx", ".", "rows", ",", "ctx", ".", "cols", ",", "scale", ")", "\n", "ctx", ".", "save_for_backward", "(", "output", ",", "mask_", ",", "bias_", ")", "\n", "ctx", ".", "scale", "=", "scale", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.softmax.FusedScaleMaskBiasSoftmaxFunction.backward": [[77, 91], ["fastfold_softmax_cuda.fused_scale_mask_bias_softmax_backward", "grad_input.contiguous.contiguous.contiguous", "torch.sum", "grad_output.contiguous", "grad_input.contiguous.contiguous.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "\n", "        ", "output", ",", "mask_", ",", "bias_", "=", "ctx", ".", "saved_tensors", "\n", "\n", "grad_input", "=", "None", "\n", "grad_input", "=", "fastfold_softmax_cuda", ".", "fused_scale_mask_bias_softmax_backward", "(", "\n", "grad_output", ".", "contiguous", "(", ")", ",", "output", ",", "mask_", ",", "bias_", ",", "ctx", ".", "rows", ",", "ctx", ".", "cols", ",", "ctx", ".", "scale", ")", "\n", "\n", "grad_input", "=", "grad_input", ".", "contiguous", "(", ")", "\n", "\n", "grad_bias", "=", "torch", ".", "sum", "(", "grad_input", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "return", "grad_input", ".", "contiguous", "(", ")", ",", "grad_bias", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.layer_norm.FusedLayerNormAffineFunction.forward": [[14, 27], ["input.contiguous", "weight.contiguous", "bias.contiguous", "fastfold_layer_norm_cuda.forward_affine", "ctx.save_for_backward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "weight", ",", "bias", ",", "normalized_shape", ",", "eps", ")", ":", "\n", "\n", "        ", "ctx", ".", "normalized_shape", "=", "normalized_shape", "\n", "ctx", ".", "eps", "=", "eps", "\n", "input_", "=", "input", ".", "contiguous", "(", ")", "\n", "weight_", "=", "weight", ".", "contiguous", "(", ")", "\n", "bias_", "=", "bias", ".", "contiguous", "(", ")", "\n", "output", ",", "mean", ",", "invvar", "=", "fastfold_layer_norm_cuda", ".", "forward_affine", "(", "\n", "input_", ",", "ctx", ".", "normalized_shape", ",", "weight_", ",", "bias_", ",", "ctx", ".", "eps", ")", "\n", "ctx", ".", "save_for_backward", "(", "input_", ",", "weight_", ",", "bias_", ",", "mean", ",", "invvar", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.layer_norm.FusedLayerNormAffineFunction.backward": [[28, 40], ["fastfold_layer_norm_cuda.backward_affine", "grad_output.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "\n", "        ", "input_", ",", "weight_", ",", "bias_", ",", "mean", ",", "invvar", "=", "ctx", ".", "saved_tensors", "\n", "grad_input", "=", "grad_weight", "=", "grad_bias", "=", "None", "\n", "grad_input", ",", "grad_weight", ",", "grad_bias", "=", "fastfold_layer_norm_cuda", ".", "backward_affine", "(", "\n", "grad_output", ".", "contiguous", "(", ")", ",", "mean", ",", "invvar", ",", "\n", "input_", ",", "ctx", ".", "normalized_shape", ",", "\n", "weight_", ",", "bias_", ",", "ctx", ".", "eps", ")", "\n", "\n", "return", "grad_input", ",", "grad_weight", ",", "grad_bias", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.layer_norm.MixedFusedLayerNorm.__init__": [[44, 61], ["super().__init__", "isinstance", "torch.Size", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layer_norm.MixedFusedLayerNorm.reset_parameters", "torch.Tensor", "torch.Tensor", "importlib.import_module", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__", "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.layer_norm.MixedFusedLayerNorm.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "normalized_shape", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "MixedFusedLayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "global", "fastfold_layer_norm_cuda", "\n", "if", "fastfold_layer_norm_cuda", "is", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "fastfold_layer_norm_cuda", "=", "importlib", ".", "import_module", "(", "\"fastfold_layer_norm_cuda\"", ")", "\n", "", "except", "ImportError", ":", "\n", "                ", "raise", "RuntimeError", "(", "'MixedFusedLayerNorm requires cuda extensions'", ")", "\n", "\n", "", "", "if", "isinstance", "(", "normalized_shape", ",", "numbers", ".", "Integral", ")", ":", "\n", "            ", "normalized_shape", "=", "(", "normalized_shape", ",", ")", "\n", "", "self", ".", "normalized_shape", "=", "torch", ".", "Size", "(", "normalized_shape", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "*", "normalized_shape", ")", ")", "\n", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "*", "normalized_shape", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.layer_norm.MixedFusedLayerNorm.reset_parameters": [[62, 66], ["torch.nn.init.ones_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "init", ".", "ones_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.cuda_native.layer_norm.MixedFusedLayerNorm.forward": [[67, 71], ["FusedLayerNormAffineFunction.apply"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "return", "FusedLayerNormAffineFunction", ".", "apply", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "normalized_shape", ",", "self", ".", "eps", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.hub.alphafold.AlphaFold.__init__": [[58, 108], ["torch.Module.__init__", "fastfold.model.nn.embedders.InputEmbedder", "fastfold.model.nn.embedders.RecyclingEmbedder", "fastfold.model.nn.embedders.TemplateAngleEmbedder", "fastfold.model.nn.embedders.TemplatePairEmbedder", "fastfold.model.nn.template.TemplatePairStack", "fastfold.model.nn.template.TemplatePointwiseAttention", "fastfold.model.nn.embedders.ExtraMSAEmbedder", "fastfold.model.nn.evoformer.ExtraMSAStack", "fastfold.model.nn.evoformer.EvoformerStack", "fastfold.model.nn.structure_module.StructureModule", "fastfold.model.nn.heads.AuxiliaryHeads"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            config:\n                A dict-like config object (like the one in config.py)\n        \"\"\"", "\n", "super", "(", "AlphaFold", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "globals", "=", "config", ".", "globals", "\n", "config", "=", "config", ".", "model", "\n", "template_config", "=", "config", ".", "template", "\n", "extra_msa_config", "=", "config", ".", "extra_msa", "\n", "\n", "# Main trunk + structure module", "\n", "self", ".", "input_embedder", "=", "InputEmbedder", "(", "\n", "**", "config", "[", "\"input_embedder\"", "]", ",", "\n", ")", "\n", "self", ".", "recycling_embedder", "=", "RecyclingEmbedder", "(", "\n", "**", "config", "[", "\"recycling_embedder\"", "]", ",", "\n", ")", "\n", "self", ".", "template_angle_embedder", "=", "TemplateAngleEmbedder", "(", "\n", "**", "template_config", "[", "\"template_angle_embedder\"", "]", ",", "\n", ")", "\n", "self", ".", "template_pair_embedder", "=", "TemplatePairEmbedder", "(", "\n", "**", "template_config", "[", "\"template_pair_embedder\"", "]", ",", "\n", ")", "\n", "self", ".", "template_pair_stack", "=", "TemplatePairStack", "(", "\n", "**", "template_config", "[", "\"template_pair_stack\"", "]", ",", "\n", ")", "\n", "self", ".", "template_pointwise_att", "=", "TemplatePointwiseAttention", "(", "\n", "**", "template_config", "[", "\"template_pointwise_attention\"", "]", ",", "\n", ")", "\n", "self", ".", "extra_msa_embedder", "=", "ExtraMSAEmbedder", "(", "\n", "**", "extra_msa_config", "[", "\"extra_msa_embedder\"", "]", ",", "\n", ")", "\n", "self", ".", "extra_msa_stack", "=", "ExtraMSAStack", "(", "\n", "**", "extra_msa_config", "[", "\"extra_msa_stack\"", "]", ",", "\n", ")", "\n", "self", ".", "evoformer", "=", "EvoformerStack", "(", "\n", "**", "config", "[", "\"evoformer_stack\"", "]", ",", "\n", ")", "\n", "self", ".", "structure_module", "=", "StructureModule", "(", "\n", "**", "config", "[", "\"structure_module\"", "]", ",", "\n", ")", "\n", "\n", "self", ".", "aux_heads", "=", "AuxiliaryHeads", "(", "\n", "config", "[", "\"heads\"", "]", ",", "\n", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.hub.alphafold.AlphaFold.embed_templates": [[109, 174], ["range", "fastfold.utils.tensor_utils.dict_multimap", "alphafold.AlphaFold.template_pair_stack", "alphafold.AlphaFold.template_pointwise_att", "ret.update", "batch[].new_tensor", "fastfold.utils.tensor_utils.tensor_tree_map", "fastfold.utils.feats.build_template_pair_feat().to", "alphafold.AlphaFold.template_pair_embedder", "single_template_embeds.update", "fastfold.utils.tensor_utils.dict_multimap.append", "functools.partial", "pair_mask.unsqueeze().to", "fastfold.utils.feats.build_template_angle_feat", "alphafold.AlphaFold.template_angle_embedder", "batch[].to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "fastfold.utils.feats.build_template_pair_feat", "pair_mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.dict_multimap", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.feats.build_template_angle_feat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.feats.build_template_pair_feat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze"], ["", "def", "embed_templates", "(", "self", ",", "batch", ",", "z", ",", "pair_mask", ",", "templ_dim", ")", ":", "\n", "# Embed the templates one at a time (with a poor man's vmap)", "\n", "        ", "template_embeds", "=", "[", "]", "\n", "n_templ", "=", "batch", "[", "\"template_aatype\"", "]", ".", "shape", "[", "templ_dim", "]", "\n", "for", "i", "in", "range", "(", "n_templ", ")", ":", "\n", "            ", "idx", "=", "batch", "[", "\"template_aatype\"", "]", ".", "new_tensor", "(", "i", ")", "\n", "single_template_feats", "=", "tensor_tree_map", "(", "\n", "lambda", "t", ":", "torch", ".", "index_select", "(", "t", ",", "templ_dim", ",", "idx", ")", ",", "\n", "batch", ",", "\n", ")", "\n", "\n", "single_template_embeds", "=", "{", "}", "\n", "if", "self", ".", "config", ".", "template", ".", "embed_angles", ":", "\n", "                ", "template_angle_feat", "=", "build_template_angle_feat", "(", "\n", "single_template_feats", ",", "\n", ")", "\n", "\n", "# [*, S_t, N, C_m]", "\n", "a", "=", "self", ".", "template_angle_embedder", "(", "template_angle_feat", ")", "\n", "\n", "single_template_embeds", "[", "\"angle\"", "]", "=", "a", "\n", "\n", "# [*, S_t, N, N, C_t]", "\n", "", "t", "=", "build_template_pair_feat", "(", "\n", "single_template_feats", ",", "\n", "use_unit_vector", "=", "self", ".", "config", ".", "template", ".", "use_unit_vector", ",", "\n", "inf", "=", "self", ".", "config", ".", "template", ".", "inf", ",", "\n", "eps", "=", "self", ".", "config", ".", "template", ".", "eps", ",", "\n", "**", "self", ".", "config", ".", "template", ".", "distogram", ",", "\n", ")", ".", "to", "(", "z", ".", "dtype", ")", "\n", "t", "=", "self", ".", "template_pair_embedder", "(", "t", ")", "\n", "\n", "single_template_embeds", ".", "update", "(", "{", "\"pair\"", ":", "t", "}", ")", "\n", "\n", "template_embeds", ".", "append", "(", "single_template_embeds", ")", "\n", "\n", "", "template_embeds", "=", "dict_multimap", "(", "\n", "partial", "(", "torch", ".", "cat", ",", "dim", "=", "templ_dim", ")", ",", "\n", "template_embeds", ",", "\n", ")", "\n", "\n", "# [*, S_t, N, N, C_z]", "\n", "t", "=", "self", ".", "template_pair_stack", "(", "\n", "template_embeds", "[", "\"pair\"", "]", ",", "\n", "pair_mask", ".", "unsqueeze", "(", "-", "3", ")", ".", "to", "(", "dtype", "=", "z", ".", "dtype", ")", ",", "\n", "chunk_size", "=", "self", ".", "globals", ".", "chunk_size", ",", "\n", "_mask_trans", "=", "self", ".", "config", ".", "_mask_trans", ",", "\n", ")", "\n", "\n", "# [*, N, N, C_z]", "\n", "t", "=", "self", ".", "template_pointwise_att", "(", "\n", "t", ",", "\n", "z", ",", "\n", "template_mask", "=", "batch", "[", "\"template_mask\"", "]", ".", "to", "(", "dtype", "=", "z", ".", "dtype", ")", ",", "\n", "chunk_size", "=", "self", ".", "globals", ".", "chunk_size", ",", "\n", ")", "\n", "t", "=", "t", "*", "(", "torch", ".", "sum", "(", "batch", "[", "\"template_mask\"", "]", ")", ">", "0", ")", "\n", "\n", "ret", "=", "{", "}", "\n", "if", "self", ".", "config", ".", "template", ".", "embed_angles", ":", "\n", "            ", "ret", "[", "\"template_angle_embedding\"", "]", "=", "template_embeds", "[", "\"angle\"", "]", "\n", "\n", "", "ret", ".", "update", "(", "{", "\"template_pair_embedding\"", ":", "t", "}", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.hub.alphafold.AlphaFold.iteration": [[175, 341], ["len", "alphafold.AlphaFold.input_embedder", "fastfold.utils.feats.pseudo_beta_fn().to", "alphafold.AlphaFold.recycling_embedder", "alphafold.AlphaFold.evoformer", "alphafold.AlphaFold.structure_module", "fastfold.utils.feats.atom14_to_atom37", "next", "torch.cat.new_zeros", "torch.cat.new_zeros", "alphafold.AlphaFold.new_zeros", "alphafold.AlphaFold.new_zeros", "alphafold.AlphaFold.embed_templates", "alphafold.AlphaFold.extra_msa_embedder", "alphafold.AlphaFold.extra_msa_stack", "alphafold.AlphaFold.parameters", "feats[].to", "fastfold.utils.feats.pseudo_beta_fn", "pair_mask.to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fastfold.utils.feats.build_extra_msa_feat", "torch.cat.to", "torch.cat.to", "pair_mask.to", "feats[].to", "feats.items", "k.startswith", "feats[].to", "pair_mask.to"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.feats.atom14_to_atom37", "home.repos.pwc.inspect_result.hpcaitech_fastfold.hub.alphafold.AlphaFold.embed_templates", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.pseudo_beta_fn", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.feats.build_extra_msa_feat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to"], ["", "def", "iteration", "(", "self", ",", "feats", ",", "m_1_prev", ",", "z_prev", ",", "x_prev", ",", "_recycle", "=", "True", ")", ":", "\n", "# Primary output dictionary", "\n", "        ", "outputs", "=", "{", "}", "\n", "\n", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "\n", "for", "k", "in", "feats", ":", "\n", "            ", "if", "(", "feats", "[", "k", "]", ".", "dtype", "==", "torch", ".", "float32", ")", ":", "\n", "                ", "feats", "[", "k", "]", "=", "feats", "[", "k", "]", ".", "to", "(", "dtype", "=", "dtype", ")", "\n", "\n", "# Grab some data about the input", "\n", "", "", "batch_dims", "=", "feats", "[", "\"target_feat\"", "]", ".", "shape", "[", ":", "-", "2", "]", "\n", "no_batch_dims", "=", "len", "(", "batch_dims", ")", "\n", "n", "=", "feats", "[", "\"target_feat\"", "]", ".", "shape", "[", "-", "2", "]", "\n", "n_seq", "=", "feats", "[", "\"msa_feat\"", "]", ".", "shape", "[", "-", "3", "]", "\n", "device", "=", "feats", "[", "\"target_feat\"", "]", ".", "device", "\n", "\n", "# Prep some features", "\n", "seq_mask", "=", "feats", "[", "\"seq_mask\"", "]", "\n", "pair_mask", "=", "seq_mask", "[", "...", ",", "None", "]", "*", "seq_mask", "[", "...", ",", "None", ",", ":", "]", "\n", "msa_mask", "=", "feats", "[", "\"msa_mask\"", "]", "\n", "\n", "# Initialize the MSA and pair representations", "\n", "\n", "# m: [*, S_c, N, C_m]", "\n", "# z: [*, N, N, C_z]", "\n", "m", ",", "z", "=", "self", ".", "input_embedder", "(", "\n", "feats", "[", "\"target_feat\"", "]", ",", "\n", "feats", "[", "\"residue_index\"", "]", ",", "\n", "feats", "[", "\"msa_feat\"", "]", ",", "\n", ")", "\n", "\n", "# Initialize the recycling embeddings, if needs be", "\n", "if", "None", "in", "[", "m_1_prev", ",", "z_prev", ",", "x_prev", "]", ":", "\n", "# [*, N, C_m]", "\n", "            ", "m_1_prev", "=", "m", ".", "new_zeros", "(", "\n", "(", "*", "batch_dims", ",", "n", ",", "self", ".", "config", ".", "input_embedder", ".", "c_m", ")", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "\n", "\n", "# [*, N, N, C_z]", "\n", "z_prev", "=", "z", ".", "new_zeros", "(", "\n", "(", "*", "batch_dims", ",", "n", ",", "n", ",", "self", ".", "config", ".", "input_embedder", ".", "c_z", ")", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "\n", "\n", "# [*, N, 3]", "\n", "x_prev", "=", "z", ".", "new_zeros", "(", "\n", "(", "*", "batch_dims", ",", "n", ",", "residue_constants", ".", "atom_type_num", ",", "3", ")", ",", "\n", "requires_grad", "=", "False", ",", "\n", ")", "\n", "\n", "", "x_prev", "=", "pseudo_beta_fn", "(", "\n", "feats", "[", "\"aatype\"", "]", ",", "x_prev", ",", "None", "\n", ")", ".", "to", "(", "dtype", "=", "z", ".", "dtype", ")", "\n", "\n", "# m_1_prev_emb: [*, N, C_m]", "\n", "# z_prev_emb: [*, N, N, C_z]", "\n", "m_1_prev_emb", ",", "z_prev_emb", "=", "self", ".", "recycling_embedder", "(", "\n", "m_1_prev", ",", "\n", "z_prev", ",", "\n", "x_prev", ",", "\n", ")", "\n", "\n", "# If the number of recycling iterations is 0, skip recycling", "\n", "# altogether. We zero them this way instead of computing them", "\n", "# conditionally to avoid leaving parameters unused, which has annoying", "\n", "# implications for DDP training.", "\n", "if", "(", "not", "_recycle", ")", ":", "\n", "            ", "m_1_prev_emb", "*=", "0", "\n", "z_prev_emb", "*=", "0", "\n", "\n", "# [*, S_c, N, C_m]", "\n", "", "m", "[", "...", ",", "0", ",", ":", ",", ":", "]", "+=", "m_1_prev_emb", "\n", "\n", "# [*, N, N, C_z]", "\n", "z", "+=", "z_prev_emb", "\n", "\n", "# Possibly prevents memory fragmentation", "\n", "del", "m_1_prev", ",", "z_prev", ",", "x_prev", ",", "m_1_prev_emb", ",", "z_prev_emb", "\n", "\n", "# Embed the templates + merge with MSA/pair embeddings", "\n", "if", "self", ".", "config", ".", "template", ".", "enabled", ":", "\n", "            ", "template_feats", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "feats", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "\"template_\"", ")", "\n", "}", "\n", "template_embeds", "=", "self", ".", "embed_templates", "(", "\n", "template_feats", ",", "\n", "z", ",", "\n", "pair_mask", ".", "to", "(", "dtype", "=", "z", ".", "dtype", ")", ",", "\n", "no_batch_dims", ",", "\n", ")", "\n", "\n", "# [*, N, N, C_z]", "\n", "z", "=", "z", "+", "template_embeds", "[", "\"template_pair_embedding\"", "]", "\n", "\n", "if", "self", ".", "config", ".", "template", ".", "embed_angles", ":", "\n", "# [*, S = S_c + S_t, N, C_m]", "\n", "                ", "m", "=", "torch", ".", "cat", "(", "\n", "[", "m", ",", "template_embeds", "[", "\"template_angle_embedding\"", "]", "]", ",", "\n", "dim", "=", "-", "3", "\n", ")", "\n", "\n", "# [*, S, N]", "\n", "torsion_angles_mask", "=", "feats", "[", "\"template_torsion_angles_mask\"", "]", "\n", "msa_mask", "=", "torch", ".", "cat", "(", "\n", "[", "feats", "[", "\"msa_mask\"", "]", ",", "torsion_angles_mask", "[", "...", ",", "2", "]", "]", ",", "\n", "dim", "=", "-", "2", "\n", ")", "\n", "\n", "# Embed extra MSA features + merge with pairwise embeddings", "\n", "", "", "if", "self", ".", "config", ".", "extra_msa", ".", "enabled", ":", "\n", "# [*, S_e, N, C_e]", "\n", "            ", "a", "=", "self", ".", "extra_msa_embedder", "(", "build_extra_msa_feat", "(", "feats", ")", ")", "\n", "\n", "# [*, N, N, C_z]", "\n", "z", "=", "self", ".", "extra_msa_stack", "(", "\n", "a", ",", "\n", "z", ",", "\n", "msa_mask", "=", "feats", "[", "\"extra_msa_mask\"", "]", ".", "to", "(", "dtype", "=", "a", ".", "dtype", ")", ",", "\n", "chunk_size", "=", "self", ".", "globals", ".", "chunk_size", ",", "\n", "pair_mask", "=", "pair_mask", ".", "to", "(", "dtype", "=", "z", ".", "dtype", ")", ",", "\n", "_mask_trans", "=", "self", ".", "config", ".", "_mask_trans", ",", "\n", ")", "\n", "\n", "# Run MSA + pair embeddings through the trunk of the network", "\n", "# m: [*, S, N, C_m]", "\n", "# z: [*, N, N, C_z]", "\n", "# s: [*, N, C_s]", "\n", "", "m", ",", "z", ",", "s", "=", "self", ".", "evoformer", "(", "\n", "m", ",", "\n", "z", ",", "\n", "msa_mask", "=", "msa_mask", ".", "to", "(", "dtype", "=", "m", ".", "dtype", ")", ",", "\n", "pair_mask", "=", "pair_mask", ".", "to", "(", "dtype", "=", "z", ".", "dtype", ")", ",", "\n", "chunk_size", "=", "self", ".", "globals", ".", "chunk_size", ",", "\n", "_mask_trans", "=", "self", ".", "config", ".", "_mask_trans", ",", "\n", ")", "\n", "\n", "outputs", "[", "\"msa\"", "]", "=", "m", "[", "...", ",", ":", "n_seq", ",", ":", ",", ":", "]", "\n", "outputs", "[", "\"pair\"", "]", "=", "z", "\n", "outputs", "[", "\"single\"", "]", "=", "s", "\n", "\n", "# Predict 3D structure", "\n", "outputs", "[", "\"sm\"", "]", "=", "self", ".", "structure_module", "(", "\n", "s", ",", "\n", "z", ",", "\n", "feats", "[", "\"aatype\"", "]", ",", "\n", "mask", "=", "feats", "[", "\"seq_mask\"", "]", ".", "to", "(", "dtype", "=", "s", ".", "dtype", ")", ",", "\n", ")", "\n", "outputs", "[", "\"final_atom_positions\"", "]", "=", "atom14_to_atom37", "(", "\n", "outputs", "[", "\"sm\"", "]", "[", "\"positions\"", "]", "[", "-", "1", "]", ",", "feats", "\n", ")", "\n", "outputs", "[", "\"final_atom_mask\"", "]", "=", "feats", "[", "\"atom37_atom_exists\"", "]", "\n", "outputs", "[", "\"final_affine_tensor\"", "]", "=", "outputs", "[", "\"sm\"", "]", "[", "\"frames\"", "]", "[", "-", "1", "]", "\n", "\n", "# Save embeddings for use during the next recycling iteration", "\n", "\n", "# [*, N, C_m]", "\n", "m_1_prev", "=", "m", "[", "...", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "# [*, N, N, C_z]", "\n", "z_prev", "=", "z", "\n", "\n", "# [*, N, 3]", "\n", "x_prev", "=", "outputs", "[", "\"final_atom_positions\"", "]", "\n", "\n", "return", "outputs", ",", "m_1_prev", ",", "z_prev", ",", "x_prev", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.hub.alphafold.AlphaFold._disable_activation_checkpointing": [[342, 348], ["None"], "methods", ["None"], ["", "def", "_disable_activation_checkpointing", "(", "self", ")", ":", "\n", "        ", "self", ".", "template_pair_stack", ".", "blocks_per_ckpt", "=", "None", "\n", "self", ".", "evoformer", ".", "blocks_per_ckpt", "=", "None", "\n", "\n", "for", "b", "in", "self", ".", "extra_msa_stack", ".", "blocks", ":", "\n", "            ", "b", ".", "ckpt", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.hub.alphafold.AlphaFold._enable_activation_checkpointing": [[349, 359], ["None"], "methods", ["None"], ["", "", "def", "_enable_activation_checkpointing", "(", "self", ")", ":", "\n", "        ", "self", ".", "template_pair_stack", ".", "blocks_per_ckpt", "=", "(", "\n", "self", ".", "config", ".", "template", ".", "template_pair_stack", ".", "blocks_per_ckpt", "\n", ")", "\n", "self", ".", "evoformer", ".", "blocks_per_ckpt", "=", "(", "\n", "self", ".", "config", ".", "evoformer_stack", ".", "blocks_per_ckpt", "\n", ")", "\n", "\n", "for", "b", "in", "self", ".", "extra_msa_stack", ".", "blocks", ":", "\n", "            ", "b", ".", "ckpt", "=", "self", ".", "config", ".", "extra_msa", ".", "extra_msa_stack", ".", "ckpt", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.hub.alphafold.AlphaFold.forward": [[360, 447], ["torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "torch.is_grad_enabled", "alphafold.AlphaFold._disable_activation_checkpointing", "range", "outputs.update", "fastfold.utils.tensor_utils.tensor_tree_map", "alphafold.AlphaFold.aux_heads", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "alphafold.AlphaFold.iteration", "alphafold.AlphaFold._enable_activation_checkpointing", "torch.is_autocast_enabled", "torch.is_autocast_enabled", "torch.is_autocast_enabled", "torch.is_autocast_enabled", "torch.clear_autocast_cache", "torch.clear_autocast_cache", "torch.clear_autocast_cache", "torch.clear_autocast_cache"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.hub.alphafold.AlphaFold._disable_activation_checkpointing", "home.repos.pwc.inspect_result.hpcaitech_fastfold.hub.alphafold.AlphaFold.iteration", "home.repos.pwc.inspect_result.hpcaitech_fastfold.hub.alphafold.AlphaFold._enable_activation_checkpointing"], ["", "", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            batch:\n                Dictionary of arguments outlined in Algorithm 2. Keys must\n                include the official names of the features in the\n                supplement subsection 1.2.9.\n\n                The final dimension of each input must have length equal to\n                the number of recycling iterations.\n\n                Features (without the recycling dimension):\n\n                    \"aatype\" ([*, N_res]):\n                        Contrary to the supplement, this tensor of residue\n                        indices is not one-hot.\n                    \"target_feat\" ([*, N_res, C_tf])\n                        One-hot encoding of the target sequence. C_tf is\n                        config.model.input_embedder.tf_dim.\n                    \"residue_index\" ([*, N_res])\n                        Tensor whose final dimension consists of\n                        consecutive indices from 0 to N_res.\n                    \"msa_feat\" ([*, N_seq, N_res, C_msa])\n                        MSA features, constructed as in the supplement.\n                        C_msa is config.model.input_embedder.msa_dim.\n                    \"seq_mask\" ([*, N_res])\n                        1-D sequence mask\n                    \"msa_mask\" ([*, N_seq, N_res])\n                        MSA mask\n                    \"pair_mask\" ([*, N_res, N_res])\n                        2-D pair mask\n                    \"extra_msa_mask\" ([*, N_extra, N_res])\n                        Extra MSA mask\n                    \"template_mask\" ([*, N_templ])\n                        Template mask (on the level of templates, not\n                        residues)\n                    \"template_aatype\" ([*, N_templ, N_res])\n                        Tensor of template residue indices (indices greater\n                        than 19 are clamped to 20 (Unknown))\n                    \"template_all_atom_positions\"\n                        ([*, N_templ, N_res, 37, 3])\n                        Template atom coordinates in atom37 format\n                    \"template_all_atom_mask\" ([*, N_templ, N_res, 37])\n                        Template atom coordinate mask\n                    \"template_pseudo_beta\" ([*, N_templ, N_res, 3])\n                        Positions of template carbon \"pseudo-beta\" atoms\n                        (i.e. C_beta for all residues but glycine, for\n                        for which C_alpha is used instead)\n                    \"template_pseudo_beta_mask\" ([*, N_templ, N_res])\n                        Pseudo-beta mask\n        \"\"\"", "\n", "# Initialize recycling embeddings", "\n", "m_1_prev", ",", "z_prev", ",", "x_prev", "=", "None", ",", "None", ",", "None", "\n", "\n", "# Disable activation checkpointing for the first few recycling iters", "\n", "is_grad_enabled", "=", "torch", ".", "is_grad_enabled", "(", ")", "\n", "self", ".", "_disable_activation_checkpointing", "(", ")", "\n", "\n", "# Main recycling loop", "\n", "num_iters", "=", "batch", "[", "\"aatype\"", "]", ".", "shape", "[", "-", "1", "]", "\n", "for", "cycle_no", "in", "range", "(", "num_iters", ")", ":", "\n", "# Select the features for the current recycling cycle", "\n", "            ", "fetch_cur_batch", "=", "lambda", "t", ":", "t", "[", "...", ",", "cycle_no", "]", "\n", "feats", "=", "tensor_tree_map", "(", "fetch_cur_batch", ",", "batch", ")", "\n", "\n", "# Enable grad iff we're training and it's the final recycling layer", "\n", "is_final_iter", "=", "cycle_no", "==", "(", "num_iters", "-", "1", ")", "\n", "with", "torch", ".", "set_grad_enabled", "(", "is_grad_enabled", "and", "is_final_iter", ")", ":", "\n", "                ", "if", "is_final_iter", ":", "\n", "                    ", "self", ".", "_enable_activation_checkpointing", "(", ")", "\n", "# Sidestep AMP bug (PyTorch issue #65766)", "\n", "if", "torch", ".", "is_autocast_enabled", "(", ")", ":", "\n", "                        ", "torch", ".", "clear_autocast_cache", "(", ")", "\n", "\n", "# Run the next iteration of the model", "\n", "", "", "outputs", ",", "m_1_prev", ",", "z_prev", ",", "x_prev", "=", "self", ".", "iteration", "(", "\n", "feats", ",", "\n", "m_1_prev", ",", "\n", "z_prev", ",", "\n", "x_prev", ",", "\n", "_recycle", "=", "(", "num_iters", ">", "1", ")", "\n", ")", "\n", "\n", "# Run auxiliary heads", "\n", "", "", "outputs", ".", "update", "(", "self", ".", "aux_heads", "(", "outputs", ")", ")", "\n", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.relax.AmberRelaxation.__init__": [[24, 57], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "max_iterations", ":", "int", ",", "\n", "tolerance", ":", "float", ",", "\n", "stiffness", ":", "float", ",", "\n", "exclude_residues", ":", "Sequence", "[", "int", "]", ",", "\n", "max_outer_iterations", ":", "int", ",", "\n", "use_gpu", ":", "bool", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Initialize Amber Relaxer.\n\n        Args:\n          max_iterations: Maximum number of L-BFGS iterations. 0 means no max.\n          tolerance: kcal/mol, the energy tolerance of L-BFGS.\n          stiffness: kcal/mol A**2, spring constant of heavy atom restraining\n            potential.\n          exclude_residues: Residues to exclude from per-atom restraining.\n            Zero-indexed.\n          max_outer_iterations: Maximum number of violation-informed relax\n           iterations. A value of 1 will run the non-iterative procedure used in\n           CASP14. Use 20 so that >95% of the bad cases are relaxed. Relax finishes\n           as soon as there are no violations, hence in most cases this causes no\n           slowdown. In the worst case we do 20 outer iterations.\n          use_gpu: Whether to run on GPU\n        \"\"\"", "\n", "\n", "self", ".", "_max_iterations", "=", "max_iterations", "\n", "self", ".", "_tolerance", "=", "tolerance", "\n", "self", ".", "_stiffness", "=", "stiffness", "\n", "self", ".", "_exclude_residues", "=", "exclude_residues", "\n", "self", ".", "_max_outer_iterations", "=", "max_outer_iterations", "\n", "self", ".", "_use_gpu", "=", "use_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.relax.AmberRelaxation.process": [[58, 90], ["fastfold.relax.amber_minimize.run_pipeline", "numpy.sqrt", "fastfold.relax.amber_minimize.clean_protein", "fastfold.relax.utils.overwrite_pdb_coordinates", "fastfold.relax.utils.overwrite_b_factors", "fastfold.relax.utils.assert_equal_nonterminal_atom_types", "numpy.sum", "fastfold.common.protein.from_pdb_string"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.run_pipeline", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.clean_protein", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.utils.overwrite_pdb_coordinates", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.utils.overwrite_b_factors", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.utils.assert_equal_nonterminal_atom_types", "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.from_pdb_string"], ["", "def", "process", "(", "\n", "self", ",", "*", ",", "prot", ":", "protein", ".", "Protein", "\n", ")", "->", "Tuple", "[", "str", ",", "Dict", "[", "str", ",", "Any", "]", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "\"\"\"Runs Amber relax on a prediction, adds hydrogens, returns PDB string.\"\"\"", "\n", "out", "=", "amber_minimize", ".", "run_pipeline", "(", "\n", "prot", "=", "prot", ",", "\n", "max_iterations", "=", "self", ".", "_max_iterations", ",", "\n", "tolerance", "=", "self", ".", "_tolerance", ",", "\n", "stiffness", "=", "self", ".", "_stiffness", ",", "\n", "exclude_residues", "=", "self", ".", "_exclude_residues", ",", "\n", "max_outer_iterations", "=", "self", ".", "_max_outer_iterations", ",", "\n", "use_gpu", "=", "self", ".", "_use_gpu", ",", "\n", ")", "\n", "min_pos", "=", "out", "[", "\"pos\"", "]", "\n", "start_pos", "=", "out", "[", "\"posinit\"", "]", "\n", "rmsd", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "start_pos", "-", "min_pos", ")", "**", "2", ")", "/", "start_pos", ".", "shape", "[", "0", "]", ")", "\n", "debug_data", "=", "{", "\n", "\"initial_energy\"", ":", "out", "[", "\"einit\"", "]", ",", "\n", "\"final_energy\"", ":", "out", "[", "\"efinal\"", "]", ",", "\n", "\"attempts\"", ":", "out", "[", "\"min_attempts\"", "]", ",", "\n", "\"rmsd\"", ":", "rmsd", ",", "\n", "}", "\n", "pdb_str", "=", "amber_minimize", ".", "clean_protein", "(", "prot", ")", "\n", "min_pdb", "=", "utils", ".", "overwrite_pdb_coordinates", "(", "pdb_str", ",", "min_pos", ")", "\n", "min_pdb", "=", "utils", ".", "overwrite_b_factors", "(", "min_pdb", ",", "prot", ".", "b_factors", ")", "\n", "utils", ".", "assert_equal_nonterminal_atom_types", "(", "\n", "protein", ".", "from_pdb_string", "(", "min_pdb", ")", ".", "atom_mask", ",", "prot", ".", "atom_mask", "\n", ")", "\n", "violations", "=", "out", "[", "\"structural_violations\"", "]", "[", "\n", "\"total_per_residue_violations_mask\"", "\n", "]", "\n", "return", "min_pdb", ",", "debug_data", ",", "violations", "", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.will_restrain": [[39, 46], ["None"], "function", ["None"], ["def", "will_restrain", "(", "atom", ":", "openmm_app", ".", "Atom", ",", "rset", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Returns True if the atom will be restrained by the given restraint set.\"\"\"", "\n", "\n", "if", "rset", "==", "\"non_hydrogen\"", ":", "\n", "        ", "return", "atom", ".", "element", ".", "name", "!=", "\"hydrogen\"", "\n", "", "elif", "rset", "==", "\"c_alpha\"", ":", "\n", "        ", "return", "atom", ".", "name", "==", "\"CA\"", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._add_restraints": [[48, 74], ["simtk.openmm.CustomExternalForce", "openmm.CustomExternalForce.addGlobalParameter", "enumerate", "absl.logging.info", "system.addForce", "openmm.CustomExternalForce.addPerParticleParameter", "reference_pdb.topology.atoms", "amber_minimize.will_restrain", "openmm.CustomExternalForce.getNumParticles", "system.getNumParticles", "openmm.CustomExternalForce.addParticle"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.will_restrain"], ["", "", "def", "_add_restraints", "(", "\n", "system", ":", "openmm", ".", "System", ",", "\n", "reference_pdb", ":", "openmm_app", ".", "PDBFile", ",", "\n", "stiffness", ":", "unit", ".", "Unit", ",", "\n", "rset", ":", "str", ",", "\n", "exclude_residues", ":", "Sequence", "[", "int", "]", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Adds a harmonic potential that restrains the system to a structure.\"\"\"", "\n", "assert", "rset", "in", "[", "\"non_hydrogen\"", ",", "\"c_alpha\"", "]", "\n", "\n", "force", "=", "openmm", ".", "CustomExternalForce", "(", "\"0.5 * k * ((x-x0)^2 + (y-y0)^2 + (z-z0)^2)\"", ")", "\n", "force", ".", "addGlobalParameter", "(", "\"k\"", ",", "stiffness", ")", "\n", "for", "p", "in", "[", "\"x0\"", ",", "\"y0\"", ",", "\"z0\"", "]", ":", "\n", "        ", "force", ".", "addPerParticleParameter", "(", "p", ")", "\n", "\n", "", "for", "i", ",", "atom", "in", "enumerate", "(", "reference_pdb", ".", "topology", ".", "atoms", "(", ")", ")", ":", "\n", "        ", "if", "atom", ".", "residue", ".", "index", "in", "exclude_residues", ":", "\n", "            ", "continue", "\n", "", "if", "will_restrain", "(", "atom", ",", "rset", ")", ":", "\n", "            ", "force", ".", "addParticle", "(", "i", ",", "reference_pdb", ".", "positions", "[", "i", "]", ")", "\n", "", "", "logging", ".", "info", "(", "\n", "\"Restraining %d / %d particles.\"", ",", "\n", "force", ".", "getNumParticles", "(", ")", ",", "\n", "system", ".", "getNumParticles", "(", ")", ",", "\n", ")", "\n", "system", ".", "addForce", "(", "force", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._openmm_minimize": [[76, 111], ["io.StringIO", "simtk.openmm.app.PDBFile", "simtk.openmm.app.ForceField", "openmm_app.ForceField.createSystem", "simtk.openmm.LangevinIntegrator", "simtk.openmm.Platform.getPlatformByName", "simtk.openmm.app.Simulation", "openmm_app.Simulation.context.setPositions", "openmm_app.Simulation.context.getState", "simulation.context.getState.getPotentialEnergy().value_in_unit", "simulation.context.getState.getPositions().value_in_unit", "openmm_app.Simulation.minimizeEnergy", "openmm_app.Simulation.context.getState", "simulation.context.getState.getPotentialEnergy().value_in_unit", "simulation.context.getState.getPositions().value_in_unit", "amber_minimize._get_pdb_string", "amber_minimize._add_restraints", "simulation.context.getState.getPositions", "simulation.context.getState.getPotentialEnergy", "simulation.context.getState.getPositions", "simulation.context.getState.getPotentialEnergy", "simulation.context.getState.getPositions"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._get_pdb_string", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._add_restraints"], ["", "def", "_openmm_minimize", "(", "\n", "pdb_str", ":", "str", ",", "\n", "max_iterations", ":", "int", ",", "\n", "tolerance", ":", "unit", ".", "Unit", ",", "\n", "stiffness", ":", "unit", ".", "Unit", ",", "\n", "restraint_set", ":", "str", ",", "\n", "exclude_residues", ":", "Sequence", "[", "int", "]", ",", "\n", "use_gpu", ":", "bool", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Minimize energy via openmm.\"\"\"", "\n", "\n", "pdb_file", "=", "io", ".", "StringIO", "(", "pdb_str", ")", "\n", "pdb", "=", "openmm_app", ".", "PDBFile", "(", "pdb_file", ")", "\n", "\n", "force_field", "=", "openmm_app", ".", "ForceField", "(", "\"amber99sb.xml\"", ")", "\n", "constraints", "=", "openmm_app", ".", "HBonds", "\n", "system", "=", "force_field", ".", "createSystem", "(", "pdb", ".", "topology", ",", "constraints", "=", "constraints", ")", "\n", "if", "stiffness", ">", "0", "*", "ENERGY", "/", "(", "LENGTH", "**", "2", ")", ":", "\n", "        ", "_add_restraints", "(", "system", ",", "pdb", ",", "stiffness", ",", "restraint_set", ",", "exclude_residues", ")", "\n", "\n", "", "integrator", "=", "openmm", ".", "LangevinIntegrator", "(", "0", ",", "0.01", ",", "0.0", ")", "\n", "platform", "=", "openmm", ".", "Platform", ".", "getPlatformByName", "(", "\"CUDA\"", "if", "use_gpu", "else", "\"CPU\"", ")", "\n", "simulation", "=", "openmm_app", ".", "Simulation", "(", "pdb", ".", "topology", ",", "system", ",", "integrator", ",", "platform", ")", "\n", "simulation", ".", "context", ".", "setPositions", "(", "pdb", ".", "positions", ")", "\n", "\n", "ret", "=", "{", "}", "\n", "state", "=", "simulation", ".", "context", ".", "getState", "(", "getEnergy", "=", "True", ",", "getPositions", "=", "True", ")", "\n", "ret", "[", "\"einit\"", "]", "=", "state", ".", "getPotentialEnergy", "(", ")", ".", "value_in_unit", "(", "ENERGY", ")", "\n", "ret", "[", "\"posinit\"", "]", "=", "state", ".", "getPositions", "(", "asNumpy", "=", "True", ")", ".", "value_in_unit", "(", "LENGTH", ")", "\n", "simulation", ".", "minimizeEnergy", "(", "maxIterations", "=", "max_iterations", ",", "tolerance", "=", "tolerance", ")", "\n", "state", "=", "simulation", ".", "context", ".", "getState", "(", "getEnergy", "=", "True", ",", "getPositions", "=", "True", ")", "\n", "ret", "[", "\"efinal\"", "]", "=", "state", ".", "getPotentialEnergy", "(", ")", ".", "value_in_unit", "(", "ENERGY", ")", "\n", "ret", "[", "\"pos\"", "]", "=", "state", ".", "getPositions", "(", "asNumpy", "=", "True", ")", ".", "value_in_unit", "(", "LENGTH", ")", "\n", "ret", "[", "\"min_pdb\"", "]", "=", "_get_pdb_string", "(", "simulation", ".", "topology", ",", "state", ".", "getPositions", "(", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._get_pdb_string": [[113, 118], ["io.StringIO", "simtk.openmm.app.PDBFile.writeFile", "f.getvalue"], "function", ["None"], ["", "def", "_get_pdb_string", "(", "topology", ":", "openmm_app", ".", "Topology", ",", "positions", ":", "unit", ".", "Quantity", ")", ":", "\n", "    ", "\"\"\"Returns a pdb string provided OpenMM topology and positions.\"\"\"", "\n", "with", "io", ".", "StringIO", "(", ")", "as", "f", ":", "\n", "        ", "openmm_app", ".", "PDBFile", ".", "writeFile", "(", "topology", ",", "positions", ",", "f", ")", "\n", "return", "f", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._check_cleaned_atoms": [[120, 135], ["simtk.openmm.app.PDBFile", "simtk.openmm.app.PDBFile", "numpy.array", "numpy.array", "zip", "io.StringIO", "io.StringIO", "openmm_app.PDBFile.getPositions().value_in_unit", "openmm_app.PDBFile.getPositions().value_in_unit", "openmm_app.PDBFile.topology.residues", "openmm_app.PDBFile.topology.residues", "ref_res.atoms", "cl_res.atoms", "openmm_app.PDBFile.getPositions", "openmm_app.PDBFile.getPositions", "numpy.array_equal", "ValueError"], "function", ["None"], ["", "", "def", "_check_cleaned_atoms", "(", "pdb_cleaned_string", ":", "str", ",", "pdb_ref_string", ":", "str", ")", ":", "\n", "    ", "\"\"\"Checks that no atom positions have been altered by cleaning.\"\"\"", "\n", "cleaned", "=", "openmm_app", ".", "PDBFile", "(", "io", ".", "StringIO", "(", "pdb_cleaned_string", ")", ")", "\n", "reference", "=", "openmm_app", ".", "PDBFile", "(", "io", ".", "StringIO", "(", "pdb_ref_string", ")", ")", "\n", "\n", "cl_xyz", "=", "np", ".", "array", "(", "cleaned", ".", "getPositions", "(", ")", ".", "value_in_unit", "(", "LENGTH", ")", ")", "\n", "ref_xyz", "=", "np", ".", "array", "(", "reference", ".", "getPositions", "(", ")", ".", "value_in_unit", "(", "LENGTH", ")", ")", "\n", "\n", "for", "ref_res", ",", "cl_res", "in", "zip", "(", "reference", ".", "topology", ".", "residues", "(", ")", ",", "cleaned", ".", "topology", ".", "residues", "(", ")", ")", ":", "\n", "        ", "assert", "ref_res", ".", "name", "==", "cl_res", ".", "name", "\n", "for", "rat", "in", "ref_res", ".", "atoms", "(", ")", ":", "\n", "            ", "for", "cat", "in", "cl_res", ".", "atoms", "(", ")", ":", "\n", "                ", "if", "cat", ".", "name", "==", "rat", ".", "name", ":", "\n", "                    ", "if", "not", "np", ".", "array_equal", "(", "cl_xyz", "[", "cat", ".", "index", "]", ",", "ref_xyz", "[", "rat", ".", "index", "]", ")", ":", "\n", "                        ", "raise", "ValueError", "(", "f\"Coordinates of cleaned atom {cat} do not match \"", "\n", "f\"coordinates of reference atom {rat}.\"", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._check_residues_are_well_defined": [[138, 142], ["ValueError", "prot.atom_mask.sum"], "function", ["None"], ["", "", "", "", "", "", "def", "_check_residues_are_well_defined", "(", "prot", ":", "protein", ".", "Protein", ")", ":", "\n", "    ", "\"\"\"Checks that all residues contain non-empty atom sets.\"\"\"", "\n", "if", "(", "prot", ".", "atom_mask", ".", "sum", "(", "axis", "=", "-", "1", ")", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Amber minimization can only be performed on proteins with\"", "\n", "\" well-defined residues. This protein contains at least\"", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._check_atom_mask_is_ideal": [[146, 151], ["fastfold.common.protein.ideal_atom_mask", "fastfold.relax.utils.assert_equal_nonterminal_atom_types"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.ideal_atom_mask", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.utils.assert_equal_nonterminal_atom_types"], ["", "", "def", "_check_atom_mask_is_ideal", "(", "prot", ")", ":", "\n", "    ", "\"\"\"Sanity-check the atom mask is ideal, up to a possible OXT.\"\"\"", "\n", "atom_mask", "=", "prot", ".", "atom_mask", "\n", "ideal_atom_mask", "=", "protein", ".", "ideal_atom_mask", "(", "prot", ")", "\n", "utils", ".", "assert_equal_nonterminal_atom_types", "(", "atom_mask", ",", "ideal_atom_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.clean_protein": [[153, 183], ["amber_minimize._check_atom_mask_is_ideal", "fastfold.common.protein.to_pdb", "io.StringIO", "fastfold.relax.cleanup.fix_pdb", "io.StringIO", "simtk.openmm.app.internal.pdbstructure.PdbStructure", "fastfold.relax.cleanup.clean_structure", "absl.logging.info", "simtk.openmm.app.PDBFile", "amber_minimize._get_pdb_string", "openmm_app.PDBFile.getTopology", "openmm_app.PDBFile.getPositions", "amber_minimize._check_cleaned_atoms"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._check_atom_mask_is_ideal", "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.to_pdb", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.cleanup.fix_pdb", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.cleanup.clean_structure", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._get_pdb_string", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._check_cleaned_atoms"], ["", "def", "clean_protein", "(", "prot", ":", "protein", ".", "Protein", ",", "checks", ":", "bool", "=", "True", ")", ":", "\n", "    ", "\"\"\"Adds missing atoms to Protein instance.\n\n    Args:\n      prot: A `protein.Protein` instance.\n      checks: A `bool` specifying whether to add additional checks to the cleaning\n        process.\n\n    Returns:\n      pdb_string: A string of the cleaned protein.\n    \"\"\"", "\n", "_check_atom_mask_is_ideal", "(", "prot", ")", "\n", "\n", "# Clean pdb.", "\n", "prot_pdb_string", "=", "protein", ".", "to_pdb", "(", "prot", ")", "\n", "pdb_file", "=", "io", ".", "StringIO", "(", "prot_pdb_string", ")", "\n", "alterations_info", "=", "{", "}", "\n", "fixed_pdb", "=", "cleanup", ".", "fix_pdb", "(", "pdb_file", ",", "alterations_info", ")", "\n", "fixed_pdb_file", "=", "io", ".", "StringIO", "(", "fixed_pdb", ")", "\n", "pdb_structure", "=", "PdbStructure", "(", "fixed_pdb_file", ")", "\n", "cleanup", ".", "clean_structure", "(", "pdb_structure", ",", "alterations_info", ")", "\n", "\n", "logging", ".", "info", "(", "\"alterations info: %s\"", ",", "alterations_info", ")", "\n", "\n", "# Write pdb file of cleaned structure.", "\n", "as_file", "=", "openmm_app", ".", "PDBFile", "(", "pdb_structure", ")", "\n", "pdb_string", "=", "_get_pdb_string", "(", "as_file", ".", "getTopology", "(", ")", ",", "as_file", ".", "getPositions", "(", ")", ")", "\n", "if", "checks", ":", "\n", "        ", "_check_cleaned_atoms", "(", "pdb_string", ",", "prot_pdb_string", ")", "\n", "", "return", "pdb_string", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.make_atom14_positions": [[185, 306], ["np.array.append", "np.array.append", "np.array.append", "numpy.array", "numpy.array", "numpy.array", "residx_atom14_to_atom37.astype", "residx_atom37_to_atom14.astype", "numpy.zeros", "enumerate", "fastfold.common.residue_constants.residue_atom_renaming_swaps.items", "numpy.stack", "numpy.einsum", "numpy.einsum", "numpy.zeros", "fastfold.common.residue_constants.residue_atom_renaming_swaps.items", "np.array.append", "np.array.append", "np.array.append", "numpy.take_along_axis().astype", "numpy.take_along_axis", "numpy.eye", "numpy.arange", "swap.items", "np.zeros.astype", "swap.items", "fastfold.common.residue_constants.restype_name_to_atom14_names[].index", "fastfold.common.residue_constants.restype_name_to_atom14_names[].index", "numpy.zeros", "enumerate", "fastfold.common.residue_constants.restype_name_to_atom14_names[].index", "fastfold.common.residue_constants.restype_name_to_atom14_names[].index", "enumerate", "numpy.take_along_axis"], "function", ["None"], ["", "def", "make_atom14_positions", "(", "prot", ")", ":", "\n", "    ", "\"\"\"Constructs denser atom positions (14 dimensions instead of 37).\"\"\"", "\n", "restype_atom14_to_atom37", "=", "[", "]", "# mapping (restype, atom14) --> atom37", "\n", "restype_atom37_to_atom14", "=", "[", "]", "# mapping (restype, atom37) --> atom14", "\n", "restype_atom14_mask", "=", "[", "]", "\n", "\n", "for", "rt", "in", "residue_constants", ".", "restypes", ":", "\n", "        ", "atom_names", "=", "residue_constants", ".", "restype_name_to_atom14_names", "[", "\n", "residue_constants", ".", "restype_1to3", "[", "rt", "]", "]", "\n", "\n", "restype_atom14_to_atom37", ".", "append", "(", "[", "\n", "(", "residue_constants", ".", "atom_order", "[", "name", "]", "if", "name", "else", "0", ")", "for", "name", "in", "atom_names", "\n", "]", ")", "\n", "\n", "atom_name_to_idx14", "=", "{", "name", ":", "i", "for", "i", ",", "name", "in", "enumerate", "(", "atom_names", ")", "}", "\n", "restype_atom37_to_atom14", ".", "append", "(", "[", "\n", "(", "atom_name_to_idx14", "[", "name", "]", "if", "name", "in", "atom_name_to_idx14", "else", "0", ")", "\n", "for", "name", "in", "residue_constants", ".", "atom_types", "\n", "]", ")", "\n", "\n", "restype_atom14_mask", ".", "append", "(", "[", "(", "1.0", "if", "name", "else", "0.0", ")", "for", "name", "in", "atom_names", "]", ")", "\n", "\n", "# Add dummy mapping for restype 'UNK'.", "\n", "", "restype_atom14_to_atom37", ".", "append", "(", "[", "0", "]", "*", "14", ")", "\n", "restype_atom37_to_atom14", ".", "append", "(", "[", "0", "]", "*", "37", ")", "\n", "restype_atom14_mask", ".", "append", "(", "[", "0.0", "]", "*", "14", ")", "\n", "\n", "restype_atom14_to_atom37", "=", "np", ".", "array", "(", "restype_atom14_to_atom37", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "restype_atom37_to_atom14", "=", "np", ".", "array", "(", "restype_atom37_to_atom14", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "restype_atom14_mask", "=", "np", ".", "array", "(", "restype_atom14_mask", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Create the mapping for (residx, atom14) --> atom37, i.e. an array", "\n", "# with shape (num_res, 14) containing the atom37 indices for this protein.", "\n", "residx_atom14_to_atom37", "=", "restype_atom14_to_atom37", "[", "prot", "[", "\"aatype\"", "]", "]", "\n", "residx_atom14_mask", "=", "restype_atom14_mask", "[", "prot", "[", "\"aatype\"", "]", "]", "\n", "\n", "# Create a mask for known ground truth positions.", "\n", "residx_atom14_gt_mask", "=", "residx_atom14_mask", "*", "np", ".", "take_along_axis", "(", "\n", "prot", "[", "\"all_atom_mask\"", "]", ",", "residx_atom14_to_atom37", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Gather the ground truth positions.", "\n", "residx_atom14_gt_positions", "=", "residx_atom14_gt_mask", "[", ":", ",", ":", ",", "None", "]", "*", "(", "np", ".", "take_along_axis", "(", "\n", "prot", "[", "\"all_atom_positions\"", "]", ",", "\n", "residx_atom14_to_atom37", "[", "...", ",", "None", "]", ",", "\n", "axis", "=", "1", ",", "\n", ")", ")", "\n", "\n", "prot", "[", "\"atom14_atom_exists\"", "]", "=", "residx_atom14_mask", "\n", "prot", "[", "\"atom14_gt_exists\"", "]", "=", "residx_atom14_gt_mask", "\n", "prot", "[", "\"atom14_gt_positions\"", "]", "=", "residx_atom14_gt_positions", "\n", "\n", "prot", "[", "\"residx_atom14_to_atom37\"", "]", "=", "residx_atom14_to_atom37", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "# Create the gather indices for mapping back.", "\n", "residx_atom37_to_atom14", "=", "restype_atom37_to_atom14", "[", "prot", "[", "\"aatype\"", "]", "]", "\n", "prot", "[", "\"residx_atom37_to_atom14\"", "]", "=", "residx_atom37_to_atom14", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "# Create the corresponding mask.", "\n", "restype_atom37_mask", "=", "np", ".", "zeros", "(", "[", "21", ",", "37", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "restype", ",", "restype_letter", "in", "enumerate", "(", "residue_constants", ".", "restypes", ")", ":", "\n", "        ", "restype_name", "=", "residue_constants", ".", "restype_1to3", "[", "restype_letter", "]", "\n", "atom_names", "=", "residue_constants", ".", "residue_atoms", "[", "restype_name", "]", "\n", "for", "atom_name", "in", "atom_names", ":", "\n", "            ", "atom_type", "=", "residue_constants", ".", "atom_order", "[", "atom_name", "]", "\n", "restype_atom37_mask", "[", "restype", ",", "atom_type", "]", "=", "1", "\n", "\n", "", "", "residx_atom37_mask", "=", "restype_atom37_mask", "[", "prot", "[", "\"aatype\"", "]", "]", "\n", "prot", "[", "\"atom37_atom_exists\"", "]", "=", "residx_atom37_mask", "\n", "\n", "# As the atom naming is ambiguous for 7 of the 20 amino acids, provide", "\n", "# alternative ground truth coordinates where the naming is swapped", "\n", "restype_3", "=", "[", "residue_constants", ".", "restype_1to3", "[", "res", "]", "for", "res", "in", "residue_constants", ".", "restypes", "]", "\n", "restype_3", "+=", "[", "\"UNK\"", "]", "\n", "\n", "# Matrices for renaming ambiguous atoms.", "\n", "all_matrices", "=", "{", "res", ":", "np", ".", "eye", "(", "14", ",", "dtype", "=", "np", ".", "float32", ")", "for", "res", "in", "restype_3", "}", "\n", "for", "resname", ",", "swap", "in", "residue_constants", ".", "residue_atom_renaming_swaps", ".", "items", "(", ")", ":", "\n", "        ", "correspondences", "=", "np", ".", "arange", "(", "14", ")", "\n", "for", "source_atom_swap", ",", "target_atom_swap", "in", "swap", ".", "items", "(", ")", ":", "\n", "            ", "source_index", "=", "residue_constants", ".", "restype_name_to_atom14_names", "[", "resname", "]", ".", "index", "(", "\n", "source_atom_swap", ")", "\n", "target_index", "=", "residue_constants", ".", "restype_name_to_atom14_names", "[", "resname", "]", ".", "index", "(", "\n", "target_atom_swap", ")", "\n", "correspondences", "[", "source_index", "]", "=", "target_index", "\n", "correspondences", "[", "target_index", "]", "=", "source_index", "\n", "renaming_matrix", "=", "np", ".", "zeros", "(", "(", "14", ",", "14", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "index", ",", "correspondence", "in", "enumerate", "(", "correspondences", ")", ":", "\n", "                ", "renaming_matrix", "[", "index", ",", "correspondence", "]", "=", "1.0", "\n", "", "", "all_matrices", "[", "resname", "]", "=", "renaming_matrix", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "renaming_matrices", "=", "np", ".", "stack", "(", "[", "all_matrices", "[", "restype", "]", "for", "restype", "in", "restype_3", "]", ")", "\n", "\n", "# Pick the transformation matrices for the given residue sequence", "\n", "# shape (num_res, 14, 14).", "\n", "renaming_transform", "=", "renaming_matrices", "[", "prot", "[", "\"aatype\"", "]", "]", "\n", "\n", "# Apply it to the ground truth positions. shape (num_res, 14, 3).", "\n", "alternative_gt_positions", "=", "np", ".", "einsum", "(", "\"rac,rab->rbc\"", ",", "residx_atom14_gt_positions", ",", "\n", "renaming_transform", ")", "\n", "prot", "[", "\"atom14_alt_gt_positions\"", "]", "=", "alternative_gt_positions", "\n", "\n", "# Create the mask for the alternative ground truth (differs from the", "\n", "# ground truth mask, if only one of the atoms in an ambiguous pair has a", "\n", "# ground truth position).", "\n", "alternative_gt_mask", "=", "np", ".", "einsum", "(", "\"ra,rab->rb\"", ",", "residx_atom14_gt_mask", ",", "renaming_transform", ")", "\n", "\n", "prot", "[", "\"atom14_alt_gt_exists\"", "]", "=", "alternative_gt_mask", "\n", "\n", "# Create an ambiguous atoms mask.  shape: (21, 14).", "\n", "restype_atom14_is_ambiguous", "=", "np", ".", "zeros", "(", "(", "21", ",", "14", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "resname", ",", "swap", "in", "residue_constants", ".", "residue_atom_renaming_swaps", ".", "items", "(", ")", ":", "\n", "        ", "for", "atom_name1", ",", "atom_name2", "in", "swap", ".", "items", "(", ")", ":", "\n", "            ", "restype", "=", "residue_constants", ".", "restype_order", "[", "residue_constants", ".", "restype_3to1", "[", "resname", "]", "]", "\n", "atom_idx1", "=", "residue_constants", ".", "restype_name_to_atom14_names", "[", "resname", "]", ".", "index", "(", "atom_name1", ")", "\n", "atom_idx2", "=", "residue_constants", ".", "restype_name_to_atom14_names", "[", "resname", "]", ".", "index", "(", "atom_name2", ")", "\n", "restype_atom14_is_ambiguous", "[", "restype", ",", "atom_idx1", "]", "=", "1", "\n", "restype_atom14_is_ambiguous", "[", "restype", ",", "atom_idx2", "]", "=", "1", "\n", "\n", "# From this create an ambiguous_mask for the given sequence.", "\n", "", "", "prot", "[", "\"atom14_atom_is_ambiguous\"", "]", "=", "restype_atom14_is_ambiguous", "[", "prot", "[", "\"aatype\"", "]", "]", "\n", "\n", "return", "prot", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.find_violations": [[308, 343], ["numpy.ones_like", "amber_minimize.make_atom14_positions", "fastfold.find_structural_violations_np", "fastfold.compute_violation_metrics_np", "prot_np.atom_positions.astype", "prot_np.atom_mask.astype", "ml_collections.ConfigDict"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_atom14_positions", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.find_structural_violations_np", "home.repos.pwc.inspect_result.hpcaitech_fastfold.model.loss.compute_violation_metrics_np"], ["", "def", "find_violations", "(", "prot_np", ":", "protein", ".", "Protein", ")", ":", "\n", "    ", "\"\"\"Analyzes a protein and returns structural violation information.\n\n    Args:\n      prot_np: A protein.\n\n    Returns:\n      violations: A `dict` of structure components with structural violations.\n      violation_metrics: A `dict` of violation metrics.\n    \"\"\"", "\n", "batch", "=", "{", "\n", "\"aatype\"", ":", "prot_np", ".", "aatype", ",", "\n", "\"all_atom_positions\"", ":", "prot_np", ".", "atom_positions", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "\"all_atom_mask\"", ":", "prot_np", ".", "atom_mask", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "\"residue_index\"", ":", "prot_np", ".", "residue_index", ",", "\n", "}", "\n", "\n", "batch", "[", "\"seq_mask\"", "]", "=", "np", ".", "ones_like", "(", "batch", "[", "\"aatype\"", "]", ",", "np", ".", "float32", ")", "\n", "batch", "=", "make_atom14_positions", "(", "batch", ")", "\n", "\n", "violations", "=", "loss", ".", "find_structural_violations_np", "(", "\n", "batch", "=", "batch", ",", "\n", "atom14_pred_positions", "=", "batch", "[", "\"atom14_gt_positions\"", "]", ",", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", "{", "\n", "\"violation_tolerance_factor\"", ":", "12", ",", "# Taken from model config.", "\n", "\"clash_overlap_tolerance\"", ":", "1.5", ",", "# Taken from model config.", "\n", "}", ")", ",", "\n", ")", "\n", "violation_metrics", "=", "loss", ".", "compute_violation_metrics_np", "(", "\n", "batch", "=", "batch", ",", "\n", "atom14_pred_positions", "=", "batch", "[", "\"atom14_gt_positions\"", "]", ",", "\n", "violations", "=", "violations", ",", "\n", ")", "\n", "\n", "return", "violations", ",", "violation_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.get_violation_metrics": [[345, 354], ["amber_minimize.find_violations", "numpy.flatnonzero", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.find_violations"], ["", "def", "get_violation_metrics", "(", "prot", ":", "protein", ".", "Protein", ")", ":", "\n", "    ", "\"\"\"Computes violation and alignment metrics.\"\"\"", "\n", "structural_violations", ",", "struct_metrics", "=", "find_violations", "(", "prot", ")", "\n", "violation_idx", "=", "np", ".", "flatnonzero", "(", "structural_violations", "[", "\"total_per_residue_violations_mask\"", "]", ")", "\n", "\n", "struct_metrics", "[", "\"residue_violations\"", "]", "=", "violation_idx", "\n", "struct_metrics", "[", "\"num_residue_violations\"", "]", "=", "len", "(", "violation_idx", ")", "\n", "struct_metrics", "[", "\"structural_violations\"", "]", "=", "structural_violations", "\n", "return", "struct_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._run_one_iteration": [[356, 415], ["time.perf_counter", "ValueError", "time.perf_counter", "absl.logging.info", "amber_minimize._openmm_minimize", "print", "absl.logging.info"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._openmm_minimize"], ["", "def", "_run_one_iteration", "(", "\n", "*", ",", "\n", "pdb_string", ":", "str", ",", "\n", "max_iterations", ":", "int", ",", "\n", "tolerance", ":", "float", ",", "\n", "stiffness", ":", "float", ",", "\n", "restraint_set", ":", "str", ",", "\n", "max_attempts", ":", "int", ",", "\n", "exclude_residues", ":", "Optional", "[", "Collection", "[", "int", "]", "]", "=", "None", ",", "\n", "use_gpu", ":", "bool", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Runs the minimization pipeline.\n\n    Args:\n      pdb_string: A pdb string.\n      max_iterations: An `int` specifying the maximum number of L-BFGS iterations.\n      A value of 0 specifies no limit.\n      tolerance: kcal/mol, the energy tolerance of L-BFGS.\n      stiffness: kcal/mol A**2, spring constant of heavy atom restraining\n        potential.\n      restraint_set: The set of atoms to restrain.\n      max_attempts: The maximum number of minimization attempts.\n      exclude_residues: An optional list of zero-indexed residues to exclude from\n          restraints.\n      use_gpu: Whether to run relaxation on GPU\n    Returns:\n      A `dict` of minimization info.\n    \"\"\"", "\n", "exclude_residues", "=", "exclude_residues", "or", "[", "]", "\n", "\n", "# Assign physical dimensions.", "\n", "tolerance", "=", "tolerance", "*", "ENERGY", "\n", "stiffness", "=", "stiffness", "*", "ENERGY", "/", "(", "LENGTH", "**", "2", ")", "\n", "\n", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "minimized", "=", "False", "\n", "attempts", "=", "0", "\n", "while", "not", "minimized", "and", "attempts", "<", "max_attempts", ":", "\n", "        ", "attempts", "+=", "1", "\n", "try", ":", "\n", "            ", "logging", ".", "info", "(", "\"Minimizing protein, attempt %d of %d.\"", ",", "attempts", ",", "max_attempts", ")", "\n", "ret", "=", "_openmm_minimize", "(", "\n", "pdb_string", ",", "\n", "max_iterations", "=", "max_iterations", ",", "\n", "tolerance", "=", "tolerance", ",", "\n", "stiffness", "=", "stiffness", ",", "\n", "restraint_set", "=", "restraint_set", ",", "\n", "exclude_residues", "=", "exclude_residues", ",", "\n", "use_gpu", "=", "use_gpu", ",", "\n", ")", "\n", "minimized", "=", "True", "\n", "", "except", "Exception", "as", "e", ":", "# pylint: disable=broad-except", "\n", "            ", "print", "(", "e", ")", "\n", "logging", ".", "info", "(", "e", ")", "\n", "", "", "if", "not", "minimized", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Minimization failed after {max_attempts} attempts.\"", ")", "\n", "", "ret", "[", "\"opt_time\"", "]", "=", "time", ".", "perf_counter", "(", ")", "-", "start", "\n", "ret", "[", "\"min_attempts\"", "]", "=", "attempts", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.run_pipeline": [[417, 502], ["amber_minimize._check_residues_are_well_defined", "amber_minimize.clean_protein", "set", "amber_minimize._run_one_iteration", "fastfold.common.protein.from_pdb_string", "_run_one_iteration.update", "_run_one_iteration.update", "exclude_residues.union.union", "absl.logging.info", "amber_minimize.clean_protein", "amber_minimize.get_violation_metrics", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._check_residues_are_well_defined", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.clean_protein", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._run_one_iteration", "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.from_pdb_string", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.clean_protein", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.get_violation_metrics"], ["", "def", "run_pipeline", "(", "\n", "prot", ":", "protein", ".", "Protein", ",", "\n", "stiffness", ":", "float", ",", "\n", "use_gpu", ":", "bool", ",", "\n", "max_outer_iterations", ":", "int", "=", "1", ",", "\n", "place_hydrogens_every_iteration", ":", "bool", "=", "True", ",", "\n", "max_iterations", ":", "int", "=", "0", ",", "\n", "tolerance", ":", "float", "=", "2.39", ",", "\n", "restraint_set", ":", "str", "=", "\"non_hydrogen\"", ",", "\n", "max_attempts", ":", "int", "=", "100", ",", "\n", "checks", ":", "bool", "=", "True", ",", "\n", "exclude_residues", ":", "Optional", "[", "Sequence", "[", "int", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Run iterative amber relax.\n\n    Successive relax iterations are performed until all violations have been\n    resolved. Each iteration involves a restrained Amber minimization, with\n    restraint exclusions determined by violation-participating residues.\n\n    Args:\n      prot: A protein to be relaxed.\n      stiffness: kcal/mol A**2, the restraint stiffness.\n      use_gpu: Whether to run on GPU\n      max_outer_iterations: The maximum number of iterative minimization.\n      place_hydrogens_every_iteration: Whether hydrogens are re-initialized\n          prior to every minimization.\n      max_iterations: An `int` specifying the maximum number of L-BFGS steps\n          per relax iteration. A value of 0 specifies no limit.\n      tolerance: kcal/mol, the energy tolerance of L-BFGS.\n          The default value is the OpenMM default.\n      restraint_set: The set of atoms to restrain.\n      max_attempts: The maximum number of minimization attempts per iteration.\n      checks: Whether to perform cleaning checks.\n      exclude_residues: An optional list of zero-indexed residues to exclude from\n          restraints.\n\n    Returns:\n      out: A dictionary of output values.\n    \"\"\"", "\n", "\n", "# `protein.to_pdb` will strip any poorly-defined residues so we need to", "\n", "# perform this check before `clean_protein`.", "\n", "_check_residues_are_well_defined", "(", "prot", ")", "\n", "pdb_string", "=", "clean_protein", "(", "prot", ",", "checks", "=", "checks", ")", "\n", "\n", "exclude_residues", "=", "exclude_residues", "or", "[", "]", "\n", "exclude_residues", "=", "set", "(", "exclude_residues", ")", "\n", "violations", "=", "np", ".", "inf", "\n", "iteration", "=", "0", "\n", "\n", "while", "violations", ">", "0", "and", "iteration", "<", "max_outer_iterations", ":", "\n", "        ", "ret", "=", "_run_one_iteration", "(", "\n", "pdb_string", "=", "pdb_string", ",", "\n", "exclude_residues", "=", "exclude_residues", ",", "\n", "max_iterations", "=", "max_iterations", ",", "\n", "tolerance", "=", "tolerance", ",", "\n", "stiffness", "=", "stiffness", ",", "\n", "restraint_set", "=", "restraint_set", ",", "\n", "max_attempts", "=", "max_attempts", ",", "\n", "use_gpu", "=", "use_gpu", ",", "\n", ")", "\n", "prot", "=", "protein", ".", "from_pdb_string", "(", "ret", "[", "\"min_pdb\"", "]", ")", "\n", "if", "place_hydrogens_every_iteration", ":", "\n", "            ", "pdb_string", "=", "clean_protein", "(", "prot", ",", "checks", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "pdb_string", "=", "ret", "[", "\"min_pdb\"", "]", "\n", "", "ret", ".", "update", "(", "get_violation_metrics", "(", "prot", ")", ")", "\n", "ret", ".", "update", "(", "{", "\n", "\"num_exclusions\"", ":", "len", "(", "exclude_residues", ")", ",", "\n", "\"iteration\"", ":", "iteration", ",", "\n", "}", ")", "\n", "violations", "=", "ret", "[", "\"violations_per_residue\"", "]", "\n", "exclude_residues", "=", "exclude_residues", ".", "union", "(", "ret", "[", "\"residue_violations\"", "]", ")", "\n", "\n", "logging", ".", "info", "(", "\n", "\"Iteration completed: Einit %.2f Efinal %.2f Time %.2f s \"", "\n", "\"num residue violations %d num residue exclusions %d \"", ",", "\n", "ret", "[", "\"einit\"", "]", ",", "\n", "ret", "[", "\"efinal\"", "]", ",", "\n", "ret", "[", "\"opt_time\"", "]", ",", "\n", "ret", "[", "\"num_residue_violations\"", "]", ",", "\n", "ret", "[", "\"num_exclusions\"", "]", ",", "\n", ")", "\n", "iteration", "+=", "1", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize.get_initial_energies": [[504, 551], ["simtk.openmm.app.ForceField", "openmm_app.ForceField.createSystem", "simtk.openmm.app.Simulation", "simtk.openmm.app.PDBFile", "amber_minimize._add_restraints", "simtk.openmm.LangevinIntegrator", "simtk.openmm.Platform.getPlatformByName", "simtk.openmm.app.internal.pdbstructure.PdbStructure", "openmm_app.Simulation.context.setPositions", "openmm_app.Simulation.context.getState", "energies.append", "io.StringIO", "simulation.context.getState.getPotentialEnergy().value_in_unit", "absl.logging.error", "energies.append", "simtk.unit.Quantity", "simulation.context.getState.getPotentialEnergy"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.amber_minimize._add_restraints"], ["", "def", "get_initial_energies", "(", "\n", "pdb_strs", ":", "Sequence", "[", "str", "]", ",", "\n", "stiffness", ":", "float", "=", "0.0", ",", "\n", "restraint_set", ":", "str", "=", "\"non_hydrogen\"", ",", "\n", "exclude_residues", ":", "Optional", "[", "Sequence", "[", "int", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Returns initial potential energies for a sequence of PDBs.\n\n    Assumes the input PDBs are ready for minimization, and all have the same\n    topology.\n    Allows time to be saved by not pdbfixing / rebuilding the system.\n\n    Args:\n      pdb_strs: List of PDB strings.\n      stiffness: kcal/mol A**2, spring constant of heavy atom restraining\n          potential.\n      restraint_set: Which atom types to restrain.\n      exclude_residues: An optional list of zero-indexed residues to exclude from\n          restraints.\n\n    Returns:\n      A list of initial energies in the same order as pdb_strs.\n    \"\"\"", "\n", "exclude_residues", "=", "exclude_residues", "or", "[", "]", "\n", "\n", "openmm_pdbs", "=", "[", "openmm_app", ".", "PDBFile", "(", "PdbStructure", "(", "io", ".", "StringIO", "(", "p", ")", ")", ")", "for", "p", "in", "pdb_strs", "]", "\n", "force_field", "=", "openmm_app", ".", "ForceField", "(", "\"amber99sb.xml\"", ")", "\n", "system", "=", "force_field", ".", "createSystem", "(", "openmm_pdbs", "[", "0", "]", ".", "topology", ",", "constraints", "=", "openmm_app", ".", "HBonds", ")", "\n", "stiffness", "=", "stiffness", "*", "ENERGY", "/", "(", "LENGTH", "**", "2", ")", "\n", "if", "stiffness", ">", "0", "*", "ENERGY", "/", "(", "LENGTH", "**", "2", ")", ":", "\n", "        ", "_add_restraints", "(", "system", ",", "openmm_pdbs", "[", "0", "]", ",", "stiffness", ",", "restraint_set", ",", "exclude_residues", ")", "\n", "", "simulation", "=", "openmm_app", ".", "Simulation", "(", "\n", "openmm_pdbs", "[", "0", "]", ".", "topology", ",", "\n", "system", ",", "\n", "openmm", ".", "LangevinIntegrator", "(", "0", ",", "0.01", ",", "0.0", ")", ",", "\n", "openmm", ".", "Platform", ".", "getPlatformByName", "(", "\"CPU\"", ")", ",", "\n", ")", "\n", "energies", "=", "[", "]", "\n", "for", "pdb", "in", "openmm_pdbs", ":", "\n", "        ", "try", ":", "\n", "            ", "simulation", ".", "context", ".", "setPositions", "(", "pdb", ".", "positions", ")", "\n", "state", "=", "simulation", ".", "context", ".", "getState", "(", "getEnergy", "=", "True", ")", "\n", "energies", ".", "append", "(", "state", ".", "getPotentialEnergy", "(", ")", ".", "value_in_unit", "(", "ENERGY", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "# pylint: disable=broad-except", "\n", "            ", "logging", ".", "error", "(", "\"Error getting initial energy, returning large value %s\"", ",", "e", ")", "\n", "energies", ".", "append", "(", "unit", ".", "Quantity", "(", "1e20", ",", "ENERGY", ")", ")", "\n", "", "", "return", "energies", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.cleanup.fix_pdb": [[27, 61], ["pdbfixer.PDBFixer", "pdbfixer.PDBFixer.findNonstandardResidues", "pdbfixer.PDBFixer.replaceNonstandardResidues", "cleanup._remove_heterogens", "pdbfixer.PDBFixer.findMissingResidues", "pdbfixer.PDBFixer.findMissingAtoms", "pdbfixer.PDBFixer.addMissingAtoms", "pdbfixer.PDBFixer.addMissingHydrogens", "io.StringIO", "simtk.openmm.app.PDBFile.writeFile", "io.StringIO.getvalue"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.cleanup._remove_heterogens"], ["def", "fix_pdb", "(", "pdbfile", ",", "alterations_info", ")", ":", "\n", "  ", "\"\"\"Apply pdbfixer to the contents of a PDB file; return a PDB string result.\n\n  1) Replaces nonstandard residues.\n  2) Removes heterogens (non protein residues) including water.\n  3) Adds missing residues and missing atoms within existing residues.\n  4) Adds hydrogens assuming pH=7.0.\n  5) KeepIds is currently true, so the fixer must keep the existing chain and\n     residue identifiers. This will fail for some files in wider PDB that have\n     invalid IDs.\n\n  Args:\n    pdbfile: Input PDB file handle.\n    alterations_info: A dict that will store details of changes made.\n\n  Returns:\n    A PDB string representing the fixed structure.\n  \"\"\"", "\n", "fixer", "=", "pdbfixer", ".", "PDBFixer", "(", "pdbfile", "=", "pdbfile", ")", "\n", "fixer", ".", "findNonstandardResidues", "(", ")", "\n", "alterations_info", "[", "'nonstandard_residues'", "]", "=", "fixer", ".", "nonstandardResidues", "\n", "fixer", ".", "replaceNonstandardResidues", "(", ")", "\n", "_remove_heterogens", "(", "fixer", ",", "alterations_info", ",", "keep_water", "=", "False", ")", "\n", "fixer", ".", "findMissingResidues", "(", ")", "\n", "alterations_info", "[", "'missing_residues'", "]", "=", "fixer", ".", "missingResidues", "\n", "fixer", ".", "findMissingAtoms", "(", ")", "\n", "alterations_info", "[", "'missing_heavy_atoms'", "]", "=", "fixer", ".", "missingAtoms", "\n", "alterations_info", "[", "'missing_terminals'", "]", "=", "fixer", ".", "missingTerminals", "\n", "fixer", ".", "addMissingAtoms", "(", "seed", "=", "0", ")", "\n", "fixer", ".", "addMissingHydrogens", "(", ")", "\n", "out_handle", "=", "io", ".", "StringIO", "(", ")", "\n", "app", ".", "PDBFile", ".", "writeFile", "(", "fixer", ".", "topology", ",", "fixer", ".", "positions", ",", "out_handle", ",", "\n", "keepIds", "=", "True", ")", "\n", "return", "out_handle", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.cleanup.clean_structure": [[63, 72], ["cleanup._replace_met_se", "cleanup._remove_chains_of_length_one"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.cleanup._replace_met_se", "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.cleanup._remove_chains_of_length_one"], ["", "def", "clean_structure", "(", "pdb_structure", ",", "alterations_info", ")", ":", "\n", "  ", "\"\"\"Applies additional fixes to an OpenMM structure, to handle edge cases.\n\n  Args:\n    pdb_structure: An OpenMM structure to modify and fix.\n    alterations_info: A dict that will store details of changes made.\n  \"\"\"", "\n", "_replace_met_se", "(", "pdb_structure", ",", "alterations_info", ")", "\n", "_remove_chains_of_length_one", "(", "pdb_structure", ",", "alterations_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.cleanup._remove_heterogens": [[74, 93], ["set", "fixer.topology.chains", "fixer.removeHeterogens", "set", "fixer.topology.chains", "set.difference", "chain.residues", "chain.residues", "set.add", "set.add"], "function", ["None"], ["", "def", "_remove_heterogens", "(", "fixer", ",", "alterations_info", ",", "keep_water", ")", ":", "\n", "  ", "\"\"\"Removes the residues that Pdbfixer considers to be heterogens.\n\n  Args:\n    fixer: A Pdbfixer instance.\n    alterations_info: A dict that will store details of changes made.\n    keep_water: If True, water (HOH) is not considered to be a heterogen.\n  \"\"\"", "\n", "initial_resnames", "=", "set", "(", ")", "\n", "for", "chain", "in", "fixer", ".", "topology", ".", "chains", "(", ")", ":", "\n", "    ", "for", "residue", "in", "chain", ".", "residues", "(", ")", ":", "\n", "      ", "initial_resnames", ".", "add", "(", "residue", ".", "name", ")", "\n", "", "", "fixer", ".", "removeHeterogens", "(", "keepWater", "=", "keep_water", ")", "\n", "final_resnames", "=", "set", "(", ")", "\n", "for", "chain", "in", "fixer", ".", "topology", ".", "chains", "(", ")", ":", "\n", "    ", "for", "residue", "in", "chain", ".", "residues", "(", ")", ":", "\n", "      ", "final_resnames", ".", "add", "(", "residue", ".", "name", ")", "\n", "", "", "alterations_info", "[", "'removed_heterogens'", "]", "=", "(", "\n", "initial_resnames", ".", "difference", "(", "final_resnames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.cleanup._replace_met_se": [[95, 107], ["pdb_structure.iter_residues", "res.get_name_with_spaces().strip", "res.get_atom", "res.get_name_with_spaces", "simtk.openmm.app.element.get_by_symbol", "modified_met_residues.append"], "function", ["None"], ["", "def", "_replace_met_se", "(", "pdb_structure", ",", "alterations_info", ")", ":", "\n", "  ", "\"\"\"Replace the Se in any MET residues that were not marked as modified.\"\"\"", "\n", "modified_met_residues", "=", "[", "]", "\n", "for", "res", "in", "pdb_structure", ".", "iter_residues", "(", ")", ":", "\n", "    ", "name", "=", "res", ".", "get_name_with_spaces", "(", ")", ".", "strip", "(", ")", "\n", "if", "name", "==", "'MET'", ":", "\n", "      ", "s_atom", "=", "res", ".", "get_atom", "(", "'SD'", ")", "\n", "if", "s_atom", ".", "element_symbol", "==", "'Se'", ":", "\n", "        ", "s_atom", ".", "element_symbol", "=", "'S'", "\n", "s_atom", ".", "element", "=", "element", ".", "get_by_symbol", "(", "'S'", ")", "\n", "modified_met_residues", ".", "append", "(", "s_atom", ".", "residue_number", ")", "\n", "", "", "", "alterations_info", "[", "'Se_in_MET'", "]", "=", "modified_met_residues", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.cleanup._remove_chains_of_length_one": [[109, 128], ["pdb_structure.iter_models", "model.chains_by_id.pop", "model.iter_chains", "model.iter_chains", "len", "len"], "function", ["None"], ["", "def", "_remove_chains_of_length_one", "(", "pdb_structure", ",", "alterations_info", ")", ":", "\n", "  ", "\"\"\"Removes chains that correspond to a single amino acid.\n\n  A single amino acid in a chain is both N and C terminus. There is no force\n  template for this case.\n\n  Args:\n    pdb_structure: An OpenMM pdb_structure to modify and fix.\n    alterations_info: A dict that will store details of changes made.\n  \"\"\"", "\n", "removed_chains", "=", "{", "}", "\n", "for", "model", "in", "pdb_structure", ".", "iter_models", "(", ")", ":", "\n", "    ", "valid_chains", "=", "[", "c", "for", "c", "in", "model", ".", "iter_chains", "(", ")", "if", "len", "(", "c", ")", ">", "1", "]", "\n", "invalid_chain_ids", "=", "[", "c", ".", "chain_id", "for", "c", "in", "model", ".", "iter_chains", "(", ")", "if", "len", "(", "c", ")", "<=", "1", "]", "\n", "model", ".", "chains", "=", "valid_chains", "\n", "for", "chain_id", "in", "invalid_chain_ids", ":", "\n", "      ", "model", ".", "chains_by_id", ".", "pop", "(", "chain_id", ")", "\n", "", "removed_chains", "[", "model", ".", "number", "]", "=", "invalid_chain_ids", "\n", "", "alterations_info", "[", "'removed_chains'", "]", "=", "removed_chains", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.utils.overwrite_pdb_coordinates": [[25, 32], ["io.StringIO", "simtk.openmm.app.internal.pdbstructure.PdbStructure", "simtk.openmm.app.PDBFile().getTopology", "io.StringIO", "simtk.openmm.app.PDBFile.writeFile", "f.getvalue", "simtk.openmm.app.PDBFile"], "function", ["None"], ["def", "overwrite_pdb_coordinates", "(", "pdb_str", ":", "str", ",", "pos", ")", "->", "str", ":", "\n", "    ", "pdb_file", "=", "io", ".", "StringIO", "(", "pdb_str", ")", "\n", "structure", "=", "PdbStructure", "(", "pdb_file", ")", "\n", "topology", "=", "openmm_app", ".", "PDBFile", "(", "structure", ")", ".", "getTopology", "(", ")", "\n", "with", "io", ".", "StringIO", "(", ")", "as", "f", ":", "\n", "        ", "openmm_app", ".", "PDBFile", ".", "writeFile", "(", "topology", ",", "pos", ",", "f", ")", "\n", "return", "f", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.utils.overwrite_b_factors": [[34, 70], ["Bio.PDB.PDBParser", "io.StringIO", "PDB.PDBParser.get_structure", "parser.get_structure.get_atoms", "io.StringIO", "Bio.PDB.PDBIO", "PDB.PDBIO.set_structure", "PDB.PDBIO.save", "io.StringIO.getvalue", "ValueError", "atom.parent.get_id", "ValueError"], "function", ["None"], ["", "", "def", "overwrite_b_factors", "(", "pdb_str", ":", "str", ",", "bfactors", ":", "np", ".", "ndarray", ")", "->", "str", ":", "\n", "    ", "\"\"\"Overwrites the B-factors in pdb_str with contents of bfactors array.\n\n  Args:\n    pdb_str: An input PDB string.\n    bfactors: A numpy array with shape [1, n_residues, 37]. We assume that the\n      B-factors are per residue; i.e. that the nonzero entries are identical in\n      [0, i, :].\n\n  Returns:\n    A new PDB string with the B-factors replaced.\n  \"\"\"", "\n", "if", "bfactors", ".", "shape", "[", "-", "1", "]", "!=", "residue_constants", ".", "atom_type_num", ":", "\n", "        ", "raise", "ValueError", "(", "f'Invalid final dimension size for bfactors: {bfactors.shape[-1]}.'", ")", "\n", "\n", "", "parser", "=", "PDB", ".", "PDBParser", "(", "QUIET", "=", "True", ")", "\n", "handle", "=", "io", ".", "StringIO", "(", "pdb_str", ")", "\n", "structure", "=", "parser", ".", "get_structure", "(", "''", ",", "handle", ")", "\n", "\n", "curr_resid", "=", "(", "''", ",", "''", ",", "''", ")", "\n", "idx", "=", "-", "1", "\n", "for", "atom", "in", "structure", ".", "get_atoms", "(", ")", ":", "\n", "        ", "atom_resid", "=", "atom", ".", "parent", ".", "get_id", "(", ")", "\n", "if", "atom_resid", "!=", "curr_resid", ":", "\n", "            ", "idx", "+=", "1", "\n", "if", "idx", ">=", "bfactors", ".", "shape", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "'Index into bfactors exceeds number of residues. '", "\n", "'B-factors shape: {shape}, idx: {idx}.'", ")", "\n", "", "", "curr_resid", "=", "atom_resid", "\n", "atom", ".", "bfactor", "=", "bfactors", "[", "idx", ",", "residue_constants", ".", "atom_order", "[", "'CA'", "]", "]", "\n", "\n", "", "new_pdb", "=", "io", ".", "StringIO", "(", ")", "\n", "pdb_io", "=", "PDB", ".", "PDBIO", "(", ")", "\n", "pdb_io", ".", "set_structure", "(", "structure", ")", "\n", "pdb_io", ".", "save", "(", "new_pdb", ")", "\n", "return", "new_pdb", ".", "getvalue", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.utils.assert_equal_nonterminal_atom_types": [[72, 79], ["numpy.ones", "numpy.testing.assert_almost_equal"], "function", ["None"], ["", "def", "assert_equal_nonterminal_atom_types", "(", "atom_mask", ":", "np", ".", "ndarray", ",", "ref_atom_mask", ":", "np", ".", "ndarray", ")", ":", "\n", "    ", "\"\"\"Checks that pre- and post-minimized proteins have same atom set.\"\"\"", "\n", "# Ignore any terminal OXT atoms which may have been added by minimization.", "\n", "oxt", "=", "residue_constants", ".", "atom_order", "[", "'OXT'", "]", "\n", "no_oxt_mask", "=", "np", ".", "ones", "(", "shape", "=", "atom_mask", ".", "shape", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "no_oxt_mask", "[", "...", ",", "oxt", "]", "=", "False", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "ref_atom_mask", "[", "no_oxt_mask", "]", ",", "atom_mask", "[", "no_oxt_mask", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.relax.utils.mask_mean_np": [[81, 109], ["isinstance", "isinstance", "tuple", "len", "len", "numpy.sum", "list", "range", "numpy.sum", "len"], "function", ["None"], ["", "def", "mask_mean_np", "(", "mask", ",", "value", ",", "axis", "=", "None", ",", "drop_mask_channel", "=", "False", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "\"\"\"Masked mean with numpy.\"\"\"", "\n", "if", "drop_mask_channel", ":", "\n", "        ", "mask", "=", "mask", "[", "...", ",", "0", "]", "\n", "\n", "", "mask_shape", "=", "mask", ".", "shape", "\n", "value_shape", "=", "value", ".", "shape", "\n", "\n", "assert", "len", "(", "mask_shape", ")", "==", "len", "(", "value_shape", ")", "\n", "\n", "if", "isinstance", "(", "axis", ",", "numbers", ".", "Integral", ")", ":", "\n", "        ", "axis", "=", "[", "axis", "]", "\n", "", "elif", "axis", "is", "None", ":", "\n", "        ", "axis", "=", "list", "(", "range", "(", "len", "(", "mask_shape", ")", ")", ")", "\n", "", "assert", "isinstance", "(", "\n", "axis", ",", "collections", ".", "Iterable", ")", ",", "(", "'axis needs to be either an iterable, integer or \"None\"'", ")", "\n", "\n", "broadcast_factor", "=", "1.", "\n", "for", "axis_", "in", "axis", ":", "\n", "        ", "value_size", "=", "value_shape", "[", "axis_", "]", "\n", "mask_size", "=", "mask_shape", "[", "axis_", "]", "\n", "if", "mask_size", "==", "1", ":", "\n", "            ", "broadcast_factor", "*=", "value_size", "\n", "", "else", ":", "\n", "            ", "assert", "mask_size", "==", "value_size", "\n", "\n", "", "", "axis", "=", "tuple", "(", "axis", ")", "\n", "return", "(", "np", ".", "sum", "(", "mask", "*", "value", ",", "axis", "=", "axis", ")", "/", "(", "np", ".", "sum", "(", "mask", ",", "axis", "=", "axis", ")", "*", "broadcast_factor", "+", "eps", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.parse_fasta": [[41, 68], ["fasta_string.splitlines", "line.strip.strip", "line.strip.startswith", "descriptions.append", "sequences.append"], "function", ["None"], ["", "def", "parse_fasta", "(", "fasta_string", ":", "str", ")", "->", "Tuple", "[", "Sequence", "[", "str", "]", ",", "Sequence", "[", "str", "]", "]", ":", "\n", "    ", "\"\"\"Parses FASTA string and returns list of strings with amino-acid sequences.\n\n    Arguments:\n        fasta_string: The string contents of a FASTA file.\n\n    Returns:\n        A tuple of two lists:\n        * A list of sequences.\n        * A list of sequence descriptions taken from the comment lines. In the\n            same order as the sequences.\n    \"\"\"", "\n", "sequences", "=", "[", "]", "\n", "descriptions", "=", "[", "]", "\n", "index", "=", "-", "1", "\n", "for", "line", "in", "fasta_string", ".", "splitlines", "(", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ".", "startswith", "(", "\">\"", ")", ":", "\n", "            ", "index", "+=", "1", "\n", "descriptions", ".", "append", "(", "line", "[", "1", ":", "]", ")", "# Remove the '>' at the beginning.", "\n", "sequences", ".", "append", "(", "\"\"", ")", "\n", "continue", "\n", "", "elif", "not", "line", ":", "\n", "            ", "continue", "# Skip blank lines.", "\n", "", "sequences", "[", "index", "]", "+=", "line", "\n", "\n", "", "return", "sequences", ",", "descriptions", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.parse_stockholm": [[70, 128], ["collections.OrderedDict", "stockholm_string.splitlines", "enumerate", "line.strip.strip", "line.strip.split", "collections.OrderedDict.values", "msa.append", "zip", "deletion_matrix.append", "list", "line.strip.startswith", "collections.OrderedDict.keys", "enumerate", "deletion_vec.append"], "function", ["None"], ["", "def", "parse_stockholm", "(", "\n", "stockholm_string", ":", "str", ",", "\n", ")", "->", "Tuple", "[", "Sequence", "[", "str", "]", ",", "DeletionMatrix", ",", "Sequence", "[", "str", "]", "]", ":", "\n", "    ", "\"\"\"Parses sequences and deletion matrix from stockholm format alignment.\n\n    Args:\n        stockholm_string: The string contents of a stockholm file. The first\n            sequence in the file should be the query sequence.\n\n    Returns:\n        A tuple of:\n            * A list of sequences that have been aligned to the query. These\n                might contain duplicates.\n            * The deletion matrix for the alignment as a list of lists. The element\n                at `deletion_matrix[i][j]` is the number of residues deleted from\n                the aligned sequence i at residue position j.\n            * The names of the targets matched, including the jackhmmer subsequence\n                suffix.\n    \"\"\"", "\n", "name_to_sequence", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "line", "in", "stockholm_string", ".", "splitlines", "(", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "not", "line", "or", "line", ".", "startswith", "(", "(", "\"#\"", ",", "\"//\"", ")", ")", ":", "\n", "            ", "continue", "\n", "", "name", ",", "sequence", "=", "line", ".", "split", "(", ")", "\n", "if", "name", "not", "in", "name_to_sequence", ":", "\n", "            ", "name_to_sequence", "[", "name", "]", "=", "\"\"", "\n", "", "name_to_sequence", "[", "name", "]", "+=", "sequence", "\n", "\n", "", "msa", "=", "[", "]", "\n", "deletion_matrix", "=", "[", "]", "\n", "\n", "query", "=", "\"\"", "\n", "keep_columns", "=", "[", "]", "\n", "for", "seq_index", ",", "sequence", "in", "enumerate", "(", "name_to_sequence", ".", "values", "(", ")", ")", ":", "\n", "        ", "if", "seq_index", "==", "0", ":", "\n", "# Gather the columns with gaps from the query", "\n", "            ", "query", "=", "sequence", "\n", "keep_columns", "=", "[", "i", "for", "i", ",", "res", "in", "enumerate", "(", "query", ")", "if", "res", "!=", "\"-\"", "]", "\n", "\n", "# Remove the columns with gaps in the query from all sequences.", "\n", "", "aligned_sequence", "=", "\"\"", ".", "join", "(", "[", "sequence", "[", "c", "]", "for", "c", "in", "keep_columns", "]", ")", "\n", "\n", "msa", ".", "append", "(", "aligned_sequence", ")", "\n", "\n", "# Count the number of deletions w.r.t. query.", "\n", "deletion_vec", "=", "[", "]", "\n", "deletion_count", "=", "0", "\n", "for", "seq_res", ",", "query_res", "in", "zip", "(", "sequence", ",", "query", ")", ":", "\n", "            ", "if", "seq_res", "!=", "\"-\"", "or", "query_res", "!=", "\"-\"", ":", "\n", "                ", "if", "query_res", "==", "\"-\"", ":", "\n", "                    ", "deletion_count", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "deletion_vec", ".", "append", "(", "deletion_count", ")", "\n", "deletion_count", "=", "0", "\n", "", "", "", "deletion_matrix", ".", "append", "(", "deletion_vec", ")", "\n", "\n", "", "return", "msa", ",", "deletion_matrix", ",", "list", "(", "name_to_sequence", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.parse_a3m": [[130, 162], ["parsers.parse_fasta", "str.maketrans", "deletion_matrix.append", "s.translate", "j.islower", "deletion_vec.append"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.parse_fasta"], ["", "def", "parse_a3m", "(", "a3m_string", ":", "str", ")", "->", "Tuple", "[", "Sequence", "[", "str", "]", ",", "DeletionMatrix", "]", ":", "\n", "    ", "\"\"\"Parses sequences and deletion matrix from a3m format alignment.\n\n    Args:\n        a3m_string: The string contents of a a3m file. The first sequence in the\n            file should be the query sequence.\n\n    Returns:\n        A tuple of:\n            * A list of sequences that have been aligned to the query. These\n                might contain duplicates.\n            * The deletion matrix for the alignment as a list of lists. The element\n                at `deletion_matrix[i][j]` is the number of residues deleted from\n                the aligned sequence i at residue position j.\n    \"\"\"", "\n", "sequences", ",", "_", "=", "parse_fasta", "(", "a3m_string", ")", "\n", "deletion_matrix", "=", "[", "]", "\n", "for", "msa_sequence", "in", "sequences", ":", "\n", "        ", "deletion_vec", "=", "[", "]", "\n", "deletion_count", "=", "0", "\n", "for", "j", "in", "msa_sequence", ":", "\n", "            ", "if", "j", ".", "islower", "(", ")", ":", "\n", "                ", "deletion_count", "+=", "1", "\n", "", "else", ":", "\n", "                ", "deletion_vec", ".", "append", "(", "deletion_count", ")", "\n", "deletion_count", "=", "0", "\n", "", "", "deletion_matrix", ".", "append", "(", "deletion_vec", ")", "\n", "\n", "# Make the MSA matrix out of aligned (deletion-free) sequences.", "\n", "", "deletion_table", "=", "str", ".", "maketrans", "(", "\"\"", ",", "\"\"", ",", "string", ".", "ascii_lowercase", ")", "\n", "aligned_sequences", "=", "[", "s", ".", "translate", "(", "deletion_table", ")", "for", "s", "in", "sequences", "]", "\n", "return", "aligned_sequences", ",", "deletion_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers._convert_sto_seq_to_a3m": [[164, 172], ["zip", "sequence_res.lower"], "function", ["None"], ["", "def", "_convert_sto_seq_to_a3m", "(", "\n", "query_non_gaps", ":", "Sequence", "[", "bool", "]", ",", "sto_seq", ":", "str", "\n", ")", "->", "Iterable", "[", "str", "]", ":", "\n", "    ", "for", "is_query_res_non_gap", ",", "sequence_res", "in", "zip", "(", "query_non_gaps", ",", "sto_seq", ")", ":", "\n", "        ", "if", "is_query_res_non_gap", ":", "\n", "            ", "yield", "sequence_res", "\n", "", "elif", "sequence_res", "!=", "\"-\"", ":", "\n", "            ", "yield", "sequence_res", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.convert_stockholm_to_a3m": [[174, 226], ["stockholm_format.splitlines", "stockholm_format.splitlines", "next", "sequences.items", "iter", "line.strip", "line.split", "line.split", "sequences.values", "parsers._convert_sto_seq_to_a3m", "len", "line.startswith", "len", "len", "descriptions.get", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers._convert_sto_seq_to_a3m"], ["", "", "", "def", "convert_stockholm_to_a3m", "(", "\n", "stockholm_format", ":", "str", ",", "max_sequences", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", "->", "str", ":", "\n", "    ", "\"\"\"Converts MSA in Stockholm format to the A3M format.\"\"\"", "\n", "descriptions", "=", "{", "}", "\n", "sequences", "=", "{", "}", "\n", "reached_max_sequences", "=", "False", "\n", "\n", "for", "line", "in", "stockholm_format", ".", "splitlines", "(", ")", ":", "\n", "        ", "reached_max_sequences", "=", "(", "\n", "max_sequences", "and", "len", "(", "sequences", ")", ">=", "max_sequences", "\n", ")", "\n", "if", "line", ".", "strip", "(", ")", "and", "not", "line", ".", "startswith", "(", "(", "\"#\"", ",", "\"//\"", ")", ")", ":", "\n", "# Ignore blank lines, markup and end symbols - remainder are alignment", "\n", "# sequence parts.", "\n", "            ", "seqname", ",", "aligned_seq", "=", "line", ".", "split", "(", "maxsplit", "=", "1", ")", "\n", "if", "seqname", "not", "in", "sequences", ":", "\n", "                ", "if", "reached_max_sequences", ":", "\n", "                    ", "continue", "\n", "", "sequences", "[", "seqname", "]", "=", "\"\"", "\n", "", "sequences", "[", "seqname", "]", "+=", "aligned_seq", "\n", "\n", "", "", "for", "line", "in", "stockholm_format", ".", "splitlines", "(", ")", ":", "\n", "        ", "if", "line", "[", ":", "4", "]", "==", "\"#=GS\"", ":", "\n", "# Description row - example format is:", "\n", "# #=GS UniRef90_Q9H5Z4/4-78            DE [subseq from] cDNA: FLJ22755 ...", "\n", "            ", "columns", "=", "line", ".", "split", "(", "maxsplit", "=", "3", ")", "\n", "seqname", ",", "feature", "=", "columns", "[", "1", ":", "3", "]", "\n", "value", "=", "columns", "[", "3", "]", "if", "len", "(", "columns", ")", "==", "4", "else", "\"\"", "\n", "if", "feature", "!=", "\"DE\"", ":", "\n", "                ", "continue", "\n", "", "if", "reached_max_sequences", "and", "seqname", "not", "in", "sequences", ":", "\n", "                ", "continue", "\n", "", "descriptions", "[", "seqname", "]", "=", "value", "\n", "if", "len", "(", "descriptions", ")", "==", "len", "(", "sequences", ")", ":", "\n", "                ", "break", "\n", "\n", "# Convert sto format to a3m line by line", "\n", "", "", "", "a3m_sequences", "=", "{", "}", "\n", "# query_sequence is assumed to be the first sequence", "\n", "query_sequence", "=", "next", "(", "iter", "(", "sequences", ".", "values", "(", ")", ")", ")", "\n", "query_non_gaps", "=", "[", "res", "!=", "\"-\"", "for", "res", "in", "query_sequence", "]", "\n", "for", "seqname", ",", "sto_sequence", "in", "sequences", ".", "items", "(", ")", ":", "\n", "        ", "a3m_sequences", "[", "seqname", "]", "=", "\"\"", ".", "join", "(", "\n", "_convert_sto_seq_to_a3m", "(", "query_non_gaps", ",", "sto_sequence", ")", "\n", ")", "\n", "\n", "", "fasta_chunks", "=", "(", "\n", "f\">{k} {descriptions.get(k, '')}\\n{a3m_sequences[k]}\"", "\n", "for", "k", "in", "a3m_sequences", "\n", ")", "\n", "return", "\"\\n\"", ".", "join", "(", "fasta_chunks", ")", "+", "\"\\n\"", "# Include terminating newline.", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers._get_hhr_line_regex_groups": [[228, 235], ["re.match", "re.match.groups", "RuntimeError"], "function", ["None"], ["", "def", "_get_hhr_line_regex_groups", "(", "\n", "regex_pattern", ":", "str", ",", "line", ":", "str", "\n", ")", "->", "Sequence", "[", "Optional", "[", "str", "]", "]", ":", "\n", "    ", "match", "=", "re", ".", "match", "(", "regex_pattern", ",", "line", ")", "\n", "if", "match", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Could not parse query line {line}\"", ")", "\n", "", "return", "match", ".", "groups", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers._update_hhr_residue_indices_list": [[237, 248], ["indices_list.append", "indices_list.append"], "function", ["None"], ["", "def", "_update_hhr_residue_indices_list", "(", "\n", "sequence", ":", "str", ",", "start_index", ":", "int", ",", "indices_list", ":", "List", "[", "int", "]", "\n", ")", ":", "\n", "    ", "\"\"\"Computes the relative indices for each residue with respect to the original sequence.\"\"\"", "\n", "counter", "=", "start_index", "\n", "for", "symbol", "in", "sequence", ":", "\n", "        ", "if", "symbol", "==", "\"-\"", ":", "\n", "            ", "indices_list", ".", "append", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "indices_list", ".", "append", "(", "counter", ")", "\n", "counter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers._parse_hhr_hit": [[250, 353], ["int", "re.match", "parsers.TemplateHit", "RuntimeError", "float", "detailed_lines[].split", "re.match.groups", "line.startswith", "parsers._get_hhr_line_regex_groups", "int", "len", "parsers._update_hhr_residue_indices_list", "line.startswith", "int", "line.startswith", "line.startswith", "line.startswith", "int", "len", "parsers._get_hhr_line_regex_groups", "parsers._update_hhr_residue_indices_list", "line.startswith", "line.startswith", "line.startswith", "int", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers._get_hhr_line_regex_groups", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers._update_hhr_residue_indices_list", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers._get_hhr_line_regex_groups", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers._update_hhr_residue_indices_list"], ["", "", "", "def", "_parse_hhr_hit", "(", "detailed_lines", ":", "Sequence", "[", "str", "]", ")", "->", "TemplateHit", ":", "\n", "    ", "\"\"\"Parses the detailed HMM HMM comparison section for a single Hit.\n\n    This works on .hhr files generated from both HHBlits and HHSearch.\n\n    Args:\n        detailed_lines: A list of lines from a single comparison section between 2\n            sequences (which each have their own HMM's)\n\n    Returns:\n        A dictionary with the information from that detailed comparison section\n\n    Raises:\n        RuntimeError: If a certain line cannot be processed\n    \"\"\"", "\n", "# Parse first 2 lines.", "\n", "number_of_hit", "=", "int", "(", "detailed_lines", "[", "0", "]", ".", "split", "(", ")", "[", "-", "1", "]", ")", "\n", "name_hit", "=", "detailed_lines", "[", "1", "]", "[", "1", ":", "]", "\n", "\n", "# Parse the summary line.", "\n", "pattern", "=", "(", "\n", "\"Probab=(.*)[\\t ]*E-value=(.*)[\\t ]*Score=(.*)[\\t ]*Aligned_cols=(.*)[\\t\"", "\n", "\" ]*Identities=(.*)%[\\t ]*Similarity=(.*)[\\t ]*Sum_probs=(.*)[\\t \"", "\n", "\"]*Template_Neff=(.*)\"", "\n", ")", "\n", "match", "=", "re", ".", "match", "(", "pattern", ",", "detailed_lines", "[", "2", "]", ")", "\n", "if", "match", "is", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "\n", "\"Could not parse section: %s. Expected this: \\n%s to contain summary.\"", "\n", "%", "(", "detailed_lines", ",", "detailed_lines", "[", "2", "]", ")", "\n", ")", "\n", "", "(", "prob_true", ",", "e_value", ",", "_", ",", "aligned_cols", ",", "_", ",", "_", ",", "sum_probs", ",", "neff", ")", "=", "[", "\n", "float", "(", "x", ")", "for", "x", "in", "match", ".", "groups", "(", ")", "\n", "]", "\n", "\n", "# The next section reads the detailed comparisons. These are in a 'human", "\n", "# readable' format which has a fixed length. The strategy employed is to", "\n", "# assume that each block starts with the query sequence line, and to parse", "\n", "# that with a regexp in order to deduce the fixed length used for that block.", "\n", "query", "=", "\"\"", "\n", "hit_sequence", "=", "\"\"", "\n", "indices_query", "=", "[", "]", "\n", "indices_hit", "=", "[", "]", "\n", "length_block", "=", "None", "\n", "\n", "for", "line", "in", "detailed_lines", "[", "3", ":", "]", ":", "\n", "# Parse the query sequence line", "\n", "        ", "if", "(", "\n", "line", ".", "startswith", "(", "\"Q \"", ")", "\n", "and", "not", "line", ".", "startswith", "(", "\"Q ss_dssp\"", ")", "\n", "and", "not", "line", ".", "startswith", "(", "\"Q ss_pred\"", ")", "\n", "and", "not", "line", ".", "startswith", "(", "\"Q Consensus\"", ")", "\n", ")", ":", "\n", "# Thus the first 17 characters must be 'Q <query_name> ', and we can parse", "\n", "# everything after that.", "\n", "#              start    sequence       end       total_sequence_length", "\n", "            ", "patt", "=", "r\"[\\t ]*([0-9]*) ([A-Z-]*)[\\t ]*([0-9]*) \\([0-9]*\\)\"", "\n", "groups", "=", "_get_hhr_line_regex_groups", "(", "patt", ",", "line", "[", "17", ":", "]", ")", "\n", "\n", "# Get the length of the parsed block using the start and finish indices,", "\n", "# and ensure it is the same as the actual block length.", "\n", "start", "=", "int", "(", "groups", "[", "0", "]", ")", "-", "1", "# Make index zero based.", "\n", "delta_query", "=", "groups", "[", "1", "]", "\n", "end", "=", "int", "(", "groups", "[", "2", "]", ")", "\n", "num_insertions", "=", "len", "(", "[", "x", "for", "x", "in", "delta_query", "if", "x", "==", "\"-\"", "]", ")", "\n", "length_block", "=", "end", "-", "start", "+", "num_insertions", "\n", "assert", "length_block", "==", "len", "(", "delta_query", ")", "\n", "\n", "# Update the query sequence and indices list.", "\n", "query", "+=", "delta_query", "\n", "_update_hhr_residue_indices_list", "(", "delta_query", ",", "start", ",", "indices_query", ")", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "\"T \"", ")", ":", "\n", "# Parse the hit sequence.", "\n", "            ", "if", "(", "\n", "not", "line", ".", "startswith", "(", "\"T ss_dssp\"", ")", "\n", "and", "not", "line", ".", "startswith", "(", "\"T ss_pred\"", ")", "\n", "and", "not", "line", ".", "startswith", "(", "\"T Consensus\"", ")", "\n", ")", ":", "\n", "# Thus the first 17 characters must be 'T <hit_name> ', and we can", "\n", "# parse everything after that.", "\n", "#              start    sequence       end     total_sequence_length", "\n", "                ", "patt", "=", "r\"[\\t ]*([0-9]*) ([A-Z-]*)[\\t ]*[0-9]* \\([0-9]*\\)\"", "\n", "groups", "=", "_get_hhr_line_regex_groups", "(", "patt", ",", "line", "[", "17", ":", "]", ")", "\n", "start", "=", "int", "(", "groups", "[", "0", "]", ")", "-", "1", "# Make index zero based.", "\n", "delta_hit_sequence", "=", "groups", "[", "1", "]", "\n", "assert", "length_block", "==", "len", "(", "delta_hit_sequence", ")", "\n", "\n", "# Update the hit sequence and indices list.", "\n", "hit_sequence", "+=", "delta_hit_sequence", "\n", "_update_hhr_residue_indices_list", "(", "\n", "delta_hit_sequence", ",", "start", ",", "indices_hit", "\n", ")", "\n", "\n", "", "", "", "return", "TemplateHit", "(", "\n", "index", "=", "number_of_hit", ",", "\n", "name", "=", "name_hit", ",", "\n", "aligned_cols", "=", "int", "(", "aligned_cols", ")", ",", "\n", "sum_probs", "=", "sum_probs", ",", "\n", "query", "=", "query", ",", "\n", "hit_sequence", "=", "hit_sequence", ",", "\n", "indices_query", "=", "indices_query", ",", "\n", "indices_hit", "=", "indices_hit", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.parse_hhr": [[356, 374], ["hhr_string.splitlines", "block_starts.append", "range", "enumerate", "line.startswith", "len", "hits.append", "len", "parsers._parse_hhr_hit"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers._parse_hhr_hit"], ["", "def", "parse_hhr", "(", "hhr_string", ":", "str", ")", "->", "Sequence", "[", "TemplateHit", "]", ":", "\n", "    ", "\"\"\"Parses the content of an entire HHR file.\"\"\"", "\n", "lines", "=", "hhr_string", ".", "splitlines", "(", ")", "\n", "\n", "# Each .hhr file starts with a results table, then has a sequence of hit", "\n", "# \"paragraphs\", each paragraph starting with a line 'No <hit number>'. We", "\n", "# iterate through each paragraph to parse each hit.", "\n", "\n", "block_starts", "=", "[", "i", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", "if", "line", ".", "startswith", "(", "\"No \"", ")", "]", "\n", "\n", "hits", "=", "[", "]", "\n", "if", "block_starts", ":", "\n", "        ", "block_starts", ".", "append", "(", "len", "(", "lines", ")", ")", "# Add the end of the final block.", "\n", "for", "i", "in", "range", "(", "len", "(", "block_starts", ")", "-", "1", ")", ":", "\n", "            ", "hits", ".", "append", "(", "\n", "_parse_hhr_hit", "(", "lines", "[", "block_starts", "[", "i", "]", ":", "block_starts", "[", "i", "+", "1", "]", "]", ")", "\n", ")", "\n", "", "", "return", "hits", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.parse_e_values_from_tblout": [[376, 389], ["line.split", "float", "tblout.splitlines"], "function", ["None"], ["", "def", "parse_e_values_from_tblout", "(", "tblout", ":", "str", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n", "    ", "\"\"\"Parse target to e-value mapping parsed from Jackhmmer tblout string.\"\"\"", "\n", "e_values", "=", "{", "\"query\"", ":", "0", "}", "\n", "lines", "=", "[", "line", "for", "line", "in", "tblout", ".", "splitlines", "(", ")", "if", "line", "[", "0", "]", "!=", "\"#\"", "]", "\n", "# As per http://eddylab.org/software/hmmer/Userguide.pdf fields are", "\n", "# space-delimited. Relevant fields are (1) target name:  and", "\n", "# (5) E-value (full sequence) (numbering from 1).", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "fields", "=", "line", ".", "split", "(", ")", "\n", "e_value", "=", "fields", "[", "4", "]", "\n", "target_name", "=", "fields", "[", "0", "]", "\n", "e_values", "[", "target_name", "]", "=", "float", "(", "e_value", ")", "\n", "", "return", "e_values", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldSingleDataset.__init__": [[39, 141], ["super().__init__", "fastfold.data.templates.TemplateHitFeaturizer", "fastfold.data.data_pipeline.DataPipeline", "ValueError", "logging.warning", "list", "fastfold.data.feature_pipeline.FeaturePipeline", "_alignment_index.keys", "list", "enumerate", "os.listdir", "open", "l.strip", "f.readlines"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "data_dir", ":", "str", ",", "\n", "alignment_dir", ":", "str", ",", "\n", "template_mmcif_dir", ":", "str", ",", "\n", "max_template_date", ":", "str", ",", "\n", "config", ":", "mlc", ".", "ConfigDict", ",", "\n", "kalign_binary_path", ":", "str", "=", "'/usr/bin/kalign'", ",", "\n", "max_template_hits", ":", "int", "=", "4", ",", "\n", "obsolete_pdbs_file_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "template_release_dates_cache_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "shuffle_top_k_prefiltered", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "treat_pdb_as_distillation", ":", "bool", "=", "True", ",", "\n", "mapping_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "mode", ":", "str", "=", "\"train\"", ",", "\n", "_output_raw", ":", "bool", "=", "False", ",", "\n", "_alignment_index", ":", "Optional", "[", "Any", "]", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                data_dir:\n                    A path to a directory containing mmCIF files (in train\n                    mode) or FASTA files (in inference mode).\n                alignment_dir:\n                    A path to a directory containing only data in the format \n                    output by an AlignmentRunner \n                    (defined in openfold.features.alignment_runner).\n                    I.e. a directory of directories named {PDB_ID}_{CHAIN_ID}\n                    or simply {PDB_ID}, each containing .a3m, .sto, and .hhr\n                    files.\n                template_mmcif_dir:\n                    Path to a directory containing template mmCIF files.\n                config:\n                    A dataset config object. See openfold.config\n                kalign_binary_path:\n                    Path to kalign binary.\n                max_template_hits:\n                    An upper bound on how many templates are considered. During\n                    training, the templates ultimately used are subsampled\n                    from this total quantity.\n                template_release_dates_cache_path:\n                    Path to the output of scripts/generate_mmcif_cache.\n                obsolete_pdbs_file_path:\n                    Path to the file containing replacements for obsolete PDBs.\n                shuffle_top_k_prefiltered:\n                    Whether to uniformly shuffle the top k template hits before\n                    parsing max_template_hits of them. Can be used to\n                    approximate DeepMind's training-time template subsampling\n                    scheme much more performantly.\n                treat_pdb_as_distillation:\n                    Whether to assume that .pdb files in the data_dir are from\n                    the self-distillation set (and should be subjected to\n                    special distillation set preprocessing steps).\n                mode:\n                    \"train\", \"val\", or \"predict\"\n        \"\"\"", "\n", "super", "(", "OpenFoldSingleDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "alignment_dir", "=", "alignment_dir", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "treat_pdb_as_distillation", "=", "treat_pdb_as_distillation", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "_output_raw", "=", "_output_raw", "\n", "self", ".", "_alignment_index", "=", "_alignment_index", "\n", "\n", "valid_modes", "=", "[", "\"train\"", ",", "\"eval\"", ",", "\"predict\"", "]", "\n", "if", "(", "mode", "not", "in", "valid_modes", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'mode must be one of {valid_modes}'", ")", "\n", "\n", "", "if", "(", "template_release_dates_cache_path", "is", "None", ")", ":", "\n", "            ", "logging", ".", "warning", "(", "\n", "\"Template release dates cache does not exist. Remember to run \"", "\n", "\"scripts/generate_mmcif_cache.py before running OpenFold\"", "\n", ")", "\n", "\n", "", "if", "(", "_alignment_index", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "_chain_ids", "=", "list", "(", "_alignment_index", ".", "keys", "(", ")", ")", "\n", "", "elif", "(", "mapping_path", "is", "None", ")", ":", "\n", "            ", "self", ".", "_chain_ids", "=", "list", "(", "os", ".", "listdir", "(", "alignment_dir", ")", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "mapping_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "_chain_ids", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "f", ".", "readlines", "(", ")", "]", "\n", "\n", "", "", "self", ".", "_chain_id_to_idx_dict", "=", "{", "\n", "chain", ":", "i", "for", "i", ",", "chain", "in", "enumerate", "(", "self", ".", "_chain_ids", ")", "\n", "}", "\n", "\n", "template_featurizer", "=", "templates", ".", "TemplateHitFeaturizer", "(", "\n", "mmcif_dir", "=", "template_mmcif_dir", ",", "\n", "max_template_date", "=", "max_template_date", ",", "\n", "max_hits", "=", "max_template_hits", ",", "\n", "kalign_binary_path", "=", "kalign_binary_path", ",", "\n", "release_dates_path", "=", "template_release_dates_cache_path", ",", "\n", "obsolete_pdbs_path", "=", "obsolete_pdbs_file_path", ",", "\n", "_shuffle_top_k_prefiltered", "=", "shuffle_top_k_prefiltered", ",", "\n", ")", "\n", "\n", "self", ".", "data_pipeline", "=", "data_pipeline", ".", "DataPipeline", "(", "\n", "template_featurizer", "=", "template_featurizer", ",", "\n", ")", "\n", "\n", "if", "(", "not", "self", ".", "_output_raw", ")", ":", "\n", "            ", "self", ".", "feature_pipeline", "=", "feature_pipeline", ".", "FeaturePipeline", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldSingleDataset._parse_mmcif": [[142, 165], ["fastfold.data.mmcif_parsing.parse", "data_modules.OpenFoldSingleDataset.data_pipeline.process_mmcif", "open", "f.read", "list", "fastfold.data.mmcif_parsing.parse.errors.values"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.parse", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline.process_mmcif"], ["", "", "def", "_parse_mmcif", "(", "self", ",", "path", ",", "file_id", ",", "chain_id", ",", "alignment_dir", ",", "_alignment_index", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "mmcif_string", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "mmcif_object", "=", "mmcif_parsing", ".", "parse", "(", "\n", "file_id", "=", "file_id", ",", "mmcif_string", "=", "mmcif_string", "\n", ")", "\n", "\n", "# Crash if an error is encountered. Any parsing errors should have", "\n", "# been dealt with at the alignment stage.", "\n", "if", "(", "mmcif_object", ".", "mmcif_object", "is", "None", ")", ":", "\n", "            ", "raise", "list", "(", "mmcif_object", ".", "errors", ".", "values", "(", ")", ")", "[", "0", "]", "\n", "\n", "", "mmcif_object", "=", "mmcif_object", ".", "mmcif_object", "\n", "\n", "data", "=", "self", ".", "data_pipeline", ".", "process_mmcif", "(", "\n", "mmcif", "=", "mmcif_object", ",", "\n", "alignment_dir", "=", "alignment_dir", ",", "\n", "chain_id", "=", "chain_id", ",", "\n", "_alignment_index", "=", "_alignment_index", "\n", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldSingleDataset.chain_id_to_idx": [[166, 168], ["None"], "methods", ["None"], ["", "def", "chain_id_to_idx", "(", "self", ",", "chain_id", ")", ":", "\n", "        ", "return", "self", ".", "_chain_id_to_idx_dict", "[", "chain_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldSingleDataset.idx_to_chain_id": [[169, 171], ["None"], "methods", ["None"], ["", "def", "idx_to_chain_id", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "_chain_ids", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldSingleDataset.__getitem__": [[172, 224], ["data_modules.OpenFoldSingleDataset.idx_to_chain_id", "os.path.join", "data_modules.OpenFoldSingleDataset.feature_pipeline.process_features", "data_modules.OpenFoldSingleDataset.rsplit", "os.path.join", "os.path.exists", "os.path.join", "data_modules.OpenFoldSingleDataset.data_pipeline.process_fasta", "len", "data_modules.OpenFoldSingleDataset._parse_mmcif", "os.path.exists", "data_modules.OpenFoldSingleDataset.data_pipeline.process_core", "os.path.exists", "data_modules.OpenFoldSingleDataset.data_pipeline.process_pdb", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldSingleDataset.idx_to_chain_id", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.feature_pipeline.FeaturePipeline.process_features", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline.process_fasta", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldSingleDataset._parse_mmcif", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline.process_core", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline.process_pdb"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "name", "=", "self", ".", "idx_to_chain_id", "(", "idx", ")", "\n", "alignment_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "alignment_dir", ",", "name", ")", "\n", "\n", "_alignment_index", "=", "None", "\n", "if", "(", "self", ".", "_alignment_index", "is", "not", "None", ")", ":", "\n", "            ", "alignment_dir", "=", "self", ".", "alignment_dir", "\n", "_alignment_index", "=", "self", ".", "_alignment_index", "[", "name", "]", "\n", "\n", "", "if", "(", "self", ".", "mode", "==", "'train'", "or", "self", ".", "mode", "==", "'eval'", ")", ":", "\n", "            ", "spl", "=", "name", ".", "rsplit", "(", "'_'", ",", "1", ")", "\n", "if", "(", "len", "(", "spl", ")", "==", "2", ")", ":", "\n", "                ", "file_id", ",", "chain_id", "=", "spl", "\n", "", "else", ":", "\n", "                ", "file_id", ",", "=", "spl", "\n", "chain_id", "=", "None", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "file_id", ")", "\n", "if", "(", "os", ".", "path", ".", "exists", "(", "path", "+", "\".cif\"", ")", ")", ":", "\n", "                ", "data", "=", "self", ".", "_parse_mmcif", "(", "\n", "path", "+", "\".cif\"", ",", "file_id", ",", "chain_id", ",", "alignment_dir", ",", "_alignment_index", ",", "\n", ")", "\n", "", "elif", "(", "os", ".", "path", ".", "exists", "(", "path", "+", "\".core\"", ")", ")", ":", "\n", "                ", "data", "=", "self", ".", "data_pipeline", ".", "process_core", "(", "\n", "path", "+", "\".core\"", ",", "alignment_dir", ",", "_alignment_index", ",", "\n", ")", "\n", "", "elif", "(", "os", ".", "path", ".", "exists", "(", "path", "+", "\".pdb\"", ")", ")", ":", "\n", "                ", "data", "=", "self", ".", "data_pipeline", ".", "process_pdb", "(", "\n", "pdb_path", "=", "path", "+", "\".pdb\"", ",", "\n", "alignment_dir", "=", "alignment_dir", ",", "\n", "is_distillation", "=", "self", ".", "treat_pdb_as_distillation", ",", "\n", "chain_id", "=", "chain_id", ",", "\n", "_alignment_index", "=", "_alignment_index", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid file type\"", ")", "\n", "", "", "else", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "name", ",", "name", "+", "\".fasta\"", ")", "\n", "data", "=", "self", ".", "data_pipeline", ".", "process_fasta", "(", "\n", "fasta_path", "=", "path", ",", "\n", "alignment_dir", "=", "alignment_dir", ",", "\n", "_alignment_index", "=", "_alignment_index", ",", "\n", ")", "\n", "\n", "", "if", "(", "self", ".", "_output_raw", ")", ":", "\n", "            ", "return", "data", "\n", "\n", "", "feats", "=", "self", ".", "feature_pipeline", ".", "process_features", "(", "\n", "data", ",", "self", ".", "mode", "\n", ")", "\n", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldSingleDataset.__len__": [[225, 227], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_chain_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataset.__init__": [[280, 348], ["int", "data_modules.OpenFoldDataset.__init__.looped_shuffled_dataset_idx"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "datasets", ":", "Sequence", "[", "OpenFoldSingleDataset", "]", ",", "\n", "probabilities", ":", "Sequence", "[", "int", "]", ",", "\n", "epoch_len", ":", "int", ",", "\n", "chain_data_cache_paths", ":", "List", "[", "str", "]", ",", "\n", "generator", ":", "torch", ".", "Generator", "=", "None", ",", "\n", "_roll_at_init", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "datasets", "=", "datasets", "\n", "self", ".", "probabilities", "=", "probabilities", "\n", "self", ".", "epoch_len", "=", "epoch_len", "\n", "self", ".", "generator", "=", "generator", "\n", "\n", "self", ".", "chain_data_caches", "=", "[", "]", "\n", "for", "path", "in", "chain_data_cache_paths", ":", "\n", "            ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "fp", ":", "\n", "                ", "self", ".", "chain_data_caches", ".", "append", "(", "json", ".", "load", "(", "fp", ")", ")", "\n", "\n", "", "", "def", "looped_shuffled_dataset_idx", "(", "dataset_len", ")", ":", "\n", "            ", "while", "True", ":", "\n", "# Uniformly shuffle each dataset's indices", "\n", "                ", "weights", "=", "[", "1.", "for", "_", "in", "range", "(", "dataset_len", ")", "]", "\n", "shuf", "=", "torch", ".", "multinomial", "(", "\n", "torch", ".", "tensor", "(", "weights", ")", ",", "\n", "num_samples", "=", "dataset_len", ",", "\n", "replacement", "=", "False", ",", "\n", "generator", "=", "self", ".", "generator", ",", "\n", ")", "\n", "for", "idx", "in", "shuf", ":", "\n", "                    ", "yield", "idx", "\n", "\n", "", "", "", "def", "looped_samples", "(", "dataset_idx", ")", ":", "\n", "            ", "max_cache_len", "=", "int", "(", "epoch_len", "*", "probabilities", "[", "dataset_idx", "]", ")", "\n", "dataset", "=", "self", ".", "datasets", "[", "dataset_idx", "]", "\n", "idx_iter", "=", "looped_shuffled_dataset_idx", "(", "len", "(", "dataset", ")", ")", "\n", "chain_data_cache", "=", "self", ".", "chain_data_caches", "[", "dataset_idx", "]", "\n", "while", "True", ":", "\n", "                ", "weights", "=", "[", "]", "\n", "idx", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "max_cache_len", ")", ":", "\n", "                    ", "candidate_idx", "=", "next", "(", "idx_iter", ")", "\n", "chain_id", "=", "dataset", ".", "idx_to_chain_id", "(", "candidate_idx", ")", "\n", "chain_data_cache_entry", "=", "chain_data_cache", "[", "chain_id", "]", "\n", "if", "(", "not", "deterministic_train_filter", "(", "chain_data_cache_entry", ")", ")", ":", "\n", "                        ", "continue", "\n", "\n", "", "p", "=", "get_stochastic_train_filter_prob", "(", "\n", "chain_data_cache_entry", ",", "\n", ")", "\n", "weights", ".", "append", "(", "[", "1.", "-", "p", ",", "p", "]", ")", "\n", "idx", ".", "append", "(", "candidate_idx", ")", "\n", "\n", "", "samples", "=", "torch", ".", "multinomial", "(", "\n", "torch", ".", "tensor", "(", "weights", ")", ",", "\n", "num_samples", "=", "1", ",", "\n", "generator", "=", "self", ".", "generator", ",", "\n", ")", "\n", "samples", "=", "samples", ".", "squeeze", "(", ")", "\n", "\n", "cache", "=", "[", "i", "for", "i", ",", "s", "in", "zip", "(", "idx", ",", "samples", ")", "if", "s", "]", "\n", "\n", "for", "datapoint_idx", "in", "cache", ":", "\n", "                    ", "yield", "datapoint_idx", "\n", "\n", "", "", "", "self", ".", "_samples", "=", "[", "looped_samples", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "datasets", ")", ")", "]", "\n", "\n", "if", "(", "_roll_at_init", ")", ":", "\n", "            ", "self", ".", "reroll", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataset.__getitem__": [[349, 352], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", ",", "datapoint_idx", "=", "self", ".", "datapoints", "[", "idx", "]", "\n", "return", "self", ".", "datasets", "[", "dataset_idx", "]", "[", "datapoint_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataset.__len__": [[353, 355], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "epoch_len", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataset.reroll": [[356, 369], ["torch.multinomial", "torch.tensor", "next", "data_modules.OpenFoldDataset.datapoints.append"], "methods", ["None"], ["", "def", "reroll", "(", "self", ")", ":", "\n", "        ", "dataset_choices", "=", "torch", ".", "multinomial", "(", "\n", "torch", ".", "tensor", "(", "self", ".", "probabilities", ")", ",", "\n", "num_samples", "=", "self", ".", "epoch_len", ",", "\n", "replacement", "=", "True", ",", "\n", "generator", "=", "self", ".", "generator", ",", "\n", ")", "\n", "\n", "self", ".", "datapoints", "=", "[", "]", "\n", "for", "dataset_idx", "in", "dataset_choices", ":", "\n", "            ", "samples", "=", "self", ".", "_samples", "[", "dataset_idx", "]", "\n", "datapoint_idx", "=", "next", "(", "samples", ")", "\n", "self", ".", "datapoints", ".", "append", "(", "(", "dataset_idx", ",", "datapoint_idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldBatchCollator.__init__": [[372, 375], ["fastfold.data.feature_pipeline.FeaturePipeline"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "stage", "=", "\"train\"", ")", ":", "\n", "        ", "self", ".", "stage", "=", "stage", "\n", "self", ".", "feature_pipeline", "=", "feature_pipeline", ".", "FeaturePipeline", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldBatchCollator.__call__": [[376, 386], ["functools.partial", "fastfold.utils.tensor_utils.dict_multimap", "data_modules.OpenFoldBatchCollator.feature_pipeline.process_features", "processed_prots.append"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.dict_multimap", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.feature_pipeline.FeaturePipeline.process_features"], ["", "def", "__call__", "(", "self", ",", "raw_prots", ")", ":", "\n", "        ", "processed_prots", "=", "[", "]", "\n", "for", "prot", "in", "raw_prots", ":", "\n", "            ", "features", "=", "self", ".", "feature_pipeline", ".", "process_features", "(", "\n", "prot", ",", "self", ".", "stage", "\n", ")", "\n", "processed_prots", ".", "append", "(", "features", ")", "\n", "\n", "", "stack_fn", "=", "partial", "(", "torch", ".", "stack", ",", "dim", "=", "0", ")", "\n", "return", "dict_multimap", "(", "stack_fn", ",", "processed_prots", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataLoader.__init__": [[389, 399], ["super().__init__", "data_modules.OpenFoldDataLoader._prep_batch_properties_probs", "torch.Generator"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataLoader._prep_batch_properties_probs"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "config", ",", "stage", "=", "\"train\"", ",", "generator", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "stage", "=", "stage", "\n", "\n", "if", "(", "generator", "is", "None", ")", ":", "\n", "            ", "generator", "=", "torch", ".", "Generator", "(", ")", "\n", "\n", "", "self", ".", "generator", "=", "generator", "\n", "self", ".", "_prep_batch_properties_probs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataLoader._prep_batch_properties_probs": [[400, 433], ["keyed_probs.append", "zip", "max", "torch.tensor", "keyed_probs.append", "len", "range", "range", "len", "zip"], "methods", ["None"], ["", "def", "_prep_batch_properties_probs", "(", "self", ")", ":", "\n", "        ", "keyed_probs", "=", "[", "]", "\n", "stage_cfg", "=", "self", ".", "config", "[", "self", ".", "stage", "]", "\n", "\n", "max_iters", "=", "self", ".", "config", ".", "common", ".", "max_recycling_iters", "\n", "if", "(", "stage_cfg", ".", "supervised", ")", ":", "\n", "            ", "clamp_prob", "=", "self", ".", "config", ".", "supervised", ".", "clamp_prob", "\n", "keyed_probs", ".", "append", "(", "\n", "(", "\"use_clamped_fape\"", ",", "[", "1", "-", "clamp_prob", ",", "clamp_prob", "]", ")", "\n", ")", "\n", "\n", "", "if", "(", "stage_cfg", ".", "uniform_recycling", ")", ":", "\n", "            ", "recycling_probs", "=", "[", "\n", "1.", "/", "(", "max_iters", "+", "1", ")", "for", "_", "in", "range", "(", "max_iters", "+", "1", ")", "\n", "]", "\n", "", "else", ":", "\n", "            ", "recycling_probs", "=", "[", "\n", "0.", "for", "_", "in", "range", "(", "max_iters", "+", "1", ")", "\n", "]", "\n", "recycling_probs", "[", "-", "1", "]", "=", "1.", "\n", "\n", "", "keyed_probs", ".", "append", "(", "\n", "(", "\"no_recycling_iters\"", ",", "recycling_probs", ")", "\n", ")", "\n", "\n", "keys", ",", "probs", "=", "zip", "(", "*", "keyed_probs", ")", "\n", "max_len", "=", "max", "(", "[", "len", "(", "p", ")", "for", "p", "in", "probs", "]", ")", "\n", "padding", "=", "[", "[", "0.", "]", "*", "(", "max_len", "-", "len", "(", "p", ")", ")", "for", "p", "in", "probs", "]", "\n", "\n", "self", ".", "prop_keys", "=", "keys", "\n", "self", ".", "prop_probs_tensor", "=", "torch", ".", "tensor", "(", "\n", "[", "p", "+", "pad", "for", "p", ",", "pad", "in", "zip", "(", "probs", ",", "padding", ")", "]", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataLoader._add_batch_properties": [[435, 470], ["torch.multinomial", "enumerate", "fastfold.utils.tensor_utils.tensor_tree_map", "int", "torch.tensor", "sample_tensor.expand.expand.view", "sample_tensor.expand.expand.expand", "len"], "methods", ["None"], ["", "def", "_add_batch_properties", "(", "self", ",", "batch", ")", ":", "\n", "        ", "samples", "=", "torch", ".", "multinomial", "(", "\n", "self", ".", "prop_probs_tensor", ",", "\n", "num_samples", "=", "1", ",", "# 1 per row", "\n", "replacement", "=", "True", ",", "\n", "generator", "=", "self", ".", "generator", "\n", ")", "\n", "\n", "aatype", "=", "batch", "[", "\"aatype\"", "]", "\n", "batch_dims", "=", "aatype", ".", "shape", "[", ":", "-", "2", "]", "\n", "recycling_dim", "=", "aatype", ".", "shape", "[", "-", "1", "]", "\n", "no_recycling", "=", "recycling_dim", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "self", ".", "prop_keys", ")", ":", "\n", "            ", "sample", "=", "int", "(", "samples", "[", "i", "]", "[", "0", "]", ")", "\n", "sample_tensor", "=", "torch", ".", "tensor", "(", "\n", "sample", ",", "\n", "device", "=", "aatype", ".", "device", ",", "\n", "requires_grad", "=", "False", "\n", ")", "\n", "orig_shape", "=", "sample_tensor", ".", "shape", "\n", "sample_tensor", "=", "sample_tensor", ".", "view", "(", "\n", "(", "1", ",", ")", "*", "len", "(", "batch_dims", ")", "+", "sample_tensor", ".", "shape", "+", "(", "1", ",", ")", "\n", ")", "\n", "sample_tensor", "=", "sample_tensor", ".", "expand", "(", "\n", "batch_dims", "+", "orig_shape", "+", "(", "recycling_dim", ",", ")", "\n", ")", "\n", "batch", "[", "key", "]", "=", "sample_tensor", "\n", "\n", "if", "(", "key", "==", "\"no_recycling_iters\"", ")", ":", "\n", "                ", "no_recycling", "=", "sample", "\n", "\n", "", "", "resample_recycling", "=", "lambda", "t", ":", "t", "[", "...", ",", ":", "no_recycling", "+", "1", "]", "\n", "batch", "=", "tensor_tree_map", "(", "resample_recycling", ",", "batch", ")", "\n", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataLoader.__iter__": [[471, 479], ["super().__iter__", "data_modules.OpenFoldDataLoader.__iter__._batch_prop_gen"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataLoader.__iter__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "it", "=", "super", "(", ")", ".", "__iter__", "(", ")", "\n", "\n", "def", "_batch_prop_gen", "(", "iterator", ")", ":", "\n", "            ", "for", "batch", "in", "iterator", ":", "\n", "                ", "yield", "self", ".", "_add_batch_properties", "(", "batch", ")", "\n", "\n", "", "", "return", "_batch_prop_gen", "(", "it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataModule.__init__": [[482, 560], ["pytorch_lightning.LightningDataModule.__init__", "ValueError", "ValueError", "ValueError", "open", "json.load", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "config", ":", "mlc", ".", "ConfigDict", ",", "\n", "template_mmcif_dir", ":", "str", ",", "\n", "max_template_date", ":", "str", ",", "\n", "train_data_dir", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "train_alignment_dir", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "train_chain_data_cache_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "distillation_data_dir", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "distillation_alignment_dir", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "distillation_chain_data_cache_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "val_data_dir", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "val_alignment_dir", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "predict_data_dir", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "predict_alignment_dir", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "kalign_binary_path", ":", "str", "=", "'/usr/bin/kalign'", ",", "\n", "train_mapping_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "distillation_mapping_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "obsolete_pdbs_file_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "template_release_dates_cache_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "batch_seed", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "train_epoch_len", ":", "int", "=", "50000", ",", "\n", "_alignment_index_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "OpenFoldDataModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "template_mmcif_dir", "=", "template_mmcif_dir", "\n", "self", ".", "max_template_date", "=", "max_template_date", "\n", "self", ".", "train_data_dir", "=", "train_data_dir", "\n", "self", ".", "train_alignment_dir", "=", "train_alignment_dir", "\n", "self", ".", "train_chain_data_cache_path", "=", "train_chain_data_cache_path", "\n", "self", ".", "distillation_data_dir", "=", "distillation_data_dir", "\n", "self", ".", "distillation_alignment_dir", "=", "distillation_alignment_dir", "\n", "self", ".", "distillation_chain_data_cache_path", "=", "(", "\n", "distillation_chain_data_cache_path", "\n", ")", "\n", "self", ".", "val_data_dir", "=", "val_data_dir", "\n", "self", ".", "val_alignment_dir", "=", "val_alignment_dir", "\n", "self", ".", "predict_data_dir", "=", "predict_data_dir", "\n", "self", ".", "predict_alignment_dir", "=", "predict_alignment_dir", "\n", "self", ".", "kalign_binary_path", "=", "kalign_binary_path", "\n", "self", ".", "train_mapping_path", "=", "train_mapping_path", "\n", "self", ".", "distillation_mapping_path", "=", "distillation_mapping_path", "\n", "self", ".", "template_release_dates_cache_path", "=", "(", "\n", "template_release_dates_cache_path", "\n", ")", "\n", "self", ".", "obsolete_pdbs_file_path", "=", "obsolete_pdbs_file_path", "\n", "self", ".", "batch_seed", "=", "batch_seed", "\n", "self", ".", "train_epoch_len", "=", "train_epoch_len", "\n", "\n", "if", "(", "self", ".", "train_data_dir", "is", "None", "and", "self", ".", "predict_data_dir", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'At least one of train_data_dir or predict_data_dir must be '", "\n", "'specified'", "\n", ")", "\n", "\n", "", "self", ".", "training_mode", "=", "self", ".", "train_data_dir", "is", "not", "None", "\n", "\n", "if", "(", "self", ".", "training_mode", "and", "train_alignment_dir", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'In training mode, train_alignment_dir must be specified'", "\n", ")", "\n", "", "elif", "(", "not", "self", ".", "training_mode", "and", "predict_alignment_dir", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'In inference mode, predict_alignment_dir must be specified'", "\n", ")", "\n", "", "elif", "(", "val_data_dir", "is", "not", "None", "and", "val_alignment_dir", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'If val_data_dir is specified, val_alignment_dir must '", "\n", "'be specified as well'", "\n", ")", "\n", "\n", "# An ad-hoc measure for our particular filesystem restrictions", "\n", "", "self", ".", "_alignment_index", "=", "None", "\n", "if", "(", "_alignment_index_path", "is", "not", "None", ")", ":", "\n", "            ", "with", "open", "(", "_alignment_index_path", ",", "\"r\"", ")", "as", "fp", ":", "\n", "                ", "self", ".", "_alignment_index", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataModule.setup": [[561, 643], ["functools.partial", "functools.partial.", "data_modules.OpenFoldDataset", "functools.partial.", "functools.partial.", "functools.partial."], "methods", ["None"], ["", "", "", "def", "setup", "(", "self", ")", ":", "\n", "# Most of the arguments are the same for the three datasets ", "\n", "        ", "dataset_gen", "=", "partial", "(", "OpenFoldSingleDataset", ",", "\n", "template_mmcif_dir", "=", "self", ".", "template_mmcif_dir", ",", "\n", "max_template_date", "=", "self", ".", "max_template_date", ",", "\n", "config", "=", "self", ".", "config", ",", "\n", "kalign_binary_path", "=", "self", ".", "kalign_binary_path", ",", "\n", "template_release_dates_cache_path", "=", "\n", "self", ".", "template_release_dates_cache_path", ",", "\n", "obsolete_pdbs_file_path", "=", "\n", "self", ".", "obsolete_pdbs_file_path", ",", "\n", ")", "\n", "\n", "if", "(", "self", ".", "training_mode", ")", ":", "\n", "            ", "train_dataset", "=", "dataset_gen", "(", "\n", "data_dir", "=", "self", ".", "train_data_dir", ",", "\n", "alignment_dir", "=", "self", ".", "train_alignment_dir", ",", "\n", "mapping_path", "=", "self", ".", "train_mapping_path", ",", "\n", "max_template_hits", "=", "self", ".", "config", ".", "train", ".", "max_template_hits", ",", "\n", "shuffle_top_k_prefiltered", "=", "\n", "self", ".", "config", ".", "train", ".", "shuffle_top_k_prefiltered", ",", "\n", "treat_pdb_as_distillation", "=", "False", ",", "\n", "mode", "=", "\"train\"", ",", "\n", "_output_raw", "=", "True", ",", "\n", "_alignment_index", "=", "self", ".", "_alignment_index", ",", "\n", ")", "\n", "\n", "distillation_dataset", "=", "None", "\n", "if", "(", "self", ".", "distillation_data_dir", "is", "not", "None", ")", ":", "\n", "                ", "distillation_dataset", "=", "dataset_gen", "(", "\n", "data_dir", "=", "self", ".", "distillation_data_dir", ",", "\n", "alignment_dir", "=", "self", ".", "distillation_alignment_dir", ",", "\n", "mapping_path", "=", "self", ".", "distillation_mapping_path", ",", "\n", "max_template_hits", "=", "self", ".", "train", ".", "max_template_hits", ",", "\n", "treat_pdb_as_distillation", "=", "True", ",", "\n", "mode", "=", "\"train\"", ",", "\n", "_output_raw", "=", "True", ",", "\n", ")", "\n", "\n", "d_prob", "=", "self", ".", "config", ".", "train", ".", "distillation_prob", "\n", "\n", "", "if", "(", "distillation_dataset", "is", "not", "None", ")", ":", "\n", "                ", "datasets", "=", "[", "train_dataset", ",", "distillation_dataset", "]", "\n", "d_prob", "=", "self", ".", "config", ".", "train", ".", "distillation_prob", "\n", "probabilities", "=", "[", "1", "-", "d_prob", ",", "d_prob", "]", "\n", "chain_data_cache_paths", "=", "[", "\n", "self", ".", "train_chain_data_cache_path", ",", "\n", "self", ".", "distillation_chain_data_cache_path", ",", "\n", "]", "\n", "", "else", ":", "\n", "                ", "datasets", "=", "[", "train_dataset", "]", "\n", "probabilities", "=", "[", "1.", "]", "\n", "chain_data_cache_paths", "=", "[", "\n", "self", ".", "train_chain_data_cache_path", ",", "\n", "]", "\n", "\n", "", "self", ".", "train_dataset", "=", "OpenFoldDataset", "(", "\n", "datasets", "=", "datasets", ",", "\n", "probabilities", "=", "probabilities", ",", "\n", "epoch_len", "=", "self", ".", "train_epoch_len", ",", "\n", "chain_data_cache_paths", "=", "chain_data_cache_paths", ",", "\n", "_roll_at_init", "=", "False", ",", "\n", ")", "\n", "\n", "if", "(", "self", ".", "val_data_dir", "is", "not", "None", ")", ":", "\n", "                ", "self", ".", "eval_dataset", "=", "dataset_gen", "(", "\n", "data_dir", "=", "self", ".", "val_data_dir", ",", "\n", "alignment_dir", "=", "self", ".", "val_alignment_dir", ",", "\n", "mapping_path", "=", "None", ",", "\n", "max_template_hits", "=", "self", ".", "config", ".", "eval", ".", "max_template_hits", ",", "\n", "mode", "=", "\"eval\"", ",", "\n", "_output_raw", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "eval_dataset", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "predict_dataset", "=", "dataset_gen", "(", "\n", "data_dir", "=", "self", ".", "predict_data_dir", ",", "\n", "alignment_dir", "=", "self", ".", "predict_alignment_dir", ",", "\n", "mapping_path", "=", "None", ",", "\n", "max_template_hits", "=", "self", ".", "config", ".", "predict", ".", "max_template_hits", ",", "\n", "mode", "=", "\"predict\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataModule._gen_dataloader": [[645, 676], ["torch.Generator", "data_modules.OpenFoldBatchCollator", "data_modules.OpenFoldDataLoader", "generator.manual_seed.manual_seed.manual_seed", "dataset.reroll", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataset.reroll"], ["", "", "def", "_gen_dataloader", "(", "self", ",", "stage", ")", ":", "\n", "        ", "generator", "=", "torch", ".", "Generator", "(", ")", "\n", "if", "(", "self", ".", "batch_seed", "is", "not", "None", ")", ":", "\n", "            ", "generator", "=", "generator", ".", "manual_seed", "(", "self", ".", "batch_seed", ")", "\n", "\n", "", "dataset", "=", "None", "\n", "if", "(", "stage", "==", "\"train\"", ")", ":", "\n", "            ", "dataset", "=", "self", ".", "train_dataset", "\n", "\n", "# Filter the dataset, if necessary", "\n", "dataset", ".", "reroll", "(", ")", "\n", "", "elif", "(", "stage", "==", "\"eval\"", ")", ":", "\n", "            ", "dataset", "=", "self", ".", "eval_dataset", "\n", "", "elif", "(", "stage", "==", "\"predict\"", ")", ":", "\n", "            ", "dataset", "=", "self", ".", "predict_dataset", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid stage\"", ")", "\n", "\n", "", "batch_collator", "=", "OpenFoldBatchCollator", "(", "self", ".", "config", ",", "stage", ")", "\n", "\n", "dl", "=", "OpenFoldDataLoader", "(", "\n", "dataset", ",", "\n", "config", "=", "self", ".", "config", ",", "\n", "stage", "=", "stage", ",", "\n", "generator", "=", "generator", ",", "\n", "batch_size", "=", "self", ".", "config", ".", "data_module", ".", "data_loaders", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "config", ".", "data_module", ".", "data_loaders", ".", "num_workers", ",", "\n", "collate_fn", "=", "batch_collator", ",", "\n", ")", "\n", "\n", "return", "dl", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataModule.train_dataloader": [[677, 679], ["data_modules.OpenFoldDataModule._gen_dataloader"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataModule._gen_dataloader"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_gen_dataloader", "(", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataModule.val_dataloader": [[680, 684], ["data_modules.OpenFoldDataModule._gen_dataloader"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataModule._gen_dataloader"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "if", "(", "self", ".", "eval_dataset", "is", "not", "None", ")", ":", "\n", "            ", "return", "self", ".", "_gen_dataloader", "(", "\"eval\"", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataModule.predict_dataloader": [[685, 687], ["data_modules.OpenFoldDataModule._gen_dataloader"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.OpenFoldDataModule._gen_dataloader"], ["", "def", "predict_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_gen_dataloader", "(", "\"predict\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.DummyDataset.__init__": [[690, 693], ["open", "pickle.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_path", ")", ":", "\n", "        ", "with", "open", "(", "batch_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "batch", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.DummyDataset.__getitem__": [[694, 696], ["copy.deepcopy"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "copy", ".", "deepcopy", "(", "self", ".", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.DummyDataset.__len__": [[697, 699], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.DummyDataLoader.__init__": [[702, 705], ["pytorch_lightning.LightningDataModule.__init__", "data_modules.DummyDataset"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch_path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "DummyDataset", "(", "batch_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.DummyDataLoader.train_dataloader": [[706, 708], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "self", ".", "dataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.deterministic_train_filter": [[229, 250], ["chain_data_cache_entry.get", "max", "counts.setdefault", "counts.values", "len"], "function", ["None"], ["", "", "def", "deterministic_train_filter", "(", "\n", "chain_data_cache_entry", ":", "Any", ",", "\n", "max_resolution", ":", "float", "=", "9.", ",", "\n", "max_single_aa_prop", ":", "float", "=", "0.8", ",", "\n", ")", "->", "bool", ":", "\n", "# Hard filters", "\n", "    ", "resolution", "=", "chain_data_cache_entry", ".", "get", "(", "\"resolution\"", ",", "None", ")", "\n", "if", "(", "resolution", "is", "not", "None", "and", "resolution", ">", "max_resolution", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "seq", "=", "chain_data_cache_entry", "[", "\"seq\"", "]", "\n", "counts", "=", "{", "}", "\n", "for", "aa", "in", "seq", ":", "\n", "        ", "counts", ".", "setdefault", "(", "aa", ",", "0", ")", "\n", "counts", "[", "aa", "]", "+=", "1", "\n", "", "largest_aa_count", "=", "max", "(", "counts", ".", "values", "(", ")", ")", "\n", "largest_single_aa_prop", "=", "largest_aa_count", "/", "len", "(", "seq", ")", "\n", "if", "(", "largest_single_aa_prop", ">", "max_single_aa_prop", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_modules.get_stochastic_train_filter_prob": [[252, 271], ["chain_data_cache_entry.get", "len", "probabilities.append", "probabilities.append", "max", "min"], "function", ["None"], ["", "def", "get_stochastic_train_filter_prob", "(", "\n", "chain_data_cache_entry", ":", "Any", ",", "\n", ")", "->", "List", "[", "float", "]", ":", "\n", "# Stochastic filters", "\n", "    ", "probabilities", "=", "[", "]", "\n", "\n", "cluster_size", "=", "chain_data_cache_entry", ".", "get", "(", "\"cluster_size\"", ",", "None", ")", "\n", "if", "(", "cluster_size", "is", "not", "None", "and", "cluster_size", ">", "0", ")", ":", "\n", "        ", "probabilities", ".", "append", "(", "1", "/", "cluster_size", ")", "\n", "\n", "", "chain_length", "=", "len", "(", "chain_data_cache_entry", "[", "\"seq\"", "]", ")", "\n", "probabilities", ".", "append", "(", "(", "1", "/", "512", ")", "*", "(", "max", "(", "min", "(", "chain_length", ",", "512", ")", ",", "256", ")", ")", ")", "\n", "\n", "# Risk of underflow here?", "\n", "out", "=", "1", "\n", "for", "p", "in", "probabilities", ":", "\n", "        ", "out", "*=", "p", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.AlignmentRunner.__init__": [[221, 357], ["db_map.items", "ValueError", "multiprocessing.cpu_count", "fastfold.data.tools.jackhmmer.Jackhmmer", "fastfold.data.tools.jackhmmer.Jackhmmer", "fastfold.data.tools.hhsearch.HHSearch", "ValueError", "all", "fastfold.data.tools.jackhmmer.Jackhmmer", "fastfold.data.tools.hhblits.HHBlits", "all", "dbs.append"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "jackhmmer_binary_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "hhblits_binary_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "hhsearch_binary_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "uniref90_database_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "mgnify_database_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "bfd_database_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "uniclust30_database_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "pdb70_database_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "use_small_bfd", ":", "Optional", "[", "bool", "]", "=", "None", ",", "\n", "no_cpus", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "uniref_max_hits", ":", "int", "=", "10000", ",", "\n", "mgnify_max_hits", ":", "int", "=", "5000", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            jackhmmer_binary_path:\n                Path to jackhmmer binary\n            hhblits_binary_path:\n                Path to hhblits binary\n            hhsearch_binary_path:\n                Path to hhsearch binary\n            uniref90_database_path:\n                Path to uniref90 database. If provided, jackhmmer_binary_path\n                must also be provided\n            mgnify_database_path:\n                Path to mgnify database. If provided, jackhmmer_binary_path\n                must also be provided\n            bfd_database_path:\n                Path to BFD database. Depending on the value of use_small_bfd,\n                one of hhblits_binary_path or jackhmmer_binary_path must be \n                provided.\n            uniclust30_database_path:\n                Path to uniclust30. Searched alongside BFD if use_small_bfd is \n                false.\n            pdb70_database_path:\n                Path to pdb70 database.\n            use_small_bfd:\n                Whether to search the BFD database alone with jackhmmer or \n                in conjunction with uniclust30 with hhblits.\n            no_cpus:\n                The number of CPUs available for alignment. By default, all\n                CPUs are used.\n            uniref_max_hits:\n                Max number of uniref hits\n            mgnify_max_hits:\n                Max number of mgnify hits\n        \"\"\"", "\n", "db_map", "=", "{", "\n", "\"jackhmmer\"", ":", "{", "\n", "\"binary\"", ":", "jackhmmer_binary_path", ",", "\n", "\"dbs\"", ":", "[", "\n", "uniref90_database_path", ",", "\n", "mgnify_database_path", ",", "\n", "bfd_database_path", "if", "use_small_bfd", "else", "None", ",", "\n", "]", ",", "\n", "}", ",", "\n", "\"hhblits\"", ":", "{", "\n", "\"binary\"", ":", "hhblits_binary_path", ",", "\n", "\"dbs\"", ":", "[", "\n", "bfd_database_path", "if", "not", "use_small_bfd", "else", "None", ",", "\n", "]", ",", "\n", "}", ",", "\n", "\"hhsearch\"", ":", "{", "\n", "\"binary\"", ":", "hhsearch_binary_path", ",", "\n", "\"dbs\"", ":", "[", "\n", "pdb70_database_path", ",", "\n", "]", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "for", "name", ",", "dic", "in", "db_map", ".", "items", "(", ")", ":", "\n", "            ", "binary", ",", "dbs", "=", "dic", "[", "\"binary\"", "]", ",", "dic", "[", "\"dbs\"", "]", "\n", "if", "(", "binary", "is", "None", "and", "not", "all", "(", "[", "x", "is", "None", "for", "x", "in", "dbs", "]", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"{name} DBs provided but {name} binary is None\"", "\n", ")", "\n", "\n", "", "", "if", "(", "not", "all", "(", "[", "x", "is", "None", "for", "x", "in", "db_map", "[", "\"hhsearch\"", "]", "[", "\"dbs\"", "]", "]", ")", "\n", "and", "uniref90_database_path", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"\"\"uniref90_database_path must be specified in order to perform\n                   template search\"\"\"", "\n", ")", "\n", "\n", "", "self", ".", "uniref_max_hits", "=", "uniref_max_hits", "\n", "self", ".", "mgnify_max_hits", "=", "mgnify_max_hits", "\n", "self", ".", "use_small_bfd", "=", "use_small_bfd", "\n", "\n", "if", "(", "no_cpus", "is", "None", ")", ":", "\n", "            ", "no_cpus", "=", "cpu_count", "(", ")", "\n", "\n", "", "self", ".", "jackhmmer_uniref90_runner", "=", "None", "\n", "if", "(", "jackhmmer_binary_path", "is", "not", "None", "and", "\n", "uniref90_database_path", "is", "not", "None", "\n", ")", ":", "\n", "            ", "self", ".", "jackhmmer_uniref90_runner", "=", "jackhmmer", ".", "Jackhmmer", "(", "\n", "binary_path", "=", "jackhmmer_binary_path", ",", "\n", "database_path", "=", "uniref90_database_path", ",", "\n", "n_cpu", "=", "no_cpus", ",", "\n", ")", "\n", "\n", "", "self", ".", "jackhmmer_small_bfd_runner", "=", "None", "\n", "self", ".", "hhblits_bfd_uniclust_runner", "=", "None", "\n", "if", "(", "bfd_database_path", "is", "not", "None", ")", ":", "\n", "            ", "if", "use_small_bfd", ":", "\n", "                ", "self", ".", "jackhmmer_small_bfd_runner", "=", "jackhmmer", ".", "Jackhmmer", "(", "\n", "binary_path", "=", "jackhmmer_binary_path", ",", "\n", "database_path", "=", "bfd_database_path", ",", "\n", "n_cpu", "=", "no_cpus", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "dbs", "=", "[", "bfd_database_path", "]", "\n", "if", "(", "uniclust30_database_path", "is", "not", "None", ")", ":", "\n", "                    ", "dbs", ".", "append", "(", "uniclust30_database_path", ")", "\n", "", "self", ".", "hhblits_bfd_uniclust_runner", "=", "hhblits", ".", "HHBlits", "(", "\n", "binary_path", "=", "hhblits_binary_path", ",", "\n", "databases", "=", "dbs", ",", "\n", "n_cpu", "=", "no_cpus", ",", "\n", ")", "\n", "\n", "", "", "self", ".", "jackhmmer_mgnify_runner", "=", "None", "\n", "if", "(", "mgnify_database_path", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "jackhmmer_mgnify_runner", "=", "jackhmmer", ".", "Jackhmmer", "(", "\n", "binary_path", "=", "jackhmmer_binary_path", ",", "\n", "database_path", "=", "mgnify_database_path", ",", "\n", "n_cpu", "=", "no_cpus", ",", "\n", ")", "\n", "\n", "", "self", ".", "hhsearch_pdb70_runner", "=", "None", "\n", "if", "(", "pdb70_database_path", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "hhsearch_pdb70_runner", "=", "hhsearch", ".", "HHSearch", "(", "\n", "binary_path", "=", "hhsearch_binary_path", ",", "\n", "databases", "=", "[", "pdb70_database_path", "]", ",", "\n", "n_cpu", "=", "no_cpus", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.AlignmentRunner.run": [[359, 412], ["fastfold.data.parsers.convert_stockholm_to_a3m", "os.path.join", "fastfold.data.parsers.convert_stockholm_to_a3m", "os.path.join", "os.path.join", "data_pipeline.AlignmentRunner.jackhmmer_uniref90_runner.query", "open", "f.write", "data_pipeline.AlignmentRunner.hhsearch_pdb70_runner.query", "os.path.join", "data_pipeline.AlignmentRunner.jackhmmer_mgnify_runner.query", "open", "f.write", "data_pipeline.AlignmentRunner.jackhmmer_small_bfd_runner.query", "open", "f.write", "data_pipeline.AlignmentRunner.hhblits_bfd_uniclust_runner.query", "open", "f.write", "os.path.join", "open", "f.write"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.convert_stockholm_to_a3m", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.convert_stockholm_to_a3m", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.hhblits.HHBlits.query", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.hhblits.HHBlits.query", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.hhblits.HHBlits.query", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.hhblits.HHBlits.query", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.hhblits.HHBlits.query"], ["", "", "def", "run", "(", "\n", "self", ",", "\n", "fasta_path", ":", "str", ",", "\n", "output_dir", ":", "str", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Runs alignment tools on a sequence\"\"\"", "\n", "if", "(", "self", ".", "jackhmmer_uniref90_runner", "is", "not", "None", ")", ":", "\n", "            ", "jackhmmer_uniref90_result", "=", "self", ".", "jackhmmer_uniref90_runner", ".", "query", "(", "\n", "fasta_path", "\n", ")", "[", "0", "]", "\n", "uniref90_msa_as_a3m", "=", "parsers", ".", "convert_stockholm_to_a3m", "(", "\n", "jackhmmer_uniref90_result", "[", "\"sto\"", "]", ",", "\n", "max_sequences", "=", "self", ".", "uniref_max_hits", "\n", ")", "\n", "uniref90_out_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"uniref90_hits.a3m\"", ")", "\n", "with", "open", "(", "uniref90_out_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "uniref90_msa_as_a3m", ")", "\n", "\n", "", "if", "(", "self", ".", "hhsearch_pdb70_runner", "is", "not", "None", ")", ":", "\n", "                ", "hhsearch_result", "=", "self", ".", "hhsearch_pdb70_runner", ".", "query", "(", "\n", "uniref90_msa_as_a3m", "\n", ")", "\n", "pdb70_out_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"pdb70_hits.hhr\"", ")", "\n", "with", "open", "(", "pdb70_out_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "hhsearch_result", ")", "\n", "\n", "", "", "", "if", "(", "self", ".", "jackhmmer_mgnify_runner", "is", "not", "None", ")", ":", "\n", "            ", "jackhmmer_mgnify_result", "=", "self", ".", "jackhmmer_mgnify_runner", ".", "query", "(", "\n", "fasta_path", "\n", ")", "[", "0", "]", "\n", "mgnify_msa_as_a3m", "=", "parsers", ".", "convert_stockholm_to_a3m", "(", "\n", "jackhmmer_mgnify_result", "[", "\"sto\"", "]", ",", "\n", "max_sequences", "=", "self", ".", "mgnify_max_hits", "\n", ")", "\n", "mgnify_out_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"mgnify_hits.a3m\"", ")", "\n", "with", "open", "(", "mgnify_out_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "mgnify_msa_as_a3m", ")", "\n", "\n", "", "", "if", "(", "self", ".", "use_small_bfd", "and", "self", ".", "jackhmmer_small_bfd_runner", "is", "not", "None", ")", ":", "\n", "            ", "jackhmmer_small_bfd_result", "=", "self", ".", "jackhmmer_small_bfd_runner", ".", "query", "(", "\n", "fasta_path", "\n", ")", "[", "0", "]", "\n", "bfd_out_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"small_bfd_hits.sto\"", ")", "\n", "with", "open", "(", "bfd_out_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "jackhmmer_small_bfd_result", "[", "\"sto\"", "]", ")", "\n", "", "", "elif", "(", "self", ".", "hhblits_bfd_uniclust_runner", "is", "not", "None", ")", ":", "\n", "            ", "hhblits_bfd_uniclust_result", "=", "(", "\n", "self", ".", "hhblits_bfd_uniclust_runner", ".", "query", "(", "fasta_path", ")", "\n", ")", "\n", "if", "output_dir", "is", "not", "None", ":", "\n", "                ", "bfd_out_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"bfd_uniclust_hits.a3m\"", ")", "\n", "with", "open", "(", "bfd_out_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                    ", "f", ".", "write", "(", "hhblits_bfd_uniclust_result", "[", "\"a3m\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline.__init__": [[416, 421], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "template_featurizer", ":", "Optional", "[", "templates", ".", "TemplateHitFeaturizer", "]", ",", "\n", ")", ":", "\n", "        ", "self", ".", "template_featurizer", "=", "template_featurizer", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline._parse_msa_data": [[422, 477], ["open", "open.close", "os.listdir", "os.path.join", "open.seek", "open.read().decode", "os.path.join", "os.path.splitext", "fastfold.data.parsers.parse_a3m", "os.path.splitext", "open.read", "data_pipeline.DataPipeline._parse_msa_data.read_msa"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.parse_a3m"], ["", "def", "_parse_msa_data", "(", "\n", "self", ",", "\n", "alignment_dir", ":", "str", ",", "\n", "_alignment_index", ":", "Optional", "[", "Any", "]", "=", "None", ",", "\n", ")", "->", "Mapping", "[", "str", ",", "Any", "]", ":", "\n", "        ", "msa_data", "=", "{", "}", "\n", "\n", "if", "(", "_alignment_index", "is", "not", "None", ")", ":", "\n", "            ", "fp", "=", "open", "(", "os", ".", "path", ".", "join", "(", "alignment_dir", ",", "_alignment_index", "[", "\"db\"", "]", ")", ",", "\"rb\"", ")", "\n", "\n", "def", "read_msa", "(", "start", ",", "size", ")", ":", "\n", "                ", "fp", ".", "seek", "(", "start", ")", "\n", "msa", "=", "fp", ".", "read", "(", "size", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "return", "msa", "\n", "\n", "", "for", "(", "name", ",", "start", ",", "size", ")", "in", "_alignment_index", "[", "\"files\"", "]", ":", "\n", "                ", "ext", "=", "os", ".", "path", ".", "splitext", "(", "name", ")", "[", "-", "1", "]", "\n", "\n", "if", "(", "ext", "==", "\".a3m\"", ")", ":", "\n", "                    ", "msa", ",", "deletion_matrix", "=", "parsers", ".", "parse_a3m", "(", "\n", "read_msa", "(", "start", ",", "size", ")", "\n", ")", "\n", "data", "=", "{", "\"msa\"", ":", "msa", ",", "\"deletion_matrix\"", ":", "deletion_matrix", "}", "\n", "", "elif", "(", "ext", "==", "\".sto\"", ")", ":", "\n", "                    ", "msa", ",", "deletion_matrix", ",", "_", "=", "parsers", ".", "parse_stockholm", "(", "\n", "read_msa", "(", "start", ",", "size", ")", "\n", ")", "\n", "data", "=", "{", "\"msa\"", ":", "msa", ",", "\"deletion_matrix\"", ":", "deletion_matrix", "}", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "\n", "", "msa_data", "[", "name", "]", "=", "data", "\n", "\n", "", "fp", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "for", "f", "in", "os", ".", "listdir", "(", "alignment_dir", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "alignment_dir", ",", "f", ")", "\n", "ext", "=", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "-", "1", "]", "\n", "\n", "if", "(", "ext", "==", "\".a3m\"", ")", ":", "\n", "                    ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "fp", ":", "\n", "                        ", "msa", ",", "deletion_matrix", "=", "parsers", ".", "parse_a3m", "(", "fp", ".", "read", "(", ")", ")", "\n", "", "data", "=", "{", "\"msa\"", ":", "msa", ",", "\"deletion_matrix\"", ":", "deletion_matrix", "}", "\n", "", "elif", "(", "ext", "==", "\".sto\"", ")", ":", "\n", "                    ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "fp", ":", "\n", "                        ", "msa", ",", "deletion_matrix", ",", "_", "=", "parsers", ".", "parse_stockholm", "(", "\n", "fp", ".", "read", "(", ")", "\n", ")", "\n", "", "data", "=", "{", "\"msa\"", ":", "msa", ",", "\"deletion_matrix\"", ":", "deletion_matrix", "}", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "\n", "", "msa_data", "[", "f", "]", "=", "data", "\n", "\n", "", "", "return", "msa_data", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline._parse_template_hits": [[478, 510], ["open", "open.close", "os.listdir", "os.path.join", "open.seek", "open.read().decode", "os.path.join", "os.path.splitext", "fastfold.data.parsers.parse_hhr", "os.path.splitext", "open.read", "data_pipeline.DataPipeline._parse_template_hits.read_template"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.parse_hhr"], ["", "def", "_parse_template_hits", "(", "\n", "self", ",", "\n", "alignment_dir", ":", "str", ",", "\n", "_alignment_index", ":", "Optional", "[", "Any", "]", "=", "None", "\n", ")", "->", "Mapping", "[", "str", ",", "Any", "]", ":", "\n", "        ", "all_hits", "=", "{", "}", "\n", "if", "(", "_alignment_index", "is", "not", "None", ")", ":", "\n", "            ", "fp", "=", "open", "(", "os", ".", "path", ".", "join", "(", "alignment_dir", ",", "_alignment_index", "[", "\"db\"", "]", ")", ",", "'rb'", ")", "\n", "\n", "def", "read_template", "(", "start", ",", "size", ")", ":", "\n", "                ", "fp", ".", "seek", "(", "start", ")", "\n", "return", "fp", ".", "read", "(", "size", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "\n", "", "for", "(", "name", ",", "start", ",", "size", ")", "in", "_alignment_index", "[", "\"files\"", "]", ":", "\n", "                ", "ext", "=", "os", ".", "path", ".", "splitext", "(", "name", ")", "[", "-", "1", "]", "\n", "\n", "if", "(", "ext", "==", "\".hhr\"", ")", ":", "\n", "                    ", "hits", "=", "parsers", ".", "parse_hhr", "(", "read_template", "(", "start", ",", "size", ")", ")", "\n", "all_hits", "[", "name", "]", "=", "hits", "\n", "\n", "", "", "fp", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "for", "f", "in", "os", ".", "listdir", "(", "alignment_dir", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "alignment_dir", ",", "f", ")", "\n", "ext", "=", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "-", "1", "]", "\n", "\n", "if", "(", "ext", "==", "\".hhr\"", ")", ":", "\n", "                    ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "fp", ":", "\n", "                        ", "hits", "=", "parsers", ".", "parse_hhr", "(", "fp", ".", "read", "(", ")", ")", "\n", "", "all_hits", "[", "f", "]", "=", "hits", "\n", "\n", "", "", "", "return", "all_hits", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline._process_msa_feats": [[511, 542], ["data_pipeline.DataPipeline._parse_msa_data", "zip", "data_pipeline.make_msa_features", "len", "ValueError", "data_pipeline.DataPipeline.values"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline._parse_msa_data", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_msa_features"], ["", "def", "_process_msa_feats", "(", "\n", "self", ",", "\n", "alignment_dir", ":", "str", ",", "\n", "input_sequence", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "_alignment_index", ":", "Optional", "[", "str", "]", "=", "None", "\n", ")", "->", "Mapping", "[", "str", ",", "Any", "]", ":", "\n", "        ", "msa_data", "=", "self", ".", "_parse_msa_data", "(", "alignment_dir", ",", "_alignment_index", ")", "\n", "\n", "if", "(", "len", "(", "msa_data", ")", "==", "0", ")", ":", "\n", "            ", "if", "(", "input_sequence", "is", "None", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"\"\"\n                    If the alignment dir contains no MSAs, an input sequence \n                    must be provided.\n                    \"\"\"", "\n", ")", "\n", "", "msa_data", "[", "\"dummy\"", "]", "=", "{", "\n", "\"msa\"", ":", "[", "input_sequence", "]", ",", "\n", "\"deletion_matrix\"", ":", "[", "[", "0", "for", "_", "in", "input_sequence", "]", "]", ",", "\n", "}", "\n", "\n", "", "msas", ",", "deletion_matrices", "=", "zip", "(", "*", "[", "\n", "(", "v", "[", "\"msa\"", "]", ",", "v", "[", "\"deletion_matrix\"", "]", ")", "for", "v", "in", "msa_data", ".", "values", "(", ")", "\n", "]", ")", "\n", "\n", "msa_features", "=", "make_msa_features", "(", "\n", "msas", "=", "msas", ",", "\n", "deletion_matrices", "=", "deletion_matrices", ",", "\n", ")", "\n", "\n", "return", "msa_features", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline.process_fasta": [[543, 580], ["fastfold.data.parsers.parse_fasta", "len", "data_pipeline.DataPipeline._parse_template_hits", "data_pipeline.make_template_features", "data_pipeline.make_sequence_features", "data_pipeline.DataPipeline._process_msa_feats", "open", "f.read", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.parse_fasta", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline._parse_template_hits", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_template_features", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_sequence_features", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline._process_msa_feats"], ["", "def", "process_fasta", "(", "\n", "self", ",", "\n", "fasta_path", ":", "str", ",", "\n", "alignment_dir", ":", "str", ",", "\n", "_alignment_index", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "FeatureDict", ":", "\n", "        ", "\"\"\"Assembles features for a single sequence in a FASTA file\"\"\"", "\n", "with", "open", "(", "fasta_path", ")", "as", "f", ":", "\n", "            ", "fasta_str", "=", "f", ".", "read", "(", ")", "\n", "", "input_seqs", ",", "input_descs", "=", "parsers", ".", "parse_fasta", "(", "fasta_str", ")", "\n", "if", "len", "(", "input_seqs", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"More than one input sequence found in {fasta_path}.\"", "\n", ")", "\n", "", "input_sequence", "=", "input_seqs", "[", "0", "]", "\n", "input_description", "=", "input_descs", "[", "0", "]", "\n", "num_res", "=", "len", "(", "input_sequence", ")", "\n", "\n", "hits", "=", "self", ".", "_parse_template_hits", "(", "alignment_dir", ",", "_alignment_index", ")", "\n", "template_features", "=", "make_template_features", "(", "\n", "input_sequence", ",", "\n", "hits", ",", "\n", "self", ".", "template_featurizer", ",", "\n", ")", "\n", "\n", "sequence_features", "=", "make_sequence_features", "(", "\n", "sequence", "=", "input_sequence", ",", "\n", "description", "=", "input_description", ",", "\n", "num_res", "=", "num_res", ",", "\n", ")", "\n", "\n", "msa_features", "=", "self", ".", "_process_msa_feats", "(", "alignment_dir", ",", "input_sequence", ",", "_alignment_index", ")", "\n", "\n", "return", "{", "\n", "**", "sequence_features", ",", "\n", "**", "msa_features", ",", "\n", "**", "template_features", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline.process_mmcif": [[582, 616], ["data_pipeline.make_mmcif_features", "data_pipeline.DataPipeline._parse_template_hits", "data_pipeline.make_template_features", "data_pipeline.DataPipeline._process_msa_feats", "mmcif.structure.get_chains", "next", "ValueError", "fastfold.data.tools.utils.to_date"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_mmcif_features", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline._parse_template_hits", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_template_features", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline._process_msa_feats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.to_date"], ["", "def", "process_mmcif", "(", "\n", "self", ",", "\n", "mmcif", ":", "mmcif_parsing", ".", "MmcifObject", ",", "# parsing is expensive, so no path", "\n", "alignment_dir", ":", "str", ",", "\n", "chain_id", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "_alignment_index", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "FeatureDict", ":", "\n", "        ", "\"\"\"\n            Assembles features for a specific chain in an mmCIF object.\n\n            If chain_id is None, it is assumed that there is only one chain\n            in the object. Otherwise, a ValueError is thrown.\n        \"\"\"", "\n", "if", "chain_id", "is", "None", ":", "\n", "            ", "chains", "=", "mmcif", ".", "structure", ".", "get_chains", "(", ")", "\n", "chain", "=", "next", "(", "chains", ",", "None", ")", "\n", "if", "chain", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"No chains in mmCIF file\"", ")", "\n", "", "chain_id", "=", "chain", ".", "id", "\n", "\n", "", "mmcif_feats", "=", "make_mmcif_features", "(", "mmcif", ",", "chain_id", ")", "\n", "\n", "input_sequence", "=", "mmcif", ".", "chain_to_seqres", "[", "chain_id", "]", "\n", "hits", "=", "self", ".", "_parse_template_hits", "(", "alignment_dir", ",", "_alignment_index", ")", "\n", "template_features", "=", "make_template_features", "(", "\n", "input_sequence", ",", "\n", "hits", ",", "\n", "self", ".", "template_featurizer", ",", "\n", "query_release_date", "=", "to_date", "(", "mmcif", ".", "header", "[", "\"release_date\"", "]", ")", "\n", ")", "\n", "\n", "msa_features", "=", "self", ".", "_process_msa_feats", "(", "alignment_dir", ",", "input_sequence", ",", "_alignment_index", ")", "\n", "\n", "return", "{", "**", "mmcif_feats", ",", "**", "template_features", ",", "**", "msa_features", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline.process_pdb": [[617, 650], ["fastfold.common.protein.from_pdb_string", "data_pipeline._aatype_to_str_sequence", "[].upper", "data_pipeline.make_pdb_features", "data_pipeline.DataPipeline._parse_template_hits", "data_pipeline.make_template_features", "data_pipeline.DataPipeline._process_msa_feats", "open", "f.read", "os.path.splitext", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.from_pdb_string", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline._aatype_to_str_sequence", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_pdb_features", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline._parse_template_hits", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_template_features", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline._process_msa_feats"], ["", "def", "process_pdb", "(", "\n", "self", ",", "\n", "pdb_path", ":", "str", ",", "\n", "alignment_dir", ":", "str", ",", "\n", "is_distillation", ":", "bool", "=", "True", ",", "\n", "chain_id", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "_alignment_index", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "FeatureDict", ":", "\n", "        ", "\"\"\"\n            Assembles features for a protein in a PDB file.\n        \"\"\"", "\n", "with", "open", "(", "pdb_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "pdb_str", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "protein_object", "=", "protein", ".", "from_pdb_string", "(", "pdb_str", ",", "chain_id", ")", "\n", "input_sequence", "=", "_aatype_to_str_sequence", "(", "protein_object", ".", "aatype", ")", "\n", "description", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "pdb_path", ")", ")", "[", "0", "]", ".", "upper", "(", ")", "\n", "pdb_feats", "=", "make_pdb_features", "(", "\n", "protein_object", ",", "\n", "description", ",", "\n", "is_distillation", "\n", ")", "\n", "\n", "hits", "=", "self", ".", "_parse_template_hits", "(", "alignment_dir", ",", "_alignment_index", ")", "\n", "template_features", "=", "make_template_features", "(", "\n", "input_sequence", ",", "\n", "hits", ",", "\n", "self", ".", "template_featurizer", ",", "\n", ")", "\n", "\n", "msa_features", "=", "self", ".", "_process_msa_feats", "(", "alignment_dir", ",", "input_sequence", ",", "_alignment_index", ")", "\n", "\n", "return", "{", "**", "pdb_feats", ",", "**", "template_features", ",", "**", "msa_features", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline.process_core": [[651, 678], ["fastfold.common.protein.from_proteinnet_string", "data_pipeline._aatype_to_str_sequence", "[].upper", "data_pipeline.make_protein_features", "data_pipeline.DataPipeline._parse_template_hits", "data_pipeline.make_template_features", "data_pipeline.DataPipeline._process_msa_feats", "open", "f.read", "os.path.splitext", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.from_proteinnet_string", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline._aatype_to_str_sequence", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_protein_features", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline._parse_template_hits", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_template_features", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.DataPipeline._process_msa_feats"], ["", "def", "process_core", "(", "\n", "self", ",", "\n", "core_path", ":", "str", ",", "\n", "alignment_dir", ":", "str", ",", "\n", "_alignment_index", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "FeatureDict", ":", "\n", "        ", "\"\"\"\n            Assembles features for a protein in a ProteinNet .core file.\n        \"\"\"", "\n", "with", "open", "(", "core_path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "core_str", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "protein_object", "=", "protein", ".", "from_proteinnet_string", "(", "core_str", ")", "\n", "input_sequence", "=", "_aatype_to_str_sequence", "(", "protein_object", ".", "aatype", ")", "\n", "description", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "core_path", ")", ")", "[", "0", "]", ".", "upper", "(", ")", "\n", "core_feats", "=", "make_protein_features", "(", "protein_object", ",", "description", ")", "\n", "\n", "hits", "=", "self", ".", "_parse_template_hits", "(", "alignment_dir", ",", "_alignment_index", ")", "\n", "template_features", "=", "make_template_features", "(", "\n", "input_sequence", ",", "\n", "hits", ",", "\n", "self", ".", "template_featurizer", ",", "\n", ")", "\n", "\n", "msa_features", "=", "self", ".", "_process_msa_feats", "(", "alignment_dir", ",", "input_sequence", ")", "\n", "\n", "return", "{", "**", "core_feats", ",", "**", "template_features", ",", "**", "msa_features", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.empty_template_feats": [[31, 38], ["numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros().astype", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["def", "empty_template_feats", "(", "n_res", ")", "->", "FeatureDict", ":", "\n", "    ", "return", "{", "\n", "\"template_aatype\"", ":", "np", ".", "zeros", "(", "(", "0", ",", "n_res", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ",", "\n", "\"template_all_atom_positions\"", ":", "\n", "np", ".", "zeros", "(", "(", "0", ",", "n_res", ",", "37", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "\"template_sum_probs\"", ":", "np", ".", "zeros", "(", "(", "0", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "\"template_all_atom_mask\"", ":", "np", ".", "zeros", "(", "(", "0", ",", "n_res", ",", "37", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_template_features": [[41, 66], ["sum", "hits.values", "data_pipeline.empty_template_feats", "template_featurizer.get_templates", "len", "len", "data_pipeline.empty_template_feats", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.empty_template_feats", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates.TemplateHitFeaturizer.get_templates", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.empty_template_feats"], ["", "def", "make_template_features", "(", "\n", "input_sequence", ":", "str", ",", "\n", "hits", ":", "Sequence", "[", "Any", "]", ",", "\n", "template_featurizer", ":", "Any", ",", "\n", "query_pdb_code", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "query_release_date", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", "->", "FeatureDict", ":", "\n", "    ", "hits_cat", "=", "sum", "(", "hits", ".", "values", "(", ")", ",", "[", "]", ")", "\n", "if", "(", "len", "(", "hits_cat", ")", "==", "0", "or", "template_featurizer", "is", "None", ")", ":", "\n", "        ", "template_features", "=", "empty_template_feats", "(", "len", "(", "input_sequence", ")", ")", "\n", "", "else", ":", "\n", "        ", "templates_result", "=", "template_featurizer", ".", "get_templates", "(", "\n", "query_sequence", "=", "input_sequence", ",", "\n", "query_pdb_code", "=", "query_pdb_code", ",", "\n", "query_release_date", "=", "query_release_date", ",", "\n", "hits", "=", "hits_cat", ",", "\n", ")", "\n", "template_features", "=", "templates_result", ".", "features", "\n", "\n", "# The template featurizer doesn't format empty template features", "\n", "# properly. This is a quick fix.", "\n", "if", "(", "template_features", "[", "\"template_aatype\"", "]", ".", "shape", "[", "0", "]", "==", "0", ")", ":", "\n", "            ", "template_features", "=", "empty_template_feats", "(", "len", "(", "input_sequence", ")", ")", "\n", "\n", "", "", "return", "template_features", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_sequence_features": [[68, 88], ["fastfold.common.residue_constants.sequence_to_onehot", "numpy.zeros", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "description.encode", "sequence.encode"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants.sequence_to_onehot"], ["", "def", "make_sequence_features", "(", "\n", "sequence", ":", "str", ",", "description", ":", "str", ",", "num_res", ":", "int", "\n", ")", "->", "FeatureDict", ":", "\n", "    ", "\"\"\"Construct a feature dict of sequence features.\"\"\"", "\n", "features", "=", "{", "}", "\n", "features", "[", "\"aatype\"", "]", "=", "residue_constants", ".", "sequence_to_onehot", "(", "\n", "sequence", "=", "sequence", ",", "\n", "mapping", "=", "residue_constants", ".", "restype_order_with_x", ",", "\n", "map_unknown_to_x", "=", "True", ",", "\n", ")", "\n", "features", "[", "\"between_segment_residues\"", "]", "=", "np", ".", "zeros", "(", "(", "num_res", ",", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "features", "[", "\"domain_name\"", "]", "=", "np", ".", "array", "(", "\n", "[", "description", ".", "encode", "(", "\"utf-8\"", ")", "]", ",", "dtype", "=", "np", ".", "object_", "\n", ")", "\n", "features", "[", "\"residue_index\"", "]", "=", "np", ".", "array", "(", "range", "(", "num_res", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "features", "[", "\"seq_length\"", "]", "=", "np", ".", "array", "(", "[", "num_res", "]", "*", "num_res", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "features", "[", "\"sequence\"", "]", "=", "np", ".", "array", "(", "\n", "[", "sequence", ".", "encode", "(", "\"utf-8\"", ")", "]", ",", "dtype", "=", "np", ".", "object_", "\n", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_mmcif_features": [[90, 124], ["len", "mmcif_feats.update", "fastfold.data.mmcif_parsing.get_atom_coords", "numpy.array", "numpy.array", "numpy.array", "data_pipeline.make_sequence_features", "mmcif_object.header[].encode"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.get_atom_coords", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_sequence_features"], ["", "def", "make_mmcif_features", "(", "\n", "mmcif_object", ":", "mmcif_parsing", ".", "MmcifObject", ",", "chain_id", ":", "str", "\n", ")", "->", "FeatureDict", ":", "\n", "    ", "input_sequence", "=", "mmcif_object", ".", "chain_to_seqres", "[", "chain_id", "]", "\n", "description", "=", "\"_\"", ".", "join", "(", "[", "mmcif_object", ".", "file_id", ",", "chain_id", "]", ")", "\n", "num_res", "=", "len", "(", "input_sequence", ")", "\n", "\n", "mmcif_feats", "=", "{", "}", "\n", "\n", "mmcif_feats", ".", "update", "(", "\n", "make_sequence_features", "(", "\n", "sequence", "=", "input_sequence", ",", "\n", "description", "=", "description", ",", "\n", "num_res", "=", "num_res", ",", "\n", ")", "\n", ")", "\n", "\n", "all_atom_positions", ",", "all_atom_mask", "=", "mmcif_parsing", ".", "get_atom_coords", "(", "\n", "mmcif_object", "=", "mmcif_object", ",", "chain_id", "=", "chain_id", "\n", ")", "\n", "mmcif_feats", "[", "\"all_atom_positions\"", "]", "=", "all_atom_positions", "\n", "mmcif_feats", "[", "\"all_atom_mask\"", "]", "=", "all_atom_mask", "\n", "\n", "mmcif_feats", "[", "\"resolution\"", "]", "=", "np", ".", "array", "(", "\n", "[", "mmcif_object", ".", "header", "[", "\"resolution\"", "]", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "\n", "mmcif_feats", "[", "\"release_date\"", "]", "=", "np", ".", "array", "(", "\n", "[", "mmcif_object", ".", "header", "[", "\"release_date\"", "]", ".", "encode", "(", "\"utf-8\"", ")", "]", ",", "dtype", "=", "np", ".", "object_", "\n", ")", "\n", "\n", "mmcif_feats", "[", "\"is_distillation\"", "]", "=", "np", ".", "array", "(", "0.", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "return", "mmcif_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline._aatype_to_str_sequence": [[126, 130], ["range", "len"], "function", ["None"], ["", "def", "_aatype_to_str_sequence", "(", "aatype", ")", ":", "\n", "    ", "return", "''", ".", "join", "(", "[", "\n", "residue_constants", ".", "restypes_with_x", "[", "aatype", "[", "i", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aatype", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_protein_features": [[133, 161], ["data_pipeline._aatype_to_str_sequence", "pdb_feats.update", "all_atom_positions.astype", "all_atom_mask.astype", "numpy.array().astype", "numpy.array().astype", "data_pipeline.make_sequence_features", "numpy.array", "numpy.array", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline._aatype_to_str_sequence", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_sequence_features"], ["", "def", "make_protein_features", "(", "\n", "protein_object", ":", "protein", ".", "Protein", ",", "\n", "description", ":", "str", ",", "\n", "_is_distillation", ":", "bool", "=", "False", ",", "\n", ")", "->", "FeatureDict", ":", "\n", "    ", "pdb_feats", "=", "{", "}", "\n", "aatype", "=", "protein_object", ".", "aatype", "\n", "sequence", "=", "_aatype_to_str_sequence", "(", "aatype", ")", "\n", "pdb_feats", ".", "update", "(", "\n", "make_sequence_features", "(", "\n", "sequence", "=", "sequence", ",", "\n", "description", "=", "description", ",", "\n", "num_res", "=", "len", "(", "protein_object", ".", "aatype", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "all_atom_positions", "=", "protein_object", ".", "atom_positions", "\n", "all_atom_mask", "=", "protein_object", ".", "atom_mask", "\n", "\n", "pdb_feats", "[", "\"all_atom_positions\"", "]", "=", "all_atom_positions", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pdb_feats", "[", "\"all_atom_mask\"", "]", "=", "all_atom_mask", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "pdb_feats", "[", "\"resolution\"", "]", "=", "np", ".", "array", "(", "[", "0.", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pdb_feats", "[", "\"is_distillation\"", "]", "=", "np", ".", "array", "(", "\n", "1.", "if", "_is_distillation", "else", "0.", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "pdb_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_pdb_features": [[163, 181], ["data_pipeline.make_protein_features", "numpy.any", "enumerate"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_protein_features"], ["", "def", "make_pdb_features", "(", "\n", "protein_object", ":", "protein", ".", "Protein", ",", "\n", "description", ":", "str", ",", "\n", "confidence_threshold", ":", "float", "=", "0.5", ",", "\n", "is_distillation", ":", "bool", "=", "True", ",", "\n", ")", "->", "FeatureDict", ":", "\n", "    ", "pdb_feats", "=", "make_protein_features", "(", "\n", "protein_object", ",", "description", ",", "_is_distillation", "=", "True", "\n", ")", "\n", "\n", "if", "(", "is_distillation", ")", ":", "\n", "        ", "high_confidence", "=", "protein_object", ".", "b_factors", ">", "confidence_threshold", "\n", "high_confidence", "=", "np", ".", "any", "(", "high_confidence", ",", "axis", "=", "-", "1", ")", "\n", "for", "i", ",", "confident", "in", "enumerate", "(", "high_confidence", ")", ":", "\n", "            ", "if", "(", "not", "confident", ")", ":", "\n", "                ", "pdb_feats", "[", "\"all_atom_mask\"", "]", "[", "i", "]", "=", "0", "\n", "\n", "", "", "", "return", "pdb_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_pipeline.make_msa_features": [[183, 217], ["set", "enumerate", "len", "len", "numpy.array", "numpy.array", "numpy.array", "ValueError", "enumerate", "ValueError", "set.add", "int_msa.append", "deletion_matrix.append"], "function", ["None"], ["", "def", "make_msa_features", "(", "\n", "msas", ":", "Sequence", "[", "Sequence", "[", "str", "]", "]", ",", "\n", "deletion_matrices", ":", "Sequence", "[", "parsers", ".", "DeletionMatrix", "]", ",", "\n", ")", "->", "FeatureDict", ":", "\n", "    ", "\"\"\"Constructs a feature dict of MSA features.\"\"\"", "\n", "if", "not", "msas", ":", "\n", "        ", "raise", "ValueError", "(", "\"At least one MSA must be provided.\"", ")", "\n", "\n", "", "int_msa", "=", "[", "]", "\n", "deletion_matrix", "=", "[", "]", "\n", "seen_sequences", "=", "set", "(", ")", "\n", "for", "msa_index", ",", "msa", "in", "enumerate", "(", "msas", ")", ":", "\n", "        ", "if", "not", "msa", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"MSA {msa_index} must contain at least one sequence.\"", "\n", ")", "\n", "", "for", "sequence_index", ",", "sequence", "in", "enumerate", "(", "msa", ")", ":", "\n", "            ", "if", "sequence", "in", "seen_sequences", ":", "\n", "                ", "continue", "\n", "", "seen_sequences", ".", "add", "(", "sequence", ")", "\n", "int_msa", ".", "append", "(", "\n", "[", "residue_constants", ".", "HHBLITS_AA_TO_ID", "[", "res", "]", "for", "res", "in", "sequence", "]", "\n", ")", "\n", "deletion_matrix", ".", "append", "(", "deletion_matrices", "[", "msa_index", "]", "[", "sequence_index", "]", ")", "\n", "\n", "", "", "num_res", "=", "len", "(", "msas", "[", "0", "]", "[", "0", "]", ")", "\n", "num_alignments", "=", "len", "(", "int_msa", ")", "\n", "features", "=", "{", "}", "\n", "features", "[", "\"deletion_matrix_int\"", "]", "=", "np", ".", "array", "(", "deletion_matrix", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "features", "[", "\"msa\"", "]", "=", "np", ".", "array", "(", "int_msa", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "features", "[", "\"num_alignments\"", "]", "=", "np", ".", "array", "(", "\n", "[", "num_alignments", "]", "*", "num_res", ",", "dtype", "=", "np", ".", "int32", "\n", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.nonensembled_transform_fns": [[23, 68], ["transforms.extend", "fastfold.data.data_transforms.randomly_replace_msa_with_unknown", "transforms.extend", "transforms.extend", "transforms.extend", "fastfold.data.data_transforms.make_pseudo_beta", "fastfold.data.data_transforms.atom37_to_torsion_angles", "fastfold.data.data_transforms.make_pseudo_beta", "fastfold.data.data_transforms.atom37_to_torsion_angles"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.randomly_replace_msa_with_unknown", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_pseudo_beta", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.atom37_to_torsion_angles", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_pseudo_beta", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.atom37_to_torsion_angles"], ["def", "nonensembled_transform_fns", "(", "common_cfg", ",", "mode_cfg", ")", ":", "\n", "    ", "\"\"\"Input pipeline data transformers that are not ensembled.\"\"\"", "\n", "transforms", "=", "[", "\n", "data_transforms", ".", "cast_to_64bit_ints", ",", "\n", "data_transforms", ".", "correct_msa_restypes", ",", "\n", "data_transforms", ".", "squeeze_features", ",", "\n", "data_transforms", ".", "randomly_replace_msa_with_unknown", "(", "0.0", ")", ",", "\n", "data_transforms", ".", "make_seq_mask", ",", "\n", "data_transforms", ".", "make_msa_mask", ",", "\n", "data_transforms", ".", "make_hhblits_profile", ",", "\n", "]", "\n", "if", "common_cfg", ".", "use_templates", ":", "\n", "        ", "transforms", ".", "extend", "(", "\n", "[", "\n", "data_transforms", ".", "fix_templates_aatype", ",", "\n", "data_transforms", ".", "make_template_mask", ",", "\n", "data_transforms", ".", "make_pseudo_beta", "(", "\"template_\"", ")", ",", "\n", "]", "\n", ")", "\n", "if", "common_cfg", ".", "use_template_torsion_angles", ":", "\n", "            ", "transforms", ".", "extend", "(", "\n", "[", "\n", "data_transforms", ".", "atom37_to_torsion_angles", "(", "\"template_\"", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "", "", "transforms", ".", "extend", "(", "\n", "[", "\n", "data_transforms", ".", "make_atom14_masks", ",", "\n", "]", "\n", ")", "\n", "\n", "if", "mode_cfg", ".", "supervised", ":", "\n", "        ", "transforms", ".", "extend", "(", "\n", "[", "\n", "data_transforms", ".", "make_atom14_positions", ",", "\n", "data_transforms", ".", "atom37_to_frames", ",", "\n", "data_transforms", ".", "atom37_to_torsion_angles", "(", "\"\"", ")", ",", "\n", "data_transforms", ".", "make_pseudo_beta", "(", "\"\"", ")", ",", "\n", "data_transforms", ".", "get_backbone_frames", ",", "\n", "data_transforms", ".", "get_chi_angles", ",", "\n", "]", "\n", ")", "\n", "\n", "", "return", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.ensembled_transform_fns": [[70, 151], ["transforms.append", "transforms.append", "dict", "transforms.append", "fastfold.data.data_transforms.sample_msa", "transforms.append", "transforms.append", "transforms.append", "transforms.append", "transforms.append", "fastfold.data.data_transforms.make_msa_feat", "transforms.append", "transforms.append", "transforms.append", "transforms.append", "fastfold.data.data_transforms.sample_msa_distillation", "fastfold.data.data_transforms.make_masked_msa", "fastfold.data.data_transforms.nearest_neighbor_clusters", "fastfold.data.data_transforms.summarize_clusters", "fastfold.data.data_transforms.crop_extra_msa", "fastfold.data.data_transforms.select_feat", "fastfold.data.data_transforms.random_crop_to_size", "fastfold.data.data_transforms.make_fixed_size", "fastfold.data.data_transforms.crop_templates", "list"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.sample_msa", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_msa_feat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.sample_msa_distillation", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_masked_msa", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.nearest_neighbor_clusters", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.summarize_clusters", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.crop_extra_msa", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.select_feat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.random_crop_to_size", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_fixed_size", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.crop_templates"], ["", "def", "ensembled_transform_fns", "(", "common_cfg", ",", "mode_cfg", ",", "ensemble_seed", ")", ":", "\n", "    ", "\"\"\"Input pipeline data transformers that can be ensembled and averaged.\"\"\"", "\n", "transforms", "=", "[", "]", "\n", "\n", "if", "\"max_distillation_msa_clusters\"", "in", "mode_cfg", ":", "\n", "        ", "transforms", ".", "append", "(", "\n", "data_transforms", ".", "sample_msa_distillation", "(", "\n", "mode_cfg", ".", "max_distillation_msa_clusters", "\n", ")", "\n", ")", "\n", "\n", "", "if", "common_cfg", ".", "reduce_msa_clusters_by_max_templates", ":", "\n", "        ", "pad_msa_clusters", "=", "mode_cfg", ".", "max_msa_clusters", "-", "mode_cfg", ".", "max_templates", "\n", "", "else", ":", "\n", "        ", "pad_msa_clusters", "=", "mode_cfg", ".", "max_msa_clusters", "\n", "\n", "", "max_msa_clusters", "=", "pad_msa_clusters", "\n", "max_extra_msa", "=", "common_cfg", ".", "max_extra_msa", "\n", "\n", "msa_seed", "=", "None", "\n", "if", "(", "not", "common_cfg", ".", "resample_msa_in_recycling", ")", ":", "\n", "        ", "msa_seed", "=", "ensemble_seed", "\n", "\n", "", "transforms", ".", "append", "(", "\n", "data_transforms", ".", "sample_msa", "(", "\n", "max_msa_clusters", ",", "\n", "keep_extra", "=", "True", ",", "\n", "seed", "=", "msa_seed", ",", "\n", ")", "\n", ")", "\n", "\n", "if", "\"masked_msa\"", "in", "common_cfg", ":", "\n", "# Masked MSA should come *before* MSA clustering so that", "\n", "# the clustering and full MSA profile do not leak information about", "\n", "# the masked locations and secret corrupted locations.", "\n", "        ", "transforms", ".", "append", "(", "\n", "data_transforms", ".", "make_masked_msa", "(", "\n", "common_cfg", ".", "masked_msa", ",", "mode_cfg", ".", "masked_msa_replace_fraction", "\n", ")", "\n", ")", "\n", "\n", "", "if", "common_cfg", ".", "msa_cluster_features", ":", "\n", "        ", "transforms", ".", "append", "(", "data_transforms", ".", "nearest_neighbor_clusters", "(", ")", ")", "\n", "transforms", ".", "append", "(", "data_transforms", ".", "summarize_clusters", "(", ")", ")", "\n", "\n", "# Crop after creating the cluster profiles.", "\n", "", "if", "max_extra_msa", ":", "\n", "        ", "transforms", ".", "append", "(", "data_transforms", ".", "crop_extra_msa", "(", "max_extra_msa", ")", ")", "\n", "", "else", ":", "\n", "        ", "transforms", ".", "append", "(", "data_transforms", ".", "delete_extra_msa", ")", "\n", "\n", "", "transforms", ".", "append", "(", "data_transforms", ".", "make_msa_feat", "(", ")", ")", "\n", "\n", "crop_feats", "=", "dict", "(", "common_cfg", ".", "feat", ")", "\n", "\n", "if", "mode_cfg", ".", "fixed_size", ":", "\n", "        ", "transforms", ".", "append", "(", "data_transforms", ".", "select_feat", "(", "list", "(", "crop_feats", ")", ")", ")", "\n", "transforms", ".", "append", "(", "\n", "data_transforms", ".", "random_crop_to_size", "(", "\n", "mode_cfg", ".", "crop_size", ",", "\n", "mode_cfg", ".", "max_templates", ",", "\n", "crop_feats", ",", "\n", "mode_cfg", ".", "subsample_templates", ",", "\n", "seed", "=", "ensemble_seed", "+", "1", ",", "\n", ")", "\n", ")", "\n", "transforms", ".", "append", "(", "\n", "data_transforms", ".", "make_fixed_size", "(", "\n", "crop_feats", ",", "\n", "pad_msa_clusters", ",", "\n", "common_cfg", ".", "max_extra_msa", ",", "\n", "mode_cfg", ".", "crop_size", ",", "\n", "mode_cfg", ".", "max_templates", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "transforms", ".", "append", "(", "\n", "data_transforms", ".", "crop_templates", "(", "mode_cfg", ".", "max_templates", ")", "\n", ")", "\n", "\n", "", "return", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.process_tensors_from_config": [[153, 191], ["torch.Generator().seed", "input_pipeline.nonensembled_transform_fns", "input_pipeline.map_fn", "data.copy", "input_pipeline.ensembled_transform_fns", "input_pipeline.compose", "compose.", "input_pipeline.compose", "int", "torch.arange", "torch.Generator", "input_pipeline.process_tensors_from_config.wrap_ensemble_fn"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.nonensembled_transform_fns", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.map_fn", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.copy", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.ensembled_transform_fns", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.compose", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.compose"], ["", "def", "process_tensors_from_config", "(", "tensors", ",", "common_cfg", ",", "mode_cfg", ")", ":", "\n", "    ", "\"\"\"Based on the config, apply filters and transformations to the data.\"\"\"", "\n", "\n", "ensemble_seed", "=", "torch", ".", "Generator", "(", ")", ".", "seed", "(", ")", "\n", "\n", "def", "wrap_ensemble_fn", "(", "data", ",", "i", ")", ":", "\n", "        ", "\"\"\"Function to be mapped over the ensemble dimension.\"\"\"", "\n", "d", "=", "data", ".", "copy", "(", ")", "\n", "fns", "=", "ensembled_transform_fns", "(", "\n", "common_cfg", ",", "\n", "mode_cfg", ",", "\n", "ensemble_seed", ",", "\n", ")", "\n", "fn", "=", "compose", "(", "fns", ")", "\n", "d", "[", "\"ensemble_index\"", "]", "=", "i", "\n", "return", "fn", "(", "d", ")", "\n", "\n", "", "no_templates", "=", "True", "\n", "if", "(", "\"template_aatype\"", "in", "tensors", ")", ":", "\n", "        ", "no_templates", "=", "tensors", "[", "\"template_aatype\"", "]", ".", "shape", "[", "0", "]", "==", "0", "\n", "\n", "", "nonensembled", "=", "nonensembled_transform_fns", "(", "\n", "common_cfg", ",", "\n", "mode_cfg", ",", "\n", ")", "\n", "\n", "tensors", "=", "compose", "(", "nonensembled", ")", "(", "tensors", ")", "\n", "\n", "if", "(", "\"no_recycling_iters\"", "in", "tensors", ")", ":", "\n", "        ", "num_recycling", "=", "int", "(", "tensors", "[", "\"no_recycling_iters\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "num_recycling", "=", "common_cfg", ".", "max_recycling_iters", "\n", "\n", "", "tensors", "=", "map_fn", "(", "\n", "lambda", "x", ":", "wrap_ensemble_fn", "(", "tensors", ",", "x", ")", ",", "torch", ".", "arange", "(", "num_recycling", "+", "1", ")", "\n", ")", "\n", "\n", "return", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.compose": [[193, 198], ["f"], "function", ["None"], ["", "@", "data_transforms", ".", "curry1", "\n", "def", "compose", "(", "x", ",", "fs", ")", ":", "\n", "    ", "for", "f", "in", "fs", ":", "\n", "        ", "x", "=", "f", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.map_fn": [[200, 209], ["ensembles[].keys", "fun", "torch.stack"], "function", ["None"], ["", "def", "map_fn", "(", "fun", ",", "x", ")", ":", "\n", "    ", "ensembles", "=", "[", "fun", "(", "elem", ")", "for", "elem", "in", "x", "]", "\n", "features", "=", "ensembles", "[", "0", "]", ".", "keys", "(", ")", "\n", "ensembled_dict", "=", "{", "}", "\n", "for", "feat", "in", "features", ":", "\n", "        ", "ensembled_dict", "[", "feat", "]", "=", "torch", ".", "stack", "(", "\n", "[", "dict_i", "[", "feat", "]", "for", "dict_i", "in", "ensembles", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n", "", "return", "ensembled_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.cast_to_64bit_ints": [[43, 50], ["protein.items", "v.type"], "function", ["None"], ["def", "cast_to_64bit_ints", "(", "protein", ")", ":", "\n", "# We keep all ints as int64", "\n", "    ", "for", "k", ",", "v", "in", "protein", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", ".", "dtype", "==", "torch", ".", "int32", ":", "\n", "            ", "protein", "[", "k", "]", "=", "v", ".", "type", "(", "torch", ".", "int64", ")", "\n", "\n", "", "", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_one_hot": [[52, 56], ["torch.zeros", "torch.zeros.scatter_", "x.unsqueeze"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze"], ["", "def", "make_one_hot", "(", "x", ",", "num_classes", ")", ":", "\n", "    ", "x_one_hot", "=", "torch", ".", "zeros", "(", "*", "x", ".", "shape", ",", "num_classes", ",", "device", "=", "x", ".", "device", ")", "\n", "x_one_hot", ".", "scatter_", "(", "-", "1", ",", "x", ".", "unsqueeze", "(", "-", "1", ")", ",", "1", ")", "\n", "return", "x_one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_seq_mask": [[58, 63], ["torch.ones"], "function", ["None"], ["", "def", "make_seq_mask", "(", "protein", ")", ":", "\n", "    ", "protein", "[", "\"seq_mask\"", "]", "=", "torch", ".", "ones", "(", "\n", "protein", "[", "\"aatype\"", "]", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", "\n", ")", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_template_mask": [[65, 70], ["torch.ones"], "function", ["None"], ["", "def", "make_template_mask", "(", "protein", ")", ":", "\n", "    ", "protein", "[", "\"template_mask\"", "]", "=", "torch", ".", "ones", "(", "\n", "protein", "[", "\"template_aatype\"", "]", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float32", "\n", ")", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.curry1": [[72, 79], ["functools.wraps", "f"], "function", ["None"], ["", "def", "curry1", "(", "f", ")", ":", "\n", "    ", "\"\"\"Supply all arguments but the first.\"\"\"", "\n", "@", "wraps", "(", "f", ")", "\n", "def", "fc", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "lambda", "x", ":", "f", "(", "x", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_all_atom_aatype": [[81, 84], ["None"], "function", ["None"], ["", "def", "make_all_atom_aatype", "(", "protein", ")", ":", "\n", "    ", "protein", "[", "\"all_atom_aatype\"", "]", "=", "protein", "[", "\"aatype\"", "]", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.fix_templates_aatype": [[86, 103], ["torch.argmax", "torch.tensor().expand", "torch.gather", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.gather"], ["", "def", "fix_templates_aatype", "(", "protein", ")", ":", "\n", "# Map one-hot to indices", "\n", "    ", "num_templates", "=", "protein", "[", "\"template_aatype\"", "]", ".", "shape", "[", "0", "]", "\n", "if", "(", "num_templates", ">", "0", ")", ":", "\n", "        ", "protein", "[", "\"template_aatype\"", "]", "=", "torch", ".", "argmax", "(", "\n", "protein", "[", "\"template_aatype\"", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n", "# Map hhsearch-aatype to our aatype.", "\n", "new_order_list", "=", "rc", ".", "MAP_HHBLITS_AATYPE_TO_OUR_AATYPE", "\n", "new_order", "=", "torch", ".", "tensor", "(", "\n", "new_order_list", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "protein", "[", "\"aatype\"", "]", ".", "device", ",", "\n", ")", ".", "expand", "(", "num_templates", ",", "-", "1", ")", "\n", "protein", "[", "\"template_aatype\"", "]", "=", "torch", ".", "gather", "(", "\n", "new_order", ",", "1", ",", "index", "=", "protein", "[", "\"template_aatype\"", "]", "\n", ")", "\n", "\n", "", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.correct_msa_restypes": [[105, 128], ["torch.tensor().transpose", "torch.gather", "numpy.zeros", "torch.tensor", "torch.dot", "range", "protein[].shape.as_list", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.gather"], ["", "def", "correct_msa_restypes", "(", "protein", ")", ":", "\n", "    ", "\"\"\"Correct MSA restype to have the same order as rc.\"\"\"", "\n", "new_order_list", "=", "rc", ".", "MAP_HHBLITS_AATYPE_TO_OUR_AATYPE", "\n", "new_order", "=", "torch", ".", "tensor", "(", "\n", "[", "new_order_list", "]", "*", "protein", "[", "\"msa\"", "]", ".", "shape", "[", "1", "]", ",", "\n", "device", "=", "protein", "[", "\"msa\"", "]", ".", "device", ",", "\n", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "protein", "[", "\"msa\"", "]", "=", "torch", ".", "gather", "(", "new_order", ",", "0", ",", "protein", "[", "\"msa\"", "]", ")", "\n", "\n", "perm_matrix", "=", "np", ".", "zeros", "(", "(", "22", ",", "22", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "perm_matrix", "[", "range", "(", "len", "(", "new_order_list", ")", ")", ",", "new_order_list", "]", "=", "1.0", "\n", "\n", "for", "k", "in", "protein", ":", "\n", "        ", "if", "\"profile\"", "in", "k", ":", "\n", "            ", "num_dim", "=", "protein", "[", "k", "]", ".", "shape", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "assert", "num_dim", "in", "[", "\n", "20", ",", "\n", "21", ",", "\n", "22", ",", "\n", "]", ",", "\"num_dim for %s out of expected range: %s\"", "%", "(", "k", ",", "num_dim", ")", "\n", "protein", "[", "k", "]", "=", "torch", ".", "dot", "(", "protein", "[", "k", "]", ",", "perm_matrix", "[", ":", "num_dim", ",", ":", "num_dim", "]", ")", "\n", "\n", "", "", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.squeeze_features": [[130, 159], ["torch.argmax", "isinstance", "torch.is_tensor", "torch.squeeze", "numpy.squeeze"], "function", ["None"], ["", "def", "squeeze_features", "(", "protein", ")", ":", "\n", "    ", "\"\"\"Remove singleton and repeated dimensions in protein features.\"\"\"", "\n", "protein", "[", "\"aatype\"", "]", "=", "torch", ".", "argmax", "(", "protein", "[", "\"aatype\"", "]", ",", "dim", "=", "-", "1", ")", "\n", "for", "k", "in", "[", "\n", "\"domain_name\"", ",", "\n", "\"msa\"", ",", "\n", "\"num_alignments\"", ",", "\n", "\"seq_length\"", ",", "\n", "\"sequence\"", ",", "\n", "\"superfamily\"", ",", "\n", "\"deletion_matrix\"", ",", "\n", "\"resolution\"", ",", "\n", "\"between_segment_residues\"", ",", "\n", "\"residue_index\"", ",", "\n", "\"template_all_atom_mask\"", ",", "\n", "]", ":", "\n", "        ", "if", "k", "in", "protein", ":", "\n", "            ", "final_dim", "=", "protein", "[", "k", "]", ".", "shape", "[", "-", "1", "]", "\n", "if", "isinstance", "(", "final_dim", ",", "int", ")", "and", "final_dim", "==", "1", ":", "\n", "                ", "if", "torch", ".", "is_tensor", "(", "protein", "[", "k", "]", ")", ":", "\n", "                    ", "protein", "[", "k", "]", "=", "torch", ".", "squeeze", "(", "protein", "[", "k", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "protein", "[", "k", "]", "=", "np", ".", "squeeze", "(", "protein", "[", "k", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "", "", "", "for", "k", "in", "[", "\"seq_length\"", ",", "\"num_alignments\"", "]", ":", "\n", "        ", "if", "k", "in", "protein", ":", "\n", "            ", "protein", "[", "k", "]", "=", "protein", "[", "k", "]", "[", "0", "]", "\n", "\n", "", "", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.randomly_replace_msa_with_unknown": [[161, 181], ["torch.logical_and", "torch.where", "torch.where", "torch.rand", "torch.rand", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "@", "curry1", "\n", "def", "randomly_replace_msa_with_unknown", "(", "protein", ",", "replace_proportion", ")", ":", "\n", "    ", "\"\"\"Replace a portion of the MSA with 'X'.\"\"\"", "\n", "msa_mask", "=", "torch", ".", "rand", "(", "protein", "[", "\"msa\"", "]", ".", "shape", ")", "<", "replace_proportion", "\n", "x_idx", "=", "20", "\n", "gap_idx", "=", "21", "\n", "msa_mask", "=", "torch", ".", "logical_and", "(", "msa_mask", ",", "protein", "[", "\"msa\"", "]", "!=", "gap_idx", ")", "\n", "protein", "[", "\"msa\"", "]", "=", "torch", ".", "where", "(", "\n", "msa_mask", ",", "\n", "torch", ".", "ones_like", "(", "protein", "[", "\"msa\"", "]", ")", "*", "x_idx", ",", "\n", "protein", "[", "\"msa\"", "]", "\n", ")", "\n", "aatype_mask", "=", "torch", ".", "rand", "(", "protein", "[", "\"aatype\"", "]", ".", "shape", ")", "<", "replace_proportion", "\n", "\n", "protein", "[", "\"aatype\"", "]", "=", "torch", ".", "where", "(", "\n", "aatype_mask", ",", "\n", "torch", ".", "ones_like", "(", "protein", "[", "\"aatype\"", "]", ")", "*", "x_idx", ",", "\n", "protein", "[", "\"aatype\"", "]", ",", "\n", ")", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.sample_msa": [[183, 209], ["torch.Generator", "torch.cat", "min", "torch.split", "torch.Generator.manual_seed", "torch.randperm", "torch.tensor", "torch.index_select", "torch.index_select"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat"], ["", "@", "curry1", "\n", "def", "sample_msa", "(", "protein", ",", "max_seq", ",", "keep_extra", ",", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Sample MSA randomly, remaining sequences are stored are stored as `extra_*`.\"\"\"", "\n", "num_seq", "=", "protein", "[", "\"msa\"", "]", ".", "shape", "[", "0", "]", "\n", "g", "=", "torch", ".", "Generator", "(", "device", "=", "protein", "[", "\"msa\"", "]", ".", "device", ")", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "g", ".", "manual_seed", "(", "seed", ")", "\n", "", "shuffled", "=", "torch", ".", "randperm", "(", "num_seq", "-", "1", ",", "generator", "=", "g", ")", "+", "1", "\n", "index_order", "=", "torch", ".", "cat", "(", "\n", "(", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "shuffled", ".", "device", ")", ",", "shuffled", ")", ",", "\n", "dim", "=", "0", "\n", ")", "\n", "num_sel", "=", "min", "(", "max_seq", ",", "num_seq", ")", "\n", "sel_seq", ",", "not_sel_seq", "=", "torch", ".", "split", "(", "\n", "index_order", ",", "[", "num_sel", ",", "num_seq", "-", "num_sel", "]", "\n", ")", "\n", "\n", "for", "k", "in", "MSA_FEATURE_NAMES", ":", "\n", "        ", "if", "k", "in", "protein", ":", "\n", "            ", "if", "keep_extra", ":", "\n", "                ", "protein", "[", "\"extra_\"", "+", "k", "]", "=", "torch", ".", "index_select", "(", "\n", "protein", "[", "k", "]", ",", "0", ",", "not_sel_seq", "\n", ")", "\n", "", "protein", "[", "k", "]", "=", "torch", ".", "index_select", "(", "protein", "[", "k", "]", ",", "0", ",", "sel_seq", ")", "\n", "\n", "", "", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.add_distillation_flag": [[211, 215], ["None"], "function", ["None"], ["", "@", "curry1", "\n", "def", "add_distillation_flag", "(", "protein", ",", "distillation", ")", ":", "\n", "    ", "protein", "[", "'is_distillation'", "]", "=", "distillation", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.sample_msa_distillation": [[216, 221], ["data_transforms.sample_msa"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.sample_msa"], ["", "@", "curry1", "\n", "def", "sample_msa_distillation", "(", "protein", ",", "max_seq", ")", ":", "\n", "    ", "if", "(", "protein", "[", "\"is_distillation\"", "]", "==", "1", ")", ":", "\n", "        ", "protein", "=", "sample_msa", "(", "max_seq", ",", "keep_extra", "=", "False", ")", "(", "protein", ")", "\n", "", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.crop_extra_msa": [[223, 235], ["min", "torch.randperm", "torch.index_select"], "function", ["None"], ["", "@", "curry1", "\n", "def", "crop_extra_msa", "(", "protein", ",", "max_extra_msa", ")", ":", "\n", "    ", "num_seq", "=", "protein", "[", "\"extra_msa\"", "]", ".", "shape", "[", "0", "]", "\n", "num_sel", "=", "min", "(", "max_extra_msa", ",", "num_seq", ")", "\n", "select_indices", "=", "torch", ".", "randperm", "(", "num_seq", ")", "[", ":", "num_sel", "]", "\n", "for", "k", "in", "MSA_FEATURE_NAMES", ":", "\n", "        ", "if", "\"extra_\"", "+", "k", "in", "protein", ":", "\n", "            ", "protein", "[", "\"extra_\"", "+", "k", "]", "=", "torch", ".", "index_select", "(", "\n", "protein", "[", "\"extra_\"", "+", "k", "]", ",", "0", ",", "select_indices", "\n", ")", "\n", "\n", "", "", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.delete_extra_msa": [[237, 242], ["None"], "function", ["None"], ["", "def", "delete_extra_msa", "(", "protein", ")", ":", "\n", "    ", "for", "k", "in", "MSA_FEATURE_NAMES", ":", "\n", "        ", "if", "\"extra_\"", "+", "k", "in", "protein", ":", "\n", "            ", "del", "protein", "[", "\"extra_\"", "+", "k", "]", "\n", "", "", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.block_delete_msa": [[245, 277], ["torch.floor().to", "torch.distributions.Uniform().sample", "torch.clip", "torch.cat", "torch.cat.unique", "torch.squeeze", "torch.distributions.uniform.Uniform().sample", "torch.range", "torch.unique", "torch.floor", "torch.distributions.Uniform", "torch.sort", "torch.gather", "torch.distributions.uniform.Uniform", "torch.reshape", "torch.range", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.gather"], ["", "@", "curry1", "\n", "def", "block_delete_msa", "(", "protein", ",", "config", ")", ":", "\n", "    ", "num_seq", "=", "protein", "[", "\"msa\"", "]", ".", "shape", "[", "0", "]", "\n", "block_num_seq", "=", "torch", ".", "floor", "(", "\n", "torch", ".", "tensor", "(", "num_seq", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "protein", "[", "\"msa\"", "]", ".", "device", ")", "\n", "*", "config", ".", "msa_fraction_per_block", "\n", ")", ".", "to", "(", "torch", ".", "int32", ")", "\n", "\n", "if", "config", ".", "randomize_num_blocks", ":", "\n", "        ", "nb", "=", "torch", ".", "distributions", ".", "uniform", ".", "Uniform", "(", "\n", "0", ",", "config", ".", "num_blocks", "+", "1", "\n", ")", ".", "sample", "(", ")", "\n", "", "else", ":", "\n", "        ", "nb", "=", "config", ".", "num_blocks", "\n", "\n", "", "del_block_starts", "=", "torch", ".", "distributions", ".", "Uniform", "(", "0", ",", "num_seq", ")", ".", "sample", "(", "nb", ")", "\n", "del_blocks", "=", "del_block_starts", "[", ":", ",", "None", "]", "+", "torch", ".", "range", "(", "block_num_seq", ")", "\n", "del_blocks", "=", "torch", ".", "clip", "(", "del_blocks", ",", "0", ",", "num_seq", "-", "1", ")", "\n", "del_indices", "=", "torch", ".", "unique", "(", "torch", ".", "sort", "(", "torch", ".", "reshape", "(", "del_blocks", ",", "[", "-", "1", "]", ")", ")", ")", "[", "0", "]", "\n", "\n", "# Make sure we keep the original sequence", "\n", "combined", "=", "torch", ".", "cat", "(", "(", "torch", ".", "range", "(", "1", ",", "num_seq", ")", "[", "None", "]", ",", "del_indices", "[", "None", "]", ")", ")", "\n", "uniques", ",", "counts", "=", "combined", ".", "unique", "(", "return_counts", "=", "True", ")", "\n", "difference", "=", "uniques", "[", "counts", "==", "1", "]", "\n", "intersection", "=", "uniques", "[", "counts", ">", "1", "]", "\n", "keep_indices", "=", "torch", ".", "squeeze", "(", "difference", ",", "0", ")", "\n", "\n", "for", "k", "in", "MSA_FEATURE_NAMES", ":", "\n", "        ", "if", "k", "in", "protein", ":", "\n", "            ", "protein", "[", "k", "]", "=", "torch", ".", "gather", "(", "protein", "[", "k", "]", ",", "keep_indices", ")", "\n", "\n", "", "", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.nearest_neighbor_clusters": [[279, 314], ["torch.cat", "data_transforms.make_one_hot", "data_transforms.make_one_hot", "torch.matmul", "torch.argmax().to", "torch.reshape", "torch.reshape().transpose", "torch.ones", "torch.zeros", "torch.argmax", "torch.ones", "torch.reshape"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to"], ["", "@", "curry1", "\n", "def", "nearest_neighbor_clusters", "(", "protein", ",", "gap_agreement_weight", "=", "0.0", ")", ":", "\n", "    ", "weights", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "torch", ".", "ones", "(", "21", ",", "device", "=", "protein", "[", "\"msa\"", "]", ".", "device", ")", ",", "\n", "gap_agreement_weight", "*", "torch", ".", "ones", "(", "1", ",", "device", "=", "protein", "[", "\"msa\"", "]", ".", "device", ")", ",", "\n", "torch", ".", "zeros", "(", "1", ",", "device", "=", "protein", "[", "\"msa\"", "]", ".", "device", ")", "\n", "]", ",", "\n", "0", ",", "\n", ")", "\n", "\n", "# Make agreement score as weighted Hamming distance", "\n", "msa_one_hot", "=", "make_one_hot", "(", "protein", "[", "\"msa\"", "]", ",", "23", ")", "\n", "sample_one_hot", "=", "protein", "[", "\"msa_mask\"", "]", "[", ":", ",", ":", ",", "None", "]", "*", "msa_one_hot", "\n", "extra_msa_one_hot", "=", "make_one_hot", "(", "protein", "[", "\"extra_msa\"", "]", ",", "23", ")", "\n", "extra_one_hot", "=", "protein", "[", "\"extra_msa_mask\"", "]", "[", ":", ",", ":", ",", "None", "]", "*", "extra_msa_one_hot", "\n", "\n", "num_seq", ",", "num_res", ",", "_", "=", "sample_one_hot", ".", "shape", "\n", "extra_num_seq", ",", "_", ",", "_", "=", "extra_one_hot", ".", "shape", "\n", "\n", "# Compute tf.einsum('mrc,nrc,c->mn', sample_one_hot, extra_one_hot, weights)", "\n", "# in an optimized fashion to avoid possible memory or computation blowup.", "\n", "agreement", "=", "torch", ".", "matmul", "(", "\n", "torch", ".", "reshape", "(", "extra_one_hot", ",", "[", "extra_num_seq", ",", "num_res", "*", "23", "]", ")", ",", "\n", "torch", ".", "reshape", "(", "\n", "sample_one_hot", "*", "weights", ",", "[", "num_seq", ",", "num_res", "*", "23", "]", "\n", ")", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", ")", "\n", "\n", "# Assign each sequence in the extra sequences to the closest MSA sample", "\n", "protein", "[", "\"extra_cluster_assignment\"", "]", "=", "torch", ".", "argmax", "(", "agreement", ",", "dim", "=", "1", ")", ".", "to", "(", "\n", "torch", ".", "int64", "\n", ")", "\n", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.unsorted_segment_sum": [[316, 341], ["segment_ids.expand.view", "segment_ids.expand.expand", "torch.zeros().scatter_add_", "tensor.type.type", "list", "data.float", "len", "torch.zeros", "len"], "function", ["None"], ["", "def", "unsorted_segment_sum", "(", "data", ",", "segment_ids", ",", "num_segments", ")", ":", "\n", "    ", "\"\"\"\n    Computes the sum along segments of a tensor. Similar to \n    tf.unsorted_segment_sum, but only supports 1-D indices.\n\n    :param data: A tensor whose segments are to be summed.\n    :param segment_ids: The 1-D segment indices tensor.\n    :param num_segments: The number of segments.\n    :return: A tensor of same data type as the data argument.\n    \"\"\"", "\n", "assert", "(", "\n", "len", "(", "segment_ids", ".", "shape", ")", "==", "1", "and", "\n", "segment_ids", ".", "shape", "[", "0", "]", "==", "data", ".", "shape", "[", "0", "]", "\n", ")", "\n", "segment_ids", "=", "segment_ids", ".", "view", "(", "\n", "segment_ids", ".", "shape", "[", "0", "]", ",", "*", "(", "(", "1", ",", ")", "*", "len", "(", "data", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", ")", "\n", "segment_ids", "=", "segment_ids", ".", "expand", "(", "data", ".", "shape", ")", "\n", "shape", "=", "[", "num_segments", "]", "+", "list", "(", "data", ".", "shape", "[", "1", ":", "]", ")", "\n", "tensor", "=", "(", "\n", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "segment_ids", ".", "device", ")", "\n", ".", "scatter_add_", "(", "0", ",", "segment_ids", ",", "data", ".", "float", "(", ")", ")", "\n", ")", "\n", "tensor", "=", "tensor", ".", "type", "(", "data", ".", "dtype", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.summarize_clusters": [[343, 367], ["data_transforms.summarize_clusters.csum"], "function", ["None"], ["", "@", "curry1", "\n", "def", "summarize_clusters", "(", "protein", ")", ":", "\n", "    ", "\"\"\"Produce profile and deletion_matrix_mean within each cluster.\"\"\"", "\n", "num_seq", "=", "protein", "[", "\"msa\"", "]", ".", "shape", "[", "0", "]", "\n", "\n", "def", "csum", "(", "x", ")", ":", "\n", "        ", "return", "unsorted_segment_sum", "(", "\n", "x", ",", "protein", "[", "\"extra_cluster_assignment\"", "]", ",", "num_seq", "\n", ")", "\n", "\n", "", "mask", "=", "protein", "[", "\"extra_msa_mask\"", "]", "\n", "mask_counts", "=", "1e-6", "+", "protein", "[", "\"msa_mask\"", "]", "+", "csum", "(", "mask", ")", "# Include center", "\n", "\n", "msa_sum", "=", "csum", "(", "mask", "[", ":", ",", ":", ",", "None", "]", "*", "make_one_hot", "(", "protein", "[", "\"extra_msa\"", "]", ",", "23", ")", ")", "\n", "msa_sum", "+=", "make_one_hot", "(", "protein", "[", "\"msa\"", "]", ",", "23", ")", "# Original sequence", "\n", "protein", "[", "\"cluster_profile\"", "]", "=", "msa_sum", "/", "mask_counts", "[", ":", ",", ":", ",", "None", "]", "\n", "del", "msa_sum", "\n", "\n", "del_sum", "=", "csum", "(", "mask", "*", "protein", "[", "\"extra_deletion_matrix\"", "]", ")", "\n", "del_sum", "+=", "protein", "[", "\"deletion_matrix\"", "]", "# Original sequence", "\n", "protein", "[", "\"cluster_deletion_mean\"", "]", "=", "del_sum", "/", "mask_counts", "\n", "del", "del_sum", "\n", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_msa_mask": [[369, 376], ["torch.ones", "torch.ones"], "function", ["None"], ["", "def", "make_msa_mask", "(", "protein", ")", ":", "\n", "    ", "\"\"\"Mask features are all ones, but will later be zero-padded.\"\"\"", "\n", "protein", "[", "\"msa_mask\"", "]", "=", "torch", ".", "ones", "(", "protein", "[", "\"msa\"", "]", ".", "shape", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "protein", "[", "\"msa_row_mask\"", "]", "=", "torch", ".", "ones", "(", "\n", "(", "protein", "[", "\"msa\"", "]", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "torch", ".", "float32", "\n", ")", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.pseudo_beta_fn": [[378, 396], ["torch.eq", "torch.where", "torch.tile", "torch.where", "len"], "function", ["None"], ["", "def", "pseudo_beta_fn", "(", "aatype", ",", "all_atom_positions", ",", "all_atom_mask", ")", ":", "\n", "    ", "\"\"\"Create pseudo beta features.\"\"\"", "\n", "is_gly", "=", "torch", ".", "eq", "(", "aatype", ",", "rc", ".", "restype_order", "[", "\"G\"", "]", ")", "\n", "ca_idx", "=", "rc", ".", "atom_order", "[", "\"CA\"", "]", "\n", "cb_idx", "=", "rc", ".", "atom_order", "[", "\"CB\"", "]", "\n", "pseudo_beta", "=", "torch", ".", "where", "(", "\n", "torch", ".", "tile", "(", "is_gly", "[", "...", ",", "None", "]", ",", "[", "1", "]", "*", "len", "(", "is_gly", ".", "shape", ")", "+", "[", "3", "]", ")", ",", "\n", "all_atom_positions", "[", "...", ",", "ca_idx", ",", ":", "]", ",", "\n", "all_atom_positions", "[", "...", ",", "cb_idx", ",", ":", "]", ",", "\n", ")", "\n", "\n", "if", "all_atom_mask", "is", "not", "None", ":", "\n", "        ", "pseudo_beta_mask", "=", "torch", ".", "where", "(", "\n", "is_gly", ",", "all_atom_mask", "[", "...", ",", "ca_idx", "]", ",", "all_atom_mask", "[", "...", ",", "cb_idx", "]", "\n", ")", "\n", "return", "pseudo_beta", ",", "pseudo_beta_mask", "\n", "", "else", ":", "\n", "        ", "return", "pseudo_beta", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_pseudo_beta": [[398, 411], ["data_transforms.pseudo_beta_fn"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.pseudo_beta_fn"], ["", "", "@", "curry1", "\n", "def", "make_pseudo_beta", "(", "protein", ",", "prefix", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Create pseudo-beta (alpha for glycine) position and mask.\"\"\"", "\n", "assert", "prefix", "in", "[", "\"\"", ",", "\"template_\"", "]", "\n", "(", "\n", "protein", "[", "prefix", "+", "\"pseudo_beta\"", "]", ",", "\n", "protein", "[", "prefix", "+", "\"pseudo_beta_mask\"", "]", ",", "\n", ")", "=", "pseudo_beta_fn", "(", "\n", "protein", "[", "\"template_aatype\"", "if", "prefix", "else", "\"aatype\"", "]", ",", "\n", "protein", "[", "prefix", "+", "\"all_atom_positions\"", "]", ",", "\n", "protein", "[", "\"template_all_atom_mask\"", "if", "prefix", "else", "\"all_atom_mask\"", "]", ",", "\n", ")", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.add_constant_field": [[413, 417], ["torch.tensor"], "function", ["None"], ["", "@", "curry1", "\n", "def", "add_constant_field", "(", "protein", ",", "key", ",", "value", ")", ":", "\n", "    ", "protein", "[", "key", "]", "=", "torch", ".", "tensor", "(", "value", ",", "device", "=", "protein", "[", "\"msa\"", "]", ".", "device", ")", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.shaped_categorical": [[419, 427], ["torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample", "torch.reshape", "torch.reshape"], "function", ["None"], ["", "def", "shaped_categorical", "(", "probs", ",", "epsilon", "=", "1e-10", ")", ":", "\n", "    ", "ds", "=", "probs", ".", "shape", "\n", "num_classes", "=", "ds", "[", "-", "1", "]", "\n", "distribution", "=", "torch", ".", "distributions", ".", "categorical", ".", "Categorical", "(", "\n", "torch", ".", "reshape", "(", "probs", "+", "epsilon", ",", "[", "-", "1", ",", "num_classes", "]", ")", "\n", ")", "\n", "counts", "=", "distribution", ".", "sample", "(", ")", "\n", "return", "torch", ".", "reshape", "(", "counts", ",", "ds", "[", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_hhblits_profile": [[429, 439], ["data_transforms.make_one_hot", "torch.mean"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_one_hot"], ["", "def", "make_hhblits_profile", "(", "protein", ")", ":", "\n", "    ", "\"\"\"Compute the HHblits MSA profile if not already present.\"\"\"", "\n", "if", "\"hhblits_profile\"", "in", "protein", ":", "\n", "        ", "return", "protein", "\n", "\n", "# Compute the profile for every residue (over all MSA sequences).", "\n", "", "msa_one_hot", "=", "make_one_hot", "(", "protein", "[", "\"msa\"", "]", ",", "22", ")", "\n", "\n", "protein", "[", "\"hhblits_profile\"", "]", "=", "torch", ".", "mean", "(", "msa_one_hot", ",", "dim", "=", "0", ")", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_masked_msa": [[441, 482], ["torch.tensor", "list", "torch.nn.functional.pad", "data_transforms.shaped_categorical", "torch.where", "mask_position.to", "functools.reduce", "torch.rand", "data_transforms.make_one_hot", "range", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.shaped_categorical", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.reduce", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_one_hot"], ["", "@", "curry1", "\n", "def", "make_masked_msa", "(", "protein", ",", "config", ",", "replace_fraction", ")", ":", "\n", "    ", "\"\"\"Create data for BERT on raw MSA.\"\"\"", "\n", "# Add a random amino acid uniformly.", "\n", "random_aa", "=", "torch", ".", "tensor", "(", "\n", "[", "0.05", "]", "*", "20", "+", "[", "0.0", ",", "0.0", "]", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "protein", "[", "\"aatype\"", "]", ".", "device", "\n", ")", "\n", "\n", "categorical_probs", "=", "(", "\n", "config", ".", "uniform_prob", "*", "random_aa", "\n", "+", "config", ".", "profile_prob", "*", "protein", "[", "\"hhblits_profile\"", "]", "\n", "+", "config", ".", "same_prob", "*", "make_one_hot", "(", "protein", "[", "\"msa\"", "]", ",", "22", ")", "\n", ")", "\n", "\n", "# Put all remaining probability on [MASK] which is a new column", "\n", "pad_shapes", "=", "list", "(", "\n", "reduce", "(", "add", ",", "[", "(", "0", ",", "0", ")", "for", "_", "in", "range", "(", "len", "(", "categorical_probs", ".", "shape", ")", ")", "]", ")", "\n", ")", "\n", "pad_shapes", "[", "1", "]", "=", "1", "\n", "mask_prob", "=", "(", "\n", "1.0", "-", "config", ".", "profile_prob", "-", "config", ".", "same_prob", "-", "config", ".", "uniform_prob", "\n", ")", "\n", "assert", "mask_prob", ">=", "0.0", "\n", "categorical_probs", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "\n", "categorical_probs", ",", "pad_shapes", ",", "value", "=", "mask_prob", "\n", ")", "\n", "\n", "sh", "=", "protein", "[", "\"msa\"", "]", ".", "shape", "\n", "mask_position", "=", "torch", ".", "rand", "(", "sh", ")", "<", "replace_fraction", "\n", "\n", "bert_msa", "=", "shaped_categorical", "(", "categorical_probs", ")", "\n", "bert_msa", "=", "torch", ".", "where", "(", "mask_position", ",", "bert_msa", ",", "protein", "[", "\"msa\"", "]", ")", "\n", "\n", "# Mix real and masked MSA", "\n", "protein", "[", "\"bert_mask\"", "]", "=", "mask_position", ".", "to", "(", "torch", ".", "float32", ")", "\n", "protein", "[", "\"true_msa\"", "]", "=", "protein", "[", "\"msa\"", "]", "\n", "protein", "[", "\"msa\"", "]", "=", "bert_msa", "\n", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_fixed_size": [[484, 521], ["protein.items", "list", "list.reverse", "list", "len", "len", "itertools.chain", "torch.nn.functional.pad", "torch.reshape", "pad_size_map.get", "zip", "enumerate"], "function", ["None"], ["", "@", "curry1", "\n", "def", "make_fixed_size", "(", "\n", "protein", ",", "\n", "shape_schema", ",", "\n", "msa_cluster_size", ",", "\n", "extra_msa_size", ",", "\n", "num_res", "=", "0", ",", "\n", "num_templates", "=", "0", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Guess at the MSA and sequence dimension to make fixed size.\"\"\"", "\n", "pad_size_map", "=", "{", "\n", "NUM_RES", ":", "num_res", ",", "\n", "NUM_MSA_SEQ", ":", "msa_cluster_size", ",", "\n", "NUM_EXTRA_SEQ", ":", "extra_msa_size", ",", "\n", "NUM_TEMPLATES", ":", "num_templates", ",", "\n", "}", "\n", "\n", "for", "k", ",", "v", "in", "protein", ".", "items", "(", ")", ":", "\n", "# Don't transfer this to the accelerator.", "\n", "        ", "if", "k", "==", "\"extra_cluster_assignment\"", ":", "\n", "            ", "continue", "\n", "", "shape", "=", "list", "(", "v", ".", "shape", ")", "\n", "schema", "=", "shape_schema", "[", "k", "]", "\n", "msg", "=", "\"Rank mismatch between shape and shape schema for\"", "\n", "assert", "len", "(", "shape", ")", "==", "len", "(", "schema", ")", ",", "f\"{msg} {k}: {shape} vs {schema}\"", "\n", "pad_size", "=", "[", "\n", "pad_size_map", ".", "get", "(", "s2", ",", "None", ")", "or", "s1", "for", "(", "s1", ",", "s2", ")", "in", "zip", "(", "shape", ",", "schema", ")", "\n", "]", "\n", "\n", "padding", "=", "[", "(", "0", ",", "p", "-", "v", ".", "shape", "[", "i", "]", ")", "for", "i", ",", "p", "in", "enumerate", "(", "pad_size", ")", "]", "\n", "padding", ".", "reverse", "(", ")", "\n", "padding", "=", "list", "(", "itertools", ".", "chain", "(", "*", "padding", ")", ")", "\n", "if", "padding", ":", "\n", "            ", "protein", "[", "k", "]", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "v", ",", "padding", ")", "\n", "protein", "[", "k", "]", "=", "torch", ".", "reshape", "(", "protein", "[", "k", "]", ",", "pad_size", ")", "\n", "\n", "", "", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_msa_feat": [[523, 572], ["torch.clip", "data_transforms.make_one_hot", "data_transforms.make_one_hot", "torch.clip", "torch.cat", "torch.cat", "protein[].to", "torch.unsqueeze", "torch.atan", "torch.unsqueeze", "torch.unsqueeze", "msa_feat.extend", "torch.clip", "torch.atan", "torch.atan", "torch.unsqueeze"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_one_hot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.unsqueeze"], ["", "@", "curry1", "\n", "def", "make_msa_feat", "(", "protein", ")", ":", "\n", "    ", "\"\"\"Create and concatenate MSA features.\"\"\"", "\n", "# Whether there is a domain break. Always zero for chains, but keeping for", "\n", "# compatibility with domain datasets.", "\n", "has_break", "=", "torch", ".", "clip", "(", "\n", "protein", "[", "\"between_segment_residues\"", "]", ".", "to", "(", "torch", ".", "float32", ")", ",", "0", ",", "1", "\n", ")", "\n", "aatype_1hot", "=", "make_one_hot", "(", "protein", "[", "\"aatype\"", "]", ",", "21", ")", "\n", "\n", "target_feat", "=", "[", "\n", "torch", ".", "unsqueeze", "(", "has_break", ",", "dim", "=", "-", "1", ")", ",", "\n", "aatype_1hot", ",", "# Everyone gets the original sequence.", "\n", "]", "\n", "\n", "msa_1hot", "=", "make_one_hot", "(", "protein", "[", "\"msa\"", "]", ",", "23", ")", "\n", "has_deletion", "=", "torch", ".", "clip", "(", "protein", "[", "\"deletion_matrix\"", "]", ",", "0.0", ",", "1.0", ")", "\n", "deletion_value", "=", "torch", ".", "atan", "(", "protein", "[", "\"deletion_matrix\"", "]", "/", "3.0", ")", "*", "(", "\n", "2.0", "/", "np", ".", "pi", "\n", ")", "\n", "\n", "msa_feat", "=", "[", "\n", "msa_1hot", ",", "\n", "torch", ".", "unsqueeze", "(", "has_deletion", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "unsqueeze", "(", "deletion_value", ",", "dim", "=", "-", "1", ")", ",", "\n", "]", "\n", "\n", "if", "\"cluster_profile\"", "in", "protein", ":", "\n", "        ", "deletion_mean_value", "=", "torch", ".", "atan", "(", "\n", "protein", "[", "\"cluster_deletion_mean\"", "]", "/", "3.0", "\n", ")", "*", "(", "2.0", "/", "np", ".", "pi", ")", "\n", "msa_feat", ".", "extend", "(", "\n", "[", "\n", "protein", "[", "\"cluster_profile\"", "]", ",", "\n", "torch", ".", "unsqueeze", "(", "deletion_mean_value", ",", "dim", "=", "-", "1", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "", "if", "\"extra_deletion_matrix\"", "in", "protein", ":", "\n", "        ", "protein", "[", "\"extra_has_deletion\"", "]", "=", "torch", ".", "clip", "(", "\n", "protein", "[", "\"extra_deletion_matrix\"", "]", ",", "0.0", ",", "1.0", "\n", ")", "\n", "protein", "[", "\"extra_deletion_value\"", "]", "=", "torch", ".", "atan", "(", "\n", "protein", "[", "\"extra_deletion_matrix\"", "]", "/", "3.0", "\n", ")", "*", "(", "2.0", "/", "np", ".", "pi", ")", "\n", "\n", "", "protein", "[", "\"msa_feat\"", "]", "=", "torch", ".", "cat", "(", "msa_feat", ",", "dim", "=", "-", "1", ")", "\n", "protein", "[", "\"target_feat\"", "]", "=", "torch", ".", "cat", "(", "target_feat", ",", "dim", "=", "-", "1", ")", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.select_feat": [[574, 577], ["protein.items"], "function", ["None"], ["", "@", "curry1", "\n", "def", "select_feat", "(", "protein", ",", "feature_list", ")", ":", "\n", "    ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "protein", ".", "items", "(", ")", "if", "k", "in", "feature_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.crop_templates": [[579, 585], ["protein.items", "k.startswith"], "function", ["None"], ["", "@", "curry1", "\n", "def", "crop_templates", "(", "protein", ",", "max_templates", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "protein", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "\"template_\"", ")", ":", "\n", "            ", "protein", "[", "k", "]", "=", "v", "[", ":", "max_templates", "]", "\n", "", "", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_atom14_masks": [[587, 659], ["torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor", "torch.tensor", "torch.tensor", "protein[].to", "residx_atom14_to_atom37.long", "residx_atom37_to_atom14.long", "torch.zeros", "enumerate", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "enumerate"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to"], ["", "def", "make_atom14_masks", "(", "protein", ")", ":", "\n", "    ", "\"\"\"Construct denser atom positions (14 dimensions instead of 37).\"\"\"", "\n", "restype_atom14_to_atom37", "=", "[", "]", "\n", "restype_atom37_to_atom14", "=", "[", "]", "\n", "restype_atom14_mask", "=", "[", "]", "\n", "\n", "for", "rt", "in", "rc", ".", "restypes", ":", "\n", "        ", "atom_names", "=", "rc", ".", "restype_name_to_atom14_names", "[", "rc", ".", "restype_1to3", "[", "rt", "]", "]", "\n", "restype_atom14_to_atom37", ".", "append", "(", "\n", "[", "(", "rc", ".", "atom_order", "[", "name", "]", "if", "name", "else", "0", ")", "for", "name", "in", "atom_names", "]", "\n", ")", "\n", "atom_name_to_idx14", "=", "{", "name", ":", "i", "for", "i", ",", "name", "in", "enumerate", "(", "atom_names", ")", "}", "\n", "restype_atom37_to_atom14", ".", "append", "(", "\n", "[", "\n", "(", "atom_name_to_idx14", "[", "name", "]", "if", "name", "in", "atom_name_to_idx14", "else", "0", ")", "\n", "for", "name", "in", "rc", ".", "atom_types", "\n", "]", "\n", ")", "\n", "\n", "restype_atom14_mask", ".", "append", "(", "\n", "[", "(", "1.0", "if", "name", "else", "0.0", ")", "for", "name", "in", "atom_names", "]", "\n", ")", "\n", "\n", "# Add dummy mapping for restype 'UNK'", "\n", "", "restype_atom14_to_atom37", ".", "append", "(", "[", "0", "]", "*", "14", ")", "\n", "restype_atom37_to_atom14", ".", "append", "(", "[", "0", "]", "*", "37", ")", "\n", "restype_atom14_mask", ".", "append", "(", "[", "0.0", "]", "*", "14", ")", "\n", "\n", "restype_atom14_to_atom37", "=", "torch", ".", "tensor", "(", "\n", "restype_atom14_to_atom37", ",", "\n", "dtype", "=", "torch", ".", "int32", ",", "\n", "device", "=", "protein", "[", "\"aatype\"", "]", ".", "device", ",", "\n", ")", "\n", "restype_atom37_to_atom14", "=", "torch", ".", "tensor", "(", "\n", "restype_atom37_to_atom14", ",", "\n", "dtype", "=", "torch", ".", "int32", ",", "\n", "device", "=", "protein", "[", "\"aatype\"", "]", ".", "device", ",", "\n", ")", "\n", "restype_atom14_mask", "=", "torch", ".", "tensor", "(", "\n", "restype_atom14_mask", ",", "\n", "dtype", "=", "torch", ".", "float32", ",", "\n", "device", "=", "protein", "[", "\"aatype\"", "]", ".", "device", ",", "\n", ")", "\n", "protein_aatype", "=", "protein", "[", "'aatype'", "]", ".", "to", "(", "torch", ".", "long", ")", "\n", "\n", "# create the mapping for (residx, atom14) --> atom37, i.e. an array", "\n", "# with shape (num_res, 14) containing the atom37 indices for this protein", "\n", "residx_atom14_to_atom37", "=", "restype_atom14_to_atom37", "[", "protein_aatype", "]", "\n", "residx_atom14_mask", "=", "restype_atom14_mask", "[", "protein_aatype", "]", "\n", "\n", "protein", "[", "\"atom14_atom_exists\"", "]", "=", "residx_atom14_mask", "\n", "protein", "[", "\"residx_atom14_to_atom37\"", "]", "=", "residx_atom14_to_atom37", ".", "long", "(", ")", "\n", "\n", "# create the gather indices for mapping back", "\n", "residx_atom37_to_atom14", "=", "restype_atom37_to_atom14", "[", "protein_aatype", "]", "\n", "protein", "[", "\"residx_atom37_to_atom14\"", "]", "=", "residx_atom37_to_atom14", ".", "long", "(", ")", "\n", "\n", "# create the corresponding mask", "\n", "restype_atom37_mask", "=", "torch", ".", "zeros", "(", "\n", "[", "21", ",", "37", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "protein", "[", "\"aatype\"", "]", ".", "device", "\n", ")", "\n", "for", "restype", ",", "restype_letter", "in", "enumerate", "(", "rc", ".", "restypes", ")", ":", "\n", "        ", "restype_name", "=", "rc", ".", "restype_1to3", "[", "restype_letter", "]", "\n", "atom_names", "=", "rc", ".", "residue_atoms", "[", "restype_name", "]", "\n", "for", "atom_name", "in", "atom_names", ":", "\n", "            ", "atom_type", "=", "rc", ".", "atom_order", "[", "atom_name", "]", "\n", "restype_atom37_mask", "[", "restype", ",", "atom_type", "]", "=", "1", "\n", "\n", "", "", "residx_atom37_mask", "=", "restype_atom37_mask", "[", "protein_aatype", "]", "\n", "protein", "[", "\"atom37_atom_exists\"", "]", "=", "residx_atom37_mask", "\n", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_atom14_masks_np": [[661, 670], ["fastfold.utils.tensor_utils.tree_map", "data_transforms.make_atom14_masks", "fastfold.utils.tensor_utils.tensor_tree_map", "torch.tensor", "numpy.array"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.tree_map", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_atom14_masks"], ["", "def", "make_atom14_masks_np", "(", "batch", ")", ":", "\n", "    ", "batch", "=", "tree_map", "(", "\n", "lambda", "n", ":", "torch", ".", "tensor", "(", "n", ",", "device", "=", "batch", "[", "\"aatype\"", "]", ".", "device", ")", ",", "\n", "batch", ",", "\n", "np", ".", "ndarray", "\n", ")", "\n", "out", "=", "make_atom14_masks", "(", "batch", ")", "\n", "out", "=", "tensor_tree_map", "(", "lambda", "t", ":", "np", ".", "array", "(", "t", ")", ",", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.make_atom14_positions": [[672, 772], ["fastfold.common.residue_constants.residue_atom_renaming_swaps.items", "torch.stack", "torch.einsum", "torch.einsum", "protein[].new_zeros", "fastfold.common.residue_constants.residue_atom_renaming_swaps.items", "fastfold.utils.tensor_utils.batched_gather", "fastfold.utils.tensor_utils.batched_gather", "torch.eye", "torch.arange", "swap.items", "swap.items", "fastfold.common.residue_constants.restype_name_to_atom14_names[].index", "fastfold.common.residue_constants.restype_name_to_atom14_names[].index", "protein[].new_zeros", "enumerate", "fastfold.common.residue_constants.restype_name_to_atom14_names[].index", "fastfold.common.residue_constants.restype_name_to_atom14_names[].index", "len", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.batched_gather", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.batched_gather"], ["", "def", "make_atom14_positions", "(", "protein", ")", ":", "\n", "    ", "\"\"\"Constructs denser atom positions (14 dimensions instead of 37).\"\"\"", "\n", "residx_atom14_mask", "=", "protein", "[", "\"atom14_atom_exists\"", "]", "\n", "residx_atom14_to_atom37", "=", "protein", "[", "\"residx_atom14_to_atom37\"", "]", "\n", "\n", "# Create a mask for known ground truth positions.", "\n", "residx_atom14_gt_mask", "=", "residx_atom14_mask", "*", "batched_gather", "(", "\n", "protein", "[", "\"all_atom_mask\"", "]", ",", "\n", "residx_atom14_to_atom37", ",", "\n", "dim", "=", "-", "1", ",", "\n", "no_batch_dims", "=", "len", "(", "protein", "[", "\"all_atom_mask\"", "]", ".", "shape", "[", ":", "-", "1", "]", ")", ",", "\n", ")", "\n", "\n", "# Gather the ground truth positions.", "\n", "residx_atom14_gt_positions", "=", "residx_atom14_gt_mask", "[", "...", ",", "None", "]", "*", "(", "\n", "batched_gather", "(", "\n", "protein", "[", "\"all_atom_positions\"", "]", ",", "\n", "residx_atom14_to_atom37", ",", "\n", "dim", "=", "-", "2", ",", "\n", "no_batch_dims", "=", "len", "(", "protein", "[", "\"all_atom_positions\"", "]", ".", "shape", "[", ":", "-", "2", "]", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "protein", "[", "\"atom14_atom_exists\"", "]", "=", "residx_atom14_mask", "\n", "protein", "[", "\"atom14_gt_exists\"", "]", "=", "residx_atom14_gt_mask", "\n", "protein", "[", "\"atom14_gt_positions\"", "]", "=", "residx_atom14_gt_positions", "\n", "\n", "# As the atom naming is ambiguous for 7 of the 20 amino acids, provide", "\n", "# alternative ground truth coordinates where the naming is swapped", "\n", "restype_3", "=", "[", "rc", ".", "restype_1to3", "[", "res", "]", "for", "res", "in", "rc", ".", "restypes", "]", "\n", "restype_3", "+=", "[", "\"UNK\"", "]", "\n", "\n", "# Matrices for renaming ambiguous atoms.", "\n", "all_matrices", "=", "{", "\n", "res", ":", "torch", ".", "eye", "(", "\n", "14", ",", "\n", "dtype", "=", "protein", "[", "\"all_atom_mask\"", "]", ".", "dtype", ",", "\n", "device", "=", "protein", "[", "\"all_atom_mask\"", "]", ".", "device", ",", "\n", ")", "\n", "for", "res", "in", "restype_3", "\n", "}", "\n", "for", "resname", ",", "swap", "in", "rc", ".", "residue_atom_renaming_swaps", ".", "items", "(", ")", ":", "\n", "        ", "correspondences", "=", "torch", ".", "arange", "(", "\n", "14", ",", "device", "=", "protein", "[", "\"all_atom_mask\"", "]", ".", "device", "\n", ")", "\n", "for", "source_atom_swap", ",", "target_atom_swap", "in", "swap", ".", "items", "(", ")", ":", "\n", "            ", "source_index", "=", "rc", ".", "restype_name_to_atom14_names", "[", "resname", "]", ".", "index", "(", "\n", "source_atom_swap", "\n", ")", "\n", "target_index", "=", "rc", ".", "restype_name_to_atom14_names", "[", "resname", "]", ".", "index", "(", "\n", "target_atom_swap", "\n", ")", "\n", "correspondences", "[", "source_index", "]", "=", "target_index", "\n", "correspondences", "[", "target_index", "]", "=", "source_index", "\n", "renaming_matrix", "=", "protein", "[", "\"all_atom_mask\"", "]", ".", "new_zeros", "(", "(", "14", ",", "14", ")", ")", "\n", "for", "index", ",", "correspondence", "in", "enumerate", "(", "correspondences", ")", ":", "\n", "                ", "renaming_matrix", "[", "index", ",", "correspondence", "]", "=", "1.0", "\n", "", "", "all_matrices", "[", "resname", "]", "=", "renaming_matrix", "\n", "", "renaming_matrices", "=", "torch", ".", "stack", "(", "\n", "[", "all_matrices", "[", "restype", "]", "for", "restype", "in", "restype_3", "]", "\n", ")", "\n", "\n", "# Pick the transformation matrices for the given residue sequence", "\n", "# shape (num_res, 14, 14).", "\n", "renaming_transform", "=", "renaming_matrices", "[", "protein", "[", "\"aatype\"", "]", "]", "\n", "\n", "# Apply it to the ground truth positions. shape (num_res, 14, 3).", "\n", "alternative_gt_positions", "=", "torch", ".", "einsum", "(", "\n", "\"...rac,...rab->...rbc\"", ",", "residx_atom14_gt_positions", ",", "renaming_transform", "\n", ")", "\n", "protein", "[", "\"atom14_alt_gt_positions\"", "]", "=", "alternative_gt_positions", "\n", "\n", "# Create the mask for the alternative ground truth (differs from the", "\n", "# ground truth mask, if only one of the atoms in an ambiguous pair has a", "\n", "# ground truth position).", "\n", "alternative_gt_mask", "=", "torch", ".", "einsum", "(", "\n", "\"...ra,...rab->...rb\"", ",", "residx_atom14_gt_mask", ",", "renaming_transform", "\n", ")", "\n", "protein", "[", "\"atom14_alt_gt_exists\"", "]", "=", "alternative_gt_mask", "\n", "\n", "# Create an ambiguous atoms mask.  shape: (21, 14).", "\n", "restype_atom14_is_ambiguous", "=", "protein", "[", "\"all_atom_mask\"", "]", ".", "new_zeros", "(", "(", "21", ",", "14", ")", ")", "\n", "for", "resname", ",", "swap", "in", "rc", ".", "residue_atom_renaming_swaps", ".", "items", "(", ")", ":", "\n", "        ", "for", "atom_name1", ",", "atom_name2", "in", "swap", ".", "items", "(", ")", ":", "\n", "            ", "restype", "=", "rc", ".", "restype_order", "[", "rc", ".", "restype_3to1", "[", "resname", "]", "]", "\n", "atom_idx1", "=", "rc", ".", "restype_name_to_atom14_names", "[", "resname", "]", ".", "index", "(", "\n", "atom_name1", "\n", ")", "\n", "atom_idx2", "=", "rc", ".", "restype_name_to_atom14_names", "[", "resname", "]", ".", "index", "(", "\n", "atom_name2", "\n", ")", "\n", "restype_atom14_is_ambiguous", "[", "restype", ",", "atom_idx1", "]", "=", "1", "\n", "restype_atom14_is_ambiguous", "[", "restype", ",", "atom_idx2", "]", "=", "1", "\n", "\n", "# From this create an ambiguous_mask for the given sequence.", "\n", "", "", "protein", "[", "\"atom14_atom_is_ambiguous\"", "]", "=", "restype_atom14_is_ambiguous", "[", "\n", "protein", "[", "\"aatype\"", "]", "\n", "]", "\n", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.atom37_to_frames": [[774, 911], ["len", "numpy.full", "enumerate", "all_atom_mask.new_zeros", "all_atom_mask.new_tensor", "fastfold.common.residue_constants.atom_order.copy", "numpy.vectorize", "np.vectorize.", "aatype.new_tensor", "restype_rigidgroup_base_atom37_idx.view.view", "fastfold.utils.tensor_utils.batched_gather", "fastfold.utils.tensor_utils.batched_gather", "fastfold.utils.rigid_utils.Rigid.from_3_points", "fastfold.utils.tensor_utils.batched_gather", "fastfold.utils.tensor_utils.batched_gather", "torch.eye", "torch.tile", "fastfold.utils.rigid_utils.Rotation", "gt_frames.compose.compose", "all_atom_mask.new_zeros", "torch.eye", "torch.tile", "fastfold.common.residue_constants.residue_atom_renaming_swaps.items", "fastfold.utils.tensor_utils.batched_gather", "fastfold.utils.tensor_utils.batched_gather", "fastfold.utils.rigid_utils.Rotation", "gt_frames.compose.compose", "gt_frames.compose.to_tensor_4x4", "gt_frames.compose.to_tensor_4x4", "range", "fastfold.utils.rigid_utils.Rigid", "int", "fastfold.utils.rigid_utils.Rigid", "len", "len", "torch.min", "sum"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.distributed.comm.copy", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.batched_gather", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.batched_gather", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.from_3_points", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.batched_gather", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.batched_gather", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.compose", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.batched_gather", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.batched_gather", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.compose", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.to_tensor_4x4", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.to_tensor_4x4"], ["", "def", "atom37_to_frames", "(", "protein", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "aatype", "=", "protein", "[", "\"aatype\"", "]", "\n", "all_atom_positions", "=", "protein", "[", "\"all_atom_positions\"", "]", "\n", "all_atom_mask", "=", "protein", "[", "\"all_atom_mask\"", "]", "\n", "\n", "batch_dims", "=", "len", "(", "aatype", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "restype_rigidgroup_base_atom_names", "=", "np", ".", "full", "(", "[", "21", ",", "8", ",", "3", "]", ",", "\"\"", ",", "dtype", "=", "object", ")", "\n", "restype_rigidgroup_base_atom_names", "[", ":", ",", "0", ",", ":", "]", "=", "[", "\"C\"", ",", "\"CA\"", ",", "\"N\"", "]", "\n", "restype_rigidgroup_base_atom_names", "[", ":", ",", "3", ",", ":", "]", "=", "[", "\"CA\"", ",", "\"C\"", ",", "\"O\"", "]", "\n", "\n", "for", "restype", ",", "restype_letter", "in", "enumerate", "(", "rc", ".", "restypes", ")", ":", "\n", "        ", "resname", "=", "rc", ".", "restype_1to3", "[", "restype_letter", "]", "\n", "for", "chi_idx", "in", "range", "(", "4", ")", ":", "\n", "            ", "if", "rc", ".", "chi_angles_mask", "[", "restype", "]", "[", "chi_idx", "]", ":", "\n", "                ", "names", "=", "rc", ".", "chi_angles_atoms", "[", "resname", "]", "[", "chi_idx", "]", "\n", "restype_rigidgroup_base_atom_names", "[", "\n", "restype", ",", "chi_idx", "+", "4", ",", ":", "\n", "]", "=", "names", "[", "1", ":", "]", "\n", "\n", "", "", "", "restype_rigidgroup_mask", "=", "all_atom_mask", ".", "new_zeros", "(", "\n", "(", "*", "aatype", ".", "shape", "[", ":", "-", "1", "]", ",", "21", ",", "8", ")", ",", "\n", ")", "\n", "restype_rigidgroup_mask", "[", "...", ",", "0", "]", "=", "1", "\n", "restype_rigidgroup_mask", "[", "...", ",", "3", "]", "=", "1", "\n", "restype_rigidgroup_mask", "[", "...", ",", ":", "20", ",", "4", ":", "]", "=", "all_atom_mask", ".", "new_tensor", "(", "\n", "rc", ".", "chi_angles_mask", "\n", ")", "\n", "\n", "lookuptable", "=", "rc", ".", "atom_order", ".", "copy", "(", ")", "\n", "lookuptable", "[", "\"\"", "]", "=", "0", "\n", "lookup", "=", "np", ".", "vectorize", "(", "lambda", "x", ":", "lookuptable", "[", "x", "]", ")", "\n", "restype_rigidgroup_base_atom37_idx", "=", "lookup", "(", "\n", "restype_rigidgroup_base_atom_names", ",", "\n", ")", "\n", "restype_rigidgroup_base_atom37_idx", "=", "aatype", ".", "new_tensor", "(", "\n", "restype_rigidgroup_base_atom37_idx", ",", "\n", ")", "\n", "restype_rigidgroup_base_atom37_idx", "=", "(", "\n", "restype_rigidgroup_base_atom37_idx", ".", "view", "(", "\n", "*", "(", "(", "1", ",", ")", "*", "batch_dims", ")", ",", "*", "restype_rigidgroup_base_atom37_idx", ".", "shape", "\n", ")", "\n", ")", "\n", "\n", "residx_rigidgroup_base_atom37_idx", "=", "batched_gather", "(", "\n", "restype_rigidgroup_base_atom37_idx", ",", "\n", "aatype", ",", "\n", "dim", "=", "-", "3", ",", "\n", "no_batch_dims", "=", "batch_dims", ",", "\n", ")", "\n", "\n", "base_atom_pos", "=", "batched_gather", "(", "\n", "all_atom_positions", ",", "\n", "residx_rigidgroup_base_atom37_idx", ",", "\n", "dim", "=", "-", "2", ",", "\n", "no_batch_dims", "=", "len", "(", "all_atom_positions", ".", "shape", "[", ":", "-", "2", "]", ")", ",", "\n", ")", "\n", "\n", "gt_frames", "=", "Rigid", ".", "from_3_points", "(", "\n", "p_neg_x_axis", "=", "base_atom_pos", "[", "...", ",", "0", ",", ":", "]", ",", "\n", "origin", "=", "base_atom_pos", "[", "...", ",", "1", ",", ":", "]", ",", "\n", "p_xy_plane", "=", "base_atom_pos", "[", "...", ",", "2", ",", ":", "]", ",", "\n", "eps", "=", "eps", ",", "\n", ")", "\n", "\n", "group_exists", "=", "batched_gather", "(", "\n", "restype_rigidgroup_mask", ",", "\n", "aatype", ",", "\n", "dim", "=", "-", "2", ",", "\n", "no_batch_dims", "=", "batch_dims", ",", "\n", ")", "\n", "\n", "gt_atoms_exist", "=", "batched_gather", "(", "\n", "all_atom_mask", ",", "\n", "residx_rigidgroup_base_atom37_idx", ",", "\n", "dim", "=", "-", "1", ",", "\n", "no_batch_dims", "=", "len", "(", "all_atom_mask", ".", "shape", "[", ":", "-", "1", "]", ")", ",", "\n", ")", "\n", "gt_exists", "=", "torch", ".", "min", "(", "gt_atoms_exist", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "*", "group_exists", "\n", "\n", "rots", "=", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "all_atom_mask", ".", "dtype", ",", "device", "=", "aatype", ".", "device", ")", "\n", "rots", "=", "torch", ".", "tile", "(", "rots", ",", "(", "*", "(", "(", "1", ",", ")", "*", "batch_dims", ")", ",", "8", ",", "1", ",", "1", ")", ")", "\n", "rots", "[", "...", ",", "0", ",", "0", ",", "0", "]", "=", "-", "1", "\n", "rots", "[", "...", ",", "0", ",", "2", ",", "2", "]", "=", "-", "1", "\n", "rots", "=", "Rotation", "(", "rot_mats", "=", "rots", ")", "\n", "\n", "gt_frames", "=", "gt_frames", ".", "compose", "(", "Rigid", "(", "rots", ",", "None", ")", ")", "\n", "\n", "restype_rigidgroup_is_ambiguous", "=", "all_atom_mask", ".", "new_zeros", "(", "\n", "*", "(", "(", "1", ",", ")", "*", "batch_dims", ")", ",", "21", ",", "8", "\n", ")", "\n", "restype_rigidgroup_rots", "=", "torch", ".", "eye", "(", "\n", "3", ",", "dtype", "=", "all_atom_mask", ".", "dtype", ",", "device", "=", "aatype", ".", "device", "\n", ")", "\n", "restype_rigidgroup_rots", "=", "torch", ".", "tile", "(", "\n", "restype_rigidgroup_rots", ",", "\n", "(", "*", "(", "(", "1", ",", ")", "*", "batch_dims", ")", ",", "21", ",", "8", ",", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "for", "resname", ",", "_", "in", "rc", ".", "residue_atom_renaming_swaps", ".", "items", "(", ")", ":", "\n", "        ", "restype", "=", "rc", ".", "restype_order", "[", "rc", ".", "restype_3to1", "[", "resname", "]", "]", "\n", "chi_idx", "=", "int", "(", "sum", "(", "rc", ".", "chi_angles_mask", "[", "restype", "]", ")", "-", "1", ")", "\n", "restype_rigidgroup_is_ambiguous", "[", "...", ",", "restype", ",", "chi_idx", "+", "4", "]", "=", "1", "\n", "restype_rigidgroup_rots", "[", "...", ",", "restype", ",", "chi_idx", "+", "4", ",", "1", ",", "1", "]", "=", "-", "1", "\n", "restype_rigidgroup_rots", "[", "...", ",", "restype", ",", "chi_idx", "+", "4", ",", "2", ",", "2", "]", "=", "-", "1", "\n", "\n", "", "residx_rigidgroup_is_ambiguous", "=", "batched_gather", "(", "\n", "restype_rigidgroup_is_ambiguous", ",", "\n", "aatype", ",", "\n", "dim", "=", "-", "2", ",", "\n", "no_batch_dims", "=", "batch_dims", ",", "\n", ")", "\n", "\n", "residx_rigidgroup_ambiguity_rot", "=", "batched_gather", "(", "\n", "restype_rigidgroup_rots", ",", "\n", "aatype", ",", "\n", "dim", "=", "-", "4", ",", "\n", "no_batch_dims", "=", "batch_dims", ",", "\n", ")", "\n", "\n", "residx_rigidgroup_ambiguity_rot", "=", "Rotation", "(", "\n", "rot_mats", "=", "residx_rigidgroup_ambiguity_rot", "\n", ")", "\n", "alt_gt_frames", "=", "gt_frames", ".", "compose", "(", "\n", "Rigid", "(", "residx_rigidgroup_ambiguity_rot", ",", "None", ")", "\n", ")", "\n", "\n", "gt_frames_tensor", "=", "gt_frames", ".", "to_tensor_4x4", "(", ")", "\n", "alt_gt_frames_tensor", "=", "alt_gt_frames", ".", "to_tensor_4x4", "(", ")", "\n", "\n", "protein", "[", "\"rigidgroups_gt_frames\"", "]", "=", "gt_frames_tensor", "\n", "protein", "[", "\"rigidgroups_gt_exists\"", "]", "=", "gt_exists", "\n", "protein", "[", "\"rigidgroups_group_exists\"", "]", "=", "group_exists", "\n", "protein", "[", "\"rigidgroups_group_is_ambiguous\"", "]", "=", "residx_rigidgroup_is_ambiguous", "\n", "protein", "[", "\"rigidgroups_alt_gt_frames\"", "]", "=", "alt_gt_frames_tensor", "\n", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.get_chi_atom_indices": [[913, 938], ["chi_atom_indices.append", "range", "chi_atom_indices.append", "atom_indices.append", "atom_indices.append", "len"], "function", ["None"], ["", "def", "get_chi_atom_indices", "(", ")", ":", "\n", "    ", "\"\"\"Returns atom indices needed to compute chi angles for all residue types.\n\n    Returns:\n      A tensor of shape [residue_types=21, chis=4, atoms=4]. The residue types are\n      in the order specified in rc.restypes + unknown residue type\n      at the end. For chi angles which are not defined on the residue, the\n      positions indices are by default set to 0.\n    \"\"\"", "\n", "chi_atom_indices", "=", "[", "]", "\n", "for", "residue_name", "in", "rc", ".", "restypes", ":", "\n", "        ", "residue_name", "=", "rc", ".", "restype_1to3", "[", "residue_name", "]", "\n", "residue_chi_angles", "=", "rc", ".", "chi_angles_atoms", "[", "residue_name", "]", "\n", "atom_indices", "=", "[", "]", "\n", "for", "chi_angle", "in", "residue_chi_angles", ":", "\n", "            ", "atom_indices", ".", "append", "(", "[", "rc", ".", "atom_order", "[", "atom", "]", "for", "atom", "in", "chi_angle", "]", ")", "\n", "", "for", "_", "in", "range", "(", "4", "-", "len", "(", "atom_indices", ")", ")", ":", "\n", "            ", "atom_indices", ".", "append", "(", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", ")", "# For chi angles not defined on the AA.", "\n", "", "chi_atom_indices", ".", "append", "(", "atom_indices", ")", "\n", "\n", "", "chi_atom_indices", ".", "append", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", "*", "4", ")", "# For UNKNOWN residue.", "\n", "\n", "return", "chi_atom_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.atom37_to_torsion_angles": [[940, 1107], ["torch.clamp", "all_atom_positions.new_zeros", "torch.cat", "all_atom_mask.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.as_tensor", "fastfold.utils.tensor_utils.batched_gather", "list", "all_atom_mask.new_tensor.append", "all_atom_mask.new_tensor", "fastfold.utils.tensor_utils.batched_gather", "torch.prod", "torch.cat", "torch.cat", "fastfold.utils.rigid_utils.Rigid.from_3_points", "Rigid.from_3_points.invert().apply", "torch.stack", "torch.sqrt", "torch.cat", "torch.prod", "torch.prod", "torch.prod", "torch.prod", "data_transforms.get_chi_atom_indices", "len", "torch.stack.new_tensor", "len", "Rigid.from_3_points.invert", "torch.sum", "all_atom_mask.new_tensor", "all_atom_mask.new_ones", "torch.square", "len", "slice"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.batched_gather", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.tensor_utils.batched_gather", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.from_3_points", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.apply", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.cat", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.get_chi_atom_indices", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rigid.invert"], ["", "@", "curry1", "\n", "def", "atom37_to_torsion_angles", "(", "\n", "protein", ",", "\n", "prefix", "=", "\"\"", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Convert coordinates to torsion angles.\n\n    This function is extremely sensitive to floating point imprecisions\n    and should be run with double precision whenever possible.\n\n    Args:\n        Dict containing:\n            * (prefix)aatype:\n                [*, N_res] residue indices\n            * (prefix)all_atom_positions:\n                [*, N_res, 37, 3] atom positions (in atom37\n                format)\n            * (prefix)all_atom_mask:\n                [*, N_res, 37] atom position mask\n    Returns:\n        The same dictionary updated with the following features:\n\n        \"(prefix)torsion_angles_sin_cos\" ([*, N_res, 7, 2])\n            Torsion angles\n        \"(prefix)alt_torsion_angles_sin_cos\" ([*, N_res, 7, 2])\n            Alternate torsion angles (accounting for 180-degree symmetry)\n        \"(prefix)torsion_angles_mask\" ([*, N_res, 7])\n            Torsion angles mask\n    \"\"\"", "\n", "aatype", "=", "protein", "[", "prefix", "+", "\"aatype\"", "]", "\n", "all_atom_positions", "=", "protein", "[", "prefix", "+", "\"all_atom_positions\"", "]", "\n", "all_atom_mask", "=", "protein", "[", "prefix", "+", "\"all_atom_mask\"", "]", "\n", "\n", "aatype", "=", "torch", ".", "clamp", "(", "aatype", ",", "max", "=", "20", ")", "\n", "\n", "pad", "=", "all_atom_positions", ".", "new_zeros", "(", "\n", "[", "*", "all_atom_positions", ".", "shape", "[", ":", "-", "3", "]", ",", "1", ",", "37", ",", "3", "]", "\n", ")", "\n", "prev_all_atom_positions", "=", "torch", ".", "cat", "(", "\n", "[", "pad", ",", "all_atom_positions", "[", "...", ",", ":", "-", "1", ",", ":", ",", ":", "]", "]", ",", "dim", "=", "-", "3", "\n", ")", "\n", "\n", "pad", "=", "all_atom_mask", ".", "new_zeros", "(", "[", "*", "all_atom_mask", ".", "shape", "[", ":", "-", "2", "]", ",", "1", ",", "37", "]", ")", "\n", "prev_all_atom_mask", "=", "torch", ".", "cat", "(", "[", "pad", ",", "all_atom_mask", "[", "...", ",", ":", "-", "1", ",", ":", "]", "]", ",", "dim", "=", "-", "2", ")", "\n", "\n", "pre_omega_atom_pos", "=", "torch", ".", "cat", "(", "\n", "[", "prev_all_atom_positions", "[", "...", ",", "1", ":", "3", ",", ":", "]", ",", "all_atom_positions", "[", "...", ",", ":", "2", ",", ":", "]", "]", ",", "\n", "dim", "=", "-", "2", ",", "\n", ")", "\n", "phi_atom_pos", "=", "torch", ".", "cat", "(", "\n", "[", "prev_all_atom_positions", "[", "...", ",", "2", ":", "3", ",", ":", "]", ",", "all_atom_positions", "[", "...", ",", ":", "3", ",", ":", "]", "]", ",", "\n", "dim", "=", "-", "2", ",", "\n", ")", "\n", "psi_atom_pos", "=", "torch", ".", "cat", "(", "\n", "[", "all_atom_positions", "[", "...", ",", ":", "3", ",", ":", "]", ",", "all_atom_positions", "[", "...", ",", "4", ":", "5", ",", ":", "]", "]", ",", "\n", "dim", "=", "-", "2", ",", "\n", ")", "\n", "\n", "pre_omega_mask", "=", "torch", ".", "prod", "(", "\n", "prev_all_atom_mask", "[", "...", ",", "1", ":", "3", "]", ",", "dim", "=", "-", "1", "\n", ")", "*", "torch", ".", "prod", "(", "all_atom_mask", "[", "...", ",", ":", "2", "]", ",", "dim", "=", "-", "1", ")", "\n", "phi_mask", "=", "prev_all_atom_mask", "[", "...", ",", "2", "]", "*", "torch", ".", "prod", "(", "\n", "all_atom_mask", "[", "...", ",", ":", "3", "]", ",", "dim", "=", "-", "1", ",", "dtype", "=", "all_atom_mask", ".", "dtype", "\n", ")", "\n", "psi_mask", "=", "(", "\n", "torch", ".", "prod", "(", "all_atom_mask", "[", "...", ",", ":", "3", "]", ",", "dim", "=", "-", "1", ",", "dtype", "=", "all_atom_mask", ".", "dtype", ")", "\n", "*", "all_atom_mask", "[", "...", ",", "4", "]", "\n", ")", "\n", "\n", "chi_atom_indices", "=", "torch", ".", "as_tensor", "(", "\n", "get_chi_atom_indices", "(", ")", ",", "device", "=", "aatype", ".", "device", "\n", ")", "\n", "\n", "atom_indices", "=", "chi_atom_indices", "[", "...", ",", "aatype", ",", ":", ",", ":", "]", "\n", "chis_atom_pos", "=", "batched_gather", "(", "\n", "all_atom_positions", ",", "atom_indices", ",", "-", "2", ",", "len", "(", "atom_indices", ".", "shape", "[", ":", "-", "2", "]", ")", "\n", ")", "\n", "\n", "chi_angles_mask", "=", "list", "(", "rc", ".", "chi_angles_mask", ")", "\n", "chi_angles_mask", ".", "append", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "chi_angles_mask", "=", "all_atom_mask", ".", "new_tensor", "(", "chi_angles_mask", ")", "\n", "\n", "chis_mask", "=", "chi_angles_mask", "[", "aatype", ",", ":", "]", "\n", "\n", "chi_angle_atoms_mask", "=", "batched_gather", "(", "\n", "all_atom_mask", ",", "\n", "atom_indices", ",", "\n", "dim", "=", "-", "1", ",", "\n", "no_batch_dims", "=", "len", "(", "atom_indices", ".", "shape", "[", ":", "-", "2", "]", ")", ",", "\n", ")", "\n", "chi_angle_atoms_mask", "=", "torch", ".", "prod", "(", "\n", "chi_angle_atoms_mask", ",", "dim", "=", "-", "1", ",", "dtype", "=", "chi_angle_atoms_mask", ".", "dtype", "\n", ")", "\n", "chis_mask", "=", "chis_mask", "*", "chi_angle_atoms_mask", "\n", "\n", "torsions_atom_pos", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "pre_omega_atom_pos", "[", "...", ",", "None", ",", ":", ",", ":", "]", ",", "\n", "phi_atom_pos", "[", "...", ",", "None", ",", ":", ",", ":", "]", ",", "\n", "psi_atom_pos", "[", "...", ",", "None", ",", ":", ",", ":", "]", ",", "\n", "chis_atom_pos", ",", "\n", "]", ",", "\n", "dim", "=", "-", "3", ",", "\n", ")", "\n", "\n", "torsion_angles_mask", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "pre_omega_mask", "[", "...", ",", "None", "]", ",", "\n", "phi_mask", "[", "...", ",", "None", "]", ",", "\n", "psi_mask", "[", "...", ",", "None", "]", ",", "\n", "chis_mask", ",", "\n", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "\n", "torsion_frames", "=", "Rigid", ".", "from_3_points", "(", "\n", "torsions_atom_pos", "[", "...", ",", "1", ",", ":", "]", ",", "\n", "torsions_atom_pos", "[", "...", ",", "2", ",", ":", "]", ",", "\n", "torsions_atom_pos", "[", "...", ",", "0", ",", ":", "]", ",", "\n", "eps", "=", "1e-8", ",", "\n", ")", "\n", "\n", "fourth_atom_rel_pos", "=", "torsion_frames", ".", "invert", "(", ")", ".", "apply", "(", "\n", "torsions_atom_pos", "[", "...", ",", "3", ",", ":", "]", "\n", ")", "\n", "\n", "torsion_angles_sin_cos", "=", "torch", ".", "stack", "(", "\n", "[", "fourth_atom_rel_pos", "[", "...", ",", "2", "]", ",", "fourth_atom_rel_pos", "[", "...", ",", "1", "]", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n", "\n", "denom", "=", "torch", ".", "sqrt", "(", "\n", "torch", ".", "sum", "(", "\n", "torch", ".", "square", "(", "torsion_angles_sin_cos", ")", ",", "\n", "dim", "=", "-", "1", ",", "\n", "dtype", "=", "torsion_angles_sin_cos", ".", "dtype", ",", "\n", "keepdims", "=", "True", ",", "\n", ")", "\n", "+", "1e-8", "\n", ")", "\n", "torsion_angles_sin_cos", "=", "torsion_angles_sin_cos", "/", "denom", "\n", "\n", "torsion_angles_sin_cos", "=", "torsion_angles_sin_cos", "*", "all_atom_mask", ".", "new_tensor", "(", "\n", "[", "1.0", ",", "1.0", ",", "-", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ",", "\n", ")", "[", "(", "(", "None", ",", ")", "*", "len", "(", "torsion_angles_sin_cos", ".", "shape", "[", ":", "-", "2", "]", ")", ")", "+", "(", "slice", "(", "None", ")", ",", "None", ")", "]", "\n", "\n", "chi_is_ambiguous", "=", "torsion_angles_sin_cos", ".", "new_tensor", "(", "\n", "rc", ".", "chi_pi_periodic", ",", "\n", ")", "[", "aatype", ",", "...", "]", "\n", "\n", "mirror_torsion_angles", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "all_atom_mask", ".", "new_ones", "(", "*", "aatype", ".", "shape", ",", "3", ")", ",", "\n", "1.0", "-", "2.0", "*", "chi_is_ambiguous", ",", "\n", "]", ",", "\n", "dim", "=", "-", "1", ",", "\n", ")", "\n", "\n", "alt_torsion_angles_sin_cos", "=", "(", "\n", "torsion_angles_sin_cos", "*", "mirror_torsion_angles", "[", "...", ",", "None", "]", "\n", ")", "\n", "\n", "protein", "[", "prefix", "+", "\"torsion_angles_sin_cos\"", "]", "=", "torsion_angles_sin_cos", "\n", "protein", "[", "prefix", "+", "\"alt_torsion_angles_sin_cos\"", "]", "=", "alt_torsion_angles_sin_cos", "\n", "protein", "[", "prefix", "+", "\"torsion_angles_mask\"", "]", "=", "torsion_angles_mask", "\n", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.get_backbone_frames": [[1109, 1117], ["None"], "function", ["None"], ["", "def", "get_backbone_frames", "(", "protein", ")", ":", "\n", "# DISCREPANCY: AlphaFold uses tensor_7s here. I don't know why.", "\n", "    ", "protein", "[", "\"backbone_rigid_tensor\"", "]", "=", "protein", "[", "\"rigidgroups_gt_frames\"", "]", "[", "\n", "...", ",", "0", ",", ":", ",", ":", "\n", "]", "\n", "protein", "[", "\"backbone_rigid_mask\"", "]", "=", "protein", "[", "\"rigidgroups_gt_exists\"", "]", "[", "...", ",", "0", "]", "\n", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.get_chi_angles": [[1119, 1127], ["[].to", "[].to"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to", "home.repos.pwc.inspect_result.hpcaitech_fastfold.utils.rigid_utils.Rotation.to"], ["", "def", "get_chi_angles", "(", "protein", ")", ":", "\n", "    ", "dtype", "=", "protein", "[", "\"all_atom_mask\"", "]", ".", "dtype", "\n", "protein", "[", "\"chi_angles_sin_cos\"", "]", "=", "(", "\n", "protein", "[", "\"torsion_angles_sin_cos\"", "]", "[", "...", ",", "3", ":", ",", ":", "]", "\n", ")", ".", "to", "(", "dtype", ")", "\n", "protein", "[", "\"chi_mask\"", "]", "=", "protein", "[", "\"torsion_angles_mask\"", "]", "[", "...", ",", "3", ":", "]", ".", "to", "(", "dtype", ")", "\n", "\n", "return", "protein", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.data_transforms.random_crop_to_size": [[1129, 1211], ["torch.Generator", "min", "min", "data_transforms.random_crop_to_size._randint"], "function", ["None"], ["", "@", "curry1", "\n", "def", "random_crop_to_size", "(", "\n", "protein", ",", "\n", "crop_size", ",", "\n", "max_templates", ",", "\n", "shape_schema", ",", "\n", "subsample_templates", "=", "False", ",", "\n", "seed", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Crop randomly to `crop_size`, or keep as is if shorter than that.\"\"\"", "\n", "# We want each ensemble to be cropped the same way", "\n", "g", "=", "torch", ".", "Generator", "(", "device", "=", "protein", "[", "\"seq_length\"", "]", ".", "device", ")", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "g", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "", "seq_length", "=", "protein", "[", "\"seq_length\"", "]", "\n", "\n", "if", "\"template_mask\"", "in", "protein", ":", "\n", "        ", "num_templates", "=", "protein", "[", "\"template_mask\"", "]", ".", "shape", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "num_templates", "=", "0", "\n", "\n", "# No need to subsample templates if there aren't any", "\n", "", "subsample_templates", "=", "subsample_templates", "and", "num_templates", "\n", "\n", "num_res_crop_size", "=", "min", "(", "int", "(", "seq_length", ")", ",", "crop_size", ")", "\n", "\n", "def", "_randint", "(", "lower", ",", "upper", ")", ":", "\n", "        ", "return", "int", "(", "torch", ".", "randint", "(", "\n", "lower", ",", "\n", "upper", "+", "1", ",", "\n", "(", "1", ",", ")", ",", "\n", "device", "=", "protein", "[", "\"seq_length\"", "]", ".", "device", ",", "\n", "generator", "=", "g", ",", "\n", ")", "[", "0", "]", ")", "\n", "\n", "", "if", "subsample_templates", ":", "\n", "        ", "templates_crop_start", "=", "_randint", "(", "0", ",", "num_templates", ")", "\n", "templates_select_indices", "=", "torch", ".", "randperm", "(", "\n", "num_templates", ",", "device", "=", "protein", "[", "\"seq_length\"", "]", ".", "device", ",", "generator", "=", "g", "\n", ")", "\n", "", "else", ":", "\n", "        ", "templates_crop_start", "=", "0", "\n", "\n", "", "num_templates_crop_size", "=", "min", "(", "\n", "num_templates", "-", "templates_crop_start", ",", "max_templates", "\n", ")", "\n", "\n", "n", "=", "seq_length", "-", "num_res_crop_size", "\n", "if", "\"use_clamped_fape\"", "in", "protein", "and", "protein", "[", "\"use_clamped_fape\"", "]", "==", "1.", ":", "\n", "        ", "right_anchor", "=", "n", "\n", "", "else", ":", "\n", "        ", "x", "=", "_randint", "(", "0", ",", "n", ")", "\n", "right_anchor", "=", "n", "-", "x", "\n", "\n", "", "num_res_crop_start", "=", "_randint", "(", "0", ",", "right_anchor", ")", "\n", "\n", "for", "k", ",", "v", "in", "protein", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "shape_schema", "or", "(", "\n", "\"template\"", "not", "in", "k", "and", "NUM_RES", "not", "in", "shape_schema", "[", "k", "]", "\n", ")", ":", "\n", "            ", "continue", "\n", "\n", "# randomly permute the templates before cropping them.", "\n", "", "if", "k", ".", "startswith", "(", "\"template\"", ")", "and", "subsample_templates", ":", "\n", "            ", "v", "=", "v", "[", "templates_select_indices", "]", "\n", "\n", "", "slices", "=", "[", "]", "\n", "for", "i", ",", "(", "dim_size", ",", "dim", ")", "in", "enumerate", "(", "zip", "(", "shape_schema", "[", "k", "]", ",", "v", ".", "shape", ")", ")", ":", "\n", "            ", "is_num_res", "=", "dim_size", "==", "NUM_RES", "\n", "if", "i", "==", "0", "and", "k", ".", "startswith", "(", "\"template\"", ")", ":", "\n", "                ", "crop_size", "=", "num_templates_crop_size", "\n", "crop_start", "=", "templates_crop_start", "\n", "", "else", ":", "\n", "                ", "crop_start", "=", "num_res_crop_start", "if", "is_num_res", "else", "0", "\n", "crop_size", "=", "num_res_crop_size", "if", "is_num_res", "else", "dim", "\n", "", "slices", ".", "append", "(", "slice", "(", "crop_start", ",", "crop_start", "+", "crop_size", ")", ")", "\n", "", "protein", "[", "k", "]", "=", "v", "[", "slices", "]", "\n", "\n", "", "protein", "[", "\"seq_length\"", "]", "=", "protein", "[", "\"seq_length\"", "]", ".", "new_tensor", "(", "num_res_crop_size", ")", "\n", "\n", "return", "protein", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates.TemplateHitFeaturizer.__init__": [[925, 995], ["glob.glob", "logging.error", "ValueError", "datetime.datetime.strptime", "logging.info", "templates._parse_release_dates", "logging.info", "templates._parse_obsolete", "os.path.join", "ValueError"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._parse_release_dates", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._parse_obsolete"], ["def", "__init__", "(", "\n", "self", ",", "\n", "mmcif_dir", ":", "str", ",", "\n", "max_template_date", ":", "str", ",", "\n", "max_hits", ":", "int", ",", "\n", "kalign_binary_path", ":", "str", ",", "\n", "release_dates_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "obsolete_pdbs_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "strict_error_check", ":", "bool", "=", "False", ",", "\n", "_shuffle_top_k_prefiltered", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "_zero_center_positions", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Initializes the Template Search.\n\n        Args:\n            mmcif_dir: Path to a directory with mmCIF structures. Once a template ID\n                is found by HHSearch, this directory is used to retrieve the template\n                data.\n            max_template_date: The maximum date permitted for template structures. No\n                template with date higher than this date will be returned. In ISO8601\n                date format, YYYY-MM-DD.\n            max_hits: The maximum number of templates that will be returned.\n            kalign_binary_path: The path to a kalign executable used for template\n                realignment.\n            release_dates_path: An optional path to a file with a mapping from PDB IDs\n                to their release dates. Thanks to this we don't have to redundantly\n                parse mmCIF files to get that information.\n            obsolete_pdbs_path: An optional path to a file containing a mapping from\n                obsolete PDB IDs to the PDB IDs of their replacements.\n            strict_error_check: If True, then the following will be treated as errors:\n                * If any template date is after the max_template_date.\n                * If any template has identical PDB ID to the query.\n                * If any template is a duplicate of the query.\n                * Any feature computation errors.\n        \"\"\"", "\n", "self", ".", "_mmcif_dir", "=", "mmcif_dir", "\n", "if", "not", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_mmcif_dir", ",", "\"*.cif\"", ")", ")", ":", "\n", "            ", "logging", ".", "error", "(", "\"Could not find CIFs in %s\"", ",", "self", ".", "_mmcif_dir", ")", "\n", "raise", "ValueError", "(", "f\"Could not find CIFs in {self._mmcif_dir}\"", ")", "\n", "\n", "", "try", ":", "\n", "            ", "self", ".", "_max_template_date", "=", "datetime", ".", "datetime", ".", "strptime", "(", "\n", "max_template_date", ",", "\"%Y-%m-%d\"", "\n", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"max_template_date must be set and have format YYYY-MM-DD.\"", "\n", ")", "\n", "", "self", ".", "max_hits", "=", "max_hits", "\n", "self", ".", "_kalign_binary_path", "=", "kalign_binary_path", "\n", "self", ".", "_strict_error_check", "=", "strict_error_check", "\n", "\n", "if", "release_dates_path", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "\"Using precomputed release dates %s.\"", ",", "release_dates_path", "\n", ")", "\n", "self", ".", "_release_dates", "=", "_parse_release_dates", "(", "release_dates_path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_release_dates", "=", "{", "}", "\n", "\n", "", "if", "obsolete_pdbs_path", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "\"Using precomputed obsolete pdbs %s.\"", ",", "obsolete_pdbs_path", "\n", ")", "\n", "self", ".", "_obsolete_pdbs", "=", "_parse_obsolete", "(", "obsolete_pdbs_path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_obsolete_pdbs", "=", "{", "}", "\n", "\n", "", "self", ".", "_shuffle_top_k_prefiltered", "=", "_shuffle_top_k_prefiltered", "\n", "self", ".", "_zero_center_positions", "=", "_zero_center_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates.TemplateHitFeaturizer.get_templates": [[996, 1107], ["logging.info", "list", "list", "templates.TemplateSearchResult", "datetime.timedelta", "templates._prefilter_hit", "sorted", "range", "numpy.random.permutation", "templates._process_single_hit", "errors.append", "warnings.append", "list.append", "len", "errors.append", "warnings.append", "logging.info", "numpy.stack().astype", "numpy.array", "template_features[].append", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._prefilter_hit", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._process_single_hit"], ["", "def", "get_templates", "(", "\n", "self", ",", "\n", "query_sequence", ":", "str", ",", "\n", "query_pdb_code", ":", "Optional", "[", "str", "]", ",", "\n", "query_release_date", ":", "Optional", "[", "datetime", ".", "datetime", "]", ",", "\n", "hits", ":", "Sequence", "[", "parsers", ".", "TemplateHit", "]", ",", "\n", ")", "->", "TemplateSearchResult", ":", "\n", "        ", "\"\"\"Computes the templates for given query sequence (more details above).\"\"\"", "\n", "logging", ".", "info", "(", "\"Searching for template for: %s\"", ",", "query_pdb_code", ")", "\n", "\n", "template_features", "=", "{", "}", "\n", "for", "template_feature_name", "in", "TEMPLATE_FEATURES", ":", "\n", "            ", "template_features", "[", "template_feature_name", "]", "=", "[", "]", "\n", "\n", "# Always use a max_template_date. Set to query_release_date minus 60 days", "\n", "# if that's earlier.", "\n", "", "template_cutoff_date", "=", "self", ".", "_max_template_date", "\n", "if", "query_release_date", ":", "\n", "            ", "delta", "=", "datetime", ".", "timedelta", "(", "days", "=", "60", ")", "\n", "if", "query_release_date", "-", "delta", "<", "template_cutoff_date", ":", "\n", "                ", "template_cutoff_date", "=", "query_release_date", "-", "delta", "\n", "", "assert", "template_cutoff_date", "<", "query_release_date", "\n", "", "assert", "template_cutoff_date", "<=", "self", ".", "_max_template_date", "\n", "\n", "num_hits", "=", "0", "\n", "errors", "=", "[", "]", "\n", "warnings", "=", "[", "]", "\n", "\n", "filtered", "=", "[", "]", "\n", "for", "hit", "in", "hits", ":", "\n", "            ", "prefilter_result", "=", "_prefilter_hit", "(", "\n", "query_sequence", "=", "query_sequence", ",", "\n", "query_pdb_code", "=", "query_pdb_code", ",", "\n", "hit", "=", "hit", ",", "\n", "max_template_date", "=", "template_cutoff_date", ",", "\n", "release_dates", "=", "self", ".", "_release_dates", ",", "\n", "obsolete_pdbs", "=", "self", ".", "_obsolete_pdbs", ",", "\n", "strict_error_check", "=", "self", ".", "_strict_error_check", ",", "\n", ")", "\n", "\n", "if", "prefilter_result", ".", "error", ":", "\n", "                ", "errors", ".", "append", "(", "prefilter_result", ".", "error", ")", "\n", "\n", "", "if", "prefilter_result", ".", "warning", ":", "\n", "                ", "warnings", ".", "append", "(", "prefilter_result", ".", "warning", ")", "\n", "\n", "", "if", "prefilter_result", ".", "valid", ":", "\n", "                ", "filtered", ".", "append", "(", "hit", ")", "\n", "\n", "", "", "filtered", "=", "list", "(", "\n", "sorted", "(", "filtered", ",", "key", "=", "lambda", "x", ":", "x", ".", "sum_probs", ",", "reverse", "=", "True", ")", "\n", ")", "\n", "idx", "=", "list", "(", "range", "(", "len", "(", "filtered", ")", ")", ")", "\n", "if", "(", "self", ".", "_shuffle_top_k_prefiltered", ")", ":", "\n", "            ", "stk", "=", "self", ".", "_shuffle_top_k_prefiltered", "\n", "idx", "[", ":", "stk", "]", "=", "np", ".", "random", ".", "permutation", "(", "idx", "[", ":", "stk", "]", ")", "\n", "\n", "", "for", "i", "in", "idx", ":", "\n", "# We got all the templates we wanted, stop processing hits.", "\n", "            ", "if", "num_hits", ">=", "self", ".", "max_hits", ":", "\n", "                ", "break", "\n", "\n", "", "hit", "=", "filtered", "[", "i", "]", "\n", "\n", "result", "=", "_process_single_hit", "(", "\n", "query_sequence", "=", "query_sequence", ",", "\n", "query_pdb_code", "=", "query_pdb_code", ",", "\n", "hit", "=", "hit", ",", "\n", "mmcif_dir", "=", "self", ".", "_mmcif_dir", ",", "\n", "max_template_date", "=", "template_cutoff_date", ",", "\n", "release_dates", "=", "self", ".", "_release_dates", ",", "\n", "obsolete_pdbs", "=", "self", ".", "_obsolete_pdbs", ",", "\n", "strict_error_check", "=", "self", ".", "_strict_error_check", ",", "\n", "kalign_binary_path", "=", "self", ".", "_kalign_binary_path", ",", "\n", "_zero_center_positions", "=", "self", ".", "_zero_center_positions", ",", "\n", ")", "\n", "\n", "if", "result", ".", "error", ":", "\n", "                ", "errors", ".", "append", "(", "result", ".", "error", ")", "\n", "\n", "# There could be an error even if there are some results, e.g. thrown by", "\n", "# other unparsable chains in the same mmCIF file.", "\n", "", "if", "result", ".", "warning", ":", "\n", "                ", "warnings", ".", "append", "(", "result", ".", "warning", ")", "\n", "\n", "", "if", "result", ".", "features", "is", "None", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "\"Skipped invalid hit %s, error: %s, warning: %s\"", ",", "\n", "hit", ".", "name", ",", "\n", "result", ".", "error", ",", "\n", "result", ".", "warning", ",", "\n", ")", "\n", "", "else", ":", "\n", "# Increment the hit counter, since we got features out of this hit.", "\n", "                ", "num_hits", "+=", "1", "\n", "for", "k", "in", "template_features", ":", "\n", "                    ", "template_features", "[", "k", "]", ".", "append", "(", "result", ".", "features", "[", "k", "]", ")", "\n", "\n", "", "", "", "for", "name", "in", "template_features", ":", "\n", "            ", "if", "num_hits", ">", "0", ":", "\n", "                ", "template_features", "[", "name", "]", "=", "np", ".", "stack", "(", "\n", "template_features", "[", "name", "]", ",", "axis", "=", "0", "\n", ")", ".", "astype", "(", "TEMPLATE_FEATURES", "[", "name", "]", ")", "\n", "", "else", ":", "\n", "# Make sure the feature has correct dtype even if empty.", "\n", "                ", "template_features", "[", "name", "]", "=", "np", ".", "array", "(", "\n", "[", "]", ",", "dtype", "=", "TEMPLATE_FEATURES", "[", "name", "]", "\n", ")", "\n", "\n", "", "", "return", "TemplateSearchResult", "(", "\n", "features", "=", "template_features", ",", "errors", "=", "errors", ",", "warnings", "=", "warnings", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._get_pdb_id_and_chain": [[94, 102], ["re.match", "re.match.group().split", "ValueError", "pdb_id.lower", "re.match.group"], "function", ["None"], ["def", "_get_pdb_id_and_chain", "(", "hit", ":", "parsers", ".", "TemplateHit", ")", "->", "Tuple", "[", "str", ",", "str", "]", ":", "\n", "    ", "\"\"\"Returns PDB id and chain id for an HHSearch Hit.\"\"\"", "\n", "# PDB ID: 4 letters. Chain ID: 1+ alphanumeric letters or \".\" if unknown.", "\n", "id_match", "=", "re", ".", "match", "(", "r\"[a-zA-Z\\d]{4}_[a-zA-Z0-9.]+\"", ",", "hit", ".", "name", ")", "\n", "if", "not", "id_match", ":", "\n", "        ", "raise", "ValueError", "(", "f\"hit.name did not start with PDBID_chain: {hit.name}\"", ")", "\n", "", "pdb_id", ",", "chain_id", "=", "id_match", ".", "group", "(", "0", ")", ".", "split", "(", "\"_\"", ")", "\n", "return", "pdb_id", ".", "lower", "(", ")", ",", "chain_id", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._is_after_cutoff": [[104, 131], ["pdb_id.upper", "ValueError", "logging.info"], "function", ["None"], ["", "def", "_is_after_cutoff", "(", "\n", "pdb_id", ":", "str", ",", "\n", "release_dates", ":", "Mapping", "[", "str", ",", "datetime", ".", "datetime", "]", ",", "\n", "release_date_cutoff", ":", "Optional", "[", "datetime", ".", "datetime", "]", ",", "\n", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Checks if the template date is after the release date cutoff.\n\n    Args:\n        pdb_id: 4 letter pdb code.\n        release_dates: Dictionary mapping PDB ids to their structure release dates.\n        release_date_cutoff: Max release date that is valid for this query.\n\n    Returns:\n        True if the template release date is after the cutoff, False otherwise.\n    \"\"\"", "\n", "pdb_id_upper", "=", "pdb_id", ".", "upper", "(", ")", "\n", "if", "release_date_cutoff", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"The release_date_cutoff must not be None.\"", ")", "\n", "", "if", "pdb_id_upper", "in", "release_dates", ":", "\n", "        ", "return", "release_dates", "[", "pdb_id_upper", "]", ">", "release_date_cutoff", "\n", "", "else", ":", "\n", "# Since this is just a quick prefilter to reduce the number of mmCIF files", "\n", "# we need to parse, we don't have to worry about returning True here.", "\n", "        ", "logging", ".", "info", "(", "\n", "\"Template structure not in release dates dict: %s\"", ",", "pdb_id", "\n", ")", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._parse_obsolete": [[133, 147], ["open", "line.strip.strip", "line.strip.startswith", "line[].lower", "line[].lower", "len"], "function", ["None"], ["", "", "def", "_parse_obsolete", "(", "obsolete_file_path", ":", "str", ")", "->", "Mapping", "[", "str", ",", "str", "]", ":", "\n", "    ", "\"\"\"Parses the data file from PDB that lists which PDB ids are obsolete.\"\"\"", "\n", "with", "open", "(", "obsolete_file_path", ")", "as", "f", ":", "\n", "        ", "result", "=", "{", "}", "\n", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "# We skip obsolete entries that don't contain a mapping to a new entry.", "\n", "if", "line", ".", "startswith", "(", "\"OBSLTE\"", ")", "and", "len", "(", "line", ")", ">", "30", ":", "\n", "# Format:    Date      From     To", "\n", "# 'OBSLTE    31-JUL-94 116L     216L'", "\n", "                ", "from_id", "=", "line", "[", "20", ":", "24", "]", ".", "lower", "(", ")", "\n", "to_id", "=", "line", "[", "29", ":", "33", "]", ".", "lower", "(", ")", "\n", "result", "[", "from_id", "]", "=", "to_id", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates.generate_release_dates_cache": [[149, 172], ["os.listdir", "f.endswith", "open", "fp.write", "os.path.join", "fastfold.data.mmcif_parsing.parse", "json.dumps", "open", "fp.read", "os.path.splitext", "logging.info"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.parse"], ["", "", "def", "generate_release_dates_cache", "(", "mmcif_dir", ":", "str", ",", "out_path", ":", "str", ")", ":", "\n", "    ", "dates", "=", "{", "}", "\n", "for", "f", "in", "os", ".", "listdir", "(", "mmcif_dir", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\".cif\"", ")", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "mmcif_dir", ",", "f", ")", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "fp", ":", "\n", "                ", "mmcif_string", "=", "fp", ".", "read", "(", ")", "\n", "\n", "", "file_id", "=", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "\n", "mmcif", "=", "mmcif_parsing", ".", "parse", "(", "\n", "file_id", "=", "file_id", ",", "mmcif_string", "=", "mmcif_string", "\n", ")", "\n", "if", "mmcif", ".", "mmcif_object", "is", "None", ":", "\n", "                ", "logging", ".", "info", "(", "f\"Failed to parse {f}. Skipping...\"", ")", "\n", "continue", "\n", "\n", "", "mmcif", "=", "mmcif", ".", "mmcif_object", "\n", "release_date", "=", "mmcif", ".", "header", "[", "\"release_date\"", "]", "\n", "\n", "dates", "[", "file_id", "]", "=", "release_date", "\n", "\n", "", "", "with", "open", "(", "out_path", ",", "\"r\"", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "json", ".", "dumps", "(", "dates", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._parse_release_dates": [[174, 184], ["open", "json.load", "pdb.upper", "fastfold.data.tools.utils.to_date", "json.load.items", "d.items"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.to_date"], ["", "", "def", "_parse_release_dates", "(", "path", ":", "str", ")", "->", "Mapping", "[", "str", ",", "datetime", ".", "datetime", "]", ":", "\n", "    ", "\"\"\"Parses release dates file, returns a mapping from PDBs to release dates.\"\"\"", "\n", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "fp", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "return", "{", "\n", "pdb", ".", "upper", "(", ")", ":", "to_date", "(", "v", ")", "\n", "for", "pdb", ",", "d", "in", "data", ".", "items", "(", ")", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "\n", "if", "k", "==", "\"release_date\"", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._assess_hhsearch_hit": [[187, 264], ["hit.hit_sequence.replace", "templates._is_after_cutoff", "len", "float", "len", "templates.DateError", "templates.AlignRatioError", "templates.DuplicateError", "len", "templates.LengthError", "len", "query_pdb_code.lower", "hit_pdb_code.lower", "templates.PdbIdError", "hit_pdb_code.upper", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._is_after_cutoff"], ["", "def", "_assess_hhsearch_hit", "(", "\n", "hit", ":", "parsers", ".", "TemplateHit", ",", "\n", "hit_pdb_code", ":", "str", ",", "\n", "query_sequence", ":", "str", ",", "\n", "query_pdb_code", ":", "Optional", "[", "str", "]", ",", "\n", "release_dates", ":", "Mapping", "[", "str", ",", "datetime", ".", "datetime", "]", ",", "\n", "release_date_cutoff", ":", "datetime", ".", "datetime", ",", "\n", "max_subsequence_ratio", ":", "float", "=", "0.95", ",", "\n", "min_align_ratio", ":", "float", "=", "0.1", ",", "\n", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determines if template is valid (without parsing the template mmcif file).\n\n    Args:\n        hit: HhrHit for the template.\n        hit_pdb_code: The 4 letter pdb code of the template hit. This might be\n            different from the value in the actual hit since the original pdb might\n            have become obsolete.\n        query_sequence: Amino acid sequence of the query.\n        query_pdb_code: 4 letter pdb code of the query.\n        release_dates: Dictionary mapping pdb codes to their structure release\n            dates.\n        release_date_cutoff: Max release date that is valid for this query.\n        max_subsequence_ratio: Exclude any exact matches with this much overlap.\n        min_align_ratio: Minimum overlap between the template and query.\n\n    Returns:\n        True if the hit passed the prefilter. Raises an exception otherwise.\n\n    Raises:\n        DateError: If the hit date was after the max allowed date.\n        PdbIdError: If the hit PDB ID was identical to the query.\n        AlignRatioError: If the hit align ratio to the query was too small.\n        DuplicateError: If the hit was an exact subsequence of the query.\n        LengthError: If the hit was too short.\n    \"\"\"", "\n", "aligned_cols", "=", "hit", ".", "aligned_cols", "\n", "align_ratio", "=", "aligned_cols", "/", "len", "(", "query_sequence", ")", "\n", "\n", "template_sequence", "=", "hit", ".", "hit_sequence", ".", "replace", "(", "\"-\"", ",", "\"\"", ")", "\n", "length_ratio", "=", "float", "(", "len", "(", "template_sequence", ")", ")", "/", "len", "(", "query_sequence", ")", "\n", "\n", "# Check whether the template is a large subsequence or duplicate of original", "\n", "# query. This can happen due to duplicate entries in the PDB database.", "\n", "duplicate", "=", "(", "\n", "template_sequence", "in", "query_sequence", "\n", "and", "length_ratio", ">", "max_subsequence_ratio", "\n", ")", "\n", "\n", "if", "_is_after_cutoff", "(", "hit_pdb_code", ",", "release_dates", ",", "release_date_cutoff", ")", ":", "\n", "        ", "date", "=", "release_dates", "[", "hit_pdb_code", ".", "upper", "(", ")", "]", "\n", "raise", "DateError", "(", "\n", "f\"Date ({date}) > max template date \"", "\n", "f\"({release_date_cutoff}).\"", "\n", ")", "\n", "\n", "", "if", "query_pdb_code", "is", "not", "None", ":", "\n", "        ", "if", "query_pdb_code", ".", "lower", "(", ")", "==", "hit_pdb_code", ".", "lower", "(", ")", ":", "\n", "            ", "raise", "PdbIdError", "(", "\"PDB code identical to Query PDB code.\"", ")", "\n", "\n", "", "", "if", "align_ratio", "<=", "min_align_ratio", ":", "\n", "        ", "raise", "AlignRatioError", "(", "\n", "\"Proportion of residues aligned to query too small. \"", "\n", "f\"Align ratio: {align_ratio}.\"", "\n", ")", "\n", "\n", "", "if", "duplicate", ":", "\n", "        ", "raise", "DuplicateError", "(", "\n", "\"Template is an exact subsequence of query with large \"", "\n", "f\"coverage. Length ratio: {length_ratio}.\"", "\n", ")", "\n", "\n", "", "if", "len", "(", "template_sequence", ")", "<", "10", ":", "\n", "        ", "raise", "LengthError", "(", "\n", "f\"Template too short. Length: {len(template_sequence)}.\"", "\n", ")", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._find_template_in_pdb": [[266, 336], ["mmcif_object.chain_to_seqres.get", "mmcif_object.chain_to_seqres.items", "re.compile", "mmcif_object.chain_to_seqres.items", "templates.SequenceNotInTemplateError", "logging.info", "mmcif_object.chain_to_seqres.get.find", "re.search", "logging.info", "mmcif_object.chain_to_seqres.get.find", "logging.info", "re.search.start"], "function", ["None"], ["", "def", "_find_template_in_pdb", "(", "\n", "template_chain_id", ":", "str", ",", "\n", "template_sequence", ":", "str", ",", "\n", "mmcif_object", ":", "mmcif_parsing", ".", "MmcifObject", ",", "\n", ")", "->", "Tuple", "[", "str", ",", "str", ",", "int", "]", ":", "\n", "    ", "\"\"\"Tries to find the template chain in the given pdb file.\n\n    This method tries the three following things in order:\n        1. Tries if there is an exact match in both the chain ID and the sequence.\n             If yes, the chain sequence is returned. Otherwise:\n        2. Tries if there is an exact match only in the sequence.\n             If yes, the chain sequence is returned. Otherwise:\n        3. Tries if there is a fuzzy match (X = wildcard) in the sequence.\n             If yes, the chain sequence is returned.\n    If none of these succeed, a SequenceNotInTemplateError is thrown.\n\n    Args:\n        template_chain_id: The template chain ID.\n        template_sequence: The template chain sequence.\n        mmcif_object: The PDB object to search for the template in.\n\n    Returns:\n        A tuple with:\n        * The chain sequence that was found to match the template in the PDB object.\n        * The ID of the chain that is being returned.\n        * The offset where the template sequence starts in the chain sequence.\n\n    Raises:\n        SequenceNotInTemplateError: If no match is found after the steps described\n            above.\n    \"\"\"", "\n", "# Try if there is an exact match in both the chain ID and the (sub)sequence.", "\n", "pdb_id", "=", "mmcif_object", ".", "file_id", "\n", "chain_sequence", "=", "mmcif_object", ".", "chain_to_seqres", ".", "get", "(", "template_chain_id", ")", "\n", "if", "chain_sequence", "and", "(", "template_sequence", "in", "chain_sequence", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\n", "\"Found an exact template match %s_%s.\"", ",", "pdb_id", ",", "template_chain_id", "\n", ")", "\n", "mapping_offset", "=", "chain_sequence", ".", "find", "(", "template_sequence", ")", "\n", "return", "chain_sequence", ",", "template_chain_id", ",", "mapping_offset", "\n", "\n", "# Try if there is an exact match in the (sub)sequence only.", "\n", "", "for", "chain_id", ",", "chain_sequence", "in", "mmcif_object", ".", "chain_to_seqres", ".", "items", "(", ")", ":", "\n", "        ", "if", "chain_sequence", "and", "(", "template_sequence", "in", "chain_sequence", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"Found a sequence-only match %s_%s.\"", ",", "pdb_id", ",", "chain_id", ")", "\n", "mapping_offset", "=", "chain_sequence", ".", "find", "(", "template_sequence", ")", "\n", "return", "chain_sequence", ",", "chain_id", ",", "mapping_offset", "\n", "\n", "# Return a chain sequence that fuzzy matches (X = wildcard) the template.", "\n", "# Make parentheses unnamed groups (?:_) to avoid the 100 named groups limit.", "\n", "", "", "regex", "=", "[", "\".\"", "if", "aa", "==", "\"X\"", "else", "\"(?:%s|X)\"", "%", "aa", "for", "aa", "in", "template_sequence", "]", "\n", "regex", "=", "re", ".", "compile", "(", "\"\"", ".", "join", "(", "regex", ")", ")", "\n", "for", "chain_id", ",", "chain_sequence", "in", "mmcif_object", ".", "chain_to_seqres", ".", "items", "(", ")", ":", "\n", "        ", "match", "=", "re", ".", "search", "(", "regex", ",", "chain_sequence", ")", "\n", "if", "match", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "\"Found a fuzzy sequence-only match %s_%s.\"", ",", "pdb_id", ",", "chain_id", "\n", ")", "\n", "mapping_offset", "=", "match", ".", "start", "(", ")", "\n", "return", "chain_sequence", ",", "chain_id", ",", "mapping_offset", "\n", "\n", "# No hits, raise an error.", "\n", "", "", "raise", "SequenceNotInTemplateError", "(", "\n", "\"Could not find the template sequence in %s_%s. Template sequence: %s, \"", "\n", "\"chain_to_seqres: %s\"", "\n", "%", "(", "\n", "pdb_id", ",", "\n", "template_chain_id", ",", "\n", "template_sequence", ",", "\n", "mmcif_object", ".", "chain_to_seqres", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._realign_pdb_template_to_query": [[340, 476], ["fastfold.data.tools.kalign.Kalign", "mmcif_object.chain_to_seqres.get", "logging.info", "zip", "old_mapping.items", "new_template_sequence.replace.replace", "fastfold.data.parsers.parse_a3m", "templates.QueryToTemplateAlignError", "old_to_new_template_mapping.get", "len", "logging.info", "templates.QueryToTemplateAlignError", "kalign.Kalign.align", "templates.QueryToTemplateAlignError", "float", "min", "list", "len", "len", "mmcif_object.chain_to_seqres.values", "str"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.parsers.parse_a3m", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.align"], ["", "def", "_realign_pdb_template_to_query", "(", "\n", "old_template_sequence", ":", "str", ",", "\n", "template_chain_id", ":", "str", ",", "\n", "mmcif_object", ":", "mmcif_parsing", ".", "MmcifObject", ",", "\n", "old_mapping", ":", "Mapping", "[", "int", ",", "int", "]", ",", "\n", "kalign_binary_path", ":", "str", ",", "\n", ")", "->", "Tuple", "[", "str", ",", "Mapping", "[", "int", ",", "int", "]", "]", ":", "\n", "    ", "\"\"\"Aligns template from the mmcif_object to the query.\n\n    In case PDB70 contains a different version of the template sequence, we need\n    to perform a realignment to the actual sequence that is in the mmCIF file.\n    This method performs such realignment, but returns the new sequence and\n    mapping only if the sequence in the mmCIF file is 90% identical to the old\n    sequence.\n\n    Note that the old_template_sequence comes from the hit, and contains only that\n    part of the chain that matches with the query while the new_template_sequence\n    is the full chain.\n\n    Args:\n        old_template_sequence: The template sequence that was returned by the PDB\n            template search (typically done using HHSearch).\n        template_chain_id: The template chain id was returned by the PDB template\n            search (typically done using HHSearch). This is used to find the right\n            chain in the mmcif_object chain_to_seqres mapping.\n        mmcif_object: A mmcif_object which holds the actual template data.\n        old_mapping: A mapping from the query sequence to the template sequence.\n            This mapping will be used to compute the new mapping from the query\n            sequence to the actual mmcif_object template sequence by aligning the\n            old_template_sequence and the actual template sequence.\n        kalign_binary_path: The path to a kalign executable.\n\n    Returns:\n        A tuple (new_template_sequence, new_query_to_template_mapping) where:\n        * new_template_sequence is the actual template sequence that was found in\n            the mmcif_object.\n        * new_query_to_template_mapping is the new mapping from the query to the\n            actual template found in the mmcif_object.\n\n    Raises:\n        QueryToTemplateAlignError:\n        * If there was an error thrown by the alignment tool.\n        * Or if the actual template sequence differs by more than 10% from the\n            old_template_sequence.\n    \"\"\"", "\n", "aligner", "=", "kalign", ".", "Kalign", "(", "binary_path", "=", "kalign_binary_path", ")", "\n", "new_template_sequence", "=", "mmcif_object", ".", "chain_to_seqres", ".", "get", "(", "\n", "template_chain_id", ",", "\"\"", "\n", ")", "\n", "\n", "# Sometimes the template chain id is unknown. But if there is only a single", "\n", "# sequence within the mmcif_object, it is safe to assume it is that one.", "\n", "if", "not", "new_template_sequence", ":", "\n", "        ", "if", "len", "(", "mmcif_object", ".", "chain_to_seqres", ")", "==", "1", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "\"Could not find %s in %s, but there is only 1 sequence, so \"", "\n", "\"using that one.\"", ",", "\n", "template_chain_id", ",", "\n", "mmcif_object", ".", "file_id", ",", "\n", ")", "\n", "new_template_sequence", "=", "list", "(", "mmcif_object", ".", "chain_to_seqres", ".", "values", "(", ")", ")", "[", "\n", "0", "\n", "]", "\n", "", "else", ":", "\n", "            ", "raise", "QueryToTemplateAlignError", "(", "\n", "f\"Could not find chain {template_chain_id} in {mmcif_object.file_id}. \"", "\n", "\"If there are no mmCIF parsing errors, it is possible it was not a \"", "\n", "\"protein chain.\"", "\n", ")", "\n", "\n", "", "", "try", ":", "\n", "        ", "(", "old_aligned_template", ",", "new_aligned_template", ")", ",", "_", "=", "parsers", ".", "parse_a3m", "(", "\n", "aligner", ".", "align", "(", "[", "old_template_sequence", ",", "new_template_sequence", "]", ")", "\n", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "raise", "QueryToTemplateAlignError", "(", "\n", "\"Could not align old template %s to template %s (%s_%s). Error: %s\"", "\n", "%", "(", "\n", "old_template_sequence", ",", "\n", "new_template_sequence", ",", "\n", "mmcif_object", ".", "file_id", ",", "\n", "template_chain_id", ",", "\n", "str", "(", "e", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "", "logging", ".", "info", "(", "\n", "\"Old aligned template: %s\\nNew aligned template: %s\"", ",", "\n", "old_aligned_template", ",", "\n", "new_aligned_template", ",", "\n", ")", "\n", "\n", "old_to_new_template_mapping", "=", "{", "}", "\n", "old_template_index", "=", "-", "1", "\n", "new_template_index", "=", "-", "1", "\n", "num_same", "=", "0", "\n", "for", "old_template_aa", ",", "new_template_aa", "in", "zip", "(", "\n", "old_aligned_template", ",", "new_aligned_template", "\n", ")", ":", "\n", "        ", "if", "old_template_aa", "!=", "\"-\"", ":", "\n", "            ", "old_template_index", "+=", "1", "\n", "", "if", "new_template_aa", "!=", "\"-\"", ":", "\n", "            ", "new_template_index", "+=", "1", "\n", "", "if", "old_template_aa", "!=", "\"-\"", "and", "new_template_aa", "!=", "\"-\"", ":", "\n", "            ", "old_to_new_template_mapping", "[", "old_template_index", "]", "=", "new_template_index", "\n", "if", "old_template_aa", "==", "new_template_aa", ":", "\n", "                ", "num_same", "+=", "1", "\n", "\n", "# Require at least 90 % sequence identity wrt to the shorter of the sequences.", "\n", "", "", "", "if", "(", "\n", "float", "(", "num_same", ")", "\n", "/", "min", "(", "len", "(", "old_template_sequence", ")", ",", "len", "(", "new_template_sequence", ")", ")", "\n", "<", "0.9", "\n", ")", ":", "\n", "        ", "raise", "QueryToTemplateAlignError", "(", "\n", "\"Insufficient similarity of the sequence in the database: %s to the \"", "\n", "\"actual sequence in the mmCIF file %s_%s: %s. We require at least \"", "\n", "\"90 %% similarity wrt to the shorter of the sequences. This is not a \"", "\n", "\"problem unless you think this is a template that should be included.\"", "\n", "%", "(", "\n", "old_template_sequence", ",", "\n", "mmcif_object", ".", "file_id", ",", "\n", "template_chain_id", ",", "\n", "new_template_sequence", ",", "\n", ")", "\n", ")", "\n", "\n", "", "new_query_to_template_mapping", "=", "{", "}", "\n", "for", "query_index", ",", "old_template_index", "in", "old_mapping", ".", "items", "(", ")", ":", "\n", "        ", "new_query_to_template_mapping", "[", "\n", "query_index", "\n", "]", "=", "old_to_new_template_mapping", ".", "get", "(", "old_template_index", ",", "-", "1", ")", "\n", "\n", "", "new_template_sequence", "=", "new_template_sequence", ".", "replace", "(", "\"-\"", ",", "\"\"", ")", "\n", "\n", "return", "new_template_sequence", ",", "new_query_to_template_mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._check_residue_distances": [[478, 500], ["enumerate", "zip", "bool", "numpy.linalg.norm", "templates.CaDistanceError"], "function", ["None"], ["", "def", "_check_residue_distances", "(", "\n", "all_positions", ":", "np", ".", "ndarray", ",", "\n", "all_positions_mask", ":", "np", ".", "ndarray", ",", "\n", "max_ca_ca_distance", ":", "float", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Checks if the distance between unmasked neighbor residues is ok.\"\"\"", "\n", "ca_position", "=", "residue_constants", ".", "atom_order", "[", "\"CA\"", "]", "\n", "prev_is_unmasked", "=", "False", "\n", "prev_calpha", "=", "None", "\n", "for", "i", ",", "(", "coords", ",", "mask", ")", "in", "enumerate", "(", "zip", "(", "all_positions", ",", "all_positions_mask", ")", ")", ":", "\n", "        ", "this_is_unmasked", "=", "bool", "(", "mask", "[", "ca_position", "]", ")", "\n", "if", "this_is_unmasked", ":", "\n", "            ", "this_calpha", "=", "coords", "[", "ca_position", "]", "\n", "if", "prev_is_unmasked", ":", "\n", "                ", "distance", "=", "np", ".", "linalg", ".", "norm", "(", "this_calpha", "-", "prev_calpha", ")", "\n", "if", "distance", ">", "max_ca_ca_distance", ":", "\n", "                    ", "raise", "CaDistanceError", "(", "\n", "\"The distance between residues %d and %d is %f > limit %f.\"", "\n", "%", "(", "i", ",", "i", "+", "1", ",", "distance", ",", "max_ca_ca_distance", ")", "\n", ")", "\n", "", "", "prev_calpha", "=", "this_calpha", "\n", "", "prev_is_unmasked", "=", "this_is_unmasked", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._get_atom_positions": [[502, 519], ["fastfold.data.mmcif_parsing.get_atom_coords", "templates._check_residue_distances"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.get_atom_coords", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._check_residue_distances"], ["", "", "def", "_get_atom_positions", "(", "\n", "mmcif_object", ":", "mmcif_parsing", ".", "MmcifObject", ",", "\n", "auth_chain_id", ":", "str", ",", "\n", "max_ca_ca_distance", ":", "float", ",", "\n", "_zero_center_positions", ":", "bool", "=", "True", ",", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"Gets atom positions and mask from a list of Biopython Residues.\"\"\"", "\n", "coords_with_mask", "=", "mmcif_parsing", ".", "get_atom_coords", "(", "\n", "mmcif_object", "=", "mmcif_object", ",", "\n", "chain_id", "=", "auth_chain_id", ",", "\n", "_zero_center_positions", "=", "_zero_center_positions", ",", "\n", ")", "\n", "all_atom_positions", ",", "all_atom_mask", "=", "coords_with_mask", "\n", "_check_residue_distances", "(", "\n", "all_atom_positions", ",", "all_atom_mask", ",", "max_ca_ca_distance", "\n", ")", "\n", "return", "all_atom_positions", ",", "all_atom_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._extract_template_features": [[521, 678], ["numpy.split", "numpy.split", "mapping.items", "fastfold.common.residue_constants.sequence_to_onehot", "templates.NoChainsError", "templates._find_template_in_pdb", "templates._get_atom_positions", "templates_all_atom_positions.append", "templates_all_atom_masks.append", "output_templates_sequence.append", "numpy.sum", "templates.TemplateAtomMaskAllZerosError", "logging.warning", "templates._realign_pdb_template_to_query", "logging.info", "templates.NoAtomDataInTemplateError", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "output_templates_sequence.encode", "numpy.array", "str", "min", "max", "mapping.values", "mapping.values", "pdb_id.lower"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants.sequence_to_onehot", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._find_template_in_pdb", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._get_atom_positions", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._realign_pdb_template_to_query"], ["", "def", "_extract_template_features", "(", "\n", "mmcif_object", ":", "mmcif_parsing", ".", "MmcifObject", ",", "\n", "pdb_id", ":", "str", ",", "\n", "mapping", ":", "Mapping", "[", "int", ",", "int", "]", ",", "\n", "template_sequence", ":", "str", ",", "\n", "query_sequence", ":", "str", ",", "\n", "template_chain_id", ":", "str", ",", "\n", "kalign_binary_path", ":", "str", ",", "\n", "_zero_center_positions", ":", "bool", "=", "True", ",", "\n", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "Any", "]", ",", "Optional", "[", "str", "]", "]", ":", "\n", "    ", "\"\"\"Parses atom positions in the target structure and aligns with the query.\n\n    Atoms for each residue in the template structure are indexed to coincide\n    with their corresponding residue in the query sequence, according to the\n    alignment mapping provided.\n\n    Args:\n        mmcif_object: mmcif_parsing.MmcifObject representing the template.\n        pdb_id: PDB code for the template.\n        mapping: Dictionary mapping indices in the query sequence to indices in\n            the template sequence.\n        template_sequence: String describing the amino acid sequence for the\n            template protein.\n        query_sequence: String describing the amino acid sequence for the query\n            protein.\n        template_chain_id: String ID describing which chain in the structure proto\n            should be used.\n        kalign_binary_path: The path to a kalign executable used for template\n                realignment.\n\n    Returns:\n        A tuple with:\n        * A dictionary containing the extra features derived from the template\n            protein structure.\n        * A warning message if the hit was realigned to the actual mmCIF sequence.\n            Otherwise None.\n\n    Raises:\n        NoChainsError: If the mmcif object doesn't contain any chains.\n        SequenceNotInTemplateError: If the given chain id / sequence can't\n            be found in the mmcif object.\n        QueryToTemplateAlignError: If the actual template in the mmCIF file\n            can't be aligned to the query.\n        NoAtomDataInTemplateError: If the mmcif object doesn't contain\n            atom positions.\n        TemplateAtomMaskAllZerosError: If the mmcif object doesn't have any\n            unmasked residues.\n    \"\"\"", "\n", "if", "mmcif_object", "is", "None", "or", "not", "mmcif_object", ".", "chain_to_seqres", ":", "\n", "        ", "raise", "NoChainsError", "(", "\n", "\"No chains in PDB: %s_%s\"", "%", "(", "pdb_id", ",", "template_chain_id", ")", "\n", ")", "\n", "\n", "", "warning", "=", "None", "\n", "try", ":", "\n", "        ", "seqres", ",", "chain_id", ",", "mapping_offset", "=", "_find_template_in_pdb", "(", "\n", "template_chain_id", "=", "template_chain_id", ",", "\n", "template_sequence", "=", "template_sequence", ",", "\n", "mmcif_object", "=", "mmcif_object", ",", "\n", ")", "\n", "", "except", "SequenceNotInTemplateError", ":", "\n", "# If PDB70 contains a different version of the template, we use the sequence", "\n", "# from the mmcif_object.", "\n", "        ", "chain_id", "=", "template_chain_id", "\n", "warning", "=", "(", "\n", "f\"The exact sequence {template_sequence} was not found in \"", "\n", "f\"{pdb_id}_{chain_id}. Realigning the template to the actual sequence.\"", "\n", ")", "\n", "logging", ".", "warning", "(", "warning", ")", "\n", "# This throws an exception if it fails to realign the hit.", "\n", "seqres", ",", "mapping", "=", "_realign_pdb_template_to_query", "(", "\n", "old_template_sequence", "=", "template_sequence", ",", "\n", "template_chain_id", "=", "template_chain_id", ",", "\n", "mmcif_object", "=", "mmcif_object", ",", "\n", "old_mapping", "=", "mapping", ",", "\n", "kalign_binary_path", "=", "kalign_binary_path", ",", "\n", ")", "\n", "logging", ".", "info", "(", "\n", "\"Sequence in %s_%s: %s successfully realigned to %s\"", ",", "\n", "pdb_id", ",", "\n", "chain_id", ",", "\n", "template_sequence", ",", "\n", "seqres", ",", "\n", ")", "\n", "# The template sequence changed.", "\n", "template_sequence", "=", "seqres", "\n", "# No mapping offset, the query is aligned to the actual sequence.", "\n", "mapping_offset", "=", "0", "\n", "\n", "", "try", ":", "\n", "# Essentially set to infinity - we don't want to reject templates unless", "\n", "# they're really really bad.", "\n", "        ", "all_atom_positions", ",", "all_atom_mask", "=", "_get_atom_positions", "(", "\n", "mmcif_object", ",", "\n", "chain_id", ",", "\n", "max_ca_ca_distance", "=", "150.0", ",", "\n", "_zero_center_positions", "=", "_zero_center_positions", ",", "\n", ")", "\n", "", "except", "(", "CaDistanceError", ",", "KeyError", ")", "as", "ex", ":", "\n", "        ", "raise", "NoAtomDataInTemplateError", "(", "\n", "\"Could not get atom data (%s_%s): %s\"", "%", "(", "pdb_id", ",", "chain_id", ",", "str", "(", "ex", ")", ")", "\n", ")", "from", "ex", "\n", "\n", "", "all_atom_positions", "=", "np", ".", "split", "(", "\n", "all_atom_positions", ",", "all_atom_positions", ".", "shape", "[", "0", "]", "\n", ")", "\n", "all_atom_masks", "=", "np", ".", "split", "(", "all_atom_mask", ",", "all_atom_mask", ".", "shape", "[", "0", "]", ")", "\n", "\n", "output_templates_sequence", "=", "[", "]", "\n", "templates_all_atom_positions", "=", "[", "]", "\n", "templates_all_atom_masks", "=", "[", "]", "\n", "\n", "for", "_", "in", "query_sequence", ":", "\n", "# Residues in the query_sequence that are not in the template_sequence:", "\n", "        ", "templates_all_atom_positions", ".", "append", "(", "\n", "np", ".", "zeros", "(", "(", "residue_constants", ".", "atom_type_num", ",", "3", ")", ")", "\n", ")", "\n", "templates_all_atom_masks", ".", "append", "(", "\n", "np", ".", "zeros", "(", "residue_constants", ".", "atom_type_num", ")", "\n", ")", "\n", "output_templates_sequence", ".", "append", "(", "\"-\"", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "mapping", ".", "items", "(", ")", ":", "\n", "        ", "template_index", "=", "v", "+", "mapping_offset", "\n", "templates_all_atom_positions", "[", "k", "]", "=", "all_atom_positions", "[", "template_index", "]", "[", "0", "]", "\n", "templates_all_atom_masks", "[", "k", "]", "=", "all_atom_masks", "[", "template_index", "]", "[", "0", "]", "\n", "output_templates_sequence", "[", "k", "]", "=", "template_sequence", "[", "v", "]", "\n", "\n", "# Alanine (AA with the lowest number of atoms) has 5 atoms (C, CA, CB, N, O).", "\n", "", "if", "np", ".", "sum", "(", "templates_all_atom_masks", ")", "<", "5", ":", "\n", "        ", "raise", "TemplateAtomMaskAllZerosError", "(", "\n", "\"Template all atom mask was all zeros: %s_%s. Residue range: %d-%d\"", "\n", "%", "(", "\n", "pdb_id", ",", "\n", "chain_id", ",", "\n", "min", "(", "mapping", ".", "values", "(", ")", ")", "+", "mapping_offset", ",", "\n", "max", "(", "mapping", ".", "values", "(", ")", ")", "+", "mapping_offset", ",", "\n", ")", "\n", ")", "\n", "\n", "", "output_templates_sequence", "=", "\"\"", ".", "join", "(", "output_templates_sequence", ")", "\n", "\n", "templates_aatype", "=", "residue_constants", ".", "sequence_to_onehot", "(", "\n", "output_templates_sequence", ",", "residue_constants", ".", "HHBLITS_AA_TO_ID", "\n", ")", "\n", "\n", "return", "(", "\n", "{", "\n", "\"template_all_atom_positions\"", ":", "np", ".", "array", "(", "\n", "templates_all_atom_positions", "\n", ")", ",", "\n", "\"template_all_atom_mask\"", ":", "np", ".", "array", "(", "templates_all_atom_masks", ")", ",", "\n", "\"template_sequence\"", ":", "output_templates_sequence", ".", "encode", "(", ")", ",", "\n", "\"template_aatype\"", ":", "np", ".", "array", "(", "templates_aatype", ")", ",", "\n", "\"template_domain_names\"", ":", "f\"{pdb_id.lower()}_{chain_id}\"", ".", "encode", "(", ")", ",", "\n", "}", ",", "\n", "warning", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._build_query_to_hit_index_mapping": [[681, 738], ["hit_query_sequence.replace", "hit_sequence.replace.replace", "original_query_sequence.find", "min", "min", "zip", "len", "len"], "function", ["None"], ["", "def", "_build_query_to_hit_index_mapping", "(", "\n", "hit_query_sequence", ":", "str", ",", "\n", "hit_sequence", ":", "str", ",", "\n", "indices_hit", ":", "Sequence", "[", "int", "]", ",", "\n", "indices_query", ":", "Sequence", "[", "int", "]", ",", "\n", "original_query_sequence", ":", "str", ",", "\n", ")", "->", "Mapping", "[", "int", ",", "int", "]", ":", "\n", "    ", "\"\"\"Gets mapping from indices in original query sequence to indices in the hit.\n\n    hit_query_sequence and hit_sequence are two aligned sequences containing gap\n    characters. hit_query_sequence contains only the part of the original query\n    sequence that matched the hit. When interpreting the indices from the .hhr, we\n    need to correct for this to recover a mapping from original query sequence to\n    the hit sequence.\n\n    Args:\n        hit_query_sequence: The portion of the query sequence that is in the .hhr\n            hit\n        hit_sequence: The portion of the hit sequence that is in the .hhr\n        indices_hit: The indices for each aminoacid relative to the hit sequence\n        indices_query: The indices for each aminoacid relative to the original query\n            sequence\n        original_query_sequence: String describing the original query sequence.\n\n    Returns:\n        Dictionary with indices in the original query sequence as keys and indices\n        in the hit sequence as values.\n    \"\"\"", "\n", "# If the hit is empty (no aligned residues), return empty mapping", "\n", "if", "not", "hit_query_sequence", ":", "\n", "        ", "return", "{", "}", "\n", "\n", "# Remove gaps and find the offset of hit.query relative to original query.", "\n", "", "hhsearch_query_sequence", "=", "hit_query_sequence", ".", "replace", "(", "\"-\"", ",", "\"\"", ")", "\n", "hit_sequence", "=", "hit_sequence", ".", "replace", "(", "\"-\"", ",", "\"\"", ")", "\n", "hhsearch_query_offset", "=", "original_query_sequence", ".", "find", "(", "\n", "hhsearch_query_sequence", "\n", ")", "\n", "\n", "# Index of -1 used for gap characters. Subtract the min index ignoring gaps.", "\n", "min_idx", "=", "min", "(", "x", "for", "x", "in", "indices_hit", "if", "x", ">", "-", "1", ")", "\n", "fixed_indices_hit", "=", "[", "x", "-", "min_idx", "if", "x", ">", "-", "1", "else", "-", "1", "for", "x", "in", "indices_hit", "]", "\n", "\n", "min_idx", "=", "min", "(", "x", "for", "x", "in", "indices_query", "if", "x", ">", "-", "1", ")", "\n", "fixed_indices_query", "=", "[", "x", "-", "min_idx", "if", "x", ">", "-", "1", "else", "-", "1", "for", "x", "in", "indices_query", "]", "\n", "\n", "# Zip the corrected indices, ignore case where both seqs have gap characters.", "\n", "mapping", "=", "{", "}", "\n", "for", "q_i", ",", "q_t", "in", "zip", "(", "fixed_indices_query", ",", "fixed_indices_hit", ")", ":", "\n", "        ", "if", "q_t", "!=", "-", "1", "and", "q_i", "!=", "-", "1", ":", "\n", "            ", "if", "q_t", ">=", "len", "(", "hit_sequence", ")", "or", "q_i", "+", "hhsearch_query_offset", ">=", "len", "(", "\n", "original_query_sequence", "\n", ")", ":", "\n", "                ", "continue", "\n", "", "mapping", "[", "q_i", "+", "hhsearch_query_offset", "]", "=", "q_t", "\n", "\n", "", "", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._prefilter_hit": [[753, 793], ["templates._get_pdb_id_and_chain", "templates.PrefilterResult", "templates._assess_hhsearch_hit", "logging.info", "templates.PrefilterResult", "isinstance", "templates.PrefilterResult", "str"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._get_pdb_id_and_chain", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._assess_hhsearch_hit"], ["", "def", "_prefilter_hit", "(", "\n", "query_sequence", ":", "str", ",", "\n", "query_pdb_code", ":", "Optional", "[", "str", "]", ",", "\n", "hit", ":", "parsers", ".", "TemplateHit", ",", "\n", "max_template_date", ":", "datetime", ".", "datetime", ",", "\n", "release_dates", ":", "Mapping", "[", "str", ",", "datetime", ".", "datetime", "]", ",", "\n", "obsolete_pdbs", ":", "Mapping", "[", "str", ",", "str", "]", ",", "\n", "strict_error_check", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "# Fail hard if we can't get the PDB ID and chain name from the hit.", "\n", "    ", "hit_pdb_code", ",", "hit_chain_id", "=", "_get_pdb_id_and_chain", "(", "hit", ")", "\n", "\n", "if", "hit_pdb_code", "not", "in", "release_dates", ":", "\n", "        ", "if", "hit_pdb_code", "in", "obsolete_pdbs", ":", "\n", "            ", "hit_pdb_code", "=", "obsolete_pdbs", "[", "hit_pdb_code", "]", "\n", "\n", "# Pass hit_pdb_code since it might have changed due to the pdb being ", "\n", "# obsolete.", "\n", "", "", "try", ":", "\n", "        ", "_assess_hhsearch_hit", "(", "\n", "hit", "=", "hit", ",", "\n", "hit_pdb_code", "=", "hit_pdb_code", ",", "\n", "query_sequence", "=", "query_sequence", ",", "\n", "query_pdb_code", "=", "query_pdb_code", ",", "\n", "release_dates", "=", "release_dates", ",", "\n", "release_date_cutoff", "=", "max_template_date", ",", "\n", ")", "\n", "", "except", "PrefilterError", "as", "e", ":", "\n", "        ", "hit_name", "=", "f\"{hit_pdb_code}_{hit_chain_id}\"", "\n", "msg", "=", "f\"hit {hit_name} did not pass prefilter: {str(e)}\"", "\n", "logging", ".", "info", "(", "\"%s: %s\"", ",", "query_pdb_code", ",", "msg", ")", "\n", "if", "strict_error_check", "and", "isinstance", "(", "\n", "e", ",", "(", "DateError", ",", "PdbIdError", ",", "DuplicateError", ")", "\n", ")", ":", "\n", "# In strict mode we treat some prefilter cases as errors.", "\n", "            ", "return", "PrefilterResult", "(", "valid", "=", "False", ",", "error", "=", "msg", ",", "warning", "=", "None", ")", "\n", "\n", "", "return", "PrefilterResult", "(", "valid", "=", "False", ",", "error", "=", "None", ",", "warning", "=", "None", ")", "\n", "\n", "", "return", "PrefilterResult", "(", "valid", "=", "True", ",", "error", "=", "None", ",", "warning", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._process_single_hit": [[795, 914], ["templates._get_pdb_id_and_chain", "templates._build_query_to_hit_index_mapping", "hit.hit_sequence.replace", "os.path.join", "logging.info", "fastfold.data.mmcif_parsing.parse", "open", "cif_file.read", "datetime.datetime.strptime", "templates._extract_template_features", "templates.SingleHitResult", "templates.SingleHitResult", "templates.SingleHitResult", "logging.info", "templates.SingleHitResult", "templates.SingleHitResult", "templates.SingleHitResult", "str", "str"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._get_pdb_id_and_chain", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._build_query_to_hit_index_mapping", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.parse", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.templates._extract_template_features"], ["", "def", "_process_single_hit", "(", "\n", "query_sequence", ":", "str", ",", "\n", "query_pdb_code", ":", "Optional", "[", "str", "]", ",", "\n", "hit", ":", "parsers", ".", "TemplateHit", ",", "\n", "mmcif_dir", ":", "str", ",", "\n", "max_template_date", ":", "datetime", ".", "datetime", ",", "\n", "release_dates", ":", "Mapping", "[", "str", ",", "datetime", ".", "datetime", "]", ",", "\n", "obsolete_pdbs", ":", "Mapping", "[", "str", ",", "str", "]", ",", "\n", "kalign_binary_path", ":", "str", ",", "\n", "strict_error_check", ":", "bool", "=", "False", ",", "\n", "_zero_center_positions", ":", "bool", "=", "True", ",", "\n", ")", "->", "SingleHitResult", ":", "\n", "    ", "\"\"\"Tries to extract template features from a single HHSearch hit.\"\"\"", "\n", "# Fail hard if we can't get the PDB ID and chain name from the hit.", "\n", "hit_pdb_code", ",", "hit_chain_id", "=", "_get_pdb_id_and_chain", "(", "hit", ")", "\n", "\n", "if", "hit_pdb_code", "not", "in", "release_dates", ":", "\n", "        ", "if", "hit_pdb_code", "in", "obsolete_pdbs", ":", "\n", "            ", "hit_pdb_code", "=", "obsolete_pdbs", "[", "hit_pdb_code", "]", "\n", "\n", "", "", "mapping", "=", "_build_query_to_hit_index_mapping", "(", "\n", "hit", ".", "query", ",", "\n", "hit", ".", "hit_sequence", ",", "\n", "hit", ".", "indices_hit", ",", "\n", "hit", ".", "indices_query", ",", "\n", "query_sequence", ",", "\n", ")", "\n", "\n", "# The mapping is from the query to the actual hit sequence, so we need to", "\n", "# remove gaps (which regardless have a missing confidence score).", "\n", "template_sequence", "=", "hit", ".", "hit_sequence", ".", "replace", "(", "\"-\"", ",", "\"\"", ")", "\n", "\n", "cif_path", "=", "os", ".", "path", ".", "join", "(", "mmcif_dir", ",", "hit_pdb_code", "+", "\".cif\"", ")", "\n", "logging", ".", "info", "(", "\n", "\"Reading PDB entry from %s. Query: %s, template: %s\"", ",", "\n", "cif_path", ",", "\n", "query_sequence", ",", "\n", "template_sequence", ",", "\n", ")", "\n", "# Fail if we can't find the mmCIF file.", "\n", "with", "open", "(", "cif_path", ",", "\"r\"", ")", "as", "cif_file", ":", "\n", "        ", "cif_string", "=", "cif_file", ".", "read", "(", ")", "\n", "\n", "", "parsing_result", "=", "mmcif_parsing", ".", "parse", "(", "\n", "file_id", "=", "hit_pdb_code", ",", "mmcif_string", "=", "cif_string", "\n", ")", "\n", "\n", "if", "parsing_result", ".", "mmcif_object", "is", "not", "None", ":", "\n", "        ", "hit_release_date", "=", "datetime", ".", "datetime", ".", "strptime", "(", "\n", "parsing_result", ".", "mmcif_object", ".", "header", "[", "\"release_date\"", "]", ",", "\"%Y-%m-%d\"", "\n", ")", "\n", "if", "hit_release_date", ">", "max_template_date", ":", "\n", "            ", "error", "=", "\"Template %s date (%s) > max template date (%s).\"", "%", "(", "\n", "hit_pdb_code", ",", "\n", "hit_release_date", ",", "\n", "max_template_date", ",", "\n", ")", "\n", "if", "strict_error_check", ":", "\n", "                ", "return", "SingleHitResult", "(", "features", "=", "None", ",", "error", "=", "error", ",", "warning", "=", "None", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "info", "(", "error", ")", "\n", "return", "SingleHitResult", "(", "features", "=", "None", ",", "error", "=", "None", ",", "warning", "=", "None", ")", "\n", "\n", "", "", "", "try", ":", "\n", "        ", "features", ",", "realign_warning", "=", "_extract_template_features", "(", "\n", "mmcif_object", "=", "parsing_result", ".", "mmcif_object", ",", "\n", "pdb_id", "=", "hit_pdb_code", ",", "\n", "mapping", "=", "mapping", ",", "\n", "template_sequence", "=", "template_sequence", ",", "\n", "query_sequence", "=", "query_sequence", ",", "\n", "template_chain_id", "=", "hit_chain_id", ",", "\n", "kalign_binary_path", "=", "kalign_binary_path", ",", "\n", "_zero_center_positions", "=", "_zero_center_positions", ",", "\n", ")", "\n", "features", "[", "\"template_sum_probs\"", "]", "=", "[", "hit", ".", "sum_probs", "]", "\n", "\n", "# It is possible there were some errors when parsing the other chains in the", "\n", "# mmCIF file, but the template features for the chain we want were still", "\n", "# computed. In such case the mmCIF parsing errors are not relevant.", "\n", "return", "SingleHitResult", "(", "\n", "features", "=", "features", ",", "error", "=", "None", ",", "warning", "=", "realign_warning", "\n", ")", "\n", "", "except", "(", "\n", "NoChainsError", ",", "\n", "NoAtomDataInTemplateError", ",", "\n", "TemplateAtomMaskAllZerosError", ",", "\n", ")", "as", "e", ":", "\n", "# These 3 errors indicate missing mmCIF experimental data rather than a", "\n", "# problem with the template search, so turn them into warnings.", "\n", "        ", "warning", "=", "(", "\n", "\"%s_%s (sum_probs: %.2f, rank: %d): feature extracting errors: \"", "\n", "\"%s, mmCIF parsing errors: %s\"", "\n", "%", "(", "\n", "hit_pdb_code", ",", "\n", "hit_chain_id", ",", "\n", "hit", ".", "sum_probs", ",", "\n", "hit", ".", "index", ",", "\n", "str", "(", "e", ")", ",", "\n", "parsing_result", ".", "errors", ",", "\n", ")", "\n", ")", "\n", "if", "strict_error_check", ":", "\n", "            ", "return", "SingleHitResult", "(", "features", "=", "None", ",", "error", "=", "warning", ",", "warning", "=", "None", ")", "\n", "", "else", ":", "\n", "            ", "return", "SingleHitResult", "(", "features", "=", "None", ",", "error", "=", "None", ",", "warning", "=", "warning", ")", "\n", "", "", "except", "Error", "as", "e", ":", "\n", "        ", "error", "=", "(", "\n", "\"%s_%s (sum_probs: %.2f, rank: %d): feature extracting errors: \"", "\n", "\"%s, mmCIF parsing errors: %s\"", "\n", "%", "(", "\n", "hit_pdb_code", ",", "\n", "hit_chain_id", ",", "\n", "hit", ".", "sum_probs", ",", "\n", "hit", ".", "index", ",", "\n", "str", "(", "e", ")", ",", "\n", "parsing_result", ".", "errors", ",", "\n", ")", "\n", ")", "\n", "return", "SingleHitResult", "(", "features", "=", "None", ",", "error", "=", "error", ",", "warning", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.feature_pipeline.FeaturePipeline.__init__": [[100, 105], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "config", ":", "ml_collections", ".", "ConfigDict", ",", "\n", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.feature_pipeline.FeaturePipeline.process_features": [[106, 115], ["feature_pipeline.np_example_to_features"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.feature_pipeline.np_example_to_features"], ["", "def", "process_features", "(", "\n", "self", ",", "\n", "raw_features", ":", "FeatureDict", ",", "\n", "mode", ":", "str", "=", "\"train\"", ",", "\n", ")", "->", "FeatureDict", ":", "\n", "        ", "return", "np_example_to_features", "(", "\n", "np_example", "=", "raw_features", ",", "\n", "config", "=", "self", ".", "config", ",", "\n", "mode", "=", "mode", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.feature_pipeline.np_to_tensor_dict": [[30, 48], ["torch.tensor", "np_example.items"], "function", ["None"], ["def", "np_to_tensor_dict", "(", "\n", "np_example", ":", "Mapping", "[", "str", ",", "np", ".", "ndarray", "]", ",", "\n", "features", ":", "Sequence", "[", "str", "]", ",", "\n", ")", "->", "TensorDict", ":", "\n", "    ", "\"\"\"Creates dict of tensors from a dict of NumPy arrays.\n\n    Args:\n        np_example: A dict of NumPy feature arrays.\n        features: A list of strings of feature names to be returned in the dataset.\n\n    Returns:\n        A dictionary of features mapping feature names to features. Only the given\n        features are returned, all other ones are filtered out.\n    \"\"\"", "\n", "tensor_dict", "=", "{", "\n", "k", ":", "torch", ".", "tensor", "(", "v", ")", "for", "k", ",", "v", "in", "np_example", ".", "items", "(", ")", "if", "k", "in", "features", "\n", "}", "\n", "return", "tensor_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.feature_pipeline.make_data_config": [[50, 70], ["copy.deepcopy", "copy.deepcopy.unlocked"], "function", ["None"], ["", "def", "make_data_config", "(", "\n", "config", ":", "ml_collections", ".", "ConfigDict", ",", "\n", "mode", ":", "str", ",", "\n", "num_res", ":", "int", ",", "\n", ")", "->", "Tuple", "[", "ml_collections", ".", "ConfigDict", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "cfg", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "mode_cfg", "=", "cfg", "[", "mode", "]", "\n", "with", "cfg", ".", "unlocked", "(", ")", ":", "\n", "        ", "if", "mode_cfg", ".", "crop_size", "is", "None", ":", "\n", "            ", "mode_cfg", ".", "crop_size", "=", "num_res", "\n", "\n", "", "", "feature_names", "=", "cfg", ".", "common", ".", "unsupervised_features", "\n", "\n", "if", "cfg", ".", "common", ".", "use_templates", ":", "\n", "        ", "feature_names", "+=", "cfg", ".", "common", ".", "template_features", "\n", "\n", "", "if", "cfg", "[", "mode", "]", ".", "supervised", ":", "\n", "        ", "feature_names", "+=", "cfg", ".", "supervised", ".", "supervised_features", "\n", "\n", "", "return", "cfg", ",", "feature_names", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.feature_pipeline.np_example_to_features": [[72, 97], ["dict", "int", "feature_pipeline.make_data_config", "feature_pipeline.np_to_tensor_dict", "dict.pop().astype", "torch.no_grad", "fastfold.data.input_pipeline.process_tensors_from_config", "input_pipeline.process_tensors_from_config.items", "dict.pop"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.feature_pipeline.make_data_config", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.feature_pipeline.np_to_tensor_dict", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.input_pipeline.process_tensors_from_config"], ["", "def", "np_example_to_features", "(", "\n", "np_example", ":", "FeatureDict", ",", "\n", "config", ":", "ml_collections", ".", "ConfigDict", ",", "\n", "mode", ":", "str", ",", "\n", ")", ":", "\n", "    ", "np_example", "=", "dict", "(", "np_example", ")", "\n", "num_res", "=", "int", "(", "np_example", "[", "\"seq_length\"", "]", "[", "0", "]", ")", "\n", "cfg", ",", "feature_names", "=", "make_data_config", "(", "config", ",", "mode", "=", "mode", ",", "num_res", "=", "num_res", ")", "\n", "\n", "if", "\"deletion_matrix_int\"", "in", "np_example", ":", "\n", "        ", "np_example", "[", "\"deletion_matrix\"", "]", "=", "np_example", ".", "pop", "(", "\n", "\"deletion_matrix_int\"", "\n", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "tensor_dict", "=", "np_to_tensor_dict", "(", "\n", "np_example", "=", "np_example", ",", "features", "=", "feature_names", "\n", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "features", "=", "input_pipeline", ".", "process_tensors_from_config", "(", "\n", "tensor_dict", ",", "\n", "cfg", ".", "common", ",", "\n", "cfg", "[", "mode", "]", ",", "\n", ")", "\n", "\n", "", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.mmcif_loop_to_list": [[121, 151], ["parsed_info.items", "all", "key.startswith", "dict", "cols.append", "data.append", "zip", "zip", "len", "len"], "function", ["None"], ["", "def", "mmcif_loop_to_list", "(", "\n", "prefix", ":", "str", ",", "parsed_info", ":", "MmCIFDict", "\n", ")", "->", "Sequence", "[", "Mapping", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "\"\"\"Extracts loop associated with a prefix from mmCIF data as a list.\n\n    Reference for loop_ in mmCIF:\n      http://mmcif.wwpdb.org/docs/tutorials/mechanics/pdbx-mmcif-syntax.html\n\n    Args:\n      prefix: Prefix shared by each of the data items in the loop.\n        e.g. '_entity_poly_seq.', where the data items are _entity_poly_seq.num,\n        _entity_poly_seq.mon_id. Should include the trailing period.\n      parsed_info: A dict of parsed mmCIF data, e.g. _mmcif_dict from a Biopython\n        parser.\n\n    Returns:\n      Returns a list of dicts; each dict represents 1 entry from an mmCIF loop.\n    \"\"\"", "\n", "cols", "=", "[", "]", "\n", "data", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "parsed_info", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "prefix", ")", ":", "\n", "            ", "cols", ".", "append", "(", "key", ")", "\n", "data", ".", "append", "(", "value", ")", "\n", "\n", "", "", "assert", "all", "(", "[", "len", "(", "xs", ")", "==", "len", "(", "data", "[", "0", "]", ")", "for", "xs", "in", "data", "]", ")", ",", "(", "\n", "\"mmCIF error: Not all loops are the same length: %s\"", "%", "cols", "\n", ")", "\n", "\n", "return", "[", "dict", "(", "zip", "(", "cols", ",", "xs", ")", ")", "for", "xs", "in", "zip", "(", "*", "data", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.mmcif_loop_to_dict": [[153, 174], ["mmcif_parsing.mmcif_loop_to_list"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.mmcif_loop_to_list"], ["", "def", "mmcif_loop_to_dict", "(", "\n", "prefix", ":", "str", ",", "\n", "index", ":", "str", ",", "\n", "parsed_info", ":", "MmCIFDict", ",", "\n", ")", "->", "Mapping", "[", "str", ",", "Mapping", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "\"\"\"Extracts loop associated with a prefix from mmCIF data as a dictionary.\n\n    Args:\n      prefix: Prefix shared by each of the data items in the loop.\n        e.g. '_entity_poly_seq.', where the data items are _entity_poly_seq.num,\n        _entity_poly_seq.mon_id. Should include the trailing period.\n      index: Which item of loop data should serve as the key.\n      parsed_info: A dict of parsed mmCIF data, e.g. _mmcif_dict from a Biopython\n        parser.\n\n    Returns:\n      Returns a dict of dicts; each dict represents 1 entry from an mmCIF loop,\n      indexed by the index column.\n    \"\"\"", "\n", "entries", "=", "mmcif_loop_to_list", "(", "prefix", ",", "parsed_info", ")", "\n", "return", "{", "entry", "[", "index", "]", ":", "entry", "for", "entry", "in", "entries", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.parse": [[176, 304], ["Bio.PDB.MMCIFParser", "io.StringIO", "PDB.MMCIFParser.get_structure", "mmcif_parsing._get_first_model", "parsed_info.items", "mmcif_parsing._get_header", "mmcif_parsing._get_protein_chains", "mmcif_parsing._get_atom_site_list", "_get_protein_chains.items", "_get_protein_chains.items", "mmcif_parsing.MmcifObject", "mmcif_parsing.ParsingResult", "mmcif_parsing.ParsingResult", "min", "enumerate", "mmcif_parsing.ParsingResult", "isinstance", "_get_protein_chains.items", "mmcif_parsing.ResiduePosition", "seq_to_structure_mappings.get", "mmcif_parsing.ResidueAtPosition", "Bio.Data.SCOPData.protein_letters_3to1.get", "seq.append", "mmcif_parsing._is_set", "int", "mmcif_parsing.ResidueAtPosition", "int", "len"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing._get_first_model", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing._get_header", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing._get_protein_chains", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing._get_atom_site_list", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing._is_set"], ["", "def", "parse", "(", "\n", "*", ",", "file_id", ":", "str", ",", "mmcif_string", ":", "str", ",", "catch_all_errors", ":", "bool", "=", "True", "\n", ")", "->", "ParsingResult", ":", "\n", "    ", "\"\"\"Entry point, parses an mmcif_string.\n\n    Args:\n      file_id: A string identifier for this file. Should be unique within the\n        collection of files being processed.\n      mmcif_string: Contents of an mmCIF file.\n      catch_all_errors: If True, all exceptions are caught and error messages are\n        returned as part of the ParsingResult. If False exceptions will be allowed\n        to propagate.\n\n    Returns:\n      A ParsingResult.\n    \"\"\"", "\n", "errors", "=", "{", "}", "\n", "try", ":", "\n", "        ", "parser", "=", "PDB", ".", "MMCIFParser", "(", "QUIET", "=", "True", ")", "\n", "handle", "=", "io", ".", "StringIO", "(", "mmcif_string", ")", "\n", "full_structure", "=", "parser", ".", "get_structure", "(", "\"\"", ",", "handle", ")", "\n", "first_model_structure", "=", "_get_first_model", "(", "full_structure", ")", "\n", "# Extract the _mmcif_dict from the parser, which contains useful fields not", "\n", "# reflected in the Biopython structure.", "\n", "parsed_info", "=", "parser", ".", "_mmcif_dict", "# pylint:disable=protected-access", "\n", "\n", "# Ensure all values are lists, even if singletons.", "\n", "for", "key", ",", "value", "in", "parsed_info", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "parsed_info", "[", "key", "]", "=", "[", "value", "]", "\n", "\n", "", "", "header", "=", "_get_header", "(", "parsed_info", ")", "\n", "\n", "# Determine the protein chains, and their start numbers according to the", "\n", "# internal mmCIF numbering scheme (likely but not guaranteed to be 1).", "\n", "valid_chains", "=", "_get_protein_chains", "(", "parsed_info", "=", "parsed_info", ")", "\n", "if", "not", "valid_chains", ":", "\n", "            ", "return", "ParsingResult", "(", "\n", "None", ",", "{", "(", "file_id", ",", "\"\"", ")", ":", "\"No protein chains found in this file.\"", "}", "\n", ")", "\n", "", "seq_start_num", "=", "{", "\n", "chain_id", ":", "min", "(", "[", "monomer", ".", "num", "for", "monomer", "in", "seq", "]", ")", "\n", "for", "chain_id", ",", "seq", "in", "valid_chains", ".", "items", "(", ")", "\n", "}", "\n", "\n", "# Loop over the atoms for which we have coordinates. Populate two mappings:", "\n", "# -mmcif_to_author_chain_id (maps internal mmCIF chain ids to chain ids used", "\n", "# the authors / Biopython).", "\n", "# -seq_to_structure_mappings (maps idx into sequence to ResidueAtPosition).", "\n", "mmcif_to_author_chain_id", "=", "{", "}", "\n", "seq_to_structure_mappings", "=", "{", "}", "\n", "for", "atom", "in", "_get_atom_site_list", "(", "parsed_info", ")", ":", "\n", "            ", "if", "atom", ".", "model_num", "!=", "\"1\"", ":", "\n", "# We only process the first model at the moment.", "\n", "                ", "continue", "\n", "\n", "", "mmcif_to_author_chain_id", "[", "atom", ".", "mmcif_chain_id", "]", "=", "atom", ".", "author_chain_id", "\n", "\n", "if", "atom", ".", "mmcif_chain_id", "in", "valid_chains", ":", "\n", "                ", "hetflag", "=", "\" \"", "\n", "if", "atom", ".", "hetatm_atom", "==", "\"HETATM\"", ":", "\n", "# Water atoms are assigned a special hetflag of W in Biopython. We", "\n", "# need to do the same, so that this hetflag can be used to fetch", "\n", "# a residue from the Biopython structure by id.", "\n", "                    ", "if", "atom", ".", "residue_name", "in", "(", "\"HOH\"", ",", "\"WAT\"", ")", ":", "\n", "                        ", "hetflag", "=", "\"W\"", "\n", "", "else", ":", "\n", "                        ", "hetflag", "=", "\"H_\"", "+", "atom", ".", "residue_name", "\n", "", "", "insertion_code", "=", "atom", ".", "insertion_code", "\n", "if", "not", "_is_set", "(", "atom", ".", "insertion_code", ")", ":", "\n", "                    ", "insertion_code", "=", "\" \"", "\n", "", "position", "=", "ResiduePosition", "(", "\n", "chain_id", "=", "atom", ".", "author_chain_id", ",", "\n", "residue_number", "=", "int", "(", "atom", ".", "author_seq_num", ")", ",", "\n", "insertion_code", "=", "insertion_code", ",", "\n", ")", "\n", "seq_idx", "=", "(", "\n", "int", "(", "atom", ".", "mmcif_seq_num", ")", "-", "seq_start_num", "[", "atom", ".", "mmcif_chain_id", "]", "\n", ")", "\n", "current", "=", "seq_to_structure_mappings", ".", "get", "(", "\n", "atom", ".", "author_chain_id", ",", "{", "}", "\n", ")", "\n", "current", "[", "seq_idx", "]", "=", "ResidueAtPosition", "(", "\n", "position", "=", "position", ",", "\n", "name", "=", "atom", ".", "residue_name", ",", "\n", "is_missing", "=", "False", ",", "\n", "hetflag", "=", "hetflag", ",", "\n", ")", "\n", "seq_to_structure_mappings", "[", "atom", ".", "author_chain_id", "]", "=", "current", "\n", "\n", "# Add missing residue information to seq_to_structure_mappings.", "\n", "", "", "for", "chain_id", ",", "seq_info", "in", "valid_chains", ".", "items", "(", ")", ":", "\n", "            ", "author_chain", "=", "mmcif_to_author_chain_id", "[", "chain_id", "]", "\n", "current_mapping", "=", "seq_to_structure_mappings", "[", "author_chain", "]", "\n", "for", "idx", ",", "monomer", "in", "enumerate", "(", "seq_info", ")", ":", "\n", "                ", "if", "idx", "not", "in", "current_mapping", ":", "\n", "                    ", "current_mapping", "[", "idx", "]", "=", "ResidueAtPosition", "(", "\n", "position", "=", "None", ",", "\n", "name", "=", "monomer", ".", "id", ",", "\n", "is_missing", "=", "True", ",", "\n", "hetflag", "=", "\" \"", ",", "\n", ")", "\n", "\n", "", "", "", "author_chain_to_sequence", "=", "{", "}", "\n", "for", "chain_id", ",", "seq_info", "in", "valid_chains", ".", "items", "(", ")", ":", "\n", "            ", "author_chain", "=", "mmcif_to_author_chain_id", "[", "chain_id", "]", "\n", "seq", "=", "[", "]", "\n", "for", "monomer", "in", "seq_info", ":", "\n", "                ", "code", "=", "SCOPData", ".", "protein_letters_3to1", ".", "get", "(", "monomer", ".", "id", ",", "\"X\"", ")", "\n", "seq", ".", "append", "(", "code", "if", "len", "(", "code", ")", "==", "1", "else", "\"X\"", ")", "\n", "", "seq", "=", "\"\"", ".", "join", "(", "seq", ")", "\n", "author_chain_to_sequence", "[", "author_chain", "]", "=", "seq", "\n", "\n", "", "mmcif_object", "=", "MmcifObject", "(", "\n", "file_id", "=", "file_id", ",", "\n", "header", "=", "header", ",", "\n", "structure", "=", "first_model_structure", ",", "\n", "chain_to_seqres", "=", "author_chain_to_sequence", ",", "\n", "seqres_to_structure", "=", "seq_to_structure_mappings", ",", "\n", "raw_string", "=", "parsed_info", ",", "\n", ")", "\n", "\n", "return", "ParsingResult", "(", "mmcif_object", "=", "mmcif_object", ",", "errors", "=", "errors", ")", "\n", "", "except", "Exception", "as", "e", ":", "# pylint:disable=broad-except", "\n", "        ", "errors", "[", "(", "file_id", ",", "\"\"", ")", "]", "=", "e", "\n", "if", "not", "catch_all_errors", ":", "\n", "            ", "raise", "\n", "", "return", "ParsingResult", "(", "mmcif_object", "=", "None", ",", "errors", "=", "errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing._get_first_model": [[306, 309], ["next", "structure.get_models"], "function", ["None"], ["", "", "def", "_get_first_model", "(", "structure", ":", "PdbStructure", ")", "->", "PdbStructure", ":", "\n", "    ", "\"\"\"Returns the first model in a Biopython structure.\"\"\"", "\n", "return", "next", "(", "structure", ".", "get_models", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.get_release_date": [[314, 318], ["min"], "function", ["None"], ["def", "get_release_date", "(", "parsed_info", ":", "MmCIFDict", ")", "->", "str", ":", "\n", "    ", "\"\"\"Returns the oldest revision date.\"\"\"", "\n", "revision_dates", "=", "parsed_info", "[", "\"_pdbx_audit_revision_history.revision_date\"", "]", "\n", "return", "min", "(", "revision_dates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing._get_header": [[320, 354], ["mmcif_parsing.mmcif_loop_to_list", "mmcif_parsing.get_release_date", "logging.warning", "experiment[].lower", "float", "logging.info"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.mmcif_loop_to_list", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.get_release_date"], ["", "def", "_get_header", "(", "parsed_info", ":", "MmCIFDict", ")", "->", "PdbHeader", ":", "\n", "    ", "\"\"\"Returns a basic header containing method, release date and resolution.\"\"\"", "\n", "header", "=", "{", "}", "\n", "\n", "experiments", "=", "mmcif_loop_to_list", "(", "\"_exptl.\"", ",", "parsed_info", ")", "\n", "header", "[", "\"structure_method\"", "]", "=", "\",\"", ".", "join", "(", "\n", "[", "experiment", "[", "\"_exptl.method\"", "]", ".", "lower", "(", ")", "for", "experiment", "in", "experiments", "]", "\n", ")", "\n", "\n", "# Note: The release_date here corresponds to the oldest revision. We prefer to", "\n", "# use this for dataset filtering over the deposition_date.", "\n", "if", "\"_pdbx_audit_revision_history.revision_date\"", "in", "parsed_info", ":", "\n", "        ", "header", "[", "\"release_date\"", "]", "=", "get_release_date", "(", "parsed_info", ")", "\n", "", "else", ":", "\n", "        ", "logging", ".", "warning", "(", "\n", "\"Could not determine release_date: %s\"", ",", "parsed_info", "[", "\"_entry.id\"", "]", "\n", ")", "\n", "\n", "", "header", "[", "\"resolution\"", "]", "=", "0.00", "\n", "for", "res_key", "in", "(", "\n", "\"_refine.ls_d_res_high\"", ",", "\n", "\"_em_3d_reconstruction.resolution\"", ",", "\n", "\"_reflns.d_resolution_high\"", ",", "\n", ")", ":", "\n", "        ", "if", "res_key", "in", "parsed_info", ":", "\n", "            ", "try", ":", "\n", "                ", "raw_resolution", "=", "parsed_info", "[", "res_key", "]", "[", "0", "]", "\n", "header", "[", "\"resolution\"", "]", "=", "float", "(", "raw_resolution", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "\"Invalid resolution format: %s\"", ",", "parsed_info", "[", "res_key", "]", "\n", ")", "\n", "\n", "", "", "", "return", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing._get_atom_site_list": [[356, 369], ["mmcif_parsing.AtomSite", "zip"], "function", ["None"], ["", "def", "_get_atom_site_list", "(", "parsed_info", ":", "MmCIFDict", ")", "->", "Sequence", "[", "AtomSite", "]", ":", "\n", "    ", "\"\"\"Returns list of atom sites; contains data not present in the structure.\"\"\"", "\n", "return", "[", "\n", "AtomSite", "(", "*", "site", ")", "\n", "for", "site", "in", "zip", "(", "# pylint:disable=g-complex-comprehension", "\n", "parsed_info", "[", "\"_atom_site.label_comp_id\"", "]", ",", "\n", "parsed_info", "[", "\"_atom_site.auth_asym_id\"", "]", ",", "\n", "parsed_info", "[", "\"_atom_site.label_asym_id\"", "]", ",", "\n", "parsed_info", "[", "\"_atom_site.auth_seq_id\"", "]", ",", "\n", "parsed_info", "[", "\"_atom_site.label_seq_id\"", "]", ",", "\n", "parsed_info", "[", "\"_atom_site.pdbx_PDB_ins_code\"", "]", ",", "\n", "parsed_info", "[", "\"_atom_site.group_PDB\"", "]", ",", "\n", "parsed_info", "[", "\"_atom_site.pdbx_PDB_model_num\"", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing._get_protein_chains": [[373, 425], ["mmcif_parsing.mmcif_loop_to_list", "collections.defaultdict", "mmcif_parsing.mmcif_loop_to_dict", "mmcif_parsing.mmcif_loop_to_list", "collections.defaultdict", "collections.defaultdict.items", "polymers[].append", "entity_to_mmcif_chains[].append", "any", "mmcif_parsing.Monomer", "int"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.mmcif_loop_to_list", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.mmcif_loop_to_dict", "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.mmcif_loop_to_list"], ["", "def", "_get_protein_chains", "(", "\n", "*", ",", "parsed_info", ":", "Mapping", "[", "str", ",", "Any", "]", "\n", ")", "->", "Mapping", "[", "ChainId", ",", "Sequence", "[", "Monomer", "]", "]", ":", "\n", "    ", "\"\"\"Extracts polymer information for protein chains only.\n\n    Args:\n      parsed_info: _mmcif_dict produced by the Biopython parser.\n\n    Returns:\n      A dict mapping mmcif chain id to a list of Monomers.\n    \"\"\"", "\n", "# Get polymer information for each entity in the structure.", "\n", "entity_poly_seqs", "=", "mmcif_loop_to_list", "(", "\"_entity_poly_seq.\"", ",", "parsed_info", ")", "\n", "\n", "polymers", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "entity_poly_seq", "in", "entity_poly_seqs", ":", "\n", "        ", "polymers", "[", "entity_poly_seq", "[", "\"_entity_poly_seq.entity_id\"", "]", "]", ".", "append", "(", "\n", "Monomer", "(", "\n", "id", "=", "entity_poly_seq", "[", "\"_entity_poly_seq.mon_id\"", "]", ",", "\n", "num", "=", "int", "(", "entity_poly_seq", "[", "\"_entity_poly_seq.num\"", "]", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "# Get chemical compositions. Will allow us to identify which of these polymers", "\n", "# are proteins.", "\n", "", "chem_comps", "=", "mmcif_loop_to_dict", "(", "\"_chem_comp.\"", ",", "\"_chem_comp.id\"", ",", "parsed_info", ")", "\n", "\n", "# Get chains information for each entity. Necessary so that we can return a", "\n", "# dict keyed on chain id rather than entity.", "\n", "struct_asyms", "=", "mmcif_loop_to_list", "(", "\"_struct_asym.\"", ",", "parsed_info", ")", "\n", "\n", "entity_to_mmcif_chains", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "struct_asym", "in", "struct_asyms", ":", "\n", "        ", "chain_id", "=", "struct_asym", "[", "\"_struct_asym.id\"", "]", "\n", "entity_id", "=", "struct_asym", "[", "\"_struct_asym.entity_id\"", "]", "\n", "entity_to_mmcif_chains", "[", "entity_id", "]", ".", "append", "(", "chain_id", ")", "\n", "\n", "# Identify and return the valid protein chains.", "\n", "", "valid_chains", "=", "{", "}", "\n", "for", "entity_id", ",", "seq_info", "in", "polymers", ".", "items", "(", ")", ":", "\n", "        ", "chain_ids", "=", "entity_to_mmcif_chains", "[", "entity_id", "]", "\n", "\n", "# Reject polymers without any peptide-like components, such as DNA/RNA.", "\n", "if", "any", "(", "\n", "[", "\n", "\"peptide\"", "in", "chem_comps", "[", "monomer", ".", "id", "]", "[", "\"_chem_comp.type\"", "]", "\n", "for", "monomer", "in", "seq_info", "\n", "]", "\n", ")", ":", "\n", "            ", "for", "chain_id", "in", "chain_ids", ":", "\n", "                ", "valid_chains", "[", "chain_id", "]", "=", "seq_info", "\n", "", "", "", "return", "valid_chains", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing._is_set": [[427, 430], ["None"], "function", ["None"], ["", "def", "_is_set", "(", "data", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Returns False if data is a special mmCIF character indicating 'unset'.\"\"\"", "\n", "return", "data", "not", "in", "(", "\".\"", ",", "\"?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.data.mmcif_parsing.get_atom_coords": [[432, 486], ["list", "len", "numpy.zeros", "numpy.zeros", "range", "mmcif_object.structure.get_chains", "len", "fastfold.data.errors.MultipleChainsError", "numpy.zeros", "numpy.zeros", "np.zeros.astype", "all_atom_positions[].mean", "res.get_atoms", "atom.get_name", "atom.get_coord", "fastfold.atom_order.keys", "atom.get_name.upper", "res.get_resname"], "function", ["None"], ["", "def", "get_atom_coords", "(", "\n", "mmcif_object", ":", "MmcifObject", ",", "\n", "chain_id", ":", "str", ",", "\n", "_zero_center_positions", ":", "bool", "=", "True", "\n", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "# Locate the right chain", "\n", "    ", "chains", "=", "list", "(", "mmcif_object", ".", "structure", ".", "get_chains", "(", ")", ")", "\n", "relevant_chains", "=", "[", "c", "for", "c", "in", "chains", "if", "c", ".", "id", "==", "chain_id", "]", "\n", "if", "len", "(", "relevant_chains", ")", "!=", "1", ":", "\n", "        ", "raise", "MultipleChainsError", "(", "\n", "f\"Expected exactly one chain in structure with id {chain_id}.\"", "\n", ")", "\n", "", "chain", "=", "relevant_chains", "[", "0", "]", "\n", "\n", "# Extract the coordinates", "\n", "num_res", "=", "len", "(", "mmcif_object", ".", "chain_to_seqres", "[", "chain_id", "]", ")", "\n", "all_atom_positions", "=", "np", ".", "zeros", "(", "\n", "[", "num_res", ",", "residue_constants", ".", "atom_type_num", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "all_atom_mask", "=", "np", ".", "zeros", "(", "\n", "[", "num_res", ",", "residue_constants", ".", "atom_type_num", "]", ",", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "for", "res_index", "in", "range", "(", "num_res", ")", ":", "\n", "        ", "pos", "=", "np", ".", "zeros", "(", "[", "residue_constants", ".", "atom_type_num", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "[", "residue_constants", ".", "atom_type_num", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "res_at_position", "=", "mmcif_object", ".", "seqres_to_structure", "[", "chain_id", "]", "[", "res_index", "]", "\n", "if", "not", "res_at_position", ".", "is_missing", ":", "\n", "            ", "res", "=", "chain", "[", "\n", "(", "\n", "res_at_position", ".", "hetflag", ",", "\n", "res_at_position", ".", "position", ".", "residue_number", ",", "\n", "res_at_position", ".", "position", ".", "insertion_code", ",", "\n", ")", "\n", "]", "\n", "for", "atom", "in", "res", ".", "get_atoms", "(", ")", ":", "\n", "                ", "atom_name", "=", "atom", ".", "get_name", "(", ")", "\n", "x", ",", "y", ",", "z", "=", "atom", ".", "get_coord", "(", ")", "\n", "if", "atom_name", "in", "residue_constants", ".", "atom_order", ".", "keys", "(", ")", ":", "\n", "                    ", "pos", "[", "residue_constants", ".", "atom_order", "[", "atom_name", "]", "]", "=", "[", "x", ",", "y", ",", "z", "]", "\n", "mask", "[", "residue_constants", ".", "atom_order", "[", "atom_name", "]", "]", "=", "1.0", "\n", "", "elif", "atom_name", ".", "upper", "(", ")", "==", "\"SE\"", "and", "res", ".", "get_resname", "(", ")", "==", "\"MSE\"", ":", "\n", "# Put the coords of the selenium atom in the sulphur column", "\n", "                    ", "pos", "[", "residue_constants", ".", "atom_order", "[", "\"SD\"", "]", "]", "=", "[", "x", ",", "y", ",", "z", "]", "\n", "mask", "[", "residue_constants", ".", "atom_order", "[", "\"SD\"", "]", "]", "=", "1.0", "\n", "\n", "", "", "", "all_atom_positions", "[", "res_index", "]", "=", "pos", "\n", "all_atom_mask", "[", "res_index", "]", "=", "mask", "\n", "\n", "", "if", "_zero_center_positions", ":", "\n", "        ", "binary_mask", "=", "all_atom_mask", ".", "astype", "(", "bool", ")", "\n", "translation_vec", "=", "all_atom_positions", "[", "binary_mask", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "all_atom_positions", "[", "binary_mask", "]", "-=", "translation_vec", "\n", "\n", "", "return", "all_atom_positions", ",", "all_atom_mask", "\n", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.hhsearch.HHSearch.__init__": [[29, 63], ["glob.glob", "logging.error", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "binary_path", ":", "str", ",", "\n", "databases", ":", "Sequence", "[", "str", "]", ",", "\n", "n_cpu", ":", "int", "=", "2", ",", "\n", "maxseq", ":", "int", "=", "1_000_000", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Initializes the Python HHsearch wrapper.\n\n        Args:\n          binary_path: The path to the HHsearch executable.\n          databases: A sequence of HHsearch database paths. This should be the\n            common prefix for the database files (i.e. up to but not including\n            _hhm.ffindex etc.)\n          n_cpu: The number of CPUs to use\n          maxseq: The maximum number of rows in an input alignment. Note that this\n            parameter is only supported in HHBlits version 3.1 and higher.\n\n        Raises:\n          RuntimeError: If HHsearch binary not found within the path.\n        \"\"\"", "\n", "self", ".", "binary_path", "=", "binary_path", "\n", "self", ".", "databases", "=", "databases", "\n", "self", ".", "n_cpu", "=", "n_cpu", "\n", "self", ".", "maxseq", "=", "maxseq", "\n", "\n", "for", "database_path", "in", "self", ".", "databases", ":", "\n", "            ", "if", "not", "glob", ".", "glob", "(", "database_path", "+", "\"_*\"", ")", ":", "\n", "                ", "logging", ".", "error", "(", "\n", "\"Could not find HHsearch database %s\"", ",", "database_path", "\n", ")", "\n", "raise", "ValueError", "(", "\n", "f\"Could not find HHsearch database {database_path}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.hhsearch.HHSearch.query": [[65, 107], ["fastfold.data.tools.utils.tmpdir_manager", "os.path.join", "os.path.join", "logging.info", "subprocess.Popen", "open", "f.write", "db_cmd.append", "db_cmd.append", "fastfold.data.tools.utils.timing", "subprocess.Popen.communicate", "subprocess.Popen.wait", "RuntimeError", "open", "f.read", "str", "str", "stdout.decode", "stderr[].decode"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.tmpdir_manager", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.timing"], ["", "", "", "def", "query", "(", "self", ",", "a3m", ":", "str", ")", "->", "str", ":", "\n", "        ", "\"\"\"Queries the database using HHsearch using a given a3m.\"\"\"", "\n", "with", "utils", ".", "tmpdir_manager", "(", "base_dir", "=", "\"/tmp\"", ")", "as", "query_tmp_dir", ":", "\n", "            ", "input_path", "=", "os", ".", "path", ".", "join", "(", "query_tmp_dir", ",", "\"query.a3m\"", ")", "\n", "hhr_path", "=", "os", ".", "path", ".", "join", "(", "query_tmp_dir", ",", "\"output.hhr\"", ")", "\n", "with", "open", "(", "input_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "a3m", ")", "\n", "\n", "", "db_cmd", "=", "[", "]", "\n", "for", "db_path", "in", "self", ".", "databases", ":", "\n", "                ", "db_cmd", ".", "append", "(", "\"-d\"", ")", "\n", "db_cmd", ".", "append", "(", "db_path", ")", "\n", "", "cmd", "=", "[", "\n", "self", ".", "binary_path", ",", "\n", "\"-i\"", ",", "\n", "input_path", ",", "\n", "\"-o\"", ",", "\n", "hhr_path", ",", "\n", "\"-maxseq\"", ",", "\n", "str", "(", "self", ".", "maxseq", ")", ",", "\n", "\"-cpu\"", ",", "\n", "str", "(", "self", ".", "n_cpu", ")", ",", "\n", "]", "+", "db_cmd", "\n", "\n", "logging", ".", "info", "(", "'Launching subprocess \"%s\"'", ",", "\" \"", ".", "join", "(", "cmd", ")", ")", "\n", "process", "=", "subprocess", ".", "Popen", "(", "\n", "cmd", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", "\n", ")", "\n", "with", "utils", ".", "timing", "(", "\"HHsearch query\"", ")", ":", "\n", "                ", "stdout", ",", "stderr", "=", "process", ".", "communicate", "(", ")", "\n", "retcode", "=", "process", ".", "wait", "(", ")", "\n", "\n", "", "if", "retcode", ":", "\n", "# Stderr is truncated to prevent proto size errors in Beam.", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"HHSearch failed:\\nstdout:\\n%s\\n\\nstderr:\\n%s\\n\"", "\n", "%", "(", "stdout", ".", "decode", "(", "\"utf-8\"", ")", ",", "stderr", "[", ":", "100_000", "]", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", ")", "\n", "\n", "", "with", "open", "(", "hhr_path", ")", "as", "f", ":", "\n", "                ", "hhr", "=", "f", ".", "read", "(", ")", "\n", "", "", "return", "hhr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.jackhmmer.Jackhmmer.__init__": [[32, 94], ["logging.error", "ValueError", "os.path.exists"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "binary_path", ":", "str", ",", "\n", "database_path", ":", "str", ",", "\n", "n_cpu", ":", "int", "=", "8", ",", "\n", "n_iter", ":", "int", "=", "1", ",", "\n", "e_value", ":", "float", "=", "0.0001", ",", "\n", "z_value", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "get_tblout", ":", "bool", "=", "False", ",", "\n", "filter_f1", ":", "float", "=", "0.0005", ",", "\n", "filter_f2", ":", "float", "=", "0.00005", ",", "\n", "filter_f3", ":", "float", "=", "0.0000005", ",", "\n", "incdom_e", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "dom_e", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", "num_streamed_chunks", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "streaming_callback", ":", "Optional", "[", "Callable", "[", "[", "int", "]", ",", "None", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Initializes the Python Jackhmmer wrapper.\n\n        Args:\n          binary_path: The path to the jackhmmer executable.\n          database_path: The path to the jackhmmer database (FASTA format).\n          n_cpu: The number of CPUs to give Jackhmmer.\n          n_iter: The number of Jackhmmer iterations.\n          e_value: The E-value, see Jackhmmer docs for more details.\n          z_value: The Z-value, see Jackhmmer docs for more details.\n          get_tblout: Whether to save tblout string.\n          filter_f1: MSV and biased composition pre-filter, set to >1.0 to turn off.\n          filter_f2: Viterbi pre-filter, set to >1.0 to turn off.\n          filter_f3: Forward pre-filter, set to >1.0 to turn off.\n          incdom_e: Domain e-value criteria for inclusion of domains in MSA/next\n            round.\n          dom_e: Domain e-value criteria for inclusion in tblout.\n          num_streamed_chunks: Number of database chunks to stream over.\n          streaming_callback: Callback function run after each chunk iteration with\n            the iteration number as argument.\n        \"\"\"", "\n", "self", ".", "binary_path", "=", "binary_path", "\n", "self", ".", "database_path", "=", "database_path", "\n", "self", ".", "num_streamed_chunks", "=", "num_streamed_chunks", "\n", "\n", "if", "(", "\n", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "database_path", ")", "\n", "and", "num_streamed_chunks", "is", "None", "\n", ")", ":", "\n", "            ", "logging", ".", "error", "(", "\"Could not find Jackhmmer database %s\"", ",", "database_path", ")", "\n", "raise", "ValueError", "(", "\n", "f\"Could not find Jackhmmer database {database_path}\"", "\n", ")", "\n", "\n", "", "self", ".", "n_cpu", "=", "n_cpu", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "e_value", "=", "e_value", "\n", "self", ".", "z_value", "=", "z_value", "\n", "self", ".", "filter_f1", "=", "filter_f1", "\n", "self", ".", "filter_f2", "=", "filter_f2", "\n", "self", ".", "filter_f3", "=", "filter_f3", "\n", "self", ".", "incdom_e", "=", "incdom_e", "\n", "self", ".", "dom_e", "=", "dom_e", "\n", "self", ".", "get_tblout", "=", "get_tblout", "\n", "self", ".", "streaming_callback", "=", "streaming_callback", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.jackhmmer.Jackhmmer._query_chunk": [[95, 182], ["dict", "fastfold.data.tools.utils.tmpdir_manager", "os.path.join", "logging.info", "subprocess.Popen", "str", "str", "str", "str", "str", "str", "str", "os.path.join", "cmd_flags.extend", "cmd_flags.extend", "cmd_flags.extend", "cmd_flags.extend", "fastfold.data.tools.utils.timing", "subprocess.Popen.communicate", "subprocess.Popen.wait", "RuntimeError", "open", "f.read", "open", "f.read", "str", "str", "str", "stderr.decode", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.tmpdir_manager", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.timing"], ["", "def", "_query_chunk", "(", "\n", "self", ",", "input_fasta_path", ":", "str", ",", "database_path", ":", "str", "\n", ")", "->", "Mapping", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\"Queries the database chunk using Jackhmmer.\"\"\"", "\n", "with", "utils", ".", "tmpdir_manager", "(", "base_dir", "=", "\"/tmp\"", ")", "as", "query_tmp_dir", ":", "\n", "            ", "sto_path", "=", "os", ".", "path", ".", "join", "(", "query_tmp_dir", ",", "\"output.sto\"", ")", "\n", "\n", "# The F1/F2/F3 are the expected proportion to pass each of the filtering", "\n", "# stages (which get progressively more expensive), reducing these", "\n", "# speeds up the pipeline at the expensive of sensitivity.  They are", "\n", "# currently set very low to make querying Mgnify run in a reasonable", "\n", "# amount of time.", "\n", "cmd_flags", "=", "[", "\n", "# Don't pollute stdout with Jackhmmer output.", "\n", "\"-o\"", ",", "\n", "\"/dev/null\"", ",", "\n", "\"-A\"", ",", "\n", "sto_path", ",", "\n", "\"--noali\"", ",", "\n", "\"--F1\"", ",", "\n", "str", "(", "self", ".", "filter_f1", ")", ",", "\n", "\"--F2\"", ",", "\n", "str", "(", "self", ".", "filter_f2", ")", ",", "\n", "\"--F3\"", ",", "\n", "str", "(", "self", ".", "filter_f3", ")", ",", "\n", "\"--incE\"", ",", "\n", "str", "(", "self", ".", "e_value", ")", ",", "\n", "# Report only sequences with E-values <= x in per-sequence output.", "\n", "\"-E\"", ",", "\n", "str", "(", "self", ".", "e_value", ")", ",", "\n", "\"--cpu\"", ",", "\n", "str", "(", "self", ".", "n_cpu", ")", ",", "\n", "\"-N\"", ",", "\n", "str", "(", "self", ".", "n_iter", ")", ",", "\n", "]", "\n", "if", "self", ".", "get_tblout", ":", "\n", "                ", "tblout_path", "=", "os", ".", "path", ".", "join", "(", "query_tmp_dir", ",", "\"tblout.txt\"", ")", "\n", "cmd_flags", ".", "extend", "(", "[", "\"--tblout\"", ",", "tblout_path", "]", ")", "\n", "\n", "", "if", "self", ".", "z_value", ":", "\n", "                ", "cmd_flags", ".", "extend", "(", "[", "\"-Z\"", ",", "str", "(", "self", ".", "z_value", ")", "]", ")", "\n", "\n", "", "if", "self", ".", "dom_e", "is", "not", "None", ":", "\n", "                ", "cmd_flags", ".", "extend", "(", "[", "\"--domE\"", ",", "str", "(", "self", ".", "dom_e", ")", "]", ")", "\n", "\n", "", "if", "self", ".", "incdom_e", "is", "not", "None", ":", "\n", "                ", "cmd_flags", ".", "extend", "(", "[", "\"--incdomE\"", ",", "str", "(", "self", ".", "incdom_e", ")", "]", ")", "\n", "\n", "", "cmd", "=", "(", "\n", "[", "self", ".", "binary_path", "]", "\n", "+", "cmd_flags", "\n", "+", "[", "input_fasta_path", ",", "database_path", "]", "\n", ")", "\n", "\n", "logging", ".", "info", "(", "'Launching subprocess \"%s\"'", ",", "\" \"", ".", "join", "(", "cmd", ")", ")", "\n", "process", "=", "subprocess", ".", "Popen", "(", "\n", "cmd", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", "\n", ")", "\n", "with", "utils", ".", "timing", "(", "\n", "f\"Jackhmmer ({os.path.basename(database_path)}) query\"", "\n", ")", ":", "\n", "                ", "_", ",", "stderr", "=", "process", ".", "communicate", "(", ")", "\n", "retcode", "=", "process", ".", "wait", "(", ")", "\n", "\n", "", "if", "retcode", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"Jackhmmer failed\\nstderr:\\n%s\\n\"", "%", "stderr", ".", "decode", "(", "\"utf-8\"", ")", "\n", ")", "\n", "\n", "# Get e-values for each target name", "\n", "", "tbl", "=", "\"\"", "\n", "if", "self", ".", "get_tblout", ":", "\n", "                ", "with", "open", "(", "tblout_path", ")", "as", "f", ":", "\n", "                    ", "tbl", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "", "with", "open", "(", "sto_path", ")", "as", "f", ":", "\n", "                ", "sto", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "", "raw_output", "=", "dict", "(", "\n", "sto", "=", "sto", ",", "\n", "tbl", "=", "tbl", ",", "\n", "stderr", "=", "stderr", ",", "\n", "n_iter", "=", "self", ".", "n_iter", ",", "\n", "e_value", "=", "self", ".", "e_value", ",", "\n", ")", "\n", "\n", "return", "raw_output", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.jackhmmer.Jackhmmer.query": [[183, 229], ["os.path.basename", "glob.glob", "db_local_chunk", "concurrent.futures.ThreadPoolExecutor", "range", "jackhmmer.Jackhmmer._query_chunk", "os.remove", "executor.submit.result", "chunked_output.append", "os.remove", "print", "executor.submit", "executor.submit", "jackhmmer.Jackhmmer._query_chunk", "db_local_chunk", "jackhmmer.Jackhmmer.streaming_callback", "db_remote_chunk", "db_local_chunk", "db_remote_chunk", "db_local_chunk", "db_local_chunk"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.jackhmmer.Jackhmmer._query_chunk", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.jackhmmer.Jackhmmer._query_chunk"], ["", "def", "query", "(", "self", ",", "input_fasta_path", ":", "str", ")", "->", "Sequence", "[", "Mapping", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "\"\"\"Queries the database using Jackhmmer.\"\"\"", "\n", "if", "self", ".", "num_streamed_chunks", "is", "None", ":", "\n", "            ", "return", "[", "self", ".", "_query_chunk", "(", "input_fasta_path", ",", "self", ".", "database_path", ")", "]", "\n", "\n", "", "db_basename", "=", "os", ".", "path", ".", "basename", "(", "self", ".", "database_path", ")", "\n", "db_remote_chunk", "=", "lambda", "db_idx", ":", "f\"{self.database_path}.{db_idx}\"", "\n", "db_local_chunk", "=", "lambda", "db_idx", ":", "f\"/tmp/ramdisk/{db_basename}.{db_idx}\"", "\n", "\n", "# Remove existing files to prevent OOM", "\n", "for", "f", "in", "glob", ".", "glob", "(", "db_local_chunk", "(", "\"[0-9]*\"", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "f", ")", "\n", "", "except", "OSError", ":", "\n", "                ", "print", "(", "f\"OSError while deleting {f}\"", ")", "\n", "\n", "# Download the (i+1)-th chunk while Jackhmmer is running on the i-th chunk", "\n", "", "", "with", "futures", ".", "ThreadPoolExecutor", "(", "max_workers", "=", "2", ")", "as", "executor", ":", "\n", "            ", "chunked_output", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_streamed_chunks", "+", "1", ")", ":", "\n", "# Copy the chunk locally", "\n", "                ", "if", "i", "==", "1", ":", "\n", "                    ", "future", "=", "executor", ".", "submit", "(", "\n", "request", ".", "urlretrieve", ",", "\n", "db_remote_chunk", "(", "i", ")", ",", "\n", "db_local_chunk", "(", "i", ")", ",", "\n", ")", "\n", "", "if", "i", "<", "self", ".", "num_streamed_chunks", ":", "\n", "                    ", "next_future", "=", "executor", ".", "submit", "(", "\n", "request", ".", "urlretrieve", ",", "\n", "db_remote_chunk", "(", "i", "+", "1", ")", ",", "\n", "db_local_chunk", "(", "i", "+", "1", ")", ",", "\n", ")", "\n", "\n", "# Run Jackhmmer with the chunk", "\n", "", "future", ".", "result", "(", ")", "\n", "chunked_output", ".", "append", "(", "\n", "self", ".", "_query_chunk", "(", "input_fasta_path", ",", "db_local_chunk", "(", "i", ")", ")", "\n", ")", "\n", "\n", "# Remove the local copy of the chunk", "\n", "os", ".", "remove", "(", "db_local_chunk", "(", "i", ")", ")", "\n", "future", "=", "next_future", "\n", "if", "self", ".", "streaming_callback", ":", "\n", "                    ", "self", ".", "streaming_callback", "(", "i", ")", "\n", "", "", "", "return", "chunked_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.hhblits.HHBlits.__init__": [[33, 101], ["glob.glob", "logging.error", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "binary_path", ":", "str", ",", "\n", "databases", ":", "Sequence", "[", "str", "]", ",", "\n", "n_cpu", ":", "int", "=", "4", ",", "\n", "n_iter", ":", "int", "=", "3", ",", "\n", "e_value", ":", "float", "=", "0.001", ",", "\n", "maxseq", ":", "int", "=", "1_000_000", ",", "\n", "realign_max", ":", "int", "=", "100_000", ",", "\n", "maxfilt", ":", "int", "=", "100_000", ",", "\n", "min_prefilter_hits", ":", "int", "=", "1000", ",", "\n", "all_seqs", ":", "bool", "=", "False", ",", "\n", "alt", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "p", ":", "int", "=", "_HHBLITS_DEFAULT_P", ",", "\n", "z", ":", "int", "=", "_HHBLITS_DEFAULT_Z", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Initializes the Python HHblits wrapper.\n\n        Args:\n          binary_path: The path to the HHblits executable.\n          databases: A sequence of HHblits database paths. This should be the\n            common prefix for the database files (i.e. up to but not including\n            _hhm.ffindex etc.)\n          n_cpu: The number of CPUs to give HHblits.\n          n_iter: The number of HHblits iterations.\n          e_value: The E-value, see HHblits docs for more details.\n          maxseq: The maximum number of rows in an input alignment. Note that this\n            parameter is only supported in HHBlits version 3.1 and higher.\n          realign_max: Max number of HMM-HMM hits to realign. HHblits default: 500.\n          maxfilt: Max number of hits allowed to pass the 2nd prefilter.\n            HHblits default: 20000.\n          min_prefilter_hits: Min number of hits to pass prefilter.\n            HHblits default: 100.\n          all_seqs: Return all sequences in the MSA / Do not filter the result MSA.\n            HHblits default: False.\n          alt: Show up to this many alternative alignments.\n          p: Minimum Prob for a hit to be included in the output hhr file.\n            HHblits default: 20.\n          z: Hard cap on number of hits reported in the hhr file.\n            HHblits default: 500. NB: The relevant HHblits flag is -Z not -z.\n\n        Raises:\n          RuntimeError: If HHblits binary not found within the path.\n        \"\"\"", "\n", "self", ".", "binary_path", "=", "binary_path", "\n", "self", ".", "databases", "=", "databases", "\n", "\n", "for", "database_path", "in", "self", ".", "databases", ":", "\n", "            ", "if", "not", "glob", ".", "glob", "(", "database_path", "+", "\"_*\"", ")", ":", "\n", "                ", "logging", ".", "error", "(", "\n", "\"Could not find HHBlits database %s\"", ",", "database_path", "\n", ")", "\n", "raise", "ValueError", "(", "\n", "f\"Could not find HHBlits database {database_path}\"", "\n", ")", "\n", "\n", "", "", "self", ".", "n_cpu", "=", "n_cpu", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "e_value", "=", "e_value", "\n", "self", ".", "maxseq", "=", "maxseq", "\n", "self", ".", "realign_max", "=", "realign_max", "\n", "self", ".", "maxfilt", "=", "maxfilt", "\n", "self", ".", "min_prefilter_hits", "=", "min_prefilter_hits", "\n", "self", ".", "all_seqs", "=", "all_seqs", "\n", "self", ".", "alt", "=", "alt", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "z", "=", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.hhblits.HHBlits.query": [[102, 176], ["dict", "fastfold.data.tools.utils.tmpdir_manager", "os.path.join", "logging.info", "subprocess.Popen", "db_cmd.append", "db_cmd.append", "str", "str", "str", "str", "str", "str", "str", "fastfold.data.tools.utils.timing", "subprocess.Popen.communicate", "subprocess.Popen.wait", "logging.error", "stderr.decode().splitlines", "logging.error", "RuntimeError", "open", "f.read", "str", "str", "str", "error_line.strip", "stderr.decode", "logging.error", "error_line.strip", "stdout.decode", "stderr[].decode"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.tmpdir_manager", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.timing"], ["", "def", "query", "(", "self", ",", "input_fasta_path", ":", "str", ")", "->", "Mapping", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\"Queries the database using HHblits.\"\"\"", "\n", "with", "utils", ".", "tmpdir_manager", "(", "base_dir", "=", "\"/tmp\"", ")", "as", "query_tmp_dir", ":", "\n", "            ", "a3m_path", "=", "os", ".", "path", ".", "join", "(", "query_tmp_dir", ",", "\"output.a3m\"", ")", "\n", "\n", "db_cmd", "=", "[", "]", "\n", "for", "db_path", "in", "self", ".", "databases", ":", "\n", "                ", "db_cmd", ".", "append", "(", "\"-d\"", ")", "\n", "db_cmd", ".", "append", "(", "db_path", ")", "\n", "", "cmd", "=", "[", "\n", "self", ".", "binary_path", ",", "\n", "\"-i\"", ",", "\n", "input_fasta_path", ",", "\n", "\"-cpu\"", ",", "\n", "str", "(", "self", ".", "n_cpu", ")", ",", "\n", "\"-oa3m\"", ",", "\n", "a3m_path", ",", "\n", "\"-o\"", ",", "\n", "\"/dev/null\"", ",", "\n", "\"-n\"", ",", "\n", "str", "(", "self", ".", "n_iter", ")", ",", "\n", "\"-e\"", ",", "\n", "str", "(", "self", ".", "e_value", ")", ",", "\n", "\"-maxseq\"", ",", "\n", "str", "(", "self", ".", "maxseq", ")", ",", "\n", "\"-realign_max\"", ",", "\n", "str", "(", "self", ".", "realign_max", ")", ",", "\n", "\"-maxfilt\"", ",", "\n", "str", "(", "self", ".", "maxfilt", ")", ",", "\n", "\"-min_prefilter_hits\"", ",", "\n", "str", "(", "self", ".", "min_prefilter_hits", ")", ",", "\n", "]", "\n", "if", "self", ".", "all_seqs", ":", "\n", "                ", "cmd", "+=", "[", "\"-all\"", "]", "\n", "", "if", "self", ".", "alt", ":", "\n", "                ", "cmd", "+=", "[", "\"-alt\"", ",", "str", "(", "self", ".", "alt", ")", "]", "\n", "", "if", "self", ".", "p", "!=", "_HHBLITS_DEFAULT_P", ":", "\n", "                ", "cmd", "+=", "[", "\"-p\"", ",", "str", "(", "self", ".", "p", ")", "]", "\n", "", "if", "self", ".", "z", "!=", "_HHBLITS_DEFAULT_Z", ":", "\n", "                ", "cmd", "+=", "[", "\"-Z\"", ",", "str", "(", "self", ".", "z", ")", "]", "\n", "", "cmd", "+=", "db_cmd", "\n", "\n", "logging", ".", "info", "(", "'Launching subprocess \"%s\"'", ",", "\" \"", ".", "join", "(", "cmd", ")", ")", "\n", "process", "=", "subprocess", ".", "Popen", "(", "\n", "cmd", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", "\n", ")", "\n", "\n", "with", "utils", ".", "timing", "(", "\"HHblits query\"", ")", ":", "\n", "                ", "stdout", ",", "stderr", "=", "process", ".", "communicate", "(", ")", "\n", "retcode", "=", "process", ".", "wait", "(", ")", "\n", "\n", "", "if", "retcode", ":", "\n", "# Logs have a 15k character limit, so log HHblits error line by line.", "\n", "                ", "logging", ".", "error", "(", "\"HHblits failed. HHblits stderr begin:\"", ")", "\n", "for", "error_line", "in", "stderr", ".", "decode", "(", "\"utf-8\"", ")", ".", "splitlines", "(", ")", ":", "\n", "                    ", "if", "error_line", ".", "strip", "(", ")", ":", "\n", "                        ", "logging", ".", "error", "(", "error_line", ".", "strip", "(", ")", ")", "\n", "", "", "logging", ".", "error", "(", "\"HHblits stderr end\"", ")", "\n", "raise", "RuntimeError", "(", "\n", "\"HHblits failed\\nstdout:\\n%s\\n\\nstderr:\\n%s\\n\"", "\n", "%", "(", "stdout", ".", "decode", "(", "\"utf-8\"", ")", ",", "stderr", "[", ":", "500_000", "]", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", ")", "\n", "\n", "", "with", "open", "(", "a3m_path", ")", "as", "f", ":", "\n", "                ", "a3m", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "", "raw_output", "=", "dict", "(", "\n", "a3m", "=", "a3m", ",", "\n", "output", "=", "stdout", ",", "\n", "stderr", "=", "stderr", ",", "\n", "n_iter", "=", "self", ".", "n_iter", ",", "\n", "e_value", "=", "self", ".", "e_value", ",", "\n", ")", "\n", "return", "raw_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.__init__": [[39, 49], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", ",", "binary_path", ":", "str", ")", ":", "\n", "        ", "\"\"\"Initializes the Python Kalign wrapper.\n\n        Args:\n          binary_path: The path to the Kalign binary.\n\n        Raises:\n          RuntimeError: If Kalign binary not found within the path.\n        \"\"\"", "\n", "self", ".", "binary_path", "=", "binary_path", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign.Kalign.align": [[50, 116], ["absl.logging.info", "len", "fastfold.data.tools.utils.tmpdir_manager", "os.path.join", "os.path.join", "absl.logging.info", "subprocess.Popen", "len", "ValueError", "open", "f.write", "fastfold.data.tools.utils.timing", "subprocess.Popen.communicate", "subprocess.Popen.wait", "absl.logging.info", "RuntimeError", "open", "f.read", "kalign._to_a3m", "stdout.decode", "stderr.decode", "len", "stdout.decode", "stderr.decode"], "methods", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.tmpdir_manager", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.timing", "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign._to_a3m"], ["", "def", "align", "(", "self", ",", "sequences", ":", "Sequence", "[", "str", "]", ")", "->", "str", ":", "\n", "        ", "\"\"\"Aligns the sequences and returns the alignment in A3M string.\n\n        Args:\n          sequences: A list of query sequence strings. The sequences have to be at\n            least 6 residues long (Kalign requires this). Note that the order in\n            which you give the sequences might alter the output slightly as\n            different alignment tree might get constructed.\n\n        Returns:\n          A string with the alignment in a3m format.\n\n        Raises:\n          RuntimeError: If Kalign fails.\n          ValueError: If any of the sequences is less than 6 residues long.\n        \"\"\"", "\n", "logging", ".", "info", "(", "\"Aligning %d sequences\"", ",", "len", "(", "sequences", ")", ")", "\n", "\n", "for", "s", "in", "sequences", ":", "\n", "            ", "if", "len", "(", "s", ")", "<", "6", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Kalign requires all sequences to be at least 6 \"", "\n", "\"residues long. Got %s (%d residues).\"", "%", "(", "s", ",", "len", "(", "s", ")", ")", "\n", ")", "\n", "\n", "", "", "with", "utils", ".", "tmpdir_manager", "(", "base_dir", "=", "\"/tmp\"", ")", "as", "query_tmp_dir", ":", "\n", "            ", "input_fasta_path", "=", "os", ".", "path", ".", "join", "(", "query_tmp_dir", ",", "\"input.fasta\"", ")", "\n", "output_a3m_path", "=", "os", ".", "path", ".", "join", "(", "query_tmp_dir", ",", "\"output.a3m\"", ")", "\n", "\n", "with", "open", "(", "input_fasta_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "_to_a3m", "(", "sequences", ")", ")", "\n", "\n", "", "cmd", "=", "[", "\n", "self", ".", "binary_path", ",", "\n", "\"-i\"", ",", "\n", "input_fasta_path", ",", "\n", "\"-o\"", ",", "\n", "output_a3m_path", ",", "\n", "\"-format\"", ",", "\n", "\"fasta\"", ",", "\n", "]", "\n", "\n", "logging", ".", "info", "(", "'Launching subprocess \"%s\"'", ",", "\" \"", ".", "join", "(", "cmd", ")", ")", "\n", "process", "=", "subprocess", ".", "Popen", "(", "\n", "cmd", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "PIPE", "\n", ")", "\n", "\n", "with", "utils", ".", "timing", "(", "\"Kalign query\"", ")", ":", "\n", "                ", "stdout", ",", "stderr", "=", "process", ".", "communicate", "(", ")", "\n", "retcode", "=", "process", ".", "wait", "(", ")", "\n", "logging", ".", "info", "(", "\n", "\"Kalign stdout:\\n%s\\n\\nstderr:\\n%s\\n\"", ",", "\n", "stdout", ".", "decode", "(", "\"utf-8\"", ")", ",", "\n", "stderr", ".", "decode", "(", "\"utf-8\"", ")", ",", "\n", ")", "\n", "\n", "", "if", "retcode", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"Kalign failed\\nstdout:\\n%s\\n\\nstderr:\\n%s\\n\"", "\n", "%", "(", "stdout", ".", "decode", "(", "\"utf-8\"", ")", ",", "stderr", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", ")", "\n", "\n", "", "with", "open", "(", "output_a3m_path", ")", "as", "f", ":", "\n", "                ", "a3m", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "return", "a3m", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.kalign._to_a3m": [[26, 34], ["zip", "a3m.append", "a3m.append", "range", "len"], "function", ["None"], ["def", "_to_a3m", "(", "sequences", ":", "Sequence", "[", "str", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"Converts sequences to an a3m file.\"\"\"", "\n", "names", "=", "[", "\"sequence %d\"", "%", "i", "for", "i", "in", "range", "(", "1", ",", "len", "(", "sequences", ")", "+", "1", ")", "]", "\n", "a3m", "=", "[", "]", "\n", "for", "sequence", ",", "name", "in", "zip", "(", "sequences", ",", "names", ")", ":", "\n", "        ", "a3m", ".", "append", "(", "u\">\"", "+", "name", "+", "u\"\\n\"", ")", "\n", "a3m", ".", "append", "(", "sequence", "+", "u\"\\n\"", ")", "\n", "", "return", "\"\"", ".", "join", "(", "a3m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.tmpdir_manager": [[26, 34], ["tempfile.mkdtemp", "shutil.rmtree"], "function", ["None"], ["    ", "pdb_file", "=", "io", ".", "StringIO", "(", "pdb_str", ")", "\n", "structure", "=", "PdbStructure", "(", "pdb_file", ")", "\n", "topology", "=", "openmm_app", ".", "PDBFile", "(", "structure", ")", ".", "getTopology", "(", ")", "\n", "with", "io", ".", "StringIO", "(", ")", "as", "f", ":", "\n", "        ", "openmm_app", ".", "PDBFile", ".", "writeFile", "(", "topology", ",", "pos", ",", "f", ")", "\n", "return", "f", ".", "getvalue", "(", ")", "\n", "\n", "\n", "", "", "def", "overwrite_b_factors", "(", "pdb_str", ":", "str", ",", "bfactors", ":", "np", ".", "ndarray", ")", "->", "str", ":", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.timing": [[36, 43], ["logging.info", "time.perf_counter", "time.perf_counter", "logging.info"], "function", ["None"], []], "home.repos.pwc.inspect_result.hpcaitech_fastfold.tools.utils.to_date": [[45, 48], ["datetime.datetime", "int", "int", "int"], "function", ["None"], ["\n", "if", "bfactors", ".", "shape", "[", "-", "1", "]", "!=", "residue_constants", ".", "atom_type_num", ":", "\n", "        ", "raise", "ValueError", "(", "f'Invalid final dimension size for bfactors: {bfactors.shape[-1]}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants.get_cache_path": [[438, 443], ["os.path.join", "os.path.expanduser", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "get_cache_path", "(", ")", ":", "\n", "    ", "cache_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "\"~\"", ")", ",", "'.fastfold'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cache_path", ",", "exist_ok", "=", "True", ")", "\n", "", "return", "cache_path", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants.load_stereo_chemical_props": [[445, 551], ["functools.lru_cache", "os.path.join", "iter", "next", "next", "next", "residue_bond_angles.items", "residue_constants.get_cache_path", "os.path.exists", "urllib.request.urlretrieve", "open", "f.read", "f.read.splitlines", "line.split", "bond.split", "residue_bonds[].append", "line.split", "bond.split", "residue_bond_angles[].append", "line.strip", "Bond", "line.strip", "BondAngle", "sorted", "numpy.sqrt", "numpy.sqrt", "residue_virtual_bonds[].append", "float", "float", "Bond", "residue_constants.load_stereo_chemical_props.make_bond_key"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants.get_cache_path"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "None", ")", "\n", "def", "load_stereo_chemical_props", "(", ")", "->", "Tuple", "[", "\n", "Mapping", "[", "str", ",", "List", "[", "Bond", "]", "]", ",", "\n", "Mapping", "[", "str", ",", "List", "[", "Bond", "]", "]", ",", "\n", "Mapping", "[", "str", ",", "List", "[", "BondAngle", "]", "]", ",", "\n", "]", ":", "\n", "    ", "\"\"\"Load stereo_chemical_props.txt into a nice structure.\n    Load literature values for bond lengths and bond angles and translate\n    bond angles into the length of the opposite edge of the triangle\n    (\"residue_virtual_bonds\").\n    Returns:\n      residue_bonds:  dict that maps resname --> list of Bond tuples\n      residue_virtual_bonds: dict that maps resname --> list of Bond tuples\n      residue_bond_angles: dict that maps resname --> list of BondAngle tuples\n    \"\"\"", "\n", "stereo_chemical_props_path", "=", "os", ".", "path", ".", "join", "(", "get_cache_path", "(", ")", ",", "'stereo_chemical_props.txt'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "stereo_chemical_props_path", ")", ":", "\n", "        ", "url", "=", "\"https://git.scicore.unibas.ch/schwede/openstructure/-/raw/7102c63615b64735c4941278d92b554ec94415f8/modules/mol/alg/src/stereo_chemical_props.txt\"", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "stereo_chemical_props_path", ")", "\n", "", "with", "open", "(", "stereo_chemical_props_path", ",", "'rt'", ")", "as", "f", ":", "\n", "        ", "stereo_chemical_props", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "lines_iter", "=", "iter", "(", "stereo_chemical_props", ".", "splitlines", "(", ")", ")", "\n", "# Load bond lengths.", "\n", "residue_bonds", "=", "{", "}", "\n", "next", "(", "lines_iter", ")", "# Skip header line.", "\n", "for", "line", "in", "lines_iter", ":", "\n", "        ", "if", "line", ".", "strip", "(", ")", "==", "\"-\"", ":", "\n", "            ", "break", "\n", "", "bond", ",", "resname", ",", "length", ",", "stddev", "=", "line", ".", "split", "(", ")", "\n", "atom1", ",", "atom2", "=", "bond", ".", "split", "(", "\"-\"", ")", "\n", "if", "resname", "not", "in", "residue_bonds", ":", "\n", "            ", "residue_bonds", "[", "resname", "]", "=", "[", "]", "\n", "", "residue_bonds", "[", "resname", "]", ".", "append", "(", "\n", "Bond", "(", "atom1", ",", "atom2", ",", "float", "(", "length", ")", ",", "float", "(", "stddev", ")", ")", "\n", ")", "\n", "", "residue_bonds", "[", "\"UNK\"", "]", "=", "[", "]", "\n", "\n", "# Load bond angles.", "\n", "residue_bond_angles", "=", "{", "}", "\n", "next", "(", "lines_iter", ")", "# Skip empty line.", "\n", "next", "(", "lines_iter", ")", "# Skip header line.", "\n", "for", "line", "in", "lines_iter", ":", "\n", "        ", "if", "line", ".", "strip", "(", ")", "==", "\"-\"", ":", "\n", "            ", "break", "\n", "", "bond", ",", "resname", ",", "angle_degree", ",", "stddev_degree", "=", "line", ".", "split", "(", ")", "\n", "atom1", ",", "atom2", ",", "atom3", "=", "bond", ".", "split", "(", "\"-\"", ")", "\n", "if", "resname", "not", "in", "residue_bond_angles", ":", "\n", "            ", "residue_bond_angles", "[", "resname", "]", "=", "[", "]", "\n", "", "residue_bond_angles", "[", "resname", "]", ".", "append", "(", "\n", "BondAngle", "(", "\n", "atom1", ",", "\n", "atom2", ",", "\n", "atom3", ",", "\n", "float", "(", "angle_degree", ")", "/", "180.0", "*", "np", ".", "pi", ",", "\n", "float", "(", "stddev_degree", ")", "/", "180.0", "*", "np", ".", "pi", ",", "\n", ")", "\n", ")", "\n", "", "residue_bond_angles", "[", "\"UNK\"", "]", "=", "[", "]", "\n", "\n", "def", "make_bond_key", "(", "atom1_name", ",", "atom2_name", ")", ":", "\n", "        ", "\"\"\"Unique key to lookup bonds.\"\"\"", "\n", "return", "\"-\"", ".", "join", "(", "sorted", "(", "[", "atom1_name", ",", "atom2_name", "]", ")", ")", "\n", "\n", "# Translate bond angles into distances (\"virtual bonds\").", "\n", "", "residue_virtual_bonds", "=", "{", "}", "\n", "for", "resname", ",", "bond_angles", "in", "residue_bond_angles", ".", "items", "(", ")", ":", "\n", "# Create a fast lookup dict for bond lengths.", "\n", "        ", "bond_cache", "=", "{", "}", "\n", "for", "b", "in", "residue_bonds", "[", "resname", "]", ":", "\n", "            ", "bond_cache", "[", "make_bond_key", "(", "b", ".", "atom1_name", ",", "b", ".", "atom2_name", ")", "]", "=", "b", "\n", "", "residue_virtual_bonds", "[", "resname", "]", "=", "[", "]", "\n", "for", "ba", "in", "bond_angles", ":", "\n", "            ", "bond1", "=", "bond_cache", "[", "make_bond_key", "(", "ba", ".", "atom1_name", ",", "ba", ".", "atom2_name", ")", "]", "\n", "bond2", "=", "bond_cache", "[", "make_bond_key", "(", "ba", ".", "atom2_name", ",", "ba", ".", "atom3name", ")", "]", "\n", "\n", "# Compute distance between atom1 and atom3 using the law of cosines", "\n", "# c^2 = a^2 + b^2 - 2ab*cos(gamma).", "\n", "gamma", "=", "ba", ".", "angle_rad", "\n", "length", "=", "np", ".", "sqrt", "(", "\n", "bond1", ".", "length", "**", "2", "\n", "+", "bond2", ".", "length", "**", "2", "\n", "-", "2", "*", "bond1", ".", "length", "*", "bond2", ".", "length", "*", "np", ".", "cos", "(", "gamma", ")", "\n", ")", "\n", "\n", "# Propagation of uncertainty assuming uncorrelated errors.", "\n", "dl_outer", "=", "0.5", "/", "length", "\n", "dl_dgamma", "=", "(", "\n", "2", "*", "bond1", ".", "length", "*", "bond2", ".", "length", "*", "np", ".", "sin", "(", "gamma", ")", "\n", ")", "*", "dl_outer", "\n", "dl_db1", "=", "(", "\n", "2", "*", "bond1", ".", "length", "-", "2", "*", "bond2", ".", "length", "*", "np", ".", "cos", "(", "gamma", ")", "\n", ")", "*", "dl_outer", "\n", "dl_db2", "=", "(", "\n", "2", "*", "bond2", ".", "length", "-", "2", "*", "bond1", ".", "length", "*", "np", ".", "cos", "(", "gamma", ")", "\n", ")", "*", "dl_outer", "\n", "stddev", "=", "np", ".", "sqrt", "(", "\n", "(", "dl_dgamma", "*", "ba", ".", "stddev", ")", "**", "2", "\n", "+", "(", "dl_db1", "*", "bond1", ".", "stddev", ")", "**", "2", "\n", "+", "(", "dl_db2", "*", "bond2", ".", "stddev", ")", "**", "2", "\n", ")", "\n", "residue_virtual_bonds", "[", "resname", "]", ".", "append", "(", "\n", "Bond", "(", "ba", ".", "atom1_name", ",", "ba", ".", "atom3name", ",", "length", ",", "stddev", ")", "\n", ")", "\n", "\n", "", "", "return", "(", "residue_bonds", ",", "residue_virtual_bonds", ",", "residue_bond_angles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants.sequence_to_onehot": [[893, 934], ["numpy.zeros", "enumerate", "max", "sorted", "list", "ValueError", "mapping.values", "set", "range", "len", "mapping.values", "sorted", "aa_type.isalpha", "aa_type.isupper", "mapping.get", "ValueError", "mapping.values"], "function", ["None"], ["def", "sequence_to_onehot", "(", "\n", "sequence", ":", "str", ",", "mapping", ":", "Mapping", "[", "str", ",", "int", "]", ",", "map_unknown_to_x", ":", "bool", "=", "False", "\n", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Maps the given sequence into a one-hot encoded matrix.\n    Args:\n      sequence: An amino acid sequence.\n      mapping: A dictionary mapping amino acids to integers.\n      map_unknown_to_x: If True, any amino acid that is not in the mapping will be\n        mapped to the unknown amino acid 'X'. If the mapping doesn't contain\n        amino acid 'X', an error will be thrown. If False, any amino acid not in\n        the mapping will throw an error.\n    Returns:\n      A numpy array of shape (seq_len, num_unique_aas) with one-hot encoding of\n      the sequence.\n    Raises:\n      ValueError: If the mapping doesn't contain values from 0 to\n        num_unique_aas - 1 without any gaps.\n    \"\"\"", "\n", "num_entries", "=", "max", "(", "mapping", ".", "values", "(", ")", ")", "+", "1", "\n", "\n", "if", "sorted", "(", "set", "(", "mapping", ".", "values", "(", ")", ")", ")", "!=", "list", "(", "range", "(", "num_entries", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"The mapping must have values from 0 to num_unique_aas-1 \"", "\n", "\"without any gaps. Got: %s\"", "%", "sorted", "(", "mapping", ".", "values", "(", ")", ")", "\n", ")", "\n", "\n", "", "one_hot_arr", "=", "np", ".", "zeros", "(", "(", "len", "(", "sequence", ")", ",", "num_entries", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "aa_index", ",", "aa_type", "in", "enumerate", "(", "sequence", ")", ":", "\n", "        ", "if", "map_unknown_to_x", ":", "\n", "            ", "if", "aa_type", ".", "isalpha", "(", ")", "and", "aa_type", ".", "isupper", "(", ")", ":", "\n", "                ", "aa_id", "=", "mapping", ".", "get", "(", "aa_type", ",", "mapping", "[", "\"X\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"Invalid character in the sequence: {aa_type}\"", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "aa_id", "=", "mapping", "[", "aa_type", "]", "\n", "", "one_hot_arr", "[", "aa_index", ",", "aa_id", "]", "=", "1", "\n", "\n", "", "return", "one_hot_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants._make_standard_atom_mask": [[1043, 1054], ["numpy.zeros", "enumerate"], "function", ["None"], ["def", "_make_standard_atom_mask", "(", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Returns [num_res_types, num_atom_types] mask array.\"\"\"", "\n", "# +1 to account for unknown (all 0s).", "\n", "mask", "=", "np", ".", "zeros", "(", "[", "restype_num", "+", "1", ",", "atom_type_num", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "restype", ",", "restype_letter", "in", "enumerate", "(", "restypes", ")", ":", "\n", "        ", "restype_name", "=", "restype_1to3", "[", "restype_letter", "]", "\n", "atom_names", "=", "residue_atoms", "[", "restype_name", "]", "\n", "for", "atom_name", "in", "atom_names", ":", "\n", "            ", "atom_type", "=", "atom_order", "[", "atom_name", "]", "\n", "mask", "[", "restype", ",", "atom_type", "]", "=", "1", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants.chi_angle_atom": [[1061, 1081], ["chi_angles_atoms.items", "one_hots.append", "numpy.stack", "numpy.transpose", "indices.extend", "one_hots.append", "numpy.zeros", "atom_types.index", "numpy.eye", "len"], "function", ["None"], ["def", "chi_angle_atom", "(", "atom_index", ":", "int", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Define chi-angle rigid groups via one-hot representations.\"\"\"", "\n", "chi_angles_index", "=", "{", "}", "\n", "one_hots", "=", "[", "]", "\n", "\n", "for", "k", ",", "v", "in", "chi_angles_atoms", ".", "items", "(", ")", ":", "\n", "        ", "indices", "=", "[", "atom_types", ".", "index", "(", "s", "[", "atom_index", "]", ")", "for", "s", "in", "v", "]", "\n", "indices", ".", "extend", "(", "[", "-", "1", "]", "*", "(", "4", "-", "len", "(", "indices", ")", ")", ")", "\n", "chi_angles_index", "[", "k", "]", "=", "indices", "\n", "\n", "", "for", "r", "in", "restypes", ":", "\n", "        ", "res3", "=", "restype_1to3", "[", "r", "]", "\n", "one_hot", "=", "np", ".", "eye", "(", "atom_type_num", ")", "[", "chi_angles_index", "[", "res3", "]", "]", "\n", "one_hots", ".", "append", "(", "one_hot", ")", "\n", "\n", "", "one_hots", ".", "append", "(", "np", ".", "zeros", "(", "[", "4", ",", "atom_type_num", "]", ")", ")", "# Add zeros for residue `X`.", "\n", "one_hot", "=", "np", ".", "stack", "(", "one_hots", ",", "axis", "=", "0", ")", "\n", "one_hot", "=", "np", ".", "transpose", "(", "one_hot", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants._make_rigid_transformation_4x4": [[1108, 1124], ["numpy.linalg.norm", "numpy.cross", "numpy.stack().transpose", "numpy.concatenate", "numpy.linalg.norm", "numpy.dot", "numpy.stack"], "function", ["None"], ["def", "_make_rigid_transformation_4x4", "(", "ex", ",", "ey", ",", "translation", ")", ":", "\n", "    ", "\"\"\"Create a rigid 4x4 transformation matrix from two axes and transl.\"\"\"", "\n", "# Normalize ex.", "\n", "ex_normalized", "=", "ex", "/", "np", ".", "linalg", ".", "norm", "(", "ex", ")", "\n", "\n", "# make ey perpendicular to ex", "\n", "ey_normalized", "=", "ey", "-", "np", ".", "dot", "(", "ey", ",", "ex_normalized", ")", "*", "ex_normalized", "\n", "ey_normalized", "/=", "np", ".", "linalg", ".", "norm", "(", "ey_normalized", ")", "\n", "\n", "# compute ez as cross product", "\n", "eznorm", "=", "np", ".", "cross", "(", "ex_normalized", ",", "ey_normalized", ")", "\n", "m", "=", "np", ".", "stack", "(", "\n", "[", "ex_normalized", ",", "ey_normalized", ",", "eznorm", ",", "translation", "]", "\n", ")", ".", "transpose", "(", ")", "\n", "m", "=", "np", ".", "concatenate", "(", "[", "m", ",", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ",", "axis", "=", "0", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants._make_rigid_group_constants": [[1139, 1219], ["enumerate", "enumerate", "numpy.eye", "numpy.eye", "residue_constants._make_rigid_transformation_4x4", "residue_constants._make_rigid_transformation_4x4", "range", "restype_name_to_atom14_names[].index", "numpy.array", "residue_constants._make_rigid_transformation_4x4", "numpy.array", "residue_constants._make_rigid_transformation_4x4", "numpy.array"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants._make_rigid_transformation_4x4", "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants._make_rigid_transformation_4x4", "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants._make_rigid_transformation_4x4", "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants._make_rigid_transformation_4x4"], ["def", "_make_rigid_group_constants", "(", ")", ":", "\n", "    ", "\"\"\"Fill the arrays above.\"\"\"", "\n", "for", "restype", ",", "restype_letter", "in", "enumerate", "(", "restypes", ")", ":", "\n", "        ", "resname", "=", "restype_1to3", "[", "restype_letter", "]", "\n", "for", "atomname", ",", "group_idx", ",", "atom_position", "in", "rigid_group_atom_positions", "[", "\n", "resname", "\n", "]", ":", "\n", "            ", "atomtype", "=", "atom_order", "[", "atomname", "]", "\n", "restype_atom37_to_rigid_group", "[", "restype", ",", "atomtype", "]", "=", "group_idx", "\n", "restype_atom37_mask", "[", "restype", ",", "atomtype", "]", "=", "1", "\n", "restype_atom37_rigid_group_positions", "[", "\n", "restype", ",", "atomtype", ",", ":", "\n", "]", "=", "atom_position", "\n", "\n", "atom14idx", "=", "restype_name_to_atom14_names", "[", "resname", "]", ".", "index", "(", "atomname", ")", "\n", "restype_atom14_to_rigid_group", "[", "restype", ",", "atom14idx", "]", "=", "group_idx", "\n", "restype_atom14_mask", "[", "restype", ",", "atom14idx", "]", "=", "1", "\n", "restype_atom14_rigid_group_positions", "[", "\n", "restype", ",", "atom14idx", ",", ":", "\n", "]", "=", "atom_position", "\n", "\n", "", "", "for", "restype", ",", "restype_letter", "in", "enumerate", "(", "restypes", ")", ":", "\n", "        ", "resname", "=", "restype_1to3", "[", "restype_letter", "]", "\n", "atom_positions", "=", "{", "\n", "name", ":", "np", ".", "array", "(", "pos", ")", "\n", "for", "name", ",", "_", ",", "pos", "in", "rigid_group_atom_positions", "[", "resname", "]", "\n", "}", "\n", "\n", "# backbone to backbone is the identity transform", "\n", "restype_rigid_group_default_frame", "[", "restype", ",", "0", ",", ":", ",", ":", "]", "=", "np", ".", "eye", "(", "4", ")", "\n", "\n", "# pre-omega-frame to backbone (currently dummy identity matrix)", "\n", "restype_rigid_group_default_frame", "[", "restype", ",", "1", ",", ":", ",", ":", "]", "=", "np", ".", "eye", "(", "4", ")", "\n", "\n", "# phi-frame to backbone", "\n", "mat", "=", "_make_rigid_transformation_4x4", "(", "\n", "ex", "=", "atom_positions", "[", "\"N\"", "]", "-", "atom_positions", "[", "\"CA\"", "]", ",", "\n", "ey", "=", "np", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", "]", ")", ",", "\n", "translation", "=", "atom_positions", "[", "\"N\"", "]", ",", "\n", ")", "\n", "restype_rigid_group_default_frame", "[", "restype", ",", "2", ",", ":", ",", ":", "]", "=", "mat", "\n", "\n", "# psi-frame to backbone", "\n", "mat", "=", "_make_rigid_transformation_4x4", "(", "\n", "ex", "=", "atom_positions", "[", "\"C\"", "]", "-", "atom_positions", "[", "\"CA\"", "]", ",", "\n", "ey", "=", "atom_positions", "[", "\"CA\"", "]", "-", "atom_positions", "[", "\"N\"", "]", ",", "\n", "translation", "=", "atom_positions", "[", "\"C\"", "]", ",", "\n", ")", "\n", "restype_rigid_group_default_frame", "[", "restype", ",", "3", ",", ":", ",", ":", "]", "=", "mat", "\n", "\n", "# chi1-frame to backbone", "\n", "if", "chi_angles_mask", "[", "restype", "]", "[", "0", "]", ":", "\n", "            ", "base_atom_names", "=", "chi_angles_atoms", "[", "resname", "]", "[", "0", "]", "\n", "base_atom_positions", "=", "[", "\n", "atom_positions", "[", "name", "]", "for", "name", "in", "base_atom_names", "\n", "]", "\n", "mat", "=", "_make_rigid_transformation_4x4", "(", "\n", "ex", "=", "base_atom_positions", "[", "2", "]", "-", "base_atom_positions", "[", "1", "]", ",", "\n", "ey", "=", "base_atom_positions", "[", "0", "]", "-", "base_atom_positions", "[", "1", "]", ",", "\n", "translation", "=", "base_atom_positions", "[", "2", "]", ",", "\n", ")", "\n", "restype_rigid_group_default_frame", "[", "restype", ",", "4", ",", ":", ",", ":", "]", "=", "mat", "\n", "\n", "# chi2-frame to chi1-frame", "\n", "# chi3-frame to chi2-frame", "\n", "# chi4-frame to chi3-frame", "\n", "# luckily all rotation axes for the next frame start at (0,0,0) of the", "\n", "# previous frame", "\n", "", "for", "chi_idx", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "if", "chi_angles_mask", "[", "restype", "]", "[", "chi_idx", "]", ":", "\n", "                ", "axis_end_atom_name", "=", "chi_angles_atoms", "[", "resname", "]", "[", "chi_idx", "]", "[", "2", "]", "\n", "axis_end_atom_position", "=", "atom_positions", "[", "axis_end_atom_name", "]", "\n", "mat", "=", "_make_rigid_transformation_4x4", "(", "\n", "ex", "=", "axis_end_atom_position", ",", "\n", "ey", "=", "np", ".", "array", "(", "[", "-", "1.0", ",", "0.0", ",", "0.0", "]", ")", ",", "\n", "translation", "=", "axis_end_atom_position", ",", "\n", ")", "\n", "restype_rigid_group_default_frame", "[", "\n", "restype", ",", "4", "+", "chi_idx", ",", ":", ",", ":", "\n", "]", "=", "mat", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants.make_atom14_dists_bounds": [[1224, 1284], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "residue_constants.load_stereo_chemical_props", "enumerate", "enumerate", "enumerate", "atom_list.index", "atom_list.index"], "function", ["home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants.load_stereo_chemical_props"], ["def", "make_atom14_dists_bounds", "(", "\n", "overlap_tolerance", "=", "1.5", ",", "bond_length_tolerance_factor", "=", "15", "\n", ")", ":", "\n", "    ", "\"\"\"compute upper and lower bounds for bonds to assess violations.\"\"\"", "\n", "restype_atom14_bond_lower_bound", "=", "np", ".", "zeros", "(", "[", "21", ",", "14", ",", "14", "]", ",", "np", ".", "float32", ")", "\n", "restype_atom14_bond_upper_bound", "=", "np", ".", "zeros", "(", "[", "21", ",", "14", ",", "14", "]", ",", "np", ".", "float32", ")", "\n", "restype_atom14_bond_stddev", "=", "np", ".", "zeros", "(", "[", "21", ",", "14", ",", "14", "]", ",", "np", ".", "float32", ")", "\n", "residue_bonds", ",", "residue_virtual_bonds", ",", "_", "=", "load_stereo_chemical_props", "(", ")", "\n", "for", "restype", ",", "restype_letter", "in", "enumerate", "(", "restypes", ")", ":", "\n", "        ", "resname", "=", "restype_1to3", "[", "restype_letter", "]", "\n", "atom_list", "=", "restype_name_to_atom14_names", "[", "resname", "]", "\n", "\n", "# create lower and upper bounds for clashes", "\n", "for", "atom1_idx", ",", "atom1_name", "in", "enumerate", "(", "atom_list", ")", ":", "\n", "            ", "if", "not", "atom1_name", ":", "\n", "                ", "continue", "\n", "", "atom1_radius", "=", "van_der_waals_radius", "[", "atom1_name", "[", "0", "]", "]", "\n", "for", "atom2_idx", ",", "atom2_name", "in", "enumerate", "(", "atom_list", ")", ":", "\n", "                ", "if", "(", "not", "atom2_name", ")", "or", "atom1_idx", "==", "atom2_idx", ":", "\n", "                    ", "continue", "\n", "", "atom2_radius", "=", "van_der_waals_radius", "[", "atom2_name", "[", "0", "]", "]", "\n", "lower", "=", "atom1_radius", "+", "atom2_radius", "-", "overlap_tolerance", "\n", "upper", "=", "1e10", "\n", "restype_atom14_bond_lower_bound", "[", "\n", "restype", ",", "atom1_idx", ",", "atom2_idx", "\n", "]", "=", "lower", "\n", "restype_atom14_bond_lower_bound", "[", "\n", "restype", ",", "atom2_idx", ",", "atom1_idx", "\n", "]", "=", "lower", "\n", "restype_atom14_bond_upper_bound", "[", "\n", "restype", ",", "atom1_idx", ",", "atom2_idx", "\n", "]", "=", "upper", "\n", "restype_atom14_bond_upper_bound", "[", "\n", "restype", ",", "atom2_idx", ",", "atom1_idx", "\n", "]", "=", "upper", "\n", "\n", "# overwrite lower and upper bounds for bonds and angles", "\n", "", "", "for", "b", "in", "residue_bonds", "[", "resname", "]", "+", "residue_virtual_bonds", "[", "resname", "]", ":", "\n", "            ", "atom1_idx", "=", "atom_list", ".", "index", "(", "b", ".", "atom1_name", ")", "\n", "atom2_idx", "=", "atom_list", ".", "index", "(", "b", ".", "atom2_name", ")", "\n", "lower", "=", "b", ".", "length", "-", "bond_length_tolerance_factor", "*", "b", ".", "stddev", "\n", "upper", "=", "b", ".", "length", "+", "bond_length_tolerance_factor", "*", "b", ".", "stddev", "\n", "restype_atom14_bond_lower_bound", "[", "\n", "restype", ",", "atom1_idx", ",", "atom2_idx", "\n", "]", "=", "lower", "\n", "restype_atom14_bond_lower_bound", "[", "\n", "restype", ",", "atom2_idx", ",", "atom1_idx", "\n", "]", "=", "lower", "\n", "restype_atom14_bond_upper_bound", "[", "\n", "restype", ",", "atom1_idx", ",", "atom2_idx", "\n", "]", "=", "upper", "\n", "restype_atom14_bond_upper_bound", "[", "\n", "restype", ",", "atom2_idx", ",", "atom1_idx", "\n", "]", "=", "upper", "\n", "restype_atom14_bond_stddev", "[", "restype", ",", "atom1_idx", ",", "atom2_idx", "]", "=", "b", ".", "stddev", "\n", "restype_atom14_bond_stddev", "[", "restype", ",", "atom2_idx", ",", "atom1_idx", "]", "=", "b", ".", "stddev", "\n", "", "", "return", "{", "\n", "\"lower_bound\"", ":", "restype_atom14_bond_lower_bound", ",", "# shape (21,14,14)", "\n", "\"upper_bound\"", ":", "restype_atom14_bond_upper_bound", ",", "# shape (21,14,14)", "\n", "\"stddev\"", ":", "restype_atom14_bond_stddev", ",", "# shape (21,14,14)", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants._make_atom14_ambiguity_feats": [[1293, 1307], ["residue_atom_renaming_swaps.items", "pairs.items", "restype_name_to_atom14_names[].index", "restype_name_to_atom14_names[].index"], "function", ["None"], ["def", "_make_atom14_ambiguity_feats", "(", ")", ":", "\n", "    ", "for", "res", ",", "pairs", "in", "residue_atom_renaming_swaps", ".", "items", "(", ")", ":", "\n", "        ", "res_idx", "=", "restype_order", "[", "restype_3to1", "[", "res", "]", "]", "\n", "for", "atom1", ",", "atom2", "in", "pairs", ".", "items", "(", ")", ":", "\n", "            ", "atom1_idx", "=", "restype_name_to_atom14_names", "[", "res", "]", ".", "index", "(", "atom1", ")", "\n", "atom2_idx", "=", "restype_name_to_atom14_names", "[", "res", "]", ".", "index", "(", "atom2", ")", "\n", "restype_atom14_ambiguous_atoms", "[", "res_idx", ",", "atom1_idx", "]", "=", "1", "\n", "restype_atom14_ambiguous_atoms", "[", "res_idx", ",", "atom2_idx", "]", "=", "1", "\n", "restype_atom14_ambiguous_atoms_swap_idx", "[", "\n", "res_idx", ",", "atom1_idx", "\n", "]", "=", "atom2_idx", "\n", "restype_atom14_ambiguous_atoms_swap_idx", "[", "\n", "res_idx", ",", "atom2_idx", "\n", "]", "=", "atom1_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.residue_constants.aatype_to_str_sequence": [[1312, 1316], ["range", "len"], "function", ["None"], ["def", "aatype_to_str_sequence", "(", "aatype", ")", ":", "\n", "    ", "return", "''", ".", "join", "(", "[", "\n", "restypes_with_x", "[", "aatype", "[", "i", "]", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "aatype", ")", ")", "\n", "]", ")", ""]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.from_pdb_string": [[55, 125], ["io.StringIO", "Bio.PDB.PDBParser", "Bio.PDB.PDBParser.get_structure", "list", "protein.Protein", "parser.get_structure.get_models", "len", "ValueError", "list", "fastfold.common.residue_constants.restype_3to1.get", "fastfold.common.residue_constants.restype_order.get", "numpy.zeros", "numpy.zeros", "numpy.zeros", "aatype.append", "atom_positions.append", "atom_mask.append", "residue_index.append", "b_factors.append", "model.get_chains", "len", "ValueError", "ValueError", "numpy.sum", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "len"], "function", ["None"], ["", "def", "from_pdb_string", "(", "pdb_str", ":", "str", ",", "chain_id", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "Protein", ":", "\n", "    ", "\"\"\"Takes a PDB string and constructs a Protein object.\n\n    WARNING: All non-standard residue types will be converted into UNK. All\n      non-standard atoms will be ignored.\n\n    Args:\n      pdb_str: The contents of the pdb file\n      chain_id: If None, then the pdb file must contain a single chain (which\n        will be parsed). If chain_id is specified (e.g. A), then only that chain\n        is parsed.\n\n    Returns:\n      A new `Protein` parsed from the pdb contents.\n    \"\"\"", "\n", "pdb_fh", "=", "io", ".", "StringIO", "(", "pdb_str", ")", "\n", "parser", "=", "PDBParser", "(", "QUIET", "=", "True", ")", "\n", "structure", "=", "parser", ".", "get_structure", "(", "\"none\"", ",", "pdb_fh", ")", "\n", "models", "=", "list", "(", "structure", ".", "get_models", "(", ")", ")", "\n", "if", "len", "(", "models", ")", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Only single model PDBs are supported. Found {len(models)} models.\"", ")", "\n", "", "model", "=", "models", "[", "0", "]", "\n", "\n", "if", "chain_id", "is", "not", "None", ":", "\n", "        ", "chain", "=", "model", "[", "chain_id", "]", "\n", "", "else", ":", "\n", "        ", "chains", "=", "list", "(", "model", ".", "get_chains", "(", ")", ")", "\n", "if", "len", "(", "chains", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only single chain PDBs are supported when chain_id not specified. \"", "\n", "f\"Found {len(chains)} chains.\"", ")", "\n", "", "else", ":", "\n", "            ", "chain", "=", "chains", "[", "0", "]", "\n", "\n", "", "", "atom_positions", "=", "[", "]", "\n", "aatype", "=", "[", "]", "\n", "atom_mask", "=", "[", "]", "\n", "residue_index", "=", "[", "]", "\n", "b_factors", "=", "[", "]", "\n", "\n", "for", "res", "in", "chain", ":", "\n", "        ", "if", "res", ".", "id", "[", "2", "]", "!=", "\" \"", ":", "\n", "            ", "raise", "ValueError", "(", "f\"PDB contains an insertion code at chain {chain.id} and residue \"", "\n", "f\"index {res.id[1]}. These are not supported.\"", ")", "\n", "", "res_shortname", "=", "residue_constants", ".", "restype_3to1", ".", "get", "(", "res", ".", "resname", ",", "\"X\"", ")", "\n", "restype_idx", "=", "residue_constants", ".", "restype_order", ".", "get", "(", "res_shortname", ",", "\n", "residue_constants", ".", "restype_num", ")", "\n", "pos", "=", "np", ".", "zeros", "(", "(", "residue_constants", ".", "atom_type_num", ",", "3", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "residue_constants", ".", "atom_type_num", ",", ")", ")", "\n", "res_b_factors", "=", "np", ".", "zeros", "(", "(", "residue_constants", ".", "atom_type_num", ",", ")", ")", "\n", "for", "atom", "in", "res", ":", "\n", "            ", "if", "atom", ".", "name", "not", "in", "residue_constants", ".", "atom_types", ":", "\n", "                ", "continue", "\n", "", "pos", "[", "residue_constants", ".", "atom_order", "[", "atom", ".", "name", "]", "]", "=", "atom", ".", "coord", "\n", "mask", "[", "residue_constants", ".", "atom_order", "[", "atom", ".", "name", "]", "]", "=", "1.0", "\n", "res_b_factors", "[", "residue_constants", ".", "atom_order", "[", "atom", ".", "name", "]", "]", "=", "atom", ".", "bfactor", "\n", "", "if", "np", ".", "sum", "(", "mask", ")", "<", "0.5", ":", "\n", "# If no known atom positions are reported for the residue then skip it.", "\n", "            ", "continue", "\n", "", "aatype", ".", "append", "(", "restype_idx", ")", "\n", "atom_positions", ".", "append", "(", "pos", ")", "\n", "atom_mask", ".", "append", "(", "mask", ")", "\n", "residue_index", ".", "append", "(", "res", ".", "id", "[", "1", "]", ")", "\n", "b_factors", ".", "append", "(", "res_b_factors", ")", "\n", "\n", "", "return", "Protein", "(", "\n", "atom_positions", "=", "np", ".", "array", "(", "atom_positions", ")", ",", "\n", "atom_mask", "=", "np", ".", "array", "(", "atom_mask", ")", ",", "\n", "aatype", "=", "np", ".", "array", "(", "aatype", ")", ",", "\n", "residue_index", "=", "np", ".", "array", "(", "residue_index", ")", ",", "\n", "b_factors", "=", "np", ".", "array", "(", "b_factors", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.from_proteinnet_string": [[128, 174], ["zip", "protein.Protein", "tag.strip", "re.split", "l.split", "[].strip", "range", "numpy.array", "numpy.arange", "len", "len", "range", "numpy.array", "numpy.zeros().astype", "enumerate", "len", "fastfold.common.residue_constants.restype_order.get", "tertiary.append", "numpy.transpose", "numpy.array", "numpy.zeros().astype", "enumerate", "list", "numpy.zeros", "list", "map", "map", "numpy.zeros", "[].split", "[].strip", "len", "len"], "function", ["None"], ["", "def", "from_proteinnet_string", "(", "proteinnet_str", ":", "str", ")", "->", "Protein", ":", "\n", "    ", "tag_re", "=", "r'(\\[[A-Z]+\\]\\n)'", "\n", "tags", "=", "[", "tag", ".", "strip", "(", ")", "for", "tag", "in", "re", ".", "split", "(", "tag_re", ",", "proteinnet_str", ")", "if", "len", "(", "tag", ")", ">", "0", "]", "\n", "groups", "=", "zip", "(", "tags", "[", "0", ":", ":", "2", "]", ",", "[", "l", ".", "split", "(", "'\\n'", ")", "for", "l", "in", "tags", "[", "1", ":", ":", "2", "]", "]", ")", "\n", "\n", "atoms", "=", "[", "'N'", ",", "'CA'", ",", "'C'", "]", "\n", "aatype", "=", "None", "\n", "atom_positions", "=", "None", "\n", "atom_mask", "=", "None", "\n", "for", "g", "in", "groups", ":", "\n", "        ", "if", "(", "\"[PRIMARY]\"", "==", "g", "[", "0", "]", ")", ":", "\n", "            ", "seq", "=", "g", "[", "1", "]", "[", "0", "]", ".", "strip", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "seq", ")", ")", ":", "\n", "                ", "if", "(", "seq", "[", "i", "]", "not", "in", "residue_constants", ".", "restypes", ")", ":", "\n", "                    ", "seq", "[", "i", "]", "=", "'X'", "\n", "", "", "aatype", "=", "np", ".", "array", "(", "[", "\n", "residue_constants", ".", "restype_order", ".", "get", "(", "res_symbol", ",", "residue_constants", ".", "restype_num", ")", "\n", "for", "res_symbol", "in", "seq", "\n", "]", ")", "\n", "", "elif", "(", "\"[TERTIARY]\"", "==", "g", "[", "0", "]", ")", ":", "\n", "            ", "tertiary", "=", "[", "]", "\n", "for", "axis", "in", "range", "(", "3", ")", ":", "\n", "                ", "tertiary", ".", "append", "(", "list", "(", "map", "(", "float", ",", "g", "[", "1", "]", "[", "axis", "]", ".", "split", "(", ")", ")", ")", ")", "\n", "", "tertiary_np", "=", "np", ".", "array", "(", "tertiary", ")", "\n", "atom_positions", "=", "np", ".", "zeros", "(", "\n", "(", "len", "(", "tertiary", "[", "0", "]", ")", "//", "3", ",", "residue_constants", ".", "atom_type_num", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "i", ",", "atom", "in", "enumerate", "(", "atoms", ")", ":", "\n", "                ", "atom_positions", "[", ":", ",", "residue_constants", ".", "atom_order", "[", "atom", "]", ",", ":", "]", "=", "(", "np", ".", "transpose", "(", "\n", "tertiary_np", "[", ":", ",", "i", ":", ":", "3", "]", ")", ")", "\n", "", "atom_positions", "*=", "PICO_TO_ANGSTROM", "\n", "", "elif", "(", "\"[MASK]\"", "==", "g", "[", "0", "]", ")", ":", "\n", "            ", "mask", "=", "np", ".", "array", "(", "list", "(", "map", "(", "{", "'-'", ":", "0", ",", "'+'", ":", "1", "}", ".", "get", ",", "g", "[", "1", "]", "[", "0", "]", ".", "strip", "(", ")", ")", ")", ")", "\n", "atom_mask", "=", "np", ".", "zeros", "(", "(", "\n", "len", "(", "mask", ")", ",", "\n", "residue_constants", ".", "atom_type_num", ",", "\n", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "i", ",", "atom", "in", "enumerate", "(", "atoms", ")", ":", "\n", "                ", "atom_mask", "[", ":", ",", "residue_constants", ".", "atom_order", "[", "atom", "]", "]", "=", "1", "\n", "", "atom_mask", "*=", "mask", "[", "...", ",", "None", "]", "\n", "\n", "", "", "return", "Protein", "(", "\n", "atom_positions", "=", "atom_positions", ",", "\n", "atom_mask", "=", "atom_mask", ",", "\n", "aatype", "=", "aatype", ",", "\n", "residue_index", "=", "np", ".", "arange", "(", "len", "(", "aatype", ")", ")", ",", "\n", "b_factors", "=", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.to_pdb": [[177, 239], ["prot.residue_index.astype", "numpy.any", "pdb_lines.append", "range", "pdb_lines.append", "pdb_lines.append", "pdb_lines.append", "pdb_lines.append", "fastfold.common.residue_constants.restype_1to3.get", "ValueError", "res_1to3", "zip", "pdb_lines.append", "res_1to3", "len"], "function", ["None"], ["", "def", "to_pdb", "(", "prot", ":", "Protein", ")", "->", "str", ":", "\n", "    ", "\"\"\"Converts a `Protein` instance to a PDB string.\n\n    Args:\n      prot: The protein to convert to PDB.\n\n    Returns:\n      PDB string.\n    \"\"\"", "\n", "restypes", "=", "residue_constants", ".", "restypes", "+", "[", "\"X\"", "]", "\n", "res_1to3", "=", "lambda", "r", ":", "residue_constants", ".", "restype_1to3", ".", "get", "(", "restypes", "[", "r", "]", ",", "\"UNK\"", ")", "\n", "atom_types", "=", "residue_constants", ".", "atom_types", "\n", "\n", "pdb_lines", "=", "[", "]", "\n", "\n", "atom_mask", "=", "prot", ".", "atom_mask", "\n", "aatype", "=", "prot", ".", "aatype", "\n", "atom_positions", "=", "prot", ".", "atom_positions", "\n", "residue_index", "=", "prot", ".", "residue_index", ".", "astype", "(", "np", ".", "int32", ")", "\n", "b_factors", "=", "prot", ".", "b_factors", "\n", "\n", "if", "np", ".", "any", "(", "aatype", ">", "residue_constants", ".", "restype_num", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid aatypes.\"", ")", "\n", "\n", "", "pdb_lines", ".", "append", "(", "\"MODEL     1\"", ")", "\n", "atom_index", "=", "1", "\n", "chain_id", "=", "\"A\"", "\n", "# Add all atom sites.", "\n", "for", "i", "in", "range", "(", "aatype", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "res_name_3", "=", "res_1to3", "(", "aatype", "[", "i", "]", ")", "\n", "for", "atom_name", ",", "pos", ",", "mask", ",", "b_factor", "in", "zip", "(", "atom_types", ",", "atom_positions", "[", "i", "]", ",", "atom_mask", "[", "i", "]", ",", "\n", "b_factors", "[", "i", "]", ")", ":", "\n", "            ", "if", "mask", "<", "0.5", ":", "\n", "                ", "continue", "\n", "\n", "", "record_type", "=", "\"ATOM\"", "\n", "name", "=", "atom_name", "if", "len", "(", "atom_name", ")", "==", "4", "else", "f\" {atom_name}\"", "\n", "alt_loc", "=", "\"\"", "\n", "insertion_code", "=", "\"\"", "\n", "occupancy", "=", "1.00", "\n", "element", "=", "atom_name", "[", "0", "]", "# Protein supports only C, N, O, S, this works.", "\n", "charge", "=", "\"\"", "\n", "# PDB is a columnar format, every space matters here!", "\n", "atom_line", "=", "(", "f\"{record_type:<6}{atom_index:>5} {name:<4}{alt_loc:>1}\"", "\n", "f\"{res_name_3:>3} {chain_id:>1}\"", "\n", "f\"{residue_index[i]:>4}{insertion_code:>1}   \"", "\n", "f\"{pos[0]:>8.3f}{pos[1]:>8.3f}{pos[2]:>8.3f}\"", "\n", "f\"{occupancy:>6.2f}{b_factor:>6.2f}          \"", "\n", "f\"{element:>2}{charge:>2}\"", ")", "\n", "pdb_lines", ".", "append", "(", "atom_line", ")", "\n", "atom_index", "+=", "1", "\n", "\n", "# Close the chain.", "\n", "", "", "chain_end", "=", "\"TER\"", "\n", "chain_termination_line", "=", "(", "f\"{chain_end:<6}{atom_index:>5}      {res_1to3(aatype[-1]):>3} \"", "\n", "f\"{chain_id:>1}{residue_index[-1]:>4}\"", ")", "\n", "pdb_lines", ".", "append", "(", "chain_termination_line", ")", "\n", "pdb_lines", ".", "append", "(", "\"ENDMDL\"", ")", "\n", "\n", "pdb_lines", ".", "append", "(", "\"END\"", ")", "\n", "pdb_lines", ".", "append", "(", "\"\"", ")", "\n", "return", "\"\\n\"", ".", "join", "(", "pdb_lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.ideal_atom_mask": [[241, 255], ["None"], "function", ["None"], ["", "def", "ideal_atom_mask", "(", "prot", ":", "Protein", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\"Computes an ideal atom mask.\n\n    `Protein.atom_mask` typically is defined according to the atoms that are\n    reported in the PDB. This function computes a mask according to heavy atoms\n    that should be present in the given sequence of amino acids.\n\n    Args:\n      prot: `Protein` whose fields are `numpy.ndarray` objects.\n\n    Returns:\n      An ideal atom mask.\n    \"\"\"", "\n", "return", "residue_constants", ".", "STANDARD_ATOM_MASK", "[", "prot", ".", "aatype", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hpcaitech_fastfold.common.protein.from_prediction": [[257, 281], ["protein.Protein", "numpy.zeros_like"], "function", ["None"], ["", "def", "from_prediction", "(", "\n", "features", ":", "FeatureDict", ",", "\n", "result", ":", "ModelOutput", ",", "\n", "b_factors", ":", "Optional", "[", "np", ".", "ndarray", "]", "=", "None", ",", "\n", ")", "->", "Protein", ":", "\n", "    ", "\"\"\"Assembles a protein from a prediction.\n\n    Args:\n      features: Dictionary holding model inputs.\n      result: Dictionary holding model outputs.\n      b_factors: (Optional) B-factors to use for the protein.\n\n    Returns:\n      A protein instance.\n    \"\"\"", "\n", "if", "b_factors", "is", "None", ":", "\n", "        ", "b_factors", "=", "np", ".", "zeros_like", "(", "result", "[", "\"final_atom_mask\"", "]", ")", "\n", "\n", "", "return", "Protein", "(", "\n", "aatype", "=", "features", "[", "\"aatype\"", "]", ",", "\n", "atom_positions", "=", "result", "[", "\"final_atom_positions\"", "]", ",", "\n", "atom_mask", "=", "result", "[", "\"final_atom_mask\"", "]", ",", "\n", "residue_index", "=", "features", "[", "\"residue_index\"", "]", "+", "1", ",", "\n", "b_factors", "=", "b_factors", ",", "\n", ")", ""]]}