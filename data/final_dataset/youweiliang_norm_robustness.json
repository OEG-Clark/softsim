{"home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.draw_lip_again.get_module_name": [[25, 48], ["lip.add_lip.bind_lip", "net.eval", "torch.rand", "net.cpu", "net", "net.modules", "hasattr", "module_name.append", "module_name.append", "classname.find", "module_name.append"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip"], ["def", "get_module_name", "(", "net", ")", ":", "\n", "    ", "bind_lip", "(", "net", ")", "\n", "net", ".", "eval", "(", ")", "\n", "x", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "net", ".", "cpu", "(", ")", "\n", "net", "(", "x", ")", "\n", "module_name", "=", "[", "]", "\n", "n_conv", "=", "0", "\n", "n_linear", "=", "0", "\n", "n_bn", "=", "0", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'is_conv2d'", ")", "and", "m", ".", "is_conv2d", ":", "\n", "            ", "module_name", ".", "append", "(", "(", "f'{classname}-#{n_conv}'", ",", "f'{m}'", ")", ")", "\n", "n_conv", "+=", "1", "\n", "", "elif", "classname", "==", "'Linear'", ":", "\n", "            ", "module_name", ".", "append", "(", "(", "f'{classname}-#{n_linear}'", ",", "f'{m}'", ")", ")", "\n", "n_linear", "+=", "1", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "module_name", ".", "append", "(", "(", "f'{classname}-#{n_bn}'", ",", "f'{m}'", ")", ")", "\n", "n_bn", "+=", "1", "\n", "\n", "", "", "return", "module_name", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.draw_lip_again.filter_": [[50, 56], ["zip", "x.append"], "function", ["None"], ["", "def", "filter_", "(", "s", ",", "boolean", ")", ":", "\n", "    ", "x", "=", "[", "]", "\n", "for", "t", ",", "b", "in", "zip", "(", "s", ",", "boolean", ")", ":", "\n", "        ", "if", "b", ":", "\n", "            ", "x", ".", "append", "(", "t", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.draw_lip_again.main": [[58, 92], ["draw_lip_again.get_module_name", "os.listdir", "file.endswith", "file.find", "open", "pickle.load", "pickle.load.draw_many", "pickle.load.draw_many", "x.find", "os.path.join", "draw_lip_again.filter_", "new_lip.append", "draw_lip_again.filter_", "new_lip.append", "print"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.get_module_name", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.draw_lip_again.filter_", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.draw_lip_again.filter_"], ["", "def", "main", "(", ")", ":", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "module_name", "=", "get_module_name", "(", "nets", "[", "model", "]", "(", ")", ")", "\n", "bn", "=", "[", "True", "if", "x", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", "else", "False", "for", "x", ",", "y", "in", "module_name", "]", "\n", "non_bn", "=", "[", "not", "x", "for", "x", "in", "bn", "]", "\n", "path", "=", "f'./regularization/log/{model}'", "\n", "for", "file", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "            ", "if", "not", "file", ".", "endswith", "(", "'record.pkl'", ")", ":", "\n", "                ", "continue", "\n", "", "if", "file", ".", "find", "(", "'proj_bn'", ")", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "file", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "recorder", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "try", ":", "\n", "                ", "lip", "=", "recorder", ".", "lip", "\n", "\n", "recorder", ".", "save_path", "=", "f'{path}/bn'", "\n", "new_lip", "=", "[", "]", "\n", "for", "e", ",", "s", "in", "lip", ":", "\n", "                    ", "s", "=", "filter_", "(", "s", ",", "bn", ")", "\n", "new_lip", ".", "append", "(", "(", "e", ",", "s", ")", ")", "\n", "", "recorder", ".", "lip", "=", "new_lip", "\n", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "\n", "recorder", ".", "save_path", "=", "f'{path}/conv_linear'", "\n", "new_lip", "=", "[", "]", "\n", "for", "e", ",", "s", "in", "lip", ":", "\n", "                    ", "s", "=", "filter_", "(", "s", ",", "non_bn", ")", "\n", "new_lip", ".", "append", "(", "(", "e", ",", "s", ")", ")", "\n", "", "recorder", ".", "lip", "=", "new_lip", "\n", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "'Error dealing with '", ",", "dirname", ",", "file", ",", "'\\n'", ",", "e", ",", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_wd.write2text": [[42, 45], ["open", "f.write", "os.path.join"], "function", ["None"], ["def", "write2text", "(", "path", ",", "filename", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'{filename}.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "f'{name}: {kwargs}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_wd.train": [[47, 81], ["model.train", "enumerate", "recorder.record", "recorder.record", "print", "optimizer.zero_grad", "model", "loss_fn", "loss_fn.backward", "model.max", "target.size", "predicted.eq().sum().item", "model.calc_lip", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to", "loss_fn.item", "target.size", "len", "predicted.eq().sum", "len", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_fn", "(", "out", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "out", ".", "max", "(", "1", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "lipc", ",", "all_lip", "=", "model", ".", "calc_lip", "(", ")", "\n", "\n", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "train_loss", ",", "train_acc", "=", "train_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "train_acc", ")", "\n", "recorder", ".", "record", "(", "'train_loss'", ",", "train_loss", ")", "\n", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_wd.test": [[83, 106], ["net.eval", "recorder.record", "recorder.record", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "net", "loss_fn", "net.max", "targets.size", "predicted.eq().sum().item", "len", "inputs.to", "targets.to", "loss_fn.item", "targets.size", "len", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "test", "(", "net", ",", "testloader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "*", "targets", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", ",", "test_acc", "=", "test_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_acc", ")", "\n", "recorder", ".", "record", "(", "'test_loss'", ",", "test_loss", ")", "\n", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "testloader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "testloader", ".", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_wd.adjust_learning_rate": [[108, 119], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "elif", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "elif", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_wd.main": [[121, 172], ["lip.add_lip.bind_lip", "torch.SGD", "time.time", "range", "print", "recorder.draw_many", "recorder.draw", "recorder.draw", "train_wd.write2text", "model.parameters", "print", "train_wd.adjust_learning_rate", "train_wd.train", "train_wd.test", "recorder.step", "open", "pickle.dump", "auto_attack.autoattack.AutoAttack", "model.eval", "torch.save", "torch.save", "torch.save", "torch.save", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model.state_dict", "os.path.join", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "recorder.record", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.write2text", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "bind_lip", "(", "model", ",", "verbose", "=", "False", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "wd", ")", "\n", "\n", "natural_acc", "=", "[", "]", "\n", "robust_acc", "=", "[", "]", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "# adjust learning rate for SGD", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", "\n", "\n", "test", "(", "model", ",", "test_loader", ")", "\n", "\n", "recorder", ".", "step", "(", ")", "\n", "\n", "if", "epoch", "==", "args", ".", "epochs", ":", "\n", "            ", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "1", "/", "255", ",", "version", "=", "'standard'", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                    ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "break", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "", "", "used_time", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "3600", "\n", "print", "(", "f'Used time: {used_time:.2f} h'", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "# recorder.draw('lip_sum')", "\n", "", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "clean_acc", "=", "recorder", ".", "test_acc", "[", "-", "1", "]", "[", "1", "]", "\n", "write2text", "(", "log_dir", ",", "'log'", ",", "name", ",", "clean_acc", "=", "clean_acc", ",", "robust_accuracy", "=", "robust_accuracy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_svc.write2text": [[43, 46], ["open", "f.write", "os.path.join"], "function", ["None"], ["def", "write2text", "(", "path", ",", "filename", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'{filename}.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "f'{name}: {kwargs}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_svc.train": [[48, 86], ["model.train", "enumerate", "recorder.record", "recorder.record", "print", "optimizer.zero_grad", "model", "loss_fn", "loss_fn.backward", "model.max", "target.size", "predicted.eq().sum().item", "model.calc_lip", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to", "loss_fn.item", "target.size", "print", "regularization.conv2d_sv.clip_conv", "len", "predicted.eq().sum", "len", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.clip_conv"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_fn", "(", "out", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "out", ".", "max", "(", "1", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "lipc", ",", "all_lip", "=", "model", ".", "calc_lip", "(", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "clip_freq", "==", "1", ":", "\n", "            ", "print", "(", "'clipping...'", ",", "end", "=", "' '", ")", "\n", "clip_conv", "(", "model", ",", "clip_to", ")", "\n", "\n", "", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "train_loss", ",", "train_acc", "=", "train_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "train_acc", ")", "\n", "recorder", ".", "record", "(", "'train_loss'", ",", "train_loss", ")", "\n", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_svc.test": [[88, 111], ["net.eval", "recorder.record", "recorder.record", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "net", "loss_fn", "net.max", "targets.size", "predicted.eq().sum().item", "len", "inputs.to", "targets.to", "loss_fn.item", "targets.size", "len", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "test", "(", "net", ",", "testloader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "*", "targets", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", ",", "test_acc", "=", "test_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_acc", ")", "\n", "recorder", ".", "record", "(", "'test_loss'", ",", "test_loss", ")", "\n", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "testloader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "testloader", ".", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_svc.adjust_learning_rate": [[113, 124], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "elif", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "elif", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_svc.main": [[126, 179], ["lip.add_lip.bind_lip", "regularization.conv2d_sv.record_input_size", "torch.SGD", "time.time", "range", "print", "recorder.draw_many", "recorder.draw", "recorder.draw", "train_svc.write2text", "model.parameters", "print", "train_svc.adjust_learning_rate", "train_svc.train", "train_svc.test", "recorder.step", "open", "pickle.dump", "auto_attack.autoattack.AutoAttack", "model.eval", "torch.save", "torch.save", "torch.save", "torch.save", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model.state_dict", "os.path.join", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "recorder.record", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.record_input_size", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.write2text", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "bind_lip", "(", "model", ",", "verbose", "=", "False", ")", "\n", "\n", "record_input_size", "(", "model", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "0", ")", "\n", "\n", "natural_acc", "=", "[", "]", "\n", "robust_acc", "=", "[", "]", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "# adjust learning rate for SGD", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", "\n", "\n", "test", "(", "model", ",", "test_loader", ")", "\n", "\n", "recorder", ".", "step", "(", ")", "\n", "\n", "if", "epoch", "==", "args", ".", "epochs", ":", "\n", "            ", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "1", "/", "255", ",", "version", "=", "'standard'", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                    ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "break", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "", "", "used_time", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "3600", "\n", "print", "(", "f'Used time: {used_time:.2f} h'", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "# recorder.draw('lip_sum')", "\n", "", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "clean_acc", "=", "recorder", ".", "test_acc", "[", "-", "1", "]", "[", "1", "]", "\n", "write2text", "(", "log_dir", ",", "'log'", ",", "name", ",", "clean_acc", "=", "clean_acc", ",", "robust_accuracy", "=", "robust_accuracy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_plain_cifar10.write2text": [[21, 24], ["open", "f.write", "os.path.join"], "function", ["None"], ["def", "write2text", "(", "path", ",", "filename", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'{filename}.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "f'{name}: {kwargs}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_plain_cifar10.train": [[26, 62], ["model.train", "enumerate", "recorder.record", "recorder.record", "print", "optimizer.zero_grad", "model", "loss_fn", "loss_fn.backward", "model.max", "target.size", "predicted.eq().sum().item", "model.calc_lip", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to", "loss_fn.item", "target.size", "len", "predicted.eq().sum", "len", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_fn", "(", "out", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "out", ".", "max", "(", "1", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "lipc", ",", "all_lip", "=", "model", ".", "calc_lip", "(", ")", "\n", "\n", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "train_loss", ",", "train_acc", "=", "train_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "train_acc", ")", "\n", "recorder", ".", "record", "(", "'train_loss'", ",", "train_loss", ")", "\n", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "\n", "return", "train_loss", ",", "train_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_plain_cifar10.eval_test": [[64, 86], ["model.eval", "len", "print", "recorder.record", "recorder.record", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "test_accuracy", "=", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_accuracy", ")", "\n", "recorder", ".", "record", "(", "'test_loss'", ",", "test_loss", ")", "\n", "\n", "return", "test_loss", ",", "test_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_plain_cifar10.adjust_learning_rate": [[88, 99], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "if", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_plain_cifar10.main": [[101, 157], ["lip.add_lip.bind_lip", "lip.recorder.Recorder", "torch.SGD", "range", "torch.save", "torch.save", "torch.save", "torch.save", "lip.recorder.Recorder.draw_many", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw", "auto_attack.autoattack.AutoAttack", "model.eval", "lip.recorder.Recorder.record", "train_plain_cifar10.write2text", "model.parameters", "print", "train_plain_cifar10.adjust_learning_rate", "train_plain_cifar10.train", "train_plain_cifar10.eval_test", "lip.recorder.Recorder.step", "model.state_dict", "os.path.join", "open", "pickle.dump", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "open", "pickle.dump", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "print", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.write2text", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "bind_lip", "(", "model", ",", "norm", "=", "'1-norm'", ",", "verbose", "=", "False", ")", "\n", "\n", "recorder", "=", "Recorder", "(", "f'{name}'", ",", "img_dir", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "# adjust learning rate for SGD", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", "\n", "\n", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", "\n", "\n", "# save checkpoint", "\n", "# if (epoch >= args.start_freq) and (epoch % args.save_freq == 0):", "\n", "#     torch.save(model.state_dict(),", "\n", "#                os.path.join(model_dir, f'{name}-epoch{epoch}.pt'))", "\n", "\n", "recorder", ".", "step", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "# recorder.draw('lip_sum')", "\n", "", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "8", "/", "255", ",", "version", "=", "'standard'", ",", "verbose", "=", "True", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "# print(inputs.max(), inputs.min())", "\n", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "print", "(", "f'robust_accuracy: {robust_accuracy}'", ")", "\n", "break", "\n", "\n", "", "", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "", "clean_acc", "=", "recorder", ".", "test_acc", "[", "-", "1", "]", "[", "1", "]", "\n", "write2text", "(", "log_dir", ",", "'log'", ",", "name", ",", "clean_acc", "=", "clean_acc", ",", "robust_accuracy", "=", "robust_accuracy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_group_density.get_last_lips": [[12, 16], ["open", "pickle.load"], "function", ["None"], ["def", "get_last_lips", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "record", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "record", ".", "lip", "[", "-", "1", "]", "[", "1", "]", "# the last record is (epoch, lips)", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_group_density.get_acc": [[18, 24], ["open", "pickle.load"], "function", ["None"], ["", "def", "get_acc", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "record", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "test_acc", "=", "record", ".", "test_acc", "[", "-", "1", "]", "[", "1", "]", "*", "100", "\n", "robust_accuracy", "=", "record", ".", "robust_accuracy", "[", "-", "1", "]", "[", "1", "]", "*", "100", "\n", "return", "test_acc", ",", "robust_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_group_density.compare_norm": [[26, 59], ["len", "len", "matplotlib.subplots", "range", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.setp", "matplotlib.savefig", "matplotlib.tight_layout", "matplotlib.close", "compare_norm_group_density.get_last_lips", "len", "compare_norm_group_density.get_acc", "seaborn.distplot", "ax.get_legend().get_texts", "ax.get_legend"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.get_last_lips", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.summary_acc_latex.get_acc"], ["", "def", "compare_norm", "(", "files", ",", "method_names", ",", "model_name", ")", ":", "\n", "    ", "record", "=", "[", "get_last_lips", "(", "file", ")", "for", "file", "in", "files", "]", "\n", "lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "record", "]", "\n", "for", "l", "in", "lens", ":", "\n", "        ", "assert", "l", "==", "lens", "[", "0", "]", "\n", "\n", "", "n_layers", "=", "len", "(", "record", "[", "0", "]", ")", "\n", "n_records", "=", "len", "(", "files", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_records", ")", ":", "\n", "        ", "method_name", "=", "method_names", "[", "i", "]", "\n", "clean_acc", ",", "robust_acc", "=", "get_acc", "(", "files", "[", "i", "]", ")", "\n", "label", "=", "_methods", "[", "method_name", "]", "+", "f' ({clean_acc:.0f}% | {robust_acc:.0f}%)'", "\n", "# Draw the density plot", "\n", "sns", ".", "distplot", "(", "record", "[", "i", "]", ",", "hist", "=", "False", ",", "kde", "=", "True", ",", "rug", "=", "True", ",", "\n", "kde_kws", "=", "{", "'linewidth'", ":", "2", "}", ",", "\n", "label", "=", "label", ")", "\n", "\n", "", "plt", ".", "legend", "(", "prop", "=", "{", "'size'", ":", "16", "}", ",", "title", "=", "'Training method'", ")", "\n", "title", "=", "r'Distribution of $\\ell_1$ norm in '", "+", "f'{_models[model_name]} Layers'", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "'14'", ")", "\n", "plt", ".", "xlabel", "(", "r'$\\ell_1$ norm'", ",", "fontsize", "=", "'14'", ")", "\n", "plt", ".", "ylabel", "(", "'Density'", ",", "fontsize", "=", "'14'", ")", "\n", "\n", "plt", ".", "setp", "(", "ax", ".", "get_legend", "(", ")", ".", "get_texts", "(", ")", ",", "fontsize", "=", "'14'", ")", "# for legend text", "\n", "# plt.setp(ax.get_legend().get_title(), fontsize='32') # for legend title", "\n", "\n", "plt", ".", "savefig", "(", "f\"./{img_dir}/{model_name}.png\"", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_group_density.main": [[61, 73], ["enumerate", "compare_norm_group_density.compare_norm", "os.path.exists", "len", "found_files.append", "got_methods.append"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.compare_norm"], ["", "def", "main", "(", ")", ":", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "file_names", "=", "[", "f'{log_path}/{model}/{model}_{method}_record.pkl'", "for", "method", "in", "methods", "]", "\n", "found_files", "=", "[", "]", "\n", "got_methods", "=", "[", "]", "\n", "for", "i", ",", "file", "in", "enumerate", "(", "file_names", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "file", ")", ":", "\n", "                ", "found_files", ".", "append", "(", "file", ")", "\n", "got_methods", ".", "append", "(", "methods", "[", "i", "]", ")", "\n", "", "", "if", "len", "(", "found_files", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "compare_norm", "(", "found_files", ",", "got_methods", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_proj_bn.write2text": [[42, 45], ["open", "f.write", "os.path.join"], "function", ["None"], ["def", "write2text", "(", "path", ",", "filename", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'{filename}.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "f'{name}: {kwargs}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_proj_bn.train": [[47, 85], ["model.train", "enumerate", "recorder.record", "recorder.record", "print", "optimizer.zero_grad", "model", "loss_fn", "loss_fn.backward", "model.max", "target.size", "predicted.eq().sum().item", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to", "loss_fn.item", "target.size", "name.find", "model.calc_lip", "model.add_lip_grad", "model.project_bn", "len", "predicted.eq().sum", "len", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip_grad", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.project_bn"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_fn", "(", "out", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "out", ".", "max", "(", "1", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "name", ".", "find", "(", "'0_0'", ")", "!=", "-", "1", ":", "\n", "            ", "lipc", ",", "all_lip", "=", "model", ".", "calc_lip", "(", ")", "\n", "", "else", ":", "\n", "            ", "lipc", ",", "all_lip", "=", "model", ".", "add_lip_grad", "(", "linear", "=", "linear", ",", "conv", "=", "conv", ",", "bn", "=", "bn", ")", "\n", "model", ".", "project_bn", "(", "proj_to", "=", "5", ")", "\n", "\n", "", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "train_loss", ",", "train_acc", "=", "train_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "train_acc", ")", "\n", "recorder", ".", "record", "(", "'train_loss'", ",", "train_loss", ")", "\n", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_proj_bn.test": [[87, 110], ["net.eval", "recorder.record", "recorder.record", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "net", "loss_fn", "net.max", "targets.size", "predicted.eq().sum().item", "len", "inputs.to", "targets.to", "loss_fn.item", "targets.size", "len", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "test", "(", "net", ",", "testloader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "*", "targets", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", ",", "test_acc", "=", "test_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_acc", ")", "\n", "recorder", ".", "record", "(", "'test_loss'", ",", "test_loss", ")", "\n", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "testloader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "testloader", ".", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_proj_bn.adjust_learning_rate": [[112, 123], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "elif", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "elif", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_proj_bn.main": [[125, 176], ["lip.add_lip.bind_lip", "torch.SGD", "time.time", "range", "print", "recorder.draw_many", "recorder.draw", "recorder.draw", "train_nd_proj_bn.write2text", "model.parameters", "print", "train_nd_proj_bn.adjust_learning_rate", "train_nd_proj_bn.train", "train_nd_proj_bn.test", "recorder.step", "open", "pickle.dump", "auto_attack.autoattack.AutoAttack", "model.eval", "torch.save", "torch.save", "torch.save", "torch.save", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model.state_dict", "os.path.join", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "recorder.record", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.write2text", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "bind_lip", "(", "model", ",", "norm", "=", "'1-norm'", ",", "mmt", "=", "mmt", ",", "beta", "=", "beta", ",", "verbose", "=", "False", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "0", ")", "\n", "\n", "natural_acc", "=", "[", "]", "\n", "robust_acc", "=", "[", "]", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "# adjust learning rate for SGD", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", "\n", "\n", "test", "(", "model", ",", "test_loader", ")", "\n", "\n", "recorder", ".", "step", "(", ")", "\n", "\n", "if", "epoch", "==", "args", ".", "epochs", ":", "\n", "            ", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "1", "/", "255", ",", "version", "=", "'standard'", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                    ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "break", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "", "", "used_time", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "3600", "\n", "print", "(", "f'Used time: {used_time:.2f} h'", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "# recorder.draw('lip_sum')", "\n", "", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "clean_acc", "=", "recorder", ".", "test_acc", "[", "-", "1", "]", "[", "1", "]", "\n", "write2text", "(", "log_dir", ",", "'log'", ",", "name", ",", "clean_acc", "=", "clean_acc", ",", "robust_accuracy", "=", "robust_accuracy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.summary_acc_latex.get_tex": [[12, 15], ["None"], "function", ["None"], ["def", "get_tex", "(", "y", ")", ":", "\n", "    ", "s", "=", "[", "f'{i*100:.1f}'", "for", "i", "in", "y", "]", "\n", "return", "' & '", ".", "join", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.summary_acc_latex.get_acc": [[17, 63], ["range", "sorted", "range", "print", "print", "range", "print", "print", "range", "print", "open", "f.readlines", "len", "record.append", "f.readlines.insert", "len", "re.split", "float", "float", "all_clean_acc.append", "all_robust_acc.append", "len", "print", "len", "print", "lines[].find", "lines[].replace", "print", "tmp[].find", "print", "print", "print", "tmp[].split"], "function", ["None"], ["", "def", "get_acc", "(", "model", ")", ":", "\n", "    ", "all_clean_acc", "=", "[", "]", "\n", "all_robust_acc", "=", "[", "]", "\n", "file", "=", "f'./regularization/log/{model}/log.txt'", "\n", "with", "open", "(", "file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "record", "=", "[", "]", "\n", "plain", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "# lines[i] = lines[i].replace('0_0', 'plain')", "\n", "        ", "if", "lines", "[", "i", "]", ".", "find", "(", "'plain'", ")", "!=", "-", "1", ":", "\n", "            ", "plain", "=", "lines", "[", "i", "]", "\n", "continue", "\n", "", "record", ".", "append", "(", "lines", "[", "i", "]", ".", "replace", "(", "'1e-05'", ",", "'0.00001'", ")", ")", "\n", "", "lines", "=", "sorted", "(", "record", ",", "reverse", "=", "True", ")", "\n", "if", "plain", "is", "not", "None", ":", "\n", "        ", "lines", ".", "insert", "(", "0", ",", "plain", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "        ", "tmp", "=", "re", ".", "split", "(", "': |, |}'", ",", "lines", "[", "i", "]", ")", "\n", "if", "i", "%", "n_regularization_param", "==", "1", ":", "\n", "            ", "t", "=", "tmp", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", "\n", "t", "=", "'_'", ".", "join", "(", "t", ")", "\n", "print", "(", "t", ",", "end", "=", "' | '", ")", "\n", "", "if", "tmp", "[", "0", "]", ".", "find", "(", "'plain'", ")", "!=", "-", "1", ":", "\n", "            ", "print", "(", "tmp", "[", "0", "]", ",", "end", "=", "' | '", ")", "\n", "", "clean_acc", "=", "float", "(", "tmp", "[", "-", "4", "]", ")", "\n", "robust_acc", "=", "float", "(", "tmp", "[", "-", "2", "]", ")", "\n", "all_clean_acc", ".", "append", "(", "clean_acc", ")", "\n", "all_robust_acc", ".", "append", "(", "robust_acc", ")", "\n", "\n", "", "print", "(", ")", "\n", "print", "(", "model", ",", "'clean: '", ",", "end", "=", "' '", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_clean_acc", ")", ")", ":", "\n", "        ", "print", "(", "f'{100*all_clean_acc[i]:.1f}'", ",", "end", "=", "' '", ")", "\n", "if", "i", "%", "n_regularization_param", "==", "0", ":", "\n", "            ", "print", "(", "'|'", ",", "end", "=", "' '", ")", "\n", "", "", "print", "(", ")", "\n", "print", "(", "model", ",", "'robust: '", ",", "end", "=", "' '", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_robust_acc", ")", ")", ":", "\n", "        ", "print", "(", "f'{100*all_robust_acc[i]:.1f}'", ",", "end", "=", "' '", ")", "\n", "if", "i", "%", "n_regularization_param", "==", "0", ":", "\n", "            ", "print", "(", "'|'", ",", "end", "=", "' '", ")", "\n", "", "", "print", "(", ")", "\n", "\n", "return", "all_clean_acc", ",", "all_robust_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.summary_acc_latex.write_tex": [[65, 77], ["summary_acc_latex.get_acc", "open", "f.write", "f.write", "summary_acc_latex.get_tex", "summary_acc_latex.get_tex"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.summary_acc_latex.get_acc", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.summary_acc_latex.get_tex", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.summary_acc_latex.get_tex"], ["", "def", "write_tex", "(", "model", ")", ":", "\n", "    ", "all_clean_acc", ",", "all_robust_acc", "=", "get_acc", "(", "model", ")", "\n", "\n", "clean_acc", ",", "robust_acc", "=", "'Clean & '", "+", "get_tex", "(", "all_clean_acc", ")", ",", "'Robust & '", "+", "get_tex", "(", "all_robust_acc", ")", "\n", "# print(clean_acc, end=' ')", "\n", "# print(r'\\\\')", "\n", "# print(robust_acc, end=' ')", "\n", "# print(r'\\\\')", "\n", "\n", "with", "open", "(", "'./regularization/acc_tex_table.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "clean_acc", "+", "r' \\\\'", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "robust_acc", "+", "r' \\\\'", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.summary_acc_latex.main": [[79, 86], ["summary_acc_latex.write_tex"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.summary_acc_latex.write_tex"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "try", ":", "\n", "            ", "write_tex", "(", "model", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd.write2text": [[42, 45], ["open", "f.write", "os.path.join"], "function", ["None"], ["def", "write2text", "(", "path", ",", "filename", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'{filename}.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "f'{name}: {kwargs}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd.train": [[47, 84], ["model.train", "enumerate", "recorder.record", "recorder.record", "print", "optimizer.zero_grad", "model", "loss_fn", "loss_fn.backward", "model.max", "target.size", "predicted.eq().sum().item", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to", "loss_fn.item", "target.size", "name.find", "model.calc_lip", "model.add_lip_grad", "len", "predicted.eq().sum", "len", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip_grad"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_fn", "(", "out", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "out", ".", "max", "(", "1", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "name", ".", "find", "(", "'0_0'", ")", "!=", "-", "1", ":", "\n", "            ", "lipc", ",", "all_lip", "=", "model", ".", "calc_lip", "(", ")", "\n", "", "else", ":", "\n", "            ", "lipc", ",", "all_lip", "=", "model", ".", "add_lip_grad", "(", "linear", "=", "linear", ",", "conv", "=", "conv", ",", "bn", "=", "bn", ")", "\n", "\n", "", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "train_loss", ",", "train_acc", "=", "train_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "train_acc", ")", "\n", "recorder", ".", "record", "(", "'train_loss'", ",", "train_loss", ")", "\n", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd.test": [[86, 109], ["net.eval", "recorder.record", "recorder.record", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "net", "loss_fn", "net.max", "targets.size", "predicted.eq().sum().item", "len", "inputs.to", "targets.to", "loss_fn.item", "targets.size", "len", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "test", "(", "net", ",", "testloader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "*", "targets", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", ",", "test_acc", "=", "test_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_acc", ")", "\n", "recorder", ".", "record", "(", "'test_loss'", ",", "test_loss", ")", "\n", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "testloader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "testloader", ".", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd.adjust_learning_rate": [[111, 122], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "elif", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "elif", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd.main": [[124, 175], ["lip.add_lip.bind_lip", "torch.SGD", "time.time", "range", "print", "recorder.draw_many", "recorder.draw", "recorder.draw", "train_nd.write2text", "model.parameters", "print", "train_nd.adjust_learning_rate", "train_nd.train", "train_nd.test", "recorder.step", "open", "pickle.dump", "auto_attack.autoattack.AutoAttack", "model.eval", "torch.save", "torch.save", "torch.save", "torch.save", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model.state_dict", "os.path.join", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "recorder.record", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.write2text", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "bind_lip", "(", "model", ",", "mmt", "=", "mmt", ",", "beta", "=", "beta", ",", "verbose", "=", "False", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "0", ")", "\n", "\n", "natural_acc", "=", "[", "]", "\n", "robust_acc", "=", "[", "]", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "# adjust learning rate for SGD", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", "\n", "\n", "test", "(", "model", ",", "test_loader", ")", "\n", "\n", "recorder", ".", "step", "(", ")", "\n", "\n", "if", "epoch", "==", "args", ".", "epochs", ":", "\n", "            ", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "1", "/", "255", ",", "version", "=", "'standard'", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                    ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "break", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "", "", "used_time", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "3600", "\n", "print", "(", "f'Used time: {used_time:.2f} h'", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "# recorder.draw('lip_sum')", "\n", "", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "clean_acc", "=", "recorder", ".", "test_acc", "[", "-", "1", "]", "[", "1", "]", "\n", "write2text", "(", "log_dir", ",", "'log'", ",", "name", ",", "clean_acc", "=", "clean_acc", ",", "robust_accuracy", "=", "robust_accuracy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_inf_proj_bn.write2text": [[42, 45], ["open", "f.write", "os.path.join"], "function", ["None"], ["def", "write2text", "(", "path", ",", "filename", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'{filename}.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "f'{name}: {kwargs}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_inf_proj_bn.train": [[47, 85], ["model.train", "enumerate", "recorder.record", "recorder.record", "print", "optimizer.zero_grad", "model", "loss_fn", "loss_fn.backward", "model.max", "target.size", "predicted.eq().sum().item", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to", "loss_fn.item", "target.size", "name.find", "model.calc_lip", "model.add_lip_grad", "model.project_bn", "len", "predicted.eq().sum", "len", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip_grad", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.project_bn"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_fn", "(", "out", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "out", ".", "max", "(", "1", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "name", ".", "find", "(", "'0_0'", ")", "!=", "-", "1", ":", "\n", "            ", "lipc", ",", "all_lip", "=", "model", ".", "calc_lip", "(", ")", "\n", "", "else", ":", "\n", "            ", "lipc", ",", "all_lip", "=", "model", ".", "add_lip_grad", "(", "linear", "=", "linear", ",", "conv", "=", "conv", ",", "bn", "=", "bn", ")", "\n", "model", ".", "project_bn", "(", "proj_to", "=", "5", ")", "\n", "\n", "", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "train_loss", ",", "train_acc", "=", "train_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "train_acc", ")", "\n", "recorder", ".", "record", "(", "'train_loss'", ",", "train_loss", ")", "\n", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_inf_proj_bn.test": [[87, 110], ["net.eval", "recorder.record", "recorder.record", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "net", "loss_fn", "net.max", "targets.size", "predicted.eq().sum().item", "len", "inputs.to", "targets.to", "loss_fn.item", "targets.size", "len", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "test", "(", "net", ",", "testloader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "*", "targets", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", ",", "test_acc", "=", "test_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_acc", ")", "\n", "recorder", ".", "record", "(", "'test_loss'", ",", "test_loss", ")", "\n", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "testloader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "testloader", ".", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_inf_proj_bn.adjust_learning_rate": [[112, 123], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "elif", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "elif", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_inf_proj_bn.main": [[125, 176], ["lip.add_lip.bind_lip", "torch.SGD", "time.time", "range", "print", "recorder.draw_many", "recorder.draw", "recorder.draw", "train_nd_inf_proj_bn.write2text", "model.parameters", "print", "train_nd_inf_proj_bn.adjust_learning_rate", "train_nd_inf_proj_bn.train", "train_nd_inf_proj_bn.test", "recorder.step", "open", "pickle.dump", "auto_attack.autoattack.AutoAttack", "model.eval", "torch.save", "torch.save", "torch.save", "torch.save", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model.state_dict", "os.path.join", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "recorder.record", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.write2text", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "bind_lip", "(", "model", ",", "norm", "=", "'inf-norm'", ",", "mmt", "=", "mmt", ",", "beta", "=", "beta", ",", "verbose", "=", "False", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "0", ")", "\n", "\n", "natural_acc", "=", "[", "]", "\n", "robust_acc", "=", "[", "]", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "# adjust learning rate for SGD", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", "\n", "\n", "test", "(", "model", ",", "test_loader", ")", "\n", "\n", "recorder", ".", "step", "(", ")", "\n", "\n", "if", "epoch", "==", "args", ".", "epochs", ":", "\n", "            ", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "1", "/", "255", ",", "version", "=", "'standard'", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                    ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "break", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "", "", "used_time", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "3600", "\n", "print", "(", "f'Used time: {used_time:.2f} h'", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "# recorder.draw('lip_sum')", "\n", "", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "clean_acc", "=", "recorder", ".", "test_acc", "[", "-", "1", "]", "[", "1", "]", "\n", "write2text", "(", "log_dir", ",", "'log'", ",", "name", ",", "clean_acc", "=", "clean_acc", ",", "robust_accuracy", "=", "robust_accuracy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_inf.write2text": [[42, 45], ["open", "f.write", "os.path.join"], "function", ["None"], ["def", "write2text", "(", "path", ",", "filename", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'{filename}.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "f'{name}: {kwargs}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_inf.train": [[47, 84], ["model.train", "enumerate", "recorder.record", "recorder.record", "print", "optimizer.zero_grad", "model", "loss_fn", "loss_fn.backward", "model.max", "target.size", "predicted.eq().sum().item", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to", "loss_fn.item", "target.size", "name.find", "model.calc_lip", "model.add_lip_grad", "len", "predicted.eq().sum", "len", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip_grad"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_fn", "(", "out", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "out", ".", "max", "(", "1", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "name", ".", "find", "(", "'0_0'", ")", "!=", "-", "1", ":", "\n", "            ", "lipc", ",", "all_lip", "=", "model", ".", "calc_lip", "(", ")", "\n", "", "else", ":", "\n", "            ", "lipc", ",", "all_lip", "=", "model", ".", "add_lip_grad", "(", "linear", "=", "linear", ",", "conv", "=", "conv", ",", "bn", "=", "bn", ")", "\n", "\n", "", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "train_loss", ",", "train_acc", "=", "train_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "train_acc", ")", "\n", "recorder", ".", "record", "(", "'train_loss'", ",", "train_loss", ")", "\n", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_inf.test": [[86, 109], ["net.eval", "recorder.record", "recorder.record", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "net", "loss_fn", "net.max", "targets.size", "predicted.eq().sum().item", "len", "inputs.to", "targets.to", "loss_fn.item", "targets.size", "len", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "test", "(", "net", ",", "testloader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "loss_fn", "(", "outputs", ",", "targets", ")", "\n", "\n", "test_loss", "+=", "loss", ".", "item", "(", ")", "*", "targets", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "\n", "total", "+=", "targets", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", ",", "test_acc", "=", "test_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_acc", ")", "\n", "recorder", ".", "record", "(", "'test_loss'", ",", "test_loss", ")", "\n", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "testloader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "testloader", ".", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_inf.adjust_learning_rate": [[111, 122], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "elif", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "elif", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_nd_inf.main": [[124, 175], ["lip.add_lip.bind_lip", "torch.SGD", "time.time", "range", "print", "recorder.draw_many", "recorder.draw", "recorder.draw", "train_nd_inf.write2text", "model.parameters", "print", "train_nd_inf.adjust_learning_rate", "train_nd_inf.train", "train_nd_inf.test", "recorder.step", "open", "pickle.dump", "auto_attack.autoattack.AutoAttack", "model.eval", "torch.save", "torch.save", "torch.save", "torch.save", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model.state_dict", "os.path.join", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "recorder.record", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.write2text", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "bind_lip", "(", "model", ",", "norm", "=", "'inf-norm'", ",", "mmt", "=", "mmt", ",", "beta", "=", "beta", ",", "verbose", "=", "False", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "0", ")", "\n", "\n", "natural_acc", "=", "[", "]", "\n", "robust_acc", "=", "[", "]", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "# adjust learning rate for SGD", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", "\n", "\n", "test", "(", "model", ",", "test_loader", ")", "\n", "\n", "recorder", ".", "step", "(", ")", "\n", "\n", "if", "epoch", "==", "args", ".", "epochs", ":", "\n", "            ", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "1", "/", "255", ",", "version", "=", "'standard'", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                    ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "break", "\n", "", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "", "", "used_time", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "3600", "\n", "print", "(", "f'Used time: {used_time:.2f} h'", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "# recorder.draw('lip_sum')", "\n", "", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "clean_acc", "=", "recorder", ".", "test_acc", "[", "-", "1", "]", "[", "1", "]", "\n", "write2text", "(", "log_dir", ",", "'log'", ",", "name", ",", "clean_acc", "=", "clean_acc", ",", "robust_accuracy", "=", "robust_accuracy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.get_module_name": [[28, 51], ["lip.add_lip.bind_lip", "net.eval", "torch.rand", "net.cpu", "net", "net.modules", "hasattr", "module_name.append", "module_name.append", "classname.find", "module_name.append"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip"], ["def", "get_module_name", "(", "net", ")", ":", "\n", "    ", "bind_lip", "(", "net", ")", "\n", "net", ".", "eval", "(", ")", "\n", "x", "=", "torch", ".", "rand", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "net", ".", "cpu", "(", ")", "\n", "net", "(", "x", ")", "\n", "module_name", "=", "[", "]", "\n", "n_conv", "=", "0", "\n", "n_linear", "=", "0", "\n", "n_bn", "=", "0", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'is_conv2d'", ")", "and", "m", ".", "is_conv2d", ":", "\n", "            ", "module_name", ".", "append", "(", "(", "f'{classname}-#{n_conv}'", ",", "f'{m}'", ")", ")", "\n", "n_conv", "+=", "1", "\n", "", "elif", "classname", "==", "'Linear'", ":", "\n", "            ", "module_name", ".", "append", "(", "(", "f'{classname}-#{n_linear}'", ",", "f'{m}'", ")", ")", "\n", "n_linear", "+=", "1", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "module_name", ".", "append", "(", "(", "f'{classname}-#{n_bn}'", ",", "f'{m}'", ")", ")", "\n", "n_bn", "+=", "1", "\n", "\n", "", "", "return", "module_name", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.get_last_lips": [[53, 57], ["open", "pickle.load"], "function", ["None"], ["", "def", "get_last_lips", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "record", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "record", ".", "lip", "[", "-", "1", "]", "[", "1", "]", "# the last record is (epoch, lips)", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.plot_bar": [[59, 62], ["ax.bar", "compare_norm_individual.autolabel"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.autolabel"], ["", "def", "plot_bar", "(", "ax", ",", "start", ",", "x", ",", "y", ",", "width", ",", "label", "=", "None", ")", ":", "\n", "    ", "rects", "=", "ax", ".", "bar", "(", "x", "+", "start", ",", "y", ",", "width", "=", "width", ",", "align", "=", "'center'", ",", "label", "=", "label", ")", "\n", "autolabel", "(", "rects", ",", "ax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.autolabel": [[64, 81], ["rect.get_height", "ax.annotate", "rect.get_x", "rect.get_width"], "function", ["None"], ["", "def", "autolabel", "(", "rects", ",", "ax", ")", ":", "\n", "    ", "\"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"", "\n", "for", "rect", "in", "rects", ":", "\n", "        ", "height", "=", "rect", ".", "get_height", "(", ")", "\n", "offset", "=", "-", "1", "# 5 points vertical offset", "\n", "rep", "=", "height", "\n", "va", "=", "'bottom'", "\n", "if", "height", "<", "0", ":", "\n", "            ", "offset", "=", "1", "\n", "rep", "=", "-", "height", "\n", "va", "=", "'top'", "\n", "", "ax", ".", "annotate", "(", "f'{rep:.2f}'", ",", "\n", "xy", "=", "(", "rect", ".", "get_x", "(", ")", "+", "rect", ".", "get_width", "(", ")", "/", "2", ",", "height", ")", ",", "\n", "xytext", "=", "(", "0", ",", "offset", ")", ",", "\n", "textcoords", "=", "\"offset points\"", ",", "\n", "ha", "=", "'center'", ",", "va", "=", "va", ",", "\n", "fontsize", "=", "15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.plot": [[83, 100], ["matplotlib.subplots", "ax.set_ylabel", "ax.set_title", "ax.set_xticks", "ax.set_xticklabels", "compare_norm_individual.plot_bar", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.plot_bar"], ["", "", "def", "plot", "(", "y", ",", "xtick", ",", "x_labels", ",", "width", ",", "title", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "# Add some text for labels, title and custom x-axis tick labels, etc.", "\n", "ax", ".", "set_ylabel", "(", "'Norm'", ",", "fontsize", "=", "15", ")", "\n", "# forward, inverse = get_scale(a=1.5)", "\n", "# ax.set_yscale('function', functions=(forward, inverse))", "\n", "ax", ".", "set_title", "(", "title", ")", "\n", "ax", ".", "set_xticks", "(", "xtick", ")", "\n", "ax", ".", "set_xticklabels", "(", "x_labels", ",", "fontsize", "=", "18", ")", "\n", "\n", "plot_bar", "(", "ax", ",", "0", ",", "xtick", ",", "y", ",", "width", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"./{img_dir}/{title}.png\"", ")", "\n", "\n", "plt", ".", "close", "(", "'all'", ")", "# to save memory", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.compare_norm": [[102, 117], ["len", "len", "numpy.arange", "range", "compare_norm_individual.get_last_lips", "len", "compare_norm_individual.plot"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.get_last_lips", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.plot"], ["", "def", "compare_norm", "(", "files", ",", "method_names", ",", "model_name", ")", ":", "\n", "    ", "record", "=", "[", "get_last_lips", "(", "file", ")", "for", "file", "in", "files", "]", "\n", "lens", "=", "[", "len", "(", "x", ")", "for", "x", "in", "record", "]", "\n", "for", "l", "in", "lens", ":", "\n", "        ", "assert", "l", "==", "lens", "[", "0", "]", "\n", "\n", "", "n_layers", "=", "len", "(", "record", "[", "0", "]", ")", "\n", "n_records", "=", "len", "(", "files", ")", "\n", "xtick", "=", "np", ".", "arange", "(", "n_records", ")", "\n", "width", "=", "0.7", "\n", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "        ", "layer_norms", "=", "[", "t", "[", "i", "]", "for", "t", "in", "record", "]", "\n", "module_name", "=", "module_names", "[", "model_name", "]", "[", "i", "]", "[", "0", "]", "\n", "plot", "(", "layer_norms", ",", "xtick", ",", "method_names", ",", "width", ",", "f'{_models[model_name]}-{module_name}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.main": [[119, 131], ["enumerate", "compare_norm_individual.compare_norm", "os.path.exists", "len", "found_files.append", "got_methods.append"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.compare_norm"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "file_names", "=", "[", "f'{log_path}/{model}/{model}_{method}_record.pkl'", "for", "method", "in", "methods", "]", "\n", "found_files", "=", "[", "]", "\n", "got_methods", "=", "[", "]", "\n", "for", "i", ",", "file", "in", "enumerate", "(", "file_names", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "file", ")", ":", "\n", "                ", "found_files", ".", "append", "(", "file", ")", "\n", "got_methods", ".", "append", "(", "_methods", "[", "methods", "[", "i", "]", "]", ")", "\n", "", "", "if", "len", "(", "found_files", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "compare_norm", "(", "found_files", ",", "got_methods", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.write2text": [[22, 25], ["open", "f.write", "os.path.join"], "function", ["None"], ["def", "write2text", "(", "path", ",", "filename", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'{filename}.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "f'{name}: {kwargs}\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.train": [[27, 55], ["model.train", "enumerate", "optimizer.zero_grad", "loss.backward", "model.calc_lip", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# calculate robust loss", "\n", "loss", "=", "LOSS", "[", "args", ".", "loss", "]", "(", "model", "=", "model", ",", "\n", "x_natural", "=", "data", ",", "\n", "y", "=", "target", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "step_size", "=", "args", ".", "step_size", ",", "\n", "epsilon", "=", "args", ".", "epsilon", ",", "\n", "perturb_steps", "=", "args", ".", "num_steps", ",", "\n", "beta", "=", "args", ".", "beta", ",", "\n", "loss", "=", "args", ".", "loss", ",", "\n", "distance", "=", "args", ".", "distance", ",", "\n", "m", "=", "args", ".", "m", ",", "\n", "s", "=", "args", ".", "s", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "lipc", ",", "all_lip", "=", "model", ".", "calc_lip", "(", ")", "\n", "\n", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.eval_train": [[63, 84], ["model.eval", "len", "print", "recorder.record", "recorder.record", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "", "def", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "train_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "train_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "train_loss", "/=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "training_accuracy", "=", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "training_accuracy", ")", "\n", "recorder", ".", "record", "(", "'train_loss'", ",", "train_loss", ")", "\n", "\n", "return", "train_loss", ",", "training_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.eval_test": [[86, 108], ["model.eval", "len", "print", "recorder.record", "recorder.record", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "test_accuracy", "=", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_accuracy", ")", "\n", "recorder", ".", "record", "(", "'test_loss'", ",", "test_loss", ")", "\n", "\n", "return", "test_loss", ",", "test_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.adjust_learning_rate": [[110, 121], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "if", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.main": [[123, 184], ["lip.add_lip.bind_lip", "lip.recorder.Recorder", "torch.SGD", "range", "torch.save", "torch.save", "torch.save", "torch.save", "lip.recorder.Recorder.draw_many", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw", "auto_attack.autoattack.AutoAttack", "model.eval", "lip.recorder.Recorder.record", "train_adv_cifar10.write2text", "model.parameters", "print", "train_adv_cifar10.adjust_learning_rate", "train_adv_cifar10.train", "train_adv_cifar10.eval_train", "train_adv_cifar10.eval_test", "lip.recorder.Recorder.step", "model.state_dict", "os.path.join", "open", "pickle.dump", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "open", "pickle.dump", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "print", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.train_adv_cifar10.write2text", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "bind_lip", "(", "model", ",", "norm", "=", "'1-norm'", ",", "verbose", "=", "False", ")", "\n", "\n", "recorder", "=", "Recorder", "(", "f'{name}'", ",", "img_dir", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "# adjust learning rate for SGD", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "# adversarial training", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", "\n", "\n", "# evaluation on natural examples", "\n", "# print('==============')", "\n", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "recorder", ")", "\n", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", "\n", "# print('==============')", "\n", "\n", "# save checkpoint", "\n", "# if (epoch >= args.start_freq) and (epoch % args.save_freq == 0):", "\n", "#     torch.save(model.state_dict(),", "\n", "#                os.path.join(model_dir, f'{name}-epoch{epoch}.pt'))", "\n", "\n", "recorder", ".", "step", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "# recorder.draw('lip_sum')", "\n", "", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "8", "/", "255", ",", "version", "=", "'standard'", ",", "verbose", "=", "True", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "# print(inputs.max(), inputs.min())", "\n", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "print", "(", "f'robust_accuracy: {robust_accuracy}'", ")", "\n", "break", "\n", "\n", "", "", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "", "clean_acc", "=", "recorder", ".", "test_acc", "[", "-", "1", "]", "[", "1", "]", "\n", "write2text", "(", "log_dir", ",", "'log'", ",", "name", ",", "clean_acc", "=", "clean_acc", ",", "robust_accuracy", "=", "robust_accuracy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_plain_cifar10_2.train": [[22, 62], ["model.train", "enumerate", "recorder.record", "recorder.record_train", "print", "optimizer.zero_grad", "model", "loss_fn", "loss_fn.backward", "loss_fn.item", "model.max", "target.size", "predicted.eq().sum().item", "model.calc_lip", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step"], ["def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_fn", "(", "out", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "_", ",", "predicted", "=", "out", ".", "max", "(", "1", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "lipc", ",", "all_lip", "=", "model", ".", "calc_lip", "(", ")", "\n", "\n", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# print progress", "\n", "# if batch_idx % args.log_interval == 0:", "\n", "#     print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'.format(", "\n", "#         epoch, batch_idx * len(data), len(train_loader.dataset),", "\n", "#                100. * batch_idx / len(train_loader), loss.item()))", "\n", "\n", "", "train_loss", ",", "train_acc", "=", "train_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "train_acc", ")", "\n", "recorder", ".", "record_train", "(", "train_loss", ")", "\n", "\n", "# if epoch == args.epochs:", "\n", "print", "(", "f'{train_loss:.10f}, {train_acc:.5f} | '", ",", "end", "=", "''", ")", "\n", "return", "train_loss", ",", "train_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_plain_cifar10_2.eval_train": [[64, 85], ["model.eval", "len", "print", "recorder.record", "recorder.record_train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "train_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "train_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "train_loss", "/=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "training_accuracy", "=", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "training_accuracy", ")", "\n", "recorder", ".", "record_train", "(", "train_loss", ")", "\n", "\n", "return", "train_loss", ",", "training_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_plain_cifar10_2.eval_test": [[87, 109], ["model.eval", "len", "print", "recorder.record", "recorder.record_test", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "test_accuracy", "=", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_accuracy", ")", "\n", "recorder", ".", "record_test", "(", "test_loss", ")", "\n", "\n", "return", "test_loss", ",", "test_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_plain_cifar10_2.adjust_learning_rate": [[111, 122], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "if", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_plain_cifar10_2.main": [[124, 188], ["lip.add_lip.bind_lip", "lip.recorder.Recorder", "torch.SGD", "range", "torch.save", "torch.save", "torch.save", "torch.save", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw_many", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw", "auto_attack.autoattack.AutoAttack", "model.eval", "lip.recorder.Recorder.record", "print", "print", "model.parameters", "print", "train_plain_cifar10_2.adjust_learning_rate", "train_plain_cifar10_2.train", "train_plain_cifar10_2.eval_test", "lip.recorder.Recorder.step", "model.state_dict", "os.path.join", "open", "pickle.dump", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "open", "pickle.dump", "torch.save", "torch.save", "torch.save", "torch.save", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "print", "model.state_dict", "os.path.join", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation"], ["", "", "def", "main", "(", ")", ":", "\n", "# init model, ResNet18() can be also used here for training", "\n", "    ", "if", "args", ".", "loss", "==", "'alp'", "or", "args", ".", "loss", "==", "'trades'", "or", "args", ".", "loss", "==", "'pgd'", ":", "\n", "        ", "print", "(", "\"normalize False\"", ")", "\n", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"normalize True\"", ")", "\n", "model", "=", "nets", "[", "args", ".", "model", "]", "(", "use_FNandWN", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "bind_lip", "(", "model", ",", "norm", "=", "'1-norm'", ",", "verbose", "=", "False", ")", "\n", "\n", "recorder", "=", "Recorder", "(", "f'{name}'", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "# adjust learning rate for SGD", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "# adversarial training", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", "\n", "\n", "# evaluation on natural examples", "\n", "# print('==============')", "\n", "# eval_train(model, device, train_loader, recorder)", "\n", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", "\n", "# print('==============')", "\n", "\n", "# save checkpoint", "\n", "if", "(", "epoch", ">=", "args", ".", "start_freq", ")", "and", "(", "epoch", "%", "args", ".", "save_freq", "==", "0", ")", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}-epoch{epoch}.pt'", ")", ")", "\n", "\n", "", "recorder", ".", "step", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "", "recorder", ".", "draw", "(", "'lip_sum'", ")", "\n", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "8", "/", "255", ",", "version", "=", "'standard'", ",", "verbose", "=", "False", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "# print(inputs.max(), inputs.min())", "\n", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "print", "(", "f'robust_accuracy: {robust_accuracy}'", ")", "\n", "break", "\n", "\n", "", "", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd2.train": [[22, 50], ["model.train", "enumerate", "optimizer.zero_grad", "loss.backward", "model.add_lip_grad", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip_grad", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step"], ["def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# calculate robust loss", "\n", "loss", "=", "LOSS", "[", "args", ".", "loss", "]", "(", "model", "=", "model", ",", "\n", "x_natural", "=", "data", ",", "\n", "y", "=", "target", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "step_size", "=", "args", ".", "step_size", ",", "\n", "epsilon", "=", "args", ".", "epsilon", ",", "\n", "perturb_steps", "=", "args", ".", "num_steps", ",", "\n", "beta", "=", "args", ".", "beta", ",", "\n", "loss", "=", "args", ".", "loss", ",", "\n", "distance", "=", "args", ".", "distance", ",", "\n", "m", "=", "args", ".", "m", ",", "\n", "s", "=", "args", ".", "s", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "lipc", ",", "all_lip", "=", "model", ".", "add_lip_grad", "(", ")", "\n", "\n", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd2.eval_train": [[58, 79], ["model.eval", "len", "print", "recorder.record", "recorder.record_train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "", "def", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "train_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "train_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "train_loss", "/=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "training_accuracy", "=", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "training_accuracy", ")", "\n", "recorder", ".", "record_train", "(", "train_loss", ")", "\n", "\n", "return", "train_loss", ",", "training_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd2.eval_test": [[81, 103], ["model.eval", "len", "print", "recorder.record", "recorder.record_test", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "test_accuracy", "=", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_accuracy", ")", "\n", "recorder", ".", "record_test", "(", "test_loss", ")", "\n", "\n", "return", "test_loss", ",", "test_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd2.adjust_learning_rate": [[105, 116], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "if", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd2.main": [[118, 182], ["lip.add_lip2.bind_lip", "lip.recorder.Recorder", "torch.SGD", "range", "torch.save", "torch.save", "torch.save", "torch.save", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw_many", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw", "auto_attack.autoattack.AutoAttack", "model.eval", "lip.recorder.Recorder.record", "print", "print", "model.parameters", "print", "train_adv_cifar10_nd2.adjust_learning_rate", "train_adv_cifar10_nd2.train", "train_adv_cifar10_nd2.eval_train", "train_adv_cifar10_nd2.eval_test", "lip.recorder.Recorder.step", "model.state_dict", "os.path.join", "open", "pickle.dump", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "open", "pickle.dump", "torch.save", "torch.save", "torch.save", "torch.save", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "print", "model.state_dict", "os.path.join", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation"], ["", "", "def", "main", "(", ")", ":", "\n", "# init model, ResNet18() can be also used here for training", "\n", "    ", "if", "args", ".", "loss", "==", "'alp'", "or", "args", ".", "loss", "==", "'trades'", "or", "args", ".", "loss", "==", "'pgd'", ":", "\n", "        ", "print", "(", "\"normalize False\"", ")", "\n", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"normalize True\"", ")", "\n", "model", "=", "nets", "[", "args", ".", "model", "]", "(", "use_FNandWN", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "bind_lip", "(", "model", ",", "norm", "=", "'1-norm'", ",", "beta", "=", "args", ".", "norm_decay", ",", "verbose", "=", "False", ")", "\n", "\n", "recorder", "=", "Recorder", "(", "f'{name}'", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "0.", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "# adjust learning rate for SGD", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "# adversarial training", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", "\n", "\n", "# evaluation on natural examples", "\n", "# print('==============')", "\n", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "recorder", ")", "\n", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", "\n", "# print('==============')", "\n", "\n", "# save checkpoint", "\n", "if", "(", "epoch", ">=", "args", ".", "start_freq", ")", "and", "(", "epoch", "%", "args", ".", "save_freq", "==", "0", ")", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}-epoch{epoch}.pt'", ")", ")", "\n", "\n", "", "recorder", ".", "step", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "", "recorder", ".", "draw", "(", "'lip_sum'", ")", "\n", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "8", "/", "255", ",", "version", "=", "'standard'", ",", "verbose", "=", "False", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "# print(inputs.max(), inputs.min())", "\n", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "print", "(", "f'robust_accuracy: {robust_accuracy}'", ")", "\n", "break", "\n", "\n", "", "", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.he.HELoss.__init__": [[6, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "s", "=", "None", ")", ":", "\n", "        ", "super", "(", "HELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "s", "=", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.he.HELoss.forward": [[10, 16], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "enumerate", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "logits.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ",", "cm", "=", "0", ")", ":", "\n", "        ", "numerator", "=", "self", ".", "s", "*", "(", "torch", ".", "diagonal", "(", "logits", ".", "transpose", "(", "0", ",", "1", ")", "[", "labels", "]", ")", "-", "cm", ")", "\n", "item", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "(", "logits", "[", "i", ",", ":", "y", "]", ",", "logits", "[", "i", ",", "y", "+", "1", ":", "]", ")", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", ",", "y", "in", "enumerate", "(", "labels", ")", "]", ",", "dim", "=", "0", ")", "\n", "denominator", "=", "torch", ".", "exp", "(", "numerator", ")", "+", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "self", ".", "s", "*", "item", ")", ",", "dim", "=", "1", ")", "\n", "Loss", "=", "-", "torch", ".", "mean", "(", "numerator", "-", "torch", ".", "log", "(", "denominator", ")", ")", "\n", "return", "Loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_plain_cifar10.train": [[22, 62], ["model.train", "enumerate", "recorder.record", "recorder.record_train", "print", "optimizer.zero_grad", "model", "loss_fn", "loss_fn.backward", "loss_fn.item", "model.max", "target.size", "predicted.eq().sum().item", "model.calc_lip", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to", "predicted.eq().sum", "predicted.eq"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step"], ["    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f'{filename}.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "f'{name}: {kwargs}\\n'", ")", "\n", "\n", "\n", "", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "out", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_fn", "(", "out", ",", "target", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "*", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "predicted", "=", "out", ".", "max", "(", "1", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "lipc", ",", "all_lip", "=", "model", ".", "calc_lip", "(", ")", "\n", "\n", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "train_loss", ",", "train_acc", "=", "train_loss", "/", "total", ",", "correct", "/", "total", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "train_acc", ")", "\n", "recorder", ".", "record", "(", "'train_loss'", ",", "train_loss", ")", "\n", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "\n", "return", "train_loss", ",", "train_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_plain_cifar10.eval_train": [[64, 85], ["model.eval", "len", "print", "recorder.record", "recorder.record_train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "test_accuracy", "=", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_accuracy", ")", "\n", "recorder", ".", "record", "(", "'test_loss'", ",", "test_loss", ")", "\n", "\n", "return", "test_loss", ",", "test_accuracy", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_plain_cifar10.eval_test": [[87, 109], ["model.eval", "len", "print", "recorder.record", "recorder.record_test", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["\n", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "if", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "\n", "", "", "def", "main", "(", ")", ":", "\n", "    ", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "bind_lip", "(", "model", ",", "norm", "=", "'1-norm'", ",", "verbose", "=", "False", ")", "\n", "\n", "recorder", "=", "Recorder", "(", "f'{name}'", ",", "img_dir", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_plain_cifar10.adjust_learning_rate": [[111, 122], ["None"], "function", ["None"], ["# adjust learning rate for SGD", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", "\n", "\n", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", "\n", "\n", "# save checkpoint", "\n", "# if (epoch >= args.start_freq) and (epoch % args.save_freq == 0):", "\n", "#     torch.save(model.state_dict(),", "\n", "#                os.path.join(model_dir, f'{name}-epoch{epoch}.pt'))", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_plain_cifar10.main": [[124, 188], ["lip.add_lip.bind_lip", "lip.recorder.Recorder", "torch.SGD", "range", "torch.save", "torch.save", "torch.save", "torch.save", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw_many", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw", "auto_attack.autoattack.AutoAttack", "model.eval", "lip.recorder.Recorder.record", "print", "print", "model.parameters", "print", "train_plain_cifar10.adjust_learning_rate", "train_plain_cifar10.train", "train_plain_cifar10.eval_test", "lip.recorder.Recorder.step", "model.state_dict", "os.path.join", "open", "pickle.dump", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "open", "pickle.dump", "torch.save", "torch.save", "torch.save", "torch.save", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "print", "model.state_dict", "os.path.join", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation"], ["recorder", ".", "step", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "# recorder.draw('lip_sum')", "\n", "", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "8", "/", "255", ",", "version", "=", "'standard'", ",", "verbose", "=", "True", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "# print(inputs.max(), inputs.min())", "\n", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "print", "(", "f'robust_accuracy: {robust_accuracy}'", ")", "\n", "break", "\n", "\n", "", "", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "", "clean_acc", "=", "recorder", ".", "test_acc", "[", "-", "1", "]", "[", "1", "]", "\n", "write2text", "(", "log_dir", ",", "'log'", ",", "name", ",", "clean_acc", "=", "clean_acc", ",", "robust_accuracy", "=", "robust_accuracy", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "nets", "=", "{", "\n", "'vgg'", ":", "VGG", ",", "\n", "'regnet'", ":", "RegNetX_200MF", ",", "\n", "'resnet'", ":", "ResNet18", ",", "\n", "'senet'", ":", "SENet18", "\n", "}", "\n", "\n", "models", "=", "[", "key", "for", "key", ",", "value", "in", "nets", ".", "items", "(", ")", "]", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Plain Training'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 128)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 128)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "120", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.", ",", "\n", "type", "=", "float", ",", "metavar", "=", "'W'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "default", "=", "0.031", ",", "\n", "help", "=", "'perturbation'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-steps'", ",", "default", "=", "10", ",", "\n", "help", "=", "'perturb number of steps'", ")", "\n", "parser", ".", "add_argument", "(", "'--step-size'", ",", "default", "=", "0.007", ",", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_wd.train": [[22, 50], ["model.train", "enumerate", "optimizer.zero_grad", "loss.backward", "model.calc_lip", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step"], ["def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# calculate robust loss", "\n", "loss", "=", "LOSS", "[", "args", ".", "loss", "]", "(", "model", "=", "model", ",", "\n", "x_natural", "=", "data", ",", "\n", "y", "=", "target", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "step_size", "=", "args", ".", "step_size", ",", "\n", "epsilon", "=", "args", ".", "epsilon", ",", "\n", "perturb_steps", "=", "args", ".", "num_steps", ",", "\n", "beta", "=", "args", ".", "beta", ",", "\n", "loss", "=", "args", ".", "loss", ",", "\n", "distance", "=", "args", ".", "distance", ",", "\n", "m", "=", "args", ".", "m", ",", "\n", "s", "=", "args", ".", "s", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "lipc", ",", "all_lip", "=", "model", ".", "calc_lip", "(", ")", "\n", "\n", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_wd.eval_train": [[58, 79], ["model.eval", "len", "print", "recorder.record", "recorder.record_train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "", "def", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "train_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "train_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "train_loss", "/=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "training_accuracy", "=", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "training_accuracy", ")", "\n", "recorder", ".", "record_train", "(", "train_loss", ")", "\n", "\n", "return", "train_loss", ",", "training_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_wd.eval_test": [[81, 103], ["model.eval", "len", "print", "recorder.record", "recorder.record_test", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "test_accuracy", "=", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_accuracy", ")", "\n", "recorder", ".", "record_test", "(", "test_loss", ")", "\n", "\n", "return", "test_loss", ",", "test_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_wd.adjust_learning_rate": [[105, 116], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "if", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_wd.main": [[118, 182], ["lip.add_lip.bind_lip", "lip.recorder.Recorder", "torch.SGD", "range", "torch.save", "torch.save", "torch.save", "torch.save", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw_many", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw", "auto_attack.autoattack.AutoAttack", "model.eval", "lip.recorder.Recorder.record", "print", "print", "model.parameters", "print", "train_adv_cifar10_wd.adjust_learning_rate", "train_adv_cifar10_wd.train", "train_adv_cifar10_wd.eval_train", "train_adv_cifar10_wd.eval_test", "lip.recorder.Recorder.step", "model.state_dict", "os.path.join", "open", "pickle.dump", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "open", "pickle.dump", "torch.save", "torch.save", "torch.save", "torch.save", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "print", "model.state_dict", "os.path.join", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation"], ["", "", "def", "main", "(", ")", ":", "\n", "# init model, ResNet18() can be also used here for training", "\n", "    ", "if", "args", ".", "loss", "==", "'alp'", "or", "args", ".", "loss", "==", "'trades'", "or", "args", ".", "loss", "==", "'pgd'", ":", "\n", "        ", "print", "(", "\"normalize False\"", ")", "\n", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"normalize True\"", ")", "\n", "model", "=", "nets", "[", "args", ".", "model", "]", "(", "use_FNandWN", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "bind_lip", "(", "model", ",", "norm", "=", "'1-norm'", ",", "verbose", "=", "False", ")", "\n", "\n", "recorder", "=", "Recorder", "(", "f'{name}'", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "# adjust learning rate for SGD", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "# adversarial training", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", "\n", "\n", "# evaluation on natural examples", "\n", "# print('==============')", "\n", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "recorder", ")", "\n", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", "\n", "# print('==============')", "\n", "\n", "# save checkpoint", "\n", "if", "(", "epoch", ">=", "args", ".", "start_freq", ")", "and", "(", "epoch", "%", "args", ".", "save_freq", "==", "0", ")", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}-epoch{epoch}.pt'", ")", ")", "\n", "\n", "", "recorder", ".", "step", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "", "recorder", ".", "draw", "(", "'lip_sum'", ")", "\n", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "8", "/", "255", ",", "version", "=", "'standard'", ",", "verbose", "=", "False", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "# print(inputs.max(), inputs.min())", "\n", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "print", "(", "f'robust_accuracy: {robust_accuracy}'", ")", "\n", "break", "\n", "\n", "", "", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_he_cifar10.train": [[22, 50], ["model.train", "enumerate", "optimizer.zero_grad", "loss.backward", "model.calc_lip", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step"], ["def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# calculate robust loss", "\n", "loss", "=", "LOSS", "[", "args", ".", "loss", "]", "(", "model", "=", "model", ",", "\n", "x_natural", "=", "data", ",", "\n", "y", "=", "target", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "step_size", "=", "args", ".", "step_size", ",", "\n", "epsilon", "=", "args", ".", "epsilon", ",", "\n", "perturb_steps", "=", "args", ".", "num_steps", ",", "\n", "beta", "=", "args", ".", "beta", ",", "\n", "loss", "=", "args", ".", "loss", ",", "\n", "distance", "=", "args", ".", "distance", ",", "\n", "m", "=", "args", ".", "m", ",", "\n", "s", "=", "args", ".", "s", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "lipc", ",", "all_lip", "=", "model", ".", "calc_lip", "(", ")", "\n", "\n", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_he_cifar10.eval_train": [[58, 79], ["model.eval", "len", "print", "recorder.record", "recorder.record_train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "", "def", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "train_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "train_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "train_loss", "/=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "training_accuracy", "=", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "training_accuracy", ")", "\n", "recorder", ".", "record_train", "(", "train_loss", ")", "\n", "\n", "return", "train_loss", ",", "training_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_he_cifar10.eval_test": [[81, 103], ["model.eval", "len", "print", "recorder.record", "recorder.record_test", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "test_accuracy", "=", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_accuracy", ")", "\n", "recorder", ".", "record_test", "(", "test_loss", ")", "\n", "\n", "return", "test_loss", ",", "test_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_he_cifar10.adjust_learning_rate": [[105, 116], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "if", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_he_cifar10.main": [[118, 182], ["lip.add_lip.bind_lip", "lip.recorder.Recorder", "torch.SGD", "range", "torch.save", "torch.save", "torch.save", "torch.save", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw_many", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw", "auto_attack.autoattack.AutoAttack", "model.eval", "lip.recorder.Recorder.record", "print", "print", "model.parameters", "print", "train_adv_he_cifar10.adjust_learning_rate", "train_adv_he_cifar10.train", "train_adv_he_cifar10.eval_train", "train_adv_he_cifar10.eval_test", "lip.recorder.Recorder.step", "model.state_dict", "os.path.join", "open", "pickle.dump", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "open", "pickle.dump", "torch.save", "torch.save", "torch.save", "torch.save", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "print", "model.state_dict", "os.path.join", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation"], ["", "", "def", "main", "(", ")", ":", "\n", "# init model, ResNet18() can be also used here for training", "\n", "    ", "if", "args", ".", "loss", "==", "'alp'", "or", "args", ".", "loss", "==", "'trades'", "or", "args", ".", "loss", "==", "'pgd'", ":", "\n", "        ", "print", "(", "\"normalize False\"", ")", "\n", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"normalize True\"", ")", "\n", "model", "=", "nets", "[", "args", ".", "model", "]", "(", "use_FNandWN", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "bind_lip", "(", "model", ",", "norm", "=", "'1-norm'", ",", "verbose", "=", "False", ")", "\n", "\n", "recorder", "=", "Recorder", "(", "f'{name}'", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "# adjust learning rate for SGD", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "# adversarial training", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", "\n", "\n", "# evaluation on natural examples", "\n", "# print('==============')", "\n", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "recorder", ")", "\n", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", "\n", "# print('==============')", "\n", "\n", "# save checkpoint", "\n", "if", "(", "epoch", ">=", "args", ".", "start_freq", ")", "and", "(", "epoch", "%", "args", ".", "save_freq", "==", "0", ")", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}-epoch{epoch}.pt'", ")", ")", "\n", "\n", "", "recorder", ".", "step", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "", "recorder", ".", "draw", "(", "'lip_sum'", ")", "\n", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "8", "/", "255", ",", "version", "=", "'standard'", ",", "verbose", "=", "False", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "# print(inputs.max(), inputs.min())", "\n", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "print", "(", "f'robust_accuracy: {robust_accuracy}'", ")", "\n", "break", "\n", "\n", "", "", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train": [[22, 50], ["model.train", "enumerate", "optimizer.zero_grad", "loss.backward", "model.add_lip_grad", "recorder.record", "recorder.record", "optimizer.step", "data.to", "target.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip_grad", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step"], ["def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# calculate robust loss", "\n", "loss", "=", "LOSS", "[", "args", ".", "loss", "]", "(", "model", "=", "model", ",", "\n", "x_natural", "=", "data", ",", "\n", "y", "=", "target", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "step_size", "=", "args", ".", "step_size", ",", "\n", "epsilon", "=", "args", ".", "epsilon", ",", "\n", "perturb_steps", "=", "args", ".", "num_steps", ",", "\n", "beta", "=", "args", ".", "beta", ",", "\n", "loss", "=", "args", ".", "loss", ",", "\n", "distance", "=", "args", ".", "distance", ",", "\n", "m", "=", "args", ".", "m", ",", "\n", "s", "=", "args", ".", "s", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "lipc", ",", "all_lip", "=", "model", ".", "add_lip_grad", "(", ")", "\n", "\n", "recorder", ".", "record", "(", "'lip_sum'", ",", "lipc", ")", "\n", "recorder", ".", "record", "(", "'lip'", ",", "all_lip", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_train": [[58, 79], ["model.eval", "len", "print", "recorder.record", "recorder.record_train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "", "def", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "train_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "train_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "train_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "train_loss", "/=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "print", "(", "'Training: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "train_loss", ",", "correct", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", ")", ",", "end", "=", "' | '", ")", "\n", "training_accuracy", "=", "correct", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'train_acc'", ",", "training_accuracy", ")", "\n", "recorder", ".", "record_train", "(", "train_loss", ")", "\n", "\n", "return", "train_loss", ",", "training_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_test": [[81, 103], ["model.eval", "len", "print", "recorder.record", "recorder.record_test", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.cross_entropy().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.cross_entropy", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record"], ["", "def", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "cross_entropy", "(", "output", ",", "target", ",", "size_average", "=", "False", ")", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "print", "(", "'Test: loss: {:.4f}, Acc: {}/{} ({:.0f}%)'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n", "test_accuracy", "=", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "recorder", ".", "record", "(", "'test_acc'", ",", "test_accuracy", ")", "\n", "recorder", ".", "record_test", "(", "test_loss", ")", "\n", "\n", "return", "test_loss", ",", "test_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate": [[105, 116], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "epoch", ">=", "75", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.1", "\n", "", "if", "epoch", ">=", "90", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.01", "\n", "", "if", "epoch", ">=", "100", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "*", "0.001", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.main": [[118, 182], ["lip.add_lip.bind_lip", "lip.recorder.Recorder", "torch.SGD", "range", "torch.save", "torch.save", "torch.save", "torch.save", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw_many", "lip.recorder.Recorder.draw", "lip.recorder.Recorder.draw", "auto_attack.autoattack.AutoAttack", "model.eval", "lip.recorder.Recorder.record", "print", "print", "model.parameters", "print", "train_adv_cifar10_nd.adjust_learning_rate", "train_adv_cifar10_nd.train", "train_adv_cifar10_nd.eval_train", "train_adv_cifar10_nd.eval_test", "lip.recorder.Recorder.step", "model.state_dict", "os.path.join", "open", "pickle.dump", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "open", "pickle.dump", "torch.save", "torch.save", "torch.save", "torch.save", "auto_attack.autoattack.AutoAttack.run_standard_evaluation", "print", "model.state_dict", "os.path.join", "inputs.to", "targets.to"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.adjust_learning_rate", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_train", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.eval_test", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation"], ["", "", "def", "main", "(", ")", ":", "\n", "# init model, ResNet18() can be also used here for training", "\n", "    ", "if", "args", ".", "loss", "==", "'alp'", "or", "args", ".", "loss", "==", "'trades'", "or", "args", ".", "loss", "==", "'pgd'", ":", "\n", "        ", "print", "(", "\"normalize False\"", ")", "\n", "model", "=", "nets", "[", "args", ".", "model", "]", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"normalize True\"", ")", "\n", "model", "=", "nets", "[", "args", ".", "model", "]", "(", "use_FNandWN", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "bind_lip", "(", "model", ",", "norm", "=", "'1-norm'", ",", "beta", "=", "args", ".", "norm_decay", ",", "verbose", "=", "False", ")", "\n", "\n", "recorder", "=", "Recorder", "(", "f'{name}'", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "0.", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "# adjust learning rate for SGD", "\n", "        ", "print", "(", "f'Epoch: {epoch:3d}'", ",", "end", "=", "'  '", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "# adversarial training", "\n", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "recorder", ",", "epoch", ")", "\n", "\n", "# evaluation on natural examples", "\n", "# print('==============')", "\n", "eval_train", "(", "model", ",", "device", ",", "train_loader", ",", "recorder", ")", "\n", "eval_test", "(", "model", ",", "device", ",", "test_loader", ",", "recorder", ")", "\n", "# print('==============')", "\n", "\n", "# save checkpoint", "\n", "if", "(", "epoch", ">=", "args", ".", "start_freq", ")", "and", "(", "epoch", "%", "args", ".", "save_freq", "==", "0", ")", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}-epoch{epoch}.pt'", ")", ")", "\n", "\n", "", "recorder", ".", "step", "(", ")", "\n", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "f'{name}.pt'", ")", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n", "", "recorder", ".", "draw", "(", "'lip_sum'", ")", "\n", "recorder", ".", "draw_many", "(", "'lip'", ")", "\n", "\n", "recorder", ".", "draw", "(", "'train_acc'", ")", "\n", "recorder", ".", "draw", "(", "'test_acc'", ")", "\n", "\n", "adversary", "=", "AutoAttack", "(", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", "8", "/", "255", ",", "version", "=", "'standard'", ",", "verbose", "=", "False", ")", "\n", "adversary", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", "]", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "to", "(", "device", ")", "\n", "# print(inputs.max(), inputs.min())", "\n", "\n", "x_adv", ",", "robust_accuracy", "=", "adversary", ".", "run_standard_evaluation", "(", "inputs", ",", "targets", ",", "bs", "=", "128", ")", "\n", "print", "(", "f'robust_accuracy: {robust_accuracy}'", ")", "\n", "break", "\n", "\n", "", "", "recorder", ".", "record", "(", "'robust_accuracy'", ",", "robust_accuracy", ")", "\n", "\n", "with", "open", "(", "f'{log_dir}/{name}_record.pkl'", ",", "'wb'", ")", "as", "file", ":", "\n", "        ", "pickle", ".", "dump", "(", "recorder", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.general_attack_cifar10.CIFAR10_C.__init__": [[35, 45], ["os.path.join", "os.path.join", "numpy.load", "numpy.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "name", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "assert", "name", "in", "corruptes", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'CIFAR-10-C'", ",", "name", "+", "'.npy'", ")", "\n", "lable_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'CIFAR-10-C'", ",", "'labels.npy'", ")", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "file_path", ")", "\n", "self", ".", "targets", "=", "np", ".", "load", "(", "lable_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.general_attack_cifar10.CIFAR10_C.__getitem__": [[46, 66], ["PIL.Image.fromarray", "general_attack_cifar10.CIFAR10_C.transform", "general_attack_cifar10.CIFAR10_C.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.general_attack_cifar10.CIFAR10_C.__len__": [[66, 68], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.general_attack_cifar10.eval_adv_test_general": [[76, 95], ["torchvision.transforms.Compose", "general_attack_cifar10.CIFAR10_C", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.eval", "tqdm.tqdm", "print", "enumerate", "model", "torchvision.transforms.ToTensor", "data.to", "target.long().to", "torch.autograd.Variable", "torch.autograd.Variable", "target.long", "model.data.max"], "function", ["None"], ["def", "eval_adv_test_general", "(", "model", ",", "device", ",", "name", ")", ":", "\n", "    ", "\"\"\"\n    evaluate model by white-box attack\n    \"\"\"", "\n", "# set up data loader", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "]", ")", "\n", "testset", "=", "CIFAR10_C", "(", "root", "=", "'../data'", ",", "name", "=", "name", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "general_acc_total", "=", "0", "\n", "for", "idx", ",", "(", "data", ",", "target", ")", "in", "tqdm", "(", "enumerate", "(", "test_loader", ")", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "X", ",", "y", "=", "Variable", "(", "data", ",", "requires_grad", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "out", "=", "model", "(", "X", ")", "\n", "acc_natural", "=", "(", "out", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", ".", "data", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "general_acc_total", "+=", "acc_natural", "\n", "", "print", "(", "'general_acc_total: '", ",", "general_acc_total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.general_attack_cifar10.main": [[96, 109], ["WideResNet().to.load_state_dict", "print", "print", "WideResNet().to", "print", "WideResNet().to", "torch.load", "torch.load", "torch.load", "torch.load", "general_attack_cifar10.eval_adv_test_general", "WideResNet", "WideResNet"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.general_attack_cifar10.eval_adv_test_general"], ["", "def", "main", "(", ")", ":", "\n", "# general attack", "\n", "    ", "if", "args", ".", "loss", "==", "'trades'", "or", "args", ".", "loss", "==", "'pgd'", "or", "args", ".", "loss", "==", "'alp'", ":", "\n", "        ", "print", "(", "\"normalize False\"", ")", "\n", "model", "=", "WideResNet", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"normalize True\"", ")", "\n", "model", "=", "WideResNet", "(", "use_FNandWN", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "model_path", ")", ")", "\n", "\n", "print", "(", "'====== test general ====='", ")", "\n", "for", "name", "in", "corruptes", ":", "\n", "        ", "eval_adv_test_general", "(", "model", ",", "device", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.pgd_attack_cifar10._pgd_whitebox": [[45, 73], ["model", "torch.autograd.Variable", "range", "print", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.FloatTensor().uniform_().to", "torch.autograd.Variable", "torch.SGD", "optim.SGD.zero_grad", "loss.backward", "torch.autograd.Variable", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.autograd.Variable", "torch.autograd.Variable", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.autograd.Variable.grad.data.sign", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.FloatTensor().uniform_", "torch.CrossEntropyLoss", "model", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "model.data.max", "model().data.max", "model"], "function", ["None"], ["def", "_pgd_whitebox", "(", "model", ",", "\n", "X", ",", "\n", "y", ",", "\n", "epsilon", "=", "args", ".", "epsilon", ",", "\n", "num_steps", "=", "args", ".", "num_steps", ",", "\n", "step_size", "=", "args", ".", "step_size", ")", ":", "\n", "    ", "out", "=", "model", "(", "X", ")", "\n", "err", "=", "(", "out", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "!=", "y", ".", "data", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "X_pgd", "=", "Variable", "(", "X", ".", "data", ",", "requires_grad", "=", "True", ")", "\n", "if", "args", ".", "random", ":", "\n", "        ", "random_noise", "=", "torch", ".", "FloatTensor", "(", "*", "X_pgd", ".", "shape", ")", ".", "uniform_", "(", "-", "epsilon", ",", "epsilon", ")", ".", "to", "(", "device", ")", "\n", "X_pgd", "=", "Variable", "(", "X_pgd", ".", "data", "+", "random_noise", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "opt", "=", "optim", ".", "SGD", "(", "[", "X_pgd", "]", ",", "lr", "=", "1e-3", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "model", "(", "X_pgd", ")", ",", "y", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "eta", "=", "step_size", "*", "X_pgd", ".", "grad", ".", "data", ".", "sign", "(", ")", "\n", "X_pgd", "=", "Variable", "(", "X_pgd", ".", "data", "+", "eta", ",", "requires_grad", "=", "True", ")", "\n", "eta", "=", "torch", ".", "clamp", "(", "X_pgd", ".", "data", "-", "X", ".", "data", ",", "-", "epsilon", ",", "epsilon", ")", "\n", "X_pgd", "=", "Variable", "(", "X", ".", "data", "+", "eta", ",", "requires_grad", "=", "True", ")", "\n", "X_pgd", "=", "Variable", "(", "torch", ".", "clamp", "(", "X_pgd", ",", "0", ",", "1.0", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "err_pgd", "=", "(", "model", "(", "X_pgd", ")", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", "!=", "y", ".", "data", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "print", "(", "'err pgd (white-box): '", ",", "err_pgd", ")", "\n", "return", "err", ",", "err_pgd", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.pgd_attack_cifar10.eval_adv_test_whitebox": [[75, 93], ["model.eval", "enumerate", "print", "print", "pgd_attack_cifar10._pgd_whitebox", "data.to", "target.to", "torch.autograd.Variable", "torch.autograd.Variable"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.pgd_attack_cifar10._pgd_whitebox"], ["", "def", "eval_adv_test_whitebox", "(", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "\"\"\"\n    evaluate model by white-box attack\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "robust_err_total", "=", "0", "\n", "natural_err_total", "=", "0", "\n", "\n", "for", "idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "#print(\"{}/{}\".format(idx, len(test_loader)))", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "# pgd attack", "\n", "X", ",", "y", "=", "Variable", "(", "data", ",", "requires_grad", "=", "True", ")", ",", "Variable", "(", "target", ")", "\n", "err_natural", ",", "err_robust", "=", "_pgd_whitebox", "(", "model", ",", "X", ",", "y", ")", "\n", "robust_err_total", "+=", "err_robust", "\n", "natural_err_total", "+=", "err_natural", "\n", "", "print", "(", "'natural_err_total: '", ",", "natural_err_total", ")", "\n", "print", "(", "'robust_err_total: '", ",", "robust_err_total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.pgd_attack_cifar10.main": [[95, 107], ["print", "WideResNet().to.load_state_dict", "pgd_attack_cifar10.eval_adv_test_whitebox", "print", "WideResNet().to", "print", "WideResNet().to", "torch.load", "torch.load", "torch.load", "torch.load", "WideResNet", "WideResNet"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.pgd_attack_cifar10.eval_adv_test_whitebox"], ["", "def", "main", "(", ")", ":", "\n", "# white-box attack", "\n", "    ", "print", "(", "'pgd white-box attack'", ")", "\n", "if", "args", ".", "loss", "==", "'trades'", "or", "args", ".", "loss", "==", "'pgd'", "or", "args", ".", "loss", "==", "'alp'", ":", "\n", "        ", "print", "(", "\"normalize False\"", ")", "\n", "model", "=", "WideResNet", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"normalize True\"", ")", "\n", "model", "=", "WideResNet", "(", "use_FNandWN", "=", "True", ")", ".", "to", "(", "device", ")", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "args", ".", "model_path", ")", ")", "\n", "\n", "eval_adv_test_whitebox", "(", "model", ",", "device", ",", "test_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.losses.trades_loss": [[7, 64], ["model.eval", "len", "model.train", "torch.autograd.Variable", "optimizer.zero_grad", "model", "model", "torch.KLDivLoss", "x_natural.detach", "range", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cross_entropy", "torch.KLDivLoss", "he.HELoss", "RuntimeError", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.clamp.requires_grad_", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "nn.KLDivLoss.", "he.HELoss.", "RuntimeError", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.clamp.detach", "torch.max", "torch.max", "torch.max", "torch.log_softmax", "torch.softmax", "nn.KLDivLoss.", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "nn.KLDivLoss.", "torch.sign", "torch.sign", "torch.sign", "torch.log_softmax", "torch.softmax", "torch.log_softmax", "torch.softmax", "nn.KLDivLoss.", "RuntimeError", "grad.detach", "torch.randn", "torch.randn", "torch.randn", "model", "model", "torch.log_softmax", "torch.softmax", "model", "model"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train"], ["def", "trades_loss", "(", "model", ",", "x_natural", ",", "y", ",", "optimizer", ",", "step_size", "=", "0.003", ",", "epsilon", "=", "0.031", ",", "\n", "perturb_steps", "=", "10", ",", "beta", "=", "1.0", ",", "distance", "=", "'l_inf'", ",", "loss", "=", "'trades'", ",", "\n", "m", "=", "None", ",", "s", "=", "None", ")", ":", "\n", "# define KL-loss", "\n", "    ", "if", "loss", "==", "'trades'", ":", "\n", "        ", "criterion_loss", "=", "nn", ".", "KLDivLoss", "(", "size_average", "=", "False", ")", "\n", "", "elif", "loss", "==", "'trades_he'", ":", "\n", "        ", "criterion_loss", "=", "nn", ".", "KLDivLoss", "(", "size_average", "=", "False", ")", "\n", "natural_loss", "=", "HELoss", "(", "s", "=", "s", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'No exsiting current loss'", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "batch_size", "=", "len", "(", "x_natural", ")", "\n", "# generate adversarial example", "\n", "x_adv", "=", "x_natural", ".", "detach", "(", ")", "+", "0.001", "*", "torch", ".", "randn", "(", "x_natural", ".", "shape", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "\n", "if", "distance", "==", "'l_inf'", ":", "\n", "        ", "for", "_", "in", "range", "(", "perturb_steps", ")", ":", "\n", "            ", "x_adv", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "if", "loss", "==", "'trades'", ":", "\n", "                    ", "loss_c", "=", "criterion_loss", "(", "F", ".", "log_softmax", "(", "model", "(", "x_adv", ")", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "model", "(", "x_natural", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "elif", "loss", "==", "'trades_he'", ":", "\n", "                    ", "loss_c", "=", "criterion_loss", "(", "F", ".", "log_softmax", "(", "s", "*", "model", "(", "x_adv", ")", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "s", "*", "model", "(", "x_natural", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'A error occurred'", ")", "\n", "\n", "", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss_c", ",", "[", "x_adv", "]", ")", "[", "0", "]", "\n", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "+", "step_size", "*", "torch", ".", "sign", "(", "grad", ".", "detach", "(", ")", ")", "\n", "x_adv", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", ",", "x_natural", "-", "epsilon", ")", ",", "x_natural", "+", "epsilon", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "", "else", ":", "\n", "        ", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "x_adv", "=", "Variable", "(", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "# zero gradient", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# calculate robust loss", "\n", "logits", "=", "model", "(", "x_natural", ")", "\n", "logits_adv", "=", "model", "(", "x_adv", ")", "\n", "\n", "if", "loss", "==", "'trades'", ":", "\n", "        ", "loss_natural", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "loss_robust", "=", "(", "1.0", "/", "batch_size", ")", "*", "criterion_loss", "(", "F", ".", "log_softmax", "(", "logits_adv", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", ")", "\n", "loss", "=", "loss_natural", "+", "beta", "*", "loss_robust", "\n", "", "elif", "loss", "==", "'trades_he'", ":", "\n", "        ", "loss_natural", "=", "natural_loss", "(", "logits", ",", "y", ",", "cm", "=", "m", ")", "\n", "loss_robust", "=", "(", "1.0", "/", "batch_size", ")", "*", "criterion_loss", "(", "F", ".", "log_softmax", "(", "s", "*", "logits_adv", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "s", "*", "logits", ",", "dim", "=", "1", ")", ")", "\n", "loss", "=", "loss_natural", "+", "beta", "*", "loss_robust", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'A error occurred'", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.losses.pgd_loss": [[65, 110], ["model.eval", "len", "model.train", "torch.autograd.Variable", "optimizer.zero_grad", "x_natural.detach", "range", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cross_entropy", "he.HELoss", "RuntimeError", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.clamp.requires_grad_", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "model", "he.HELoss.", "RuntimeError", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.clamp.detach", "torch.max", "torch.max", "torch.max", "model", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.cross_entropy", "torch.sign", "torch.sign", "torch.sign", "model", "he.HELoss.", "RuntimeError", "grad.detach", "torch.randn", "torch.randn", "torch.randn", "model"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train"], ["", "def", "pgd_loss", "(", "model", ",", "x_natural", ",", "y", ",", "optimizer", ",", "step_size", "=", "0.003", ",", "epsilon", "=", "0.031", ",", "\n", "perturb_steps", "=", "10", ",", "beta", "=", "1.0", ",", "distance", "=", "'l_inf'", ",", "loss", "=", "'pgd'", ",", "\n", "m", "=", "None", ",", "s", "=", "None", ")", ":", "\n", "# define PGD-loss", "\n", "    ", "if", "loss", "==", "'pgd'", ":", "\n", "        ", "criterion_loss", "=", "None", "\n", "", "elif", "loss", "==", "'pgd_he'", ":", "\n", "        ", "criterion_loss", "=", "HELoss", "(", "s", "=", "s", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'No exsiting current loss'", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "batch_size", "=", "len", "(", "x_natural", ")", "\n", "# generate adversarial example", "\n", "x_adv", "=", "x_natural", ".", "detach", "(", ")", "+", "0.001", "*", "torch", ".", "randn", "(", "x_natural", ".", "shape", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "\n", "if", "distance", "==", "'l_inf'", ":", "\n", "        ", "for", "_", "in", "range", "(", "perturb_steps", ")", ":", "\n", "            ", "x_adv", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "if", "loss", "==", "'pgd'", ":", "\n", "                    ", "loss_c", "=", "F", ".", "cross_entropy", "(", "model", "(", "x_adv", ")", ",", "y", ")", "\n", "", "elif", "loss", "==", "'pgd_he'", ":", "\n", "                    ", "loss_c", "=", "criterion_loss", "(", "model", "(", "x_adv", ")", ",", "y", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'A error occurred'", ")", "\n", "\n", "", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss_c", ",", "[", "x_adv", "]", ")", "[", "0", "]", "\n", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "+", "step_size", "*", "torch", ".", "sign", "(", "grad", ".", "detach", "(", ")", ")", "\n", "x_adv", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", ",", "x_natural", "-", "epsilon", ")", ",", "x_natural", "+", "epsilon", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "", "else", ":", "\n", "        ", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "x_adv", "=", "Variable", "(", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "# zero gradient", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "loss", "==", "'pgd'", ":", "\n", "        ", "loss", "=", "F", ".", "cross_entropy", "(", "model", "(", "x_adv", ")", ",", "y", ")", "\n", "", "elif", "loss", "==", "'pgd_he'", ":", "\n", "        ", "loss", "=", "criterion_loss", "(", "model", "(", "x_adv", ")", ",", "y", ",", "cm", "=", "m", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'A error occurred'", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.losses.alp_loss": [[111, 162], ["model.eval", "len", "model.train", "torch.autograd.Variable", "optimizer.zero_grad", "model", "model", "x_natural.detach", "range", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.mse_loss", "he.HELoss", "RuntimeError", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.randn().cuda().detach", "torch.clamp.requires_grad_", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.mse_loss", "RuntimeError", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.clamp.detach", "torch.max", "torch.max", "torch.max", "torch.cross_entropy", "torch.cross_entropy", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.cross_entropy", "torch.sign", "torch.sign", "torch.sign", "he.HELoss.", "he.HELoss.", "model", "he.HELoss.", "RuntimeError", "grad.detach", "torch.randn", "torch.randn", "torch.randn", "model"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.AT.train_adv_cifar10_nd.train"], ["", "def", "alp_loss", "(", "model", ",", "x_natural", ",", "y", ",", "optimizer", ",", "step_size", "=", "0.003", ",", "epsilon", "=", "0.031", ",", "perturb_steps", "=", "10", ",", "\n", "beta", "=", "1.0", ",", "distance", "=", "'l_inf'", ",", "loss", "=", "'alp'", ",", "m", "=", "None", ",", "s", "=", "None", ")", ":", "\n", "# define KL-loss", "\n", "    ", "if", "loss", "==", "'alp'", ":", "\n", "        ", "criterion_loss", "=", "None", "\n", "", "elif", "loss", "==", "'alp_he'", ":", "\n", "        ", "criterion_loss", "=", "HELoss", "(", "s", "=", "s", ")", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'No exsiting current loss'", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "batch_size", "=", "len", "(", "x_natural", ")", "\n", "# generate adversarial example", "\n", "x_adv", "=", "x_natural", ".", "detach", "(", ")", "+", "0.001", "*", "torch", ".", "randn", "(", "x_natural", ".", "shape", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", "\n", "if", "distance", "==", "'l_inf'", ":", "\n", "        ", "for", "_", "in", "range", "(", "perturb_steps", ")", ":", "\n", "            ", "x_adv", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "if", "loss", "==", "'alp'", ":", "\n", "                    ", "loss_c", "=", "F", ".", "cross_entropy", "(", "model", "(", "x_adv", ")", ",", "y", ")", "\n", "", "elif", "loss", "==", "'alp_he'", ":", "\n", "                    ", "loss_c", "=", "criterion_loss", "(", "model", "(", "x_adv", ")", ",", "y", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'A error occurred'", ")", "\n", "\n", "", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss_c", ",", "[", "x_adv", "]", ")", "[", "0", "]", "\n", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "+", "step_size", "*", "torch", ".", "sign", "(", "grad", ".", "detach", "(", ")", ")", "\n", "x_adv", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", ",", "x_natural", "-", "epsilon", ")", ",", "x_natural", "+", "epsilon", ")", "\n", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "", "else", ":", "\n", "        ", "x_adv", "=", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "x_adv", "=", "Variable", "(", "torch", ".", "clamp", "(", "x_adv", ",", "0.0", ",", "1.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "# zero gradient", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# calculate robust loss", "\n", "logits", "=", "model", "(", "x_natural", ")", "\n", "logits_adv", "=", "model", "(", "x_adv", ")", "\n", "\n", "if", "loss", "==", "'alp'", ":", "\n", "        ", "loss_robust", "=", "0.5", "*", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "+", "0.5", "*", "F", ".", "cross_entropy", "(", "logits_adv", ",", "y", ")", "\n", "loss_alp", "=", "F", ".", "mse_loss", "(", "logits", ",", "logits_adv", ")", "\n", "loss", "=", "loss_robust", "+", "beta", "*", "loss_alp", "\n", "", "elif", "loss", "==", "'alp_he'", ":", "\n", "        ", "loss_robust", "=", "0.5", "*", "criterion_loss", "(", "logits", ",", "y", ",", "cm", "=", "m", ")", "+", "0.5", "*", "criterion_loss", "(", "logits_adv", ",", "y", ",", "cm", "=", "m", ")", "\n", "loss_alp", "=", "F", ".", "mse_loss", "(", "logits", ",", "logits_adv", ")", "\n", "loss", "=", "loss_robust", "+", "beta", "*", "loss_alp", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "'A error occurred'", ")", "\n", "", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind_lip": [[15, 36], ["model.modules", "add_lip.bind", "add_lip.bind", "add_lip.bind", "add_lip.bind", "add_lip.bind", "add_lip.is_conv2d", "add_lip.add_lip", "add_lip.add_lip_linear", "print", "classname.find", "add_lip.add_lip_bn", "print"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.bind", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.bind", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.bind", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.bind", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.bind", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.is_conv2d", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip_linear", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip_bn"], ["def", "bind_lip", "(", "model", ",", "norm", "=", "NORM", ",", "mmt", "=", "MMT", ",", "beta", "=", "BETA", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "is_conv2d", "(", "m", ")", ":", "\n", "            ", "add_lip", "(", "m", ",", "norm", ",", "mmt", "=", "mmt", ",", "beta", "=", "beta", ")", "\n", "m", ".", "_verbose_", "=", "verbose", "\n", "", "elif", "classname", "==", "'Linear'", ":", "\n", "            ", "add_lip_linear", "(", "m", ",", "norm", ",", "mmt", "=", "mmt", ",", "beta", "=", "beta", ")", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "f'Added norm tracking to {m}'", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "add_lip_bn", "(", "m", ",", "norm", ",", "mmt", "=", "mmt", ",", "beta", "=", "beta", ")", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "f'Added norm tracking to {m}'", ")", "\n", "\n", "# bind(model, config_lip)", "\n", "", "", "", "bind", "(", "model", ",", "add_lip_grad", ")", "\n", "bind", "(", "model", ",", "project", ")", "\n", "bind", "(", "model", ",", "project_bn", ")", "\n", "bind", "(", "model", ",", "calc_lip", ")", "\n", "bind", "(", "model", ",", "lip_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip_grad": [[46, 64], ["add_lip..modules", "add_lip.is_conv2d", "m.lip", "all_lip.append", "classname.find", "add_lip.check_conv", "m.update_grad", "add_lip.is_conv2d", "m.update_grad", "m.update_grad", "classname.find"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.is_conv2d", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.check_conv", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.update_grad", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.is_conv2d", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.update_grad", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.update_grad"], ["def", "add_lip_grad", "(", "self", ",", "linear", "=", "True", ",", "conv", "=", "True", ",", "bn", "=", "False", ")", ":", "\n", "    ", "lipc", "=", "0", "\n", "all_lip", "=", "[", "]", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", "==", "'Linear'", "or", "is_conv2d", "(", "m", ")", "or", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "not", "check_conv", "(", "m", ")", ":", "\n", "                ", "continue", "\n", "", "a", "=", "m", ".", "lip", "(", ")", "\n", "lipc", "+=", "a", "\n", "all_lip", ".", "append", "(", "a", ")", "\n", "if", "linear", "and", "classname", "==", "'Linear'", ":", "\n", "                ", "m", ".", "update_grad", "(", ")", "\n", "", "if", "conv", "and", "is_conv2d", "(", "m", ")", ":", "\n", "                ", "m", ".", "update_grad", "(", ")", "\n", "", "if", "bn", "and", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "                ", "m", ".", "update_grad", "(", ")", "\n", "", "", "", "return", "lipc", ",", "all_lip", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.project": [[66, 79], ["add_lip..modules", "add_lip.is_conv2d", "m.lip", "all_lip.append", "m.proj", "classname.find", "add_lip.check_conv"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.is_conv2d", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.proj", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.check_conv"], ["", "def", "project", "(", "self", ",", "proj_to", "=", "10", ")", ":", "\n", "    ", "lipc", "=", "0", "\n", "all_lip", "=", "[", "]", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", "==", "'Linear'", "or", "is_conv2d", "(", "m", ")", "or", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "not", "check_conv", "(", "m", ")", ":", "\n", "                ", "continue", "\n", "", "a", "=", "m", ".", "lip", "(", ")", "\n", "lipc", "+=", "a", "\n", "all_lip", ".", "append", "(", "a", ")", "\n", "m", ".", "proj", "(", "proj_to", ")", "\n", "", "", "return", "lipc", ",", "all_lip", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.project_bn": [[81, 92], ["add_lip..modules", "classname.find", "m.lip", "all_lip.append", "m.proj"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.proj"], ["", "def", "project_bn", "(", "self", ",", "proj_to", "=", "5", ")", ":", "\n", "    ", "lipc", "=", "0", "\n", "all_lip", "=", "[", "]", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "a", "=", "m", ".", "lip", "(", ")", "\n", "lipc", "+=", "a", "\n", "all_lip", ".", "append", "(", "a", ")", "\n", "m", ".", "proj", "(", "proj_to", ")", "\n", "", "", "return", "lipc", ",", "all_lip", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip": [[94, 106], ["add_lip..modules", "add_lip.is_conv2d", "m.lip", "all_lip.append", "classname.find", "add_lip.check_conv"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.is_conv2d", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.check_conv"], ["", "def", "calc_lip", "(", "self", ")", ":", "\n", "    ", "lipc", "=", "0", "\n", "all_lip", "=", "[", "]", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", "==", "'Linear'", "or", "is_conv2d", "(", "m", ")", "or", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "not", "check_conv", "(", "m", ")", ":", "\n", "                ", "continue", "\n", "", "a", "=", "m", ".", "lip", "(", ")", "\n", "lipc", "+=", "a", "\n", "all_lip", ".", "append", "(", "a", ")", "\n", "", "", "return", "lipc", ",", "all_lip", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip_param": [[108, 122], ["add_lip..modules", "add_lip.is_conv2d", "classname.find", "type"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.is_conv2d"], ["", "def", "lip_param", "(", "self", ",", "mmt", "=", "MMT", ",", "alpha", "=", "ALPHA", ",", "beta", "=", "BETA", ",", "factor", "=", "None", ")", ":", "\n", "    ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", "==", "'Linear'", "or", "is_conv2d", "(", "m", ")", "or", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "factor", "is", "not", "None", ":", "\n", "                ", "if", "type", "(", "factor", ")", "is", "not", "tuple", ":", "\n", "                    ", "factor", "=", "(", "factor", ",", "factor", ",", "factor", ")", "\n", "", "m", ".", "mmt", "*=", "factor", "[", "0", "]", "\n", "m", ".", "alpha", "*=", "factor", "[", "1", "]", "\n", "m", ".", "beta", "*=", "factor", "[", "2", "]", "\n", "", "else", ":", "\n", "                ", "m", ".", "mmt", "=", "mmt", "\n", "m", ".", "alpha", "=", "alpha", "\n", "m", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip": [[124, 149], ["torch.zeros_like", "add_lip.bind", "add_lip.bind"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.bind", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.bind"], ["", "", "", "", "def", "add_lip", "(", "conv", ",", "norm", ",", "mmt", "=", "MMT", ",", "alpha", "=", "ALPHA", ",", "beta", "=", "BETA", ")", ":", "\n", "# s = conv.stride", "\n", "# p = conv.padding", "\n", "# k = conv.kernel_size", "\n", "# d = conv.dilation", "\n", "\n", "    ", "conv", ".", "mod", "=", "None", "\n", "conv", ".", "mod_idx", "=", "None", "\n", "conv", ".", "chn_idx", "=", "None", "\n", "conv", ".", "norm", "=", "norm", "\n", "conv", ".", "mmt", "=", "mmt", "\n", "conv", ".", "alpha", "=", "alpha", "\n", "conv", ".", "beta", "=", "beta", "\n", "\n", "conv", ".", "grad_bound", "=", "torch", ".", "zeros_like", "(", "conv", ".", "weight", ",", "device", "=", "conv", ".", "weight", ".", "device", ")", "\n", "# conv.register_buffer('grad_bound', grad_bound)", "\n", "# conv.weight.grad_bound = conv.grad_bound  # for communication with optimizer", "\n", "\n", "conv", ".", "_original_forward", "=", "conv", ".", "forward", "\n", "bind", "(", "conv", ",", "forward", ")", "\n", "\n", "func", "=", "[", "create_view", ",", "lip", ",", "lip_1norm", ",", "lip_1norm_all_idx", ",", "lip_1norm_single_idx", ",", "proj", ",", "update_grad", "]", "\n", "\n", "for", "fun", "in", "func", ":", "\n", "        ", "bind", "(", "conv", ",", "fun", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.check_size": [[151, 154], ["math.ceil"], "function", ["None"], ["", "", "def", "check_size", "(", "sz", ",", "s", ",", "k", ",", "p", ")", ":", "\n", "    ", "c", "=", "math", ".", "ceil", "(", "p", "/", "s", ")", "\n", "assert", "k", "+", "c", "*", "s", "-", "p", "<=", "sz", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.forward": [[156, 197], ["x.size", "add_lip.._original_forward", "add_lip.check_size", "add_lip.check_size", "partition_kernel.partition", "add_lip..create_view", "len", "sum", "print", "print", "len", "len", "torch.cuda.LongTensor", "torch.LongTensor", "len"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.check_size", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.check_size", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.partition_kernel.partition", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.create_view"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "if", "self", ".", "mod", "is", "None", "and", "self", ".", "is_conv2d", ":", "\n", "        ", "self", ".", "h_w", "=", "(", "h", ",", "w", ")", "\n", "s", "=", "self", ".", "stride", "\n", "p", "=", "self", ".", "padding", "\n", "k", "=", "self", ".", "kernel_size", "\n", "try", ":", "\n", "            ", "check_size", "(", "h", ",", "s", "[", "0", "]", ",", "k", "[", "0", "]", ",", "p", "[", "0", "]", ")", "\n", "check_size", "(", "w", ",", "s", "[", "1", "]", ",", "k", "[", "1", "]", ",", "p", "[", "1", "]", ")", "\n", "# self.is_conv2d = True", "\n", "\n", "idx_set", "=", "partition", "(", "h", ",", "w", ",", "k", ",", "s", ",", "p", ")", "\n", "\n", "self", ".", "all_idx_in1mod", "=", "False", "\n", "self", ".", "single_idx_mod", "=", "False", "\n", "if", "len", "(", "idx_set", ")", "==", "1", "and", "len", "(", "idx_set", "[", "0", "]", ")", "==", "k", "[", "0", "]", "*", "k", "[", "1", "]", ":", "\n", "                ", "self", ".", "all_idx_in1mod", "=", "True", "\n", "", "if", "len", "(", "idx_set", ")", "==", "k", "[", "0", "]", "*", "k", "[", "1", "]", "==", "sum", "(", "[", "len", "(", "c", ")", "for", "c", "in", "idx_set", "]", ")", ":", "\n", "                ", "self", ".", "single_idx_mod", "=", "True", "\n", "\n", "", "if", "x", ".", "is_cuda", ":", "\n", "                ", "self", ".", "mod", "=", "[", "torch", ".", "cuda", ".", "LongTensor", "(", "idx", ")", "for", "idx", "in", "idx_set", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "mod", "=", "[", "torch", ".", "LongTensor", "(", "idx", ")", "for", "idx", "in", "idx_set", "]", "\n", "# for i, m in enumerate(self.mod):", "\n", "#     self.register_buffer(f'mod{i}', m)", "\n", "\n", "", "self", ".", "create_view", "(", ")", "\n", "\n", "if", "self", ".", "_verbose_", ":", "\n", "                ", "print", "(", "f'Added norm tracking to {self}'", ")", "\n", "\n", "", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "print", "(", "f'Skip {self} because the input of size {(h, w)} cannot be covered by the kernel.'", ")", "\n", "self", ".", "is_conv2d", "=", "False", "\n", "\n", "", "", "if", "self", ".", "is_conv2d", ":", "\n", "        ", "assert", "self", ".", "h_w", "==", "(", "h", ",", "w", ")", "# make sure height and width of the input remain unchanged", "\n", "\n", "", "return", "self", ".", "_original_forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.create_view": [[199, 203], ["add_lip..weight.view", "add_lip..grad_bound.view"], "function", ["None"], ["", "def", "create_view", "(", "self", ")", ":", "\n", "    ", "if", "(", "self", ".", "norm", "==", "\"1-norm\"", "and", "not", "self", ".", "all_idx_in1mod", ")", "or", "self", ".", "single_idx_mod", ":", "\n", "        ", "self", ".", "weight3d", "=", "self", ".", "weight", ".", "view", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "self", ".", "grad_bound3d", "=", "self", ".", "grad_bound", ".", "view", "(", "self", ".", "out_channels", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip": [[205, 220], ["torch.no_grad", "add_lip..lip_bound.item", "add_lip..lip_1norm_all_idx", "torch.max", "add_lip..lip_1norm_single_idx", "add_lip..lip_1norm", "add_lip..weight.abs().sum", "add_lip..weight.abs"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip_1norm_all_idx", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip_1norm_single_idx", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip_1norm"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "lip", "(", "self", ")", ":", "\n", "\n", "    ", "if", "self", ".", "norm", "==", "\"1-norm\"", ":", "\n", "        ", "if", "self", ".", "all_idx_in1mod", ":", "\n", "            ", "return", "self", ".", "lip_1norm_all_idx", "(", ")", "\n", "", "elif", "self", ".", "single_idx_mod", ":", "\n", "            ", "return", "self", ".", "lip_1norm_single_idx", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "lip_1norm", "(", ")", "\n", "# elif self.norm == \"2-norm\":", "\n", "#     self.lip_bound = torch.sqrt(self.weight.square().sum() * self.n_out_el)", "\n", "", "", "elif", "self", ".", "norm", "==", "\"inf-norm\"", ":", "\n", "        ", "self", ".", "lip_bound", ",", "self", ".", "lip_idx", "=", "torch", ".", "max", "(", "self", ".", "weight", ".", "abs", "(", ")", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", ",", "dim", "=", "0", ")", "\n", "", "return", "self", ".", "lip_bound", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip_1norm": [[222, 244], ["torch.abs", "lipc.item", "torch.sum", "torch.max", "warnings.warn"], "function", ["None"], ["", "def", "lip_1norm", "(", "self", ")", ":", "\n", "    ", "a", "=", "torch", ".", "abs", "(", "self", ".", "weight3d", ")", "\n", "lipc", "=", "-", "1", "\n", "for", "mode", "in", "self", ".", "mod", ":", "\n", "        ", "tmp", "=", "a", "[", ":", ",", ":", ",", "mode", "]", "# torch.index_select(a, dim=2, index=mode)", "\n", "tmp", "=", "torch", ".", "sum", "(", "tmp", ",", "dim", "=", "[", "0", ",", "2", "]", ")", "\n", "m", ",", "chn_idx", "=", "torch", ".", "max", "(", "tmp", ",", "dim", "=", "0", ")", "\n", "if", "m", ">", "lipc", ":", "\n", "            ", "lipc", "=", "m", "\n", "m_idx", "=", "mode", "\n", "c_idx", "=", "chn_idx", "\n", "\n", "", "", "if", "lipc", "==", "-", "1", ":", "# error occurs, probably due to NaN in the weight", "\n", "        ", "self", ".", "lip_bound", "=", "lipc", "\n", "warnings", ".", "warn", "(", "'An error occurs when computing norms, \\\n            probably due to NaN in the weight. May skip regularization.'", ")", "\n", "return", "lipc", "\n", "\n", "", "self", ".", "mod_idx", "=", "m_idx", "\n", "self", ".", "chn_idx", "=", "c_idx", "# index into in_channels", "\n", "self", ".", "lip_bound", "=", "lipc", "\n", "return", "lipc", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip_1norm_all_idx": [[246, 250], ["torch.sum", "torch.max", "add_lip..lip_bound.item", "add_lip..weight.abs"], "function", ["None"], ["", "def", "lip_1norm_all_idx", "(", "self", ")", ":", "\n", "    ", "a", "=", "torch", ".", "sum", "(", "self", ".", "weight", ".", "abs", "(", ")", ",", "dim", "=", "[", "0", ",", "2", ",", "3", "]", ")", "\n", "self", ".", "lip_bound", ",", "self", ".", "chn_idx", "=", "torch", ".", "max", "(", "a", ",", "dim", "=", "0", ")", "\n", "return", "self", ".", "lip_bound", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip_1norm_single_idx": [[252, 259], ["add_lip..weight3d.size", "torch.sum().flatten", "torch.max", "math.floor", "add_lip..lip_bound.item", "idx.item", "torch.sum", "idx.item", "add_lip..weight3d.abs"], "function", ["None"], ["", "def", "lip_1norm_single_idx", "(", "self", ")", ":", "\n", "    ", "_", ",", "in_c", ",", "kk", "=", "self", ".", "weight3d", ".", "size", "(", ")", "\n", "a", "=", "torch", ".", "sum", "(", "self", ".", "weight3d", ".", "abs", "(", ")", ",", "dim", "=", "0", ")", ".", "flatten", "(", ")", "# torch tensor is row-major", "\n", "self", ".", "lip_bound", ",", "idx", "=", "torch", ".", "max", "(", "a", ",", "dim", "=", "0", ")", "\n", "self", ".", "chn_idx", "=", "math", ".", "floor", "(", "idx", ".", "item", "(", ")", "/", "kk", ")", "\n", "self", ".", "mod_idx", "=", "idx", ".", "item", "(", ")", "%", "kk", "\n", "return", "self", ".", "lip_bound", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.proj": [[261, 275], ["torch.no_grad", "projection.proj_l1_ball", "projection.proj_l1_ball", "projection.proj_l1_ball"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.projection.proj_l1_ball", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.projection.proj_l1_ball", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.projection.proj_l1_ball"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "proj", "(", "self", ",", "proj_to", ")", ":", "\n", "    ", "if", "self", ".", "lip_bound", "<=", "proj_to", ":", "\n", "        ", "return", "\n", "", "if", "self", ".", "norm", "==", "\"1-norm\"", ":", "\n", "        ", "if", "self", ".", "all_idx_in1mod", ":", "\n", "            ", "y", "=", "self", ".", "weight", "[", ":", ",", "self", ".", "chn_idx", "]", "\n", "self", ".", "weight", "[", ":", ",", "self", ".", "chn_idx", "]", "=", "proj_l1_ball", "(", "y", ",", "proj_to", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "self", ".", "weight3d", "[", ":", ",", "self", ".", "chn_idx", ",", "self", ".", "mod_idx", "]", "\n", "self", ".", "weight3d", "[", ":", ",", "self", ".", "chn_idx", ",", "self", ".", "mod_idx", "]", "=", "proj_l1_ball", "(", "y", ",", "proj_to", ")", "\n", "", "", "else", ":", "\n", "        ", "y", "=", "self", ".", "weight", "[", "self", ".", "lip_idx", ",", ":", ",", ":", ",", ":", "]", "\n", "self", ".", "weight", "[", "self", ".", "lip_idx", ",", ":", ",", ":", ",", ":", "]", "=", "proj_l1_ball", "(", "y", ",", "proj_to", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.update_grad": [[277, 304], ["torch.no_grad", "add_lip..grad_bound.mul", "g.copy_", "g.sign_", "g.copy_", "g.sign_", "add_lip..weight3d[].sign_"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_grad", "(", "self", ")", ":", "\n", "\n", "    ", "if", "self", ".", "norm", "in", "[", "\"1-norm\"", ",", "\"inf-norm\"", "]", ":", "\n", "        ", "if", "self", ".", "lip_bound", "==", "-", "1", ":", "# skip due to error", "\n", "            ", "return", "\n", "", "self", ".", "grad_bound", "*=", "self", ".", "mmt", "\n", "\n", "", "if", "self", ".", "norm", "==", "\"1-norm\"", ":", "\n", "        ", "if", "self", ".", "all_idx_in1mod", ":", "\n", "            ", "g", "=", "self", ".", "grad_bound", "[", ":", ",", "self", ".", "chn_idx", "]", "\n", "g", ".", "copy_", "(", "self", ".", "weight", "[", ":", ",", "self", ".", "chn_idx", "]", ")", "\n", "g", ".", "sign_", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "grad_bound3d", "[", ":", ",", "self", ".", "chn_idx", ",", "self", ".", "mod_idx", "]", "=", "self", ".", "weight3d", "[", ":", ",", "self", ".", "chn_idx", ",", "self", ".", "mod_idx", "]", ".", "sign_", "(", ")", "\n", "# elif self.norm == \"2-norm\":", "\n", "#     scale = grad_wrt_self / self.lip_bound * self.n_out_el", "\n", "#     torch.mul(self.weight, scale, out=self.grad_bound)", "\n", "", "", "else", ":", "\n", "        ", "g", "=", "self", ".", "grad_bound", "[", "self", ".", "lip_idx", ",", ":", ",", ":", ",", ":", "]", "\n", "g", ".", "copy_", "(", "self", ".", "weight", "[", "self", ".", "lip_idx", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "g", ".", "sign_", "(", ")", "\n", "\n", "# weight_grad = self.weight.grad.data", "\n", "# coef = weight_grad.mul_(self.alpha).exp_().mul_(self.beta)", "\n", "\n", "", "self", ".", "weight", ".", "grad", ".", "data", "+=", "self", ".", "grad_bound", ".", "mul", "(", "self", ".", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip_linear": [[361, 376], ["torch.zeros_like", "zip", "add_lip.bind"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.bind"], ["def", "add_lip_linear", "(", "linear", ",", "norm", ",", "mmt", "=", "MMT", ",", "alpha", "=", "ALPHA", ",", "beta", "=", "BETA", ")", ":", "\n", "\n", "    ", "linear", ".", "norm", "=", "norm", "\n", "linear", ".", "mmt", "=", "mmt", "\n", "linear", ".", "alpha", "=", "alpha", "\n", "linear", ".", "beta", "=", "beta", "\n", "\n", "linear", ".", "grad_bound", "=", "torch", ".", "zeros_like", "(", "linear", ".", "weight", ",", "device", "=", "linear", ".", "weight", ".", "device", ")", "\n", "# linear.weight.grad_bound = linear.grad_bound  # for communication with optimizer", "\n", "\n", "func", "=", "[", "lip_linear", ",", "proj_linear", ",", "update_grad_linear", "]", "\n", "as_name", "=", "[", "'lip'", ",", "'proj'", ",", "'update_grad'", "]", "\n", "\n", "for", "fun", ",", "name", "in", "zip", "(", "func", ",", "as_name", ")", ":", "\n", "        ", "bind", "(", "linear", ",", "fun", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip_linear": [[378, 390], ["torch.no_grad", "add_lip..lip_bound.item", "torch.sum", "torch.max", "add_lip..weight.abs", "torch.sum", "torch.max", "add_lip..weight.abs"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "lip_linear", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "norm", "==", "\"1-norm\"", ":", "\n", "        ", "col_sum", "=", "torch", ".", "sum", "(", "self", ".", "weight", ".", "abs", "(", ")", ",", "dim", "=", "0", ")", "\n", "self", ".", "lip_bound", ",", "self", ".", "lip_idx", "=", "torch", ".", "max", "(", "col_sum", ",", "dim", "=", "0", ")", "\n", "# elif self.norm == \"2-norm\":", "\n", "#     tmp = torch.square(self.weight)", "\n", "#     self.lip_bound = tmp.sum().sqrt()", "\n", "", "elif", "self", ".", "norm", "==", "\"inf-norm\"", ":", "\n", "        ", "row_sum", "=", "torch", ".", "sum", "(", "self", ".", "weight", ".", "abs", "(", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "lip_bound", ",", "self", ".", "lip_idx", "=", "torch", ".", "max", "(", "row_sum", ",", "dim", "=", "0", ")", "\n", "", "return", "self", ".", "lip_bound", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.proj_linear": [[392, 402], ["torch.no_grad", "projection.proj_l1_ball", "projection.proj_l1_ball"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.projection.proj_l1_ball", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.projection.proj_l1_ball"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "proj_linear", "(", "self", ",", "proj_to", ")", ":", "\n", "    ", "if", "self", ".", "lip_bound", "<=", "proj_to", ":", "\n", "        ", "return", "\n", "", "if", "self", ".", "norm", "==", "\"1-norm\"", ":", "\n", "        ", "y", "=", "self", ".", "weight", "[", ":", ",", "self", ".", "lip_idx", "]", "\n", "self", ".", "weight", "[", ":", ",", "self", ".", "lip_idx", "]", "=", "proj_l1_ball", "(", "y", ",", "proj_to", ")", "\n", "", "else", ":", "\n", "        ", "y", "=", "self", ".", "weight", "[", "self", ".", "lip_idx", ",", ":", "]", "\n", "self", ".", "weight", "[", "self", ".", "lip_idx", ",", ":", "]", "=", "proj_l1_ball", "(", "y", ",", "proj_to", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.update_grad_linear": [[404, 420], ["torch.no_grad", "add_lip..grad_bound.mul", "add_lip..grad_bound[].sign_", "add_lip..grad_bound[].sign_"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_grad_linear", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "norm", "in", "[", "\"1-norm\"", ",", "\"inf-norm\"", "]", ":", "\n", "        ", "self", ".", "grad_bound", "*=", "self", ".", "mmt", "\n", "\n", "", "if", "self", ".", "norm", "==", "\"1-norm\"", ":", "\n", "        ", "self", ".", "grad_bound", "[", ":", ",", "self", ".", "lip_idx", "]", "=", "self", ".", "weight", "[", ":", ",", "self", ".", "lip_idx", "]", "\n", "self", ".", "grad_bound", "[", ":", ",", "self", ".", "lip_idx", "]", ".", "sign_", "(", ")", "\n", "# elif self.norm == \"2-norm\":", "\n", "#     scale = grad_wrt_self / self.lip_bound", "\n", "#     torch.mul(self.weight, scale, out=self.grad_bound)", "\n", "", "else", ":", "\n", "        ", "self", ".", "grad_bound", "[", "self", ".", "lip_idx", ",", ":", "]", "=", "self", ".", "weight", "[", "self", ".", "lip_idx", ",", ":", "]", "\n", "self", ".", "grad_bound", "[", "self", ".", "lip_idx", ",", ":", "]", ".", "sign_", "(", ")", "\n", "\n", "", "self", ".", "weight", ".", "grad", ".", "data", "+=", "self", ".", "grad_bound", ".", "mul", "(", "self", ".", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip_bn": [[423, 438], ["torch.zeros_like", "zip", "add_lip.bind"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.bind"], ["", "def", "add_lip_bn", "(", "batch_norm", ",", "norm", ",", "mmt", "=", "MMT", ",", "alpha", "=", "ALPHA", ",", "beta", "=", "BETA", ")", ":", "\n", "\n", "    ", "batch_norm", ".", "norm", "=", "norm", "\n", "batch_norm", ".", "mmt", "=", "mmt", "\n", "batch_norm", ".", "alpha", "=", "alpha", "\n", "batch_norm", ".", "beta", "=", "beta", "\n", "\n", "batch_norm", ".", "grad_bound", "=", "torch", ".", "zeros_like", "(", "batch_norm", ".", "weight", ",", "device", "=", "batch_norm", ".", "weight", ".", "device", ")", "\n", "# batch_norm.weight.grad_bound = batch_norm.grad_bound  # for communication with optimizer", "\n", "\n", "func", "=", "[", "lip_bn", ",", "proj_bn", ",", "update_grad_bn", "]", "\n", "as_name", "=", "[", "'lip'", ",", "'proj'", ",", "'update_grad'", "]", "\n", "\n", "for", "fun", ",", "name", "in", "zip", "(", "func", ",", "as_name", ")", ":", "\n", "        ", "bind", "(", "batch_norm", ",", "fun", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip_bn": [[440, 445], ["torch.no_grad", "torch.max", "add_lip..lip_bound.item", "torch.sqrt", "tmp.abs"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "lip_bn", "(", "self", ")", ":", "\n", "    ", "tmp", "=", "self", ".", "weight", "/", "torch", ".", "sqrt", "(", "self", ".", "running_var", "+", "self", ".", "eps", ")", "\n", "self", ".", "lip_bound", ",", "self", ".", "lip_idx", "=", "torch", ".", "max", "(", "tmp", ".", "abs", "(", ")", ",", "dim", "=", "0", ")", "\n", "return", "self", ".", "lip_bound", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.proj_bn": [[447, 452], ["torch.no_grad", "torch.sqrt", "torch.sign"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "proj_bn", "(", "self", ",", "proj_to", ")", ":", "\n", "    ", "if", "self", ".", "lip_bound", ">", "proj_to", ":", "\n", "        ", "coeff", "=", "torch", ".", "sqrt", "(", "self", ".", "running_var", "[", "self", ".", "lip_idx", "]", "+", "self", ".", "eps", ")", "\n", "self", ".", "weight", "[", "self", ".", "lip_idx", "]", "=", "proj_to", "*", "coeff", "*", "torch", ".", "sign", "(", "self", ".", "weight", "[", "self", ".", "lip_idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.update_grad_bn": [[454, 459], ["torch.no_grad", "torch.sqrt", "torch.sign"], "function", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "update_grad_bn", "(", "self", ")", ":", "\n", "    ", "self", ".", "grad_bound", "*=", "self", ".", "mmt", "\n", "coeff", "=", "torch", ".", "sqrt", "(", "self", ".", "running_var", "[", "self", ".", "lip_idx", "]", "+", "self", ".", "eps", ")", "\n", "self", ".", "grad_bound", "[", "self", ".", "lip_idx", "]", "=", "torch", ".", "sign", "(", "self", ".", "weight", "[", "self", ".", "lip_idx", "]", ")", "/", "coeff", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.bind": [[461, 472], ["func.__get__", "setattr", "add_lip.add_lip_grad", "add_lip.project", "add_lip.project_bn", "add_lip.calc_lip", "add_lip.lip_param", "add_lip.forward"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.add_lip_grad", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.project", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.project_bn", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.calc_lip", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.lip_param", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.forward"], ["", "def", "bind", "(", "instance", ",", "func", ",", "as_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Bind the function *func* to *instance*, with either provided name *as_name*\n    or the existing name of *func*. The provided *func* should accept the \n    instance as the first argument, i.e. \"self\".\n    \"\"\"", "\n", "if", "as_name", "is", "None", ":", "\n", "        ", "as_name", "=", "func", ".", "__name__", "\n", "", "bound_method", "=", "func", ".", "__get__", "(", "instance", ",", "instance", ".", "__class__", ")", "\n", "setattr", "(", "instance", ",", "as_name", ",", "bound_method", ")", "\n", "return", "bound_method", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.is_conv2d": [[474, 500], ["hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "layer.weight.dim", "print"], "function", ["None"], ["", "def", "is_conv2d", "(", "layer", ")", ":", "\n", "    ", "if", "hasattr", "(", "layer", ",", "'is_conv2d'", ")", ":", "\n", "        ", "return", "layer", ".", "is_conv2d", "\n", "", "if", "hasattr", "(", "layer", ",", "'weight'", ")", "and", "hasattr", "(", "layer", ",", "'stride'", ")", "and", "hasattr", "(", "layer", ",", "'padding'", ")", "and", "hasattr", "(", "layer", ",", "'kernel_size'", ")", ":", "\n", "        ", "if", "layer", ".", "weight", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "try", ":", "\n", "# assert type(layer) is torch.nn.Conv2d", "\n", "                ", "d", "=", "layer", ".", "dilation", "\n", "assert", "d", "[", "0", "]", "==", "d", "[", "1", "]", "==", "1", "\n", "assert", "layer", ".", "padding_mode", "==", "'zeros'", "\n", "assert", "layer", ".", "groups", "==", "1", "\n", "layer", ".", "is_conv2d", "=", "True", "\n", "return", "True", "\n", "", "except", "(", "AssertionError", ",", "AttributeError", ")", "as", "e", ":", "\n", "                ", "info", "=", "[", "\n", "(", "'dilation == 1'", ",", "d", "[", "0", "]", "==", "d", "[", "1", "]", "==", "1", ",", "d", "[", "0", "]", ",", "d", "[", "1", "]", ")", ",", "\n", "(", "'padding_mode == zeros'", ",", "layer", ".", "padding_mode", "==", "'zeros'", ",", "layer", ".", "padding_mode", ")", ",", "\n", "(", "'groups == 1'", ",", "layer", ".", "groups", "==", "1", ",", "layer", ".", "groups", ")", "\n", "]", "\n", "err", "=", "[", "m", "for", "m", "in", "info", "if", "not", "m", "[", "1", "]", "]", "\n", "print", "(", "\"Skip a Conv2d because {0}\"", ".", "format", "(", "err", ")", ")", "\n", "layer", ".", "is_conv2d", "=", "False", "\n", "return", "False", "\n", "", "", "", "layer", ".", "is_conv2d", "=", "False", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.add_lip.check_conv": [[501, 510], ["hasattr", "warnings.warn"], "function", ["None"], ["", "def", "check_conv", "(", "m", ")", ":", "\n", "    ", "if", "hasattr", "(", "m", ",", "'mod'", ")", "and", "m", ".", "mod", "is", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'The network structure seems to change during training. '", "\n", "'The returned `all_lip` may be inconsistent across different calls.'", ",", "\n", "RuntimeWarning", "\n", ")", "\n", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.projection.proj_l1_ball": [[4, 31], ["y.flatten.sign", "y.flatten.abs", "torch.cumsum", "y.flatten.numel", "torch.arange", "torch.zeros", "torch.max", "torch.reshape.mul_", "y.flatten.dim", "y.flatten.size", "y.flatten.flatten", "torch.sort", "torch.arange.float", "torch.max", "torch.reshape"], "function", ["None"], ["def", "proj_l1_ball", "(", "y", ",", "c", ")", ":", "\n", "    ", "if", "y", ".", "dim", "(", ")", ">", "1", ":", "\n", "        ", "shape", "=", "y", ".", "size", "(", ")", "\n", "y", "=", "y", ".", "flatten", "(", ")", "\n", "", "else", ":", "\n", "        ", "shape", "=", "None", "\n", "", "p", "=", "y", ".", "sign", "(", ")", "\n", "y", "=", "y", ".", "abs", "(", ")", "\n", "\n", "sorted_y", "=", "torch", ".", "sort", "(", "y", ",", "descending", "=", "True", ")", "[", "0", "]", "\n", "cum_y", "=", "torch", ".", "cumsum", "(", "sorted_y", ",", "dim", "=", "0", ")", "\n", "\n", "m", "=", "y", ".", "numel", "(", ")", "\n", "idx", "=", "torch", ".", "arange", "(", "1", ",", "m", "+", "1", ",", "device", "=", "y", ".", "device", ")", "\n", "zero", "=", "torch", ".", "zeros", "(", "1", ",", "device", "=", "y", ".", "device", ")", "\n", "tmp", "=", "(", "c", "-", "cum_y", ")", ".", "div_", "(", "idx", ".", "float", "(", ")", ")", ";", "\n", "sig", "=", "(", "sorted_y", "+", "tmp", ")", ">", "zero", ";", "\n", "rho", "=", "torch", ".", "max", "(", "idx", "[", "sig", "]", ")", "-", "1", "\n", "\n", "zeta", "=", "tmp", "[", "rho", "]", "\n", "x", "=", "torch", ".", "max", "(", "y", "+", "zeta", ",", "zero", ")", "\n", "\n", "x", "=", "x", ".", "mul_", "(", "p", ")", "\n", "if", "shape", "is", "not", "None", ":", "\n", "        ", "x", "=", "torch", ".", "reshape", "(", "x", ",", "shape", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.partition_kernel.partition": [[3, 47], ["min", "min", "partition_kernel.equivalence_class", "range", "sorted", "range", "type", "type", "type", "range", "sorted.append", "len", "range", "partition_kernel.increment", "tmp.append", "set", "len", "partition_kernel.sub2lin", "len", "sorted.remove"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.partition_kernel.equivalence_class", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.partition_kernel.increment", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.partition_kernel.sub2lin"], ["def", "partition", "(", "h", ",", "w", ",", "k", ",", "s", ",", "p", ")", ":", "\n", "    ", "if", "type", "(", "k", ")", "is", "not", "tuple", ":", "\n", "        ", "k", "=", "(", "k", ",", "k", ")", "\n", "", "if", "type", "(", "s", ")", "is", "not", "tuple", ":", "\n", "        ", "s", "=", "(", "s", ",", "s", ")", "\n", "", "if", "type", "(", "p", ")", "is", "not", "tuple", ":", "\n", "        ", "p", "=", "(", "p", ",", "p", ")", "\n", "", "r0", "=", "min", "(", "k", "[", "0", "]", ",", "h", "+", "2", "*", "p", "[", "0", "]", "-", "k", "[", "0", "]", "+", "1", ")", "\n", "r1", "=", "min", "(", "k", "[", "1", "]", ",", "w", "+", "2", "*", "p", "[", "1", "]", "-", "k", "[", "1", "]", "+", "1", ")", "\n", "# print(r0, r1)", "\n", "\n", "all_classes", "=", "[", "]", "\n", "\n", "init_classes", "=", "equivalence_class", "(", "0", ",", "0", ",", "(", "r0", ",", "r1", ")", ",", "s", ")", "\n", "all_classes", "+=", "init_classes", "\n", "t", "=", "(", "k", "[", "0", "]", "-", "r0", ",", "k", "[", "1", "]", "-", "r1", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "t", "[", "0", "]", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "t", "[", "1", "]", "+", "1", ")", ":", "\n", "            ", "if", "i", "==", "0", "and", "j", "==", "0", ":", "\n", "                ", "continue", "\n", "", "classes_new", "=", "increment", "(", "init_classes", ",", "i", ",", "j", ")", "\n", "all_classes", "+=", "classes_new", "\n", "# print(all_classes)", "\n", "\n", "", "", "idx_set", "=", "[", "]", "\n", "for", "classes", "in", "all_classes", ":", "\n", "        ", "tmp", "=", "[", "]", "\n", "for", "c", "in", "classes", ":", "\n", "# print(c)", "\n", "            ", "tmp", ".", "append", "(", "sub2lin", "(", "c", ",", "k", "[", "0", "]", ",", "k", "[", "1", "]", ")", ")", "\n", "", "idx_set", ".", "append", "(", "tmp", ")", "\n", "\n", "# remove redundancy", "\n", "", "idx_set", "=", "sorted", "(", "idx_set", ",", "key", "=", "lambda", "x", ":", "len", "(", "x", ")", ")", "\n", "idx_set2", "=", "[", "(", "c", ",", "set", "(", "c", ")", ")", "for", "c", "in", "idx_set", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "idx_set2", ")", ")", ":", "\n", "        ", "c", ",", "sc", "=", "idx_set2", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "idx_set2", ")", ")", ":", "\n", "            ", "c_", ",", "sc_", "=", "idx_set2", "[", "j", "]", "\n", "if", "sc", "<=", "sc_", ":", "\n", "                ", "idx_set", ".", "remove", "(", "c", ")", "\n", "break", "\n", "\n", "", "", "", "return", "idx_set", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.partition_kernel.equivalence_class": [[49, 66], ["range", "range", "len", "range", "classes.append", "all_idx.append", "range", "tmp.append", "all_idx.remove"], "function", ["None"], ["", "def", "equivalence_class", "(", "x", ",", "y", ",", "r", ",", "s", ")", ":", "\n", "    ", "all_idx", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ",", "r", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "y", ",", "r", "[", "1", "]", ")", ":", "\n", "            ", "all_idx", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "\n", "", "", "classes", "=", "[", "]", "\n", "while", "len", "(", "all_idx", ")", ">", "0", ":", "\n", "        ", "x0", ",", "y0", "=", "all_idx", "[", "0", "]", "\n", "tmp", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "x0", ",", "r", "[", "0", "]", ",", "s", "[", "0", "]", ")", ":", "\n", "            ", "for", "y", "in", "range", "(", "y0", ",", "r", "[", "1", "]", ",", "s", "[", "1", "]", ")", ":", "\n", "                ", "tmp", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "all_idx", ".", "remove", "(", "(", "x", ",", "y", ")", ")", "\n", "", "", "classes", ".", "append", "(", "tmp", ")", "\n", "\n", "", "return", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.partition_kernel.increment": [[68, 74], ["classes_new.append"], "function", ["None"], ["", "def", "increment", "(", "classes", ",", "i", ",", "j", ")", ":", "\n", "    ", "classes_new", "=", "[", "]", "\n", "for", "eqv", "in", "classes", ":", "\n", "        ", "tmp", "=", "[", "(", "c", "[", "0", "]", "+", "i", ",", "c", "[", "1", "]", "+", "j", ")", "for", "c", "in", "eqv", "]", "\n", "classes_new", ".", "append", "(", "tmp", ")", "\n", "", "return", "classes_new", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.partition_kernel.sub2lin": [[76, 78], ["None"], "function", ["None"], ["", "def", "sub2lin", "(", "sub", ",", "k0", ",", "k1", ")", ":", "\n", "    ", "return", "sub", "[", "1", "]", "*", "k0", "+", "sub", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.__init__": [[9, 14], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "save_path", ")", ":", "\n", "        ", "super", "(", "Recorder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "save_path", "=", "save_path", "\n", "self", ".", "epoch", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.record": [[15, 21], ["hasattr", "getattr", "getattr.append", "setattr"], "methods", ["None"], ["", "def", "record", "(", "self", ",", "name", ",", "stat", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "name", ")", ":", "\n", "            ", "attr", "=", "getattr", "(", "self", ",", "name", ")", "\n", "attr", ".", "append", "(", "(", "self", ".", "epoch", ",", "stat", ")", ")", "\n", "", "else", ":", "\n", "            ", "setattr", "(", "self", ",", "name", ",", "[", "(", "self", ".", "epoch", ",", "stat", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.get_record": [[22, 37], ["getattr", "len", "math.ceil", "enumerate", "epoches.append", "stat.append"], "methods", ["None"], ["", "", "def", "get_record", "(", "self", ",", "name", ",", "n_per_epoch", "=", "5", ")", ":", "\n", "        ", "attr", "=", "getattr", "(", "self", ",", "name", ")", "\n", "\n", "epoches", "=", "[", "]", "\n", "stat", "=", "[", "]", "\n", "n", "=", "len", "(", "attr", ")", "\n", "step", "=", "math", ".", "ceil", "(", "n", "/", "self", ".", "epoch", "/", "n_per_epoch", ")", "# get 5 records per epoch", "\n", "intv", "=", "1", "/", "(", "n", "/", "self", ".", "epoch", ")", "\n", "\n", "for", "i", ",", "(", "e", ",", "s", ")", "in", "enumerate", "(", "attr", ")", ":", "\n", "            ", "if", "i", "%", "step", "==", "0", ":", "\n", "                ", "epoches", ".", "append", "(", "i", "*", "intv", ")", "\n", "stat", ".", "append", "(", "s", ")", "\n", "\n", "", "", "return", "epoches", ",", "stat", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw": [[38, 57], ["recorder.Recorder.get_record", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "matplotlib.figure", "matplotlib.yscale", "os.path.isdir", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.get_record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.plot"], ["", "def", "draw", "(", "self", ",", "name", ",", "fig", "=", "None", ",", "figsize", "=", "(", "8", ",", "5", ")", ",", "fontsize", "=", "20", ",", "yscale", "=", "None", ")", ":", "\n", "        ", "epoches", ",", "stat", "=", "self", ".", "get_record", "(", "name", ")", "\n", "if", "fig", "is", "None", ":", "\n", "            ", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "", "if", "yscale", "is", "not", "None", ":", "\n", "            ", "plt", ".", "yscale", "(", "yscale", ")", "\n", "", "plt", ".", "xticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "plot", "(", "epoches", ",", "stat", ")", "\n", "# plt.legend(['alexnet'])", "\n", "plt", ".", "xlabel", "(", "\"Epoches\"", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "ylabel", "(", "name", ",", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "# plt.show()", "\n", "save_path", "=", "self", ".", "save_path", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "plt", ".", "savefig", "(", "f'{save_path}/{self.name}_{name}.jpg'", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.draw_many": [[58, 86], ["recorder.Recorder.get_record", "numpy.array", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.tight_layout", "os.path.exists", "matplotlib.savefig", "matplotlib.close", "matplotlib.figure", "matplotlib.yscale", "matplotlib.ylabel", "matplotlib.ylabel", "os.path.isdir", "os.mkdir"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.get_record", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.None.compare_norm_individual.plot"], ["", "def", "draw_many", "(", "self", ",", "name", ",", "fig", "=", "None", ",", "figsize", "=", "(", "8", ",", "5", ")", ",", "fontsize", "=", "20", ",", "yscale", "=", "None", ")", ":", "\n", "        ", "epoches", ",", "stat", "=", "self", ".", "get_record", "(", "name", ")", "\n", "if", "fig", "is", "None", ":", "\n", "            ", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "", "if", "yscale", "is", "not", "None", ":", "\n", "            ", "plt", ".", "yscale", "(", "yscale", ")", "\n", "\n", "", "y", "=", "np", ".", "array", "(", "stat", ")", "\n", "\n", "plt", ".", "xticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "fontsize", ")", "\n", "plt", ".", "plot", "(", "epoches", ",", "y", ")", "\n", "# plt.legend(['alexnet'])", "\n", "plt", ".", "xlabel", "(", "\"Epoches\"", ",", "fontsize", "=", "fontsize", ")", "\n", "if", "name", "==", "'lip'", ":", "\n", "            ", "plt", ".", "ylabel", "(", "'Norm'", ",", "fontsize", "=", "fontsize", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "ylabel", "(", "name", ",", "fontsize", "=", "fontsize", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "# plt.show()", "\n", "save_path", "=", "self", ".", "save_path", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "filename", "=", "f'{save_path}/{self.name}_{name}.jpg'", "\n", "while", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "filename", "=", "filename", "[", ":", "-", "4", "]", "+", "'_.jpg'", "\n", "", "plt", ".", "savefig", "(", "filename", ",", "dpi", "=", "300", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.step": [[87, 89], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "epoch", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.lip.recorder.Recorder.__len__": [[90, 92], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenet.Block.__init__": [[13, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenet.Block.forward": [[20, 24], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenet.MobileNet.__init__": [[30, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet.MobileNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenetv2.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenet.MobileNet._make_layers": [[37, 45], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "mobilenet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenet.MobileNet.forward": [[46, 53], ["torch.relu", "torch.relu", "torch.relu", "mobilenet.MobileNet.layers", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.linear", "mobilenet.MobileNet.bn1", "mobilenet.MobileNet.size", "mobilenet.MobileNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenet.test": [[55, 60], ["mobilenet.MobileNet", "torch.randn", "torch.randn", "torch.randn", "MobileNet.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.vgg.VGG.__init__": [[15, 19], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", "=", "'VGG11'", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.vgg.VGG.forward": [[20, 25], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.vgg.VGG._make_layers": [[26, 39], ["torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.vgg.test": [[41, 46], ["vgg.VGG", "torch.randn", "torch.randn", "VGG.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "VGG", "(", "'VGG11'", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.SE.__init__": [[28, 34], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "se_channels", ")", ":", "\n", "        ", "super", "(", "SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "se1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "se_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "se2", "=", "nn", ".", "Conv2d", "(", "se_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.SE.forward": [[35, 41], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "efficientnet.swish", "efficientnet.SE.se2().sigmoid", "efficientnet.SE.se1", "efficientnet.SE.se2"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.swish"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "out", "=", "swish", "(", "self", ".", "se1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "se2", "(", "out", ")", ".", "sigmoid", "(", ")", "\n", "out", "=", "x", "*", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.Block.__init__": [[46, 94], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int", "efficientnet.SE", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "expand_ratio", "=", "1", ",", "\n", "se_ratio", "=", "0.", ",", "\n", "drop_rate", "=", "0.", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "expand_ratio", "=", "expand_ratio", "\n", "\n", "# Expansion", "\n", "channels", "=", "expand_ratio", "*", "in_channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "\n", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n", "# Depthwise conv", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "channels", ",", "\n", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "1", "if", "kernel_size", "==", "3", "else", "2", ")", ",", "\n", "groups", "=", "channels", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n", "# SE layers", "\n", "se_channels", "=", "int", "(", "in_channels", "*", "se_ratio", ")", "\n", "self", ".", "se", "=", "SE", "(", "channels", ",", "se_channels", ")", "\n", "\n", "# Output", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "# Skip connection if in and out shapes are the same (MV-V2 style)", "\n", "self", ".", "has_skip", "=", "(", "stride", "==", "1", ")", "and", "(", "in_channels", "==", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.Block.forward": [[95, 105], ["efficientnet.swish", "efficientnet.Block.se", "efficientnet.Block.bn3", "efficientnet.swish", "efficientnet.Block.bn2", "efficientnet.Block.conv3", "efficientnet.Block.bn1", "efficientnet.Block.conv2", "efficientnet.drop_connect", "efficientnet.Block.conv1"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.swish", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.swish", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.drop_connect"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "if", "self", ".", "expand_ratio", "==", "1", "else", "swish", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "swish", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "if", "self", ".", "has_skip", ":", "\n", "            ", "if", "self", ".", "training", "and", "self", ".", "drop_rate", ">", "0", ":", "\n", "                ", "out", "=", "drop_connect", "(", "out", ",", "self", ".", "drop_rate", ")", "\n", "", "out", "=", "out", "+", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.EfficientNet.__init__": [[108, 120], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "efficientnet.EfficientNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "EfficientNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "\n", "32", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_channels", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cfg", "[", "'out_channels'", "]", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.EfficientNet._make_layers": [[121, 141], ["sum", "zip", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "efficientnet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "cfg", "=", "[", "self", ".", "cfg", "[", "k", "]", "for", "k", "in", "[", "'expansion'", ",", "'out_channels'", ",", "'num_blocks'", ",", "'kernel_size'", ",", "\n", "'stride'", "]", "]", "\n", "b", "=", "0", "\n", "blocks", "=", "sum", "(", "self", ".", "cfg", "[", "'num_blocks'", "]", ")", "\n", "for", "expansion", ",", "out_channels", ",", "num_blocks", ",", "kernel_size", ",", "stride", "in", "zip", "(", "*", "cfg", ")", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "drop_rate", "=", "self", ".", "cfg", "[", "'drop_connect_rate'", "]", "*", "b", "/", "blocks", "\n", "layers", ".", "append", "(", "\n", "Block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "expansion", ",", "\n", "se_ratio", "=", "0.25", ",", "\n", "drop_rate", "=", "drop_rate", ")", ")", "\n", "in_channels", "=", "out_channels", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.EfficientNet.forward": [[142, 152], ["efficientnet.swish", "efficientnet.EfficientNet.layers", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.dropout.view", "efficientnet.EfficientNet.linear", "efficientnet.EfficientNet.bn1", "torch.dropout.size", "torch.dropout", "torch.dropout", "torch.dropout", "efficientnet.EfficientNet.conv1"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.swish"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "swish", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "1", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "dropout_rate", "=", "self", ".", "cfg", "[", "'dropout_rate'", "]", "\n", "if", "self", ".", "training", "and", "dropout_rate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "dropout_rate", ")", "\n", "", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.swish": [[12, 14], ["x.sigmoid"], "function", ["None"], ["def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "x", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.drop_connect": [[16, 23], ["torch.empty", "torch.empty", "torch.empty", "torch.empty.bernoulli_", "x.div_", "x.mul_"], "function", ["None"], ["", "def", "drop_connect", "(", "x", ",", "drop_ratio", ")", ":", "\n", "    ", "keep_ratio", "=", "1.0", "-", "drop_ratio", "\n", "mask", "=", "torch", ".", "empty", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", ".", "bernoulli_", "(", "keep_ratio", ")", "\n", "x", ".", "div_", "(", "keep_ratio", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.EfficientNetB0": [[154, 165], ["efficientnet.EfficientNet"], "function", ["None"], ["", "", "def", "EfficientNetB0", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'num_blocks'", ":", "[", "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "1", "]", ",", "\n", "'expansion'", ":", "[", "1", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", "]", ",", "\n", "'out_channels'", ":", "[", "16", ",", "24", ",", "40", ",", "80", ",", "112", ",", "192", ",", "320", "]", ",", "\n", "'kernel_size'", ":", "[", "3", ",", "3", ",", "5", ",", "3", ",", "5", ",", "5", ",", "3", "]", ",", "\n", "'stride'", ":", "[", "1", ",", "2", ",", "2", ",", "2", ",", "1", ",", "2", ",", "1", "]", ",", "\n", "'dropout_rate'", ":", "0.2", ",", "\n", "'drop_connect_rate'", ":", "0.2", ",", "\n", "}", "\n", "return", "EfficientNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.test": [[167, 172], ["efficientnet.EfficientNetB0", "torch.randn", "torch.randn", "torch.randn", "EfficientNetB0.", "print"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.efficientnet.EfficientNetB0"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "EfficientNetB0", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenetv2.Block.__init__": [[13, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenetv2.Block.forward": [[32, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenetv2.Block.bn3", "mobilenetv2.Block.bn1", "mobilenetv2.Block.bn2", "mobilenetv2.Block.conv3", "mobilenetv2.Block.conv1", "mobilenetv2.Block.conv2", "mobilenetv2.Block.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenetv2.MobileNetV2.__init__": [[50, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv2.MobileNetV2._make_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenetv2.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "320", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenetv2.MobileNetV2._make_layers": [[60, 68], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "mobilenetv2.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenetv2.MobileNetV2.forward": [[69, 78], ["torch.relu", "torch.relu", "torch.relu", "mobilenetv2.MobileNetV2.layers", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenetv2.MobileNetV2.view", "mobilenetv2.MobileNetV2.linear", "mobilenetv2.MobileNetV2.bn1", "mobilenetv2.MobileNetV2.bn2", "mobilenetv2.MobileNetV2.size", "mobilenetv2.MobileNetV2.conv1", "mobilenetv2.MobileNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.mobilenetv2.test": [[80, 85], ["mobilenetv2.MobileNetV2", "torch.randn", "torch.randn", "torch.randn", "MobileNetV2.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNetV2", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.SepConv.__init__": [[12, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "bias", "=", "False", ",", "groups", "=", "in_planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.SepConv.forward": [[20, 22], ["pnasnet.SepConv.bn1", "pnasnet.SepConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.CellA.__init__": [[25, 32], ["torch.Module.__init__", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.CellA.forward": [[33, 39], ["pnasnet.CellA.sep_conv1", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellA.bn1", "pnasnet.CellA.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y2", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y2", ")", ")", "\n", "", "return", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.CellB.__init__": [[41, 55], ["torch.Module.__init__", "pnasnet.SepConv", "pnasnet.SepConv", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "# Left branch", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "self", ".", "sep_conv2", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "# Right branch", "\n", "self", ".", "sep_conv3", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "# Reduce channels", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.CellB.forward": [[56, 70], ["pnasnet.CellB.sep_conv1", "pnasnet.CellB.sep_conv2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "pnasnet.CellB.sep_conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellB.bn1", "pnasnet.CellB.bn2", "pnasnet.CellB.conv1", "pnasnet.CellB.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Left branch", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "self", ".", "sep_conv2", "(", "x", ")", "\n", "# Right branch", "\n", "y3", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y3", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y3", ")", ")", "\n", "", "y4", "=", "self", ".", "sep_conv3", "(", "x", ")", "\n", "# Concat & reduce channels", "\n", "b1", "=", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "b2", "=", "F", ".", "relu", "(", "y3", "+", "y4", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "b1", ",", "b2", "]", ",", "1", ")", "\n", "return", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.PNASNet.__init__": [[72, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cell_type", ",", "num_cells", ",", "num_planes", ")", ":", "\n", "        ", "super", "(", "PNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "num_planes", "\n", "self", ".", "cell_type", "=", "cell_type", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_planes", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_downsample", "(", "num_planes", "*", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "2", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_downsample", "(", "num_planes", "*", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "4", ",", "num_cells", "=", "6", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", "*", "4", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.PNASNet._make_layer": [[88, 94], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "num_cells", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_cells", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.PNASNet._downsample": [[95, 99], ["pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_downsample", "(", "self", ",", "planes", ")", ":", "\n", "        ", "layer", "=", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "2", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.PNASNet.forward": [[100, 110], ["torch.relu", "torch.relu", "torch.relu", "pnasnet.PNASNet.layer1", "pnasnet.PNASNet.layer2", "pnasnet.PNASNet.layer3", "pnasnet.PNASNet.layer4", "pnasnet.PNASNet.layer5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pnasnet.PNASNet.linear", "pnasnet.PNASNet.bn1", "pnasnet.PNASNet.view", "pnasnet.PNASNet.conv1", "pnasnet.PNASNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.PNASNetA": [[112, 114], ["pnasnet.PNASNet"], "function", ["None"], ["", "", "def", "PNASNetA", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellA", ",", "num_cells", "=", "6", ",", "num_planes", "=", "44", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.PNASNetB": [[115, 117], ["pnasnet.PNASNet"], "function", ["None"], ["", "def", "PNASNetB", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellB", ",", "num_cells", "=", "6", ",", "num_planes", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.test": [[119, 124], ["pnasnet.PNASNetB", "torch.randn", "torch.randn", "torch.randn", "PNASNetB.", "print"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.pnasnet.PNASNetB"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PNASNetB", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.lenet.LeNet.__init__": [[6, 13], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.lenet.LeNet.forward": [[14, 24], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet.fc3", "lenet.LeNet.conv1", "lenet.LeNet.conv2", "lenet.LeNet.size", "lenet.LeNet.fc1", "lenet.LeNet.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.dpn.Bottleneck.__init__": [[8, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "first_layer", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "dense_depth", "=", "dense_depth", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "last_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "32", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "first_layer", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "last_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.dpn.Bottleneck.forward": [[27, 36], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn3", "dpn.Bottleneck.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn1", "dpn.Bottleneck.bn2", "dpn.Bottleneck.conv3", "dpn.Bottleneck.conv1", "dpn.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "d", "=", "self", ".", "out_planes", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", "+", "out", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", ",", "out", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.dpn.DPN.__init__": [[39, 52], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", ",", "out_planes", "=", "cfg", "[", "'in_planes'", "]", ",", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", ",", "dense_depth", "=", "cfg", "[", "'num_blocks'", "]", ",", "cfg", "[", "'dense_depth'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "last_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "0", "]", ",", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "dense_depth", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "1", "]", ",", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "dense_depth", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "2", "]", ",", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "dense_depth", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "3", "]", ",", "out_planes", "[", "3", "]", ",", "num_blocks", "[", "3", "]", ",", "dense_depth", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "3", "]", "+", "(", "num_blocks", "[", "3", "]", "+", "1", ")", "*", "dense_depth", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.dpn.DPN._make_layer": [[53, 60], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "dpn.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "num_blocks", ",", "dense_depth", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "stride", "in", "enumerate", "(", "strides", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "i", "==", "0", ")", ")", "\n", "self", ".", "last_planes", "=", "out_planes", "+", "(", "i", "+", "2", ")", "*", "dense_depth", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.dpn.DPN.forward": [[61, 71], ["torch.relu", "torch.relu", "torch.relu", "dpn.DPN.layer1", "dpn.DPN.layer2", "dpn.DPN.layer3", "dpn.DPN.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "dpn.DPN.view", "dpn.DPN.linear", "dpn.DPN.bn1", "dpn.DPN.size", "dpn.DPN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.dpn.DPN26": [[73, 81], ["dpn.DPN"], "function", ["None"], ["", "", "def", "DPN26", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.dpn.DPN92": [[82, 90], ["dpn.DPN"], "function", ["None"], ["", "def", "DPN92", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "3", ",", "4", ",", "20", ",", "3", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.dpn.test": [[92, 97], ["dpn.DPN92", "torch.randn", "torch.randn", "torch.randn", "DPN92.", "print"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.dpn.DPN92"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "DPN92", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenet.ShuffleBlock.__init__": [[11, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenet.ShuffleBlock.forward": [[15, 20], ["x.size", "x.view().permute().reshape", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "//", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenet.Bottleneck.__init__": [[23, 40], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "mid_planes", "=", "int", "(", "out_planes", "/", "4", ")", "\n", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "g", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenet.Bottleneck.forward": [[41, 49], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.shuffle1", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.shortcut", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.conv1", "shufflenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "res", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "res", "]", ",", "1", ")", ")", "if", "self", ".", "stride", "==", "2", "else", "F", ".", "relu", "(", "out", "+", "res", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenet.ShuffleNet.__init__": [[52, 65], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_planes", "=", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", "=", "cfg", "[", "'num_blocks'", "]", "\n", "groups", "=", "cfg", "[", "'groups'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_planes", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "groups", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "2", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenet.ShuffleNet._make_layer": [[66, 74], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "cat_planes", "=", "self", ".", "in_planes", "if", "i", "==", "0", "else", "0", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", "-", "cat_planes", ",", "stride", "=", "stride", ",", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenet.ShuffleNet.forward": [[75, 84], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.linear", "shufflenet.ShuffleNet.bn1", "shufflenet.ShuffleNet.size", "shufflenet.ShuffleNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenet.ShuffleNetG2": [[86, 93], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "ShuffleNetG2", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "200", ",", "400", ",", "800", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "2", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenet.ShuffleNetG3": [[94, 101], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "def", "ShuffleNetG3", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "240", ",", "480", ",", "960", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "3", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenet.test": [[103, 108], ["shufflenet.ShuffleNetG2", "torch.randn", "torch.randn", "torch.randn", "ShuffleNetG2.", "print"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenet.ShuffleNetG2"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetG2", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenetv2.ShuffleBlock.__init__": [[11, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", "=", "2", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenetv2.ShuffleBlock.forward": [[15, 20], ["x.size", "x.view().permute().reshape", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "//", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenetv2.SplitBlock.__init__": [[23, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "super", "(", "SplitBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenetv2.SplitBlock.forward": [[27, 30], ["int", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c", "=", "int", "(", "x", ".", "size", "(", "1", ")", "*", "self", ".", "ratio", ")", "\n", "return", "x", "[", ":", ",", ":", "c", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "c", ":", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenetv2.BasicBlock.__init__": [[33, 47], ["torch.Module.__init__", "shufflenetv2.SplitBlock", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "split_ratio", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "split", "=", "SplitBlock", "(", "split_ratio", ")", "\n", "in_channels", "=", "int", "(", "in_channels", "*", "split_ratio", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenetv2.BasicBlock.forward": [[48, 56], ["shufflenetv2.BasicBlock.split", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.BasicBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.BasicBlock.shuffle", "shufflenetv2.BasicBlock.bn1", "shufflenetv2.BasicBlock.conv2", "shufflenetv2.BasicBlock.bn3", "shufflenetv2.BasicBlock.conv1", "shufflenetv2.BasicBlock.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "self", ".", "split", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x2", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "out", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenetv2.DownBlock.__init__": [[59, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DownBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "out_channels", "//", "2", "\n", "# left", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "# right", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "groups", "=", "mid_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenetv2.DownBlock.forward": [[82, 94], ["shufflenetv2.DownBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.DownBlock.bn4", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.DownBlock.shuffle", "shufflenetv2.DownBlock.conv1", "shufflenetv2.DownBlock.bn2", "shufflenetv2.DownBlock.bn3", "shufflenetv2.DownBlock.conv4", "shufflenetv2.DownBlock.bn5", "shufflenetv2.DownBlock.conv2", "shufflenetv2.DownBlock.conv3", "shufflenetv2.DownBlock.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# left", "\n", "        ", "out1", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out1", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out1", ")", ")", ")", "\n", "# right", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "out2", "=", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "out2", ")", ")", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "out2", ")", ")", ")", "\n", "# concat", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenetv2.ShuffleNetV2.__init__": [[97, 113], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "net_size", "=", "1", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "configs", "[", "net_size", "]", "[", "'out_channels'", "]", "\n", "num_blocks", "=", "configs", "[", "net_size", "]", "[", "'num_blocks'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_channels", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_channels", "[", "2", "]", ",", "out_channels", "[", "3", "]", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", "[", "3", "]", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_channels", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenetv2.ShuffleNetV2._make_layer": [[114, 120], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shufflenetv2.DownBlock", "layers.append", "shufflenetv2.BasicBlock"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_channels", ",", "num_blocks", ")", ":", "\n", "        ", "layers", "=", "[", "DownBlock", "(", "self", ".", "in_channels", ",", "out_channels", ")", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "BasicBlock", "(", "out_channels", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenetv2.ShuffleNetV2.forward": [[121, 132], ["torch.relu", "torch.relu", "torch.relu", "shufflenetv2.ShuffleNetV2.layer1", "shufflenetv2.ShuffleNetV2.layer2", "shufflenetv2.ShuffleNetV2.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenetv2.ShuffleNetV2.view", "shufflenetv2.ShuffleNetV2.linear", "shufflenetv2.ShuffleNetV2.bn1", "shufflenetv2.ShuffleNetV2.bn2", "shufflenetv2.ShuffleNetV2.size", "shufflenetv2.ShuffleNetV2.conv1", "shufflenetv2.ShuffleNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "# out = F.max_pool2d(out, 3, stride=2, padding=1)", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.shufflenetv2.test": [[155, 160], ["shufflenetv2.ShuffleNetV2", "torch.randn", "torch.randn", "torch.randn", "ShuffleNetV2.", "print"], "function", ["None"], ["def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetV2", "(", "net_size", "=", "0.5", ")", "\n", "x", "=", "torch", ".", "randn", "(", "3", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.BasicBlock.__init__": [[17, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.BasicBlock.forward": [[34, 40], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.Bottleneck.__init__": [[45, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "\n", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.Bottleneck.forward": [[64, 71], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.ResNet.__init__": [[74, 86], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.ResNet._make_layer": [[87, 94], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.ResNet.forward": [[95, 105], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.ResNet18": [[107, 109], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.ResNet34": [[111, 113], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.ResNet50": [[115, 117], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.ResNet101": [[119, 121], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.ResNet152": [[123, 125], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.test": [[127, 131], ["resnet.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.senet.BasicBlock.__init__": [[11, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "# Use nn.Conv2d instead of nn.Linear", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.senet.BasicBlock.forward": [[29, 43], ["torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn1", "senet.BasicBlock.conv2", "torch.relu.size", "senet.BasicBlock.fc1", "senet.BasicBlock.fc2", "senet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "# New broadcasting feature from v0.2!", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.senet.PreActBlock.__init__": [[46, 61], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.senet.PreActBlock.forward": [[62, 77], ["torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.conv1", "senet.PreActBlock.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.PreActBlock.bn1", "hasattr", "senet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.size", "senet.PreActBlock.fc1", "senet.PreActBlock.fc2", "senet.PreActBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.senet.SENet.__init__": [[80, 91], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.senet.SENet._make_layer": [[92, 99], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.senet.SENet.forward": [[100, 110], ["torch.relu", "torch.relu", "torch.relu", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "senet.SENet.view", "senet.SENet.linear", "senet.SENet.bn1", "senet.SENet.size", "senet.SENet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.senet.SENet18": [[112, 114], ["senet.SENet"], "function", ["None"], ["", "", "def", "SENet18", "(", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.senet.test": [[116, 120], ["senet.SENet18", "SENet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.senet.SENet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.Bottleneck.__init__": [[10, 16], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.Bottleneck.forward": [[17, 22], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.Transition.__init__": [[25, 29], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.Transition.forward": [[30, 34], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.DenseNet.__init__": [[37, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.DenseNet._make_dense_layers": [[68, 74], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.DenseNet.forward": [[75, 85], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.DenseNet121": [[86, 88], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.DenseNet169": [[89, 91], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.DenseNet201": [[92, 94], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.DenseNet161": [[95, 97], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.densenet_cifar": [[98, 100], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.test": [[101, 106], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.densenet.densenet_cifar"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnext.Block.__init__": [[14, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "cardinality", "*", "bottleneck_width", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "group_width", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnext.Block.forward": [[31, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn3", "resnext.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn1", "resnext.Block.bn2", "resnext.Block.conv3", "resnext.Block.conv1", "resnext.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnext.ResNeXt.__init__": [[41, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "cardinality", ",", "bottleneck_width", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "# self.layer4 = self._make_layer(num_blocks[3], 2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cardinality", "*", "bottleneck_width", "*", "8", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnext.ResNeXt._make_layer": [[55, 64], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnext.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "self", ".", "cardinality", ",", "self", ".", "bottleneck_width", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "Block", ".", "expansion", "*", "self", ".", "cardinality", "*", "self", ".", "bottleneck_width", "\n", "# Increase bottleneck_width by 2 after each stage.", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnext.ResNeXt.forward": [[65, 75], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnext.ResNeXt.view", "resnext.ResNeXt.linear", "resnext.ResNeXt.bn1", "resnext.ResNeXt.size", "resnext.ResNeXt.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# out = self.layer4(out)", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnext.ResNeXt29_2x64d": [[77, 79], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "ResNeXt29_2x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "2", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnext.ResNeXt29_4x64d": [[80, 82], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_4x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "4", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnext.ResNeXt29_8x64d": [[83, 85], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_8x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "8", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnext.ResNeXt29_32x4d": [[86, 88], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_32x4d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnext.test_resnext": [[89, 94], ["resnext.ResNeXt29_2x64d", "torch.randn", "torch.randn", "torch.randn", "ResNeXt29_2x64d.", "print", "net.size"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.resnext.ResNeXt29_2x64d"], ["", "def", "test_resnext", "(", ")", ":", "\n", "    ", "net", "=", "ResNeXt29_2x64d", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.regnet.SE.__init__": [[15, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "se_planes", ")", ":", "\n", "        ", "super", "(", "SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "se1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "se_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "se2", "=", "nn", ".", "Conv2d", "(", "se_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.regnet.SE.forward": [[20, 26], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "regnet.SE.se2().sigmoid", "regnet.SE.se1", "regnet.SE.se2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "se1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "se2", "(", "out", ")", ".", "sigmoid", "(", ")", "\n", "out", "=", "x", "*", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.regnet.Block.__init__": [[29, 55], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "round", "int", "regnet.SE", "torch.Sequential", "torch.Sequential", "torch.Sequential", "round", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "w_in", ",", "w_out", ",", "stride", ",", "group_width", ",", "bottleneck_ratio", ",", "se_ratio", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1", "\n", "w_b", "=", "int", "(", "round", "(", "w_out", "*", "bottleneck_ratio", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "w_in", ",", "w_b", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "w_b", ")", "\n", "# 3x3", "\n", "num_groups", "=", "w_b", "//", "group_width", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "w_b", ",", "w_b", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "num_groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "w_b", ")", "\n", "# se", "\n", "self", ".", "with_se", "=", "se_ratio", ">", "0", "\n", "if", "self", ".", "with_se", ":", "\n", "            ", "w_se", "=", "int", "(", "round", "(", "w_in", "*", "se_ratio", ")", ")", "\n", "self", ".", "se", "=", "SE", "(", "w_b", ",", "w_se", ")", "\n", "# 1x1", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "w_b", ",", "w_out", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "w_out", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "w_in", "!=", "w_out", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "w_in", ",", "w_out", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "w_out", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.regnet.Block.forward": [[57, 66], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "regnet.Block.bn3", "regnet.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "regnet.Block.bn1", "regnet.Block.bn2", "regnet.Block.se", "regnet.Block.conv3", "regnet.Block.conv1", "regnet.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "if", "self", ".", "with_se", ":", "\n", "            ", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.regnet.RegNet.__init__": [[69, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "regnet.RegNet._make_layer", "regnet.RegNet._make_layer", "regnet.RegNet._make_layer", "regnet.RegNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "RegNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "0", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "3", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "self", ".", "cfg", "[", "'widths'", "]", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.regnet.RegNet._make_layer": [[82, 97], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "regnet.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "idx", ")", ":", "\n", "        ", "depth", "=", "self", ".", "cfg", "[", "'depths'", "]", "[", "idx", "]", "\n", "width", "=", "self", ".", "cfg", "[", "'widths'", "]", "[", "idx", "]", "\n", "stride", "=", "self", ".", "cfg", "[", "'strides'", "]", "[", "idx", "]", "\n", "group_width", "=", "self", ".", "cfg", "[", "'group_width'", "]", "\n", "bottleneck_ratio", "=", "self", ".", "cfg", "[", "'bottleneck_ratio'", "]", "\n", "se_ratio", "=", "self", ".", "cfg", "[", "'se_ratio'", "]", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "s", "=", "stride", "if", "i", "==", "0", "else", "1", "\n", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "width", ",", "\n", "s", ",", "group_width", ",", "bottleneck_ratio", ",", "se_ratio", ")", ")", "\n", "self", ".", "in_planes", "=", "width", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.regnet.RegNet.forward": [[98, 108], ["torch.relu", "torch.relu", "torch.relu", "regnet.RegNet.layer1", "regnet.RegNet.layer2", "regnet.RegNet.layer3", "regnet.RegNet.layer4", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "regnet.RegNet.view", "regnet.RegNet.linear", "regnet.RegNet.bn1", "regnet.RegNet.size", "regnet.RegNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.regnet.RegNetX_200MF": [[110, 120], ["regnet.RegNet"], "function", ["None"], ["", "", "def", "RegNetX_200MF", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'depths'", ":", "[", "1", ",", "1", ",", "4", ",", "7", "]", ",", "\n", "'widths'", ":", "[", "24", ",", "56", ",", "152", ",", "368", "]", ",", "\n", "'strides'", ":", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "\n", "'group_width'", ":", "8", ",", "\n", "'bottleneck_ratio'", ":", "1", ",", "\n", "'se_ratio'", ":", "0", ",", "\n", "}", "\n", "return", "RegNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.regnet.RegNetX_400MF": [[122, 132], ["regnet.RegNet"], "function", ["None"], ["", "def", "RegNetX_400MF", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'depths'", ":", "[", "1", ",", "2", ",", "7", ",", "12", "]", ",", "\n", "'widths'", ":", "[", "32", ",", "64", ",", "160", ",", "384", "]", ",", "\n", "'strides'", ":", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "\n", "'group_width'", ":", "16", ",", "\n", "'bottleneck_ratio'", ":", "1", ",", "\n", "'se_ratio'", ":", "0", ",", "\n", "}", "\n", "return", "RegNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.regnet.RegNetY_400MF": [[134, 144], ["regnet.RegNet"], "function", ["None"], ["", "def", "RegNetY_400MF", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'depths'", ":", "[", "1", ",", "2", ",", "7", ",", "12", "]", ",", "\n", "'widths'", ":", "[", "32", ",", "64", ",", "160", ",", "384", "]", ",", "\n", "'strides'", ":", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "\n", "'group_width'", ":", "16", ",", "\n", "'bottleneck_ratio'", ":", "1", ",", "\n", "'se_ratio'", ":", "0.25", ",", "\n", "}", "\n", "return", "RegNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.regnet.test": [[146, 152], ["regnet.RegNetX_200MF", "print", "torch.randn", "torch.randn", "torch.randn", "RegNetX_200MF.", "print"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.regnet.RegNetX_200MF"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "RegNetX_200MF", "(", ")", "\n", "print", "(", "net", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.googlenet.Inception.__init__": [[8, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "n1x1", ",", "n3x3red", ",", "n3x3", ",", "n5x5red", ",", "n5x5", ",", "pool_planes", ")", ":", "\n", "        ", "super", "(", "Inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1 conv branch", "\n", "self", ".", "b1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n1x1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n1x1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 3x3 conv branch", "\n", "self", ".", "b2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n3x3red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n3x3red", ",", "n3x3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.googlenet.Inception.forward": [[48, 54], ["googlenet.Inception.b1", "googlenet.Inception.b2", "googlenet.Inception.b3", "googlenet.Inception.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.googlenet.GoogLeNet.__init__": [[57, 81], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "googlenet.Inception", "googlenet.Inception", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "192", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "self", ".", "e4", "=", "Inception", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "a5", "=", "Inception", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.googlenet.GoogLeNet.forward": [[82, 99], ["googlenet.GoogLeNet.pre_layers", "googlenet.GoogLeNet.a3", "googlenet.GoogLeNet.b3", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a4", "googlenet.GoogLeNet.b4", "googlenet.GoogLeNet.c4", "googlenet.GoogLeNet.d4", "googlenet.GoogLeNet.e4", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a5", "googlenet.GoogLeNet.b5", "googlenet.GoogLeNet.avgpool", "googlenet.GoogLeNet.view", "googlenet.GoogLeNet.linear", "googlenet.GoogLeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n", "out", "=", "self", ".", "d4", "(", "out", ")", "\n", "out", "=", "self", ".", "e4", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.googlenet.test": [[101, 106], ["googlenet.GoogLeNet", "torch.randn", "torch.randn", "torch.randn", "GoogLeNet.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "GoogLeNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActBlock.__init__": [[16, 26], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActBlock.forward": [[28, 35], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActBottleneck.__init__": [[41, 53], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActBottleneck.forward": [[55, 63], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet.__init__": [[66, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet._make_layer": [[77, 84], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet.forward": [[85, 95], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet18": [[97, 99], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet34": [[100, 102], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet50": [[103, 105], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet101": [[106, 108], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet152": [[109, 111], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.test": [[113, 117], ["preact_resnet.PreActResNet18", "PreActResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.models.preact_resnet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.SVD_Conv_Tensor": [[38, 55], ["tensorflow.device", "tensorflow.constant", "tf.constant.get_shape().as_list", "tensorflow.constant", "tensorflow.signal.fft2d", "tensorflow.linalg.svd", "tf.linalg.svd.numpy", "tensorflow.pad", "tensorflow.transpose", "tf.constant.get_shape"], "function", ["None"], ["def", "SVD_Conv_Tensor", "(", "filter", ",", "inp_shape", ",", "device", "=", "'/gpu:0'", ")", ":", "\n", "    ", "\"\"\" Find the singular values of the linear transformation\n    corresponding to the convolution represented by conv on\n    an n x n x depth input. \"\"\"", "\n", "with", "tf", ".", "device", "(", "device", ")", ":", "\n", "        ", "conv_tr", "=", "tf", ".", "constant", "(", "filter", ",", "dtype", "=", "tf", ".", "complex64", ")", "\n", "conv_shape", "=", "conv_tr", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "padding", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "inp_shape", "[", "0", "]", "-", "conv_shape", "[", "2", "]", "]", ",", "# height", "\n", "[", "0", ",", "inp_shape", "[", "1", "]", "-", "conv_shape", "[", "3", "]", "]", "]", ")", "# width", "\n", "if", "inp_shape", "[", "0", "]", "-", "conv_shape", "[", "2", "]", "<", "0", "or", "inp_shape", "[", "1", "]", "-", "conv_shape", "[", "3", "]", "<", "0", ":", "\n", "            ", "return", "# the input is smaller than kernel...", "\n", "", "transform_coeff", "=", "tf", ".", "signal", ".", "fft2d", "(", "tf", ".", "pad", "(", "conv_tr", ",", "padding", ")", ")", "\n", "singular_values", "=", "tf", ".", "linalg", ".", "svd", "(", "tf", ".", "transpose", "(", "transform_coeff", ",", "perm", "=", "[", "2", ",", "3", ",", "0", ",", "1", "]", ")", ",", "compute_uv", "=", "False", ")", "\n", "sv", "=", "singular_values", ".", "numpy", "(", ")", "\n", "\n", "", "return", "sv", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.Clip_OperatorNorm": [[57, 81], ["tensorflow.device", "tensorflow.constant", "tf.constant.get_shape().as_list", "tensorflow.constant", "tensorflow.signal.fft2d", "tensorflow.linalg.svd", "tensorflow.reduce_max", "tensorflow.cast", "tensorflow.matmul", "tensorflow.math.real", "tensorflow.slice", "clipped_filter.numpy.numpy", "tensorflow.pad", "tensorflow.transpose", "tensorflow.minimum", "tensorflow.matmul", "tensorflow.signal.ifft2d", "tf.constant.get_shape", "tensorflow.linalg.diag", "tensorflow.transpose", "len"], "function", ["None"], ["", "def", "Clip_OperatorNorm", "(", "filter", ",", "inp_shape", ",", "clip_to", ",", "device", "=", "'/gpu:0'", ")", ":", "\n", "# filter = np.transpose(filter, (2, 3, 0, 1))", "\n", "\n", "    ", "with", "tf", ".", "device", "(", "device", ")", ":", "\n", "        ", "conv_tr", "=", "tf", ".", "constant", "(", "filter", ",", "dtype", "=", "tf", ".", "complex64", ")", "\n", "conv_shape", "=", "conv_tr", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "padding", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "inp_shape", "[", "0", "]", "-", "conv_shape", "[", "2", "]", "]", ",", "# height", "\n", "[", "0", ",", "inp_shape", "[", "1", "]", "-", "conv_shape", "[", "3", "]", "]", "]", ")", "# width", "\n", "if", "inp_shape", "[", "0", "]", "-", "conv_shape", "[", "2", "]", "<", "0", "or", "inp_shape", "[", "1", "]", "-", "conv_shape", "[", "3", "]", "<", "0", ":", "\n", "            ", "return", "# the input is smaller than kernel...", "\n", "", "transform_coeff", "=", "tf", ".", "signal", ".", "fft2d", "(", "tf", ".", "pad", "(", "conv_tr", ",", "padding", ")", ")", "\n", "D", ",", "U", ",", "V", "=", "tf", ".", "linalg", ".", "svd", "(", "tf", ".", "transpose", "(", "transform_coeff", ",", "perm", "=", "[", "2", ",", "3", ",", "0", ",", "1", "]", ")", ")", "\n", "norm", "=", "tf", ".", "reduce_max", "(", "D", ")", "\n", "D_clipped", "=", "tf", ".", "cast", "(", "tf", ".", "minimum", "(", "D", ",", "clip_to", ")", ",", "tf", ".", "complex64", ")", "\n", "clipped_coeff", "=", "tf", ".", "matmul", "(", "U", ",", "tf", ".", "matmul", "(", "tf", ".", "linalg", ".", "diag", "(", "D_clipped", ")", ",", "\n", "V", ",", "adjoint_b", "=", "True", ")", ")", "\n", "clipped_conv_padded", "=", "tf", ".", "math", ".", "real", "(", "tf", ".", "signal", ".", "ifft2d", "(", "\n", "tf", ".", "transpose", "(", "clipped_coeff", ",", "perm", "=", "[", "2", ",", "3", ",", "0", ",", "1", "]", ")", ")", ")", "\n", "clipped_filter", "=", "tf", ".", "slice", "(", "clipped_conv_padded", ",", "\n", "[", "0", "]", "*", "len", "(", "conv_shape", ")", ",", "conv_shape", ")", "\n", "clipped_filter", "=", "clipped_filter", ".", "numpy", "(", ")", "\n", "\n", "", "return", "clipped_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.clip_conv": [[83, 96], ["net.modules", "classname.find", "m.weight.size", "m.weight.data.cpu().numpy", "conv2d_sv.Clip_OperatorNorm", "torch.from_numpy", "m.weight.data.copy_", "m.weight.data.cpu"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.Clip_OperatorNorm"], ["", "def", "clip_conv", "(", "net", ",", "clip_to", ")", ":", "\n", "    ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", ":", "\n", "            ", "_", ",", "_", ",", "k1", ",", "k2", "=", "m", ".", "weight", ".", "size", "(", ")", "\n", "h", ",", "w", "=", "m", ".", "inp_shape", "\n", "if", "h", "<", "k1", "or", "w", "<", "k2", ":", "\n", "                ", "continue", "\n", "", "kernel", "=", "m", ".", "weight", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "kernel", "=", "Clip_OperatorNorm", "(", "kernel", ",", "m", ".", "inp_shape", ",", "clip_to", ")", "\n", "if", "kernel", "is", "not", "None", ":", "\n", "                ", "kernel", "=", "torch", ".", "from_numpy", "(", "kernel", ")", "\n", "m", ".", "weight", ".", "data", ".", "copy_", "(", "kernel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.record_input_size": [[98, 104], ["net.modules", "classname.find", "conv2d_sv.bind"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.bind"], ["", "", "", "", "def", "record_input_size", "(", "net", ")", ":", "\n", "    ", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv2d'", ")", "!=", "-", "1", ":", "\n", "            ", "m", ".", "_original_forward_", "=", "m", ".", "forward", "\n", "bind", "(", "m", ",", "forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.forward": [[106, 111], ["conv2d_sv.._original_forward_", "hasattr", "x.size"], "function", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "self", ",", "'inp_shape'", ")", ":", "\n", "        ", "_", ",", "_", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "self", ".", "inp_shape", "=", "(", "h", ",", "w", ")", "\n", "", "return", "self", ".", "_original_forward_", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.bind": [[113, 124], ["func.__get__", "setattr", "conv2d_sv.forward"], "function", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.regularization.conv2d_sv.forward"], ["", "def", "bind", "(", "instance", ",", "func", ",", "as_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Bind the function *func* to *instance*, with either provided name *as_name*\n    or the existing name of *func*. The provided *func* should accept the \n    instance as the first argument, i.e. \"self\".\n    \"\"\"", "\n", "if", "as_name", "is", "None", ":", "\n", "        ", "as_name", "=", "func", ".", "__name__", "\n", "", "bound_method", "=", "func", ".", "__get__", "(", "instance", ",", "instance", ".", "__class__", ")", "\n", "setattr", "(", "instance", ",", "as_name", ",", "bound_method", ")", "\n", "return", "bound_method", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_tf.FABAttack.__init__": [[42, 74], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "norm", "=", "'Linf'", ",", "\n", "n_restarts", "=", "1", ",", "\n", "n_iter", "=", "100", ",", "\n", "eps", "=", "None", ",", "\n", "alpha_max", "=", "0.1", ",", "\n", "eta", "=", "1.05", ",", "\n", "beta", "=", "0.9", ",", "\n", "loss_fn", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "seed", "=", "0", ",", "\n", "targeted", "=", "False", ",", "\n", "device", "=", "None", ",", "\n", "n_target_classes", "=", "9", ")", ":", "\n", "        ", "\"\"\" FAB-attack implementation in pytorch \"\"\"", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "n_restarts", "=", "n_restarts", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "eps", "=", "eps", "if", "eps", "is", "not", "None", "else", "DEFAULT_EPS_DICT_BY_NORM", "[", "norm", "]", "\n", "self", ".", "alpha_max", "=", "alpha_max", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "targeted", "=", "False", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "target_class", "=", "None", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_target_classes", "=", "n_target_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_tf.FABAttack._get_predicted_label": [[75, 80], ["torch.max", "torch.no_grad", "fab_tf.FABAttack.model.predict"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict"], ["", "def", "_get_predicted_label", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "self", ".", "model", ".", "predict", "(", "x", ")", "\n", "", "_", ",", "y", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_tf.FABAttack.check_shape": [[81, 83], ["x.unsqueeze", "len"], "methods", ["None"], ["", "def", "check_shape", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "if", "len", "(", "x", ".", "shape", ")", ">", "0", "else", "x", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_tf.FABAttack.get_diff_logits_grads_batch": [[84, 93], ["fab_tf.FABAttack.model.grad_logits", "fab_tf.FABAttack.model.predict", "y2[].unsqueeze", "g2[].unsqueeze", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.grad_logits", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict"], ["", "def", "get_diff_logits_grads_batch", "(", "self", ",", "imgs", ",", "la", ")", ":", "\n", "### TODO: get both gradients and values with a single pass", "\n", "        ", "g2", "=", "self", ".", "model", ".", "grad_logits", "(", "imgs", ")", "\n", "y2", "=", "self", ".", "model", ".", "predict", "(", "imgs", ")", "\n", "df", "=", "y2", "-", "y2", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la", "]", ".", "unsqueeze", "(", "1", ")", "\n", "dg", "=", "g2", "-", "g2", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la", "]", ".", "unsqueeze", "(", "1", ")", "\n", "df", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la", "]", "=", "1e10", "\n", "\n", "return", "df", ",", "dg", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_tf.FABAttack.get_diff_logits_grads_batch_targeted": [[94, 98], ["fab_tf.FABAttack.model.get_grad_diff_logits_target"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.get_grad_diff_logits_target"], ["", "def", "get_diff_logits_grads_batch_targeted", "(", "self", ",", "imgs", ",", "la", ",", "la_target", ")", ":", "\n", "        ", "df", ",", "dg", "=", "self", ".", "model", ".", "get_grad_diff_logits_target", "(", "imgs", ",", "la", ",", "la_target", ")", "\n", "\n", "return", "df", ",", "dg", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_tf.FABAttack.projection_linf": [[100, 173], ["points_to_project.clone", "w_hyperplane.clone", "b_hyperplane.clone", "fab_tf.FABAttack.check_shape", "torch.ones().to", "torch.argsort", "b0.clone", "torch.argsort.unsqueeze().flip().squeeze", "torch.arange", "torch.cumsum", "fab_tf.FABAttack.check_shape", "fab_tf.FABAttack.check_shape", "torch.zeros", "torch.ceil", "torch.zeros().long", "lb.long.long.long", "torch.max().unsqueeze", "ws.abs", "torch.cumsum", "b0.unsqueeze", "torch.ones", "torch.log2", "torch.floor", "torch.floor.long", "c.nonzero().squeeze", "fab_tf.FABAttack.check_shape", "fab_tf.FABAttack.check_shape", "torch.max().unsqueeze", "torch.ones", "torch.ones().to", "torch.argsort.unsqueeze().flip", "torch.tensor().float", "torch.zeros", "torch.max", "torch.min", "torch.max", "torch.arange.unsqueeze", "c.nonzero", "torch.max", "torch.zeros().to", "torch.ones", "torch.argsort.unsqueeze", "torch.arange.unsqueeze", "torch.tensor", "torch.zeros().to", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape"], ["", "def", "projection_linf", "(", "self", ",", "points_to_project", ",", "w_hyperplane", ",", "b_hyperplane", ")", ":", "\n", "        ", "t", "=", "points_to_project", ".", "clone", "(", ")", "\n", "w", "=", "w_hyperplane", ".", "clone", "(", ")", "\n", "b", "=", "b_hyperplane", ".", "clone", "(", ")", "\n", "\n", "ind2", "=", "(", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "-", "b", "<", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind2", "=", "self", ".", "check_shape", "(", "ind2", ")", "\n", "w", "[", "ind2", "]", "*=", "-", "1", "\n", "b", "[", "ind2", "]", "*=", "-", "1", "\n", "\n", "c5", "=", "(", "w", "<", "0", ")", ".", "float", "(", ")", "\n", "a", "=", "torch", ".", "ones", "(", "t", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "d", "=", "(", "a", "*", "c5", "-", "t", ")", "*", "(", "w", "!=", "0", ")", ".", "float", "(", ")", "\n", "a", "-=", "a", "*", "(", "1", "-", "c5", ")", "\n", "\n", "p", "=", "torch", ".", "ones", "(", "t", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "*", "c5", "-", "t", "*", "(", "2", "*", "c5", "-", "1", ")", "\n", "indp", "=", "torch", ".", "argsort", "(", "p", ",", "dim", "=", "1", ")", "\n", "\n", "b", "=", "b", "-", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "\n", "b0", "=", "(", "w", "*", "d", ")", ".", "sum", "(", "1", ")", "\n", "b1", "=", "b0", ".", "clone", "(", ")", "\n", "\n", "counter", "=", "0", "\n", "indp2", "=", "indp", ".", "unsqueeze", "(", "-", "1", ")", ".", "flip", "(", "dims", "=", "(", "1", ",", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "u", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "0", "]", ")", "\n", "ws", "=", "w", "[", "u", ".", "unsqueeze", "(", "1", ")", ",", "indp2", "]", "\n", "bs2", "=", "-", "ws", "*", "d", "[", "u", ".", "unsqueeze", "(", "1", ")", ",", "indp2", "]", "\n", "\n", "s", "=", "torch", ".", "cumsum", "(", "ws", ".", "abs", "(", ")", ",", "dim", "=", "1", ")", "\n", "sb", "=", "torch", ".", "cumsum", "(", "bs2", ",", "dim", "=", "1", ")", "+", "b0", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "c", "=", "b", "-", "b1", ">", "0", "\n", "b2", "=", "sb", "[", "u", ",", "-", "1", "]", "-", "s", "[", "u", ",", "-", "1", "]", "*", "p", "[", "u", ",", "indp", "[", "u", ",", "0", "]", "]", "\n", "c_l", "=", "(", "b", "-", "b2", ">", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c2", "=", "(", "(", "b", "-", "b1", ">", "0", ")", "*", "(", "b", "-", "b2", "<=", "0", ")", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c_l", "=", "self", ".", "check_shape", "(", "c_l", ")", "\n", "c2", "=", "self", ".", "check_shape", "(", "c2", ")", "\n", "\n", "lb", "=", "torch", ".", "zeros", "(", "c2", ".", "shape", "[", "0", "]", ")", "\n", "ub", "=", "torch", ".", "ones", "(", "c2", ".", "shape", "[", "0", "]", ")", "*", "(", "w", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "nitermax", "=", "torch", ".", "ceil", "(", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "w", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ")", ")", "\n", "counter2", "=", "torch", ".", "zeros", "(", "lb", ".", "shape", ")", ".", "long", "(", ")", "\n", "\n", "while", "counter", "<", "nitermax", ":", "\n", "            ", "counter4", "=", "torch", ".", "floor", "(", "(", "lb", "+", "ub", ")", "/", "2", ")", "\n", "counter2", "=", "counter4", ".", "long", "(", ")", "\n", "indcurr", "=", "indp", "[", "c2", ",", "-", "counter2", "-", "1", "]", "\n", "b2", "=", "sb", "[", "c2", ",", "counter2", "]", "-", "s", "[", "c2", ",", "counter2", "]", "*", "p", "[", "c2", ",", "indcurr", "]", "\n", "c", "=", "b", "[", "c2", "]", "-", "b2", ">", "0", "\n", "ind3", "=", "c", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind32", "=", "(", "~", "c", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind3", "=", "self", ".", "check_shape", "(", "ind3", ")", "\n", "ind32", "=", "self", ".", "check_shape", "(", "ind32", ")", "\n", "lb", "[", "ind3", "]", "=", "counter4", "[", "ind3", "]", "\n", "ub", "[", "ind32", "]", "=", "counter4", "[", "ind32", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "lb", "=", "lb", ".", "long", "(", ")", "\n", "counter2", "=", "0", "\n", "\n", "if", "c_l", ".", "nelement", "!=", "0", ":", "\n", "            ", "lmbd_opt", "=", "(", "torch", ".", "max", "(", "(", "b", "[", "c_l", "]", "-", "sb", "[", "c_l", ",", "-", "1", "]", ")", "/", "(", "-", "s", "[", "c_l", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "zeros", "(", "sb", "[", "c_l", ",", "-", "1", "]", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "d", "[", "c_l", "]", "=", "(", "2", "*", "a", "[", "c_l", "]", "-", "1", ")", "*", "lmbd_opt", "\n", "\n", "", "lmbd_opt", "=", "(", "torch", ".", "max", "(", "(", "b", "[", "c2", "]", "-", "sb", "[", "c2", ",", "lb", "]", ")", "/", "(", "-", "s", "[", "c2", ",", "lb", "]", ")", ",", "\n", "torch", ".", "zeros", "(", "sb", "[", "c2", ",", "lb", "]", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "d", "[", "c2", "]", "=", "torch", ".", "min", "(", "lmbd_opt", ",", "d", "[", "c2", "]", ")", "*", "c5", "[", "c2", "]", "+", "torch", ".", "max", "(", "-", "lmbd_opt", ",", "d", "[", "c2", "]", ")", "*", "(", "1", "-", "c5", "[", "c2", "]", ")", "\n", "\n", "return", "d", "*", "(", "w", "!=", "0", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_tf.FABAttack.projection_l2": [[174, 251], ["points_to_project.clone", "w_hyperplane.clone", "b_hyperplane.clone", "fab_tf.FABAttack.check_shape", "torch.arange().unsqueeze", "torch.max", "torch.ones().to", "torch.min", "torch.max", "torch.sort", "torch.cat", "w3s.sum", "torch.cat", "c4.nonzero().squeeze", "fab_tf.FABAttack.check_shape", "fab_tf.FABAttack.check_shape", "torch.zeros", "torch.ceil", "torch.zeros().long", "lb.long.long.long", "torch.zeros", "torch.cumsum", "torch.ones", "torch.log2", "torch.floor", "torch.floor.long", "c3.nonzero().squeeze", "fab_tf.FABAttack.check_shape", "fab_tf.FABAttack.check_shape", "fab_tf.FABAttack.nelement", "fab_tf.FABAttack.nelement", "torch.arange", "torch.ones", "torch.zeros().to", "c4.nonzero", "torch.tensor().float", "torch.zeros", "w5[].squeeze", "torch.sum", "fab_tf.FABAttack.check_shape", "w_hyperplane.clone.abs", "torch.cumsum", "c3.nonzero", "torch.zeros.unsqueeze", "torch.zeros", "w_hyperplane.clone.abs", "rs[].unsqueeze", "torch.tensor", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "w_hyperplane.clone.abs", "w3s.sum.squeeze", "c4.float", "c3.float"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape"], ["", "def", "projection_l2", "(", "self", ",", "points_to_project", ",", "w_hyperplane", ",", "b_hyperplane", ")", ":", "\n", "        ", "t", "=", "points_to_project", ".", "clone", "(", ")", "\n", "w", "=", "w_hyperplane", ".", "clone", "(", ")", "\n", "b", "=", "b_hyperplane", ".", "clone", "(", ")", "\n", "\n", "c", "=", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "-", "b", "\n", "ind2", "=", "(", "c", "<", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind2", "=", "self", ".", "check_shape", "(", "ind2", ")", "\n", "w", "[", "ind2", "]", "*=", "-", "1", "\n", "c", "[", "ind2", "]", "*=", "-", "1", "\n", "\n", "u", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "r", "=", "torch", ".", "max", "(", "t", "/", "w", ",", "(", "t", "-", "1", ")", "/", "w", ")", "\n", "u2", "=", "torch", ".", "ones", "(", "r", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "r", "=", "torch", ".", "min", "(", "r", ",", "1e12", "*", "u2", ")", "\n", "r", "=", "torch", ".", "max", "(", "r", ",", "-", "1e12", "*", "u2", ")", "\n", "r", "[", "w", ".", "abs", "(", ")", "<", "1e-8", "]", "=", "1e12", "\n", "r", "[", "r", "==", "-", "1e12", "]", "=", "-", "r", "[", "r", "==", "-", "1e12", "]", "\n", "rs", ",", "indr", "=", "torch", ".", "sort", "(", "r", ",", "dim", "=", "1", ")", "\n", "rs2", "=", "torch", ".", "cat", "(", "(", "rs", "[", ":", ",", "1", ":", "]", ",", "\n", "torch", ".", "zeros", "(", "rs", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", ",", "1", ")", "\n", "rs", "[", "rs", "==", "1e12", "]", "=", "0", "\n", "rs2", "[", "rs2", "==", "1e12", "]", "=", "0", "\n", "\n", "w3", "=", "w", "**", "2", "\n", "w3s", "=", "w3", "[", "u", ",", "indr", "]", "\n", "w5", "=", "w3s", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "ws", "=", "w5", "-", "torch", ".", "cumsum", "(", "w3s", ",", "dim", "=", "1", ")", "\n", "d", "=", "-", "(", "r", "*", "w", ")", ".", "clone", "(", ")", "\n", "d", "=", "d", "*", "(", "w", ".", "abs", "(", ")", ">", "1e-8", ")", ".", "float", "(", ")", "\n", "s", "=", "torch", ".", "cat", "(", "(", "(", "-", "w5", ".", "squeeze", "(", ")", "*", "rs", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "torch", ".", "cumsum", "(", "(", "-", "rs2", "+", "rs", ")", "*", "ws", ",", "dim", "=", "1", ")", "-", "\n", "w5", "*", "rs", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "1", ")", "\n", "\n", "c4", "=", "(", "s", "[", ":", ",", "0", "]", "+", "c", "<", "0", ")", "\n", "c3", "=", "(", "(", "d", "*", "w", ")", ".", "sum", "(", "dim", "=", "1", ")", "+", "c", ">", "0", ")", "\n", "c6", "=", "c4", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c2", "=", "(", "(", "1", "-", "c4", ".", "float", "(", ")", ")", "*", "(", "1", "-", "c3", ".", "float", "(", ")", ")", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c6", "=", "self", ".", "check_shape", "(", "c6", ")", "\n", "c2", "=", "self", ".", "check_shape", "(", "c2", ")", "\n", "\n", "counter", "=", "0", "\n", "lb", "=", "torch", ".", "zeros", "(", "c2", ".", "shape", "[", "0", "]", ")", "\n", "ub", "=", "torch", ".", "ones", "(", "c2", ".", "shape", "[", "0", "]", ")", "*", "(", "w", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "nitermax", "=", "torch", ".", "ceil", "(", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "w", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ")", ")", "\n", "counter2", "=", "torch", ".", "zeros", "(", "lb", ".", "shape", ")", ".", "long", "(", ")", "\n", "\n", "while", "counter", "<", "nitermax", ":", "\n", "            ", "counter4", "=", "torch", ".", "floor", "(", "(", "lb", "+", "ub", ")", "/", "2", ")", "\n", "counter2", "=", "counter4", ".", "long", "(", ")", "\n", "c3", "=", "s", "[", "c2", ",", "counter2", "]", "+", "c", "[", "c2", "]", ">", "0", "\n", "ind3", "=", "c3", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind32", "=", "(", "~", "c3", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind3", "=", "self", ".", "check_shape", "(", "ind3", ")", "\n", "ind32", "=", "self", ".", "check_shape", "(", "ind32", ")", "\n", "lb", "[", "ind3", "]", "=", "counter4", "[", "ind3", "]", "\n", "ub", "[", "ind32", "]", "=", "counter4", "[", "ind32", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "lb", "=", "lb", ".", "long", "(", ")", "\n", "alpha", "=", "torch", ".", "zeros", "(", "[", "1", "]", ")", "\n", "\n", "if", "c6", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "alpha", "=", "c", "[", "c6", "]", "/", "w5", "[", "c6", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "d", "[", "c6", "]", "=", "-", "alpha", ".", "unsqueeze", "(", "-", "1", ")", "*", "w", "[", "c6", "]", "\n", "\n", "", "if", "c2", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "alpha", "=", "(", "s", "[", "c2", ",", "lb", "]", "+", "c", "[", "c2", "]", ")", "/", "ws", "[", "c2", ",", "lb", "]", "+", "rs", "[", "c2", ",", "lb", "]", "\n", "if", "torch", ".", "sum", "(", "ws", "[", "c2", ",", "lb", "]", "==", "0", ")", ">", "0", ":", "\n", "                ", "ind", "=", "(", "ws", "[", "c2", ",", "lb", "]", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", "\n", "ind", "=", "self", ".", "check_shape", "(", "ind", ")", "\n", "alpha", "[", "ind", "]", "=", "0", "\n", "", "c5", "=", "(", "alpha", ".", "unsqueeze", "(", "-", "1", ")", ">", "r", "[", "c2", "]", ")", ".", "float", "(", ")", "\n", "d", "[", "c2", "]", "=", "d", "[", "c2", "]", "*", "c5", "-", "alpha", ".", "unsqueeze", "(", "-", "1", ")", "*", "w", "[", "c2", "]", "*", "(", "1", "-", "c5", ")", "\n", "\n", "", "return", "d", "*", "(", "w", ".", "abs", "(", ")", ">", "1e-8", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_tf.FABAttack.projection_l1": [[252, 309], ["points_to_project.clone", "w_hyperplane.clone", "b_hyperplane.clone", "fab_tf.FABAttack.check_shape", "torch.max", "torch.min", "torch.sort", "torch.sort", "torch.arange().unsqueeze", "torch.arange().repeat", "torch.min", "torch.cat", "torch.cumsum", "c4.nonzero().squeeze", "fab_tf.FABAttack.check_shape", "torch.zeros", "torch.ceil", "torch.zeros().long", "torch.zeros.long", "torch.ones", "torch.log2", "torch.floor", "torch.floor.long", "c3.nonzero().squeeze", "fab_tf.FABAttack.check_shape", "fab_tf.FABAttack.check_shape", "fab_tf.FABAttack.nelement", "torch.ones().to", "torch.arange", "torch.arange", "c.unsqueeze", "c4.nonzero", "torch.tensor().float", "torch.zeros", "u2[].float", "torch.zeros.unsqueeze().float", "u3.float().to", "c3.nonzero", "torch.ones", "torch.tensor", "torch.zeros.unsqueeze", "u3.float", "w_hyperplane.clone.abs"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape"], ["", "def", "projection_l1", "(", "self", ",", "points_to_project", ",", "w_hyperplane", ",", "b_hyperplane", ")", ":", "\n", "        ", "t", "=", "points_to_project", ".", "clone", "(", ")", "\n", "w", "=", "w_hyperplane", ".", "clone", "(", ")", "\n", "b", "=", "b_hyperplane", ".", "clone", "(", ")", "\n", "\n", "c", "=", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "-", "b", "\n", "ind2", "=", "(", "c", "<", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind2", "=", "self", ".", "check_shape", "(", "ind2", ")", "\n", "w", "[", "ind2", "]", "*=", "-", "1", "\n", "c", "[", "ind2", "]", "*=", "-", "1", "\n", "\n", "r", "=", "torch", ".", "max", "(", "1", "/", "w", ",", "-", "1", "/", "w", ")", "\n", "r", "=", "torch", ".", "min", "(", "r", ",", "1e12", "*", "torch", ".", "ones", "(", "r", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "rs", ",", "indr", "=", "torch", ".", "sort", "(", "r", ",", "dim", "=", "1", ")", "\n", "_", ",", "indr_rev", "=", "torch", ".", "sort", "(", "indr", ")", "\n", "\n", "u", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "u2", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "1", "]", ")", ".", "repeat", "(", "w", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "c6", "=", "(", "w", "<", "0", ")", ".", "float", "(", ")", "\n", "d", "=", "(", "-", "t", "+", "c6", ")", "*", "(", "w", "!=", "0", ")", ".", "float", "(", ")", "\n", "d2", "=", "torch", ".", "min", "(", "-", "w", "*", "t", ",", "w", "*", "(", "1", "-", "t", ")", ")", "\n", "ds", "=", "d2", "[", "u", ",", "indr", "]", "\n", "ds2", "=", "torch", ".", "cat", "(", "(", "c", ".", "unsqueeze", "(", "-", "1", ")", ",", "ds", ")", ",", "1", ")", "\n", "s", "=", "torch", ".", "cumsum", "(", "ds2", ",", "dim", "=", "1", ")", "\n", "\n", "c4", "=", "s", "[", ":", ",", "-", "1", "]", "<", "0", "\n", "c2", "=", "c4", ".", "nonzero", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "c2", "=", "self", ".", "check_shape", "(", "c2", ")", "\n", "\n", "counter", "=", "0", "\n", "lb", "=", "torch", ".", "zeros", "(", "c2", ".", "shape", "[", "0", "]", ")", "\n", "ub", "=", "torch", ".", "ones", "(", "c2", ".", "shape", "[", "0", "]", ")", "*", "(", "s", ".", "shape", "[", "1", "]", ")", "\n", "nitermax", "=", "torch", ".", "ceil", "(", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "s", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ")", ")", "\n", "counter2", "=", "torch", ".", "zeros", "(", "lb", ".", "shape", ")", ".", "long", "(", ")", "\n", "\n", "while", "counter", "<", "nitermax", ":", "\n", "            ", "counter4", "=", "torch", ".", "floor", "(", "(", "lb", "+", "ub", ")", "/", "2", ")", "\n", "counter2", "=", "counter4", ".", "long", "(", ")", "\n", "c3", "=", "s", "[", "c2", ",", "counter2", "]", ">", "0", "\n", "ind3", "=", "c3", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind32", "=", "(", "~", "c3", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind3", "=", "self", ".", "check_shape", "(", "ind3", ")", "\n", "ind32", "=", "self", ".", "check_shape", "(", "ind32", ")", "\n", "lb", "[", "ind3", "]", "=", "counter4", "[", "ind3", "]", "\n", "ub", "[", "ind32", "]", "=", "counter4", "[", "ind32", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "lb2", "=", "lb", ".", "long", "(", ")", "\n", "\n", "if", "c2", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "alpha", "=", "-", "s", "[", "c2", ",", "lb2", "]", "/", "w", "[", "c2", ",", "indr", "[", "c2", ",", "lb2", "]", "]", "\n", "c5", "=", "u2", "[", "c2", "]", ".", "float", "(", ")", "<", "lb", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "u3", "=", "c5", "[", "u", "[", ":", "c5", ".", "shape", "[", "0", "]", "]", ",", "indr_rev", "[", "c2", "]", "]", "\n", "d", "[", "c2", "]", "=", "d", "[", "c2", "]", "*", "u3", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "d", "[", "c2", ",", "indr", "[", "c2", ",", "lb2", "]", "]", "=", "alpha", "\n", "\n", "", "return", "d", "*", "(", "w", ".", "abs", "(", ")", ">", "1e-8", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_tf.FABAttack.attack_single_run": [[310, 488], ["list", "len", "x.detach().clone().float().to.detach().clone().float().to.detach().clone().float().to", "fab_tf.FABAttack._get_predicted_label", "fab_tf.FABAttack.float().sum", "fab_tf.FABAttack.check_shape", "time.time", "x[].detach().clone", "y[].detach().clone", "torch.arange", "im2.unsqueeze.unsqueeze.clone", "x.detach().clone().float().to.detach().clone().float().to.clone", "torch.zeros().to", "im2.unsqueeze.unsqueeze.clone", "im2.unsqueeze.unsqueeze.clone().reshape", "fab_tf.FABAttack.check_shape", "adv[].clone", "fab_tf.FABAttack.detach().clone().long().to", "y.detach().clone().long().to.detach().clone().long().to.detach().clone().long().to", "print", "fab_tf.FABAttack.sum", "fab_tf.FABAttack.nonzero().squeeze", "len", "im2.unsqueeze.unsqueeze.unsqueeze", "torch.ones().to", "print", "fab_tf.FABAttack.nonzero().squeeze", "x.detach().clone().float().to.detach().clone().float().to.detach().clone().float", "fab_tf.FABAttack.float", "x[].detach", "y[].detach", "torch.zeros", "im2.unsqueeze.unsqueeze.clone", "x1.clamp.clamp.clamp", "fab_tf.FABAttack.float", "fab_tf.FABAttack.detach().clone().long", "y.detach().clone().long().to.detach().clone().long().to.detach().clone().long", "fab_tf.FABAttack.float().mean", "fab_tf.FABAttack.nonzero", "torch.ones", "torch.no_grad", "fab_tf.FABAttack.get_diff_logits_grads_batch", "dg2.reshape", "torch.reshape", "torch.reshape", "torch.max", "torch.min", "fab_tf.FABAttack.float", "fab_tf.FABAttack.nonzero", "x.detach().clone().float().to.detach().clone().float().to.detach().clone", "torch.randn().to", "dist1.min", "fab_tf.FABAttack.projection_linf", "[].view", "fab_tf.FABAttack._get_predicted_label", "is_adv.sum", "is_adv.nonzero().squeeze", "fab_tf.FABAttack.check_shape", "fab_tf.FABAttack.float().sum", "fab_tf.FABAttack.detach().clone", "y.detach().clone().long().to.detach().clone().long().to.detach().clone", "fab_tf.FABAttack.float", "torch.rand().to", "torch.randn().to", "df.abs", "torch.cat", "torch.cat", "torch.cat", "fab_tf.FABAttack.projection_l2", "torch.ones().to", "torch.max", "torch.ones().to", "time.time", "x.detach().clone().float().to.detach().clone().float().to.detach", "[].reshape", "torch.randn", "dg.abs().reshape().sum", "df.abs", "ValueError", "torch.cat", "torch.cat", "torch.cat", "fab_tf.FABAttack.projection_l1", "fab_tf.FABAttack.abs().sum().view", "torch.zeros().to", "is_adv.nonzero", "fab_tf.FABAttack.float", "fab_tf.FABAttack.detach", "y.detach().clone().long().to.detach().clone().long().to.detach", "torch.rand", "torch.min().reshape", "torch.randn", "df.abs", "x1.clamp.clamp.reshape", "torch.cat", "torch.cat", "torch.cat", "fab_tf.FABAttack.abs().max", "torch.ones", "torch.ones", "torch.min().reshape", "torch.randn().to.abs().view().sum().view", "dg.abs().reshape", "x1.clamp.clamp.reshape", "fab_tf.FABAttack.abs().sum", "torch.zeros", "torch.min", "torch.randn().to.reshape().abs().max", "torch.min().reshape", "dg.abs().reshape().max", "x1.clamp.clamp.reshape", "fab_tf.FABAttack.abs", "torch.min", "torch.randn().to.abs().view().sum", "dg.abs", "fab_tf.FABAttack.abs", "torch.ones().to", "torch.randn().to.reshape().abs", "torch.min", "dg.abs().reshape", "torch.ones().to", "torch.randn().to.abs().view", "torch.ones", "torch.randn().to.reshape", "torch.ones().to", "dg.abs", "torch.ones", "torch.randn().to.abs", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack._get_predicted_label", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.get_diff_logits_grads_batch", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_linf", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack._get_predicted_label", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_l2", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_l1"], ["", "def", "attack_single_run", "(", "self", ",", "x", ",", "y", "=", "None", ",", "use_rand_start", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param x:    clean images\n        :param y:    clean labels, if None we use the predicted labels\n        \"\"\"", "\n", "\n", "if", "self", ".", "device", "is", "None", ":", "\n", "            ", "self", ".", "device", "=", "x", ".", "device", "\n", "", "self", ".", "orig_dim", "=", "list", "(", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "self", ".", "ndims", "=", "len", "(", "self", ".", "orig_dim", ")", "\n", "\n", "x", "=", "x", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "#assert next(self.predict.parameters()).device == x.device", "\n", "\n", "y_pred", "=", "self", ".", "_get_predicted_label", "(", "x", ")", "\n", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "y_pred", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "y", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "pred", "=", "y_pred", "==", "y", "\n", "corr_classified", "=", "pred", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'Clean accuracy: {:.2%}'", ".", "format", "(", "pred", ".", "float", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "", "if", "pred", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "pred", "=", "self", ".", "check_shape", "(", "pred", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "startt", "=", "time", ".", "time", "(", ")", "\n", "# runs the attack only on correctly classified points", "\n", "im2", "=", "x", "[", "pred", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "la2", "=", "y", "[", "pred", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "if", "len", "(", "im2", ".", "shape", ")", "==", "self", ".", "ndims", ":", "\n", "            ", "im2", "=", "im2", ".", "unsqueeze", "(", "0", ")", "\n", "", "bs", "=", "im2", ".", "shape", "[", "0", "]", "\n", "u1", "=", "torch", ".", "arange", "(", "bs", ")", "\n", "adv", "=", "im2", ".", "clone", "(", ")", "\n", "adv_c", "=", "x", ".", "clone", "(", ")", "\n", "res2", "=", "1e10", "*", "torch", ".", "ones", "(", "[", "bs", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "res_c", "=", "torch", ".", "zeros", "(", "[", "x", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", ".", "clone", "(", ")", "\n", "x0", "=", "im2", ".", "clone", "(", ")", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", "\n", "counter_restarts", "=", "0", "\n", "\n", "while", "counter_restarts", "<", "1", ":", "\n", "            ", "if", "use_rand_start", ":", "\n", "                ", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                    ", "t", "=", "2", "*", "torch", ".", "rand", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "-", "1", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "t", ".", "reshape", "(", "[", "t", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", "\n", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", ")", "*", ".5", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                    ", "t", "=", "torch", ".", "randn", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "(", "t", "**", "2", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ".", "sqrt", "(", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "*", ".5", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                    ", "t", "=", "torch", ".", "randn", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "t", ".", "abs", "(", ")", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "/", "2", "\n", "\n", "", "x1", "=", "x1", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "", "counter_iter", "=", "0", "\n", "while", "counter_iter", "<", "self", ".", "n_iter", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "df", ",", "dg", "=", "self", ".", "get_diff_logits_grads_batch", "(", "x1", ",", "la2", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "\n", "dg", ".", "abs", "(", ")", "\n", ".", "reshape", "(", "dg", ".", "shape", "[", "0", "]", ",", "dg", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "# view(...)", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "(", "dg", "**", "2", ")", "\n", ".", "view", "(", "dg", ".", "shape", "[", "0", "]", ",", "dg", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "dg", ".", "abs", "(", ")", ".", "reshape", "(", "\n", "[", "df", ".", "shape", "[", "0", "]", ",", "df", ".", "shape", "[", "1", "]", ",", "-", "1", "]", ")", ".", "max", "(", "dim", "=", "2", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'norm not supported'", ")", "\n", "", "ind", "=", "dist1", ".", "min", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "dg2", "=", "dg", "[", "u1", ",", "ind", "]", "\n", "b", "=", "(", "-", "df", "[", "u1", ",", "ind", "]", "+", "(", "dg2", "*", "x1", ")", ".", "reshape", "(", "x1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "# view(...)", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "w", "=", "dg2", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", "\n", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_linf", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_l2", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_l1", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "d1", "=", "torch", ".", "reshape", "(", "d3", "[", ":", "bs", "]", ",", "x1", ".", "shape", ")", "\n", "d2", "=", "torch", ".", "reshape", "(", "d3", "[", "-", "bs", ":", "]", ",", "x1", ".", "shape", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "a0", "=", "d3", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "a0", "=", "(", "d3", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "a0", "=", "d3", ".", "abs", "(", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "a0", "=", "torch", ".", "max", "(", "a0", ",", "1e-8", "*", "torch", ".", "ones", "(", "\n", "a0", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "a1", "=", "a0", "[", ":", "bs", "]", "\n", "a2", "=", "a0", "[", "-", "bs", ":", "]", "\n", "alpha", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "a1", "/", "(", "a1", "+", "a2", ")", ",", "\n", "torch", ".", "zeros", "(", "a1", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", ",", "\n", "self", ".", "alpha_max", "*", "torch", ".", "ones", "(", "a1", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "x1", "=", "(", "(", "x1", "+", "self", ".", "eta", "*", "d1", ")", "*", "(", "1", "-", "alpha", ")", "+", "\n", "(", "im2", "+", "d2", "*", "self", ".", "eta", ")", "*", "alpha", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "is_adv", "=", "self", ".", "_get_predicted_label", "(", "x1", ")", "!=", "la2", "\n", "\n", "if", "is_adv", ".", "sum", "(", ")", ">", "0", ":", "\n", "                        ", "ind_adv", "=", "is_adv", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind_adv", "=", "self", ".", "check_shape", "(", "ind_adv", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                            ", "t", "=", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", ".", "reshape", "(", "\n", "[", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                            ", "t", "=", "(", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", "**", "2", ")", ".", "view", "(", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                            ", "t", "=", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", ".", "abs", "(", ")", ".", "view", "(", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "adv", "[", "ind_adv", "]", "=", "x1", "[", "ind_adv", "]", "*", "(", "t", "<", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "+", "adv", "[", "ind_adv", "]", "*", "(", "t", ">=", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "\n", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", "res2", "[", "ind_adv", "]", "=", "t", "*", "(", "t", "<", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", "+", "res2", "[", "ind_adv", "]", "*", "(", "t", ">=", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", "\n", "x1", "[", "ind_adv", "]", "=", "im2", "[", "ind_adv", "]", "+", "(", "\n", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", "*", "self", ".", "beta", "\n", "\n", "", "counter_iter", "+=", "1", "\n", "\n", "", "", "counter_restarts", "+=", "1", "\n", "\n", "", "ind_succ", "=", "res2", "<", "1e10", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'success rate: {:.0f}/{:.0f}'", "\n", ".", "format", "(", "ind_succ", ".", "float", "(", ")", ".", "sum", "(", ")", ",", "corr_classified", ")", "+", "\n", "' (on correctly classified points) in {:.1f} s'", "\n", ".", "format", "(", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "res_c", "[", "pred", "]", "=", "res2", "*", "ind_succ", ".", "float", "(", ")", "+", "1e10", "*", "(", "1", "-", "ind_succ", ".", "float", "(", ")", ")", "\n", "ind_succ", "=", "self", ".", "check_shape", "(", "ind_succ", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "adv_c", "[", "pred", "[", "ind_succ", "]", "]", "=", "adv", "[", "ind_succ", "]", ".", "clone", "(", ")", "\n", "\n", "return", "adv_c", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_tf.FABAttack.attack_single_run_targeted": [[489, 681], ["list", "len", "x.detach().clone().float().to.detach().clone().float().to.detach().clone().float().to", "fab_tf.FABAttack._get_predicted_label", "fab_tf.FABAttack.float().sum", "fab_tf.FABAttack.check_shape", "fab_tf.FABAttack.model.predict", "time.time", "x[].detach().clone", "y[].detach().clone", "la_target[].detach().clone", "fab_tf.FABAttack.model.set_target_class", "torch.arange", "im2.unsqueeze.unsqueeze.clone", "x.detach().clone().float().to.detach().clone().float().to.clone", "torch.zeros().to", "im2.unsqueeze.unsqueeze.clone", "im2.unsqueeze.unsqueeze.clone().reshape", "fab_tf.FABAttack.check_shape", "adv[].clone", "fab_tf.FABAttack.detach().clone().long().to", "y.detach().clone().long().to.detach().clone().long().to.detach().clone().long().to", "print", "fab_tf.FABAttack.sum", "fab_tf.FABAttack.nonzero().squeeze", "len", "im2.unsqueeze.unsqueeze.unsqueeze", "torch.ones().to", "print", "fab_tf.FABAttack.nonzero().squeeze", "x.detach().clone().float().to.detach().clone().float().to.detach().clone().float", "fab_tf.FABAttack.float", "fab_tf.FABAttack.sort", "x[].detach", "y[].detach", "la_target[].detach", "torch.zeros", "im2.unsqueeze.unsqueeze.clone", "x1.clamp.clamp.clamp", "fab_tf.FABAttack.float", "fab_tf.FABAttack.detach().clone().long", "y.detach().clone().long().to.detach().clone().long().to.detach().clone().long", "fab_tf.FABAttack.float().mean", "fab_tf.FABAttack.nonzero", "torch.ones", "torch.no_grad", "fab_tf.FABAttack.get_diff_logits_grads_batch_targeted", "dg2.reshape", "torch.reshape", "torch.reshape", "torch.max", "torch.min", "fab_tf.FABAttack.float", "fab_tf.FABAttack.nonzero", "x.detach().clone().float().to.detach().clone().float().to.detach().clone", "torch.randn().to", "len", "df.unsqueeze_", "dg.unsqueeze_", "dist1.min", "fab_tf.FABAttack.projection_linf", "[].view", "fab_tf.FABAttack._get_predicted_label", "is_adv.sum", "is_adv.nonzero().squeeze", "fab_tf.FABAttack.check_shape", "fab_tf.FABAttack.float().sum", "fab_tf.FABAttack.detach().clone", "y.detach().clone().long().to.detach().clone().long().to.detach().clone", "fab_tf.FABAttack.float", "torch.rand().to", "torch.randn().to", "df.abs", "torch.cat", "torch.cat", "torch.cat", "fab_tf.FABAttack.projection_l2", "torch.ones().to", "torch.max", "torch.ones().to", "time.time", "x.detach().clone().float().to.detach().clone().float().to.detach", "[].reshape", "torch.randn", "dg.abs().reshape().sum", "df.abs", "ValueError", "torch.cat", "torch.cat", "torch.cat", "fab_tf.FABAttack.projection_l1", "fab_tf.FABAttack.abs().sum().view", "torch.zeros().to", "is_adv.nonzero", "fab_tf.FABAttack.float", "fab_tf.FABAttack.detach", "y.detach().clone().long().to.detach().clone().long().to.detach", "torch.rand", "torch.min().reshape", "torch.randn", "df.abs", "x1.clamp.clamp.reshape", "torch.cat", "torch.cat", "torch.cat", "fab_tf.FABAttack.abs().max", "torch.ones", "torch.ones", "torch.min().reshape", "torch.randn().to.abs().view().sum().view", "dg.abs().reshape", "x1.clamp.clamp.reshape", "fab_tf.FABAttack.abs().sum", "torch.zeros", "torch.min", "torch.randn().to.reshape().abs().max", "torch.min().reshape", "dg.abs().reshape().max", "x1.clamp.clamp.reshape", "fab_tf.FABAttack.abs", "torch.min", "torch.randn().to.abs().view().sum", "dg.abs", "fab_tf.FABAttack.abs", "torch.ones().to", "torch.randn().to.reshape().abs", "torch.min", "dg.abs().reshape", "torch.ones().to", "torch.randn().to.abs().view", "torch.ones", "torch.randn().to.reshape", "torch.ones().to", "dg.abs", "torch.ones", "torch.randn().to.abs", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack._get_predicted_label", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.set_target_class", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.get_diff_logits_grads_batch_targeted", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_linf", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack._get_predicted_label", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_l2", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_l1"], ["", "def", "attack_single_run_targeted", "(", "self", ",", "x", ",", "y", "=", "None", ",", "use_rand_start", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param x:    clean images\n        :param y:    clean labels, if None we use the predicted labels\n        \"\"\"", "\n", "\n", "self", ".", "device", "=", "x", ".", "device", "\n", "self", ".", "orig_dim", "=", "list", "(", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "self", ".", "ndims", "=", "len", "(", "self", ".", "orig_dim", ")", "\n", "\n", "x", "=", "x", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "#assert next(self.predict.parameters()).device == x.device", "\n", "\n", "y_pred", "=", "self", ".", "_get_predicted_label", "(", "x", ")", "\n", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "y_pred", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "y", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "pred", "=", "y_pred", "==", "y", "\n", "corr_classified", "=", "pred", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'Clean accuracy: {:.2%}'", ".", "format", "(", "pred", ".", "float", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "", "if", "pred", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "pred", "=", "self", ".", "check_shape", "(", "pred", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "output", "=", "self", ".", "model", ".", "predict", "(", "x", ")", "\n", "la_target", "=", "output", ".", "sort", "(", "dim", "=", "-", "1", ")", "[", "1", "]", "[", ":", ",", "-", "self", ".", "target_class", "]", "\n", "\n", "# set target class", "\n", "#self.model.set_target_class(y, la_target)", "\n", "\n", "startt", "=", "time", ".", "time", "(", ")", "\n", "# runs the attack only on correctly classified points", "\n", "im2", "=", "x", "[", "pred", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "la2", "=", "y", "[", "pred", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "la_target2", "=", "la_target", "[", "pred", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "# set target class for correcty classified points", "\n", "self", ".", "model", ".", "set_target_class", "(", "la2", ",", "la_target2", ")", "\n", "\n", "if", "len", "(", "im2", ".", "shape", ")", "==", "self", ".", "ndims", ":", "\n", "            ", "im2", "=", "im2", ".", "unsqueeze", "(", "0", ")", "\n", "", "bs", "=", "im2", ".", "shape", "[", "0", "]", "\n", "u1", "=", "torch", ".", "arange", "(", "bs", ")", "\n", "adv", "=", "im2", ".", "clone", "(", ")", "\n", "adv_c", "=", "x", ".", "clone", "(", ")", "\n", "res2", "=", "1e10", "*", "torch", ".", "ones", "(", "[", "bs", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "res_c", "=", "torch", ".", "zeros", "(", "[", "x", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", ".", "clone", "(", ")", "\n", "x0", "=", "im2", ".", "clone", "(", ")", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", "\n", "counter_restarts", "=", "0", "\n", "\n", "while", "counter_restarts", "<", "1", ":", "\n", "            ", "if", "use_rand_start", ":", "\n", "                ", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                    ", "t", "=", "2", "*", "torch", ".", "rand", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "-", "1", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "t", ".", "reshape", "(", "[", "t", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", "\n", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", ")", "*", ".5", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                    ", "t", "=", "torch", ".", "randn", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "(", "t", "**", "2", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ".", "sqrt", "(", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "*", ".5", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                    ", "t", "=", "torch", ".", "randn", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "t", ".", "abs", "(", ")", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "/", "2", "\n", "\n", "", "x1", "=", "x1", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "", "counter_iter", "=", "0", "\n", "while", "counter_iter", "<", "self", ".", "n_iter", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "df", ",", "dg", "=", "self", ".", "get_diff_logits_grads_batch_targeted", "(", "x1", ",", "la2", ",", "la_target2", ")", "\n", "if", "len", "(", "df", ".", "shape", ")", "==", "1", ":", "\n", "                        ", "df", ".", "unsqueeze_", "(", "1", ")", "\n", "dg", ".", "unsqueeze_", "(", "1", ")", "\n", "", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "\n", "dg", ".", "abs", "(", ")", "\n", ".", "reshape", "(", "dg", ".", "shape", "[", "0", "]", ",", "dg", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "(", "dg", "**", "2", ")", "\n", ".", "reshape", "(", "dg", ".", "shape", "[", "0", "]", ",", "dg", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "dg", ".", "abs", "(", ")", ".", "reshape", "(", "\n", "[", "df", ".", "shape", "[", "0", "]", ",", "df", ".", "shape", "[", "1", "]", ",", "-", "1", "]", ")", ".", "max", "(", "dim", "=", "2", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'norm not supported'", ")", "\n", "", "ind", "=", "dist1", ".", "min", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "#print(ind)", "\n", "dg2", "=", "dg", "[", "u1", ",", "ind", "]", "\n", "b", "=", "(", "-", "df", "[", "u1", ",", "ind", "]", "+", "(", "dg2", "*", "x1", ")", ".", "reshape", "(", "x1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "w", "=", "dg2", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", "\n", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_linf", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_l2", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_l1", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "d1", "=", "torch", ".", "reshape", "(", "d3", "[", ":", "bs", "]", ",", "x1", ".", "shape", ")", "\n", "d2", "=", "torch", ".", "reshape", "(", "d3", "[", "-", "bs", ":", "]", ",", "x1", ".", "shape", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "a0", "=", "d3", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "a0", "=", "(", "d3", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "a0", "=", "d3", ".", "abs", "(", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "a0", "=", "torch", ".", "max", "(", "a0", ",", "1e-8", "*", "torch", ".", "ones", "(", "\n", "a0", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "a1", "=", "a0", "[", ":", "bs", "]", "\n", "a2", "=", "a0", "[", "-", "bs", ":", "]", "\n", "alpha", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "a1", "/", "(", "a1", "+", "a2", ")", ",", "\n", "torch", ".", "zeros", "(", "a1", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", ",", "\n", "self", ".", "alpha_max", "*", "torch", ".", "ones", "(", "a1", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "x1", "=", "(", "(", "x1", "+", "self", ".", "eta", "*", "d1", ")", "*", "(", "1", "-", "alpha", ")", "+", "\n", "(", "im2", "+", "d2", "*", "self", ".", "eta", ")", "*", "alpha", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "is_adv", "=", "self", ".", "_get_predicted_label", "(", "x1", ")", "!=", "la2", "\n", "\n", "if", "is_adv", ".", "sum", "(", ")", ">", "0", ":", "\n", "                        ", "ind_adv", "=", "is_adv", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind_adv", "=", "self", ".", "check_shape", "(", "ind_adv", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                            ", "t", "=", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", ".", "reshape", "(", "\n", "[", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                            ", "t", "=", "(", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", "**", "2", ")", ".", "reshape", "(", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                            ", "t", "=", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", ".", "abs", "(", ")", ".", "reshape", "(", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "adv", "[", "ind_adv", "]", "=", "x1", "[", "ind_adv", "]", "*", "(", "t", "<", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "+", "adv", "[", "ind_adv", "]", "*", "(", "t", ">=", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "\n", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", "res2", "[", "ind_adv", "]", "=", "t", "*", "(", "t", "<", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", "+", "res2", "[", "ind_adv", "]", "*", "(", "t", ">=", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", "\n", "x1", "[", "ind_adv", "]", "=", "im2", "[", "ind_adv", "]", "+", "(", "\n", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", "*", "self", ".", "beta", "\n", "\n", "", "counter_iter", "+=", "1", "\n", "\n", "", "", "counter_restarts", "+=", "1", "\n", "\n", "", "ind_succ", "=", "res2", "<", "1e10", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'success rate: {:.0f}/{:.0f}'", "\n", ".", "format", "(", "ind_succ", ".", "float", "(", ")", ".", "sum", "(", ")", ",", "corr_classified", ")", "+", "\n", "' (on correctly classified points) in {:.1f} s'", "\n", ".", "format", "(", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "res_c", "[", "pred", "]", "=", "res2", "*", "ind_succ", ".", "float", "(", ")", "+", "1e10", "*", "(", "1", "-", "ind_succ", ".", "float", "(", ")", ")", "\n", "ind_succ", "=", "self", ".", "check_shape", "(", "ind_succ", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "adv_c", "[", "pred", "[", "ind_succ", "]", "]", "=", "adv", "[", "ind_succ", "]", ".", "clone", "(", ")", "\n", "\n", "return", "adv_c", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_tf.FABAttack.perturb": [[682, 745], ["x.clone", "torch.no_grad", "time.time", "torch.random.manual_seed", "torch.cuda.random.manual_seed", "range", "range", "fab_tf.FABAttack.model.predict().max", "acc.nonzero().squeeze", "range", "len", "ind_to_fool.unsqueeze.unsqueeze.unsqueeze", "ind_to_fool.unsqueeze.unsqueeze.numel", "fab_tf.FABAttack.attack_single_run", "torch.max", "adv_curr[].clone", "acc.nonzero().squeeze", "fab_tf.FABAttack.model.predict", "acc.nonzero", "x[].clone", "y[].clone", "print", "len", "ind_to_fool.unsqueeze.unsqueeze.unsqueeze", "ind_to_fool.unsqueeze.unsqueeze.numel", "fab_tf.FABAttack.attack_single_run_targeted", "torch.max", "adv_curr[].clone", "fab_tf.FABAttack.model.predict().max", "acc.nonzero", "x[].clone", "y[].clone", "print", "acc.float().mean", "fab_tf.FABAttack.model.predict().max", "fab_tf.FABAttack.model.predict", "time.time", "acc.float().mean", "acc.float", "fab_tf.FABAttack.model.predict", "time.time", "acc.float"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.attack_single_run", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.attack_single_run_targeted", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "device", "is", "None", ":", "\n", "            ", "self", ".", "device", "=", "x", ".", "device", "\n", "", "adv", "=", "x", ".", "clone", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "acc", "=", "self", ".", "model", ".", "predict", "(", "x", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "\n", "startt", "=", "time", ".", "time", "(", ")", "\n", "\n", "torch", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "if", "not", "self", ".", "targeted", ":", "\n", "                ", "for", "counter", "in", "range", "(", "self", ".", "n_restarts", ")", ":", "\n", "                    ", "ind_to_fool", "=", "acc", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "ind_to_fool", ".", "shape", ")", "==", "0", ":", "ind_to_fool", "=", "ind_to_fool", ".", "unsqueeze", "(", "0", ")", "\n", "if", "ind_to_fool", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                        ", "x_to_fool", ",", "y_to_fool", "=", "x", "[", "ind_to_fool", "]", ".", "clone", "(", ")", ",", "y", "[", "ind_to_fool", "]", ".", "clone", "(", ")", "\n", "adv_curr", "=", "self", ".", "attack_single_run", "(", "x_to_fool", ",", "y_to_fool", ",", "use_rand_start", "=", "(", "counter", ">", "0", ")", ")", "\n", "\n", "acc_curr", "=", "self", ".", "model", ".", "predict", "(", "adv_curr", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y_to_fool", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                            ", "res", "=", "(", "x_to_fool", "-", "adv_curr", ")", ".", "abs", "(", ")", ".", "reshape", "(", "x_to_fool", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                            ", "res", "=", "(", "(", "x_to_fool", "-", "adv_curr", ")", "**", "2", ")", ".", "reshape", "(", "x_to_fool", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "", "acc_curr", "=", "torch", ".", "max", "(", "acc_curr", ",", "res", ">", "self", ".", "eps", ")", "\n", "\n", "ind_curr", "=", "(", "acc_curr", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "acc", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "0", "\n", "adv", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "adv_curr", "[", "ind_curr", "]", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "                            ", "print", "(", "'restart {} - robust accuracy: {:.2%} at eps = {:.5f} - cum. time: {:.1f} s'", ".", "format", "(", "\n", "counter", ",", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "self", ".", "eps", ",", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "                ", "for", "target_class", "in", "range", "(", "2", ",", "self", ".", "n_target_classes", "+", "2", ")", ":", "\n", "                    ", "self", ".", "target_class", "=", "target_class", "\n", "#", "\n", "\n", "for", "counter", "in", "range", "(", "self", ".", "n_restarts", ")", ":", "\n", "                        ", "ind_to_fool", "=", "acc", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "ind_to_fool", ".", "shape", ")", "==", "0", ":", "ind_to_fool", "=", "ind_to_fool", ".", "unsqueeze", "(", "0", ")", "\n", "if", "ind_to_fool", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                            ", "x_to_fool", ",", "y_to_fool", "=", "x", "[", "ind_to_fool", "]", ".", "clone", "(", ")", ",", "y", "[", "ind_to_fool", "]", ".", "clone", "(", ")", "\n", "adv_curr", "=", "self", ".", "attack_single_run_targeted", "(", "x_to_fool", ",", "y_to_fool", ",", "use_rand_start", "=", "(", "counter", ">", "0", ")", ")", "\n", "\n", "acc_curr", "=", "self", ".", "model", ".", "predict", "(", "adv_curr", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y_to_fool", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                                ", "res", "=", "(", "x_to_fool", "-", "adv_curr", ")", ".", "abs", "(", ")", ".", "reshape", "(", "x_to_fool", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                                ", "res", "=", "(", "(", "x_to_fool", "-", "adv_curr", ")", "**", "2", ")", ".", "reshape", "(", "x_to_fool", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "", "acc_curr", "=", "torch", ".", "max", "(", "acc_curr", ",", "res", ">", "self", ".", "eps", ")", "\n", "\n", "ind_curr", "=", "(", "acc_curr", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "acc", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "0", "\n", "adv", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "adv_curr", "[", "ind_curr", "]", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "                                ", "print", "(", "'restart {} - target_class {} - robust accuracy: {:.2%} at eps = {:.5f} - cum. time: {:.1f} s'", ".", "format", "(", "\n", "counter", ",", "self", ".", "target_class", ",", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "self", ".", "eps", ",", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "", "", "", "", "", "return", "adv", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf.ModelAdapter.__init__": [[6, 32], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "utils_tf.dlr_loss", "tensorflow.placeholder", "utils_tf.dlr_loss_targeted", "range", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.gradients"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack.dlr_loss", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.dlr_loss_targeted"], ["    ", "def", "__init__", "(", "self", ",", "logits", ",", "x", ",", "y", ",", "sess", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "self", ".", "logits", "=", "logits", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "x_input", "=", "x", "\n", "self", ".", "y_input", "=", "y", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "# gradients of logits", "\n", "if", "num_classes", "<=", "10", ":", "\n", "            ", "self", ".", "grads", "=", "[", "None", "]", "*", "num_classes", "\n", "for", "cl", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "self", ".", "grads", "[", "cl", "]", "=", "tf", ".", "gradients", "(", "self", ".", "logits", "[", ":", ",", "cl", "]", ",", "self", ".", "x_input", ")", "[", "0", "]", "\n", "\n", "# cross-entropy loss", "\n", "", "", "self", ".", "xent", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "self", ".", "logits", ",", "labels", "=", "self", ".", "y_input", ")", "\n", "self", ".", "grad_xent", "=", "tf", ".", "gradients", "(", "self", ".", "xent", ",", "self", ".", "x_input", ")", "[", "0", "]", "\n", "\n", "# dlr loss", "\n", "self", ".", "dlr", "=", "dlr_loss", "(", "self", ".", "logits", ",", "self", ".", "y_input", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "self", ".", "grad_dlr", "=", "tf", ".", "gradients", "(", "self", ".", "dlr", ",", "self", ".", "x_input", ")", "[", "0", "]", "\n", "\n", "# targeted dlr loss", "\n", "self", ".", "y_target", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "shape", "=", "[", "None", "]", ")", "\n", "self", ".", "dlr_target", "=", "dlr_loss_targeted", "(", "self", ".", "logits", ",", "self", ".", "y_input", ",", "self", ".", "y_target", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "self", ".", "grad_target", "=", "tf", ".", "gradients", "(", "self", ".", "dlr_target", ",", "self", ".", "x_input", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf.ModelAdapter.predict": [[33, 38], ["numpy.moveaxis", "utils_tf.ModelAdapter.sess.run", "torch.from_numpy().cuda", "x.cpu().numpy", "torch.from_numpy", "x.cpu"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "x2", "=", "np", ".", "moveaxis", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "1", ",", "3", ")", "\n", "y", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "logits", ",", "{", "self", ".", "x_input", ":", "x2", "}", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "y", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf.ModelAdapter.grad_logits": [[39, 46], ["numpy.moveaxis", "utils_tf.ModelAdapter.sess.run", "numpy.moveaxis", "numpy.transpose", "torch.from_numpy().cuda", "x.cpu().numpy", "numpy.array", "torch.from_numpy", "x.cpu"], "methods", ["None"], ["", "def", "grad_logits", "(", "self", ",", "x", ")", ":", "\n", "        ", "x2", "=", "np", ".", "moveaxis", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "1", ",", "3", ")", "\n", "g2", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "grads", ",", "{", "self", ".", "x_input", ":", "x2", "}", ")", "\n", "g2", "=", "np", ".", "moveaxis", "(", "np", ".", "array", "(", "g2", ")", ",", "0", ",", "1", ")", "\n", "g2", "=", "np", ".", "transpose", "(", "g2", ",", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "g2", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf.ModelAdapter.set_target_class": [[47, 55], ["y.cpu().numpy", "y_target.cpu().numpy", "range", "tensorflow.stack", "tensorflow.gradients", "y.cpu", "y_target.cpu"], "methods", ["None"], ["", "def", "set_target_class", "(", "self", ",", "y", ",", "y_target", ")", ":", "\n", "        ", "la", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "la_target", "=", "y_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "l", "=", "[", "None", "]", "*", "y", ".", "shape", "[", "0", "]", "\n", "for", "c", "in", "range", "(", "y", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "l", "[", "c", "]", "=", "self", ".", "logits", "[", "c", ",", "la_target", "[", "c", "]", "]", "-", "self", ".", "logits", "[", "c", ",", "la", "[", "c", "]", "]", "\n", "", "self", ".", "diff_logits", "=", "tf", ".", "stack", "(", "l", ")", "\n", "self", ".", "grad_diff_logits", "=", "tf", ".", "gradients", "(", "self", ".", "diff_logits", ",", "self", ".", "x_input", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf.ModelAdapter.get_grad_diff_logits_target": [[56, 62], ["numpy.moveaxis", "utils_tf.ModelAdapter.sess.run", "numpy.transpose", "x.cpu().numpy", "numpy.array", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "x.cpu", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "get_grad_diff_logits_target", "(", "self", ",", "x", ",", "y", "=", "None", ",", "y_target", "=", "None", ")", ":", "\n", "        ", "x2", "=", "np", ".", "moveaxis", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "1", ",", "3", ")", "\n", "dl", ",", "g2", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "diff_logits", ",", "self", ".", "grad_diff_logits", "]", ",", "{", "self", ".", "x_input", ":", "x2", "}", ")", "\n", "g2", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "g2", ")", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "dl", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "g2", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf.ModelAdapter.get_logits_loss_grad_xent": [[63, 70], ["numpy.moveaxis", "y.clone().cpu().numpy", "utils_tf.ModelAdapter.sess.run", "numpy.moveaxis", "x.cpu().numpy", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "y.clone().cpu", "x.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "y.clone"], "methods", ["None"], ["", "def", "get_logits_loss_grad_xent", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x2", "=", "np", ".", "moveaxis", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "1", ",", "3", ")", "\n", "y2", "=", "y", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "logits_val", ",", "loss_indiv_val", ",", "grad_val", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "logits", ",", "self", ".", "xent", ",", "self", ".", "grad_xent", "]", ",", "{", "self", ".", "x_input", ":", "x2", ",", "self", ".", "y_input", ":", "y2", "}", ")", "\n", "grad_val", "=", "np", ".", "moveaxis", "(", "grad_val", ",", "3", ",", "1", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "logits_val", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "loss_indiv_val", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "grad_val", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf.ModelAdapter.get_logits_loss_grad_dlr": [[71, 78], ["numpy.moveaxis", "y.clone().cpu().numpy", "utils_tf.ModelAdapter.sess.run", "numpy.moveaxis", "x.cpu().numpy", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "y.clone().cpu", "x.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "y.clone"], "methods", ["None"], ["", "def", "get_logits_loss_grad_dlr", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x2", "=", "np", ".", "moveaxis", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "1", ",", "3", ")", "\n", "y2", "=", "y", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "logits_val", ",", "loss_indiv_val", ",", "grad_val", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "logits", ",", "self", ".", "dlr", ",", "self", ".", "grad_dlr", "]", ",", "{", "self", ".", "x_input", ":", "x2", ",", "self", ".", "y_input", ":", "y2", "}", ")", "\n", "grad_val", "=", "np", ".", "moveaxis", "(", "grad_val", ",", "3", ",", "1", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "logits_val", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "loss_indiv_val", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "grad_val", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf.ModelAdapter.get_logits_loss_grad_target": [[79, 87], ["numpy.moveaxis", "y.clone().cpu().numpy", "y_target.clone().cpu().numpy", "utils_tf.ModelAdapter.sess.run", "numpy.moveaxis", "x.cpu().numpy", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "y.clone().cpu", "y_target.clone().cpu", "x.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "y.clone", "y_target.clone"], "methods", ["None"], ["", "def", "get_logits_loss_grad_target", "(", "self", ",", "x", ",", "y", ",", "y_target", ")", ":", "\n", "        ", "x2", "=", "np", ".", "moveaxis", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "1", ",", "3", ")", "\n", "y2", "=", "y", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_targ", "=", "y_target", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "logits_val", ",", "loss_indiv_val", ",", "grad_val", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "logits", ",", "self", ".", "dlr_target", ",", "self", ".", "grad_target", "]", ",", "{", "self", ".", "x_input", ":", "x2", ",", "self", ".", "y_input", ":", "y2", ",", "self", ".", "y_target", ":", "y_targ", "}", ")", "\n", "grad_val", "=", "np", ".", "moveaxis", "(", "grad_val", ",", "3", ",", "1", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "logits_val", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "loss_indiv_val", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "grad_val", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf.dlr_loss": [[88, 95], ["tensorflow.contrib.framework.sort", "tensorflow.one_hot"], "function", ["None"], ["", "", "def", "dlr_loss", "(", "x", ",", "y", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "x_sort", "=", "tf", ".", "contrib", ".", "framework", ".", "sort", "(", "x", ",", "axis", "=", "1", ")", "\n", "y_onehot", "=", "tf", ".", "one_hot", "(", "y", ",", "num_classes", ")", "\n", "### TODO: adapt to the case when the point is already misclassified", "\n", "loss", "=", "-", "(", "x_sort", "[", ":", ",", "-", "1", "]", "-", "x_sort", "[", ":", ",", "-", "2", "]", ")", "/", "(", "x_sort", "[", ":", ",", "-", "1", "]", "-", "x_sort", "[", ":", ",", "-", "3", "]", "+", "1e-12", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf.dlr_loss_targeted": [[96, 103], ["tensorflow.contrib.framework.sort", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "dlr_loss_targeted", "(", "x", ",", "y", ",", "y_target", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "x_sort", "=", "tf", ".", "contrib", ".", "framework", ".", "sort", "(", "x", ",", "axis", "=", "1", ")", "\n", "y_onehot", "=", "tf", ".", "one_hot", "(", "y", ",", "num_classes", ")", "\n", "y_target_onehot", "=", "tf", ".", "one_hot", "(", "y_target", ",", "num_classes", ")", "\n", "loss", "=", "-", "(", "tf", ".", "reduce_sum", "(", "x", "*", "y_onehot", ",", "axis", "=", "1", ")", "-", "tf", ".", "reduce_sum", "(", "x", "*", "y_target_onehot", ",", "axis", "=", "1", ")", ")", "/", "(", "x_sort", "[", ":", ",", "-", "1", "]", "-", ".5", "*", "x_sort", "[", ":", ",", "-", "3", "]", "-", ".5", "*", "x_sort", "[", ":", ",", "-", "4", "]", "+", "1e-12", ")", "\n", "\n", "return", "loss", "", "", ""]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.__init__": [[11, 62], ["auto_attack.other_utils.Logger", "APGDAttack", "FABAttack", "SquareAttack", "APGDAttack_targeted", "APGDAttack", "FABAttack", "SquareAttack", "APGDAttack_targeted", "autoattack.AutoAttack.set_version"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.set_version"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "norm", "=", "'Linf'", ",", "eps", "=", ".3", ",", "seed", "=", "None", ",", "verbose", "=", "True", ",", "\n", "attacks_to_run", "=", "[", "]", ",", "version", "=", "'standard'", ",", "is_tf_model", "=", "False", ",", "\n", "device", "=", "'cuda'", ",", "log_path", "=", "None", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "norm", "=", "norm", "\n", "assert", "norm", "in", "[", "'Linf'", ",", "'L2'", "]", "\n", "self", ".", "epsilon", "=", "eps", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "attacks_to_run", "=", "attacks_to_run", "\n", "self", ".", "version", "=", "version", "\n", "self", ".", "is_tf_model", "=", "is_tf_model", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "logger", "=", "utils", ".", "Logger", "(", "log_path", ")", "\n", "\n", "if", "not", "self", ".", "is_tf_model", ":", "\n", "            ", "from", "auto_attack", ".", "autopgd_pt", "import", "APGDAttack", "\n", "self", ".", "apgd", "=", "APGDAttack", "(", "self", ".", "model", ",", "n_restarts", "=", "5", ",", "n_iter", "=", "100", ",", "verbose", "=", "False", ",", "\n", "eps", "=", "self", ".", "epsilon", ",", "norm", "=", "self", ".", "norm", ",", "eot_iter", "=", "1", ",", "rho", "=", ".75", ",", "seed", "=", "self", ".", "seed", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "from", "auto_attack", ".", "fab_pt", "import", "FABAttack", "\n", "self", ".", "fab", "=", "FABAttack", "(", "self", ".", "model", ",", "n_restarts", "=", "5", ",", "n_iter", "=", "100", ",", "eps", "=", "self", ".", "epsilon", ",", "seed", "=", "self", ".", "seed", ",", "\n", "norm", "=", "self", ".", "norm", ",", "verbose", "=", "False", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "from", "auto_attack", ".", "square", "import", "SquareAttack", "\n", "self", ".", "square", "=", "SquareAttack", "(", "self", ".", "model", ",", "p_init", "=", ".8", ",", "n_queries", "=", "5000", ",", "eps", "=", "self", ".", "epsilon", ",", "norm", "=", "self", ".", "norm", ",", "\n", "n_restarts", "=", "1", ",", "seed", "=", "self", ".", "seed", ",", "verbose", "=", "False", ",", "device", "=", "self", ".", "device", ",", "resc_schedule", "=", "False", ")", "\n", "\n", "from", "auto_attack", ".", "autopgd_pt", "import", "APGDAttack_targeted", "\n", "self", ".", "apgd_targeted", "=", "APGDAttack_targeted", "(", "self", ".", "model", ",", "n_restarts", "=", "1", ",", "n_iter", "=", "100", ",", "verbose", "=", "False", ",", "\n", "eps", "=", "self", ".", "epsilon", ",", "norm", "=", "self", ".", "norm", ",", "eot_iter", "=", "1", ",", "rho", "=", ".75", ",", "seed", "=", "self", ".", "seed", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "", "else", ":", "\n", "            ", "from", "auto_attack", ".", "autopgd_tf", "import", "APGDAttack", "\n", "self", ".", "apgd", "=", "APGDAttack", "(", "self", ".", "model", ",", "n_restarts", "=", "5", ",", "n_iter", "=", "100", ",", "verbose", "=", "False", ",", "\n", "eps", "=", "self", ".", "epsilon", ",", "norm", "=", "self", ".", "norm", ",", "eot_iter", "=", "1", ",", "rho", "=", ".75", ",", "seed", "=", "self", ".", "seed", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "from", "auto_attack", ".", "fab_tf", "import", "FABAttack", "\n", "self", ".", "fab", "=", "FABAttack", "(", "self", ".", "model", ",", "n_restarts", "=", "5", ",", "n_iter", "=", "100", ",", "eps", "=", "self", ".", "epsilon", ",", "seed", "=", "self", ".", "seed", ",", "\n", "norm", "=", "self", ".", "norm", ",", "verbose", "=", "False", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "from", "auto_attack", ".", "square", "import", "SquareAttack", "\n", "self", ".", "square", "=", "SquareAttack", "(", "self", ".", "model", ".", "predict", ",", "p_init", "=", ".8", ",", "n_queries", "=", "5000", ",", "eps", "=", "self", ".", "epsilon", ",", "norm", "=", "self", ".", "norm", ",", "\n", "n_restarts", "=", "1", ",", "seed", "=", "self", ".", "seed", ",", "verbose", "=", "False", ",", "device", "=", "self", ".", "device", ",", "resc_schedule", "=", "False", ")", "\n", "\n", "from", "auto_attack", ".", "autopgd_tf", "import", "APGDAttack_targeted", "\n", "self", ".", "apgd_targeted", "=", "APGDAttack_targeted", "(", "self", ".", "model", ",", "n_restarts", "=", "1", ",", "n_iter", "=", "100", ",", "verbose", "=", "False", ",", "\n", "eps", "=", "self", ".", "epsilon", ",", "norm", "=", "self", ".", "norm", ",", "eot_iter", "=", "1", ",", "rho", "=", ".75", ",", "seed", "=", "self", ".", "seed", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "", "if", "version", "in", "[", "'standard'", ",", "'plus'", "]", ":", "\n", "            ", "self", ".", "set_version", "(", "version", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.get_logits": [[63, 68], ["autoattack.AutoAttack.model", "autoattack.AutoAttack.model.predict"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict"], ["", "", "def", "get_logits", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_tf_model", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", ".", "predict", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.get_seed": [[69, 71], ["time.time"], "methods", ["None"], ["", "", "def", "get_seed", "(", "self", ")", ":", "\n", "        ", "return", "time", ".", "time", "(", ")", "if", "self", ".", "seed", "is", "None", "else", "self", ".", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation": [[72, 192], ["print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "int", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "x_orig.clone().detach", "time.time", "numpy.ceil", "min", "x_orig[].clone().to", "y_orig[].clone().to", "autoattack.AutoAttack.get_logits", "y_orig[].clone().to.eq", "y_orig[].clone().to.eq.detach().to", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "autoattack.AutoAttack.logger.log", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "int", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "range", "autoattack.AutoAttack.logger.log", "autoattack.AutoAttack.logger.log", "x_orig.clone", "numpy.ceil", "torch.nonzero.squeeze_", "torch.nonzero.squeeze_", "torch.nonzero.squeeze_", "min", "x_orig[].clone().to", "y_orig[].clone().to", "autoattack.AutoAttack.get_logits", "adv_curr[].detach().to", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "autoattack.AutoAttack.logger.log", "x_orig[].clone", "y_orig[].clone", "autoattack.AutoAttack.max", "y_orig[].clone().to.eq.detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "batch_datapoint_idcs.squeeze_", "len", "x_orig[].clone().to.unsqueeze_", "autoattack.AutoAttack.get_seed", "autoattack.AutoAttack.apgd.perturb", "y_orig[].clone().to.eq().to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "autoattack.AutoAttack.logger.log", "res.max", "x_orig.clone().detach.max", "x_orig.clone().detach.min", "x_orig[].clone", "y_orig[].clone", "autoattack.AutoAttack.get_seed", "autoattack.AutoAttack.apgd.perturb", "adv_curr[].detach", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "attack.upper", "autoattack.AutoAttack.get_seed", "autoattack.AutoAttack.fab.perturb", "y_orig[].clone().to.eq", "time.time", "autoattack.AutoAttack.get_seed", "autoattack.AutoAttack.square.perturb", "autoattack.AutoAttack.get_seed", "autoattack.AutoAttack.apgd_targeted.perturb", "autoattack.AutoAttack.max", "autoattack.AutoAttack.get_seed", "autoattack.AutoAttack.fab.perturb", "ValueError"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.get_logits", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.get_logits", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.get_seed", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.perturb", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.get_seed", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.perturb", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.get_seed", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.perturb", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.get_seed", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.perturb", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.get_seed", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.perturb", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.get_seed", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.perturb"], ["", "def", "run_standard_evaluation", "(", "self", ",", "x_orig", ",", "y_orig", ",", "bs", "=", "250", ")", ":", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'using {} version including {}'", ".", "format", "(", "self", ".", "version", ",", "\n", "', '", ".", "join", "(", "self", ".", "attacks_to_run", ")", ")", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# calculate accuracy", "\n", "            ", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "x_orig", ".", "shape", "[", "0", "]", "/", "bs", ")", ")", "\n", "robust_flags", "=", "torch", ".", "zeros", "(", "x_orig", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "x_orig", ".", "device", ")", "\n", "for", "batch_idx", "in", "range", "(", "n_batches", ")", ":", "\n", "                ", "start_idx", "=", "batch_idx", "*", "bs", "\n", "end_idx", "=", "min", "(", "(", "batch_idx", "+", "1", ")", "*", "bs", ",", "x_orig", ".", "shape", "[", "0", "]", ")", "\n", "\n", "x", "=", "x_orig", "[", "start_idx", ":", "end_idx", ",", ":", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "y_orig", "[", "start_idx", ":", "end_idx", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "get_logits", "(", "x", ")", "\n", "correct_batch", "=", "y", ".", "eq", "(", "output", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", ")", "\n", "robust_flags", "[", "start_idx", ":", "end_idx", "]", "=", "correct_batch", ".", "detach", "(", ")", ".", "to", "(", "robust_flags", ".", "device", ")", "\n", "\n", "", "robust_accuracy", "=", "torch", ".", "sum", "(", "robust_flags", ")", ".", "item", "(", ")", "/", "x_orig", ".", "shape", "[", "0", "]", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "self", ".", "logger", ".", "log", "(", "'initial accuracy: {:.2%}'", ".", "format", "(", "robust_accuracy", ")", ")", "\n", "\n", "", "x_adv", "=", "x_orig", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "startt", "=", "time", ".", "time", "(", ")", "\n", "for", "attack", "in", "self", ".", "attacks_to_run", ":", "\n", "# item() is super important as pytorch int division uses floor rounding", "\n", "                ", "num_robust", "=", "torch", ".", "sum", "(", "robust_flags", ")", ".", "item", "(", ")", "\n", "\n", "if", "num_robust", "==", "0", ":", "\n", "                    ", "break", "\n", "\n", "", "n_batches", "=", "int", "(", "np", ".", "ceil", "(", "num_robust", "/", "bs", ")", ")", "\n", "\n", "robust_lin_idcs", "=", "torch", ".", "nonzero", "(", "robust_flags", ",", "as_tuple", "=", "False", ")", "\n", "if", "num_robust", ">", "1", ":", "\n", "                    ", "robust_lin_idcs", ".", "squeeze_", "(", ")", "\n", "\n", "", "for", "batch_idx", "in", "range", "(", "n_batches", ")", ":", "\n", "                    ", "start_idx", "=", "batch_idx", "*", "bs", "\n", "end_idx", "=", "min", "(", "(", "batch_idx", "+", "1", ")", "*", "bs", ",", "num_robust", ")", "\n", "\n", "batch_datapoint_idcs", "=", "robust_lin_idcs", "[", "start_idx", ":", "end_idx", "]", "\n", "if", "len", "(", "batch_datapoint_idcs", ".", "shape", ")", ">", "1", ":", "\n", "                        ", "batch_datapoint_idcs", ".", "squeeze_", "(", "-", "1", ")", "\n", "", "x", "=", "x_orig", "[", "batch_datapoint_idcs", ",", ":", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "y_orig", "[", "batch_datapoint_idcs", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# make sure that x is a 4d tensor even if there is only a single datapoint left", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "3", ":", "\n", "                        ", "x", ".", "unsqueeze_", "(", "dim", "=", "0", ")", "\n", "\n", "# run attack", "\n", "", "if", "attack", "==", "'apgd-ce'", ":", "\n", "# apgd on cross-entropy loss", "\n", "                        ", "self", ".", "apgd", ".", "loss", "=", "'ce'", "\n", "self", ".", "apgd", ".", "seed", "=", "self", ".", "get_seed", "(", ")", "\n", "_", ",", "adv_curr", "=", "self", ".", "apgd", ".", "perturb", "(", "x", ",", "y", ",", "cheap", "=", "True", ")", "\n", "\n", "", "elif", "attack", "==", "'apgd-dlr'", ":", "\n", "# apgd on dlr loss", "\n", "                        ", "self", ".", "apgd", ".", "loss", "=", "'dlr'", "\n", "self", ".", "apgd", ".", "seed", "=", "self", ".", "get_seed", "(", ")", "\n", "_", ",", "adv_curr", "=", "self", ".", "apgd", ".", "perturb", "(", "x", ",", "y", ",", "cheap", "=", "True", ")", "\n", "\n", "", "elif", "attack", "==", "'fab'", ":", "\n", "# fab", "\n", "                        ", "self", ".", "fab", ".", "targeted", "=", "False", "\n", "self", ".", "fab", ".", "seed", "=", "self", ".", "get_seed", "(", ")", "\n", "adv_curr", "=", "self", ".", "fab", ".", "perturb", "(", "x", ",", "y", ")", "\n", "\n", "", "elif", "attack", "==", "'square'", ":", "\n", "# square", "\n", "                        ", "self", ".", "square", ".", "seed", "=", "self", ".", "get_seed", "(", ")", "\n", "adv_curr", "=", "self", ".", "square", ".", "perturb", "(", "x", ",", "y", ")", "\n", "\n", "", "elif", "attack", "==", "'apgd-t'", ":", "\n", "# targeted apgd", "\n", "                        ", "self", ".", "apgd_targeted", ".", "seed", "=", "self", ".", "get_seed", "(", ")", "\n", "_", ",", "adv_curr", "=", "self", ".", "apgd_targeted", ".", "perturb", "(", "x", ",", "y", ",", "cheap", "=", "True", ")", "\n", "\n", "", "elif", "attack", "==", "'fab-t'", ":", "\n", "# fab targeted", "\n", "                        ", "self", ".", "fab", ".", "targeted", "=", "True", "\n", "self", ".", "fab", ".", "n_restarts", "=", "1", "\n", "self", ".", "fab", ".", "seed", "=", "self", ".", "get_seed", "(", ")", "\n", "adv_curr", "=", "self", ".", "fab", ".", "perturb", "(", "x", ",", "y", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'Attack not supported'", ")", "\n", "\n", "", "output", "=", "self", ".", "get_logits", "(", "adv_curr", ")", "\n", "false_batch", "=", "~", "y", ".", "eq", "(", "output", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", ")", ".", "to", "(", "robust_flags", ".", "device", ")", "\n", "non_robust_lin_idcs", "=", "batch_datapoint_idcs", "[", "false_batch", "]", "\n", "robust_flags", "[", "non_robust_lin_idcs", "]", "=", "False", "\n", "\n", "x_adv", "[", "non_robust_lin_idcs", "]", "=", "adv_curr", "[", "false_batch", "]", ".", "detach", "(", ")", ".", "to", "(", "x_adv", ".", "device", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "                        ", "num_non_robust_batch", "=", "torch", ".", "sum", "(", "false_batch", ")", "\n", "self", ".", "logger", ".", "log", "(", "'{} - {}/{} - {} out of {} successfully perturbed'", ".", "format", "(", "\n", "attack", ",", "batch_idx", "+", "1", ",", "n_batches", ",", "num_non_robust_batch", ",", "x", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "", "robust_accuracy", "=", "torch", ".", "sum", "(", "robust_flags", ")", ".", "item", "(", ")", "/", "x_orig", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "self", ".", "logger", ".", "log", "(", "'robust accuracy after {}: {:.2%} (total time {:.1f} s)'", ".", "format", "(", "\n", "attack", ".", "upper", "(", ")", ",", "robust_accuracy", ",", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "# final check", "\n", "", "", "if", "self", ".", "verbose", ":", "\n", "                ", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                    ", "res", "=", "(", "x_adv", "-", "x_orig", ")", ".", "abs", "(", ")", ".", "view", "(", "x_orig", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                    ", "res", "=", "(", "(", "x_adv", "-", "x_orig", ")", "**", "2", ")", ".", "view", "(", "x_orig", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "", "self", ".", "logger", ".", "log", "(", "'max {} perturbation: {:.5f}, nan in tensor: {}, max: {:.5f}, min: {:.5f}'", ".", "format", "(", "\n", "self", ".", "norm", ",", "res", ".", "max", "(", ")", ",", "(", "x_adv", "!=", "x_adv", ")", ".", "sum", "(", ")", ",", "x_adv", ".", "max", "(", ")", ",", "x_adv", ".", "min", "(", ")", ")", ")", "\n", "self", ".", "logger", ".", "log", "(", "'robust accuracy: {:.2%}'", ".", "format", "(", "robust_accuracy", ")", ")", "\n", "\n", "", "", "return", "x_adv", ",", "robust_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.clean_accuracy": [[193, 206], ["range", "x_orig[].clone().to", "y_orig[].clone().to", "autoattack.AutoAttack.get_logits", "print", "acc.item", "x_orig[].clone", "y_orig[].clone", "min", "min", "autoattack.AutoAttack.max"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.get_logits"], ["", "def", "clean_accuracy", "(", "self", ",", "x_orig", ",", "y_orig", ",", "bs", "=", "250", ")", ":", "\n", "        ", "n_batches", "=", "x_orig", ".", "shape", "[", "0", "]", "//", "bs", "\n", "acc", "=", "0.", "\n", "for", "counter", "in", "range", "(", "n_batches", ")", ":", "\n", "            ", "x", "=", "x_orig", "[", "counter", "*", "bs", ":", "min", "(", "(", "counter", "+", "1", ")", "*", "bs", ",", "x_orig", ".", "shape", "[", "0", "]", ")", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "y_orig", "[", "counter", "*", "bs", ":", "min", "(", "(", "counter", "+", "1", ")", "*", "bs", ",", "x_orig", ".", "shape", "[", "0", "]", ")", "]", ".", "clone", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "get_logits", "(", "x", ")", "\n", "acc", "+=", "(", "output", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "\n", "", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'clean accuracy: {:.2%}'", ".", "format", "(", "acc", "/", "x_orig", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "", "return", "acc", ".", "item", "(", ")", "/", "x_orig", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation_individual": [[207, 228], ["print", "time.time", "autoattack.AutoAttack.run_standard_evaluation", "autoattack.AutoAttack.clean_accuracy", "autoattack.AutoAttack.logger.log", "c.upper", "time.time"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.run_standard_evaluation", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.clean_accuracy", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log"], ["", "def", "run_standard_evaluation_individual", "(", "self", ",", "x_orig", ",", "y_orig", ",", "bs", "=", "250", ")", ":", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'using {} version including {}'", ".", "format", "(", "self", ".", "version", ",", "\n", "', '", ".", "join", "(", "self", ".", "attacks_to_run", ")", ")", ")", "\n", "\n", "", "l_attacks", "=", "self", ".", "attacks_to_run", "\n", "adv", "=", "{", "}", "\n", "verbose_indiv", "=", "self", ".", "verbose", "\n", "self", ".", "verbose", "=", "False", "\n", "\n", "for", "c", "in", "l_attacks", ":", "\n", "            ", "startt", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "attacks_to_run", "=", "[", "c", "]", "\n", "adv", "[", "c", "]", "=", "self", ".", "run_standard_evaluation", "(", "x_orig", ",", "y_orig", ",", "bs", "=", "bs", ")", "\n", "if", "verbose_indiv", ":", "\n", "                ", "acc_indiv", "=", "self", ".", "clean_accuracy", "(", "adv", "[", "c", "]", ",", "y_orig", ",", "bs", "=", "bs", ")", "\n", "space", "=", "'\\t \\t'", "if", "c", "==", "'fab'", "else", "'\\t'", "\n", "self", ".", "logger", ".", "log", "(", "'robust accuracy by {} {} {:.2%} \\t (time attack: {:.1f} s)'", ".", "format", "(", "\n", "c", ".", "upper", "(", ")", ",", "space", ",", "acc_indiv", ",", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "", "return", "adv", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autoattack.AutoAttack.set_version": [[229, 247], ["None"], "methods", ["None"], ["", "def", "set_version", "(", "self", ",", "version", "=", "'standard'", ")", ":", "\n", "        ", "if", "version", "==", "'standard'", ":", "\n", "            ", "self", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-t'", ",", "'fab-t'", ",", "'square'", "]", "\n", "self", ".", "apgd", ".", "n_restarts", "=", "1", "\n", "self", ".", "fab", ".", "n_restarts", "=", "1", "\n", "self", ".", "apgd_targeted", ".", "n_restarts", "=", "1", "\n", "self", ".", "fab", ".", "n_target_classes", "=", "9", "\n", "self", ".", "apgd_targeted", ".", "n_target_classes", "=", "9", "\n", "self", ".", "square", ".", "n_queries", "=", "5000", "\n", "\n", "", "elif", "version", "==", "'plus'", ":", "\n", "            ", "self", ".", "attacks_to_run", "=", "[", "'apgd-ce'", ",", "'apgd-dlr'", ",", "'fab'", ",", "'square'", ",", "'apgd-t'", ",", "'fab-t'", "]", "\n", "self", ".", "apgd", ".", "n_restarts", "=", "5", "\n", "self", ".", "fab", ".", "n_restarts", "=", "5", "\n", "self", ".", "apgd_targeted", ".", "n_restarts", "=", "1", "\n", "self", ".", "fab", ".", "n_target_classes", "=", "9", "\n", "self", ".", "apgd_targeted", ".", "n_target_classes", "=", "9", "\n", "self", ".", "square", ".", "n_queries", "=", "5000", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__init__": [[6, 13], ["utils_tf2.ModelAdapter.__check_channel_ordering"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__check_channel_ordering"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Please note that model should be tf.keras model without activation function 'softmax'\n        \"\"\"", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "tf_model", "=", "model", "\n", "self", ".", "__check_channel_ordering", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__check_channel_ordering": [[14, 36], ["print", "isinstance", "print", "print", "print", "print"], "methods", ["None"], ["", "def", "__check_channel_ordering", "(", "self", ")", ":", "\n", "\n", "        ", "for", "L", "in", "self", ".", "tf_model", ".", "layers", ":", "\n", "            ", "if", "isinstance", "(", "L", ",", "tf", ".", "keras", ".", "layers", ".", "Conv2D", ")", ":", "\n", "                ", "print", "(", "\"[INFO] set data_format = '{:s}'\"", ".", "format", "(", "L", ".", "data_format", ")", ")", "\n", "self", ".", "data_format", "=", "L", ".", "data_format", "\n", "return", "\n", "\n", "", "", "print", "(", "\"[INFO] Can not find Conv2D layer\"", ")", "\n", "input_shape", "=", "self", ".", "tf_model", ".", "input_shape", "\n", "\n", "if", "input_shape", "[", "3", "]", "==", "3", ":", "\n", "            ", "print", "(", "\"[INFO] Because detecting input_shape[3] == 3, set data_format = 'channels_last'\"", ")", "\n", "self", ".", "data_format", "=", "'channels_last'", "\n", "\n", "", "elif", "input_shape", "[", "3", "]", "==", "1", ":", "\n", "            ", "print", "(", "\"[INFO] Because detecting input_shape[3] == 1, set data_format = 'channels_last'\"", ")", "\n", "self", ".", "data_format", "=", "'channels_last'", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[INFO] set data_format = 'channels_first'\"", ")", "\n", "self", ".", "data_format", "=", "'channels_first'", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_logits": [[37, 40], ["utils_tf2.ModelAdapter.tf_model"], "methods", ["None"], ["", "", "def", "__get_logits", "(", "self", ",", "x_input", ")", ":", "\n", "        ", "logits", "=", "self", ".", "tf_model", "(", "x_input", ",", "training", "=", "False", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_jacobian": [[41, 54], ["g.batch_jacobian", "tensorflow.GradientTape", "g.watch", "utils_tf2.ModelAdapter.__get_logits", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_logits"], ["", "@", "tf", ".", "function", "\n", "@", "tf", ".", "autograph", ".", "experimental", ".", "do_not_convert", "\n", "def", "__get_jacobian", "(", "self", ",", "x_input", ")", ":", "\n", "        ", "with", "tf", ".", "GradientTape", "(", "watch_accessed_variables", "=", "False", ")", "as", "g", ":", "\n", "            ", "g", ".", "watch", "(", "x_input", ")", "\n", "logits", "=", "self", ".", "__get_logits", "(", "x_input", ")", "\n", "\n", "", "jacobian", "=", "g", ".", "batch_jacobian", "(", "logits", ",", "x_input", ")", "\n", "\n", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "            ", "jacobian", "=", "tf", ".", "transpose", "(", "jacobian", ",", "perm", "=", "[", "0", ",", "1", ",", "4", ",", "2", ",", "3", "]", ")", "\n", "\n", "", "return", "jacobian", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_xent": [[55, 58], ["tensorflow.nn.sparse_softmax_cross_entropy_with_logits"], "methods", ["None"], ["", "def", "__get_xent", "(", "self", ",", "logits", ",", "y_input", ")", ":", "\n", "        ", "xent", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "y_input", ")", "\n", "return", "xent", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_grad_xent": [[59, 70], ["g.gradient", "tensorflow.GradientTape", "g.watch", "utils_tf2.ModelAdapter.__get_logits", "utils_tf2.ModelAdapter.__get_xent"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_logits", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_xent"], ["", "@", "tf", ".", "function", "\n", "@", "tf", ".", "autograph", ".", "experimental", ".", "do_not_convert", "\n", "def", "__get_grad_xent", "(", "self", ",", "x_input", ",", "y_input", ")", ":", "\n", "        ", "with", "tf", ".", "GradientTape", "(", "watch_accessed_variables", "=", "False", ")", "as", "g", ":", "\n", "            ", "g", ".", "watch", "(", "x_input", ")", "\n", "logits", "=", "self", ".", "__get_logits", "(", "x_input", ")", "\n", "xent", "=", "self", ".", "__get_xent", "(", "logits", ",", "y_input", ")", "\n", "\n", "", "grad_xent", "=", "g", ".", "gradient", "(", "xent", ",", "x_input", ")", "\n", "\n", "return", "logits", ",", "xent", ",", "grad_xent", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_dlr": [[71, 74], ["utils_tf2.dlr_loss"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack.dlr_loss"], ["", "def", "__get_dlr", "(", "self", ",", "logits", ",", "y_input", ")", ":", "\n", "        ", "val_dlr", "=", "dlr_loss", "(", "logits", ",", "y_input", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "return", "val_dlr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_grad_dlr": [[75, 86], ["g.gradient", "tensorflow.GradientTape", "g.watch", "utils_tf2.ModelAdapter.__get_logits", "utils_tf2.ModelAdapter.__get_dlr"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_logits", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_dlr"], ["", "@", "tf", ".", "function", "\n", "@", "tf", ".", "autograph", ".", "experimental", ".", "do_not_convert", "\n", "def", "__get_grad_dlr", "(", "self", ",", "x_input", ",", "y_input", ")", ":", "\n", "        ", "with", "tf", ".", "GradientTape", "(", "watch_accessed_variables", "=", "False", ")", "as", "g", ":", "\n", "            ", "g", ".", "watch", "(", "x_input", ")", "\n", "logits", "=", "self", ".", "__get_logits", "(", "x_input", ")", "\n", "val_dlr", "=", "self", ".", "__get_dlr", "(", "logits", ",", "y_input", ")", "\n", "\n", "", "grad_dlr", "=", "g", ".", "gradient", "(", "val_dlr", ",", "x_input", ")", "\n", "\n", "return", "logits", ",", "val_dlr", ",", "grad_dlr", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_dlr_target": [[87, 90], ["utils_tf2.dlr_loss_targeted"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.dlr_loss_targeted"], ["", "def", "__get_dlr_target", "(", "self", ",", "logits", ",", "y_input", ",", "y_target", ")", ":", "\n", "        ", "dlr_target", "=", "dlr_loss_targeted", "(", "logits", ",", "y_input", ",", "y_target", ",", "num_classes", "=", "self", ".", "num_classes", ")", "\n", "return", "dlr_target", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_grad_dlr_target": [[91, 102], ["g.gradient", "tensorflow.GradientTape", "g.watch", "utils_tf2.ModelAdapter.__get_logits", "utils_tf2.ModelAdapter.__get_dlr_target"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_logits", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_dlr_target"], ["", "@", "tf", ".", "function", "\n", "@", "tf", ".", "autograph", ".", "experimental", ".", "do_not_convert", "\n", "def", "__get_grad_dlr_target", "(", "self", ",", "x_input", ",", "y_input", ",", "y_target", ")", ":", "\n", "        ", "with", "tf", ".", "GradientTape", "(", "watch_accessed_variables", "=", "False", ")", "as", "g", ":", "\n", "            ", "g", ".", "watch", "(", "x_input", ")", "\n", "logits", "=", "self", ".", "__get_logits", "(", "x_input", ")", "\n", "dlr_target", "=", "self", ".", "__get_dlr_target", "(", "logits", ",", "y_input", ",", "y_target", ")", "\n", "\n", "", "grad_target", "=", "g", ".", "gradient", "(", "dlr_target", ",", "x_input", ")", "\n", "\n", "return", "logits", ",", "dlr_target", ",", "grad_target", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_grad_diff_logits_target": [[103, 118], ["g.gradient", "tensorflow.GradientTape", "g.watch", "utils_tf2.ModelAdapter.__get_logits", "range", "tensorflow.stack"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_logits"], ["", "@", "tf", ".", "function", "\n", "@", "tf", ".", "autograph", ".", "experimental", ".", "do_not_convert", "\n", "def", "__get_grad_diff_logits_target", "(", "self", ",", "x", ",", "la", ",", "la_target", ")", ":", "\n", "        ", "with", "tf", ".", "GradientTape", "(", "watch_accessed_variables", "=", "False", ")", "as", "g", ":", "\n", "            ", "g", ".", "watch", "(", "x", ")", "\n", "logits", "=", "self", ".", "__get_logits", "(", "x", ")", "\n", "l", "=", "[", "None", "]", "*", "x", ".", "shape", "[", "0", "]", "\n", "for", "c", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "l", "[", "c", "]", "=", "logits", "[", "c", ",", "la_target", "[", "c", "]", "]", "-", "logits", "[", "c", ",", "la", "[", "c", "]", "]", "\n", "\n", "", "difflogits", "=", "tf", ".", "stack", "(", "l", ")", "\n", "\n", "", "g2", "=", "g", ".", "gradient", "(", "difflogits", ",", "x", ")", "\n", "\n", "return", "difflogits", ",", "g2", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict": [[119, 128], ["tensorflow.convert_to_tensor", "utils_tf2.ModelAdapter.__get_logits().numpy", "torch.from_numpy().cuda", "x.cpu().numpy", "tensorflow.transpose", "utils_tf2.ModelAdapter.__get_logits", "torch.from_numpy", "x.cpu"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_logits"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x2", "=", "tf", ".", "convert_to_tensor", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "            ", "x2", "=", "tf", ".", "transpose", "(", "x2", ",", "perm", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "", "y", "=", "self", ".", "__get_logits", "(", "x2", ")", ".", "numpy", "(", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "y", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.grad_logits": [[129, 136], ["tensorflow.convert_to_tensor", "utils_tf2.ModelAdapter.__get_jacobian", "torch.from_numpy().cuda", "x.cpu().numpy", "tensorflow.transpose", "torch.from_numpy", "x.cpu", "utils_tf2.ModelAdapter.numpy"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_jacobian"], ["", "def", "grad_logits", "(", "self", ",", "x", ")", ":", "\n", "        ", "x2", "=", "tf", ".", "convert_to_tensor", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "            ", "x2", "=", "tf", ".", "transpose", "(", "x2", ",", "perm", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "g2", "=", "self", ".", "__get_jacobian", "(", "x2", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "g2", ".", "numpy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.set_target_class": [[137, 139], ["None"], "methods", ["None"], ["", "def", "set_target_class", "(", "self", ",", "y", ",", "y_target", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.get_grad_diff_logits_target": [[140, 153], ["tensorflow.convert_to_tensor", "y.cpu().numpy", "y_target.cpu().numpy", "utils_tf2.ModelAdapter.__get_grad_diff_logits_target", "x.cpu().numpy", "tensorflow.transpose", "tensorflow.transpose", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "y.cpu", "y_target.cpu", "x.cpu", "torch.from_numpy", "torch.from_numpy", "difflogits.numpy", "tensorflow.transpose.numpy"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_grad_diff_logits_target"], ["", "def", "get_grad_diff_logits_target", "(", "self", ",", "x", ",", "y", ",", "y_target", ")", ":", "\n", "        ", "x2", "=", "tf", ".", "convert_to_tensor", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "            ", "x2", "=", "tf", ".", "transpose", "(", "x2", ",", "perm", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "", "la", "=", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "la_target", "=", "y_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "difflogits", ",", "g2", "=", "self", ".", "__get_grad_diff_logits_target", "(", "x2", ",", "la", ",", "la_target", ")", "\n", "\n", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "            ", "g2", "=", "tf", ".", "transpose", "(", "g2", ",", "perm", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "difflogits", ".", "numpy", "(", ")", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "g2", ".", "numpy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.get_logits_loss_grad_xent": [[154, 167], ["tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "utils_tf2.ModelAdapter.__get_grad_xent", "x.cpu().numpy", "y.clone().cpu().numpy", "tensorflow.transpose", "tensorflow.transpose", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "x.cpu", "y.clone().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "logits_val.numpy", "loss_indiv_val.numpy", "tensorflow.transpose.numpy", "y.clone"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_grad_xent"], ["", "def", "get_logits_loss_grad_xent", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "x2", "=", "tf", ".", "convert_to_tensor", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "y2", "=", "tf", ".", "convert_to_tensor", "(", "y", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "            ", "x2", "=", "tf", ".", "transpose", "(", "x2", ",", "perm", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "", "logits_val", ",", "loss_indiv_val", ",", "grad_val", "=", "self", ".", "__get_grad_xent", "(", "x2", ",", "y2", ")", "\n", "\n", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "            ", "grad_val", "=", "tf", ".", "transpose", "(", "grad_val", ",", "perm", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "logits_val", ".", "numpy", "(", ")", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "loss_indiv_val", ".", "numpy", "(", ")", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "grad_val", ".", "numpy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.get_logits_loss_grad_dlr": [[168, 181], ["tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "utils_tf2.ModelAdapter.__get_grad_dlr", "x.cpu().numpy", "y.clone().cpu().numpy", "tensorflow.transpose", "tensorflow.transpose", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "x.cpu", "y.clone().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "logits_val.numpy", "loss_indiv_val.numpy", "tensorflow.transpose.numpy", "y.clone"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_grad_dlr"], ["", "def", "get_logits_loss_grad_dlr", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\n", "        ", "x2", "=", "tf", ".", "convert_to_tensor", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "y2", "=", "tf", ".", "convert_to_tensor", "(", "y", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "            ", "x2", "=", "tf", ".", "transpose", "(", "x2", ",", "perm", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "", "logits_val", ",", "loss_indiv_val", ",", "grad_val", "=", "self", ".", "__get_grad_dlr", "(", "x2", ",", "y2", ")", "\n", "\n", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "            ", "grad_val", "=", "tf", ".", "transpose", "(", "grad_val", ",", "perm", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "logits_val", ".", "numpy", "(", ")", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "loss_indiv_val", ".", "numpy", "(", ")", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "grad_val", ".", "numpy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.get_logits_loss_grad_target": [[182, 196], ["tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "utils_tf2.ModelAdapter.__get_grad_dlr_target", "x.cpu().numpy", "y.clone().cpu().numpy", "y_target.clone().cpu().numpy", "tensorflow.transpose", "tensorflow.transpose", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "x.cpu", "y.clone().cpu", "y_target.clone().cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "logits_val.numpy", "loss_indiv_val.numpy", "tensorflow.transpose.numpy", "y.clone", "y_target.clone"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.__get_grad_dlr_target"], ["", "def", "get_logits_loss_grad_target", "(", "self", ",", "x", ",", "y", ",", "y_target", ")", ":", "\n", "\n", "        ", "x2", "=", "tf", ".", "convert_to_tensor", "(", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "y2", "=", "tf", ".", "convert_to_tensor", "(", "y", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "y_targ", "=", "tf", ".", "convert_to_tensor", "(", "y_target", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "            ", "x2", "=", "tf", ".", "transpose", "(", "x2", ",", "perm", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "", "logits_val", ",", "loss_indiv_val", ",", "grad_val", "=", "self", ".", "__get_grad_dlr_target", "(", "x2", ",", "y2", ",", "y_targ", ")", "\n", "\n", "if", "self", ".", "data_format", "==", "'channels_last'", ":", "\n", "            ", "grad_val", "=", "tf", ".", "transpose", "(", "grad_val", ",", "perm", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "logits_val", ".", "numpy", "(", ")", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "loss_indiv_val", ".", "numpy", "(", ")", ")", ".", "cuda", "(", ")", ",", "torch", ".", "from_numpy", "(", "grad_val", ".", "numpy", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.dlr_loss": [[197, 204], ["tensorflow.sort", "tensorflow.one_hot"], "function", ["None"], ["", "", "def", "dlr_loss", "(", "x", ",", "y", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "x_sort", "=", "tf", ".", "sort", "(", "x", ",", "axis", "=", "1", ")", "\n", "y_onehot", "=", "tf", ".", "one_hot", "(", "y", ",", "num_classes", ")", "\n", "### TODO: adapt to the case when the point is already misclassified", "\n", "loss", "=", "-", "(", "x_sort", "[", ":", ",", "-", "1", "]", "-", "x_sort", "[", ":", ",", "-", "2", "]", ")", "/", "(", "x_sort", "[", ":", ",", "-", "1", "]", "-", "x_sort", "[", ":", ",", "-", "3", "]", "+", "1e-12", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.dlr_loss_targeted": [[205, 212], ["tensorflow.sort", "tensorflow.one_hot", "tensorflow.one_hot", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "dlr_loss_targeted", "(", "x", ",", "y", ",", "y_target", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "x_sort", "=", "tf", ".", "sort", "(", "x", ",", "axis", "=", "1", ")", "\n", "y_onehot", "=", "tf", ".", "one_hot", "(", "y", ",", "num_classes", ")", "\n", "y_target_onehot", "=", "tf", ".", "one_hot", "(", "y_target", ",", "num_classes", ")", "\n", "loss", "=", "-", "(", "tf", ".", "reduce_sum", "(", "x", "*", "y_onehot", ",", "axis", "=", "1", ")", "-", "tf", ".", "reduce_sum", "(", "x", "*", "y_target_onehot", ",", "axis", "=", "1", ")", ")", "/", "(", "x_sort", "[", ":", ",", "-", "1", "]", "-", ".5", "*", "x_sort", "[", ":", ",", "-", "3", "]", "-", ".5", "*", "x_sort", "[", ":", ",", "-", "4", "]", "+", "1e-12", ")", "\n", "\n", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.__init__": [[4, 6], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_path", ")", ":", "\n", "        ", "self", ".", "log_path", "=", "log_path", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.other_utils.Logger.log": [[7, 13], ["print", "open", "f.write", "f.flush"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "str_to_log", ")", ":", "\n", "        ", "print", "(", "str_to_log", ")", "\n", "if", "not", "self", ".", "log_path", "is", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "log_path", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "str_to_log", "+", "'\\n'", ")", "\n", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_tf.APGDAttack.__init__": [[17, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "n_iter", "=", "100", ",", "norm", "=", "'Linf'", ",", "n_restarts", "=", "1", ",", "eps", "=", "None", ",", "\n", "seed", "=", "0", ",", "loss", "=", "'ce'", ",", "eot_iter", "=", "1", ",", "rho", "=", ".75", ",", "verbose", "=", "False", ",", "\n", "device", "=", "'cuda'", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "n_restarts", "=", "n_restarts", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "eot_iter", "=", "eot_iter", "\n", "self", ".", "thr_decr", "=", "rho", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_tf.APGDAttack.check_oscillation": [[32, 38], ["numpy.zeros", "range", "numpy.ones"], "methods", ["None"], ["", "def", "check_oscillation", "(", "self", ",", "x", ",", "j", ",", "k", ",", "y5", ",", "k3", "=", "0.75", ")", ":", "\n", "        ", "t", "=", "np", ".", "zeros", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "for", "counter5", "in", "range", "(", "k", ")", ":", "\n", "          ", "t", "+=", "x", "[", "j", "-", "counter5", "]", ">", "x", "[", "j", "-", "counter5", "-", "1", "]", "\n", "\n", "", "return", "t", "<=", "k", "*", "k3", "*", "np", ".", "ones", "(", "t", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_tf.APGDAttack.check_shape": [[39, 41], ["numpy.expand_dims", "len"], "methods", ["None"], ["", "def", "check_shape", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "if", "len", "(", "x", ".", "shape", ")", ">", "0", "else", "np", ".", "expand_dims", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_tf.APGDAttack.attack_single_run": [[42, 164], ["x_adv.detach.detach.clamp", "x_adv.detach.detach.clone", "x_adv.detach.detach.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "float", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.zeros_like.clone", "loss_indiv.detach().clone", "x_adv.detach.detach.clone", "numpy.arange", "loss_indiv.detach().clone.clone", "range", "x_in.clone", "x_in.clone().unsqueeze", "y_in.clone", "y_in.clone().unsqueeze", "max", "max", "max", "print", "criterion_indiv", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "numpy.zeros", "numpy.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "len", "len", "int", "int", "int", "x.detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "ValueError", "logits.detach().max", "loss_indiv.detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x_adv.detach.detach.detach", "x_adv.detach.detach.clone", "criterion_indiv", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "loss_indiv.detach().clone", "x_adv[].clone", "grad[].clone", "x_in.clone", "y_in.clone", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "[].reshape", "x.detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "logits.detach().max", "loss_indiv.detach().clone.cpu", "autopgd_tf.APGDAttack.check_oscillation", "numpy.copy", "loss_indiv.detach().clone.clone", "numpy.maximum", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "logits.detach", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "loss_indiv.detach().clone.sum", "loss_indiv.detach", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "loss_indiv.detach().clone.detach().cpu().numpy", "numpy.sum", "numpy.where.astype().sum", "numpy.where", "x_best[].clone", "grad_best[].clone", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "logits.detach", "loss_indiv.detach().clone.clone.cpu().numpy", "loss_indiv.detach().clone.cpu().numpy", "torch.randn().to().detach.reshape().abs().max", "torch.randn().to().detach.reshape().abs().max", "torch.randn().to().detach.reshape().abs().max", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "loss_indiv.detach().clone.detach().cpu", "numpy.where.astype", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "loss_indiv.detach().clone.clone.cpu", "loss_indiv.detach().clone.cpu", "torch.randn().to().detach.reshape().abs", "torch.randn().to().detach.reshape().abs", "torch.randn().to().detach.reshape().abs", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "loss_indiv.detach().clone.detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.randn().to().detach.reshape", "torch.randn().to().detach.reshape", "torch.randn().to().detach.reshape", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_oscillation"], ["", "def", "attack_single_run", "(", "self", ",", "x_in", ",", "y_in", ")", ":", "\n", "        ", "x", "=", "x_in", ".", "clone", "(", ")", "if", "len", "(", "x_in", ".", "shape", ")", "==", "4", "else", "x_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "y", "=", "y_in", ".", "clone", "(", ")", "if", "len", "(", "y_in", ".", "shape", ")", "==", "1", "else", "y_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "self", ".", "n_iter_2", ",", "self", ".", "n_iter_min", ",", "self", ".", "size_decr", "=", "max", "(", "int", "(", "0.22", "*", "self", ".", "n_iter", ")", ",", "1", ")", ",", "max", "(", "int", "(", "0.06", "*", "self", ".", "n_iter", ")", ",", "1", ")", ",", "max", "(", "int", "(", "0.03", "*", "self", ".", "n_iter", ")", ",", "1", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'parameters: '", ",", "self", ".", "n_iter", ",", "self", ".", "n_iter_2", ",", "self", ".", "n_iter_min", ",", "self", ".", "size_decr", ")", "\n", "\n", "", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "            ", "t", "=", "2", "*", "torch", ".", "rand", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "-", "1", "\n", "x_adv", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "t", "/", "(", "t", ".", "reshape", "(", "[", "t", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "            ", "t", "=", "torch", ".", "randn", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "\n", "x_adv", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "t", "/", "(", "(", "t", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "\n", "", "x_adv", "=", "x_adv", ".", "clamp", "(", "0.", ",", "1.", ")", "\n", "x_best", "=", "x_adv", ".", "clone", "(", ")", "\n", "x_best_adv", "=", "x_adv", ".", "clone", "(", ")", "\n", "loss_steps", "=", "torch", ".", "zeros", "(", "[", "self", ".", "n_iter", ",", "x", ".", "shape", "[", "0", "]", "]", ")", "\n", "loss_best_steps", "=", "torch", ".", "zeros", "(", "[", "self", ".", "n_iter", "+", "1", ",", "x", ".", "shape", "[", "0", "]", "]", ")", "\n", "acc_steps", "=", "torch", ".", "zeros_like", "(", "loss_best_steps", ")", "\n", "\n", "if", "self", ".", "loss", "==", "'ce'", ":", "\n", "            ", "criterion_indiv", "=", "self", ".", "model", ".", "get_logits_loss_grad_xent", "\n", "", "elif", "self", ".", "loss", "==", "'dlr'", ":", "\n", "            ", "criterion_indiv", "=", "self", ".", "model", ".", "get_logits_loss_grad_dlr", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'unknowkn loss'", ")", "\n", "\n", "", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "eot_iter", ")", ":", "\n", "            ", "logits", ",", "loss_indiv", ",", "grad_curr", "=", "criterion_indiv", "(", "x_adv", ",", "y", ")", "\n", "grad", "+=", "grad_curr", "\n", "\n", "", "grad", "/=", "float", "(", "self", ".", "eot_iter", ")", "\n", "grad_best", "=", "grad", ".", "clone", "(", ")", "\n", "\n", "acc", "=", "logits", ".", "detach", "(", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "acc_steps", "[", "0", "]", "=", "acc", "+", "0", "\n", "loss_best", "=", "loss_indiv", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "step_size", "=", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "torch", ".", "Tensor", "(", "[", "2.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "x_adv_old", "=", "x_adv", ".", "clone", "(", ")", "\n", "counter", "=", "0", "\n", "k", "=", "self", ".", "n_iter_2", "+", "0", "\n", "u", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "counter3", "=", "0", "\n", "\n", "loss_best_last_check", "=", "loss_best", ".", "clone", "(", ")", "\n", "reduced_last_check", "=", "np", ".", "zeros", "(", "loss_best", ".", "shape", ")", "==", "np", ".", "zeros", "(", "loss_best", ".", "shape", ")", "\n", "n_reduced", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "### gradient step", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "\n", "grad2", "=", "x_adv", "-", "x_adv_old", "\n", "x_adv_old", "=", "x_adv", ".", "clone", "(", ")", "\n", "\n", "a", "=", "0.75", "if", "i", ">", "0", "else", "1.0", "\n", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                    ", "x_adv_1", "=", "x_adv", "+", "step_size", "*", "torch", ".", "sign", "(", "grad", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv_1", ",", "x", "-", "self", ".", "eps", ")", ",", "x", "+", "self", ".", "eps", ")", ",", "0.0", ",", "1.0", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", "+", "(", "x_adv_1", "-", "x_adv", ")", "*", "a", "+", "grad2", "*", "(", "1", "-", "a", ")", ",", "x", "-", "self", ".", "eps", ")", ",", "x", "+", "self", ".", "eps", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                    ", "x_adv_1", "=", "x_adv", "+", "step_size", "*", "grad", "/", "(", "(", "grad", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "x", "+", "(", "x_adv_1", "-", "x", ")", "/", "(", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "*", "torch", ".", "min", "(", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", ",", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ")", ",", "0.0", ",", "1.0", ")", "\n", "x_adv_1", "=", "x_adv", "+", "(", "x_adv_1", "-", "x_adv", ")", "*", "a", "+", "grad2", "*", "(", "1", "-", "a", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "x", "+", "(", "x_adv_1", "-", "x", ")", "/", "(", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "*", "torch", ".", "min", "(", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", ",", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "x_adv", "=", "x_adv_1", "+", "0.", "\n", "\n", "### get gradient", "\n", "", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "eot_iter", ")", ":", "\n", "                ", "logits", ",", "loss_indiv", ",", "grad_curr", "=", "criterion_indiv", "(", "x_adv", ",", "y", ")", "\n", "grad", "+=", "grad_curr", "\n", "\n", "", "grad", "/=", "float", "(", "self", ".", "eot_iter", ")", "\n", "\n", "pred", "=", "logits", ".", "detach", "(", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "acc", "=", "torch", ".", "min", "(", "acc", ",", "pred", ")", "\n", "acc_steps", "[", "i", "+", "1", "]", "=", "acc", "+", "0", "\n", "x_best_adv", "[", "(", "pred", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "=", "x_adv", "[", "(", "pred", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "+", "0.", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'iteration: {} - Best loss: {:.6f}'", ".", "format", "(", "i", ",", "loss_best", ".", "sum", "(", ")", ")", ")", "\n", "\n", "### check step size", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "              ", "y1", "=", "loss_indiv", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "loss_steps", "[", "i", "]", "=", "y1", ".", "cpu", "(", ")", "+", "0", "\n", "ind", "=", "(", "y1", ">", "loss_best", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "x_best", "[", "ind", "]", "=", "x_adv", "[", "ind", "]", ".", "clone", "(", ")", "\n", "grad_best", "[", "ind", "]", "=", "grad", "[", "ind", "]", ".", "clone", "(", ")", "\n", "loss_best", "[", "ind", "]", "=", "y1", "[", "ind", "]", "+", "0", "\n", "loss_best_steps", "[", "i", "+", "1", "]", "=", "loss_best", "+", "0", "\n", "\n", "counter3", "+=", "1", "\n", "\n", "if", "counter3", "==", "k", ":", "\n", "                  ", "fl_oscillation", "=", "self", ".", "check_oscillation", "(", "loss_steps", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "i", ",", "k", ",", "loss_best", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k3", "=", "self", ".", "thr_decr", ")", "\n", "fl_reduce_no_impr", "=", "(", "~", "reduced_last_check", ")", "*", "(", "loss_best_last_check", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">=", "loss_best", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "fl_oscillation", "=", "~", "(", "~", "fl_oscillation", "*", "~", "fl_reduce_no_impr", ")", "\n", "reduced_last_check", "=", "np", ".", "copy", "(", "fl_oscillation", ")", "\n", "loss_best_last_check", "=", "loss_best", ".", "clone", "(", ")", "\n", "\n", "if", "np", ".", "sum", "(", "fl_oscillation", ")", ">", "0", ":", "\n", "                      ", "step_size", "[", "u", "[", "fl_oscillation", "]", "]", "/=", "2.0", "\n", "n_reduced", "=", "fl_oscillation", ".", "astype", "(", "float", ")", ".", "sum", "(", ")", "\n", "\n", "fl_oscillation", "=", "np", ".", "where", "(", "fl_oscillation", ")", "\n", "\n", "x_adv", "[", "fl_oscillation", "]", "=", "x_best", "[", "fl_oscillation", "]", ".", "clone", "(", ")", "\n", "grad", "[", "fl_oscillation", "]", "=", "grad_best", "[", "fl_oscillation", "]", ".", "clone", "(", ")", "\n", "\n", "", "counter3", "=", "0", "\n", "k", "=", "np", ".", "maximum", "(", "k", "-", "self", ".", "size_decr", ",", "self", ".", "n_iter_min", ")", "\n", "\n", "", "", "", "return", "x_best", ",", "acc", ",", "loss_best", ",", "x_best_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_tf.APGDAttack.perturb": [[165, 200], ["x.clone", "time.time", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "x_in.clone", "x_in.clone().unsqueeze", "y_in.clone", "y_in.clone().unsqueeze", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "print", "print", "ValueError", "range", "len", "len", "autopgd_tf.APGDAttack.model.predict().max", "acc.nonzero().squeeze", "x_in.clone", "y_in.clone", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "acc.float().mean", "len", "ind_to_fool.unsqueeze.unsqueeze.unsqueeze", "ind_to_fool.unsqueeze.unsqueeze.numel", "autopgd_tf.APGDAttack.attack_single_run", "adv_curr[].clone", "autopgd_tf.APGDAttack.model.predict", "acc.nonzero", "x[].clone", "y[].clone", "print", "acc.float", "acc.float().mean", "time.time", "acc.float"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.attack_single_run", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict"], ["", "def", "perturb", "(", "self", ",", "x_in", ",", "y_in", ",", "cheap", "=", "True", ")", ":", "\n", "        ", "assert", "self", ".", "norm", "in", "[", "'Linf'", ",", "'L2'", "]", "\n", "x", "=", "x_in", ".", "clone", "(", ")", "if", "len", "(", "x_in", ".", "shape", ")", "==", "4", "else", "x_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "y", "=", "y_in", ".", "clone", "(", ")", "if", "len", "(", "y_in", ".", "shape", ")", "==", "1", "else", "y_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "adv", "=", "x", ".", "clone", "(", ")", "\n", "acc", "=", "self", ".", "model", ".", "predict", "(", "x", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "loss", "=", "-", "1e10", "*", "torch", ".", "ones_like", "(", "acc", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'-------------------------- running {}-attack with epsilon {:.4f} --------------------------'", ".", "format", "(", "self", ".", "norm", ",", "self", ".", "eps", ")", ")", "\n", "print", "(", "'initial accuracy: {:.2%}'", ".", "format", "(", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "", "startt", "=", "time", ".", "time", "(", ")", "\n", "\n", "torch", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "if", "not", "cheap", ":", "\n", "            ", "raise", "ValueError", "(", "'not implemented yet'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "for", "counter", "in", "range", "(", "self", ".", "n_restarts", ")", ":", "\n", "                ", "ind_to_fool", "=", "acc", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "ind_to_fool", ".", "shape", ")", "==", "0", ":", "ind_to_fool", "=", "ind_to_fool", ".", "unsqueeze", "(", "0", ")", "\n", "if", "ind_to_fool", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                    ", "x_to_fool", ",", "y_to_fool", "=", "x", "[", "ind_to_fool", "]", ".", "clone", "(", ")", ",", "y", "[", "ind_to_fool", "]", ".", "clone", "(", ")", "\n", "best_curr", ",", "acc_curr", ",", "loss_curr", ",", "adv_curr", "=", "self", ".", "attack_single_run", "(", "x_to_fool", ",", "y_to_fool", ")", "\n", "ind_curr", "=", "(", "acc_curr", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "#", "\n", "acc", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "0", "\n", "adv", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "adv_curr", "[", "ind_curr", "]", ".", "clone", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                        ", "print", "(", "'restart {} - robust accuracy: {:.2%} - cum. time: {:.1f} s'", ".", "format", "(", "\n", "counter", ",", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "", "", "", "return", "acc", ",", "adv", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_tf.APGDAttack_targeted.__init__": [[202, 217], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "n_iter", "=", "100", ",", "norm", "=", "'Linf'", ",", "n_restarts", "=", "1", ",", "eps", "=", "None", ",", "\n", "seed", "=", "0", ",", "eot_iter", "=", "1", ",", "rho", "=", ".75", ",", "verbose", "=", "False", ",", "device", "=", "'cuda'", ",", "\n", "n_target_classes", "=", "9", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "n_restarts", "=", "n_restarts", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "eot_iter", "=", "eot_iter", "\n", "self", ".", "thr_decr", "=", "rho", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "target_class", "=", "None", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_target_classes", "=", "n_target_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_tf.APGDAttack_targeted.check_oscillation": [[218, 224], ["numpy.zeros", "range", "numpy.ones"], "methods", ["None"], ["", "def", "check_oscillation", "(", "self", ",", "x", ",", "j", ",", "k", ",", "y5", ",", "k3", "=", "0.5", ")", ":", "\n", "        ", "t", "=", "np", ".", "zeros", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "for", "counter5", "in", "range", "(", "k", ")", ":", "\n", "          ", "t", "+=", "x", "[", "j", "-", "counter5", "]", ">", "x", "[", "j", "-", "counter5", "-", "1", "]", "\n", "\n", "", "return", "t", "<=", "k", "*", "k3", "*", "np", ".", "ones", "(", "t", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_tf.APGDAttack_targeted.check_shape": [[225, 227], ["numpy.expand_dims", "len"], "methods", ["None"], ["", "def", "check_shape", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "if", "len", "(", "x", ".", "shape", ")", ">", "0", "else", "np", ".", "expand_dims", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_tf.APGDAttack_targeted.custom_loss_targeted": [[228, 232], ["x.sort", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "custom_loss_targeted", "(", "self", ",", "x", ",", "y", ",", "y_target", ")", ":", "\n", "        ", "x_sorted", ",", "ind_sorted", "=", "x", ".", "sort", "(", "dim", "=", "1", ")", "\n", "\n", "return", "-", "(", "x", "[", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "y", "]", "-", "x", "[", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "y_target", "]", ")", "/", "(", "x_sorted", "[", ":", ",", "-", "1", "]", "-", ".5", "*", "x_sorted", "[", ":", ",", "-", "3", "]", "-", ".5", "*", "x_sorted", "[", ":", ",", "-", "4", "]", "+", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_tf.APGDAttack_targeted.attack_single_run": [[233, 351], ["x_adv.detach.detach.clamp", "x_adv.detach.detach.clone", "x_adv.detach.detach.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "autopgd_tf.APGDAttack_targeted.model.predict", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "float", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.zeros_like.clone", "loss_indiv.detach().clone", "x_adv.detach.detach.clone", "numpy.arange", "loss_indiv.detach().clone.clone", "range", "x_in.clone", "x_in.clone().unsqueeze", "y_in.clone", "y_in.clone().unsqueeze", "max", "max", "max", "print", "autopgd_tf.APGDAttack_targeted.model.get_logits_loss_grad_target", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "numpy.zeros", "numpy.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "len", "len", "int", "int", "int", "x.detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "autopgd_tf.APGDAttack_targeted.sort", "logits.detach().max", "loss_indiv.detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x_adv.detach.detach.detach", "x_adv.detach.detach.clone", "autopgd_tf.APGDAttack_targeted.model.get_logits_loss_grad_target", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "loss_indiv.detach().clone", "x_adv[].clone", "grad[].clone", "x_in.clone", "y_in.clone", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "[].reshape", "x.detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "logits.detach().max", "loss_indiv.detach().clone.cpu", "autopgd_tf.APGDAttack_targeted.check_oscillation", "numpy.copy", "loss_indiv.detach().clone.clone", "numpy.maximum", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "logits.detach", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "loss_indiv.detach().clone.sum", "loss_indiv.detach", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "loss_indiv.detach().clone.detach().cpu().numpy", "numpy.sum", "numpy.where.astype().sum", "numpy.where", "x_best[].clone", "grad_best[].clone", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "logits.detach", "loss_indiv.detach().clone.clone.cpu().numpy", "loss_indiv.detach().clone.cpu().numpy", "torch.randn().to().detach.reshape().abs().max", "torch.randn().to().detach.reshape().abs().max", "torch.randn().to().detach.reshape().abs().max", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "loss_indiv.detach().clone.detach().cpu", "numpy.where.astype", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "loss_indiv.detach().clone.clone.cpu", "loss_indiv.detach().clone.cpu", "torch.randn().to().detach.reshape().abs", "torch.randn().to().detach.reshape().abs", "torch.randn().to().detach.reshape().abs", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "loss_indiv.detach().clone.detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.randn().to().detach.reshape", "torch.randn().to().detach.reshape", "torch.randn().to().detach.reshape", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.get_logits_loss_grad_target", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.get_logits_loss_grad_target", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_oscillation"], ["", "def", "attack_single_run", "(", "self", ",", "x_in", ",", "y_in", ")", ":", "\n", "        ", "x", "=", "x_in", ".", "clone", "(", ")", "if", "len", "(", "x_in", ".", "shape", ")", "==", "4", "else", "x_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "y", "=", "y_in", ".", "clone", "(", ")", "if", "len", "(", "y_in", ".", "shape", ")", "==", "1", "else", "y_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "self", ".", "n_iter_2", ",", "self", ".", "n_iter_min", ",", "self", ".", "size_decr", "=", "max", "(", "int", "(", "0.22", "*", "self", ".", "n_iter", ")", ",", "1", ")", ",", "max", "(", "int", "(", "0.06", "*", "self", ".", "n_iter", ")", ",", "1", ")", ",", "max", "(", "int", "(", "0.03", "*", "self", ".", "n_iter", ")", ",", "1", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'parameters: '", ",", "self", ".", "n_iter", ",", "self", ".", "n_iter_2", ",", "self", ".", "n_iter_min", ",", "self", ".", "size_decr", ")", "\n", "\n", "", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "            ", "t", "=", "2", "*", "torch", ".", "rand", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "-", "1", "\n", "x_adv", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "t", "/", "(", "t", ".", "reshape", "(", "[", "t", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "            ", "t", "=", "torch", ".", "randn", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "\n", "x_adv", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "t", "/", "(", "(", "t", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "\n", "", "x_adv", "=", "x_adv", ".", "clamp", "(", "0.", ",", "1.", ")", "\n", "x_best", "=", "x_adv", ".", "clone", "(", ")", "\n", "x_best_adv", "=", "x_adv", ".", "clone", "(", ")", "\n", "loss_steps", "=", "torch", ".", "zeros", "(", "[", "self", ".", "n_iter", ",", "x", ".", "shape", "[", "0", "]", "]", ")", "\n", "loss_best_steps", "=", "torch", ".", "zeros", "(", "[", "self", ".", "n_iter", "+", "1", ",", "x", ".", "shape", "[", "0", "]", "]", ")", "\n", "acc_steps", "=", "torch", ".", "zeros_like", "(", "loss_best_steps", ")", "\n", "\n", "output", "=", "self", ".", "model", ".", "predict", "(", "x", ")", "\n", "y_target", "=", "output", ".", "sort", "(", "dim", "=", "1", ")", "[", "1", "]", "[", ":", ",", "-", "self", ".", "target_class", "]", "\n", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "eot_iter", ")", ":", "\n", "            ", "logits", ",", "loss_indiv", ",", "grad_curr", "=", "self", ".", "model", ".", "get_logits_loss_grad_target", "(", "x_adv", ",", "y", ",", "y_target", ")", "\n", "grad", "+=", "grad_curr", "\n", "\n", "", "grad", "/=", "float", "(", "self", ".", "eot_iter", ")", "\n", "grad_best", "=", "grad", ".", "clone", "(", ")", "\n", "\n", "acc", "=", "logits", ".", "detach", "(", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "acc_steps", "[", "0", "]", "=", "acc", "+", "0", "\n", "loss_best", "=", "loss_indiv", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "step_size", "=", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "torch", ".", "Tensor", "(", "[", "2.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "x_adv_old", "=", "x_adv", ".", "clone", "(", ")", "\n", "counter", "=", "0", "\n", "k", "=", "self", ".", "n_iter_2", "+", "0", "\n", "u", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "counter3", "=", "0", "\n", "\n", "loss_best_last_check", "=", "loss_best", ".", "clone", "(", ")", "\n", "reduced_last_check", "=", "np", ".", "zeros", "(", "loss_best", ".", "shape", ")", "==", "np", ".", "zeros", "(", "loss_best", ".", "shape", ")", "\n", "n_reduced", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "### gradient step", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "\n", "grad2", "=", "x_adv", "-", "x_adv_old", "\n", "x_adv_old", "=", "x_adv", ".", "clone", "(", ")", "\n", "\n", "a", "=", "0.75", "if", "i", ">", "0", "else", "1.0", "\n", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                    ", "x_adv_1", "=", "x_adv", "+", "step_size", "*", "torch", ".", "sign", "(", "grad", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv_1", ",", "x", "-", "self", ".", "eps", ")", ",", "x", "+", "self", ".", "eps", ")", ",", "0.0", ",", "1.0", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", "+", "(", "x_adv_1", "-", "x_adv", ")", "*", "a", "+", "grad2", "*", "(", "1", "-", "a", ")", ",", "x", "-", "self", ".", "eps", ")", ",", "x", "+", "self", ".", "eps", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                    ", "x_adv_1", "=", "x_adv", "+", "step_size", "[", "0", "]", "*", "grad", "/", "(", "(", "grad", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "x", "+", "(", "x_adv_1", "-", "x", ")", "/", "(", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "*", "torch", ".", "min", "(", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", ",", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ")", ",", "0.0", ",", "1.0", ")", "\n", "x_adv_1", "=", "x_adv", "+", "(", "x_adv_1", "-", "x_adv", ")", "*", "a", "+", "grad2", "*", "(", "1", "-", "a", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "x", "+", "(", "x_adv_1", "-", "x", ")", "/", "(", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "*", "torch", ".", "min", "(", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", ",", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "x_adv", "=", "x_adv_1", "+", "0.", "\n", "\n", "### get gradient", "\n", "", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "eot_iter", ")", ":", "\n", "                ", "logits", ",", "loss_indiv", ",", "grad_curr", "=", "self", ".", "model", ".", "get_logits_loss_grad_target", "(", "x_adv", ",", "y", ",", "y_target", ")", "\n", "grad", "+=", "grad_curr", "\n", "\n", "", "grad", "/=", "float", "(", "self", ".", "eot_iter", ")", "\n", "\n", "pred", "=", "logits", ".", "detach", "(", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "acc", "=", "torch", ".", "min", "(", "acc", ",", "pred", ")", "\n", "acc_steps", "[", "i", "+", "1", "]", "=", "acc", "+", "0", "\n", "x_best_adv", "[", "(", "pred", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "=", "x_adv", "[", "(", "pred", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "+", "0.", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'iteration: {} - Best loss: {:.6f}'", ".", "format", "(", "i", ",", "loss_best", ".", "sum", "(", ")", ")", ")", "\n", "\n", "### check step size", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "              ", "y1", "=", "loss_indiv", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "loss_steps", "[", "i", "]", "=", "y1", ".", "cpu", "(", ")", "+", "0", "\n", "ind", "=", "(", "y1", ">", "loss_best", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "x_best", "[", "ind", "]", "=", "x_adv", "[", "ind", "]", ".", "clone", "(", ")", "\n", "grad_best", "[", "ind", "]", "=", "grad", "[", "ind", "]", ".", "clone", "(", ")", "\n", "loss_best", "[", "ind", "]", "=", "y1", "[", "ind", "]", "+", "0", "\n", "loss_best_steps", "[", "i", "+", "1", "]", "=", "loss_best", "+", "0", "\n", "\n", "counter3", "+=", "1", "\n", "\n", "if", "counter3", "==", "k", ":", "\n", "                  ", "fl_oscillation", "=", "self", ".", "check_oscillation", "(", "loss_steps", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "i", ",", "k", ",", "loss_best", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k3", "=", "self", ".", "thr_decr", ")", "\n", "fl_reduce_no_impr", "=", "(", "~", "reduced_last_check", ")", "*", "(", "loss_best_last_check", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">=", "loss_best", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "fl_oscillation", "=", "~", "(", "~", "fl_oscillation", "*", "~", "fl_reduce_no_impr", ")", "\n", "reduced_last_check", "=", "np", ".", "copy", "(", "fl_oscillation", ")", "\n", "loss_best_last_check", "=", "loss_best", ".", "clone", "(", ")", "\n", "\n", "if", "np", ".", "sum", "(", "fl_oscillation", ")", ">", "0", ":", "\n", "                      ", "step_size", "[", "u", "[", "fl_oscillation", "]", "]", "/=", "2.0", "\n", "n_reduced", "=", "fl_oscillation", ".", "astype", "(", "float", ")", ".", "sum", "(", ")", "\n", "\n", "fl_oscillation", "=", "np", ".", "where", "(", "fl_oscillation", ")", "\n", "\n", "x_adv", "[", "fl_oscillation", "]", "=", "x_best", "[", "fl_oscillation", "]", ".", "clone", "(", ")", "\n", "grad", "[", "fl_oscillation", "]", "=", "grad_best", "[", "fl_oscillation", "]", ".", "clone", "(", ")", "\n", "\n", "", "counter3", "=", "0", "\n", "k", "=", "np", ".", "maximum", "(", "k", "-", "self", ".", "size_decr", ",", "self", ".", "n_iter_min", ")", "\n", "\n", "", "", "", "return", "x_best", ",", "acc", ",", "loss_best", ",", "x_best_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_tf.APGDAttack_targeted.perturb": [[352, 389], ["x.clone", "time.time", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "x_in.clone", "x_in.clone().unsqueeze", "y_in.clone", "y_in.clone().unsqueeze", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "print", "print", "ValueError", "range", "len", "len", "autopgd_tf.APGDAttack_targeted.model.predict().max", "range", "x_in.clone", "y_in.clone", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "acc.float().mean", "acc.nonzero().squeeze", "autopgd_tf.APGDAttack_targeted.model.predict", "len", "ind_to_fool.unsqueeze.unsqueeze.unsqueeze", "ind_to_fool.unsqueeze.unsqueeze.numel", "autopgd_tf.APGDAttack_targeted.attack_single_run", "adv_curr[].clone", "acc.float", "acc.nonzero", "x[].clone", "y[].clone", "print", "acc.float().mean", "time.time", "acc.float"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.attack_single_run"], ["", "def", "perturb", "(", "self", ",", "x_in", ",", "y_in", ",", "best_loss", "=", "False", ",", "cheap", "=", "True", ")", ":", "\n", "        ", "assert", "self", ".", "norm", "in", "[", "'Linf'", ",", "'L2'", "]", "\n", "x", "=", "x_in", ".", "clone", "(", ")", "if", "len", "(", "x_in", ".", "shape", ")", "==", "4", "else", "x_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "y", "=", "y_in", ".", "clone", "(", ")", "if", "len", "(", "y_in", ".", "shape", ")", "==", "1", "else", "y_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "adv", "=", "x", ".", "clone", "(", ")", "\n", "acc", "=", "self", ".", "model", ".", "predict", "(", "x", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "loss", "=", "-", "1e10", "*", "torch", ".", "ones_like", "(", "acc", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'-------------------------- running {}-attack with epsilon {:.4f} --------------------------'", ".", "format", "(", "self", ".", "norm", ",", "self", ".", "eps", ")", ")", "\n", "print", "(", "'initial accuracy: {:.2%}'", ".", "format", "(", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "", "startt", "=", "time", ".", "time", "(", ")", "\n", "\n", "torch", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "if", "not", "cheap", ":", "\n", "            ", "raise", "ValueError", "(", "'not implemented yet'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "for", "target_class", "in", "range", "(", "2", ",", "self", ".", "n_target_classes", "+", "2", ")", ":", "\n", "                ", "self", ".", "target_class", "=", "target_class", "\n", "for", "counter", "in", "range", "(", "self", ".", "n_restarts", ")", ":", "\n", "                    ", "ind_to_fool", "=", "acc", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "ind_to_fool", ".", "shape", ")", "==", "0", ":", "ind_to_fool", "=", "ind_to_fool", ".", "unsqueeze", "(", "0", ")", "\n", "if", "ind_to_fool", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                        ", "x_to_fool", ",", "y_to_fool", "=", "x", "[", "ind_to_fool", "]", ".", "clone", "(", ")", ",", "y", "[", "ind_to_fool", "]", ".", "clone", "(", ")", "\n", "best_curr", ",", "acc_curr", ",", "loss_curr", ",", "adv_curr", "=", "self", ".", "attack_single_run", "(", "x_to_fool", ",", "y_to_fool", ")", "\n", "ind_curr", "=", "(", "acc_curr", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "#", "\n", "acc", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "0", "\n", "adv", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "adv_curr", "[", "ind_curr", "]", ".", "clone", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                            ", "print", "(", "'restart {} - target_class {} - robust accuracy: {:.2%} at eps = {:.5f} - cum. time: {:.1f} s'", ".", "format", "(", "\n", "counter", ",", "self", ".", "target_class", ",", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "self", ".", "eps", ",", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "", "", "", "", "return", "acc", ",", "adv", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.__init__": [[36, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "predict", ",", "\n", "norm", "=", "'Linf'", ",", "\n", "n_restarts", "=", "1", ",", "\n", "n_iter", "=", "100", ",", "\n", "eps", "=", "None", ",", "\n", "alpha_max", "=", "0.1", ",", "\n", "eta", "=", "1.05", ",", "\n", "beta", "=", "0.9", ",", "\n", "loss_fn", "=", "None", ",", "\n", "verbose", "=", "False", ",", "\n", "seed", "=", "0", ",", "\n", "targeted", "=", "False", ",", "\n", "device", "=", "None", ",", "\n", "n_target_classes", "=", "9", ")", ":", "\n", "        ", "\"\"\" FAB-attack implementation in pytorch \"\"\"", "\n", "\n", "self", ".", "predict", "=", "predict", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "n_restarts", "=", "n_restarts", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "eps", "=", "eps", "if", "eps", "is", "not", "None", "else", "DEFAULT_EPS_DICT_BY_NORM", "[", "norm", "]", "\n", "self", ".", "alpha_max", "=", "alpha_max", "\n", "self", ".", "eta", "=", "eta", "\n", "self", ".", "beta", "=", "beta", "\n", "self", ".", "targeted", "=", "False", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "target_class", "=", "None", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_target_classes", "=", "n_target_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack._get_predicted_label": [[69, 74], ["torch.max", "torch.no_grad", "fab_pt.FABAttack.predict"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict"], ["", "def", "_get_predicted_label", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "self", ".", "predict", "(", "x", ")", "\n", "", "_", ",", "y", "=", "torch", ".", "max", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.check_shape": [[75, 77], ["x.unsqueeze", "len"], "methods", ["None"], ["", "def", "check_shape", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "if", "len", "(", "x", ".", "shape", ")", ">", "0", "else", "x", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.get_diff_logits_grads_batch": [[78, 100], ["imgs.clone().requires_grad_", "torch.zeros().to", "torch.zeros_like", "range", "torch.transpose().detach", "fab_pt.FABAttack.detach", "torch.enable_grad", "fab_pt.FABAttack.predict", "torch.autograd.gradcheck.zero_gradients", "fab_pt.FABAttack.backward", "y2[].unsqueeze", "g2[].unsqueeze", "imgs.clone", "torch.zeros", "torch.transpose", "torch.arange", "imgs.size", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict"], ["", "def", "get_diff_logits_grads_batch", "(", "self", ",", "imgs", ",", "la", ")", ":", "\n", "        ", "im", "=", "imgs", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "y", "=", "self", ".", "predict", "(", "im", ")", "\n", "\n", "", "g2", "=", "torch", ".", "zeros", "(", "[", "y", ".", "shape", "[", "-", "1", "]", ",", "*", "imgs", ".", "size", "(", ")", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "grad_mask", "=", "torch", ".", "zeros_like", "(", "y", ")", "\n", "for", "counter", "in", "range", "(", "y", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "zero_gradients", "(", "im", ")", "\n", "grad_mask", "[", ":", ",", "counter", "]", "=", "1.0", "\n", "y", ".", "backward", "(", "grad_mask", ",", "retain_graph", "=", "True", ")", "\n", "grad_mask", "[", ":", ",", "counter", "]", "=", "0.0", "\n", "g2", "[", "counter", "]", "=", "im", ".", "grad", ".", "data", "\n", "\n", "", "g2", "=", "torch", ".", "transpose", "(", "g2", ",", "0", ",", "1", ")", ".", "detach", "(", ")", "\n", "#y2 = self.predict(imgs).detach()", "\n", "y2", "=", "y", ".", "detach", "(", ")", "\n", "df", "=", "y2", "-", "y2", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la", "]", ".", "unsqueeze", "(", "1", ")", "\n", "dg", "=", "g2", "-", "g2", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la", "]", ".", "unsqueeze", "(", "1", ")", "\n", "df", "[", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", ",", "la", "]", "=", "1e10", "\n", "\n", "return", "df", ",", "dg", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.get_diff_logits_grads_batch_targeted": [[101, 116], ["torch.arange", "imgs.clone().requires_grad_", "torch.autograd.gradcheck.zero_gradients", "diffy.sum.backward", "diffy.detach().unsqueeze", "graddiffy.unsqueeze", "torch.enable_grad", "fab_pt.FABAttack.predict", "diffy.sum", "imgs.clone", "diffy.detach"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict"], ["", "def", "get_diff_logits_grads_batch_targeted", "(", "self", ",", "imgs", ",", "la", ",", "la_target", ")", ":", "\n", "        ", "u", "=", "torch", ".", "arange", "(", "imgs", ".", "shape", "[", "0", "]", ")", "\n", "im", "=", "imgs", ".", "clone", "(", ")", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "y", "=", "self", ".", "predict", "(", "im", ")", "\n", "diffy", "=", "-", "(", "y", "[", "u", ",", "la", "]", "-", "y", "[", "u", ",", "la_target", "]", ")", "\n", "sumdiffy", "=", "diffy", ".", "sum", "(", ")", "\n", "\n", "", "zero_gradients", "(", "im", ")", "\n", "sumdiffy", ".", "backward", "(", ")", "\n", "graddiffy", "=", "im", ".", "grad", ".", "data", "\n", "df", "=", "diffy", ".", "detach", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "dg", "=", "graddiffy", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "return", "df", ",", "dg", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_linf": [[117, 190], ["points_to_project.clone", "w_hyperplane.clone", "b_hyperplane.clone", "fab_pt.FABAttack.check_shape", "torch.ones().to", "torch.argsort", "b0.clone", "torch.argsort.unsqueeze().flip().squeeze", "torch.arange", "torch.cumsum", "fab_pt.FABAttack.check_shape", "fab_pt.FABAttack.check_shape", "torch.zeros", "torch.ceil", "torch.zeros().long", "lb.long.long.long", "torch.max().unsqueeze", "ws.abs", "torch.cumsum", "b0.unsqueeze", "torch.ones", "torch.log2", "torch.floor", "torch.floor.long", "c.nonzero().squeeze", "fab_pt.FABAttack.check_shape", "fab_pt.FABAttack.check_shape", "torch.max().unsqueeze", "torch.ones", "torch.ones().to", "torch.argsort.unsqueeze().flip", "torch.tensor().float", "torch.zeros", "torch.max", "torch.min", "torch.max", "torch.arange.unsqueeze", "c.nonzero", "torch.max", "torch.zeros().to", "torch.ones", "torch.argsort.unsqueeze", "torch.arange.unsqueeze", "torch.tensor", "torch.zeros().to", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape"], ["", "def", "projection_linf", "(", "self", ",", "points_to_project", ",", "w_hyperplane", ",", "b_hyperplane", ")", ":", "\n", "        ", "t", "=", "points_to_project", ".", "clone", "(", ")", "\n", "w", "=", "w_hyperplane", ".", "clone", "(", ")", "\n", "b", "=", "b_hyperplane", ".", "clone", "(", ")", "\n", "\n", "ind2", "=", "(", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "-", "b", "<", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind2", "=", "self", ".", "check_shape", "(", "ind2", ")", "\n", "w", "[", "ind2", "]", "*=", "-", "1", "\n", "b", "[", "ind2", "]", "*=", "-", "1", "\n", "\n", "c5", "=", "(", "w", "<", "0", ")", ".", "float", "(", ")", "\n", "a", "=", "torch", ".", "ones", "(", "t", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "d", "=", "(", "a", "*", "c5", "-", "t", ")", "*", "(", "w", "!=", "0", ")", ".", "float", "(", ")", "\n", "a", "-=", "a", "*", "(", "1", "-", "c5", ")", "\n", "\n", "p", "=", "torch", ".", "ones", "(", "t", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "*", "c5", "-", "t", "*", "(", "2", "*", "c5", "-", "1", ")", "\n", "indp", "=", "torch", ".", "argsort", "(", "p", ",", "dim", "=", "1", ")", "\n", "\n", "b", "=", "b", "-", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "\n", "b0", "=", "(", "w", "*", "d", ")", ".", "sum", "(", "1", ")", "\n", "b1", "=", "b0", ".", "clone", "(", ")", "\n", "\n", "counter", "=", "0", "\n", "indp2", "=", "indp", ".", "unsqueeze", "(", "-", "1", ")", ".", "flip", "(", "dims", "=", "(", "1", ",", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "u", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "0", "]", ")", "\n", "ws", "=", "w", "[", "u", ".", "unsqueeze", "(", "1", ")", ",", "indp2", "]", "\n", "bs2", "=", "-", "ws", "*", "d", "[", "u", ".", "unsqueeze", "(", "1", ")", ",", "indp2", "]", "\n", "\n", "s", "=", "torch", ".", "cumsum", "(", "ws", ".", "abs", "(", ")", ",", "dim", "=", "1", ")", "\n", "sb", "=", "torch", ".", "cumsum", "(", "bs2", ",", "dim", "=", "1", ")", "+", "b0", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "c", "=", "b", "-", "b1", ">", "0", "\n", "b2", "=", "sb", "[", "u", ",", "-", "1", "]", "-", "s", "[", "u", ",", "-", "1", "]", "*", "p", "[", "u", ",", "indp", "[", "u", ",", "0", "]", "]", "\n", "c_l", "=", "(", "b", "-", "b2", ">", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c2", "=", "(", "(", "b", "-", "b1", ">", "0", ")", "*", "(", "b", "-", "b2", "<=", "0", ")", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c_l", "=", "self", ".", "check_shape", "(", "c_l", ")", "\n", "c2", "=", "self", ".", "check_shape", "(", "c2", ")", "\n", "\n", "lb", "=", "torch", ".", "zeros", "(", "c2", ".", "shape", "[", "0", "]", ")", "\n", "ub", "=", "torch", ".", "ones", "(", "c2", ".", "shape", "[", "0", "]", ")", "*", "(", "w", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "nitermax", "=", "torch", ".", "ceil", "(", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "w", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ")", ")", "\n", "counter2", "=", "torch", ".", "zeros", "(", "lb", ".", "shape", ")", ".", "long", "(", ")", "\n", "\n", "while", "counter", "<", "nitermax", ":", "\n", "            ", "counter4", "=", "torch", ".", "floor", "(", "(", "lb", "+", "ub", ")", "/", "2", ")", "\n", "counter2", "=", "counter4", ".", "long", "(", ")", "\n", "indcurr", "=", "indp", "[", "c2", ",", "-", "counter2", "-", "1", "]", "\n", "b2", "=", "sb", "[", "c2", ",", "counter2", "]", "-", "s", "[", "c2", ",", "counter2", "]", "*", "p", "[", "c2", ",", "indcurr", "]", "\n", "c", "=", "b", "[", "c2", "]", "-", "b2", ">", "0", "\n", "ind3", "=", "c", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind32", "=", "(", "~", "c", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind3", "=", "self", ".", "check_shape", "(", "ind3", ")", "\n", "ind32", "=", "self", ".", "check_shape", "(", "ind32", ")", "\n", "lb", "[", "ind3", "]", "=", "counter4", "[", "ind3", "]", "\n", "ub", "[", "ind32", "]", "=", "counter4", "[", "ind32", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "lb", "=", "lb", ".", "long", "(", ")", "\n", "counter2", "=", "0", "\n", "\n", "if", "c_l", ".", "nelement", "!=", "0", ":", "\n", "            ", "lmbd_opt", "=", "(", "torch", ".", "max", "(", "(", "b", "[", "c_l", "]", "-", "sb", "[", "c_l", ",", "-", "1", "]", ")", "/", "(", "-", "s", "[", "c_l", ",", "-", "1", "]", ")", ",", "\n", "torch", ".", "zeros", "(", "sb", "[", "c_l", ",", "-", "1", "]", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "d", "[", "c_l", "]", "=", "(", "2", "*", "a", "[", "c_l", "]", "-", "1", ")", "*", "lmbd_opt", "\n", "\n", "", "lmbd_opt", "=", "(", "torch", ".", "max", "(", "(", "b", "[", "c2", "]", "-", "sb", "[", "c2", ",", "lb", "]", ")", "/", "(", "-", "s", "[", "c2", ",", "lb", "]", ")", ",", "\n", "torch", ".", "zeros", "(", "sb", "[", "c2", ",", "lb", "]", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "d", "[", "c2", "]", "=", "torch", ".", "min", "(", "lmbd_opt", ",", "d", "[", "c2", "]", ")", "*", "c5", "[", "c2", "]", "+", "torch", ".", "max", "(", "-", "lmbd_opt", ",", "d", "[", "c2", "]", ")", "*", "(", "1", "-", "c5", "[", "c2", "]", ")", "\n", "\n", "return", "d", "*", "(", "w", "!=", "0", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_l2": [[191, 268], ["points_to_project.clone", "w_hyperplane.clone", "b_hyperplane.clone", "fab_pt.FABAttack.check_shape", "torch.arange().unsqueeze", "torch.max", "torch.ones().to", "torch.min", "torch.max", "torch.sort", "torch.cat", "w3s.sum", "torch.cat", "c4.nonzero().squeeze", "fab_pt.FABAttack.check_shape", "fab_pt.FABAttack.check_shape", "torch.zeros", "torch.ceil", "torch.zeros().long", "lb.long.long.long", "torch.zeros", "torch.cumsum", "torch.ones", "torch.log2", "torch.floor", "torch.floor.long", "c3.nonzero().squeeze", "fab_pt.FABAttack.check_shape", "fab_pt.FABAttack.check_shape", "fab_pt.FABAttack.nelement", "fab_pt.FABAttack.nelement", "torch.arange", "torch.ones", "torch.zeros().to", "c4.nonzero", "torch.tensor().float", "torch.zeros", "w5[].squeeze", "torch.sum", "fab_pt.FABAttack.check_shape", "w_hyperplane.clone.abs", "torch.cumsum", "c3.nonzero", "torch.zeros.unsqueeze", "torch.zeros", "w_hyperplane.clone.abs", "rs[].unsqueeze", "torch.tensor", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze", "w_hyperplane.clone.abs", "w3s.sum.squeeze", "c4.float", "c3.float"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape"], ["", "def", "projection_l2", "(", "self", ",", "points_to_project", ",", "w_hyperplane", ",", "b_hyperplane", ")", ":", "\n", "        ", "t", "=", "points_to_project", ".", "clone", "(", ")", "\n", "w", "=", "w_hyperplane", ".", "clone", "(", ")", "\n", "b", "=", "b_hyperplane", ".", "clone", "(", ")", "\n", "\n", "c", "=", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "-", "b", "\n", "ind2", "=", "(", "c", "<", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind2", "=", "self", ".", "check_shape", "(", "ind2", ")", "\n", "w", "[", "ind2", "]", "*=", "-", "1", "\n", "c", "[", "ind2", "]", "*=", "-", "1", "\n", "\n", "u", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "r", "=", "torch", ".", "max", "(", "t", "/", "w", ",", "(", "t", "-", "1", ")", "/", "w", ")", "\n", "u2", "=", "torch", ".", "ones", "(", "r", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "r", "=", "torch", ".", "min", "(", "r", ",", "1e12", "*", "u2", ")", "\n", "r", "=", "torch", ".", "max", "(", "r", ",", "-", "1e12", "*", "u2", ")", "\n", "r", "[", "w", ".", "abs", "(", ")", "<", "1e-8", "]", "=", "1e12", "\n", "r", "[", "r", "==", "-", "1e12", "]", "=", "-", "r", "[", "r", "==", "-", "1e12", "]", "\n", "rs", ",", "indr", "=", "torch", ".", "sort", "(", "r", ",", "dim", "=", "1", ")", "\n", "rs2", "=", "torch", ".", "cat", "(", "(", "rs", "[", ":", ",", "1", ":", "]", ",", "\n", "torch", ".", "zeros", "(", "rs", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "to", "(", "self", ".", "device", ")", ")", ",", "1", ")", "\n", "rs", "[", "rs", "==", "1e12", "]", "=", "0", "\n", "rs2", "[", "rs2", "==", "1e12", "]", "=", "0", "\n", "\n", "w3", "=", "w", "**", "2", "\n", "w3s", "=", "w3", "[", "u", ",", "indr", "]", "\n", "w5", "=", "w3s", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "ws", "=", "w5", "-", "torch", ".", "cumsum", "(", "w3s", ",", "dim", "=", "1", ")", "\n", "d", "=", "-", "(", "r", "*", "w", ")", ".", "clone", "(", ")", "\n", "d", "=", "d", "*", "(", "w", ".", "abs", "(", ")", ">", "1e-8", ")", ".", "float", "(", ")", "\n", "s", "=", "torch", ".", "cat", "(", "(", "(", "-", "w5", ".", "squeeze", "(", ")", "*", "rs", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "torch", ".", "cumsum", "(", "(", "-", "rs2", "+", "rs", ")", "*", "ws", ",", "dim", "=", "1", ")", "-", "\n", "w5", "*", "rs", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "1", ")", "\n", "\n", "c4", "=", "(", "s", "[", ":", ",", "0", "]", "+", "c", "<", "0", ")", "\n", "c3", "=", "(", "(", "d", "*", "w", ")", ".", "sum", "(", "dim", "=", "1", ")", "+", "c", ">", "0", ")", "\n", "c6", "=", "c4", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c2", "=", "(", "(", "1", "-", "c4", ".", "float", "(", ")", ")", "*", "(", "1", "-", "c3", ".", "float", "(", ")", ")", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "c6", "=", "self", ".", "check_shape", "(", "c6", ")", "\n", "c2", "=", "self", ".", "check_shape", "(", "c2", ")", "\n", "\n", "counter", "=", "0", "\n", "lb", "=", "torch", ".", "zeros", "(", "c2", ".", "shape", "[", "0", "]", ")", "\n", "ub", "=", "torch", ".", "ones", "(", "c2", ".", "shape", "[", "0", "]", ")", "*", "(", "w", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "nitermax", "=", "torch", ".", "ceil", "(", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "w", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ")", ")", "\n", "counter2", "=", "torch", ".", "zeros", "(", "lb", ".", "shape", ")", ".", "long", "(", ")", "\n", "\n", "while", "counter", "<", "nitermax", ":", "\n", "            ", "counter4", "=", "torch", ".", "floor", "(", "(", "lb", "+", "ub", ")", "/", "2", ")", "\n", "counter2", "=", "counter4", ".", "long", "(", ")", "\n", "c3", "=", "s", "[", "c2", ",", "counter2", "]", "+", "c", "[", "c2", "]", ">", "0", "\n", "ind3", "=", "c3", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind32", "=", "(", "~", "c3", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind3", "=", "self", ".", "check_shape", "(", "ind3", ")", "\n", "ind32", "=", "self", ".", "check_shape", "(", "ind32", ")", "\n", "lb", "[", "ind3", "]", "=", "counter4", "[", "ind3", "]", "\n", "ub", "[", "ind32", "]", "=", "counter4", "[", "ind32", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "lb", "=", "lb", ".", "long", "(", ")", "\n", "alpha", "=", "torch", ".", "zeros", "(", "[", "1", "]", ")", "\n", "\n", "if", "c6", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "alpha", "=", "c", "[", "c6", "]", "/", "w5", "[", "c6", "]", ".", "squeeze", "(", "-", "1", ")", "\n", "d", "[", "c6", "]", "=", "-", "alpha", ".", "unsqueeze", "(", "-", "1", ")", "*", "w", "[", "c6", "]", "\n", "\n", "", "if", "c2", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "alpha", "=", "(", "s", "[", "c2", ",", "lb", "]", "+", "c", "[", "c2", "]", ")", "/", "ws", "[", "c2", ",", "lb", "]", "+", "rs", "[", "c2", ",", "lb", "]", "\n", "if", "torch", ".", "sum", "(", "ws", "[", "c2", ",", "lb", "]", "==", "0", ")", ">", "0", ":", "\n", "                ", "ind", "=", "(", "ws", "[", "c2", ",", "lb", "]", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ".", "long", "(", ")", "\n", "ind", "=", "self", ".", "check_shape", "(", "ind", ")", "\n", "alpha", "[", "ind", "]", "=", "0", "\n", "", "c5", "=", "(", "alpha", ".", "unsqueeze", "(", "-", "1", ")", ">", "r", "[", "c2", "]", ")", ".", "float", "(", ")", "\n", "d", "[", "c2", "]", "=", "d", "[", "c2", "]", "*", "c5", "-", "alpha", ".", "unsqueeze", "(", "-", "1", ")", "*", "w", "[", "c2", "]", "*", "(", "1", "-", "c5", ")", "\n", "\n", "", "return", "d", "*", "(", "w", ".", "abs", "(", ")", ">", "1e-8", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_l1": [[269, 326], ["points_to_project.clone", "w_hyperplane.clone", "b_hyperplane.clone", "fab_pt.FABAttack.check_shape", "torch.max", "torch.min", "torch.sort", "torch.sort", "torch.arange().unsqueeze", "torch.arange().repeat", "torch.min", "torch.cat", "torch.cumsum", "c4.nonzero().squeeze", "fab_pt.FABAttack.check_shape", "torch.zeros", "torch.ceil", "torch.zeros().long", "torch.zeros.long", "torch.ones", "torch.log2", "torch.floor", "torch.floor.long", "c3.nonzero().squeeze", "fab_pt.FABAttack.check_shape", "fab_pt.FABAttack.check_shape", "fab_pt.FABAttack.nelement", "torch.ones().to", "torch.arange", "torch.arange", "c.unsqueeze", "c4.nonzero", "torch.tensor().float", "torch.zeros", "u2[].float", "torch.zeros.unsqueeze().float", "u3.float().to", "c3.nonzero", "torch.ones", "torch.tensor", "torch.zeros.unsqueeze", "u3.float", "w_hyperplane.clone.abs"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape"], ["", "def", "projection_l1", "(", "self", ",", "points_to_project", ",", "w_hyperplane", ",", "b_hyperplane", ")", ":", "\n", "        ", "t", "=", "points_to_project", ".", "clone", "(", ")", "\n", "w", "=", "w_hyperplane", ".", "clone", "(", ")", "\n", "b", "=", "b_hyperplane", ".", "clone", "(", ")", "\n", "\n", "c", "=", "(", "w", "*", "t", ")", ".", "sum", "(", "1", ")", "-", "b", "\n", "ind2", "=", "(", "c", "<", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind2", "=", "self", ".", "check_shape", "(", "ind2", ")", "\n", "w", "[", "ind2", "]", "*=", "-", "1", "\n", "c", "[", "ind2", "]", "*=", "-", "1", "\n", "\n", "r", "=", "torch", ".", "max", "(", "1", "/", "w", ",", "-", "1", "/", "w", ")", "\n", "r", "=", "torch", ".", "min", "(", "r", ",", "1e12", "*", "torch", ".", "ones", "(", "r", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "rs", ",", "indr", "=", "torch", ".", "sort", "(", "r", ",", "dim", "=", "1", ")", "\n", "_", ",", "indr_rev", "=", "torch", ".", "sort", "(", "indr", ")", "\n", "\n", "u", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "u2", "=", "torch", ".", "arange", "(", "0", ",", "w", ".", "shape", "[", "1", "]", ")", ".", "repeat", "(", "w", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "c6", "=", "(", "w", "<", "0", ")", ".", "float", "(", ")", "\n", "d", "=", "(", "-", "t", "+", "c6", ")", "*", "(", "w", "!=", "0", ")", ".", "float", "(", ")", "\n", "d2", "=", "torch", ".", "min", "(", "-", "w", "*", "t", ",", "w", "*", "(", "1", "-", "t", ")", ")", "\n", "ds", "=", "d2", "[", "u", ",", "indr", "]", "\n", "ds2", "=", "torch", ".", "cat", "(", "(", "c", ".", "unsqueeze", "(", "-", "1", ")", ",", "ds", ")", ",", "1", ")", "\n", "s", "=", "torch", ".", "cumsum", "(", "ds2", ",", "dim", "=", "1", ")", "\n", "\n", "c4", "=", "s", "[", ":", ",", "-", "1", "]", "<", "0", "\n", "c2", "=", "c4", ".", "nonzero", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "c2", "=", "self", ".", "check_shape", "(", "c2", ")", "\n", "\n", "counter", "=", "0", "\n", "lb", "=", "torch", ".", "zeros", "(", "c2", ".", "shape", "[", "0", "]", ")", "\n", "ub", "=", "torch", ".", "ones", "(", "c2", ".", "shape", "[", "0", "]", ")", "*", "(", "s", ".", "shape", "[", "1", "]", ")", "\n", "nitermax", "=", "torch", ".", "ceil", "(", "torch", ".", "log2", "(", "torch", ".", "tensor", "(", "s", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ")", ")", "\n", "counter2", "=", "torch", ".", "zeros", "(", "lb", ".", "shape", ")", ".", "long", "(", ")", "\n", "\n", "while", "counter", "<", "nitermax", ":", "\n", "            ", "counter4", "=", "torch", ".", "floor", "(", "(", "lb", "+", "ub", ")", "/", "2", ")", "\n", "counter2", "=", "counter4", ".", "long", "(", ")", "\n", "c3", "=", "s", "[", "c2", ",", "counter2", "]", ">", "0", "\n", "ind3", "=", "c3", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind32", "=", "(", "~", "c3", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind3", "=", "self", ".", "check_shape", "(", "ind3", ")", "\n", "ind32", "=", "self", ".", "check_shape", "(", "ind32", ")", "\n", "lb", "[", "ind3", "]", "=", "counter4", "[", "ind3", "]", "\n", "ub", "[", "ind32", "]", "=", "counter4", "[", "ind32", "]", "\n", "counter", "+=", "1", "\n", "\n", "", "lb2", "=", "lb", ".", "long", "(", ")", "\n", "\n", "if", "c2", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "            ", "alpha", "=", "-", "s", "[", "c2", ",", "lb2", "]", "/", "w", "[", "c2", ",", "indr", "[", "c2", ",", "lb2", "]", "]", "\n", "c5", "=", "u2", "[", "c2", "]", ".", "float", "(", ")", "<", "lb", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", "\n", "u3", "=", "c5", "[", "u", "[", ":", "c5", ".", "shape", "[", "0", "]", "]", ",", "indr_rev", "[", "c2", "]", "]", "\n", "d", "[", "c2", "]", "=", "d", "[", "c2", "]", "*", "u3", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "d", "[", "c2", ",", "indr", "[", "c2", ",", "lb2", "]", "]", "=", "alpha", "\n", "\n", "", "return", "d", "*", "(", "w", ".", "abs", "(", ")", ">", "1e-8", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.attack_single_run": [[327, 504], ["list", "len", "x.detach().clone().float().to.detach().clone().float().to.detach().clone().float().to", "fab_pt.FABAttack._get_predicted_label", "fab_pt.FABAttack.float().sum", "fab_pt.FABAttack.check_shape", "time.time", "x[].detach().clone", "y[].detach().clone", "torch.arange", "im2.unsqueeze.unsqueeze.clone", "x.detach().clone().float().to.detach().clone().float().to.clone", "torch.zeros().to", "im2.unsqueeze.unsqueeze.clone", "im2.unsqueeze.unsqueeze.clone().reshape", "fab_pt.FABAttack.check_shape", "adv[].clone", "fab_pt.FABAttack.detach().clone().long().to", "y.detach().clone().long().to.detach().clone().long().to.detach().clone().long().to", "print", "fab_pt.FABAttack.sum", "fab_pt.FABAttack.nonzero().squeeze", "len", "im2.unsqueeze.unsqueeze.unsqueeze", "torch.ones().to", "print", "fab_pt.FABAttack.nonzero().squeeze", "x.detach().clone().float().to.detach().clone().float().to.detach().clone().float", "fab_pt.FABAttack.float", "x[].detach", "y[].detach", "torch.zeros", "im2.unsqueeze.unsqueeze.clone", "x1.clamp.clamp.clamp", "fab_pt.FABAttack.float", "fab_pt.FABAttack.detach().clone().long", "y.detach().clone().long().to.detach().clone().long().to.detach().clone().long", "fab_pt.FABAttack.float().mean", "fab_pt.FABAttack.nonzero", "torch.ones", "torch.no_grad", "fab_pt.FABAttack.get_diff_logits_grads_batch", "dg2.reshape", "torch.reshape", "torch.reshape", "torch.max", "torch.min", "fab_pt.FABAttack.float", "fab_pt.FABAttack.nonzero", "x.detach().clone().float().to.detach().clone().float().to.detach().clone", "torch.randn().to", "dist1.min", "fab_pt.FABAttack.projection_linf", "[].view", "fab_pt.FABAttack._get_predicted_label", "is_adv.sum", "is_adv.nonzero().squeeze", "fab_pt.FABAttack.check_shape", "fab_pt.FABAttack.float().sum", "fab_pt.FABAttack.detach().clone", "y.detach().clone().long().to.detach().clone().long().to.detach().clone", "fab_pt.FABAttack.float", "torch.rand().to", "torch.randn().to", "df.abs", "torch.cat", "torch.cat", "torch.cat", "fab_pt.FABAttack.projection_l2", "torch.ones().to", "torch.max", "torch.ones().to", "time.time", "x.detach().clone().float().to.detach().clone().float().to.detach", "[].reshape", "torch.randn", "dg.abs().view().sum", "df.abs", "ValueError", "torch.cat", "torch.cat", "torch.cat", "fab_pt.FABAttack.projection_l1", "fab_pt.FABAttack.abs().sum().view", "torch.zeros().to", "is_adv.nonzero", "fab_pt.FABAttack.float", "fab_pt.FABAttack.detach", "y.detach().clone().long().to.detach().clone().long().to.detach", "torch.rand", "torch.min().reshape", "torch.randn", "df.abs", "x1.clamp.clamp.reshape", "torch.cat", "torch.cat", "torch.cat", "fab_pt.FABAttack.abs().max", "torch.ones", "torch.ones", "torch.min().reshape", "torch.randn().to.abs().view().sum().view", "dg.abs().view", "x1.clamp.clamp.reshape", "fab_pt.FABAttack.abs().sum", "torch.zeros", "torch.min", "torch.randn().to.reshape().abs().max", "torch.min().reshape", "dg.abs().reshape().max", "x1.clamp.clamp.reshape", "fab_pt.FABAttack.abs", "torch.min", "torch.randn().to.abs().view().sum", "dg.abs", "fab_pt.FABAttack.abs", "torch.ones().to", "torch.randn().to.reshape().abs", "torch.min", "dg.abs().reshape", "torch.ones().to", "torch.randn().to.abs().view", "torch.ones", "torch.randn().to.reshape", "torch.ones().to", "dg.abs", "torch.ones", "torch.randn().to.abs", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack._get_predicted_label", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.get_diff_logits_grads_batch", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_linf", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack._get_predicted_label", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_l2", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_l1"], ["", "def", "attack_single_run", "(", "self", ",", "x", ",", "y", "=", "None", ",", "use_rand_start", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param x:    clean images\n        :param y:    clean labels, if None we use the predicted labels\n        \"\"\"", "\n", "\n", "#self.device = x.device", "\n", "self", ".", "orig_dim", "=", "list", "(", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "self", ".", "ndims", "=", "len", "(", "self", ".", "orig_dim", ")", "\n", "\n", "x", "=", "x", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "#assert next(self.predict.parameters()).device == x.device", "\n", "\n", "y_pred", "=", "self", ".", "_get_predicted_label", "(", "x", ")", "\n", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "y_pred", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "y", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "pred", "=", "y_pred", "==", "y", "\n", "corr_classified", "=", "pred", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'Clean accuracy: {:.2%}'", ".", "format", "(", "pred", ".", "float", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "", "if", "pred", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "pred", "=", "self", ".", "check_shape", "(", "pred", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "startt", "=", "time", ".", "time", "(", ")", "\n", "# runs the attack only on correctly classified points", "\n", "im2", "=", "x", "[", "pred", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "la2", "=", "y", "[", "pred", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "if", "len", "(", "im2", ".", "shape", ")", "==", "self", ".", "ndims", ":", "\n", "            ", "im2", "=", "im2", ".", "unsqueeze", "(", "0", ")", "\n", "", "bs", "=", "im2", ".", "shape", "[", "0", "]", "\n", "u1", "=", "torch", ".", "arange", "(", "bs", ")", "\n", "adv", "=", "im2", ".", "clone", "(", ")", "\n", "adv_c", "=", "x", ".", "clone", "(", ")", "\n", "res2", "=", "1e10", "*", "torch", ".", "ones", "(", "[", "bs", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "res_c", "=", "torch", ".", "zeros", "(", "[", "x", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", ".", "clone", "(", ")", "\n", "x0", "=", "im2", ".", "clone", "(", ")", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", "\n", "counter_restarts", "=", "0", "\n", "\n", "while", "counter_restarts", "<", "1", ":", "\n", "            ", "if", "use_rand_start", ":", "\n", "                ", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                    ", "t", "=", "2", "*", "torch", ".", "rand", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "-", "1", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "t", ".", "reshape", "(", "[", "t", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", "\n", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", ")", "*", ".5", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                    ", "t", "=", "torch", ".", "randn", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "(", "t", "**", "2", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ".", "sqrt", "(", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "*", ".5", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                    ", "t", "=", "torch", ".", "randn", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "t", ".", "abs", "(", ")", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "/", "2", "\n", "\n", "", "x1", "=", "x1", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "", "counter_iter", "=", "0", "\n", "while", "counter_iter", "<", "self", ".", "n_iter", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "df", ",", "dg", "=", "self", ".", "get_diff_logits_grads_batch", "(", "x1", ",", "la2", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "\n", "dg", ".", "abs", "(", ")", "\n", ".", "view", "(", "dg", ".", "shape", "[", "0", "]", ",", "dg", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "(", "dg", "**", "2", ")", "\n", ".", "view", "(", "dg", ".", "shape", "[", "0", "]", ",", "dg", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "dg", ".", "abs", "(", ")", ".", "reshape", "(", "\n", "[", "df", ".", "shape", "[", "0", "]", ",", "df", ".", "shape", "[", "1", "]", ",", "-", "1", "]", ")", ".", "max", "(", "dim", "=", "2", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'norm not supported'", ")", "\n", "", "ind", "=", "dist1", ".", "min", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "dg2", "=", "dg", "[", "u1", ",", "ind", "]", "\n", "b", "=", "(", "-", "df", "[", "u1", ",", "ind", "]", "+", "(", "dg2", "*", "x1", ")", ".", "view", "(", "x1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "w", "=", "dg2", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", "\n", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_linf", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_l2", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_l1", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "d1", "=", "torch", ".", "reshape", "(", "d3", "[", ":", "bs", "]", ",", "x1", ".", "shape", ")", "\n", "d2", "=", "torch", ".", "reshape", "(", "d3", "[", "-", "bs", ":", "]", ",", "x1", ".", "shape", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "a0", "=", "d3", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "a0", "=", "(", "d3", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "a0", "=", "d3", ".", "abs", "(", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "a0", "=", "torch", ".", "max", "(", "a0", ",", "1e-8", "*", "torch", ".", "ones", "(", "\n", "a0", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "a1", "=", "a0", "[", ":", "bs", "]", "\n", "a2", "=", "a0", "[", "-", "bs", ":", "]", "\n", "alpha", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "a1", "/", "(", "a1", "+", "a2", ")", ",", "\n", "torch", ".", "zeros", "(", "a1", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", ",", "\n", "self", ".", "alpha_max", "*", "torch", ".", "ones", "(", "a1", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "x1", "=", "(", "(", "x1", "+", "self", ".", "eta", "*", "d1", ")", "*", "(", "1", "-", "alpha", ")", "+", "\n", "(", "im2", "+", "d2", "*", "self", ".", "eta", ")", "*", "alpha", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "is_adv", "=", "self", ".", "_get_predicted_label", "(", "x1", ")", "!=", "la2", "\n", "\n", "if", "is_adv", ".", "sum", "(", ")", ">", "0", ":", "\n", "                        ", "ind_adv", "=", "is_adv", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind_adv", "=", "self", ".", "check_shape", "(", "ind_adv", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                            ", "t", "=", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", ".", "reshape", "(", "\n", "[", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                            ", "t", "=", "(", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", "**", "2", ")", ".", "view", "(", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                            ", "t", "=", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", ".", "abs", "(", ")", ".", "view", "(", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "adv", "[", "ind_adv", "]", "=", "x1", "[", "ind_adv", "]", "*", "(", "t", "<", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "+", "adv", "[", "ind_adv", "]", "*", "(", "t", ">=", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "\n", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", "res2", "[", "ind_adv", "]", "=", "t", "*", "(", "t", "<", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", "+", "res2", "[", "ind_adv", "]", "*", "(", "t", ">=", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", "\n", "x1", "[", "ind_adv", "]", "=", "im2", "[", "ind_adv", "]", "+", "(", "\n", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", "*", "self", ".", "beta", "\n", "\n", "", "counter_iter", "+=", "1", "\n", "\n", "", "", "counter_restarts", "+=", "1", "\n", "\n", "", "ind_succ", "=", "res2", "<", "1e10", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'success rate: {:.0f}/{:.0f}'", "\n", ".", "format", "(", "ind_succ", ".", "float", "(", ")", ".", "sum", "(", ")", ",", "corr_classified", ")", "+", "\n", "' (on correctly classified points) in {:.1f} s'", "\n", ".", "format", "(", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "res_c", "[", "pred", "]", "=", "res2", "*", "ind_succ", ".", "float", "(", ")", "+", "1e10", "*", "(", "1", "-", "ind_succ", ".", "float", "(", ")", ")", "\n", "ind_succ", "=", "self", ".", "check_shape", "(", "ind_succ", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "adv_c", "[", "pred", "[", "ind_succ", "]", "]", "=", "adv", "[", "ind_succ", "]", ".", "clone", "(", ")", "\n", "\n", "return", "adv_c", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.attack_single_run_targeted": [[505, 688], ["list", "len", "x.detach().clone().float().to.detach().clone().float().to.detach().clone().float().to", "fab_pt.FABAttack._get_predicted_label", "fab_pt.FABAttack.float().sum", "fab_pt.FABAttack.check_shape", "fab_pt.FABAttack.predict", "time.time", "x[].detach().clone", "y[].detach().clone", "la_target[].detach().clone", "torch.arange", "im2.unsqueeze.unsqueeze.clone", "x.detach().clone().float().to.detach().clone().float().to.clone", "torch.zeros().to", "im2.unsqueeze.unsqueeze.clone", "im2.unsqueeze.unsqueeze.clone().reshape", "fab_pt.FABAttack.check_shape", "adv[].clone", "fab_pt.FABAttack.detach().clone().long().to", "y.detach().clone().long().to.detach().clone().long().to.detach().clone().long().to", "print", "fab_pt.FABAttack.sum", "fab_pt.FABAttack.nonzero().squeeze", "len", "im2.unsqueeze.unsqueeze.unsqueeze", "torch.ones().to", "print", "fab_pt.FABAttack.nonzero().squeeze", "x.detach().clone().float().to.detach().clone().float().to.detach().clone().float", "fab_pt.FABAttack.float", "fab_pt.FABAttack.sort", "x[].detach", "y[].detach", "la_target[].detach", "torch.zeros", "im2.unsqueeze.unsqueeze.clone", "x1.clamp.clamp.clamp", "fab_pt.FABAttack.float", "fab_pt.FABAttack.detach().clone().long", "y.detach().clone().long().to.detach().clone().long().to.detach().clone().long", "fab_pt.FABAttack.float().mean", "fab_pt.FABAttack.nonzero", "torch.ones", "torch.no_grad", "fab_pt.FABAttack.get_diff_logits_grads_batch_targeted", "dg2.reshape", "torch.reshape", "torch.reshape", "torch.max", "torch.min", "fab_pt.FABAttack.float", "fab_pt.FABAttack.nonzero", "x.detach().clone().float().to.detach().clone().float().to.detach().clone", "torch.randn().to", "dist1.min", "fab_pt.FABAttack.projection_linf", "[].view", "fab_pt.FABAttack._get_predicted_label", "is_adv.sum", "is_adv.nonzero().squeeze", "fab_pt.FABAttack.check_shape", "fab_pt.FABAttack.float().sum", "fab_pt.FABAttack.detach().clone", "y.detach().clone().long().to.detach().clone().long().to.detach().clone", "fab_pt.FABAttack.float", "torch.rand().to", "torch.randn().to", "df.abs", "torch.cat", "torch.cat", "torch.cat", "fab_pt.FABAttack.projection_l2", "torch.ones().to", "torch.max", "torch.ones().to", "time.time", "x.detach().clone().float().to.detach().clone().float().to.detach", "[].reshape", "torch.randn", "dg.abs().view().sum", "df.abs", "ValueError", "torch.cat", "torch.cat", "torch.cat", "fab_pt.FABAttack.projection_l1", "fab_pt.FABAttack.abs().sum().view", "torch.zeros().to", "is_adv.nonzero", "fab_pt.FABAttack.float", "fab_pt.FABAttack.detach", "y.detach().clone().long().to.detach().clone().long().to.detach", "torch.rand", "torch.min().reshape", "torch.randn", "df.abs", "x1.clamp.clamp.reshape", "torch.cat", "torch.cat", "torch.cat", "fab_pt.FABAttack.abs().max", "torch.ones", "torch.ones", "torch.min().reshape", "torch.randn().to.abs().view().sum().view", "dg.abs().view", "x1.clamp.clamp.reshape", "fab_pt.FABAttack.abs().sum", "torch.zeros", "torch.min", "torch.randn().to.reshape().abs().max", "torch.min().reshape", "dg.abs().reshape().max", "x1.clamp.clamp.reshape", "fab_pt.FABAttack.abs", "torch.min", "torch.randn().to.abs().view().sum", "dg.abs", "fab_pt.FABAttack.abs", "torch.ones().to", "torch.randn().to.reshape().abs", "torch.min", "dg.abs().reshape", "torch.ones().to", "torch.randn().to.abs().view", "torch.ones", "torch.randn().to.reshape", "torch.ones().to", "dg.abs", "torch.ones", "torch.randn().to.abs", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack._get_predicted_label", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.get_diff_logits_grads_batch_targeted", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_linf", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack._get_predicted_label", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_l2", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.projection_l1"], ["", "def", "attack_single_run_targeted", "(", "self", ",", "x", ",", "y", "=", "None", ",", "use_rand_start", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param x:    clean images\n        :param y:    clean labels, if None we use the predicted labels\n        \"\"\"", "\n", "\n", "if", "self", ".", "device", "is", "None", ":", "\n", "            ", "self", ".", "device", "=", "x", ".", "device", "\n", "", "self", ".", "orig_dim", "=", "list", "(", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "self", ".", "ndims", "=", "len", "(", "self", ".", "orig_dim", ")", "\n", "\n", "x", "=", "x", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "#assert next(self.predict.parameters()).device == x.device", "\n", "\n", "y_pred", "=", "self", ".", "_get_predicted_label", "(", "x", ")", "\n", "if", "y", "is", "None", ":", "\n", "            ", "y", "=", "y_pred", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "y", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "pred", "=", "y_pred", "==", "y", "\n", "corr_classified", "=", "pred", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'Clean accuracy: {:.2%}'", ".", "format", "(", "pred", ".", "float", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "", "if", "pred", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "pred", "=", "self", ".", "check_shape", "(", "pred", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "\n", "output", "=", "self", ".", "predict", "(", "x", ")", "\n", "la_target", "=", "output", ".", "sort", "(", "dim", "=", "-", "1", ")", "[", "1", "]", "[", ":", ",", "-", "self", ".", "target_class", "]", "\n", "\n", "startt", "=", "time", ".", "time", "(", ")", "\n", "# runs the attack only on correctly classified points", "\n", "im2", "=", "x", "[", "pred", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "la2", "=", "y", "[", "pred", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "la_target2", "=", "la_target", "[", "pred", "]", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "if", "len", "(", "im2", ".", "shape", ")", "==", "self", ".", "ndims", ":", "\n", "            ", "im2", "=", "im2", ".", "unsqueeze", "(", "0", ")", "\n", "", "bs", "=", "im2", ".", "shape", "[", "0", "]", "\n", "u1", "=", "torch", ".", "arange", "(", "bs", ")", "\n", "adv", "=", "im2", ".", "clone", "(", ")", "\n", "adv_c", "=", "x", ".", "clone", "(", ")", "\n", "res2", "=", "1e10", "*", "torch", ".", "ones", "(", "[", "bs", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "res_c", "=", "torch", ".", "zeros", "(", "[", "x", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", ".", "clone", "(", ")", "\n", "x0", "=", "im2", ".", "clone", "(", ")", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", "\n", "counter_restarts", "=", "0", "\n", "\n", "while", "counter_restarts", "<", "1", ":", "\n", "            ", "if", "use_rand_start", ":", "\n", "                ", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                    ", "t", "=", "2", "*", "torch", ".", "rand", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "-", "1", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "t", ".", "reshape", "(", "[", "t", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", "\n", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", ")", "*", ".5", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                    ", "t", "=", "torch", ".", "randn", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "(", "t", "**", "2", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ".", "sqrt", "(", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "*", ".5", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                    ", "t", "=", "torch", ".", "randn", "(", "x1", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x1", "=", "im2", "+", "(", "torch", ".", "min", "(", "res2", ",", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "res2", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", "\n", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", ")", "*", "t", "/", "(", "t", ".", "abs", "(", ")", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ".", "view", "(", "t", ".", "shape", "[", "0", "]", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "/", "2", "\n", "\n", "", "x1", "=", "x1", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "", "counter_iter", "=", "0", "\n", "while", "counter_iter", "<", "self", ".", "n_iter", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "df", ",", "dg", "=", "self", ".", "get_diff_logits_grads_batch_targeted", "(", "x1", ",", "la2", ",", "la_target2", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "\n", "dg", ".", "abs", "(", ")", "\n", ".", "view", "(", "dg", ".", "shape", "[", "0", "]", ",", "dg", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "(", "dg", "**", "2", ")", "\n", ".", "view", "(", "dg", ".", "shape", "[", "0", "]", ",", "dg", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "dist1", "=", "df", ".", "abs", "(", ")", "/", "(", "1e-12", "+", "dg", ".", "abs", "(", ")", ".", "reshape", "(", "\n", "[", "df", ".", "shape", "[", "0", "]", ",", "df", ".", "shape", "[", "1", "]", ",", "-", "1", "]", ")", ".", "max", "(", "dim", "=", "2", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "ValueError", "(", "'norm not supported'", ")", "\n", "", "ind", "=", "dist1", ".", "min", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "#print(ind)", "\n", "dg2", "=", "dg", "[", "u1", ",", "ind", "]", "\n", "b", "=", "(", "-", "df", "[", "u1", ",", "ind", "]", "+", "(", "dg2", "*", "x1", ")", ".", "view", "(", "x1", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", "\n", "w", "=", "dg2", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", "\n", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_linf", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_l2", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "d3", "=", "self", ".", "projection_l1", "(", "\n", "torch", ".", "cat", "(", "(", "x1", ".", "reshape", "(", "[", "bs", ",", "-", "1", "]", ")", ",", "x0", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "w", ",", "w", ")", ",", "0", ")", ",", "\n", "torch", ".", "cat", "(", "(", "b", ",", "b", ")", ",", "0", ")", ")", "\n", "", "d1", "=", "torch", ".", "reshape", "(", "d3", "[", ":", "bs", "]", ",", "x1", ".", "shape", ")", "\n", "d2", "=", "torch", ".", "reshape", "(", "d3", "[", "-", "bs", ":", "]", ",", "x1", ".", "shape", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                        ", "a0", "=", "d3", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                        ", "a0", "=", "(", "d3", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                        ", "a0", "=", "d3", ".", "abs", "(", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "view", "(", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", ")", "\n", "", "a0", "=", "torch", ".", "max", "(", "a0", ",", "1e-8", "*", "torch", ".", "ones", "(", "\n", "a0", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "a1", "=", "a0", "[", ":", "bs", "]", "\n", "a2", "=", "a0", "[", "-", "bs", ":", "]", "\n", "alpha", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "a1", "/", "(", "a1", "+", "a2", ")", ",", "\n", "torch", ".", "zeros", "(", "a1", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", ",", "\n", "self", ".", "alpha_max", "*", "torch", ".", "ones", "(", "a1", ".", "shape", ")", "\n", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "x1", "=", "(", "(", "x1", "+", "self", ".", "eta", "*", "d1", ")", "*", "(", "1", "-", "alpha", ")", "+", "\n", "(", "im2", "+", "d2", "*", "self", ".", "eta", ")", "*", "alpha", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", "\n", "\n", "is_adv", "=", "self", ".", "_get_predicted_label", "(", "x1", ")", "!=", "la2", "\n", "\n", "if", "is_adv", ".", "sum", "(", ")", ">", "0", ":", "\n", "                        ", "ind_adv", "=", "is_adv", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "ind_adv", "=", "self", ".", "check_shape", "(", "ind_adv", ")", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                            ", "t", "=", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", ".", "reshape", "(", "\n", "[", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                            ", "t", "=", "(", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", "**", "2", ")", ".", "view", "(", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L1'", ":", "\n", "                            ", "t", "=", "(", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", ".", "abs", "(", ")", ".", "view", "(", "ind_adv", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "adv", "[", "ind_adv", "]", "=", "x1", "[", "ind_adv", "]", "*", "(", "t", "<", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "+", "adv", "[", "ind_adv", "]", "*", "(", "t", ">=", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "\n", "[", "-", "1", ",", "*", "[", "1", "]", "*", "self", ".", "ndims", "]", ")", "\n", "res2", "[", "ind_adv", "]", "=", "t", "*", "(", "t", "<", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", "+", "res2", "[", "ind_adv", "]", "*", "(", "t", ">=", "res2", "[", "ind_adv", "]", ")", ".", "float", "(", ")", "\n", "x1", "[", "ind_adv", "]", "=", "im2", "[", "ind_adv", "]", "+", "(", "\n", "x1", "[", "ind_adv", "]", "-", "im2", "[", "ind_adv", "]", ")", "*", "self", ".", "beta", "\n", "\n", "", "counter_iter", "+=", "1", "\n", "\n", "", "", "counter_restarts", "+=", "1", "\n", "\n", "", "ind_succ", "=", "res2", "<", "1e10", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'success rate: {:.0f}/{:.0f}'", "\n", ".", "format", "(", "ind_succ", ".", "float", "(", ")", ".", "sum", "(", ")", ",", "corr_classified", ")", "+", "\n", "' (on correctly classified points) in {:.1f} s'", "\n", ".", "format", "(", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "res_c", "[", "pred", "]", "=", "res2", "*", "ind_succ", ".", "float", "(", ")", "+", "1e10", "*", "(", "1", "-", "ind_succ", ".", "float", "(", ")", ")", "\n", "ind_succ", "=", "self", ".", "check_shape", "(", "ind_succ", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "adv_c", "[", "pred", "[", "ind_succ", "]", "]", "=", "adv", "[", "ind_succ", "]", ".", "clone", "(", ")", "\n", "\n", "return", "adv_c", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.perturb": [[689, 748], ["x.clone", "torch.no_grad", "time.time", "torch.random.manual_seed", "torch.cuda.random.manual_seed", "range", "range", "fab_pt.FABAttack.predict().max", "acc.nonzero().squeeze", "range", "len", "ind_to_fool.unsqueeze.unsqueeze.unsqueeze", "ind_to_fool.unsqueeze.unsqueeze.numel", "fab_pt.FABAttack.attack_single_run", "torch.max", "adv_curr[].clone", "acc.nonzero().squeeze", "fab_pt.FABAttack.predict", "acc.nonzero", "x[].clone", "y[].clone", "print", "len", "ind_to_fool.unsqueeze.unsqueeze.unsqueeze", "ind_to_fool.unsqueeze.unsqueeze.numel", "fab_pt.FABAttack.attack_single_run_targeted", "torch.max", "adv_curr[].clone", "fab_pt.FABAttack.predict().max", "acc.nonzero", "x[].clone", "y[].clone", "print", "acc.float().mean", "fab_pt.FABAttack.predict().max", "fab_pt.FABAttack.predict", "time.time", "acc.float().mean", "acc.float", "fab_pt.FABAttack.predict", "time.time", "acc.float"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.attack_single_run", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.fab_pt.FABAttack.attack_single_run_targeted", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adv", "=", "x", ".", "clone", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "acc", "=", "self", ".", "predict", "(", "x", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "\n", "startt", "=", "time", ".", "time", "(", ")", "\n", "\n", "torch", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "if", "not", "self", ".", "targeted", ":", "\n", "                ", "for", "counter", "in", "range", "(", "self", ".", "n_restarts", ")", ":", "\n", "                    ", "ind_to_fool", "=", "acc", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "ind_to_fool", ".", "shape", ")", "==", "0", ":", "ind_to_fool", "=", "ind_to_fool", ".", "unsqueeze", "(", "0", ")", "\n", "if", "ind_to_fool", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                        ", "x_to_fool", ",", "y_to_fool", "=", "x", "[", "ind_to_fool", "]", ".", "clone", "(", ")", ",", "y", "[", "ind_to_fool", "]", ".", "clone", "(", ")", "\n", "adv_curr", "=", "self", ".", "attack_single_run", "(", "x_to_fool", ",", "y_to_fool", ",", "use_rand_start", "=", "(", "counter", ">", "0", ")", ")", "\n", "\n", "acc_curr", "=", "self", ".", "predict", "(", "adv_curr", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y_to_fool", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                            ", "res", "=", "(", "x_to_fool", "-", "adv_curr", ")", ".", "abs", "(", ")", ".", "view", "(", "x_to_fool", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                            ", "res", "=", "(", "(", "x_to_fool", "-", "adv_curr", ")", "**", "2", ")", ".", "view", "(", "x_to_fool", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "", "acc_curr", "=", "torch", ".", "max", "(", "acc_curr", ",", "res", ">", "self", ".", "eps", ")", "\n", "\n", "ind_curr", "=", "(", "acc_curr", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "acc", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "0", "\n", "adv", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "adv_curr", "[", "ind_curr", "]", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "                            ", "print", "(", "'restart {} - robust accuracy: {:.2%} at eps = {:.5f} - cum. time: {:.1f} s'", ".", "format", "(", "\n", "counter", ",", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "self", ".", "eps", ",", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "                ", "for", "target_class", "in", "range", "(", "2", ",", "self", ".", "n_target_classes", "+", "2", ")", ":", "\n", "                    ", "self", ".", "target_class", "=", "target_class", "\n", "for", "counter", "in", "range", "(", "self", ".", "n_restarts", ")", ":", "\n", "                        ", "ind_to_fool", "=", "acc", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "ind_to_fool", ".", "shape", ")", "==", "0", ":", "ind_to_fool", "=", "ind_to_fool", ".", "unsqueeze", "(", "0", ")", "\n", "if", "ind_to_fool", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                            ", "x_to_fool", ",", "y_to_fool", "=", "x", "[", "ind_to_fool", "]", ".", "clone", "(", ")", ",", "y", "[", "ind_to_fool", "]", ".", "clone", "(", ")", "\n", "adv_curr", "=", "self", ".", "attack_single_run_targeted", "(", "x_to_fool", ",", "y_to_fool", ",", "use_rand_start", "=", "(", "counter", ">", "0", ")", ")", "\n", "\n", "acc_curr", "=", "self", ".", "predict", "(", "adv_curr", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y_to_fool", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                                ", "res", "=", "(", "x_to_fool", "-", "adv_curr", ")", ".", "abs", "(", ")", ".", "view", "(", "x_to_fool", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                                ", "res", "=", "(", "(", "x_to_fool", "-", "adv_curr", ")", "**", "2", ")", ".", "view", "(", "x_to_fool", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "", "acc_curr", "=", "torch", ".", "max", "(", "acc_curr", ",", "res", ">", "self", ".", "eps", ")", "\n", "\n", "ind_curr", "=", "(", "acc_curr", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "acc", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "0", "\n", "adv", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "adv_curr", "[", "ind_curr", "]", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "                                ", "print", "(", "'restart {} - target_class {} - robust accuracy: {:.2%} at eps = {:.5f} - cum. time: {:.1f} s'", ".", "format", "(", "\n", "counter", ",", "self", ".", "target_class", ",", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "self", ".", "eps", ",", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "", "", "", "", "", "return", "adv", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.__init__": [[35, 65], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "predict", ",", "\n", "norm", "=", "'Linf'", ",", "\n", "n_queries", "=", "5000", ",", "\n", "eps", "=", "None", ",", "\n", "p_init", "=", ".8", ",", "\n", "n_restarts", "=", "1", ",", "\n", "seed", "=", "0", ",", "\n", "verbose", "=", "False", ",", "\n", "targeted", "=", "False", ",", "\n", "loss", "=", "'margin'", ",", "\n", "resc_schedule", "=", "True", ",", "\n", "device", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Square Attack implementation in PyTorch\n        \"\"\"", "\n", "\n", "self", ".", "predict", "=", "predict", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "n_queries", "=", "n_queries", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "p_init", "=", "p_init", "\n", "self", ".", "n_restarts", "=", "n_restarts", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "targeted", "=", "targeted", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "rescale_schedule", "=", "resc_schedule", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.margin_and_loss": [[66, 85], ["square.SquareAttack.predict", "torch.cross_entropy", "torch.cross_entropy", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "logits[].clone", "float", "square.SquareAttack.max"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict"], ["", "def", "margin_and_loss", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        :param y:        correct labels if untargeted else target labels\n        \"\"\"", "\n", "\n", "logits", "=", "self", ".", "predict", "(", "x", ")", "\n", "xent", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ",", "reduction", "=", "'none'", ")", "\n", "u", "=", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "y_corr", "=", "logits", "[", "u", ",", "y", "]", ".", "clone", "(", ")", "\n", "logits", "[", "u", ",", "y", "]", "=", "-", "float", "(", "'inf'", ")", "\n", "y_others", "=", "logits", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "\n", "if", "not", "self", ".", "targeted", ":", "\n", "            ", "if", "self", ".", "loss", "==", "'ce'", ":", "\n", "                ", "return", "y_corr", "-", "y_others", ",", "-", "1.", "*", "xent", "\n", "", "elif", "self", ".", "loss", "==", "'margin'", ":", "\n", "                ", "return", "y_corr", "-", "y_others", ",", "y_corr", "-", "y_others", "\n", "", "", "else", ":", "\n", "            ", "return", "y_others", "-", "y_corr", ",", "xent", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.init_hyperparam": [[86, 97], ["list", "len", "time.time"], "methods", ["None"], ["", "", "def", "init_hyperparam", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "self", ".", "norm", "in", "[", "'Linf'", ",", "'L2'", "]", "\n", "assert", "not", "self", ".", "eps", "is", "None", "\n", "assert", "self", ".", "loss", "in", "[", "'ce'", ",", "'margin'", "]", "\n", "\n", "if", "self", ".", "device", "is", "None", ":", "\n", "            ", "self", ".", "device", "=", "x", ".", "device", "\n", "", "self", ".", "orig_dim", "=", "list", "(", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "self", ".", "ndims", "=", "len", "(", "self", ".", "orig_dim", ")", "\n", "if", "self", ".", "seed", "is", "None", ":", "\n", "            ", "self", ".", "seed", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_target_classes": [[98, 107], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.zeros_like.long().to", "torch.zeros_like.long().to", "list", "list.remove", "square.SquareAttack.random_int", "range", "len", "torch.zeros_like.long", "torch.zeros_like.long"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_int"], ["", "", "def", "random_target_classes", "(", "self", ",", "y_pred", ",", "n_classes", ")", ":", "\n", "        ", "y", "=", "torch", ".", "zeros_like", "(", "y_pred", ")", "\n", "for", "counter", "in", "range", "(", "y_pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "l", "=", "list", "(", "range", "(", "n_classes", ")", ")", "\n", "l", ".", "remove", "(", "y_pred", "[", "counter", "]", ")", "\n", "t", "=", "self", ".", "random_int", "(", "0", ",", "len", "(", "l", ")", ")", "\n", "y", "[", "counter", "]", "=", "l", "[", "t", "]", "\n", "\n", "", "return", "y", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.check_shape": [[108, 110], ["x.unsqueeze", "len"], "methods", ["None"], ["", "def", "check_shape", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "if", "len", "(", "x", ".", "shape", ")", "==", "(", "self", ".", "ndims", "+", "1", ")", "else", "x", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_choice": [[111, 114], ["torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "random_choice", "(", "self", ",", "shape", ")", ":", "\n", "        ", "t", "=", "2", "*", "torch", ".", "rand", "(", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "-", "1", "\n", "return", "torch", ".", "sign", "(", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_int": [[115, 118], ["t.long", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["None"], ["", "def", "random_int", "(", "self", ",", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "[", "1", "]", ")", ":", "\n", "        ", "t", "=", "low", "+", "(", "high", "-", "low", ")", "*", "torch", ".", "rand", "(", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "t", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.normalize": [[119, 127], ["x.abs().view().max", "t.view", "x.abs().view", "t.view", "x.abs"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "            ", "t", "=", "x", ".", "abs", "(", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "return", "x", "/", "(", "t", ".", "view", "(", "-", "1", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "+", "1e-12", ")", "\n", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "            ", "t", "=", "(", "x", "**", "2", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "return", "x", "/", "(", "t", ".", "view", "(", "-", "1", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "+", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.lp_norm": [[128, 132], ["t.view"], "methods", ["None"], ["", "", "def", "lp_norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "norm", "==", "'L2'", ":", "\n", "            ", "t", "=", "(", "x", "**", "2", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", ".", "sum", "(", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "return", "t", ".", "view", "(", "-", "1", ",", "*", "(", "[", "1", "]", "*", "self", ".", "ndims", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.eta_rectangles": [[133, 149], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "max", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "torch.Tensor().view().to", "max", "min", "max", "min", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "", "def", "eta_rectangles", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "delta", "=", "torch", ".", "zeros", "(", "[", "x", ",", "y", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "x_c", ",", "y_c", "=", "x", "//", "2", "+", "1", ",", "y", "//", "2", "+", "1", "\n", "\n", "counter2", "=", "[", "x_c", "-", "1", ",", "y_c", "-", "1", "]", "\n", "for", "counter", "in", "range", "(", "0", ",", "max", "(", "x_c", ",", "y_c", ")", ")", ":", "\n", "          ", "delta", "[", "max", "(", "counter2", "[", "0", "]", ",", "0", ")", ":", "min", "(", "counter2", "[", "0", "]", "+", "(", "2", "*", "counter", "+", "1", ")", ",", "x", ")", ",", "\n", "max", "(", "0", ",", "counter2", "[", "1", "]", ")", ":", "min", "(", "counter2", "[", "1", "]", "+", "(", "2", "*", "counter", "+", "1", ")", ",", "y", ")", "\n", "]", "+=", "1.0", "/", "(", "torch", ".", "Tensor", "(", "[", "counter", "+", "1", "]", ")", ".", "view", "(", "1", ",", "1", ")", ".", "to", "(", "\n", "self", ".", "device", ")", "**", "2", ")", "\n", "counter2", "[", "0", "]", "-=", "1", "\n", "counter2", "[", "1", "]", "-=", "1", "\n", "\n", "", "delta", "/=", "(", "delta", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "0", ",", "1", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "\n", "\n", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.eta": [[150, 159], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "square.SquareAttack.eta_rectangles", "square.SquareAttack.eta_rectangles", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "delta.permute.permute.permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.eta_rectangles", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.eta_rectangles"], ["", "def", "eta", "(", "self", ",", "s", ")", ":", "\n", "        ", "delta", "=", "torch", ".", "zeros", "(", "[", "s", ",", "s", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "delta", "[", ":", "s", "//", "2", "]", "=", "self", ".", "eta_rectangles", "(", "s", "//", "2", ",", "s", ")", "\n", "delta", "[", "s", "//", "2", ":", "]", "=", "-", "1.", "*", "self", ".", "eta_rectangles", "(", "s", "-", "s", "//", "2", ",", "s", ")", "\n", "delta", "/=", "(", "delta", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "0", ",", "1", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "\n", "if", "torch", ".", "rand", "(", "[", "1", "]", ")", ">", "0.5", ":", "\n", "            ", "delta", "=", "delta", ".", "permute", "(", "[", "1", ",", "0", "]", ")", "\n", "\n", "", "return", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.p_selection": [[160, 188], ["int"], "methods", ["None"], ["", "def", "p_selection", "(", "self", ",", "it", ")", ":", "\n", "        ", "\"\"\" schedule to decrease the parameter p \"\"\"", "\n", "\n", "if", "self", ".", "rescale_schedule", ":", "\n", "            ", "it", "=", "int", "(", "it", "/", "self", ".", "n_queries", "*", "10000", ")", "\n", "\n", "", "if", "10", "<", "it", "<=", "50", ":", "\n", "            ", "p", "=", "self", ".", "p_init", "/", "2", "\n", "", "elif", "50", "<", "it", "<=", "200", ":", "\n", "            ", "p", "=", "self", ".", "p_init", "/", "4", "\n", "", "elif", "200", "<", "it", "<=", "500", ":", "\n", "            ", "p", "=", "self", ".", "p_init", "/", "8", "\n", "", "elif", "500", "<", "it", "<=", "1000", ":", "\n", "            ", "p", "=", "self", ".", "p_init", "/", "16", "\n", "", "elif", "1000", "<", "it", "<=", "2000", ":", "\n", "            ", "p", "=", "self", ".", "p_init", "/", "32", "\n", "", "elif", "2000", "<", "it", "<=", "4000", ":", "\n", "            ", "p", "=", "self", ".", "p_init", "/", "64", "\n", "", "elif", "4000", "<", "it", "<=", "6000", ":", "\n", "            ", "p", "=", "self", ".", "p_init", "/", "128", "\n", "", "elif", "6000", "<", "it", "<=", "8000", ":", "\n", "            ", "p", "=", "self", ".", "p_init", "/", "256", "\n", "", "elif", "8000", "<", "it", ":", "\n", "            ", "p", "=", "self", ".", "p_init", "/", "512", "\n", "", "else", ":", "\n", "            ", "p", "=", "self", ".", "p_init", "\n", "\n", "", "return", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.attack_single_run": [[189, 377], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x.clone", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "square.SquareAttack.margin_and_loss", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "int", "range", "math.sqrt", "square.SquareAttack.check_shape", "square.SquareAttack.check_shape", "square.SquareAttack.p_selection", "max", "square.SquareAttack.random_int", "square.SquareAttack.random_int", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "square.SquareAttack.check_shape", "square.SquareAttack.margin_and_loss", "torch.max", "torch.max", "torch.max", "torch.max", "idx_improved.reshape.reshape.reshape", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "square.SquareAttack.margin_and_loss", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "int", "range", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "y_curr.unsqueeze.unsqueeze.unsqueeze", "int", "square.SquareAttack.random_choice", "torch.max", "torch.max", "torch.max", "torch.max", "print", "ind_succ.numel", "range", "math.sqrt", "square.SquareAttack.check_shape", "square.SquareAttack.check_shape", "square.SquareAttack.p_selection", "max", "square.SquareAttack.random_int", "square.SquareAttack.random_int", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "square.SquareAttack.random_int", "square.SquareAttack.random_int", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "square.SquareAttack.lp_norm", "torch.max", "torch.max", "torch.max", "torch.max", "square.SquareAttack.lp_norm", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "square.SquareAttack.check_shape", "square.SquareAttack.lp_norm", "square.SquareAttack.margin_and_loss", "torch.max", "torch.max", "torch.max", "torch.max", "idx_improved.reshape.reshape.reshape", "square.SquareAttack.random_choice", "round", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "ind_succ.numel", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "y_curr.unsqueeze.unsqueeze.unsqueeze", "int", "square.SquareAttack.eta().view", "square.SquareAttack.random_choice", "print", "ind_succ.numel", "math.sqrt", "ind_succ.numel", "n_queries[].mean().item", "n_queries[].median().item", "loss_min.mean", "square.SquareAttack.eta().view", "square.SquareAttack.random_choice", "square.SquareAttack.normalize", "round", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ind_succ.numel", "len", "float", "math.sqrt", "square.SquareAttack.eta", "square.SquareAttack.normalize", "ind_succ.numel", "n_queries[].mean().item", "n_queries[].median().item", "loss_min.mean", "ind_succ.numel", "n_queries[].mean", "n_queries[].median", "square.SquareAttack.eta", "len", "float", "torch.max", "torch.max", "torch.max", "torch.max", "ind_succ.numel", "n_queries[].mean", "n_queries[].median", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.margin_and_loss", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.p_selection", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_int", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_int", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.margin_and_loss", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.margin_and_loss", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_choice", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.p_selection", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_int", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_int", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_int", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_int", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.lp_norm", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.lp_norm", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.lp_norm", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.margin_and_loss", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_choice", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_choice", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_choice", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.normalize", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.eta", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.normalize", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.eta"], ["", "def", "attack_single_run", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "adv", "=", "x", ".", "clone", "(", ")", "\n", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "[", "1", ":", "]", "\n", "n_features", "=", "c", "*", "h", "*", "w", "\n", "n_ex_total", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                ", "x_best", "=", "torch", ".", "clamp", "(", "x", "+", "self", ".", "eps", "*", "self", ".", "random_choice", "(", "\n", "[", "x", ".", "shape", "[", "0", "]", ",", "c", ",", "1", ",", "w", "]", ")", ",", "0.", ",", "1.", ")", "\n", "margin_min", ",", "loss_min", "=", "self", ".", "margin_and_loss", "(", "x_best", ",", "y", ")", "\n", "n_queries", "=", "torch", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "s_init", "=", "int", "(", "math", ".", "sqrt", "(", "self", ".", "p_init", "*", "n_features", "/", "c", ")", ")", "\n", "\n", "for", "i_iter", "in", "range", "(", "self", ".", "n_queries", ")", ":", "\n", "                    ", "idx_to_fool", "=", "(", "margin_min", ">", "0.0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "x_curr", "=", "self", ".", "check_shape", "(", "x", "[", "idx_to_fool", "]", ")", "\n", "x_best_curr", "=", "self", ".", "check_shape", "(", "x_best", "[", "idx_to_fool", "]", ")", "\n", "y_curr", "=", "y", "[", "idx_to_fool", "]", "\n", "if", "len", "(", "y_curr", ".", "shape", ")", "==", "0", ":", "\n", "                        ", "y_curr", "=", "y_curr", ".", "unsqueeze", "(", "0", ")", "\n", "", "margin_min_curr", "=", "margin_min", "[", "idx_to_fool", "]", "\n", "loss_min_curr", "=", "loss_min", "[", "idx_to_fool", "]", "\n", "\n", "p", "=", "self", ".", "p_selection", "(", "i_iter", ")", "\n", "s", "=", "max", "(", "int", "(", "round", "(", "math", ".", "sqrt", "(", "p", "*", "n_features", "/", "c", ")", ")", ")", ",", "1", ")", "\n", "vh", "=", "self", ".", "random_int", "(", "0", ",", "h", "-", "s", ")", "\n", "vw", "=", "self", ".", "random_int", "(", "0", ",", "w", "-", "s", ")", "\n", "new_deltas", "=", "torch", ".", "zeros", "(", "[", "c", ",", "h", ",", "w", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "new_deltas", "[", ":", ",", "vh", ":", "vh", "+", "s", ",", "vw", ":", "vw", "+", "s", "\n", "]", "=", "2.", "*", "self", ".", "eps", "*", "self", ".", "random_choice", "(", "[", "c", ",", "1", ",", "1", "]", ")", "\n", "\n", "x_new", "=", "x_best_curr", "+", "new_deltas", "\n", "x_new", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_new", ",", "x_curr", "-", "self", ".", "eps", ")", ",", "\n", "x_curr", "+", "self", ".", "eps", ")", "\n", "x_new", "=", "torch", ".", "clamp", "(", "x_new", ",", "0.", ",", "1.", ")", "\n", "x_new", "=", "self", ".", "check_shape", "(", "x_new", ")", "\n", "\n", "margin", ",", "loss", "=", "self", ".", "margin_and_loss", "(", "x_new", ",", "y_curr", ")", "\n", "\n", "# update loss if new loss is better", "\n", "idx_improved", "=", "(", "loss", "<", "loss_min_curr", ")", ".", "float", "(", ")", "\n", "\n", "loss_min", "[", "idx_to_fool", "]", "=", "idx_improved", "*", "loss", "+", "(", "\n", "1.", "-", "idx_improved", ")", "*", "loss_min_curr", "\n", "\n", "# update margin and x_best if new loss is better", "\n", "# or misclassification", "\n", "idx_miscl", "=", "(", "margin", "<=", "0.", ")", ".", "float", "(", ")", "\n", "idx_improved", "=", "torch", ".", "max", "(", "idx_improved", ",", "idx_miscl", ")", "\n", "\n", "margin_min", "[", "idx_to_fool", "]", "=", "idx_improved", "*", "margin", "+", "(", "\n", "1.", "-", "idx_improved", ")", "*", "margin_min_curr", "\n", "idx_improved", "=", "idx_improved", ".", "reshape", "(", "[", "-", "1", ",", "\n", "*", "[", "1", "]", "*", "len", "(", "x", ".", "shape", "[", ":", "-", "1", "]", ")", "]", ")", "\n", "x_best", "[", "idx_to_fool", "]", "=", "idx_improved", "*", "x_new", "+", "(", "\n", "1.", "-", "idx_improved", ")", "*", "x_best_curr", "\n", "n_queries", "[", "idx_to_fool", "]", "+=", "1.", "\n", "\n", "ind_succ", "=", "(", "margin_min", "<=", "0.", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "self", ".", "verbose", "and", "ind_succ", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                        ", "print", "(", "'{}'", ".", "format", "(", "i_iter", "+", "1", ")", ",", "\n", "'- success rate={}/{} ({:.2%})'", ".", "format", "(", "\n", "ind_succ", ".", "numel", "(", ")", ",", "n_ex_total", ",", "\n", "float", "(", "ind_succ", ".", "numel", "(", ")", ")", "/", "n_ex_total", ")", ",", "\n", "'- avg # queries={:.1f}'", ".", "format", "(", "\n", "n_queries", "[", "ind_succ", "]", ".", "mean", "(", ")", ".", "item", "(", ")", ")", ",", "\n", "'- med # queries={:.1f}'", ".", "format", "(", "\n", "n_queries", "[", "ind_succ", "]", ".", "median", "(", ")", ".", "item", "(", ")", ")", ",", "\n", "'- loss={:.3f}'", ".", "format", "(", "loss_min", ".", "mean", "(", ")", ")", ")", "\n", "\n", "", "if", "ind_succ", ".", "numel", "(", ")", "==", "n_ex_total", ":", "\n", "                        ", "break", "\n", "\n", "", "", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                ", "delta_init", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "s", "=", "h", "//", "5", "\n", "sp_init", "=", "(", "h", "-", "s", "*", "5", ")", "//", "2", "\n", "vh", "=", "sp_init", "+", "0", "\n", "for", "_", "in", "range", "(", "h", "//", "s", ")", ":", "\n", "                    ", "vw", "=", "sp_init", "+", "0", "\n", "for", "_", "in", "range", "(", "w", "//", "s", ")", ":", "\n", "                        ", "delta_init", "[", ":", ",", ":", ",", "vh", ":", "vh", "+", "s", ",", "vw", ":", "vw", "+", "s", "]", "+=", "self", ".", "eta", "(", "\n", "s", ")", ".", "view", "(", "1", ",", "1", ",", "s", ",", "s", ")", "*", "self", ".", "random_choice", "(", "\n", "[", "x", ".", "shape", "[", "0", "]", ",", "c", ",", "1", ",", "1", "]", ")", "\n", "vw", "+=", "s", "\n", "", "vh", "+=", "s", "\n", "\n", "", "x_best", "=", "torch", ".", "clamp", "(", "x", "+", "self", ".", "normalize", "(", "delta_init", "\n", ")", "*", "self", ".", "eps", ",", "0.", ",", "1.", ")", "\n", "margin_min", ",", "loss_min", "=", "self", ".", "margin_and_loss", "(", "x_best", ",", "y", ")", "\n", "n_queries", "=", "torch", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "s_init", "=", "int", "(", "math", ".", "sqrt", "(", "self", ".", "p_init", "*", "n_features", "/", "c", ")", ")", "\n", "\n", "for", "i_iter", "in", "range", "(", "self", ".", "n_queries", ")", ":", "\n", "                    ", "idx_to_fool", "=", "(", "margin_min", ">", "0.0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "x_curr", "=", "self", ".", "check_shape", "(", "x", "[", "idx_to_fool", "]", ")", "\n", "x_best_curr", "=", "self", ".", "check_shape", "(", "x_best", "[", "idx_to_fool", "]", ")", "\n", "y_curr", "=", "y", "[", "idx_to_fool", "]", "\n", "if", "len", "(", "y_curr", ".", "shape", ")", "==", "0", ":", "\n", "                        ", "y_curr", "=", "y_curr", ".", "unsqueeze", "(", "0", ")", "\n", "", "margin_min_curr", "=", "margin_min", "[", "idx_to_fool", "]", "\n", "loss_min_curr", "=", "loss_min", "[", "idx_to_fool", "]", "\n", "\n", "delta_curr", "=", "x_best_curr", "-", "x_curr", "\n", "p", "=", "self", ".", "p_selection", "(", "i_iter", ")", "\n", "s", "=", "max", "(", "int", "(", "round", "(", "math", ".", "sqrt", "(", "p", "*", "n_features", "/", "c", ")", ")", ")", ",", "3", ")", "\n", "if", "s", "%", "2", "==", "0", ":", "\n", "                        ", "s", "+=", "1", "\n", "\n", "", "vh", "=", "self", ".", "random_int", "(", "0", ",", "h", "-", "s", ")", "\n", "vw", "=", "self", ".", "random_int", "(", "0", ",", "w", "-", "s", ")", "\n", "new_deltas_mask", "=", "torch", ".", "zeros_like", "(", "x_curr", ")", "\n", "new_deltas_mask", "[", ":", ",", ":", ",", "vh", ":", "vh", "+", "s", ",", "vw", ":", "vw", "+", "s", "]", "=", "1.0", "\n", "norms_window_1", "=", "(", "delta_curr", "[", ":", ",", ":", ",", "vh", ":", "vh", "+", "s", ",", "vw", ":", "vw", "+", "s", "\n", "]", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "\n", "\n", "vh2", "=", "self", ".", "random_int", "(", "0", ",", "h", "-", "s", ")", "\n", "vw2", "=", "self", ".", "random_int", "(", "0", ",", "w", "-", "s", ")", "\n", "new_deltas_mask_2", "=", "torch", ".", "zeros_like", "(", "x_curr", ")", "\n", "new_deltas_mask_2", "[", ":", ",", ":", ",", "vh2", ":", "vh2", "+", "s", ",", "vw2", ":", "vw2", "+", "s", "]", "=", "1.", "\n", "\n", "norms_image", "=", "self", ".", "lp_norm", "(", "x_best_curr", "-", "x_curr", ")", "\n", "mask_image", "=", "torch", ".", "max", "(", "new_deltas_mask", ",", "new_deltas_mask_2", ")", "\n", "norms_windows", "=", "self", ".", "lp_norm", "(", "delta_curr", "*", "mask_image", ")", "\n", "\n", "new_deltas", "=", "torch", ".", "ones", "(", "[", "x_curr", ".", "shape", "[", "0", "]", ",", "c", ",", "s", ",", "s", "]", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "new_deltas", "*=", "(", "self", ".", "eta", "(", "s", ")", ".", "view", "(", "1", ",", "1", ",", "s", ",", "s", ")", "*", "\n", "self", ".", "random_choice", "(", "[", "x_curr", ".", "shape", "[", "0", "]", ",", "c", ",", "1", ",", "1", "]", ")", ")", "\n", "old_deltas", "=", "delta_curr", "[", ":", ",", ":", ",", "vh", ":", "vh", "+", "s", ",", "vw", ":", "vw", "+", "s", "]", "/", "(", "\n", "1e-12", "+", "norms_window_1", ")", "\n", "new_deltas", "+=", "old_deltas", "\n", "new_deltas", "=", "new_deltas", "/", "(", "1e-12", "+", "(", "new_deltas", "**", "2", ")", ".", "sum", "(", "\n", "dim", "=", "(", "-", "2", ",", "-", "1", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ")", "*", "(", "torch", ".", "max", "(", "\n", "(", "self", ".", "eps", "*", "torch", ".", "ones_like", "(", "new_deltas", ")", ")", "**", "2", "-", "\n", "norms_image", "**", "2", ",", "torch", ".", "zeros_like", "(", "new_deltas", ")", ")", "/", "\n", "c", "+", "norms_windows", "**", "2", ")", ".", "sqrt", "(", ")", "\n", "delta_curr", "[", ":", ",", ":", ",", "vh2", ":", "vh2", "+", "s", ",", "vw2", ":", "vw2", "+", "s", "]", "=", "0.", "\n", "delta_curr", "[", ":", ",", ":", ",", "vh", ":", "vh", "+", "s", ",", "vw", ":", "vw", "+", "s", "]", "=", "new_deltas", "+", "0", "\n", "\n", "x_new", "=", "torch", ".", "clamp", "(", "x_curr", "+", "self", ".", "normalize", "(", "delta_curr", "\n", ")", "*", "self", ".", "eps", ",", "0.", ",", "1.", ")", "\n", "x_new", "=", "self", ".", "check_shape", "(", "x_new", ")", "\n", "norms_image", "=", "self", ".", "lp_norm", "(", "x_new", "-", "x_curr", ")", "\n", "\n", "margin", ",", "loss", "=", "self", ".", "margin_and_loss", "(", "x_new", ",", "y_curr", ")", "\n", "\n", "# update loss if new loss is better", "\n", "idx_improved", "=", "(", "loss", "<", "loss_min_curr", ")", ".", "float", "(", ")", "\n", "\n", "loss_min", "[", "idx_to_fool", "]", "=", "idx_improved", "*", "loss", "+", "(", "\n", "1.", "-", "idx_improved", ")", "*", "loss_min_curr", "\n", "\n", "# update margin and x_best if new loss is better", "\n", "# or misclassification", "\n", "idx_miscl", "=", "(", "margin", "<=", "0.", ")", ".", "float", "(", ")", "\n", "idx_improved", "=", "torch", ".", "max", "(", "idx_improved", ",", "idx_miscl", ")", "\n", "\n", "margin_min", "[", "idx_to_fool", "]", "=", "idx_improved", "*", "margin", "+", "(", "\n", "1.", "-", "idx_improved", ")", "*", "margin_min_curr", "\n", "idx_improved", "=", "idx_improved", ".", "reshape", "(", "[", "-", "1", ",", "\n", "*", "[", "1", "]", "*", "len", "(", "x", ".", "shape", "[", ":", "-", "1", "]", ")", "]", ")", "\n", "x_best", "[", "idx_to_fool", "]", "=", "idx_improved", "*", "x_new", "+", "(", "\n", "1.", "-", "idx_improved", ")", "*", "x_best_curr", "\n", "n_queries", "[", "idx_to_fool", "]", "+=", "1.", "\n", "\n", "ind_succ", "=", "(", "margin_min", "<=", "0.", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "self", ".", "verbose", "and", "ind_succ", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                        ", "print", "(", "'{}'", ".", "format", "(", "i_iter", "+", "1", ")", ",", "\n", "'- success rate={}/{} ({:.2%})'", ".", "format", "(", "\n", "ind_succ", ".", "numel", "(", ")", ",", "n_ex_total", ",", "float", "(", "\n", "ind_succ", ".", "numel", "(", ")", ")", "/", "n_ex_total", ")", ",", "\n", "'- avg # queries={:.1f}'", ".", "format", "(", "\n", "n_queries", "[", "ind_succ", "]", ".", "mean", "(", ")", ".", "item", "(", ")", ")", ",", "\n", "'- med # queries={:.1f}'", ".", "format", "(", "\n", "n_queries", "[", "ind_succ", "]", ".", "median", "(", ")", ".", "item", "(", ")", ")", ",", "\n", "'- loss={:.3f}'", ".", "format", "(", "loss_min", ".", "mean", "(", ")", ")", ")", "\n", "\n", "", "assert", "(", "x_new", "!=", "x_new", ")", ".", "sum", "(", ")", "==", "0", "\n", "assert", "(", "x_best", "!=", "x_best", ")", ".", "sum", "(", ")", "==", "0", "\n", "\n", "if", "ind_succ", ".", "numel", "(", ")", "==", "n_ex_total", ":", "\n", "                        ", "break", "\n", "\n", "", "", "", "", "return", "n_queries", ",", "x_best", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.perturb": [[378, 441], ["square.SquareAttack.init_hyperparam", "x.clone", "time.time", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "range", "square.SquareAttack.detach().clone().long().to", "acc.nonzero().squeeze", "len", "ind_to_fool.unsqueeze.unsqueeze.unsqueeze", "ind_to_fool.unsqueeze.unsqueeze.numel", "x[].clone", "y[].clone", "square.SquareAttack.attack_single_run", "square.SquareAttack.predict", "adv_curr[].clone", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "square.SquareAttack.predict", "y_pred.detach().clone().long().to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "square.SquareAttack.predict", "square.SquareAttack.random_target_classes", "square.SquareAttack.detach().clone().long", "square.SquareAttack.predict().max", "square.SquareAttack.predict().max", "acc.nonzero", "print", "square.SquareAttack.max", "square.SquareAttack.max", "y_pred.detach().clone().long", "square.SquareAttack.detach().clone", "square.SquareAttack.predict", "square.SquareAttack.predict", "square.SquareAttack.max", "square.SquareAttack.max", "acc.float().mean", "time.time", "y_pred.detach().clone", "square.SquareAttack.detach", "acc.float", "y_pred.detach"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.init_hyperparam", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.attack_single_run", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.square.SquareAttack.random_target_classes", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.utils_tf2.ModelAdapter.predict"], ["", "def", "perturb", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param x:           clean images\n        :param y:           untargeted attack -> clean labels,\n                            if None we use the predicted labels\n                            targeted attack -> target labels, if None random classes,\n                            different from the predicted ones, are sampled\n        \"\"\"", "\n", "\n", "self", ".", "init_hyperparam", "(", "x", ")", "\n", "\n", "adv", "=", "x", ".", "clone", "(", ")", "\n", "if", "y", "is", "None", ":", "\n", "            ", "if", "not", "self", ".", "targeted", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "self", ".", "predict", "(", "x", ")", "\n", "y_pred", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "y", "=", "y_pred", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "", "else", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output", "=", "self", ".", "predict", "(", "x", ")", "\n", "n_classes", "=", "output", ".", "shape", "[", "-", "1", "]", "\n", "y_pred", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", "\n", "y", "=", "self", ".", "random_target_classes", "(", "y_pred", ",", "n_classes", ")", "\n", "", "", "", "else", ":", "\n", "            ", "y", "=", "y", ".", "detach", "(", ")", ".", "clone", "(", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "if", "not", "self", ".", "targeted", ":", "\n", "            ", "acc", "=", "self", ".", "predict", "(", "x", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "", "else", ":", "\n", "            ", "acc", "=", "self", ".", "predict", "(", "x", ")", ".", "max", "(", "1", ")", "[", "1", "]", "!=", "y", "\n", "\n", "", "startt", "=", "time", ".", "time", "(", ")", "\n", "\n", "torch", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "for", "counter", "in", "range", "(", "self", ".", "n_restarts", ")", ":", "\n", "            ", "ind_to_fool", "=", "acc", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "ind_to_fool", ".", "shape", ")", "==", "0", ":", "\n", "                ", "ind_to_fool", "=", "ind_to_fool", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "ind_to_fool", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                ", "x_to_fool", "=", "x", "[", "ind_to_fool", "]", ".", "clone", "(", ")", "\n", "y_to_fool", "=", "y", "[", "ind_to_fool", "]", ".", "clone", "(", ")", "\n", "\n", "_", ",", "adv_curr", "=", "self", ".", "attack_single_run", "(", "x_to_fool", ",", "y_to_fool", ")", "\n", "\n", "output_curr", "=", "self", ".", "predict", "(", "adv_curr", ")", "\n", "if", "not", "self", ".", "targeted", ":", "\n", "                    ", "acc_curr", "=", "output_curr", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y_to_fool", "\n", "", "else", ":", "\n", "                    ", "acc_curr", "=", "output_curr", ".", "max", "(", "1", ")", "[", "1", "]", "!=", "y_to_fool", "\n", "", "ind_curr", "=", "(", "acc_curr", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "acc", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "0", "\n", "adv", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "adv_curr", "[", "ind_curr", "]", ".", "clone", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "print", "(", "'restart {} - robust accuracy: {:.2%}'", ".", "format", "(", "\n", "counter", ",", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ")", ",", "\n", "'- cum. time: {:.1f} s'", ".", "format", "(", "\n", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "", "", "return", "adv", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack.__init__": [[17, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "n_iter", "=", "100", ",", "norm", "=", "'Linf'", ",", "n_restarts", "=", "1", ",", "eps", "=", "None", ",", "\n", "seed", "=", "0", ",", "loss", "=", "'ce'", ",", "eot_iter", "=", "1", ",", "rho", "=", ".75", ",", "verbose", "=", "False", ",", "\n", "device", "=", "'cuda'", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "n_restarts", "=", "n_restarts", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "eot_iter", "=", "eot_iter", "\n", "self", ".", "thr_decr", "=", "rho", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack.check_oscillation": [[32, 38], ["numpy.zeros", "range", "numpy.ones"], "methods", ["None"], ["", "def", "check_oscillation", "(", "self", ",", "x", ",", "j", ",", "k", ",", "y5", ",", "k3", "=", "0.75", ")", ":", "\n", "        ", "t", "=", "np", ".", "zeros", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "for", "counter5", "in", "range", "(", "k", ")", ":", "\n", "          ", "t", "+=", "x", "[", "j", "-", "counter5", "]", ">", "x", "[", "j", "-", "counter5", "-", "1", "]", "\n", "\n", "", "return", "t", "<=", "k", "*", "k3", "*", "np", ".", "ones", "(", "t", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack.check_shape": [[39, 41], ["numpy.expand_dims", "len"], "methods", ["None"], ["", "def", "check_shape", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "if", "len", "(", "x", ".", "shape", ")", ">", "0", "else", "np", ".", "expand_dims", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack.dlr_loss": [[42, 47], ["x.sort", "numpy.arange"], "methods", ["None"], ["", "def", "dlr_loss", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x_sorted", ",", "ind_sorted", "=", "x", ".", "sort", "(", "dim", "=", "1", ")", "\n", "ind", "=", "(", "ind_sorted", "[", ":", ",", "-", "1", "]", "==", "y", ")", ".", "float", "(", ")", "\n", "\n", "return", "-", "(", "x", "[", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "y", "]", "-", "x_sorted", "[", ":", ",", "-", "2", "]", "*", "ind", "-", "x_sorted", "[", ":", ",", "-", "1", "]", "*", "(", "1.", "-", "ind", ")", ")", "/", "(", "x_sorted", "[", ":", ",", "-", "1", "]", "-", "x_sorted", "[", ":", ",", "-", "3", "]", "+", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack.attack_single_run": [[48, 181], ["x_adv.detach.detach.clamp", "x_adv.detach.detach.clone", "x_adv.detach.detach.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "x_adv.detach.detach.requires_grad_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "float", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.zeros_like.clone", "nn.CrossEntropyLoss.detach().clone", "x_adv.detach.detach.clone", "numpy.arange", "criterion_indiv.detach().clone.clone", "range", "x_in.clone", "x_in.clone().unsqueeze", "y_in.clone", "y_in.clone().unsqueeze", "max", "max", "max", "print", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "[].detach", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "numpy.zeros", "numpy.zeros", "x_adv.detach.detach.requires_grad_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "len", "len", "int", "int", "int", "x.detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "ValueError", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "autopgd_pt.APGDAttack.model", "torch.CrossEntropyLoss.", "nn.CrossEntropyLoss.sum", "autopgd_pt.APGDAttack.detach().max", "nn.CrossEntropyLoss.detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x_adv.detach.detach.detach", "x_adv.detach.detach.clone", "[].detach", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "nn.CrossEntropyLoss.detach().clone", "x_adv[].clone", "grad[].clone", "x_in.clone", "y_in.clone", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "[].reshape", "x.detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "autopgd_pt.APGDAttack.model", "torch.CrossEntropyLoss.", "nn.CrossEntropyLoss.sum", "autopgd_pt.APGDAttack.detach().max", "criterion_indiv.detach().clone.cpu", "autopgd_pt.APGDAttack.check_oscillation", "numpy.copy", "criterion_indiv.detach().clone.clone", "numpy.maximum", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "autopgd_pt.APGDAttack.detach", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "criterion_indiv.detach().clone.sum", "nn.CrossEntropyLoss.detach", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "criterion_indiv.detach().clone.detach().cpu().numpy", "numpy.sum", "numpy.where.astype().sum", "numpy.where", "x_best[].clone", "grad_best[].clone", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "autopgd_pt.APGDAttack.detach", "loss_indiv.detach().clone.clone.cpu().numpy", "criterion_indiv.detach().clone.cpu().numpy", "torch.randn().to().detach.reshape().abs().max", "torch.randn().to().detach.reshape().abs().max", "torch.randn().to().detach.reshape().abs().max", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "criterion_indiv.detach().clone.detach().cpu", "numpy.where.astype", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "loss_indiv.detach().clone.clone.cpu", "criterion_indiv.detach().clone.cpu", "torch.randn().to().detach.reshape().abs", "torch.randn().to().detach.reshape().abs", "torch.randn().to().detach.reshape().abs", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "criterion_indiv.detach().clone.detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.randn().to().detach.reshape", "torch.randn().to().detach.reshape", "torch.randn().to().detach.reshape", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_oscillation"], ["", "def", "attack_single_run", "(", "self", ",", "x_in", ",", "y_in", ")", ":", "\n", "        ", "x", "=", "x_in", ".", "clone", "(", ")", "if", "len", "(", "x_in", ".", "shape", ")", "==", "4", "else", "x_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "y", "=", "y_in", ".", "clone", "(", ")", "if", "len", "(", "y_in", ".", "shape", ")", "==", "1", "else", "y_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "self", ".", "n_iter_2", ",", "self", ".", "n_iter_min", ",", "self", ".", "size_decr", "=", "max", "(", "int", "(", "0.22", "*", "self", ".", "n_iter", ")", ",", "1", ")", ",", "max", "(", "int", "(", "0.06", "*", "self", ".", "n_iter", ")", ",", "1", ")", ",", "max", "(", "int", "(", "0.03", "*", "self", ".", "n_iter", ")", ",", "1", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'parameters: '", ",", "self", ".", "n_iter", ",", "self", ".", "n_iter_2", ",", "self", ".", "n_iter_min", ",", "self", ".", "size_decr", ")", "\n", "\n", "", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "            ", "t", "=", "2", "*", "torch", ".", "rand", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "-", "1", "\n", "x_adv", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "t", "/", "(", "t", ".", "reshape", "(", "[", "t", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "            ", "t", "=", "torch", ".", "randn", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "\n", "x_adv", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "t", "/", "(", "(", "t", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "\n", "", "x_adv", "=", "x_adv", ".", "clamp", "(", "0.", ",", "1.", ")", "\n", "x_best", "=", "x_adv", ".", "clone", "(", ")", "\n", "x_best_adv", "=", "x_adv", ".", "clone", "(", ")", "\n", "loss_steps", "=", "torch", ".", "zeros", "(", "[", "self", ".", "n_iter", ",", "x", ".", "shape", "[", "0", "]", "]", ")", "\n", "loss_best_steps", "=", "torch", ".", "zeros", "(", "[", "self", ".", "n_iter", "+", "1", ",", "x", ".", "shape", "[", "0", "]", "]", ")", "\n", "acc_steps", "=", "torch", ".", "zeros_like", "(", "loss_best_steps", ")", "\n", "\n", "if", "self", ".", "loss", "==", "'ce'", ":", "\n", "            ", "criterion_indiv", "=", "nn", ".", "CrossEntropyLoss", "(", "reduce", "=", "False", ",", "reduction", "=", "'none'", ")", "\n", "", "elif", "self", ".", "loss", "==", "'dlr'", ":", "\n", "            ", "criterion_indiv", "=", "self", ".", "dlr_loss", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'unknowkn loss'", ")", "\n", "\n", "", "x_adv", ".", "requires_grad_", "(", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "eot_iter", ")", ":", "\n", "            ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "logits", "=", "self", ".", "model", "(", "x_adv", ")", "# 1 forward pass (eot_iter = 1)", "\n", "loss_indiv", "=", "criterion_indiv", "(", "logits", ",", "y", ")", "\n", "loss", "=", "loss_indiv", ".", "sum", "(", ")", "\n", "\n", "", "grad", "+=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "[", "x_adv", "]", ")", "[", "0", "]", ".", "detach", "(", ")", "# 1 backward pass (eot_iter = 1)", "\n", "\n", "", "grad", "/=", "float", "(", "self", ".", "eot_iter", ")", "\n", "grad_best", "=", "grad", ".", "clone", "(", ")", "\n", "\n", "acc", "=", "logits", ".", "detach", "(", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "acc_steps", "[", "0", "]", "=", "acc", "+", "0", "\n", "loss_best", "=", "loss_indiv", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "step_size", "=", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "torch", ".", "Tensor", "(", "[", "2.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "x_adv_old", "=", "x_adv", ".", "clone", "(", ")", "\n", "counter", "=", "0", "\n", "k", "=", "self", ".", "n_iter_2", "+", "0", "\n", "u", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "counter3", "=", "0", "\n", "\n", "loss_best_last_check", "=", "loss_best", ".", "clone", "(", ")", "\n", "reduced_last_check", "=", "np", ".", "zeros", "(", "loss_best", ".", "shape", ")", "==", "np", ".", "zeros", "(", "loss_best", ".", "shape", ")", "\n", "n_reduced", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "### gradient step", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "\n", "grad2", "=", "x_adv", "-", "x_adv_old", "\n", "x_adv_old", "=", "x_adv", ".", "clone", "(", ")", "\n", "\n", "a", "=", "0.75", "if", "i", ">", "0", "else", "1.0", "\n", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                    ", "x_adv_1", "=", "x_adv", "+", "step_size", "*", "torch", ".", "sign", "(", "grad", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv_1", ",", "x", "-", "self", ".", "eps", ")", ",", "x", "+", "self", ".", "eps", ")", ",", "0.0", ",", "1.0", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", "+", "(", "x_adv_1", "-", "x_adv", ")", "*", "a", "+", "grad2", "*", "(", "1", "-", "a", ")", ",", "x", "-", "self", ".", "eps", ")", ",", "x", "+", "self", ".", "eps", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                    ", "x_adv_1", "=", "x_adv", "+", "step_size", "*", "grad", "/", "(", "(", "grad", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "x", "+", "(", "x_adv_1", "-", "x", ")", "/", "(", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "*", "torch", ".", "min", "(", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", ",", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ")", ",", "0.0", ",", "1.0", ")", "\n", "x_adv_1", "=", "x_adv", "+", "(", "x_adv_1", "-", "x_adv", ")", "*", "a", "+", "grad2", "*", "(", "1", "-", "a", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "x", "+", "(", "x_adv_1", "-", "x", ")", "/", "(", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "*", "torch", ".", "min", "(", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", ",", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "x_adv", "=", "x_adv_1", "+", "0.", "\n", "\n", "### get gradient", "\n", "", "x_adv", ".", "requires_grad_", "(", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "eot_iter", ")", ":", "\n", "                ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                    ", "logits", "=", "self", ".", "model", "(", "x_adv", ")", "# 1 forward pass (eot_iter = 1)", "\n", "loss_indiv", "=", "criterion_indiv", "(", "logits", ",", "y", ")", "\n", "loss", "=", "loss_indiv", ".", "sum", "(", ")", "\n", "\n", "", "grad", "+=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "[", "x_adv", "]", ")", "[", "0", "]", ".", "detach", "(", ")", "# 1 backward pass (eot_iter = 1)", "\n", "\n", "\n", "", "grad", "/=", "float", "(", "self", ".", "eot_iter", ")", "\n", "\n", "pred", "=", "logits", ".", "detach", "(", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "acc", "=", "torch", ".", "min", "(", "acc", ",", "pred", ")", "\n", "acc_steps", "[", "i", "+", "1", "]", "=", "acc", "+", "0", "\n", "x_best_adv", "[", "(", "pred", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "=", "x_adv", "[", "(", "pred", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "+", "0.", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'iteration: {} - Best loss: {:.6f}'", ".", "format", "(", "i", ",", "loss_best", ".", "sum", "(", ")", ")", ")", "\n", "\n", "### check step size", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "              ", "y1", "=", "loss_indiv", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "loss_steps", "[", "i", "]", "=", "y1", ".", "cpu", "(", ")", "+", "0", "\n", "ind", "=", "(", "y1", ">", "loss_best", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "x_best", "[", "ind", "]", "=", "x_adv", "[", "ind", "]", ".", "clone", "(", ")", "\n", "grad_best", "[", "ind", "]", "=", "grad", "[", "ind", "]", ".", "clone", "(", ")", "\n", "loss_best", "[", "ind", "]", "=", "y1", "[", "ind", "]", "+", "0", "\n", "loss_best_steps", "[", "i", "+", "1", "]", "=", "loss_best", "+", "0", "\n", "\n", "counter3", "+=", "1", "\n", "\n", "if", "counter3", "==", "k", ":", "\n", "                  ", "fl_oscillation", "=", "self", ".", "check_oscillation", "(", "loss_steps", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "i", ",", "k", ",", "loss_best", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k3", "=", "self", ".", "thr_decr", ")", "\n", "fl_reduce_no_impr", "=", "(", "~", "reduced_last_check", ")", "*", "(", "loss_best_last_check", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">=", "loss_best", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "fl_oscillation", "=", "~", "(", "~", "fl_oscillation", "*", "~", "fl_reduce_no_impr", ")", "\n", "reduced_last_check", "=", "np", ".", "copy", "(", "fl_oscillation", ")", "\n", "loss_best_last_check", "=", "loss_best", ".", "clone", "(", ")", "\n", "\n", "if", "np", ".", "sum", "(", "fl_oscillation", ")", ">", "0", ":", "\n", "                      ", "step_size", "[", "u", "[", "fl_oscillation", "]", "]", "/=", "2.0", "\n", "n_reduced", "=", "fl_oscillation", ".", "astype", "(", "float", ")", ".", "sum", "(", ")", "\n", "\n", "fl_oscillation", "=", "np", ".", "where", "(", "fl_oscillation", ")", "\n", "\n", "x_adv", "[", "fl_oscillation", "]", "=", "x_best", "[", "fl_oscillation", "]", ".", "clone", "(", ")", "\n", "grad", "[", "fl_oscillation", "]", "=", "grad_best", "[", "fl_oscillation", "]", ".", "clone", "(", ")", "\n", "\n", "", "counter3", "=", "0", "\n", "k", "=", "np", ".", "maximum", "(", "k", "-", "self", ".", "size_decr", ",", "self", ".", "n_iter_min", ")", "\n", "\n", "", "", "", "return", "x_best", ",", "acc", ",", "loss_best", ",", "x_best_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack.perturb": [[182, 232], ["x.clone", "time.time", "x_in.clone", "x_in.clone().unsqueeze", "y_in.clone", "y_in.clone().unsqueeze", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "print", "print", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "x.detach().clone", "range", "len", "len", "autopgd_pt.APGDAttack.model().max", "ValueError", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "autopgd_pt.APGDAttack.attack_single_run", "x_in.clone", "y_in.clone", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "acc.float().mean", "acc.nonzero().squeeze", "x.detach", "float", "print", "autopgd_pt.APGDAttack.model", "len", "ind_to_fool.unsqueeze.unsqueeze.unsqueeze", "ind_to_fool.unsqueeze.unsqueeze.numel", "autopgd_pt.APGDAttack.attack_single_run", "adv_curr[].clone", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "acc.float", "acc.nonzero", "x[].clone", "y[].clone", "print", "loss_best.sum", "acc.float().mean", "time.time", "acc.float"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.attack_single_run", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.attack_single_run"], ["", "def", "perturb", "(", "self", ",", "x_in", ",", "y_in", ",", "best_loss", "=", "False", ",", "cheap", "=", "True", ")", ":", "\n", "        ", "assert", "self", ".", "norm", "in", "[", "'Linf'", ",", "'L2'", "]", "\n", "x", "=", "x_in", ".", "clone", "(", ")", "if", "len", "(", "x_in", ".", "shape", ")", "==", "4", "else", "x_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "y", "=", "y_in", ".", "clone", "(", ")", "if", "len", "(", "y_in", ".", "shape", ")", "==", "1", "else", "y_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "adv", "=", "x", ".", "clone", "(", ")", "\n", "acc", "=", "self", ".", "model", "(", "x", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "loss", "=", "-", "1e10", "*", "torch", ".", "ones_like", "(", "acc", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'-------------------------- running {}-attack with epsilon {:.4f} --------------------------'", ".", "format", "(", "self", ".", "norm", ",", "self", ".", "eps", ")", ")", "\n", "print", "(", "'initial accuracy: {:.2%}'", ".", "format", "(", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "", "startt", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "not", "best_loss", ":", "\n", "            ", "torch", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "if", "not", "cheap", ":", "\n", "                ", "raise", "ValueError", "(", "'not implemented yet'", ")", "\n", "\n", "", "else", ":", "\n", "                ", "for", "counter", "in", "range", "(", "self", ".", "n_restarts", ")", ":", "\n", "                    ", "ind_to_fool", "=", "acc", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "ind_to_fool", ".", "shape", ")", "==", "0", ":", "ind_to_fool", "=", "ind_to_fool", ".", "unsqueeze", "(", "0", ")", "\n", "if", "ind_to_fool", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                        ", "x_to_fool", ",", "y_to_fool", "=", "x", "[", "ind_to_fool", "]", ".", "clone", "(", ")", ",", "y", "[", "ind_to_fool", "]", ".", "clone", "(", ")", "\n", "best_curr", ",", "acc_curr", ",", "loss_curr", ",", "adv_curr", "=", "self", ".", "attack_single_run", "(", "x_to_fool", ",", "y_to_fool", ")", "\n", "ind_curr", "=", "(", "acc_curr", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "#", "\n", "acc", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "0", "\n", "adv", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "adv_curr", "[", "ind_curr", "]", ".", "clone", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                            ", "print", "(", "'restart {} - robust accuracy: {:.2%} - cum. time: {:.1f} s'", ".", "format", "(", "\n", "counter", ",", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "", "", "", "return", "acc", ",", "adv", "\n", "\n", "", "else", ":", "\n", "            ", "adv_best", "=", "x", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "loss_best", "=", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", "]", ")", ".", "to", "(", "self", ".", "device", ")", "*", "(", "-", "float", "(", "'inf'", ")", ")", "\n", "for", "counter", "in", "range", "(", "self", ".", "n_restarts", ")", ":", "\n", "                ", "best_curr", ",", "_", ",", "loss_curr", ",", "_", "=", "self", ".", "attack_single_run", "(", "x", ",", "y", ")", "\n", "ind_curr", "=", "(", "loss_curr", ">", "loss_best", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "adv_best", "[", "ind_curr", "]", "=", "best_curr", "[", "ind_curr", "]", "+", "0.", "\n", "loss_best", "[", "ind_curr", "]", "=", "loss_curr", "[", "ind_curr", "]", "+", "0.", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "                    ", "print", "(", "'restart {} - loss: {:.5f}'", ".", "format", "(", "counter", ",", "loss_best", ".", "sum", "(", ")", ")", ")", "\n", "\n", "", "", "return", "loss_best", ",", "adv_best", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.__init__": [[234, 249], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "n_iter", "=", "100", ",", "norm", "=", "'Linf'", ",", "n_restarts", "=", "1", ",", "eps", "=", "None", ",", "\n", "seed", "=", "0", ",", "eot_iter", "=", "1", ",", "rho", "=", ".75", ",", "verbose", "=", "False", ",", "device", "=", "'cuda'", ",", "\n", "n_target_classes", "=", "9", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "n_restarts", "=", "n_restarts", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "eot_iter", "=", "eot_iter", "\n", "self", ".", "thr_decr", "=", "rho", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "target_class", "=", "None", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "n_target_classes", "=", "n_target_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_oscillation": [[250, 256], ["numpy.zeros", "range", "numpy.ones"], "methods", ["None"], ["", "def", "check_oscillation", "(", "self", ",", "x", ",", "j", ",", "k", ",", "y5", ",", "k3", "=", "0.5", ")", ":", "\n", "        ", "t", "=", "np", ".", "zeros", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "for", "counter5", "in", "range", "(", "k", ")", ":", "\n", "          ", "t", "+=", "x", "[", "j", "-", "counter5", "]", ">", "x", "[", "j", "-", "counter5", "-", "1", "]", "\n", "\n", "", "return", "t", "<=", "k", "*", "k3", "*", "np", ".", "ones", "(", "t", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_shape": [[257, 259], ["numpy.expand_dims", "len"], "methods", ["None"], ["", "def", "check_shape", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "if", "len", "(", "x", ".", "shape", ")", ">", "0", "else", "np", ".", "expand_dims", "(", "x", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.dlr_loss_targeted": [[260, 264], ["x.sort", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "dlr_loss_targeted", "(", "self", ",", "x", ",", "y", ",", "y_target", ")", ":", "\n", "        ", "x_sorted", ",", "ind_sorted", "=", "x", ".", "sort", "(", "dim", "=", "1", ")", "\n", "\n", "return", "-", "(", "x", "[", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "y", "]", "-", "x", "[", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "y_target", "]", ")", "/", "(", "x_sorted", "[", ":", ",", "-", "1", "]", "-", ".5", "*", "x_sorted", "[", ":", ",", "-", "3", "]", "-", ".5", "*", "x_sorted", "[", ":", ",", "-", "4", "]", "+", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.attack_single_run": [[265, 393], ["x_adv.detach.detach.clamp", "x_adv.detach.detach.clone", "x_adv.detach.detach.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "autopgd_pt.APGDAttack_targeted.model", "x_adv.detach.detach.requires_grad_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "float", "torch.zeros_like.clone", "torch.zeros_like.clone", "torch.zeros_like.clone", "autopgd_pt.APGDAttack_targeted.detach().clone", "x_adv.detach.detach.clone", "numpy.arange", "autopgd_pt.APGDAttack_targeted.detach().clone.clone", "range", "x_in.clone", "x_in.clone().unsqueeze", "y_in.clone", "y_in.clone().unsqueeze", "max", "max", "max", "print", "[].detach", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "torch.Tensor().to().detach().reshape", "numpy.zeros", "numpy.zeros", "x_adv.detach.detach.requires_grad_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "len", "len", "int", "int", "int", "x.detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "torch.randn().to().detach", "autopgd_pt.APGDAttack_targeted.sort", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "autopgd_pt.APGDAttack_targeted.model", "autopgd_pt.APGDAttack_targeted.dlr_loss_targeted", "autopgd_pt.APGDAttack_targeted.sum", "autopgd_pt.APGDAttack_targeted.detach().max", "autopgd_pt.APGDAttack_targeted.detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "x_adv.detach.detach.detach", "x_adv.detach.detach.clone", "[].detach", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "autopgd_pt.APGDAttack_targeted.detach().clone", "x_adv[].clone", "grad[].clone", "x_in.clone", "y_in.clone", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "torch.rand().to().detach", "[].reshape", "x.detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.Tensor().to().detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "autopgd_pt.APGDAttack_targeted.model", "autopgd_pt.APGDAttack_targeted.dlr_loss_targeted", "autopgd_pt.APGDAttack_targeted.sum", "autopgd_pt.APGDAttack_targeted.detach().max", "autopgd_pt.APGDAttack_targeted.detach().clone.cpu", "autopgd_pt.APGDAttack_targeted.check_oscillation", "numpy.copy", "autopgd_pt.APGDAttack_targeted.detach().clone.clone", "numpy.maximum", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "autopgd_pt.APGDAttack_targeted.detach", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "autopgd_pt.APGDAttack_targeted.detach().clone.sum", "autopgd_pt.APGDAttack_targeted.detach", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "torch.zeros.detach().cpu().numpy", "autopgd_pt.APGDAttack_targeted.detach().clone.detach().cpu().numpy", "numpy.sum", "numpy.where.astype().sum", "numpy.where", "x_best[].clone", "grad_best[].clone", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "autopgd_pt.APGDAttack_targeted.detach", "loss_indiv.detach().clone.clone.cpu().numpy", "autopgd_pt.APGDAttack_targeted.detach().clone.cpu().numpy", "torch.randn().to().detach.reshape().abs().max", "torch.randn().to().detach.reshape().abs().max", "torch.randn().to().detach.reshape().abs().max", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "torch.zeros.detach().cpu", "autopgd_pt.APGDAttack_targeted.detach().clone.detach().cpu", "numpy.where.astype", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "loss_indiv.detach().clone.clone.cpu", "autopgd_pt.APGDAttack_targeted.detach().clone.cpu", "torch.randn().to().detach.reshape().abs", "torch.randn().to().detach.reshape().abs", "torch.randn().to().detach.reshape().abs", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros.detach", "torch.zeros.detach", "torch.zeros.detach", "autopgd_pt.APGDAttack_targeted.detach().clone.detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.randn().to().detach.reshape", "torch.randn().to().detach.reshape", "torch.randn().to().detach.reshape", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.dlr_loss_targeted", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.dlr_loss_targeted", "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.check_oscillation"], ["", "def", "attack_single_run", "(", "self", ",", "x_in", ",", "y_in", ")", ":", "\n", "        ", "x", "=", "x_in", ".", "clone", "(", ")", "if", "len", "(", "x_in", ".", "shape", ")", "==", "4", "else", "x_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "y", "=", "y_in", ".", "clone", "(", ")", "if", "len", "(", "y_in", ".", "shape", ")", "==", "1", "else", "y_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "self", ".", "n_iter_2", ",", "self", ".", "n_iter_min", ",", "self", ".", "size_decr", "=", "max", "(", "int", "(", "0.22", "*", "self", ".", "n_iter", ")", ",", "1", ")", ",", "max", "(", "int", "(", "0.06", "*", "self", ".", "n_iter", ")", ",", "1", ")", ",", "max", "(", "int", "(", "0.03", "*", "self", ".", "n_iter", ")", ",", "1", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'parameters: '", ",", "self", ".", "n_iter", ",", "self", ".", "n_iter_2", ",", "self", ".", "n_iter_min", ",", "self", ".", "size_decr", ")", "\n", "\n", "", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "            ", "t", "=", "2", "*", "torch", ".", "rand", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "-", "1", "\n", "x_adv", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "t", "/", "(", "t", ".", "reshape", "(", "[", "t", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", ".", "abs", "(", ")", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "reshape", "(", "[", "-", "1", ",", "1", ",", "1", ",", "1", "]", ")", ")", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "            ", "t", "=", "torch", ".", "randn", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "\n", "x_adv", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "t", "/", "(", "(", "t", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "\n", "", "x_adv", "=", "x_adv", ".", "clamp", "(", "0.", ",", "1.", ")", "\n", "x_best", "=", "x_adv", ".", "clone", "(", ")", "\n", "x_best_adv", "=", "x_adv", ".", "clone", "(", ")", "\n", "loss_steps", "=", "torch", ".", "zeros", "(", "[", "self", ".", "n_iter", ",", "x", ".", "shape", "[", "0", "]", "]", ")", "\n", "loss_best_steps", "=", "torch", ".", "zeros", "(", "[", "self", ".", "n_iter", "+", "1", ",", "x", ".", "shape", "[", "0", "]", "]", ")", "\n", "acc_steps", "=", "torch", ".", "zeros_like", "(", "loss_best_steps", ")", "\n", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "y_target", "=", "output", ".", "sort", "(", "dim", "=", "1", ")", "[", "1", "]", "[", ":", ",", "-", "self", ".", "target_class", "]", "\n", "\n", "x_adv", ".", "requires_grad_", "(", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "eot_iter", ")", ":", "\n", "            ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "logits", "=", "self", ".", "model", "(", "x_adv", ")", "# 1 forward pass (eot_iter = 1)", "\n", "loss_indiv", "=", "self", ".", "dlr_loss_targeted", "(", "logits", ",", "y", ",", "y_target", ")", "\n", "loss", "=", "loss_indiv", ".", "sum", "(", ")", "\n", "\n", "", "grad", "+=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "[", "x_adv", "]", ")", "[", "0", "]", ".", "detach", "(", ")", "# 1 backward pass (eot_iter = 1)", "\n", "\n", "", "grad", "/=", "float", "(", "self", ".", "eot_iter", ")", "\n", "grad_best", "=", "grad", ".", "clone", "(", ")", "\n", "\n", "acc", "=", "logits", ".", "detach", "(", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "acc_steps", "[", "0", "]", "=", "acc", "+", "0", "\n", "loss_best", "=", "loss_indiv", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "step_size", "=", "self", ".", "eps", "*", "torch", ".", "ones", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", "*", "torch", ".", "Tensor", "(", "[", "2.0", "]", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", ".", "reshape", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "x_adv_old", "=", "x_adv", ".", "clone", "(", ")", "\n", "counter", "=", "0", "\n", "k", "=", "self", ".", "n_iter_2", "+", "0", "\n", "u", "=", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", "\n", "counter3", "=", "0", "\n", "\n", "loss_best_last_check", "=", "loss_best", ".", "clone", "(", ")", "\n", "reduced_last_check", "=", "np", ".", "zeros", "(", "loss_best", ".", "shape", ")", "==", "np", ".", "zeros", "(", "loss_best", ".", "shape", ")", "\n", "n_reduced", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "### gradient step", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "x_adv", "=", "x_adv", ".", "detach", "(", ")", "\n", "grad2", "=", "x_adv", "-", "x_adv_old", "\n", "x_adv_old", "=", "x_adv", ".", "clone", "(", ")", "\n", "\n", "a", "=", "0.75", "if", "i", ">", "0", "else", "1.0", "\n", "\n", "if", "self", ".", "norm", "==", "'Linf'", ":", "\n", "                    ", "x_adv_1", "=", "x_adv", "+", "step_size", "*", "torch", ".", "sign", "(", "grad", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv_1", ",", "x", "-", "self", ".", "eps", ")", ",", "x", "+", "self", ".", "eps", ")", ",", "0.0", ",", "1.0", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "torch", ".", "min", "(", "torch", ".", "max", "(", "x_adv", "+", "(", "x_adv_1", "-", "x_adv", ")", "*", "a", "+", "grad2", "*", "(", "1", "-", "a", ")", ",", "x", "-", "self", ".", "eps", ")", ",", "x", "+", "self", ".", "eps", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "elif", "self", ".", "norm", "==", "'L2'", ":", "\n", "                    ", "x_adv_1", "=", "x_adv", "+", "step_size", "[", "0", "]", "*", "grad", "/", "(", "(", "grad", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "x", "+", "(", "x_adv_1", "-", "x", ")", "/", "(", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "*", "torch", ".", "min", "(", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", ",", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", ")", ",", "0.0", ",", "1.0", ")", "\n", "x_adv_1", "=", "x_adv", "+", "(", "x_adv_1", "-", "x_adv", ")", "*", "a", "+", "grad2", "*", "(", "1", "-", "a", ")", "\n", "x_adv_1", "=", "torch", ".", "clamp", "(", "x", "+", "(", "x_adv_1", "-", "x", ")", "/", "(", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", "*", "torch", ".", "min", "(", "\n", "self", ".", "eps", "*", "torch", ".", "ones", "(", "x", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", ".", "detach", "(", ")", ",", "(", "(", "x_adv_1", "-", "x", ")", "**", "2", ")", ".", "sum", "(", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "1e-12", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "", "x_adv", "=", "x_adv_1", "+", "0.", "\n", "\n", "### get gradient", "\n", "", "x_adv", ".", "requires_grad_", "(", ")", "\n", "grad", "=", "torch", ".", "zeros_like", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "eot_iter", ")", ":", "\n", "                ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                    ", "logits", "=", "self", ".", "model", "(", "x_adv", ")", "# 1 forward pass (eot_iter = 1)", "\n", "loss_indiv", "=", "self", ".", "dlr_loss_targeted", "(", "logits", ",", "y", ",", "y_target", ")", "\n", "loss", "=", "loss_indiv", ".", "sum", "(", ")", "\n", "\n", "", "grad", "+=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "[", "x_adv", "]", ")", "[", "0", "]", ".", "detach", "(", ")", "# 1 backward pass (eot_iter = 1)", "\n", "\n", "", "grad", "/=", "float", "(", "self", ".", "eot_iter", ")", "\n", "\n", "pred", "=", "logits", ".", "detach", "(", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "acc", "=", "torch", ".", "min", "(", "acc", ",", "pred", ")", "\n", "acc_steps", "[", "i", "+", "1", "]", "=", "acc", "+", "0", "\n", "x_best_adv", "[", "(", "pred", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "=", "x_adv", "[", "(", "pred", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "+", "0.", "\n", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "'iteration: {} - Best loss: {:.6f}'", ".", "format", "(", "i", ",", "loss_best", ".", "sum", "(", ")", ")", ")", "\n", "\n", "### check step size", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "              ", "y1", "=", "loss_indiv", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "loss_steps", "[", "i", "]", "=", "y1", ".", "cpu", "(", ")", "+", "0", "\n", "ind", "=", "(", "y1", ">", "loss_best", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "x_best", "[", "ind", "]", "=", "x_adv", "[", "ind", "]", ".", "clone", "(", ")", "\n", "grad_best", "[", "ind", "]", "=", "grad", "[", "ind", "]", ".", "clone", "(", ")", "\n", "loss_best", "[", "ind", "]", "=", "y1", "[", "ind", "]", "+", "0", "\n", "loss_best_steps", "[", "i", "+", "1", "]", "=", "loss_best", "+", "0", "\n", "\n", "counter3", "+=", "1", "\n", "\n", "if", "counter3", "==", "k", ":", "\n", "                  ", "fl_oscillation", "=", "self", ".", "check_oscillation", "(", "loss_steps", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "i", ",", "k", ",", "loss_best", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "k3", "=", "self", ".", "thr_decr", ")", "\n", "fl_reduce_no_impr", "=", "(", "~", "reduced_last_check", ")", "*", "(", "loss_best_last_check", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ">=", "loss_best", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "fl_oscillation", "=", "~", "(", "~", "fl_oscillation", "*", "~", "fl_reduce_no_impr", ")", "\n", "reduced_last_check", "=", "np", ".", "copy", "(", "fl_oscillation", ")", "\n", "loss_best_last_check", "=", "loss_best", ".", "clone", "(", ")", "\n", "\n", "if", "np", ".", "sum", "(", "fl_oscillation", ")", ">", "0", ":", "\n", "                      ", "step_size", "[", "u", "[", "fl_oscillation", "]", "]", "/=", "2.0", "\n", "n_reduced", "=", "fl_oscillation", ".", "astype", "(", "float", ")", ".", "sum", "(", ")", "\n", "\n", "fl_oscillation", "=", "np", ".", "where", "(", "fl_oscillation", ")", "\n", "\n", "x_adv", "[", "fl_oscillation", "]", "=", "x_best", "[", "fl_oscillation", "]", ".", "clone", "(", ")", "\n", "grad", "[", "fl_oscillation", "]", "=", "grad_best", "[", "fl_oscillation", "]", ".", "clone", "(", ")", "\n", "\n", "", "counter3", "=", "0", "\n", "k", "=", "np", ".", "maximum", "(", "k", "-", "self", ".", "size_decr", ",", "self", ".", "n_iter_min", ")", "\n", "\n", "", "", "", "return", "x_best", ",", "acc", ",", "loss_best", ",", "x_best_adv", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.perturb": [[394, 431], ["x.clone", "time.time", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "torch.cuda.random.manual_seed", "x_in.clone", "x_in.clone().unsqueeze", "y_in.clone", "y_in.clone().unsqueeze", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "print", "print", "ValueError", "range", "len", "len", "autopgd_pt.APGDAttack_targeted.model().max", "range", "x_in.clone", "y_in.clone", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "acc.float().mean", "acc.nonzero().squeeze", "autopgd_pt.APGDAttack_targeted.model", "len", "ind_to_fool.unsqueeze.unsqueeze.unsqueeze", "ind_to_fool.unsqueeze.unsqueeze.numel", "autopgd_pt.APGDAttack_targeted.attack_single_run", "adv_curr[].clone", "acc.float", "acc.nonzero", "x[].clone", "y[].clone", "print", "acc.float().mean", "time.time", "acc.float"], "methods", ["home.repos.pwc.inspect_result.youweiliang_norm_robustness.auto_attack.autopgd_pt.APGDAttack_targeted.attack_single_run"], ["", "def", "perturb", "(", "self", ",", "x_in", ",", "y_in", ",", "best_loss", "=", "False", ",", "cheap", "=", "True", ")", ":", "\n", "        ", "assert", "self", ".", "norm", "in", "[", "'Linf'", ",", "'L2'", "]", "\n", "x", "=", "x_in", ".", "clone", "(", ")", "if", "len", "(", "x_in", ".", "shape", ")", "==", "4", "else", "x_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "y", "=", "y_in", ".", "clone", "(", ")", "if", "len", "(", "y_in", ".", "shape", ")", "==", "1", "else", "y_in", ".", "clone", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "adv", "=", "x", ".", "clone", "(", ")", "\n", "acc", "=", "self", ".", "model", "(", "x", ")", ".", "max", "(", "1", ")", "[", "1", "]", "==", "y", "\n", "loss", "=", "-", "1e10", "*", "torch", ".", "ones_like", "(", "acc", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'-------------------------- running {}-attack with epsilon {:.4f} --------------------------'", ".", "format", "(", "self", ".", "norm", ",", "self", ".", "eps", ")", ")", "\n", "print", "(", "'initial accuracy: {:.2%}'", ".", "format", "(", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ")", ")", "\n", "", "startt", "=", "time", ".", "time", "(", ")", "\n", "\n", "torch", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "random", ".", "manual_seed", "(", "self", ".", "seed", ")", "\n", "\n", "if", "not", "cheap", ":", "\n", "            ", "raise", "ValueError", "(", "'not implemented yet'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "for", "target_class", "in", "range", "(", "2", ",", "self", ".", "n_target_classes", "+", "2", ")", ":", "\n", "                ", "self", ".", "target_class", "=", "target_class", "\n", "for", "counter", "in", "range", "(", "self", ".", "n_restarts", ")", ":", "\n", "                    ", "ind_to_fool", "=", "acc", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "ind_to_fool", ".", "shape", ")", "==", "0", ":", "ind_to_fool", "=", "ind_to_fool", ".", "unsqueeze", "(", "0", ")", "\n", "if", "ind_to_fool", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                        ", "x_to_fool", ",", "y_to_fool", "=", "x", "[", "ind_to_fool", "]", ".", "clone", "(", ")", ",", "y", "[", "ind_to_fool", "]", ".", "clone", "(", ")", "\n", "best_curr", ",", "acc_curr", ",", "loss_curr", ",", "adv_curr", "=", "self", ".", "attack_single_run", "(", "x_to_fool", ",", "y_to_fool", ")", "\n", "ind_curr", "=", "(", "acc_curr", "==", "0", ")", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "#", "\n", "acc", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "0", "\n", "adv", "[", "ind_to_fool", "[", "ind_curr", "]", "]", "=", "adv_curr", "[", "ind_curr", "]", ".", "clone", "(", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                            ", "print", "(", "'restart {} - target_class {} - robust accuracy: {:.2%} at eps = {:.5f} - cum. time: {:.1f} s'", ".", "format", "(", "\n", "counter", ",", "self", ".", "target_class", ",", "acc", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "self", ".", "eps", ",", "time", ".", "time", "(", ")", "-", "startt", ")", ")", "\n", "\n", "", "", "", "", "", "return", "acc", ",", "adv", "\n", "\n"]], "home.repos.pwc.inspect_result.youweiliang_norm_robustness.timing.max_eigenvalue.generic_power_method": [[5, 72], ["affine_fun.to", "torch.zeros().to", "affine_fun.eval", "affine_fun", "torch.randn().to", "torch.randn().to", "torch.randn().to.div_", "linear_fun", "torch.norm", "torch.norm", "loss.backward", "torch.randn().to.copy_", "torch.randn().to.copy_", "torch.randn().to.div_", "torch.zeros", "affine_fun", "torch.randn", "torch.randn", "torch.norm", "torch.norm", "linear_fun", "torch.norm"], "function", ["None"], ["def", "generic_power_method", "(", "affine_fun", ",", "input_size", ",", "eps", "=", "1e-8", ",", "\n", "max_iter", "=", "500", ",", "device", "=", "'cuda'", ")", ":", "\n", "    ", "\"\"\" Return the highest singular value of the linear part of\n    `affine_fun` and it's associated left / right singular vectors.\n\n    INPUT:\n        * `affine_fun`: an affine function\n        * `input_size`: size of the input\n        * `eps`: stop condition for power iteration\n        * `max_iter`: maximum number of iterations\n        * `use_cuda`: set to True if CUDA is present\n\n    OUTPUT:\n        * `eigenvalue`: maximum singular value of `affine_fun`\n        * `v`: the associated left singular vector\n        * `u`: the associated right singular vector\n\n    NOTE:\n        This algorithm is not deterministic, depending of the random\n        initialisation, the returned eigenvectors are defined up to the sign.\n\n        If affine_fun is a PyTorch model, beware of setting to `False` all\n        parameters.requires_grad.\n\n    TEST::\n        >>> conv = nn.Conv2d(3, 8, 5)\n        >>> for p in conv.parameters(): p.requires_grad = False\n        >>> s, u, v = generic_power_method(conv, [1, 3, 28, 28])\n        >>> bias = conv(torch.zeros([1, 3, 28, 28]))\n        >>> linear_fun = lambda x: conv(x) - bias\n        >>> torch.norm(linear_fun(v) - s * u) # should be very small\n\n    TODO: more tests with CUDA\n    \"\"\"", "\n", "affine_fun", ".", "to", "(", "device", ")", "\n", "zeros", "=", "torch", ".", "zeros", "(", "input_size", ")", ".", "to", "(", "device", ")", "\n", "affine_fun", ".", "eval", "(", ")", "\n", "affine_fun", ".", "weight", ".", "requires_grad", "=", "False", "\n", "affine_fun", ".", "bias", ".", "requires_grad", "=", "False", "\n", "bias", "=", "affine_fun", "(", "zeros", ")", "\n", "linear_fun", "=", "lambda", "x", ":", "affine_fun", "(", "x", ")", "-", "bias", "\n", "\n", "# Initialise with random values", "\n", "v", "=", "torch", ".", "randn", "(", "input_size", ")", ".", "to", "(", "device", ")", "\n", "previous", "=", "torch", ".", "randn", "(", "input_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "\n", "v", ".", "div_", "(", "torch", ".", "norm", "(", "v", ")", ")", "\n", "\n", "stop_criterion", "=", "False", "\n", "it", "=", "0", "\n", "while", "not", "stop_criterion", ":", "\n", "        ", "v", ".", "requires_grad", "=", "True", "\n", "loss", "=", "torch", ".", "norm", "(", "linear_fun", "(", "v", ")", ")", "**", "2", "\n", "loss", ".", "backward", "(", ")", "\n", "v", ".", "requires_grad", "=", "False", "\n", "previous", ".", "copy_", "(", "v", ".", "data", ")", "\n", "v", ".", "copy_", "(", "v", ".", "grad", ".", "data", ")", "\n", "v", ".", "div_", "(", "torch", ".", "norm", "(", "v", ")", ")", "\n", "\n", "stop_criterion", "=", "(", "torch", ".", "norm", "(", "v", "-", "previous", ")", "<", "eps", ")", "or", "(", "it", ">", "max_iter", ")", "\n", "it", "+=", "1", "\n", "\n", "", "u", "=", "linear_fun", "(", "v", ")", "# unormalized left singular vector", "\n", "eigenvalue", "=", "torch", ".", "norm", "(", "u", ")", "\n", "# u.div_(eigenvalue)", "\n", "return", "eigenvalue", "# , u, v", "\n", "\n"]]}