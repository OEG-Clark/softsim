{"home.repos.pwc.inspect_result.enosair_federated-fdp.code.nets.MnistCNN.__init__": [[9, 17], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.enosair_federated-fdp.code.sampler.UniformSampler.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MnistCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "3", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "1", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout2d", "(", "0.25", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout2d", "(", "0.5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "9216", ",", "128", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.nets.MnistCNN.forward": [[18, 32], ["nets.MnistCNN.conv1", "torch.relu", "torch.relu", "torch.relu", "nets.MnistCNN.conv2", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "nets.MnistCNN.dropout1", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "nets.MnistCNN.fc1", "torch.relu", "torch.relu", "torch.relu", "nets.MnistCNN.dropout2", "nets.MnistCNN.fc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "nets.MnistCNN.reshape", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ".", "reshape", "(", "len", "(", "x", ")", ",", "1", ",", "28", ",", "28", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ")", "\n", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "output", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.nets.CifarCNN.__init__": [[35, 43], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.enosair_federated-fdp.code.sampler.UniformSampler.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CifarCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "32", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "64", "*", "4", "*", "4", ",", "64", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "64", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.nets.CifarCNN.forward": [[44, 52], ["nets.CifarCNN.pool", "nets.CifarCNN.pool", "nets.CifarCNN.conv3", "nets.CifarCNN.view", "torch.relu", "torch.relu", "torch.relu", "nets.CifarCNN.fc2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "nets.CifarCNN.fc1", "nets.CifarCNN.conv1", "nets.CifarCNN.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "64", "*", "4", "*", "4", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.nets.prepare_net": [[54, 61], ["None"], "function", ["None"], ["", "", "def", "prepare_net", "(", "net", ")", ":", "\n", "    ", "if", "net", "==", "\"MnistCNN\"", ":", "\n", "        ", "return", "MnistCNN", "\n", "", "elif", "net", "==", "\"CifarCNN\"", ":", "\n", "        ", "return", "CifarCNN", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.get_linear_schedule_with_warmup": [[34, 63], ["functools.partial", "max", "float", "float", "float", "float", "max", "max"], "function", ["None"], ["def", "get_linear_schedule_with_warmup", "(", "\n", "num_warmup_steps", ",", "num_training_steps", ",", "last_epoch", "=", "-", "1", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Create a schedule with a learning rate that decreases linearly from the initial lr set in the optimizer to 0,\n    after a warmup period during which it increases linearly from 0 to the initial lr set in the optimizer.\n\n    Args:\n        num_warmup_steps (:obj:`int`):\n            The number of steps for the warmup phase.\n        num_training_steps (:obj:`int`):\n            The total number of training steps.\n        last_epoch (:obj:`int`, `optional`, defaults to -1):\n            The index of the last epoch when resuming training.\n\n    Return:\n        function handle to create `torch.optim.lr_scheduler.LambdaLR` with the appropriate schedule.\n    \"\"\"", "\n", "\n", "def", "lr_lambda", "(", "current_step", ":", "int", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "return", "max", "(", "\n", "0.0", ",", "\n", "float", "(", "num_training_steps", "-", "current_step", ")", "\n", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", ",", "\n", ")", "\n", "\n", "", "return", "partial", "(", "lr_scheduler", ".", "LambdaLR", ",", "lr_lambda", "=", "lr_lambda", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.test_one_model": [[65, 83], ["model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "len", "model", "loss_func().item", "model.argmax", "output.argmax.eq().sum().item", "data.to", "target.to", "loss_func", "output.argmax.eq().sum", "output.argmax.eq", "target.view_as"], "function", ["None"], ["", "def", "test_one_model", "(", "model", ",", "loss_func", ",", "test_loader", ",", "device", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0.0", "\n", "correct", "=", "0.0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "cnt", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "# mean per batch", "\n", "test_loss", "+=", "loss_func", "(", "output", ",", "target", ")", ".", "item", "(", ")", "\n", "# get the index of the max log-probability", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "accuracy", "=", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "test_loss", "/=", "cnt", "+", "1", "\n", "return", "test_loss", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.local_test": [[85, 108], ["len", "range", "numpy.zeros", "numpy.zeros", "numpy.mean", "numpy.mean", "isinstance", "main.test_one_model"], "function", ["home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.test_one_model"], ["", "def", "local_test", "(", "input_model", ",", "loss_func", ",", "local_test_loaders", ",", "device", ",", "selected", ")", ":", "\n", "\n", "    ", "num_clients", "=", "len", "(", "local_test_loaders", ")", "\n", "test_loss", ",", "test_acc", "=", "np", ".", "zeros", "(", "num_clients", ")", ",", "np", ".", "zeros", "(", "num_clients", ")", "\n", "\n", "for", "ii", "in", "range", "(", "num_clients", ")", ":", "\n", "        ", "if", "ii", "in", "selected", ":", "\n", "            ", "if", "isinstance", "(", "input_model", ",", "list", ")", ":", "\n", "                ", "model", "=", "input_model", "[", "ii", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "input_model", "\n", "", "test_loss", "[", "ii", "]", ",", "test_acc", "[", "ii", "]", "=", "test_one_model", "(", "\n", "model", ",", "\n", "loss_func", "=", "loss_func", ",", "\n", "test_loader", "=", "local_test_loaders", "[", "ii", "]", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "", "", "return", "(", "\n", "test_loss", "[", "selected", "]", ",", "\n", "test_acc", "[", "selected", "]", ",", "\n", "np", ".", "mean", "(", "test_loss", "[", "selected", "]", ")", ",", "\n", "np", ".", "mean", "(", "test_acc", "[", "selected", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.local_train": [[111, 137], ["model.train", "enumerate", "optimizer.zero_grad", "model", "loss_func", "loss_func.backward", "loss_func.item", "model.argmax", "output.argmax.eq().sum().item", "optimizer.step", "len", "data.to", "target.to", "output.argmax.eq().sum", "output.argmax.eq", "target.view_as"], "function", ["home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.train"], ["", "def", "local_train", "(", "model", ",", "loss_func", ",", "train_loader", ",", "optimizer", ",", "max_grad_norm", ",", "device", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "running_loss", "=", "0.0", "\n", "correct", "=", "0.0", "\n", "for", "cnt", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# Training", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "loss_func", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "running_loss", "/=", "cnt", "+", "1", "\n", "# uniform sampling: total data points might not be the same as dataset size", "\n", "train_acc", "=", "correct", "/", "(", "cnt", "+", "1", ")", "/", "len", "(", "target", ")", "\n", "\n", "return", "running_loss", ",", "train_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.init_fl_training": [[139, 193], ["opacus.utils.module_modification.convert_batchnorm_modules().to", "range", "opacus.utils.module_modification.convert_batchnorm_modules().to", "module_modification.convert_batchnorm_modules().to.load_state_dict", "local_models.append", "OptimizerAlg", "local_optimizers.append", "opacus.utils.module_modification.convert_batchnorm_modules", "module_modification.convert_batchnorm_modules().to.state_dict", "local_models[].parameters", "local_schedulers.append", "local_schedulers.append", "main.get_linear_schedule_with_warmup", "Net", "opacus.utils.module_modification.convert_batchnorm_modules", "get_linear_schedule_with_warmup.", "get_linear_schedule_with_warmup.", "Net"], "function", ["home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.get_linear_schedule_with_warmup"], ["", "def", "init_fl_training", "(", "\n", "num_clients", ",", "\n", "Net", ",", "\n", "OptimizerAlg", ",", "\n", "optimizer_kwargs", ",", "\n", "SchedulerAlg", ",", "\n", "scheduler_kwargs", ",", "\n", "device", ",", "\n", "num_epoch", ",", "\n", ")", ":", "\n", "\n", "    ", "if", "OptimizerAlg", "==", "\"sgd\"", ":", "\n", "        ", "OptimizerAlg", "=", "optim", ".", "SGD", "\n", "", "elif", "OptimizerAlg", "==", "\"adadelta\"", ":", "\n", "        ", "OptimizerAlg", "=", "optim", ".", "Adadelta", "\n", "", "elif", "OptimizerAlg", "==", "\"adam\"", ":", "\n", "        ", "OptimizerAlg", "=", "optim", ".", "Adam", "\n", "", "elif", "OptimizerAlg", "==", "\"rmsprop\"", ":", "\n", "        ", "OptimizerAlg", "=", "optim", ".", "RMSprop", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "SchedulerAlg", "==", "\"step\"", ":", "\n", "        ", "SchedulerAlg", "=", "lr_scheduler", ".", "StepLR", "\n", "", "elif", "SchedulerAlg", "==", "\"multistep\"", ":", "\n", "        ", "SchedulerAlg", "=", "lr_scheduler", ".", "MultiStepLR", "\n", "", "elif", "SchedulerAlg", "==", "\"lambda\"", ":", "\n", "        ", "SchedulerAlg", "=", "get_linear_schedule_with_warmup", "(", "\n", "num_warmup_steps", "=", "30", ",", "num_training_steps", "=", "num_epoch", ",", "last_epoch", "=", "-", "1", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# print(", "\n", "#     \"Optimizer: {} Scheduler: {}\".format(", "\n", "#         OptimizerAlg.__name__, SchedulerAlg.__name__", "\n", "#     )", "\n", "# )", "\n", "\n", "", "global_model", "=", "module_modification", ".", "convert_batchnorm_modules", "(", "Net", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "local_models", ",", "local_optimizers", ",", "local_schedulers", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "ii", "in", "range", "(", "num_clients", ")", ":", "\n", "        ", "model", "=", "module_modification", ".", "convert_batchnorm_modules", "(", "Net", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "load_state_dict", "(", "global_model", ".", "state_dict", "(", ")", ")", "\n", "local_models", ".", "append", "(", "model", ")", "\n", "\n", "optimizer", "=", "OptimizerAlg", "(", "local_models", "[", "-", "1", "]", ".", "parameters", "(", ")", ",", "**", "optimizer_kwargs", ")", "\n", "local_optimizers", ".", "append", "(", "optimizer", ")", "\n", "if", "scheduler_kwargs", ":", "\n", "            ", "local_schedulers", ".", "append", "(", "SchedulerAlg", "(", "optimizer", ",", "**", "scheduler_kwargs", ")", ")", "\n", "", "else", ":", "\n", "            ", "local_schedulers", ".", "append", "(", "SchedulerAlg", "(", "optimizer", ")", ")", "\n", "\n", "", "", "return", "(", "global_model", ",", "local_models", ",", "local_optimizers", ",", "local_schedulers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.train": [[195, 326], ["print", "print", "numpy.array", "numpy.array", "print", "print", "main.init_fl_training", "int", "range", "torch.CrossEntropyLoss", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "print", "range", "print", "sync.run_ma", "main.local_test", "writer.add_scalars", "print", "torch.NLLLoss", "len", "len", "opacus.PrivacyEngine", "opacus.PrivacyEngine.attach", "[].astype", "tqdm.trange", "numpy.mean", "numpy.mean", "writer.add_scalars", "writer.add_scalars", "print", "type", "numpy.arange", "len", "main.local_train", "local_schedulers[].step", "main.test_one_model", "list", "numpy.where", "range", "range", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.init_fl_training", "home.repos.pwc.inspect_result.enosair_federated-fdp.code.sync.run_ma", "home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.local_test", "home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.local_train", "home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.test_one_model"], ["", "def", "train", "(", "\n", "Net", ",", "\n", "local_train_loaders", ",", "\n", "local_test_loaders", ",", "\n", "loss_func", ",", "\n", "num_clients", ",", "\n", "num_epoch", ",", "\n", "OptimizerAlg", ",", "\n", "optimizer_kwargs", ",", "\n", "SchedulerAlg", ",", "\n", "scheduler_kwargs", ",", "\n", "sync_gap", "=", "1", ",", "\n", "batch_size", "=", "16", ",", "\n", "max_grad_norm", "=", "1.0", ",", "\n", "noise_sigma", "=", "1.0", ",", "\n", "sampling_rate", "=", "1.0", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", ")", ":", "\n", "    ", "if", "loss_func", "==", "\"CrossEntropy\"", ":", "\n", "        ", "loss_func", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "elif", "loss_func", "==", "\"NLL\"", ":", "\n", "        ", "loss_func", "=", "nn", ".", "NLLLoss", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "print", "(", "\"Using model {} with {}\"", ".", "format", "(", "Net", ".", "__name__", ",", "type", "(", "loss_func", ")", ".", "__name__", ")", ")", "\n", "print", "(", "\"Privacy: noise std {}, max grad norm {}\"", ".", "format", "(", "noise_sigma", ",", "max_grad_norm", ")", ")", "\n", "\n", "num_tr_samples", "=", "np", ".", "array", "(", "[", "len", "(", "item", ".", "dataset", ")", "for", "item", "in", "local_train_loaders", "]", ")", "\n", "num_te_samples", "=", "np", ".", "array", "(", "[", "len", "(", "item", ".", "dataset", ")", "for", "item", "in", "local_test_loaders", "]", ")", "\n", "print", "(", "\"Number of training samples: {}\"", ".", "format", "(", "num_tr_samples", ")", ")", "\n", "print", "(", "\"Number of test samples: {}\"", ".", "format", "(", "num_te_samples", ")", ")", "\n", "\n", "(", "global_model", ",", "local_models", ",", "local_optimizers", ",", "local_schedulers", ")", "=", "init_fl_training", "(", "\n", "num_clients", "=", "num_clients", ",", "\n", "Net", "=", "Net", ",", "\n", "OptimizerAlg", "=", "OptimizerAlg", ",", "\n", "optimizer_kwargs", "=", "optimizer_kwargs", ",", "\n", "SchedulerAlg", "=", "SchedulerAlg", ",", "\n", "scheduler_kwargs", "=", "scheduler_kwargs", ",", "\n", "device", "=", "device", ",", "\n", "num_epoch", "=", "num_epoch", ",", "\n", ")", "\n", "\n", "if", "noise_sigma", ">", "0", ":", "\n", "        ", "for", "ii", "in", "range", "(", "num_clients", ")", ":", "\n", "            ", "privacy_engine", "=", "PrivacyEngine", "(", "\n", "local_models", "[", "ii", "]", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sample_size", "=", "len", "(", "local_train_loaders", "[", "ii", "]", ".", "dataset", ")", ",", "\n", "# alpha is not important for us", "\n", "alphas", "=", "[", "1", "+", "x", "/", "10.0", "for", "x", "in", "range", "(", "1", ",", "100", ")", "]", "+", "list", "(", "range", "(", "12", ",", "64", ")", ")", ",", "\n", "noise_multiplier", "=", "noise_sigma", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ",", "\n", ")", "\n", "privacy_engine", ".", "attach", "(", "local_optimizers", "[", "ii", "]", ")", "\n", "\n", "", "", "sync_count", "=", "0", "\n", "\n", "train_loss", ",", "train_acc", ",", "test_loss", ",", "test_acc", "=", "(", "\n", "np", ".", "zeros", "(", "num_clients", ")", ",", "\n", "np", ".", "zeros", "(", "num_clients", ")", ",", "\n", "np", ".", "zeros", "(", "num_clients", ")", ",", "\n", "np", ".", "zeros", "(", "num_clients", ")", ",", "\n", ")", "\n", "\n", "num_rounds", "=", "int", "(", "num_epoch", "/", "sync_gap", ")", "\n", "epoch", "=", "0", "\n", "for", "rr", "in", "range", "(", "num_rounds", ")", ":", "\n", "### One Round Training ###", "\n", "        ", "while", "True", ":", "\n", "            ", "selected", "=", "np", ".", "where", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "num_clients", ")", "<=", "sampling_rate", ")", "[", "\n", "0", "\n", "]", ".", "astype", "(", "int", ")", "\n", "if", "selected", ".", "size", ":", "\n", "                ", "break", "\n", "\n", "", "", "print", "(", "\"Selected {}/{} clients to sync.\"", ".", "format", "(", "selected", ".", "size", ",", "num_clients", ")", ")", "\n", "for", "_", "in", "range", "(", "sync_gap", ")", ":", "\n", "### One Epoch Inside Sync Round ###", "\n", "            ", "epoch", "+=", "1", "\n", "for", "ii", "in", "trange", "(", "num_clients", ")", ":", "\n", "                ", "if", "ii", "in", "selected", ":", "\n", "                    ", "train_loss", "[", "ii", "]", ",", "train_acc", "[", "ii", "]", "=", "local_train", "(", "\n", "local_models", "[", "ii", "]", ",", "\n", "loss_func", "=", "loss_func", ",", "\n", "train_loader", "=", "local_train_loaders", "[", "ii", "]", ",", "\n", "optimizer", "=", "local_optimizers", "[", "ii", "]", ",", "\n", "max_grad_norm", "=", "max_grad_norm", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "local_schedulers", "[", "ii", "]", ".", "step", "(", ")", "\n", "\n", "test_loss", "[", "ii", "]", ",", "test_acc", "[", "ii", "]", "=", "test_one_model", "(", "\n", "local_models", "[", "ii", "]", ",", "\n", "loss_func", "=", "loss_func", ",", "\n", "test_loader", "=", "local_test_loaders", "[", "ii", "]", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "", "", "avg_train_acc", "=", "np", ".", "mean", "(", "train_acc", ")", "\n", "avg_test_acc", "=", "np", ".", "mean", "(", "test_acc", ")", "\n", "writer", ".", "add_scalars", "(", "\n", "\"Average Train Accuracy\"", ",", "{", "\"local\"", ":", "avg_train_acc", "}", ",", "epoch", "\n", ")", "\n", "writer", ".", "add_scalars", "(", "\"Average Test Accuracy\"", ",", "{", "\"local\"", ":", "avg_test_acc", "}", ",", "epoch", ")", "\n", "\n", "print", "(", "\n", "\"===> Epoch {} Local models: Avg Train Accuracy: {:.2f}%, Avg Test\"", "\n", "\" Accuracy: {:.2f}%\\n\"", ".", "format", "(", "\n", "epoch", ",", "100.0", "*", "avg_train_acc", ",", "100.0", "*", "avg_test_acc", "\n", ")", "\n", ")", "\n", "\n", "###  Synchronization ####", "\n", "", "sync_count", "+=", "1", "\n", "print", "(", "\"Syncing #{}... MA\"", ".", "format", "(", "sync_count", ")", ")", "\n", "run_ma", "(", "global_model", ",", "local_models", ",", "selected", "=", "selected", ",", "device", "=", "device", ",", "alpha", "=", "0.1", ")", "\n", "_", ",", "test_acc_global", ",", "_", ",", "avg_test_acc_global", "=", "local_test", "(", "\n", "global_model", ",", "\n", "loss_func", ",", "\n", "local_test_loaders", ",", "\n", "device", ",", "\n", "selected", "=", "np", ".", "arange", "(", "num_clients", ")", ",", "\n", ")", "\n", "writer", ".", "add_scalars", "(", "\n", "\"Average Test Accuracy\"", ",", "{", "\"global\"", ":", "avg_test_acc_global", "}", ",", "epoch", "\n", ")", "\n", "print", "(", "\n", "\"===> After Sync: Global Model Avg Acc {:.2f}% \\n\"", ".", "format", "(", "\n", "100.0", "*", "avg_test_acc_global", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.main": [[330, 392], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "datetime.datetime.now", "print", "torch.utils.tensorboard.SummaryWriter", "torch.device", "torch.device", "torch.device", "torch.device", "print", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "print", "data.prepare_data", "nets.prepare_net", "main.train", "open", "yaml.safe_load", "str", "parser.parse_args.config.split", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.enosair_federated-fdp.code.data.prepare_data", "home.repos.pwc.inspect_result.enosair_federated-fdp.code.nets.prepare_net", "home.repos.pwc.inspect_result.enosair_federated-fdp.code.main.train"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--config\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--cuda\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "now", "=", "datetime", ".", "now", "(", ")", "\n", "run_name", "=", "(", "\n", "str", "(", "now", ".", "month", ")", "\n", "+", "\"_\"", "\n", "+", "str", "(", "now", ".", "day", ")", "\n", "+", "\"_\"", "\n", "+", "str", "(", "now", ".", "hour", ")", "\n", "+", "\"_\"", "\n", "+", "str", "(", "now", ".", "minute", ")", "\n", "+", "\"_\"", "\n", "+", "args", ".", "config", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", "\n", ")", "\n", "print", "(", "run_name", ")", "\n", "\n", "global", "writer", "\n", "writer", "=", "SummaryWriter", "(", "\"./runs/\"", "+", "run_name", ")", "\n", "\n", "with", "open", "(", "args", ".", "config", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "args", ".", "cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "device", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "config", "[", "\"seed\"", "]", ")", "\n", "torch", ".", "manual_seed", "(", "config", "[", "\"seed\"", "]", ")", "\n", "\n", "print", "(", "\"Loading {} Data...\"", ".", "format", "(", "config", "[", "\"dataset\"", "]", ")", ")", "\n", "\n", "local_train_loaders", ",", "local_test_loaders", "=", "prepare_data", "(", "\n", "dataset", "=", "config", "[", "\"dataset\"", "]", ",", "\n", "num_clients", "=", "config", "[", "\"federated\"", "]", "[", "\"num_clients\"", "]", ",", "\n", "batch_size", "=", "config", "[", "\"train\"", "]", "[", "\"batch_size\"", "]", ",", "\n", "num_workers", "=", "config", "[", "\"train\"", "]", "[", "\"dataloader\"", "]", "[", "\"num_workers\"", "]", ",", "\n", ")", "\n", "\n", "num_clients", "=", "config", "[", "\"federated\"", "]", "[", "\"num_clients\"", "]", "\n", "\n", "Net", "=", "prepare_net", "(", "config", "[", "\"net\"", "]", ")", "\n", "\n", "train", "(", "\n", "Net", ",", "\n", "local_train_loaders", ",", "\n", "local_test_loaders", ",", "\n", "loss_func", "=", "config", "[", "\"train\"", "]", "[", "\"loss\"", "]", ",", "\n", "num_clients", "=", "num_clients", ",", "\n", "OptimizerAlg", "=", "config", "[", "\"train\"", "]", "[", "\"optimizer\"", "]", ",", "\n", "optimizer_kwargs", "=", "config", "[", "\"train\"", "]", "[", "\"optimizer_kwargs\"", "]", ",", "\n", "SchedulerAlg", "=", "config", "[", "\"scheduler\"", "]", "[", "\"type\"", "]", ",", "\n", "scheduler_kwargs", "=", "config", "[", "\"scheduler\"", "]", "[", "\"scheduler_kwargs\"", "]", ",", "\n", "num_epoch", "=", "config", "[", "\"train\"", "]", "[", "\"epoch\"", "]", ",", "\n", "sync_gap", "=", "config", "[", "\"federated\"", "]", "[", "\"sync_gap\"", "]", ",", "\n", "batch_size", "=", "config", "[", "\"train\"", "]", "[", "\"batch_size\"", "]", ",", "\n", "max_grad_norm", "=", "config", "[", "\"max_grad_norm\"", "]", ",", "\n", "noise_sigma", "=", "config", "[", "\"noise_sigma\"", "]", ",", "\n", "sampling_rate", "=", "config", "[", "\"sampling\"", "]", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.sync.run_ma": [[4, 32], ["isinstance", "torch.no_grad", "global_model.state_dict().items", "len", "len", "len", "len", "local_models[].state_dict().items", "param.add_", "local_models[].state_dict().items", "param_sum[].add_", "global_model.state_dict", "param.add_", "local_models[].state_dict", "torch.zeros_like", "local_models[].state_dict"], "function", ["None"], ["def", "run_ma", "(", "global_model", ",", "local_models", ",", "selected", ",", "device", ",", "alpha", "=", "0.1", ")", ":", "\n", "    ", "\"\"\" Elastic Model Averaging \"\"\"", "\n", "\n", "if", "isinstance", "(", "alpha", ",", "float", ")", ":", "\n", "        ", "alpha", "=", "[", "alpha", "]", "*", "len", "(", "local_models", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "alpha", ")", "==", "len", "(", "local_models", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "weight", "=", "1.0", "/", "len", "(", "selected", ")", "\n", "\n", "# sum up parameters", "\n", "param_sum", "=", "{", "}", "\n", "for", "ii", "in", "selected", ":", "\n", "            ", "for", "name", ",", "param", "in", "local_models", "[", "ii", "]", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "                ", "if", "name", "not", "in", "param_sum", ":", "\n", "                    ", "param_sum", "[", "name", "]", "=", "torch", ".", "zeros_like", "(", "param", ")", "\n", "", "param_sum", "[", "name", "]", ".", "add_", "(", "param", "*", "weight", ")", "\n", "\n", "# update global model", "\n", "", "", "for", "name", ",", "param", "in", "global_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "            ", "param", ".", "add_", "(", "param_sum", "[", "name", "]", "-", "param", ")", "\n", "\n", "# elastic averaging", "\n", "", "for", "ii", "in", "selected", ":", "\n", "            ", "for", "name", ",", "param", "in", "local_models", "[", "ii", "]", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "                ", "param", ".", "add_", "(", "alpha", "[", "ii", "]", "*", "(", "param_sum", "[", "name", "]", "-", "param", ")", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.data.prepare_mnist_non_iid": [[18, 120], ["torchvision.transforms.Compose", "torch.load", "numpy.argsort", "numpy.arange", "int", "numpy.random.shuffle", "range", "torch.load", "targets.numpy", "range", "targets.numpy", "numpy.array", "FixLabelMNIST", "sampler.UniformSampler", "local_train_loaders.append", "train_labels.append", "logger.info", "numpy.array().astype", "FixLabelMNIST", "local_test_loaders.append", "test_labels.append", "numpy.all", "super().__init__", "len", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "numpy.append", "numpy.ceil().astype", "torch.utils.data.DataLoader", "numpy.unique", "numpy.where", "numpy.append", "torch.utils.data.DataLoader", "numpy.unique", "int", "PIL.Image.fromarray", "data..transform", "img.float.float", "len", "FixLabelMNIST.targets.numpy", "numpy.array", "numpy.random.choice", "local_test_loaders[].dataset.targets.numpy", "numpy.sort", "numpy.sort", "img.float.numpy", "numpy.arange", "numpy.ceil", "len", "len"], "function", ["home.repos.pwc.inspect_result.enosair_federated-fdp.code.sampler.UniformSampler.__init__"], ["def", "prepare_mnist_non_iid", "(", "num_clients", "=", "100", ",", "batch_size", "=", "16", ",", "num_workers", "=", "2", ")", ":", "\n", "    ", "class", "FixLabelMNIST", "(", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "data", ",", "targets", ",", "transform", "=", "None", ")", ":", "\n", "            ", "super", "(", "FixLabelMNIST", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "            ", "\"\"\"\n            Args:\n                index (int): Index\n            Returns:\n                tuple: (image, target) where target is index of the target class.\n            \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "targets", "[", "index", "]", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "numpy", "(", ")", ",", "mode", "=", "\"L\"", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "else", ":", "\n", "                ", "img", "=", "img", ".", "float", "(", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n", "", "", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "]", "\n", ")", "\n", "\n", "# prepare training data", "\n", "data_file", "=", "\"../data/mnist/MNIST/processed/training.pt\"", "\n", "data", ",", "targets", "=", "torch", ".", "load", "(", "data_file", ")", "\n", "ind", "=", "np", ".", "argsort", "(", "targets", ".", "numpy", "(", ")", ")", "\n", "data", "=", "data", "[", "ind", "]", "\n", "targets", "=", "targets", "[", "ind", "]", "\n", "\n", "shards", "=", "np", ".", "arange", "(", "400", ")", "\n", "shard_size", "=", "60000", "/", "400", "\n", "shard_per_client", "=", "int", "(", "400", "/", "num_clients", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "shards", ")", "\n", "\n", "# prepare training data", "\n", "local_train_loaders", "=", "[", "]", "\n", "train_labels", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "num_clients", ")", ":", "\n", "        ", "my_shards", "=", "shards", "[", "(", "ii", "*", "shard_per_client", ")", ":", "(", "ii", "+", "1", ")", "*", "shard_per_client", "]", "\n", "ind", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "jj", "in", "my_shards", ":", "\n", "            ", "ind", "=", "np", ".", "append", "(", "\n", "arr", "=", "ind", ",", "values", "=", "np", ".", "arange", "(", "(", "jj", "*", "shard_size", ")", ",", "(", "jj", "+", "1", ")", "*", "shard_size", ")", "\n", ")", "\n", "", "subset", "=", "FixLabelMNIST", "(", "\n", "data", "=", "data", "[", "ind", "]", ",", "targets", "=", "targets", "[", "ind", "]", ",", "transform", "=", "transform", "\n", ")", "\n", "\n", "### Uniform sampling", "\n", "if", "batch_size", "==", "8", ":", "\n", "            ", "niter", "=", "76", "\n", "", "else", ":", "\n", "            ", "niter", "=", "np", ".", "ceil", "(", "len", "(", "subset", ")", "/", "batch_size", ")", ".", "astype", "(", "int", ")", "\n", "", "sampler", "=", "UniformSampler", "(", "\n", "batch_size", "=", "batch_size", ",", "niter", "=", "niter", ",", "data_size", "=", "len", "(", "subset", ")", "\n", ")", "\n", "\n", "local_train_loaders", ".", "append", "(", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "subset", ",", "sampler", "=", "sampler", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", "\n", ")", "\n", ")", "\n", "\n", "train_labels", ".", "append", "(", "np", ".", "unique", "(", "subset", ".", "targets", ".", "numpy", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Clinet {} got data with labels: {}\"", ".", "format", "(", "ii", ",", "train_labels", "[", "ii", "]", ")", ")", "\n", "\n", "# prepare test data", "\n", "", "data_file", "=", "\"../data/mnist/MNIST/processed/test.pt\"", "\n", "data", ",", "targets", "=", "torch", ".", "load", "(", "data_file", ")", "\n", "targets_numpy", "=", "targets", ".", "numpy", "(", ")", "\n", "\n", "local_test_loaders", "=", "[", "]", "\n", "test_labels", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "num_clients", ")", ":", "\n", "        ", "ind", "=", "np", ".", "array", "(", "[", "]", ")", ".", "astype", "(", "int", ")", "\n", "for", "label", "in", "train_labels", "[", "ii", "]", ":", "\n", "            ", "loc", "=", "np", ".", "where", "(", "targets_numpy", "==", "label", ")", "\n", "ind", "=", "np", ".", "append", "(", "ind", ",", "loc", ")", "\n", "\n", "# sample 200 data from the testing dataset", "\n", "", "ind", "=", "ind", "[", "np", ".", "random", ".", "choice", "(", "len", "(", "ind", ")", ",", "200", ")", "]", "\n", "\n", "subset", "=", "FixLabelMNIST", "(", "\n", "data", "=", "data", "[", "ind", "]", ",", "targets", "=", "targets", "[", "ind", "]", ",", "transform", "=", "transform", "\n", ")", "\n", "local_test_loaders", ".", "append", "(", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "subset", ",", "batch_size", "=", "64", ",", "num_workers", "=", "num_workers", ")", "\n", ")", "\n", "test_labels", ".", "append", "(", "np", ".", "unique", "(", "local_test_loaders", "[", "ii", "]", ".", "dataset", ".", "targets", ".", "numpy", "(", ")", ")", ")", "\n", "assert", "np", ".", "all", "(", "np", ".", "sort", "(", "test_labels", "[", "ii", "]", ")", "==", "np", ".", "sort", "(", "train_labels", "[", "ii", "]", ")", ")", "\n", "\n", "", "return", "local_train_loaders", ",", "local_test_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.data.prepare_cifar_non_iid": [[122, 266], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "numpy.vstack().reshape", "tr_data.transpose.transpose", "numpy.argsort().astype", "numpy.vstack().reshape", "te_data.transpose.transpose", "numpy.argsort().astype", "range", "os.path.join", "numpy.array", "os.path.join", "numpy.array", "len", "numpy.random.dirichlet", "numpy.random.multinomial", "print", "numpy.array().astype", "range", "MyCIFAR", "sampler.UniformSampler", "local_train_loaders.append", "numpy.random.multinomial", "numpy.array().astype", "range", "MyCIFAR", "local_test_loaders.append", "super().__init__", "len", "PIL.Image.fromarray", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "open", "pickle.load", "tr_data.transpose.append", "numpy.vstack", "numpy.argsort", "open", "pickle.load", "te_data.transpose.append", "numpy.vstack", "numpy.argsort", "numpy.append", "torch.utils.data.DataLoader", "numpy.append", "torch.utils.data.DataLoader", "data..transform", "tr_targets.extend", "tr_targets.extend", "numpy.array", "te_targets.extend", "te_targets.extend", "numpy.array", "numpy.ones", "numpy.array", "numpy.where", "numpy.random.permutation", "numpy.ceil().astype", "len", "numpy.array", "numpy.where", "numpy.random.permutation", "numpy.ceil", "len"], "function", ["home.repos.pwc.inspect_result.enosair_federated-fdp.code.sampler.UniformSampler.__init__"], ["", "def", "prepare_cifar_non_iid", "(", "num_clients", "=", "100", ",", "batch_size", "=", "16", ",", "num_workers", "=", "2", ")", ":", "\n", "    ", "class", "MyCIFAR", "(", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "data", ",", "targets", ",", "transform", "=", "None", ")", ":", "\n", "            ", "super", "(", "MyCIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "            ", "\"\"\"\n            Args:\n                index (int): Index\n\n            Returns:\n                tuple: (image, target) where target is index of the target class.\n            \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n", "", "", "transform_train", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "# Load original data", "\n", "train_list", "=", "[", "\n", "[", "\"data_batch_1\"", ",", "\"c99cafc152244af753f735de768cd75f\"", "]", ",", "\n", "[", "\"data_batch_2\"", ",", "\"d4bba439e000b95fd0a9bffe97cbabec\"", "]", ",", "\n", "[", "\"data_batch_3\"", ",", "\"54ebc095f3ab1f0389bbae665268c751\"", "]", ",", "\n", "[", "\"data_batch_4\"", ",", "\"634d18415352ddfa80567beed471001a\"", "]", ",", "\n", "[", "\"data_batch_5\"", ",", "\"482c414d41f54cd18b22e5b47cb7c3cb\"", "]", ",", "\n", "]", "\n", "\n", "test_list", "=", "[", "[", "\"test_batch\"", ",", "\"40351d587109b95175f43aff81a1287e\"", "]", "]", "\n", "\n", "# now load the picked numpy arrays", "\n", "tr_data", ",", "tr_targets", "=", "[", "]", ",", "[", "]", "\n", "for", "file_name", ",", "checksum", "in", "train_list", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "\"../data/cifar-10-batches-py\"", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"latin1\"", ")", "\n", "tr_data", ".", "append", "(", "entry", "[", "\"data\"", "]", ")", "\n", "if", "\"labels\"", "in", "entry", ":", "\n", "                ", "tr_targets", ".", "extend", "(", "entry", "[", "\"labels\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "tr_targets", ".", "extend", "(", "entry", "[", "\"fine_labels\"", "]", ")", "\n", "\n", "", "", "", "tr_data", "=", "np", ".", "vstack", "(", "tr_data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "tr_data", "=", "tr_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "ind", "=", "np", ".", "argsort", "(", "np", ".", "array", "(", "tr_targets", ")", ")", ".", "astype", "(", "int", ")", "\n", "tr_data", "=", "tr_data", "[", "ind", "]", "\n", "tr_targets", "=", "np", ".", "array", "(", "tr_targets", ")", "[", "ind", "]", "\n", "\n", "te_data", ",", "te_targets", "=", "[", "]", ",", "[", "]", "\n", "for", "file_name", ",", "checksum", "in", "test_list", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "\"../data/cifar-10-batches-py\"", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"latin1\"", ")", "\n", "te_data", ".", "append", "(", "entry", "[", "\"data\"", "]", ")", "\n", "if", "\"labels\"", "in", "entry", ":", "\n", "                ", "te_targets", ".", "extend", "(", "entry", "[", "\"labels\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "te_targets", ".", "extend", "(", "entry", "[", "\"fine_labels\"", "]", ")", "\n", "\n", "", "", "", "te_data", "=", "np", ".", "vstack", "(", "te_data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "te_data", "=", "te_data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "# sort by labels", "\n", "ind", "=", "np", ".", "argsort", "(", "np", ".", "array", "(", "te_targets", ")", ")", ".", "astype", "(", "int", ")", "\n", "te_data", "=", "te_data", "[", "ind", "]", "\n", "te_targets", "=", "np", ".", "array", "(", "te_targets", ")", "[", "ind", "]", "\n", "\n", "local_train_loaders", ",", "local_test_loaders", "=", "[", "]", ",", "[", "]", "\n", "\n", "# tr_available = np.ones(len(tr_data))", "\n", "nn", "=", "len", "(", "tr_data", ")", "/", "num_clients", "\n", "for", "ii", "in", "range", "(", "num_clients", ")", ":", "\n", "        ", "p_class", "=", "np", ".", "random", ".", "dirichlet", "(", "np", ".", "ones", "(", "10", ")", "*", "0.5", ")", "\n", "\n", "\"\"\" training \"\"\"", "\n", "# if ii == num_clients - 1:", "\n", "#     tr_ind = np.where(tr_available > 0)[0][:int(nn)]", "\n", "# else:", "\n", "# nn = 2500", "\n", "count", "=", "np", ".", "random", ".", "multinomial", "(", "nn", ",", "p_class", ")", "\n", "print", "(", "count", ")", "\n", "tr_ind", "=", "np", ".", "array", "(", "[", "]", ")", ".", "astype", "(", "int", ")", "\n", "for", "label", "in", "range", "(", "10", ")", ":", "\n", "# ind = np.where(np.logical_and(tr_targets == label, tr_available))[0]", "\n", "            ", "ind", "=", "np", ".", "where", "(", "tr_targets", "==", "label", ")", "[", "0", "]", "\n", "select", "=", "np", ".", "random", ".", "permutation", "(", "ind", ")", "[", ":", "count", "[", "label", "]", "]", "\n", "tr_ind", "=", "np", ".", "append", "(", "arr", "=", "tr_ind", ",", "values", "=", "select", ")", "\n", "# tr_available[select] = 0.0", "\n", "\n", "", "subset", "=", "MyCIFAR", "(", "\n", "data", "=", "tr_data", "[", "tr_ind", "]", ",", "targets", "=", "tr_targets", "[", "tr_ind", "]", ",", "transform", "=", "transform_train", "\n", ")", "\n", "sampler", "=", "UniformSampler", "(", "\n", "batch_size", "=", "batch_size", ",", "\n", "niter", "=", "np", ".", "ceil", "(", "len", "(", "subset", ")", "/", "batch_size", ")", ".", "astype", "(", "int", ")", ",", "\n", "data_size", "=", "len", "(", "subset", ")", ",", "\n", ")", "\n", "local_train_loaders", ".", "append", "(", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "subset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", ",", "sampler", "=", "sampler", "\n", ")", "\n", ")", "\n", "\n", "\"\"\" testing \"\"\"", "\n", "count", "=", "np", ".", "random", ".", "multinomial", "(", "200", ",", "p_class", ")", "\n", "te_ind", "=", "np", ".", "array", "(", "[", "]", ")", ".", "astype", "(", "int", ")", "\n", "for", "label", "in", "range", "(", "10", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "te_targets", "==", "label", ")", "[", "0", "]", "\n", "select", "=", "np", ".", "random", ".", "permutation", "(", "ind", ")", "[", ":", "count", "[", "label", "]", "]", "\n", "te_ind", "=", "np", ".", "append", "(", "arr", "=", "te_ind", ",", "values", "=", "select", ")", "\n", "\n", "", "subset", "=", "MyCIFAR", "(", "\n", "data", "=", "te_data", "[", "te_ind", "]", ",", "targets", "=", "te_targets", "[", "te_ind", "]", ",", "transform", "=", "transform_test", "\n", ")", "\n", "local_test_loaders", ".", "append", "(", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "subset", ",", "batch_size", "=", "128", ",", "num_workers", "=", "num_workers", ")", "\n", ")", "\n", "", "return", "local_train_loaders", ",", "local_test_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.data.prepare_data": [[268, 279], ["data.prepare_mnist_non_iid", "data.prepare_cifar_non_iid"], "function", ["home.repos.pwc.inspect_result.enosair_federated-fdp.code.data.prepare_mnist_non_iid", "home.repos.pwc.inspect_result.enosair_federated-fdp.code.data.prepare_cifar_non_iid"], ["", "def", "prepare_data", "(", "dataset", ",", "num_clients", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "    ", "if", "dataset", "==", "\"mnist-non-iid\"", ":", "\n", "        ", "return", "prepare_mnist_non_iid", "(", "\n", "num_clients", "=", "num_clients", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", "\n", ")", "\n", "", "elif", "dataset", "==", "\"cifar-non-iid\"", ":", "\n", "        ", "return", "prepare_cifar_non_iid", "(", "\n", "num_clients", "=", "num_clients", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "num_workers", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.sampler.UniformSampler.__init__": [[6, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "niter", ",", "data_size", ")", ":", "\n", "        ", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_niter", "=", "niter", "\n", "self", ".", "_data_size", "=", "data_size", "\n", "\n"]], "home.repos.pwc.inspect_result.enosair_federated-fdp.code.sampler.UniformSampler.__iter__": [[11, 17], ["range", "iter", "ret.extend", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "n", "=", "self", ".", "_data_size", "\n", "ret", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "self", ".", "_niter", ")", ":", "\n", "            ", "ret", ".", "extend", "(", "torch", ".", "randperm", "(", "n", ")", "[", ":", "self", ".", "_batch_size", "]", ")", "\n", "", "return", "iter", "(", "ret", ")", "\n", "", "", ""]]}