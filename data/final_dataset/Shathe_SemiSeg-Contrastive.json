{"home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory.Learning_Rate_Object.__init__": [[29, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "learning_rate", ")", ":", "\n", "        ", "self", ".", "learning_rate", "=", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory.entropy_loss": [[33, 49], ["v.size", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "v.dim", "torch.log2", "torch.log2", "mask.float", "mask.float", "torch.sum", "torch.sum", "np.log2"], "function", ["None"], ["", "", "def", "entropy_loss", "(", "v", ",", "mask", ")", ":", "\n", "    ", "\"\"\"\n        Entropy loss for probabilistic prediction vectors\n        input: batch_size x channels x h x w\n        output: batch_size x 1 x h x w\n    \"\"\"", "\n", "assert", "v", ".", "dim", "(", ")", "==", "4", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "v", ".", "size", "(", ")", "\n", "\n", "loss_image", "=", "torch", ".", "mul", "(", "v", ",", "torch", ".", "log2", "(", "v", "+", "1e-30", ")", ")", "\n", "loss_image", "=", "torch", ".", "sum", "(", "loss_image", ",", "dim", "=", "1", ")", "\n", "loss_image", "=", "mask", ".", "float", "(", ")", "*", "loss_image", "\n", "\n", "percentage_valid_points", "=", "torch", ".", "mean", "(", "mask", ".", "float", "(", ")", ")", "\n", "\n", "return", "-", "torch", ".", "sum", "(", "loss_image", ")", "/", "(", "n", "*", "h", "*", "w", "*", "np", ".", "log2", "(", "c", ")", "*", "percentage_valid_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory.update_BN_weak_unlabeled_data": [[50, 70], ["iter", "range", "model.train", "unlabeled_images.cuda.cuda", "model", "next", "norm_func", "next", "iter", "next"], "function", ["None"], ["", "def", "update_BN_weak_unlabeled_data", "(", "model", ",", "norm_func", ",", "batch_size", ",", "loader", ",", "iters", "=", "1000", ")", ":", "\n", "    ", "iterator", "=", "iter", "(", "loader", ")", "\n", "for", "_", "in", "range", "(", "iters", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "''' UNLABELED SAMPLES '''", "\n", "try", ":", "\n", "            ", "batch", "=", "next", "(", "iterator", ")", "\n", "if", "batch", "[", "0", "]", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "                ", "batch", "=", "next", "(", "iterator", ")", "\n", "", "", "except", ":", "\n", "            ", "iterator", "=", "iter", "(", "loader", ")", "\n", "batch", "=", "next", "(", "iterator", ")", "\n", "\n", "# Unlabeled", "\n", "", "unlabeled_images", ",", "_", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "unlabeled_images", "=", "unlabeled_images", ".", "cuda", "(", ")", "\n", "\n", "# Create pseudolabels", "\n", "_", ",", "_", "=", "model", "(", "norm_func", "(", "unlabeled_images", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory.get_arguments": [[71, 83], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "\"--config\"", ",", "type", "=", "str", ",", "default", "=", "'config.json'", ",", "\n", "help", "=", "'Path to the config file (default: config.json)'", ")", "\n", "parser", ".", "add_argument", "(", "\"-r\"", ",", "\"--resume\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Path to the .pth file to resume from (default: None)'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory.lr_poly": [[85, 99], ["float", "float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        base_lr: initial learning rate\n        iter: current iteration\n        max_iter: maximum number of iterations\n        power: power value for polynomial decay\n\n    Returns: the updated learning rate with polynomial decay\n\n    \"\"\"", "\n", "\n", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "float", "(", "max_iter", ")", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory.adjust_learning_rate": [[101, 115], ["trainSSL_less_memory.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        optimizer: pytorch optimizer\n        i_iter: current iteration\n\n    Returns: sets learning rate with poliynomial decay\n\n    \"\"\"", "\n", "lr", "=", "lr_poly", "(", "learning_rate", ",", "i_iter", ",", "num_iterations", ",", "lr_power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory.sigmoid_ramp_up": [[117, 133], ["np.exp", "float", "float"], "function", ["None"], ["", "", "def", "sigmoid_ramp_up", "(", "iter", ",", "max_iter", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        iter: current iteration\n        max_iter: maximum number of iterations to perform the rampup\n\n    Returns:\n        returns 1 if iter >= max_iter\n        returns [0,1] incrementally from 0 to max_iters if iter < max_iter\n\n    \"\"\"", "\n", "if", "iter", ">=", "max_iter", ":", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "exp", "(", "-", "5", "*", "(", "1", "-", "float", "(", "iter", ")", "/", "float", "(", "max_iter", ")", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory.augmentationTransform": [[135, 177], ["utils.transformsgpu.mix", "utils.transformsgpu.random_scale_crop", "utils.transformsgpu.flip", "utils.transformsgpu.colorJitter", "utils.transformsgpu.gaussian_blur", "utils.transformsgpu.grayscale", "utils.transformsgpu.solarize"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.mix", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.random_scale_crop", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.colorJitter", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.gaussian_blur", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.grayscale", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.solarize"], ["", "", "def", "augmentationTransform", "(", "parameters", ",", "data", "=", "None", ",", "target", "=", "None", ",", "probs", "=", "None", ",", "jitter_vale", "=", "0.4", ",", "min_sigma", "=", "0.2", ",", "max_sigma", "=", "2.", ",", "\n", "ignore_label", "=", "255", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        parameters: dictionary with the augmentation configuration\n        data: BxCxWxH input data to augment\n        target: BxWxH labels to augment\n        probs: BxWxH probability map to augment\n        jitter_vale:  jitter augmentation value\n        min_sigma: min sigma value for blur\n        max_sigma: max sigma value for blur\n        ignore_label: value for ignore class\n\n    Returns:\n            augmented data, target, probs\n    \"\"\"", "\n", "assert", "(", "(", "data", "is", "not", "None", ")", "or", "(", "target", "is", "not", "None", ")", ")", "\n", "if", "\"Mix\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "mix", "(", "mask", "=", "parameters", "[", "\"Mix\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "probs", "=", "probs", ")", "\n", "\n", "", "if", "\"RandomScaleCrop\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "random_scale_crop", "(", "scale", "=", "parameters", "[", "\"RandomScaleCrop\"", "]", ",", "data", "=", "data", ",", "\n", "target", "=", "target", ",", "probs", "=", "probs", ",", "ignore_label", "=", "ignore_label", ")", "\n", "", "if", "\"flip\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "flip", "(", "flip", "=", "parameters", "[", "\"flip\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "probs", "=", "probs", ")", "\n", "\n", "", "if", "\"ColorJitter\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "colorJitter", "(", "colorJitter", "=", "parameters", "[", "\"ColorJitter\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "\n", "probs", "=", "probs", ",", "s", "=", "jitter_vale", ")", "\n", "", "if", "\"GaussianBlur\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "gaussian_blur", "(", "blur", "=", "parameters", "[", "\"GaussianBlur\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "\n", "probs", "=", "probs", ",", "min_sigma", "=", "min_sigma", ",", "max_sigma", "=", "max_sigma", ")", "\n", "\n", "", "if", "\"Grayscale\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "grayscale", "(", "grayscale", "=", "parameters", "[", "\"Grayscale\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "\n", "probs", "=", "probs", ")", "\n", "", "if", "\"Solarize\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "solarize", "(", "solarize", "=", "parameters", "[", "\"Solarize\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "\n", "probs", "=", "probs", ")", "\n", "\n", "", "return", "data", ",", "target", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory._save_checkpoint": [[179, 215], ["model.state_dict", "optimizer.state_dict", "os.path.join", "torch.save", "torch.save", "print", "print", "os.path.join", "print", "torch.save", "torch.save", "os.remove", "os.path.join"], "function", ["None"], ["", "def", "_save_checkpoint", "(", "iteration", ",", "model", ",", "optimizer", ",", "config", ",", "save_best", "=", "False", ",", "overwrite", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Saves the current checkpoint\n\n    Args:\n        iteration: current iteration [int]\n        model: segmentation model\n        optimizer: pytorch optimizer\n        config: configuration\n        save_best: Boolean: whether to sae only if best metric\n        overwrite: whether to overwrite if ther is an existing checkpoint\n\n    Returns:\n\n    \"\"\"", "\n", "checkpoint", "=", "{", "\n", "'iteration'", ":", "iteration", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'config'", ":", "config", ",", "\n", "}", "\n", "checkpoint", "[", "'model'", "]", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "if", "save_best", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'best_model.pth'", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "filename", ")", "\n", "print", "(", "f'\\nSaving a checkpoint: {filename} ...'", ")", "\n", "print", "(", "\"Saving current best model: best_model.pth\"", ")", "\n", "", "else", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'checkpoint-iter{iteration}.pth'", ")", "\n", "print", "(", "f'\\nSaving a checkpoint: {filename} ...'", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "filename", ")", "\n", "if", "overwrite", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'checkpoint-iter{iteration - save_checkpoint_every}.pth'", ")", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory.create_ema_model": [[217, 238], ["net_class", "net_class.parameters", "list", "list", "len", "range", "param.detach_", "model.parameters", "net_class.parameters", "mp[].data[].clone"], "function", ["None"], ["", "", "", "", "def", "create_ema_model", "(", "model", ",", "net_class", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        model: segmentation model to copy parameters from\n        net_class: segmentation model class\n\n    Returns: Segmentation model from [net_class] with same parameters than [model]\n\n    \"\"\"", "\n", "ema_model", "=", "net_class", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "for", "param", "in", "ema_model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "detach_", "(", ")", "\n", "", "mp", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "mcp", "=", "list", "(", "ema_model", ".", "parameters", "(", ")", ")", "\n", "n", "=", "len", "(", "mp", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "mcp", "[", "i", "]", ".", "data", "[", ":", "]", "=", "mp", "[", "i", "]", ".", "data", "[", ":", "]", ".", "clone", "(", ")", "\n", "\n", "", "return", "ema_model", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory.update_ema_variables": [[240, 257], ["min", "zip", "ema_model.parameters", "model.parameters"], "function", ["None"], ["", "def", "update_ema_variables", "(", "ema_model", ",", "model", ",", "alpha_teacher", ",", "iteration", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        ema_model: model to update\n        model: model from which to update parameters\n        alpha_teacher: value for weighting the ema_model\n        iteration: current iteration\n\n    Returns: ema_model, with parameters updated follwoing the exponential moving average of [model]\n\n    \"\"\"", "\n", "# Use the \"true\" average until the exponential average is more correct", "\n", "alpha_teacher", "=", "min", "(", "1", "-", "1", "/", "(", "iteration", "+", "1", ")", ",", "alpha_teacher", ")", "\n", "for", "ema_param", ",", "param", "in", "zip", "(", "ema_model", ".", "parameters", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "ema_param", ".", "data", "[", ":", "]", "=", "alpha_teacher", "*", "ema_param", "[", ":", "]", ".", "data", "[", ":", "]", "+", "(", "1", "-", "alpha_teacher", ")", "*", "param", "[", ":", "]", ".", "data", "[", ":", "]", "\n", "", "return", "ema_model", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory.augment_samples": [[259, 346], ["range", "trainSSL_less_memory.augmentationTransform", "trainSSL_less_memory.augmentationTransform", "torch.unique", "torch.unique", "classes[].cuda", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.uniform", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.uniform", "utils.transformmasks.generate_class_mask().unsqueeze().cuda", "torch.cat", "torch.cat", "len", "len", "utils.transformmasks.generate_class_mask().unsqueeze", "utils.transformmasks.generate_class_mask().unsqueeze().cuda", "torch.Tensor().long", "torch.Tensor().long", "utils.transformmasks.generate_class_mask", "utils.transformmasks.generate_class_mask().unsqueeze", "torch.Tensor", "torch.Tensor", "np.random.choice", "utils.transformmasks.generate_class_mask", "int"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augmentationTransform", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augmentationTransform", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformmasks.generate_class_mask", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformmasks.generate_class_mask"], ["", "def", "augment_samples", "(", "images", ",", "labels", ",", "probs", ",", "do_classmix", ",", "batch_size", ",", "ignore_label", ",", "weak", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Perform data augmentation\n\n    Args:\n        images: BxCxWxH images to augment\n        labels:  BxWxH labels to augment\n        probs:  BxWxH probability maps to augment\n        do_classmix: whether to apply classmix augmentation\n        batch_size: batch size\n        ignore_label: ignore class value\n        weak: whether to perform weak or strong augmentation\n\n    Returns:\n        augmented data, augmented labels, augmented probs\n\n    \"\"\"", "\n", "\n", "if", "do_classmix", ":", "\n", "# ClassMix: Get mask for image A", "\n", "        ", "for", "image_i", "in", "range", "(", "batch_size", ")", ":", "# for each image", "\n", "            ", "classes", "=", "torch", ".", "unique", "(", "labels", "[", "image_i", "]", ")", "# get unique classes in pseudolabel A", "\n", "nclasses", "=", "classes", ".", "shape", "[", "0", "]", "\n", "\n", "# remove ignore class", "\n", "if", "ignore_label", "in", "classes", "and", "len", "(", "classes", ")", ">", "1", "and", "nclasses", ">", "1", ":", "\n", "                ", "classes", "=", "classes", "[", "classes", "!=", "ignore_label", "]", "\n", "nclasses", "=", "nclasses", "-", "1", "\n", "\n", "", "if", "dataset", "==", "'pascal_voc'", ":", "# if voc dataaset, remove class 0, background", "\n", "                ", "if", "0", "in", "classes", "and", "len", "(", "classes", ")", ">", "1", "and", "nclasses", ">", "1", ":", "\n", "                    ", "classes", "=", "classes", "[", "classes", "!=", "0", "]", "\n", "nclasses", "=", "nclasses", "-", "1", "\n", "\n", "# pick half of the classes randomly", "\n", "", "", "classes", "=", "(", "classes", "[", "torch", ".", "Tensor", "(", "\n", "np", ".", "random", ".", "choice", "(", "nclasses", ",", "int", "(", "(", "(", "nclasses", "-", "nclasses", "%", "2", ")", "/", "2", ")", "+", "1", ")", ",", "replace", "=", "False", ")", ")", ".", "long", "(", ")", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "# acumulate masks", "\n", "if", "image_i", "==", "0", ":", "\n", "                ", "MixMask", "=", "transformmasks", ".", "generate_class_mask", "(", "labels", "[", "image_i", "]", ",", "classes", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "MixMask", "=", "torch", ".", "cat", "(", "\n", "(", "MixMask", ",", "transformmasks", ".", "generate_class_mask", "(", "labels", "[", "image_i", "]", ",", "classes", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "", "", "params", "=", "{", "\"Mix\"", ":", "MixMask", "}", "\n", "", "else", ":", "\n", "        ", "params", "=", "{", "}", "\n", "\n", "", "if", "weak", ":", "\n", "        ", "params", "[", "\"flip\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.5", "\n", "params", "[", "\"ColorJitter\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.2", "\n", "params", "[", "\"GaussianBlur\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.", "\n", "params", "[", "\"Grayscale\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.0", "\n", "params", "[", "\"Solarize\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.0", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "scale", "=", "random", ".", "uniform", "(", "0.75", ",", "1.75", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "1", "\n", "", "params", "[", "\"RandomScaleCrop\"", "]", "=", "scale", "\n", "\n", "# Apply strong augmentations to unlabeled images", "\n", "image_aug", ",", "labels_aug", ",", "probs_aug", "=", "augmentationTransform", "(", "params", ",", "\n", "data", "=", "images", ",", "target", "=", "labels", ",", "\n", "probs", "=", "probs", ",", "jitter_vale", "=", "0.125", ",", "\n", "min_sigma", "=", "0.1", ",", "max_sigma", "=", "1.5", ",", "\n", "ignore_label", "=", "ignore_label", ")", "\n", "", "else", ":", "\n", "        ", "params", "[", "\"flip\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.5", "\n", "params", "[", "\"ColorJitter\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.8", "\n", "params", "[", "\"GaussianBlur\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.2", "\n", "params", "[", "\"Grayscale\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.0", "\n", "params", "[", "\"Solarize\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.0", "\n", "if", "random", ".", "random", "(", ")", "<", "0.80", ":", "\n", "            ", "scale", "=", "random", ".", "uniform", "(", "0.75", ",", "1.75", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "1", "\n", "", "params", "[", "\"RandomScaleCrop\"", "]", "=", "scale", "\n", "\n", "# Apply strong augmentations to unlabeled images", "\n", "image_aug", ",", "labels_aug", ",", "probs_aug", "=", "augmentationTransform", "(", "params", ",", "\n", "data", "=", "images", ",", "target", "=", "labels", ",", "\n", "probs", "=", "probs", ",", "jitter_vale", "=", "0.25", ",", "\n", "min_sigma", "=", "0.1", ",", "max_sigma", "=", "1.5", ",", "\n", "ignore_label", "=", "ignore_label", ")", "\n", "\n", "", "return", "image_aug", ",", "labels_aug", ",", "probs_aug", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_less_memory.main": [[348, 802], ["print", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "np.random.seed", "random.seed", "int", "int", "len", "print", "print", "utils.class_balancing.ClassBalancing", "utils.feature_memory.FeatureMemory", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "iter", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "iter", "utils.loss.CrossEntropy2d().cuda", "Res_Deeplab", "model.cuda.state_dict().copy", "model.state_dict().copy.items", "model.cuda.load_state_dict", "trainSSL_less_memory.Learning_Rate_Object", "torch.optim.SGD", "torch.optim.SGD", "trainSSL_less_memory.create_ema_model", "ema_model.cuda.train", "ema_model.cuda.cuda", "model.cuda.train", "model.cuda.cuda", "pickle.dump", "torch.Upsample", "range", "trainSSL_less_memory._save_checkpoint", "model.cuda.eval", "evaluateSSL.evaluate", "model.cuda.train", "torch.load", "torch.load", "model.cuda.load_state_dict", "model.cuda.cuda", "trainSSL_less_memory.update_BN_weak_unlabeled_data", "model.cuda.eval", "evaluateSSL.evaluate", "model.cuda.train", "print", "print", "timeit.default_timer", "print", "data.get_loader", "data.get_data_path", "data.get_loader.", "pickle.load", "print", "np.arange", "np.random.shuffle", "torch.utils.model_zoo.load_url", "model.cuda.optim_parameters", "os.path.exists", "os.makedirs", "open", "json.dump", "open", "model.cuda.train", "torch.optim.SGD.zero_grad", "trainSSL_less_memory.adjust_learning_rate", "loss.item", "loss.backward", "torch.optim.SGD.step", "trainSSL_less_memory.update_ema_variables", "trainSSL_less_memory._save_checkpoint", "os.path.join", "trainSSL_less_memory._save_checkpoint", "max", "data.get_loader", "data.get_data_path", "data.get_loader.", "int", "int", "open", "utils.loss.CrossEntropy2d", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "model.cuda.state_dict", "new_params[].copy_", "os.path.join", "images.cuda.cuda", "labels.cuda.cuda", "model.cuda.train", "trainSSL_less_memory.augment_samples", "model.cuda.", "nn.Upsample.", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "CrossEntropy2d().cuda.", "unlabeled_images.cuda.cuda", "model.cuda.train", "trainSSL_less_memory.augment_samples", "trainSSL_less_memory.augment_samples", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.cuda.", "nn.Upsample.", "utils.loss.CrossEntropyLoss2dPixelWiseWeighted().cuda", "CrossEntropyLoss2dPixelWiseWeighted().cuda.", "trainSSL_less_memory._save_checkpoint", "print", "model.cuda.eval", "evaluateSSL.evaluate", "model.cuda.train", "data.augmentations.Compose", "data.augmentations.Compose", "param.size", "saved_state_dict[].size", "next", "utils.class_balancing.ClassBalancing.add_frequencies_labeled", "normalize", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.functional.interpolate().squeeze", "torch.functional.interpolate().squeeze", "torch.functional.interpolate().squeeze", "labeled_features_ema.permute", "utils.feature_memory.FeatureMemory.add_features_from_sample_learned", "labeled_features.permute", "model.cuda.projection_head", "model.cuda.prediction_head", "contrastive_losses.contrastive_class_to_class_learned_memory", "next", "torch.no_grad", "torch.no_grad", "nn.Upsample.detach", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "utils.class_balancing.ClassBalancing.add_frequencies_unlabeled", "normalize", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "trainSSL_less_memory.sigmoid_ramp_up", "torch.ones().cuda", "torch.ones().cuda", "torch.pow", "torch.pow", "torch.functional.interpolate().squeeze", "features_joined_unlabeled.permute.permute", "model.cuda.projection_head", "model.cuda.prediction_head", "contrastive_losses.contrastive_class_to_class_learned_memory", "print", "torch.load", "torch.load", "model.cuda.load_state_dict", "trainSSL_less_memory.create_ema_model", "ema_model.cuda.train", "ema_model.cuda.cuda", "model.cuda.train", "model.cuda.cuda", "str", "next", "iter", "next", "labels.cuda.cpu().numpy", "random.random", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda.float", "torch.no_grad", "torch.no_grad", "nn.Upsample.", "torch.max", "torch.max", "torch.no_grad", "torch.no_grad", "next", "iter", "next", "ema_model.cuda.", "model.cuda.eval", "model.cuda.", "pseudo_label.cpu().numpy", "utils.loss.CrossEntropyLoss2dPixelWiseWeighted", "torch.cat.detach", "trainSSL_less_memory.entropy_loss", "trainSSL_less_memory._save_checkpoint", "trainSSL_less_memory._save_checkpoint", "os.path.join", "data.augmentations.RandomCrop_city", "data.augmentations.RandomCrop_city_highres", "np.ones", "torch.from_numpy", "torch.from_numpy", "ema_model.cuda.", "model.cuda.eval", "model.cuda.", "model.cuda.train", "torch.softmax", "torch.softmax", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "ema_model.cuda.projection_head", "model.cuda.eval", "model.cuda.projection_head", "model.cuda.train", "normalize", "normalize", "nn.Upsample.", "random.random", "random.random", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.ones", "torch.ones", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.functional.interpolate", "math.cos", "labels.cuda.cpu", "utils.class_balancing.ClassBalancing.get_weights", "normalize", "normalize", "labels_aug.float().unsqueeze", "label_prediction_ema.float().unsqueeze", "probability_prediction_ema.float().unsqueeze", "pseudo_label.cpu", "utils.class_balancing.ClassBalancing.get_weights", "np.ones", "torch.from_numpy().cuda.float", "torch.cat.float().unsqueeze", "labels_aug.float", "label_prediction_ema.float", "probability_prediction_ema.float", "torch.cat.float"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.Res_Deeplab", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.create_ema_model", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.evaluate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.update_BN_weak_unlabeled_data", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.evaluate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_loader", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_data_path", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet.optim_parameters", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.city_utils.adjust_learning_rate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.update_ema_variables", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_loader", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_data_path", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augment_samples", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augment_samples", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augment_samples", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.evaluate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.add_frequencies_labeled", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.feature_memory.FeatureMemory.add_features_from_sample_learned", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.contrastive_losses.contrastive_class_to_class_learned_memory", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.add_frequencies_unlabeled", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.sigmoid_ramp_up", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.contrastive_losses.contrastive_class_to_class_learned_memory", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.create_ema_model", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.entropy_loss", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.get_weights", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.get_weights"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "config", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "manual_seed", "(", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "random", ".", "seed", "(", "random_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "if", "pretraining", "==", "'COCO'", ":", "# depending the pretraining, normalize with bgr or rgb", "\n", "        ", "from", "utils", ".", "transformsgpu", "import", "normalize_bgr", "as", "normalize", "\n", "", "else", ":", "\n", "        ", "from", "utils", ".", "transformsgpu", "import", "normalize_rgb", "as", "normalize", "\n", "\n", "", "batch_size_unlabeled", "=", "int", "(", "batch_size", "/", "2", ")", "# because of augmentation anchoring, 2 augmentations per sample", "\n", "batch_size_labeled", "=", "int", "(", "batch_size", "*", "1", ")", "\n", "assert", "batch_size_unlabeled", ">=", "2", ",", "\"batch size should be higher than 2\"", "\n", "assert", "batch_size_labeled", ">=", "2", ",", "\"batch size should be higher than 2\"", "\n", "RAMP_UP_ITERS", "=", "2000", "# iterations until contrastive and self-training are taken into account", "\n", "\n", "# DATASETS / LOADERS ", "\n", "if", "dataset", "==", "'pascal_voc'", ":", "\n", "        ", "data_loader", "=", "get_loader", "(", "dataset", ")", "\n", "data_path", "=", "get_data_path", "(", "dataset", ")", "\n", "train_dataset", "=", "data_loader", "(", "data_path", ",", "crop_size", "=", "input_size", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "pretraining", "=", "pretraining", ")", "\n", "\n", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "data_loader", "=", "get_loader", "(", "'cityscapes'", ")", "\n", "data_path", "=", "get_data_path", "(", "'cityscapes'", ")", "\n", "if", "deeplabv2", ":", "\n", "            ", "data_aug", "=", "Compose", "(", "[", "RandomCrop_city", "(", "input_size", ")", "]", ")", "\n", "", "else", ":", "# for deeplabv3 original resolution", "\n", "            ", "data_aug", "=", "Compose", "(", "[", "RandomCrop_city_highres", "(", "input_size", ")", "]", ")", "\n", "", "train_dataset", "=", "data_loader", "(", "data_path", ",", "is_transform", "=", "True", ",", "augmentations", "=", "data_aug", ",", "img_size", "=", "input_size", ",", "\n", "pretraining", "=", "pretraining", ")", "\n", "\n", "", "train_dataset_size", "=", "len", "(", "train_dataset", ")", "\n", "print", "(", "'dataset size: '", ",", "train_dataset_size", ")", "\n", "\n", "partial_size", "=", "labeled_samples", "\n", "print", "(", "'Training on number of samples:'", ",", "partial_size", ")", "\n", "\n", "# class weighting  taken unlabeled data into acount in an incremental fashion.", "\n", "class_weights_curr", "=", "ClassBalancing", "(", "labeled_iters", "=", "int", "(", "labeled_samples", "/", "batch_size_labeled", ")", ",", "\n", "unlabeled_iters", "=", "int", "(", "\n", "(", "train_dataset_size", "-", "labeled_samples", ")", "/", "batch_size_unlabeled", ")", ",", "\n", "n_classes", "=", "num_classes", ")", "\n", "# Memory Bank", "\n", "feature_memory", "=", "FeatureMemory", "(", "num_samples", "=", "labeled_samples", ",", "dataset", "=", "dataset", ",", "memory_per_class", "=", "256", ",", "feature_size", "=", "256", ",", "\n", "n_classes", "=", "num_classes", ")", "\n", "\n", "# select the partition", "\n", "if", "split_id", "is", "not", "None", ":", "\n", "        ", "train_ids", "=", "pickle", ".", "load", "(", "open", "(", "split_id", ",", "'rb'", ")", ")", "\n", "print", "(", "'loading train ids from {}'", ".", "format", "(", "split_id", ")", ")", "\n", "", "else", ":", "\n", "        ", "train_ids", "=", "np", ".", "arange", "(", "train_dataset_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_ids", ")", "\n", "\n", "# Samplers for labeled data", "\n", "", "train_sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_ids", "[", ":", "partial_size", "]", ")", "\n", "trainloader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size_labeled", ",", "sampler", "=", "train_sampler", ",", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "trainloader_iter", "=", "iter", "(", "trainloader", ")", "\n", "\n", "# Samplers for unlabeled data", "\n", "train_remain_sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_ids", "[", "partial_size", ":", "]", ")", "\n", "trainloader_remain", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size_unlabeled", ",", "sampler", "=", "train_remain_sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "trainloader_remain_iter", "=", "iter", "(", "trainloader_remain", ")", "\n", "\n", "# supervised loss", "\n", "supervised_loss", "=", "CrossEntropy2d", "(", "ignore_label", "=", "ignore_label", ")", ".", "cuda", "(", ")", "\n", "\n", "''' Deeplab model '''", "\n", "# Define network", "\n", "if", "deeplabv2", ":", "\n", "        ", "if", "pretraining", "==", "'COCO'", ":", "# coco and imagenet resnet architectures differ a little, just on how to do the stride", "\n", "            ", "from", "model", ".", "deeplabv2", "import", "Res_Deeplab", "\n", "", "else", ":", "# imagenet pretrained (more modern modification)", "\n", "            ", "from", "model", ".", "deeplabv2_imagenet", "import", "Res_Deeplab", "\n", "\n", "# load pretrained parameters", "\n", "", "if", "pretraining", "==", "'COCO'", ":", "\n", "            ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "\n", "'http://vllab1.ucmerced.edu/~whung/adv-semi-seg/resnet101COCO-41f33a49.pth'", ")", "# COCO pretraining", "\n", "", "else", ":", "\n", "            ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "\n", "'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth'", ")", "# iamgenet pretrainning", "\n", "\n", "", "", "else", ":", "\n", "        ", "from", "model", ".", "deeplabv3", "import", "Res_Deeplab50", "as", "Res_Deeplab", "\n", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "\n", "'https://download.pytorch.org/models/resnet50-19c8e357.pth'", ")", "# iamgenet pretrainning", "\n", "\n", "# create network", "\n", "", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "# Copy loaded parameters to model", "\n", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "name", ",", "param", "in", "new_params", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", "in", "saved_state_dict", "and", "param", ".", "size", "(", ")", "==", "saved_state_dict", "[", "name", "]", ".", "size", "(", ")", ":", "\n", "            ", "new_params", "[", "name", "]", ".", "copy_", "(", "saved_state_dict", "[", "name", "]", ")", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "\n", "# Optimizer for segmentation network", "\n", "learning_rate_object", "=", "Learning_Rate_Object", "(", "config", "[", "'training'", "]", "[", "'learning_rate'", "]", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "learning_rate_object", ")", ",", "\n", "lr", "=", "learning_rate", ",", "momentum", "=", "momentum", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "ema_model", "=", "create_ema_model", "(", "model", ",", "Res_Deeplab", ")", "\n", "ema_model", ".", "train", "(", ")", "\n", "ema_model", "=", "ema_model", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "with", "open", "(", "checkpoint_dir", "+", "'/config.json'", ",", "'w'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "config", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "", "pickle", ".", "dump", "(", "train_ids", ",", "open", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'train_split.pkl'", ")", ",", "'wb'", ")", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size", "[", "0", "]", ",", "input_size", "[", "1", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "epochs_since_start", "=", "0", "\n", "start_iteration", "=", "0", "\n", "best_mIoU", "=", "0", "# best metric while training", "\n", "iters_without_improve", "=", "0", "\n", "\n", "# TRAINING", "\n", "for", "i_iter", "in", "range", "(", "start_iteration", ",", "num_iterations", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "# set mode to training", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss_l_value", "=", "0.", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", "\n", "\n", "labeled_turn", "=", "i_iter", "%", "2", "==", "0", "\n", "\n", "if", "labeled_turn", ":", "# labeled data optimization", "\n", "\n", "            ", "''' LABELED SAMPLES '''", "\n", "# Get batch", "\n", "try", ":", "\n", "                ", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "if", "batch", "[", "0", "]", ".", "shape", "[", "0", "]", "!=", "batch_size_labeled", ":", "\n", "                    ", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "", "", "except", ":", "# finish epoch, rebuild the iterator", "\n", "                ", "epochs_since_start", "=", "epochs_since_start", "+", "1", "\n", "# print('Epochs since start: ',epochs_since_start)", "\n", "trainloader_iter", "=", "iter", "(", "trainloader", ")", "\n", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "\n", "", "images", ",", "labels", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "dataset", "==", "'cityscapes'", ":", "\n", "                ", "class_weights_curr", ".", "add_frequencies_labeled", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "images_aug", ",", "labels_aug", ",", "_", ",", "_", "=", "augment_samples", "(", "images", ",", "labels", ",", "None", ",", "random", ".", "random", "(", ")", "<", "0.2", ",", "\n", "batch_size_labeled", ",", "\n", "ignore_label", ",", "weak", "=", "True", ")", "\n", "\n", "# labeled data", "\n", "labeled_pred", ",", "labeled_features", "=", "model", "(", "normalize", "(", "images_aug", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "labeled_pred", "=", "interp", "(", "labeled_pred", ")", "\n", "\n", "# apply class balance for cityspcaes dataset", "\n", "class_weights", "=", "torch", ".", "from_numpy", "(", "np", ".", "ones", "(", "(", "num_classes", ")", ")", ")", ".", "cuda", "(", ")", "\n", "if", "i_iter", ">", "RAMP_UP_ITERS", "and", "dataset", "==", "'cityscapes'", ":", "\n", "                ", "class_weights", "=", "torch", ".", "from_numpy", "(", "\n", "class_weights_curr", ".", "get_weights", "(", "num_iterations", ",", "only_labeled", "=", "False", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "", "loss", "=", "0", "\n", "\n", "# SUPERVISED SEGMENTATION", "\n", "labeled_loss", "=", "supervised_loss", "(", "labeled_pred", ",", "labels_aug", ",", "weight", "=", "class_weights", ".", "float", "(", ")", ")", "\n", "loss", "=", "loss", "+", "labeled_loss", "\n", "\n", "# CONTRASTIVE LEARNING", "\n", "if", "i_iter", ">", "RAMP_UP_ITERS", "-", "1000", ":", "\n", "# Build Memory Bank 1000 iters before starting to do contrsative", "\n", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Get feature vectors from labeled images with EMA model", "\n", "                    ", "if", "use_teacher", ":", "\n", "                        ", "labeled_pred_ema", ",", "labeled_features_ema", "=", "ema_model", "(", "normalize", "(", "images_aug", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "model", ".", "eval", "(", ")", "\n", "labeled_pred_ema", ",", "labeled_features_ema", "=", "model", "(", "normalize", "(", "images_aug", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "", "labeled_pred_ema", "=", "interp", "(", "labeled_pred_ema", ")", "\n", "probability_prediction_ema", ",", "label_prediction_ema", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "labeled_pred_ema", ",", "dim", "=", "1", ")", ",", "\n", "dim", "=", "1", ")", "# Get pseudolabels", "\n", "\n", "# Resize labels, predictions and probabilities,  to feature map resolution", "\n", "", "labels_down", "=", "nn", ".", "functional", ".", "interpolate", "(", "labels_aug", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "size", "=", "(", "labeled_features_ema", ".", "shape", "[", "2", "]", ",", "labeled_features_ema", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "1", ")", "\n", "label_prediction_down", "=", "nn", ".", "functional", ".", "interpolate", "(", "label_prediction_ema", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "size", "=", "(", "\n", "labeled_features_ema", ".", "shape", "[", "2", "]", ",", "labeled_features_ema", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "1", ")", "\n", "probability_prediction_down", "=", "nn", ".", "functional", ".", "interpolate", "(", "probability_prediction_ema", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "size", "=", "(", "labeled_features_ema", ".", "shape", "[", "2", "]", ",", "\n", "labeled_features_ema", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# get mask where the labeled predictions are correct and have a confidence higher than 0.95", "\n", "mask_prediction_correctly", "=", "(", "(", "label_prediction_down", "==", "labels_down", ")", ".", "float", "(", ")", "*", "(", "\n", "probability_prediction_down", ">", "0.95", ")", ".", "float", "(", ")", ")", ".", "bool", "(", ")", "\n", "\n", "# Apply the filter mask to the features and its labels", "\n", "labeled_features_correct", "=", "labeled_features_ema", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "labels_down_correct", "=", "labels_down", "[", "mask_prediction_correctly", "]", "\n", "labeled_features_correct", "=", "labeled_features_correct", "[", "mask_prediction_correctly", ",", "...", "]", "\n", "\n", "# get projected features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "use_teacher", ":", "\n", "                        ", "proj_labeled_features_correct", "=", "ema_model", ".", "projection_head", "(", "labeled_features_correct", ")", "\n", "", "else", ":", "\n", "                        ", "model", ".", "eval", "(", ")", "\n", "proj_labeled_features_correct", "=", "model", ".", "projection_head", "(", "labeled_features_correct", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# updated memory bank", "\n", "", "", "feature_memory", ".", "add_features_from_sample_learned", "(", "ema_model", ",", "proj_labeled_features_correct", ",", "\n", "labels_down_correct", ",", "batch_size_labeled", ")", "\n", "\n", "", "if", "i_iter", ">", "RAMP_UP_ITERS", ":", "\n", "                ", "'''\n                CONTRASTIVE LEARNING ON LABELED DATA. Force features from labeled samples, to be similar to other features from the same class (which also leads to good predictions\n                '''", "\n", "# mask features that do not have ignore label in the labels (zero-padding because of data augmentation like resize/crop)", "\n", "mask_prediction_correctly", "=", "(", "labels_down", "!=", "ignore_label", ")", "\n", "\n", "labeled_features_all", "=", "labeled_features", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "labels_down_all", "=", "labels_down", "[", "mask_prediction_correctly", "]", "\n", "labeled_features_all", "=", "labeled_features_all", "[", "mask_prediction_correctly", ",", "...", "]", "\n", "\n", "# get predicted features", "\n", "proj_labeled_features_all", "=", "model", ".", "projection_head", "(", "labeled_features_all", ")", "\n", "pred_labeled_features_all", "=", "model", ".", "prediction_head", "(", "proj_labeled_features_all", ")", "\n", "\n", "# Apply contrastive learning loss", "\n", "loss_contr_labeled", "=", "contrastive_class_to_class_learned_memory", "(", "model", ",", "pred_labeled_features_all", ",", "\n", "labels_down_all", ",", "\n", "num_classes", ",", "feature_memory", ".", "memory", ")", "\n", "\n", "loss", "=", "loss", "+", "loss_contr_labeled", "*", "0.1", "\n", "\n", "\n", "", "", "else", ":", "# unlabeled data optimization", "\n", "\n", "            ", "''' UNLABELED SAMPLES '''", "\n", "try", ":", "\n", "                ", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "if", "batch_remain", "[", "0", "]", ".", "shape", "[", "0", "]", "!=", "batch_size_unlabeled", ":", "\n", "                    ", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "", "", "except", ":", "\n", "                ", "trainloader_remain_iter", "=", "iter", "(", "trainloader_remain", ")", "\n", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "\n", "# Unlabeled", "\n", "", "unlabeled_images", ",", "_", ",", "_", ",", "_", ",", "_", "=", "batch_remain", "\n", "unlabeled_images", "=", "unlabeled_images", ".", "cuda", "(", ")", "\n", "\n", "# Create pseudolabels", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "use_teacher", ":", "\n", "                    ", "logits_u_w", ",", "features_weak_unlabeled", "=", "ema_model", "(", "normalize", "(", "unlabeled_images", ",", "dataset", ")", ",", "\n", "return_features", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "\n", "logits_u_w", ",", "features_weak_unlabeled", "=", "model", "(", "normalize", "(", "unlabeled_images", ",", "dataset", ")", ",", "\n", "return_features", "=", "True", ")", "\n", "", "logits_u_w", "=", "interp", "(", "logits_u_w", ")", ".", "detach", "(", ")", "# prediction unlabeled", "\n", "softmax_u_w", "=", "torch", ".", "softmax", "(", "logits_u_w", ",", "dim", "=", "1", ")", "\n", "max_probs", ",", "pseudo_label", "=", "torch", ".", "max", "(", "softmax_u_w", ",", "dim", "=", "1", ")", "# Get pseudolabels", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "if", "dataset", "==", "'cityscapes'", ":", "\n", "                ", "class_weights_curr", ".", "add_frequencies_unlabeled", "(", "pseudo_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "'''\n            UNLABELED DATA\n            '''", "\n", "unlabeled_images_aug1", ",", "pseudo_label1", ",", "max_probs1", ",", "unlabeled_aug1_params", "=", "augment_samples", "(", "unlabeled_images", ",", "\n", "pseudo_label", ",", "\n", "max_probs", ",", "\n", "i_iter", ">", "RAMP_UP_ITERS", "and", "random", ".", "random", "(", ")", "<", "0.75", ",", "\n", "batch_size_unlabeled", ",", "\n", "ignore_label", ")", "\n", "\n", "unlabeled_images_aug2", ",", "pseudo_label2", ",", "max_probs2", ",", "unlabeled_aug2_params", "=", "augment_samples", "(", "unlabeled_images", ",", "\n", "pseudo_label", ",", "\n", "max_probs", ",", "\n", "i_iter", ">", "RAMP_UP_ITERS", "and", "random", ".", "random", "(", ")", "<", "0.75", ",", "\n", "batch_size_unlabeled", ",", "\n", "ignore_label", ")", "\n", "# concatenate two augmentations of unlabeled data", "\n", "joined_unlabeled", "=", "torch", ".", "cat", "(", "(", "unlabeled_images_aug1", ",", "unlabeled_images_aug2", ")", ",", "dim", "=", "0", ")", "\n", "joined_pseudolabels", "=", "torch", ".", "cat", "(", "(", "pseudo_label1", ",", "pseudo_label2", ")", ",", "dim", "=", "0", ")", "\n", "joined_maxprobs", "=", "torch", ".", "cat", "(", "(", "max_probs1", ",", "max_probs2", ")", ",", "dim", "=", "0", ")", "\n", "\n", "pred_joined_unlabeled", ",", "features_joined_unlabeled", "=", "model", "(", "normalize", "(", "joined_unlabeled", ",", "dataset", ")", ",", "\n", "return_features", "=", "True", ")", "\n", "pred_joined_unlabeled", "=", "interp", "(", "pred_joined_unlabeled", ")", "\n", "\n", "\n", "# apply clas balance for cityspcaes dataset", "\n", "if", "dataset", "==", "'cityscapes'", ":", "\n", "                ", "class_weights", "=", "torch", ".", "from_numpy", "(", "\n", "class_weights_curr", ".", "get_weights", "(", "num_iterations", ",", "only_labeled", "=", "False", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "class_weights", "=", "torch", ".", "from_numpy", "(", "np", ".", "ones", "(", "(", "num_classes", ")", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "", "loss", "=", "0", "\n", "\n", "# SELF-SUPERVISED SEGMENTATION", "\n", "unlabeled_loss", "=", "CrossEntropyLoss2dPixelWiseWeighted", "(", "ignore_index", "=", "ignore_label", ",", "\n", "weight", "=", "class_weights", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "#", "\n", "\n", "# Pseudo-label weighting", "\n", "pixelWiseWeight", "=", "sigmoid_ramp_up", "(", "i_iter", ",", "RAMP_UP_ITERS", ")", "*", "torch", ".", "ones", "(", "joined_maxprobs", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "pixelWiseWeight", "=", "pixelWiseWeight", "*", "torch", ".", "pow", "(", "joined_maxprobs", ".", "detach", "(", ")", ",", "6", ")", "\n", "\n", "# Pseudo-label loss", "\n", "loss_ce_unlabeled", "=", "unlabeled_loss", "(", "pred_joined_unlabeled", ",", "joined_pseudolabels", ",", "pixelWiseWeight", ")", "\n", "\n", "loss", "=", "loss", "+", "loss_ce_unlabeled", "\n", "\n", "# entropy loss", "\n", "valid_mask", "=", "(", "joined_pseudolabels", "!=", "ignore_label", ")", ".", "unsqueeze", "(", "1", ")", "\n", "loss", "=", "loss", "+", "entropy_loss", "(", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "pred_joined_unlabeled", ",", "dim", "=", "1", ")", ",", "valid_mask", ")", "*", "0.01", "\n", "\n", "\n", "if", "i_iter", ">", "RAMP_UP_ITERS", ":", "\n", "\n", "                ", "'''\n                CONTRASTIVE LEARNING ON UNLABELED DATA. align unlabeled features to labeled features\n                '''", "\n", "joined_pseudolabels_down", "=", "nn", ".", "functional", ".", "interpolate", "(", "joined_pseudolabels", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "size", "=", "(", "features_joined_unlabeled", ".", "shape", "[", "2", "]", ",", "\n", "features_joined_unlabeled", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# mask features that do not have ignore label in the labels (zero-padding because of data augmentation like resize/crop)", "\n", "mask", "=", "(", "joined_pseudolabels_down", "!=", "ignore_label", ")", "\n", "\n", "features_joined_unlabeled", "=", "features_joined_unlabeled", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "features_joined_unlabeled", "=", "features_joined_unlabeled", "[", "mask", ",", "...", "]", "\n", "joined_pseudolabels_down", "=", "joined_pseudolabels_down", "[", "mask", "]", "\n", "\n", "# get predicted features", "\n", "proj_feat_unlabeled", "=", "model", ".", "projection_head", "(", "features_joined_unlabeled", ")", "\n", "pred_feat_unlabeled", "=", "model", ".", "prediction_head", "(", "proj_feat_unlabeled", ")", "\n", "\n", "# Apply contrastive learning loss", "\n", "loss_contr_unlabeled", "=", "contrastive_class_to_class_learned_memory", "(", "model", ",", "pred_feat_unlabeled", ",", "\n", "joined_pseudolabels_down", ",", "\n", "num_classes", ",", "feature_memory", ".", "memory", ")", "\n", "\n", "loss", "=", "loss", "+", "loss_contr_unlabeled", "*", "0.1", "\n", "\n", "\n", "# common code", "\n", "\n", "", "", "loss_l_value", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "# optimize", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "m", "=", "1", "-", "(", "1", "-", "0.995", ")", "*", "(", "math", ".", "cos", "(", "math", ".", "pi", "*", "i_iter", "/", "num_iterations", ")", "+", "1", ")", "/", "2", "\n", "ema_model", "=", "update_ema_variables", "(", "ema_model", "=", "ema_model", ",", "model", "=", "model", ",", "alpha_teacher", "=", "m", ",", "iteration", "=", "i_iter", ")", "\n", "\n", "\n", "if", "i_iter", "%", "save_checkpoint_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ")", "\n", "\n", "", "if", "i_iter", "%", "val_per_iter", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'iter = {0:6d}/{1:6d}'", ".", "format", "(", "i_iter", ",", "num_iterations", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "mIoU", ",", "eval_loss", "=", "evaluate", "(", "model", ",", "dataset", ",", "deeplabv2", "=", "deeplabv2", ",", "ignore_label", "=", "ignore_label", ",", "\n", "save_dir", "=", "checkpoint_dir", ",", "pretraining", "=", "pretraining", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "mIoU", ">", "best_mIoU", ":", "\n", "                ", "best_mIoU", "=", "mIoU", "\n", "if", "save_teacher", ":", "\n", "                    ", "_save_checkpoint", "(", "i_iter", ",", "ema_model", ",", "optimizer", ",", "config", ",", "save_best", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "save_best", "=", "True", ")", "\n", "", "iters_without_improve", "=", "0", "\n", "", "else", ":", "\n", "                ", "iters_without_improve", "+=", "val_per_iter", "\n", "\n", "", "'''\n            if the performance has not improve in N iterations, try to reload best model to optimize again with a lower LR\n            Simulating an iterative training'''", "\n", "if", "iters_without_improve", ">", "num_iterations", "/", "5.", ":", "\n", "                ", "print", "(", "'Re-loading a previous best model'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'best_model.pth'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "ema_model", "=", "create_ema_model", "(", "model", ",", "Res_Deeplab", ")", "\n", "ema_model", ".", "train", "(", ")", "\n", "ema_model", "=", "ema_model", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "iters_without_improve", "=", "0", "# reset timer", "\n", "\n", "", "", "", "_save_checkpoint", "(", "num_iterations", ",", "model", ",", "optimizer", ",", "config", ")", "\n", "\n", "# FINISH TRAINING, evaluate again", "\n", "model", ".", "eval", "(", ")", "\n", "mIoU", ",", "eval_loss", "=", "evaluate", "(", "model", ",", "dataset", ",", "deeplabv2", "=", "deeplabv2", ",", "ignore_label", "=", "ignore_label", ",", "save_dir", "=", "checkpoint_dir", ",", "\n", "pretraining", "=", "pretraining", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "mIoU", ">", "best_mIoU", "and", "save_best_model", ":", "\n", "        ", "best_mIoU", "=", "mIoU", "\n", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "save_best", "=", "True", ")", "\n", "\n", "# TRY IMPROVING BEST MODEL WITH EMA MODEL OR UPDATING BN STATS", "\n", "\n", "# Load best model", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'best_model.pth'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "model", "=", "update_BN_weak_unlabeled_data", "(", "model", ",", "normalize", ",", "batch_size_unlabeled", ",", "trainloader_remain", ")", "\n", "model", ".", "eval", "(", ")", "\n", "mIoU", ",", "eval_loss", "=", "evaluate", "(", "model", ",", "dataset", ",", "deeplabv2", "=", "deeplabv2", ",", "ignore_label", "=", "ignore_label", ",", "save_dir", "=", "checkpoint_dir", ",", "\n", "pretraining", "=", "pretraining", ")", "\n", "model", ".", "train", "(", ")", "\n", "if", "mIoU", ">", "best_mIoU", "and", "save_best_model", ":", "\n", "        ", "best_mIoU", "=", "mIoU", "\n", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "save_best", "=", "True", ")", "\n", "\n", "", "print", "(", "'BEST MIOU'", ")", "\n", "print", "(", "max", "(", "best_mIoU_improved", ",", "best_mIoU", ")", ")", "\n", "\n", "end", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "'Total time: '", "+", "str", "(", "end", "-", "start", ")", "+", "' seconds'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL.Learning_Rate_Object.__init__": [[29, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "learning_rate", ")", ":", "\n", "        ", "self", ".", "learning_rate", "=", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL.entropy_loss": [[32, 49], ["v.size", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "v.dim", "torch.log2", "torch.log2", "mask.float().squeeze", "mask.float", "torch.sum", "torch.sum", "mask.float", "np.log2"], "function", ["None"], ["", "", "def", "entropy_loss", "(", "v", ",", "mask", ")", ":", "\n", "    ", "\"\"\"\n        Entropy loss for probabilistic prediction vectors\n        input: batch_size x channels x h x w\n        output: batch_size x 1 x h x w\n    \"\"\"", "\n", "assert", "v", ".", "dim", "(", ")", "==", "4", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "v", ".", "size", "(", ")", "\n", "\n", "loss_image", "=", "torch", ".", "mul", "(", "v", ",", "torch", ".", "log2", "(", "v", "+", "1e-30", ")", ")", "\n", "loss_image", "=", "torch", ".", "sum", "(", "loss_image", ",", "dim", "=", "1", ")", "\n", "loss_image", "=", "mask", ".", "float", "(", ")", ".", "squeeze", "(", "1", ")", "*", "loss_image", "\n", "\n", "\n", "percentage_valid_points", "=", "torch", ".", "mean", "(", "mask", ".", "float", "(", ")", ")", "\n", "\n", "return", "-", "torch", ".", "sum", "(", "loss_image", ")", "/", "(", "n", "*", "h", "*", "w", "*", "np", ".", "log2", "(", "c", ")", "*", "percentage_valid_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL.get_arguments": [[50, 62], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "\"--config\"", ",", "type", "=", "str", ",", "default", "=", "'config.json'", ",", "\n", "help", "=", "'Path to the config file (default: config.json)'", ")", "\n", "parser", ".", "add_argument", "(", "\"-r\"", ",", "\"--resume\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Path to the .pth file to resume from (default: None)'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL.lr_poly": [[64, 78], ["float", "float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        base_lr: initial learning rate\n        iter: current iteration\n        max_iter: maximum number of iterations\n        power: power value for polynomial decay\n\n    Returns: the updated learning rate with polynomial decay\n\n    \"\"\"", "\n", "\n", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "float", "(", "max_iter", ")", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL.adjust_learning_rate": [[80, 94], ["trainSSL.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        optimizer: pytorch optimizer\n        i_iter: current iteration\n\n    Returns: sets learning rate with poliynomial decay\n\n    \"\"\"", "\n", "lr", "=", "lr_poly", "(", "learning_rate", ",", "i_iter", ",", "num_iterations", ",", "lr_power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL.sigmoid_ramp_up": [[96, 112], ["np.exp", "float", "float"], "function", ["None"], ["", "", "def", "sigmoid_ramp_up", "(", "iter", ",", "max_iter", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        iter: current iteration\n        max_iter: maximum number of iterations to perform the rampup\n\n    Returns:\n        returns 1 if iter >= max_iter\n        returns [0,1] incrementally from 0 to max_iters if iter < max_iter\n\n    \"\"\"", "\n", "if", "iter", ">=", "max_iter", ":", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "exp", "(", "-", "5", "*", "(", "1", "-", "float", "(", "iter", ")", "/", "float", "(", "max_iter", ")", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL.update_BN_weak_unlabeled_data": [[113, 134], ["iter", "model.train", "range", "unlabeled_images.cuda.cuda", "model", "next", "norm_func", "next", "iter", "next"], "function", ["None"], ["", "", "def", "update_BN_weak_unlabeled_data", "(", "model", ",", "norm_func", ",", "batch_size", ",", "loader", ",", "iters", "=", "1000", ")", ":", "\n", "    ", "iterator", "=", "iter", "(", "loader", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "_", "in", "range", "(", "iters", ")", ":", "\n", "        ", "''' UNLABELED SAMPLES '''", "\n", "try", ":", "\n", "            ", "batch", "=", "next", "(", "iterator", ")", "\n", "if", "batch", "[", "0", "]", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "                ", "batch", "=", "next", "(", "iterator", ")", "\n", "", "", "except", ":", "\n", "            ", "iterator", "=", "iter", "(", "loader", ")", "\n", "batch", "=", "next", "(", "iterator", ")", "\n", "\n", "# Unlabeled", "\n", "", "unlabeled_images", ",", "_", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "unlabeled_images", "=", "unlabeled_images", ".", "cuda", "(", ")", "\n", "\n", "# Create pseudolabels", "\n", "_", ",", "_", "=", "model", "(", "norm_func", "(", "unlabeled_images", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL.augmentationTransform": [[137, 178], ["utils.transformsgpu.mix", "utils.transformsgpu.random_scale_crop", "utils.transformsgpu.flip", "utils.transformsgpu.colorJitter", "utils.transformsgpu.gaussian_blur", "utils.transformsgpu.grayscale", "utils.transformsgpu.solarize"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.mix", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.random_scale_crop", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.colorJitter", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.gaussian_blur", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.grayscale", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.solarize"], ["", "def", "augmentationTransform", "(", "parameters", ",", "data", "=", "None", ",", "target", "=", "None", ",", "probs", "=", "None", ",", "jitter_vale", "=", "0.4", ",", "min_sigma", "=", "0.2", ",", "max_sigma", "=", "2.", ",", "ignore_label", "=", "255", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        parameters: dictionary with the augmentation configuration\n        data: BxCxWxH input data to augment\n        target: BxWxH labels to augment\n        probs: BxWxH probability map to augment\n        jitter_vale:  jitter augmentation value\n        min_sigma: min sigma value for blur\n        max_sigma: max sigma value for blur\n        ignore_label: value for ignore class\n\n    Returns:\n            augmented data, target, probs\n    \"\"\"", "\n", "assert", "(", "(", "data", "is", "not", "None", ")", "or", "(", "target", "is", "not", "None", ")", ")", "\n", "if", "\"Mix\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "mix", "(", "mask", "=", "parameters", "[", "\"Mix\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "probs", "=", "probs", ")", "\n", "\n", "", "if", "\"RandomScaleCrop\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "random_scale_crop", "(", "scale", "=", "parameters", "[", "\"RandomScaleCrop\"", "]", ",", "data", "=", "data", ",", "\n", "target", "=", "target", ",", "probs", "=", "probs", ",", "ignore_label", "=", "ignore_label", ")", "\n", "", "if", "\"flip\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "flip", "(", "flip", "=", "parameters", "[", "\"flip\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "probs", "=", "probs", ")", "\n", "\n", "", "if", "\"ColorJitter\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "colorJitter", "(", "colorJitter", "=", "parameters", "[", "\"ColorJitter\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "\n", "probs", "=", "probs", ",", "s", "=", "jitter_vale", ")", "\n", "", "if", "\"GaussianBlur\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "gaussian_blur", "(", "blur", "=", "parameters", "[", "\"GaussianBlur\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "\n", "probs", "=", "probs", ",", "min_sigma", "=", "min_sigma", ",", "max_sigma", "=", "max_sigma", ")", "\n", "\n", "", "if", "\"Grayscale\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "grayscale", "(", "grayscale", "=", "parameters", "[", "\"Grayscale\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "\n", "probs", "=", "probs", ")", "\n", "", "if", "\"Solarize\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "solarize", "(", "solarize", "=", "parameters", "[", "\"Solarize\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "\n", "probs", "=", "probs", ")", "\n", "\n", "", "return", "data", ",", "target", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL._save_checkpoint": [[180, 216], ["model.state_dict", "optimizer.state_dict", "os.path.join", "torch.save", "torch.save", "print", "print", "os.path.join", "print", "torch.save", "torch.save", "os.remove", "os.path.join"], "function", ["None"], ["", "def", "_save_checkpoint", "(", "iteration", ",", "model", ",", "optimizer", ",", "config", ",", "save_best", "=", "False", ",", "overwrite", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Saves the current checkpoint\n\n    Args:\n        iteration: current iteration [int]\n        model: segmentation model\n        optimizer: pytorch optimizer\n        config: configuration\n        save_best: Boolean: whether to sae only if best metric\n        overwrite: whether to overwrite if ther is an existing checkpoint\n\n    Returns:\n\n    \"\"\"", "\n", "checkpoint", "=", "{", "\n", "'iteration'", ":", "iteration", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'config'", ":", "config", ",", "\n", "}", "\n", "checkpoint", "[", "'model'", "]", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "if", "save_best", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'best_model.pth'", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "filename", ")", "\n", "print", "(", "f'\\nSaving a checkpoint: {filename} ...'", ")", "\n", "print", "(", "\"Saving current best model: best_model.pth\"", ")", "\n", "", "else", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'checkpoint-iter{iteration}.pth'", ")", "\n", "print", "(", "f'\\nSaving a checkpoint: {filename} ...'", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "filename", ")", "\n", "if", "overwrite", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'checkpoint-iter{iteration - save_checkpoint_every}.pth'", ")", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL.create_ema_model": [[218, 239], ["net_class", "net_class.parameters", "list", "list", "len", "range", "param.detach_", "model.parameters", "net_class.parameters", "mp[].data[].clone"], "function", ["None"], ["", "", "", "", "def", "create_ema_model", "(", "model", ",", "net_class", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        model: segmentation model to copy parameters from\n        net_class: segmentation model class\n\n    Returns: Segmentation model from [net_class] with same parameters than [model]\n\n    \"\"\"", "\n", "ema_model", "=", "net_class", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "for", "param", "in", "ema_model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "detach_", "(", ")", "\n", "", "mp", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "mcp", "=", "list", "(", "ema_model", ".", "parameters", "(", ")", ")", "\n", "n", "=", "len", "(", "mp", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "mcp", "[", "i", "]", ".", "data", "[", ":", "]", "=", "mp", "[", "i", "]", ".", "data", "[", ":", "]", ".", "clone", "(", ")", "\n", "\n", "", "return", "ema_model", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL.update_ema_variables": [[240, 258], ["min", "zip", "ema_model.parameters", "model.parameters"], "function", ["None"], ["", "def", "update_ema_variables", "(", "ema_model", ",", "model", ",", "alpha_teacher", ",", "iteration", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        ema_model: model to update\n        model: model from which to update parameters\n        alpha_teacher: value for weighting the ema_model\n        iteration: current iteration\n\n    Returns: ema_model, with parameters updated follwoing the exponential moving average of [model]\n\n    \"\"\"", "\n", "# Use the \"true\" average until the exponential average is more correct", "\n", "alpha_teacher", "=", "min", "(", "1", "-", "1", "/", "(", "iteration", "*", "10", "+", "1", ")", ",", "alpha_teacher", ")", "\n", "for", "ema_param", ",", "param", "in", "zip", "(", "ema_model", ".", "parameters", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "ema_param", ".", "data", "[", ":", "]", "=", "alpha_teacher", "*", "ema_param", "[", ":", "]", ".", "data", "[", ":", "]", "+", "(", "1", "-", "alpha_teacher", ")", "*", "param", "[", ":", "]", ".", "data", "[", ":", "]", "\n", "\n", "", "return", "ema_model", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL.augment_samples": [[259, 347], ["range", "trainSSL.augmentationTransform", "trainSSL.augmentationTransform", "torch.unique", "torch.unique", "classes[].cuda", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.uniform", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.uniform", "utils.transformmasks.generate_class_mask().unsqueeze().cuda", "torch.cat", "torch.cat", "len", "len", "utils.transformmasks.generate_class_mask().unsqueeze", "utils.transformmasks.generate_class_mask().unsqueeze().cuda", "torch.Tensor().long", "torch.Tensor().long", "utils.transformmasks.generate_class_mask", "utils.transformmasks.generate_class_mask().unsqueeze", "torch.Tensor", "torch.Tensor", "np.random.choice", "utils.transformmasks.generate_class_mask", "int"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augmentationTransform", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augmentationTransform", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformmasks.generate_class_mask", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformmasks.generate_class_mask"], ["", "def", "augment_samples", "(", "images", ",", "labels", ",", "probs", ",", "do_classmix", ",", "batch_size", ",", "ignore_label", ",", "weak", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Perform data augmentation\n\n    Args:\n        images: BxCxWxH images to augment\n        labels:  BxWxH labels to augment\n        probs:  BxWxH probability maps to augment\n        do_classmix: whether to apply classmix augmentation\n        batch_size: batch size\n        ignore_label: ignore class value\n        weak: whether to perform weak or strong augmentation\n\n    Returns:\n        augmented data, augmented labels, augmented probs\n\n    \"\"\"", "\n", "\n", "if", "do_classmix", ":", "\n", "# ClassMix: Get mask for image A", "\n", "        ", "for", "image_i", "in", "range", "(", "batch_size", ")", ":", "# for each image", "\n", "            ", "classes", "=", "torch", ".", "unique", "(", "labels", "[", "image_i", "]", ")", "# get unique classes in pseudolabel A", "\n", "nclasses", "=", "classes", ".", "shape", "[", "0", "]", "\n", "\n", "# remove ignore class", "\n", "if", "ignore_label", "in", "classes", "and", "len", "(", "classes", ")", ">", "1", "and", "nclasses", ">", "1", ":", "\n", "                ", "classes", "=", "classes", "[", "classes", "!=", "ignore_label", "]", "\n", "nclasses", "=", "nclasses", "-", "1", "\n", "\n", "", "if", "dataset", "==", "'pascal_voc'", ":", "# if voc dataaset, remove class 0, background", "\n", "                ", "if", "0", "in", "classes", "and", "len", "(", "classes", ")", ">", "1", "and", "nclasses", ">", "1", ":", "\n", "                    ", "classes", "=", "classes", "[", "classes", "!=", "0", "]", "\n", "nclasses", "=", "nclasses", "-", "1", "\n", "\n", "# pick half of the classes randomly", "\n", "", "", "classes", "=", "(", "classes", "[", "torch", ".", "Tensor", "(", "\n", "np", ".", "random", ".", "choice", "(", "nclasses", ",", "int", "(", "(", "(", "nclasses", "-", "nclasses", "%", "2", ")", "/", "2", ")", "+", "1", ")", ",", "replace", "=", "False", ")", ")", ".", "long", "(", ")", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "# acumulate masks", "\n", "if", "image_i", "==", "0", ":", "\n", "                ", "MixMask", "=", "transformmasks", ".", "generate_class_mask", "(", "labels", "[", "image_i", "]", ",", "classes", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "MixMask", "=", "torch", ".", "cat", "(", "\n", "(", "MixMask", ",", "transformmasks", ".", "generate_class_mask", "(", "labels", "[", "image_i", "]", ",", "classes", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "\n", "", "", "params", "=", "{", "\"Mix\"", ":", "MixMask", "}", "\n", "", "else", ":", "\n", "        ", "params", "=", "{", "}", "\n", "\n", "", "if", "weak", ":", "\n", "        ", "params", "[", "\"flip\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.5", "\n", "params", "[", "\"ColorJitter\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.2", "\n", "params", "[", "\"GaussianBlur\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.", "\n", "params", "[", "\"Grayscale\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.0", "\n", "params", "[", "\"Solarize\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.0", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "scale", "=", "random", ".", "uniform", "(", "0.75", ",", "1.75", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "1", "\n", "", "params", "[", "\"RandomScaleCrop\"", "]", "=", "scale", "\n", "\n", "# Apply strong augmentations to unlabeled images", "\n", "image_aug", ",", "labels_aug", ",", "probs_aug", "=", "augmentationTransform", "(", "params", ",", "\n", "data", "=", "images", ",", "target", "=", "labels", ",", "\n", "probs", "=", "probs", ",", "jitter_vale", "=", "0.125", ",", "\n", "min_sigma", "=", "0.1", ",", "max_sigma", "=", "1.5", ",", "\n", "ignore_label", "=", "ignore_label", ")", "\n", "", "else", ":", "\n", "        ", "params", "[", "\"flip\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.5", "\n", "params", "[", "\"ColorJitter\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.8", "\n", "params", "[", "\"GaussianBlur\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.2", "\n", "params", "[", "\"Grayscale\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.0", "\n", "params", "[", "\"Solarize\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.0", "\n", "if", "random", ".", "random", "(", ")", "<", "0.80", ":", "\n", "            ", "scale", "=", "random", ".", "uniform", "(", "0.75", ",", "1.75", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "1", "\n", "", "params", "[", "\"RandomScaleCrop\"", "]", "=", "scale", "\n", "\n", "# Apply strong augmentations to unlabeled images", "\n", "image_aug", ",", "labels_aug", ",", "probs_aug", "=", "augmentationTransform", "(", "params", ",", "\n", "data", "=", "images", ",", "target", "=", "labels", ",", "\n", "probs", "=", "probs", ",", "jitter_vale", "=", "0.25", ",", "\n", "min_sigma", "=", "0.1", ",", "max_sigma", "=", "1.5", ",", "\n", "ignore_label", "=", "ignore_label", ")", "\n", "\n", "", "return", "image_aug", ",", "labels_aug", ",", "probs_aug", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL.main": [[348, 763], ["print", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "np.random.seed", "random.seed", "int", "int", "len", "print", "print", "utils.class_balancing.ClassBalancing", "utils.feature_memory.FeatureMemory", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "iter", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "iter", "utils.loss.CrossEntropy2d().cuda", "Res_Deeplab", "model.cuda.state_dict().copy", "model.state_dict().copy.items", "model.cuda.load_state_dict", "trainSSL.Learning_Rate_Object", "torch.optim.SGD", "torch.optim.SGD", "trainSSL.create_ema_model", "ema_model.cuda.train", "ema_model.cuda.cuda", "model.cuda.train", "model.cuda.cuda", "pickle.dump", "torch.Upsample", "range", "trainSSL._save_checkpoint", "model.cuda.eval", "evaluateSSL.evaluate", "model.cuda.train", "torch.load", "torch.load", "model.cuda.load_state_dict", "model.cuda.cuda", "trainSSL.update_BN_weak_unlabeled_data", "model.cuda.eval", "evaluateSSL.evaluate", "print", "print", "timeit.default_timer", "print", "data.get_loader", "data.get_data_path", "data.get_loader.", "pickle.load", "print", "np.arange", "np.random.shuffle", "torch.utils.model_zoo.load_url", "model.cuda.optim_parameters", "os.path.exists", "os.makedirs", "open", "json.dump", "open", "model.cuda.train", "torch.optim.SGD.zero_grad", "trainSSL.adjust_learning_rate", "images.cuda.cuda", "labels.cuda.cuda", "unlabeled_images.cuda.cuda", "model.cuda.train", "trainSSL.augment_samples", "trainSSL.augment_samples", "trainSSL.augment_samples", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.cuda.", "nn.Upsample.", "model.cuda.", "nn.Upsample.", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "CrossEntropy2d().cuda.", "utils.loss.CrossEntropyLoss2dPixelWiseWeighted().cuda", "CrossEntropyLoss2dPixelWiseWeighted().cuda.", "loss.item", "loss.backward", "torch.optim.SGD.step", "trainSSL.update_ema_variables", "trainSSL._save_checkpoint", "os.path.join", "trainSSL._save_checkpoint", "data.get_loader", "data.get_data_path", "data.get_loader.", "int", "int", "open", "utils.loss.CrossEntropy2d", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "model.cuda.state_dict", "new_params[].copy_", "os.path.join", "next", "next", "torch.no_grad", "torch.no_grad", "nn.Upsample.detach", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "utils.class_balancing.ClassBalancing.add_frequencies", "normalize", "normalize", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "trainSSL.sigmoid_ramp_up", "torch.ones().cuda", "torch.ones().cuda", "torch.pow", "torch.pow", "torch.functional.interpolate().squeeze", "torch.functional.interpolate().squeeze", "torch.functional.interpolate().squeeze", "labeled_features_ema.permute", "utils.feature_memory.FeatureMemory.add_features_from_sample_learned", "labeled_features.permute", "model.cuda.projection_head", "model.cuda.prediction_head", "contrastive_losses.contrastive_class_to_class_learned_memory", "torch.functional.interpolate().squeeze", "features_joined_unlabeled.permute.permute", "model.cuda.projection_head", "model.cuda.prediction_head", "contrastive_losses.contrastive_class_to_class_learned_memory", "print", "model.cuda.eval", "evaluateSSL.evaluate", "model.cuda.train", "data.augmentations.Compose", "data.augmentations.Compose", "param.size", "saved_state_dict[].size", "next", "iter", "next", "next", "iter", "next", "ema_model.cuda.", "model.cuda.eval", "model.cuda.", "model.cuda.train", "labels.cuda.cpu().numpy", "pseudo_label.cpu().numpy", "random.random", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda.float", "utils.loss.CrossEntropyLoss2dPixelWiseWeighted", "torch.cat.detach", "trainSSL.entropy_loss", "torch.no_grad", "torch.no_grad", "nn.Upsample.", "torch.max", "torch.max", "torch.no_grad", "torch.no_grad", "trainSSL._save_checkpoint", "trainSSL._save_checkpoint", "print", "torch.load", "torch.load", "model.cuda.load_state_dict", "trainSSL.create_ema_model", "ema_model.cuda.train", "ema_model.cuda.cuda", "model.cuda.train", "model.cuda.cuda", "str", "normalize", "normalize", "nn.Upsample.", "random.random", "random.random", "np.ones", "torch.from_numpy", "torch.from_numpy", "torch.ones", "torch.ones", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "ema_model.cuda.", "model.cuda.eval", "model.cuda.", "model.cuda.train", "torch.softmax", "torch.softmax", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "ema_model.cuda.projection_head", "model.cuda.eval", "model.cuda.projection_head", "model.cuda.train", "torch.functional.interpolate", "trainSSL._save_checkpoint", "trainSSL._save_checkpoint", "os.path.join", "data.augmentations.RandomCrop_city", "data.augmentations.RandomCrop_city_highres", "labels.cuda.cpu", "pseudo_label.cpu", "utils.class_balancing.ClassBalancing.get_weights", "torch.from_numpy().cuda.float", "normalize", "normalize", "labels_aug.float().unsqueeze", "label_prediction_ema.float().unsqueeze", "probability_prediction_ema.float().unsqueeze", "torch.cat.float().unsqueeze", "math.cos", "labels_aug.float", "label_prediction_ema.float", "probability_prediction_ema.float", "torch.cat.float"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.Res_Deeplab", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.create_ema_model", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.evaluate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.update_BN_weak_unlabeled_data", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.evaluate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_loader", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_data_path", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet.optim_parameters", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.city_utils.adjust_learning_rate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augment_samples", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augment_samples", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augment_samples", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.update_ema_variables", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_loader", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_data_path", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.add_frequencies", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.sigmoid_ramp_up", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.feature_memory.FeatureMemory.add_features_from_sample_learned", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.contrastive_losses.contrastive_class_to_class_learned_memory", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.contrastive_losses.contrastive_class_to_class_learned_memory", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.evaluate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.entropy_loss", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.create_ema_model", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.get_weights"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "config", ")", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "manual_seed", "(", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "random", ".", "seed", "(", "random_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "if", "pretraining", "==", "'COCO'", ":", "# depending the pretraining, normalize with bgr or rgb", "\n", "        ", "from", "utils", ".", "transformsgpu", "import", "normalize_bgr", "as", "normalize", "\n", "", "else", ":", "\n", "        ", "from", "utils", ".", "transformsgpu", "import", "normalize_rgb", "as", "normalize", "\n", "\n", "", "batch_size_unlabeled", "=", "int", "(", "batch_size", "/", "2", ")", "# because of augmentation anchoring, 2 augmentations per sample", "\n", "batch_size_labeled", "=", "int", "(", "batch_size", "*", "1", ")", "\n", "assert", "batch_size_unlabeled", ">=", "2", ",", "\"batch size should be higher than 2\"", "\n", "assert", "batch_size_labeled", ">=", "2", ",", "\"batch size should be higher than 2\"", "\n", "RAMP_UP_ITERS", "=", "2000", "# iterations until contrastive and self-training are taken into account", "\n", "\n", "# DATASETS / LOADERS", "\n", "if", "dataset", "==", "'pascal_voc'", ":", "\n", "        ", "data_loader", "=", "get_loader", "(", "dataset", ")", "\n", "data_path", "=", "get_data_path", "(", "dataset", ")", "\n", "train_dataset", "=", "data_loader", "(", "data_path", ",", "crop_size", "=", "input_size", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "pretraining", "=", "pretraining", ")", "\n", "\n", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "data_loader", "=", "get_loader", "(", "'cityscapes'", ")", "\n", "data_path", "=", "get_data_path", "(", "'cityscapes'", ")", "\n", "if", "deeplabv2", ":", "\n", "            ", "data_aug", "=", "Compose", "(", "[", "RandomCrop_city", "(", "input_size", ")", "]", ")", "\n", "", "else", ":", "# for deeplabv3 original resolution", "\n", "            ", "data_aug", "=", "Compose", "(", "[", "RandomCrop_city_highres", "(", "input_size", ")", "]", ")", "\n", "", "train_dataset", "=", "data_loader", "(", "data_path", ",", "is_transform", "=", "True", ",", "augmentations", "=", "data_aug", ",", "img_size", "=", "input_size", ",", "pretraining", "=", "pretraining", ")", "\n", "\n", "", "train_dataset_size", "=", "len", "(", "train_dataset", ")", "\n", "print", "(", "'dataset size: '", ",", "train_dataset_size", ")", "\n", "\n", "partial_size", "=", "labeled_samples", "\n", "print", "(", "'Training on number of samples:'", ",", "partial_size", ")", "\n", "\n", "# class weighting  taken unlabeled data into acount in an incremental fashion.", "\n", "class_weights_curr", "=", "ClassBalancing", "(", "labeled_iters", "=", "int", "(", "labeled_samples", "/", "batch_size_labeled", ")", ",", "\n", "unlabeled_iters", "=", "int", "(", "\n", "(", "train_dataset_size", "-", "labeled_samples", ")", "/", "batch_size_unlabeled", ")", ",", "\n", "n_classes", "=", "num_classes", ")", "\n", "# Memory Bank", "\n", "feature_memory", "=", "FeatureMemory", "(", "num_samples", "=", "labeled_samples", ",", "dataset", "=", "dataset", ",", "memory_per_class", "=", "256", ",", "feature_size", "=", "256", ",", "n_classes", "=", "num_classes", ")", "\n", "\n", "# select the partition", "\n", "if", "split_id", "is", "not", "None", ":", "\n", "        ", "train_ids", "=", "pickle", ".", "load", "(", "open", "(", "split_id", ",", "'rb'", ")", ")", "\n", "print", "(", "'loading train ids from {}'", ".", "format", "(", "split_id", ")", ")", "\n", "", "else", ":", "\n", "        ", "train_ids", "=", "np", ".", "arange", "(", "train_dataset_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_ids", ")", "\n", "\n", "# Samplers for labeled data", "\n", "", "train_sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_ids", "[", ":", "partial_size", "]", ")", "\n", "trainloader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size_labeled", ",", "sampler", "=", "train_sampler", ",", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "trainloader_iter", "=", "iter", "(", "trainloader", ")", "\n", "\n", "# Samplers for unlabeled data", "\n", "train_remain_sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_ids", "[", "partial_size", ":", "]", ")", "\n", "trainloader_remain", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size_unlabeled", ",", "sampler", "=", "train_remain_sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "trainloader_remain_iter", "=", "iter", "(", "trainloader_remain", ")", "\n", "\n", "# supervised loss", "\n", "supervised_loss", "=", "CrossEntropy2d", "(", "ignore_label", "=", "ignore_label", ")", ".", "cuda", "(", ")", "\n", "\n", "''' Deeplab model '''", "\n", "# Define network", "\n", "if", "deeplabv2", ":", "\n", "        ", "if", "pretraining", "==", "'COCO'", ":", "# coco and imagenet resnet architectures differ a little, just on how to do the stride", "\n", "            ", "from", "model", ".", "deeplabv2", "import", "Res_Deeplab", "\n", "", "else", ":", "# imagenet pretrained (more modern modification)", "\n", "            ", "from", "model", ".", "deeplabv2_imagenet", "import", "Res_Deeplab", "\n", "\n", "# load pretrained parameters", "\n", "", "if", "pretraining", "==", "'COCO'", ":", "\n", "            ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "'http://vllab1.ucmerced.edu/~whung/adv-semi-seg/resnet101COCO-41f33a49.pth'", ")", "# COCO pretraining", "\n", "", "else", ":", "\n", "            ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth'", ")", "# iamgenet pretrainning", "\n", "\n", "", "", "else", ":", "\n", "        ", "from", "model", ".", "deeplabv3", "import", "Res_Deeplab50", "as", "Res_Deeplab", "\n", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "'https://download.pytorch.org/models/resnet50-19c8e357.pth'", ")", "# iamgenet pretrainning", "\n", "\n", "# create network", "\n", "", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "# Copy loaded parameters to model", "\n", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "name", ",", "param", "in", "new_params", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", "in", "saved_state_dict", "and", "param", ".", "size", "(", ")", "==", "saved_state_dict", "[", "name", "]", ".", "size", "(", ")", ":", "\n", "            ", "new_params", "[", "name", "]", ".", "copy_", "(", "saved_state_dict", "[", "name", "]", ")", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "\n", "\n", "# Optimizer for segmentation network", "\n", "learning_rate_object", "=", "Learning_Rate_Object", "(", "config", "[", "'training'", "]", "[", "'learning_rate'", "]", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "learning_rate_object", ")", ",", "\n", "lr", "=", "learning_rate", ",", "momentum", "=", "momentum", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "ema_model", "=", "create_ema_model", "(", "model", ",", "Res_Deeplab", ")", "\n", "ema_model", ".", "train", "(", ")", "\n", "ema_model", "=", "ema_model", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "with", "open", "(", "checkpoint_dir", "+", "'/config.json'", ",", "'w'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "config", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "", "pickle", ".", "dump", "(", "train_ids", ",", "open", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'train_split.pkl'", ")", ",", "'wb'", ")", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size", "[", "0", "]", ",", "input_size", "[", "1", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "epochs_since_start", "=", "0", "\n", "start_iteration", "=", "0", "\n", "best_mIoU", "=", "0", "# best metric while training", "\n", "iters_without_improve", "=", "0", "\n", "\n", "# TRAINING", "\n", "for", "i_iter", "in", "range", "(", "start_iteration", ",", "num_iterations", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "# set mode to training", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "loss_l_value", "=", "0.", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", "\n", "\n", "''' LABELED SAMPLES '''", "\n", "# Get batch", "\n", "try", ":", "\n", "            ", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "if", "batch", "[", "0", "]", ".", "shape", "[", "0", "]", "!=", "batch_size_labeled", ":", "\n", "                ", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "", "", "except", ":", "# finish epoch, rebuild the iterator", "\n", "            ", "epochs_since_start", "=", "epochs_since_start", "+", "1", "\n", "# print('Epochs since start: ',epochs_since_start)", "\n", "trainloader_iter", "=", "iter", "(", "trainloader", ")", "\n", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "\n", "", "images", ",", "labels", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "''' UNLABELED SAMPLES '''", "\n", "try", ":", "\n", "            ", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "if", "batch_remain", "[", "0", "]", ".", "shape", "[", "0", "]", "!=", "batch_size_unlabeled", ":", "\n", "                ", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "", "", "except", ":", "\n", "            ", "trainloader_remain_iter", "=", "iter", "(", "trainloader_remain", ")", "\n", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "\n", "# Unlabeled", "\n", "", "unlabeled_images", ",", "_", ",", "_", ",", "_", ",", "_", "=", "batch_remain", "\n", "unlabeled_images", "=", "unlabeled_images", ".", "cuda", "(", ")", "\n", "\n", "# Create pseudolabels", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "use_teacher", ":", "\n", "                ", "logits_u_w", ",", "features_weak_unlabeled", "=", "ema_model", "(", "normalize", "(", "unlabeled_images", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "logits_u_w", ",", "features_weak_unlabeled", "=", "model", "(", "normalize", "(", "unlabeled_images", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "", "logits_u_w", "=", "interp", "(", "logits_u_w", ")", ".", "detach", "(", ")", "# prediction unlabeled", "\n", "softmax_u_w", "=", "torch", ".", "softmax", "(", "logits_u_w", ",", "dim", "=", "1", ")", "\n", "max_probs", ",", "pseudo_label", "=", "torch", ".", "max", "(", "softmax_u_w", ",", "dim", "=", "1", ")", "# Get pseudolabels", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "if", "dataset", "==", "'cityscapes'", ":", "\n", "            ", "class_weights_curr", ".", "add_frequencies", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "pseudo_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "\n", "", "images_aug", ",", "labels_aug", ",", "_", ",", "_", "=", "augment_samples", "(", "images", ",", "labels", ",", "None", ",", "random", ".", "random", "(", ")", "<", "0.2", ",", "batch_size_labeled", ",", "ignore_label", ",", "weak", "=", "True", ")", "\n", "\n", "'''\n        UNLABELED DATA\n        '''", "\n", "unlabeled_images_aug1", ",", "pseudo_label1", ",", "max_probs1", ",", "unlabeled_aug1_params", "=", "augment_samples", "(", "unlabeled_images", ",", "\n", "pseudo_label", ",", "\n", "max_probs", ",", "\n", "i_iter", ">", "RAMP_UP_ITERS", "and", "random", ".", "random", "(", ")", "<", "0.75", ",", "\n", "batch_size_unlabeled", ",", "\n", "ignore_label", ")", "\n", "\n", "\n", "unlabeled_images_aug2", ",", "pseudo_label2", ",", "max_probs2", ",", "unlabeled_aug2_params", "=", "augment_samples", "(", "unlabeled_images", ",", "\n", "pseudo_label", ",", "\n", "max_probs", ",", "\n", "i_iter", ">", "RAMP_UP_ITERS", "and", "random", ".", "random", "(", ")", "<", "0.75", ",", "\n", "batch_size_unlabeled", ",", "\n", "ignore_label", ")", "\n", "# concatenate two augmentations of unlabeled data", "\n", "joined_unlabeled", "=", "torch", ".", "cat", "(", "(", "unlabeled_images_aug1", ",", "unlabeled_images_aug2", ")", ",", "dim", "=", "0", ")", "\n", "joined_pseudolabels", "=", "torch", ".", "cat", "(", "(", "pseudo_label1", ",", "pseudo_label2", ")", ",", "dim", "=", "0", ")", "\n", "joined_maxprobs", "=", "torch", ".", "cat", "(", "(", "max_probs1", ",", "max_probs2", ")", ",", "dim", "=", "0", ")", "\n", "\n", "pred_joined_unlabeled", ",", "features_joined_unlabeled", "=", "model", "(", "normalize", "(", "joined_unlabeled", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "pred_joined_unlabeled", "=", "interp", "(", "pred_joined_unlabeled", ")", "\n", "\n", "# labeled data", "\n", "labeled_pred", ",", "labeled_features", "=", "model", "(", "normalize", "(", "images_aug", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "labeled_pred", "=", "interp", "(", "labeled_pred", ")", "\n", "\n", "# apply class balance for cityspcaes dataset", "\n", "class_weights", "=", "torch", ".", "from_numpy", "(", "np", ".", "ones", "(", "(", "num_classes", ")", ")", ")", ".", "cuda", "(", ")", "\n", "if", "i_iter", ">", "RAMP_UP_ITERS", "and", "dataset", "==", "'cityscapes'", ":", "\n", "            ", "class_weights", "=", "torch", ".", "from_numpy", "(", "\n", "class_weights_curr", ".", "get_weights", "(", "num_iterations", ",", "only_labeled", "=", "False", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "", "loss", "=", "0", "\n", "\n", "# SUPERVISED SEGMENTATION", "\n", "labeled_loss", "=", "supervised_loss", "(", "labeled_pred", ",", "labels_aug", ",", "weight", "=", "class_weights", ".", "float", "(", ")", ")", "\n", "loss", "=", "loss", "+", "labeled_loss", "\n", "\n", "# SELF-SUPERVISED SEGMENTATION", "\n", "unlabeled_loss", "=", "CrossEntropyLoss2dPixelWiseWeighted", "(", "ignore_index", "=", "ignore_label", ",", "weight", "=", "class_weights", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "#", "\n", "\n", "# Pseudo-label weighting", "\n", "pixelWiseWeight", "=", "sigmoid_ramp_up", "(", "i_iter", ",", "RAMP_UP_ITERS", ")", "*", "torch", ".", "ones", "(", "joined_maxprobs", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "pixelWiseWeight", "=", "pixelWiseWeight", "*", "torch", ".", "pow", "(", "joined_maxprobs", ".", "detach", "(", ")", ",", "6", ")", "\n", "\n", "# Pseudo-label loss", "\n", "loss_ce_unlabeled", "=", "unlabeled_loss", "(", "pred_joined_unlabeled", ",", "joined_pseudolabels", ",", "pixelWiseWeight", ")", "\n", "\n", "loss", "=", "loss", "+", "loss_ce_unlabeled", "\n", "\n", "# entropy loss", "\n", "valid_mask", "=", "(", "joined_pseudolabels", "!=", "ignore_label", ")", ".", "unsqueeze", "(", "1", ")", "\n", "loss", "=", "loss", "+", "entropy_loss", "(", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "pred_joined_unlabeled", ",", "dim", "=", "1", ")", ",", "valid_mask", ")", "*", "0.01", "\n", "\n", "# CONTRASTIVE LEARNING", "\n", "if", "i_iter", ">", "RAMP_UP_ITERS", "-", "1000", ":", "\n", "# Build Memory Bank 1000 iters before starting to do contrastive", "\n", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Get feature vectors from labeled images with EMA model", "\n", "                ", "if", "use_teacher", ":", "\n", "                    ", "labeled_pred_ema", ",", "labeled_features_ema", "=", "ema_model", "(", "normalize", "(", "images_aug", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "\n", "labeled_pred_ema", ",", "labeled_features_ema", "=", "model", "(", "normalize", "(", "images_aug", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "", "labeled_pred_ema", "=", "interp", "(", "labeled_pred_ema", ")", "\n", "probability_prediction_ema", ",", "label_prediction_ema", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "labeled_pred_ema", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "# Get pseudolabels", "\n", "\n", "# Resize labels, predictions and probabilities,  to feature map resolution", "\n", "", "labels_down", "=", "nn", ".", "functional", ".", "interpolate", "(", "labels_aug", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "size", "=", "(", "labeled_features_ema", ".", "shape", "[", "2", "]", ",", "labeled_features_ema", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "1", ")", "\n", "label_prediction_down", "=", "nn", ".", "functional", ".", "interpolate", "(", "label_prediction_ema", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "size", "=", "(", "labeled_features_ema", ".", "shape", "[", "2", "]", ",", "labeled_features_ema", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "1", ")", "\n", "probability_prediction_down", "=", "nn", ".", "functional", ".", "interpolate", "(", "probability_prediction_ema", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "size", "=", "(", "labeled_features_ema", ".", "shape", "[", "2", "]", ",", "labeled_features_ema", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "\n", "# get mask where the labeled predictions are correct and have a confidence higher than 0.95", "\n", "mask_prediction_correctly", "=", "(", "(", "label_prediction_down", "==", "labels_down", ")", ".", "float", "(", ")", "*", "(", "probability_prediction_down", ">", "0.95", ")", ".", "float", "(", ")", ")", ".", "bool", "(", ")", "\n", "\n", "# Apply the filter mask to the features and its labels", "\n", "labeled_features_correct", "=", "labeled_features_ema", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "labels_down_correct", "=", "labels_down", "[", "mask_prediction_correctly", "]", "\n", "labeled_features_correct", "=", "labeled_features_correct", "[", "mask_prediction_correctly", ",", "...", "]", "\n", "\n", "# get projected features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "use_teacher", ":", "\n", "                    ", "proj_labeled_features_correct", "=", "ema_model", ".", "projection_head", "(", "labeled_features_correct", ")", "\n", "", "else", ":", "\n", "                    ", "model", ".", "eval", "(", ")", "\n", "proj_labeled_features_correct", "=", "model", ".", "projection_head", "(", "labeled_features_correct", ")", "\n", "model", ".", "train", "(", ")", "\n", "# updated memory bank", "\n", "", "", "feature_memory", ".", "add_features_from_sample_learned", "(", "ema_model", ",", "proj_labeled_features_correct", ",", "labels_down_correct", ",", "batch_size_labeled", ")", "\n", "\n", "\n", "\n", "", "if", "i_iter", ">", "RAMP_UP_ITERS", ":", "\n", "            ", "'''\n            CONTRASTIVE LEARNING ON LABELED DATA. Force features from labeled samples, to be similar to other features from the same class (which also leads to good predictions\n            '''", "\n", "# mask features that do not have ignore label in the labels (zero-padding because of data augmentation like resize/crop)", "\n", "mask_prediction_correctly", "=", "(", "labels_down", "!=", "ignore_label", ")", "\n", "\n", "labeled_features_all", "=", "labeled_features", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "labels_down_all", "=", "labels_down", "[", "mask_prediction_correctly", "]", "\n", "labeled_features_all", "=", "labeled_features_all", "[", "mask_prediction_correctly", ",", "...", "]", "\n", "\n", "# get predicted features", "\n", "proj_labeled_features_all", "=", "model", ".", "projection_head", "(", "labeled_features_all", ")", "\n", "pred_labeled_features_all", "=", "model", ".", "prediction_head", "(", "proj_labeled_features_all", ")", "\n", "\n", "# Apply contrastive learning loss", "\n", "loss_contr_labeled", "=", "contrastive_class_to_class_learned_memory", "(", "model", ",", "pred_labeled_features_all", ",", "labels_down_all", ",", "\n", "num_classes", ",", "feature_memory", ".", "memory", ")", "\n", "\n", "loss", "=", "loss", "+", "loss_contr_labeled", "*", "0.1", "\n", "\n", "\n", "'''\n            CONTRASTIVE LEARNING ON UNLABELED DATA. align unlabeled features to labeled features\n            '''", "\n", "joined_pseudolabels_down", "=", "nn", ".", "functional", ".", "interpolate", "(", "joined_pseudolabels", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "size", "=", "(", "features_joined_unlabeled", ".", "shape", "[", "2", "]", ",", "features_joined_unlabeled", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# mask features that do not have ignore label in the labels (zero-padding because of data augmentation like resize/crop)", "\n", "mask", "=", "(", "joined_pseudolabels_down", "!=", "ignore_label", ")", "\n", "\n", "features_joined_unlabeled", "=", "features_joined_unlabeled", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "features_joined_unlabeled", "=", "features_joined_unlabeled", "[", "mask", ",", "...", "]", "\n", "joined_pseudolabels_down", "=", "joined_pseudolabels_down", "[", "mask", "]", "\n", "\n", "# get predicted features", "\n", "proj_feat_unlabeled", "=", "model", ".", "projection_head", "(", "features_joined_unlabeled", ")", "\n", "pred_feat_unlabeled", "=", "model", ".", "prediction_head", "(", "proj_feat_unlabeled", ")", "\n", "\n", "# Apply contrastive learning loss", "\n", "loss_contr_unlabeled", "=", "contrastive_class_to_class_learned_memory", "(", "model", ",", "pred_feat_unlabeled", ",", "joined_pseudolabels_down", ",", "\n", "num_classes", ",", "feature_memory", ".", "memory", ")", "\n", "\n", "loss", "=", "loss", "+", "loss_contr_unlabeled", "*", "0.1", "\n", "\n", "\n", "", "loss_l_value", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "# optimize", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "m", "=", "1", "-", "(", "1", "-", "0.995", ")", "*", "(", "math", ".", "cos", "(", "math", ".", "pi", "*", "i_iter", "/", "num_iterations", ")", "+", "1", ")", "/", "2", "\n", "ema_model", "=", "update_ema_variables", "(", "ema_model", "=", "ema_model", ",", "model", "=", "model", ",", "alpha_teacher", "=", "m", ",", "iteration", "=", "i_iter", ")", "\n", "\n", "\n", "if", "i_iter", "%", "save_checkpoint_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "if", "save_teacher", ":", "\n", "                ", "_save_checkpoint", "(", "i_iter", ",", "ema_model", ",", "optimizer", ",", "config", ")", "\n", "", "else", ":", "\n", "                ", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ")", "\n", "\n", "", "", "if", "i_iter", "%", "val_per_iter", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'iter = {0:6d}/{1:6d}'", ".", "format", "(", "i_iter", ",", "num_iterations", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "mIoU", ",", "eval_loss", "=", "evaluate", "(", "model", ",", "dataset", ",", "deeplabv2", "=", "deeplabv2", ",", "ignore_label", "=", "ignore_label", ",", "save_dir", "=", "checkpoint_dir", ",", "pretraining", "=", "pretraining", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "mIoU", ">", "best_mIoU", ":", "\n", "                ", "best_mIoU", "=", "mIoU", "\n", "if", "save_teacher", ":", "\n", "                    ", "_save_checkpoint", "(", "i_iter", ",", "ema_model", ",", "optimizer", ",", "config", ",", "save_best", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "save_best", "=", "True", ")", "\n", "", "iters_without_improve", "=", "0", "\n", "", "else", ":", "\n", "                ", "iters_without_improve", "+=", "val_per_iter", "\n", "\n", "", "'''\n            if the performance has not improve in N iterations, try to reload best model to optimize again with a lower LR\n            Simulating an iterative training'''", "\n", "if", "iters_without_improve", ">", "num_iterations", "/", "5.", ":", "\n", "                ", "print", "(", "'Re-loading a previous best model'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'best_model.pth'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "ema_model", "=", "create_ema_model", "(", "model", ",", "Res_Deeplab", ")", "\n", "ema_model", ".", "train", "(", ")", "\n", "ema_model", "=", "ema_model", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "iters_without_improve", "=", "0", "# reset timer", "\n", "\n", "", "", "", "_save_checkpoint", "(", "num_iterations", ",", "model", ",", "optimizer", ",", "config", ")", "\n", "\n", "# FINISH TRAINING, evaluate again", "\n", "model", ".", "eval", "(", ")", "\n", "mIoU", ",", "eval_loss", "=", "evaluate", "(", "model", ",", "dataset", ",", "deeplabv2", "=", "deeplabv2", ",", "ignore_label", "=", "ignore_label", ",", "save_dir", "=", "checkpoint_dir", ",", "pretraining", "=", "pretraining", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "mIoU", ">", "best_mIoU", "and", "save_best_model", ":", "\n", "        ", "best_mIoU", "=", "mIoU", "\n", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "save_best", "=", "True", ")", "\n", "\n", "# TRY IMPROVING BEST MODEL WITH EMA MODEL OR UPDATING BN STATS", "\n", "\n", "# Load best model", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'best_model.pth'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "model", "=", "update_BN_weak_unlabeled_data", "(", "model", ",", "normalize", ",", "batch_size_unlabeled", ",", "trainloader_remain", ")", "\n", "model", ".", "eval", "(", ")", "\n", "mIoU", ",", "eval_loss", "=", "evaluate", "(", "model", ",", "dataset", ",", "deeplabv2", "=", "deeplabv2", ",", "ignore_label", "=", "ignore_label", ",", "save_dir", "=", "checkpoint_dir", ",", "pretraining", "=", "pretraining", ")", "\n", "if", "mIoU", ">", "best_mIoU", "and", "save_best_model", ":", "\n", "        ", "best_mIoU", "=", "mIoU", "\n", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "save_best", "=", "True", ")", "\n", "\n", "", "print", "(", "'BEST MIOU'", ")", "\n", "print", "(", "best_mIoU", ")", "\n", "\n", "end", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "'Total time: '", "+", "str", "(", "end", "-", "start", ")", "+", "' seconds'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.Learning_Rate_Object.__init__": [[33, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "learning_rate", ")", ":", "\n", "        ", "self", ".", "learning_rate", "=", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.entropy_loss": [[36, 53], ["v.size", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "v.dim", "torch.log2", "torch.log2", "mask.float", "mask.float", "torch.sum", "torch.sum", "np.log2"], "function", ["None"], ["", "", "def", "entropy_loss", "(", "v", ",", "mask", ")", ":", "\n", "    ", "\"\"\"\n        Entropy loss for probabilistic prediction vectors\n        input: batch_size x channels x h x w\n        output: batch_size x 1 x h x w\n    \"\"\"", "\n", "assert", "v", ".", "dim", "(", ")", "==", "4", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "v", ".", "size", "(", ")", "\n", "\n", "loss_image", "=", "torch", ".", "mul", "(", "v", ",", "torch", ".", "log2", "(", "v", "+", "1e-30", ")", ")", "\n", "loss_image", "=", "torch", ".", "sum", "(", "loss_image", ",", "dim", "=", "1", ")", "\n", "loss_image", "=", "mask", ".", "float", "(", ")", "*", "loss_image", "\n", "\n", "\n", "percentage_valid_points", "=", "torch", ".", "mean", "(", "mask", ".", "float", "(", ")", ")", "\n", "\n", "return", "-", "torch", ".", "sum", "(", "loss_image", ")", "/", "(", "n", "*", "h", "*", "w", "*", "np", ".", "log2", "(", "c", ")", "*", "percentage_valid_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.update_BN_weak_unlabeled_data": [[54, 74], ["iter", "range", "model.train", "unlabeled_images.cuda.cuda", "model", "next", "norm_func", "next", "iter", "next"], "function", ["None"], ["", "def", "update_BN_weak_unlabeled_data", "(", "model", ",", "norm_func", ",", "batch_size", ",", "loader", ",", "iters", "=", "1000", ")", ":", "\n", "    ", "iterator", "=", "iter", "(", "loader", ")", "\n", "for", "_", "in", "range", "(", "iters", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "''' UNLABELED SAMPLES '''", "\n", "try", ":", "\n", "            ", "batch", "=", "next", "(", "iterator", ")", "\n", "if", "batch", "[", "0", "]", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "                ", "batch", "=", "next", "(", "iterator", ")", "\n", "", "", "except", ":", "\n", "            ", "iterator", "=", "iter", "(", "loader", ")", "\n", "batch", "=", "next", "(", "iterator", ")", "\n", "\n", "# Unlabeled", "\n", "", "unlabeled_images", ",", "_", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "unlabeled_images", "=", "unlabeled_images", ".", "cuda", "(", ")", "\n", "\n", "# Create pseudolabels", "\n", "_", ",", "_", "=", "model", "(", "norm_func", "(", "unlabeled_images", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.get_arguments": [[75, 87], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "\"--config\"", ",", "type", "=", "str", ",", "default", "=", "'config.json'", ",", "\n", "help", "=", "'Path to the config file (default: config.json)'", ")", "\n", "parser", ".", "add_argument", "(", "\"-r\"", ",", "\"--resume\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'Path to the .pth file to resume from (default: None)'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.lr_poly": [[89, 103], ["float", "float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        base_lr: initial learning rate\n        iter: current iteration\n        max_iter: maximum number of iterations\n        power: power value for polynomial decay\n\n    Returns: the updated learning rate with polynomial decay\n\n    \"\"\"", "\n", "\n", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "float", "(", "max_iter", ")", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.adjust_learning_rate": [[105, 119], ["trainSSL_domain_adaptation_targetCity.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        optimizer: pytorch optimizer\n        i_iter: current iteration\n\n    Returns: sets learning rate with poliynomial decay\n\n    \"\"\"", "\n", "lr", "=", "lr_poly", "(", "learning_rate", ",", "i_iter", ",", "num_iterations", ",", "lr_power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.sigmoid_ramp_up": [[121, 137], ["np.exp", "float", "float"], "function", ["None"], ["", "", "def", "sigmoid_ramp_up", "(", "iter", ",", "max_iter", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        iter: current iteration\n        max_iter: maximum number of iterations to perform the rampup\n\n    Returns:\n        returns 1 if iter >= max_iter\n        returns [0,1] incrementally from 0 to max_iters if iter < max_iter\n\n    \"\"\"", "\n", "if", "iter", ">=", "max_iter", ":", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "exp", "(", "-", "5", "*", "(", "1", "-", "float", "(", "iter", ")", "/", "float", "(", "max_iter", ")", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augmentationTransform": [[139, 180], ["utils.transformsgpu.mix", "utils.transformsgpu.random_scale_crop", "utils.transformsgpu.flip", "utils.transformsgpu.colorJitter", "utils.transformsgpu.gaussian_blur", "utils.transformsgpu.grayscale", "utils.transformsgpu.solarize"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.mix", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.random_scale_crop", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.colorJitter", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.gaussian_blur", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.grayscale", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.solarize"], ["", "", "def", "augmentationTransform", "(", "parameters", ",", "data", "=", "None", ",", "target", "=", "None", ",", "probs", "=", "None", ",", "jitter_vale", "=", "0.4", ",", "min_sigma", "=", "0.2", ",", "max_sigma", "=", "2.", ",", "ignore_label", "=", "255", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        parameters: dictionary with the augmentation configuration\n        data: BxCxWxH input data to augment\n        target: BxWxH labels to augment\n        probs: BxWxH probability map to augment\n        jitter_vale:  jitter augmentation value\n        min_sigma: min sigma value for blur\n        max_sigma: max sigma value for blur\n        ignore_label: value for ignore class\n\n    Returns:\n            augmented data, target, probs\n    \"\"\"", "\n", "assert", "(", "(", "data", "is", "not", "None", ")", "or", "(", "target", "is", "not", "None", ")", ")", "\n", "if", "\"Mix\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "mix", "(", "mask", "=", "parameters", "[", "\"Mix\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "probs", "=", "probs", ")", "\n", "\n", "", "if", "\"RandomScaleCrop\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "random_scale_crop", "(", "scale", "=", "parameters", "[", "\"RandomScaleCrop\"", "]", ",", "data", "=", "data", ",", "\n", "target", "=", "target", ",", "probs", "=", "probs", ",", "ignore_label", "=", "ignore_label", ")", "\n", "", "if", "\"flip\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "flip", "(", "flip", "=", "parameters", "[", "\"flip\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "probs", "=", "probs", ")", "\n", "\n", "", "if", "\"ColorJitter\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "colorJitter", "(", "colorJitter", "=", "parameters", "[", "\"ColorJitter\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "\n", "probs", "=", "probs", ",", "s", "=", "jitter_vale", ")", "\n", "", "if", "\"GaussianBlur\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "gaussian_blur", "(", "blur", "=", "parameters", "[", "\"GaussianBlur\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "\n", "probs", "=", "probs", ",", "min_sigma", "=", "min_sigma", ",", "max_sigma", "=", "max_sigma", ")", "\n", "\n", "", "if", "\"Grayscale\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "grayscale", "(", "grayscale", "=", "parameters", "[", "\"Grayscale\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "\n", "probs", "=", "probs", ")", "\n", "", "if", "\"Solarize\"", "in", "parameters", ":", "\n", "        ", "data", ",", "target", ",", "probs", "=", "transformsgpu", ".", "solarize", "(", "solarize", "=", "parameters", "[", "\"Solarize\"", "]", ",", "data", "=", "data", ",", "target", "=", "target", ",", "\n", "probs", "=", "probs", ")", "\n", "\n", "", "return", "data", ",", "target", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint": [[182, 218], ["model.state_dict", "optimizer.state_dict", "os.path.join", "torch.save", "torch.save", "print", "print", "os.path.join", "print", "torch.save", "torch.save", "os.remove", "os.path.join"], "function", ["None"], ["", "def", "_save_checkpoint", "(", "iteration", ",", "model", ",", "optimizer", ",", "config", ",", "save_best", "=", "False", ",", "overwrite", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Saves the current checkpoint\n\n    Args:\n        iteration: current iteration [int]\n        model: segmentation model\n        optimizer: pytorch optimizer\n        config: configuration\n        save_best: Boolean: whether to sae only if best metric\n        overwrite: whether to overwrite if ther is an existing checkpoint\n\n    Returns:\n\n    \"\"\"", "\n", "checkpoint", "=", "{", "\n", "'iteration'", ":", "iteration", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'config'", ":", "config", ",", "\n", "}", "\n", "checkpoint", "[", "'model'", "]", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "if", "save_best", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'best_model.pth'", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "filename", ")", "\n", "print", "(", "f'\\nSaving a checkpoint: {filename} ...'", ")", "\n", "print", "(", "\"Saving current best model: best_model.pth\"", ")", "\n", "", "else", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'checkpoint-iter{iteration}.pth'", ")", "\n", "print", "(", "f'\\nSaving a checkpoint: {filename} ...'", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "filename", ")", "\n", "if", "overwrite", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'checkpoint-iter{iteration - save_checkpoint_every}.pth'", ")", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.create_ema_model": [[220, 241], ["net_class", "net_class.parameters", "list", "list", "len", "range", "param.detach_", "model.parameters", "net_class.parameters", "mp[].data[].clone"], "function", ["None"], ["", "", "", "", "def", "create_ema_model", "(", "model", ",", "net_class", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        model: segmentation model to copy parameters from\n        net_class: segmentation model class\n\n    Returns: Segmentation model from [net_class] with same parameters than [model]\n\n    \"\"\"", "\n", "ema_model", "=", "net_class", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "for", "param", "in", "ema_model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "detach_", "(", ")", "\n", "", "mp", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "mcp", "=", "list", "(", "ema_model", ".", "parameters", "(", ")", ")", "\n", "n", "=", "len", "(", "mp", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "mcp", "[", "i", "]", ".", "data", "[", ":", "]", "=", "mp", "[", "i", "]", ".", "data", "[", ":", "]", ".", "clone", "(", ")", "\n", "\n", "", "return", "ema_model", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.update_ema_variables": [[242, 259], ["min", "zip", "ema_model.parameters", "model.parameters"], "function", ["None"], ["", "def", "update_ema_variables", "(", "ema_model", ",", "model", ",", "alpha_teacher", ",", "iteration", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        ema_model: model to update\n        model: model from which to update parameters\n        alpha_teacher: value for weighting the ema_model\n        iteration: current iteration\n\n    Returns: ema_model, with parameters updated follwoing the exponential moving average of [model]\n\n    \"\"\"", "\n", "# Use the \"true\" average until the exponential average is more correct", "\n", "alpha_teacher", "=", "min", "(", "1", "-", "1", "/", "(", "iteration", "+", "1", ")", ",", "alpha_teacher", ")", "\n", "for", "ema_param", ",", "param", "in", "zip", "(", "ema_model", ".", "parameters", "(", ")", ",", "model", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "ema_param", ".", "data", "[", ":", "]", "=", "alpha_teacher", "*", "ema_param", "[", ":", "]", ".", "data", "[", ":", "]", "+", "(", "1", "-", "alpha_teacher", ")", "*", "param", "[", ":", "]", ".", "data", "[", ":", "]", "\n", "", "return", "ema_model", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augment_samples": [[260, 348], ["range", "trainSSL_domain_adaptation_targetCity.augmentationTransform", "trainSSL_domain_adaptation_targetCity.augmentationTransform", "torch.unique", "torch.unique", "classes[].cuda", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.uniform", "random.random", "random.random", "random.random", "random.random", "random.random", "random.random", "random.uniform", "utils.transformmasks.generate_class_mask().unsqueeze().cuda", "torch.cat", "torch.cat", "len", "len", "utils.transformmasks.generate_class_mask().unsqueeze", "utils.transformmasks.generate_class_mask().unsqueeze().cuda", "torch.Tensor().long", "torch.Tensor().long", "utils.transformmasks.generate_class_mask", "utils.transformmasks.generate_class_mask().unsqueeze", "torch.Tensor", "torch.Tensor", "np.random.choice", "utils.transformmasks.generate_class_mask", "int"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augmentationTransform", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augmentationTransform", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformmasks.generate_class_mask", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformmasks.generate_class_mask"], ["", "def", "augment_samples", "(", "images", ",", "labels", ",", "probs", ",", "do_classmix", ",", "batch_size", ",", "ignore_label", ",", "weak", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Perform data augmentation\n\n    Args:\n        images: BxCxWxH images to augment\n        labels:  BxWxH labels to augment\n        probs:  BxWxH probability maps to augment\n        do_classmix: whether to apply classmix augmentation\n        batch_size: batch size\n        ignore_label: ignore class value\n        weak: whether to perform weak or strong augmentation\n\n    Returns:\n        augmented data, augmented labels, augmented probs\n\n    \"\"\"", "\n", "\n", "if", "do_classmix", ":", "\n", "# ClassMix: Get mask for image A", "\n", "        ", "for", "image_i", "in", "range", "(", "batch_size", ")", ":", "# for each image", "\n", "            ", "classes", "=", "torch", ".", "unique", "(", "labels", "[", "image_i", "]", ")", "# get unique classes in pseudolabel A", "\n", "nclasses", "=", "classes", ".", "shape", "[", "0", "]", "\n", "\n", "# remove ignore class", "\n", "if", "ignore_label", "in", "classes", "and", "len", "(", "classes", ")", ">", "1", "and", "nclasses", ">", "1", ":", "\n", "                ", "classes", "=", "classes", "[", "classes", "!=", "ignore_label", "]", "\n", "nclasses", "=", "nclasses", "-", "1", "\n", "\n", "", "if", "dataset", "==", "'pascal_voc'", ":", "# if voc dataaset, remove class 0, background", "\n", "                ", "if", "0", "in", "classes", "and", "len", "(", "classes", ")", ">", "1", "and", "nclasses", ">", "1", ":", "\n", "                    ", "classes", "=", "classes", "[", "classes", "!=", "0", "]", "\n", "nclasses", "=", "nclasses", "-", "1", "\n", "\n", "# pick half of the classes randomly", "\n", "", "", "classes", "=", "(", "classes", "[", "torch", ".", "Tensor", "(", "\n", "np", ".", "random", ".", "choice", "(", "nclasses", ",", "int", "(", "(", "(", "nclasses", "-", "nclasses", "%", "2", ")", "/", "2", ")", "+", "1", ")", ",", "replace", "=", "False", ")", ")", ".", "long", "(", ")", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "# acumulate masks", "\n", "if", "image_i", "==", "0", ":", "\n", "                ", "MixMask", "=", "transformmasks", ".", "generate_class_mask", "(", "labels", "[", "image_i", "]", ",", "classes", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "MixMask", "=", "torch", ".", "cat", "(", "\n", "(", "MixMask", ",", "transformmasks", ".", "generate_class_mask", "(", "labels", "[", "image_i", "]", ",", "classes", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", ")", ")", "\n", "\n", "\n", "", "", "params", "=", "{", "\"Mix\"", ":", "MixMask", "}", "\n", "", "else", ":", "\n", "        ", "params", "=", "{", "}", "\n", "\n", "", "if", "weak", ":", "\n", "        ", "params", "[", "\"flip\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.5", "\n", "params", "[", "\"ColorJitter\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.2", "\n", "params", "[", "\"GaussianBlur\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.", "\n", "params", "[", "\"Grayscale\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.0", "\n", "params", "[", "\"Solarize\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.0", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "scale", "=", "random", ".", "uniform", "(", "0.75", ",", "1.75", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "1", "\n", "", "params", "[", "\"RandomScaleCrop\"", "]", "=", "scale", "\n", "\n", "# Apply strong augmentations to unlabeled images", "\n", "image_aug", ",", "labels_aug", ",", "probs_aug", "=", "augmentationTransform", "(", "params", ",", "\n", "data", "=", "images", ",", "target", "=", "labels", ",", "\n", "probs", "=", "probs", ",", "jitter_vale", "=", "0.125", ",", "\n", "min_sigma", "=", "0.1", ",", "max_sigma", "=", "1.5", ",", "\n", "ignore_label", "=", "ignore_label", ")", "\n", "", "else", ":", "\n", "        ", "params", "[", "\"flip\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.5", "\n", "params", "[", "\"ColorJitter\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.8", "\n", "params", "[", "\"GaussianBlur\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.2", "\n", "params", "[", "\"Grayscale\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.0", "\n", "params", "[", "\"Solarize\"", "]", "=", "random", ".", "random", "(", ")", "<", "0.0", "\n", "if", "random", ".", "random", "(", ")", "<", "0.80", ":", "\n", "            ", "scale", "=", "random", ".", "uniform", "(", "0.75", ",", "1.75", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "1", "\n", "", "params", "[", "\"RandomScaleCrop\"", "]", "=", "scale", "\n", "\n", "# Apply strong augmentations to unlabeled images", "\n", "image_aug", ",", "labels_aug", ",", "probs_aug", "=", "augmentationTransform", "(", "params", ",", "\n", "data", "=", "images", ",", "target", "=", "labels", ",", "\n", "probs", "=", "probs", ",", "jitter_vale", "=", "0.25", ",", "\n", "min_sigma", "=", "0.1", ",", "max_sigma", "=", "1.5", ",", "\n", "ignore_label", "=", "ignore_label", ")", "\n", "\n", "", "return", "image_aug", ",", "labels_aug", ",", "probs_aug", ",", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.main": [[349, 815], ["print", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "np.random.seed", "random.seed", "int", "int", "data.get_loader", "data.get_data_path", "data.augmentations.Compose", "data.get_loader.", "data.get_data_path", "data.augmentations.Compose", "data_loader_gta", "len", "print", "print", "utils.class_balancing.ClassBalancing", "utils.feature_memory.FeatureMemory", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "iter", "np.arange", "np.random.shuffle", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "iter", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "iter", "utils.loss.CrossEntropyLoss2dPixelWiseWeighted().cuda", "utils.loss.CrossEntropy2d().cuda", "Res_Deeplab", "model.cuda.state_dict().copy", "model.state_dict().copy.items", "model.cuda.load_state_dict", "trainSSL_domain_adaptation_targetCity.Learning_Rate_Object", "torch.optim.SGD", "torch.optim.SGD", "trainSSL_domain_adaptation_targetCity.create_ema_model", "ema_model.cuda.train", "ema_model.cuda.cuda", "model.cuda.train", "model.cuda.cuda", "pickle.dump", "torch.Upsample", "range", "trainSSL_domain_adaptation_targetCity._save_checkpoint", "model.cuda.eval", "evaluateSSL.evaluate", "model.cuda.train", "torch.load", "torch.load", "model.cuda.load_state_dict", "model.cuda.cuda", "trainSSL_domain_adaptation_targetCity.update_BN_weak_unlabeled_data", "model.cuda.eval", "evaluateSSL.evaluate", "model.cuda.train", "print", "print", "timeit.default_timer", "print", "pickle.load", "print", "np.arange", "np.random.shuffle", "len", "torch.utils.model_zoo.load_url", "torch.utils.model_zoo.load_url", "model.cuda.optim_parameters", "os.path.exists", "os.makedirs", "open", "json.dump", "open", "model.cuda.train", "torch.optim.SGD.zero_grad", "time.time", "trainSSL_domain_adaptation_targetCity.adjust_learning_rate", "images.cuda.cuda", "labels.cuda.cuda", "unlabeled_images.cuda.cuda", "model.cuda.train", "trainSSL_domain_adaptation_targetCity.augment_samples", "trainSSL_domain_adaptation_targetCity.augment_samples", "trainSSL_domain_adaptation_targetCity.augment_samples", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.cuda.", "nn.Upsample.", "model.cuda.", "nn.Upsample.", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "CrossEntropy2d().cuda.", "utils.loss.CrossEntropyLoss2dPixelWiseWeighted().cuda", "CrossEntropyLoss2dPixelWiseWeighted().cuda.", "loss.item", "loss.backward", "torch.optim.SGD.step", "trainSSL_domain_adaptation_targetCity.update_ema_variables", "trainSSL_domain_adaptation_targetCity._save_checkpoint", "os.path.join", "trainSSL_domain_adaptation_targetCity._save_checkpoint", "max", "data.augmentations.RandomCrop_city", "data.augmentations.RandomCrop_city", "int", "int", "open", "utils.loss.CrossEntropyLoss2dPixelWiseWeighted", "utils.loss.CrossEntropy2d", "model.cuda.state_dict", "new_params[].copy_", "os.path.join", "next", "torch.no_grad", "torch.no_grad", "nn.Upsample.detach", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "utils.class_balancing.ClassBalancing.add_frequencies", "normalize", "normalize", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "trainSSL_domain_adaptation_targetCity.sigmoid_ramp_up", "torch.ones().cuda", "torch.ones().cuda", "torch.pow", "torch.pow", "labeled_features.permute", "model.cuda.projection_head", "model.cuda.prediction_head", "contrastive_losses.contrastive_class_to_class_learned_memory", "torch.functional.interpolate().squeeze", "features_joined_unlabeled.permute.permute", "model.cuda.projection_head", "model.cuda.prediction_head", "contrastive_losses.contrastive_class_to_class_learned_memory", "trainSSL_domain_adaptation_targetCity._save_checkpoint", "print", "model.cuda.eval", "evaluateSSL.evaluate", "model.cuda.train", "param.size", "saved_state_dict[].size", "next", "next", "next", "iter", "next", "ema_model.cuda.", "model.cuda.eval", "model.cuda.", "labels.cuda.cpu().numpy", "pseudo_label.cpu().numpy", "random.random", "random.random", "random.random", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda.float", "utils.loss.CrossEntropyLoss2dPixelWiseWeighted", "torch.cat.detach", "trainSSL_domain_adaptation_targetCity.entropy_loss", "torch.functional.interpolate().squeeze", "torch.functional.interpolate().squeeze", "torch.functional.interpolate().squeeze", "labeled_features_ema.permute", "utils.feature_memory.FeatureMemory.add_features_from_sample_learned", "print", "torch.load", "torch.load", "model.cuda.load_state_dict", "trainSSL_domain_adaptation_targetCity.create_ema_model", "ema_model.cuda.train", "ema_model.cuda.cuda", "model.cuda.train", "model.cuda.cuda", "str", "next", "iter", "next", "np.arange", "np.random.shuffle", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "iter", "next", "iter", "next", "normalize", "normalize", "nn.Upsample.", "np.ones", "torch.from_numpy", "torch.from_numpy", "torch.ones", "torch.ones", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.no_grad", "torch.no_grad", "nn.Upsample.", "torch.max", "torch.max", "torch.no_grad", "torch.no_grad", "torch.functional.interpolate", "trainSSL_domain_adaptation_targetCity._save_checkpoint", "trainSSL_domain_adaptation_targetCity._save_checkpoint", "os.path.join", "len", "labels.cuda.cpu", "pseudo_label.cpu", "utils.class_balancing.ClassBalancing.get_weights", "torch.from_numpy().cuda.float", "ema_model.cuda.", "model.cuda.eval", "model.cuda.", "model.cuda.train", "torch.softmax", "torch.softmax", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "ema_model.cuda.projection_head", "model.cuda.eval", "model.cuda.projection_head", "model.cuda.train", "torch.cat.float().unsqueeze", "math.cos", "normalize", "normalize", "joined_labels.float().unsqueeze", "label_prediction_ema.float().unsqueeze", "probability_prediction_ema.float().unsqueeze", "torch.cat.float", "joined_labels.float", "label_prediction_ema.float", "probability_prediction_ema.float"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_loader", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_data_path", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_data_path", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.Res_Deeplab", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.create_ema_model", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.evaluate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.update_BN_weak_unlabeled_data", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.evaluate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet.optim_parameters", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.city_utils.adjust_learning_rate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augment_samples", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augment_samples", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.augment_samples", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.update_ema_variables", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.add_frequencies", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.sigmoid_ramp_up", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.contrastive_losses.contrastive_class_to_class_learned_memory", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.contrastive_losses.contrastive_class_to_class_learned_memory", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.evaluate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.entropy_loss", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.feature_memory.FeatureMemory.add_features_from_sample_learned", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity.create_ema_model", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.trainSSL_domain_adaptation_targetCity._save_checkpoint", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.get_weights"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "config", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "manual_seed", "(", "random_seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "random_seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "random", ".", "seed", "(", "random_seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "if", "pretraining", "==", "'COCO'", ":", "\n", "        ", "from", "utils", ".", "transformsgpu", "import", "normalize_bgr", "as", "normalize", "\n", "", "else", ":", "\n", "        ", "from", "utils", ".", "transformsgpu", "import", "normalize_rgb", "as", "normalize", "\n", "\n", "", "batch_size_unlabeled", "=", "int", "(", "batch_size", "/", "2", ")", "\n", "batch_size_labeled", "=", "int", "(", "batch_size", "*", "1", ")", "\n", "\n", "RAMP_UP_ITERS", "=", "2000", "\n", "\n", "data_loader", "=", "get_loader", "(", "'cityscapes'", ")", "\n", "data_path", "=", "get_data_path", "(", "'cityscapes'", ")", "\n", "data_aug", "=", "Compose", "(", "\n", "[", "RandomCrop_city", "(", "input_size", ")", "]", ")", "# from 1024x2048 to resize 512x1024 to crop input_size (512x512)", "\n", "train_dataset", "=", "data_loader", "(", "data_path", ",", "is_transform", "=", "True", ",", "augmentations", "=", "data_aug", ",", "img_size", "=", "input_size", ",", "pretraining", "=", "pretraining", ")", "\n", "\n", "from", "data", ".", "gta5_loader", "import", "gtaLoader", "\n", "data_loader_gta", "=", "gtaLoader", "\n", "data_path_gta", "=", "get_data_path", "(", "'gta5'", ")", "\n", "data_aug_gta", "=", "Compose", "(", "[", "RandomCrop_city", "(", "input_size", ")", "]", ")", "# from 1024x2048 to resize 512x1024 to crop input_size (512x512)", "\n", "train_dataset_gta", "=", "data_loader_gta", "(", "data_path_gta", ",", "is_transform", "=", "True", ",", "augmentations", "=", "data_aug_gta", ",", "img_size", "=", "input_size", ",", "pretraining", "=", "pretraining", ")", "\n", "\n", "train_dataset_size", "=", "len", "(", "train_dataset", ")", "\n", "print", "(", "'dataset size: '", ",", "train_dataset_size", ")", "\n", "\n", "partial_size", "=", "labeled_samples", "\n", "print", "(", "'Training on number of samples:'", ",", "partial_size", ")", "\n", "\n", "class_weights_curr", "=", "ClassBalancing", "(", "labeled_iters", "=", "int", "(", "labeled_samples", "/", "batch_size_labeled", ")", ",", "\n", "unlabeled_iters", "=", "int", "(", "\n", "(", "train_dataset_size", "-", "labeled_samples", ")", "/", "batch_size_unlabeled", ")", ",", "\n", "n_classes", "=", "num_classes", ")", "\n", "\n", "feature_memory", "=", "FeatureMemory", "(", "num_samples", "=", "labeled_samples", ",", "dataset", "=", "dataset", ",", "memory_per_class", "=", "256", ",", "\n", "feature_size", "=", "256", ",", "n_classes", "=", "num_classes", ")", "\n", "\n", "# select the partition", "\n", "if", "split_id", "is", "not", "None", ":", "\n", "        ", "train_ids", "=", "pickle", ".", "load", "(", "open", "(", "split_id", ",", "'rb'", ")", ")", "\n", "print", "(", "'loading train ids from {}'", ".", "format", "(", "split_id", ")", ")", "\n", "", "else", ":", "\n", "        ", "train_ids", "=", "np", ".", "arange", "(", "train_dataset_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_ids", ")", "\n", "\n", "", "train_sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_ids", "[", ":", "partial_size", "]", ")", "\n", "trainloader", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size_labeled", ",", "sampler", "=", "train_sampler", ",", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "trainloader_iter", "=", "iter", "(", "trainloader", ")", "\n", "\n", "# GTA5", "\n", "train_ids_gta", "=", "np", ".", "arange", "(", "len", "(", "train_dataset_gta", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_ids_gta", ")", "\n", "train_sampler_gta", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_ids_gta", ")", "\n", "trainloader_gta", "=", "data", ".", "DataLoader", "(", "train_dataset_gta", ",", "\n", "batch_size", "=", "batch_size_labeled", ",", "sampler", "=", "train_sampler_gta", ",", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "trainloader_iter_gta", "=", "iter", "(", "trainloader_gta", ")", "\n", "\n", "\n", "train_remain_sampler", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_ids", "[", "partial_size", ":", "]", ")", "\n", "trainloader_remain", "=", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "batch_size_unlabeled", ",", "sampler", "=", "train_remain_sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "trainloader_remain_iter", "=", "iter", "(", "trainloader_remain", ")", "\n", "\n", "# LOSSES", "\n", "unlabeled_loss", "=", "CrossEntropyLoss2dPixelWiseWeighted", "(", ")", ".", "cuda", "(", ")", "\n", "supervised_loss", "=", "CrossEntropy2d", "(", "ignore_label", "=", "ignore_label", ")", ".", "cuda", "(", ")", "\n", "\n", "''' Deeplab model '''", "\n", "# Define network", "\n", "if", "deeplabv2", ":", "\n", "        ", "if", "pretraining", "==", "'COCO'", ":", "# coco and iamgenet resnet architectures differ a little, just on how to do the stride", "\n", "            ", "from", "model", ".", "deeplabv2", "import", "Res_Deeplab", "\n", "", "else", ":", "# imagenet pretrained (more modern modification)", "\n", "            ", "from", "model", ".", "deeplabv2_imagenet", "import", "Res_Deeplab", "\n", "\n", "", "", "else", ":", "\n", "        ", "from", "model", ".", "deeplabv3", "import", "Res_Deeplab", "\n", "\n", "# create network", "\n", "", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "# load pretrained parameters", "\n", "if", "pretraining", "==", "'COCO'", ":", "\n", "        ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "'http://vllab1.ucmerced.edu/~whung/adv-semi-seg/resnet101COCO-41f33a49.pth'", ")", "# COCO pretraining", "\n", "", "else", ":", "\n", "        ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth'", ")", "# iamgenet pretrainning", "\n", "\n", "# Copy loaded parameters to model", "\n", "", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "name", ",", "param", "in", "new_params", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", "in", "saved_state_dict", "and", "param", ".", "size", "(", ")", "==", "saved_state_dict", "[", "name", "]", ".", "size", "(", ")", ":", "\n", "            ", "new_params", "[", "name", "]", ".", "copy_", "(", "saved_state_dict", "[", "name", "]", ")", "\n", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "\n", "# Optimizer for segmentation network", "\n", "learning_rate_object", "=", "Learning_Rate_Object", "(", "config", "[", "'training'", "]", "[", "'learning_rate'", "]", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "learning_rate_object", ")", ",", "\n", "lr", "=", "learning_rate", ",", "momentum", "=", "momentum", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "ema_model", "=", "create_ema_model", "(", "model", ",", "Res_Deeplab", ")", "\n", "ema_model", ".", "train", "(", ")", "\n", "ema_model", "=", "ema_model", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# checkpoint = torch.load('/home/snowflake/Escritorio/Semi-Sup/saved/Deep_cont/best_model.pth')", "\n", "# model.load_state_dict(checkpoint['model'])", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "", "with", "open", "(", "checkpoint_dir", "+", "'/config.json'", ",", "'w'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "config", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "", "pickle", ".", "dump", "(", "train_ids", ",", "open", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'train_split.pkl'", ")", ",", "'wb'", ")", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size", "[", "0", "]", ",", "input_size", "[", "1", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "epochs_since_start", "=", "0", "\n", "start_iteration", "=", "0", "\n", "best_mIoU", "=", "0", "# best metric while training", "\n", "iters_without_improve", "=", "0", "\n", "\n", "# TRAINING", "\n", "for", "i_iter", "in", "range", "(", "start_iteration", ",", "num_iterations", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "# set mode to training", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "a", "=", "time", ".", "time", "(", ")", "\n", "\n", "loss_l_value", "=", "0.", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", "\n", "\n", "''' LABELED SAMPLES '''", "\n", "# Get batch", "\n", "is_cityscapes", "=", "i_iter", "%", "2", "==", "0", "\n", "is_gta", "=", "not", "is_cityscapes", "\n", "if", "num_iterations", "-", "i_iter", ">", "100", ":", "\n", "# Last 100 itereations only citysacpes data", "\n", "            ", "is_cityscapes", "=", "True", "\n", "\n", "", "if", "is_cityscapes", ":", "\n", "            ", "try", ":", "\n", "                ", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "if", "batch", "[", "0", "]", ".", "shape", "[", "0", "]", "!=", "batch_size_labeled", ":", "\n", "                    ", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "", "", "except", ":", "# finish epoch, rebuild the iterator", "\n", "                ", "epochs_since_start", "=", "epochs_since_start", "+", "1", "\n", "# print('Epochs since start: ',epochs_since_start)", "\n", "trainloader_iter", "=", "iter", "(", "trainloader", ")", "\n", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "batch", "=", "next", "(", "trainloader_iter_gta", ")", "\n", "if", "batch", "[", "0", "]", ".", "shape", "[", "0", "]", "!=", "batch_size_labeled", ":", "\n", "                    ", "train_ids_gta", "=", "np", ".", "arange", "(", "len", "(", "train_dataset_gta", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "train_ids_gta", ")", "\n", "train_sampler_gta", "=", "data", ".", "sampler", ".", "SubsetRandomSampler", "(", "train_ids_gta", ")", "\n", "trainloader_gta", "=", "data", ".", "DataLoader", "(", "train_dataset_gta", ",", "\n", "batch_size", "=", "batch_size_labeled", ",", "sampler", "=", "train_sampler_gta", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "trainloader_iter_gta", "=", "iter", "(", "trainloader_gta", ")", "\n", "batch", "=", "next", "(", "trainloader_iter_gta", ")", "\n", "", "", "except", ":", "# finish epoch, rebuild the iterator", "\n", "# print('Epochs since start: ',epochs_since_start)", "\n", "                ", "trainloader_iter_gta", "=", "iter", "(", "trainloader_gta", ")", "\n", "batch", "=", "next", "(", "trainloader_iter_gta", ")", "\n", "\n", "\n", "", "", "images", ",", "labels", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "\n", "''' UNLABELED SAMPLES '''", "\n", "try", ":", "\n", "            ", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "if", "batch_remain", "[", "0", "]", ".", "shape", "[", "0", "]", "!=", "batch_size_unlabeled", ":", "\n", "                ", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "", "", "except", ":", "\n", "            ", "trainloader_remain_iter", "=", "iter", "(", "trainloader_remain", ")", "\n", "batch_remain", "=", "next", "(", "trainloader_remain_iter", ")", "\n", "\n", "# Unlabeled", "\n", "", "unlabeled_images", ",", "_", ",", "_", ",", "_", ",", "_", "=", "batch_remain", "\n", "unlabeled_images", "=", "unlabeled_images", ".", "cuda", "(", ")", "\n", "\n", "# Create pseudolabels", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "use_teacher", ":", "\n", "                ", "logits_u_w", ",", "features_weak_unlabeled", "=", "ema_model", "(", "normalize", "(", "unlabeled_images", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "logits_u_w", ",", "features_weak_unlabeled", "=", "model", "(", "normalize", "(", "unlabeled_images", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "", "logits_u_w", "=", "interp", "(", "logits_u_w", ")", ".", "detach", "(", ")", "# prediction unlabeled", "\n", "softmax_u_w", "=", "torch", ".", "softmax", "(", "logits_u_w", ",", "dim", "=", "1", ")", "\n", "max_probs", ",", "pseudo_label", "=", "torch", ".", "max", "(", "softmax_u_w", ",", "dim", "=", "1", ")", "# Get pseudolabels", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "if", "is_cityscapes", ":", "\n", "                ", "class_weights_curr", ".", "add_frequencies", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "pseudo_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "images2", ",", "labels2", ",", "_", ",", "_", "=", "augment_samples", "(", "images", ",", "labels", ",", "None", ",", "random", ".", "random", "(", ")", "<", "0.25", ",", "batch_size_labeled", ",", "\n", "ignore_label", ",", "weak", "=", "True", ")", "\n", "\n", "'''\n        UNLABELED DATA\n        '''", "\n", "\n", "'''\n        CROSS ENTROPY FOR UNLABELED USING PSEUDOLABELS\n        Once you have the speudolabel, perform strong augmetnation to force the netowrk to yield lower confidence scores for pushing them up\n        '''", "\n", "\n", "do_classmix", "=", "i_iter", ">", "RAMP_UP_ITERS", "and", "random", ".", "random", "(", ")", "<", "0.75", "# only after rampup perfrom classmix", "\n", "unlabeled_images_aug1", ",", "pseudo_label1", ",", "max_probs1", ",", "unlabeled_aug1_params", "=", "augment_samples", "(", "unlabeled_images", ",", "\n", "pseudo_label", ",", "\n", "max_probs", ",", "\n", "do_classmix", ",", "\n", "batch_size_unlabeled", ",", "\n", "ignore_label", ")", "\n", "\n", "do_classmix", "=", "i_iter", ">", "RAMP_UP_ITERS", "and", "random", ".", "random", "(", ")", "<", "0.75", "# only after rampup perfrom classmix", "\n", "\n", "unlabeled_images_aug2", ",", "pseudo_label2", ",", "max_probs2", ",", "unlabeled_aug2_params", "=", "augment_samples", "(", "unlabeled_images", ",", "\n", "pseudo_label", ",", "\n", "max_probs", ",", "\n", "do_classmix", ",", "\n", "batch_size_unlabeled", ",", "\n", "ignore_label", ")", "\n", "\n", "joined_unlabeled", "=", "torch", ".", "cat", "(", "(", "unlabeled_images_aug1", ",", "unlabeled_images_aug2", ")", ",", "dim", "=", "0", ")", "\n", "joined_pseudolabels", "=", "torch", ".", "cat", "(", "(", "pseudo_label1", ",", "pseudo_label2", ")", ",", "dim", "=", "0", ")", "\n", "joined_maxprobs", "=", "torch", ".", "cat", "(", "(", "max_probs1", ",", "max_probs2", ")", ",", "dim", "=", "0", ")", "\n", "\n", "pred_joined_unlabeled", ",", "features_joined_unlabeled", "=", "model", "(", "normalize", "(", "joined_unlabeled", ",", "dataset", ")", ",", "\n", "return_features", "=", "True", ")", "\n", "pred_joined_unlabeled", "=", "interp", "(", "pred_joined_unlabeled", ")", "\n", "\n", "joined_labeled", "=", "images2", "\n", "joined_labels", "=", "labels2", "\n", "labeled_pred", ",", "labeled_features", "=", "model", "(", "normalize", "(", "joined_labeled", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "labeled_pred", "=", "interp", "(", "labeled_pred", ")", "\n", "\n", "class_weights", "=", "torch", ".", "from_numpy", "(", "np", ".", "ones", "(", "(", "num_classes", ")", ")", ")", ".", "cuda", "(", ")", "\n", "if", "i_iter", ">", "RAMP_UP_ITERS", ":", "\n", "            ", "class_weights", "=", "torch", ".", "from_numpy", "(", "\n", "class_weights_curr", ".", "get_weights", "(", "num_iterations", ",", "only_labeled", "=", "False", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "", "loss", "=", "0", "\n", "# SUPERVISED SEGMENTATION", "\n", "labeled_loss", "=", "supervised_loss", "(", "labeled_pred", ",", "joined_labels", ",", "weight", "=", "class_weights", ".", "float", "(", ")", ")", "#", "\n", "loss", "=", "loss", "+", "labeled_loss", "\n", "\n", "# SELF-SUPERVISED SEGMENTATION", "\n", "'''\n        Cross entropy loss using pseudolabels. \n        '''", "\n", "\n", "unlabeled_loss", "=", "CrossEntropyLoss2dPixelWiseWeighted", "(", "ignore_index", "=", "ignore_label", ",", "\n", "weight", "=", "class_weights", ".", "float", "(", ")", ")", ".", "cuda", "(", ")", "#", "\n", "\n", "# Pseudo-label weighting", "\n", "pixelWiseWeight", "=", "sigmoid_ramp_up", "(", "i_iter", ",", "RAMP_UP_ITERS", ")", "*", "torch", ".", "ones", "(", "joined_maxprobs", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "pixelWiseWeight", "=", "pixelWiseWeight", "*", "torch", ".", "pow", "(", "joined_maxprobs", ".", "detach", "(", ")", ",", "6", ")", "\n", "\n", "# Pseudo-label loss", "\n", "loss_ce_unlabeled", "=", "unlabeled_loss", "(", "pred_joined_unlabeled", ",", "joined_pseudolabels", ",", "pixelWiseWeight", ")", "\n", "\n", "loss", "=", "loss", "+", "loss_ce_unlabeled", "\n", "\n", "# entropy loss", "\n", "valid_mask", "=", "(", "joined_pseudolabels", "!=", "ignore_label", ")", ".", "unsqueeze", "(", "1", ")", "\n", "loss", "=", "loss", "+", "entropy_loss", "(", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "pred_joined_unlabeled", ",", "dim", "=", "1", ")", ",", "valid_mask", ")", "*", "0.01", "\n", "\n", "# CONTRASTIVE LEARNING", "\n", "if", "is_cityscapes", ":", "\n", "            ", "if", "i_iter", ">", "RAMP_UP_ITERS", "-", "1000", ":", "\n", "# Build Memory Bank 1000 iters before starting to do contrsative", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "use_teacher", ":", "\n", "                        ", "labeled_pred_ema", ",", "labeled_features_ema", "=", "ema_model", "(", "normalize", "(", "joined_labeled", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "", "else", ":", "\n", "                        ", "model", ".", "eval", "(", ")", "\n", "labeled_pred_ema", ",", "labeled_features_ema", "=", "model", "(", "normalize", "(", "joined_labeled", ",", "dataset", ")", ",", "return_features", "=", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "", "labeled_pred_ema", "=", "interp", "(", "labeled_pred_ema", ")", "\n", "probability_prediction_ema", ",", "label_prediction_ema", "=", "torch", ".", "max", "(", "torch", ".", "softmax", "(", "labeled_pred_ema", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "# Get pseudolabels", "\n", "\n", "\n", "", "labels_down", "=", "nn", ".", "functional", ".", "interpolate", "(", "joined_labels", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "size", "=", "(", "labeled_features_ema", ".", "shape", "[", "2", "]", ",", "labeled_features_ema", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "1", ")", "\n", "label_prediction_down", "=", "nn", ".", "functional", ".", "interpolate", "(", "label_prediction_ema", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "size", "=", "(", "labeled_features_ema", ".", "shape", "[", "2", "]", ",", "labeled_features_ema", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "1", ")", "\n", "probability_prediction_down", "=", "nn", ".", "functional", ".", "interpolate", "(", "probability_prediction_ema", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "size", "=", "(", "labeled_features_ema", ".", "shape", "[", "2", "]", ",", "labeled_features_ema", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# get mask where the labeled predictions are correct", "\n", "mask_prediction_correctly", "=", "(", "(", "label_prediction_down", "==", "labels_down", ")", ".", "float", "(", ")", "*", "\n", "(", "probability_prediction_down", ">", "0.95", ")", ".", "float", "(", ")", ")", ".", "bool", "(", ")", "\n", "\n", "labeled_features_correct", "=", "labeled_features_ema", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "labels_down_correct", "=", "labels_down", "[", "mask_prediction_correctly", "]", "\n", "labeled_features_correct", "=", "labeled_features_correct", "[", "mask_prediction_correctly", ",", "...", "]", "\n", "\n", "# get projected features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "if", "use_teacher", ":", "\n", "                        ", "proj_labeled_features_correct", "=", "ema_model", ".", "projection_head", "(", "labeled_features_correct", ")", "\n", "", "else", ":", "\n", "                        ", "model", ".", "eval", "(", ")", "\n", "proj_labeled_features_correct", "=", "model", ".", "projection_head", "(", "labeled_features_correct", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "# updated memory bank", "\n", "", "", "feature_memory", ".", "add_features_from_sample_learned", "(", "ema_model", ",", "proj_labeled_features_correct", ",", "\n", "labels_down_correct", ",", "batch_size_labeled", ")", "\n", "\n", "\n", "", "", "if", "i_iter", ">", "RAMP_UP_ITERS", ":", "\n", "            ", "'''\n            LABELED TO LABELED. Force features from laeled samples, to be similar to other features from the same class (which also leads to good predictions)\n\n            '''", "\n", "\n", "# now we can take all. as they are not the prototypes, here we are gonan force these features to be similar as the correct ones", "\n", "mask_prediction_correctly", "=", "(", "labels_down", "!=", "ignore_label", ")", "\n", "\n", "labeled_features_all", "=", "labeled_features", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "labels_down_all", "=", "labels_down", "[", "mask_prediction_correctly", "]", "\n", "labeled_features_all", "=", "labeled_features_all", "[", "mask_prediction_correctly", ",", "...", "]", "\n", "\n", "# get prediction features", "\n", "proj_labeled_features_all", "=", "model", ".", "projection_head", "(", "labeled_features_all", ")", "\n", "pred_labeled_features_all", "=", "model", ".", "prediction_head", "(", "proj_labeled_features_all", ")", "\n", "\n", "loss_contr_labeled", "=", "contrastive_class_to_class_learned_memory", "(", "model", ",", "pred_labeled_features_all", ",", "\n", "labels_down_all", ",", "num_classes", ",", "feature_memory", ".", "memory", ")", "\n", "\n", "loss", "=", "loss", "+", "loss_contr_labeled", "*", "0.2", "\n", "\n", "'''\n            CONTRASTIVE LEARNING ON UNLABELED DATA. align unlabeled features to labeled features\n            '''", "\n", "\n", "joined_pseudolabels_down", "=", "nn", ".", "functional", ".", "interpolate", "(", "joined_pseudolabels", ".", "float", "(", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "size", "=", "(", "features_joined_unlabeled", ".", "shape", "[", "2", "]", ",", "features_joined_unlabeled", ".", "shape", "[", "3", "]", ")", ",", "\n", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "# take out the features from black pixels from zooms out and augmetnations (ignore labels on pseduoalebl)", "\n", "mask", "=", "(", "joined_pseudolabels_down", "!=", "ignore_label", ")", "\n", "\n", "features_joined_unlabeled", "=", "features_joined_unlabeled", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "features_joined_unlabeled", "=", "features_joined_unlabeled", "[", "mask", ",", "...", "]", "\n", "joined_pseudolabels_down", "=", "joined_pseudolabels_down", "[", "mask", "]", "\n", "\n", "# get projected features", "\n", "proj_feat_unlabeled", "=", "model", ".", "projection_head", "(", "features_joined_unlabeled", ")", "\n", "pred_feat_unlabeled", "=", "model", ".", "prediction_head", "(", "proj_feat_unlabeled", ")", "\n", "\n", "loss_contr_unlabeled", "=", "contrastive_class_to_class_learned_memory", "(", "model", ",", "pred_feat_unlabeled", ",", "\n", "joined_pseudolabels_down", ",", "num_classes", ",", "feature_memory", ".", "memory", ")", "\n", "\n", "loss", "=", "loss", "+", "loss_contr_unlabeled", "*", "0.2", "\n", "\n", "\n", "\n", "", "loss_l_value", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "# optimize", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "m", "=", "1", "-", "(", "1", "-", "0.995", ")", "*", "(", "math", ".", "cos", "(", "math", ".", "pi", "*", "i_iter", "/", "num_iterations", ")", "+", "1", ")", "/", "2", "\n", "ema_model", "=", "update_ema_variables", "(", "ema_model", "=", "ema_model", ",", "model", "=", "model", ",", "alpha_teacher", "=", "m", ",", "iteration", "=", "i_iter", ")", "\n", "\n", "\n", "# print('iter = {0:6d}/{1:6d}, loss_l = {2:.3f}'.format(i_iter, num_iterations, loss_l_value))", "\n", "\n", "if", "i_iter", "%", "save_checkpoint_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ")", "\n", "\n", "", "if", "i_iter", "%", "val_per_iter", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'iter = {0:6d}/{1:6d}'", ".", "format", "(", "i_iter", ",", "num_iterations", ")", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "mIoU", ",", "eval_loss", "=", "evaluate", "(", "model", ",", "dataset", ",", "ignore_label", "=", "ignore_label", ",", "save_dir", "=", "checkpoint_dir", ",", "pretraining", "=", "pretraining", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "\n", "if", "mIoU", ">", "best_mIoU", ":", "\n", "                ", "best_mIoU", "=", "mIoU", "\n", "if", "save_teacher", ":", "\n", "                    ", "_save_checkpoint", "(", "i_iter", ",", "ema_model", ",", "optimizer", ",", "config", ",", "save_best", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "save_best", "=", "True", ")", "\n", "", "iters_without_improve", "=", "0", "\n", "", "else", ":", "\n", "                ", "iters_without_improve", "+=", "val_per_iter", "\n", "\n", "", "'''\n            if the performance has not improve in N iterations, try to reload best model to optimize again with a lower LR\n            Simulating an iterative training'''", "\n", "if", "iters_without_improve", ">", "num_iterations", "/", "5.", ":", "\n", "                ", "print", "(", "'Re-loading a previous best model'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'best_model.pth'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "ema_model", "=", "create_ema_model", "(", "model", ",", "Res_Deeplab", ")", "\n", "ema_model", ".", "train", "(", ")", "\n", "ema_model", "=", "ema_model", ".", "cuda", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "iters_without_improve", "=", "0", "# reset timer", "\n", "\n", "\n", "", "", "", "_save_checkpoint", "(", "num_iterations", ",", "model", ",", "optimizer", ",", "config", ")", "\n", "\n", "# FINISH TRAINING, evaluate again", "\n", "model", ".", "eval", "(", ")", "\n", "mIoU", ",", "eval_loss", "=", "evaluate", "(", "model", ",", "dataset", ",", "deeplabv2", "=", "deeplabv2", ",", "ignore_label", "=", "ignore_label", ",", "save_dir", "=", "checkpoint_dir", ",", "\n", "pretraining", "=", "pretraining", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "if", "mIoU", ">", "best_mIoU", "and", "save_best_model", ":", "\n", "        ", "best_mIoU", "=", "mIoU", "\n", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "save_best", "=", "True", ")", "\n", "\n", "# TRY IMPROVING BEST MODEL WITH EMA MODEL OR UPDATING BN STATS", "\n", "\n", "# Load best model", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "f'best_model.pth'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "model", "=", "update_BN_weak_unlabeled_data", "(", "model", ",", "normalize", ",", "batch_size_unlabeled", ",", "trainloader_remain", ")", "\n", "model", ".", "eval", "(", ")", "\n", "mIoU", ",", "eval_loss", "=", "evaluate", "(", "model", ",", "dataset", ",", "deeplabv2", "=", "deeplabv2", ",", "ignore_label", "=", "ignore_label", ",", "save_dir", "=", "checkpoint_dir", ",", "\n", "pretraining", "=", "pretraining", ")", "\n", "model", ".", "train", "(", ")", "\n", "if", "mIoU", ">", "best_mIoU", "and", "save_best_model", ":", "\n", "        ", "best_mIoU", "=", "mIoU", "\n", "_save_checkpoint", "(", "i_iter", ",", "model", ",", "optimizer", ",", "config", ",", "save_best", "=", "True", ")", "\n", "\n", "", "print", "(", "'BEST MIOU'", ")", "\n", "print", "(", "max", "(", "best_mIoU_improved", ",", "best_mIoU", ")", ")", "\n", "\n", "end", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "'Total time: '", "+", "str", "(", "end", "-", "start", ")", "+", "' seconds'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.get_arguments": [[18, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"SSL evaluation script\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-m\"", ",", "\"--model-path\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Model to evaluate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "(", "0", ",", ")", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-output-images\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"save output images\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.get_iou": [[35, 59], ["confM.jaccard", "enumerate", "print", "np.array", "print", "np.array", "str"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.ConfusionMatrix.jaccard"], ["", "def", "get_iou", "(", "confM", ",", "dataset", ")", ":", "\n", "    ", "aveJ", ",", "j_list", ",", "M", "=", "confM", ".", "jaccard", "(", ")", "\n", "\n", "if", "dataset", "==", "'pascal_voc'", ":", "\n", "        ", "classes", "=", "np", ".", "array", "(", "(", "'background'", ",", "# always index 0", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "\n", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "\n", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", ")", ")", "\n", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "classes", "=", "np", ".", "array", "(", "(", "\"road\"", ",", "\"sidewalk\"", ",", "\n", "\"building\"", ",", "\"wall\"", ",", "\"fence\"", ",", "\"pole\"", ",", "\n", "\"traffic_light\"", ",", "\"traffic_sign\"", ",", "\"vegetation\"", ",", "\n", "\"terrain\"", ",", "\"sky\"", ",", "\"person\"", ",", "\"rider\"", ",", "\n", "\"car\"", ",", "\"truck\"", ",", "\"bus\"", ",", "\n", "\"train\"", ",", "\"motorcycle\"", ",", "\"bicycle\"", ")", ")", "\n", "\n", "", "for", "i", ",", "iou", "in", "enumerate", "(", "j_list", ")", ":", "\n", "        ", "print", "(", "'class {:2d} {:12} IU {:.4f}'", ".", "format", "(", "i", ",", "classes", "[", "i", "]", ",", "j_list", "[", "i", "]", ")", ")", "\n", "\n", "", "print", "(", "'meanIOU: '", "+", "str", "(", "aveJ", ")", "+", "'\\n'", ")", "\n", "\n", "return", "aveJ", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.evaluate": [[61, 127], ["model.eval", "print", "utils.metric.ConfusionMatrix", "enumerate", "evaluateSSL.process_list_evaluation", "evaluateSSL.get_iou", "np.mean", "data.get_loader", "data.get_data_path", "data.get_loader.", "torch.utils.data.DataLoader", "data.get_loader", "data.get_data_path", "data.get_loader.", "torch.utils.data.DataLoader", "torch.no_grad", "torch.nn.Upsample", "model", "torch.nn.Upsample.", "torch.autograd.Variable().cuda", "utils.loss.CrossEntropy2d().cuda", "CrossEntropy2d().cuda.", "total_loss.append", "np.asarray.cpu().data[].numpy", "np.asarray", "np.asarray", "data_list.append", "evaluateSSL.process_list_evaluation", "data.augmentations.Compose", "data.augmentations.Compose", "str", "normalize", "criterion.item", "label[].numpy", "np.argmax", "len", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "utils.loss.CrossEntropy2d", "np.reshape", "np.reshape", "data.augmentations.Resize_city", "data.augmentations.Resize_city_highres", "label.long", "torch.autograd.Variable", "np.asarray.cpu"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.process_list_evaluation", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.get_iou", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_loader", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_data_path", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_loader", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_data_path", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.process_list_evaluation"], ["", "def", "evaluate", "(", "model", ",", "dataset", ",", "deeplabv2", "=", "True", ",", "ignore_label", "=", "250", ",", "save_dir", "=", "None", ",", "pretraining", "=", "'COCO'", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "if", "pretraining", "==", "'COCO'", ":", "\n", "        ", "from", "utils", ".", "transformsgpu", "import", "normalize_bgr", "as", "normalize", "\n", "", "else", ":", "\n", "        ", "from", "utils", ".", "transformsgpu", "import", "normalize_rgb", "as", "normalize", "\n", "\n", "", "if", "dataset", "==", "'pascal_voc'", ":", "\n", "        ", "num_classes", "=", "21", "\n", "data_loader", "=", "get_loader", "(", "dataset", ")", "\n", "data_path", "=", "get_data_path", "(", "dataset", ")", "\n", "test_dataset", "=", "data_loader", "(", "data_path", ",", "split", "=", "\"val\"", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "pretraining", "=", "pretraining", ")", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "num_classes", "=", "19", "\n", "data_loader", "=", "get_loader", "(", "'cityscapes'", ")", "\n", "data_path", "=", "get_data_path", "(", "'cityscapes'", ")", "\n", "if", "deeplabv2", ":", "\n", "            ", "data_aug", "=", "Compose", "(", "[", "Resize_city", "(", ")", "]", ")", "\n", "", "else", ":", "# for deeplabv3 oirginal resolution", "\n", "            ", "data_aug", "=", "Compose", "(", "[", "Resize_city_highres", "(", ")", "]", ")", "\n", "\n", "", "test_dataset", "=", "data_loader", "(", "data_path", ",", "is_transform", "=", "True", ",", "split", "=", "'val'", ",", "\n", "augmentations", "=", "data_aug", ",", "pretraining", "=", "pretraining", ")", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "", "print", "(", "'Evaluating, found '", "+", "str", "(", "len", "(", "testloader", ")", ")", "+", "' images.'", ")", "\n", "confM", "=", "ConfusionMatrix", "(", "num_classes", ")", "\n", "\n", "\n", "data_list", "=", "[", "]", "\n", "total_loss", "=", "[", "]", "\n", "\n", "for", "index", ",", "batch", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "image", ",", "label", ",", "size", ",", "name", ",", "_", "=", "batch", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "interp", "=", "torch", ".", "nn", ".", "Upsample", "(", "size", "=", "(", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "output", "=", "model", "(", "normalize", "(", "Variable", "(", "image", ")", ".", "cuda", "(", ")", ",", "dataset", ")", ")", "\n", "output", "=", "interp", "(", "output", ")", "\n", "\n", "label_cuda", "=", "Variable", "(", "label", ".", "long", "(", ")", ")", ".", "cuda", "(", ")", "\n", "criterion", "=", "CrossEntropy2d", "(", "ignore_label", "=", "ignore_label", ")", ".", "cuda", "(", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "label_cuda", ")", "\n", "total_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "output", "=", "output", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "gt", "=", "np", ".", "asarray", "(", "label", "[", "0", "]", ".", "numpy", "(", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "0", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "data_list", ".", "append", "(", "(", "np", ".", "reshape", "(", "gt", ",", "(", "-", "1", ")", ")", ",", "np", ".", "reshape", "(", "output", ",", "(", "-", "1", ")", ")", ")", ")", "\n", "\n", "# filename = 'output_images/' + name[0].split('/')[-1]", "\n", "# cv2.imwrite(filename, output)", "\n", "\n", "", "if", "(", "index", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "# print('%d processed' % (index + 1))", "\n", "            ", "process_list_evaluation", "(", "confM", ",", "data_list", ")", "\n", "data_list", "=", "[", "]", "\n", "\n", "", "", "process_list_evaluation", "(", "confM", ",", "data_list", ")", "\n", "\n", "mIoU", "=", "get_iou", "(", "confM", ",", "dataset", ")", "\n", "loss", "=", "np", ".", "mean", "(", "total_loss", ")", "\n", "return", "mIoU", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.process_list_evaluation": [[129, 140], ["len", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "multiprocessing.Pool.terminate", "confM.addM"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.ConfusionMatrix.addM"], ["", "def", "process_list_evaluation", "(", "confM", ",", "data_list", ")", ":", "\n", "    ", "if", "len", "(", "data_list", ")", ">", "0", ":", "\n", "        ", "f", "=", "confM", ".", "generateM", "\n", "pool", "=", "Pool", "(", "4", ")", "\n", "m_list", "=", "pool", ".", "map", "(", "f", ",", "data_list", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "pool", ".", "terminate", "(", ")", "\n", "\n", "for", "m", "in", "m_list", ":", "\n", "            ", "confM", ".", "addM", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.main": [[143, 166], ["Res_Deeplab", "torch.load", "model.cuda.load_state_dict", "model.cuda.cuda", "model.cuda.eval", "evaluateSSL.evaluate"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.Res_Deeplab", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.evaluateSSL.evaluate"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "\n", "deeplabv2", "=", "\"2\"", "in", "config", "[", "'version'", "]", "\n", "\n", "if", "deeplabv2", ":", "\n", "        ", "if", "pretraining", "==", "'COCO'", ":", "# coco and iamgenet resnet architectures differ a little, just on how to do the stride", "\n", "            ", "from", "model", ".", "deeplabv2", "import", "Res_Deeplab", "\n", "", "else", ":", "# imagenet pretrained (more modern modification)", "\n", "            ", "from", "model", ".", "deeplabv2_imagenet", "import", "Res_Deeplab", "\n", "\n", "", "", "else", ":", "\n", "        ", "from", "model", ".", "deeplabv3", "import", "Res_Deeplab", "\n", "\n", "", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "num_classes", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "model_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "evaluate", "(", "model", ",", "dataset", ",", "deeplabv2", "=", "deeplabv2", ",", "ignore_label", "=", "ignore_label", ",", "pretraining", "=", "pretraining", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.None.contrastive_losses.contrastive_class_to_class_learned_memory": [[4, 67], ["range", "model.__getattr__", "model.__getattr__", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.normalize", "torch.normalize", "torch.mm", "torch.mm", "model.__getattr__.", "model.__getattr__.", "torch.sigmoid", "torch.sigmoid", "rescaled_weights.repeat.repeat", "torch.sigmoid", "torch.sigmoid", "learned_weights_features_memory.permute.permute", "rescaled_weights_memory.repeat.repeat", "str", "str", "F.normalize.transpose", "features_c.detach", "distances.mean", "torch.from_numpy", "torch.from_numpy", "torch.sigmoid.sum", "learned_weights_features_memory.permute.sum"], "function", ["None"], ["def", "contrastive_class_to_class_learned_memory", "(", "model", ",", "features", ",", "class_labels", ",", "num_classes", ",", "memory", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        model: segmentation model that contains the self-attention MLPs for selecting the features\n        to take part in the contrastive learning optimization\n        features: Nx256  feature vectors for the contrastive learning (after applying the projection and prediction head)\n        class_labels: N corresponding class labels for every feature vector\n        num_classes: number of classesin the dataet\n        memory: memory bank [List]\n\n    Returns:\n        returns the contrastive loss between features vectors from [features] and from [memory] in a class-wise fashion.\n    \"\"\"", "\n", "\n", "loss", "=", "0", "\n", "\n", "for", "c", "in", "range", "(", "num_classes", ")", ":", "\n", "# get features of an specific class", "\n", "        ", "mask_c", "=", "class_labels", "==", "c", "\n", "features_c", "=", "features", "[", "mask_c", ",", ":", "]", "\n", "memory_c", "=", "memory", "[", "c", "]", "# N, 256", "\n", "\n", "# get the self-attention MLPs both for memory features vectors (projected vectors) and network feature vectors (predicted vectors)", "\n", "selector", "=", "model", ".", "__getattr__", "(", "'contrastive_class_selector_'", "+", "str", "(", "c", ")", ")", "\n", "selector_memory", "=", "model", ".", "__getattr__", "(", "'contrastive_class_selector_memory'", "+", "str", "(", "c", ")", ")", "\n", "\n", "if", "memory_c", "is", "not", "None", "and", "features_c", ".", "shape", "[", "0", "]", ">", "1", "and", "memory_c", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "\n", "            ", "memory_c", "=", "torch", ".", "from_numpy", "(", "memory_c", ")", ".", "cuda", "(", ")", "\n", "\n", "# L2 normalize vectors", "\n", "memory_c", "=", "F", ".", "normalize", "(", "memory_c", ",", "dim", "=", "1", ")", "# N, 256", "\n", "features_c_norm", "=", "F", ".", "normalize", "(", "features_c", ",", "dim", "=", "1", ")", "# M, 256", "\n", "\n", "# compute similarity. All elements with all elements", "\n", "similarities", "=", "torch", ".", "mm", "(", "features_c_norm", ",", "memory_c", ".", "transpose", "(", "1", ",", "0", ")", ")", "# MxN", "\n", "distances", "=", "1", "-", "similarities", "# values between [0, 2] where 0 means same vectors", "\n", "# M (elements), N (memory)", "\n", "\n", "\n", "# now weight every sample", "\n", "\n", "learned_weights_features", "=", "selector", "(", "features_c", ".", "detach", "(", ")", ")", "# detach for trainability", "\n", "learned_weights_features_memory", "=", "selector_memory", "(", "memory_c", ")", "\n", "\n", "# self-atention in the memory featuers-axis and on the learning contrsative featuers-axis", "\n", "learned_weights_features", "=", "torch", ".", "sigmoid", "(", "learned_weights_features", ")", "\n", "rescaled_weights", "=", "(", "learned_weights_features", ".", "shape", "[", "0", "]", "/", "learned_weights_features", ".", "sum", "(", "dim", "=", "0", ")", ")", "*", "learned_weights_features", "\n", "rescaled_weights", "=", "rescaled_weights", ".", "repeat", "(", "1", ",", "distances", ".", "shape", "[", "1", "]", ")", "\n", "distances", "=", "distances", "*", "rescaled_weights", "\n", "\n", "\n", "learned_weights_features_memory", "=", "torch", ".", "sigmoid", "(", "learned_weights_features_memory", ")", "\n", "learned_weights_features_memory", "=", "learned_weights_features_memory", ".", "permute", "(", "1", ",", "0", ")", "\n", "rescaled_weights_memory", "=", "(", "learned_weights_features_memory", ".", "shape", "[", "0", "]", "/", "learned_weights_features_memory", ".", "sum", "(", "dim", "=", "0", ")", ")", "*", "learned_weights_features_memory", "\n", "rescaled_weights_memory", "=", "rescaled_weights_memory", ".", "repeat", "(", "distances", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "distances", "=", "distances", "*", "rescaled_weights_memory", "\n", "\n", "\n", "loss", "=", "loss", "+", "distances", ".", "mean", "(", ")", "\n", "\n", "", "", "return", "loss", "/", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformmasks.generate_class_mask": [[19, 23], ["torch.broadcast_tensors", "pred.eq().sum", "pred.unsqueeze", "classes.unsqueeze().unsqueeze", "pred.eq", "classes.unsqueeze"], "function", ["None"], ["def", "generate_class_mask", "(", "pred", ",", "classes", ")", ":", "# pred 512,512   classes 9", "\n", "    ", "pred", ",", "classes", "=", "torch", ".", "broadcast_tensors", "(", "pred", ".", "unsqueeze", "(", "0", ")", ",", "classes", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ")", "\n", "N", "=", "pred", ".", "eq", "(", "classes", ")", ".", "sum", "(", "0", ")", "\n", "return", "N", "\n", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.feature_memory.FeatureMemory.__init__": [[10, 20], ["max", "int", "max", "round", "int", "round"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_samples", ",", "dataset", ",", "memory_per_class", "=", "2048", ",", "feature_size", "=", "256", ",", "n_classes", "=", "19", ")", ":", "\n", "        ", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "memory_per_class", "=", "memory_per_class", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "memory", "=", "[", "None", "]", "*", "n_classes", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "if", "dataset", "==", "'cityscapes'", ":", "# usually all classes in one image", "\n", "            ", "self", ".", "per_class_samples_per_image", "=", "max", "(", "1", ",", "int", "(", "round", "(", "memory_per_class", "/", "num_samples", ")", ")", ")", "\n", "", "elif", "dataset", "==", "'pascal_voc'", ":", "# usually only around 3 classes on each image, except background class", "\n", "            ", "self", ".", "per_class_samples_per_image", "=", "max", "(", "1", ",", "int", "(", "n_classes", "/", "3", "*", "round", "(", "memory_per_class", "/", "num_samples", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.feature_memory.FeatureMemory.add_features_from_sample_learned": [[23, 67], ["features.detach.detach.detach", "class_labels.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "range", "model.__getattr__", "class_labels.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "str", "features_c.cpu().numpy.cpu().numpy.cpu().numpy", "class_labels.detach().cpu().numpy.detach().cpu().numpy.detach", "torch.no_grad", "model.__getattr__.", "torch.sigmoid", "torch.sort", "indices.cpu().numpy.cpu().numpy.cpu().numpy", "features_c.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.concatenate", "features_c.cpu().numpy.cpu().numpy.cpu", "indices.cpu().numpy.cpu().numpy.cpu", "features_c.cpu().numpy.cpu().numpy.cpu"], "methods", ["None"], ["", "", "def", "add_features_from_sample_learned", "(", "self", ",", "model", ",", "features", ",", "class_labels", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        Updates the memory bank with some quality feature vectors per class\n        Args:\n            model: segmentation model containing the self-attention modules (contrastive_class_selectors)\n            features: BxFxWxH feature maps containing the feature vectors for the contrastive (already applied the projection head)\n            class_labels:   BxWxH  corresponding labels to the [features]\n            batch_size: batch size\n\n        Returns:\n\n        \"\"\"", "\n", "features", "=", "features", ".", "detach", "(", ")", "\n", "class_labels", "=", "class_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "elements_per_class", "=", "batch_size", "*", "self", ".", "per_class_samples_per_image", "\n", "\n", "# for each class, save [elements_per_class]", "\n", "for", "c", "in", "range", "(", "self", ".", "n_classes", ")", ":", "\n", "            ", "mask_c", "=", "class_labels", "==", "c", "# get mask for class c", "\n", "selector", "=", "model", ".", "__getattr__", "(", "'contrastive_class_selector_'", "+", "str", "(", "c", ")", ")", "# get the self attention moduel for class c", "\n", "features_c", "=", "features", "[", "mask_c", ",", ":", "]", "# get features from class c", "\n", "if", "features_c", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "if", "features_c", ".", "shape", "[", "0", "]", ">", "elements_per_class", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# get ranking scores", "\n", "                        ", "rank", "=", "selector", "(", "features_c", ")", "\n", "rank", "=", "torch", ".", "sigmoid", "(", "rank", ")", "\n", "# sort them", "\n", "_", ",", "indices", "=", "torch", ".", "sort", "(", "rank", "[", ":", ",", "0", "]", ",", "dim", "=", "0", ")", "\n", "indices", "=", "indices", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "features_c", "=", "features_c", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# get features with highest rankings", "\n", "features_c", "=", "features_c", "[", "indices", ",", ":", "]", "\n", "new_features", "=", "features_c", "[", ":", "elements_per_class", ",", ":", "]", "\n", "", "", "else", ":", "\n", "                    ", "new_features", "=", "features_c", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "self", ".", "memory", "[", "c", "]", "is", "None", ":", "# was empy, first elements", "\n", "                    ", "self", ".", "memory", "[", "c", "]", "=", "new_features", "\n", "\n", "", "else", ":", "# add elements to already existing list", "\n", "# keep only most recent memory_per_class samples", "\n", "                    ", "self", ".", "memory", "[", "c", "]", "=", "np", ".", "concatenate", "(", "(", "new_features", ",", "self", ".", "memory", "[", "c", "]", ")", ",", "axis", "=", "0", ")", "[", ":", "self", ".", "memory_per_class", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.__init__": [[15, 33], ["numpy.zeros", "numpy.zeros", "max"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "labeled_iters", ",", "unlabeled_iters", ",", "n_classes", "=", "19", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            labeled_iters: Number of iterations to fill up the memory of labeled statistics\n            unlabeled_iters:  Number of iterations to fill up the memory of unlabeled statistics\n            n_classes: number of classes of the dataset\n        \"\"\"", "\n", "self", ".", "labeled_samples", "=", "labeled_iters", "\n", "self", ".", "unlabeled_samples", "=", "unlabeled_iters", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "# build memory to store the statistcs of the labels for labeled and unlabeled data", "\n", "self", ".", "labeled_frequencies", "=", "np", ".", "zeros", "(", "(", "labeled_iters", ",", "n_classes", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "self", ".", "unlabeled_frequencies", "=", "np", ".", "zeros", "(", "(", "unlabeled_iters", ",", "n_classes", ")", ",", "dtype", "=", "np", ".", "long", ")", "\n", "\n", "self", ".", "iter", "=", "0", "# iteration counter", "\n", "self", ".", "start_computing_iter", "=", "max", "(", "labeled_iters", ",", "unlabeled_iters", ")", "# number of iterations to take into account all statistics of the dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.compute_frequencies": [[35, 49], ["numpy.zeros", "range", "mask_freq_c.sum"], "methods", ["None"], ["", "def", "compute_frequencies", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            samples: BxWxH labels or pseudolabels\n\n        Returns: computes per-class frequencies from the input labels\n\n        \"\"\"", "\n", "freqs", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_classes", ")", ")", "\n", "for", "c", "in", "range", "(", "self", ".", "n_classes", ")", ":", "\n", "            ", "mask_freq_c", "=", "(", "samples", "==", "c", ")", ".", "astype", "(", "float", ")", "\n", "freqs", "[", "c", "]", "=", "mask_freq_c", ".", "sum", "(", ")", "\n", "", "return", "freqs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.add_frequencies": [[50, 74], ["class_balancing.ClassBalancing.compute_frequencies", "class_balancing.ClassBalancing.compute_frequencies", "numpy.concatenate", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.compute_frequencies", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.compute_frequencies"], ["", "def", "add_frequencies", "(", "self", ",", "labeled_samples", ",", "unlabeled_samples", ")", ":", "\n", "        ", "\"\"\"\n        Given some labels and pseudolabels of an training iteration, add them to the statistics memories\n        Args:\n            labeled_samples: BxWxH labels\n            unlabeled_samples: BxWxH pseudolabels\n\n\n        \"\"\"", "\n", "\n", "if", "self", ".", "iter", "<", "self", ".", "labeled_samples", ":", "\n", "            ", "labeled_freqs", "=", "self", ".", "compute_frequencies", "(", "labeled_samples", ")", "\n", "self", ".", "labeled_frequencies", "[", "self", ".", "iter", ",", ":", "]", "=", "labeled_freqs", "\n", "\n", "", "unl_freqs", "=", "self", ".", "compute_frequencies", "(", "unlabeled_samples", ")", "\n", "\n", "if", "self", ".", "iter", "<", "self", ".", "unlabeled_samples", ":", "\n", "            ", "self", ".", "unlabeled_frequencies", "[", "self", ".", "iter", ",", ":", "]", "=", "unl_freqs", "\n", "", "else", ":", "# remove first, add this one at the bottom (concat)", "\n", "# only for unlabeled because labeled doesnot change once is filled", "\n", "            ", "self", ".", "unlabeled_frequencies", "=", "self", ".", "unlabeled_frequencies", "[", "1", ":", ",", ":", "]", "\n", "self", ".", "unlabeled_frequencies", "=", "np", ".", "concatenate", "(", "(", "self", ".", "unlabeled_frequencies", ",", "np", ".", "expand_dims", "(", "unl_freqs", ",", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.add_frequencies_labeled": [[75, 80], ["class_balancing.ClassBalancing.compute_frequencies"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.compute_frequencies"], ["", "def", "add_frequencies_labeled", "(", "self", ",", "labeled_samples", ")", ":", "\n", "\n", "        ", "if", "self", ".", "iter", "<", "self", ".", "labeled_samples", ":", "\n", "            ", "labeled_freqs", "=", "self", ".", "compute_frequencies", "(", "labeled_samples", ")", "\n", "self", ".", "labeled_frequencies", "[", "self", ".", "iter", ",", ":", "]", "=", "labeled_freqs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.add_frequencies_unlabeled": [[82, 94], ["class_balancing.ClassBalancing.compute_frequencies", "numpy.concatenate", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.compute_frequencies"], ["", "", "def", "add_frequencies_unlabeled", "(", "self", ",", "unlabeled_samples", ")", ":", "\n", "\n", "        ", "unl_freqs", "=", "self", ".", "compute_frequencies", "(", "unlabeled_samples", ")", "\n", "\n", "if", "self", ".", "iter", "<", "self", ".", "unlabeled_samples", ":", "\n", "            ", "self", ".", "unlabeled_frequencies", "[", "self", ".", "iter", ",", ":", "]", "=", "unl_freqs", "\n", "", "else", ":", "# remove first, add this one at the bottom (concat)", "\n", "# only for unlabeled because labeled doesnot change", "\n", "            ", "self", ".", "unlabeled_frequencies", "=", "self", ".", "unlabeled_frequencies", "[", "1", ":", ",", ":", "]", "\n", "self", ".", "unlabeled_frequencies", "=", "np", ".", "concatenate", "(", "(", "self", ".", "unlabeled_frequencies", ",", "np", ".", "expand_dims", "(", "unl_freqs", ",", "0", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "self", ".", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.class_balancing.ClassBalancing.get_weights": [[97, 118], ["numpy.ones", "numpy.sum", "numpy.sum", "numpy.median", "numpy.isinf", "max", "numpy.power"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ",", "max_iter", ",", "only_labeled", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "iter", "<", "self", ".", "start_computing_iter", ":", "# do not compute weights until the memories are filled up", "\n", "            ", "return", "np", ".", "ones", "(", "(", "self", ".", "n_classes", ")", ")", "\n", "", "else", ":", "# inverse median, frequency", "\n", "            ", "ratio_unlabeled", "=", "1", "# min (1., self.iter / max_iter) # weigth to give to the pseudolabels statistics", "\n", "freqs_labeled", "=", "np", ".", "sum", "(", "self", ".", "labeled_frequencies", ",", "axis", "=", "0", ")", "\n", "freqs_unlabeled", "=", "np", ".", "sum", "(", "self", ".", "unlabeled_frequencies", ",", "axis", "=", "0", ")", "\n", "if", "only_labeled", ":", "\n", "                ", "ratio_unlabeled", "=", "0", "\n", "\n", "", "freqs", "=", "freqs_labeled", "+", "freqs_unlabeled", "*", "ratio_unlabeled", "\n", "\n", "median", "=", "np", ".", "median", "(", "freqs", ")", "\n", "weights", "=", "median", "/", "freqs", "\n", "\n", "# deal with classes with no samples", "\n", "mask_inf", "=", "np", ".", "isinf", "(", "weights", ")", "\n", "weights", "[", "mask_inf", "]", "=", "1", "\n", "weights", "[", "mask_inf", "]", "=", "max", "(", "weights", ")", "\n", "\n", "return", "np", ".", "power", "(", "weights", ",", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.normalize_rgb": [[12, 33], ["torch.Tensor().unsqueeze().unsqueeze().unsqueeze().cuda", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze().cuda", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["def", "normalize_rgb", "(", "data", ",", "dataset", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        data: data to normalize BxCxWxH\n        dataset: name of the dataset to normalize\n\n    Returns:\n        normalized data as  (x-mean)/255\n\n    \"\"\"", "\n", "if", "dataset", "==", "'pascal_voc'", ":", "\n", "        ", "mean", "=", "(", "122.6789143", ",", "116.66876762", ",", "104.00698793", ")", "# rgb", "\n", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "mean", "=", "(", "73.15835921", ",", "82.90891754", ",", "72.39239876", ")", "# rgb", "\n", "", "else", ":", "\n", "        ", "mean", "=", "(", "127.5", ",", "127.5", ",", "127.5", ")", "\n", "\n", "", "mean", "=", "torch", ".", "Tensor", "(", "mean", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "cuda", "(", ")", "\n", "data_norm", "=", "(", "(", "data", "-", "mean", ")", "/", "255.0", ")", "\n", "return", "data_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.normalize_bgr": [[35, 56], ["torch.Tensor().unsqueeze().unsqueeze().unsqueeze().cuda", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze().cuda", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["", "def", "normalize_bgr", "(", "data", ",", "dataset", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        data: data to normalize BxCxWxH\n        dataset: name of the dataset to normalize\n\n    Returns:\n        normalized data as  (x-mean)/255\n\n    \"\"\"", "\n", "if", "dataset", "==", "'pascal_voc'", ":", "\n", "        ", "mean", "=", "(", "104.00698793", ",", "116.66876762", ",", "122.6789143", ")", "# bgr", "\n", "", "elif", "dataset", "==", "'cityscapes'", ":", "\n", "        ", "mean", "=", "(", "72.39239876", ",", "82.90891754", ",", "73.15835921", ")", "# bgr", "\n", "", "else", ":", "\n", "        ", "mean", "=", "(", "127.5", ",", "127.5", ",", "127.5", ")", "\n", "\n", "", "mean", "=", "torch", ".", "Tensor", "(", "mean", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "cuda", "(", ")", "\n", "data_norm", "=", "(", "(", "data", "-", "mean", ")", "/", "255.0", ")", "\n", "return", "data_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.grayscale": [[59, 78], ["torch.Sequential", "nn.Sequential.", "kornia.augmentation.RandomGrayscale"], "function", ["None"], ["", "def", "grayscale", "(", "grayscale", ",", "data", "=", "None", ",", "target", "=", "None", ",", "probs", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        grayscale: boolean whether to apply grayscale augmentation\n        data:  input data to augment BxCxWxH\n        target: labels to augment BxWxH\n        probs: probability masks to augment BxCxWxH\n\n    Returns:\n        data is converted from rgb to grayscale if [grayscale] is True\n        target and probs are also returned with no modifications applied\n\n    \"\"\"", "\n", "if", "not", "(", "data", "is", "None", ")", ":", "\n", "        ", "if", "grayscale", "and", "data", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "seq", "=", "nn", ".", "Sequential", "(", "kornia", ".", "augmentation", ".", "RandomGrayscale", "(", "p", "=", "1.", ")", ")", "\n", "data", "=", "seq", "(", "data", ")", "\n", "", "", "return", "data", ",", "target", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.colorJitter": [[79, 100], ["torch.Sequential", "kornia.augmentation.ColorJitter", "nn.Sequential."], "function", ["None"], ["", "def", "colorJitter", "(", "colorJitter", ",", "data", "=", "None", ",", "target", "=", "None", ",", "s", "=", "0.1", ",", "probs", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        colorJitter: boolean whether to apply colorJitter augmentation\n        data:  input data to augment BxCxWxH\n        target: labels to augment BxWxH\n        probs: probability masks to augment BxCxWxH\n        s: brightness and contrast strength of the color jitter\n\n    Returns:\n        colorJitter is applied to data if [colorJitter] is True\n        target and probs are also returned with no modifications applied\n\n\n    \"\"\"", "\n", "if", "not", "(", "data", "is", "None", ")", ":", "\n", "        ", "if", "colorJitter", "and", "data", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "seq", "=", "nn", ".", "Sequential", "(", "kornia", ".", "augmentation", ".", "ColorJitter", "(", "brightness", "=", "s", ",", "contrast", "=", "s", ",", "saturation", "=", "s", "/", "2.", ",", "hue", "=", "s", "/", "3.", ")", ")", "\n", "data", "=", "seq", "(", "data", "/", "255.", ")", "*", "255.", "# assumes [0,1]", "\n", "", "", "return", "data", ",", "target", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.gaussian_blur": [[101, 122], ["torch.Sequential", "nn.Sequential.", "kornia.filters.GaussianBlur2d"], "function", ["None"], ["", "def", "gaussian_blur", "(", "blur", ",", "data", "=", "None", ",", "target", "=", "None", ",", "min_sigma", "=", "0.2", ",", "max_sigma", "=", "3", ",", "probs", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        blur: boolean whether to apply blur\n        data:  input data to augment BxCxWxH\n        target: labels to augment BxWxH\n        probs: probability masks to augment BxCxWxH\n        min_sigma: minimum sigma value for the gaussian  blur\n        max_sigma:  maximum sigma value for the gaussian  blur\n\n    Returns:\n        gaussian blur is applied to data if [blur] is True\n        target and probs are also returned with no modifications applied\n\n    \"\"\"", "\n", "if", "not", "(", "data", "is", "None", ")", ":", "\n", "        ", "if", "blur", "and", "data", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "seq", "=", "nn", ".", "Sequential", "(", "kornia", ".", "filters", ".", "GaussianBlur2d", "(", "kernel_size", "=", "(", "23", ",", "23", ")", ",", "sigma", "=", "(", "min_sigma", ",", "max_sigma", ")", ")", ")", "\n", "data", "=", "seq", "(", "data", ")", "\n", "", "", "return", "data", ",", "target", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.flip": [[123, 143], ["torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.flip", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.flip"], ["", "def", "flip", "(", "flip", ",", "data", "=", "None", ",", "target", "=", "None", ",", "probs", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        flip: boolean whether to apply flip augmentation\n        data:  input data to augment BxCxWxH\n        target: labels to augment BxWxH\n        probs: probability masks to augment BxCxWxH\n\n    Returns:\n        data, target and probs are flipped if the boolean flip is True\n\n    \"\"\"", "\n", "if", "flip", ":", "\n", "        ", "if", "not", "(", "data", "is", "None", ")", ":", "data", "=", "torch", ".", "flip", "(", "data", ",", "(", "3", ",", ")", ")", "\n", "if", "not", "(", "target", "is", "None", ")", ":", "\n", "            ", "target", "=", "torch", ".", "flip", "(", "target", ",", "(", "2", ",", ")", ")", "\n", "", "if", "not", "(", "probs", "is", "None", ")", ":", "\n", "            ", "probs", "=", "torch", ".", "flip", "(", "probs", ",", "(", "2", ",", ")", ")", "\n", "", "", "return", "data", ",", "target", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.solarize": [[144, 163], ["torch.Sequential", "kornia.augmentation.RandomSolarize", "nn.Sequential.cuda", "nn.Sequential.", "data.cpu"], "function", ["None"], ["", "def", "solarize", "(", "solarize", ",", "data", "=", "None", ",", "target", "=", "None", ",", "probs", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        solarize: boolean whether to apply solarize augmentation\n        data:  input data to augment BxCxWxH\n        target: labels to augment BxWxH\n        probs: probability masks to augment BxCxWxH\n\n    Returns:\n        data, target, probs, where\n        data is solarized  if [solarize] is True\n\n    \"\"\"", "\n", "if", "not", "(", "data", "is", "None", ")", ":", "\n", "        ", "if", "solarize", "and", "data", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "seq", "=", "nn", ".", "Sequential", "(", "kornia", ".", "augmentation", ".", "RandomSolarize", "(", "(", "0", ",", "1", ")", ")", ")", "\n", "data", "=", "seq", "(", "data", ".", "cpu", "(", ")", "/", "255.", ")", ".", "cuda", "(", ")", "*", "255.", "\n", "", "", "return", "data", ",", "target", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.mix": [[167, 192], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "range"], "function", ["None"], ["", "def", "mix", "(", "mask", ",", "data", "=", "None", ",", "target", "=", "None", ",", "probs", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Applies classMix augmentation:\n    https://openaccess.thecvf.com/content/WACV2021/papers/Olsson_ClassMix_Segmentation-Based_Data_Augmentation_for_Semi-Supervised_Learning_WACV_2021_paper.pdf\n    Args:\n        mask: masks for applying ClassMix. A list of B elements of CxWxH tensors\n        data:  input data to augment BxCxWxH\n        target: labels to augment BxWxH\n        probs: probability masks to augment BxCxWxH\n\n    Returns:\n         data, target and probs augmented with classMix\n\n    \"\"\"", "\n", "if", "not", "(", "data", "is", "None", ")", ":", "\n", "        ", "if", "mask", ".", "shape", "[", "0", "]", "==", "data", ".", "shape", "[", "0", "]", ":", "\n", "            ", "data", "=", "torch", ".", "cat", "(", "[", "(", "(", "1", "-", "mask", "[", "(", "i", "+", "1", ")", "%", "data", ".", "shape", "[", "0", "]", "]", ")", "*", "data", "[", "i", "]", "+", "mask", "[", "(", "i", "+", "1", ")", "%", "data", ".", "shape", "[", "0", "]", "]", "*", "data", "[", "(", "i", "+", "1", ")", "%", "data", ".", "shape", "[", "0", "]", "]", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "data", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "", "", "if", "not", "(", "target", "is", "None", ")", ":", "\n", "        ", "target", "=", "torch", ".", "cat", "(", "[", "(", "(", "1", "-", "mask", "[", "(", "i", "+", "1", ")", "%", "data", ".", "shape", "[", "0", "]", "]", ")", "*", "target", "[", "i", "]", "+", "mask", "[", "(", "i", "+", "1", ")", "%", "data", ".", "shape", "[", "0", "]", "]", "*", "target", "[", "(", "i", "+", "1", ")", "%", "target", ".", "shape", "[", "0", "]", "]", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "target", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "", "if", "not", "(", "probs", "is", "None", ")", ":", "\n", "        ", "probs", "=", "torch", ".", "cat", "(", "[", "(", "(", "1", "-", "mask", "[", "(", "i", "+", "1", ")", "%", "data", ".", "shape", "[", "0", "]", "]", ")", "*", "probs", "[", "i", "]", "+", "mask", "[", "(", "i", "+", "1", ")", "%", "data", ".", "shape", "[", "0", "]", "]", "*", "probs", "[", "(", "i", "+", "1", ")", "%", "probs", ".", "shape", "[", "0", "]", "]", ")", ".", "unsqueeze", "(", "0", ")", "for", "i", "in", "range", "(", "probs", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n", "", "return", "data", ",", "target", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.transformsgpu.random_scale_crop": [[194, 251], ["torch.functional.interpolate", "torch.functional.interpolate().long().squeeze", "torch.functional.interpolate().squeeze", "nn.ConstantPad2d.", "random.randint", "random.randint", "torch.ConstantPad2d", "torch.ConstantPad2d", "nn.ConstantPad2d.", "torch.ConstantPad2d", "torch.ConstantPad2d", "nn.ConstantPad2d.", "torch.functional.interpolate().long", "torch.functional.interpolate", "pad.unsqueeze", "torch.functional.interpolate", "pad.unsqueeze().float", "pad.unsqueeze"], "function", ["None"], ["", "def", "random_scale_crop", "(", "scale", ",", "data", "=", "None", ",", "target", "=", "None", ",", "ignore_label", "=", "255", ",", "probs", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        scale: scale ratio. Float\n        data:  input data to augment BxCxWxH\n        target: labels to augment BxWxH\n        probs: probability masks to augment BxCxWxH\n        ignore_label: integeer value that defines the ignore class in the datasets for the labels\n\n    Returns:\n         data, target and prob, after applied a scaling operation. output resolution is preserve as the same as the input resolution  WxH\n    \"\"\"", "\n", "if", "scale", "!=", "1", ":", "\n", "        ", "init_size_w", "=", "data", ".", "shape", "[", "2", "]", "\n", "init_size_h", "=", "data", ".", "shape", "[", "3", "]", "\n", "\n", "# scale data, labels and probs", "\n", "data", "=", "nn", ".", "functional", ".", "interpolate", "(", "data", ",", "scale_factor", "=", "scale", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ",", "recompute_scale_factor", "=", "True", ")", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "target", "=", "nn", ".", "functional", ".", "interpolate", "(", "target", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ",", "scale_factor", "=", "scale", ",", "mode", "=", "'nearest'", ",", "recompute_scale_factor", "=", "True", ")", ".", "long", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "", "if", "probs", "is", "not", "None", ":", "\n", "            ", "probs", "=", "nn", ".", "functional", ".", "interpolate", "(", "probs", ".", "unsqueeze", "(", "1", ")", ",", "scale_factor", "=", "scale", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ",", "recompute_scale_factor", "=", "True", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "final_size_w", "=", "data", ".", "shape", "[", "2", "]", "\n", "final_size_h", "=", "data", ".", "shape", "[", "3", "]", "\n", "diff_h", "=", "init_size_h", "-", "final_size_h", "\n", "diff_w", "=", "init_size_w", "-", "final_size_w", "\n", "if", "scale", "<", "1", ":", "# add padding if needed", "\n", "            ", "if", "diff_h", "%", "2", "==", "1", ":", "\n", "                ", "pad", "=", "nn", ".", "ConstantPad2d", "(", "(", "diff_w", "//", "2", ",", "diff_w", "//", "2", "+", "1", ",", "diff_h", "//", "2", "+", "1", ",", "diff_h", "//", "2", ")", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "pad", "=", "nn", ".", "ConstantPad2d", "(", "(", "diff_w", "//", "2", ",", "diff_w", "//", "2", ",", "diff_h", "//", "2", ",", "diff_h", "//", "2", ")", ",", "0", ")", "\n", "\n", "", "data", "=", "pad", "(", "data", ")", "\n", "if", "probs", "is", "not", "None", ":", "\n", "                ", "probs", "=", "pad", "(", "probs", ")", "\n", "\n", "# padding with ignore label to add to labels", "\n", "", "if", "diff_h", "%", "2", "==", "1", ":", "\n", "                ", "pad", "=", "nn", ".", "ConstantPad2d", "(", "(", "diff_w", "//", "2", ",", "diff_w", "//", "2", "+", "1", ",", "diff_h", "//", "2", "+", "1", ",", "diff_h", "//", "2", ")", ",", "ignore_label", ")", "\n", "", "else", ":", "\n", "                ", "pad", "=", "nn", ".", "ConstantPad2d", "(", "(", "diff_w", "//", "2", ",", "diff_w", "//", "2", ",", "diff_h", "//", "2", ",", "diff_h", "//", "2", ")", ",", "ignore_label", ")", "\n", "\n", "", "if", "target", "is", "not", "None", ":", "\n", "                ", "target", "=", "pad", "(", "target", ")", "\n", "\n", "", "", "else", ":", "# crop if needed", "\n", "            ", "w", "=", "random", ".", "randint", "(", "0", ",", "data", ".", "shape", "[", "2", "]", "-", "init_size_w", ")", "\n", "h", "=", "random", ".", "randint", "(", "0", ",", "data", ".", "shape", "[", "3", "]", "-", "init_size_h", ")", "\n", "data", "=", "data", "[", ":", ",", ":", ",", "h", ":", "h", "+", "init_size_h", ",", "w", ":", "w", "+", "init_size_w", "]", "\n", "if", "probs", "is", "not", "None", ":", "\n", "                ", "probs", "=", "probs", "[", ":", ",", "h", ":", "h", "+", "init_size_h", ",", "w", ":", "w", "+", "init_size_w", "]", "\n", "", "if", "target", "is", "not", "None", ":", "\n", "                ", "target", "=", "target", "[", ":", ",", "h", ":", "h", "+", "init_size_h", ",", "w", ":", "w", "+", "init_size_w", "]", "\n", "\n", "", "", "", "return", "data", ",", "target", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.palette.get_voc_palette": [[5, 21], ["range"], "function", ["None"], ["def", "get_voc_palette", "(", "num_classes", ")", ":", "\n", "    ", "n", "=", "num_classes", "\n", "palette", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "            ", "lab", "=", "j", "\n", "palette", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "(", "lab", ">", "0", ")", ":", "\n", "                    ", "palette", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "palette", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "=", "i", "+", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.CrossEntropy2d.__init__": [[9, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "super", "(", "CrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.CrossEntropy2d.forward": [[13, 33], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "predict[].view.dim", "target.dim", "target.data.dim", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                predict:(n, c, h, w)\n                target:(n, h, w)\n                weight (Tensor, optional): a manual rescaling weight given to each class.\n                                           If given, has to be a Tensor of size \"nclasses\"\n        \"\"\"", "\n", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "if", "not", "target", ".", "data", ".", "dim", "(", ")", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "weight", "=", "weight", ",", "reduction", "=", "'mean'", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.CrossEntropyLoss2dPixelWiseWeighted.__init__": [[36, 39], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "ignore_index", "=", "250", ",", "reduction", "=", "'none'", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss2dPixelWiseWeighted", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "CE", "=", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ",", "ignore_index", "=", "ignore_index", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.CrossEntropyLoss2dPixelWiseWeighted.forward": [[40, 44], ["torch.mean.CrossEntropyLoss2dPixelWiseWeighted.CE", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ",", "pixelWiseWeight", ")", ":", "\n", "        ", "loss", "=", "self", ".", "CE", "(", "output", ",", "target", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", "*", "pixelWiseWeight", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.MSELoss2d.__init__": [[46, 49], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "None", ",", "reduce", "=", "None", ",", "reduction", "=", "'mean'", ",", "ignore_index", "=", "255", ")", ":", "\n", "        ", "super", "(", "MSELoss2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "MSE", "=", "nn", ".", "MSELoss", "(", "size_average", "=", "size_average", ",", "reduce", "=", "reduce", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.MSELoss2d.forward": [[50, 53], ["loss.MSELoss2d.MSELoss2d.MSE", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "        ", "loss", "=", "self", ".", "MSE", "(", "torch", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", ",", "target", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.ImgWtLossSoftNLL.__init__": [[70, 80], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__"], ["def", "__init__", "(", "self", ",", "classes", ",", "ignore_index", "=", "255", ",", "weights", "=", "None", ",", "upper_bound", "=", "1.0", ",", "\n", "norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ImgWtLossSoftNLL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weights", "=", "weights", "\n", "self", ".", "num_classes", "=", "classes", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "upper_bound", "=", "upper_bound", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "batch_weights", "=", "False", "\n", "self", ".", "fp16", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.ImgWtLossSoftNLL.calculate_weights": [[82, 95], ["len", "target.sum", "target.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "calculate_weights", "(", "self", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Calculate weights of the classes based on training crop\n        \"\"\"", "\n", "if", "len", "(", "target", ".", "shape", ")", "==", "3", ":", "\n", "            ", "hist", "=", "np", ".", "sum", "(", "target", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "*", "1.0", "/", "target", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "hist", "=", "np", ".", "sum", "(", "target", ",", "axis", "=", "(", "0", ",", "2", ",", "3", ")", ")", "*", "1.0", "/", "target", ".", "sum", "(", ")", "\n", "", "if", "self", ".", "norm", ":", "\n", "            ", "hist", "=", "(", "(", "hist", "!=", "0", ")", "*", "self", ".", "upper_bound", "*", "(", "1", "/", "hist", ")", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "hist", "=", "(", "(", "hist", "!=", "0", ")", "*", "self", ".", "upper_bound", "*", "(", "1", "-", "hist", ")", ")", "+", "1", "\n", "", "return", "hist", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.ImgWtLossSoftNLL.custom_nll": [[96, 122], ["loss_matrix.sum", "mask.half", "mask.float", "mask.sum().item", "mask.sum", "loss.customsoftmax", "loss.customsoftmax", "target[].half", "class_weights.unsqueeze().unsqueeze().unsqueeze", "target[].half", "target[].float", "class_weights.unsqueeze().unsqueeze().unsqueeze", "target[].float", "class_weights.unsqueeze().unsqueeze", "class_weights.unsqueeze().unsqueeze", "class_weights.unsqueeze", "class_weights.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.customsoftmax", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.customsoftmax"], ["", "def", "custom_nll", "(", "self", ",", "inputs", ",", "target", ",", "class_weights", ",", "border_weights", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        NLL Relaxed Loss Implementation\n        \"\"\"", "\n", "#if (cfg.REDUCE_BORDER_EPOCH != -1 and cfg.EPOCH > cfg.REDUCE_BORDER_EPOCH):", "\n", "#    border_weights = 1 / border_weights", "\n", "#    target[target > 1] = 1", "\n", "if", "self", ".", "fp16", ":", "\n", "            ", "loss_matrix", "=", "(", "-", "1", "/", "border_weights", "*", "\n", "(", "target", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "half", "(", ")", "*", "\n", "class_weights", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "*", "\n", "customsoftmax", "(", "inputs", ",", "target", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "half", "(", ")", ")", ")", ".", "sum", "(", "1", ")", ")", "*", "(", "1.", "-", "mask", ".", "half", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss_matrix", "=", "(", "-", "1", "/", "border_weights", "*", "\n", "(", "target", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "float", "(", ")", "*", "\n", "class_weights", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "*", "\n", "customsoftmax", "(", "inputs", ",", "target", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "float", "(", ")", ")", ")", ".", "sum", "(", "1", ")", ")", "*", "(", "1.", "-", "mask", ".", "float", "(", ")", ")", "\n", "\n", "# loss_matrix[border_weights > 1] = 0", "\n", "", "loss", "=", "loss_matrix", ".", "sum", "(", ")", "\n", "\n", "# +1 to prevent division by 0", "\n", "loss", "=", "loss", "/", "(", "target", ".", "shape", "[", "0", "]", "*", "target", ".", "shape", "[", "2", "]", "*", "target", ".", "shape", "[", "3", "]", "-", "mask", ".", "sum", "(", ")", ".", "item", "(", ")", "+", "1", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.ImgWtLossSoftNLL.forward": [[123, 148], ["target.data.cpu().numpy", "range", "target[].sum().half", "target[].sum().float", "loss.ImgWtLossSoftNLL.calculate_weights", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "target.data.cpu", "loss.ImgWtLossSoftNLL.calculate_weights", "loss.ImgWtLossSoftNLL.custom_nll", "target[].sum", "target[].sum", "inputs[].unsqueeze", "target[].unsqueeze", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.ImgWtLossSoftNLL.calculate_weights", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.ImgWtLossSoftNLL.calculate_weights", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.ImgWtLossSoftNLL.custom_nll"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "fp16", ":", "\n", "            ", "weights", "=", "target", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", "1", ")", ".", "half", "(", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "target", "[", ":", ",", ":", ",", ":", ",", ":", "]", ".", "sum", "(", "1", ")", ".", "float", "(", ")", "\n", "", "ignore_mask", "=", "(", "weights", "==", "0", ")", "\n", "weights", "[", "ignore_mask", "]", "=", "1", "\n", "\n", "loss", "=", "0", "\n", "target_cpu", "=", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "self", ".", "batch_weights", ":", "\n", "            ", "class_weights", "=", "self", ".", "calculate_weights", "(", "target_cpu", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "inputs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "not", "self", ".", "batch_weights", ":", "\n", "                ", "class_weights", "=", "self", ".", "calculate_weights", "(", "target_cpu", "[", "i", "]", ")", "\n", "\n", "", "class_weights", "=", "torch", ".", "ones", "(", "(", "class_weights", ".", "shape", ")", ")", "\n", "loss", "=", "loss", "+", "self", ".", "custom_nll", "(", "inputs", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "target", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "class_weights", "=", "torch", ".", "Tensor", "(", "class_weights", ")", ".", "cuda", "(", ")", ",", "\n", "border_weights", "=", "weights", ",", "mask", "=", "ignore_mask", "[", "i", "]", ")", "\n", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.loss.customsoftmax": [[54, 63], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.log", "torch.log", "torch.log", "torch.max", "torch.max", "torch.max"], "function", ["None"], ["", "", "def", "customsoftmax", "(", "inp", ",", "multihotmask", ")", ":", "\n", "    ", "\"\"\"\n    Custom Softmax\n    \"\"\"", "\n", "soft", "=", "torch", ".", "softmax", "(", "inp", ",", "dim", "=", "1", ")", "\n", "# This takes the mask * softmax ( sums it up hence summing up the classes in border", "\n", "# then takes of summed up version vs no summed version", "\n", "return", "torch", ".", "log", "(", "\n", "torch", ".", "max", "(", "soft", ",", "(", "multihotmask", "*", "(", "soft", "*", "multihotmask", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.helpers.dir_exists": [[11, 14], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "dir_exists", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.helpers.initialize_weights": [[15, 26], ["model.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.fill_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "function", ["None"], ["", "", "def", "initialize_weights", "(", "*", "models", ")", ":", "\n", "    ", "for", "model", "in", "models", ":", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1.", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "1e-4", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.0001", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.helpers.get_upsampling_weight": [[27, 38], ["numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "abs", "abs", "list", "list", "range", "range"], "function", ["None"], ["", "", "", "", "def", "get_upsampling_weight", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ")", ":", "\n", "    ", "factor", "=", "(", "kernel_size", "+", "1", ")", "//", "2", "\n", "if", "kernel_size", "%", "2", "==", "1", ":", "\n", "            ", "center", "=", "factor", "-", "1", "\n", "", "else", ":", "\n", "            ", "center", "=", "factor", "-", "0.5", "\n", "", "og", "=", "np", ".", "ogrid", "[", ":", "kernel_size", ",", ":", "kernel_size", "]", "\n", "filt", "=", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", ")", "/", "factor", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", ")", "/", "factor", ")", "\n", "weight", "=", "np", ".", "zeros", "(", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "kernel_size", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "weight", "[", "list", "(", "range", "(", "in_channels", ")", ")", ",", "list", "(", "range", "(", "out_channels", ")", ")", ",", ":", ",", ":", "]", "=", "filt", "\n", "return", "torch", ".", "from_numpy", "(", "weight", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.helpers.colorize_mask": [[39, 46], ["range", "PIL.Image.fromarray().convert", "PIL.Image.fromarray().convert.putpalette", "len", "palette.append", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ",", "palette", ")", ":", "\n", "    ", "zero_pad", "=", "256", "*", "3", "-", "len", "(", "palette", ")", "\n", "for", "i", "in", "range", "(", "zero_pad", ")", ":", "\n", "                    ", "palette", ".", "append", "(", "0", ")", "\n", "", "new_mask", "=", "PIL", ".", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.helpers.set_trainable_attr": [[47, 50], ["m.parameters"], "function", ["None"], ["", "def", "set_trainable_attr", "(", "m", ",", "b", ")", ":", "\n", "    ", "m", ".", "trainable", "=", "b", "\n", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "p", ".", "requires_grad", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.helpers.apply_leaf": [[51, 58], ["isinstance", "isinstance", "list", "f", "len", "m.children", "helpers.apply_leaf"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.helpers.apply_leaf"], ["", "def", "apply_leaf", "(", "m", ",", "f", ")", ":", "\n", "    ", "c", "=", "m", "if", "isinstance", "(", "m", ",", "(", "list", ",", "tuple", ")", ")", "else", "list", "(", "m", ".", "children", "(", ")", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Module", ")", ":", "\n", "        ", "f", "(", "m", ")", "\n", "", "if", "len", "(", "c", ")", ">", "0", ":", "\n", "        ", "for", "l", "in", "c", ":", "\n", "            ", "apply_leaf", "(", "l", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.helpers.set_trainable": [[59, 61], ["helpers.apply_leaf", "helpers.set_trainable_attr"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.helpers.apply_leaf", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.helpers.set_trainable_attr"], ["", "", "", "def", "set_trainable", "(", "l", ",", "b", ")", ":", "\n", "    ", "apply_leaf", "(", "l", ",", "lambda", "m", ":", "set_trainable_attr", "(", "m", ",", "b", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.ConfusionMatrix.__init__": [[11, 15], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nclass", ",", "classes", "=", "None", ")", ":", "\n", "        ", "self", ".", "nclass", "=", "nclass", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "M", "=", "np", ".", "zeros", "(", "(", "nclass", ",", "nclass", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.ConfusionMatrix.add": [[16, 22], ["range", "numpy.max", "len", "len", "len"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "gt", ",", "pred", ")", ":", "\n", "        ", "assert", "(", "np", ".", "max", "(", "pred", ")", "<=", "self", ".", "nclass", ")", "\n", "assert", "(", "len", "(", "gt", ")", "==", "len", "(", "pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "            ", "if", "not", "gt", "[", "i", "]", "==", "255", ":", "\n", "                ", "self", ".", "M", "[", "gt", "[", "i", "]", ",", "pred", "[", "i", "]", "]", "+=", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.ConfusionMatrix.addM": [[23, 26], ["None"], "methods", ["None"], ["", "", "", "def", "addM", "(", "self", ",", "matrix", ")", ":", "\n", "        ", "assert", "(", "matrix", ".", "shape", "==", "self", ".", "M", ".", "shape", ")", "\n", "self", ".", "M", "+=", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.ConfusionMatrix.__str__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.ConfusionMatrix.recall": [[30, 36], ["range", "numpy.sum"], "methods", ["None"], ["", "def", "recall", "(", "self", ")", ":", "\n", "        ", "recall", "=", "0.0", "\n", "for", "i", "in", "range", "(", "self", ".", "nclass", ")", ":", "\n", "            ", "recall", "+=", "self", ".", "M", "[", "i", ",", "i", "]", "/", "np", ".", "sum", "(", "self", ".", "M", "[", ":", ",", "i", "]", ")", "\n", "\n", "", "return", "recall", "/", "self", ".", "nclass", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.ConfusionMatrix.accuracy": [[37, 43], ["range", "numpy.sum"], "methods", ["None"], ["", "def", "accuracy", "(", "self", ")", ":", "\n", "        ", "accuracy", "=", "0.0", "\n", "for", "i", "in", "range", "(", "self", ".", "nclass", ")", ":", "\n", "            ", "accuracy", "+=", "self", ".", "M", "[", "i", ",", "i", "]", "/", "np", ".", "sum", "(", "self", ".", "M", "[", "i", ",", ":", "]", ")", "\n", "\n", "", "return", "accuracy", "/", "self", ".", "nclass", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.ConfusionMatrix.jaccard": [[44, 53], ["range", "jaccard_perclass.append", "numpy.sum", "len", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "jaccard", "(", "self", ")", ":", "\n", "        ", "jaccard_perclass", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nclass", ")", ":", "\n", "            ", "intersection", "=", "self", ".", "M", "[", "i", ",", "i", "]", "\n", "union", "=", "(", "np", ".", "sum", "(", "self", ".", "M", "[", "i", ",", ":", "]", ")", "+", "np", ".", "sum", "(", "self", ".", "M", "[", ":", ",", "i", "]", ")", "-", "self", ".", "M", "[", "i", ",", "i", "]", ")", "\n", "\n", "jaccard_perclass", ".", "append", "(", "intersection", "/", "union", ")", "\n", "\n", "", "return", "np", ".", "sum", "(", "jaccard_perclass", ")", "/", "len", "(", "jaccard_perclass", ")", ",", "jaccard_perclass", ",", "self", ".", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.ConfusionMatrix.generateM": [[54, 62], ["numpy.zeros", "range", "len", "len", "len"], "methods", ["None"], ["", "def", "generateM", "(", "self", ",", "item", ")", ":", "\n", "        ", "gt", ",", "pred", "=", "item", "\n", "m", "=", "np", ".", "zeros", "(", "(", "self", ".", "nclass", ",", "self", ".", "nclass", ")", ")", "\n", "assert", "(", "len", "(", "gt", ")", "==", "len", "(", "pred", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "            ", "if", "gt", "[", "i", "]", "<", "self", ".", "nclass", ":", "\n", "                ", "m", "[", "gt", "[", "i", "]", ",", "pred", "[", "i", "]", "]", "+=", "1.0", "\n", "", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric._pickle_method": [[64, 69], ["None"], "function", ["None"], ["", "", "def", "_pickle_method", "(", "m", ")", ":", "\n", "    ", "if", "m", ".", "im_self", "is", "None", ":", "\n", "        ", "return", "getattr", ",", "(", "m", ".", "im_class", ",", "m", ".", "im_func", ".", "func_name", ")", "\n", "", "else", ":", "\n", "        ", "return", "getattr", ",", "(", "m", ".", "im_self", ",", "m", ".", "im_func", ".", "func_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.get_iou": [[71, 101], ["metric.ConfusionMatrix", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "metric.ConfusionMatrix.jaccard", "numpy.array", "enumerate", "print", "metric.ConfusionMatrix.addM", "print", "open", "enumerate", "f.write", "str", "f.write", "str"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.ConfusionMatrix.jaccard", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.metric.ConfusionMatrix.addM"], ["", "", "def", "get_iou", "(", "data_list", ",", "class_num", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "ConfM", "=", "ConfusionMatrix", "(", "class_num", ")", "\n", "f", "=", "ConfM", ".", "generateM", "\n", "pool", "=", "Pool", "(", ")", "\n", "m_list", "=", "pool", ".", "map", "(", "f", ",", "data_list", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "\n", "for", "m", "in", "m_list", ":", "\n", "        ", "ConfM", ".", "addM", "(", "m", ")", "\n", "\n", "", "aveJ", ",", "j_list", ",", "M", "=", "ConfM", ".", "jaccard", "(", ")", "\n", "\n", "classes", "=", "np", ".", "array", "(", "(", "'background'", ",", "# always index 0", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "\n", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "\n", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", ")", ")", "\n", "\n", "for", "i", ",", "iou", "in", "enumerate", "(", "j_list", ")", ":", "\n", "        ", "print", "(", "'class {:2d} {:12} IU {:.2f}'", ".", "format", "(", "i", ",", "classes", "[", "i", "]", ",", "j_list", "[", "i", "]", ")", ")", "\n", "\n", "\n", "", "print", "(", "'meanIOU: '", "+", "str", "(", "aveJ", ")", "+", "'\\n'", ")", "\n", "if", "save_path", ":", "\n", "        ", "with", "open", "(", "save_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "iou", "in", "enumerate", "(", "j_list", ")", ":", "\n", "                ", "f", ".", "write", "(", "'class {:2d} {:12} IU {:.2f}'", ".", "format", "(", "i", ",", "classes", "[", "i", "]", ",", "j_list", "[", "i", "]", ")", "+", "'\\n'", ")", "\n", "", "f", ".", "write", "(", "'meanIOU: '", "+", "str", "(", "aveJ", ")", "+", "'\\n'", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.color_city.fromIdTraintoColor": [[128, 136], ["None"], "function", ["None"], ["def", "fromIdTraintoColor", "(", "imgin", ",", "imgout", ")", ":", "\n", "    ", "for", "id", "in", "id2label", ":", "\n", "\n", "        ", "color", "=", "(", "id2label", "[", "id", "]", ".", "color", "[", "2", "]", ",", "id2label", "[", "id", "]", ".", "color", "[", "1", "]", ",", "id2label", "[", "id", "]", ".", "color", "[", "0", "]", ")", "\n", "imgout", "[", "imgin", "==", "id2label", "[", "id", "]", ".", "trainId", "]", "=", "color", "\n", "\n", "", "imgout", "[", "imgin", ">", "18", "]", "=", "0", "\n", "return", "imgout", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.utils.color_pascal.color_map": [[29, 48], ["numpy.zeros", "range", "range", "numpy.array", "color_pascal.color_map.bitget"], "function", ["None"], ["def", "color_map", "(", "N", "=", "256", ",", "normalized", "=", "False", ")", ":", "\n", "    ", "def", "bitget", "(", "byteval", ",", "idx", ")", ":", "\n", "        ", "return", "(", "(", "byteval", "&", "(", "1", "<<", "idx", ")", ")", "!=", "0", ")", "\n", "\n", "", "dtype", "=", "'float32'", "if", "normalized", "else", "'uint8'", "\n", "cmap", "=", "np", ".", "zeros", "(", "(", "N", ",", "3", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "r", "=", "g", "=", "b", "=", "0", "\n", "c", "=", "i", "\n", "for", "j", "in", "range", "(", "8", ")", ":", "\n", "            ", "r", "=", "r", "|", "(", "bitget", "(", "c", ",", "0", ")", "<<", "7", "-", "j", ")", "\n", "g", "=", "g", "|", "(", "bitget", "(", "c", ",", "1", ")", "<<", "7", "-", "j", ")", "\n", "b", "=", "b", "|", "(", "bitget", "(", "c", ",", "2", ")", "<<", "7", "-", "j", ")", "\n", "c", "=", "c", ">>", "3", "\n", "\n", "", "cmap", "[", "i", "]", "=", "np", ".", "array", "(", "[", "r", ",", "g", ",", "b", "]", ")", "\n", "\n", "", "cmap", "=", "cmap", "/", "255", "if", "normalized", "else", "cmap", "\n", "return", "cmap", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[64, 68], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 48], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.replicate.patch_replication_callback": [[70, 95], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "\n", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.SyncMaster.__init__": [[67, 77], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.SyncMaster.__getstate__": [[78, 80], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.SyncMaster.__setstate__": [[81, 83], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.SyncMaster.register_slave": [[84, 101], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n\n        Args:\n            identifier: an identifier, usually is the device id.\n\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.SyncMaster.run_master": [[102, 134], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n\n        Returns: the message to be sent back to the master device.\n\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.SyncMaster.nr_slaves": [[135, 138], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[16, 29], ["float", "unittest.TorchTestCase.assertTrue", "float", "torch.allclose"], "methods", ["None"], ["    ", "def", "assertTensorClose", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "adiff", "=", "float", "(", "(", "x", "-", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "if", "(", "y", "==", "0", ")", ".", "all", "(", ")", ":", "\n", "            ", "rdiff", "=", "'NaN'", "\n", "", "else", ":", "\n", "            ", "rdiff", "=", "float", "(", "(", "adiff", "/", "y", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", "\n", "\n", "", "message", "=", "(", "\n", "'Tensor close check failed\\n'", "\n", "'adiff={}\\n'", "\n", "'rdiff={}\\n'", "\n", ")", ".", "format", "(", "adiff", ",", "rdiff", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "allclose", "(", "x", ",", "y", ")", ",", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[52, 62], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "SyncMaster"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "assert", "ReduceAddCoalesced", "is", "not", "None", ",", "'Can not use Synchronized Batch Normalization without CUDA support.'", "\n", "\n", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[63, 94], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[95, 104], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[105, 127], ["sorted", "sum", "ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[128, 146], ["hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "if", "hasattr", "(", "torch", ",", "'no_grad'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[204, 209], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm1d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[267, 272], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm2d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[331, 336], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm3d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._sum_ft": [[37, 40], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm._unsqueeze_ft": [[42, 45], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dimensions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm.patch_sync_batchnorm": [[338, 351], ["None"], "function", ["None"], ["", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "patch_sync_batchnorm", "(", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "backup", "=", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "\n", "\n", "nn", ".", "BatchNorm1d", "=", "SynchronizedBatchNorm1d", "\n", "nn", ".", "BatchNorm2d", "=", "SynchronizedBatchNorm2d", "\n", "nn", ".", "BatchNorm3d", "=", "SynchronizedBatchNorm3d", "\n", "\n", "yield", "\n", "\n", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", "=", "backup", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm.convert_model": [[353, 398], ["isinstance", "zip", "module.named_children", "batchnorm.convert_model", "DataParallelWithCallback", "isinstance", "sync_module.add_module", "sync_module", "batchnorm.convert_model", "module.weight.data.clone().detach", "module.bias.data.clone().detach", "sync_module.parameters", "module.weight.data.clone", "module.bias.data.clone"], "function", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm.convert_model", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm.convert_model"], ["", "def", "convert_model", "(", "module", ")", ":", "\n", "    ", "\"\"\"Traverse the input module and its child recursively\n       and replace all instance of torch.nn.modules.batchnorm.BatchNorm*N*d\n       to SynchronizedBatchNorm*N*d\n\n    Args:\n        module: the input module needs to be convert to SyncBN model\n\n    Examples:\n        >>> import torch.nn as nn\n        >>> import torchvision\n        >>> # m is a standard pytorch model\n        >>> m = torchvision.models.resnet18(True)\n        >>> m = nn.DataParallel(m)\n        >>> # after convert, m is using SyncBN\n        >>> m = convert_model(m)\n    \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "        ", "mod", "=", "module", ".", "module", "\n", "mod", "=", "convert_model", "(", "mod", ")", "\n", "mod", "=", "DataParallelWithCallback", "(", "mod", ")", "\n", "return", "mod", "\n", "\n", "", "mod", "=", "module", "\n", "for", "pth_module", ",", "sync_module", "in", "zip", "(", "[", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm1d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm2d", ",", "\n", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "BatchNorm3d", "]", ",", "\n", "[", "SynchronizedBatchNorm1d", ",", "\n", "SynchronizedBatchNorm2d", ",", "\n", "SynchronizedBatchNorm3d", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "pth_module", ")", ":", "\n", "            ", "mod", "=", "sync_module", "(", "module", ".", "num_features", ",", "module", ".", "eps", ",", "module", ".", "momentum", ",", "module", ".", "affine", ")", "\n", "mod", ".", "running_mean", "=", "module", ".", "running_mean", "\n", "mod", ".", "running_var", "=", "module", ".", "running_var", "\n", "if", "module", ".", "affine", ":", "\n", "                ", "mod", ".", "weight", ".", "data", "=", "module", ".", "weight", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "mod", ".", "bias", ".", "data", "=", "module", ".", "bias", ".", "data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "for", "i", "in", "mod", ".", "parameters", "(", ")", ":", "\n", "                    ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "\n", "", "", "", "", "for", "name", ",", "child", "in", "module", ".", "named_children", "(", ")", ":", "\n", "        ", "mod", ".", "add_module", "(", "name", ",", "convert_model", "(", "child", ")", ")", "\n", "\n", "", "return", "mod", "\n", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.__init__": [[27, 38], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.register_buffer", "batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters"], ["def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_mean'", ",", "torch", ".", "zeros", "(", "num_features", ")", ")", "\n", "self", ".", "register_buffer", "(", "'running_var'", ",", "torch", ".", "ones", "(", "num_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats": [[39, 42], ["batchnorm_reimpl.BatchNorm2dReimpl.running_mean.zero_", "batchnorm_reimpl.BatchNorm2dReimpl.running_var.fill_"], "methods", ["None"], ["", "def", "reset_running_stats", "(", "self", ")", ":", "\n", "        ", "self", ".", "running_mean", ".", "zero_", "(", ")", "\n", "self", ".", "running_var", ".", "fill_", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_parameters": [[43, 47], ["batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats", "torch.uniform_", "torch.uniform_", "torch.uniform_", "torch.zeros_", "torch.zeros_", "torch.zeros_"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.reset_running_stats"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset_running_stats", "(", ")", "\n", "init", ".", "uniform_", "(", "self", ".", "weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.sync_batchnorm.batchnorm_reimpl.BatchNorm2dReimpl.forward": [[48, 74], ["input_.permute().contiguous().view.permute().contiguous().view.size", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "input_.permute().contiguous().view.permute().contiguous().view.sum", "input_.permute().contiguous().view.permute().contiguous().view.pow().sum", "output.view().permute().contiguous", "batchnorm_reimpl.BatchNorm2dReimpl.bias.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "input_.permute().contiguous().view.permute().contiguous().view.pow", "mean.detach", "unbias_var.detach", "batchnorm_reimpl.BatchNorm2dReimpl.weight.unsqueeze", "output.view().permute", "inv_std.unsqueeze", "input_.permute().contiguous().view.permute().contiguous().view.permute", "mean.unsqueeze", "output.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_", ")", ":", "\n", "        ", "batchsize", ",", "channels", ",", "height", ",", "width", "=", "input_", ".", "size", "(", ")", "\n", "numel", "=", "batchsize", "*", "height", "*", "width", "\n", "input_", "=", "input_", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "channels", ",", "numel", ")", "\n", "sum_", "=", "input_", ".", "sum", "(", "1", ")", "\n", "sum_of_square", "=", "input_", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ")", "\n", "mean", "=", "sum_", "/", "numel", "\n", "sumvar", "=", "sum_of_square", "-", "sum_", "*", "mean", "\n", "\n", "self", ".", "running_mean", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "\n", "+", "self", ".", "momentum", "*", "mean", ".", "detach", "(", ")", "\n", ")", "\n", "unbias_var", "=", "sumvar", "/", "(", "numel", "-", "1", ")", "\n", "self", ".", "running_var", "=", "(", "\n", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "\n", "+", "self", ".", "momentum", "*", "unbias_var", ".", "detach", "(", ")", "\n", ")", "\n", "\n", "bias_var", "=", "sumvar", "/", "numel", "\n", "inv_std", "=", "1", "/", "(", "bias_var", "+", "self", ".", "eps", ")", ".", "pow", "(", "0.5", ")", "\n", "output", "=", "(", "\n", "(", "input_", "-", "mean", ".", "unsqueeze", "(", "1", ")", ")", "*", "inv_std", ".", "unsqueeze", "(", "1", ")", "*", "\n", "self", ".", "weight", ".", "unsqueeze", "(", "1", ")", "+", "self", ".", "bias", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "return", "output", ".", "view", "(", "channels", ",", "batchsize", ",", "height", ",", "width", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.Bottleneck.__init__": [[35, 55], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv2.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv2.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv2.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.Bottleneck.forward": [[57, 78], ["deeplabv2.Bottleneck.conv1", "deeplabv2.Bottleneck.bn1", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.conv2", "deeplabv2.Bottleneck.bn2", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.conv3", "deeplabv2.Bottleneck.bn3", "deeplabv2.Bottleneck.relu", "deeplabv2.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.Classifier_Module.__init__": [[81, 89], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplabv2.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "2048", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.Classifier_Module.forward": [[90, 95], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.ResNet.__init__": [[99, 158], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv2.ResNet.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplabv2.ResNet._make_layer", "deeplabv2.ResNet._make_layer", "deeplabv2.ResNet._make_layer", "deeplabv2.ResNet._make_layer", "deeplabv2.ResNet._make_pred_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "deeplabv2.ResNet.modules", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deeplabv2.ResNet.__setattr__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deeplabv2.ResNet.__setattr__", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "m.weight.data.normal_", "isinstance", "str", "str", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "dim_in", "=", "2048", "\n", "feat_dim", "=", "256", "\n", "self", ".", "projection_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feat_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", "\n", ")", "\n", "self", ".", "prediction_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feat_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", "\n", ")", "\n", "\n", "for", "class_c", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "selector", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feat_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "1", ")", "\n", ")", "\n", "self", ".", "__setattr__", "(", "'contrastive_class_selector_'", "+", "str", "(", "class_c", ")", ",", "selector", ")", "\n", "\n", "", "for", "class_c", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "selector", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feat_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "1", ")", "\n", ")", "\n", "self", ".", "__setattr__", "(", "'contrastive_class_selector_memory'", "+", "str", "(", "class_c", ")", ",", "selector", ")", "\n", "\n", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.ResNet._make_layer": [[159, 175], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.ResNet._make_pred_layer": [[176, 178], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.ResNet.forward_projection_head": [[180, 182], ["deeplabv2.ResNet.projection_head"], "methods", ["None"], ["", "def", "forward_projection_head", "(", "self", ",", "features", ")", ":", "\n", "        ", "return", "self", ".", "projection_head", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.ResNet.forward_prediction_head": [[183, 185], ["deeplabv2.ResNet.prediction_head"], "methods", ["None"], ["", "def", "forward_prediction_head", "(", "self", ",", "features", ")", ":", "\n", "        ", "return", "self", ".", "prediction_head", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.ResNet.forward": [[187, 202], ["deeplabv2.ResNet.conv1", "deeplabv2.ResNet.bn1", "deeplabv2.ResNet.relu", "deeplabv2.ResNet.maxpool", "deeplabv2.ResNet.layer1", "deeplabv2.ResNet.layer2", "deeplabv2.ResNet.layer3", "deeplabv2.ResNet.layer4", "deeplabv2.ResNet.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "features", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "features", ")", "\n", "\n", "if", "return_features", ":", "\n", "            ", "return", "x", ",", "features", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.ResNet.get_1x_lr_params": [[203, 230], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "range", "b.append", "b.append", "len", "b[].parameters", "deeplabv2.ResNet.__getattr__", "deeplabv2.ResNet.__getattr__", "str", "str"], "methods", ["None"], ["", "", "def", "get_1x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "b", ".", "append", "(", "self", ".", "layer5", ")", "\n", "b", ".", "append", "(", "self", ".", "projection_head", ")", "\n", "b", ".", "append", "(", "self", ".", "prediction_head", ")", "\n", "\n", "for", "class_c", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "__getattr__", "(", "'contrastive_class_selector_'", "+", "str", "(", "class_c", ")", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "__getattr__", "(", "'contrastive_class_selector_memory'", "+", "str", "(", "class_c", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "k", "in", "b", "[", "i", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "if", "k", ".", "requires_grad", ":", "\n", "                    ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.ResNet.optim_parameters": [[232, 235], ["deeplabv2.ResNet.get_1x_lr_params"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet.get_1x_lr_params"], ["", "", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "# TODO: change names", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.outS": [[19, 25], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.conv3x3": [[26, 30], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2.Res_Deeplab": [[237, 240], ["deeplabv2.ResNet"], "function", ["None"], ["", "", "def", "Res_Deeplab", "(", "num_classes", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.Bottleneck.__init__": [[31, 51], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplabv2_imagenet.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplabv2_imagenet.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.BatchNorm2d", "deeplabv2_imagenet.Bottleneck.bn3.parameters", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.Bottleneck.forward": [[53, 74], ["deeplabv2_imagenet.Bottleneck.conv1", "deeplabv2_imagenet.Bottleneck.bn1", "deeplabv2_imagenet.Bottleneck.relu", "deeplabv2_imagenet.Bottleneck.conv2", "deeplabv2_imagenet.Bottleneck.bn2", "deeplabv2_imagenet.Bottleneck.relu", "deeplabv2_imagenet.Bottleneck.conv3", "deeplabv2_imagenet.Bottleneck.bn3", "deeplabv2_imagenet.Bottleneck.relu", "deeplabv2_imagenet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.Classifier_Module.__init__": [[77, 85], ["torch.Module.__init__", "torch.ModuleList", "zip", "deeplabv2_imagenet.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "2048", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.Classifier_Module.forward": [[86, 91], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.ResNet.__init__": [[95, 153], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "deeplabv2_imagenet.ResNet.bn1.parameters", "torch.ReLU", "torch.MaxPool2d", "deeplabv2_imagenet.ResNet._make_layer", "deeplabv2_imagenet.ResNet._make_layer", "deeplabv2_imagenet.ResNet._make_layer", "deeplabv2_imagenet.ResNet._make_layer", "deeplabv2_imagenet.ResNet._make_pred_layer", "torch.Sequential", "torch.Sequential", "range", "range", "deeplabv2_imagenet.ResNet.modules", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU", "torch.Linear", "torch.Sequential", "deeplabv2_imagenet.ResNet.__setattr__", "torch.Sequential", "deeplabv2_imagenet.ResNet.__setattr__", "isinstance", "torch.Linear", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.Linear", "m.weight.data.normal_", "isinstance", "str", "str", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "dim_in", "=", "2048", "\n", "feat_dim", "=", "256", "\n", "self", ".", "projection_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feat_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", "\n", ")", "\n", "self", ".", "prediction_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feat_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", "\n", ")", "\n", "\n", "for", "class_c", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "selector", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feat_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "1", ")", "\n", ")", "\n", "self", ".", "__setattr__", "(", "'contrastive_class_selector_'", "+", "str", "(", "class_c", ")", ",", "selector", ")", "\n", "\n", "", "for", "class_c", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "selector", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feat_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "1", ")", "\n", ")", "\n", "self", ".", "__setattr__", "(", "'contrastive_class_selector_memory'", "+", "str", "(", "class_c", ")", ",", "selector", ")", "\n", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.ResNet._make_layer": [[154, 170], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.ResNet._make_pred_layer": [[171, 173], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.ResNet.forward_projection_head": [[175, 177], ["deeplabv2_imagenet.ResNet.projection_head"], "methods", ["None"], ["", "def", "forward_projection_head", "(", "self", ",", "features", ")", ":", "\n", "        ", "return", "self", ".", "projection_head", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.ResNet.forward_prediction_head": [[178, 180], ["deeplabv2_imagenet.ResNet.prediction_head"], "methods", ["None"], ["", "def", "forward_prediction_head", "(", "self", ",", "features", ")", ":", "\n", "        ", "return", "self", ".", "prediction_head", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.ResNet.forward": [[181, 196], ["deeplabv2_imagenet.ResNet.conv1", "deeplabv2_imagenet.ResNet.bn1", "deeplabv2_imagenet.ResNet.relu", "deeplabv2_imagenet.ResNet.maxpool", "deeplabv2_imagenet.ResNet.layer1", "deeplabv2_imagenet.ResNet.layer2", "deeplabv2_imagenet.ResNet.layer3", "deeplabv2_imagenet.ResNet.layer4", "deeplabv2_imagenet.ResNet.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "features", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "features", ")", "\n", "\n", "if", "return_features", ":", "\n", "            ", "return", "x", ",", "features", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.ResNet.get_1x_lr_params": [[198, 225], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "range", "b.append", "b.append", "len", "b[].parameters", "deeplabv2_imagenet.ResNet.__getattr__", "deeplabv2_imagenet.ResNet.__getattr__", "str", "str"], "methods", ["None"], ["", "", "def", "get_1x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "b", ".", "append", "(", "self", ".", "layer5", ")", "\n", "b", ".", "append", "(", "self", ".", "projection_head", ")", "\n", "b", ".", "append", "(", "self", ".", "prediction_head", ")", "\n", "\n", "for", "class_c", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "__getattr__", "(", "'contrastive_class_selector_'", "+", "str", "(", "class_c", ")", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "__getattr__", "(", "'contrastive_class_selector_memory'", "+", "str", "(", "class_c", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "k", "in", "b", "[", "i", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "if", "k", ".", "requires_grad", ":", "\n", "                    ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.ResNet.optim_parameters": [[227, 230], ["deeplabv2_imagenet.ResNet.get_1x_lr_params"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet.get_1x_lr_params"], ["", "", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "# TODO: change names", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.outS": [[16, 22], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.conv3x3": [[23, 27], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv2_imagenet.Res_Deeplab": [[232, 235], ["deeplabv2_imagenet.ResNet"], "function", ["None"], ["", "", "def", "Res_Deeplab", "(", "num_classes", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.Decoder.__init__": [[21, 39], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "deeplabv3.Decoder._init_weight", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ASPP._init_weight"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "low_level_inplanes", "=", "256", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "low_level_inplanes", ",", "48", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "48", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "pre_last_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "304", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "last_dropout", "=", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "self", ".", "last_conv", "=", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.Decoder.forward": [[41, 54], ["deeplabv3.Decoder.conv1", "deeplabv3.Decoder.bn1", "deeplabv3.Decoder.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplabv3.Decoder.pre_last_conv", "deeplabv3.Decoder.last_dropout", "deeplabv3.Decoder.last_conv", "deeplabv3.Decoder.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "low_level_feat", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "low_level_feat", "=", "self", ".", "conv1", "(", "low_level_feat", ")", "\n", "low_level_feat", "=", "self", ".", "bn1", "(", "low_level_feat", ")", "\n", "low_level_feat", "=", "self", ".", "relu", "(", "low_level_feat", ")", "\n", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "low_level_feat", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "low_level_feat", ")", ",", "dim", "=", "1", ")", "\n", "x_f", "=", "self", ".", "pre_last_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "last_dropout", "(", "x_f", ")", "\n", "x", "=", "self", ".", "last_conv", "(", "x", ")", "\n", "if", "return_features", ":", "\n", "            ", "return", "x", ",", "x_f", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.Decoder._init_weight": [[55, 62], ["deeplabv3.Decoder.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3._ASPPModule.__init__": [[64, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplabv3._ASPPModule._init_weight"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ASPP._init_weight"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", ",", "padding", ",", "dilation", ")", ":", "\n", "        ", "super", "(", "_ASPPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "atrous_conv", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3._ASPPModule.forward": [[73, 78], ["deeplabv3._ASPPModule.atrous_conv", "deeplabv3._ASPPModule.bn", "deeplabv3._ASPPModule.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "atrous_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "\n", "return", "self", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3._ASPPModule._init_weight": [[79, 86], ["deeplabv3._ASPPModule.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ASPP.__init__": [[88, 108], ["torch.Module.__init__", "deeplabv3._ASPPModule", "deeplabv3._ASPPModule", "deeplabv3._ASPPModule", "deeplabv3._ASPPModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "deeplabv3.ASPP._init_weight", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ASPP._init_weight"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inplanes", "=", "2048", "\n", "dilations", "=", "[", "1", ",", "6", ",", "12", ",", "18", "]", "\n", "\n", "\n", "self", ".", "aspp1", "=", "_ASPPModule", "(", "inplanes", ",", "256", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "dilations", "[", "0", "]", ")", "\n", "self", ".", "aspp2", "=", "_ASPPModule", "(", "inplanes", ",", "256", ",", "3", ",", "padding", "=", "dilations", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ")", "\n", "self", ".", "aspp3", "=", "_ASPPModule", "(", "inplanes", ",", "256", ",", "3", ",", "padding", "=", "dilations", "[", "2", "]", ",", "dilation", "=", "dilations", "[", "2", "]", ")", "\n", "self", ".", "aspp4", "=", "_ASPPModule", "(", "inplanes", ",", "256", ",", "3", ",", "padding", "=", "dilations", "[", "3", "]", ",", "dilation", "=", "dilations", "[", "3", "]", ")", "\n", "\n", "self", ".", "global_avg_pool", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1280", ",", "256", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "256", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ASPP.forward": [[109, 123], ["deeplabv3.ASPP.aspp1", "deeplabv3.ASPP.aspp2", "deeplabv3.ASPP.aspp3", "deeplabv3.ASPP.aspp4", "deeplabv3.ASPP.global_avg_pool", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deeplabv3.ASPP.conv1", "deeplabv3.ASPP.bn1", "deeplabv3.ASPP.relu", "deeplabv3.ASPP.dropout", "deeplabv3.ASPP.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "aspp1", "(", "x", ")", "\n", "x2", "=", "self", ".", "aspp2", "(", "x", ")", "\n", "x3", "=", "self", ".", "aspp3", "(", "x", ")", "\n", "x4", "=", "self", ".", "aspp4", "(", "x", ")", "\n", "x5", "=", "self", ".", "global_avg_pool", "(", "x", ")", "\n", "x5", "=", "F", ".", "interpolate", "(", "x5", ",", "size", "=", "x4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ASPP._init_weight": [[124, 131], ["deeplabv3.ASPP.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.Bottleneck.__init__": [[151, 171], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv3.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv3.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv3.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.Bottleneck.forward": [[172, 193], ["deeplabv3.Bottleneck.conv1", "deeplabv3.Bottleneck.bn1", "deeplabv3.Bottleneck.relu", "deeplabv3.Bottleneck.conv2", "deeplabv3.Bottleneck.bn2", "deeplabv3.Bottleneck.relu", "deeplabv3.Bottleneck.conv3", "deeplabv3.Bottleneck.bn3", "deeplabv3.Bottleneck.relu", "deeplabv3.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet.__init__": [[199, 266], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplabv3.ResNet.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplabv3.ResNet._make_layer", "deeplabv3.ResNet._make_layer", "deeplabv3.ResNet._make_layer", "deeplabv3.ResNet._make_layer", "deeplabv3.ASPP", "deeplabv3.Decoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "deeplabv3.ResNet.modules", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deeplabv3.ResNet.__setattr__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "deeplabv3.ResNet.__setattr__", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "m.weight.data.normal_", "isinstance", "str", "str", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ",", "output_stride", "=", "16", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "if", "output_stride", "==", "16", ":", "\n", "            ", "strides", "=", "[", "2", ",", "2", ",", "1", "]", "\n", "dilations", "=", "[", "1", ",", "1", ",", "2", "]", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "strides", "=", "[", "2", ",", "1", ",", "1", "]", "\n", "dilations", "=", "[", "1", ",", "2", ",", "4", "]", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "strides", "[", "0", "]", ",", "dilation", "=", "dilations", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "strides", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "strides", "[", "2", "]", ",", "dilation", "=", "dilations", "[", "2", "]", ")", "\n", "\n", "self", ".", "aspp", "=", "ASPP", "(", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "num_classes", ")", "\n", "\n", "\n", "dim_in", "=", "256", "\n", "feat_dim", "=", "256", "\n", "self", ".", "projection_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "dim_in", ",", "feat_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feat_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", "\n", ")", "\n", "self", ".", "prediction_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feat_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", "\n", ")", "\n", "\n", "for", "class_c", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "selector", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feat_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "1", ")", "\n", ")", "\n", "self", ".", "__setattr__", "(", "'contrastive_class_selector_'", "+", "str", "(", "class_c", ")", ",", "selector", ")", "\n", "\n", "", "for", "class_c", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "selector", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "feat_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "feat_dim", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "feat_dim", ",", "1", ")", "\n", ")", "\n", "self", ".", "__setattr__", "(", "'contrastive_class_selector_memory'", "+", "str", "(", "class_c", ")", ",", "selector", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_layer": [[267, 283], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet._make_pred_layer": [[284, 286], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet.forward_projection_head": [[288, 290], ["deeplabv3.ResNet.projection_head"], "methods", ["None"], ["", "def", "forward_projection_head", "(", "self", ",", "features", ")", ":", "\n", "        ", "return", "self", ".", "projection_head", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet.forward_prediction_head": [[291, 293], ["deeplabv3.ResNet.prediction_head"], "methods", ["None"], ["", "def", "forward_prediction_head", "(", "self", ",", "features", ")", ":", "\n", "        ", "return", "self", ".", "prediction_head", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet.forward": [[294, 310], ["deeplabv3.ResNet.conv1", "deeplabv3.ResNet.bn1", "deeplabv3.ResNet.relu", "deeplabv3.ResNet.maxpool", "deeplabv3.ResNet.layer1", "deeplabv3.ResNet.layer2", "deeplabv3.ResNet.layer3", "deeplabv3.ResNet.layer4", "deeplabv3.ResNet.aspp", "deeplabv3.ResNet.decoder", "deeplabv3.ResNet.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_features", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "low_level_feat", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "low_level_feat", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "if", "return_features", ":", "\n", "            ", "x", ",", "features", "=", "self", ".", "decoder", "(", "x", ",", "low_level_feat", ",", "True", ")", "\n", "return", "x", ",", "features", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "decoder", "(", "x", ",", "low_level_feat", ",", "False", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet.get_1x_lr_params": [[312, 340], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "range", "b.append", "b.append", "len", "b[].parameters", "deeplabv3.ResNet.__getattr__", "deeplabv3.ResNet.__getattr__", "str", "str"], "methods", ["None"], ["", "", "def", "get_1x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "b", ".", "append", "(", "self", ".", "aspp", ")", "\n", "b", ".", "append", "(", "self", ".", "decoder", ")", "\n", "b", ".", "append", "(", "self", ".", "projection_head", ")", "\n", "b", ".", "append", "(", "self", ".", "prediction_head", ")", "\n", "\n", "for", "class_c", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "b", ".", "append", "(", "self", ".", "__getattr__", "(", "'contrastive_class_selector_'", "+", "str", "(", "class_c", ")", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "__getattr__", "(", "'contrastive_class_selector_memory'", "+", "str", "(", "class_c", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "k", "in", "b", "[", "i", "]", ".", "parameters", "(", ")", ":", "\n", "                ", "if", "k", ".", "requires_grad", ":", "\n", "                    ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet.optim_parameters": [[341, 343], ["deeplabv3.ResNet.get_1x_lr_params"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.ResNet.get_1x_lr_params"], ["", "", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.outS": [[133, 139], ["int", "int", "numpy.ceil"], "function", ["None"], ["", "", "", "", "def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.conv3x3": [[140, 144], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.Res_Deeplab": [[344, 347], ["deeplabv3.ResNet"], "function", ["None"], ["", "", "def", "Res_Deeplab", "(", "num_classes", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.model.deeplabv3.Res_Deeplab50": [[348, 351], ["deeplabv3.ResNet"], "function", ["None"], ["", "def", "Res_Deeplab50", "(", "num_classes", ",", "os", "=", "16", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", ",", "output_stride", "=", "os", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.gta5_loader.gtaLoader.__init__": [[47, 121], ["os.path.join", "os.path.join", "torch.utils.data.city_utils.recursive_glob", "dict", "print", "isinstance", "zip", "Exception", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.city_utils.recursive_glob"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "split", "=", "\"train\"", ",", "\n", "is_transform", "=", "False", ",", "\n", "img_size", "=", "(", "512", ",", "1024", ")", ",", "\n", "img_norm", "=", "False", ",", "\n", "augmentations", "=", "None", ",", "\n", "version", "=", "\"cityscapes\"", ",", "\n", "pretraining", "=", "'COCO'", ",", "\n", "return_id", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"__init__\n        :param root:\n        :param split:\n        :param is_transform:\n        :param img_size:\n        :param augmentations\n        \"\"\"", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "pretraining", "=", "pretraining", "\n", "self", ".", "is_transform", "=", "is_transform", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "img_norm", "=", "img_norm", "\n", "self", ".", "n_classes", "=", "19", "\n", "self", ".", "img_size", "=", "(", "\n", "img_size", "if", "isinstance", "(", "img_size", ",", "tuple", ")", "else", "(", "img_size", ",", "img_size", ")", "\n", ")", "\n", "self", ".", "files", "=", "{", "}", "\n", "\n", "self", ".", "images_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"images\"", ",", "self", ".", "split", ")", "\n", "\n", "self", ".", "annotations_base", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "\"labels\"", ",", "self", ".", "split", "\n", ")", "\n", "\n", "self", ".", "files", "[", "split", "]", "=", "recursive_glob", "(", "rootdir", "=", "self", ".", "images_base", ",", "suffix", "=", "\".png\"", ")", "\n", "self", ".", "void_classes", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "10", ",", "14", ",", "15", ",", "16", ",", "18", ",", "29", ",", "30", ",", "-", "1", "]", "\n", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\n", "\"unlabelled\"", ",", "\n", "\"road\"", ",", "\n", "\"sidewalk\"", ",", "\n", "\"building\"", ",", "\n", "\"wall\"", ",", "\n", "\"fence\"", ",", "\n", "\"pole\"", ",", "\n", "\"traffic_light\"", ",", "\n", "\"traffic_sign\"", ",", "\n", "\"vegetation\"", ",", "\n", "\"terrain\"", ",", "\n", "\"sky\"", ",", "\n", "\"person\"", ",", "\n", "\"rider\"", ",", "\n", "\"car\"", ",", "\n", "\"truck\"", ",", "\n", "\"bus\"", ",", "\n", "\"train\"", ",", "\n", "\"motorcycle\"", ",", "\n", "\"bicycle\"", ",", "\n", "]", "\n", "\n", "self", ".", "ignore_index", "=", "250", "\n", "self", ".", "class_map", "=", "dict", "(", "zip", "(", "self", ".", "valid_classes", ",", "range", "(", "19", ")", ")", ")", "\n", "\n", "if", "not", "self", ".", "files", "[", "split", "]", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"No files for split=[%s] found in %s\"", "%", "(", "split", ",", "self", ".", "images_base", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"Found %d %s images\"", "%", "(", "len", "(", "self", ".", "files", "[", "split", "]", ")", ",", "split", ")", ")", "\n", "\n", "self", ".", "return_id", "=", "return_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.gta5_loader.gtaLoader.__len__": [[122, 125], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"__len__\"\"\"", "\n", "return", "len", "(", "self", ".", "files", "[", "self", ".", "split", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.gta5_loader.gtaLoader.__getitem__": [[126, 153], ["[].rstrip", "[].rstrip.replace", "scipy.imread", "np.array", "scipy.imread", "np.array", "gta5_loader.gtaLoader.augmentations", "gta5_loader.gtaLoader.transform", "[].rstrip.split", "print", "gta5_loader.gtaLoader.files[].pop", "gta5_loader.gtaLoader.__getitem__"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.transform", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"__getitem__\n        :param index:\n        \"\"\"", "\n", "img_path", "=", "self", ".", "files", "[", "self", ".", "split", "]", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "lbl_path", "=", "img_path", ".", "replace", "(", "'images'", ",", "'labels'", ")", "\n", "\n", "try", ":", "\n", "            ", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "lbl", "=", "m", ".", "imread", "(", "lbl_path", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "if", "self", ".", "augmentations", "is", "not", "None", ":", "\n", "                ", "img", ",", "lbl", "=", "self", ".", "augmentations", "(", "img", ",", "lbl", ")", "\n", "", "if", "self", ".", "is_transform", ":", "\n", "                ", "img", ",", "lbl", "=", "self", ".", "transform", "(", "img", ",", "lbl", ")", "\n", "\n", "", "img_name", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "self", ".", "return_id", ":", "\n", "                ", "return", "img", ",", "lbl", ",", "img_name", ",", "img_name", ",", "index", "\n", "", "return", "img", ",", "lbl", ",", "img_path", ",", "lbl_path", ",", "img_name", "\n", "", "except", ":", "\n", "            ", "print", "(", "img_path", ")", "\n", "self", ".", "files", "[", "self", ".", "split", "]", ".", "pop", "(", "index", ")", "\n", "return", "self", ".", "__getitem__", "(", "index", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.gta5_loader.gtaLoader.transform": [[155, 168], ["torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "transform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "\"\"\"transform\n        :param img:\n        :param lbl:\n        \"\"\"", "\n", "if", "self", ".", "pretraining", "==", "'COCO'", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "# NHWC -> NCHW", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.gta5_loader.gtaLoader.decode_segmap": [[169, 183], ["temp.copy", "temp.copy", "temp.copy", "range", "np.zeros"], "methods", ["None"], ["", "def", "decode_segmap", "(", "self", ",", "temp", ")", ":", "\n", "        ", "r", "=", "temp", ".", "copy", "(", ")", "\n", "g", "=", "temp", ".", "copy", "(", ")", "\n", "b", "=", "temp", ".", "copy", "(", ")", "\n", "for", "l", "in", "range", "(", "0", ",", "self", ".", "n_classes", ")", ":", "\n", "            ", "r", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "0", "]", "\n", "g", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "1", "]", "\n", "b", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "2", "]", "\n", "\n", "", "rgb", "=", "np", ".", "zeros", "(", "(", "temp", ".", "shape", "[", "0", "]", ",", "temp", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "/", "255.0", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.gta5_loader.gtaLoader.encode_segmap": [[184, 191], ["None"], "methods", ["None"], ["", "def", "encode_segmap", "(", "self", ",", "mask", ")", ":", "\n", "# Put all void classes to zero", "\n", "        ", "for", "_voidc", "in", "self", ".", "void_classes", ":", "\n", "            ", "mask", "[", "mask", "==", "_voidc", "]", "=", "self", ".", "ignore_index", "\n", "", "for", "_validc", "in", "self", ".", "valid_classes", ":", "\n", "            ", "mask", "[", "mask", "==", "_validc", "]", "=", "self", ".", "class_map", "[", "_validc", "]", "\n", "", "return", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.voc_dataset.VOCDataSet.__init__": [[14, 44], ["i_id.strip", "os.join", "os.join", "voc_dataset.VOCDataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split", "=", "\"train\"", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ",", "pretraining", "=", "'COCO'", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "crop_h", ",", "self", ".", "crop_w", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "pretraining", "=", "pretraining", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "self", ".", "split", "=", "split", "\n", "if", "split", "==", "\"train\"", ":", "\n", "            ", "list_path", "=", "'./data/voc_list/train_aug.txt'", "\n", "", "elif", "split", "==", "\"val\"", ":", "\n", "            ", "list_path", "=", "'./data/voc_list/val.txt'", "\n", "", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "\t        ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"JPEGImages/%s.jpg\"", "%", "name", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"SegmentationClassAug/%s.png\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n", "", "self", ".", "class_names", "=", "[", "'background'", ",", "# always index 0", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "\n", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "'chair'", ",", "\n", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "\n", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.voc_dataset.VOCDataSet.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.voc_dataset.VOCDataSet.__getitem__": [[49, 85], ["cv2.imread", "cv2.imread", "numpy.asarray", "numpy.asarray.transpose", "numpy.asarray.astype", "max", "max", "random.randint", "random.randint", "numpy.asarray", "numpy.asarray", "torch.from_numpy().float", "torch.from_numpy().long", "numpy.array", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "image", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"img\"", "]", ",", "cv2", ".", "IMREAD_COLOR", ")", "\n", "label", "=", "cv2", ".", "imread", "(", "datafiles", "[", "\"label\"", "]", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "if", "self", ".", "pretraining", "==", "'COCO'", ":", "# if pratraining is not COCO, change to RGB", "\n", "            ", "image", "=", "image", "\n", "", "else", ":", "\n", "            ", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "img_h", ",", "img_w", "=", "label", ".", "shape", "\n", "if", "\"val\"", "not", "in", "self", ".", "split", ":", "# output size with pad or crop", "\n", "            ", "pad_h", "=", "max", "(", "self", ".", "crop_h", "-", "img_h", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "self", ".", "crop_w", "-", "img_w", ",", "0", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "                ", "img_pad", "=", "cv2", ".", "copyMakeBorder", "(", "image", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "0.0", ",", "0.0", ",", "0.0", ")", ")", "\n", "label_pad", "=", "cv2", ".", "copyMakeBorder", "(", "label", ",", "0", ",", "pad_h", ",", "0", ",", "\n", "pad_w", ",", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "(", "self", ".", "ignore_label", ",", ")", ")", "\n", "", "else", ":", "\n", "                ", "img_pad", ",", "label_pad", "=", "image", ",", "label", "\n", "\n", "", "img_h", ",", "img_w", "=", "label_pad", ".", "shape", "\n", "h_off", "=", "random", ".", "randint", "(", "0", ",", "img_h", "-", "self", ".", "crop_h", ")", "\n", "w_off", "=", "random", ".", "randint", "(", "0", ",", "img_w", "-", "self", ".", "crop_w", ")", "\n", "image", "=", "np", ".", "asarray", "(", "img_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label_pad", "[", "h_off", ":", "h_off", "+", "self", ".", "crop_h", ",", "w_off", ":", "w_off", "+", "self", ".", "crop_w", "]", ",", "np", ".", "int64", ")", "\n", "\n", "", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "label", "=", "label", ".", "astype", "(", "int", ")", "\n", "\n", "return", "torch", ".", "from_numpy", "(", "image", ")", ".", "float", "(", ")", ",", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", ",", "index", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.city_utils.recursive_glob": [[10, 20], ["os.path.join", "os.walk", "filename.endswith"], "function", ["None"], ["def", "recursive_glob", "(", "rootdir", "=", "\".\"", ",", "suffix", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\"Performs recursive glob with given suffix and rootdir \n        :param rootdir is the root directory\n        :param suffix is the suffix to be searched\n    \"\"\"", "\n", "return", "[", "\n", "os", ".", "path", ".", "join", "(", "looproot", ",", "filename", ")", "\n", "for", "looproot", ",", "_", ",", "filenames", "in", "os", ".", "walk", "(", "rootdir", ")", "\n", "for", "filename", "in", "filenames", "\n", "if", "filename", ".", "endswith", "(", "suffix", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.city_utils.poly_lr_scheduler": [[23, 39], ["None"], "function", ["None"], ["", "def", "poly_lr_scheduler", "(", "\n", "optimizer", ",", "init_lr", ",", "iter", ",", "lr_decay_iter", "=", "1", ",", "max_iter", "=", "30000", ",", "power", "=", "0.9", "\n", ")", ":", "\n", "    ", "\"\"\"Polynomial decay of learning rate\n        :param init_lr is base learning rate\n        :param iter is a current iteration\n        :param lr_decay_iter how frequently decay occurs, default is 1\n        :param max_iter is number of maximum iterations\n        :param power is a polymomial power\n\n    \"\"\"", "\n", "if", "iter", "%", "lr_decay_iter", "or", "iter", ">", "max_iter", ":", "\n", "        ", "return", "optimizer", "\n", "\n", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "init_lr", "*", "(", "1", "-", "iter", "/", "max_iter", ")", "**", "power", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.city_utils.adjust_learning_rate": [[41, 46], ["None"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "init_lr", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "init_lr", "*", "(", "0.1", "**", "(", "epoch", "//", "30", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.city_utils.alpha_blend": [[48, 58], ["numpy.zeros"], "function", ["None"], ["", "", "def", "alpha_blend", "(", "input_image", ",", "segmentation_mask", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Alpha Blending utility to overlay RGB masks on RBG images \n        :param input_image is a np.ndarray with 3 channels\n        :param segmentation_mask is a np.ndarray with 3 channels\n        :param alpha is a float value\n\n    \"\"\"", "\n", "blended", "=", "np", ".", "zeros", "(", "input_image", ".", "size", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "blended", "=", "input_image", "*", "alpha", "+", "segmentation_mask", "*", "(", "1", "-", "alpha", ")", "\n", "return", "blended", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.city_utils.convert_state_dict": [[60, 71], ["collections.OrderedDict", "state_dict.items"], "function", ["None"], ["", "def", "convert_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "\"\"\"Converts a state dict saved from a dataParallel module to normal \n       module state_dict inplace\n       :param state_dict is the loaded DataParallel model_state\n    \n    \"\"\"", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "return", "new_state_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.augmentations.Compose.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "augmentations", ")", ":", "\n", "        ", "self", ".", "augmentations", "=", "augmentations", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.augmentations.Compose.__call__": [[15, 21], ["PIL.Image.fromarray", "PIL.Image.fromarray", "a", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", ",", "mask", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "\"RGB\"", ")", ",", "Image", ".", "fromarray", "(", "mask", ",", "mode", "=", "\"L\"", ")", "\n", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "a", "in", "self", ".", "augmentations", ":", "\n", "            ", "img", ",", "mask", "=", "a", "(", "img", ",", "mask", ")", "\n", "", "return", "np", ".", "array", "(", "img", ")", ",", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.augmentations.RandomCrop_city.__init__": [[25, 28], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.augmentations.RandomCrop_city.__call__": [[29, 49], ["PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize", "random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "\n", "# Resize to half size", "\n", "img", "=", "img", ".", "resize", "(", "(", "int", "(", "w", "/", "2", ")", ",", "int", "(", "h", "/", "2", ")", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "mask", "=", "mask", ".", "resize", "(", "(", "int", "(", "w", "/", "2", ")", ",", "int", "(", "h", "/", "2", ")", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "# Random crop to input size", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "w", "/", "2", ")", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "h", "/", "2", ")", "-", "th", ")", "\n", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.augmentations.RandomCrop_city_highres.__init__": [[53, 56], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "self", ".", "size", "=", "tuple", "(", "size", ")", "\n", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.augmentations.RandomCrop_city_highres.__call__": [[57, 71], ["random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "\n", "x1", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "w", ")", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "int", "(", "h", ")", "-", "th", ")", "\n", "return", "(", "\n", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.augmentations.Resize_city.__init__": [[75, 77], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "padding", "=", "0", ")", ":", "\n", "        ", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.augmentations.Resize_city.__call__": [[78, 90], ["PIL.ImageOps.expand.resize", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "\n", "# Resize to half size", "\n", "img", "=", "img", ".", "resize", "(", "(", "int", "(", "w", "/", "2", ")", ",", "int", "(", "h", "/", "2", ")", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.augmentations.Resize_city_highres.__init__": [[93, 95], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "padding", "=", "0", ")", ":", "\n", "        ", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.augmentations.Resize_city_highres.__call__": [[96, 103], ["PIL.ImageOps.expand", "PIL.ImageOps.expand"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "\n", "", "return", "img", ",", "mask", "", "", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__init__": [[46, 119], ["os.path.join", "os.path.join", "torch.utils.data.city_utils.recursive_glob", "dict", "print", "isinstance", "zip", "Exception", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.city_utils.recursive_glob"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "split", "=", "\"train\"", ",", "\n", "is_transform", "=", "False", ",", "\n", "img_size", "=", "(", "512", ",", "1024", ")", ",", "\n", "img_norm", "=", "False", ",", "\n", "augmentations", "=", "None", ",", "\n", "return_id", "=", "False", ",", "\n", "pretraining", "=", "'COCO'", ",", "\n", ")", ":", "\n", "        ", "\"\"\"__init__\n        :param root:\n        :param split:\n        :param is_transform:\n        :param img_size:\n        :param augmentations\n        \"\"\"", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "pretraining", "=", "pretraining", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "is_transform", "=", "is_transform", "\n", "self", ".", "augmentations", "=", "augmentations", "\n", "self", ".", "img_norm", "=", "img_norm", "\n", "self", ".", "n_classes", "=", "19", "\n", "self", ".", "img_size", "=", "(", "\n", "img_size", "if", "isinstance", "(", "img_size", ",", "tuple", ")", "else", "(", "img_size", ",", "img_size", ")", "\n", ")", "\n", "self", ".", "files", "=", "{", "}", "\n", "\n", "self", ".", "images_base", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"leftImg8bit_trainvaltest\"", ",", "\"leftImg8bit\"", ",", "self", ".", "split", ")", "\n", "\n", "self", ".", "annotations_base", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "\"gtFine_trainvaltest\"", ",", "\"gtFine\"", ",", "self", ".", "split", "\n", ")", "\n", "\n", "self", ".", "files", "[", "split", "]", "=", "recursive_glob", "(", "rootdir", "=", "self", ".", "images_base", ",", "suffix", "=", "\".png\"", ")", "\n", "self", ".", "void_classes", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "10", ",", "14", ",", "15", ",", "16", ",", "18", ",", "29", ",", "30", ",", "-", "1", "]", "\n", "self", ".", "valid_classes", "=", "[", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "17", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "31", ",", "32", ",", "33", ",", "]", "\n", "self", ".", "class_names", "=", "[", "\n", "\"unlabelled\"", ",", "\n", "\"road\"", ",", "\n", "\"sidewalk\"", ",", "\n", "\"building\"", ",", "\n", "\"wall\"", ",", "\n", "\"fence\"", ",", "\n", "\"pole\"", ",", "\n", "\"traffic_light\"", ",", "\n", "\"traffic_sign\"", ",", "\n", "\"vegetation\"", ",", "\n", "\"terrain\"", ",", "\n", "\"sky\"", ",", "\n", "\"person\"", ",", "\n", "\"rider\"", ",", "\n", "\"car\"", ",", "\n", "\"truck\"", ",", "\n", "\"bus\"", ",", "\n", "\"train\"", ",", "\n", "\"motorcycle\"", ",", "\n", "\"bicycle\"", ",", "\n", "]", "\n", "\n", "self", ".", "ignore_index", "=", "250", "\n", "self", ".", "class_map", "=", "dict", "(", "zip", "(", "self", ".", "valid_classes", ",", "range", "(", "19", ")", ")", ")", "\n", "\n", "if", "not", "self", ".", "files", "[", "split", "]", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"No files for split=[%s] found in %s\"", "%", "(", "split", ",", "self", ".", "images_base", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"Found %d %s images\"", "%", "(", "len", "(", "self", ".", "files", "[", "split", "]", ")", ",", "split", ")", ")", "\n", "\n", "self", ".", "return_id", "=", "return_id", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__len__": [[120, 123], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"__len__\"\"\"", "\n", "return", "len", "(", "self", ".", "files", "[", "self", ".", "split", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.__getitem__": [[124, 154], ["[].rstrip", "os.path.join", "scipy.imread", "np.array", "cityscapes_loader.cityscapesLoader.encode_segmap", "scipy.imread", "np.array", "cityscapes_loader.cityscapesLoader.augmentations", "cityscapes_loader.cityscapesLoader.transform", "[].rstrip.split", "[].rstrip.split", "print", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.encode_segmap", "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"__getitem__\n        :param index:\n        \"\"\"", "\n", "img_path", "=", "self", ".", "files", "[", "self", ".", "split", "]", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "lbl_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "annotations_base", ",", "\n", "img_path", ".", "split", "(", "os", ".", "sep", ")", "[", "-", "2", "]", ",", "# temporary for cross validation", "\n", "os", ".", "path", ".", "basename", "(", "img_path", ")", "[", ":", "-", "15", "]", "+", "\"gtFine_labelIds.png\"", ",", "\n", ")", "\n", "try", ":", "\n", "            ", "img", "=", "m", ".", "imread", "(", "img_path", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "img_path", ")", "\n", "\n", "", "lbl", "=", "m", ".", "imread", "(", "lbl_path", ")", "\n", "lbl", "=", "np", ".", "array", "(", "lbl", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "lbl", "=", "self", ".", "encode_segmap", "(", "lbl", ")", "\n", "\n", "\n", "if", "self", ".", "augmentations", "is", "not", "None", ":", "\n", "            ", "img", ",", "lbl", "=", "self", ".", "augmentations", "(", "img", ",", "lbl", ")", "\n", "", "if", "self", ".", "is_transform", ":", "\n", "            ", "img", ",", "lbl", "=", "self", ".", "transform", "(", "img", ",", "lbl", ")", "\n", "\n", "", "img_name", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "self", ".", "return_id", ":", "\n", "            ", "return", "img", ",", "lbl", ",", "img_name", ",", "img_name", ",", "index", "\n", "", "return", "img", ",", "lbl", ",", "img_path", ",", "lbl_path", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.transform": [[155, 168], ["torch.from_numpy().float.astype", "torch.from_numpy().float.transpose", "torch.from_numpy().float", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "img", ",", "lbl", ")", ":", "\n", "        ", "\"\"\"transform\n        :param img:\n        :param lbl:\n        \"\"\"", "\n", "if", "self", ".", "pretraining", "==", "'COCO'", ":", "\n", "            ", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "img", "=", "img", ".", "astype", "(", "np", ".", "float64", ")", "\n", "# NHWC -> NCHW", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "lbl", "=", "torch", ".", "from_numpy", "(", "lbl", ")", ".", "long", "(", ")", "\n", "return", "img", ",", "lbl", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.decode_segmap": [[169, 183], ["temp.copy", "temp.copy", "temp.copy", "range", "np.zeros"], "methods", ["None"], ["", "def", "decode_segmap", "(", "self", ",", "temp", ")", ":", "\n", "        ", "r", "=", "temp", ".", "copy", "(", ")", "\n", "g", "=", "temp", ".", "copy", "(", ")", "\n", "b", "=", "temp", ".", "copy", "(", ")", "\n", "for", "l", "in", "range", "(", "0", ",", "self", ".", "n_classes", ")", ":", "\n", "            ", "r", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "0", "]", "\n", "g", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "1", "]", "\n", "b", "[", "temp", "==", "l", "]", "=", "self", ".", "label_colours", "[", "l", "]", "[", "2", "]", "\n", "\n", "", "rgb", "=", "np", ".", "zeros", "(", "(", "temp", ".", "shape", "[", "0", "]", ",", "temp", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "rgb", "[", ":", ",", ":", ",", "0", "]", "=", "r", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "1", "]", "=", "g", "/", "255.0", "\n", "rgb", "[", ":", ",", ":", ",", "2", "]", "=", "b", "/", "255.0", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.cityscapes_loader.cityscapesLoader.encode_segmap": [[184, 191], ["None"], "methods", ["None"], ["", "def", "encode_segmap", "(", "self", ",", "mask", ")", ":", "\n", "# Put all void classes to zero", "\n", "        ", "for", "_voidc", "in", "self", ".", "void_classes", ":", "\n", "            ", "mask", "[", "mask", "==", "_voidc", "]", "=", "self", ".", "ignore_index", "\n", "", "for", "_validc", "in", "self", ".", "valid_classes", ":", "\n", "            ", "mask", "[", "mask", "==", "_validc", "]", "=", "self", ".", "class_map", "[", "_validc", "]", "\n", "", "return", "mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_loader": [[6, 14], ["None"], "function", ["None"], ["#", "\n", "# This file is part of Synchronized-BatchNorm-PyTorch.", "\n", "# https://github.com/vacancy/Synchronized-BatchNorm-PyTorch", "\n", "# Distributed under MIT License.", "\n", "\n", "from", ".", "batchnorm", "import", "SynchronizedBatchNorm1d", ",", "SynchronizedBatchNorm2d", ",", "SynchronizedBatchNorm3d", "\n", "from", ".", "batchnorm", "import", "patch_sync_batchnorm", ",", "convert_model", "\n", "from", ".", "replicate", "import", "DataParallelWithCallback", ",", "patch_replication_callback", "\n", ""]], "home.repos.pwc.inspect_result.Shathe_SemiSeg-Contrastive.data.__init__.get_data_path": [[15, 27], ["None"], "function", ["None"], []]}