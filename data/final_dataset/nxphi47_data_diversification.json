{"home.repos.pwc.inspect_result.nxphi47_data_diversification.None.combine_corpus.merge_nodup": [[13, 27], ["enumerate", "set", "print", "zip", "x.split", "zip", "zip", "len"], "function", ["None"], ["def", "merge_nodup", "(", "src_ori", ",", "tgt_ori", ",", "src_hyps", ",", "tgt_hyps", ",", "**", "kwargs", ")", ":", "\n", "    ", "sep", "=", "' |||||||| '", "\n", "merge", "=", "[", "f'{x}{sep}{y}'", "for", "x", ",", "y", "in", "zip", "(", "src_ori", ",", "tgt_ori", ")", "]", "\n", "# ori_merge = set(ori_merge)", "\n", "for", "i", ",", "(", "src", ",", "tgt", ")", "in", "enumerate", "(", "zip", "(", "src_hyps", ",", "tgt_hyps", ")", ")", ":", "\n", "        ", "merge", "+=", "[", "f'{x}{sep}{y}'", "for", "x", ",", "y", "in", "zip", "(", "src", ",", "tgt", ")", "]", "\n", "\n", "", "merge", "=", "set", "(", "merge", ")", "\n", "out", "=", "[", "x", ".", "split", "(", "sep", ")", "for", "x", "in", "merge", "]", "\n", "print", "(", "f'Total size: {len(out)}'", ")", "\n", "src", "=", "[", "x", "[", "0", "]", "for", "x", "in", "out", "]", "\n", "tgt", "=", "[", "x", "[", "1", "]", "for", "x", "in", "out", "]", "\n", "\n", "return", "src", ",", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.nxphi47_data_diversification.None.average_checkpoints.default_avg_params": [[11, 22], ["collections.OrderedDict", "params_dict.items", "len"], "function", ["None"], ["def", "default_avg_params", "(", "params_dict", ")", ":", "\n", "    ", "averaged_params", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "# v should be a list of torch Tensor.", "\n", "for", "k", ",", "v", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "        ", "summed_v", "=", "None", "\n", "for", "x", "in", "v", ":", "\n", "            ", "summed_v", "=", "summed_v", "+", "x", "if", "summed_v", "is", "not", "None", "else", "x", "\n", "", "averaged_params", "[", "k", "]", "=", "summed_v", "/", "len", "(", "v", ")", "\n", "\n", "", "return", "averaged_params", "\n", "\n"]], "home.repos.pwc.inspect_result.nxphi47_data_diversification.None.average_checkpoints.ema_avg_params": [[24, 44], ["collections.OrderedDict", "all", "params_dict.items", "len", "reversed", "params_dict.items"], "function", ["None"], ["", "def", "ema_avg_params", "(", "params_dict", ",", "ema_decay", ")", ":", "\n", "    ", "averaged_params", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "lens", "=", "[", "len", "(", "v", ")", "for", "k", ",", "v", "in", "params_dict", ".", "items", "(", ")", "]", "\n", "assert", "all", "(", "x", "==", "lens", "[", "0", "]", "for", "x", "in", "lens", ")", ",", "f'lens params: {lens}'", "\n", "num_checkpoints", "=", "lens", "[", "0", "]", "\n", "# y = x", "\n", "\n", "for", "k", ",", "v", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "# order: newest to oldest", "\n", "# reverse the order", "\n", "# y_t = x_t * decay + y_{t-1} * (1 - decay)", "\n", "        ", "total_v", "=", "None", "\n", "for", "x", "in", "reversed", "(", "v", ")", ":", "\n", "            ", "if", "total_v", "is", "None", ":", "\n", "                ", "total_v", "=", "x", "\n", "", "else", ":", "\n", "                ", "total_v", "=", "x", "*", "ema_decay", "+", "total_v", "*", "(", "1.0", "-", "ema_decay", ")", "\n", "\n", "", "", "averaged_params", "[", "k", "]", "=", "total_v", "\n", "", "return", "averaged_params", "\n", "\n"]], "home.repos.pwc.inspect_result.nxphi47_data_diversification.None.average_checkpoints.average_checkpoints": [[46, 98], ["collections.OrderedDict", "enumerate", "torch.load", "list", "print", "average_checkpoints.ema_avg_params", "print", "average_checkpoints.default_avg_params", "model_params.keys", "isinstance", "params_dict[].append", "KeyError", "p.float.float", "torch.serialization.default_restore_location"], "function", ["home.repos.pwc.inspect_result.nxphi47_data_diversification.None.average_checkpoints.ema_avg_params", "home.repos.pwc.inspect_result.nxphi47_data_diversification.None.average_checkpoints.default_avg_params"], ["", "def", "average_checkpoints", "(", "inputs", ",", "ema_decay", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Loads checkpoints from inputs and returns a model with averaged weights.\n\n    Args:\n      inputs: An iterable of string paths of checkpoints to load from.\n\n    Returns:\n      A dict of string keys mapping to various values. The 'model' key\n      from the returned dict should correspond to an OrderedDict mapping\n      string parameter names to torch Tensors.\n    \"\"\"", "\n", "params_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "params_keys", "=", "None", "\n", "new_state", "=", "None", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "inputs", ")", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "\n", "f", ",", "\n", "map_location", "=", "(", "\n", "lambda", "s", ",", "_", ":", "torch", ".", "serialization", ".", "default_restore_location", "(", "s", ",", "'cpu'", ")", "\n", ")", ",", "\n", ")", "\n", "# Copies over the settings from the first checkpoint", "\n", "if", "new_state", "is", "None", ":", "\n", "            ", "new_state", "=", "state", "\n", "\n", "", "model_params", "=", "state", "[", "'model'", "]", "\n", "\n", "model_params_keys", "=", "list", "(", "model_params", ".", "keys", "(", ")", ")", "\n", "if", "params_keys", "is", "None", ":", "\n", "            ", "params_keys", "=", "model_params_keys", "\n", "", "elif", "params_keys", "!=", "model_params_keys", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "'For checkpoint {}, expected list of params: {}, '", "\n", "'but found: {}'", ".", "format", "(", "f", ",", "params_keys", ",", "model_params_keys", ")", "\n", ")", "\n", "\n", "", "for", "k", "in", "params_keys", ":", "\n", "            ", "if", "k", "not", "in", "params_dict", ":", "\n", "                ", "params_dict", "[", "k", "]", "=", "[", "]", "\n", "", "p", "=", "model_params", "[", "k", "]", "\n", "if", "isinstance", "(", "p", ",", "torch", ".", "HalfTensor", ")", ":", "\n", "                ", "p", "=", "p", ".", "float", "(", ")", "\n", "", "params_dict", "[", "k", "]", ".", "append", "(", "p", ")", "\n", "\n", "", "", "if", "ema_decay", "<", "1.0", ":", "\n", "        ", "print", "(", "f'Exponential moving averaging, decay={ema_decay}'", ")", "\n", "averaged_params", "=", "ema_avg_params", "(", "params_dict", ",", "ema_decay", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Default averaging'", ")", "\n", "averaged_params", "=", "default_avg_params", "(", "params_dict", ")", "\n", "", "new_state", "[", "'model'", "]", "=", "averaged_params", "\n", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.nxphi47_data_diversification.None.average_checkpoints.last_n_checkpoints": [[100, 119], ["os.listdir", "len", "re.compile", "re.compile", "re.compile.fullmatch", "len", "Exception", "os.path.join", "int", "len", "pt_regexp.fullmatch.group", "entries.append", "sorted", "pt_regexp.fullmatch.group"], "function", ["None"], ["", "def", "last_n_checkpoints", "(", "paths", ",", "n", ",", "update_based", ",", "upper_bound", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "paths", ")", "==", "1", "\n", "path", "=", "paths", "[", "0", "]", "\n", "if", "update_based", ":", "\n", "        ", "pt_regexp", "=", "re", ".", "compile", "(", "r'checkpoint_\\d+_(\\d+)\\.pt'", ")", "\n", "", "else", ":", "\n", "        ", "pt_regexp", "=", "re", ".", "compile", "(", "r'checkpoint(\\d+)\\.pt'", ")", "\n", "", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "\n", "entries", "=", "[", "]", "\n", "for", "f", "in", "files", ":", "\n", "        ", "m", "=", "pt_regexp", ".", "fullmatch", "(", "f", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "sort_key", "=", "int", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "if", "upper_bound", "is", "None", "or", "sort_key", "<=", "upper_bound", ":", "\n", "                ", "entries", ".", "append", "(", "(", "sort_key", ",", "m", ".", "group", "(", "0", ")", ")", ")", "\n", "", "", "", "if", "len", "(", "entries", ")", "<", "n", ":", "\n", "        ", "raise", "Exception", "(", "'Found {} checkpoint files but need at least {}'", ",", "len", "(", "entries", ")", ",", "n", ")", "\n", "", "return", "[", "os", ".", "path", ".", "join", "(", "path", ",", "x", "[", "1", "]", ")", "for", "x", "in", "sorted", "(", "entries", ",", "reverse", "=", "True", ")", "[", ":", "n", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nxphi47_data_diversification.None.average_checkpoints.main": [[121, 183], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "fairseq.utils.import_user_module", "print", "print", "average_checkpoints.average_checkpoints", "torch.save", "print", "average_checkpoints.last_n_checkpoints", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.nxphi47_data_diversification.None.average_checkpoints.average_checkpoints", "home.repos.pwc.inspect_result.nxphi47_data_diversification.None.average_checkpoints.last_n_checkpoints"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Tool to average the params of input checkpoints to '", "\n", "'produce a new checkpoint'", ",", "\n", ")", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--inputs'", ",", "required", "=", "True", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'Input checkpoint file paths.'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "required", "=", "True", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'Write the new checkpoint containing the averaged weights to this path.'", ")", "\n", "num_group", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "num_group", ".", "add_argument", "(", "'--num-epoch-checkpoints'", ",", "type", "=", "int", ",", "\n", "help", "=", "'if set, will try to find checkpoints with names checkpoint_xx.pt in the path specified by input, '", "\n", "'and average last this many of them.'", ")", "\n", "num_group", ".", "add_argument", "(", "'--num-update-checkpoints'", ",", "type", "=", "int", ",", "\n", "help", "=", "'if set, will try to find checkpoints with names checkpoint_ee_xx.pt in the path specified by input, '", "\n", "'and average last this many of them.'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint-upper-bound'", ",", "type", "=", "int", ",", "\n", "help", "=", "'when using --num-epoch-checkpoints, this will set an upper bound on which checkpoint to use, '", "\n", "'e.g., with --num-epoch-checkpoints=10 --checkpoint-upper-bound=50, checkpoints 41-50 would be averaged.'", ")", "\n", "\n", "# parser.add_argument('--ema', type=float, default=1.0, help='exponential moving average decay')", "\n", "# parser.add_argument('--no-progress-bar', action='store_true', help='disable progress bar')", "\n", "parser", ".", "add_argument", "(", "'--ema'", ",", "default", "=", "'False'", ",", "type", "=", "str", ",", "metavar", "=", "'BOOL'", ",", "help", "=", "'ema'", ")", "\n", "parser", ".", "add_argument", "(", "'--ema_decay'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'exponential moving average decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--user-dir'", ",", "default", "=", "None", ")", "\n", "\n", "# fmt: on", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "import_user_module", "(", "args", ")", "\n", "print", "(", "args", ")", "\n", "\n", "num", "=", "None", "\n", "is_update_based", "=", "False", "\n", "if", "args", ".", "num_update_checkpoints", "is", "not", "None", ":", "\n", "        ", "num", "=", "args", ".", "num_update_checkpoints", "\n", "is_update_based", "=", "True", "\n", "", "elif", "args", ".", "num_epoch_checkpoints", "is", "not", "None", ":", "\n", "        ", "num", "=", "args", ".", "num_epoch_checkpoints", "\n", "\n", "", "assert", "args", ".", "checkpoint_upper_bound", "is", "None", "or", "args", ".", "num_epoch_checkpoints", "is", "not", "None", ",", "'--checkpoint-upper-bound requires --num-epoch-checkpoints'", "\n", "assert", "args", ".", "num_epoch_checkpoints", "is", "None", "or", "args", ".", "num_update_checkpoints", "is", "None", ",", "'Cannot combine --num-epoch-checkpoints and --num-update-checkpoints'", "\n", "\n", "if", "num", "is", "not", "None", ":", "\n", "        ", "args", ".", "inputs", "=", "last_n_checkpoints", "(", "\n", "args", ".", "inputs", ",", "num", ",", "is_update_based", ",", "upper_bound", "=", "args", ".", "checkpoint_upper_bound", ",", "\n", ")", "\n", "# print('averaging checkpoints: ', args.inputs)", "\n", "print", "(", "'averaging checkpoints: '", ")", "\n", "for", "checkpoint", "in", "args", ".", "inputs", ":", "\n", "            ", "print", "(", "checkpoint", ")", "\n", "", "print", "(", "'-'", "*", "40", ")", "\n", "\n", "# ema = args.ema", "\n", "# assert isinstance(args.ema, bool)", "\n", "", "print", "(", "f'Start averaing with ema={args.ema}, ema_decay={args.ema_decay}'", ")", "\n", "new_state", "=", "average_checkpoints", "(", "args", ".", "inputs", ",", "args", ".", "ema_decay", ")", "\n", "torch", ".", "save", "(", "new_state", ",", "args", ".", "output", ")", "\n", "print", "(", "'Finished writing averaged checkpoint to {}.'", ".", "format", "(", "args", ".", "output", ")", ")", "\n", "\n"]]}