{"home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.split_figures.split_figure": [[29, 48], ["len", "PIL.Image.open", "filenames.append", "dst.exists", "Image.open.crop", "im.crop.save"], "function", ["None"], ["def", "split_figure", "(", "src", ",", "subfigures", ",", "dest_dir", ",", "min_width", "=", "214", ",", "min_height", "=", "214", ")", ":", "\n", "    ", "filenames", "=", "[", "]", "\n", "\n", "if", "len", "(", "subfigures", ")", ">", "1", ":", "\n", "        ", "im", "=", "Image", ".", "open", "(", "src", ")", "\n", "for", "subfigure", "in", "subfigures", ":", "\n", "            ", "if", "subfigure", "[", "'w'", "]", "<", "min_width", "or", "subfigure", "[", "'h'", "]", "<", "min_height", ":", "\n", "                ", "continue", "\n", "", "left", "=", "subfigure", "[", "'x'", "]", "\n", "top", "=", "subfigure", "[", "'y'", "]", "\n", "right", "=", "left", "+", "subfigure", "[", "'w'", "]", "\n", "bottom", "=", "top", "+", "subfigure", "[", "'h'", "]", "\n", "dst", "=", "dest_dir", "/", "f'{src.stem}_{left}x{top}_{right}x{bottom}{src.suffix}'", "\n", "if", "not", "dst", ".", "exists", "(", ")", ":", "\n", "                ", "subim", "=", "im", ".", "crop", "(", "(", "left", ",", "top", ",", "right", ",", "bottom", ")", ")", "\n", "subim", ".", "save", "(", "dst", ")", "\n", "", "filenames", ".", "append", "(", "dst", ")", "\n", "\n", "", "", "return", "filenames", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.split_figures.split_figure_f": [[50, 117], ["pandas.read_csv", "collections.Counter", "tensorflow.compat.v1.disable_eager_execution", "figurex.figure_separator.FigureSeparator", "tqdm.tqdm", "pandas.DataFrame", "pd.DataFrame.to_csv", "collections.Counter.most_common", "str", "tensorflow.compat.v1.Session", "tqdm.tqdm", "pd.read_csv.iterrows", "split_figures.split_figure", "copy.deepcopy", "data.append", "print", "figurex.figure_separator.FigureSeparator.extract_batch", "zip", "figurex.utils.is_file_empty", "len", "split_figures.split_figure_f.split_and_save"], "function", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.split_figure", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.FigureSeparator.extract_batch", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.utils.is_file_empty"], ["", "def", "split_figure_f", "(", "src", ",", "dest", ",", "src_image_dir", ",", "dest_image_dir", ",", "dest_json_dir", ",", "model_pathname", ",", "batch_size", "=", "64", ")", ":", "\n", "    ", "figure_df", "=", "pd", ".", "read_csv", "(", "src", ")", "\n", "data", "=", "[", "]", "\n", "cnt", "=", "collections", ".", "Counter", "(", ")", "\n", "\n", "tf", ".", "compat", ".", "v1", ".", "disable_eager_execution", "(", ")", "\n", "separator", "=", "FigureSeparator", "(", "str", "(", "model_pathname", ")", ")", "\n", "\n", "with", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "graph", "=", "separator", ".", "graph", ")", "as", "sess", ":", "\n", "        ", "needs_to_split", "=", "[", "]", "\n", "\n", "def", "split_and_save", "(", ")", ":", "\n", "            ", "results", "=", "separator", ".", "extract_batch", "(", "sess", ",", "needs_to_split", ")", "\n", "assert", "len", "(", "results", ")", "==", "len", "(", "needs_to_split", ")", "\n", "for", "src", ",", "result", "in", "zip", "(", "needs_to_split", ",", "results", ")", ":", "\n", "                ", "subfigures", "=", "result", "[", "'sub_figures'", "]", "\n", "json_dst", "=", "dest_json_dir", "/", "f'{src.stem}.json'", "\n", "with", "open", "(", "json_dst", ",", "'w'", ")", "as", "fp", ":", "\n", "                    ", "json", ".", "dump", "(", "subfigures", ",", "fp", ")", "\n", "\n", "", "", "", "for", "filename", "in", "tqdm", ".", "tqdm", "(", "figure_df", "[", "'figure filename'", "]", ",", "total", "=", "len", "(", "figure_df", ")", ",", "desc", "=", "'Check subfigures'", ")", ":", "\n", "            ", "src", "=", "src_image_dir", "/", "filename", "\n", "if", "is_file_empty", "(", "src", ")", ":", "\n", "                ", "cnt", "[", "'empty figure'", "]", "+=", "1", "\n", "continue", "\n", "", "json_dst", "=", "dest_json_dir", "/", "f'{src.stem}.json'", "\n", "if", "not", "json_dst", ".", "exists", "(", ")", ":", "\n", "                ", "needs_to_split", ".", "append", "(", "src", ")", "\n", "\n", "", "if", "len", "(", "needs_to_split", ")", ">=", "batch_size", ":", "\n", "                ", "split_and_save", "(", ")", "\n", "needs_to_split", "=", "[", "]", "\n", "", "", "if", "len", "(", "needs_to_split", ")", ">", "0", ":", "\n", "            ", "split_and_save", "(", ")", "\n", "\n", "", "", "for", "_", ",", "row", "in", "tqdm", ".", "tqdm", "(", "figure_df", ".", "iterrows", "(", ")", ",", "total", "=", "len", "(", "figure_df", ")", ",", "desc", "=", "'Write sub figures'", ")", ":", "\n", "        ", "src", "=", "src_image_dir", "/", "row", "[", "'figure filename'", "]", "\n", "json_dst", "=", "dest_json_dir", "/", "f'{src.stem}.json'", "\n", "if", "not", "json_dst", ".", "exists", "(", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "with", "open", "(", "json_dst", ")", "as", "fp", ":", "\n", "            ", "subfigures", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "pathnames", "=", "split_figure", "(", "src", ",", "subfigures", ",", "dest_image_dir", ",", "214", ",", "214", ")", "\n", "# subfigure", "\n", "for", "pathname", "in", "pathnames", ":", "\n", "            ", "x", "=", "copy", ".", "deepcopy", "(", "row", ")", "\n", "x", "[", "'subfigure filename'", "]", "=", "pathname", ".", "name", "\n", "cnt", "[", "'subfig'", "]", "+=", "len", "(", "pathnames", ")", "\n", "cnt", "[", "'figure'", "]", "+=", "1", "\n", "data", ".", "append", "(", "x", ")", "\n", "\n", "# whole figure", "\n", "", "pathname", "=", "dest_image_dir", "/", "src", ".", "name", "\n", "if", "not", "pathname", ".", "exists", "(", ")", ":", "\n", "            ", "shutil", ".", "copy", "(", "src", ",", "pathname", ")", "\n", "", "x", "=", "copy", ".", "deepcopy", "(", "row", ")", "\n", "x", "[", "'subfigure filename'", "]", "=", "pathname", ".", "name", "\n", "cnt", "[", "'figure'", "]", "+=", "1", "\n", "data", ".", "append", "(", "x", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "df", ".", "to_csv", "(", "dest", ",", "index", "=", "False", ")", "\n", "\n", "for", "k", ",", "v", "in", "cnt", ".", "most_common", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "':'", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figures.get_figures": [[21, 47], ["pandas.read_csv", "collections.Counter", "tqdm.tqdm", "pandas.DataFrame", "pd.DataFrame.to_csv", "collections.Counter.most_common", "pd.read_csv.iterrows", "str", "data.append", "print", "len", "local_file.exists", "urllib.request.urlretrieve", "urllib.request.urlretrieve", "open"], "function", ["None"], ["def", "get_figures", "(", "src", ",", "dest", ",", "image_dir", ")", ":", "\n", "    ", "figure_df", "=", "pd", ".", "read_csv", "(", "src", ")", "\n", "\n", "data", "=", "[", "]", "\n", "cnt", "=", "collections", ".", "Counter", "(", ")", "\n", "for", "_", ",", "row", "in", "tqdm", ".", "tqdm", "(", "figure_df", ".", "iterrows", "(", ")", ",", "total", "=", "len", "(", "figure_df", ")", ")", ":", "\n", "        ", "pmc", "=", "row", "[", "'pmcid'", "]", "\n", "local_file", "=", "image_dir", "/", "'{}_{}'", ".", "format", "(", "pmc", ",", "row", "[", "'figure url'", "]", ")", "\n", "if", "not", "local_file", ".", "exists", "(", ")", ":", "\n", "            ", "url", "=", "'https://www.ncbi.nlm.nih.gov/pmc/articles/{}/bin/{}'", ".", "format", "(", "pmc", ",", "row", "[", "'figure url'", "]", ")", "\n", "try", ":", "\n", "                ", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "local_file", ")", "\n", "cnt", "[", "'new figure'", "]", "+=", "1", "\n", "", "except", "urllib", ".", "error", ".", "HTTPError", ":", "\n", "                ", "cnt", "[", "'Http error'", "]", "+=", "1", "\n", "with", "open", "(", "local_file", ",", "'w'", ")", "as", "_", ":", "\n", "                    ", "pass", "\n", "", "", "", "row", "[", "'figure filename'", "]", "=", "str", "(", "local_file", ".", "name", ")", "\n", "cnt", "[", "'total figure'", "]", "+=", "1", "\n", "data", ".", "append", "(", "row", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "df", ".", "to_csv", "(", "dest", ",", "index", "=", "False", ")", "\n", "\n", "for", "k", ",", "v", "in", "cnt", ".", "most_common", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "':'", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.OneFigure.__init__": [[23, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "pmcid", "=", "None", "\n", "self", ".", "url", "=", "None", "\n", "self", ".", "text", "=", "[", "]", "# type: List[bioc.BioCPassage]", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.OneFigure.to_dict": [[28, 33], ["get_figure_text.passage_to_dict"], "methods", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.passage_to_dict"], ["", "def", "to_dict", "(", "self", ")", "->", "Dict", ":", "\n", "        ", "return", "{", "\n", "'pmcid'", ":", "self", ".", "pmcid", ",", "\n", "'url'", ":", "self", ".", "url", ",", "\n", "'text'", ":", "[", "passage_to_dict", "(", "p", ")", "for", "p", "in", "self", ".", "text", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.df_to_obj": [[36, 48], ["tqdm.tqdm", "sorted", "df.iterrows", "get_figure_text.OneFigure", "sorted.append", "df[].isin"], "function", ["None"], ["", "", "def", "df_to_obj", "(", "df", ")", "->", "List", "[", "OneFigure", "]", ":", "\n", "    ", "df", "=", "df", "[", "df", "[", "'label'", "]", ".", "isin", "(", "[", "'ct'", ",", "'cxr'", "]", ")", "]", "\n", "\n", "objs", "=", "[", "]", "\n", "for", "_", ",", "row", "in", "tqdm", ".", "tqdm", "(", "df", ".", "iterrows", "(", ")", ")", ":", "\n", "        ", "figure", "=", "OneFigure", "(", ")", "\n", "figure", ".", "pmcid", "=", "row", "[", "'pmcid'", "]", "\n", "figure", ".", "url", "=", "row", "[", "'figure url'", "]", "\n", "objs", ".", "append", "(", "figure", ")", "\n", "\n", "", "objs", "=", "sorted", "(", "objs", ",", "key", "=", "lambda", "a", ":", "a", ".", "pmcid", ")", "\n", "return", "objs", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.get_figure_referred_text": [[50, 63], ["re.compile", "re.compile.search", "int", "re.compile", "fig_pattern.search.group", "re.compile.search", "sentences.append"], "function", ["None"], ["", "def", "get_figure_referred_text", "(", "doc", ":", "bioc", ".", "BioCDocument", ",", "figure_id", ")", ":", "\n", "    ", "p", "=", "re", ".", "compile", "(", "r'(\\d)+$'", ")", "\n", "m", "=", "p", ".", "search", "(", "figure_id", ")", "\n", "sentences", "=", "[", "]", "\n", "if", "m", ":", "\n", "        ", "id", "=", "int", "(", "m", ".", "group", "(", ")", ")", "\n", "s", "=", "'[F|f]ig(ure)?.?\\\\s{}'", ".", "format", "(", "id", ")", "\n", "fig_pattern", "=", "re", ".", "compile", "(", "s", ")", "\n", "for", "passage", "in", "doc", ".", "passages", ":", "\n", "            ", "m", "=", "fig_pattern", ".", "search", "(", "passage", ".", "text", ")", "\n", "if", "m", ":", "\n", "                ", "sentences", ".", "append", "(", "passage", ")", "\n", "", "", "", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.passage_to_dict": [[65, 72], ["None"], "function", ["None"], ["", "def", "passage_to_dict", "(", "passage", ":", "bioc", ".", "BioCPassage", ")", ":", "\n", "    ", "d", "=", "{", "\n", "'infons'", ":", "passage", ".", "infons", ",", "\n", "'offset'", ":", "passage", ".", "offset", ",", "\n", "'text'", ":", "passage", ".", "text", "\n", "}", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.get_figure_caption": [[74, 84], ["len", "figure.text.append", "get_figure_text.get_figure_referred_text", "figure.text.extend", "figure.url.rfind"], "function", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.get_figure_referred_text"], ["", "def", "get_figure_caption", "(", "figure", ":", "OneFigure", ",", "doc", ":", "bioc", ".", "BioCDocument", ")", ":", "\n", "    ", "filename", "=", "figure", ".", "url", "[", "figure", ".", "url", ".", "rfind", "(", "'/'", ")", "+", "1", ":", "]", "\n", "for", "p", "in", "doc", ".", "passages", ":", "\n", "        ", "if", "len", "(", "p", ".", "text", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "'file'", "in", "p", ".", "infons", "and", "p", ".", "infons", "[", "\"file\"", "]", "==", "filename", ":", "\n", "            ", "figure", ".", "text", ".", "append", "(", "p", ")", "\n", "passages", "=", "get_figure_referred_text", "(", "doc", ",", "p", ".", "infons", "[", "'id'", "]", ")", "\n", "figure", ".", "text", ".", "extend", "(", "passages", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.add_text": [[86, 94], ["open", "bioc.load", "get_figure_text.get_figure_caption"], "function", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_url.get_figure_caption"], ["", "", "", "def", "add_text", "(", "objs", ":", "List", "[", "OneFigure", "]", ",", "bioc_dir", ")", ":", "\n", "    ", "for", "obj", "in", "objs", ":", "\n", "        ", "pmcid", "=", "obj", ".", "pmcid", "\n", "with", "open", "(", "bioc_dir", "/", "f'{pmcid}.xml'", ",", "encoding", "=", "'utf8'", ")", "as", "fp", ":", "\n", "            ", "collection", "=", "bioc", ".", "load", "(", "fp", ")", "\n", "for", "doc", "in", "collection", ".", "documents", ":", "\n", "                ", "get_figure_caption", "(", "obj", ",", "doc", ")", "\n", "", "", "", "return", "objs", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.get_figure_text": [[96, 103], ["pandas.read_csv", "get_figure_text.df_to_obj", "get_figure_text.add_text", "o.to_dict", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.df_to_obj", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.add_text", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_text.OneFigure.to_dict"], ["", "def", "get_figure_text", "(", "src", ",", "dest", ",", "bioc_dir", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "src", ",", "dtype", "=", "str", ")", "\n", "objs", "=", "df_to_obj", "(", "df", ")", "\n", "objs", "=", "add_text", "(", "objs", ",", "bioc_dir", ")", "\n", "objs", "=", "[", "o", ".", "to_dict", "(", ")", "for", "o", "in", "objs", "]", "\n", "with", "open", "(", "dest", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "objs", ",", "fp", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.gold_standard_to_publish_json.gold_to_publish": [[19, 56], ["pandas.read_csv", "tqdm.tqdm", "sorted", "pd.read_csv.iterrows", "re.search", "sorted.values", "open", "json.dump", "len", "figure[].append", "int", "int", "int", "int", "re.search.group", "re.search.group", "re.search.group", "re.search.group"], "function", ["None"], ["def", "gold_to_publish", "(", "src", ",", "dst", ",", "drop_nature", "=", "True", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "src", ",", "dtype", "=", "{", "'insert_time'", ":", "str", "}", ")", "\n", "if", "drop_nature", ":", "\n", "        ", "df", "=", "df", "[", "df", "[", "'label'", "]", "!=", "'nature'", "]", "\n", "\n", "", "figures", "=", "{", "}", "\n", "for", "_", ",", "row", "in", "tqdm", ".", "tqdm", "(", "df", ".", "iterrows", "(", ")", ",", "total", "=", "len", "(", "df", ")", ")", ":", "\n", "        ", "pmc", "=", "row", "[", "'pmcid'", "]", "\n", "figure_url", "=", "row", "[", "'figure url'", "]", "\n", "url", "=", "f'https://www.ncbi.nlm.nih.gov/pmc/articles/{pmc}/bin/{figure_url}'", "\n", "if", "url", "not", "in", "figures", ":", "\n", "            ", "figures", "[", "url", "]", "=", "{", "\n", "'pmcid'", ":", "pmc", ",", "\n", "'url'", ":", "url", ",", "\n", "'insert_time'", ":", "row", "[", "'insert_time'", "]", "\n", "}", "\n", "", "figure", "=", "figures", "[", "url", "]", "\n", "\n", "subfigure_filename", "=", "row", "[", "'subfigure filename'", "]", "\n", "m", "=", "re", ".", "search", "(", "r'(\\d+)x(\\d+)_(\\d+)x(\\d+)'", ",", "subfigure_filename", ")", "\n", "if", "m", ":", "\n", "            ", "if", "'box'", "not", "in", "figure", ":", "\n", "                ", "figure", "[", "'box'", "]", "=", "[", "]", "\n", "", "figure", "[", "'box'", "]", ".", "append", "(", "{", "\n", "'xtl'", ":", "int", "(", "m", ".", "group", "(", "1", ")", ")", ",", "\n", "'ytl'", ":", "int", "(", "m", ".", "group", "(", "2", ")", ")", ",", "\n", "'xbr'", ":", "int", "(", "m", ".", "group", "(", "3", ")", ")", ",", "\n", "'ybr'", ":", "int", "(", "m", ".", "group", "(", "4", ")", ")", ",", "\n", "'label'", ":", "row", "[", "'label'", "]", "\n", "}", ")", "\n", "", "else", ":", "\n", "            ", "if", "'box'", "not", "in", "figure", ":", "\n", "                ", "figure", "[", "'label'", "]", "=", "row", "[", "'label'", "]", "\n", "\n", "", "", "", "figures", "=", "sorted", "(", "figures", ".", "values", "(", ")", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "'pmcid'", "]", ",", "x", "[", "'url'", "]", ")", ")", "\n", "with", "open", "(", "dst", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "figures", ",", "fp", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.FigureSeparator.__init__": [[18, 23], ["figure_separator.load_graph"], "methods", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.load_graph"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "thresh", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "meta", "=", "{", "'object_scale'", ":", "5", ",", "'classes'", ":", "1", ",", "'out_size'", ":", "[", "17", ",", "17", ",", "30", "]", ",", "'colors'", ":", "[", "(", "0", ",", "0", ",", "254", ")", "]", ",", "\n", "'thresh'", ":", "thresh", ",", "'anchors'", ":", "[", "1.08", ",", "1.19", ",", "3.42", ",", "4.41", ",", "6.63", ",", "11.38", ",", "9.42", ",", "5.11", ",", "16.62", ",", "10.52", "]", ",", "\n", "'num'", ":", "5", ",", "'labels'", ":", "[", "'figure'", "]", "}", "\n", "self", ".", "graph", "=", "load_graph", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.FigureSeparator.extract": [[24, 27], ["tensorflow.compat.v1.Session", "figure_separator.FigureSeparator.extract_sess"], "methods", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.FigureSeparator.extract_sess"], ["", "def", "extract", "(", "self", ",", "img_path", ")", ":", "\n", "        ", "with", "tf", ".", "compat", ".", "v1", ".", "Session", "(", "graph", "=", "self", ".", "graph", ")", "as", "sess", ":", "\n", "            ", "return", "self", ".", "extract_sess", "(", "sess", ",", "img_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.FigureSeparator.extract_sess": [[28, 50], ["figure_separator.preprocess", "sess.run", "figure_separator.postprocess", "str"], "methods", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.preprocess", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.postprocess"], ["", "", "def", "extract_sess", "(", "self", ",", "sess", ",", "img_path", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            sess: tensorflow Session\n            img_path: file path to the image file\n\n        Returns:\n            List: a list of sub-figures where each sub-figure is a dic:\n                {\n                 \"x\": (x coordinate of left top point of the sub-figure),\n                 \"y\": (y coordinate of left top point of the sub-figure),\n                 \"w\": (width of the sub-figure),\n                 \"h\": (height of the sub-figure),\n                 \"conf\": (confidence value of the extaction),\n                }\n            image array with annotations\n        \"\"\"", "\n", "imgcv", ",", "imgcv_resized", ",", "img_input", "=", "preprocess", "(", "str", "(", "img_path", ")", ")", "\n", "detections", "=", "sess", ".", "run", "(", "'output:0'", ",", "feed_dict", "=", "{", "'input:0'", ":", "img_input", "}", ")", "\n", "sub_figures", ",", "annotated_image", "=", "postprocess", "(", "self", ".", "meta", ",", "detections", ",", "imgcv", ")", "\n", "return", "sub_figures", ",", "annotated_image", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.FigureSeparator.extract_batch": [[51, 70], ["sess.run", "enumerate", "figure_separator.preprocess", "batch.append", "numpy.expand_dims", "str", "figure_separator.postprocess"], "methods", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.preprocess", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.postprocess"], ["", "def", "extract_batch", "(", "self", ",", "sess", ",", "img_paths", ")", ":", "\n", "        ", "batch", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "imgcv", ",", "imgcv_resized", ",", "img_input", "=", "preprocess", "(", "str", "(", "img_path", ")", ")", "\n", "batch", ".", "append", "(", "{", "'imgcv'", ":", "imgcv", ",", "'imgcv_resized'", ":", "imgcv_resized", ",", "'img_input'", ":", "img_input", "[", "0", "]", "}", ")", "\n", "", "inputs", "=", "[", "x", "[", "'img_input'", "]", "for", "x", "in", "batch", "]", "\n", "detections_batch", "=", "sess", ".", "run", "(", "'output:0'", ",", "feed_dict", "=", "{", "'input:0'", ":", "inputs", "}", ")", "\n", "\n", "for", "j", ",", "detections", "in", "enumerate", "(", "detections_batch", ")", ":", "\n", "            ", "imgcv", "=", "batch", "[", "j", "]", "[", "'imgcv'", "]", "\n", "detections", "=", "np", ".", "expand_dims", "(", "detections", ",", "axis", "=", "0", ")", "\n", "try", ":", "\n", "                ", "sub_figures", ",", "annotated_image", "=", "postprocess", "(", "self", ".", "meta", ",", "detections", ",", "imgcv", ")", "\n", "batch", "[", "j", "]", "[", "'sub_figures'", "]", "=", "sub_figures", "\n", "batch", "[", "j", "]", "[", "'annotated_image'", "]", "=", "annotated_image", "\n", "", "except", ":", "\n", "                ", "batch", "[", "j", "]", "[", "'sub_figures'", "]", "=", "[", "]", "\n", "batch", "[", "j", "]", "[", "'annotated_image'", "]", "=", "None", "\n", "", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.BoundBox.__init__": [[80, 86], ["float", "numpy.zeros", "float", "float", "float", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "classes", ")", ":", "\n", "        ", "self", ".", "x", ",", "self", ".", "y", "=", "float", "(", ")", ",", "float", "(", ")", "\n", "self", ".", "w", ",", "self", ".", "h", "=", "float", "(", ")", ",", "float", "(", ")", "\n", "self", ".", "c", "=", "float", "(", ")", "\n", "self", ".", "class_num", "=", "classes", "\n", "self", ".", "probs", "=", "np", ".", "zeros", "(", "(", "classes", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.overlap": [[88, 96], ["max", "min"], "function", ["None"], ["", "", "def", "overlap", "(", "x1", ",", "w1", ",", "x2", ",", "w2", ")", ":", "\n", "    ", "l1", "=", "x1", "-", "w1", "/", "2.", "\n", "l2", "=", "x2", "-", "w2", "/", "2.", "\n", "left", "=", "max", "(", "l1", ",", "l2", ")", "\n", "r1", "=", "x1", "+", "w1", "/", "2.", "\n", "r2", "=", "x2", "+", "w2", "/", "2.", "\n", "right", "=", "min", "(", "r1", ",", "r2", ")", "\n", "return", "right", "-", "left", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.box_intersection": [[98, 105], ["figure_separator.overlap", "figure_separator.overlap"], "function", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.overlap", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.overlap"], ["", "def", "box_intersection", "(", "a", ",", "b", ")", ":", "\n", "    ", "w", "=", "overlap", "(", "a", ".", "x", ",", "a", ".", "w", ",", "b", ".", "x", ",", "b", ".", "w", ")", "\n", "h", "=", "overlap", "(", "a", ".", "y", ",", "a", ".", "h", ",", "b", ".", "y", ",", "b", ".", "h", ")", "\n", "if", "w", "<", "0", "or", "h", "<", "0", ":", "\n", "        ", "return", "0", "\n", "", "area", "=", "w", "*", "h", "\n", "return", "area", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.box_union": [[107, 111], ["figure_separator.box_intersection"], "function", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.box_intersection"], ["", "def", "box_union", "(", "a", ",", "b", ")", ":", "\n", "    ", "i", "=", "box_intersection", "(", "a", ",", "b", ")", "\n", "u", "=", "a", ".", "w", "*", "a", ".", "h", "+", "b", ".", "w", "*", "b", ".", "h", "-", "i", "\n", "return", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.box_iou": [[113, 115], ["figure_separator.box_intersection", "figure_separator.box_union"], "function", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.box_intersection", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.box_union"], ["", "def", "box_iou", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "box_intersection", "(", "a", ",", "b", ")", "/", "box_union", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.prob_compare": [[117, 119], ["None"], "function", ["None"], ["", "def", "prob_compare", "(", "box", ")", ":", "\n", "    ", "return", "box", ".", "probs", "[", "box", ".", "class_num", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.prob_compare2": [[121, 128], ["None"], "function", ["None"], ["", "def", "prob_compare2", "(", "boxa", ",", "boxb", ")", ":", "\n", "    ", "if", "boxa", ".", "pi", "<", "boxb", ".", "pi", ":", "\n", "        ", "return", "1", "\n", "", "elif", "boxa", ".", "pi", "==", "boxb", ".", "pi", ":", "\n", "        ", "return", "0", "\n", "", "else", ":", "\n", "        ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.expit": [[136, 138], ["numpy.exp"], "function", ["None"], ["def", "expit", "(", "x", ")", ":", "\n", "    ", "return", "1.", "/", "(", "1.", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator._softmax": [[140, 144], ["numpy.exp", "np.exp.sum", "numpy.max"], "function", ["None"], ["", "def", "_softmax", "(", "x", ")", ":", "\n", "    ", "e_x", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ")", ")", "\n", "out", "=", "e_x", "/", "e_x", ".", "sum", "(", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.postprocess": [[146, 232], ["net_out.reshape.reshape", "list", "range", "range", "range", "range", "sorted", "range", "numpy.argmax", "range", "len", "len", "range", "int", "int", "int", "int", "outboxes.append", "figure_separator.BoundBox", "figure_separator.expit", "sorted.append", "len", "round", "round", "round", "round", "int", "cv2.rectangle", "cv2.putText", "figure_separator._softmax", "figure_separator.box_iou", "float", "figure_separator.expit", "figure_separator.expit", "math.exp", "math.exp"], "function", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.expit", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator._softmax", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.box_iou", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.expit", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.expit"], ["", "def", "postprocess", "(", "meta", ",", "net_out", ",", "imgcv", ",", "annotate", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    citation: https://github.com/thtrieu/darkflow/blob/99f9a95468f9bd858d610530524f83612bf635eb/net/yolov2/test.py\n    Args:\n        meta: meta data\n        net_out:output from the CNN\n        imgcv: original image array\n        annotate: annotate bounding box to the image or not\n    \"\"\"", "\n", "\n", "# meta", "\n", "meta", "=", "meta", "\n", "H", ",", "W", ",", "_", "=", "meta", "[", "'out_size'", "]", "\n", "threshold", "=", "meta", "[", "'thresh'", "]", "\n", "C", ",", "B", "=", "meta", "[", "'classes'", "]", ",", "meta", "[", "'num'", "]", "\n", "anchors", "=", "meta", "[", "'anchors'", "]", "\n", "net_out", "=", "net_out", ".", "reshape", "(", "[", "H", ",", "W", ",", "B", ",", "-", "1", "]", ")", "\n", "\n", "boxes", "=", "list", "(", ")", "\n", "for", "row", "in", "range", "(", "H", ")", ":", "\n", "        ", "for", "col", "in", "range", "(", "W", ")", ":", "\n", "            ", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "                ", "bx", "=", "BoundBox", "(", "C", ")", "\n", "bx", ".", "x", ",", "bx", ".", "y", ",", "bx", ".", "w", ",", "bx", ".", "h", ",", "bx", ".", "c", "=", "net_out", "[", "row", ",", "col", ",", "b", ",", ":", "5", "]", "\n", "bx", ".", "c", "=", "expit", "(", "bx", ".", "c", ")", "\n", "bx", ".", "x", "=", "(", "col", "+", "expit", "(", "bx", ".", "x", ")", ")", "/", "W", "\n", "bx", ".", "y", "=", "(", "row", "+", "expit", "(", "bx", ".", "y", ")", ")", "/", "H", "\n", "bx", ".", "w", "=", "math", ".", "exp", "(", "bx", ".", "w", ")", "*", "anchors", "[", "2", "*", "b", "+", "0", "]", "/", "W", "\n", "bx", ".", "h", "=", "math", ".", "exp", "(", "bx", ".", "h", ")", "*", "anchors", "[", "2", "*", "b", "+", "1", "]", "/", "H", "\n", "classes", "=", "net_out", "[", "row", ",", "col", ",", "b", ",", "5", ":", "]", "\n", "bx", ".", "probs", "=", "_softmax", "(", "classes", ")", "*", "bx", ".", "c", "\n", "bx", ".", "probs", "*=", "bx", ".", "probs", ">", "threshold", "\n", "boxes", ".", "append", "(", "bx", ")", "\n", "\n", "# non max suppress boxes", "\n", "", "", "", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "            ", "boxes", "[", "i", "]", ".", "class_num", "=", "c", "\n", "", "boxes", "=", "sorted", "(", "boxes", ",", "key", "=", "prob_compare", ",", "reverse", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "            ", "boxi", "=", "boxes", "[", "i", "]", "\n", "if", "boxi", ".", "probs", "[", "c", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "boxes", ")", ")", ":", "\n", "                ", "boxj", "=", "boxes", "[", "j", "]", "\n", "if", "box_iou", "(", "boxi", ",", "boxj", ")", ">=", ".4", ":", "\n", "                    ", "boxes", "[", "j", "]", ".", "probs", "[", "c", "]", "=", "0.", "\n", "\n", "", "", "", "", "colors", "=", "meta", "[", "'colors'", "]", "\n", "# labels = meta['labels']", "\n", "h", ",", "w", ",", "_", "=", "imgcv", ".", "shape", "\n", "\n", "outboxes", "=", "[", "]", "\n", "for", "b", "in", "boxes", ":", "\n", "        ", "max_indx", "=", "np", ".", "argmax", "(", "b", ".", "probs", ")", "\n", "max_prob", "=", "b", ".", "probs", "[", "max_indx", "]", "\n", "# label = labels[max_indx]", "\n", "# print(max_prob)", "\n", "if", "max_prob", ">", "threshold", ":", "\n", "            ", "left", "=", "int", "(", "round", "(", "(", "b", ".", "x", "-", "b", ".", "w", "/", "2.", ")", "*", "w", ")", ")", "\n", "right", "=", "int", "(", "round", "(", "(", "b", ".", "x", "+", "b", ".", "w", "/", "2.", ")", "*", "w", ")", ")", "\n", "top", "=", "int", "(", "round", "(", "(", "b", ".", "y", "-", "b", ".", "h", "/", "2.", ")", "*", "h", ")", ")", "\n", "bot", "=", "int", "(", "round", "(", "(", "b", ".", "y", "+", "b", ".", "h", "/", "2.", ")", "*", "h", ")", ")", "\n", "if", "left", "<", "0", ":", "\n", "                ", "left", "=", "0", "\n", "", "if", "right", ">", "w", "-", "1", ":", "\n", "                ", "right", "=", "w", "-", "1", "\n", "", "if", "top", "<", "0", ":", "\n", "                ", "top", "=", "0", "\n", "", "if", "bot", ">", "h", "-", "1", ":", "\n", "                ", "bot", "=", "h", "-", "1", "\n", "\n", "", "x_box", "=", "left", "\n", "y_box", "=", "top", "\n", "w_box", "=", "right", "-", "left", "\n", "h_box", "=", "bot", "-", "top", "\n", "# print({\"x\":x_box,\"y\":y_box,\"w\":w_box,\"h\":h_box,\"conf\":max_prob})", "\n", "outboxes", ".", "append", "(", "{", "\"x\"", ":", "x_box", ",", "\"y\"", ":", "y_box", ",", "\"w\"", ":", "w_box", ",", "\"h\"", ":", "h_box", ",", "\"conf\"", ":", "float", "(", "max_prob", ")", "}", ")", "\n", "\n", "if", "annotate", ":", "\n", "                ", "thick", "=", "int", "(", "(", "h", "+", "w", ")", "/", "300", ")", "\n", "mess", "=", "'%03.3f'", "%", "max_prob", "\n", "cv2", ".", "rectangle", "(", "imgcv", ",", "(", "left", ",", "top", ")", ",", "(", "right", ",", "bot", ")", ",", "colors", "[", "max_indx", "]", ",", "thick", ")", "\n", "cv2", ".", "putText", "(", "imgcv", ",", "mess", ",", "(", "left", "+", "thick", "*", "4", ",", "top", "+", "thick", "*", "6", ")", ",", "0", ",", "1e-3", "*", "h", ",", "colors", "[", "max_indx", "]", ",", "thick", "//", "3", ")", "\n", "\n", "", "", "", "return", "outboxes", ",", "imgcv", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.preprocess": [[234, 243], ["cv2.imread", "cv2.resize", "numpy.expand_dims"], "function", ["None"], ["", "def", "preprocess", "(", "img_path", ",", "w", "=", "544", ",", "h", "=", "544", ")", ":", "\n", "    ", "imgcv", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "if", "imgcv", "is", "None", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", "\n", "", "imgcv_resized", "=", "cv2", ".", "resize", "(", "imgcv", ",", "(", "w", ",", "h", ")", ")", "\n", "img_input", "=", "imgcv_resized", "/", "255.", "\n", "img_input", "=", "img_input", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "img_input", "=", "np", ".", "expand_dims", "(", "img_input", ",", "axis", "=", "0", ")", "\n", "return", "imgcv", ",", "imgcv_resized", ",", "img_input", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.load_graph": [[245, 254], ["tensorflow.io.gfile.GFile", "tensorflow.compat.v1.GraphDef", "tf.compat.v1.GraphDef.ParseFromString", "tensorflow.Graph().as_default", "tensorflow.import_graph_def", "f.read", "tensorflow.Graph"], "function", ["None"], ["", "def", "load_graph", "(", "frozen_graph_filename", ")", ":", "\n", "# citation: figure_separator is taken from", "\n", "# https://blog.metaflow.fr/tensorflow-how-to-freeze-a-model-and-serve-it-with-a-python-api-d4f3596b3adc#.137byfk9k", "\n", "    ", "with", "tf", ".", "io", ".", "gfile", ".", "GFile", "(", "frozen_graph_filename", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "graph_def", "=", "tf", ".", "compat", ".", "v1", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", "as", "graph", ":", "\n", "        ", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "\"\"", ")", "\n", "", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.figure_separator.split_figure": [[256, 274], ["PIL.Image.open", "len", "shutil.copy", "Image.open.crop", "im.crop.save", "filenames.append"], "function", ["None"], ["", "def", "split_figure", "(", "src", ",", "subfigures", ",", "dest_dir", ")", ":", "\n", "    ", "if", "len", "(", "subfigures", ")", "<=", "1", ":", "\n", "        ", "pathname", "=", "dest_dir", "/", "f'{src.stem}{src.suffix}'", "\n", "shutil", ".", "copy", "(", "src", ",", "pathname", ")", "\n", "return", "[", "pathname", "]", "\n", "\n", "", "im", "=", "Image", ".", "open", "(", "src", ")", "\n", "filenames", "=", "[", "]", "\n", "for", "subfigure", "in", "subfigures", ":", "\n", "        ", "left", "=", "subfigure", "[", "'x'", "]", "\n", "top", "=", "subfigure", "[", "'y'", "]", "\n", "right", "=", "left", "+", "subfigure", "[", "'w'", "]", "\n", "bottom", "=", "top", "+", "subfigure", "[", "'h'", "]", "\n", "subim", "=", "im", ".", "crop", "(", "(", "left", ",", "top", ",", "right", ",", "bottom", ")", ")", "\n", "pathname", "=", "dest_dir", "/", "f'{src.stem}_{left}x{top}_{right}x{bottom}{src.suffix}'", "\n", "subim", ".", "save", "(", "pathname", ")", "\n", "filenames", ".", "append", "(", "pathname", ")", "\n", "", "return", "filenames", "", "", ""]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_bioc.get_bioc": [[22, 29], ["urllib.request.urlopen", "urllib.request.urlopen", "urllib.request.urlopen.read", "response.read.decode", "open", "fp.write"], "function", ["None"], ["def", "get_bioc", "(", "pmid", ",", "dest", ")", ":", "\n", "    ", "url", "=", "f'https://www.ncbi.nlm.nih.gov/research/bionlp/RESTful/pmcoa.cgi/BioC_xml/{pmid}/unicode'", "\n", "response", "=", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", "\n", "data", "=", "response", ".", "read", "(", ")", "\n", "text", "=", "data", ".", "decode", "(", "'utf-8'", ")", "\n", "with", "open", "(", "dest", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "write", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_bioc.get_bioc_f": [[31, 55], ["pandas.read_csv", "collections.Counter", "tqdm.tqdm", "collections.Counter.most_common", "zip", "biocfile.exists", "print", "len", "figurex.utils.is_file_not_empty", "get_bioc.get_bioc", "open"], "function", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.utils.is_file_not_empty", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_bioc.get_bioc"], ["", "", "def", "get_bioc_f", "(", "src", ",", "dest_dir", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "src", ",", "dtype", "=", "str", ")", "\n", "cnt", "=", "collections", ".", "Counter", "(", ")", "\n", "for", "pmid", ",", "pmc", "in", "tqdm", ".", "tqdm", "(", "zip", "(", "df", "[", "'pmid'", "]", ",", "df", "[", "'pmcid'", "]", ")", ",", "total", "=", "len", "(", "df", ")", ")", ":", "\n", "        ", "if", "not", "pmid", ":", "\n", "            ", "continue", "\n", "\n", "", "cnt", "[", "'total pmc'", "]", "+=", "1", "\n", "biocfile", "=", "dest_dir", "/", "f'{pmc}.xml'", "\n", "\n", "if", "biocfile", ".", "exists", "(", ")", ":", "\n", "            ", "if", "is_file_not_empty", "(", "biocfile", ")", ":", "\n", "                ", "cnt", "[", "'total bioc'", "]", "+=", "1", "\n", "", "continue", "\n", "\n", "", "try", ":", "\n", "            ", "get_bioc", "(", "pmid", ",", "biocfile", ")", "\n", "cnt", "[", "'total_bioc'", "]", "+=", "1", "\n", "cnt", "[", "'new bioc'", "]", "+=", "1", "\n", "", "except", "urllib", ".", "error", ".", "HTTPError", ":", "\n", "            ", "with", "open", "(", "biocfile", ",", "'w'", ")", "as", "_", ":", "\n", "                ", "pass", "\n", "", "", "", "for", "k", ",", "v", "in", "cnt", ".", "most_common", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "':'", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_medline.get_medline": [[22, 38], ["Bio.Entrez.efetch", "Bio.Medline.parse", "Entrez.efetch.read", "Entrez.efetch.close", "io.StringIO", "open", "json.dump", "print", "str", "json.dumps"], "function", ["None"], ["def", "get_medline", "(", "pmcids", ",", "dst_dir", ")", ":", "\n", "    ", "fetch_handle", "=", "Entrez", ".", "efetch", "(", "db", "=", "\"pmc\"", ",", "rettype", "=", "\"medline\"", ",", "retmode", "=", "\"text\"", ",", "id", "=", "','", ".", "join", "(", "pmcids", ")", ")", "\n", "try", ":", "\n", "        ", "data", "=", "fetch_handle", ".", "read", "(", ")", "\n", "fetch_handle", ".", "close", "(", ")", "\n", "", "except", ":", "\n", "        ", "return", "\n", "", "for", "record", "in", "Medline", ".", "parse", "(", "StringIO", "(", "data", ")", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "pmcid", "=", "record", "[", "'PMC'", "]", "\n", "dst", "=", "dst_dir", "/", "f'{pmcid}.json'", "\n", "with", "open", "(", "dst", ",", "'w'", ")", "as", "fp", ":", "\n", "                ", "json", ".", "dump", "(", "record", ",", "fp", ",", "indent", "=", "2", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "'Cannot find'", ",", "str", "(", "json", ".", "dumps", "(", "record", ",", "indent", "=", "2", ")", ")", ")", "\n", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_medline.get_medline_file": [[40, 54], ["pandas.read_csv", "list", "print", "tqdm.tqdm", "len", "get_medline.get_medline", "len", "dst.exists", "pmcids.append", "len", "get_medline.get_medline"], "function", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_medline.get_medline", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_medline.get_medline"], ["", "", "", "def", "get_medline_file", "(", "src", ",", "dst_dir", ",", "batch_size", "=", "200", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "src", ")", "\n", "total_pmcids", "=", "list", "(", "df", "[", "'pmcid'", "]", ")", "\n", "print", "(", "'Total pmcids'", ",", "len", "(", "total_pmcids", ")", ")", "\n", "pmcids", "=", "[", "]", "\n", "for", "pmcid", "in", "tqdm", ".", "tqdm", "(", "df", "[", "'pmcid'", "]", ",", "total", "=", "len", "(", "df", "[", "'pmcid'", "]", ")", ")", ":", "\n", "        ", "dst", "=", "dst_dir", "/", "f'{pmcid}.json'", "\n", "if", "not", "dst", ".", "exists", "(", ")", ":", "\n", "            ", "pmcids", ".", "append", "(", "pmcid", ")", "\n", "if", "len", "(", "pmcids", ")", "==", "batch_size", ":", "\n", "                ", "get_medline", "(", "pmcids", ",", "dst_dir", ")", "\n", "pmcids", "=", "[", "]", "\n", "", "", "", "if", "pmcids", ":", "\n", "        ", "get_medline", "(", "pmcids", ",", "dst_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_url.get_figure_link": [[32, 48], ["open", "bioc.load", "p.text.replace", "len", "p.text.replace", "Figure", "figures.append"], "function", ["None"], ["def", "get_figure_link", "(", "pmc", ",", "bioc_file", ")", ":", "\n", "    ", "with", "open", "(", "bioc_file", ",", "encoding", "=", "'utf8'", ")", "as", "fp", ":", "\n", "        ", "c", "=", "bioc", ".", "load", "(", "fp", ")", "\n", "\n", "", "figures", "=", "[", "]", "\n", "for", "doc", "in", "c", ".", "documents", ":", "\n", "        ", "for", "p", "in", "doc", ".", "passages", ":", "\n", "            ", "if", "len", "(", "p", ".", "text", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "p", ".", "text", "=", "p", ".", "text", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "if", "'file'", "in", "p", ".", "infons", "and", "'type'", "in", "p", ".", "infons", "and", "p", ".", "infons", "[", "'type'", "]", "in", "FIG_PASSAGE", ":", "\n", "                ", "url", "=", "f'https://www.ncbi.nlm.nih.gov/pmc/articles/{pmc}/bin/{p.infons[\"file\"]}'", "\n", "caption", "=", "p", ".", "text", ".", "replace", "(", "'\\n'", ",", "' '", ")", "\n", "f", "=", "Figure", "(", "pmc", ",", "url", ",", "caption", ")", "\n", "figures", ".", "append", "(", "f", ")", "\n", "", "", "", "return", "figures", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_url.get_figure_caption": [[50, 71], ["pandas.read_csv", "tqdm.tqdm", "pandas.DataFrame", "df.drop_duplicates.drop_duplicates", "df.drop_duplicates.to_csv", "dest.exists", "print", "figurex.utils.is_file_not_empty", "len", "get_figure_url.get_figure_link", "data.append", "f.url.rfind"], "function", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.utils.is_file_not_empty", "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_figure_url.get_figure_link"], ["", "def", "get_figure_caption", "(", "src", ",", "dest", ",", "bioc_dir", ",", "overwrite", "=", "False", ")", ":", "\n", "    ", "if", "dest", ".", "exists", "(", ")", "and", "not", "overwrite", ":", "\n", "        ", "print", "(", "'%s will not be overwritten'", "%", "dest", ".", "name", ")", "\n", "return", "\n", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "src", ",", "dtype", "=", "str", ")", "\n", "\n", "data", "=", "[", "]", "\n", "for", "pmc", "in", "tqdm", ".", "tqdm", "(", "df", "[", "'pmcid'", "]", ",", "total", "=", "len", "(", "df", ")", ")", ":", "\n", "        ", "biocfile", "=", "bioc_dir", "/", "f'{pmc}.xml'", "\n", "if", "is_file_not_empty", "(", "biocfile", ")", ":", "\n", "            ", "figures", "=", "get_figure_link", "(", "pmc", ",", "biocfile", ")", "\n", "for", "f", "in", "figures", ":", "\n", "                ", "data", ".", "append", "(", "{", "\n", "'pmcid'", ":", "pmc", ",", "\n", "'figure url'", ":", "f", ".", "url", "[", "f", ".", "url", ".", "rfind", "(", "'/'", ")", "+", "1", ":", "]", "\n", "}", ")", "\n", "\n", "", "", "", "df", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "df", "=", "df", ".", "drop_duplicates", "(", ")", "\n", "df", ".", "to_csv", "(", "dest", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_pmc_from_pubmed.get_pmc_from_pmid": [[20, 33], ["requests.get", "io.StringIO", "pandas.read_csv", "zip", "len", "requests.get.text.strip", "pandas.isna"], "function", ["None"], ["def", "get_pmc_from_pmid", "(", "pmids", ":", "List", "[", "str", "]", ")", "->", "Dict", ":", "\n", "    ", "assert", "len", "(", "pmids", ")", "<=", "200", "\n", "url", "=", "'https://www.ncbi.nlm.nih.gov/pmc/utils/idconv/v1.0/?tool=my_tool&format=csv&email=yifan.peng@nih.gov&ids='", "\n", "url", "+=", "','", ".", "join", "(", "pmids", ")", "\n", "x", "=", "requests", ".", "get", "(", "url", ")", "\n", "f", "=", "io", ".", "StringIO", "(", "x", ".", "text", ".", "strip", "(", ")", ")", "\n", "pmcdf", "=", "pd", ".", "read_csv", "(", "f", ",", "dtype", "=", "str", ")", "\n", "\n", "rst", "=", "{", "}", "\n", "for", "pmid", ",", "pmcid", ",", "doi", "in", "zip", "(", "pmcdf", "[", "'PMID'", "]", ",", "pmcdf", "[", "'PMCID'", "]", ",", "pmcdf", "[", "'DOI'", "]", ")", ":", "\n", "        ", "if", "not", "pd", ".", "isna", "(", "pmcid", ")", ":", "\n", "            ", "rst", "[", "pmid", "]", "=", "{", "'pmcid'", ":", "pmcid", ",", "'doi'", ":", "doi", "}", "\n", "", "", "return", "rst", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_pmc_from_pubmed.get_pmc_from_pmid_f": [[35, 63], ["pandas.read_csv", "set", "list", "tqdm.tqdm", "pandas.DataFrame", "pd.concat.sort_values", "pd.concat.to_csv", "pandas.read_csv", "range", "get_pmc_from_pubmed.get_pmc_from_pmid", "get_pmc_from_pmid.items", "pandas.concat", "pd.read_csv.iterrows", "set", "len", "data.append"], "function", ["home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.get_pmc_from_pubmed.get_pmc_from_pmid"], ["", "def", "get_pmc_from_pmid_f", "(", "src", ",", "dest", ",", "history", "=", "None", ")", ":", "\n", "    ", "litcovid_df", "=", "pd", ".", "read_csv", "(", "src", ",", "sep", "=", "'\\t'", ",", "dtype", "=", "str", ",", "comment", "=", "'#'", ")", "\n", "litcovid_data", "=", "{", "row", "[", "'pmid'", "]", ":", "row", "for", "_", ",", "row", "in", "litcovid_df", ".", "iterrows", "(", ")", "}", "\n", "\n", "new_pmids", "=", "set", "(", "litcovid_df", "[", "'pmid'", "]", ")", "\n", "if", "history", "is", "not", "None", ":", "\n", "        ", "history_df", "=", "pd", ".", "read_csv", "(", "history", ",", "dtype", "=", "str", ")", "\n", "new_pmids", "=", "new_pmids", "-", "set", "(", "history_df", "[", "'pmid'", "]", ")", "\n", "\n", "", "pmids", "=", "list", "(", "new_pmids", ")", "\n", "data", "=", "[", "]", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "0", ",", "len", "(", "pmids", ")", ",", "200", ")", ")", ":", "\n", "        ", "results", "=", "get_pmc_from_pmid", "(", "pmids", "[", "i", ":", "i", "+", "200", "]", ")", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "x", "=", "{", "\n", "'pmid'", ":", "k", ",", "\n", "'pmcid'", ":", "v", "[", "'pmcid'", "]", ",", "\n", "'doi'", ":", "v", "[", "'doi'", "]", ",", "\n", "'title'", ":", "litcovid_data", "[", "k", "]", "[", "'title'", "]", ",", "\n", "'journal'", ":", "litcovid_data", "[", "k", "]", "[", "'journal'", "]", ",", "\n", "}", "\n", "data", ".", "append", "(", "x", ")", "\n", "\n", "", "", "new_df", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "if", "history", "is", "not", "None", ":", "\n", "        ", "new_df", "=", "pd", ".", "concat", "(", "[", "history_df", ",", "new_df", "]", ",", "axis", "=", "0", ")", "\n", "", "new_df", ".", "sort_values", "(", "by", "=", "'pmid'", ",", "inplace", "=", "True", ")", "\n", "new_df", ".", "to_csv", "(", "dest", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.classify_cxr_ct.detect_normal_cxr_ct": [[24, 65], ["pandas.read_csv", "print", "print", "print", "df.assign.reset_index", "df.assign.assign", "keras.preprocessing.image.ImageDataGenerator", "keras.preprocessing.image.ImageDataGenerator.flow_from_dataframe", "print", "keras.models.load_model", "keras.models.load_model.predict_generator", "numpy.argmax", "df.assign.drop", "df.assign.assign", "pd.concat.to_csv", "pandas.read_csv", "pandas.DataFrame", "len", "len", "len", "len", "len", "len", "len", "pandas.concat", "pd.read_csv.merge", "df[].apply", "os.path.join"], "function", ["None"], ["def", "detect_normal_cxr_ct", "(", "model_pathname", ",", "src", ",", "dest", ",", "image_dir", ",", "x_col", "=", "'filename'", ",", "history", "=", "None", ",", "include_history", "=", "False", ")", ":", "\n", "    ", "if", "history", "is", "not", "None", ":", "\n", "        ", "history_df", "=", "pd", ".", "read_csv", "(", "history", ")", "\n", "", "else", ":", "\n", "        ", "history_df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "\n", "", "total_df", "=", "pd", ".", "read_csv", "(", "src", ")", "\n", "df", "=", "total_df", ".", "merge", "(", "history_df", ",", "how", "=", "'outer'", ",", "indicator", "=", "True", ")", ".", "loc", "[", "lambda", "x", ":", "x", "[", "'_merge'", "]", "==", "'left_only'", "]", "\n", "print", "(", "'total figures'", ",", "len", "(", "total_df", ")", ")", "\n", "print", "(", "'history figures'", ",", "len", "(", "history_df", ")", ")", "\n", "print", "(", "'new figures'", ",", "len", "(", "df", ")", ")", "\n", "\n", "df", "=", "df", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "df", "=", "df", ".", "assign", "(", "full_path", "=", "df", "[", "x_col", "]", ".", "apply", "(", "lambda", "x", ":", "os", ".", "path", ".", "join", "(", "image_dir", ",", "x", ")", ")", ")", "\n", "datagen", "=", "ImageDataGenerator", "(", "preprocessing_function", "=", "densenet", ".", "preprocess_input", ")", "\n", "generator", "=", "datagen", ".", "flow_from_dataframe", "(", "\n", "dataframe", "=", "df", ",", "\n", "target_size", "=", "(", "214", ",", "214", ")", ",", "\n", "x_col", "=", "'full_path'", ",", "\n", "class_mode", "=", "None", ",", "\n", "batch_size", "=", "32", ",", "\n", "shuffle", "=", "False", "\n", ")", "\n", "\n", "print", "(", "'Load from %s'", ",", "model_pathname", ")", "\n", "model", "=", "load_model", "(", "model_pathname", ")", "\n", "y_score", "=", "model", ".", "predict_generator", "(", "generator", ",", "verbose", "=", "1", ")", "\n", "\n", "columns", "=", "[", "'ct'", ",", "'cxr'", ",", "'nature'", "]", "\n", "y_pred", "=", "np", ".", "argmax", "(", "y_score", ",", "axis", "=", "1", ")", "\n", "predictions", "=", "[", "columns", "[", "x", "]", "for", "x", "in", "y_pred", "]", "\n", "assert", "len", "(", "predictions", ")", "==", "len", "(", "df", ")", ",", "'{} vs {}'", ".", "format", "(", "len", "(", "predictions", ")", ",", "len", "(", "df", ")", ")", "\n", "\n", "df", "=", "df", ".", "drop", "(", "[", "'full_path'", ",", "'_merge'", "]", ",", "axis", "=", "1", ")", "\n", "df", "=", "df", ".", "assign", "(", "prediction", "=", "predictions", ")", "\n", "# print(history_df.columns, df.columns)", "\n", "if", "include_history", ":", "\n", "        ", "result", "=", "pd", ".", "concat", "(", "[", "history_df", ",", "df", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "result", "=", "df", "\n", "", "result", ".", "to_csv", "(", "dest", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.collect_predictions_to_check.collect_cxr_ct": [[21, 80], ["pandas.read_csv", "df[].reset_index", "print", "collections.Counter", "tqdm.tqdm", "collections.Counter.most_common", "len", "len", "dst_image_dir.exists", "dst_image_dir.mkdir", "pandas.read_csv", "pd.read_csv.iterrows", "pd.read_csv.iterrows", "print", "sub_dst_image_dir.exists", "sub_dst_image_dir.mkdir", "len", "dst_img.exists", "shutil.copy", "df[].isin", "print", "exit"], "function", ["None"], ["def", "collect_cxr_ct", "(", "src", ",", "src_image_dir", ",", "dst_image_dir", ",", "gold_file", "=", "None", ",", "skip_gold", "=", "True", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "src", ")", "\n", "subdf", "=", "df", "[", "df", "[", "'prediction'", "]", ".", "isin", "(", "(", "'cxr'", ",", "'ct'", ")", ")", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "# subdf.to_csv(dst, index=None)", "\n", "print", "(", "len", "(", "df", ")", ",", "len", "(", "subdf", ")", ")", "\n", "cnt", "=", "collections", ".", "Counter", "(", ")", "\n", "\n", "if", "not", "dst_image_dir", ".", "exists", "(", ")", ":", "\n", "        ", "dst_image_dir", ".", "mkdir", "(", ")", "\n", "\n", "", "for", "label", "in", "[", "'ct'", ",", "'cxr'", ",", "'nature'", "]", ":", "\n", "        ", "sub_dst_image_dir", "=", "dst_image_dir", "/", "label", "\n", "if", "not", "sub_dst_image_dir", ".", "exists", "(", ")", ":", "\n", "            ", "sub_dst_image_dir", ".", "mkdir", "(", ")", "\n", "\n", "", "", "gs", "=", "{", "}", "\n", "if", "gold_file", "is", "not", "None", ":", "\n", "        ", "gold_df", "=", "pd", ".", "read_csv", "(", "gold_file", ")", "\n", "for", "i", ",", "row", "in", "gold_df", ".", "iterrows", "(", ")", ":", "\n", "            ", "gs", "[", "row", "[", "'subfigure filename'", "]", "]", "=", "row", "[", "'label'", "]", "\n", "\n", "", "", "for", "_", ",", "row", "in", "tqdm", ".", "tqdm", "(", "df", ".", "iterrows", "(", ")", ",", "total", "=", "len", "(", "df", ")", ")", ":", "\n", "        ", "subfig", "=", "row", "[", "'subfigure filename'", "]", "\n", "src_img", "=", "src_image_dir", "/", "subfig", "\n", "if", "subfig", "in", "gs", ":", "\n", "            ", "if", "skip_gold", ":", "\n", "                ", "continue", "\n", "", "prediction", "=", "gs", "[", "subfig", "]", "\n", "", "else", ":", "\n", "            ", "prediction", "=", "row", "[", "'prediction'", "]", "\n", "\n", "", "if", "prediction", "in", "[", "'cxr'", ",", "'ct'", "]", ":", "\n", "            ", "dst_img", "=", "dst_image_dir", "/", "prediction", "/", "subfig", "\n", "if", "dst_img", ".", "exists", "(", ")", ":", "\n", "                ", "cnt", "[", "'skip'", "]", "+=", "1", "\n", "continue", "\n", "", "try", ":", "\n", "                ", "shutil", ".", "copy", "(", "src_img", ",", "dst_img", ")", "\n", "cnt", "[", "'copy'", "]", "+=", "1", "\n", "", "except", ":", "\n", "                ", "cnt", "[", "'Cannot found'", "]", "+=", "1", "\n", "print", "(", "'Cannot find'", ",", "src_img", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# # whole figure", "\n", "# src_image_dir = top / 'figures'", "\n", "# for _, row in tqdm.tqdm(subdf.iterrows()):", "\n", "#     src_img = src_image_dir / row['figure filename']", "\n", "#     if row['figure filename'] in gs:", "\n", "#         prediction = gs[row['figure filename']]", "\n", "#     else:", "\n", "#         prediction = row['prediction']", "\n", "#     dst_img = dst_image_dir / prediction / row['figure filename']", "\n", "#     if dst_img.exists():", "\n", "#         continue", "\n", "#     shutil.copy(src_img, dst_img)", "\n", "\n", "", "", "", "for", "k", ",", "v", "in", "cnt", ".", "most_common", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "':'", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.utils.is_file_empty": [[4, 6], ["os.path.exists", "os.stat"], "function", ["None"], ["def", "is_file_empty", "(", "pathanme", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "exists", "(", "pathanme", ")", "and", "os", ".", "stat", "(", "pathanme", ")", ".", "st_size", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.utils.is_file_not_empty": [[7, 9], ["os.path.exists", "os.stat"], "function", ["None"], ["", "def", "is_file_not_empty", "(", "pathanme", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "exists", "(", "pathanme", ")", "and", "os", ".", "stat", "(", "pathanme", ")", ".", "st_size", "!=", "0", "", "", ""]], "home.repos.pwc.inspect_result.ncbi-nlp_COVID-19-CT-CXR.figurex.collect_gold_standard.collect_gold_standard": [[21, 59], ["pandas.read_csv", "set", "collections.Counter", "pandas.read_csv", "pd.concat.drop", "tqdm.tqdm", "pandas.DataFrame", "pd.concat.drop_duplicates", "pandas.concat", "pd.concat.to_csv", "collections.Counter.most_common", "pd.concat.iterrows", "data.append", "print", "os.scandir", "src.name.find", "len"], "function", ["None"], ["def", "collect_gold_standard", "(", "src", ",", "dst", ",", "gold_dir", ",", "previous_gold", ")", ":", "\n", "    ", "previous_gold_df", "=", "pd", ".", "read_csv", "(", "previous_gold", ",", "dtype", "=", "str", ")", "\n", "subfigure_filenames", "=", "set", "(", "previous_gold_df", "[", "'subfigure filename'", "]", ")", "\n", "\n", "gs", "=", "{", "}", "\n", "for", "label", "in", "[", "'ct'", ",", "'cxr'", "]", ":", "\n", "        ", "with", "os", ".", "scandir", "(", "gold_dir", "/", "label", ")", "as", "it", ":", "\n", "            ", "for", "entry", "in", "it", ":", "\n", "                ", "gs", "[", "entry", ".", "name", "]", "=", "label", "\n", "\n", "", "", "", "cnt", "=", "collections", ".", "Counter", "(", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "src", ",", "dtype", "=", "str", ")", "\n", "df", "=", "df", ".", "drop", "(", "'prediction'", ",", "axis", "=", "1", ")", "\n", "\n", "time", "=", "src", ".", "name", "[", ":", "src", ".", "name", ".", "find", "(", "'.'", ")", "]", "\n", "data", "=", "[", "]", "\n", "for", "_", ",", "row", "in", "tqdm", ".", "tqdm", "(", "df", ".", "iterrows", "(", ")", ",", "total", "=", "len", "(", "df", ")", ")", ":", "\n", "        ", "subfig", "=", "row", "[", "'subfigure filename'", "]", "\n", "if", "subfig", "in", "gs", ":", "\n", "            ", "label", "=", "gs", "[", "subfig", "]", "\n", "", "else", ":", "\n", "            ", "label", "=", "'nature'", "\n", "cnt", "[", "'skip'", "]", "+=", "1", "\n", "\n", "", "row", "[", "'label'", "]", "=", "label", "\n", "row", "[", "'insert_time'", "]", "=", "time", "\n", "\n", "if", "subfig", "in", "subfigure_filenames", ":", "\n", "            ", "cnt", "[", "'Duplicate'", "]", "+=", "1", "\n", "", "data", ".", "append", "(", "row", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "data", ")", "\n", "df", "=", "df", ".", "drop_duplicates", "(", ")", "\n", "df", "=", "pd", ".", "concat", "(", "[", "previous_gold_df", ",", "df", "]", ",", "axis", "=", "0", ")", "\n", "df", ".", "to_csv", "(", "dst", ",", "index", "=", "False", ")", "\n", "\n", "for", "k", ",", "v", "in", "cnt", ".", "most_common", "(", ")", ":", "\n", "        ", "print", "(", "k", ",", "v", ")", "\n", "\n"]]}